[
    {
        "question_id": 0,
        "answer_sql": "SELECT MAX(`Percent (%) Eligible Free (K-12)`) AS HighestEligibleFreeRate FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.County = 'Alameda';"
    },
    {
        "question_id": 1,
        "answer_sql": ""
    },
    {
        "question_id": 2,
        "answer_sql": ""
    },
    {
        "question_id": 3,
        "answer_sql": ""
    },
    {
        "question_id": 4,
        "answer_sql": "SELECT T1.Phone FROM schools AS T1 JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`Charter School (Y/N)` = 1 AND T1.OpenDate > '2000-01-01';"
    },
    {
        "question_id": 5,
        "answer_sql": "SELECT COUNT(DISTINCT satscores.cds) AS num_schools\nFROM satscores\nJOIN schools ON satscores.cds = schools.CDSCode\nWHERE satscores.rtype = 'SAT'\n  AND satscores.sname IS NULL\n  AND satscores.dname IS NULL\n  AND satscores.cname IS NULL\n  AND satscores.enroll12 = 0\n  AND satscores.NumTstTakr = 0\n  AND satscores.AvgScrMath < 400\n  AND schools.Virtual = 'F';"
    },
    {
        "question_id": 6,
        "answer_sql": "SELECT s.CDSCode, s.School, s.Street, s.City, s.State, s.Latitude, s.Longitude FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds WHERE ss.enroll12 > 500 AND (s.Magnet = 1 OR s.GSserved = 'Magnet')"
    },
    {
        "question_id": 7,
        "answer_sql": ""
    },
    {
        "question_id": 8,
        "answer_sql": ""
    },
    {
        "question_id": 9,
        "answer_sql": ""
    },
    {
        "question_id": 10,
        "answer_sql": ""
    },
    {
        "question_id": 11,
        "answer_sql": ""
    },
    {
        "question_id": 12,
        "answer_sql": "SELECT frpm.`Percent (%) Eligible Free (Ages 5-17)` AS HighestEligibleFreeRate FROM frpm JOIN satscores ON frpm.CDSCode = satscores.cds WHERE satscores.AvgScrRead > 0.3 ORDER BY frpm.`Percent (%) Eligible Free (Ages 5-17)` DESC LIMIT 1;"
    },
    {
        "question_id": 13,
        "answer_sql": "SELECT T1.Phone FROM schools AS T1 JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T2.AvgScrRead > 0 AND T2.AvgScrMath > 0 AND T2.AvgScrWrite > 0 ORDER BY T2.AvgScrRead / T2.NumTstTakr DESC LIMIT 3;"
    },
    {
        "question_id": 14,
        "answer_sql": ""
    },
    {
        "question_id": 15,
        "answer_sql": "SELECT satscores.cds, AVG(satscores.AvgScrRead) AS AvgScrRead FROM satscores JOIN frpm ON satscores.cds = frpm.CDSCode JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.StatusType = 'Active' GROUP BY satscores.cds ORDER BY AvgScrRead DESC LIMIT 1;"
    },
    {
        "question_id": 16,
        "answer_sql": "SELECT COUNT(schools.School) AS num_schools FROM schools JOIN frpm ON schools.CDSCode = frpm.CDSCode JOIN satscores ON schools.CDSCode = satscores.cds WHERE schools.County = 'Alameda' AND satscores.enroll12 < 100;"
    },
    {
        "question_id": 17,
        "answer_sql": ""
    },
    {
        "question_id": 18,
        "answer_sql": ""
    },
    {
        "question_id": 19,
        "answer_sql": ""
    },
    {
        "question_id": 20,
        "answer_sql": ""
    },
    {
        "question_id": 21,
        "answer_sql": "SELECT COUNT(*) FROM schools AS S JOIN frpm AS FR ON S.CDSCode = FR.CDSCode JOIN satscores AS SAT ON S.CDSCode = SAT.cds WHERE S.County = 'Los Angeles' AND SAT.AvgScrRead > 500 AND SAT.AvgScrMath < 700;"
    },
    {
        "question_id": 22,
        "answer_sql": "SELECT s.CDSCode, s.School, COUNT(satscores.cds) AS NumTstTakr FROM schools s JOIN satscores ON s.CDSCode = satscores.cds GROUP BY s.CDSCode, s.School ORDER BY NumTstTakr DESC LIMIT 1;"
    },
    {
        "question_id": 23,
        "answer_sql": ""
    },
    {
        "question_id": 24,
        "answer_sql": ""
    },
    {
        "question_id": 25,
        "answer_sql": "SELECT s.FundingType FROM frpm f JOIN schools s ON f.CDSCode = s.CDSCode JOIN satscores sa ON s.CDSCode = sa.cds WHERE sa.AvgScrMath > 400 GROUP BY s.FundingType;"
    },
    {
        "question_id": 26,
        "answer_sql": ""
    },
    {
        "question_id": 27,
        "answer_sql": "SELECT satscores.cds AS cds, satscores.sname AS school_name, satscores.AvgScrWrite AS avg_scr_write, schools.Phone AS phone_number FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE (schools.OpenDate > '1991-01-01' OR schools.ClosedDate < '2000-01-01') ORDER BY satscores.AvgScrWrite DESC;"
    },
    {
        "question_id": 28,
        "answer_sql": ""
    },
    {
        "question_id": 29,
        "answer_sql": ""
    },
    {
        "question_id": 30,
        "answer_sql": ""
    },
    {
        "question_id": 31,
        "answer_sql": ""
    },
    {
        "question_id": 32,
        "answer_sql": ""
    },
    {
        "question_id": 33,
        "answer_sql": ""
    },
    {
        "question_id": 34,
        "answer_sql": ""
    },
    {
        "question_id": 35,
        "answer_sql": ""
    },
    {
        "question_id": 36,
        "answer_sql": ""
    },
    {
        "question_id": 37,
        "answer_sql": "SELECT schools.Street, schools.City, schools.Zip, schools.State FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE schools.Street IS NOT NULL AND schools.City IS NOT NULL AND schools.Zip IS NOT NULL AND schools.State IS NOT NULL ORDER BY satscores.NumGE1500 / satscores.NumTstTakr ASC LIMIT 1;"
    },
    {
        "question_id": 38,
        "answer_sql": "SELECT satscores.cds, satscores.sname, satscores.dname, satscores.cname, satscores.enroll12, satscores.NumTstTakr, satscores.AvgScrRead, satscores.AvgScrMath, satscores.AvgScrWrite, satscores.NumGE1500 FROM satscores JOIN frpm ON satscores.cds = frpm.CDSCode JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE satscores.enroll12 BETWEEN 2000 AND 3000;"
    },
    {
        "question_id": 39,
        "answer_sql": "SELECT AVG(satscores.NumTstTakr) AS AverageTestTakers FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE schools.OpenDate BETWEEN '1980-01-01' AND '1980-12-31';"
    },
    {
        "question_id": 40,
        "answer_sql": ""
    },
    {
        "question_id": 41,
        "answer_sql": "SELECT s.CDSCode, s.School, s.Virtual, AVG(sc.AvgScrRead) AS AvgScrRead FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode JOIN satscores sc ON s.CDSCode = sc.cds WHERE s.Virtual = 'F' GROUP BY s.CDSCode, s.School, s.Virtual ORDER BY AvgScrRead DESC LIMIT 5;"
    },
    {
        "question_id": 42,
        "answer_sql": ""
    },
    {
        "question_id": 43,
        "answer_sql": ""
    },
    {
        "question_id": 44,
        "answer_sql": "SELECT s.City, AVG(sc.AvgScrWrite) AS AvgWriteScore FROM schools s JOIN satscores sc ON s.CDSCode = sc.cds WHERE sc.NumTstTakr >= 1500 GROUP BY s.City ORDER BY sc.NumTstTakr DESC LIMIT 1;"
    },
    {
        "question_id": 45,
        "answer_sql": ""
    },
    {
        "question_id": 46,
        "answer_sql": ""
    },
    {
        "question_id": 47,
        "answer_sql": ""
    },
    {
        "question_id": 48,
        "answer_sql": "SELECT COUNT(CASE WHEN DOC = 54 THEN CDSCode ELSE NULL END) / COUNT(CASE WHEN DOC = 52 THEN CDSCode ELSE NULL END) AS Ratio FROM schools WHERE DOC IN (52, 54);"
    },
    {
        "question_id": 49,
        "answer_sql": ""
    },
    {
        "question_id": 50,
        "answer_sql": "SELECT schools.StreetAbr AS PostalStreetAddress, schools.Street AS MailingStreetAddress, schools.School AS SchoolName FROM schools WHERE schools.StreetAbr = (SELECT MAX(StreetAbr) FROM schools) ORDER BY schools.StreetAbr DESC LIMIT 1;"
    },
    {
        "question_id": 51,
        "answer_sql": "SELECT satscores.cds, satscores.sname, schools.Street FROM satscores JOIN frpm ON satscores.cds = frpm.CDSCode JOIN schools ON frpm.CDSCode = schools.CDSCode ORDER BY satscores.AvgScrRead ASC LIMIT 1;"
    },
    {
        "question_id": 52,
        "answer_sql": "SELECT COUNT(DISTINCT satscores.cds) AS total_schools FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE satscores.AvgScrRead + satscores.AvgScrMath + satscores.AvgScrWrite >= 1500 AND schools.City = 'Lakeport';"
    },
    {
        "question_id": 53,
        "answer_sql": "SELECT COUNT(s2.enroll12) AS test_takers\nFROM schools s1\nJOIN frpm f ON s1.CDSCode = f.CDSCode\nJOIN schools_admins sa ON s1.CDSCode = sa.CDSCode\nJOIN satscores s2 ON s1.CDSCode = s2.cds\nWHERE sa.City = 'Fresno'"
    },
    {
        "question_id": 54,
        "answer_sql": ""
    },
    {
        "question_id": 55,
        "answer_sql": "SELECT COUNT(CASE WHEN T2.State = 'CA' THEN T1.CDSCode ELSE NULL END) / COUNT(CASE WHEN T2.State = 'CA' THEN T2.CDSCode ELSE NULL END) AS Ratio FROM schools AS T1 JOIN schools_admins AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.State = 'CA'"
    },
    {
        "question_id": 56,
        "answer_sql": "SELECT COUNT(*) AS Active_Schools FROM schools WHERE State = 'CA' AND (AdmFName1 IS NOT NULL OR AdmLName1 IS NOT NULL OR AdmEmail1 IS NOT NULL OR AdmFName2 IS NOT NULL OR AdmLName2 IS NOT NULL OR AdmEmail2 IS NOT NULL OR AdmFName3 IS NOT NULL OR AdmLName3 IS NOT NULL OR AdmEmail3 IS NOT NULL);"
    },
    {
        "question_id": 57,
        "answer_sql": ""
    },
    {
        "question_id": 58,
        "answer_sql": "SELECT AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3 FROM schools WHERE Zip = '95203-3704';"
    },
    {
        "question_id": 59,
        "answer_sql": ""
    },
    {
        "question_id": 60,
        "answer_sql": "SELECT Website FROM schools WHERE Virtual = 'P' AND Charter = 1 AND County = 'San Joaquin';"
    },
    {
        "question_id": 61,
        "answer_sql": "SELECT COUNT(*) FROM schools WHERE DOC = '52' AND Charter = 1 AND City = 'Hickman';"
    },
    {
        "question_id": 62,
        "answer_sql": ""
    },
    {
        "question_id": 63,
        "answer_sql": ""
    },
    {
        "question_id": 64,
        "answer_sql": "SELECT COUNT(*) AS Total_Schools FROM schools JOIN schools_admins ON schools.CDSCode = schools_admins.CDSCode JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE schools.StreetAbr = 'HICKMAN' AND schools.Charter = 0 AND schools.CharterNum = '00D4';"
    },
    {
        "question_id": 65,
        "answer_sql": "SELECT CAST(SUM(CASE WHEN FundingType = 'Local' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(CASE WHEN FundingType = 'Local' THEN 1 ELSE NULL END) AS Ratio FROM schools WHERE County = 'Santa Clara';"
    },
    {
        "question_id": 66,
        "answer_sql": "SELECT COUNT(DISTINCT s.CDSCode) AS DirectlyFundedSchools FROM schools s JOIN schools_admins sa ON s.CDSCode = sa.CDSCode JOIN frpm f ON s.CDSCode = f.CDSCode WHERE s.FundingType = 'Directly Funded' AND f.`Academic Year` BETWEEN '2000-01-01' AND '2005-12-31' AND s.County = 'Stanislaus';"
    },
    {
        "question_id": 67,
        "answer_sql": "SELECT SUM(CASE WHEN T2.CDSCode LIKE '%Community College District%' THEN 1 ELSE 0 END) AS TotalCCDCClosure FROM schools AS T1 JOIN schools_admins AS T2 ON T1.CDSCode = T2.CDSCode JOIN frpm AS T3 ON T1.CDSCode = T3.CDSCode WHERE T1.City = 'San Francisco' AND T3.`Academic Year` = '1989';"
    },
    {
        "question_id": 68,
        "answer_sql": ""
    },
    {
        "question_id": 69,
        "answer_sql": ""
    },
    {
        "question_id": 70,
        "answer_sql": "SELECT COUNT(DISTINCT CASE WHEN schools.StatusType = 'Active' THEN schools.CDSCode ELSE NULL END) AS Active_Districts, COUNT(DISTINCT CASE WHEN schools.StatusType = 'Closed' THEN schools.CDSCode ELSE NULL END) AS Closed_Districts FROM schools JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE schools.StatusType = 'Active' AND schools.County = 'Alpine';"
    },
    {
        "question_id": 71,
        "answer_sql": ""
    },
    {
        "question_id": 72,
        "answer_sql": "SELECT COUNT(*) \nFROM schools AS S \nJOIN frpm AS FR ON S.CDSCode = FR.CDSCode \nJOIN satscores AS SAT ON S.CDSCode = SAT.cds \nWHERE S.EdOpsCode = 'SSS' \n  AND S.County = 'Fremont' \n  AND SAT.rtype = 'Ages 5-17' \n  AND SAT.enroll12 > 0;"
    },
    {
        "question_id": 73,
        "answer_sql": ""
    },
    {
        "question_id": 74,
        "answer_sql": ""
    },
    {
        "question_id": 75,
        "answer_sql": ""
    },
    {
        "question_id": 76,
        "answer_sql": ""
    },
    {
        "question_id": 77,
        "answer_sql": ""
    },
    {
        "question_id": 78,
        "answer_sql": ""
    },
    {
        "question_id": 79,
        "answer_sql": "SELECT County FROM schools WHERE Virtual = 'F' GROUP BY County ORDER BY COUNT(*) DESC LIMIT 1;"
    },
    {
        "question_id": 80,
        "answer_sql": ""
    },
    {
        "question_id": 81,
        "answer_sql": ""
    },
    {
        "question_id": 82,
        "answer_sql": "SELECT 'Low Grade' AS GradeSpan FROM schools WHERE Longitude = ( SELECT MAX(Longitude) FROM schools );"
    },
    {
        "question_id": 83,
        "answer_sql": ""
    },
    {
        "question_id": 84,
        "answer_sql": ""
    },
    {
        "question_id": 85,
        "answer_sql": ""
    },
    {
        "question_id": 86,
        "answer_sql": ""
    },
    {
        "question_id": 87,
        "answer_sql": "SELECT AdmEmail1 FROM schools WHERE County = 'San Bernardino' AND District = 'San Bernardino City Unified' AND AdmFName1 IS NOT NULL AND AdmLName1 IS NOT NULL AND SOC = '62' OR DOC = '54' AND LastUpdate BETWEEN '2009-01-01' AND '2010-12-31' AND CDSCode IN ( SELECT CDSCode FROM schools_admins WHERE SchoolCode IN ( SELECT SchoolCode FROM schools WHERE County = 'San Bernardino' AND District = 'San Bernardino City Unified' ) );"
    },
    {
        "question_id": 88,
        "answer_sql": ""
    },
    {
        "question_id": 89,
        "answer_sql": "SELECT COUNT(account_id) AS account_count FROM account WHERE district_id IN (SELECT district_id FROM district WHERE A3 = 'POPLATEK PO OBRATU') AND account_id IN ( SELECT account_id FROM trans WHERE date >= (SELECT MAX(date) FROM trans) )"
    },
    {
        "question_id": 90,
        "answer_sql": "SELECT COUNT(account_id) AS eligible_accounts FROM account WHERE district_id IN ( SELECT district_id FROM district WHERE A3 = 'Prague' ) AND account_id IN ( SELECT account_id FROM loan )"
    },
    {
        "question_id": 91,
        "answer_sql": "SELECT district_id, AVG(A12) AS unemployment_1995, AVG(A13) AS unemployment_1996 FROM district WHERE A12 IS NOT NULL AND A13 IS NOT NULL GROUP BY district_id ORDER BY unemployment_1995 DESC, unemployment_1996 DESC LIMIT 1;"
    },
    {
        "question_id": 92,
        "answer_sql": "SELECT COUNT(T1.district_id) AS district_count FROM district AS T1 JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.gender = 'F' AND T1.A11 > 6000 AND T1.A11 < 10000;"
    },
    {
        "question_id": 93,
        "answer_sql": ""
    },
    {
        "question_id": 94,
        "answer_sql": ""
    },
    {
        "question_id": 95,
        "answer_sql": ""
    },
    {
        "question_id": 96,
        "answer_sql": "SELECT COUNT(DISTINCT T1.client_id) AS owner_count FROM client AS T1 JOIN account AS T2 ON T1.district_id = T2.district_id JOIN trans AS T3 ON T1.client_id = T3.account_id WHERE T2.frequency = 'POPLATEK TYDNE' AND T1.gender = 'Owner';"
    },
    {
        "question_id": 97,
        "answer_sql": ""
    },
    {
        "question_id": 98,
        "answer_sql": ""
    },
    {
        "question_id": 99,
        "answer_sql": "SELECT a.account_id, MAX(l.amount) AS max_approved_amount FROM account a JOIN loan l ON a.account_id = l.account_id WHERE l.duration > 12 GROUP BY a.account_id HAVING a.date BETWEEN '1993-01-01' AND '1993-12-31' ORDER BY max_approved_amount DESC LIMIT 1;"
    },
    {
        "question_id": 100,
        "answer_sql": "SELECT COUNT(T1.client_id) AS female_customers FROM client AS T1 JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T1.birth_date < '1950-01-01' AND T2.A2 = 'Slokolov';"
    },
    {
        "question_id": 101,
        "answer_sql": "SELECT DISTINCT T1.account_id FROM trans AS T1 JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.date >= '1995-01-01' AND T1.date < '1996-01-01' ORDER BY T1.date ASC LIMIT 1;"
    },
    {
        "question_id": 102,
        "answer_sql": "SELECT DISTINCT T1.account_id FROM account AS T1 JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T1.date < '1997-01-01' AND T2.amount > 3000"
    },
    {
        "question_id": 103,
        "answer_sql": ""
    },
    {
        "question_id": 104,
        "answer_sql": "SELECT T1.date, T1.account_id FROM trans AS T1 JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.amount = 840 AND T1.date = '1998-10-14';"
    },
    {
        "question_id": 105,
        "answer_sql": ""
    },
    {
        "question_id": 106,
        "answer_sql": "SELECT MAX(trans.amount) AS biggest_amount FROM trans JOIN account ON trans.account_id = account.account_id JOIN client ON account.district_id = client.district_id JOIN disp ON account.account_id = disp.account_id JOIN card ON disp.disp_id = card.disp_id WHERE trans.date >= '1996-10-21' AND trans.type = 'IN';"
    },
    {
        "question_id": 107,
        "answer_sql": "SELECT client.gender FROM client JOIN account ON client.district_id = account.district_id JOIN trans ON account.account_id = trans.account_id JOIN district ON account.district_id = district.district_id WHERE district.A11 = ( SELECT MAX(A11) FROM district ) ORDER BY client.birth_date ASC LIMIT 1;"
    },
    {
        "question_id": 108,
        "answer_sql": "SELECT t1.amount FROM loan AS t1 JOIN account AS t2 ON t1.account_id = t2.account_id WHERE t2.account_id = ( SELECT t3.account_id FROM loan AS t3 JOIN account AS t4 ON t3.account_id = t4.account_id ORDER BY t3.amount DESC LIMIT 1 ) ORDER BY t2.account_id, t1.date LIMIT 1;"
    },
    {
        "question_id": 109,
        "answer_sql": "SELECT COUNT(DISTINCT c.client_id) AS num_clients FROM client c JOIN account a ON c.district_id = a.district_id JOIN trans t ON a.account_id = t.account_id WHERE c.gender = 'F' AND a.district_id = (SELECT district_id FROM district WHERE A2 = 'Jesenik');"
    },
    {
        "question_id": 110,
        "answer_sql": ""
    },
    {
        "question_id": 111,
        "answer_sql": ""
    },
    {
        "question_id": 112,
        "answer_sql": "SELECT DISTINCT T1.district_id FROM client AS T1 JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T1.birth_date = '1976-01-29';"
    },
    {
        "question_id": 113,
        "answer_sql": "SELECT client.birth_date FROM client JOIN loan ON client.client_id = loan.account_id WHERE loan.amount = 98832 AND loan.date LIKE '1996-01-03';"
    },
    {
        "question_id": 114,
        "answer_sql": "SELECT account.account_id FROM client JOIN account ON client.client_id = account.district_id WHERE client.district_id = (SELECT district_id FROM district WHERE A3 = 'Prague');"
    },
    {
        "question_id": 115,
        "answer_sql": "SELECT CAST(COUNT(CASE WHEN client.gender = 'M' THEN client.client_id ELSE NULL END) AS REAL) * 100 / COUNT(client.client_id) AS percentage FROM client JOIN district ON client.district_id = district.district_id WHERE district.A3 = 'South Bohemia';"
    },
    {
        "question_id": 116,
        "answer_sql": "SELECT c.client_id, (SUM(CASE WHEN t.type = 'credit' THEN t.amount ELSE 0 END) - SUM(CASE WHEN t.type = 'debit' THEN t.amount ELSE 0 END)) / SUM(CASE WHEN t.type = 'debit' THEN t.amount ELSE 0 END) * 100.0 AS increase_rate FROM client c JOIN account a ON c.district_id = a.district_id JOIN loan l ON a.account_id = l.account_id JOIN trans t ON a.account_id = t.account_id WHERE t.date BETWEEN '1993-07-05' AND '1993-07-05' GROUP BY c.client_id ORDER BY increase_rate DESC LIMIT 1;"
    },
    {
        "question_id": 117,
        "answer_sql": "SELECT SUM(CASE WHEN T1.status = 'A' THEN T1.amount ELSE 0 END) / SUM(T1.amount) * 100 AS percentage FROM loan AS T1 JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T2.district_id = (SELECT district_id FROM client WHERE client_id = (SELECT client_id FROM account WHERE account_id = T1.account_id));"
    },
    {
        "question_id": 118,
        "answer_sql": "SELECT CASE WHEN loan.amount < 100000 THEN (SUM(CASE WHEN loan.status = 'C' THEN 1 ELSE 0 END) * 100.0 / COUNT(loan.amount)) / COUNT(loan.status) END AS percentage FROM loan WHERE loan.amount < 100000;"
    },
    {
        "question_id": 119,
        "answer_sql": "SELECT a.account_id, d.A2 AS district_name, d.A3 AS district_region FROM account a JOIN district d ON a.district_id = d.district_id WHERE a.date >= '1993-01-01' AND a.frequency = 'POPLATEK PO OBRATU';"
    },
    {
        "question_id": 120,
        "answer_sql": "SELECT DISTINCT a.account_id FROM account a JOIN trans t ON a.account_id = t.account_id JOIN client c ON a.district_id = c.district_id WHERE t.date BETWEEN '1995-01-01' AND '2000-12-31' AND c.district_id = (SELECT district_id FROM district WHERE A3 = 'east Bohemia');"
    },
    {
        "question_id": 121,
        "answer_sql": "SELECT account_id, date FROM account WHERE district_id = (SELECT district_id FROM district WHERE A2 = 'Prachatice')"
    },
    {
        "question_id": 122,
        "answer_sql": "SELECT district.A2, district.A3 FROM loan JOIN account ON loan.account_id = account.account_id JOIN district ON account.district_id = district.district_id WHERE loan.loan_id = '4990';"
    },
    {
        "question_id": 123,
        "answer_sql": ""
    },
    {
        "question_id": 124,
        "answer_sql": "SELECT loan.loan_id, district.A3, AVG(district.A11) AS average_salary FROM loan JOIN account ON loan.account_id = account.account_id JOIN district ON account.district_id = district.district_id GROUP BY loan.loan_id, district.A3;"
    },
    {
        "question_id": 125,
        "answer_sql": "SELECT d.A2, d.A3, (SELECT A13 FROM district WHERE district_id = d.district_id) - (SELECT A12 FROM district WHERE district_id = d.district_id) AS unemployment_increment FROM district d JOIN loan l ON d.district_id = l.account_id WHERE l.status = 'D'"
    },
    {
        "question_id": 126,
        "answer_sql": "SELECT (COUNT(DISTINCT CASE WHEN T2.district_id = 1 THEN T1.account_id ELSE NULL END) * 100) / COUNT(T1.account_id) AS percentage FROM account AS T1 JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.date BETWEEN '1993-01-01' AND '1993-12-31';"
    },
    {
        "question_id": 127,
        "answer_sql": "SELECT DISTINCT T1.account_id FROM trans AS T1 JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T2.frequency = 'POPLATEK MESICNE';"
    },
    {
        "question_id": 128,
        "answer_sql": "SELECT district_id, COUNT(*) AS female_account_count FROM client WHERE gender = 'F' GROUP BY district_id ORDER BY female_account_count DESC LIMIT 10;"
    },
    {
        "question_id": 129,
        "answer_sql": "SELECT d.A2 AS district_name, COUNT(t.trans_id) AS withdrawals FROM trans t JOIN account a ON t.account_id = a.account_id JOIN district d ON a.district_id = d.district_id WHERE t.type = 'VYDAJ' AND t.date LIKE '1996-01%' AND t.type != 'KREDITE' GROUP BY d.A2 ORDER BY withdrawals DESC LIMIT 10;"
    },
    {
        "question_id": 130,
        "answer_sql": "SELECT COUNT(DISTINCT T1.account_id) AS no_cards FROM account AS T1 JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'South Bohemia' AND T1.account_id NOT IN ( SELECT T3.account_id FROM account AS T3 JOIN trans AS T4 ON T3.account_id = T4.account_id WHERE T4.type = 'credit card' );"
    },
    {
        "question_id": 131,
        "answer_sql": "SELECT d.A3, COUNT(*) AS loan_count FROM district d JOIN account a ON d.district_id = a.district_id JOIN loan l ON a.account_id = l.account_id WHERE l.status = 'C' GROUP BY d.A3 ORDER BY loan_count DESC LIMIT 1;"
    },
    {
        "question_id": 132,
        "answer_sql": ""
    },
    {
        "question_id": 133,
        "answer_sql": "SELECT DISTINCT d.A2, d.A3, d.A4, d.A5, d.A6, d.A7, d.A8, d.A9, d.A10, d.A11, d.A12, d.A13 FROM district d JOIN account a ON d.district_id = a.district_id JOIN trans t ON a.account_id = t.account_id WHERE t.date BETWEEN '1996-01-01' AND '1996-12-31' ORDER BY d.A13 DESC;"
    },
    {
        "question_id": 134,
        "answer_sql": "SELECT COUNT(account_id) AS account_count FROM account WHERE strftime('%Y', date) = '1996' AND district_id IN ( SELECT district_id FROM district WHERE A16 = ( SELECT MAX(A16) FROM district ) );"
    },
    {
        "question_id": 135,
        "answer_sql": "SELECT COUNT(DISTINCT t1.account_id) AS account_count FROM trans t1 JOIN account a ON t1.account_id = a.account_id WHERE t1.operation = 'VYBER KARTOU' AND a.frequency = 'POPLATEK MESICNE' AND t1.balance < 0;"
    },
    {
        "question_id": 136,
        "answer_sql": ""
    },
    {
        "question_id": 137,
        "answer_sql": "SELECT COUNT(account_id) AS running_contract_accounts FROM loan WHERE status = 'C' AND account_id IN ( SELECT account_id FROM account WHERE district_id = (SELECT district_id FROM district WHERE A2 = 'Branch' AND A3 = '1') );"
    },
    {
        "question_id": 138,
        "answer_sql": "SELECT COUNT(T1.client_id) AS male_clients FROM client AS T1 JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.date BETWEEN '1995-01-01' AND '1995-12-31' GROUP BY T1.client_id;"
    },
    {
        "question_id": 139,
        "answer_sql": "SELECT COUNT(T1.card_id) AS high_level_cards FROM card AS T1 JOIN disp AS T2 ON T1.disp_id = T2.disp_id JOIN account AS T3 ON T2.account_id = T3.account_id WHERE T2.type = 'gold' AND T3.frequency = 'high';"
    },
    {
        "question_id": 140,
        "answer_sql": "SELECT COUNT(account_id) AS account_count FROM account WHERE district_id = (SELECT district_id FROM district WHERE A2 = 'Pisek');"
    },
    {
        "question_id": 141,
        "answer_sql": ""
    },
    {
        "question_id": 142,
        "answer_sql": ""
    },
    {
        "question_id": 143,
        "answer_sql": ""
    },
    {
        "question_id": 144,
        "answer_sql": ""
    },
    {
        "question_id": 145,
        "answer_sql": "SELECT DISTINCT T1.account_id FROM trans AS T1 JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.operation = 'VYBER KARTOU' AND T1.date BETWEEN '1998-01-01' AND '1998-12-31' GROUP BY T1.account_id HAVING SUM(T1.amount) < ( SELECT AVG(amount) FROM trans AS T3 JOIN account AS T4 ON T3.account_id = T4.account_id WHERE T3.operation = 'VYBER KARTOU' AND T3.date BETWEEN '1998-01-01' AND '1998-12-31' )"
    },
    {
        "question_id": 146,
        "answer_sql": "SELECT DISTINCT T1.client_id, T1.gender FROM client AS T1 JOIN account AS T2 ON T1.district_id = T2.district_id JOIN trans AS T3 ON T2.account_id = T3.account_id JOIN loan AS T4 ON T2.account_id = T4.account_id JOIN card AS T5 ON T5.disp_id = T3.account_id WHERE T1.gender = 'F'"
    },
    {
        "question_id": 147,
        "answer_sql": "SELECT COUNT(T1.client_id) AS female_clients_count FROM client AS T1 JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T2.A3 = 'south Bohemia';"
    },
    {
        "question_id": 148,
        "answer_sql": ""
    },
    {
        "question_id": 149,
        "answer_sql": ""
    },
    {
        "question_id": 150,
        "answer_sql": "SELECT COUNT(DISTINCT T1.account_id) AS account_count FROM trans AS T1 JOIN account AS T2 ON T1.account_id = T2.account_id JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T3.A3 = 'North Bohemia' AND T1.bank = 'AB';"
    },
    {
        "question_id": 151,
        "answer_sql": "SELECT DISTINCT T1.A2, T1.A3, T1.A4, T1.A5, T1.A6, T1.A7, T1.A8, T1.A9, T1.A10, T1.A11, T1.A12, T1.A13, T1.A14, T1.A15, T1.A16 FROM district AS T1 JOIN account AS T2 ON T1.district_id = T2.district_id JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.type = 'VYDAJ';"
    },
    {
        "question_id": 152,
        "answer_sql": "SELECT AVG(T1.A15) AS Average_Crimes FROM district AS T1 WHERE T1.A3 IN ( SELECT T2.district_id FROM account AS T2 INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.date BETWEEN '1995-01-01' AND '1995-12-31' GROUP BY T2.district_id HAVING COUNT(T3.trans_id) > 4000 ) AND T1.A3 IN ( SELECT T4.district_id FROM account AS T4 INNER JOIN trans AS T5 ON T4.account_id = T5.account_id WHERE T5.date BETWEEN '1997-01-01' AND '1997-12-31' GROUP BY T4.district_id HAVING COUNT(T5.trans_id) > 0 );"
    },
    {
        "question_id": 153,
        "answer_sql": "SELECT COUNT(*) AS loan_eligible_cards FROM card WHERE type = 'CLASSIC' AND disp_id IN ( SELECT disp_id FROM disp WHERE account_id IN ( SELECT account_id FROM account WHERE frequency = 'OWNER' ) );"
    },
    {
        "question_id": 154,
        "answer_sql": "SELECT COUNT(T1.client_id) AS male_clients FROM client AS T1 JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Hl.m. Praha' AND T1.gender = 'M';"
    },
    {
        "question_id": 155,
        "answer_sql": "SELECT (COUNT(CASE WHEN type = 'gold' AND issued < '1998-01-01' THEN 1 ELSE NULL END) / COUNT(CASE WHEN type = 'gold' THEN 1 ELSE NULL END)) * 100 AS gold_card_percentage FROM card WHERE type = 'gold';"
    },
    {
        "question_id": 156,
        "answer_sql": "SELECT DISTINCT T1.client_id, T1.gender, T1.birth_date, T1.district_id FROM client AS T1 JOIN account AS T2 ON T1.district_id = T2.district_id JOIN loan AS T3 ON T2.account_id = T3.account_id WHERE T3.amount = (SELECT MAX(amount) FROM loan) ORDER BY T1.district_id ASC LIMIT 1;"
    },
    {
        "question_id": 157,
        "answer_sql": "SELECT COUNT(*) FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T3.A15 = 'committed crimes in 1995' AND T2.account_id = 532;"
    },
    {
        "question_id": 158,
        "answer_sql": ""
    },
    {
        "question_id": 159,
        "answer_sql": "SELECT trans.account_id, trans.date, trans.type, trans.operation, trans.amount, trans.balance, trans.k_symbol, trans.bank, trans.account FROM trans JOIN account ON trans.account_id = account.account_id JOIN client ON account.district_id = client.district_id WHERE trans.type = 'VYBER' AND trans.operation = 'VYBER' AND client.client_id = 3356;"
    },
    {
        "question_id": 160,
        "answer_sql": "SELECT COUNT(*) FROM account WHERE frequency = 'POPLATEK TYDNE' AND account_id IN ( SELECT account_id FROM loan WHERE amount < 200000 )"
    },
    {
        "question_id": 161,
        "answer_sql": "SELECT T2.type FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id WHERE T1.client_id = 13539;"
    },
    {
        "question_id": 162,
        "answer_sql": "SELECT T2.A3 FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.client_id = 3541;"
    },
    {
        "question_id": 163,
        "answer_sql": "SELECT d.A2, d.A3, d.A4, d.A5, d.A6, d.A7, d.A8, d.A9, d.A10, d.A11, d.A12, d.A13, d.A14, d.A15, d.A16 FROM district d JOIN account a ON d.district_id = a.district_id JOIN loan l ON a.account_id = l.account_id WHERE l.status = 'A' GROUP BY d.district_id ORDER BY COUNT(l.account_id) DESC LIMIT 1;"
    },
    {
        "question_id": 164,
        "answer_sql": "SELECT `order`.order_id, `order`.account_id, `order`.bank_to, `order`.account_to, `order`.amount, `order`.k_symbol FROM `order` WHERE `order`.order_id = 32423;"
    },
    {
        "question_id": 165,
        "answer_sql": ""
    },
    {
        "question_id": 166,
        "answer_sql": "SELECT COUNT(account_id) AS account_count FROM account WHERE district_id = (SELECT district_id FROM district WHERE A2 = 'Jesenik');"
    },
    {
        "question_id": 167,
        "answer_sql": "SELECT DISTINCT c.client_id FROM client c JOIN trans t ON c.client_id = t.account_id JOIN card k ON c.client_id = k.disp_id WHERE t.date >= '1997-01-01';"
    },
    {
        "question_id": 168,
        "answer_sql": "SELECT COUNT(CASE WHEN client.gender = 'F' THEN client.client_id ELSE NULL END) / COUNT(client.client_id) * 100 FROM client JOIN account ON client.district_id = account.district_id JOIN trans ON account.account_id = trans.account_id JOIN district ON account.district_id = district.district_id WHERE district.A11 > 10000"
    },
    {
        "question_id": 169,
        "answer_sql": ""
    },
    {
        "question_id": 170,
        "answer_sql": "SELECT COUNT(*) FROM trans WHERE operation = 'VYBER KARTOU' AND date > '1995-12-31';"
    },
    {
        "question_id": 171,
        "answer_sql": "SELECT SUM(CASE WHEN T3.A3 = 'North Bohemia' THEN 1 ELSE 0 END) - SUM(CASE WHEN T3.A3 = 'East Bohemia' THEN 1 ELSE 0 END) AS crime_difference FROM trans AS T1 JOIN account AS T2 ON T1.account_id = T2.account_id JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T3.A3 IN ('North Bohemia', 'East Bohemia') AND T1.date BETWEEN '1996-01-01' AND '1996-12-31'"
    },
    {
        "question_id": 172,
        "answer_sql": "SELECT COUNT(DISTINCT CASE WHEN T1.account_id BETWEEN 1 AND 10 THEN T2.disp_id ELSE NULL END) AS owner_dispositions, COUNT(DISTINCT CASE WHEN T1.account_id BETWEEN 1 AND 10 THEN T3.disp_id ELSE NULL END) AS disponent_dispositions FROM account AS T1 JOIN disp AS T2 ON T1.account_id = T2.account_id JOIN disp AS T3 ON T1.account_id = T3.account_id WHERE T1.account_id BETWEEN 1 AND 10;"
    },
    {
        "question_id": 173,
        "answer_sql": "SELECT account_id, frequency, COUNT(*) AS request_count FROM account WHERE account_id = 3 GROUP BY account_id, frequency;"
    },
    {
        "question_id": 174,
        "answer_sql": "SELECT birth_date FROM client WHERE client_id = (SELECT client_id FROM disp WHERE account_id = (SELECT account_id FROM account WHERE account_id = 130))"
    },
    {
        "question_id": 175,
        "answer_sql": "SELECT COUNT(DISTINCT t1.account_id) AS account_count FROM trans t1 JOIN account t2 ON t1.account_id = t2.account_id JOIN loan l ON t2.account_id = l.account_id WHERE t1.type = 'POPLATEK PO OBRATU';"
    },
    {
        "question_id": 176,
        "answer_sql": "SELECT loan.amount, loan.status FROM loan JOIN account ON loan.account_id = account.account_id JOIN client ON account.district_id = client.district_id WHERE client.client_id = 992;"
    },
    {
        "question_id": 177,
        "answer_sql": ""
    },
    {
        "question_id": 178,
        "answer_sql": "SELECT DISTINCT c.type FROM card c JOIN disp d ON c.disp_id = d.disp_id JOIN client cl ON d.client_id = cl.client_id WHERE cl.client_id = 9;"
    },
    {
        "question_id": 179,
        "answer_sql": "SELECT SUM(trans.amount) AS total_payment FROM trans JOIN account ON trans.account_id = account.account_id JOIN client ON account.district_id = client.district_id WHERE trans.date BETWEEN '1998-01-01' AND '1998-12-31' AND client.client_id = 617;"
    },
    {
        "question_id": 180,
        "answer_sql": "SELECT DISTINCT c.client_id, c.gender, c.birth_date, d.A2, d.A3, d.A4, d.A5, d.A6, d.A7, d.A8, d.A9, d.A10, d.A11, d.A12, d.A13, d.A14, d.A15, d.A16 FROM client c JOIN district d ON c.district_id = d.district_id JOIN disp disp ON disp.account_id = c.district_id JOIN account acc ON acc.account_id = disp.account_id WHERE c.birth_date BETWEEN '1983-01-01' AND '1987-12-31';"
    },
    {
        "question_id": 181,
        "answer_sql": "SELECT client.client_id FROM client JOIN loan ON client.client_id = loan.account_id WHERE client.gender = 'F' ORDER BY loan.amount DESC LIMIT 3;"
    },
    {
        "question_id": 182,
        "answer_sql": "SELECT COUNT(T1.client_id) AS male_customers FROM client AS T1 JOIN account AS T2 ON T1.district_id = T2.district_id JOIN loan AS T3 ON T2.account_id = T3.account_id WHERE T1.gender = 'M' AND T1.birth_date BETWEEN '1974-01-01' AND '1976-12-31' AND T3.payments > 4000;"
    },
    {
        "question_id": 183,
        "answer_sql": "SELECT COUNT(account_id) AS num_accounts FROM account WHERE district_id = (SELECT district_id FROM district WHERE A2 = 'Beroun') AND date > '1996-12-31';"
    },
    {
        "question_id": 184,
        "answer_sql": ""
    },
    {
        "question_id": 185,
        "answer_sql": "SELECT COUNT(CASE WHEN client.gender = 'F' THEN client.client_id ELSE NULL END) / COUNT(client.client_id) * 100 AS female_clients_percentage FROM client JOIN account ON client.district_id = account.district_id JOIN trans ON account.account_id = trans.account_id JOIN district ON account.district_id = district.district_id WHERE district.A3 = 'Prague';"
    },
    {
        "question_id": 186,
        "answer_sql": "SELECT CAST(COUNT(CASE WHEN client.gender = 'M' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(*) AS percentage FROM client JOIN account ON client.district_id = account.district_id JOIN trans ON account.account_id = trans.account_id WHERE account.frequency = 'POPLATEK TYDNE'"
    },
    {
        "question_id": 187,
        "answer_sql": "SELECT COUNT(DISTINCT c.client_id) AS client_count FROM client c JOIN account a ON c.district_id = a.district_id JOIN trans t ON a.account_id = t.account_id WHERE a.frequency = 'POPLATEK TYDNE';"
    },
    {
        "question_id": 188,
        "answer_sql": ""
    },
    {
        "question_id": 189,
        "answer_sql": "SELECT DISTINCT T1.account_id FROM account AS T1 JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.gender = 'F' ORDER BY T1.district_id, T1.date DESC LIMIT 1;"
    },
    {
        "question_id": 190,
        "answer_sql": ""
    },
    {
        "question_id": 191,
        "answer_sql": "SELECT COUNT(DISTINCT loan.account_id) AS loan_count FROM loan JOIN account ON loan.account_id = account.account_id WHERE account.frequency = 'POPLATEK TYDNE' AND loan.duration = 24;"
    },
    {
        "question_id": 192,
        "answer_sql": "SELECT AVG(loan.amount) AS average_loan_amount FROM loan JOIN trans ON loan.account_id = trans.account_id WHERE loan.status = 'C' AND trans.type = 'POPLATEK PO OBRATU'"
    },
    {
        "question_id": 193,
        "answer_sql": ""
    },
    {
        "question_id": 194,
        "answer_sql": ""
    },
    {
        "question_id": 195,
        "answer_sql": "SELECT bond_type FROM bond GROUP BY bond_type ORDER BY COUNT(bond_type) DESC LIMIT 1;"
    },
    {
        "question_id": 196,
        "answer_sql": "SELECT COUNT(T1.atom_id) AS chlorine_atoms FROM atom AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-' AND T1.element = 'cl';"
    },
    {
        "question_id": 197,
        "answer_sql": "SELECT AVG(T1.element) AS average_oxygen_atoms FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id JOIN molecule AS T3 ON T1.molecule_id = T3.molecule_id WHERE T2.bond_id IS NULL AND T3.label = '-'"
    },
    {
        "question_id": 198,
        "answer_sql": ""
    },
    {
        "question_id": 199,
        "answer_sql": "SELECT COUNT(DISTINCT atom_id) FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'na' AND molecule.label = '-'"
    },
    {
        "question_id": 200,
        "answer_sql": ""
    },
    {
        "question_id": 201,
        "answer_sql": ""
    },
    {
        "question_id": 202,
        "answer_sql": "SELECT COUNT(*) FROM bond WHERE bond_type = '#';"
    },
    {
        "question_id": 203,
        "answer_sql": "SELECT COUNT(DISTINCT atom_id) AS atom_count FROM atom WHERE element != 'br';"
    },
    {
        "question_id": 204,
        "answer_sql": "SELECT COUNT(*) AS carcinogenic_molecules FROM molecule WHERE molecule_id BETWEEN 'TR000' AND 'TR099' AND label = '+' LIMIT 100;"
    },
    {
        "question_id": 205,
        "answer_sql": ""
    },
    {
        "question_id": 206,
        "answer_sql": "SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR004_8_9' AND atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')"
    },
    {
        "question_id": 207,
        "answer_sql": ""
    },
    {
        "question_id": 208,
        "answer_sql": "SELECT m.label FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE a.element = 'h' GROUP BY m.label ORDER BY COUNT(m.label) DESC LIMIT 1;"
    },
    {
        "question_id": 209,
        "answer_sql": ""
    },
    {
        "question_id": 210,
        "answer_sql": ""
    },
    {
        "question_id": 211,
        "answer_sql": ""
    },
    {
        "question_id": 212,
        "answer_sql": "SELECT element FROM atom WHERE molecule_id IN ( SELECT molecule_id FROM molecule WHERE label = '-' ) AND atom_id IN ( SELECT atom_id FROM connected WHERE atom_id2 IN ( SELECT atom_id FROM atom WHERE molecule_id IN ( SELECT molecule_id FROM molecule WHERE label = '-' ) ) ) GROUP BY element ORDER BY COUNT(*) ASC LIMIT 1;"
    },
    {
        "question_id": 213,
        "answer_sql": "SELECT bond.bond_type FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN atom atom2 ON connected.atom_id2 = atom2.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE atom.atom_id = 'TR004_8' AND atom2.atom_id = 'TR004_20';"
    },
    {
        "question_id": 214,
        "answer_sql": "SELECT label FROM molecule WHERE molecule_id NOT IN ( SELECT DISTINCT molecule_id FROM atom WHERE element = 'sn' )"
    },
    {
        "question_id": 215,
        "answer_sql": ""
    },
    {
        "question_id": 216,
        "answer_sql": "SELECT atom_id, atom_id2 FROM connected WHERE bond_id IN ( SELECT bond_id FROM bond WHERE bond_type = '#' )"
    },
    {
        "question_id": 217,
        "answer_sql": "SELECT connected.atom_id2 FROM connected JOIN atom ON connected.atom_id = atom.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR181';"
    },
    {
        "question_id": 218,
        "answer_sql": ""
    },
    {
        "question_id": 219,
        "answer_sql": "SELECT SUM(CASE WHEN bond_type = '#' THEN 1 ELSE 0 END) * 100 / COUNT(bond_id) AS percent FROM bond JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE label = '+' AND bond_type = '#';"
    },
    {
        "question_id": 220,
        "answer_sql": "SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR000' ORDER BY atom.element ASC LIMIT 3;"
    },
    {
        "question_id": 221,
        "answer_sql": "SELECT connected.atom_id2 FROM connected JOIN atom ON connected.atom_id = atom.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR001_2_6' AND atom.molecule_id = 'TR001';"
    },
    {
        "question_id": 222,
        "answer_sql": "SELECT SUM(label = '+') - SUM(label = '-') AS difference FROM molecule;"
    },
    {
        "question_id": 223,
        "answer_sql": ""
    },
    {
        "question_id": 224,
        "answer_sql": "SELECT bond.bond_id FROM connected JOIN atom ON connected.atom_id = atom.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id JOIN bond ON connected.bond_id = bond.bond_id WHERE connected.atom_id2 = 'TR000_2'"
    },
    {
        "question_id": 225,
        "answer_sql": ""
    },
    {
        "question_id": 226,
        "answer_sql": "SELECT CAST(COUNT(CASE WHEN bond_type = ' = ' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(bond_id) AS percent FROM bond WHERE molecule_id = 'TR008';"
    },
    {
        "question_id": 227,
        "answer_sql": "SELECT CAST(COUNT(CASE WHEN label = '+' THEN molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(molecule_id) AS percent FROM molecule;"
    },
    {
        "question_id": 228,
        "answer_sql": "SELECT CAST(SUM(CASE WHEN T1.element = 'h' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.atom_id) AS percent FROM atom AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = 'TR206'"
    },
    {
        "question_id": 229,
        "answer_sql": "SELECT bond.bond_type FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON connected.atom_id = atom.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR000';"
    },
    {
        "question_id": 230,
        "answer_sql": "SELECT atom.element, molecule.label FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR060';"
    },
    {
        "question_id": 231,
        "answer_sql": ""
    },
    {
        "question_id": 232,
        "answer_sql": ""
    },
    {
        "question_id": 233,
        "answer_sql": "SELECT bond.bond_id FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON connected.atom_id = atom.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR006' ORDER BY bond.bond_id LIMIT 2;"
    },
    {
        "question_id": 234,
        "answer_sql": "SELECT COUNT(bond_id) AS bond_count FROM connected WHERE atom_id = 'TR009_12' OR atom_id2 = 'TR009_12' AND bond_id LIKE 'TR009_%';"
    },
    {
        "question_id": 235,
        "answer_sql": "SELECT COUNT(DISTINCT T1.molecule_id) AS carcinogenic_molecules FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id2 JOIN molecule AS T3 ON T1.molecule_id = T3.molecule_id WHERE T1.element = 'br' AND T3.label = '+';"
    },
    {
        "question_id": 236,
        "answer_sql": ""
    },
    {
        "question_id": 237,
        "answer_sql": ""
    },
    {
        "question_id": 238,
        "answer_sql": ""
    },
    {
        "question_id": 239,
        "answer_sql": "SELECT COUNT(bond_id) AS connection_count FROM connected JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.atom_id LIKE 'TR%_19'"
    },
    {
        "question_id": 240,
        "answer_sql": "SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR004' AND atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')"
    },
    {
        "question_id": 241,
        "answer_sql": "SELECT COUNT(DISTINCT molecule_id) AS non_carcinogenic_molecules FROM molecule WHERE label = '-';"
    },
    {
        "question_id": 242,
        "answer_sql": ""
    },
    {
        "question_id": 243,
        "answer_sql": ""
    },
    {
        "question_id": 244,
        "answer_sql": ""
    },
    {
        "question_id": 245,
        "answer_sql": ""
    },
    {
        "question_id": 246,
        "answer_sql": ""
    },
    {
        "question_id": 247,
        "answer_sql": "SELECT DISTINCT atom.element FROM atom WHERE atom.atom_id NOT IN ( SELECT atom_id FROM connected ) AND atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')"
    },
    {
        "question_id": 248,
        "answer_sql": "SELECT atom.atom_id FROM atom JOIN connected ON atom.atom_id = connected.atom_id2 JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id IN ( SELECT bond_id FROM bond WHERE bond_type = '#' ) AND atom.molecule_id = 'TR447';"
    },
    {
        "question_id": 249,
        "answer_sql": "SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR144_8_19' AND atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')"
    },
    {
        "question_id": 250,
        "answer_sql": ""
    },
    {
        "question_id": 251,
        "answer_sql": "SELECT atom.element FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+' GROUP BY atom.element ORDER BY COUNT(*) DESC LIMIT 1;"
    },
    {
        "question_id": 252,
        "answer_sql": "SELECT connected.atom_id2 FROM connected JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.element = 'pb';"
    },
    {
        "question_id": 253,
        "answer_sql": "SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '#' AND atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')"
    },
    {
        "question_id": 254,
        "answer_sql": "SELECT CAST(COUNT(bond_id) AS REAL) * 100 / COUNT(atom_id) FROM connected"
    },
    {
        "question_id": 255,
        "answer_sql": "SELECT SUM(CASE WHEN bond.bond_type = '-' THEN 1 ELSE 0 END) / COUNT(connected.bond_id) AS proportion FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON connected.atom_id = atom.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+' AND bond.bond_type = '-'"
    },
    {
        "question_id": 256,
        "answer_sql": "SELECT COUNT(atom_id) AS total_atoms FROM atom WHERE element IN ('c', 'h');"
    },
    {
        "question_id": 257,
        "answer_sql": "SELECT atom_id2 FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE element = 's';"
    },
    {
        "question_id": 258,
        "answer_sql": "SELECT bond.bond_type FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.element = 'sn';"
    },
    {
        "question_id": 259,
        "answer_sql": "SELECT COUNT(DISTINCT atom.element) AS element_count FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '-'"
    },
    {
        "question_id": 260,
        "answer_sql": ""
    },
    {
        "question_id": 261,
        "answer_sql": ""
    },
    {
        "question_id": 262,
        "answer_sql": ""
    },
    {
        "question_id": 263,
        "answer_sql": "SELECT SUM(CASE WHEN T1.element = 'cl' THEN 1 ELSE 0 END) * 100 / COUNT(T1.atom_id) AS percent FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '-'"
    },
    {
        "question_id": 264,
        "answer_sql": "SELECT label FROM molecule WHERE molecule_id IN ('TR000', 'TR001', 'TR002');"
    },
    {
        "question_id": 265,
        "answer_sql": "SELECT DISTINCT atom.molecule_id FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '-'"
    },
    {
        "question_id": 266,
        "answer_sql": "SELECT COUNT(T1.molecule_id) AS total_carcinogenic_molecules FROM atom AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'"
    },
    {
        "question_id": 267,
        "answer_sql": "SELECT bond.bond_type FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON connected.atom_id = atom.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id BETWEEN 'TR000' AND 'TR050';"
    },
    {
        "question_id": 268,
        "answer_sql": "SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR001_10_11' AND atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')"
    },
    {
        "question_id": 269,
        "answer_sql": "SELECT COUNT(bond_id) AS bond_count FROM bond JOIN atom ON bond.molecule_id = atom.molecule_id WHERE atom.element = 'i';"
    },
    {
        "question_id": 270,
        "answer_sql": "SELECT CASE WHEN T2.label = '+' THEN 'carcinogenic' ELSE 'non carcinogenic' END AS label_type, COUNT(T1.molecule_id) AS count FROM atom T1 JOIN molecule T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'ca' GROUP BY T1.element ORDER BY count DESC;"
    },
    {
        "question_id": 271,
        "answer_sql": "SELECT EXISTS ( SELECT 1 FROM connected c JOIN atom a ON c.atom_id = a.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE a.element = 'cl' AND a2.element = 'c' AND b.bond_id = 'TR001_1_8' )"
    },
    {
        "question_id": 272,
        "answer_sql": ""
    },
    {
        "question_id": 273,
        "answer_sql": "SELECT CAST(SUM(CASE WHEN T1.element = 'cl' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.element) AS percentage FROM atom AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'"
    },
    {
        "question_id": 274,
        "answer_sql": "SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR001';"
    },
    {
        "question_id": 275,
        "answer_sql": ""
    },
    {
        "question_id": 276,
        "answer_sql": "SELECT atom_id, atom_id2 FROM connected WHERE bond_id IN ( SELECT bond_id FROM bond WHERE bond_type = '#' ) LIMIT 2;"
    },
    {
        "question_id": 277,
        "answer_sql": "SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR005_16_26' AND atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')"
    },
    {
        "question_id": 278,
        "answer_sql": ""
    },
    {
        "question_id": 279,
        "answer_sql": ""
    },
    {
        "question_id": 280,
        "answer_sql": "SELECT b.bond_id, CASE WHEN m.label = '+' THEN 'Yes' ELSE 'No' END AS is_carcinogenic FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a ON c.atom_id = a.atom_id JOIN molecule m ON a.molecule_id = m.molecule_id WHERE b.bond_type = '#';"
    },
    {
        "question_id": 281,
        "answer_sql": ""
    },
    {
        "question_id": 282,
        "answer_sql": ""
    },
    {
        "question_id": 283,
        "answer_sql": ""
    },
    {
        "question_id": 284,
        "answer_sql": ""
    },
    {
        "question_id": 285,
        "answer_sql": "SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR001_10_11' AND atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')"
    },
    {
        "question_id": 286,
        "answer_sql": "SELECT CAST(COUNT(CASE WHEN bond_type = '#' THEN 1 END) AS REAL) * 100 / COUNT(*) FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond_type = '#';"
    },
    {
        "question_id": 287,
        "answer_sql": "SELECT (SUM(CASE WHEN T2.bond_type = ' = ' THEN 1 ELSE 0 END) * 100) / COUNT(T2.bond_id) AS percent FROM atom AS T1 JOIN connected AS T3 ON T1.atom_id = T3.atom_id JOIN bond AS T2 ON T3.bond_id = T2.bond_id JOIN molecule AS T4 ON T1.molecule_id = T4.molecule_id WHERE T4.molecule_id = 'TR047';"
    },
    {
        "question_id": 288,
        "answer_sql": "SELECT CASE WHEN COUNT(CASE WHEN label = '+' THEN 1 END) > 0 THEN 'Yes' ELSE 'No' END AS is_carcinogenic FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.atom_id = 'TR001_1';"
    },
    {
        "question_id": 289,
        "answer_sql": "SELECT CASE WHEN label = '+' THEN 'Yes' ELSE 'No' END AS is_carcinogenic FROM molecule WHERE label = '+';"
    },
    {
        "question_id": 290,
        "answer_sql": "SELECT element FROM atom WHERE molecule_id = 'TR151' AND element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')"
    },
    {
        "question_id": 291,
        "answer_sql": "SELECT COUNT(DISTINCT molecule_id) AS carcinogenic_compounds FROM molecule WHERE label = '+';"
    },
    {
        "question_id": 292,
        "answer_sql": "SELECT atom.atom_id FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'c' AND molecule.molecule_id BETWEEN 'TR010' AND 'TR050';"
    },
    {
        "question_id": 293,
        "answer_sql": "SELECT COUNT(DISTINCT atom.atom_id) AS atom_count FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+';"
    },
    {
        "question_id": 294,
        "answer_sql": ""
    },
    {
        "question_id": 295,
        "answer_sql": ""
    },
    {
        "question_id": 296,
        "answer_sql": ""
    },
    {
        "question_id": 297,
        "answer_sql": "SELECT atom_id FROM atom WHERE element = 'c' AND atom_id NOT IN ( SELECT atom_id FROM connected WHERE atom_id IN ( SELECT atom_id FROM atom WHERE element = 'c' ) AND atom_id2 IN ( SELECT atom_id FROM atom WHERE element = 'c' ) )"
    },
    {
        "question_id": 298,
        "answer_sql": "SELECT CAST(SUM(CASE WHEN T1.label = '+' AND T3.element = 'h' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.molecule_id) AS percentage FROM molecule AS T1 JOIN connected AS T2 ON T1.molecule_id = T2.atom_id JOIN atom AS T3 ON T2.atom_id2 = T3.atom_id WHERE T3.element = 'h'"
    },
    {
        "question_id": 299,
        "answer_sql": "SELECT CASE WHEN label = '+' THEN 'Yes' ELSE 'No' END AS is_carcinogenic FROM molecule WHERE molecule_id = 'TR124';"
    },
    {
        "question_id": 300,
        "answer_sql": "SELECT atom_id FROM atom WHERE molecule_id = 'TR186';"
    },
    {
        "question_id": 301,
        "answer_sql": ""
    },
    {
        "question_id": 302,
        "answer_sql": "SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE bond.bond_id = 'TR001_2_4' AND atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')"
    },
    {
        "question_id": 303,
        "answer_sql": ""
    },
    {
        "question_id": 304,
        "answer_sql": "SELECT DISTINCT atom.element, molecule.label FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca') AND molecule.label = '+'"
    },
    {
        "question_id": 305,
        "answer_sql": ""
    },
    {
        "question_id": 306,
        "answer_sql": "SELECT DISTINCT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '#' AND atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')"
    },
    {
        "question_id": 307,
        "answer_sql": ""
    },
    {
        "question_id": 308,
        "answer_sql": "SELECT COUNT(bond_id) AS bond_count FROM connected JOIN atom ON connected.atom_id = atom.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'cl';"
    },
    {
        "question_id": 309,
        "answer_sql": ""
    },
    {
        "question_id": 310,
        "answer_sql": ""
    },
    {
        "question_id": 311,
        "answer_sql": ""
    },
    {
        "question_id": 312,
        "answer_sql": ""
    },
    {
        "question_id": 313,
        "answer_sql": "SELECT COUNT(DISTINCT atom.atom_id) AS atom_count FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR005';"
    },
    {
        "question_id": 314,
        "answer_sql": "SELECT COUNT(bond_id) AS single_bonds FROM bond WHERE bond_type = '-';"
    },
    {
        "question_id": 315,
        "answer_sql": "SELECT DISTINCT m.label FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.element = 'cl' AND m.label = '+';"
    },
    {
        "question_id": 316,
        "answer_sql": "SELECT DISTINCT T1.molecule_id FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id JOIN molecule AS T3 ON T1.molecule_id = T3.molecule_id WHERE T3.label = '-' AND T1.element = 'c'"
    },
    {
        "question_id": 317,
        "answer_sql": ""
    },
    {
        "question_id": 318,
        "answer_sql": "SELECT connected.atom_id2 FROM connected JOIN atom ON connected.atom_id = atom.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR001_1_7';"
    },
    {
        "question_id": 319,
        "answer_sql": "SELECT COUNT(DISTINCT atom.element) AS element_count FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR001_3_4' AND atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca');"
    },
    {
        "question_id": 320,
        "answer_sql": "SELECT bond_type FROM bond WHERE bond_id IN (SELECT bond_id FROM connected WHERE atom_id = 'TR000_1' AND atom_id2 = 'TR000_2')"
    },
    {
        "question_id": 321,
        "answer_sql": "SELECT t1.molecule_id FROM atom t1 JOIN connected t2 ON t1.atom_id = t2.atom_id JOIN atom t3 ON t2.atom_id2 = t3.atom_id WHERE t1.atom_id = 'TR000_2' AND t3.atom_id = 'TR000_4';"
    },
    {
        "question_id": 322,
        "answer_sql": "SELECT element FROM atom WHERE atom_id = 'TR000_1';"
    },
    {
        "question_id": 323,
        "answer_sql": "SELECT CASE WHEN label = '+' THEN 'Yes' ELSE 'No' END AS is_carcinogenic FROM molecule WHERE molecule_id = 'TR000';"
    },
    {
        "question_id": 324,
        "answer_sql": "SELECT SUM(CASE WHEN bond_type = '-' THEN 1 ELSE 0 END) * 100.0 / COUNT(bond_id) AS percentage FROM bond WHERE bond_type = '-'"
    },
    {
        "question_id": 325,
        "answer_sql": "SELECT COUNT(DISTINCT T1.molecule_id) AS carcinogenic_molecules FROM atom AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'n' AND T2.label = '+';"
    },
    {
        "question_id": 326,
        "answer_sql": ""
    },
    {
        "question_id": 327,
        "answer_sql": ""
    },
    {
        "question_id": 328,
        "answer_sql": ""
    },
    {
        "question_id": 329,
        "answer_sql": "SELECT T1.molecule_id, COUNT(T1.molecule_id) AS atom_count FROM atom AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id GROUP BY T1.molecule_id ORDER BY atom_count DESC LIMIT 1;"
    },
    {
        "question_id": 330,
        "answer_sql": ""
    },
    {
        "question_id": 331,
        "answer_sql": "SELECT COUNT(DISTINCT molecule_id) AS carcinogenic_molecules FROM molecule WHERE label = '+';"
    },
    {
        "question_id": 332,
        "answer_sql": "SELECT COUNT(T1.molecule_id) AS single_bonds_count FROM molecule AS T1 JOIN connected AS T2 ON T1.molecule_id = T2.atom_id JOIN atom AS T3 ON T2.atom_id = T3.atom_id WHERE T1.molecule_id BETWEEN 'TR004' AND 'TR010' AND T2.bond_id IS NOT NULL AND T2.bond_id IN (SELECT bond_id FROM bond WHERE bond_type = '-')"
    },
    {
        "question_id": 333,
        "answer_sql": ""
    },
    {
        "question_id": 334,
        "answer_sql": "SELECT T1.element FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id JOIN molecule AS T3 ON T1.molecule_id = T3.molecule_id WHERE T3.label = '-' AND T1.atom_id = 'TR004_7';"
    },
    {
        "question_id": 335,
        "answer_sql": ""
    },
    {
        "question_id": 336,
        "answer_sql": "SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 JOIN connected AS T2 ON T1.molecule_id = T2.atom_id JOIN connected AS T3 ON T2.atom_id2 = T3.atom_id JOIN bond AS T4 ON T3.bond_id = T4.bond_id WHERE T4.bond_type = '#' AND T1.label != '-'"
    },
    {
        "question_id": 337,
        "answer_sql": ""
    },
    {
        "question_id": 338,
        "answer_sql": ""
    },
    {
        "question_id": 339,
        "answer_sql": "SELECT atom.atom_id FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+' AND atom.element = 'o';"
    },
    {
        "question_id": 340,
        "answer_sql": ""
    },
    {
        "question_id": 341,
        "answer_sql": ""
    },
    {
        "question_id": 342,
        "answer_sql": "SELECT name FROM cards WHERE faceConvertedManaCost = (SELECT MAX(faceConvertedManaCost) FROM cards)"
    },
    {
        "question_id": 343,
        "answer_sql": ""
    },
    {
        "question_id": 344,
        "answer_sql": "SELECT c.name FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.rarity = 'mythic' AND l.status = 'Banned' AND l.format = 'gladiator';"
    },
    {
        "question_id": 345,
        "answer_sql": "SELECT legalities.status FROM legalities JOIN cards ON legalities.uuid = cards.uuid WHERE cards.types = 'Artifact' AND cards.side IS NULL AND legalities.format = 'vintage';"
    },
    {
        "question_id": 346,
        "answer_sql": ""
    },
    {
        "question_id": 347,
        "answer_sql": ""
    },
    {
        "question_id": 348,
        "answer_sql": "SELECT T2.text FROM cards AS T1 JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Sublime Epiphany' AND T1.number = '74s';"
    },
    {
        "question_id": 349,
        "answer_sql": "SELECT cards.name, cards.artist, isPromo FROM cards JOIN rulings ON cards.uuid = rulings.uuid GROUP BY cards.uuid ORDER BY COUNT(rulings.uuid) DESC LIMIT 1;"
    },
    {
        "question_id": 350,
        "answer_sql": ""
    },
    {
        "question_id": 351,
        "answer_sql": ""
    },
    {
        "question_id": 352,
        "answer_sql": "SELECT CAST(SUM(CASE WHEN T2.language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid;"
    },
    {
        "question_id": 353,
        "answer_sql": "SELECT s.id AS setId, s.name AS setCode, COUNT(c.id) AS totalSetSize FROM sets s JOIN set_translations st ON s.code = st.setCode JOIN cards c ON s.code = c.setCode WHERE st.language = 'Italian' GROUP BY s.id, s.name;"
    },
    {
        "question_id": 354,
        "answer_sql": "SELECT COUNT(DISTINCT type) AS type_count FROM cards WHERE artist = 'Aaron Boyd';"
    },
    {
        "question_id": 355,
        "answer_sql": "SELECT keywords FROM cards WHERE name = 'Angel of Mercy';"
    },
    {
        "question_id": 356,
        "answer_sql": "SELECT COUNT(*) FROM cards WHERE power = '*';"
    },
    {
        "question_id": 357,
        "answer_sql": "SELECT promoTypes FROM cards WHERE name = 'Duress';"
    },
    {
        "question_id": 358,
        "answer_sql": ""
    },
    {
        "question_id": 359,
        "answer_sql": ""
    },
    {
        "question_id": 360,
        "answer_sql": "SELECT DISTINCT T2.language FROM cards AS T1 JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T1.name = 'Angel of Mercy';"
    },
    {
        "question_id": 361,
        "answer_sql": "SELECT COUNT(*) AS num_cards FROM legalities JOIN cards ON legalities.uuid = cards.uuid WHERE legalities.status = 'restricted' AND cards.isTextless = 0;"
    },
    {
        "question_id": 362,
        "answer_sql": "SELECT text FROM rulings WHERE uuid = (SELECT uuid FROM cards WHERE name = 'Condemn');"
    },
    {
        "question_id": 363,
        "answer_sql": "SELECT COUNT(*) AS card_count FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'restricted' AND cards.isStarter = 1;"
    },
    {
        "question_id": 364,
        "answer_sql": ""
    },
    {
        "question_id": 365,
        "answer_sql": "SELECT type FROM cards WHERE name = 'Benalish Knight';"
    },
    {
        "question_id": 366,
        "answer_sql": ""
    },
    {
        "question_id": 367,
        "answer_sql": "SELECT DISTINCT artist FROM cards WHERE flavorText LIKE '%Phyrexian%' AND text LIKE '%Phyrexian%';"
    },
    {
        "question_id": 368,
        "answer_sql": "SELECT CAST(COUNT(CASE WHEN borderColor = 'borderless' THEN id ELSE NULL END) AS REAL) * 100 / COUNT(id) FROM cards;"
    },
    {
        "question_id": 369,
        "answer_sql": "SELECT COUNT(*) FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'German' AND cards.isReprint = 1;"
    },
    {
        "question_id": 370,
        "answer_sql": ""
    },
    {
        "question_id": 371,
        "answer_sql": ""
    },
    {
        "question_id": 372,
        "answer_sql": "SELECT COUNT(*) FROM cards WHERE toughness = 99;"
    },
    {
        "question_id": 373,
        "answer_sql": "SELECT c.* FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.artist = 'Aaron Boyd';"
    },
    {
        "question_id": 374,
        "answer_sql": "SELECT COUNT(id) AS black_border_cards_only_available_on_mtgo FROM cards WHERE borderColor = 'black' AND availability = 'mtgo';"
    },
    {
        "question_id": 375,
        "answer_sql": "SELECT id FROM cards WHERE convertedManaCost = 0;"
    },
    {
        "question_id": 376,
        "answer_sql": "SELECT cards.layout FROM cards WHERE cards.keywords LIKE '%flying%'"
    },
    {
        "question_id": 377,
        "answer_sql": "SELECT COUNT(DISTINCT T1.id) AS card_count FROM cards AS T1 JOIN set_translations AS T2 ON T1.uuid = T2.setCode WHERE T1.originalType = 'Summon - Angel' AND T1.subtypes NOT LIKE '%Angel%';"
    },
    {
        "question_id": 378,
        "answer_sql": ""
    },
    {
        "question_id": 379,
        "answer_sql": "SELECT id FROM cards WHERE duelDeck = 'a';"
    },
    {
        "question_id": 380,
        "answer_sql": ""
    },
    {
        "question_id": 381,
        "answer_sql": ""
    },
    {
        "question_id": 382,
        "answer_sql": ""
    },
    {
        "question_id": 383,
        "answer_sql": ""
    },
    {
        "question_id": 384,
        "answer_sql": ""
    },
    {
        "question_id": 385,
        "answer_sql": "SELECT r.text FROM cards JOIN rulings r ON cards.uuid = r.uuid WHERE cards.name = 'Beacon of Immortality';"
    },
    {
        "question_id": 386,
        "answer_sql": "SELECT COUNT(*), legalities.status FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.frameVersion = 'future' AND legalities.status = 'legal';"
    },
    {
        "question_id": 387,
        "answer_sql": "SELECT cards.colorIdentity FROM cards JOIN sets ON cards.setCode = sets.code WHERE sets.code = 'OGW';"
    },
    {
        "question_id": 388,
        "answer_sql": ""
    },
    {
        "question_id": 389,
        "answer_sql": "SELECT c.name, r.date FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.originalType = 'Creature - Elf';"
    },
    {
        "question_id": 390,
        "answer_sql": ""
    },
    {
        "question_id": 391,
        "answer_sql": ""
    },
    {
        "question_id": 392,
        "answer_sql": "SELECT c.name FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.rarity = 'uncommon' ORDER BY r.date ASC LIMIT 3;"
    },
    {
        "question_id": 393,
        "answer_sql": "SELECT COUNT(*) FROM cards WHERE artist = 'John Avon' AND cardKingdomId IS NOT NULL AND cardKingdomId NOT LIKE '%powerful%';"
    },
    {
        "question_id": 394,
        "answer_sql": "SELECT COUNT(id) AS powerful_cards_count FROM cards WHERE borderColor = 'white' AND cardKingdomFoilId = cardKingdomId AND cardKingdomId IS NOT NULL;"
    },
    {
        "question_id": 395,
        "answer_sql": "SELECT COUNT(*) FROM cards WHERE artist = 'UDON' AND availability = 'mtgo' AND hand = -1;"
    },
    {
        "question_id": 396,
        "answer_sql": "SELECT COUNT(*) FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE frameVersion = '1993' AND availability = 'paper' AND hasContentWarning = 1;"
    },
    {
        "question_id": 397,
        "answer_sql": "SELECT T1.manaCost FROM cards AS T1 JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.layout = 'normal' AND T1.frameVersion = '2003' AND T1.borderColor = 'black' AND T1.availability IN ('paper', 'mtgo')"
    },
    {
        "question_id": 398,
        "answer_sql": "SELECT SUM(convertedManaCost) AS total_unconverted_mana FROM cards WHERE artist = 'Rob Alexander';"
    },
    {
        "question_id": 399,
        "answer_sql": "SELECT DISTINCT types, supertypes, subtypes FROM cards WHERE availability = 'arena';"
    },
    {
        "question_id": 400,
        "answer_sql": "SELECT DISTINCT c.setCode FROM cards c JOIN set_translations st ON c.setCode = st.setCode WHERE st.language = 'Spanish';"
    },
    {
        "question_id": 401,
        "answer_sql": "SELECT CAST(COUNT(CASE WHEN hand = '+3' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(id) FROM cards WHERE frameEffects = 'legendary';"
    },
    {
        "question_id": 402,
        "answer_sql": "SELECT CAST(SUM(CASE WHEN T1.isStorySpotlight = 1 AND T1.isTextless = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) AS Percentage FROM cards AS T1 WHERE T1.isStorySpotlight = 1 AND T1.isTextless = 1;"
    },
    {
        "question_id": 403,
        "answer_sql": "SELECT COUNT(CASE WHEN T2.language = 'Spanish' THEN T1.id ELSE NULL END) * 100 / COUNT(T1.id) AS percentage, T1.name FROM cards AS T1 JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Spanish';"
    },
    {
        "question_id": 404,
        "answer_sql": "SELECT DISTINCT T1.language FROM set_translations AS T1 JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.baseSetSize = 309;"
    },
    {
        "question_id": 405,
        "answer_sql": "SELECT COUNT(T1.id) AS NumberOfSets FROM sets AS T1 JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Commander' AND T2.language = 'Portuguese (Brasil)';"
    },
    {
        "question_id": 406,
        "answer_sql": ""
    },
    {
        "question_id": 407,
        "answer_sql": ""
    },
    {
        "question_id": 408,
        "answer_sql": "SELECT COUNT(T1.id) AS null_power_cards_with_triggered_ability FROM cards AS T1 JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.power IS NULL OR T1.power = '*';"
    },
    {
        "question_id": 409,
        "answer_sql": "SELECT COUNT(*) FROM cards WHERE side IS NULL AND text LIKE '%This is a triggered mana ability%' AND NOT EXISTS ( SELECT 1 FROM cards WHERE cards.id = cards.id AND cards.side IS NOT NULL );"
    },
    {
        "question_id": 410,
        "answer_sql": ""
    },
    {
        "question_id": 411,
        "answer_sql": ""
    },
    {
        "question_id": 412,
        "answer_sql": ""
    },
    {
        "question_id": 413,
        "answer_sql": "SELECT COUNT(T1.id) AS num_cards FROM cards AS T1 JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'rare' AND T2.date = '2009-01-10';"
    },
    {
        "question_id": 414,
        "answer_sql": "SELECT T2.language FROM sets AS T1 JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.baseSetSize = 180;"
    },
    {
        "question_id": 415,
        "answer_sql": ""
    },
    {
        "question_id": 416,
        "answer_sql": "SELECT CAST(COUNT(CASE WHEN T1.power IS NULL OR T1.power = '*' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.power IS NULL OR T1.power = '*') FROM cards AS T1 JOIN set_translations AS T2 ON T1.uuid = T2.setCode WHERE T2.language = 'French';"
    },
    {
        "question_id": 417,
        "answer_sql": "SELECT CAST(COUNT(CASE WHEN T2.language = 'Japanese' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.type) AS Percentage FROM sets AS T1 JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.type = 'expansion' AND T2.language = 'Japanese';"
    },
    {
        "question_id": 418,
        "answer_sql": "SELECT availability FROM cards WHERE artist = 'Daren Bader';"
    },
    {
        "question_id": 419,
        "answer_sql": "SELECT COUNT(*) FROM cards WHERE borderColor = 'borderless' AND edhrecRank > 12000;"
    },
    {
        "question_id": 420,
        "answer_sql": "SELECT SUM(CASE WHEN cards.isOversized = 1 AND cards.isReprint = 1 AND cards.isPromo = 1 THEN 1 ELSE 0 END) AS oversized_reprinted_promoted_cards_count FROM cards;"
    },
    {
        "question_id": 421,
        "answer_sql": "SELECT T1.name, T1.power FROM cards AS T1 JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.promoTypes = 'arenaleague' AND T1.power IS NULL ORDER BY T1.name ASC LIMIT 3;"
    },
    {
        "question_id": 422,
        "answer_sql": ""
    },
    {
        "question_id": 423,
        "answer_sql": ""
    },
    {
        "question_id": 424,
        "answer_sql": "SELECT CAST(COUNT(CASE WHEN isTextless = 1 AND layout = 'normal' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(isTextless) AS proportion FROM cards;"
    },
    {
        "question_id": 425,
        "answer_sql": "SELECT number FROM cards WHERE subtypes LIKE '%Angel%Wizard%' AND side IS NULL;"
    },
    {
        "question_id": 426,
        "answer_sql": "SELECT s.id, s.name FROM sets s WHERE s.mtgoCode IS NULL OR s.mtgoCode = '' ORDER BY s.name ASC LIMIT 3;"
    },
    {
        "question_id": 427,
        "answer_sql": ""
    },
    {
        "question_id": 428,
        "answer_sql": ""
    },
    {
        "question_id": 429,
        "answer_sql": ""
    },
    {
        "question_id": 430,
        "answer_sql": "SELECT s.id, s.name FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.language = 'Italian' AND s.block = 'Shadowmoor' ORDER BY s.name ASC LIMIT 2;"
    },
    {
        "question_id": 431,
        "answer_sql": ""
    },
    {
        "question_id": 432,
        "answer_sql": "SELECT T1.name AS setCode, T1.baseSetSize AS baseSetSize FROM sets AS T1 JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Russian' GROUP BY T1.name, T1.baseSetSize ORDER BY T1.baseSetSize DESC LIMIT 1;"
    },
    {
        "question_id": 433,
        "answer_sql": ""
    },
    {
        "question_id": 434,
        "answer_sql": ""
    },
    {
        "question_id": 435,
        "answer_sql": ""
    },
    {
        "question_id": 436,
        "answer_sql": "SELECT id FROM cards WHERE frameEffects = 'extendedart';"
    },
    {
        "question_id": 437,
        "answer_sql": "SELECT cards.id, cards.borderColor, cards.isFullArt FROM cards WHERE cards.borderColor = 'black' AND cards.isFullArt = 1;"
    },
    {
        "question_id": 438,
        "answer_sql": ""
    },
    {
        "question_id": 439,
        "answer_sql": ""
    },
    {
        "question_id": 440,
        "answer_sql": "SELECT language FROM foreign_data WHERE name = 'A Pedra Fellwar';"
    },
    {
        "question_id": 441,
        "answer_sql": "SELECT code FROM sets WHERE releaseDate = '2007-07-13';"
    },
    {
        "question_id": 442,
        "answer_sql": "SELECT baseSetSize, code FROM sets WHERE block IN ('Masques', 'Mirage');"
    },
    {
        "question_id": 443,
        "answer_sql": ""
    },
    {
        "question_id": 444,
        "answer_sql": ""
    },
    {
        "question_id": 445,
        "answer_sql": "SELECT T2.language, T2.flavorText, T2.type FROM cards AS T1 JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.watermark = 'colorpie' ORDER BY T2.language;"
    },
    {
        "question_id": 446,
        "answer_sql": "SELECT CAST(COUNT(CASE WHEN convertedManaCost = 10 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(convertedManaCost) AS percentage FROM cards WHERE name = 'Abyssal Horror';"
    },
    {
        "question_id": 447,
        "answer_sql": ""
    },
    {
        "question_id": 448,
        "answer_sql": ""
    },
    {
        "question_id": 449,
        "answer_sql": "SELECT cards.type, foreign_data.language FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.watermark = 'azorius';"
    },
    {
        "question_id": 450,
        "answer_sql": "SELECT COUNT(*) FROM cards WHERE artist = 'Aaron Miller' AND cardKingdomFoilId = cardKingdomId AND cardKingdomId IS NOT NULL;"
    },
    {
        "question_id": 451,
        "answer_sql": "SELECT COUNT(*) AS num_cards FROM cards WHERE availability LIKE '%paper%' AND hand LIKE '+%';"
    },
    {
        "question_id": 452,
        "answer_sql": ""
    },
    {
        "question_id": 453,
        "answer_sql": ""
    },
    {
        "question_id": 454,
        "answer_sql": "SELECT COUNT(*) FROM cards WHERE borderColor = 'WHITE' AND power = '*' OR power IS NULL;"
    },
    {
        "question_id": 455,
        "answer_sql": "SELECT name FROM cards WHERE isPromo = 1 AND side IS NOT NULL;"
    },
    {
        "question_id": 456,
        "answer_sql": "SELECT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer';"
    },
    {
        "question_id": 457,
        "answer_sql": "SELECT DISTINCT T1.purchaseUrls FROM cards AS T1 JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.promoTypes LIKE '%bundle%'"
    },
    {
        "question_id": 458,
        "answer_sql": "SELECT COUNT(DISTINCT c.id) AS artist_count FROM cards c JOIN sets s ON c.setCode = s.code WHERE c.borderColor = 'black' AND c.availability LIKE '%arena,mtgo%'"
    },
    {
        "question_id": 459,
        "answer_sql": "SELECT name, convertedManaCost FROM cards WHERE name = 'Serra Angel' UNION ALL SELECT name, convertedManaCost FROM cards WHERE name = 'Shrine Keeper' ORDER BY convertedManaCost DESC LIMIT 1;"
    },
    {
        "question_id": 460,
        "answer_sql": "SELECT artist FROM cards WHERE flavorName = 'Battra, Dark Destroyer';"
    },
    {
        "question_id": 461,
        "answer_sql": "SELECT name, convertedManaCost FROM cards WHERE frameVersion = '2003' ORDER BY convertedManaCost DESC LIMIT 3;"
    },
    {
        "question_id": 462,
        "answer_sql": ""
    },
    {
        "question_id": 463,
        "answer_sql": "SELECT COUNT(id) AS translation_count FROM set_translations WHERE setCode = (SELECT code FROM sets WHERE name = 'Angel of Mercy');"
    },
    {
        "question_id": 464,
        "answer_sql": ""
    },
    {
        "question_id": 465,
        "answer_sql": ""
    },
    {
        "question_id": 466,
        "answer_sql": "SELECT COUNT(T1.id) AS numberOfCards FROM cards AS T1 JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.artist = 'Adam Rex' AND T2.name = 'Hauptset Zehnte Edition';"
    },
    {
        "question_id": 467,
        "answer_sql": ""
    },
    {
        "question_id": 468,
        "answer_sql": ""
    },
    {
        "question_id": 469,
        "answer_sql": "SELECT s.name AS set_name FROM sets s WHERE s.mtgoCode IS NOT NULL;"
    },
    {
        "question_id": 470,
        "answer_sql": ""
    },
    {
        "question_id": 471,
        "answer_sql": ""
    },
    {
        "question_id": 472,
        "answer_sql": "SELECT COUNT(T1.id) AS num_Italian_translations FROM sets AS T1 JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Ice Age' AND T2.language = 'Italian';"
    },
    {
        "question_id": 473,
        "answer_sql": "SELECT CASE WHEN sets.isForeignOnly = 1 THEN 'Yes' ELSE 'No' END AS isAvailableOutsideUS FROM sets JOIN cards ON sets.code = cards.setCode WHERE cards.name = 'Adarkar Valkyrie';"
    },
    {
        "question_id": 474,
        "answer_sql": "SELECT COUNT(*) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Italian' AND T2.translation IS NOT NULL AND T1.baseSetSize < 10"
    },
    {
        "question_id": 475,
        "answer_sql": "SELECT COUNT(*) AS num_cards FROM cards JOIN sets ON cards.setCode = sets.code WHERE sets.name = 'Coldsnap' AND cards.borderColor = 'black';"
    },
    {
        "question_id": 476,
        "answer_sql": "SELECT T1.name FROM cards AS T1 JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Coldsnap' ORDER BY T1.convertedManaCost DESC LIMIT 1;"
    },
    {
        "question_id": 477,
        "answer_sql": "SELECT DISTINCT c.artist FROM cards c JOIN sets s ON c.setCode = s.code WHERE s.name = 'Coldsnap' AND (c.artist IN ('Jeremy Jarvis', 'Aaron Miller', 'Chippy'));"
    },
    {
        "question_id": 478,
        "answer_sql": ""
    },
    {
        "question_id": 479,
        "answer_sql": "SELECT COUNT(T1.id) AS unknown_power_count FROM cards AS T1 JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.convertedManaCost > 5 AND T1.power IN ('*', T1.power IS NULL);"
    },
    {
        "question_id": 480,
        "answer_sql": ""
    },
    {
        "question_id": 481,
        "answer_sql": "SELECT DISTINCT foreign_data.language FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.name = 'Ancestor''s Chosen' AND foreign_data.flavorText IS NOT NULL;"
    },
    {
        "question_id": 482,
        "answer_sql": ""
    },
    {
        "question_id": 483,
        "answer_sql": ""
    },
    {
        "question_id": 484,
        "answer_sql": ""
    },
    {
        "question_id": 485,
        "answer_sql": "SELECT date FROM rulings WHERE uuid = (SELECT uuid FROM cards WHERE name = 'Reminisce');"
    },
    {
        "question_id": 486,
        "answer_sql": "SELECT CAST(SUM(CASE WHEN T1.convertedManaCost = 7 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.convertedManaCost) AS Percentage FROM cards AS T1 JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Coldsnap';"
    },
    {
        "question_id": 487,
        "answer_sql": "SELECT CAST(SUM(CASE WHEN cards.cardKingdomFoilId = cards.cardKingdomId AND cards.cardKingdomId IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) * 100 FROM cards JOIN sets ON cards.setCode = sets.code WHERE sets.name = 'Coldsnap';"
    },
    {
        "question_id": 488,
        "answer_sql": "SELECT code FROM sets WHERE releaseDate = '2017-07-14';"
    },
    {
        "question_id": 489,
        "answer_sql": "SELECT keyruneCode FROM sets WHERE code = 'PKHC';"
    },
    {
        "question_id": 490,
        "answer_sql": "SELECT mcmId FROM sets WHERE code = 'SS2';"
    },
    {
        "question_id": 491,
        "answer_sql": ""
    },
    {
        "question_id": 492,
        "answer_sql": "SELECT type FROM sets WHERE name LIKE '%From the Vault: Lore%';"
    },
    {
        "question_id": 493,
        "answer_sql": "SELECT parentCode FROM sets WHERE name = 'Commander 2014 Oversized';"
    },
    {
        "question_id": 494,
        "answer_sql": "SELECT c.text, CASE WHEN c.hasContentWarning = 1 THEN 'Yes' ELSE 'No' END AS has_missing_or_degraded_properties FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.artist = 'Jim Pavelec';"
    },
    {
        "question_id": 495,
        "answer_sql": "SELECT releaseDate FROM sets WHERE code = (SELECT setCode FROM cards WHERE name = 'Evacuation');"
    },
    {
        "question_id": 496,
        "answer_sql": "SELECT SUM(baseSetSize) AS total_cards FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE setCode = 'Rinascita di Alara';"
    },
    {
        "question_id": 497,
        "answer_sql": "SELECT T1.type FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.translation = 'Huiti\u00e8me \u00e9dition' AND T1.type IS NOT NULL;"
    },
    {
        "question_id": 498,
        "answer_sql": ""
    },
    {
        "question_id": 499,
        "answer_sql": "SELECT COUNT(id) AS translation_count FROM set_translations WHERE setCode = 'Salvat 2011' AND translation IS NOT NULL;"
    },
    {
        "question_id": 500,
        "answer_sql": "SELECT T1.name FROM sets AS T1 JOIN set_translations AS T2 ON T1.code = T2.setCode JOIN cards AS T3 ON T1.code = T3.setCode WHERE T3.name = 'Fellwar Stone' AND T2.language = 'Japanese';"
    },
    {
        "question_id": 501,
        "answer_sql": "SELECT T1.name, T1.convertedManaCost FROM cards AS T1 JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Journey into Nyx Hero''s Path' ORDER BY T1.convertedManaCost DESC LIMIT 1;"
    },
    {
        "question_id": 502,
        "answer_sql": ""
    },
    {
        "question_id": 503,
        "answer_sql": "SELECT T2.type FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.name = 'Samite Pilgrim';"
    },
    {
        "question_id": 504,
        "answer_sql": "SELECT COUNT(*) FROM cards WHERE setCode = 'World Championship Decks 2004' AND convertedManaCost = '3';"
    },
    {
        "question_id": 505,
        "answer_sql": "SELECT set_translations.translation FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE sets.name = 'Mirrodin' AND set_translations.language = 'Chinese Simplified';"
    },
    {
        "question_id": 506,
        "answer_sql": "SELECT CAST(SUM(CASE WHEN T1.isNonFoilOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.isNonFoilOnly) * 100 FROM sets AS T1 JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Japanese';"
    },
    {
        "question_id": 507,
        "answer_sql": "SELECT CAST(SUM(CASE WHEN T2.isOnlineOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.id) AS Percentage FROM set_translations AS T1 JOIN cards AS T2 ON T1.id = T2.id WHERE T1.language = 'Portuguese (Brazil)';"
    },
    {
        "question_id": 508,
        "answer_sql": "SELECT DISTINCT t1.availability FROM cards t1 WHERE t1.artist = 'Aleksi Briclot' AND t1.isTextless = 1;"
    },
    {
        "question_id": 509,
        "answer_sql": "SELECT id FROM sets WHERE baseSetSize = (SELECT MAX(baseSetSize) FROM sets)"
    },
    {
        "question_id": 510,
        "answer_sql": "SELECT artist, MAX(convertedManaCost) AS maxConvertedManaCost FROM cards WHERE side IS NULL GROUP BY artist ORDER BY maxConvertedManaCost DESC LIMIT 1;"
    },
    {
        "question_id": 511,
        "answer_sql": "SELECT MAX(frameEffects) AS most_common_visual_frame_effects FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL;"
    },
    {
        "question_id": 512,
        "answer_sql": "SELECT COUNT(*) AS num_cards FROM cards WHERE power IS NULL OR power = '*' AND hasFoil = 0 AND duelDeck = 'a';"
    },
    {
        "question_id": 513,
        "answer_sql": "SELECT T1.id FROM sets AS T1 JOIN cards AS T2 ON T1.code = T2.setCode WHERE T1.type = 'commander' GROUP BY T1.id ORDER BY SUM(CASE WHEN T2.rarity IN ('promo', 'supplemental') THEN 1 ELSE 0 END) + SUM(CASE WHEN T2.rarity = 'alchemy' THEN 1 ELSE 0 END) DESC LIMIT 1;"
    },
    {
        "question_id": 514,
        "answer_sql": ""
    },
    {
        "question_id": 515,
        "answer_sql": "SELECT MIN(originalReleaseDate) AS oldestReleaseDate, rarity AS mythicRarity FROM cards WHERE rarity = 'mythic' AND type = 'mythic'"
    },
    {
        "question_id": 516,
        "answer_sql": "SELECT COUNT(DISTINCT c.id) AS numberOfCards FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.artist = 'Volkan Baga' AND fd.language = 'French';"
    },
    {
        "question_id": 517,
        "answer_sql": "SELECT COUNT(T1.id) AS rare_enchantment_cards FROM cards AS T1 JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'rare' AND T1.types LIKE '%Enchantment%' AND T2.status = 'Legal' AND T1.name = 'Abundance';"
    },
    {
        "question_id": 518,
        "answer_sql": ""
    },
    {
        "question_id": 519,
        "answer_sql": ""
    },
    {
        "question_id": 520,
        "answer_sql": ""
    },
    {
        "question_id": 521,
        "answer_sql": "SELECT legalities.status FROM legalities JOIN cards ON legalities.uuid = cards.uuid JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.frameVersion = '1997' AND cards.artist = 'D. Alexander Gregory' AND cards.hasContentWarning = 1 AND legalities.format = 'legacy';"
    },
    {
        "question_id": 522,
        "answer_sql": ""
    },
    {
        "question_id": 523,
        "answer_sql": ""
    },
    {
        "question_id": 524,
        "answer_sql": ""
    },
    {
        "question_id": 525,
        "answer_sql": ""
    },
    {
        "question_id": 526,
        "answer_sql": "SELECT COUNT(id) AS numberOfCards FROM cards WHERE artist = 'Matthew D. Wilson' AND availability = 'paper';"
    },
    {
        "question_id": 527,
        "answer_sql": "SELECT MAX(rulings.date) AS date, rulings.text FROM rulings JOIN cards ON rulings.uuid = cards.uuid WHERE cards.artist = 'Kev Walker' ORDER BY MAX(rulings.date) DESC;"
    },
    {
        "question_id": 528,
        "answer_sql": "SELECT cards.name FROM cards JOIN sets ON cards.setCode = sets.code WHERE sets.name = 'Hour of Devastation' UNION SELECT cards.name FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'legal';"
    },
    {
        "question_id": 529,
        "answer_sql": "SELECT DISTINCT T1.name FROM sets AS T1 LEFT JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Korean' AND T2.translation IS NOT NULL AND T2.translation NOT LIKE '%Japanese%'"
    },
    {
        "question_id": 530,
        "answer_sql": ""
    },
    {
        "question_id": 531,
        "answer_sql": "SELECT DisplayName, Reputation FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') ORDER BY Reputation DESC LIMIT 1;"
    },
    {
        "question_id": 532,
        "answer_sql": ""
    },
    {
        "question_id": 533,
        "answer_sql": "SELECT COUNT(DISTINCT u.Id) AS NumberOfUsers FROM users u WHERE u.LastAccessDate > '2014-09-01 00:00:00';"
    },
    {
        "question_id": 534,
        "answer_sql": "SELECT DisplayName FROM users WHERE Views = (SELECT MAX(Views) FROM users);"
    },
    {
        "question_id": 535,
        "answer_sql": "SELECT COUNT(DISTINCT u.Id) AS NumberOfUsers FROM users u JOIN votes v ON u.Id = v.UserId WHERE u.UpVotes > 100 AND u.DownVotes > 1;"
    },
    {
        "question_id": 536,
        "answer_sql": "SELECT COUNT(DISTINCT u.Id) AS NumberOfUsers FROM users u WHERE u.Views > 10 AND u.CreationDate > '2013-12-31';"
    },
    {
        "question_id": 537,
        "answer_sql": "SELECT COUNT(DISTINCT p.Id) AS NumberOfPosts FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'csgillespie';"
    },
    {
        "question_id": 538,
        "answer_sql": "SELECT DISTINCT p.Title FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'csgillespie';"
    },
    {
        "question_id": 539,
        "answer_sql": "SELECT u.DisplayName FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE p.Title = 'Eliciting priors from experts';"
    },
    {
        "question_id": 540,
        "answer_sql": "SELECT p.Title FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'csgillespie' ORDER BY p.ViewCount DESC LIMIT 1;"
    },
    {
        "question_id": 541,
        "answer_sql": "SELECT u.DisplayName FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE p.FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts) ORDER BY u.DisplayName ASC LIMIT 1;"
    },
    {
        "question_id": 542,
        "answer_sql": "SELECT SUM(T2.CommentCount) AS TotalComments FROM users AS T1 JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'csgillespie';"
    },
    {
        "question_id": 543,
        "answer_sql": "SELECT MAX(posts.AnswerCount) AS MaxAnswerCount FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'csgillespie';"
    },
    {
        "question_id": 544,
        "answer_sql": "SELECT DISTINCT u.DisplayName FROM users u JOIN posts p ON u.Id = p.OwnerUserId JOIN postHistory ph ON p.Id = ph.PostId WHERE p.Title = 'Examples for teaching: Correlation does not mean causation' AND ph.UserId = u.Id AND ph.UserId = u.Id;"
    },
    {
        "question_id": 545,
        "answer_sql": "SELECT COUNT(T1.ParentId) AS RootPostCount FROM posts AS T1 JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie' AND T1.ParentId IS NULL;"
    },
    {
        "question_id": 546,
        "answer_sql": "SELECT DISTINCT u.DisplayName FROM users u JOIN posts p ON u.Id = p.OwnerUserId JOIN votes v ON p.Id = v.PostId WHERE p.ClosedDate IS NOT NULL;"
    },
    {
        "question_id": 547,
        "answer_sql": "SELECT COUNT(DISTINCT p.Id) AS NumberOfPosts FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.Age > 65 AND p.Score > 19;"
    },
    {
        "question_id": 548,
        "answer_sql": "SELECT users.Location FROM users JOIN posts ON users.Id = posts.OwnerUserId JOIN comments ON posts.Id = comments.PostId WHERE posts.Title = 'Eliciting priors from experts'"
    },
    {
        "question_id": 549,
        "answer_sql": "SELECT posts.Body FROM posts JOIN tags ON posts.Id = tags.ExcerptPostId WHERE tags.TagName = 'bayesian';"
    },
    {
        "question_id": 550,
        "answer_sql": "SELECT p.Body AS PostBody FROM posts p JOIN tags t ON p.Id = t.ExcerptPostId WHERE t.Count = (SELECT MAX(Count) FROM tags) ORDER BY t.Count DESC LIMIT 1;"
    },
    {
        "question_id": 551,
        "answer_sql": "SELECT COUNT(*) AS BadgeCount FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie');"
    },
    {
        "question_id": 552,
        "answer_sql": "SELECT DISTINCT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'csgillespie';"
    },
    {
        "question_id": 553,
        "answer_sql": ""
    },
    {
        "question_id": 554,
        "answer_sql": "SELECT DisplayName FROM users WHERE Id = (SELECT UserId FROM badges GROUP BY UserId ORDER BY COUNT(Id) DESC LIMIT 1);"
    },
    {
        "question_id": 555,
        "answer_sql": "SELECT AVG(posts.Score) AS AverageScore FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'csgillespie';"
    },
    {
        "question_id": 556,
        "answer_sql": "SELECT AVG(T2.Id) AS AverageBadges FROM users AS T1 JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Views > 200;"
    },
    {
        "question_id": 557,
        "answer_sql": "SELECT CAST(COUNT(CASE WHEN u.Age > 65 THEN p.Id ELSE NULL END) AS REAL) * 100 / COUNT(p.Id) FROM posts p JOIN users u ON p.OwnerUserId = u.Id JOIN votes v ON p.Id = v.PostId WHERE p.Score > 20;"
    },
    {
        "question_id": 558,
        "answer_sql": "SELECT COUNT(v.Id) AS VoteCount FROM votes v JOIN users u ON v.UserId = u.Id WHERE u.Id = 58 AND v.CreationDate = '2010-07-19';"
    },
    {
        "question_id": 559,
        "answer_sql": "SELECT CreationDate FROM votes WHERE CreationDate = (SELECT MAX(CreationDate) FROM votes) GROUP BY CreationDate ORDER BY COUNT(Id) DESC LIMIT 1;"
    },
    {
        "question_id": 560,
        "answer_sql": "SELECT COUNT(Id) AS Revival_Badges FROM badges WHERE Name = 'Revival';"
    },
    {
        "question_id": 561,
        "answer_sql": "SELECT posts.Title FROM posts JOIN comments ON posts.Id = comments.PostId WHERE comments.Score = (SELECT MAX(Score) FROM comments) ORDER BY posts.Score DESC LIMIT 1;"
    },
    {
        "question_id": 562,
        "answer_sql": "SELECT COUNT(comments.Id) AS CommentCount FROM comments JOIN posts ON comments.PostId = posts.Id WHERE posts.ViewCount = 1910;"
    },
    {
        "question_id": 563,
        "answer_sql": "SELECT T1.FavoriteCount FROM posts AS T1 JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T2.UserId = '3025' AND T2.CreationDate = '2014-04-23 20:29:39.0';"
    },
    {
        "question_id": 564,
        "answer_sql": ""
    },
    {
        "question_id": 565,
        "answer_sql": ""
    },
    {
        "question_id": 566,
        "answer_sql": "SELECT users.Reputation FROM users JOIN posts ON users.Id = posts.OwnerUserId WHERE posts.Id = '65041';"
    },
    {
        "question_id": 567,
        "answer_sql": "SELECT COUNT(T1.Id) AS NumberOfPosts FROM users AS T1 JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Tiago Pasqualini';"
    },
    {
        "question_id": 568,
        "answer_sql": "SELECT u.DisplayName FROM votes v JOIN posts p ON v.PostId = p.Id JOIN users u ON v.UserId = u.Id WHERE v.Id = 6347;"
    },
    {
        "question_id": 569,
        "answer_sql": "SELECT COUNT(v.Id) AS VoteCount FROM votes v JOIN posts p ON v.PostId = p.Id WHERE p.Title LIKE '%data visualization%'"
    },
    {
        "question_id": 570,
        "answer_sql": "SELECT badges.Name FROM users JOIN badges ON users.Id = badges.UserId WHERE users.DisplayName = 'DatEpicCoderGuyWhoPrograms';"
    },
    {
        "question_id": 571,
        "answer_sql": "SELECT COUNT(posts.Id) / COUNT(votes.Id) AS PostVsVotesRatio FROM posts JOIN users ON posts.OwnerUserId = users.Id JOIN votes ON posts.Id = votes.PostId WHERE users.Id = '24';"
    },
    {
        "question_id": 572,
        "answer_sql": "SELECT SUM(ViewCount) AS TotalViews FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer';"
    },
    {
        "question_id": 573,
        "answer_sql": "SELECT Text FROM comments WHERE Score = 17;"
    },
    {
        "question_id": 574,
        "answer_sql": "SELECT DisplayName FROM users WHERE WebsiteUrl = 'http://stackoverflow.com';"
    },
    {
        "question_id": 575,
        "answer_sql": "SELECT T1.Name FROM badges AS T1 JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'SilentGhost';"
    },
    {
        "question_id": 576,
        "answer_sql": "SELECT c.UserId, u.DisplayName FROM comments c JOIN users u ON c.UserId = u.Id WHERE c.Text = 'thank you user93!';"
    },
    {
        "question_id": 577,
        "answer_sql": "SELECT comments.Text FROM comments JOIN users ON comments.UserId = users.Id WHERE users.DisplayName = 'A Lion';"
    },
    {
        "question_id": 578,
        "answer_sql": "SELECT u.DisplayName, u.Reputation FROM users u JOIN posts p ON u.Id = p.OwnerUserId JOIN comments c ON p.Id = c.PostId WHERE p.Title = 'Understanding what Dassault iSight is doing?'"
    },
    {
        "question_id": 579,
        "answer_sql": "SELECT c.Text FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.Title = 'How does gentle boosting differ from AdaBoost?'"
    },
    {
        "question_id": 580,
        "answer_sql": "SELECT users.DisplayName FROM badges JOIN users ON badges.UserId = users.Id WHERE badges.Name = 'Necromancer';"
    },
    {
        "question_id": 581,
        "answer_sql": ""
    },
    {
        "question_id": 582,
        "answer_sql": "SELECT p.Title FROM posts p JOIN postHistory ph ON p.Id = ph.PostId JOIN users u ON u.Id = ph.UserId WHERE u.DisplayName = 'Vebjorn Ljosa' AND ph.Comment IS NOT NULL;"
    },
    {
        "question_id": 583,
        "answer_sql": "SELECT p.Score, u.WebsiteUrl FROM posts p JOIN users u ON p.OwnerUserId = u.Id JOIN postHistory ph ON p.Id = ph.PostId WHERE ph.UserId = (SELECT Id FROM users WHERE DisplayName = 'Yevgeny')"
    },
    {
        "question_id": 584,
        "answer_sql": "SELECT c.Text FROM comments c JOIN posts p ON c.PostId = p.Id JOIN postHistory ph ON p.Id = ph.PostId JOIN users u ON u.Id = ph.UserId WHERE p.Title = 'Why square the difference instead of taking the absolute value in standard deviation?' AND u.DisplayName IN ( SELECT DISTINCT u.DisplayName FROM users u JOIN votes v ON u.Id = v.UserId JOIN postHistory ph ON u.Id = ph.UserId WHERE ph.Text LIKE '%edited%' )"
    },
    {
        "question_id": 585,
        "answer_sql": "SELECT SUM(votes.BountyAmount) AS TotalBountyAmount FROM votes JOIN posts ON votes.PostId = posts.Id WHERE posts.Title LIKE '%data%'"
    },
    {
        "question_id": 586,
        "answer_sql": "SELECT u.DisplayName FROM users u JOIN votes v ON u.Id = v.UserId JOIN posts p ON v.PostId = p.Id WHERE p.Title LIKE '%variance%' AND v.BountyAmount = 50;"
    },
    {
        "question_id": 587,
        "answer_sql": ""
    },
    {
        "question_id": 588,
        "answer_sql": "SELECT COUNT(DISTINCT c.Id) AS TotalComments FROM comments c JOIN users u ON c.UserId = u.Id WHERE u.Id = 13;"
    },
    {
        "question_id": 589,
        "answer_sql": "SELECT Id FROM users ORDER BY Reputation DESC LIMIT 1;"
    },
    {
        "question_id": 590,
        "answer_sql": "SELECT Id FROM users ORDER BY Views ASC LIMIT 1;"
    },
    {
        "question_id": 591,
        "answer_sql": "SELECT COUNT(DISTINCT b.UserId) AS NumberOfUsersAwardedSupporterBadge FROM badges b WHERE b.Date BETWEEN '2011-01-01' AND '2011-12-31';"
    },
    {
        "question_id": 592,
        "answer_sql": ""
    },
    {
        "question_id": 593,
        "answer_sql": ""
    },
    {
        "question_id": 594,
        "answer_sql": "SELECT DisplayName, Reputation FROM users WHERE Id = (SELECT OwnerUserId FROM posts WHERE Id = 1);"
    },
    {
        "question_id": 595,
        "answer_sql": "SELECT u.DisplayName \nFROM users u \nJOIN (\n    SELECT UserId \n    FROM (\n        SELECT UserId, COUNT(DISTINCT PostId) AS post_count \n        FROM postHistory \n        GROUP BY UserId \n        HAVING COUNT(DISTINCT PostId) = 1 \n    ) AS subquery \n    JOIN posts p ON p.OwnerUserId = subquery.UserId \n    WHERE p.ViewCount >= 1000 \n) AS ph ON u.Id = ph.UserId"
    },
    {
        "question_id": 596,
        "answer_sql": "SELECT u.DisplayName, b.Name FROM users u JOIN ( SELECT UserId, COUNT(Id) AS CommentCount FROM comments GROUP BY UserId ORDER BY CommentCount DESC LIMIT 1 ) c ON u.Id = c.UserId JOIN badges b ON u.Id = b.UserId;"
    },
    {
        "question_id": 597,
        "answer_sql": "SELECT COUNT(DISTINCT u.Id) AS India_Teacher_Badge_Count FROM users u JOIN badges b ON u.Id = b.UserId WHERE u.Location = 'India' AND b.Name = 'Teacher';"
    },
    {
        "question_id": 598,
        "answer_sql": ""
    },
    {
        "question_id": 599,
        "answer_sql": "SELECT pht.Id, COUNT(DISTINCT ch.UserId) AS UniqueUsers FROM postHistory pht JOIN comments ch ON pht.PostId = ch.PostId WHERE pht.PostId = 3720 GROUP BY pht.Id;"
    },
    {
        "question_id": 600,
        "answer_sql": "SELECT p.Id, p.ViewCount FROM posts p JOIN postLinks pl ON p.Id = pl.PostId JOIN posts r ON pl.RelatedPostId = r.Id WHERE p.Id = 61217;"
    },
    {
        "question_id": 601,
        "answer_sql": ""
    },
    {
        "question_id": 602,
        "answer_sql": "SELECT p.Id, u.Id FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.Score > 60;"
    },
    {
        "question_id": 603,
        "answer_sql": "SELECT SUM(posts.FavoriteCount) AS TotalFavouriteCount FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.Id = 686 AND strftime('%Y', posts.CreaionDate) = '2011';"
    },
    {
        "question_id": 604,
        "answer_sql": ""
    },
    {
        "question_id": 605,
        "answer_sql": "SELECT COUNT(DISTINCT UserId) AS NumberOfUsersWithAnnouncerBadge FROM badges;"
    },
    {
        "question_id": 606,
        "answer_sql": ""
    },
    {
        "question_id": 607,
        "answer_sql": "SELECT COUNT(T1.Score) AS PositiveComments FROM comments AS T1 WHERE T1.Score > 60;"
    },
    {
        "question_id": 608,
        "answer_sql": "SELECT c.Id AS CommentId, c.PostId AS PostId, c.Score AS Score, c.Text AS Text, c.CreationDate AS CreationDate, c.UserId AS UserId, c.UserDisplayName AS UserDisplayName FROM comments c JOIN posts p ON c.PostId = p.Id WHERE c.CreationDate = '2010-07-19 19:16:14.0';"
    },
    {
        "question_id": 609,
        "answer_sql": "SELECT COUNT(DISTINCT p.Id) AS NumberOfPostsWithScore10 FROM posts p WHERE p.Score = 10;"
    },
    {
        "question_id": 610,
        "answer_sql": "SELECT DISTINCT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Reputation = (SELECT MAX(Reputation) FROM users)"
    },
    {
        "question_id": 611,
        "answer_sql": "SELECT u.Reputation FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Date = '2010-07-19 19:39:08.0';"
    },
    {
        "question_id": 612,
        "answer_sql": "SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'Pierre';"
    },
    {
        "question_id": 613,
        "answer_sql": "SELECT DISTINCT b.Date FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Location = 'Rochester, NY';"
    },
    {
        "question_id": 614,
        "answer_sql": "SELECT CAST(COUNT(DISTINCT CASE WHEN badges.Name = 'Teacher' THEN badges.UserId ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT badges.UserId) AS Percentage FROM badges"
    },
    {
        "question_id": 615,
        "answer_sql": "SELECT CAST(COUNT(CASE WHEN T2.Age BETWEEN 13 AND 18 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T2.Id) FROM badges AS T1 JOIN users AS T2 ON T1.UserId = T2.Id;"
    },
    {
        "question_id": 616,
        "answer_sql": "SELECT comments.Score FROM comments JOIN posts ON comments.PostId = posts.Id JOIN users ON posts.OwnerUserId = users.Id WHERE comments.CreationDate = '2010-07-19 19:19:56.0';"
    },
    {
        "question_id": 617,
        "answer_sql": "SELECT c.Text AS CommentContent FROM comments c JOIN posts p ON c.PostId = p.Id WHERE c.CreationDate = '2010-07-19 19:37:33.0';"
    },
    {
        "question_id": 618,
        "answer_sql": "SELECT u.Age FROM users u JOIN badges b ON u.Id = b.UserId JOIN postHistory ph ON u.Id = ph.UserId WHERE u.Location = 'Vienna, Austria';"
    },
    {
        "question_id": 619,
        "answer_sql": "SELECT COUNT(DISTINCT b.UserId) AS AdultCount FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Age BETWEEN 19 AND 65 AND b.Name = 'Supporter';"
    },
    {
        "question_id": 620,
        "answer_sql": "SELECT COUNT(DISTINCT u.Id) AS NumberOfViews FROM users u JOIN badges b ON u.Id = b.UserId JOIN posts p ON u.Id = p.OwnerUserId WHERE b.Date = '2010-07-19 19:39:08.0';"
    },
    {
        "question_id": 621,
        "answer_sql": "SELECT DISTINCT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Reputation = (SELECT MIN(Reputation) FROM users) ORDER BY u.Reputation DESC;"
    },
    {
        "question_id": 622,
        "answer_sql": "SELECT DISTINCT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'Sharpie';"
    },
    {
        "question_id": 623,
        "answer_sql": "SELECT COUNT(DISTINCT b.Id) AS ElderSupporterBadgeCount FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Age > 65 AND b.Name = 'Supporter';"
    },
    {
        "question_id": 624,
        "answer_sql": "SELECT DisplayName FROM users WHERE Id = 30;"
    },
    {
        "question_id": 625,
        "answer_sql": "SELECT COUNT(DISTINCT u.Id) AS NumberOfUsersFromNewYork FROM users u WHERE u.Location = 'New York';"
    },
    {
        "question_id": 626,
        "answer_sql": ""
    },
    {
        "question_id": 627,
        "answer_sql": "SELECT COUNT(DISTINCT u.Id) AS AdultUsers FROM users u WHERE u.Age BETWEEN 19 AND 65;"
    },
    {
        "question_id": 628,
        "answer_sql": "SELECT u.DisplayName FROM users u WHERE u.DisplayName = (SELECT u.DisplayName FROM users u WHERE u.DisplayName = (SELECT MAX(u.DisplayName) FROM users u))"
    },
    {
        "question_id": 629,
        "answer_sql": ""
    },
    {
        "question_id": 630,
        "answer_sql": ""
    },
    {
        "question_id": 631,
        "answer_sql": "SELECT COUNT(DISTINCT p.Id) AS NumberOfPosts FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'Daniel Vassallo';"
    },
    {
        "question_id": 632,
        "answer_sql": "SELECT COUNT(T1.Id) AS VoteCount FROM votes AS T1 JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Harlan';"
    },
    {
        "question_id": 633,
        "answer_sql": "SELECT p.Id FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'slashnick' GROUP BY p.Id ORDER BY p.AnswerCount DESC LIMIT 1;"
    },
    {
        "question_id": 634,
        "answer_sql": ""
    },
    {
        "question_id": 635,
        "answer_sql": "SELECT COUNT(*) AS NumberOfPosts FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'Matt Parker' AND p.Id IN ( SELECT PostId FROM votes WHERE PostId > 4 );"
    },
    {
        "question_id": 636,
        "answer_sql": "SELECT COUNT(T2.Score) AS NegativeComments FROM users AS T1 JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Neil McGuigan' AND T2.Score < 60;"
    },
    {
        "question_id": 637,
        "answer_sql": "SELECT DISTINCT t1.TagName FROM tags t1 WHERE t1.Id NOT IN ( SELECT DISTINCT p.Id FROM posts p INNER JOIN votes v ON p.Id = v.PostId INNER JOIN users u ON u.Id = v.UserId WHERE u.DisplayName = 'Mark Meckes' )"
    },
    {
        "question_id": 638,
        "answer_sql": "SELECT DISTINCT U.DisplayName FROM users U JOIN badges B ON U.Id = B.UserId WHERE B.Name = 'Organizer';"
    },
    {
        "question_id": 639,
        "answer_sql": ""
    },
    {
        "question_id": 640,
        "answer_sql": "SELECT SUM(CASE WHEN T2.DisplayName = 'Mornington' THEN ViewCount ELSE 0 END) - SUM(CASE WHEN T2.DisplayName = 'Amos' THEN ViewCount ELSE 0 END) AS ViewCountDifference FROM posts AS T1 JOIN users AS T2 ON T1.OwnerUserId = T2.Id;"
    },
    {
        "question_id": 641,
        "answer_sql": "SELECT COUNT(DISTINCT b.UserId) AS NumberOfUsers FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.DisplayName LIKE '%commentator%' AND u.CreationDate >= '2014-01-01' AND u.CreationDate < '2015-01-01';"
    },
    {
        "question_id": 642,
        "answer_sql": "SELECT COUNT(T1.Id) AS NumberOfPosts FROM posts AS T1 WHERE T1.CreaionDate BETWEEN '2010-07-21 00:00:00' AND '2012-07-21 23:59:59';"
    },
    {
        "question_id": 643,
        "answer_sql": "SELECT DisplayName, Age FROM users WHERE Id = (SELECT OwnerUserId FROM posts ORDER BY ViewCount DESC LIMIT 1);"
    },
    {
        "question_id": 644,
        "answer_sql": "SELECT p.CreaionDate AS LastEditDate, u.Id AS LastEditorUserId FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.Title = 'Detecting a given face in a database of facial images';"
    },
    {
        "question_id": 645,
        "answer_sql": "SELECT COUNT(T1.Score) AS NegativeComments FROM comments AS T1 JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Score < 60 AND T2.Id = 13;"
    },
    {
        "question_id": 646,
        "answer_sql": "SELECT p.Title, u.DisplayName FROM posts p JOIN comments c ON p.Id = c.PostId JOIN users u ON p.OwnerUserId = u.Id WHERE c.Score > 60 ORDER BY p.Title;"
    },
    {
        "question_id": 647,
        "answer_sql": "SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Location IN ('North Pole') AND b.Date BETWEEN '2011-01-01' AND '2011-12-31';"
    },
    {
        "question_id": 648,
        "answer_sql": "SELECT u.DisplayName, u.WebsiteUrl FROM users u JOIN posts p ON u.Id = p.OwnerUserId JOIN votes v ON p.Id = v.PostId WHERE p.FavoriteCount > 150;"
    },
    {
        "question_id": 649,
        "answer_sql": "SELECT p.Id AS PostId, COUNT(ph.Id) AS PostHistoryCount, MAX(ph.CreationDate) AS LastEditDate FROM posts p JOIN postHistory ph ON p.Id = ph.PostId WHERE p.Title = 'What is the best introductory Bayesian statistics textbook?' GROUP BY p.Id"
    },
    {
        "question_id": 650,
        "answer_sql": ""
    },
    {
        "question_id": 651,
        "answer_sql": "SELECT T1.Title FROM posts AS T1 JOIN postLinks AS T2 ON T1.Id = T2.PostId JOIN posts AS T3 ON T2.RelatedPostId = T3.Id WHERE T1.Title = 'How to tell if something happened in a data set which monitors a value over time';"
    },
    {
        "question_id": 652,
        "answer_sql": ""
    },
    {
        "question_id": 653,
        "answer_sql": "SELECT u.DisplayName FROM users u JOIN posts p ON u.Id = p.OwnerUserId JOIN votes v ON p.Id = v.PostId WHERE p.ViewCount = (SELECT MAX(ViewCount) FROM posts) ORDER BY p.ViewCount DESC LIMIT 1;"
    },
    {
        "question_id": 654,
        "answer_sql": ""
    },
    {
        "question_id": 655,
        "answer_sql": "SELECT p.Title, pl.LinkTypeId FROM posts p JOIN postLinks pl ON p.Id = pl.PostId WHERE p.Title = 'What are principal component scores?';"
    },
    {
        "question_id": 656,
        "answer_sql": "SELECT DISTINCT T2.DisplayName FROM posts AS T1 JOIN comments AS T3 ON T1.Id = T3.PostId JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.ParentId IS NOT NULL ORDER BY T3.Score DESC LIMIT 1;"
    },
    {
        "question_id": 657,
        "answer_sql": "SELECT u.DisplayName, u.WebsiteUrl FROM votes v JOIN users u ON v.UserId = u.Id WHERE v.VoteTypeId = 8 ORDER BY v.BountyAmount DESC LIMIT 1;"
    },
    {
        "question_id": 658,
        "answer_sql": "SELECT posts.Title FROM posts ORDER BY posts.ViewCount DESC LIMIT 5;"
    },
    {
        "question_id": 659,
        "answer_sql": "SELECT COUNT(T1.Id) AS TagCount FROM tags AS T1 WHERE T1.Count BETWEEN 5000 AND 7000;"
    },
    {
        "question_id": 660,
        "answer_sql": "SELECT OwnerUserId FROM posts ORDER BY FavoriteCount DESC LIMIT 1;"
    },
    {
        "question_id": 661,
        "answer_sql": "SELECT MAX(T1.Reputation) AS MostInfluentialAge FROM users AS T1 WHERE T1.AccountId = ( SELECT T2.AccountId FROM users AS T2 GROUP BY T2.AccountId ORDER BY COUNT(*) DESC LIMIT 1 );"
    },
    {
        "question_id": 662,
        "answer_sql": ""
    },
    {
        "question_id": 663,
        "answer_sql": "SELECT MIN(Age) AS YoungestUserId FROM users;"
    },
    {
        "question_id": 664,
        "answer_sql": "SELECT MAX(posts.Score) AS Score FROM posts JOIN tags ON posts.Id = tags.ExcerptPostId ORDER BY posts.ViewCount DESC LIMIT 1;"
    },
    {
        "question_id": 665,
        "answer_sql": ""
    },
    {
        "question_id": 666,
        "answer_sql": "SELECT MAX(posts.FavoriteCount) AS MaxFavoriteCount, posts.Id AS PostId FROM posts JOIN votes ON posts.Id = votes.PostId WHERE votes.UserId = 1465 GROUP BY posts.Id ORDER BY MaxFavoriteCount DESC LIMIT 1;"
    },
    {
        "question_id": 667,
        "answer_sql": "SELECT T1.Title FROM posts AS T1 JOIN postLinks AS T2 ON T1.Id = T2.PostId ORDER BY T2.CreationDate ASC LIMIT 1;"
    },
    {
        "question_id": 668,
        "answer_sql": "SELECT DisplayName FROM users WHERE Id = (SELECT UserId FROM badges GROUP BY UserId ORDER BY COUNT(Name) DESC LIMIT 1);"
    },
    {
        "question_id": 669,
        "answer_sql": "SELECT MIN(T1.CreationDate) AS FirstVoteDate FROM votes AS T1 JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'chl' GROUP BY T1.CreationDate;"
    },
    {
        "question_id": 670,
        "answer_sql": "SELECT MIN(T1.CreaionDate) AS Date FROM posts AS T1 JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.Age = (SELECT MIN(Age) FROM users);"
    },
    {
        "question_id": 671,
        "answer_sql": "SELECT DisplayName FROM users WHERE Id = (SELECT UserId FROM badges WHERE Name = 'Autobiographer' ORDER BY Date ASC LIMIT 1);"
    },
    {
        "question_id": 672,
        "answer_sql": "SELECT COUNT(DISTINCT u.Id) AS UserCount FROM users u JOIN posts p ON u.Id = p.OwnerUserId JOIN votes v ON p.Id = v.PostId WHERE u.Location = 'United Kingdom' GROUP BY u.Id HAVING SUM(CASE WHEN v.VoteTypeId = 1 THEN 1 ELSE 0 END) >= 4;"
    },
    {
        "question_id": 673,
        "answer_sql": "SELECT AVG(votes.PostId) AS AverageNumberOfPostsVoted FROM votes JOIN users ON votes.UserId = users.Id WHERE users.Age = (SELECT MAX(Age) FROM users);"
    },
    {
        "question_id": 674,
        "answer_sql": "SELECT DisplayName, Reputation FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users);"
    },
    {
        "question_id": 675,
        "answer_sql": "SELECT COUNT(DISTINCT u.Id) AS NumberOfUsers FROM users u WHERE u.Reputation > 2000 AND u.Views > 1000;"
    },
    {
        "question_id": 676,
        "answer_sql": ""
    },
    {
        "question_id": 677,
        "answer_sql": ""
    },
    {
        "question_id": 678,
        "answer_sql": "SELECT p.Id, p.Title FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'Harvey Motulsky' ORDER BY p.ViewCount DESC LIMIT 1;"
    },
    {
        "question_id": 679,
        "answer_sql": "SELECT posts.Id, posts.Title FROM posts WHERE posts.Score = (SELECT MAX(Score) FROM posts) ORDER BY posts.Score DESC LIMIT 1;"
    },
    {
        "question_id": 680,
        "answer_sql": "SELECT AVG(posts.Score) AS AverageScore FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'Stephen Turner';"
    },
    {
        "question_id": 681,
        "answer_sql": ""
    },
    {
        "question_id": 682,
        "answer_sql": ""
    },
    {
        "question_id": 683,
        "answer_sql": ""
    },
    {
        "question_id": 684,
        "answer_sql": "SELECT (COUNT(CASE WHEN Age BETWEEN 13 AND 18 THEN 1 ELSE NULL END) / COUNT(Id)) * 100 AS percentage FROM users;"
    },
    {
        "question_id": 685,
        "answer_sql": ""
    },
    {
        "question_id": 686,
        "answer_sql": "SELECT COUNT(*) AS TotalPostsAboveAverage FROM posts WHERE ViewCount > (SELECT AVG(ViewCount) FROM posts);"
    },
    {
        "question_id": 687,
        "answer_sql": "SELECT COUNT(*) AS CommentCount FROM comments WHERE PostId = ( SELECT PostId FROM posts WHERE Score = ( SELECT MAX(Score) FROM posts ) );"
    },
    {
        "question_id": 688,
        "answer_sql": "SELECT COUNT(DISTINCT p.Id) AS NumberOfPosts FROM posts p JOIN tags t ON p.Id = t.ExcerptPostId JOIN users u ON p.OwnerUserId = u.Id WHERE p.ViewCount > 35000 AND p.CommentCount = 0;"
    },
    {
        "question_id": 689,
        "answer_sql": "SELECT u.DisplayName, u.Location FROM users u JOIN posts p ON u.Id = p.OwnerUserId JOIN postHistory ph ON p.Id = ph.PostId WHERE ph.Id = (SELECT Id FROM postHistory WHERE PostId = 183) ORDER BY ph.CreationDate DESC LIMIT 1;"
    },
    {
        "question_id": 690,
        "answer_sql": "SELECT MAX(badges.Date) AS LatestAwardedDate, badges.Name AS BadgeName FROM badges JOIN users ON badges.UserId = users.Id WHERE users.DisplayName = 'Emmett' ORDER BY badges.Date DESC LIMIT 1;"
    },
    {
        "question_id": 691,
        "answer_sql": "SELECT COUNT(DISTINCT u.Id) AS AdultUsersWithOver5000Upvotes FROM users u WHERE u.Age BETWEEN 19 AND 65 AND u.UpVotes > 5000;"
    },
    {
        "question_id": 692,
        "answer_sql": "SELECT stats_badges.Date - users.CreationDate AS Duration FROM badges AS stats_badges JOIN users ON stats_badges.UserId = users.Id WHERE users.DisplayName = 'Zolomon'"
    },
    {
        "question_id": 693,
        "answer_sql": "SELECT COUNT(DISTINCT p.Id) AS NumberOfPosts, COUNT(DISTINCT c.Id) AS NumberOfComments FROM users u JOIN posts p ON u.Id = p.OwnerUserId JOIN comments c ON p.Id = c.PostId WHERE u.CreationDate = (SELECT MAX(CreationDate) FROM users)"
    },
    {
        "question_id": 694,
        "answer_sql": "SELECT c.Text AS LatestCommentText, u.DisplayName AS CommenterDisplayName FROM comments c JOIN users u ON c.UserId = u.Id WHERE c.PostId = ( SELECT p.Id FROM posts p WHERE p.Title = 'Analysing wind data with R' AND p.LasActivityDate = ( SELECT MAX(p2.LasActivityDate) FROM posts p2 WHERE p2.Title = 'Analysing wind data with R' ) ) ORDER BY c.CreationDate DESC LIMIT 1;"
    },
    {
        "question_id": 695,
        "answer_sql": "SELECT COUNT(DISTINCT UserId) AS NumberOfUsersAwardedCitizenPatrolBadge FROM badges WHERE Name = 'Citizen Patrol';"
    },
    {
        "question_id": 696,
        "answer_sql": "SELECT COUNT(DISTINCT p.Id) AS PostCount FROM posts p JOIN tags t ON p.Id = t.ExcerptPostId WHERE t.TagName = 'careers';"
    },
    {
        "question_id": 697,
        "answer_sql": "SELECT users.Reputation, users.Views FROM users JOIN badges ON users.Id = badges.UserId WHERE users.DisplayName = 'Jarrod Dixon';"
    },
    {
        "question_id": 698,
        "answer_sql": "SELECT COUNT(DISTINCT c.Id) AS CommentCount, COUNT(DISTINCT p.Id) AS AnswerCount FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.Title = 'Clustering 1D data';"
    },
    {
        "question_id": 699,
        "answer_sql": "SELECT CreationDate FROM users WHERE DisplayName = 'IrishStat';"
    },
    {
        "question_id": 700,
        "answer_sql": "SELECT COUNT(*) AS NumberOfPostsWithBountyAmountOver30 FROM votes WHERE BountyAmount >= 30;"
    },
    {
        "question_id": 701,
        "answer_sql": "SELECT CAST(COUNT(DISTINCT stats_posts.Id) AS REAL) * 100 / COUNT(DISTINCT users.Id) FROM posts stats_posts INNER JOIN users users ON stats_posts.OwnerUserId = users.Id WHERE stats_posts.Score >= 50 AND stats_posts.OwnerUserId IN (SELECT OwnerUserId FROM users ORDER BY Reputation DESC LIMIT 1)"
    },
    {
        "question_id": 702,
        "answer_sql": "SELECT COUNT(*) AS NumberOfPosts FROM posts WHERE Score < 20;"
    },
    {
        "question_id": 703,
        "answer_sql": "SELECT COUNT(T2.Id) AS TagCount FROM tags AS T1 JOIN posts AS T2 ON T1.Id = T2.Id WHERE T1.Id < 15 AND T1.Count <= 20;"
    },
    {
        "question_id": 704,
        "answer_sql": "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'sample';"
    },
    {
        "question_id": 705,
        "answer_sql": "SELECT users.Reputation, users.UpVotes FROM users JOIN comments ON users.Id = comments.UserId WHERE comments.Text = 'fine, you win :)';"
    },
    {
        "question_id": 706,
        "answer_sql": ""
    },
    {
        "question_id": 707,
        "answer_sql": "SELECT c.Id, c.Score FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.ViewCount BETWEEN 100 AND 150 ORDER BY c.Score DESC LIMIT 1;"
    },
    {
        "question_id": 708,
        "answer_sql": ""
    },
    {
        "question_id": 709,
        "answer_sql": "SELECT COUNT(T1.PostId) AS Count FROM comments AS T1 JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.Score = 0 AND T2.ViewCount < 5;"
    },
    {
        "question_id": 710,
        "answer_sql": "SELECT COUNT(DISTINCT c.Id) AS CommentsWithZeroScore FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.CommentCount = 1;"
    },
    {
        "question_id": 711,
        "answer_sql": "SELECT COUNT(DISTINCT U.Id) AS TotalUsers FROM users U JOIN comments C ON U.Id = C.UserId WHERE C.Score = 0 AND U.Age = 40;"
    },
    {
        "question_id": 712,
        "answer_sql": "SELECT p.Id, c.Id AS CommentId, c.Text FROM posts p JOIN comments c ON p.Id = c.PostId WHERE p.Title = 'Group differences on a five point Likert item';"
    },
    {
        "question_id": 713,
        "answer_sql": "SELECT COUNT(voteTypeId) AS UpVoteCount FROM votes WHERE PostId IN ( SELECT PostId FROM comments WHERE Text = 'R is also lazy evaluated.' ) AND VoteTypeId = 1;"
    },
    {
        "question_id": 714,
        "answer_sql": "SELECT c.Text FROM comments c JOIN users u ON c.UserId = u.Id WHERE u.DisplayName = 'Harvey Motulsky';"
    },
    {
        "question_id": 715,
        "answer_sql": "SELECT DISTINCT T2.DisplayName FROM comments AS T1 JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Score BETWEEN 1 AND 5 AND T2.DownVotes = 0;"
    },
    {
        "question_id": 716,
        "answer_sql": ""
    },
    {
        "question_id": 717,
        "answer_sql": "SELECT sp.power_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE s.superhero_name = '3-D Man'"
    },
    {
        "question_id": 718,
        "answer_sql": "SELECT COUNT(*) FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Super Strength';"
    },
    {
        "question_id": 719,
        "answer_sql": "SELECT COUNT(s.id) AS superhero_count FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Super Strength' AND s.height_cm > 200;"
    },
    {
        "question_id": 720,
        "answer_sql": "SELECT superhero.full_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id GROUP BY superhero.id HAVING COUNT(hero_power.power_id) > 15;"
    },
    {
        "question_id": 721,
        "answer_sql": "SELECT COUNT(*) AS num_superheroes_with_blue_eyes FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Blue';"
    },
    {
        "question_id": 722,
        "answer_sql": "SELECT T2.colour FROM superhero AS T1 JOIN alignment AS T3 ON T1.alignment_id = T3.id JOIN colour AS T2 ON T1.skin_colour_id = T2.id WHERE T1.superhero_name = 'Apocalypse';"
    },
    {
        "question_id": 723,
        "answer_sql": "SELECT COUNT(s.id) FROM superhero s JOIN gender g ON s.gender_id = g.id JOIN colour c ON s.eye_colour_id = c.id JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE c.colour = 'Blue' AND sp.power_name = 'Agility'"
    },
    {
        "question_id": 724,
        "answer_sql": ""
    },
    {
        "question_id": 725,
        "answer_sql": "SELECT COUNT(*) AS superhero_count FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics');"
    },
    {
        "question_id": 726,
        "answer_sql": "SELECT s.full_name FROM superhero s JOIN publisher p ON s.publisher_id = p.id WHERE p.publisher_name = 'Marvel Comics' ORDER BY s.height_cm DESC LIMIT 1;"
    },
    {
        "question_id": 727,
        "answer_sql": "SELECT T2.publisher_name FROM superhero AS T1 JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Sauron';"
    },
    {
        "question_id": 728,
        "answer_sql": "SELECT COUNT(*) FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id JOIN colour ON superhero.eye_colour_id = colour.id WHERE publisher.publisher_name = 'Marvel Comics' AND colour.colour = 'Blue';"
    },
    {
        "question_id": 729,
        "answer_sql": "SELECT AVG(superhero.height_cm) AS average_height FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics';"
    },
    {
        "question_id": 730,
        "answer_sql": ""
    },
    {
        "question_id": 731,
        "answer_sql": "SELECT COUNT(id) AS superhero_count FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'DC Comics');"
    },
    {
        "question_id": 732,
        "answer_sql": ""
    },
    {
        "question_id": 733,
        "answer_sql": "SELECT COUNT(*) AS gold_eyed_superheroes FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id JOIN publisher ON superhero.publisher_id = publisher.id WHERE colour.colour = 'Gold' AND publisher.publisher_name = 'Marvel Comics';"
    },
    {
        "question_id": 734,
        "answer_sql": ""
    },
    {
        "question_id": 735,
        "answer_sql": "SELECT COUNT(*) AS num_superheroes FROM superhero JOIN colour ON superhero.hair_colour_id = colour.id WHERE colour.colour = 'Blond';"
    },
    {
        "question_id": 736,
        "answer_sql": "SELECT s.superhero_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'Intelligence' ORDER BY ha.attribute_value ASC LIMIT 1;"
    },
    {
        "question_id": 737,
        "answer_sql": "SELECT r.race FROM superhero AS s JOIN gender AS g ON s.gender_id = g.id JOIN race AS r ON s.race_id = r.id WHERE s.superhero_name = 'Copycat'"
    },
    {
        "question_id": 738,
        "answer_sql": "SELECT COUNT(*) AS superhero_count FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Durability' AND attribute_value < 50;"
    },
    {
        "question_id": 739,
        "answer_sql": "SELECT s.superhero_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Death Touch';"
    },
    {
        "question_id": 740,
        "answer_sql": "SELECT COUNT(*) AS female_superheroes_with_strength_100 FROM superhero JOIN gender ON superhero.gender_id = gender.id JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE gender.gender = 'Female' AND attribute.attribute_name = 'Strength' AND attribute_value = 100;"
    },
    {
        "question_id": 741,
        "answer_sql": "SELECT superhero_name FROM superhero WHERE superhero_name = ( SELECT superhero_name FROM superhero GROUP BY superhero_name ORDER BY COUNT(superhero_name) DESC LIMIT 1 );"
    },
    {
        "question_id": 742,
        "answer_sql": "SELECT COUNT(*) FROM superhero WHERE race_id = (SELECT id FROM race WHERE race = 'Vampire');"
    },
    {
        "question_id": 743,
        "answer_sql": ""
    },
    {
        "question_id": 744,
        "answer_sql": "SELECT SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) AS difference FROM superhero AS T1 JOIN publisher AS T2 ON T1.publisher_id = T2.id;"
    },
    {
        "question_id": 745,
        "answer_sql": "SELECT DISTINCT T1.publisher_id FROM superhero AS T1 JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Star Trek';"
    },
    {
        "question_id": 746,
        "answer_sql": ""
    },
    {
        "question_id": 747,
        "answer_sql": "SELECT COUNT(*) AS total_superheroes FROM superhero WHERE full_name IS NULL;"
    },
    {
        "question_id": 748,
        "answer_sql": ""
    },
    {
        "question_id": 749,
        "answer_sql": "SELECT T2.power_name FROM superhero AS T1 JOIN hero_power AS T3 ON T1.id = T3.hero_id JOIN superpower AS T2 ON T3.power_id = T2.id WHERE T1.superhero_name = 'Deathlok';"
    },
    {
        "question_id": 750,
        "answer_sql": "SELECT AVG(s.weight_kg) AS average_weight FROM superhero s JOIN gender g ON s.gender_id = g.id WHERE g.gender = 'Female';"
    },
    {
        "question_id": 751,
        "answer_sql": "SELECT sp.power_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE s.gender_id = (SELECT id FROM gender WHERE gender = 'Male') LIMIT 5;"
    },
    {
        "question_id": 752,
        "answer_sql": "SELECT superhero_name FROM superhero WHERE race_id = (SELECT id FROM race WHERE race = 'Alien');"
    },
    {
        "question_id": 753,
        "answer_sql": "SELECT s.full_name FROM superhero s WHERE s.height_cm BETWEEN 170 AND 190 AND s.eye_colour_id = 1;"
    },
    {
        "question_id": 754,
        "answer_sql": ""
    },
    {
        "question_id": 755,
        "answer_sql": "SELECT superhero.full_name FROM superhero JOIN race ON superhero.race_id = race.id JOIN alignment ON superhero.alignment_id = alignment.id WHERE race.race = 'Demi-God';"
    },
    {
        "question_id": 756,
        "answer_sql": "SELECT COUNT(*) FROM superhero WHERE alignment_id = 'Bad';"
    },
    {
        "question_id": 757,
        "answer_sql": "SELECT race.race FROM superhero JOIN race ON superhero.race_id = race.id WHERE superhero.weight_kg = 169;"
    },
    {
        "question_id": 758,
        "answer_sql": ""
    },
    {
        "question_id": 759,
        "answer_sql": ""
    },
    {
        "question_id": 760,
        "answer_sql": ""
    },
    {
        "question_id": 761,
        "answer_sql": "SELECT s.full_name \nFROM superhero s \nJOIN hero_attribute ha ON s.id = ha.hero_id \nJOIN attribute a ON ha.attribute_id = a.id \nWHERE s.gender_id = 1 AND s.weight_kg > (SELECT AVG(weight_kg) * 0.79 FROM superhero WHERE gender_id = 1)"
    },
    {
        "question_id": 762,
        "answer_sql": "SELECT s.power_name FROM superpower s JOIN hero_power hp ON s.id = hp.power_id GROUP BY s.power_name ORDER BY COUNT(s.power_name) DESC LIMIT 1;"
    },
    {
        "question_id": 763,
        "answer_sql": "SELECT hero_attribute.attribute_value FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE superhero.superhero_name = 'Abomination';"
    },
    {
        "question_id": 764,
        "answer_sql": "SELECT T2.power_name FROM superhero AS T1 JOIN hero_power AS T3 ON T1.id = T3.hero_id JOIN superpower AS T2 ON T3.power_id = T2.id WHERE T1.id = 1;"
    },
    {
        "question_id": 765,
        "answer_sql": "SELECT COUNT(*) AS count FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'stealth';"
    },
    {
        "question_id": 766,
        "answer_sql": ""
    },
    {
        "question_id": 767,
        "answer_sql": "SELECT AVG(s.id) AS average_superhero_id FROM superhero s WHERE NOT EXISTS ( SELECT 1 FROM colour c WHERE c.id = s.skin_colour_id AND c.id = 1 );"
    },
    {
        "question_id": 768,
        "answer_sql": "SELECT COUNT(*) AS superhero_count FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Dark Horse Comics');"
    },
    {
        "question_id": 769,
        "answer_sql": ""
    },
    {
        "question_id": 770,
        "answer_sql": ""
    },
    {
        "question_id": 771,
        "answer_sql": "SELECT superhero.superhero_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Flight';"
    },
    {
        "question_id": 772,
        "answer_sql": "SELECT s.full_name, c.colour AS eye_colour, c.colour AS hair_colour, c.colour AS skin_colour FROM superhero s JOIN gender g ON s.gender_id = g.id JOIN publisher p ON s.publisher_id = p.id JOIN colour c ON s.eye_colour_id = c.id WHERE g.gender = 'Female' AND p.publisher_name = 'Dark Horse Comics';"
    },
    {
        "question_id": 773,
        "answer_sql": ""
    },
    {
        "question_id": 774,
        "answer_sql": "SELECT race.race FROM superhero JOIN race ON superhero.race_id = race.id WHERE superhero.superhero_name = 'A-Bomb';"
    },
    {
        "question_id": 775,
        "answer_sql": ""
    },
    {
        "question_id": 776,
        "answer_sql": "SELECT superhero_name, race_id, race.race FROM superhero JOIN race ON superhero.race_id = race.id WHERE superhero.full_name = 'Charles Chandler';"
    },
    {
        "question_id": 777,
        "answer_sql": "SELECT gender.gender FROM superhero JOIN alignment ON superhero.alignment_id = alignment.id JOIN gender ON superhero.gender_id = gender.id WHERE superhero.superhero_name = 'Agent 13';"
    },
    {
        "question_id": 778,
        "answer_sql": ""
    },
    {
        "question_id": 779,
        "answer_sql": "SELECT COUNT(power_id) AS power_count FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = 'Amazo';"
    },
    {
        "question_id": 780,
        "answer_sql": "SELECT sp.power_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE s.full_name = 'Hunter Zolomon'"
    },
    {
        "question_id": 781,
        "answer_sql": "SELECT superhero.height_cm FROM superhero JOIN gender ON superhero.gender_id = gender.id JOIN race ON superhero.race_id = race.id JOIN publisher ON superhero.publisher_id = publisher.id JOIN alignment ON superhero.alignment_id = alignment.id JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Amber';"
    },
    {
        "question_id": 782,
        "answer_sql": "SELECT superhero_name FROM superhero WHERE eye_colour_id = (SELECT id FROM colour WHERE colour = 'Black') AND hair_colour_id = (SELECT id FROM colour WHERE colour = 'Black');"
    },
    {
        "question_id": 783,
        "answer_sql": ""
    },
    {
        "question_id": 784,
        "answer_sql": "SELECT superhero.full_name FROM superhero JOIN race ON superhero.race_id = race.id WHERE race.race = 'Vampire';"
    },
    {
        "question_id": 785,
        "answer_sql": "SELECT superhero_name FROM superhero WHERE alignment_id = (SELECT id FROM alignment WHERE alignment = 'Neutral');"
    },
    {
        "question_id": 786,
        "answer_sql": ""
    },
    {
        "question_id": 787,
        "answer_sql": "SELECT race.race, alignment.alignment FROM superhero JOIN alignment ON superhero.alignment_id = alignment.id JOIN gender ON superhero.gender_id = gender.id JOIN race ON superhero.race_id = race.id WHERE superhero.superhero_name = 'Cameron Hicks';"
    },
    {
        "question_id": 788,
        "answer_sql": ""
    },
    {
        "question_id": 789,
        "answer_sql": "SELECT AVG(s.weight_kg) AS average_weight FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id JOIN race r ON s.race_id = r.id WHERE r.race = 'Alien';"
    },
    {
        "question_id": 790,
        "answer_sql": ""
    },
    {
        "question_id": 791,
        "answer_sql": "SELECT superhero_name, AVG(height_cm) AS average_height FROM superhero GROUP BY superhero_name;"
    },
    {
        "question_id": 792,
        "answer_sql": "SELECT T2.power_name FROM superhero AS T1 JOIN hero_power AS T3 ON T1.id = T3.hero_id JOIN superpower AS T2 ON T3.power_id = T2.id WHERE T1.superhero_name = 'Abomination';"
    },
    {
        "question_id": 793,
        "answer_sql": "SELECT COUNT(*) FROM superhero s JOIN race r ON s.race_id = r.id JOIN gender g ON s.gender_id = g.id WHERE r.id = 21 AND g.id = 1;"
    },
    {
        "question_id": 794,
        "answer_sql": "SELECT s1.superhero_name FROM superhero s1 JOIN hero_attribute ha1 ON s1.id = ha1.hero_id JOIN attribute a1 ON ha1.attribute_id = a1.id WHERE a1.attribute_name = 'Speed' ORDER BY ha1.attribute_value DESC LIMIT 1;"
    },
    {
        "question_id": 795,
        "answer_sql": "SELECT COUNT(*) AS num_superheroes FROM superhero WHERE alignment_id = 3;"
    },
    {
        "question_id": 796,
        "answer_sql": "SELECT attribute_name, attribute_value FROM attribute JOIN hero_attribute ON attribute.id = hero_attribute.attribute_id JOIN superhero ON superhero.id = hero_attribute.hero_id WHERE superhero_name = '3-D Man';"
    },
    {
        "question_id": 797,
        "answer_sql": "SELECT superhero_name FROM superhero WHERE eye_colour_id = 7 AND hair_colour_id = 9;"
    },
    {
        "question_id": 798,
        "answer_sql": "SELECT T2.publisher_name FROM superhero AS T1 JOIN publisher AS T2 ON T1.publisher_id = T2.id JOIN hero_attribute AS T3 ON T1.id = T3.hero_id JOIN attribute AS T4 ON T3.attribute_id = T4.id WHERE T1.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy');"
    },
    {
        "question_id": 799,
        "answer_sql": "SELECT COUNT(*) AS superhero_count FROM superhero WHERE publisher_id = 1;"
    },
    {
        "question_id": 800,
        "answer_sql": "SELECT COUNT(*) * 100.0 / COUNT(DISTINCT superhero_name) FROM superhero WHERE eye_colour_id = 7;"
    },
    {
        "question_id": 801,
        "answer_sql": "SELECT SUM(CASE WHEN gender_id = 1 THEN 1 ELSE 0 END) / SUM(CASE WHEN gender_id = 2 THEN 1 ELSE 0 END) AS ratio FROM superhero;"
    },
    {
        "question_id": 802,
        "answer_sql": "SELECT superhero_name FROM superhero WHERE height_cm = (SELECT MAX(height_cm) FROM superhero)"
    },
    {
        "question_id": 803,
        "answer_sql": ""
    },
    {
        "question_id": 804,
        "answer_sql": "SELECT superhero_name FROM superhero WHERE id = 294;"
    },
    {
        "question_id": 805,
        "answer_sql": "SELECT superhero_name FROM superhero WHERE weight_kg = 0 OR weight_kg IS NULL;"
    },
    {
        "question_id": 806,
        "answer_sql": ""
    },
    {
        "question_id": 807,
        "answer_sql": "SELECT T2.power_name FROM superhero AS T1 JOIN hero_power AS T3 ON T1.id = T3.hero_id JOIN superpower AS T2 ON T3.power_id = T2.id WHERE T1.full_name = 'Helen Parr';"
    },
    {
        "question_id": 808,
        "answer_sql": ""
    },
    {
        "question_id": 809,
        "answer_sql": "SELECT T2.publisher_name FROM superhero AS T1 JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.id = 38;"
    },
    {
        "question_id": 810,
        "answer_sql": "SELECT race.race FROM superhero JOIN race ON superhero.race_id = race.id WHERE superhero.id = ( SELECT hero_id FROM hero_attribute GROUP BY hero_id ORDER BY SUM(attribute_value) DESC LIMIT 1 );"
    },
    {
        "question_id": 811,
        "answer_sql": "SELECT alignment.alignment, superpower.power_name FROM superhero JOIN alignment ON superhero.alignment_id = alignment.id JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = 'Atom IV';"
    },
    {
        "question_id": 812,
        "answer_sql": "SELECT superhero.full_name FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Blue';"
    },
    {
        "question_id": 813,
        "answer_sql": "SELECT AVG(hero_attribute.attribute_value) AS average_attribute_value FROM superhero JOIN alignment ON superhero.alignment_id = alignment.id JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE alignment.id = 3;"
    },
    {
        "question_id": 814,
        "answer_sql": ""
    },
    {
        "question_id": 815,
        "answer_sql": "SELECT COUNT(*) AS good_female_superheroes FROM superhero JOIN alignment ON superhero.alignment_id = alignment.id JOIN gender ON superhero.gender_id = gender.id WHERE alignment.id = 1 AND gender.id = 2;"
    },
    {
        "question_id": 816,
        "answer_sql": "SELECT superhero.superhero_name FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE hero_attribute.attribute_value BETWEEN 75 AND 80;"
    },
    {
        "question_id": 817,
        "answer_sql": ""
    },
    {
        "question_id": 818,
        "answer_sql": "SELECT CAST(SUM(CASE WHEN T2.gender_id = 2 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.id) AS Percentage FROM alignment AS T1 JOIN superhero AS T2 ON T1.id = T2.alignment_id WHERE T1.id = 2;"
    },
    {
        "question_id": 819,
        "answer_sql": "SELECT SUM(CASE WHEN T1.eye_colour_id = 7 THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.eye_colour_id = 1 THEN 1 ELSE 0 END) AS difference\nFROM superhero AS T1\nWHERE T1.weight_kg = 0 OR T1.weight_kg IS NULL;"
    },
    {
        "question_id": 820,
        "answer_sql": "SELECT attribute_value FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE superhero_name = 'Hulk' AND attribute_name = 'Strength';"
    },
    {
        "question_id": 821,
        "answer_sql": "SELECT sp.power_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON sp.id = hp.power_id WHERE s.superhero_name = 'Ajax'"
    },
    {
        "question_id": 822,
        "answer_sql": ""
    },
    {
        "question_id": 823,
        "answer_sql": "SELECT COUNT(*) FROM superhero s JOIN publisher p ON s.publisher_id = p.id JOIN gender g ON s.gender_id = g.id WHERE g.gender = 'Female' AND p.publisher_name = 'Marvel Comics';"
    },
    {
        "question_id": 824,
        "answer_sql": "SELECT superhero.superhero_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Wind Control' ORDER BY superhero.superhero_name;"
    },
    {
        "question_id": 825,
        "answer_sql": ""
    },
    {
        "question_id": 826,
        "answer_sql": "SELECT MAX(superhero.weight_kg) AS heaviest_weight FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'DC Comics';"
    },
    {
        "question_id": 827,
        "answer_sql": "SELECT AVG(superhero.height_cm) AS average_height FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id JOIN alignment ON superhero.alignment_id = alignment.id JOIN race ON superhero.race_id = race.id WHERE publisher.publisher_name = 'Dark Horse Comics' AND race.race <> 'Human';"
    },
    {
        "question_id": 828,
        "answer_sql": ""
    },
    {
        "question_id": 829,
        "answer_sql": "SELECT SUM(CASE WHEN T2.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) AS difference FROM superhero AS T1 JOIN publisher AS T2 ON T1.publisher_id = T2.id;"
    },
    {
        "question_id": 830,
        "answer_sql": "SELECT attribute.attribute_name FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE superhero.superhero_name = 'Black Panther' ORDER BY hero_attribute.attribute_value LIMIT 1;"
    },
    {
        "question_id": 831,
        "answer_sql": "SELECT T2.colour FROM superhero AS T1 JOIN alignment AS T3 ON T1.alignment_id = T3.id JOIN gender AS T4 ON T1.gender_id = T4.id JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Abomination';"
    },
    {
        "question_id": 832,
        "answer_sql": "SELECT MAX(superhero.height_cm) AS tallest_height FROM superhero;"
    },
    {
        "question_id": 833,
        "answer_sql": "SELECT superhero_name FROM superhero WHERE full_name = 'Charles Chandler';"
    },
    {
        "question_id": 834,
        "answer_sql": ""
    },
    {
        "question_id": 835,
        "answer_sql": ""
    },
    {
        "question_id": 836,
        "answer_sql": "SELECT COUNT(*) AS total_superheroes FROM superhero WHERE full_name LIKE 'John%';"
    },
    {
        "question_id": 837,
        "answer_sql": "SELECT hero_id FROM hero_attribute ORDER BY attribute_value ASC LIMIT 1;"
    },
    {
        "question_id": 838,
        "answer_sql": ""
    },
    {
        "question_id": 839,
        "answer_sql": ""
    },
    {
        "question_id": 840,
        "answer_sql": "SELECT T2.attribute_value FROM superhero AS T1 JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Aquababy';"
    },
    {
        "question_id": 841,
        "answer_sql": "SELECT superhero.weight_kg, race.race FROM superhero JOIN race ON superhero.race_id = race.id WHERE superhero.id = 40;"
    },
    {
        "question_id": 842,
        "answer_sql": "SELECT AVG(superhero.height_cm) AS average_height FROM superhero WHERE superhero.alignment_id = (SELECT id FROM alignment WHERE alignment = 'Neutral')"
    },
    {
        "question_id": 843,
        "answer_sql": "SELECT superhero.id FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Intelligence';"
    },
    {
        "question_id": 844,
        "answer_sql": "SELECT T1.eye_colour_id, T2.colour FROM superhero AS T1 JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Blackwulf'"
    },
    {
        "question_id": 845,
        "answer_sql": "SELECT sp.power_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE s.height_cm > (SELECT AVG(height_cm) * 0.8 FROM superhero);"
    },
    {
        "question_id": 846,
        "answer_sql": "SELECT drivers.driverRef FROM drivers \nJOIN qualifying ON drivers.driverId = qualifying.driverId \nWHERE qualifying.raceId = 18 \nORDER BY qualifying.q1 DESC \nLIMIT 5"
    },
    {
        "question_id": 847,
        "answer_sql": "SELECT D.surname FROM drivers D JOIN qualifying Q ON D.driverId = Q.driverId WHERE Q.raceId = 19 AND Q.q2 = (SELECT MIN(q2) FROM qualifying WHERE raceId = 19 AND q2 > '')"
    },
    {
        "question_id": 848,
        "answer_sql": "SELECT DISTINCT T1.year FROM races AS T1 JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.location = 'Shanghai';"
    },
    {
        "question_id": 849,
        "answer_sql": "SELECT circuits.url FROM circuits JOIN races ON circuits.circuitId = races.circuitId WHERE circuits.name = 'Circuit de Barcelona-Catalunya';"
    },
    {
        "question_id": 850,
        "answer_sql": "SELECT T1.name FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T1.country = 'Germany';"
    },
    {
        "question_id": 851,
        "answer_sql": ""
    },
    {
        "question_id": 852,
        "answer_sql": "SELECT COUNT(raceId) AS races_count FROM races WHERE year = 2010 AND circuitId IN ( SELECT circuitId FROM circuits WHERE location NOT IN ('Asia', 'Europe') );"
    },
    {
        "question_id": 853,
        "answer_sql": "SELECT DISTINCT races.name FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.country = 'Spain';"
    },
    {
        "question_id": 854,
        "answer_sql": "SELECT circuits.location, circuits.lat, circuits.lng FROM circuits JOIN races ON circuits.circuitId = races.circuitId JOIN results ON races.raceId = results.raceId WHERE races.name = 'Australian Grand Prix';"
    },
    {
        "question_id": 855,
        "answer_sql": "SELECT r.name, r.url FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.name = 'Sepang International Circuit';"
    },
    {
        "question_id": 856,
        "answer_sql": "SELECT T1.time FROM races AS T1 JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Sepang International Circuit';"
    },
    {
        "question_id": 857,
        "answer_sql": "SELECT circuits.lat, circuits.lng FROM circuits JOIN races ON circuits.circuitId = races.circuitId JOIN results ON races.raceId = results.raceId WHERE races.name = 'Abu Dhabi Grand Prix';"
    },
    {
        "question_id": 858,
        "answer_sql": "SELECT c.nationality FROM constructors c JOIN constructorResults cr ON c.constructorId = cr.constructorId JOIN races r ON cr.raceId = r.raceId WHERE r.raceId = 24 AND cr.points = 1;"
    },
    {
        "question_id": 859,
        "answer_sql": "SELECT qualifying.q1 FROM qualifying JOIN races ON qualifying.raceId = races.raceId JOIN drivers ON qualifying.driverId = drivers.driverId WHERE races.raceId = 354 AND drivers.forename = 'Bruno' AND drivers.surname = 'Senna';"
    },
    {
        "question_id": 860,
        "answer_sql": ""
    },
    {
        "question_id": 861,
        "answer_sql": ""
    },
    {
        "question_id": 862,
        "answer_sql": "SELECT COUNT(DISTINCT driverId) AS drivers_not_finished\nFROM races\nJOIN results ON races.raceId = results.raceId\nWHERE races.year = 2007 AND races.name = 'Bahrain GP' AND results.time IS NULL;"
    },
    {
        "question_id": 863,
        "answer_sql": "SELECT s.year FROM seasons s JOIN races r ON s.year = r.year WHERE r.raceId = 901;"
    },
    {
        "question_id": 864,
        "answer_sql": "SELECT COUNT(DISTINCT driverId) AS num_drivers FROM drivers WHERE driverId IN ( SELECT driverId FROM results WHERE raceId IN ( SELECT raceId FROM races WHERE date = '2015-11-29' ) );"
    },
    {
        "question_id": 865,
        "answer_sql": "SELECT D.driverRef, D.dob FROM drivers D JOIN results R ON D.driverId = R.driverId WHERE R.raceId = 592 AND R.time IS NOT NULL ORDER BY D.dob ASC LIMIT 1;"
    },
    {
        "question_id": 866,
        "answer_sql": ""
    },
    {
        "question_id": 867,
        "answer_sql": ""
    },
    {
        "question_id": 868,
        "answer_sql": ""
    },
    {
        "question_id": 869,
        "answer_sql": ""
    },
    {
        "question_id": 870,
        "answer_sql": "SELECT qualifying.q1 FROM qualifying JOIN races ON qualifying.raceId = races.raceId JOIN drivers ON qualifying.driverId = drivers.driverId WHERE races.raceId = 345 AND drivers.forename = 'Lucas' AND drivers.surname = 'di Grassi';"
    },
    {
        "question_id": 871,
        "answer_sql": ""
    },
    {
        "question_id": 872,
        "answer_sql": ""
    },
    {
        "question_id": 873,
        "answer_sql": "SELECT races.time FROM races JOIN results ON races.raceId = results.raceId JOIN drivers ON results.driverId = drivers.driverId WHERE drivers.forename = 'Bruce' AND drivers.surname = 'McLaren' AND races.raceId = 743;"
    },
    {
        "question_id": 874,
        "answer_sql": ""
    },
    {
        "question_id": 875,
        "answer_sql": "SELECT s.year FROM seasons s JOIN races r ON s.year = r.year WHERE r.raceId = 901;"
    },
    {
        "question_id": 876,
        "answer_sql": "SELECT COUNT(DISTINCT driverId) AS num_drivers FROM races JOIN results ON races.raceId = results.raceId WHERE strftime('%Y-%m-%d', races.date) = '2015-11-29';"
    },
    {
        "question_id": 877,
        "answer_sql": "SELECT MIN(dob) AS youngest_driver FROM drivers WHERE driverId IN ( SELECT driverId FROM results WHERE raceId = ( SELECT raceId FROM races WHERE year = 2023 AND round = 872 ) );"
    },
    {
        "question_id": 878,
        "answer_sql": "SELECT d.forename, d.surname FROM drivers d JOIN lapTimes lt ON d.driverId = lt.driverId WHERE lt.raceId = (SELECT raceId FROM races WHERE raceId = 348) ORDER BY lt.time ASC LIMIT 1;"
    },
    {
        "question_id": 879,
        "answer_sql": "SELECT T.driverId, T.nationality FROM drivers AS T WHERE T.driverId = ( SELECT D.driverId FROM drivers AS D INNER JOIN results AS R ON D.driverId = R.driverId WHERE R.raceId = 348 ORDER BY R.fastestLapSpeed DESC LIMIT 1 );"
    },
    {
        "question_id": 880,
        "answer_sql": ""
    },
    {
        "question_id": 881,
        "answer_sql": ""
    },
    {
        "question_id": 882,
        "answer_sql": "SELECT year FROM races WHERE name = 'Singapore Grand Prix' ORDER BY year LIMIT 1;"
    },
    {
        "question_id": 883,
        "answer_sql": "SELECT COUNT(raceId) AS race_count, name FROM races WHERE year = 2005 ORDER BY raceId DESC;"
    },
    {
        "question_id": 884,
        "answer_sql": ""
    },
    {
        "question_id": 885,
        "answer_sql": "SELECT races.name, races.date FROM races WHERE races.year = 1999 ORDER BY races.round DESC LIMIT 1;"
    },
    {
        "question_id": 886,
        "answer_sql": "SELECT year FROM races GROUP BY year ORDER BY COUNT(raceId) DESC LIMIT 1;"
    },
    {
        "question_id": 887,
        "answer_sql": "SELECT races.name FROM races WHERE races.year = 2017 AND races.year != 2000;"
    },
    {
        "question_id": 888,
        "answer_sql": "SELECT circuits.country, circuits.location FROM circuits JOIN races ON circuits.circuitId = races.circuitId JOIN results ON races.raceId = results.raceId WHERE results.position = 1 AND races.year = (SELECT MIN(year) FROM races)"
    },
    {
        "question_id": 889,
        "answer_sql": "SELECT MAX(year) FROM races WHERE circuitId = (SELECT circuitId FROM circuits WHERE name = 'Brands Hatch') AND name LIKE 'British Grand Prix';"
    },
    {
        "question_id": 890,
        "answer_sql": "SELECT COUNT(DISTINCT T1.year) AS num_seasons FROM races AS T1 JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Silverstone Circuit' AND T1.name LIKE '%British Grand Prix%';"
    },
    {
        "question_id": 891,
        "answer_sql": "SELECT d.driverId, d.surname, d.forename, ds.positionText FROM drivers d JOIN driverStandings ds ON d.driverId = ds.driverId WHERE ds.raceId = (SELECT raceId FROM races WHERE year = 2010 AND name = 'Singapore Grand Prix') ORDER BY ds.positionText;"
    },
    {
        "question_id": 892,
        "answer_sql": "SELECT d.forename, d.surname FROM drivers d JOIN driverStandings ds ON d.driverId = ds.driverId WHERE ds.points = (SELECT MAX(points) FROM driverStandings) ORDER BY ds.position ASC LIMIT 1;"
    },
    {
        "question_id": 893,
        "answer_sql": "SELECT d.surname, d.forename, SUM(r.points) AS total_points FROM drivers d JOIN results r ON d.driverId = r.driverId WHERE r.raceId = (SELECT raceId FROM races WHERE name = 'Chinese Grand Prix' AND year = 2017) GROUP BY d.driverId ORDER BY total_points DESC LIMIT 3;"
    },
    {
        "question_id": 894,
        "answer_sql": "SELECT drivers.driverId AS driver_id, drivers.surname AS driver_name, races.name AS race_name, lapTimes.time AS best_lap_time FROM lapTimes JOIN drivers ON lapTimes.driverId = drivers.driverId JOIN races ON lapTimes.raceId = races.raceId WHERE lapTimes.time = (SELECT MIN(time) FROM lapTimes) ORDER BY races.name, drivers.surname;"
    },
    {
        "question_id": 895,
        "answer_sql": "SELECT AVG(lapTimes.time) AS average_lap_time FROM lapTimes JOIN races ON lapTimes.raceId = races.raceId JOIN drivers ON lapTimes.driverId = drivers.driverId WHERE drivers.surname = 'Vettel' AND drivers.forename = 'Sebastian' AND races.name = 'Chinese Grand Prix' AND races.year = 2009;"
    },
    {
        "question_id": 896,
        "answer_sql": ""
    },
    {
        "question_id": 897,
        "answer_sql": "SELECT d.forename, d.surname, d.nationality, AVG(rs.points) AS average_points FROM drivers d JOIN driverStandings rs ON d.driverId = rs.driverId GROUP BY d.driverId ORDER BY COUNT(rs.wins) DESC LIMIT 1;"
    },
    {
        "question_id": 898,
        "answer_sql": "SELECT T1.driverId, T1.forename, T1.surname, T1.dob, T1.nationality FROM drivers AS T1 JOIN constructors AS T2 ON T1.driverId = T2.constructorId WHERE T2.nationality = 'Japanese' ORDER BY T1.dob ASC LIMIT 1;"
    },
    {
        "question_id": 899,
        "answer_sql": "SELECT DISTINCT c.circuitRef, c.name FROM circuits c JOIN races r ON c.circuitId = r.circuitId WHERE r.year BETWEEN 1990 AND 2000 GROUP BY c.circuitRef, c.name HAVING COUNT(DISTINCT r.year) = 4;"
    },
    {
        "question_id": 900,
        "answer_sql": "SELECT circuits.name, circuits.location, races.name FROM circuits JOIN races ON circuits.circuitId = races.circuitId WHERE circuits.country = 'USA' AND races.year = 2006;"
    },
    {
        "question_id": 901,
        "answer_sql": ""
    },
    {
        "question_id": 902,
        "answer_sql": ""
    },
    {
        "question_id": 903,
        "answer_sql": "SELECT COUNT(DISTINCT T1.driverId) AS win_count FROM drivers AS T1 JOIN results AS T2 ON T1.driverId = T2.driverId JOIN races AS T3 ON T2.raceId = T3.raceId JOIN circuits AS T4 ON T3.circuitId = T4.circuitId WHERE T4.circuitRef = 'Sepang International Circuit' AND T1.driverRef = 'Michael Schumacher'"
    },
    {
        "question_id": 904,
        "answer_sql": ""
    },
    {
        "question_id": 905,
        "answer_sql": ""
    },
    {
        "question_id": 906,
        "answer_sql": ""
    },
    {
        "question_id": 907,
        "answer_sql": "SELECT r.name AS race_name, c.country AS hosting_country, r.date FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE r.year = 2017 ORDER BY r.date;"
    },
    {
        "question_id": 908,
        "answer_sql": "SELECT races.name, races.year, circuits.location FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.raceId = ( SELECT raceId FROM results GROUP BY raceId ORDER BY SUM(laps) DESC LIMIT 1 );"
    },
    {
        "question_id": 909,
        "answer_sql": "SELECT CAST(COUNT(CASE WHEN T2.country = 'Germany' THEN T1.raceId ELSE NULL END) AS REAL) * 100 / COUNT(T1.raceId) AS percentage FROM races AS T1 JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.country = 'Germany' AND T1.name = 'European Grand Prix';"
    },
    {
        "question_id": 910,
        "answer_sql": ""
    },
    {
        "question_id": 911,
        "answer_sql": "SELECT circuits.name FROM circuits WHERE circuits.lat = ( SELECT MAX(circuits.lat) FROM circuits WHERE circuits.name IN ('Silverstone Circuit', 'Hockenheimring', 'Hungaroring') )"
    },
    {
        "question_id": 912,
        "answer_sql": "SELECT circuitRef FROM circuits WHERE name = 'Marina Bay Street Circuit';"
    },
    {
        "question_id": 913,
        "answer_sql": ""
    },
    {
        "question_id": 914,
        "answer_sql": "SELECT COUNT(driverId) AS driver_count FROM drivers WHERE code IS NULL;"
    },
    {
        "question_id": 915,
        "answer_sql": ""
    },
    {
        "question_id": 916,
        "answer_sql": "SELECT surname FROM drivers WHERE nationality = 'Italian';"
    },
    {
        "question_id": 917,
        "answer_sql": "SELECT url FROM drivers WHERE forename = 'Anthony' AND surname = 'Davidson';"
    },
    {
        "question_id": 918,
        "answer_sql": "SELECT driverRef FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton';"
    },
    {
        "question_id": 919,
        "answer_sql": "SELECT circuits.name FROM races JOIN circuits ON races.circuitId = circuits.circuitId JOIN results ON races.raceId = results.raceId WHERE races.year = 2009 AND races.name = 'Spanish Grand Prix';"
    },
    {
        "question_id": 920,
        "answer_sql": "SELECT DISTINCT T1.year FROM races AS T1 JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Silverstone Circuit';"
    },
    {
        "question_id": 921,
        "answer_sql": "SELECT r.name AS race_name, c.name AS circuit_name, r.url AS race_url FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.name = 'Silverstone Circuit';"
    },
    {
        "question_id": 922,
        "answer_sql": "SELECT races.date FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.location = 'Abu Dhabi' AND races.year = 2010;"
    },
    {
        "question_id": 923,
        "answer_sql": "SELECT COUNT(DISTINCT raceId) AS numberOfRaces FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.country = 'Italy';"
    },
    {
        "question_id": 924,
        "answer_sql": ""
    },
    {
        "question_id": 925,
        "answer_sql": "SELECT circuits.url FROM circuits JOIN races ON circuits.circuitId = races.circuitId WHERE races.year = 2009 AND races.name = 'Spanish Grand Prix';"
    },
    {
        "question_id": 926,
        "answer_sql": "SELECT fastestLapTime FROM results WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton') ORDER BY milliseconds ASC LIMIT 1;"
    },
    {
        "question_id": 927,
        "answer_sql": "SELECT drivers.forename, drivers.surname FROM drivers WHERE drivers.driverId = ( SELECT drivers.driverId FROM drivers INNER JOIN results ON drivers.driverId = results.driverId INNER JOIN races ON results.raceId = races.raceId INNER JOIN lapTimes ON results.driverId = lapTimes.driverId WHERE lapTimes.position = ( SELECT MIN(position) FROM lapTimes WHERE lapTimes.driverId = drivers.driverId ) );"
    },
    {
        "question_id": 928,
        "answer_sql": ""
    },
    {
        "question_id": 929,
        "answer_sql": ""
    },
    {
        "question_id": 930,
        "answer_sql": "SELECT r.name, ds.position FROM races r JOIN results res ON r.raceId = res.raceId JOIN drivers d ON res.driverId = d.driverId JOIN constructorStandings ds ON res.constructorId = ds.constructorId WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton' ORDER BY ds.position ASC LIMIT 1;"
    },
    {
        "question_id": 931,
        "answer_sql": "SELECT MAX(results.fastestLapSpeed) AS fastestLapSpeed FROM results JOIN races ON results.raceId = races.raceId JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.name = 'Spanish Grand Prix' AND races.year = 2009;"
    },
    {
        "question_id": 932,
        "answer_sql": ""
    },
    {
        "question_id": 933,
        "answer_sql": "SELECT T2.positionOrder AS final_rank FROM drivers AS T1 JOIN results AS T2 ON T1.driverId = T2.driverId JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.name = 'Australian Grand Prix' AND T3.year = 2008 AND T1.forename = 'Lewis' AND T1.surname = 'Hamilton';"
    },
    {
        "question_id": 934,
        "answer_sql": ""
    },
    {
        "question_id": 935,
        "answer_sql": ""
    },
    {
        "question_id": 936,
        "answer_sql": "SELECT q1, q2, q3 FROM qualifying WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton') AND raceId = (SELECT raceId FROM races WHERE name = 'Australian Grand Prix' AND year = 2008);"
    },
    {
        "question_id": 937,
        "answer_sql": "SELECT T1.time FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T2.position = 2 AND T1.year = 2008 AND T1.name = 'Australian Grand Prix';"
    },
    {
        "question_id": 938,
        "answer_sql": ""
    },
    {
        "question_id": 939,
        "answer_sql": ""
    },
    {
        "question_id": 940,
        "answer_sql": ""
    },
    {
        "question_id": 941,
        "answer_sql": "SELECT SUM(points) AS total_points FROM drivers JOIN results ON drivers.driverId = results.driverId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';"
    },
    {
        "question_id": 942,
        "answer_sql": "SELECT AVG(CAST(REPLACE(REPLACE(REPLACE(fastestLapTime, ':', ''), 'm', ''), 's', '') AS REAL) / 1000) AS average_lap_time FROM results JOIN drivers ON results.driverId = drivers.driverId WHERE drivers.surname = 'Hamilton';"
    },
    {
        "question_id": 943,
        "answer_sql": "SELECT COUNT(CASE WHEN T2.time IS NOT NULL THEN 1 ELSE NULL END) / COUNT(T1.raceId) AS completion_rate FROM races AS T1 JOIN lapTimes AS T2 ON T1.raceId = T2.raceId WHERE T1.year = 2008 AND T1.name = 'Australian Grand Prix';"
    },
    {
        "question_id": 944,
        "answer_sql": ""
    },
    {
        "question_id": 945,
        "answer_sql": "SELECT COUNT(DISTINCT circuitId) AS circuit_count FROM circuits WHERE location = 'Melbourne, Australia';"
    },
    {
        "question_id": 946,
        "answer_sql": "SELECT circuits.location, circuits.lng FROM circuits WHERE circuits.country = 'USA';"
    },
    {
        "question_id": 947,
        "answer_sql": "SELECT COUNT(DISTINCT driverId) AS british_drivers FROM drivers WHERE dob > '1980-01-01';"
    },
    {
        "question_id": 948,
        "answer_sql": "SELECT AVG(points) AS average_points FROM constructors JOIN constructorResults ON constructors.constructorId = constructorResults.constructorId WHERE constructors.nationality = 'British';"
    },
    {
        "question_id": 949,
        "answer_sql": "SELECT constructors.constructorId, constructors.name, SUM(results.points) AS total_points FROM constructors JOIN results ON constructors.constructorId = results.constructorId GROUP BY constructors.constructorId ORDER BY total_points DESC LIMIT 1;"
    },
    {
        "question_id": 950,
        "answer_sql": ""
    },
    {
        "question_id": 951,
        "answer_sql": ""
    },
    {
        "question_id": 952,
        "answer_sql": "SELECT c.name AS constructor_name FROM constructors c JOIN constructorStandings cs ON c.constructorId = cs.constructorId WHERE cs.position = 1;"
    },
    {
        "question_id": 953,
        "answer_sql": ""
    },
    {
        "question_id": 954,
        "answer_sql": ""
    },
    {
        "question_id": 955,
        "answer_sql": "SELECT s.year, AVG(l.time) AS average_time FROM races s JOIN lapTimes l ON s.raceId = l.raceId WHERE l.time IS NOT NULL GROUP BY s.year ORDER BY s.year;"
    },
    {
        "question_id": 956,
        "answer_sql": "SELECT D.forename, D.surname FROM drivers D JOIN driverStandings DS ON D.driverId = DS.driverId WHERE D.dob > '1975-01-01' AND DS.position = 2;"
    },
    {
        "question_id": 957,
        "answer_sql": "SELECT COUNT(DISTINCT driverId) AS numberOfItalianDriversWithoutFinish FROM drivers WHERE driverId IN ( SELECT driverId FROM results WHERE position IS NULL );"
    },
    {
        "question_id": 958,
        "answer_sql": "SELECT drivers.forename, drivers.surname FROM drivers JOIN lapTimes ON drivers.driverId = lapTimes.driverId WHERE lapTimes.lap = (SELECT MAX(lap) FROM lapTimes) ORDER BY lapTimes.time ASC LIMIT 1;"
    },
    {
        "question_id": 959,
        "answer_sql": ""
    },
    {
        "question_id": 960,
        "answer_sql": "SELECT AVG(results.fastestLapSpeed) AS average_fastest_lap_speed FROM results JOIN races ON results.raceId = races.raceId JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.name = 'Spanish Grand Prix' AND races.year = 2009;"
    },
    {
        "question_id": 961,
        "answer_sql": "SELECT races.name, races.year FROM races JOIN results ON races.raceId = results.raceId WHERE results.milliseconds IS NOT NULL ORDER BY results.milliseconds ASC LIMIT 1;"
    },
    {
        "question_id": 962,
        "answer_sql": ""
    },
    {
        "question_id": 963,
        "answer_sql": ""
    },
    {
        "question_id": 964,
        "answer_sql": ""
    },
    {
        "question_id": 965,
        "answer_sql": "SELECT raceId FROM races WHERE year = 2009;"
    },
    {
        "question_id": 966,
        "answer_sql": ""
    },
    {
        "question_id": 967,
        "answer_sql": "SELECT D.driverRef AS driverRef, D.number AS driverNumber, D.forename AS driverForename, D.surname AS driverSurname, D.dob AS driverDob FROM drivers D WHERE D.dob <= DATE('now', '-3 years') ORDER BY D.dob ASC LIMIT 3;"
    },
    {
        "question_id": 968,
        "answer_sql": ""
    },
    {
        "question_id": 969,
        "answer_sql": ""
    },
    {
        "question_id": 970,
        "answer_sql": "SELECT d.forename, d.surname, d.dob, d.driverId, MIN(l.time) AS earliest_lap_time FROM drivers d JOIN lapTimes l ON d.driverId = l.driverId WHERE d.nationality = 'German' AND d.dob BETWEEN '1980-01-01' AND '1990-12-31' GROUP BY d.driverId ORDER BY earliest_lap_time ASC LIMIT 3;"
    },
    {
        "question_id": 971,
        "answer_sql": ""
    },
    {
        "question_id": 972,
        "answer_sql": ""
    },
    {
        "question_id": 973,
        "answer_sql": ""
    },
    {
        "question_id": 974,
        "answer_sql": ""
    },
    {
        "question_id": 975,
        "answer_sql": "SELECT r.year, MIN(l.time) AS lowest_speed FROM races r JOIN lapTimes l ON r.raceId = l.raceId GROUP BY r.year ORDER BY lowest_speed ASC LIMIT 1;"
    },
    {
        "question_id": 976,
        "answer_sql": "SELECT drivers.driverId FROM drivers JOIN lapTimes ON drivers.driverId = lapTimes.driverId WHERE lap = 1 ORDER BY lapTimes.time ASC LIMIT 5;"
    },
    {
        "question_id": 977,
        "answer_sql": "SELECT COUNT(driverId) AS disqualified_finishers FROM races JOIN results ON races.raceId = results.raceId WHERE races.year BETWEEN 2005 AND 2010 AND results.statusId = 2 AND results.time IS NULL;"
    },
    {
        "question_id": 978,
        "answer_sql": ""
    },
    {
        "question_id": 979,
        "answer_sql": "SELECT raceId, COUNT(*) AS finishers FROM races WHERE time IS NOT NULL GROUP BY raceId ORDER BY finishers DESC LIMIT 1;"
    },
    {
        "question_id": 980,
        "answer_sql": "SELECT d.driverRef AS reference_name, d.nationality, d.dob FROM drivers d JOIN qualifying q ON d.driverId = q.driverId WHERE q.raceId = 23 AND q.q2 IS NOT NULL;"
    },
    {
        "question_id": 981,
        "answer_sql": ""
    },
    {
        "question_id": 982,
        "answer_sql": "SELECT COUNT(*) AS disqualified_drivers FROM drivers WHERE driverRef IN ( SELECT driverRef FROM results WHERE statusId = 2 );"
    },
    {
        "question_id": 983,
        "answer_sql": "SELECT c.url AS introduction_website, c.name AS constructor_name FROM constructors c JOIN constructorResults cr ON c.constructorId = cr.constructorId WHERE c.nationality = 'Italian' ORDER BY cr.points DESC LIMIT 1;"
    },
    {
        "question_id": 984,
        "answer_sql": "SELECT c.url FROM constructors c JOIN constructorStandings cs ON c.constructorId = cs.constructorId GROUP BY c.url ORDER BY SUM(cs.wins) DESC LIMIT 1;"
    },
    {
        "question_id": 985,
        "answer_sql": "SELECT drivers.forename, drivers.surname, qualifying.q3 FROM drivers JOIN qualifying ON drivers.driverId = qualifying.driverId WHERE qualifying.raceId = (SELECT raceId FROM races WHERE name = 'French Grand Prix') ORDER BY qualifying.q3 ASC LIMIT 1;"
    },
    {
        "question_id": 986,
        "answer_sql": "SELECT r.name AS race_name, l.time AS fastest_lap_time_milliseconds FROM races r JOIN lapTimes l ON r.raceId = l.raceId WHERE l.position = 1 ORDER BY l.milliseconds ASC LIMIT 1;"
    },
    {
        "question_id": 987,
        "answer_sql": "SELECT AVG(T1.fastestLapTime) AS avg_fastest_lap_time FROM results AS T1 JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.year = 2006 AND T1.position < 11;"
    },
    {
        "question_id": 988,
        "answer_sql": ""
    },
    {
        "question_id": 989,
        "answer_sql": ""
    },
    {
        "question_id": 990,
        "answer_sql": ""
    },
    {
        "question_id": 991,
        "answer_sql": "SELECT drivers.forename, drivers.surname, drivers.dob FROM drivers WHERE drivers.nationality = 'Austrian' AND drivers.dob BETWEEN '1981-01-01' AND '1991-12-31';"
    },
    {
        "question_id": 992,
        "answer_sql": "SELECT CONCAT(drivers.forename, ' ', drivers.surname) AS full_name, drivers.url AS wiki_page_link, drivers.dob AS date_of_birth FROM drivers WHERE drivers.nationality = 'German' AND drivers.dob BETWEEN '1971-01-01' AND '1985-12-31' ORDER BY drivers.dob DESC;"
    },
    {
        "question_id": 993,
        "answer_sql": "SELECT circuits.location, circuits.country, circuits.lng, circuits.lat FROM circuits JOIN races ON circuits.circuitId = races.circuitId WHERE circuits.name = 'Hungaroring';"
    },
    {
        "question_id": 994,
        "answer_sql": "SELECT constructors.name AS name, constructors.nationality AS nationality, SUM(constructorResults.points) AS total_points FROM races JOIN circuits ON circuits.circuitId = races.circuitId JOIN constructorResults ON races.raceId = constructorResults.raceId JOIN constructors ON constructors.constructorId = constructorResults.constructorId WHERE races.name = 'Monaco Grand Prix' AND races.year BETWEEN 1980 AND 2010 GROUP BY constructors.name, constructors.nationality ORDER BY total_points DESC LIMIT 1;"
    },
    {
        "question_id": 995,
        "answer_sql": "SELECT AVG(results.points) AS average_score\nFROM drivers\nJOIN results ON drivers.driverId = results.driverId\nWHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND results.raceId IN (\n    SELECT races.raceId\n    FROM races\n    JOIN circuits ON races.circuitId = circuits.circuitId\n    WHERE circuits.country = 'Turkey'\n)"
    },
    {
        "question_id": 996,
        "answer_sql": "SELECT AVG(T1.year) AS annual_average_races FROM seasons AS T1 WHERE T1.year >= 2000 AND T1.year <= 2010;"
    },
    {
        "question_id": 997,
        "answer_sql": "SELECT MAX(nationality) AS citizenship FROM drivers;"
    },
    {
        "question_id": 998,
        "answer_sql": "SELECT COUNT(DISTINCT T1.driverId) AS victories FROM drivers AS T1 JOIN driverStandings AS T2 ON T1.driverId = T2.driverId WHERE T2.position = 91;"
    },
    {
        "question_id": 999,
        "answer_sql": "SELECT races.name FROM races JOIN lapTimes ON races.raceId = lapTimes.raceId WHERE lapTimes.milliseconds = (SELECT MIN(milliseconds) FROM lapTimes) ORDER BY races.time LIMIT 1;"
    },
    {
        "question_id": 1000,
        "answer_sql": "SELECT T1.location, T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.date = (SELECT MAX(date) FROM races);"
    },
    {
        "question_id": 1001,
        "answer_sql": "SELECT drivers.forename, drivers.surname \nFROM drivers \nWHERE drivers.driverId = (\n    SELECT drivers.driverId \n    FROM qualifying \n    WHERE qualifying.raceId = (\n        SELECT races.raceId \n        FROM races \n        WHERE races.year = 2008 AND races.circuitId = (\n            SELECT circuits.circuitId \n            FROM circuits \n            WHERE circuits.name = 'Marina Bay Street Circuit'\n        )\n    ) \n    AND qualifying.position = 3\n) \nAND drivers.driverId = (\n    SELECT drivers.driverId \n    FROM qualifying \n    WHERE qualifying.raceId = (\n        SELECT races.raceId \n        FROM races \n        WHERE races.year = 2008 AND races.circuitId = (\n            SELECT circuits.circuitId \n            FROM circuits \n            WHERE circuits.name = 'Marina Bay Street Circuit'\n        )\n    ) \n    AND qualifying.position = 1\n);"
    },
    {
        "question_id": 1002,
        "answer_sql": ""
    },
    {
        "question_id": 1003,
        "answer_sql": ""
    },
    {
        "question_id": 1004,
        "answer_sql": ""
    },
    {
        "question_id": 1005,
        "answer_sql": "SELECT MAX(duration) AS longest_pit_stop_time FROM pitStops;"
    },
    {
        "question_id": 1006,
        "answer_sql": "SELECT MAX(time) AS fastest_time FROM lapTimes;"
    },
    {
        "question_id": 1007,
        "answer_sql": "SELECT MAX(T1.duration) AS longest_time FROM pitStops AS T1 JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.driverRef = 'Lewis Hamilton';"
    },
    {
        "question_id": 1008,
        "answer_sql": ""
    },
    {
        "question_id": 1009,
        "answer_sql": "SELECT t2.driverRef AS driver_ref, t3.time AS pit_stop_time, t3.duration AS pit_stop_duration FROM pitStops t3 JOIN drivers t2 ON t3.driverId = t2.driverId JOIN races t1 ON t3.raceId = t1.raceId WHERE t1.year = 2011 AND t1.name = 'Australian Grand Prix';"
    },
    {
        "question_id": 1010,
        "answer_sql": "SELECT lap, time, milliseconds FROM lapTimes WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton') ORDER BY milliseconds ASC LIMIT 1;"
    },
    {
        "question_id": 1011,
        "answer_sql": "SELECT d.forename, d.surname FROM drivers d JOIN lapTimes lt ON d.driverId = lt.driverId WHERE lt.time = (SELECT MIN(time) FROM lapTimes) ORDER BY d.driverId LIMIT 1;"
    },
    {
        "question_id": 1012,
        "answer_sql": ""
    },
    {
        "question_id": 1013,
        "answer_sql": "SELECT MAX(l.time) AS fastest_lap_time \nFROM lapTimes AS l \nJOIN races AS r ON l.raceId = r.raceId \nJOIN circuits AS c ON r.circuitId = c.circuitId \nWHERE c.name = 'Austrian Grand Prix Circuit' AND l.time IS NOT NULL;"
    },
    {
        "question_id": 1014,
        "answer_sql": ""
    },
    {
        "question_id": 1015,
        "answer_sql": ""
    },
    {
        "question_id": 1016,
        "answer_sql": ""
    },
    {
        "question_id": 1017,
        "answer_sql": "SELECT circuits.location, circuits.lat, circuits.lng FROM circuits JOIN races ON circuits.circuitId = races.circuitId JOIN lapTimes ON races.raceId = lapTimes.raceId WHERE lapTimes.time = '1:29.488';"
    },
    {
        "question_id": 1018,
        "answer_sql": "SELECT AVG(lapTimes.milliseconds) AS average_time_milliseconds FROM lapTimes JOIN drivers ON lapTimes.driverId = drivers.driverId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';"
    },
    {
        "question_id": 1019,
        "answer_sql": "SELECT AVG(lapTimes.milliseconds) AS average_lap_time\nFROM races\nJOIN circuits ON races.circuitId = circuits.circuitId\nJOIN lapTimes ON races.raceId = lapTimes.raceId\nWHERE circuits.country = 'Italy';"
    },
    {
        "question_id": 1020,
        "answer_sql": "SELECT player_api_id FROM Player_Attributes WHERE overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes);"
    },
    {
        "question_id": 1021,
        "answer_sql": "SELECT MAX(Player.height), Player.player_name FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player_Attributes.id = (SELECT MAX(id) FROM Player_Attributes)"
    },
    {
        "question_id": 1022,
        "answer_sql": "SELECT preferred_foot FROM Player_Attributes WHERE potential = (SELECT MIN(potential) FROM Player_Attributes) ORDER BY preferred_foot ASC LIMIT 1;"
    },
    {
        "question_id": 1023,
        "answer_sql": "SELECT COUNT(T1.player_api_id) AS player_count FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.overall_rating BETWEEN 60 AND 65 AND T1.defensive_work_rate = 'low';"
    },
    {
        "question_id": 1024,
        "answer_sql": "SELECT Player_Attributes.player_api_id FROM Player_Attributes WHERE Player_Attributes.crossing = ( SELECT MAX(crossing) FROM Player_Attributes ) LIMIT 5;"
    },
    {
        "question_id": 1025,
        "answer_sql": "SELECT L.name AS league_name FROM Match M JOIN League L ON M.league_id = L.id WHERE M.season = '2015/2016' GROUP BY L.id ORDER BY SUM(M.home_team_goal + M.away_team_goal) DESC LIMIT 1;"
    },
    {
        "question_id": 1026,
        "answer_sql": "SELECT T2.team_long_name AS home_team_name FROM Match M JOIN Team T1 ON M.home_team_api_id = T1.team_api_id JOIN Team T2 ON M.away_team_api_id = T2.team_api_id WHERE M.season = '2015/2016' GROUP BY T2.team_long_name ORDER BY COUNT(CASE WHEN M.home_team_goal < M.away_team_goal THEN 1 ELSE NULL END) ASC LIMIT 1;"
    },
    {
        "question_id": 1027,
        "answer_sql": ""
    },
    {
        "question_id": 1028,
        "answer_sql": "SELECT T2.team_long_name AS away_team_name FROM Match AS T1 JOIN Team AS T2 ON T1.away_team_api_id = T2.team_api_id WHERE T1.season = '2009/2010' GROUP BY T2.team_long_name ORDER BY COUNT(T1.away_team_goal) DESC LIMIT 1;"
    },
    {
        "question_id": 1029,
        "answer_sql": "SELECT T2.buildUpPlaySpeedClass, T2.buildUpPlaySpeed FROM Team_Attributes AS T2 WHERE T2.buildUpPlaySpeed = ( SELECT MAX(buildUpPlaySpeed) FROM Team_Attributes ) ORDER BY T2.buildUpPlaySpeed DESC LIMIT 4;"
    },
    {
        "question_id": 1030,
        "answer_sql": "SELECT L.name FROM Match JOIN League L ON Match.league_id = L.id WHERE Match.season = '2015/2016' GROUP BY L.name ORDER BY SUM(CASE WHEN Match.home_team_goal = Match.away_team_goal THEN 1 ELSE 0 END) DESC LIMIT 1;"
    },
    {
        "question_id": 1031,
        "answer_sql": ""
    },
    {
        "question_id": 1032,
        "answer_sql": "SELECT L.name, COUNT(L.id) AS match_count FROM League L JOIN Match M ON L.id = M.league_id GROUP BY L.id ORDER BY match_count DESC LIMIT 1;"
    },
    {
        "question_id": 1033,
        "answer_sql": "SELECT AVG(T1.height) AS average_height FROM Player AS T1 WHERE T1.birthday >= '1990-01-01 00:00:00' AND T1.birthday < '1996-01-01 00:00:00';"
    },
    {
        "question_id": 1034,
        "answer_sql": "SELECT PA.player_api_id FROM Player_Attributes PA JOIN Player P ON PA.player_api_id = P.player_api_id WHERE PA.date LIKE '2010%' GROUP BY PA.player_api_id ORDER BY AVG(PA.overall_rating) DESC LIMIT 1;"
    },
    {
        "question_id": 1035,
        "answer_sql": "SELECT T2.team_fifa_api_id FROM Team_Attributes AS T1 JOIN Team AS T2 ON T1.team_fifa_api_id = T2.team_fifa_api_id WHERE T1.buildUpPlaySpeed BETWEEN 51 AND 59"
    },
    {
        "question_id": 1036,
        "answer_sql": "SELECT T2.team_long_name FROM Team_Attributes AS T1 JOIN Team AS T2 ON T1.team_fifa_api_id = T2.team_fifa_api_id WHERE strftime('%Y', T1.date) = '2012' GROUP BY T2.team_long_name HAVING AVG(T1.buildUpPlayPassing) > (SELECT AVG(buildUpPlayPassing) FROM Team_Attributes WHERE strftime('%Y', date) = '2012')"
    },
    {
        "question_id": 1037,
        "answer_sql": "SELECT SUM(CASE WHEN T1.preferred_foot = 'left' THEN 1 ELSE 0 END) * 100 / COUNT(T1.player_fifa_api_id) AS percentage FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id WHERE T2.birthday BETWEEN '1987-01-01 00:00:00' AND '1992-12-31 00:00:00';"
    },
    {
        "question_id": 1038,
        "answer_sql": "SELECT L.name AS league_name, SUM(T.home_team_goal + T.away_team_goal) AS total_goals FROM Match T JOIN League L ON T.league_id = L.id GROUP BY L.name ORDER BY total_goals ASC LIMIT 5;"
    },
    {
        "question_id": 1039,
        "answer_sql": ""
    },
    {
        "question_id": 1040,
        "answer_sql": "SELECT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height > 180 GROUP BY T1.player_name ORDER BY AVG(T2.heading_accuracy) DESC LIMIT 10;"
    },
    {
        "question_id": 1041,
        "answer_sql": ""
    },
    {
        "question_id": 1042,
        "answer_sql": "SELECT L.name FROM League L JOIN Match M ON L.id = M.league_id WHERE M.season = '2009/2010' GROUP BY L.name HAVING AVG(M.home_team_goal) > AVG(M.away_team_goal);"
    },
    {
        "question_id": 1043,
        "answer_sql": "SELECT team_short_name FROM Team WHERE team_long_name = 'Queens Park Rangers';"
    },
    {
        "question_id": 1044,
        "answer_sql": ""
    },
    {
        "question_id": 1045,
        "answer_sql": "SELECT attacking_work_rate FROM Player_Attributes JOIN Player ON Player_Attributes.player_fifa_api_id = Player.player_fifa_api_id WHERE player_name = 'Franco Zennaro';"
    },
    {
        "question_id": 1046,
        "answer_sql": "SELECT T1.buildUpPlayPositioningClass AS freedom_of_movement FROM Team_Attributes AS T1 JOIN Team AS T2 ON T1.team_fifa_api_id = T2.team_fifa_api_id WHERE T2.team_long_name = 'ADO Den Haag';"
    },
    {
        "question_id": 1047,
        "answer_sql": ""
    },
    {
        "question_id": 1048,
        "answer_sql": "SELECT overall_rating FROM Player_Attributes JOIN Player ON Player_Attributes.player_fifa_api_id = Player.player_fifa_api_id WHERE strftime('%Y', Player_Attributes.date) = '2011' AND Player.player_name = 'Gabriel Tamas';"
    },
    {
        "question_id": 1049,
        "answer_sql": "SELECT COUNT(T1.id) AS match_count FROM Match AS T1 JOIN League AS T2 ON T1.league_id = T2.id WHERE T2.name = 'Scotland Premier League' AND T1.season = '2015/2016';"
    },
    {
        "question_id": 1050,
        "answer_sql": "SELECT T1.preferred_foot FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.birthday = (SELECT MIN(birthday) FROM Player) ORDER BY T2.birthday DESC LIMIT 1;"
    },
    {
        "question_id": 1051,
        "answer_sql": "SELECT Player_Attributes.player_api_id, Player.player_name, Player_Attributes.potential FROM Player_Attributes JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id ORDER BY Player_Attributes.potential DESC LIMIT 1;"
    },
    {
        "question_id": 1052,
        "answer_sql": "SELECT COUNT(T1.player_api_id) AS preferred_foot_left_count FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.preferred_foot = 'left' AND T2.weight < 130;"
    },
    {
        "question_id": 1053,
        "answer_sql": ""
    },
    {
        "question_id": 1054,
        "answer_sql": "SELECT defensive_work_rate FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'David Wilson');"
    },
    {
        "question_id": 1055,
        "answer_sql": "SELECT T1.birthday FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes);"
    },
    {
        "question_id": 1056,
        "answer_sql": "SELECT L.name FROM League L JOIN Country C ON L.country_id = C.id WHERE C.name = 'Netherlands';"
    },
    {
        "question_id": 1057,
        "answer_sql": "SELECT AVG(T1.home_team_goal) AS average_home_team_goal FROM Match AS T1 JOIN League AS T2 ON T1.country_id = T2.id JOIN Country AS T3 ON T2.country_id = T3.id WHERE T3.name = 'Poland' AND T1.season = '2010/2011';"
    },
    {
        "question_id": 1058,
        "answer_sql": ""
    },
    {
        "question_id": 1059,
        "answer_sql": ""
    },
    {
        "question_id": 1060,
        "answer_sql": "SELECT COUNT(*) FROM Player WHERE strftime('%Y', birthday) > '1990';"
    },
    {
        "question_id": 1061,
        "answer_sql": "SELECT COUNT(*) FROM Player WHERE player_name = 'Adam' AND weight > 170;"
    },
    {
        "question_id": 1062,
        "answer_sql": "SELECT T2.player_name FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.overall_rating > 80 AND strftime('%Y', T1.date) BETWEEN '2008' AND '2010';"
    },
    {
        "question_id": 1063,
        "answer_sql": "SELECT potential FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Doran');"
    },
    {
        "question_id": 1064,
        "answer_sql": ""
    },
    {
        "question_id": 1065,
        "answer_sql": "SELECT T1.team_long_name FROM Team AS T1 JOIN Team_Attributes AS T2 ON T1.team_fifa_api_id = T2.team_fifa_api_id WHERE T2.buildUpPlaySpeedClass = 'Fast';"
    },
    {
        "question_id": 1066,
        "answer_sql": ""
    },
    {
        "question_id": 1067,
        "answer_sql": "SELECT T2.team_short_name FROM Team_Attributes AS T1 JOIN Team AS T2 ON T1.team_fifa_api_id = T2.team_fifa_api_id WHERE T1.buildUpPlayPassing > 70;"
    },
    {
        "question_id": 1068,
        "answer_sql": "SELECT AVG(Player_Attributes.overall_rating) AS average_overall_rating FROM Player_Attributes JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id JOIN Team_Attributes ON Player_Attributes.player_fifa_api_id = Team_Attributes.team_fifa_api_id JOIN Team ON Team_Attributes.team_fifa_api_id = Team.team_fifa_api_id WHERE strftime('%Y', Player_Attributes.date) BETWEEN '2010' AND '2015' AND Player.height > 170;"
    },
    {
        "question_id": 1069,
        "answer_sql": "SELECT T1.player_name, T1.height FROM Player AS T1 WHERE T1.height = (SELECT MIN(height) FROM Player) ORDER BY T1.height ASC LIMIT 1;"
    },
    {
        "question_id": 1070,
        "answer_sql": "SELECT T1.country_id, T1.name FROM League AS T1 INNER JOIN Country AS T2 ON T1.country_id = T2.id WHERE T1.name = 'Italy Serie A';"
    },
    {
        "question_id": 1071,
        "answer_sql": "SELECT T2.team_short_name FROM Team_Attributes AS T1 JOIN Team AS T2 ON T1.team_fifa_api_id = T2.team_fifa_api_id WHERE T1.buildUpPlaySpeed = 31 AND T1.buildUpPlayDribbling = 53 AND T1.buildUpPlayPassing = 32;"
    },
    {
        "question_id": 1072,
        "answer_sql": "SELECT AVG(Player_Attributes.overall_rating) AS average_overall_rating FROM Player_Attributes JOIN Player ON Player_Attributes.player_fifa_api_id = Player.player_fifa_api_id WHERE Player.player_name = 'Aaron Doran';"
    },
    {
        "question_id": 1073,
        "answer_sql": "SELECT COUNT(T1.id) AS match_count FROM League AS T1 JOIN Match AS T2 ON T1.id = T2.league_id WHERE T1.name = 'Germany 1. Bundesliga' AND strftime('%Y-%m', T2.date) BETWEEN '2008-08' AND '2008-10';"
    },
    {
        "question_id": 1074,
        "answer_sql": "SELECT T2.team_short_name FROM Match AS T1 JOIN Team AS T3 ON T1.home_team_api_id = T3.team_api_id JOIN Team AS T2 ON T1.away_team_api_id = T2.team_api_id WHERE T1.home_team_goal = 10;"
    },
    {
        "question_id": 1075,
        "answer_sql": "SELECT P.player_name, PA.balance, PA.potential FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE PA.potential = 61 ORDER BY PA.balance DESC LIMIT 1;"
    },
    {
        "question_id": 1076,
        "answer_sql": ""
    },
    {
        "question_id": 1077,
        "answer_sql": "SELECT team_long_name FROM Team WHERE team_short_name = 'GEN';"
    },
    {
        "question_id": 1078,
        "answer_sql": "SELECT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.birthday = (SELECT MAX(birthday) FROM Player WHERE player_api_id = T1.player_api_id) ORDER BY T1.birthday ASC LIMIT 1;"
    },
    {
        "question_id": 1079,
        "answer_sql": "SELECT MAX(Player.height) AS tallest_height, Player.player_name FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id GROUP BY Player.player_api_id ORDER BY tallest_height DESC LIMIT 1;"
    },
    {
        "question_id": 1080,
        "answer_sql": "SELECT COUNT(T1.id) AS count FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.preferred_foot = 'left' AND T1.attacking_work_rate = 'low';"
    },
    {
        "question_id": 1081,
        "answer_sql": "SELECT T1.country_id, T1.name FROM League AS T1 JOIN Country AS T2 ON T1.country_id = T2.id WHERE T1.name = 'Belgium Jupiler League';"
    },
    {
        "question_id": 1082,
        "answer_sql": "SELECT DISTINCT T1.name FROM League AS T1 JOIN Country AS T2 ON T1.country_id = T2.id WHERE T2.name = 'Germany';"
    },
    {
        "question_id": 1083,
        "answer_sql": "SELECT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes) ORDER BY T2.overall_rating DESC LIMIT 1;"
    },
    {
        "question_id": 1084,
        "answer_sql": "SELECT COUNT(*) AS count FROM Player_Attributes PA JOIN Player P ON PA.player_api_id = P.player_api_id WHERE strftime('%Y', P.birthday) < '1986' AND PA.defensive_work_rate = 'high' AND PA.preferred_foot = 'left_foot' AND PA.attacking_work_rate = 'low';"
    },
    {
        "question_id": 1085,
        "answer_sql": "SELECT MAX(Player_Attributes.crossing) AS best_crossing FROM Player_Attributes WHERE Player_Attributes.player_api_id IN ( SELECT home_player_1 FROM Match WHERE home_player_1 IS NOT NULL UNION SELECT away_player_1 FROM Match WHERE away_player_1 IS NOT NULL );"
    },
    {
        "question_id": 1086,
        "answer_sql": "SELECT heading_accuracy FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Ariel Borysiuk');"
    },
    {
        "question_id": 1087,
        "answer_sql": "SELECT COUNT(*) FROM Player_Attributes PA JOIN Player P ON PA.player_api_id = P.player_api_id WHERE P.height > 180 AND PA.volleys > 70;"
    },
    {
        "question_id": 1088,
        "answer_sql": ""
    },
    {
        "question_id": 1089,
        "answer_sql": "SELECT COUNT(*) AS match_count FROM Match JOIN League ON Match.league_id = League.id JOIN Country ON League.country_id = Country.id WHERE Country.name = 'Belgium' AND Match.season = '2008/2009';"
    },
    {
        "question_id": 1090,
        "answer_sql": "SELECT T1.long_passing FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.birthday = (SELECT MAX(birthday) FROM Player) ORDER BY T2.birthday ASC LIMIT 1;"
    },
    {
        "question_id": 1091,
        "answer_sql": "SELECT COUNT(*) AS match_count FROM Match JOIN League ON Match.league_id = League.id WHERE League.name = 'Belgium Jupiler League' AND strftime('%Y', Match.date) = '2009' AND strftime('%m', Match.date) = '04';"
    },
    {
        "question_id": 1092,
        "answer_sql": "SELECT L.name FROM League L WHERE L.id = (SELECT league_id FROM Match WHERE season = '2008/2009' GROUP BY league_id ORDER BY COUNT(*) DESC LIMIT 1);"
    },
    {
        "question_id": 1093,
        "answer_sql": "SELECT AVG(T1.overall_rating) AS average_overall_rating FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.birthday < '1986-01-01' GROUP BY T2.birthday;"
    },
    {
        "question_id": 1094,
        "answer_sql": ""
    },
    {
        "question_id": 1095,
        "answer_sql": ""
    },
    {
        "question_id": 1096,
        "answer_sql": "SELECT AVG(T1.overall_rating) AS average_overall_rating FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id WHERE T2.player_name = 'Pietro Marino';"
    },
    {
        "question_id": 1097,
        "answer_sql": "SELECT SUM(T2.crossing) AS total_crossing_score FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = 'Aaron Lennox';"
    },
    {
        "question_id": 1098,
        "answer_sql": ""
    },
    {
        "question_id": 1099,
        "answer_sql": ""
    },
    {
        "question_id": 1100,
        "answer_sql": "SELECT MAX(T2.overall_rating) AS highest_overall_rating\nFROM Player_Attributes AS T2\nJOIN Player AS T1 ON T2.player_api_id = T1.player_api_id\nWHERE T1.player_name = 'Dorlan Pabon';"
    },
    {
        "question_id": 1101,
        "answer_sql": ""
    },
    {
        "question_id": 1102,
        "answer_sql": ""
    },
    {
        "question_id": 1103,
        "answer_sql": "SELECT overall_rating FROM Player_Attributes JOIN Player ON Player_Attributes.player_fifa_api_id = Player.player_fifa_api_id WHERE Player_name = 'Aaron Mooy' AND date = '2016-02-04 00:00:00';"
    },
    {
        "question_id": 1104,
        "answer_sql": "SELECT T1.potential FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Francesco Parravicini' AND T1.date = '2010-08-30 00:00:00';"
    },
    {
        "question_id": 1105,
        "answer_sql": "SELECT T1.attacking_work_rate FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Francesco Migliore' AND T1.date = '2015-05-01 00:00:00';"
    },
    {
        "question_id": 1106,
        "answer_sql": "SELECT defensive_work_rate FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Kevin Berigaud' AND date = '2013-02-22 00:00:00')"
    },
    {
        "question_id": 1107,
        "answer_sql": "SELECT MIN(T1.date) AS date FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id WHERE T2.player_name = 'Kevin Constant' AND T1.crossing = (SELECT MAX(crossing) FROM Player_Attributes WHERE player_fifa_api_id = T2.player_fifa_api_id);"
    },
    {
        "question_id": 1108,
        "answer_sql": ""
    },
    {
        "question_id": 1109,
        "answer_sql": ""
    },
    {
        "question_id": 1110,
        "answer_sql": ""
    },
    {
        "question_id": 1111,
        "answer_sql": ""
    },
    {
        "question_id": 1112,
        "answer_sql": ""
    },
    {
        "question_id": 1113,
        "answer_sql": "SELECT T2.defenceAggressionClass FROM Team AS T1 JOIN Team_Attributes AS T2 ON T1.team_fifa_api_id = T2.team_fifa_api_id WHERE T1.team_long_name = 'Hannover 96' AND T2.date = '2015-09-10 00:00:00';"
    },
    {
        "question_id": 1114,
        "answer_sql": "SELECT AVG(T1.overall_rating) AS average_overall_rating FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id WHERE T2.player_name = 'Marko Arnautovic' AND T1.date BETWEEN '2007-02-22 00:00:00' AND '2016-04-21 00:00:00';"
    },
    {
        "question_id": 1115,
        "answer_sql": "SELECT CAST((SUM(CASE WHEN T1.date = '2013/7/12' THEN 1 ELSE 0 END) * 100) AS REAL) / COUNT(T1.date) * 100 FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Landon Donovan' AND T1.date = '2013/7/12'"
    },
    {
        "question_id": 1116,
        "answer_sql": "SELECT player_name FROM Player ORDER BY height DESC LIMIT 5;"
    },
    {
        "question_id": 1117,
        "answer_sql": ""
    },
    {
        "question_id": 1118,
        "answer_sql": ""
    },
    {
        "question_id": 1119,
        "answer_sql": "SELECT COUNT(home_team_goal) AS home_team_goals FROM Match WHERE home_player_X1 = (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Lennon')"
    },
    {
        "question_id": 1120,
        "answer_sql": "SELECT SUM(CASE WHEN T2.player_name = 'Daan Smith' THEN T1.away_team_goal ELSE 0 END) + SUM(CASE WHEN T2.player_name = 'Filipe Ferreira' THEN T1.away_team_goal ELSE 0 END) AS total_goals FROM Match AS T1 JOIN Player AS T2 ON T1.home_player_1 = T2.player_api_id JOIN Player AS T3 ON T1.away_player_1 = T3.player_api_id WHERE T2.player_name IN ('Daan Smith', 'Filipe Ferreira')"
    },
    {
        "question_id": 1121,
        "answer_sql": "SELECT SUM(home_team_goal) AS total_home_team_goals FROM Match WHERE home_player_6 IS NOT NULL AND home_player_7 IS NOT NULL AND home_player_4 IS NOT NULL AND home_player_5 IS NOT NULL AND home_player_10 IS NOT NULL AND home_player_3 IS NOT NULL AND home_player_2 IS NOT NULL AND home_player_8 IS NOT NULL AND home_player_1 IS NOT NULL AND home_player_9 IS NOT NULL AND home_player_11 IS NOT NULL AND home_player_6 >= 30 AND home_player_7 >= 30 AND home_player_4 >= 30 AND home_player_5 >= 30 AND home_player_10 >= 30 AND home_player_3 >= 30 AND home_player_2 >= 30 AND home_player_8 >= 30 AND home_player_1 >= 30 AND home_player_9 >= 30 AND home_player_11 >= 30"
    },
    {
        "question_id": 1122,
        "answer_sql": ""
    },
    {
        "question_id": 1123,
        "answer_sql": "SELECT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.potential = (SELECT MAX(potential) FROM Player_Attributes) ORDER BY T2.potential DESC;"
    },
    {
        "question_id": 1124,
        "answer_sql": ""
    },
    {
        "question_id": 1125,
        "answer_sql": "SELECT MAX(T1.player_name) AS player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.finishing = 1 ORDER BY T1.birthday ASC LIMIT 1;"
    },
    {
        "question_id": 1126,
        "answer_sql": ""
    },
    {
        "question_id": 1127,
        "answer_sql": ""
    },
    {
        "question_id": 1128,
        "answer_sql": ""
    },
    {
        "question_id": 1129,
        "answer_sql": "SELECT T2.team_long_name FROM Team_Attributes AS T1 JOIN Team AS T2 ON T1.team_fifa_api_id = T2.team_fifa_api_id WHERE T1.buildUpPlaySpeedClass = 'Slow';"
    },
    {
        "question_id": 1130,
        "answer_sql": ""
    },
    {
        "question_id": 1131,
        "answer_sql": ""
    },
    {
        "question_id": 1132,
        "answer_sql": "SELECT player_name FROM Player WHERE height > 180 ORDER BY player_name LIMIT 3;"
    },
    {
        "question_id": 1133,
        "answer_sql": "SELECT COUNT(T1.player_api_id) AS player_count FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.birthday > '1990-01-01' AND T1.player_name LIKE 'Aaron%';"
    },
    {
        "question_id": 1134,
        "answer_sql": "SELECT SUM(CASE WHEN T1.id = 6 THEN T1.jumping ELSE 0 END) - SUM(CASE WHEN T1.id = 23 THEN T1.jumping ELSE 0 END) AS jumping_difference FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.id IN (6, 23)"
    },
    {
        "question_id": 1135,
        "answer_sql": "SELECT T1.player_api_id FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.potential = (SELECT MIN(T1.potential) FROM Player_Attributes AS T1) AND T1.preferred_foot = 'right' ORDER BY T1.potential ASC LIMIT 3;"
    },
    {
        "question_id": 1136,
        "answer_sql": "SELECT COUNT(*) AS player_count FROM Player_Attributes JOIN Player ON Player_Attributes.player_fifa_api_id = Player.player_fifa_api_id WHERE Player_Attributes.crossing = (SELECT MAX(crossing) FROM Player_Attributes WHERE preferred_foot = 'left')"
    },
    {
        "question_id": 1137,
        "answer_sql": "SELECT (COUNT(CASE WHEN strength > 80 AND stamina > 80 THEN 1 END) * 100) / COUNT(*) AS percentage FROM Player_Attributes WHERE strength > 80 AND stamina > 80;"
    },
    {
        "question_id": 1138,
        "answer_sql": "SELECT T2.name AS country_name FROM League AS T1 JOIN Country AS T2 ON T1.country_id = T2.id WHERE T1.name = 'Poland Ekstraklasa';"
    },
    {
        "question_id": 1139,
        "answer_sql": ""
    },
    {
        "question_id": 1140,
        "answer_sql": "SELECT `Player_Attributes`.crossing, `Player_Attributes`.finishing, `Player_Attributes`.acceleration FROM `Player_Attributes` JOIN `Player` ON `Player_Attributes`.player_fifa_api_id = `Player`.player_fifa_api_id WHERE `Player`.player_name = 'Alexis Blin';"
    },
    {
        "question_id": 1141,
        "answer_sql": "SELECT T2.buildUpPlaySpeedClass AS speed_class FROM Team AS T1 JOIN Team_Attributes AS T2 ON T1.team_fifa_api_id = T2.team_fifa_api_id WHERE T1.team_long_name = 'KSV Cercle Brugge';"
    },
    {
        "question_id": 1142,
        "answer_sql": "SELECT COUNT(id) AS game_count FROM Match WHERE season = '2015/2016' AND league_id = (SELECT id FROM League WHERE name = 'Italian Serie A');"
    },
    {
        "question_id": 1143,
        "answer_sql": "SELECT MAX(home_team_goal) AS highest_score FROM Match JOIN League ON Match.league_id = League.id WHERE League.name = 'Netherlands Eredivisie';"
    },
    {
        "question_id": 1144,
        "answer_sql": "SELECT P.player_name, P.weight, PA.finishing, PA.curve FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE P.weight = (SELECT MAX(weight) FROM Player) ORDER BY PA.finishing DESC, PA.curve DESC LIMIT 1;"
    },
    {
        "question_id": 1145,
        "answer_sql": "SELECT L.name AS league_name FROM Match M JOIN League L ON M.league_id = L.id WHERE M.season = '2015/2016' GROUP BY L.id ORDER BY COUNT(M.id) DESC LIMIT 1;"
    },
    {
        "question_id": 1146,
        "answer_sql": "SELECT T2.team_long_name FROM Match AS T1 JOIN Team AS T2 ON T1.away_team_api_id = T2.team_api_id WHERE T1.away_team_goal = (SELECT MAX(away_team_goal) FROM Match) ORDER BY T1.away_team_goal DESC LIMIT 1;"
    },
    {
        "question_id": 1147,
        "answer_sql": ""
    },
    {
        "question_id": 1148,
        "answer_sql": "SELECT CAST(COUNT(CASE WHEN Player.height < 180 AND Player_Attributes.overall_rating > 70 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(Player.id) AS percentage FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id"
    },
    {
        "question_id": 1149,
        "answer_sql": "SELECT (COUNT(CASE WHEN SEX = 'M' AND Admission = '+' THEN ID ELSE NULL END) - COUNT(CASE WHEN SEX = 'M' AND Admission = '-' THEN ID ELSE NULL END)) * 100 / (COUNT(CASE WHEN SEX = 'M' AND Admission = '+' THEN ID ELSE NULL END) + COUNT(CASE WHEN SEX = 'M' AND Admission = '-' THEN ID ELSE NULL END)) AS DeviationPercentage FROM Patient"
    },
    {
        "question_id": 1150,
        "answer_sql": ""
    },
    {
        "question_id": 1151,
        "answer_sql": ""
    },
    {
        "question_id": 1152,
        "answer_sql": ""
    },
    {
        "question_id": 1153,
        "answer_sql": ""
    },
    {
        "question_id": 1154,
        "answer_sql": "SELECT P.SEX, P.Birthday, E.`Examination Date`, E.Symptoms FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE P.ID = 163109;"
    },
    {
        "question_id": 1155,
        "answer_sql": "SELECT P.ID, P.SEX, P.Birthday FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.Date = (SELECT MAX(Date) FROM Laboratory WHERE LDH > 500)"
    },
    {
        "question_id": 1156,
        "answer_sql": ""
    },
    {
        "question_id": 1157,
        "answer_sql": "SELECT P.ID, P.SEX, P.Diagnosis FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE E.Thrombosis = 2;"
    },
    {
        "question_id": 1158,
        "answer_sql": ""
    },
    {
        "question_id": 1159,
        "answer_sql": "SELECT P.ID, P.SEX, P.Diagnosis FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.ALB < 3.5;"
    },
    {
        "question_id": 1160,
        "answer_sql": "SELECT CAST(COUNT(CASE WHEN P.SEX = 'F' AND L.TP < '6.0' OR L.TP > '8.5' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(P.ID) AS Percentage FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE P.SEX = 'F' AND L.TP NOT BETWEEN '6.0' AND '8.5';"
    },
    {
        "question_id": 1161,
        "answer_sql": ""
    },
    {
        "question_id": 1162,
        "answer_sql": ""
    },
    {
        "question_id": 1163,
        "answer_sql": ""
    },
    {
        "question_id": 1164,
        "answer_sql": "SELECT COUNT(DISTINCT P.ID) AS WomenWithSeriousThrombosis FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID AND L.Date = '1997-12-31' WHERE E.Thrombosis = '1' AND P.SEX = 'F';"
    },
    {
        "question_id": 1165,
        "answer_sql": ""
    },
    {
        "question_id": 1166,
        "answer_sql": "SELECT Symptoms, Diagnosis FROM Examination WHERE ID = (SELECT MIN(ID) FROM Examination) ORDER BY Symptoms;"
    },
    {
        "question_id": 1167,
        "answer_sql": ""
    },
    {
        "question_id": 1168,
        "answer_sql": ""
    },
    {
        "question_id": 1169,
        "answer_sql": ""
    },
    {
        "question_id": 1170,
        "answer_sql": ""
    },
    {
        "question_id": 1171,
        "answer_sql": "SELECT COUNT(DISTINCT E.ID) AS UnderagePatientsExamined FROM Examination E JOIN Patient P ON E.ID = P.ID WHERE P.Birthday < '1990-01-01' AND E.`Examination Date` BETWEEN '1990-01-01' AND '1993-12-31';"
    },
    {
        "question_id": 1172,
        "answer_sql": ""
    },
    {
        "question_id": 1173,
        "answer_sql": "SELECT MAX(T2.Diagnosis) AS MostCommonIllness FROM Examination AS T1 JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.`Examination Date` BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY T2.Diagnosis;"
    },
    {
        "question_id": 1174,
        "answer_sql": ""
    },
    {
        "question_id": 1175,
        "answer_sql": "SELECT P.Birthday AS Patient_Birthday, P.Description AS Patient_Description, MAX(L.HGB) AS Highest_Hemoglobin_Count, P.Diagnosis AS Patient_Diagnosis FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON E.ID = L.ID WHERE L.Date = (SELECT MAX(Date) FROM Laboratory) GROUP BY P.ID, P.Birthday, P.Description, P.Diagnosis ORDER BY P.Birthday ASC LIMIT 1;"
    },
    {
        "question_id": 1176,
        "answer_sql": "SELECT `ANA Pattern`, `ANA` FROM Examination WHERE ID = 3605340 AND `Examination Date` = '1996-12-02';"
    },
    {
        "question_id": 1177,
        "answer_sql": "SELECT 'N' AS Status FROM Laboratory WHERE ID = 2927464 AND Date = '1995-09-04' AND TP < 250;"
    },
    {
        "question_id": 1178,
        "answer_sql": ""
    },
    {
        "question_id": 1179,
        "answer_sql": ""
    },
    {
        "question_id": 1180,
        "answer_sql": "SELECT T2.SEX FROM Laboratory AS T1 JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.Date = '1992-06-12' AND T1.GPT = '9';"
    },
    {
        "question_id": 1181,
        "answer_sql": ""
    },
    {
        "question_id": 1182,
        "answer_sql": "SELECT COUNT(L.ID) AS Total_Laboratory_Tests FROM Examination E JOIN Patient P ON E.ID = P.ID JOIN Laboratory L ON L.ID = P.ID WHERE E.`Examination Date` = '1995-01-01' AND P.`First Date` = '1991-06-13' AND P.Diagnosis = 'SJS';"
    },
    {
        "question_id": 1183,
        "answer_sql": "SELECT Diagnosis FROM Patient WHERE `First Date` = '1997-01-27' AND Diagnosis = 'SLE';"
    },
    {
        "question_id": 1184,
        "answer_sql": "SELECT Symptoms FROM Examination WHERE `Examination Date` = '1993-09-27' AND ID IN ( SELECT ID FROM Patient WHERE Birthday = '1959-03-01' );"
    },
    {
        "question_id": 1185,
        "answer_sql": ""
    },
    {
        "question_id": 1186,
        "answer_sql": "SELECT DISTINCT P.ID FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE E.Diagnosis = 'Behcet' AND E.`Examination Date` BETWEEN '1970-01-01' AND '1997-12-31';"
    },
    {
        "question_id": 1187,
        "answer_sql": "SELECT P.ID FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE E.`Examination Date` BETWEEN '1987-07-06' AND '1996-01-31' AND L.GPT > 30 AND L.ALB < 4 GROUP BY P.ID ORDER BY P.ID;"
    },
    {
        "question_id": 1188,
        "answer_sql": ""
    },
    {
        "question_id": 1189,
        "answer_sql": "SELECT COUNT(DISTINCT T1.ID) AS count_patients FROM Examination AS T1 JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.Thrombosis = 2 AND T1.`ANA Pattern` = 'S' AND T1.`aCL IgM` > (SELECT AVG(`aCL IgM`) FROM Examination WHERE Thrombosis = 2 AND `ANA Pattern` = 'S') * 1.2"
    },
    {
        "question_id": 1190,
        "answer_sql": "SELECT CAST(COUNT(CASE WHEN UA <= 6.5 AND `U-PRO` > 0 AND `U-PRO` < 30 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(*) FROM Laboratory WHERE `U-PRO` > 0 AND `U-PRO` < 30;"
    },
    {
        "question_id": 1191,
        "answer_sql": "SELECT CAST(SUM(CASE WHEN T1.DIAGNOSIS = 'BEHCET' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.DIAGNOSIS) AS Percentage FROM Patient AS T1 JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T1.BIRTHDAY BETWEEN '1980-12-31' AND '1981-12-31';"
    },
    {
        "question_id": 1192,
        "answer_sql": ""
    },
    {
        "question_id": 1193,
        "answer_sql": "SELECT COUNT(*) FROM Patient P WHERE P.SEX = 'F' AND P.BIRTHDAY BETWEEN '1980-01-01' AND '1989-12-31' AND P.ID NOT IN ( SELECT ID FROM Examination E WHERE E.Diagnosis = 'p' AND E.`ANA Pattern` = 'p' );"
    },
    {
        "question_id": 1194,
        "answer_sql": "SELECT T2.SEX FROM Examination AS T1 JOIN Patient AS T2 ON T1.ID = T2.ID JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T1.Diagnosis = 'PSS' AND T3.CRP > 2 AND T3.CRE = 1 AND T3.LDH = 123;"
    },
    {
        "question_id": 1195,
        "answer_sql": "SELECT AVG(Laboratory.ALB) AS AVG_ALB FROM Laboratory JOIN Patient ON Laboratory.ID = Patient.ID JOIN Examination ON Patient.ID = Examination.ID WHERE Patient.SEX = 'F' AND Laboratory.PLT > 400 AND Examination.Diagnosis = 'SLE';"
    },
    {
        "question_id": 1196,
        "answer_sql": "SELECT MAX(Examination.Symptoms) AS MostCommonSign FROM Examination JOIN Patient ON Examination.ID = Patient.ID WHERE Examination.Diagnosis = 'SLE';"
    },
    {
        "question_id": 1197,
        "answer_sql": "SELECT Patient.Description, Examination.`Examination Date` FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Patient.ID = 48473;"
    },
    {
        "question_id": 1198,
        "answer_sql": "SELECT COUNT(DISTINCT P.ID) AS FemalePatientsWithAPS FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE P.SEX = 'F' AND E.Diagnosis = 'APS';"
    },
    {
        "question_id": 1199,
        "answer_sql": "SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID AND L.Date = '1997-01-01' WHERE L.TP NOT BETWEEN 6 AND 8.5;"
    },
    {
        "question_id": 1200,
        "answer_sql": "SELECT SUM(CASE WHEN Diagnosis LIKE '%SLE%' THEN 1 ELSE 0 END) / SUM(CASE WHEN Diagnosis LIKE '%ITP%' THEN 1 ELSE 0 END) * 100 AS Proportion FROM Examination WHERE Symptoms LIKE '%thrombocytopenia%'"
    },
    {
        "question_id": 1201,
        "answer_sql": ""
    },
    {
        "question_id": 1202,
        "answer_sql": ""
    },
    {
        "question_id": 1203,
        "answer_sql": "SELECT COUNT(P.ID) AS FemalePatientsWithWBCBelow35 FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE P.SEX = 'F' AND L.WBC < 3.5;"
    },
    {
        "question_id": 1204,
        "answer_sql": ""
    },
    {
        "question_id": 1205,
        "answer_sql": "SELECT 'M' AS Sex, UA FROM Laboratory WHERE ID = 57266 AND UA > 8.0 UNION ALL SELECT 'F' AS Sex, UA FROM Laboratory WHERE ID = 57266 AND UA > 6.5;"
    },
    {
        "question_id": 1206,
        "answer_sql": "SELECT Examination.`Examination Date` FROM Examination JOIN Patient ON Examination.ID = Patient.ID JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Patient.ID = 48473 AND Laboratory.GOT > 60;"
    },
    {
        "question_id": 1207,
        "answer_sql": ""
    },
    {
        "question_id": 1208,
        "answer_sql": "SELECT P.ID FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.GPT >= 60 AND EXISTS ( SELECT 1 FROM Examination E2 JOIN Patient P2 ON E2.ID = P2.ID WHERE E2.ID = E.ID AND P2.SEX = 'M' )"
    },
    {
        "question_id": 1209,
        "answer_sql": "SELECT P.Diagnosis FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.GPT > 60 ORDER BY P.Birthday ASC;"
    },
    {
        "question_id": 1210,
        "answer_sql": "SELECT AVG(Laboratory.LDH) AS Average_LDH FROM Laboratory WHERE Laboratory.Date BETWEEN '2020-01-01' AND '2020-12-31' AND Laboratory.LDH < 500 AND Laboratory.ID IN ( SELECT ID FROM Examination WHERE Examination.Diagnosis IN ('Normal', 'High Risk', 'Very High Risk') );"
    },
    {
        "question_id": 1211,
        "answer_sql": ""
    },
    {
        "question_id": 1212,
        "answer_sql": ""
    },
    {
        "question_id": 1213,
        "answer_sql": "SELECT P.ID FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE P.Birthday = '1982-04-01' AND E.`aCL IgG` < 300;"
    },
    {
        "question_id": 1214,
        "answer_sql": "SELECT P.ID, P.SEX, P.Birthday FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.TP < 6.0;"
    },
    {
        "question_id": 1215,
        "answer_sql": "SELECT T2.ID, T2.`Examination Date`, T2.`aCL IgG`, T2.`aCL IgM`, T2.`aCL IgA`, T2.Diagnosis, T2.KCT, T2.RVVT, T2.LAC, T2.Symptoms, T2.Thrombosis, (T2.`aCL IgG` - 8.5) AS `aCL IgG Deviation`, (T2.`aCL IgM` - 8.5) AS `aCL IgM Deviation`, (T2.`aCL IgA` - 8.5) AS `aCL IgA Deviation` FROM Examination AS T2 JOIN Patient AS T1 ON T2.ID = T1.ID WHERE T1.SEX = 'F' AND T2.`aCL IgG` > 8.5;"
    },
    {
        "question_id": 1216,
        "answer_sql": "SELECT P.ID, P.Birthday FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.ALB NOT BETWEEN 3.5 AND 5.5 ORDER BY P.Birthday DESC;"
    },
    {
        "question_id": 1217,
        "answer_sql": ""
    },
    {
        "question_id": 1218,
        "answer_sql": "SELECT CAST(COUNT(CASE WHEN SEX = 'F' AND UA > 8.0 THEN 1 ELSE NULL END) + COUNT(CASE WHEN SEX = 'F' AND UA > 6.5 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(*) AS Percentage FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE SEX = 'F' AND (UA > 8.0 OR UA > 6.5);"
    },
    {
        "question_id": 1219,
        "answer_sql": "SELECT AVG(L.UA) AS Average_UA FROM Laboratory L JOIN Examination E ON L.ID = E.ID JOIN Patient P ON E.ID = P.ID WHERE L.Date = (SELECT MAX(Date) FROM Laboratory WHERE ID = P.ID) AND L.UA < 8.0 AND P.SEX = 'M' UNION SELECT AVG(L.UA) AS Average_UA FROM Laboratory L JOIN Examination E ON L.ID = E.ID JOIN Patient P ON E.ID = P.ID WHERE L.Date = (SELECT MAX(Date) FROM Laboratory WHERE ID = P.ID) AND L.UA < 6.5 AND P.SEX = 'F';"
    },
    {
        "question_id": 1220,
        "answer_sql": ""
    },
    {
        "question_id": 1221,
        "answer_sql": ""
    },
    {
        "question_id": 1222,
        "answer_sql": "SELECT COUNT(P.ID) AS MalePatientsWithCREOutOfRange FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID AND L.Date = '2022-01-01' WHERE P.SEX = 'M' AND L.CRE > 1.5;"
    },
    {
        "question_id": 1223,
        "answer_sql": "SELECT CASE WHEN SUM(CASE WHEN SEX = 'M' THEN 1 ELSE 0 END) > SUM(CASE WHEN SEX = 'F' THEN 1 ELSE 0 END) AND CRE >= 1.5 THEN 'True' ELSE 'False' END AS result FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE CRE >= 1.5;"
    },
    {
        "question_id": 1224,
        "answer_sql": ""
    },
    {
        "question_id": 1225,
        "answer_sql": "SELECT P.SEX, COUNT(*) AS Total_Patients FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.`T-BIL` >= 2.0 GROUP BY P.SEX;"
    },
    {
        "question_id": 1226,
        "answer_sql": ""
    },
    {
        "question_id": 1227,
        "answer_sql": ""
    },
    {
        "question_id": 1228,
        "answer_sql": ""
    },
    {
        "question_id": 1229,
        "answer_sql": ""
    },
    {
        "question_id": 1230,
        "answer_sql": ""
    },
    {
        "question_id": 1231,
        "answer_sql": "SELECT COUNT(P.ID) AS MalePatientsWithCPGBeyondNormalRange FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON E.ID = L.ID WHERE P.Birthday BETWEEN '1936-01-01' AND '1956-12-31' AND P.SEX = 'M' AND L.CPK > 250;"
    },
    {
        "question_id": 1232,
        "answer_sql": ""
    },
    {
        "question_id": 1233,
        "answer_sql": "SELECT P.ID, L.GLU FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE P.Description >= '1991-01-01' AND L.Date = (SELECT MIN(Date) FROM Laboratory WHERE ID = P.ID) AND L.GLU < 180;"
    },
    {
        "question_id": 1234,
        "answer_sql": ""
    },
    {
        "question_id": 1235,
        "answer_sql": "SELECT Patient.ID, Patient.Birthday, Patient.Diagnosis FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.RBC < 3.5 ORDER BY Patient.Birthday;"
    },
    {
        "question_id": 1236,
        "answer_sql": "SELECT P.ID, P.SEX, P.Birthday, P.Description, P.`First Date`, P.Admission, P.Diagnosis, L.RBC, E.Diagnosis AS Examination_Diagnosis FROM Patient P JOIN Laboratory L ON P.ID = L.ID JOIN Examination E ON P.ID = E.ID WHERE P.SEX = 'F' AND P.Birthday >= DATE('now', '-50 years') AND L.RBC <= 3.5 OR L.RBC >= 6.0 AND E.Diagnosis = 'Admitted';"
    },
    {
        "question_id": 1237,
        "answer_sql": ""
    },
    {
        "question_id": 1238,
        "answer_sql": "SELECT P.ID, P.SEX FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE P.Diagnosis = 'SLE' AND L.HGB BETWEEN 10 AND 17 ORDER BY P.Birthday ASC LIMIT 1;"
    },
    {
        "question_id": 1239,
        "answer_sql": ""
    },
    {
        "question_id": 1240,
        "answer_sql": "SELECT AVG(Laboratory.HCT) AS Average_HCT FROM Laboratory WHERE Laboratory.Date LIKE '1991%' GROUP BY Laboratory.Date HAVING AVG(Laboratory.HCT) < 29;"
    },
    {
        "question_id": 1241,
        "answer_sql": "SELECT SUM(CASE WHEN PLT < 100 THEN 1 ELSE 0 END) AS lower_than_normal, SUM(CASE WHEN PLT > 400 THEN 1 ELSE 0 END) AS higher_than_normal FROM Laboratory WHERE PLT < 100"
    },
    {
        "question_id": 1242,
        "answer_sql": ""
    },
    {
        "question_id": 1243,
        "answer_sql": ""
    },
    {
        "question_id": 1244,
        "answer_sql": ""
    },
    {
        "question_id": 1245,
        "answer_sql": "SELECT COUNT(T1.ID) AS Count FROM Examination AS T1 JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.`Examination Date` > '1997-01-01' AND T2.APTT < 45;"
    },
    {
        "question_id": 1246,
        "answer_sql": "SELECT COUNT(DISTINCT E.ID) AS CountOfMildThrombosis FROM Examination E JOIN Patient P ON E.ID = P.ID JOIN Laboratory L ON E.ID = L.ID WHERE E.Thrombosis = 3 AND L.APTT > 45 AND P.ID IN ( SELECT DISTINCT E.ID FROM Examination E JOIN Patient P ON E.ID = P.ID WHERE E.Thrombosis = 3 AND L.APTT > 45 );"
    },
    {
        "question_id": 1247,
        "answer_sql": "SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.WBC BETWEEN 3.5 AND 9.0 AND (L.FG <= 150 OR L.FG >= 450);"
    },
    {
        "question_id": 1248,
        "answer_sql": "SELECT COUNT(DISTINCT P.ID) AS num_patients FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE P.Birthday > '1980-01-01' AND L.FG NOT BETWEEN 150 AND 450;"
    },
    {
        "question_id": 1249,
        "answer_sql": "SELECT DISTINCT P.Diagnosis FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.`U-PRO` >= 30;"
    },
    {
        "question_id": 1250,
        "answer_sql": "SELECT P.ID FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.`U-PRO` BETWEEN 0 AND 30 AND P.Diagnosis = 'SLE';"
    },
    {
        "question_id": 1251,
        "answer_sql": "SELECT COUNT(DISTINCT P.ID) AS AbortionPatientsWithIgGLowerThanNormal FROM Examination E JOIN Patient P ON E.ID = P.ID JOIN Laboratory L ON E.ID = L.ID WHERE E.`aCL IgG` < 900 AND E.Symptoms = 'abortion';"
    },
    {
        "question_id": 1252,
        "answer_sql": "SELECT COUNT(DISTINCT P.ID) AS CountOfPatientsWithSymptoms FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.IGG BETWEEN 900 AND 2000 AND E.Symptoms IS NOT NULL;"
    },
    {
        "question_id": 1253,
        "answer_sql": "SELECT P.Diagnosis FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.IGA BETWEEN 80 AND 500 ORDER BY L.IGA DESC LIMIT 1;"
    },
    {
        "question_id": 1254,
        "answer_sql": ""
    },
    {
        "question_id": 1255,
        "answer_sql": "SELECT MAX(T2.Diagnosis) AS MostCommonDisease FROM Examination AS T1 JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.`aCL IgM` NOT BETWEEN 40 AND 400 GROUP BY T1.Diagnosis;"
    },
    {
        "question_id": 1256,
        "answer_sql": "SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.CRP LIKE '+' OR L.CRP LIKE '-' OR L.CRP < 1.0 AND P.Description IS NULL;"
    },
    {
        "question_id": 1257,
        "answer_sql": ""
    },
    {
        "question_id": 1258,
        "answer_sql": "SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.RF = '+-';"
    },
    {
        "question_id": 1259,
        "answer_sql": ""
    },
    {
        "question_id": 1260,
        "answer_sql": ""
    },
    {
        "question_id": 1261,
        "answer_sql": "SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.RF < 20 AND E.Thrombosis = '0';"
    },
    {
        "question_id": 1262,
        "answer_sql": "SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.C3 > 35 AND E.`ANA Pattern` = 'P';"
    },
    {
        "question_id": 1263,
        "answer_sql": ""
    },
    {
        "question_id": 1264,
        "answer_sql": "SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE E.Diagnosis = 'Thrombosis' AND L.C4 > 10;"
    },
    {
        "question_id": 1265,
        "answer_sql": "SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.RNP = '-' OR L.RNP = '+-' AND P.Admission = '+';"
    },
    {
        "question_id": 1266,
        "answer_sql": "SELECT MIN(T2.Birthday) AS Min_Birthday, T2.ID, T2.Birthday FROM Examination AS T1 JOIN Patient AS T2 ON T1.ID = T2.ID JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T3.RNP NOT IN ('-', '+-') GROUP BY T2.ID, T2.Birthday ORDER BY T2.Birthday ASC LIMIT 1;"
    },
    {
        "question_id": 1267,
        "answer_sql": "SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.SM = '-' AND E.Thrombosis = '1';"
    },
    {
        "question_id": 1268,
        "answer_sql": ""
    },
    {
        "question_id": 1269,
        "answer_sql": ""
    },
    {
        "question_id": 1270,
        "answer_sql": "SELECT COUNT(DISTINCT T1.ID) AS count FROM Examination AS T1 JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.`aCL IgG` IN ('-', '+-') AND T2.SEX = 'M' AND T1.symptoms = 'vertigo';"
    },
    {
        "question_id": 1271,
        "answer_sql": ""
    },
    {
        "question_id": 1272,
        "answer_sql": "SELECT MIN(P.ID) AS ID FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON L.ID = E.ID WHERE L.SSA NOT IN ('-', '+-') GROUP BY P.ID"
    },
    {
        "question_id": 1273,
        "answer_sql": "SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.SSB = '-' AND E.Diagnosis = 'SLE';"
    },
    {
        "question_id": 1274,
        "answer_sql": "SELECT COUNT(DISTINCT e.ID) AS count FROM Examination e JOIN Patient p ON e.ID = p.ID WHERE p.Sex = '-' AND e.Symptoms IS NOT NULL AND e.Symptoms NOT LIKE '%-%';"
    },
    {
        "question_id": 1275,
        "answer_sql": "SELECT COUNT(P.ID) AS MalePatients FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.CENTROMEA IN ('-', '+-') AND L.SSB IN ('-', '+-') AND P.SEX = 'M';"
    },
    {
        "question_id": 1276,
        "answer_sql": ""
    },
    {
        "question_id": 1277,
        "answer_sql": "SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID AND L.Date = (SELECT MAX(Date) FROM Laboratory WHERE ID = P.ID) WHERE L.DNA < 8 AND P.Description IS NULL;"
    },
    {
        "question_id": 1278,
        "answer_sql": "SELECT COUNT(DISTINCT P.ID) AS Num_Admitted FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.`DNA-II` < 8 AND P.Admission = '+';"
    },
    {
        "question_id": 1279,
        "answer_sql": "SELECT CAST(SUM(CASE WHEN Examination.Diagnosis = 'SLE' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) AS Percentage FROM Examination JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Laboratory.GOT >= 60;"
    },
    {
        "question_id": 1280,
        "answer_sql": "SELECT COUNT(P.ID) AS MalePatientsWithNormalGOT FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON E.ID = L.ID WHERE P.SEX = 'M' AND L.GOT < 60;"
    },
    {
        "question_id": 1281,
        "answer_sql": "SELECT MAX(P.Birthday) AS Youngest_BirthDate FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.GOT >= 60;"
    },
    {
        "question_id": 1282,
        "answer_sql": "SELECT P.Birthday FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON L.ID = E.ID WHERE L.GPT < 60 GROUP BY P.Birthday ORDER BY COUNT(*) DESC LIMIT 3;"
    },
    {
        "question_id": 1283,
        "answer_sql": "SELECT COUNT(P.ID) AS MalePatients FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.GOT < 60 AND P.SEX = 'M';"
    },
    {
        "question_id": 1284,
        "answer_sql": ""
    },
    {
        "question_id": 1285,
        "answer_sql": "SELECT MAX(Patient.ID) AS LatestPatientID FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.LDH >= 500;"
    },
    {
        "question_id": 1286,
        "answer_sql": "SELECT COUNT(DISTINCT P.ID) AS AdmittedPatients FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.ALP > 300 AND P.Admission = '+';"
    },
    {
        "question_id": 1287,
        "answer_sql": "SELECT COUNT(DISTINCT P.ID) AS Normal_ALP_Patients FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE E.`Examination Date` = '-' AND E.`aCL IgG` IS NULL AND E.`aCL IgM` IS NULL AND E.`aCL IgA` IS NULL AND E.`ANA Pattern` IS NULL AND E.`ANA` IS NULL AND E.`aCL IgG` IS NULL AND E.`aCL IgM` IS NULL AND E.`aCL IgA` IS NULL AND E.Diagnosis = 'Normal ALP' AND E.`aCL IgG` IS NOT NULL AND E.`aCL IgM` IS NOT NULL AND E.`aCL IgA` IS NOT NULL AND E.`ANA Pattern` IS NOT NULL AND E.`ANA` IS NOT NULL AND E.`aCL IgG` IS NOT NULL AND E.`aCL IgM` IS NOT NULL AND E.`aCL IgA` IS NOT NULL AND E.Diagnosis = 'Normal ALP';"
    },
    {
        "question_id": 1288,
        "answer_sql": "SELECT Diagnosis FROM Patient WHERE ID IN ( SELECT ID FROM Laboratory WHERE TP < 6.0 )"
    },
    {
        "question_id": 1289,
        "answer_sql": "SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE P.Diagnosis = 'SJS' AND L.TP > 6.0 AND L.TP < 8.5;"
    },
    {
        "question_id": 1290,
        "answer_sql": "SELECT T1.`Examination Date` FROM Examination AS T1 JOIN Patient AS T2 ON T1.ID = T2.ID JOIN Laboratory AS T3 ON T3.ID = T1.ID WHERE T3.ALB > 3.5 AND T3.ALB < 5.5 ORDER BY T3.ALB DESC LIMIT 1;"
    },
    {
        "question_id": 1291,
        "answer_sql": "SELECT COUNT(P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.ALB > 3.5 AND L.ALB < 5.5 AND L.TP BETWEEN 6.0 AND 8.5;"
    },
    {
        "question_id": 1292,
        "answer_sql": "SELECT Examination.`aCL IgG`, Examination.`aCL IgM`, Examination.`aCL IgA`, Examination.`aCL IgA` AS anti_cardiolipin_antiobody_concentration FROM Examination JOIN Patient ON Examination.ID = Patient.ID JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Patient.Sex = 'F' AND Examination.`aCL IgA` > 6.50 ORDER BY Examination.`aCL IgA` DESC LIMIT 1;"
    },
    {
        "question_id": 1293,
        "answer_sql": ""
    },
    {
        "question_id": 1294,
        "answer_sql": "SELECT P.ID FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.CRE < 1.5 ORDER BY L.IGG DESC LIMIT 1;"
    },
    {
        "question_id": 1295,
        "answer_sql": "SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.`T-BIL` >= 2.0 AND E.`ANA Pattern` LIKE '%P%'"
    },
    {
        "question_id": 1296,
        "answer_sql": "SELECT Examination.`aCL IgG` \nFROM Examination \nJOIN Patient ON Examination.ID = Patient.ID \nJOIN Laboratory ON Examination.ID = Laboratory.ID \nWHERE Laboratory.`T-BIL` < 2.0 \nGROUP BY Examination.`aCL IgG` \nORDER BY Examination.`aCL IgG` DESC \nLIMIT 1;"
    },
    {
        "question_id": 1297,
        "answer_sql": ""
    },
    {
        "question_id": 1298,
        "answer_sql": "SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE E.`ANA Pattern` = 'P' AND L.`T-CHO` < 250;"
    },
    {
        "question_id": 1299,
        "answer_sql": "SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.TG < 200 AND E.Symptoms IS NOT NULL;"
    },
    {
        "question_id": 1300,
        "answer_sql": "SELECT Examination.Diagnosis FROM Examination JOIN Patient ON Examination.ID = Patient.ID JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Laboratory.TG < 200 GROUP BY Examination.Diagnosis ORDER BY MAX(Laboratory.TG) DESC LIMIT 1;"
    },
    {
        "question_id": 1301,
        "answer_sql": "SELECT DISTINCT P.ID FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE E.Thrombosis = 0 AND L.CPK < 250;"
    },
    {
        "question_id": 1302,
        "answer_sql": "SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.CPK < 250 AND (E.KCT = '+' OR E.RVVT = '+' OR E.LAC = '+');"
    },
    {
        "question_id": 1303,
        "answer_sql": "SELECT MIN(P.Birthday) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.GLU > 180 GROUP BY P.Birthday ORDER BY P.Birthday DESC LIMIT 1;"
    },
    {
        "question_id": 1304,
        "answer_sql": "SELECT COUNT(DISTINCT P.ID) AS NoThrombosis FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.GLU < 180 AND E.Thrombosis = 0;"
    },
    {
        "question_id": 1305,
        "answer_sql": ""
    },
    {
        "question_id": 1306,
        "answer_sql": "SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID AND L.Date = (SELECT MAX(Date) FROM Laboratory WHERE ID = P.ID) WHERE E.Diagnosis = 'SLE' AND L.WBC BETWEEN 3.5 AND 9.0;"
    },
    {
        "question_id": 1307,
        "answer_sql": "SELECT DISTINCT P.ID FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.RBC <= 3.5 OR L.RBC >= 6.0 AND P.Admission = '-'"
    },
    {
        "question_id": 1308,
        "answer_sql": "SELECT COUNT(DISTINCT E.ID) AS CountOfPatientsWithOtherSymptoms FROM Examination E JOIN Patient P ON E.ID = P.ID JOIN Laboratory L ON E.ID = L.ID WHERE L.PLT > 100 AND L.PLT < 400 AND E.Diagnosis IS NOT NULL;"
    },
    {
        "question_id": 1309,
        "answer_sql": ""
    },
    {
        "question_id": 1310,
        "answer_sql": "SELECT AVG(PT) AS Average_PT FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.SEX = 'M' AND PT < 14;"
    },
    {
        "question_id": 1311,
        "answer_sql": "SELECT COUNT(DISTINCT P.ID) AS SevereThrombosisWithNormalPT FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE E.Thrombosis IN (2, 1) AND L.PT < 14;"
    },
    {
        "question_id": 1312,
        "answer_sql": "SELECT major_name FROM major WHERE major_id = (SELECT link_to_major FROM member WHERE first_name = 'Angela' AND last_name = 'Sanders');"
    },
    {
        "question_id": 1313,
        "answer_sql": "SELECT COUNT(DISTINCT T1.zip) AS college_of_engineering_students FROM member AS T1 JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'Engineering';"
    },
    {
        "question_id": 1314,
        "answer_sql": ""
    },
    {
        "question_id": 1315,
        "answer_sql": "SELECT COUNT(T1.member_id) AS attended_students FROM member AS T1 JOIN attendance AS T2 ON T1.member_id = T2.link_to_member JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'Women''s Soccer';"
    },
    {
        "question_id": 1316,
        "answer_sql": ""
    },
    {
        "question_id": 1317,
        "answer_sql": ""
    },
    {
        "question_id": 1318,
        "answer_sql": "SELECT event.event_name FROM event JOIN attendance ON event.event_id = attendance.link_to_event JOIN member ON attendance.link_to_member = member.member_id GROUP BY event.event_id ORDER BY COUNT(attendance.link_to_event) DESC LIMIT 1;"
    },
    {
        "question_id": 1319,
        "answer_sql": "SELECT major.college FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Vice President';"
    },
    {
        "question_id": 1320,
        "answer_sql": ""
    },
    {
        "question_id": 1321,
        "answer_sql": ""
    },
    {
        "question_id": 1322,
        "answer_sql": "SELECT COUNT(DISTINCT e.event_id) AS meeting_count FROM event e JOIN attendance a ON e.event_id = a.link_to_event GROUP BY e.event_id HAVING COUNT(a.link_to_event) > 10;"
    },
    {
        "question_id": 1323,
        "answer_sql": "SELECT event_name FROM event JOIN attendance ON event.event_id = attendance.link_to_event GROUP BY event.event_id HAVING COUNT(attendance.link_to_event) > 20;"
    },
    {
        "question_id": 1324,
        "answer_sql": ""
    },
    {
        "question_id": 1325,
        "answer_sql": "SELECT MAX(cost) AS most_expensive_item FROM expense WHERE expense_description LIKE '%club events%'"
    },
    {
        "question_id": 1326,
        "answer_sql": "SELECT COUNT(DISTINCT member.member_id) AS member_count FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Environmental Engineering';"
    },
    {
        "question_id": 1327,
        "answer_sql": "SELECT m.first_name, m.last_name FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE e.event_name = 'Laugh Out Loud';"
    },
    {
        "question_id": 1328,
        "answer_sql": "SELECT DISTINCT m.last_name FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE ma.major_name = 'Law and Constitutional Studies';"
    },
    {
        "question_id": 1329,
        "answer_sql": ""
    },
    {
        "question_id": 1330,
        "answer_sql": ""
    },
    {
        "question_id": 1331,
        "answer_sql": ""
    },
    {
        "question_id": 1332,
        "answer_sql": "SELECT SUM(budget.spent) AS total_spent FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE event_name = 'September Meeting' AND category = 'Food';"
    },
    {
        "question_id": 1333,
        "answer_sql": ""
    },
    {
        "question_id": 1334,
        "answer_sql": "SELECT first_name, last_name FROM member WHERE zip IN ( SELECT zip FROM zip_code WHERE state = 'Illinois' );"
    },
    {
        "question_id": 1335,
        "answer_sql": "SELECT SUM(budget.spent) AS total_spent FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE event_name = 'September Meeting' AND category = 'Advertisement';"
    },
    {
        "question_id": 1336,
        "answer_sql": ""
    },
    {
        "question_id": 1337,
        "answer_sql": "SELECT SUM(amount) AS total_budget FROM budget WHERE event_status = 'October Speaker';"
    },
    {
        "question_id": 1338,
        "answer_sql": ""
    },
    {
        "question_id": 1339,
        "answer_sql": "SELECT AVG(cost) AS average_cost FROM expense WHERE expense_date LIKE '2023-09%' OR expense_date LIKE '2023-10%' AND link_to_member = (SELECT member_id FROM member WHERE first_name = 'Elijah' AND last_name = 'Allen');"
    },
    {
        "question_id": 1340,
        "answer_sql": ""
    },
    {
        "question_id": 1341,
        "answer_sql": "SELECT location FROM event WHERE event_name = 'Spring Budget Review';"
    },
    {
        "question_id": 1342,
        "answer_sql": ""
    },
    {
        "question_id": 1343,
        "answer_sql": "SELECT MAX(budget.remaining) AS remaining FROM budget WHERE budget.category = 'Food';"
    },
    {
        "question_id": 1344,
        "answer_sql": "SELECT notes FROM income WHERE source = 'Fundraising' AND date_received = '2019-09-14';"
    },
    {
        "question_id": 1345,
        "answer_sql": "SELECT COUNT(DISTINCT major_id) AS major_count FROM major WHERE college = 'College of Humanities and Social Sciences';"
    },
    {
        "question_id": 1346,
        "answer_sql": "SELECT member.phone FROM member WHERE member.first_name = 'Carlo' AND member.last_name = 'Jacobs';"
    },
    {
        "question_id": 1347,
        "answer_sql": "SELECT T2.county FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Adela' AND T1.last_name = 'O''Gallagher';"
    },
    {
        "question_id": 1348,
        "answer_sql": "SELECT COUNT(budget_id) AS exceeded_budget_count FROM budget WHERE event_status = 'November Meeting' AND remaining < 0;"
    },
    {
        "question_id": 1349,
        "answer_sql": "SELECT SUM(amount) AS total_budget_amount FROM budget WHERE event_status = 'September Speaker';"
    },
    {
        "question_id": 1350,
        "answer_sql": ""
    },
    {
        "question_id": 1351,
        "answer_sql": "SELECT major_name FROM major WHERE major_id = (SELECT link_to_major FROM member WHERE first_name = 'Brent' AND last_name = 'Thomason');"
    },
    {
        "question_id": 1352,
        "answer_sql": "SELECT COUNT(T1.member_id) AS large_t_shirt_count FROM member AS T1 JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Human Development and Family Studies' AND T1.t_shirt_size = 'Large';"
    },
    {
        "question_id": 1353,
        "answer_sql": "SELECT DISTINCT T1.type FROM zip_code AS T1 INNER JOIN member AS T2 ON T1.zip_code = T2.zip WHERE T2.first_name = 'Christof' AND T2.last_name = 'Nielson';"
    },
    {
        "question_id": 1354,
        "answer_sql": ""
    },
    {
        "question_id": 1355,
        "answer_sql": "SELECT DISTINCT T1.state FROM zip_code AS T1 INNER JOIN member AS T2 ON T1.zip_code = T2.zip WHERE T2.first_name = 'Sacha' AND T2.last_name = 'Harrison';"
    },
    {
        "question_id": 1356,
        "answer_sql": "SELECT major.department FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'President';"
    },
    {
        "question_id": 1357,
        "answer_sql": "SELECT T1.date_received FROM income AS T1 JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.first_name = 'Connor' AND T2.last_name = 'Hilton' AND T1.source = 'Dues';"
    },
    {
        "question_id": 1358,
        "answer_sql": ""
    },
    {
        "question_id": 1359,
        "answer_sql": "SELECT SUM(CASE WHEN T2.event_name = 'Yearly Kickoff' THEN T1.amount ELSE 0 END) / SUM(CASE WHEN T2.event_name = 'October Meeting' THEN T1.amount ELSE 0 END) AS ratio FROM budget AS T1 JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement';"
    },
    {
        "question_id": 1360,
        "answer_sql": "SELECT (SUM(CASE WHEN T1.category = 'Parking' THEN T1.amount ELSE 0 END) / COUNT(T2.event_name)) * 100 AS percentage FROM budget AS T1 JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'November Speaker'"
    },
    {
        "question_id": 1361,
        "answer_sql": "SELECT SUM(cost) AS total_pizza_cost FROM expense WHERE expense_description = 'Pizza';"
    },
    {
        "question_id": 1362,
        "answer_sql": "SELECT COUNT(DISTINCT T2.city) AS city_count FROM member AS T1 JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.state = 'Virginia' AND T2.city LIKE '%Orange%';"
    },
    {
        "question_id": 1363,
        "answer_sql": "SELECT DISTINCT department FROM major WHERE college = 'College of Humanities and Social Sciences';"
    },
    {
        "question_id": 1364,
        "answer_sql": "SELECT T2.city, T2.county, T2.state FROM member AS T1 JOIN zip_code AS T2 ON T1.zip = T2.zip_code JOIN major AS T3 ON T1.link_to_major = T3.major_id WHERE T1.first_name = 'Amy' AND T1.last_name = 'Firth';"
    },
    {
        "question_id": 1365,
        "answer_sql": "SELECT expense.expense_description FROM expense JOIN budget ON expense.link_to_budget = budget.budget_id WHERE budget.remaining = (SELECT MIN(remaining) FROM budget) ORDER BY expense.expense_description;"
    },
    {
        "question_id": 1366,
        "answer_sql": "SELECT m.first_name, m.last_name FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE e.event_name = 'October Meeting';"
    },
    {
        "question_id": 1367,
        "answer_sql": "SELECT major.college FROM major JOIN member ON major.major_id = member.link_to_major GROUP BY major.college ORDER BY COUNT(member.member_id) DESC LIMIT 1;"
    },
    {
        "question_id": 1368,
        "answer_sql": "SELECT major.major_name FROM member JOIN major ON member.link_to_major = major.major_id JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.phone = '809-555-3360';"
    },
    {
        "question_id": 1369,
        "answer_sql": "SELECT event.event_name FROM event JOIN budget ON event.event_id = budget.link_to_event WHERE budget.amount = (SELECT MAX(amount) FROM budget);"
    },
    {
        "question_id": 1370,
        "answer_sql": "SELECT expense_description FROM expense WHERE link_to_member = (SELECT member_id FROM member WHERE position = 'Vice President')"
    },
    {
        "question_id": 1371,
        "answer_sql": ""
    },
    {
        "question_id": 1372,
        "answer_sql": "SELECT date_received FROM income WHERE link_to_member = (SELECT member_id FROM member WHERE first_name = 'Casey' AND last_name = 'Mason');"
    },
    {
        "question_id": 1373,
        "answer_sql": "SELECT COUNT(DISTINCT T1.zip) AS Maryland_Hometowns FROM member AS T1 JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.state = 'Maryland';"
    },
    {
        "question_id": 1374,
        "answer_sql": ""
    },
    {
        "question_id": 1375,
        "answer_sql": ""
    },
    {
        "question_id": 1376,
        "answer_sql": "SELECT event_name FROM event WHERE status = 'Closed' ORDER BY (SELECT spent FROM budget WHERE link_to_event = event.event_id) / (SELECT amount FROM budget WHERE link_to_event = event.event_id) DESC LIMIT 1;"
    },
    {
        "question_id": 1377,
        "answer_sql": "SELECT COUNT(DISTINCT member_id) AS president_count FROM member WHERE position = 'President';"
    },
    {
        "question_id": 1378,
        "answer_sql": "SELECT MAX(spent) AS highest_budget_spend FROM budget WHERE link_to_event IN ( SELECT event_id FROM event );"
    },
    {
        "question_id": 1379,
        "answer_sql": ""
    },
    {
        "question_id": 1380,
        "answer_sql": "SELECT SUM(spent) AS total_spent FROM budget WHERE category = 'Food';"
    },
    {
        "question_id": 1381,
        "answer_sql": "SELECT member.first_name, member.last_name FROM member JOIN attendance ON member.member_id = attendance.link_to_member GROUP BY member.first_name, member.last_name HAVING COUNT(attendance.link_to_event) > 7;"
    },
    {
        "question_id": 1382,
        "answer_sql": "SELECT m.first_name, m.last_name FROM member m JOIN major ma ON m.link_to_major = ma.major_id JOIN event e ON e.event_name = 'Community Theater' JOIN attendance a ON a.link_to_event = e.event_id AND a.link_to_member = m.member_id WHERE ma.major_name = 'Interior Design';"
    },
    {
        "question_id": 1383,
        "answer_sql": "SELECT member.first_name, member.last_name FROM member JOIN major ON member.link_to_major = major.major_id JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.city = 'Georgetown' AND zip_code.state = 'South Carolina';"
    },
    {
        "question_id": 1384,
        "answer_sql": "SELECT SUM(income.amount) AS total_income FROM income JOIN member ON income.link_to_member = member.member_id JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Grant' AND member.last_name = 'Gilmour';"
    },
    {
        "question_id": 1385,
        "answer_sql": "SELECT member.first_name, member.last_name FROM member JOIN income ON member.member_id = income.link_to_member WHERE income.amount > 40;"
    },
    {
        "question_id": 1386,
        "answer_sql": "SELECT SUM(cost) AS total_expense FROM expense WHERE expense_date LIKE '2023-%' AND expense_description LIKE '%Yearly Kickoff%'"
    },
    {
        "question_id": 1387,
        "answer_sql": ""
    },
    {
        "question_id": 1388,
        "answer_sql": ""
    },
    {
        "question_id": 1389,
        "answer_sql": "SELECT event.event_name FROM event WHERE event.event_name = (SELECT MIN(event.event_name) FROM event)"
    },
    {
        "question_id": 1390,
        "answer_sql": ""
    },
    {
        "question_id": 1391,
        "answer_sql": "SELECT SUM(CASE WHEN major_name = 'Finance' THEN 1 ELSE 0 END) / SUM(CASE WHEN major_name = 'Physics' THEN 1 ELSE 0 END) AS finance_to_physics_ratio FROM major"
    },
    {
        "question_id": 1392,
        "answer_sql": "SELECT source, MAX(amount) AS max_amount FROM income WHERE date_received BETWEEN '2019-09-01' AND '2019-09-30' GROUP BY source;"
    },
    {
        "question_id": 1393,
        "answer_sql": "SELECT first_name, last_name, email FROM member WHERE position = 'Secretary';"
    },
    {
        "question_id": 1394,
        "answer_sql": "SELECT COUNT(DISTINCT m.member_id) AS member_count FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE ma.major_name = 'Physics Teaching';"
    },
    {
        "question_id": 1395,
        "answer_sql": ""
    },
    {
        "question_id": 1396,
        "answer_sql": ""
    },
    {
        "question_id": 1397,
        "answer_sql": "SELECT AVG(budget.spent) AS average_food_spent FROM budget WHERE budget.event_status = 'Closed' AND budget.category = 'Food';"
    },
    {
        "question_id": 1398,
        "answer_sql": "SELECT event.event_name FROM event JOIN budget ON event.event_id = budget.link_to_event WHERE budget.category = 'Advertisement' ORDER BY budget.spent DESC LIMIT 1;"
    },
    {
        "question_id": 1399,
        "answer_sql": ""
    },
    {
        "question_id": 1400,
        "answer_sql": "SELECT CAST(SUM(CASE WHEN T1.type = 'Community Service' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.event_id) FROM event AS T1 WHERE T1.event_date BETWEEN '2019-01-01' AND '2019-12-31'"
    },
    {
        "question_id": 1401,
        "answer_sql": ""
    },
    {
        "question_id": 1402,
        "answer_sql": ""
    },
    {
        "question_id": 1403,
        "answer_sql": "SELECT e.event_name FROM event e JOIN budget b ON e.event_id = b.link_to_event JOIN expense es ON b.budget_id = es.link_to_budget WHERE e.status = 'Closed' AND es.cost > b.remaining ORDER BY es.cost - b.remaining ASC LIMIT 1;"
    },
    {
        "question_id": 1404,
        "answer_sql": ""
    },
    {
        "question_id": 1405,
        "answer_sql": "SELECT budget.category, budget.amount FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'April Speaker' ORDER BY budget.amount ASC;"
    },
    {
        "question_id": 1406,
        "answer_sql": "SELECT MAX(budget.remaining) AS max_budget, budget.category FROM budget WHERE budget.category = 'Food' GROUP BY budget.category;"
    },
    {
        "question_id": 1407,
        "answer_sql": "SELECT budget_id, category, amount FROM budget WHERE category = 'Advertisement' ORDER BY amount DESC LIMIT 3;"
    },
    {
        "question_id": 1408,
        "answer_sql": "SELECT SUM(cost) AS total_cost_spent_parking FROM expense WHERE expense_description = 'Parking';"
    },
    {
        "question_id": 1409,
        "answer_sql": "SELECT SUM(cost) AS total_expense FROM expense WHERE expense_date = '2019-08-20';"
    },
    {
        "question_id": 1410,
        "answer_sql": "SELECT member.first_name, member.last_name, SUM(expense.cost) AS total_cost FROM member JOIN expense ON member.member_id = expense.link_to_member WHERE member.member_id = 'rec4BLdZHS2Blfp4v' GROUP BY member.first_name, member.last_name;"
    },
    {
        "question_id": 1411,
        "answer_sql": "SELECT expense.expense_description FROM expense JOIN member ON expense.link_to_member = member.member_id JOIN major ON member.link_to_major = major.major_id JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.first_name = 'Sacha' AND member.last_name = 'Harrison';"
    },
    {
        "question_id": 1412,
        "answer_sql": "SELECT expense.expense_description FROM expense JOIN member ON expense.link_to_member = member.member_id WHERE member.t_shirt_size = 'X-Large';"
    },
    {
        "question_id": 1413,
        "answer_sql": "SELECT DISTINCT T1.zip FROM member AS T1 JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T2.cost < 50;"
    },
    {
        "question_id": 1414,
        "answer_sql": ""
    },
    {
        "question_id": 1415,
        "answer_sql": "SELECT member.position FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Business';"
    },
    {
        "question_id": 1416,
        "answer_sql": "SELECT COUNT(*) FROM member AS M JOIN major AS B ON M.link_to_major = B.major_id WHERE B.major_name = 'Business' AND M.t_shirt_size = 'Medium';"
    },
    {
        "question_id": 1417,
        "answer_sql": "SELECT event.type FROM event JOIN budget ON event.event_id = budget.link_to_event WHERE budget.remaining > 30;"
    },
    {
        "question_id": 1418,
        "answer_sql": "SELECT category FROM budget WHERE link_to_event = (SELECT event_id FROM event WHERE location = 'MU 215');"
    },
    {
        "question_id": 1419,
        "answer_sql": ""
    },
    {
        "question_id": 1420,
        "answer_sql": ""
    },
    {
        "question_id": 1421,
        "answer_sql": ""
    },
    {
        "question_id": 1422,
        "answer_sql": ""
    },
    {
        "question_id": 1423,
        "answer_sql": "SELECT COUNT(income_id) AS income_count FROM income WHERE amount = 50;"
    },
    {
        "question_id": 1424,
        "answer_sql": "SELECT COUNT(*) AS member_count FROM member WHERE t_shirt_size = 'X-Large';"
    },
    {
        "question_id": 1425,
        "answer_sql": ""
    },
    {
        "question_id": 1426,
        "answer_sql": "SELECT m.last_name, ma.major_name, ma.department, ma.college FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE ma.major_name = 'Environmental Engineering'"
    },
    {
        "question_id": 1427,
        "answer_sql": ""
    },
    {
        "question_id": 1428,
        "answer_sql": ""
    },
    {
        "question_id": 1429,
        "answer_sql": "SELECT e.event_name FROM event e JOIN attendance a ON e.event_id = a.link_to_event JOIN member m ON a.link_to_member = m.member_id WHERE m.position = 'Vice President' AND m.zip = (SELECT zip FROM zip_code WHERE location = '900 E. Washington St.')"
    },
    {
        "question_id": 1430,
        "answer_sql": "SELECT T1.last_name, T1.position FROM member AS T1 JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T2.expense_description = 'Pizza' AND T2.expense_date = '2019-09-10';"
    },
    {
        "question_id": 1431,
        "answer_sql": ""
    },
    {
        "question_id": 1432,
        "answer_sql": "SELECT CAST(COUNT(CASE WHEN amount = 50 THEN income_id ELSE NULL END) AS REAL) * 100 / COUNT(member_id) AS percentage FROM income JOIN member ON income.link_to_member = member.member_id WHERE member.t_shirt_size = 'Medium' AND member.position = 'Member';"
    },
    {
        "question_id": 1433,
        "answer_sql": ""
    },
    {
        "question_id": 1434,
        "answer_sql": ""
    },
    {
        "question_id": 1435,
        "answer_sql": "SELECT event_name FROM event WHERE status = 'Closed' AND type = 'Game' AND event_date BETWEEN '2019-03-15' AND '2020-03-20';"
    },
    {
        "question_id": 1436,
        "answer_sql": ""
    },
    {
        "question_id": 1437,
        "answer_sql": ""
    },
    {
        "question_id": 1438,
        "answer_sql": "SELECT major.college FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Katy' AND member.link_to_major = 'rec1N0upiVLy5esTO';"
    },
    {
        "question_id": 1439,
        "answer_sql": ""
    },
    {
        "question_id": 1440,
        "answer_sql": "SELECT DISTINCT m.email FROM member m JOIN expense e ON m.member_id = e.link_to_member WHERE e.cost > 20 AND e.expense_date BETWEEN '2019-09-10' AND '2019-11-19'"
    },
    {
        "question_id": 1441,
        "answer_sql": "SELECT COUNT(DISTINCT m.member_id) FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE ma.major_name = 'education' AND m.position = 'education';"
    },
    {
        "question_id": 1442,
        "answer_sql": "SELECT CAST(COUNT(CASE WHEN T2.remaining < 0 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.event_id) AS percentage FROM event AS T1 JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.remaining < 0;"
    },
    {
        "question_id": 1443,
        "answer_sql": "SELECT event.event_id, event.location, event.status FROM event WHERE event_date BETWEEN '2019-11-01' AND '2020-03-31';"
    },
    {
        "question_id": 1444,
        "answer_sql": "SELECT expense.expense_description FROM expense WHERE expense.cost > 50 GROUP BY expense.expense_description HAVING AVG(expense.cost) > 50;"
    },
    {
        "question_id": 1445,
        "answer_sql": "SELECT first_name, last_name FROM member WHERE t_shirt_size = 'X-Large';"
    },
    {
        "question_id": 1446,
        "answer_sql": "SELECT CAST(SUM(CASE WHEN type = 'PO Box' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(zip_code) FROM zip_code;"
    },
    {
        "question_id": 1447,
        "answer_sql": "SELECT event_name, location FROM event WHERE event_id IN ( SELECT link_to_event FROM budget WHERE remaining > 0 )"
    },
    {
        "question_id": 1448,
        "answer_sql": ""
    },
    {
        "question_id": 1449,
        "answer_sql": "SELECT member.first_name, member.last_name, major.major_name FROM member JOIN major ON member.link_to_major = major.major_id JOIN expense ON member.member_id = expense.link_to_member WHERE expense.cost > 100;"
    },
    {
        "question_id": 1450,
        "answer_sql": ""
    },
    {
        "question_id": 1451,
        "answer_sql": ""
    },
    {
        "question_id": 1452,
        "answer_sql": "SELECT AVG(T2.cost) AS average_amount FROM member AS T1 JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position != 'Member' GROUP BY T1.member_id;"
    },
    {
        "question_id": 1453,
        "answer_sql": ""
    },
    {
        "question_id": 1454,
        "answer_sql": ""
    },
    {
        "question_id": 1455,
        "answer_sql": "SELECT budget.budget_id, MAX(expense.cost) AS max_cost FROM expense JOIN budget ON expense.link_to_budget = budget.budget_id WHERE expense.expense_description = 'Water, chips, cookies' GROUP BY budget.budget_id ORDER BY max_cost DESC LIMIT 1;"
    },
    {
        "question_id": 1456,
        "answer_sql": "SELECT first_name, last_name, SUM(cost) AS total_spending FROM expense JOIN member ON expense.link_to_member = member.member_id GROUP BY first_name, last_name ORDER BY total_spending DESC LIMIT 5;"
    },
    {
        "question_id": 1457,
        "answer_sql": "SELECT m.first_name, m.last_name, m.phone FROM member m JOIN expense e ON m.member_id = e.link_to_member WHERE e.cost > (SELECT AVG(cost) FROM expense) ORDER BY m.first_name, m.last_name;"
    },
    {
        "question_id": 1458,
        "answer_sql": "SELECT SUM(CASE WHEN T2.state = 'Maine' THEN 1 ELSE 0 END) / COUNT(T2.state) AS Maine_percentage, SUM(CASE WHEN T2.state = 'Vermont' THEN 1 ELSE 0 END) / COUNT(T2.state) AS Vermont_percentage FROM member AS T1 JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.position = 'Member';"
    },
    {
        "question_id": 1459,
        "answer_sql": ""
    },
    {
        "question_id": 1460,
        "answer_sql": ""
    },
    {
        "question_id": 1461,
        "answer_sql": "SELECT member.last_name, member.phone FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Elementary Education';"
    },
    {
        "question_id": 1462,
        "answer_sql": "SELECT budget.category, budget.amount FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'January Speaker';"
    },
    {
        "question_id": 1463,
        "answer_sql": "SELECT event_name FROM event JOIN budget ON event.event_id = budget.link_to_event WHERE budget.category = 'Food';"
    },
    {
        "question_id": 1464,
        "answer_sql": ""
    },
    {
        "question_id": 1465,
        "answer_sql": ""
    },
    {
        "question_id": 1466,
        "answer_sql": "SELECT member.first_name, member.last_name, major.college FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Secretary';"
    },
    {
        "question_id": 1467,
        "answer_sql": "SELECT SUM(budget.spent) AS total_spent, event.event_name FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE budget.category = 'Speaker Gifts' GROUP BY event.event_name;"
    },
    {
        "question_id": 1468,
        "answer_sql": ""
    },
    {
        "question_id": 1469,
        "answer_sql": "SELECT member.first_name, member.last_name, member.position FROM member JOIN major ON member.link_to_major = major.major_id JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.city = 'Lincolnton' AND zip_code.state = 'North Carolina';"
    },
    {
        "question_id": 1470,
        "answer_sql": "SELECT COUNT(T2.GasStationID) AS PremiumGasStations FROM customers AS T1 JOIN transactions_1k AS T3 ON T1.CustomerID = T3.CustomerID JOIN gasstations AS T2 ON T2.GasStationID = T3.GasStationID WHERE T1.Currency = 'CZE' AND T2.Segment = 'Premium';"
    },
    {
        "question_id": 1471,
        "answer_sql": "SELECT COUNT(CASE WHEN Currency = 'EUR' THEN 1 ELSE NULL END) / COUNT(CASE WHEN Currency = 'CZK' THEN 1 ELSE NULL END) AS Ratio FROM customers;"
    },
    {
        "question_id": 1472,
        "answer_sql": "SELECT c.CustomerID, c.Segment, c.Currency, ym.Consumption FROM customers c JOIN yearmonth ym ON c.CustomerID = ym.CustomerID WHERE ym.Date BETWEEN '201201' AND '201212' ORDER BY ym.Consumption ASC LIMIT 1;"
    },
    {
        "question_id": 1473,
        "answer_sql": "SELECT AVG(yearmonth.Consumption) / 12 AS AverageMonthlyConsumption FROM customers JOIN yearmonth ON customers.CustomerID = yearmonth.CustomerID WHERE customers.Segment = 'SME' AND yearmonth.Date BETWEEN '201301' AND '201312'"
    },
    {
        "question_id": 1474,
        "answer_sql": ""
    },
    {
        "question_id": 1475,
        "answer_sql": "SELECT COUNT(DISTINCT T1.CustomerID) AS NumberOfCustomers FROM customers AS T1 JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date BETWEEN '201201' AND '201212' AND T2.Consumption < 30000;"
    },
    {
        "question_id": 1476,
        "answer_sql": "SELECT SUM(CASE WHEN customers.Currency = 'CZK' THEN transactions_1k.Amount ELSE 0 END) - SUM(CASE WHEN customers.Currency = 'EUR' THEN transactions_1k.Amount ELSE 0 END) AS DifferenceInConsumption FROM customers JOIN transactions_1k ON customers.CustomerID = transactions_1k.CustomerID WHERE transactions_1k.Date BETWEEN '201201' AND '201212'"
    },
    {
        "question_id": 1477,
        "answer_sql": "SELECT Date, SUM(Consumption) AS TotalConsumption FROM yearmonth JOIN customers ON yearmonth.CustomerID = customers.CustomerID WHERE customers.Currency = 'EUR' GROUP BY Date ORDER BY TotalConsumption DESC LIMIT 1;"
    },
    {
        "question_id": 1478,
        "answer_sql": "SELECT Segment FROM customers WHERE CustomerID = ( SELECT CustomerID FROM yearmonth GROUP BY CustomerID ORDER BY SUM(Consumption) ASC LIMIT 1 )"
    },
    {
        "question_id": 1479,
        "answer_sql": "SELECT SUBSTR(Date, 1, 4) AS Year, SUM(Consumption) AS Total_Consumption FROM yearmonth JOIN customers ON yearmonth.CustomerID = customers.CustomerID WHERE customers.Currency = 'CZK' GROUP BY Year ORDER BY Total_Consumption DESC LIMIT 1;"
    },
    {
        "question_id": 1480,
        "answer_sql": "SELECT ym.Date, ym.Consumption FROM yearmonth ym JOIN customers c ON ym.CustomerID = c.CustomerID WHERE c.Segment = 'SME' AND ym.Date LIKE '2013%' ORDER BY ym.Consumption DESC LIMIT 1;"
    },
    {
        "question_id": 1481,
        "answer_sql": ""
    },
    {
        "question_id": 1482,
        "answer_sql": "SELECT c.Segment, SUM(CASE WHEN STRFTIME('%Y', t.Date) = '2012' THEN t.Amount ELSE 0 END) AS Consumption_2012, SUM(CASE WHEN STRFTIME('%Y', t.Date) = '2013' THEN t.Amount ELSE 0 END) AS Consumption_2013, (SUM(CASE WHEN STRFTIME('%Y', t.Date) = '2013' THEN t.Amount ELSE 0 END) - SUM(CASE WHEN STRFTIME('%Y', t.Date) = '2012' THEN t.Amount ELSE 0 END)) / SUM(CASE WHEN STRFTIME('%Y', t.Date) = '2013' THEN t.Amount ELSE 0 END) * 100 AS Percentage_Increase FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID WHERE STRFTIME('%Y', t.Date) IN ('2012', '2013') GROUP BY c.Segment ORDER BY Percentage_Increase DESC, Consumption_2013 DESC LIMIT 1;"
    },
    {
        "question_id": 1483,
        "answer_sql": "SELECT SUM(T1.Amount) AS TotalConsumption FROM transactions_1k AS T1 JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.CustomerID = 6 AND T1.Date BETWEEN '201308' AND '201311';"
    },
    {
        "question_id": 1484,
        "answer_sql": "SELECT COUNT(CASE WHEN Country = 'Czech Republic' THEN GasStationID ELSE NULL END) - COUNT(CASE WHEN Country = 'Slovakia' THEN GasStationID ELSE NULL END) AS MoreDiscountGasStations FROM gasstations WHERE Segment = 'Discount';"
    },
    {
        "question_id": 1485,
        "answer_sql": ""
    },
    {
        "question_id": 1486,
        "answer_sql": "SELECT SUM(CASE WHEN customers.Currency = 'CZK' THEN 1 ELSE 0 END) - SUM(CASE WHEN customers.Currency = 'EUR' THEN 1 ELSE 0 END) AS Difference FROM customers JOIN transactions_1k ON customers.CustomerID = transactions_1k.CustomerID JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID JOIN products ON transactions_1k.ProductID = products.ProductID JOIN yearmonth ON customers.CustomerID = yearmonth.CustomerID WHERE customers.Segment = 'SME';"
    },
    {
        "question_id": 1487,
        "answer_sql": ""
    },
    {
        "question_id": 1488,
        "answer_sql": "SELECT c.Segment, SUM(t.Amount) AS TotalConsumption FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID WHERE c.Segment = 'KAM' GROUP BY c.Segment ORDER BY TotalConsumption DESC LIMIT 1;"
    },
    {
        "question_id": 1489,
        "answer_sql": "SELECT SUM(T2.Consumption) AS TotalConsumption FROM customers AS T1 JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'KAM' AND T2.Date LIKE '201305%'"
    },
    {
        "question_id": 1490,
        "answer_sql": "SELECT (SUM(CASE WHEN T1.Segment = 'LAM' AND T2.Amount > 46.73 THEN 1 ELSE 0 END) * 100.0 / COUNT(T1.CustomerID)) AS Percentage FROM customers AS T1 JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM'"
    },
    {
        "question_id": 1491,
        "answer_sql": "SELECT g.Country, COUNT(*) AS ValueForMoneyGasStations FROM gasstations g JOIN transactions_1k t ON g.GasStationID = t.GasStationID WHERE t.Price / t.Amount >= 1 GROUP BY g.Country ORDER BY ValueForMoneyGasStations DESC;"
    },
    {
        "question_id": 1492,
        "answer_sql": "SELECT (SUM(CASE WHEN T1.Currency = 'EUR' THEN 1 ELSE 0 END) * 100.0 / COUNT(T1.CustomerID)) AS Percentage FROM customers AS T1 JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'KAM';"
    },
    {
        "question_id": 1493,
        "answer_sql": "SELECT CAST(COUNT(CASE WHEN Consumption > 528.3 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(CASE WHEN Consumption > 528.3 THEN 1 ELSE NULL END) AS Percentage FROM yearmonth WHERE Date LIKE '201202%';"
    },
    {
        "question_id": 1494,
        "answer_sql": ""
    },
    {
        "question_id": 1495,
        "answer_sql": "SELECT c.CustomerID FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID JOIN yearmonth y ON c.CustomerID = y.CustomerID AND y.Date = '201309' GROUP BY c.CustomerID ORDER BY SUM(t.Amount) DESC LIMIT 1;"
    },
    {
        "question_id": 1496,
        "answer_sql": "SELECT c.Segment FROM customers c JOIN yearmonth ym ON c.CustomerID = ym.CustomerID JOIN transactions_1k t ON c.CustomerID = t.CustomerID WHERE ym.Date = '201309' GROUP BY c.Segment ORDER BY SUM(t.Amount) ASC LIMIT 1;"
    },
    {
        "question_id": 1497,
        "answer_sql": "SELECT c.Segment, SUM(t.Amount) AS TotalConsumption FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID JOIN yearmonth ym ON c.CustomerID = ym.CustomerID AND ym.Date = '201206' GROUP BY c.Segment ORDER BY TotalConsumption ASC LIMIT 1;"
    },
    {
        "question_id": 1498,
        "answer_sql": "SELECT SUBSTR(yearmonth.Date, 1, 4) AS Year, MAX(yearmonth.Consumption) AS Highest_Consumption FROM yearmonth WHERE SUBSTR(yearmonth.Date, 1, 4) = '2012' GROUP BY SUBSTR(yearmonth.Date, 1, 4);"
    },
    {
        "question_id": 1499,
        "answer_sql": ""
    },
    {
        "question_id": 1500,
        "answer_sql": "SELECT T2.Description FROM transactions_1k AS T1 JOIN customers AS T3 ON T1.CustomerID = T3.CustomerID JOIN yearmonth AS T4 ON T3.CustomerID = T4.CustomerID AND T4.Date LIKE '201309%' JOIN products AS T2 ON T1.ProductID = T2.ProductID;"
    },
    {
        "question_id": 1501,
        "answer_sql": ""
    },
    {
        "question_id": 1502,
        "answer_sql": "SELECT DISTINCT g.ChainID FROM gasstations g JOIN transactions_1k t ON g.GasStationID = t.GasStationID JOIN customers c ON t.CustomerID = c.CustomerID WHERE c.Currency = 'EUR';"
    },
    {
        "question_id": 1503,
        "answer_sql": "SELECT T2.Description FROM transactions_1k AS T1 JOIN products AS T2 ON T1.ProductID = T2.ProductID JOIN customers AS T3 ON T1.CustomerID = T3.CustomerID WHERE T1.Price = (SELECT Price FROM products WHERE Description = T2.Description AND Currency = 'EUR')"
    },
    {
        "question_id": 1504,
        "answer_sql": "SELECT AVG(T1.Price) AS AverageTotalPrice FROM transactions_1k AS T1 JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID AND T1.Date = T2.Date WHERE T2.Date LIKE '2012-01%'"
    },
    {
        "question_id": 1505,
        "answer_sql": "SELECT COUNT(DISTINCT T1.CustomerID) AS NumberOfCustomers FROM customers AS T1 JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID JOIN sqlite_sequence AS T3 ON T1.CustomerID = T3.name WHERE T2.Price = 'EUR' AND T2.Amount > 1000;"
    },
    {
        "question_id": 1506,
        "answer_sql": ""
    },
    {
        "question_id": 1507,
        "answer_sql": "SELECT T1.Date, T1.Time FROM transactions_1k AS T1 JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.ChainID = 11"
    },
    {
        "question_id": 1508,
        "answer_sql": "SELECT COUNT(T1.TransactionID) AS NumberOfTransactions FROM transactions_1k AS T1 JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE' AND T1.Price > 1000;"
    },
    {
        "question_id": 1509,
        "answer_sql": "SELECT COUNT(T1.TransactionID) AS NumberOfTransactions FROM transactions_1k AS T1 JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID JOIN customers AS T3 ON T1.CustomerID = T3.CustomerID WHERE T2.Country = 'CZE' AND T1.Date > '2012-01-01';"
    },
    {
        "question_id": 1510,
        "answer_sql": "SELECT AVG(t1.Price) AS AverageTotalPrice FROM transactions_1k t1 JOIN gasstations g ON t1.GasStationID = g.GasStationID WHERE g.Country = 'CZE';"
    },
    {
        "question_id": 1511,
        "answer_sql": "SELECT AVG(T1.Price) AS AverageTotalPrice FROM transactions_1k AS T1 JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'EUR';"
    },
    {
        "question_id": 1512,
        "answer_sql": "SELECT c.CustomerID, c.Segment, c.Currency, SUM(t.Amount) AS TotalAmount FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID WHERE t.Date = '2012-08-25' GROUP BY c.CustomerID, c.Segment, c.Currency ORDER BY TotalAmount DESC LIMIT 1;"
    },
    {
        "question_id": 1513,
        "answer_sql": ""
    },
    {
        "question_id": 1514,
        "answer_sql": "SELECT customers.Currency FROM customers JOIN transactions_1k ON customers.CustomerID = transactions_1k.CustomerID JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE transactions_1k.Date = '2012-08-24' AND transactions_1k.Time = '16:25:00'"
    },
    {
        "question_id": 1515,
        "answer_sql": "SELECT Segment FROM customers AS T1 JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '2012-08-23' AND T2.time = '21:20:00';"
    },
    {
        "question_id": 1516,
        "answer_sql": "SELECT COUNT(T1.TransactionID) AS NumberOfTransactions FROM transactions_1k AS T1 JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date LIKE '2012-08-26%' AND T1.Date LIKE '%13:00:00' AND T1.Price = (SELECT Price FROM products WHERE Description = 'EUR');"
    },
    {
        "question_id": 1517,
        "answer_sql": "SELECT Segment FROM customers WHERE CustomerID = ( SELECT CustomerID FROM ( SELECT CustomerID, MIN(Date) AS MinDate FROM yearmonth GROUP BY CustomerID ) AS MinDatePerCustomer );"
    },
    {
        "question_id": 1518,
        "answer_sql": ""
    },
    {
        "question_id": 1519,
        "answer_sql": "SELECT DISTINCT t1.ProductID FROM transactions_1k AS t1 JOIN customers AS c ON t1.CustomerID = c.CustomerID WHERE t1.Date = '2012-08-23' AND t1.Time = '21:20:00';"
    },
    {
        "question_id": 1520,
        "answer_sql": ""
    },
    {
        "question_id": 1521,
        "answer_sql": "SELECT COUNT(T1.TransactionID) AS TransactionCount FROM transactions_1k AS T1 JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID JOIN gasstations AS T3 ON T1.GasStationID = T3.GasStationID WHERE T3.Country = 'CZE' AND T1.Date BETWEEN '2012-08-26' AND '2012-08-26 23:59:59' AND T1.Time BETWEEN '08:00:00' AND '09:00:00';"
    },
    {
        "question_id": 1522,
        "answer_sql": ""
    },
    {
        "question_id": 1523,
        "answer_sql": ""
    },
    {
        "question_id": 1524,
        "answer_sql": ""
    },
    {
        "question_id": 1525,
        "answer_sql": "SELECT (COUNT(CASE WHEN T2.Currency = 'EUR' THEN 1 ELSE NULL END) * 100.0 / COUNT(T2.CustomerID)) AS Percentage FROM transactions_1k AS T1 JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '2012-08-25'"
    },
    {
        "question_id": 1526,
        "answer_sql": ""
    },
    {
        "question_id": 1527,
        "answer_sql": "SELECT g.GasStationID, g.Country, SUM(t.Amount) AS TotalRevenue FROM gasstations g JOIN transactions_1k t ON g.GasStationID = t.GasStationID GROUP BY g.GasStationID, g.Country ORDER BY TotalRevenue DESC LIMIT 1;"
    },
    {
        "question_id": 1528,
        "answer_sql": "SELECT (SUM(CASE WHEN customers.Segment = 'SVK' THEN 1 ELSE 0 END) * 100 / COUNT(CASE WHEN customers.Segment = 'SVK' THEN 1 ELSE NULL END)) AS premium_percentage FROM customers JOIN transactions_1k ON customers.CustomerID = transactions_1k.CustomerID WHERE customers.Segment = 'SVK'"
    },
    {
        "question_id": 1529,
        "answer_sql": ""
    },
    {
        "question_id": 1530,
        "answer_sql": "SELECT p.Description FROM products p JOIN ( SELECT ProductID, SUM(Amount) as TotalAmount FROM transactions_1k GROUP BY ProductID ORDER BY TotalAmount DESC LIMIT 5 ) t ON p.ProductID = t.ProductID;"
    },
    {
        "question_id": 1531,
        "answer_sql": "SELECT c.CustomerID, c.Segment, c.Currency, AVG(t.Price / t.Amount) AS AveragePricePerItem FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID JOIN products p ON t.ProductID = p.ProductID GROUP BY c.CustomerID, c.Segment, c.Currency ORDER BY AveragePricePerItem DESC LIMIT 1;"
    },
    {
        "question_id": 1532,
        "answer_sql": "SELECT g.Country FROM gasstations g JOIN transactions_1k t ON g.GasStationID = t.GasStationID WHERE t.ProductID = 2 ORDER BY t.Price DESC LIMIT 1;"
    },
    {
        "question_id": 1533,
        "answer_sql": ""
    }
]