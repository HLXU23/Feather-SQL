[{"question_id": 0, "answer_sql": ["SELECT MAX(`Percent (%) Eligible Free (K-12)`) AS HighestEligibleFreeRate FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.County = 'Alameda';"]}, {"question_id": 1, "answer_sql": []}, {"question_id": 2, "answer_sql": ["SELECT T1.Zip FROM schools AS T1 JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`Charter School (Y/N)` = 1 AND T1.County = 'Fresno County Office of Education';"]}, {"question_id": 3, "answer_sql": []}, {"question_id": 4, "answer_sql": ["SELECT T1.Phone FROM schools AS T1 JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`Charter School (Y/N)` = 1 AND T1.OpenDate > '2000-01-01'"]}, {"question_id": 5, "answer_sql": []}, {"question_id": 6, "answer_sql": ["SELECT s.CDSCode, s.School, s.Street, s.City, s.State, s.Latitude, s.Longitude FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode JOIN satscores sa ON s.CDSCode = sa.cds WHERE sa.enroll12 > 500 AND (s.Magnet = 1 OR s.GSserved = 'Magnet')"]}, {"question_id": 7, "answer_sql": ["SELECT T1.Phone FROM schools AS T1 JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T2.AvgScrMath > 1500 ORDER BY T2.NumTstTakr DESC LIMIT 1;"]}, {"question_id": 8, "answer_sql": []}, {"question_id": 9, "answer_sql": []}, {"question_id": 10, "answer_sql": []}, {"question_id": 11, "answer_sql": []}, {"question_id": 12, "answer_sql": []}, {"question_id": 13, "answer_sql": ["SELECT T1.CDSCode, T1.Phone FROM schools AS T1 JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T2.rtype = 'SAT' ORDER BY T2.AvgScrMath + T2.AvgScrWrite + T2.AvgScrRead DESC LIMIT 3;", "SELECT T1.CDSCode, T1.Phone FROM schools AS T1 JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T2.AvgScrRead > 0 AND T2.AvgScrMath > 0 AND T2.AvgScrWrite > 0 ORDER BY T2.AvgScrRead + T2.AvgScrMath + T2.AvgScrWrite DESC LIMIT 3;"]}, {"question_id": 14, "answer_sql": []}, {"question_id": 15, "answer_sql": ["SELECT s.CDSCode, s.District, AVG(sc.AvgScrRead) AS AvgScoreRead FROM schools s JOIN satscores sc ON s.CDSCode = sc.cds JOIN schools_admins sa ON s.CDSCode = sa.CDSCode WHERE s.StatusType = 'Active' GROUP BY s.CDSCode, s.District ORDER BY AvgScoreRead DESC LIMIT 1;"]}, {"question_id": 16, "answer_sql": ["SELECT COUNT(schools.CDSCode) AS num_schools FROM schools JOIN frpm ON schools.CDSCode = frpm.CDSCode JOIN satscores ON schools.CDSCode = satscores.cds WHERE frpm.`County Code` = 'Alameda' AND satscores.NumTstTakr < 100;"]}, {"question_id": 17, "answer_sql": []}, {"question_id": 18, "answer_sql": []}, {"question_id": 19, "answer_sql": []}, {"question_id": 20, "answer_sql": []}, {"question_id": 21, "answer_sql": ["SELECT COUNT(*) FROM schools AS S JOIN frpm AS FR ON S.CDSCode = FR.CDSCode JOIN satscores AS SAT ON S.CDSCode = SAT.cds WHERE S.County = 'Los Angeles' AND SAT.AvgScrRead > 500 AND SAT.AvgScrMath < 700;", "SELECT COUNT(DISTINCT cds) AS num_schools FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE satscores.enroll12 > 500 AND satscores.enroll12 < 700;", "SELECT COUNT(DISTINCT cds) AS num_schools FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE satscores.enroll12 > 500 AND satscores.enroll12 < 700 AND schools.County = 'Los Angeles';"]}, {"question_id": 22, "answer_sql": ["SELECT s.CDSCode, s.School, COUNT(s.CDSCode) AS NumTstTakr FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds WHERE s.County = 'Contra Costa' GROUP BY s.CDSCode, s.School ORDER BY NumTstTakr DESC LIMIT 1;"]}, {"question_id": 23, "answer_sql": []}, {"question_id": 24, "answer_sql": []}, {"question_id": 25, "answer_sql": ["SELECT FundingType FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE AVGScrMath > 400 GROUP BY FundingType ORDER BY FundingType;"]}, {"question_id": 26, "answer_sql": []}, {"question_id": 27, "answer_sql": []}, {"question_id": 28, "answer_sql": []}, {"question_id": 29, "answer_sql": []}, {"question_id": 30, "answer_sql": []}, {"question_id": 31, "answer_sql": []}, {"question_id": 32, "answer_sql": []}, {"question_id": 33, "answer_sql": ["SELECT s.Website, s.School FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds WHERE ss.AvgScrRead >= 1900 AND ss.AvgScrRead <= 2000 AND ss.AvgScrMath >= 1900 AND ss.AvgScrMath <= 2000 AND ss.AvgScrWrite >= 1900 AND ss.AvgScrWrite <= 2000"]}, {"question_id": 34, "answer_sql": ["SELECT (satscores.AvgScrRead + satscores.AvgScrMath + satscores.AvgScrWrite) / 3 AS FreeRate FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE schools.School = 'Kacey Gibson';"]}, {"question_id": 35, "answer_sql": []}, {"question_id": 36, "answer_sql": []}, {"question_id": 37, "answer_sql": []}, {"question_id": 38, "answer_sql": ["SELECT Website FROM schools WHERE CDSCode IN ( SELECT cds FROM satscores WHERE rtype = 'A' AND enroll12 BETWEEN 2000 AND 3000 ) AND County = 'Los Angeles County';"]}, {"question_id": 39, "answer_sql": []}, {"question_id": 40, "answer_sql": []}, {"question_id": 41, "answer_sql": []}, {"question_id": 42, "answer_sql": []}, {"question_id": 43, "answer_sql": ["SELECT satscores.cds, AVG(satscores.AvgScrMath) AS AvgMathScore, schools.County FROM satscores JOIN schools ON satscores.cds = schools.CDSCode GROUP BY satscores.cds, schools.County ORDER BY AvgMathScore ASC LIMIT 1;", "SELECT satscores.cds, satscores.sname, satscores.dname, satscores.cname, satscores.enroll12, satscores.AvgScrMath, satscores.AvgScrRead, satscores.AvgScrWrite, schools.County FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE satscores.rtype = 'SAT' ORDER BY satscores.AvgScrMath ASC LIMIT 1;"]}, {"question_id": 44, "answer_sql": ["SELECT satscores.cds, satscores.sname, satscores.dname, satscores.cname, satscores.enroll12, satscores.NumTstTakr, satscores.AvgScrWrite FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE satscores.NumTstTakr >= 1500 AND satscores.AvgScrWrite IS NOT NULL ORDER BY satscores.NumTstTakr DESC LIMIT 1;", "SELECT satscores.sname, schools.City FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE satscores.AvgScrWrite >= 1500 ORDER BY satscores.NumTstTakr DESC LIMIT 1;", "SELECT s.City, AVG(ss.AvgScrWrite) AS AvgWriteScore FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode JOIN satscores ss ON s.CDSCode = ss.cds WHERE ss.NumTstTakr >= 1500 GROUP BY s.City ORDER BY AvgWriteScore DESC LIMIT 1;", "SELECT satscores.cds, satscores.sname, satscores.dname, satscores.cname, satscores.enroll12, satscores.NumTstTakr, satscores.AvgScrWrite, schools.City FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE satscores.NumTstTakr >= 1500 AND satscores.AvgScrWrite IS NOT NULL ORDER BY satscores.NumTstTakr DESC LIMIT 1;"]}, {"question_id": 45, "answer_sql": ["SELECT s.CDSCode, AVG(satscores.AvgScrWrite) AS AvgWriteScore FROM schools s JOIN schools_admins sa ON s.CDSCode = sa.CDSCode JOIN satscores ON s.CDSCode = satscores.cds WHERE sa.SchoolCode = 'Ricci Ulrich' GROUP BY s.CDSCode;"]}, {"question_id": 46, "answer_sql": []}, {"question_id": 47, "answer_sql": []}, {"question_id": 48, "answer_sql": ["SELECT COUNT(CASE WHEN DOC = 52 THEN CDSCode ELSE NULL END) / COUNT(CASE WHEN DOC = 54 THEN CDSCode ELSE NULL END) AS Ratio FROM schools WHERE DOC IN (52, 54)", "SELECT COUNT(CASE WHEN DOC = 52 THEN CDSCode ELSE NULL END) / COUNT(CASE WHEN DOC = 54 THEN CDSCode ELSE NULL END) AS Ratio FROM schools WHERE DOC = 52"]}, {"question_id": 49, "answer_sql": []}, {"question_id": 50, "answer_sql": ["SELECT s.Street, s.School FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds WHERE ss.rtype = 'SAT' AND ss.sname = 'Math' ORDER BY ss.AvgScrMath DESC LIMIT 1;"]}, {"question_id": 51, "answer_sql": ["SELECT s1.Street, s1.School FROM schools s1 JOIN satscores s2 ON s1.CDSCode = s2.cds WHERE s2.AvgScrRead = (SELECT MIN(AvgScrRead) FROM satscores) ORDER BY s1.Street;"]}, {"question_id": 52, "answer_sql": ["SELECT COUNT(DISTINCT s.CDSCode) AS TotalSchools FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds WHERE ss.AvgScrRead + ss.AvgScrMath + ss.AvgScrWrite >= 1500 AND s.City = 'Lakeport';"]}, {"question_id": 53, "answer_sql": ["SELECT COUNT(T2.cds) AS test_takers FROM schools AS T1 JOIN satscores AS T2 ON T1.CDSCode = T2.cds JOIN schools_admins AS T3 ON T1.CDSCode = T3.CDSCode WHERE T3.City = 'Fresno';"]}, {"question_id": 54, "answer_sql": ["SELECT s.CDSCode, s.Street, s.City, s.State, sa.AdmEmail1, sa.LastUpdate FROM schools s JOIN schools_admins sa ON s.CDSCode = sa.CDSCode WHERE sa.SchoolCode = 'Avetik Atoian';"]}, {"question_id": 55, "answer_sql": ["SELECT COUNT(CASE WHEN T1.State = 'CA' THEN T1.CDSCode ELSE NULL END) / COUNT(CASE WHEN T1.State = 'CA' THEN T1.CDSCode ELSE NULL END) AS Ratio FROM schools AS T1 JOIN schools_admins AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.State = 'CA'", "SELECT COUNT(CASE WHEN T1.State = 'CA' THEN T1.CDSCode ELSE NULL END) / COUNT(CASE WHEN T1.State = 'CA' THEN T2.CDSCode ELSE NULL END) AS Ratio FROM schools AS T1 JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.State = 'CA'"]}, {"question_id": 56, "answer_sql": ["SELECT COUNT(*) AS Active_Schools FROM schools WHERE State = 'CA' AND OpenDate IS NOT NULL AND ClosedDate IS NULL;", "SELECT COUNT(*) AS Active_Schools FROM schools WHERE State = 'CA' AND ClosedDate IS NULL;", "SELECT COUNT(*) AS Active_Schools FROM schools WHERE State = 'CA' AND (AdmFName1 IS NOT NULL OR AdmLName1 IS NOT NULL OR AdmEmail1 IS NOT NULL OR AdmFName2 IS NOT NULL OR AdmLName2 IS NOT NULL OR AdmEmail2 IS NOT NULL OR AdmFName3 IS NOT NULL OR AdmLName3 IS NOT NULL OR AdmEmail3 IS NOT NULL) AND LastUpdate IS NOT NULL;"]}, {"question_id": 57, "answer_sql": ["SELECT T1.Phone, T1.Ext FROM schools AS T1 JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T2.AvgScrWrite = (SELECT MAX(AvgScrWrite) FROM satscores) ORDER BY T2.AvgScrWrite DESC LIMIT 1;"]}, {"question_id": 58, "answer_sql": ["SELECT AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3 FROM schools WHERE Zip = '95203-3704';"]}, {"question_id": 59, "answer_sql": ["SELECT T2.Website FROM schools_admins AS T1 JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.AdmFName1 = 'Mike Larson' OR T1.AdmFName1 = 'Dante Alvarez';"]}, {"question_id": 60, "answer_sql": ["SELECT T1.Website FROM schools AS T1 JOIN schools_admins AS T2 ON T1.CDSCode = T2.CDSCode JOIN schools AS T3 ON T2.SchoolCode = T3.School WHERE T1.Virtual = 'P' AND T1.Charter = 1 AND T3.County = 'San Joaquin';"]}, {"question_id": 61, "answer_sql": ["SELECT COUNT(*) AS chartered_schools FROM schools WHERE DOC = '52' AND Charter = 1 AND City = 'Hickman';"]}, {"question_id": 62, "answer_sql": []}, {"question_id": 63, "answer_sql": ["SELECT sa.AdmFName1, sa.AdmLName1, s.School, s.City FROM schools_admins sa JOIN schools s ON sa.CDSCode = s.CDSCode WHERE s.Charter = 1 AND s.CharterNum = '00D2';"]}, {"question_id": 64, "answer_sql": []}, {"question_id": 65, "answer_sql": ["SELECT CAST(COUNT(CASE WHEN FundingType = 'Local' THEN CDSCode ELSE NULL END) AS REAL) * 100 / COUNT(CDSCode) AS Ratio FROM schools WHERE County = 'Santa Clara'", "SELECT (COUNT(CASE WHEN FundingType = 'Local' THEN CDSCode ELSE NULL END) / COUNT(CASE WHEN FundingType IN ('Charter', 'Other') THEN CDSCode ELSE NULL END)) * 100 AS Ratio FROM schools WHERE County = 'Santa Clara';"]}, {"question_id": 66, "answer_sql": ["SELECT COUNT(DISTINCT T1.CDSCode) AS DirectlyFundedSchoolsOpened FROM schools AS T1 JOIN schools_admins AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.FundingType = 'Directly Funded' AND T1.County = 'Stanislaus' AND T1.OpenDate BETWEEN '2000-01-01' AND '2005-12-31';"]}, {"question_id": 67, "answer_sql": ["SELECT SUM(CASE WHEN T1.CDSCode IN ('00000000-0000-0000-0000-000000000000') THEN 1 ELSE 0 END) AS TotalClosure FROM schools AS T1 JOIN schools_admins AS T2 ON T1.CDSCode = T2.CDSCode JOIN frpm AS T3 ON T1.CDSCode = T3.CDSCode WHERE T1.City = 'San Francisco' AND T3.`Academic Year` = '1989';"]}, {"question_id": 68, "answer_sql": ["SELECT County FROM schools WHERE SOC = 11 AND OpenDate BETWEEN '1980-01-01' AND '1989-12-31' GROUP BY County ORDER BY COUNT(*) DESC LIMIT 1;"]}, {"question_id": 69, "answer_sql": ["SELECT DISTINCT T1.CDSCode FROM schools AS T1 JOIN schools_admins AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.SOC = '31';"]}, {"question_id": 70, "answer_sql": ["SELECT COUNT(DISTINCT CASE WHEN T1.StatusType = 'Active' THEN T1.CDSCode WHEN T1.StatusType = 'Closed' THEN T1.CDSCode ELSE NULL END) AS Active_Closed_Districts FROM schools AS T1 JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode JOIN satscores AS T3 ON T1.CDSCode = T3.cds WHERE T1.County = 'Alpine';", "SELECT COUNT(DISTINCT CASE WHEN T1.StatusType = 'Active' THEN T1.CDSCode ELSE NULL END) AS Active_Districts, COUNT(DISTINCT CASE WHEN T1.StatusType = 'Closed' THEN T1.CDSCode ELSE NULL END) AS Closed_Districts FROM schools AS T1 JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.County = 'Alpine';", "SELECT COUNT(DISTINCT CASE WHEN T1.StatusType = 'Active' THEN T1.CDSCode ELSE NULL END) AS ActiveDistricts, COUNT(DISTINCT CASE WHEN T1.StatusType = 'Closed' THEN T1.CDSCode ELSE NULL END) AS ClosedDistricts FROM schools AS T1 JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode JOIN satscores AS T3 ON T1.CDSCode = T3.cds WHERE T1.County = 'Alpine';", "SELECT COUNT(DISTINCT CASE WHEN T1.StatusType = 'Active' THEN T1.CDSCode WHEN T1.StatusType = 'Closed' THEN T1.CDSCode ELSE NULL END) AS ActiveAndClosedDistrictCommunityDaySchools FROM schools AS T1 JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.County = 'Alpine';"]}, {"question_id": 71, "answer_sql": []}, {"question_id": 72, "answer_sql": []}, {"question_id": 73, "answer_sql": []}, {"question_id": 74, "answer_sql": []}, {"question_id": 75, "answer_sql": []}, {"question_id": 76, "answer_sql": []}, {"question_id": 77, "answer_sql": []}, {"question_id": 78, "answer_sql": ["SELECT `Low Grade`, `High Grade` FROM frpm WHERE `County Name` = 'Adelanto' GROUP BY `Low Grade`, `High Grade` ORDER BY COUNT(*) DESC LIMIT 1;"]}, {"question_id": 79, "answer_sql": ["SELECT County, COUNT(*) AS SchoolCount FROM schools WHERE Virtual = 'F' GROUP BY County ORDER BY SchoolCount DESC LIMIT 1;", "SELECT County FROM schools WHERE Virtual = 'F' GROUP BY County ORDER BY COUNT(*) DESC LIMIT 1;"]}, {"question_id": 80, "answer_sql": []}, {"question_id": 81, "answer_sql": []}, {"question_id": 82, "answer_sql": ["SELECT 'Low Grade' AS GradeSpan, 'High Grade' AS GradeSpan FROM schools WHERE Longitude = (SELECT MAX(Longitude) FROM schools)", "SELECT 'Low Grade' AS GradeSpan FROM schools WHERE Longitude = ( SELECT MAX(Longitude) FROM schools );"]}, {"question_id": 83, "answer_sql": ["SELECT COUNT(DISTINCT s1.CDSCode) AS schools_with_magnet_program, COUNT(DISTINCT s2.CDSCode) AS schools_with_grade_span, s2.City FROM schools s1 JOIN schools s2 ON s1.CDSCode = s2.CDSCode WHERE s1.Magnet = 1 AND s1.GSserved = 'K-8' GROUP BY s2.City;", "SELECT COUNT(DISTINCT s.CDSCode) AS schools_with_magnet_program, COUNT(DISTINCT s.CDSCode) AS schools_with_grade_span, COUNT(DISTINCT s.CDSCode) AS schools_with_grade_span_per_city FROM schools s JOIN schools_admins sa ON s.CDSCode = sa.CDSCode WHERE s.Magnet = 1 AND s.GSserved = 'K-8' GROUP BY s.CDSCode;", "SELECT COUNT(DISTINCT s.CDSCode) AS schools_with_magnet_program, COUNT(DISTINCT s.CDSCode) AS cities_with_kindergarten_to_8th_grade_span, COUNT(DISTINCT CASE WHEN s.Magnet = 1 THEN s.CDSCode ELSE NULL END) AS schools_serving_kindergarten_to_8th_grade_span FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE s.Magnet = 1 GROUP BY s.CDSCode;", "SELECT COUNT(DISTINCT s.CDSCode) AS schools_with_magnet_program, COUNT(DISTINCT s.CDSCode) AS cities_with_k_to_8_span, COUNT(DISTINCT CASE WHEN s.Magnet = 1 THEN s.CDSCode ELSE NULL END) AS schools_serving_k_to_8_span FROM schools s JOIN schools_admins sa ON s.CDSCode = sa.CDSCode WHERE s.Magnet = 1 AND s.GSserved = 'K-8';"]}, {"question_id": 84, "answer_sql": []}, {"question_id": 85, "answer_sql": []}, {"question_id": 86, "answer_sql": []}, {"question_id": 87, "answer_sql": ["SELECT AdmEmail1 FROM schools WHERE County = 'San Bernardino' AND District = 'San Bernardino City Unified' AND AdmFName1 IS NOT NULL AND AdmLName1 IS NOT NULL AND SOC = '62' AND DOC = '54' AND LastUpdate BETWEEN '2009-01-01' AND '2010-12-31' AND CDSCode IN ( SELECT CDSCode FROM schools_admins WHERE SchoolName = ( SELECT SchoolName FROM schools WHERE County = 'San Bernardino' AND District = 'San Bernardino City Unified' ) );"]}, {"question_id": 88, "answer_sql": []}, {"question_id": 89, "answer_sql": ["SELECT COUNT(DISTINCT a.account_id) FROM account a JOIN trans t ON a.account_id = t.account_id JOIN district d ON a.district_id = d.district_id WHERE d.A3 = 'POPLATEK PO OBRATU' AND d.A4 = 'East Bohemia';"]}, {"question_id": 90, "answer_sql": ["SELECT COUNT(account_id) AS eligible_accounts FROM account WHERE district_id IN ( SELECT district_id FROM district WHERE A3 = 'Prague' ) AND account_id IN ( SELECT account_id FROM loan )"]}, {"question_id": 91, "answer_sql": []}, {"question_id": 92, "answer_sql": ["SELECT COUNT(district_id) AS district_count FROM district WHERE A11 > 6000 AND A11 < 10000 AND A11 > (SELECT AVG(A11) FROM district WHERE A11 IS NOT NULL AND A11 > 6000 AND A11 < 10000) AND A11 < (SELECT AVG(A11) FROM district WHERE A11 IS NOT NULL AND A11 > 6000 AND A11 < 10000);", "SELECT COUNT(T1.district_id) FROM district AS T1 JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.gender = 'F' GROUP BY T1.district_id HAVING AVG(T1.A11) > 6000 AND AVG(T1.A11) < 10000;", "SELECT COUNT(district_id) FROM district WHERE A11 > 6000 AND A11 < 10000 AND A11 > (SELECT AVG(A11) FROM district WHERE A11 > 6000 AND A11 < 10000)"]}, {"question_id": 93, "answer_sql": ["SELECT COUNT(T1.client_id) AS male_customers_count FROM client AS T1 JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A3 = 'North Bohemia' GROUP BY T1.client_id HAVING AVG(T1.birth_date) > 8000;"]}, {"question_id": 94, "answer_sql": ["SELECT T1.account_id, T1.district_id, T1.frequency, T1.date, T2.gender, T2.birth_date, T2.district_id, T3.A11 AS average_salary FROM account AS T1 JOIN client AS T2 ON T1.district_id = T2.district_id JOIN district AS T3 ON T1.district_id = T3.district_id WHERE T2.gender = 'F' ORDER BY T2.birth_date DESC LIMIT 1"]}, {"question_id": 95, "answer_sql": []}, {"question_id": 96, "answer_sql": ["SELECT COUNT(DISTINCT T1.client_id) AS owner_count FROM client AS T1 JOIN account AS T2 ON T1.district_id = T2.district_id JOIN trans AS T3 ON T1.client_id = T3.account_id WHERE T2.frequency = 'POPLATEK TYDNE' AND T1.gender = 'Owner';"]}, {"question_id": 97, "answer_sql": []}, {"question_id": 98, "answer_sql": ["SELECT a.account_id, a.date, a.frequency, a.date AS loan_date, l.amount FROM account a JOIN loan l ON a.account_id = l.account_id WHERE l.date LIKE '1997%' ORDER BY l.amount ASC, a.date ASC LIMIT 1;"]}, {"question_id": 99, "answer_sql": ["SELECT a.account_id, MAX(l.amount) AS max_approved_amount FROM account a JOIN loan l ON a.account_id = l.account_id WHERE l.duration > 12 AND a.date BETWEEN '1993-01-01' AND '1993-12-31' GROUP BY a.account_id ORDER BY max_approved_amount DESC LIMIT 1;", "SELECT a.account_id, MAX(l.amount) AS max_amount FROM account a JOIN loan l ON a.account_id = l.account_id WHERE l.duration > 12 AND a.date >= '1993-01-01' GROUP BY a.account_id ORDER BY max_amount DESC LIMIT 1;"]}, {"question_id": 100, "answer_sql": ["SELECT COUNT(DISTINCT c.client_id) FROM client c JOIN district d ON c.district_id = d.district_id WHERE c.gender = 'F' AND c.birth_date < '1950-01-01' AND d.A2 = 'Slokolov';"]}, {"question_id": 101, "answer_sql": ["SELECT DISTINCT a.account_id, a.date FROM account a WHERE a.date >= '1995-01-01' ORDER BY a.date ASC LIMIT 1;"]}, {"question_id": 102, "answer_sql": []}, {"question_id": 103, "answer_sql": []}, {"question_id": 104, "answer_sql": ["SELECT T1.date, T1.account_id FROM trans AS T1 JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.amount = 840 AND T1.date = '1998-10-14';", "SELECT DISTINCT a.date AS account_open_date FROM account a JOIN trans t ON a.account_id = t.account_id WHERE t.amount = 840 AND t.date = '1998-10-14';", "SELECT DISTINCT T1.date AS account_opened FROM trans AS T1 JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.amount = 840 AND T1.date = '1998-10-14';", "SELECT DISTINCT T1.date, T2.district_id FROM trans AS T1 JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.amount = 840 AND T1.date = '1998-10-14';"]}, {"question_id": 105, "answer_sql": []}, {"question_id": 106, "answer_sql": ["SELECT MAX(t1.amount) AS max_transaction_amount FROM trans t1 JOIN account a ON t1.account_id = a.account_id JOIN client c ON a.district_id = c.district_id JOIN card k ON c.client_id = k.disp_id WHERE k.issued LIKE '1996-10-21'"]}, {"question_id": 107, "answer_sql": ["SELECT DISTINCT c.gender FROM client c JOIN account a ON c.district_id = a.district_id JOIN trans t ON a.account_id = t.account_id JOIN district d ON a.district_id = d.district_id WHERE d.A11 = ( SELECT MAX(A11) FROM district ) ORDER BY c.birth_date ASC LIMIT 1;"]}, {"question_id": 108, "answer_sql": []}, {"question_id": 109, "answer_sql": ["SELECT COUNT(T1.client_id) AS num_clients FROM client AS T1 JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Jesenik' AND T1.gender = 'F';", "SELECT COUNT(DISTINCT c.client_id) AS num_clients FROM client c JOIN district d ON c.district_id = d.district_id JOIN trans t ON c.client_id = t.account_id WHERE d.A2 = 'Jesenik' AND c.gender = 'F';"]}, {"question_id": 110, "answer_sql": []}, {"question_id": 111, "answer_sql": []}, {"question_id": 112, "answer_sql": []}, {"question_id": 113, "answer_sql": ["SELECT T1.birth_date FROM client AS T1 JOIN loan AS T2 ON T1.client_id = T2.account_id WHERE T2.amount = 98832 AND T2.date LIKE '1996-01-03';"]}, {"question_id": 114, "answer_sql": []}, {"question_id": 115, "answer_sql": ["SELECT CAST(COUNT(CASE WHEN T1.gender = 'M' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.client_id) AS percentage FROM client AS T1 JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'South Bohemia'"]}, {"question_id": 116, "answer_sql": ["SELECT c.client_id, (SUM(CASE WHEN t.type = 'credit' THEN t.amount ELSE 0 END) - SUM(CASE WHEN t.type = 'debit' THEN t.amount ELSE 0 END)) / SUM(CASE WHEN t.type = 'debit' THEN t.amount ELSE 0 END) * 100 AS increase_rate FROM client c JOIN account a ON c.district_id = a.district_id JOIN loan l ON a.account_id = l.account_id JOIN trans t ON a.account_id = t.account_id WHERE l.date >= '1993-07-05' AND l.date <= '1998-12-27' GROUP BY c.client_id ORDER BY increase_rate DESC;", "SELECT c.client_id, (SUM(CASE WHEN t.type = 'credit' THEN t.amount ELSE 0 END) - SUM(CASE WHEN t.type = 'debit' THEN t.amount ELSE 0 END)) / SUM(CASE WHEN t.type = 'debit' THEN t.amount ELSE 0 END) * 100 AS increase_rate FROM client c JOIN account a ON c.district_id = a.district_id JOIN trans t ON a.account_id = t.account_id WHERE t.date BETWEEN '1993-07-05' AND '1993-07-05' GROUP BY c.client_id ORDER BY increase_rate DESC;", "SELECT c.client_id, (SUM(CASE WHEN t.type = 'credit' THEN t.amount ELSE 0 END) - SUM(CASE WHEN t.type = 'debit' THEN t.amount ELSE 0 END)) / SUM(CASE WHEN t.type = 'debit' THEN t.amount ELSE 0 END) * 100 AS increase_rate FROM client c JOIN account a ON c.district_id = a.district_id JOIN trans t ON a.account_id = t.account_id WHERE a.date BETWEEN '1993-03-22' AND '1998-12-27' AND t.date BETWEEN '1993-07-05' AND '1993-07-05' GROUP BY c.client_id ORDER BY increase_rate DESC;", "SELECT c.client_id, (SUM(CASE WHEN t.type = 'deposit' THEN t.amount ELSE -t.amount END) - SUM(CASE WHEN t.type = 'withdrawal' THEN t.amount ELSE -t.amount END)) * 100 / SUM(CASE WHEN t.type = 'withdrawal' THEN t.amount ELSE -t.amount END) AS increase_rate FROM client c JOIN account a ON c.district_id = a.district_id JOIN trans t ON a.account_id = t.account_id WHERE t.date BETWEEN '1993-07-05' AND '1993-07-05' GROUP BY c.client_id ORDER BY increase_rate DESC;", "SELECT c.client_id, (SUM(CASE WHEN t.type = 'credit' THEN t.amount ELSE 0 END) - SUM(CASE WHEN t.type = 'debit' THEN t.amount ELSE 0 END)) / SUM(CASE WHEN t.type = 'debit' THEN t.amount ELSE 0 END) * 100.0 AS increase_rate FROM client c JOIN account a ON c.district_id = a.district_id JOIN loan l ON a.account_id = l.account_id JOIN trans t ON a.account_id = t.account_id WHERE l.date = '1993-07-05' GROUP BY c.client_id ORDER BY increase_rate DESC LIMIT 1;", "SELECT c.client_id, (SUM(CASE WHEN t.type = 'credit' THEN t.amount ELSE 0 END) - SUM(CASE WHEN t.type = 'debit' THEN t.amount ELSE 0 END)) / SUM(CASE WHEN t.type = 'debit' THEN t.amount ELSE 0 END) * 100 AS increase_rate FROM client c JOIN account a ON c.district_id = a.district_id JOIN trans t ON a.account_id = t.account_id WHERE t.date BETWEEN '1993-03-22' AND '1998-12-27' AND t.type IN ('credit', 'debit') GROUP BY c.client_id HAVING COUNT(*) = 1;"]}, {"question_id": 117, "answer_sql": ["SELECT SUM(CASE WHEN T1.status = 'A' THEN T1.amount ELSE 0 END) / SUM(T1.amount) * 100 AS percentage FROM loan AS T1 JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T2.district_id = (SELECT district_id FROM client WHERE client_id = (SELECT client_id FROM account WHERE account_id = T1.account_id))"]}, {"question_id": 118, "answer_sql": ["SELECT CASE WHEN SUM(CASE WHEN status = 'C' THEN 1 ELSE 0 END) * 100.0 / COUNT(*) > 0 THEN (SUM(CASE WHEN status = 'C' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) ELSE 0 END AS percentage FROM loan WHERE amount < 100000;", "SELECT (SUM(CASE WHEN T1.amount < 100000 THEN 1 ELSE 0 END) * 100) / COUNT(T1.amount) AS percentage FROM loan AS T1 JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.status = 'C';"]}, {"question_id": 119, "answer_sql": ["SELECT a.account_id, d.A2, d.A3 FROM account a JOIN district d ON a.district_id = d.district_id WHERE a.date BETWEEN '1993-01-01' AND '1993-12-31' AND a.frequency = 'Statement' AND EXISTS ( SELECT 1 FROM trans t WHERE t.account_id = a.account_id AND t.date > '1993-01-01' );", "SELECT a.account_id, d.A2, d.A3 FROM account a JOIN district d ON a.district_id = d.district_id WHERE a.date BETWEEN '1993-01-01' AND '1993-12-31' AND a.frequency = 'POPLATEK PO OBRATU' AND EXISTS ( SELECT 1 FROM trans t WHERE t.account_id = a.account_id AND t.date > '1993-01-01' );", "SELECT a.account_id, d.A2, d.A3 FROM account a JOIN district d ON a.district_id = d.district_id WHERE a.date >= '1993-12-31' AND a.frequency = 'POPLATEK PO OBRATU'"]}, {"question_id": 120, "answer_sql": ["SELECT account_id FROM account WHERE date BETWEEN '1995-01-01' AND '2000-12-31' AND district_id IN ( SELECT district_id FROM district WHERE A3 LIKE 'east%' )", "SELECT DISTINCT T1.account_id FROM account AS T1 JOIN client AS T2 ON T1.district_id = T2.district_id JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T3.A2 = 'east Bohemia' AND T1.date BETWEEN '1995-01-01' AND '2000-12-31';"]}, {"question_id": 121, "answer_sql": ["SELECT account_id, date FROM account WHERE district_id = (SELECT district_id FROM district WHERE A2 = 'Prachatice')"]}, {"question_id": 122, "answer_sql": []}, {"question_id": 123, "answer_sql": []}, {"question_id": 124, "answer_sql": ["SELECT loan.loan_id, district.A3, AVG(district.A11) AS average_salary FROM loan JOIN account ON loan.account_id = account.account_id JOIN district ON account.district_id = district.district_id GROUP BY loan.loan_id, district.A3 HAVING COUNT(loan.loan_id) > 0", "SELECT l.loan_id, d.A3 AS district, AVG(d.A11) AS average_salary FROM loan l JOIN account a ON l.account_id = a.account_id JOIN district d ON a.district_id = d.district_id GROUP BY l.loan_id, d.A3 HAVING l.duration = 60;"]}, {"question_id": 125, "answer_sql": ["SELECT d.A2, d.A3, (SELECT A13 FROM district WHERE district_id = d.district_id) - (SELECT A12 FROM district WHERE district_id = d.district_id) AS unemployment_increment FROM district d JOIN loan l ON d.district_id = l.account_id WHERE l.status = 'D'"]}, {"question_id": 126, "answer_sql": ["SELECT (COUNT(DISTINCT CASE WHEN T1.district_id = 1 THEN T1.account_id ELSE NULL END) / COUNT(T1.account_id)) * 100 FROM account AS T1 JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Decin' AND T1.date BETWEEN '1993-01-01' AND '1993-12-31';"]}, {"question_id": 127, "answer_sql": ["SELECT DISTINCT T1.account_id FROM trans AS T1 JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T2.frequency = 'MESICNE';"]}, {"question_id": 128, "answer_sql": ["SELECT district_id, COUNT(*) AS female_account_holders FROM client WHERE gender = 'F' GROUP BY district_id ORDER BY female_account_holders DESC LIMIT 10;"]}, {"question_id": 129, "answer_sql": ["SELECT d.A2 AS district_name, SUM(t.amount) AS total_withdrawals FROM trans t JOIN account a ON t.account_id = a.account_id JOIN district d ON a.district_id = d.district_id WHERE t.type = 'VYDAJ' AND t.date LIKE '1996-01%' AND t.type != 'KREDITE' GROUP BY d.A2 ORDER BY total_withdrawals DESC LIMIT 10;", "SELECT d.A2 AS district_name, COUNT(t.trans_id) AS withdrawals FROM trans t JOIN account a ON t.account_id = a.account_id JOIN district d ON a.district_id = d.district_id WHERE t.type = 'VYDAJ' AND t.date LIKE '1996-01%' AND t.type != 'KREDITE' GROUP BY d.A2 ORDER BY withdrawals DESC LIMIT 10;", "SELECT d.A2 AS district_name, COUNT(*) AS withdrawal_count FROM trans t JOIN account a ON t.account_id = a.account_id JOIN district d ON a.district_id = d.district_id WHERE t.type = 'VYDAJ' AND t.date LIKE '1996-01%' AND a.frequency = 'M' GROUP BY d.A2 ORDER BY withdrawal_count DESC LIMIT 10;"]}, {"question_id": 130, "answer_sql": ["SELECT COUNT(DISTINCT T1.account_id) AS no_cards FROM account AS T1 JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'South Bohemia' AND T1.frequency = 'Monthly' AND T1.date >= '2020-01-01' AND T1.date <= '2020-12-31';"]}, {"question_id": 131, "answer_sql": ["SELECT d.A3, MAX(T1.amount) FROM district d JOIN account a ON d.district_id = a.district_id JOIN loan T1 ON a.account_id = T1.account_id WHERE T1.status = 'C' GROUP BY d.A3 ORDER BY MAX(T1.amount) DESC LIMIT 1;", "SELECT d.A3, MAX(T1.amount) FROM district d JOIN account a ON d.district_id = a.district_id JOIN loan T1 ON a.account_id = T1.account_id GROUP BY d.A3 HAVING MAX(T1.status) = 'C';", "SELECT d.A3, MAX(T1.status) FROM district d JOIN account a ON d.district_id = a.district_id JOIN loan T1 ON a.account_id = T1.account_id GROUP BY d.A3 ORDER BY MAX(T1.status) DESC LIMIT 1;"]}, {"question_id": 132, "answer_sql": []}, {"question_id": 133, "answer_sql": ["SELECT DISTINCT d.A2, d.A3, d.A4, d.A5, d.A6, d.A7, d.A8, d.A9, d.A10, d.A11, d.A12, d.A13 FROM district d JOIN account a ON d.district_id = a.district_id JOIN trans t ON a.account_id = t.account_id WHERE t.date >= '1996-01-01' AND t.date < '1997-01-01' ORDER BY d.A13 DESC;"]}, {"question_id": 134, "answer_sql": ["SELECT COUNT(account_id) AS account_count FROM account WHERE strftime('%Y', date) = '1996' GROUP BY district_id ORDER BY account_count DESC LIMIT 1;"]}, {"question_id": 135, "answer_sql": ["SELECT COUNT(DISTINCT t1.account_id) AS account_count FROM trans t1 JOIN account t2 ON t1.account_id = t2.account_id JOIN card t3 ON t2.account_id = t3.card_id WHERE t1.type = 'VYBER KARTOU' AND t1.operation = 'POPLATEK MESICNE' AND t1.balance < 0;"]}, {"question_id": 136, "answer_sql": []}, {"question_id": 137, "answer_sql": []}, {"question_id": 138, "answer_sql": ["SELECT COUNT(T1.client_id) AS male_clients FROM client AS T1 JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.date BETWEEN '1995-01-01' AND '1995-12-31' GROUP BY T1.client_id ORDER BY COUNT(T1.client_id) DESC LIMIT 1;", "SELECT COUNT(T1.client_id) AS male_clients FROM client AS T1 JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.date BETWEEN '1995-01-01' AND '1995-12-31' GROUP BY T1.client_id ORDER BY T1.client_id DESC LIMIT 1;", "SELECT COUNT(T1.client_id) AS male_clients FROM client AS T1 JOIN account AS T2 ON T1.district_id = T2.district_id JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T1.gender = 'M' AND T3.date BETWEEN '1995-01-01' AND '1995-12-31' GROUP BY T1.client_id ORDER BY T1.client_id DESC LIMIT 1;", "SELECT COUNT(T1.client_id) AS male_clients FROM client AS T1 JOIN account AS T2 ON T1.district_id = T2.district_id JOIN trans AS T3 ON T1.client_id = T3.account_id WHERE T1.gender = 'M' AND T3.date BETWEEN '1995-01-01' AND '1995-12-31' GROUP BY T1.client_id HAVING COUNT(T1.client_id) = ( SELECT MAX(no_of_crimes) FROM ( SELECT COUNT(*) AS no_of_crimes FROM account AS T4 JOIN trans AS T5 ON T4.account_id = T5.account_id WHERE T4.district_id = ( SELECT district_id FROM account AS T6 WHERE T6.account_id = ( SELECT account_id FROM trans AS T7 WHERE T7.date BETWEEN '1995-01-01' AND '1995-12-31' ) ) GROUP BY T4.district_id ) );", "SELECT COUNT(T1.client_id) AS male_clients FROM client AS T1 JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.date BETWEEN '1995-01-01' AND '1995-12-31'"]}, {"question_id": 139, "answer_sql": ["SELECT COUNT(T1.disp_id) AS high_level_cards FROM disp AS T1 JOIN card AS T2 ON T1.disp_id = T2.disp_id WHERE T1.type = 'gold' AND T1.type = 'disponent';"]}, {"question_id": 140, "answer_sql": ["SELECT COUNT(account_id) AS account_count FROM account WHERE district_id = (SELECT district_id FROM district WHERE A2 = 'Pisek');"]}, {"question_id": 141, "answer_sql": []}, {"question_id": 142, "answer_sql": ["SELECT account_id FROM trans WHERE type = 'ORDER' AND operation = 'HOUSEHOLD PAYMENT' AND k_symbol = 'SIPO';"]}, {"question_id": 143, "answer_sql": []}, {"question_id": 144, "answer_sql": ["SELECT AVG(amount) AS average_amount FROM trans WHERE type = 'VYBER KARTOU' AND date BETWEEN '2021-01-01' AND '2021-12-31' GROUP BY account_id;", "SELECT AVG(amount) AS average_amount FROM trans WHERE type = 'VYBER KARTOU' AND date >= '2021-01-01' AND date < '2022-01-01';"]}, {"question_id": 145, "answer_sql": []}, {"question_id": 146, "answer_sql": ["SELECT DISTINCT T1.client_id, T1.gender FROM client AS T1 JOIN account AS T2 ON T1.district_id = T2.district_id JOIN trans AS T3 ON T2.account_id = T3.account_id JOIN loan AS T4 ON T2.account_id = T4.account_id JOIN card AS T5 ON T5.disp_id = T3.account_id WHERE T1.gender = 'F' AND T5.type = 'C'", "SELECT DISTINCT T1.client_id, T1.gender FROM client AS T1 JOIN account AS T2 ON T1.district_id = T2.district_id JOIN trans AS T3 ON T2.account_id = T3.account_id JOIN loan AS T4 ON T2.account_id = T4.account_id JOIN card AS T5 ON T5.disp_id = T3.account_id WHERE T1.gender = 'F'"]}, {"question_id": 147, "answer_sql": []}, {"question_id": 148, "answer_sql": []}, {"question_id": 149, "answer_sql": []}, {"question_id": 150, "answer_sql": ["SELECT COUNT(T1.account_id) AS account_count FROM trans AS T1 JOIN account AS T2 ON T1.account_id = T2.account_id JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T3.A3 = 'North Bohemia' AND T1.type = 'partner'"]}, {"question_id": 151, "answer_sql": ["SELECT DISTINCT T1.A2, T1.A3, T1.A4, T1.A5, T1.A6, T1.A7, T1.A8, T1.A9, T1.A10, T1.A11, T1.A12, T1.A13, T1.A14, T1.A15, T1.A16 FROM district AS T1 JOIN account AS T2 ON T1.district_id = T2.district_id JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.type = 'VYDAJ'", "SELECT DISTINCT T1.A2 FROM district AS T1 JOIN account AS T2 ON T1.district_id = T2.district_id JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.type = 'VYDAJ';"]}, {"question_id": 152, "answer_sql": []}, {"question_id": 153, "answer_sql": ["SELECT COUNT(*) FROM card WHERE type = 'CLASSIC' AND disp_id IN ( SELECT disp_id FROM disp WHERE account_id IN ( SELECT account_id FROM account WHERE frequency = 'OWNER' ) )"]}, {"question_id": 154, "answer_sql": ["SELECT COUNT(*) AS male_clients FROM client WHERE gender = 'M' AND district_id = (SELECT district_id FROM district WHERE A2 = 'Hl.m. Praha');"]}, {"question_id": 155, "answer_sql": ["SELECT (COUNT(CASE WHEN type = 'gold' AND issued < '1998-01-01' THEN 1 ELSE NULL END) / COUNT(CASE WHEN type = 'gold' THEN 1 ELSE NULL END)) * 100 AS gold_card_percentage FROM card;"]}, {"question_id": 156, "answer_sql": ["SELECT T1.client_id, T1.gender, T1.birth_date, T1.district_id FROM client AS T1 JOIN account AS T2 ON T1.district_id = T2.district_id JOIN loan AS T3 ON T2.account_id = T3.account_id WHERE T3.amount = (SELECT MAX(amount) FROM loan) ORDER BY T1.district_id ASC LIMIT 1;", "SELECT T1.client_id, T1.gender, T1.birth_date, T1.district_id FROM client AS T1 JOIN account AS T2 ON T1.district_id = T2.district_id JOIN loan AS T3 ON T2.account_id = T3.account_id WHERE T3.amount = (SELECT MAX(amount) FROM loan) ORDER BY T1.client_id ASC LIMIT 1;"]}, {"question_id": 157, "answer_sql": ["SELECT COUNT(*) AS committed_crimes FROM trans JOIN account ON trans.account_id = account.account_id WHERE trans.date BETWEEN '1995-01-01' AND '1995-12-31' AND account.account_id = 532;"]}, {"question_id": 158, "answer_sql": []}, {"question_id": 159, "answer_sql": ["SELECT t1.date, t1.type, t1.operation, t1.amount, t1.balance, t1.k_symbol, t1.bank, t1.account FROM trans AS t1 JOIN account AS t2 ON t1.account_id = t2.account_id JOIN client AS t3 ON t2.district_id = t3.district_id WHERE t1.type = 'VYBER' AND t3.client_id = 3356;"]}, {"question_id": 160, "answer_sql": ["SELECT COUNT(T1.account_id) AS loan_count FROM account AS T1 JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T1.frequency = 'POPLATEK TYDNE' GROUP BY T1.account_id HAVING SUM(T2.amount) < 200000;", "SELECT COUNT(*) FROM account a JOIN loan l ON a.account_id = l.account_id WHERE a.frequency = 'POPLATEK TYDNE' AND l.amount < 200000;"]}, {"question_id": 161, "answer_sql": ["SELECT T2.type FROM client AS T1 JOIN disp AS T2 ON T1.client_id = T2.client_id JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T1.client_id = 13539;"]}, {"question_id": 162, "answer_sql": []}, {"question_id": 163, "answer_sql": ["SELECT d.A2, d.A3, d.A4, COUNT(*) AS account_count FROM account a JOIN loan l ON a.account_id = l.account_id JOIN trans t ON a.account_id = t.account_id JOIN district d ON a.district_id = d.district_id WHERE l.status = 'A' GROUP BY d.district_id ORDER BY account_count DESC LIMIT 1;", "SELECT d.A2, d.A3, d.A4, COUNT(*) AS account_count FROM account a JOIN loan l ON a.account_id = l.account_id JOIN district d ON a.district_id = d.district_id WHERE l.status = 'A' GROUP BY d.district_id ORDER BY account_count DESC LIMIT 1;", "SELECT d.A2, d.A3, d.A4, d.A5, d.A6, d.A7, d.A8, d.A9, d.A10, d.A11, d.A12, d.A13, d.A14, d.A15, d.A16 FROM district d JOIN account a ON d.district_id = a.district_id JOIN loan l ON a.account_id = l.account_id WHERE l.status = 'A' GROUP BY d.district_id ORDER BY COUNT(l.account_id) DESC LIMIT 1;"]}, {"question_id": 164, "answer_sql": ["SELECT T1.account_id, T1.date, T1.type, T1.operation, T1.amount, T1.balance, T1.k_symbol, T1.bank, T1.account FROM trans AS T1 JOIN `order` AS T2 ON T1.account_id = T2.account_id WHERE T2.order_id = 32423;", "SELECT `order`.order_id FROM `order` WHERE `order`.order_id = 32423;", "SELECT `order`.order_id, `order`.account_id, `order`.bank_to, `order`.account_to, `order`.amount, `order`.k_symbol FROM `order` WHERE `order`.order_id = 32423;"]}, {"question_id": 165, "answer_sql": []}, {"question_id": 166, "answer_sql": ["SELECT COUNT(account_id) AS account_count FROM account WHERE district_id = (SELECT district_id FROM district WHERE A2 = 'Jesenik');"]}, {"question_id": 167, "answer_sql": []}, {"question_id": 168, "answer_sql": ["SELECT COUNT(CASE WHEN T1.gender = 'F' THEN 1 ELSE NULL END) / COUNT(T1.client_id) * 100 FROM client AS T1 JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A11 > 10000"]}, {"question_id": 169, "answer_sql": []}, {"question_id": 170, "answer_sql": ["SELECT COUNT(*) FROM trans WHERE type = 'VYBER KARTOU' AND date > '1995-12-31';"]}, {"question_id": 171, "answer_sql": ["SELECT SUM(CASE WHEN T3.A3 = 'North Bohemia' THEN 1 ELSE 0 END) - SUM(CASE WHEN T3.A3 = 'East Bohemia' THEN 1 ELSE 0 END) AS difference FROM trans AS T1 JOIN account AS T2 ON T1.account_id = T2.account_id JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T3.A3 IN ('North Bohemia', 'East Bohemia') AND T1.date BETWEEN '1996-01-01' AND '1996-12-31'"]}, {"question_id": 172, "answer_sql": ["SELECT COUNT(DISTINCT T1.account_id), COUNT(DISTINCT T2.account_id) FROM trans AS T1 JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.account_id BETWEEN 1 AND 10;"]}, {"question_id": 173, "answer_sql": ["SELECT frequency, COUNT(*) AS total_requests FROM account WHERE account_id = 3 GROUP BY frequency;"]}, {"question_id": 174, "answer_sql": ["SELECT birth_date FROM client WHERE client_id = (SELECT account_id FROM account WHERE account_id = 130)", "SELECT birth_date FROM client WHERE client_id = (SELECT client_id FROM disp WHERE account_id = (SELECT account_id FROM account WHERE account_id = 130))"]}, {"question_id": 175, "answer_sql": ["SELECT COUNT(DISTINCT a.account_id) FROM account a JOIN trans t ON a.account_id = t.account_id JOIN disp d ON a.account_id = d.account_id JOIN client c ON d.client_id = c.client_id WHERE c.gender = 'M' AND c.birth_date IS NOT NULL AND d.type = 'C' AND t.type = 'C' AND t.operation = 'C' AND t.balance > 0;"]}, {"question_id": 176, "answer_sql": ["SELECT SUM(amount) AS total_debt, status FROM loan WHERE account_id IN ( SELECT account_id FROM client WHERE client_id = 992 ) GROUP BY status;", "SELECT SUM(loan.amount) AS total_debt, client.client_id, client.gender, client.birth_date, client.district_id FROM client JOIN account ON client.district_id = account.district_id JOIN loan ON account.account_id = loan.account_id WHERE client.client_id = 992 GROUP BY client.client_id, client.gender, client.birth_date, client.district_id ORDER BY client.client_id;"]}, {"question_id": 177, "answer_sql": ["SELECT SUM(trans.amount) AS total_sum, client.gender FROM trans JOIN account ON trans.account_id = account.account_id JOIN client ON account.district_id = client.district_id WHERE trans.trans_id = 851 AND client.client_id = 4 GROUP BY client.gender"]}, {"question_id": 178, "answer_sql": []}, {"question_id": 179, "answer_sql": ["SELECT SUM(trans.amount) AS total_payment FROM trans JOIN account ON trans.account_id = account.account_id JOIN client ON account.district_id = client.district_id WHERE trans.date BETWEEN '1998-01-01' AND '1998-12-31' AND client.client_id = 617;"]}, {"question_id": 180, "answer_sql": ["SELECT DISTINCT c.client_id, c.district_id FROM client c JOIN account a ON c.district_id = a.district_id JOIN disp d ON a.account_id = d.account_id WHERE c.birth_date BETWEEN '1983-01-01' AND '1987-12-31' AND d.type = 'East Bohemia';"]}, {"question_id": 181, "answer_sql": ["SELECT DISTINCT T1.client_id FROM client AS T1 JOIN loan AS T2 ON T1.client_id = T2.account_id WHERE T1.gender = 'F' ORDER BY T2.amount DESC LIMIT 3;"]}, {"question_id": 182, "answer_sql": ["SELECT COUNT(T1.client_id) AS male_customers FROM client AS T1 JOIN account AS T2 ON T1.district_id = T2.district_id JOIN trans AS T3 ON T1.client_id = T3.account_id WHERE T1.gender = 'M' AND T1.birth_date BETWEEN '1974-01-01' AND '1976-12-31' AND T3.type = 'SIPO' AND T3.amount > 4000;"]}, {"question_id": 183, "answer_sql": ["SELECT COUNT(account_id) AS num_accounts FROM account WHERE district_id = (SELECT district_id FROM district WHERE A2 = 'Beroun') AND date > '1996-12-31';"]}, {"question_id": 184, "answer_sql": []}, {"question_id": 185, "answer_sql": ["SELECT COUNT(CASE WHEN T1.gender = 'F' THEN 1 ELSE NULL END) * 100 / COUNT(T1.client_id) AS female_proportion FROM client AS T1 JOIN disp AS T2 ON T1.client_id = T2.client_id JOIN account AS T3 ON T1.district_id = T3.district_id WHERE T1.district_id = (SELECT district_id FROM district WHERE A3 = 'Prague');"]}, {"question_id": 186, "answer_sql": ["SELECT (COUNT(CASE WHEN gender = 'M' THEN 1 ELSE NULL END) / COUNT(CASE WHEN frequency = 'POPLATEK TYDNE' THEN 1 ELSE NULL END)) * 100 AS percentage FROM client JOIN account ON client.client_id = account.account_id JOIN trans ON account.account_id = trans.account_id WHERE frequency = 'POPLATEK TYDNE'"]}, {"question_id": 187, "answer_sql": ["SELECT COUNT(DISTINCT c.client_id) AS client_count FROM client c JOIN account a ON c.district_id = a.district_id JOIN trans t ON a.account_id = t.account_id WHERE a.frequency = 'POPLATEK TYDNE';", "SELECT COUNT(DISTINCT T1.client_id) AS client_count FROM client AS T1 JOIN account AS T2 ON T1.district_id = T2.district_id JOIN trans AS T3 ON T1.client_id = T3.account_id WHERE T2.frequency = 'POPLATEK TYDNE';"]}, {"question_id": 188, "answer_sql": ["SELECT a.account_id, a.date, MIN(l.amount) AS min_approved_amount FROM account a JOIN loan l ON a.account_id = l.account_id WHERE l.date >= DATE('now', '-24 months') AND a.date < '1997-01-01' GROUP BY a.account_id, a.date ORDER BY a.account_id, a.date, min_approved_amount"]}, {"question_id": 189, "answer_sql": ["SELECT DISTINCT T1.account_id FROM account AS T1 JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.gender = 'F' ORDER BY T1.date ASC LIMIT 1;"]}, {"question_id": 190, "answer_sql": ["SELECT COUNT(DISTINCT c.client_id) AS client_count FROM client c JOIN district d ON c.district_id = d.district_id WHERE d.A3 = 'East Bohemia' AND c.birth_date BETWEEN '1920-01-01' AND '1920-12-31';"]}, {"question_id": 191, "answer_sql": []}, {"question_id": 192, "answer_sql": ["SELECT AVG(loan.amount) AS average_loan_amount FROM loan JOIN trans ON loan.account_id = trans.account_id WHERE trans.type = 'POPLATEK PO OBRATU' AND loan.status = 'C' GROUP BY loan.account_id;", "SELECT AVG(loan.amount) AS average_loan_amount FROM loan JOIN trans ON loan.account_id = trans.account_id WHERE loan.status = 'C' AND trans.type = 'POPLATEK PO OBRATU' AND trans.operation = 'OK';"]}, {"question_id": 193, "answer_sql": []}, {"question_id": 194, "answer_sql": []}, {"question_id": 195, "answer_sql": ["SELECT bond_type FROM bond GROUP BY bond_type ORDER BY COUNT(bond_type) DESC LIMIT 1;"]}, {"question_id": 196, "answer_sql": ["SELECT COUNT(T1.atom_id) AS chlorine_atoms FROM atom AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-' AND T1.element = 'cl';"]}, {"question_id": 197, "answer_sql": ["SELECT AVG(element) AS average_oxygen_atoms FROM atom WHERE element = 'o' AND molecule_id IN ( SELECT molecule_id FROM bond WHERE bond_type = '-' );"]}, {"question_id": 198, "answer_sql": []}, {"question_id": 199, "answer_sql": ["SELECT COUNT(T1.molecule_id) AS non_carcinogenic_molecules FROM atom AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'na' AND T2.label = '-';"]}, {"question_id": 200, "answer_sql": []}, {"question_id": 201, "answer_sql": []}, {"question_id": 202, "answer_sql": ["SELECT COUNT(bond_id) AS triple_bond_count FROM bond WHERE bond_type = '#';"]}, {"question_id": 203, "answer_sql": ["SELECT COUNT(atom_id) AS atom_count FROM atom WHERE element != 'br';"]}, {"question_id": 204, "answer_sql": ["SELECT COUNT(molecule_id) AS carcinogenic_count FROM molecule WHERE molecule_id BETWEEN 'TR000' AND 'TR099' AND label = '+' LIMIT 100;", "SELECT COUNT(DISTINCT T1.molecule_id) AS carcinogenic_count FROM molecule AS T1 JOIN connected AS T2 ON T1.molecule_id = T2.atom_id JOIN atom AS T3 ON T2.atom_id = T3.atom_id WHERE T1.label = '+' AND T1.molecule_id BETWEEN 'TR000' AND 'TR099' ORDER BY T1.molecule_id LIMIT 100;"]}, {"question_id": 205, "answer_sql": ["SELECT DISTINCT T1.molecule_id FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id JOIN atom AS T3 ON T2.atom_id2 = T3.atom_id JOIN molecule AS T4 ON T4.molecule_id = T3.molecule_id WHERE T3.element = 'si';"]}, {"question_id": 206, "answer_sql": ["SELECT DISTINCT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR004_8_9' AND atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')"]}, {"question_id": 207, "answer_sql": ["SELECT DISTINCT element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond_type = ' = ' AND element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')"]}, {"question_id": 208, "answer_sql": []}, {"question_id": 209, "answer_sql": ["SELECT bond_type FROM bond JOIN atom ON bond.molecule_id = atom.molecule_id WHERE atom.element = 'te';", "SELECT bond_type FROM bond JOIN atom ON bond.molecule_id = atom.molecule_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE element = 'te';"]}, {"question_id": 210, "answer_sql": []}, {"question_id": 211, "answer_sql": []}, {"question_id": 212, "answer_sql": ["SELECT element FROM atom WHERE molecule_id IN ( SELECT molecule_id FROM molecule WHERE label = '-' ) AND atom_id IN ( SELECT atom_id FROM connected WHERE atom_id2 IN ( SELECT atom_id FROM atom WHERE element = 'cl' ) ) GROUP BY element ORDER BY COUNT(*) ASC LIMIT 1;", "SELECT element FROM atom WHERE molecule_id IN ( SELECT molecule_id FROM molecule WHERE label = '-' ) AND atom_id IN ( SELECT atom_id FROM connected GROUP BY atom_id HAVING COUNT(DISTINCT bond_id) = ( SELECT MAX(bond_count) FROM ( SELECT COUNT(DISTINCT bond_id) AS bond_count FROM connected GROUP BY atom_id ) AS max_bond_count ) )", "SELECT element FROM atom WHERE molecule_id IN ( SELECT molecule_id FROM molecule WHERE label = '-' ) GROUP BY element ORDER BY COUNT(*) ASC LIMIT 1;"]}, {"question_id": 213, "answer_sql": ["SELECT bond_type FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN atom atom2 ON connected.atom_id2 = atom2.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE atom.atom_id = 'TR004_8' AND atom2.atom_id = 'TR004_20';"]}, {"question_id": 214, "answer_sql": ["SELECT label FROM molecule WHERE molecule_id IN ( SELECT molecule_id FROM atom WHERE element = 'sn' ) AND molecule_id NOT IN ( SELECT molecule_id FROM atom WHERE element = 'sn' ) AND label NOT IN ('+')", "SELECT label FROM molecule WHERE molecule_id NOT IN ( SELECT DISTINCT molecule_id FROM atom WHERE element = 'sn' )"]}, {"question_id": 215, "answer_sql": []}, {"question_id": 216, "answer_sql": ["SELECT atom_id, atom_id2 FROM connected WHERE bond_id IN ( SELECT bond_id FROM bond WHERE bond_type = '#' )"]}, {"question_id": 217, "answer_sql": ["SELECT atom_id FROM connected WHERE atom_id2 IN ( SELECT atom_id FROM atom WHERE molecule_id = 'TR181' ) OR atom_id IN ( SELECT atom_id FROM atom WHERE molecule_id = 'TR181' )", "SELECT atom_id FROM connected WHERE atom_id2 IN ( SELECT atom_id FROM atom WHERE molecule_id = 'TR181' ) OR atom_id IN ( SELECT atom_id FROM atom WHERE molecule_id = 'TR181' ) GROUP BY atom_id HAVING COUNT(DISTINCT bond_id) > 0;", "SELECT atom_id FROM connected WHERE atom_id2 IN ( SELECT atom_id FROM atom WHERE molecule_id = 'TR181' ) OR atom_id IN ( SELECT atom_id FROM atom WHERE molecule_id = 'TR181' ) GROUP BY atom_id HAVING COUNT(DISTINCT atom_id) > 1"]}, {"question_id": 218, "answer_sql": ["SELECT (SUM(CASE WHEN element = 'f' THEN 1 ELSE 0 END) / COUNT(molecule_id)) * 100 AS percent FROM atom WHERE element = 'f'"]}, {"question_id": 219, "answer_sql": ["SELECT (SELECT COUNT(*) FROM bond WHERE bond_type = '#') / (SELECT COUNT(*) FROM molecule WHERE label = '+') * 100 AS percentage", "SELECT CAST(COUNT(CASE WHEN bond_type = '#' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(bond_id) AS percent FROM bond JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE label = '+'"]}, {"question_id": 220, "answer_sql": ["SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR000' ORDER BY atom.element ASC LIMIT 3;"]}, {"question_id": 221, "answer_sql": ["SELECT atom_id, atom_id2 FROM connected WHERE atom_id = 'TR001' AND atom_id2 = 'TR001' AND bond_id = 'TR001_2_6';"]}, {"question_id": 222, "answer_sql": ["SELECT SUM(label = '+') - SUM(label = '-') AS difference FROM molecule;"]}, {"question_id": 223, "answer_sql": ["SELECT atom_id FROM connected WHERE atom_id2 = 'TR_000_2_5' AND bond_id = (SELECT bond_id FROM bond WHERE bond_type = 'TR_000_2_5')"]}, {"question_id": 224, "answer_sql": ["SELECT bond_id FROM connected WHERE atom_id2 = 'TR000_2';", "SELECT bond_id FROM connected WHERE atom_id2 = 'TR000_2' AND atom_id = 'TR000_2';"]}, {"question_id": 225, "answer_sql": ["SELECT T1.label FROM molecule AS T1 JOIN connected AS T2 ON T1.molecule_id = T2.atom_id JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = ' = ' ORDER BY T1.label ASC LIMIT 5;"]}, {"question_id": 226, "answer_sql": ["SELECT CAST(SUM(CASE WHEN T2.bond_type = ' = ' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.bond_id) AS percent FROM atom AS T1 JOIN connected AS T3 ON T1.atom_id = T3.atom_id JOIN bond AS T2 ON T3.bond_id = T2.bond_id JOIN molecule AS T4 ON T4.molecule_id = T1.molecule_id WHERE T4.molecule_id = 'TR008'"]}, {"question_id": 227, "answer_sql": ["SELECT CAST(COUNT(CASE WHEN label = '+' THEN molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(molecule_id) AS percent FROM molecule;"]}, {"question_id": 228, "answer_sql": []}, {"question_id": 229, "answer_sql": ["SELECT bond_type FROM bond WHERE molecule_id = 'TR000' AND bond_id IN ( SELECT bond_id FROM connected WHERE atom_id = 'TR000' OR atom_id2 = 'TR000' )", "SELECT bond_type FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON connected.atom_id = atom.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR000';", "SELECT bond_type FROM bond WHERE molecule_id = 'TR000' AND bond_id IN ( SELECT bond_id FROM connected WHERE atom_id IN ( SELECT atom_id FROM atom WHERE molecule_id = 'TR000' ) OR atom_id2 IN ( SELECT atom_id FROM atom WHERE molecule_id = 'TR000' ) )"]}, {"question_id": 230, "answer_sql": ["SELECT atom.element, molecule.label FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR060';"]}, {"question_id": 231, "answer_sql": ["SELECT bond_type, COUNT(*) AS bond_count FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '++' GROUP BY bond_type ORDER BY bond_count DESC LIMIT 1;"]}, {"question_id": 232, "answer_sql": []}, {"question_id": 233, "answer_sql": ["SELECT bond.bond_id FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id JOIN bond ON connected.bond_id = bond.bond_id WHERE molecule.molecule_id = 'TR006' ORDER BY bond.bond_id LIMIT 2;", "SELECT bond.bond_id, bond.bond_type FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON connected.atom_id = atom.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR006' ORDER BY bond.bond_type ASC, bond.bond_id ASC LIMIT 2;"]}, {"question_id": 234, "answer_sql": ["SELECT COUNT(bond_id) AS bond_count FROM connected WHERE atom_id = 'TR009_12' OR atom_id2 = 'TR009_12' AND bond_id LIKE 'TR009_%';"]}, {"question_id": 235, "answer_sql": []}, {"question_id": 236, "answer_sql": ["SELECT bond.bond_type, atom.atom_id, atom2.atom_id FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN atom atom2 ON connected.atom_id2 = atom2.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR001_6_9';"]}, {"question_id": 237, "answer_sql": ["SELECT T2.label, T1.molecule_id FROM atom AS T1 JOIN connected AS T3 ON T1.atom_id = T3.atom_id JOIN molecule AS T2 ON T2.molecule_id = T3.atom_id2 WHERE T1.atom_id = 'TR001_10' AND T2.label = '+'"]}, {"question_id": 238, "answer_sql": []}, {"question_id": 239, "answer_sql": ["SELECT COUNT(bond_id) AS connection_count FROM connected WHERE atom_id = 'TR%_19' AND atom_id2 = 'TR%_19';"]}, {"question_id": 240, "answer_sql": ["SELECT DISTINCT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR004' AND atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')"]}, {"question_id": 241, "answer_sql": ["SELECT COUNT(DISTINCT molecule_id) AS non_carcinogenic_molecules FROM molecule WHERE label = '-';"]}, {"question_id": 242, "answer_sql": ["SELECT DISTINCT T1.molecule_id FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id JOIN molecule AS T3 ON T1.molecule_id = T3.molecule_id WHERE T1.atom_id BETWEEN '21' AND '25' AND T3.label = '+'"]}, {"question_id": 243, "answer_sql": ["SELECT bond.bond_id FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.element = 'p' AND atom.element = 'n';"]}, {"question_id": 244, "answer_sql": ["SELECT m.label FROM molecule m JOIN connected c ON m.molecule_id = c.atom_id JOIN atom a ON c.atom_id = a.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = ' = ' AND m.label = '+' GROUP BY m.label ORDER BY COUNT(*) DESC LIMIT 1;"]}, {"question_id": 245, "answer_sql": []}, {"question_id": 246, "answer_sql": []}, {"question_id": 247, "answer_sql": ["SELECT DISTINCT atom.element FROM atom WHERE atom.atom_id NOT IN ( SELECT atom_id FROM connected ) AND atom.element IN ( 'cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca' )", "SELECT atom.element FROM atom WHERE atom.atom_id NOT IN ( SELECT atom_id FROM connected ) AND atom.element NOT IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')", "SELECT atom.element FROM atom WHERE atom.atom_id NOT IN ( SELECT atom_id FROM connected )", "SELECT atom.element FROM atom WHERE atom.atom_id NOT IN ( SELECT atom_id FROM connected ) AND atom.element IN ( 'cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca' )", "SELECT DISTINCT atom.element FROM atom WHERE atom.atom_id NOT IN ( SELECT atom_id FROM connected )"]}, {"question_id": 248, "answer_sql": ["SELECT atom_id FROM connected WHERE atom_id2 = 'TR447' AND bond_id IN ( SELECT bond_id FROM bond WHERE bond_type = '#' )", "SELECT atom_id, atom_id2 FROM connected WHERE bond_id = ( SELECT bond_id FROM bond WHERE molecule_id = 'TR447' AND bond_type = '#' )"]}, {"question_id": 249, "answer_sql": ["SELECT DISTINCT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE connected.bond_id = 'TR144_8_19' AND atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca');"]}, {"question_id": 250, "answer_sql": []}, {"question_id": 251, "answer_sql": ["SELECT element FROM atom WHERE molecule_id IN ( SELECT molecule_id FROM molecule WHERE label = '+' ) GROUP BY element ORDER BY COUNT(*) ASC LIMIT 1;", "SELECT element FROM atom WHERE molecule_id IN ( SELECT molecule_id FROM molecule WHERE label = '+' ) GROUP BY element ORDER BY COUNT(*) DESC LIMIT 1;"]}, {"question_id": 252, "answer_sql": ["SELECT atom_id FROM atom WHERE element = 'pb' AND atom_id IN ( SELECT atom_id2 FROM connected WHERE atom_id = atom_id )", "SELECT atom_id FROM atom WHERE element = 'pb' AND atom_id IN (SELECT atom_id2 FROM connected WHERE atom_id = 'pb')"]}, {"question_id": 253, "answer_sql": ["SELECT DISTINCT element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond_type = '#' AND element IN ('Cl', 'C', 'H', 'O', 'S', 'N', 'P', 'Na', 'Br', 'F', 'I', 'Sn', 'Pb', 'Te', 'Ca')"]}, {"question_id": 254, "answer_sql": ["SELECT CAST(COUNT(DISTINCT atom_id) AS REAL) * 100 / COUNT(DISTINCT atom_id) FROM atom"]}, {"question_id": 255, "answer_sql": ["SELECT SUM(CASE WHEN T2.bond_type = '-' THEN 1 ELSE 0 END) / COUNT(T2.bond_id) AS proportion FROM connected AS T1 JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T2.bond_type = '-'"]}, {"question_id": 256, "answer_sql": ["SELECT COUNT(atom_id) AS total_atoms FROM atom WHERE element IN ('c', 'h');"]}, {"question_id": 257, "answer_sql": ["SELECT atom_id2 FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE element = 's';"]}, {"question_id": 258, "answer_sql": ["SELECT bond_type FROM bond JOIN atom ON bond.molecule_id = atom.molecule_id WHERE element = 'sn';"]}, {"question_id": 259, "answer_sql": []}, {"question_id": 260, "answer_sql": []}, {"question_id": 261, "answer_sql": []}, {"question_id": 262, "answer_sql": []}, {"question_id": 263, "answer_sql": []}, {"question_id": 264, "answer_sql": ["SELECT label FROM molecule WHERE molecule_id IN ('TR000', 'TR001', 'TR002');"]}, {"question_id": 265, "answer_sql": ["SELECT DISTINCT molecule_id FROM atom WHERE element IN ( SELECT element FROM atom WHERE molecule_id IN ( SELECT molecule_id FROM molecule WHERE label = '-' ) )", "SELECT molecule_id FROM molecule WHERE label = '-'"]}, {"question_id": 266, "answer_sql": ["SELECT COUNT(T1.molecule_id) AS total_carcinogenic_molecules FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id JOIN molecule AS T3 ON T1.molecule_id = T3.molecule_id WHERE T3.label = '+'", "SELECT COUNT(T1.molecule_id) AS total_carcinogenic_molecules FROM atom AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'"]}, {"question_id": 267, "answer_sql": ["SELECT bond_type FROM bond WHERE molecule_id IN ('TR000', 'TR001', 'TR002', 'TR003', 'TR004', 'TR005', 'TR006', 'TR007', 'TR008', 'TR009', 'TR010', 'TR011', 'TR012', 'TR013', 'TR014', 'TR015', 'TR016', 'TR017', 'TR018', 'TR019', 'TR020', 'TR021', 'TR022', 'TR023', 'TR024', 'TR025', 'TR026', 'TR027', 'TR028', 'TR029', 'TR030', 'TR031', 'TR032', 'TR033', 'TR034', 'TR035', 'TR036', 'TR037', 'TR038', 'TR039', 'TR040', 'TR041', 'TR042', 'TR043', 'TR044', 'TR045', 'TR046', 'TR047', 'TR048', 'TR049', 'TR050')"]}, {"question_id": 268, "answer_sql": ["SELECT element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR001_10_11' AND element = 'cl';"]}, {"question_id": 269, "answer_sql": ["SELECT COUNT(bond_id) AS bond_count FROM bond JOIN atom ON bond.molecule_id = atom.molecule_id WHERE atom.element = 'i';"]}, {"question_id": 270, "answer_sql": ["SELECT CASE WHEN T2.label = '+' THEN 'Carcinogenic' WHEN T2.label = '-' THEN 'Non carcinogenic' END AS classification FROM atom T1 JOIN molecule T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'Ca';"]}, {"question_id": 271, "answer_sql": ["SELECT EXISTS ( SELECT 1 FROM connected c JOIN atom a ON c.atom_id = a.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE a.element = 'cl' AND a2.element = 'c' AND b.bond_id = 'TR001_1_8' )"]}, {"question_id": 272, "answer_sql": []}, {"question_id": 273, "answer_sql": []}, {"question_id": 274, "answer_sql": ["SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR001';"]}, {"question_id": 275, "answer_sql": []}, {"question_id": 276, "answer_sql": ["SELECT atom_id, atom_id2 FROM connected WHERE bond_id IN ( SELECT bond_id FROM bond WHERE bond_type = '#' ) LIMIT 2;"]}, {"question_id": 277, "answer_sql": ["SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR005_16_26' AND atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')"]}, {"question_id": 278, "answer_sql": []}, {"question_id": 279, "answer_sql": ["SELECT label FROM molecule WHERE molecule_id IN ( SELECT molecule_id FROM atom WHERE atom_id IN ( SELECT atom_id FROM connected WHERE atom_id2 = 'TR001_10_11' AND bond_id = 'TR001_10_11' ) ) AND label IN ('+', '-')"]}, {"question_id": 280, "answer_sql": ["SELECT bond_id, label FROM bond JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond_type = '#';", "SELECT bond.bond_id FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON connected.atom_id = atom.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE bond.bond_type = '#' AND molecule.label = '+'", "SELECT bond.bond_id, CASE WHEN label = '+' THEN 'Carcinogenic' ELSE 'Non-carcinogenic' END AS carcinogenic FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON connected.atom_id = atom.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE bond.bond_type = '#';", "SELECT bond.bond_id, CASE WHEN label = '+' THEN 'carcinogenic' ELSE 'non-carcinogenic' END AS carcinogenic FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON connected.atom_id = atom.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE bond_type = '#';"]}, {"question_id": 281, "answer_sql": ["SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE connected.atom_id2 = '4' AND molecule.label = '+' AND atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca') GROUP BY atom.element"]}, {"question_id": 282, "answer_sql": []}, {"question_id": 283, "answer_sql": []}, {"question_id": 284, "answer_sql": ["SELECT bond_type FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id JOIN bond ON connected.bond_id = bond.bond_id WHERE element = 'te';"]}, {"question_id": 285, "answer_sql": ["SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE connected.bond_id = 'TR001_10_11' AND connected.atom_id = SUBSTR('TR001_10_11', 1, 2) AND connected.atom_id2 = SUBSTR('TR001_10_11', 7, 2) AND atom.molecule_id = molecule.molecule_id", "SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR001_10_11' AND atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')"]}, {"question_id": 286, "answer_sql": ["SELECT CAST(COUNT(CASE WHEN bond_type = '#' THEN 1 END) AS REAL) * 100 / COUNT(*) FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond_type = '#'"]}, {"question_id": 287, "answer_sql": ["SELECT (SELECT COUNT(*) FROM bond WHERE bond_type = ' = ' AND molecule_id = 'TR047') * 100 / ( SELECT COUNT(*) FROM atom WHERE molecule_id = 'TR047' ) AS percent", "SELECT (SELECT COUNT(*) FROM atom WHERE molecule_id = 'TR047') * 100 / ( SELECT COUNT(DISTINCT atom_id) FROM connected WHERE atom_id IN (SELECT atom_id FROM atom WHERE molecule_id = 'TR047') AND atom_id2 IN (SELECT atom_id FROM atom WHERE molecule_id = 'TR047') AND bond_id IN ( SELECT bond_id FROM bond WHERE bond_type = ' = ' ) ) AS percent"]}, {"question_id": 288, "answer_sql": ["SELECT CASE WHEN COUNT(CASE WHEN label = '+' THEN 1 END) > 0 THEN 'Yes' ELSE 'No' END AS is_carcinogenic FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.atom_id = 'TR001_1';"]}, {"question_id": 289, "answer_sql": ["SELECT label FROM molecule WHERE label = '+';"]}, {"question_id": 290, "answer_sql": ["SELECT element FROM atom WHERE molecule_id = 'TR151' AND element = 'cl';"]}, {"question_id": 291, "answer_sql": ["SELECT COUNT(DISTINCT molecule_id) AS carcinogenic_compounds FROM molecule WHERE label = '+';"]}, {"question_id": 292, "answer_sql": ["SELECT atom_id FROM atom WHERE molecule_id BETWEEN 'TR010' AND 'TR050' AND element = 'c' AND atom_id IN ( SELECT atom_id FROM connected WHERE atom_id IN ( SELECT atom_id FROM atom WHERE molecule_id BETWEEN 'TR010' AND 'TR050' AND element = 'c' ) )", "SELECT atom.atom_id FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'c' AND molecule.molecule_id BETWEEN 'TR010' AND 'TR050'"]}, {"question_id": 293, "answer_sql": ["SELECT COUNT(atom_id) AS atom_count FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+';"]}, {"question_id": 294, "answer_sql": ["SELECT bond_id FROM connected JOIN atom ON connected.atom_id = atom.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+' AND connected.bond_id IN ( SELECT bond_id FROM bond WHERE bond_type = ' = ' )"]}, {"question_id": 295, "answer_sql": []}, {"question_id": 296, "answer_sql": []}, {"question_id": 297, "answer_sql": ["SELECT atom_id FROM atom WHERE element = 'c' AND atom_id NOT IN ( SELECT atom_id FROM connected WHERE atom_id IN ( SELECT atom_id FROM atom WHERE element = 'c' ) )"]}, {"question_id": 298, "answer_sql": []}, {"question_id": 299, "answer_sql": ["SELECT label FROM molecule WHERE label = '+';", "SELECT label FROM molecule WHERE molecule_id = 'TR124';"]}, {"question_id": 300, "answer_sql": ["SELECT atom_id FROM atom WHERE molecule_id = 'TR186'"]}, {"question_id": 301, "answer_sql": ["SELECT bond_type FROM bond WHERE bond_id = (SELECT bond_id FROM connected WHERE atom_id = 'TR007_4_19' AND atom_id2 = 'TR007_4_19');"]}, {"question_id": 302, "answer_sql": ["SELECT DISTINCT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR001_2_4' AND atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')", "SELECT DISTINCT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE bond.bond_id = 'TR001_2_4' AND atom.element = 'cl' OR atom.element = 'c' OR atom.element = 'h' OR atom.element = 'o' OR atom.element = 's' OR atom.element = 'n' OR atom.element = 'p' OR atom.element = 'na' OR atom.element = 'br' OR atom.element = 'f' OR atom.element = 'i' OR atom.element = 'sn' OR atom.element = 'pb' OR atom.element = 'te' OR atom.element = 'ca'"]}, {"question_id": 303, "answer_sql": []}, {"question_id": 304, "answer_sql": ["SELECT DISTINCT atom.element, molecule.label FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca') AND molecule.label = '+'", "SELECT DISTINCT atom.element, molecule.label FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')"]}, {"question_id": 305, "answer_sql": []}, {"question_id": 306, "answer_sql": ["SELECT DISTINCT T1.molecule_id, T1.label, T2.element FROM molecule AS T1 JOIN connected AS T3 ON T1.molecule_id = T3.atom_id JOIN atom AS T2 ON T3.atom_id = T2.atom_id WHERE T3.bond_id IN (SELECT bond_id FROM bond WHERE bond_type = '#')"]}, {"question_id": 307, "answer_sql": []}, {"question_id": 308, "answer_sql": []}, {"question_id": 309, "answer_sql": []}, {"question_id": 310, "answer_sql": []}, {"question_id": 311, "answer_sql": []}, {"question_id": 312, "answer_sql": ["SELECT label FROM molecule WHERE molecule_id IN ( SELECT molecule_id FROM atom WHERE atom_id IN ( SELECT atom_id FROM connected WHERE atom_id2 = 'TR001_2_4' AND bond_id = ( SELECT bond_id FROM bond WHERE bond_id = 'TR001_2_4' ) ) ) AND label = '+'"]}, {"question_id": 313, "answer_sql": ["SELECT COUNT(atom_id) AS atom_count FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR005';"]}, {"question_id": 314, "answer_sql": ["SELECT COUNT(bond_id) AS single_bonds FROM bond WHERE bond_type = '-';"]}, {"question_id": 315, "answer_sql": ["SELECT DISTINCT T1.molecule_id FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id JOIN atom AS T3 ON T2.atom_id2 = T3.atom_id JOIN molecule AS T4 ON T3.molecule_id = T4.molecule_id WHERE T1.element = 'cl' AND T4.label = '+'"]}, {"question_id": 316, "answer_sql": ["SELECT DISTINCT T1.molecule_id FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id JOIN molecule AS T3 ON T1.molecule_id = T3.molecule_id WHERE T1.element = 'c' AND T3.label = '-'"]}, {"question_id": 317, "answer_sql": ["SELECT CAST(SUM(CASE WHEN T1.element = 'cl' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.molecule_id) AS percentage FROM atom AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'"]}, {"question_id": 318, "answer_sql": []}, {"question_id": 319, "answer_sql": ["SELECT COUNT(DISTINCT T1.atom_id) AS element_count FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_id = 'TR001_3_4' AND T1.element = 'cl';"]}, {"question_id": 320, "answer_sql": []}, {"question_id": 321, "answer_sql": []}, {"question_id": 322, "answer_sql": ["SELECT element FROM atom WHERE atom_id = 'TR000_1';"]}, {"question_id": 323, "answer_sql": ["SELECT label FROM molecule WHERE molecule_id = 'TR000';"]}, {"question_id": 324, "answer_sql": ["SELECT COUNT(CASE WHEN bond_type = '-' THEN 1 ELSE NULL END) * 100 / COUNT(bond_id) AS percentage FROM bond"]}, {"question_id": 325, "answer_sql": []}, {"question_id": 326, "answer_sql": ["SELECT DISTINCT T1.molecule_id FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id JOIN atom AS T3 ON T2.atom_id2 = T3.atom_id JOIN bond AS T4 ON T2.bond_id = T4.bond_id WHERE T3.element = 's' AND T4.bond_type = ' = '"]}, {"question_id": 327, "answer_sql": []}, {"question_id": 328, "answer_sql": ["SELECT DISTINCT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN molecule m ON m.molecule_id = c.atom_id2 JOIN bond b ON b.bond_id = c.bond_id WHERE b.bond_type = '=' AND m.label = 'TR024' AND a.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca');"]}, {"question_id": 329, "answer_sql": ["SELECT molecule.label FROM molecule JOIN atom ON molecule.molecule_id = atom.molecule_id GROUP BY molecule.label ORDER BY COUNT(atom.molecule_id) DESC LIMIT 1;", "SELECT t1.molecule_id, COUNT(t1.molecule_id) AS atom_count FROM atom t1 JOIN molecule t2 ON t1.molecule_id = t2.molecule_id GROUP BY t1.molecule_id ORDER BY atom_count DESC LIMIT 1;", "SELECT t1.label FROM molecule t1 JOIN connected t2 ON t1.molecule_id = t2.atom_id GROUP BY t1.molecule_id ORDER BY COUNT(t2.atom_id) DESC LIMIT 1;"]}, {"question_id": 330, "answer_sql": []}, {"question_id": 331, "answer_sql": ["SELECT COUNT(DISTINCT molecule_id) AS carcinogenic_molecules FROM molecule WHERE label = '+';"]}, {"question_id": 332, "answer_sql": ["SELECT COUNT(T1.molecule_id) AS single_bonds_count FROM molecule AS T1 JOIN connected AS T2 ON T1.molecule_id = T2.atom_id JOIN atom AS T3 ON T2.atom_id = T3.atom_id WHERE T2.bond_id IS NOT NULL AND T2.bond_id IN ( SELECT bond_id FROM bond WHERE bond_type = '-' ) AND T1.molecule_id BETWEEN 'TR004' AND 'TR010';"]}, {"question_id": 333, "answer_sql": []}, {"question_id": 334, "answer_sql": ["SELECT T1.element FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id JOIN molecule AS T3 ON T1.molecule_id = T3.molecule_id WHERE T1.atom_id = 'TR004_7' AND T3.label != '-'", "SELECT T1.element FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id JOIN molecule AS T3 ON T1.molecule_id = T3.molecule_id WHERE T3.label = '-' AND T1.atom_id = 'TR004_7';"]}, {"question_id": 335, "answer_sql": []}, {"question_id": 336, "answer_sql": []}, {"question_id": 337, "answer_sql": ["SELECT atom.element, bond.bond_type FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR016';"]}, {"question_id": 338, "answer_sql": ["SELECT atom_id FROM connected WHERE atom_id2 = 'c' AND bond_id = (SELECT bond_id FROM bond WHERE bond_type = ' = ' AND molecule_id = (SELECT molecule_id FROM molecule WHERE label = 'TR012'))"]}, {"question_id": 339, "answer_sql": []}, {"question_id": 340, "answer_sql": ["SELECT c.id, c.name, c.rarity, c.mcmId, c.mcmMetaId, c.mtgoFoilId, c.mtgoId, c.rarity, c.mcmId, c.mcmMetaId, c.mtgoFoilId, c.mtgoId FROM cards c JOIN sets s ON c.setCode = s.code JOIN legalities l ON c.uuid = l.uuid WHERE c.cardKingdomFoilId = c.cardKingdomId AND c.cardKingdomId IS NOT NULL;"]}, {"question_id": 341, "answer_sql": ["SELECT DISTINCT c.id, c.name, c.borderColor, c.cardKingdomFoilId, c.cardKingdomId FROM cards c WHERE c.borderColor IS NULL AND c.cardKingdomFoilId IS NULL AND c.cardKingdomId IS NOT NULL;"]}, {"question_id": 342, "answer_sql": ["SELECT name FROM cards WHERE faceConvertedManaCost > (SELECT MAX(faceConvertedManaCost) FROM cards)"]}, {"question_id": 343, "answer_sql": []}, {"question_id": 344, "answer_sql": ["SELECT c.name FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.rarity = 'mythic' AND l.status = 'Banned' AND l.format = 'gladiator';"]}, {"question_id": 345, "answer_sql": []}, {"question_id": 346, "answer_sql": []}, {"question_id": 347, "answer_sql": ["SELECT c.id, c.artist, c.faceName, c.faceConvertedManaCost, r.text, CASE WHEN c.hasContentWarning = 1 THEN 'Yes' ELSE 'No' END AS hasMissingOrDegradedProperties FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid JOIN rulings r ON c.uuid = r.uuid WHERE c.artist = 'Stephen Daniel';"]}, {"question_id": 348, "answer_sql": ["SELECT r.text FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.name = 'Sublime Epiphany' AND c.number = '74s';"]}, {"question_id": 349, "answer_sql": ["SELECT cards.name, cards.artist, CASE WHEN cards.isPromo = 1 THEN 'Yes' ELSE 'No' END AS isPromo FROM cards JOIN rulings ON cards.uuid = rulings.uuid GROUP BY cards.name, cards.artist, cards.isPromo ORDER BY count(rulings.uuid) DESC LIMIT 1;", "SELECT cards.name, cards.artist, isPromo FROM cards JOIN rulings ON cards.uuid = rulings.uuid GROUP BY cards.name, cards.artist, isPromo ORDER BY count(rulings.uuid) DESC LIMIT 1;", "SELECT cards.name, cards.artist, isPromo FROM cards JOIN rulings ON cards.uuid = rulings.uuid GROUP BY cards.uuid ORDER BY COUNT(rulings.uuid) DESC LIMIT 1;"]}, {"question_id": 350, "answer_sql": []}, {"question_id": 351, "answer_sql": []}, {"question_id": 352, "answer_sql": ["SELECT CAST(SUM(CASE WHEN T2.language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.id) AS percentage FROM cards AS T1 JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.availability LIKE '%Chinese Simplified%';"]}, {"question_id": 353, "answer_sql": []}, {"question_id": 354, "answer_sql": ["SELECT COUNT(DISTINCT type) AS type_count FROM cards WHERE artist = 'Aaron Boyd';"]}, {"question_id": 355, "answer_sql": ["SELECT keywords FROM cards WHERE name = 'Angel of Mercy';"]}, {"question_id": 356, "answer_sql": ["SELECT COUNT(*) FROM cards WHERE power = '*';"]}, {"question_id": 357, "answer_sql": ["SELECT promoTypes FROM cards WHERE name = 'Duress';"]}, {"question_id": 358, "answer_sql": ["SELECT borderColor FROM cards WHERE name = 'Ancestor\\u2019s Chosen';"]}, {"question_id": 359, "answer_sql": ["SELECT type FROM cards WHERE name = 'Ancestor\\u2019s Chosen' AND originalType IS NOT NULL;"]}, {"question_id": 360, "answer_sql": ["SELECT DISTINCT T2.language FROM cards AS T1 JOIN set_translations AS T2 ON T1.uuid = T2.setCode WHERE T1.name = 'Angel of Mercy';"]}, {"question_id": 361, "answer_sql": []}, {"question_id": 362, "answer_sql": ["SELECT text FROM rulings WHERE uuid = (SELECT uuid FROM cards WHERE name = 'Condemn');"]}, {"question_id": 363, "answer_sql": ["SELECT COUNT(T1.id) AS starter_cards_count FROM cards AS T1 JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'restricted' AND T1.isStarter = 1;"]}, {"question_id": 364, "answer_sql": []}, {"question_id": 365, "answer_sql": ["SELECT type FROM cards WHERE name = 'Benalish Knight';"]}, {"question_id": 366, "answer_sql": ["SELECT T1.text FROM cards AS T1 JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight' AND T2.text IS NOT NULL;"]}, {"question_id": 367, "answer_sql": ["SELECT artist FROM cards WHERE flavorText LIKE '%Phyrexian%' AND flavorText LIKE '%illustrated%';", "SELECT DISTINCT artist FROM cards WHERE flavorText LIKE '%Phyrexian%' AND flavorText NOT LIKE '%illustrated%';", "SELECT artist FROM cards WHERE flavorText LIKE '%Phyrexian%' AND flavorText NOT LIKE '%illustrated%';"]}, {"question_id": 368, "answer_sql": ["SELECT CAST(COUNT(CASE WHEN borderColor = 'borderless' THEN id ELSE NULL END) AS REAL) * 100 / COUNT(id) AS percentage FROM cards;"]}, {"question_id": 369, "answer_sql": ["SELECT COUNT(*) FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'German' AND cards.isReprint = 1;"]}, {"question_id": 370, "answer_sql": []}, {"question_id": 371, "answer_sql": []}, {"question_id": 372, "answer_sql": ["SELECT COUNT(*) FROM cards WHERE toughness = 99;"]}, {"question_id": 373, "answer_sql": ["SELECT c.name FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.artist = 'Aaron Boyd';", "SELECT c.* FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.artist = 'Aaron Boyd';", "SELECT c.id, c.artist, c.name FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.artist = 'Aaron Boyd';"]}, {"question_id": 374, "answer_sql": ["SELECT COUNT(id) FROM cards WHERE borderColor = 'black' AND availability = 'mtgo';"]}, {"question_id": 375, "answer_sql": ["SELECT id FROM cards WHERE convertedManaCost = 0;"]}, {"question_id": 376, "answer_sql": ["SELECT layout FROM cards WHERE keywords LIKE '%flying%'"]}, {"question_id": 377, "answer_sql": ["SELECT COUNT(T1.id) AS NumberOfCards FROM cards AS T1 JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.originalType = 'Summon - Angel' AND T1.subtypes NOT LIKE '%Angel%';", "SELECT COUNT(T1.id) AS NumberOfCards FROM cards AS T1 JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.originalType = 'Summon - Angel' AND T1.subtypes NOT IN ('Angel');"]}, {"question_id": 378, "answer_sql": []}, {"question_id": 379, "answer_sql": ["SELECT id FROM cards WHERE duelDeck = 'a';"]}, {"question_id": 380, "answer_sql": []}, {"question_id": 381, "answer_sql": []}, {"question_id": 382, "answer_sql": []}, {"question_id": 383, "answer_sql": []}, {"question_id": 384, "answer_sql": []}, {"question_id": 385, "answer_sql": ["SELECT T1.text FROM cards AS T1 JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Beacon of Immortality';", "SELECT T1.text, T1.uuid FROM cards AS T1 JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Beacon of Immortality';", "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Beacon of Immortality';"]}, {"question_id": 386, "answer_sql": []}, {"question_id": 387, "answer_sql": ["SELECT DISTINCT c.colorIdentity, c.colorIndicator FROM cards c JOIN sets s ON c.setCode = s.code WHERE s.code = 'OGW';", "SELECT c.colorIdentity, c.colorIndicator FROM cards c JOIN sets s ON c.setCode = s.code WHERE s.code = 'OGW';", "SELECT c.name, c.colorIdentity FROM cards c JOIN sets s ON c.setCode = s.code WHERE s.code = 'OGW';", "SELECT DISTINCT c.name, c.colorIdentity FROM cards c JOIN sets s ON c.setCode = s.code WHERE s.code = 'OGW';"]}, {"question_id": 388, "answer_sql": ["SELECT T1.name, T2.language FROM cards AS T1 JOIN set_translations AS T2 ON T1.uuid = T2.setCode WHERE T1.setCode = '10E' AND T1.convertedManaCost = 5 AND T2.translation IS NOT NULL;"]}, {"question_id": 389, "answer_sql": ["SELECT c.name, r.date FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.originalType = 'Creature - Elf';"]}, {"question_id": 390, "answer_sql": []}, {"question_id": 391, "answer_sql": ["SELECT c.name FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.colors LIKE '%B%' AND fd.language LIKE '%foreign%'", "SELECT c.id, c.name, c.colors, f.language FROM cards c JOIN foreign_data f ON c.uuid = f.uuid WHERE c.originalType = 'Artifact' AND c.colors LIKE '%B%' AND f.language IS NOT NULL;"]}, {"question_id": 392, "answer_sql": []}, {"question_id": 393, "answer_sql": ["SELECT COUNT(*) FROM cards WHERE artist = 'John Avon' AND cardKingdomId IS NOT NULL AND cardKingdomId NOT LIKE '%powerful%';", "SELECT COUNT(*) AS num_cards FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.artist = 'John Avon' AND cards.cardKingdomId IS NOT NULL AND cards.cardKingdomFoilId IS NOT NULL AND cards.toughness = 'non-powerful';", "SELECT COUNT(*) AS num_cards FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.artist = 'John Avon' AND cards.cardKingdomFoilId IS NOT NULL AND cards.cardKingdomFoilId NOT LIKE '%powerful%';"]}, {"question_id": 394, "answer_sql": ["SELECT COUNT(id) AS powerful_white_bordered_cards FROM cards WHERE borderColor = 'white' AND cardKingdomFoilId = cardKingdomId AND cardKingdomId IS NOT NULL;"]}, {"question_id": 395, "answer_sql": ["SELECT COUNT(*) FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.artist = 'UDON' AND cards.availability = 'mtgo' AND cards.hand = '-1';", "SELECT COUNT(*) FROM cards WHERE artist = 'UDON' AND availability = 'mtgo' AND hand = -1;"]}, {"question_id": 396, "answer_sql": ["SELECT COUNT(*) FROM cards WHERE frameVersion = '1993' AND availability = 'paper' AND hasContentWarning = 1;"]}, {"question_id": 397, "answer_sql": ["SELECT T1.manaCost FROM cards AS T1 JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.layout = 'normal' AND T1.frameVersion = '2003' AND T1.borderColor = 'black' AND T1.availability IN ('paper', 'mtgo')"]}, {"question_id": 398, "answer_sql": ["SELECT SUM(convertedManaCost) AS total_unconverted_mana FROM cards WHERE artist = 'Rob Alexander';"]}, {"question_id": 399, "answer_sql": ["SELECT type FROM cards WHERE availability = 'arena';"]}, {"question_id": 400, "answer_sql": []}, {"question_id": 401, "answer_sql": ["SELECT CAST(COUNT(CASE WHEN hand = '+3' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(id) FROM cards WHERE frameEffects = 'legendary';"]}, {"question_id": 402, "answer_sql": ["SELECT c.id FROM cards c WHERE c.isStorySpotlight = 1 AND c.isTextless = 1"]}, {"question_id": 403, "answer_sql": ["SELECT COUNT(CASE WHEN T2.language = 'Spanish' THEN T1.id ELSE NULL END) * 100 / COUNT(T1.id) AS Percentage, T1.name FROM cards AS T1 JOIN set_translations AS T2 ON T1.uuid = T2.setCode WHERE T2.language = 'Spanish';", "SELECT COUNT(CASE WHEN T2.language = 'Spanish' THEN T1.id ELSE NULL END) AS SpanishCardsCount, COUNT(T1.id) AS TotalCardsCount, (COUNT(CASE WHEN T2.language = 'Spanish' THEN T1.id ELSE NULL END) * 100) / COUNT(T1.id) AS SpanishPercentage FROM cards AS T1 JOIN set_translations AS T2 ON T1.uuid = T2.setCode WHERE T2.language = 'Spanish';", "SELECT T1.name, (SUM(CASE WHEN T2.language = 'Spanish' THEN 1 ELSE 0 END) * 100) / COUNT(T1.id) AS percentage FROM cards AS T1 JOIN set_translations AS T2 ON T1.uuid = T2.setCode GROUP BY T1.name ORDER BY percentage DESC;"]}, {"question_id": 404, "answer_sql": ["SELECT DISTINCT T2.language FROM sets AS T1 JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.baseSetSize = 309;"]}, {"question_id": 405, "answer_sql": []}, {"question_id": 406, "answer_sql": ["SELECT c.id, c.name, c.types FROM cards c JOIN sets s ON c.setCode = s.code JOIN legalities l ON c.uuid = l.uuid WHERE c.types LIKE '%Creature%' AND l.status = 'legal';"]}, {"question_id": 407, "answer_sql": ["SELECT DISTINCT t1.types FROM cards t1 JOIN set_translations t2 ON t1.uuid = t2.setCode WHERE t2.language = 'German' AND t1.types IS NOT NULL AND t1.types != '';", "SELECT DISTINCT T1.types FROM cards AS T1 JOIN sets AS T2 ON T1.setCode = T2.code JOIN set_translations AS T3 ON T2.code = T3.setCode WHERE T3.language = 'German';"]}, {"question_id": 408, "answer_sql": ["SELECT COUNT(*) FROM cards WHERE power IS NULL AND (power IS NULL OR power = '*');", "SELECT COUNT(T1.id) AS null_power_cards_with_ability_info FROM cards AS T1 JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.power IS NULL AND T2.text LIKE '%triggered ability%';", "SELECT COUNT(T1.id) AS null_power_cards_with_ability_info FROM cards AS T1 JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.power IS NULL;"]}, {"question_id": 409, "answer_sql": []}, {"question_id": 410, "answer_sql": []}, {"question_id": 411, "answer_sql": ["SELECT artist FROM cards WHERE text = 'Das perfekte Gegenmittel zu einer dichten Formation';"]}, {"question_id": 412, "answer_sql": ["SELECT T1.name, T1.flavorText, T1.layout, T1.borderColor FROM cards AS T1 JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'French' AND T1.type = 'Creature' AND T1.layout = 'normal' AND T1.borderColor = 'black' AND T1.artist = 'Matthew D. Wilson';"]}, {"question_id": 413, "answer_sql": ["SELECT COUNT(T1.id) AS numberOfCards FROM cards AS T1 JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'rare' AND T2.date = '2009-01-10';"]}, {"question_id": 414, "answer_sql": ["SELECT language FROM set_translations WHERE setCode = (SELECT code FROM sets WHERE baseSetSize = 180 AND block = 'Ravnica')", "SELECT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.baseSetSize = 180;"]}, {"question_id": 415, "answer_sql": []}, {"question_id": 416, "answer_sql": []}, {"question_id": 417, "answer_sql": ["SELECT CAST(COUNT(CASE WHEN T2.language = 'Japanese' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T2.language) AS Percentage FROM sets AS T1 JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.type = 'expansion';"]}, {"question_id": 418, "answer_sql": ["SELECT availability FROM cards WHERE artist = 'Daren Bader';"]}, {"question_id": 419, "answer_sql": ["SELECT COUNT(*) FROM cards WHERE borderColor = 'borderless' AND edhrecRank > 12000;"]}, {"question_id": 420, "answer_sql": ["SELECT COUNT(*) AS oversized_reprinted_promoted_cards FROM cards WHERE isOversized = 1 AND isReprint = 1 AND isPromo = 1;"]}, {"question_id": 421, "answer_sql": ["SELECT T1.name, T1.power FROM cards AS T1 JOIN sets AS T2 ON T1.setCode = T2.code JOIN legalities AS T3 ON T1.uuid = T3.uuid WHERE T1.promoTypes = 'arenaleague' AND T1.power IS NULL OR T1.power = '*' ORDER BY T1.name ASC LIMIT 3;", "SELECT T1.name, T1.power FROM cards AS T1 JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.promoTypes = 'arenaleague' ORDER BY T1.power ASC LIMIT 3;", "SELECT T1.name, T1.power FROM cards AS T1 JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.promoTypes = 'arenaleague' AND T1.power IS NULL OR T1.power = '*' ORDER BY T1.name ASC LIMIT 3;", "SELECT T1.name, T1.power FROM cards AS T1 JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.promoTypes = 'arenaleague' AND T1.power IS NULL ORDER BY T1.name LIMIT 3;"]}, {"question_id": 422, "answer_sql": []}, {"question_id": 423, "answer_sql": ["SELECT T1.id AS cardKingdomFoilId, T2.id AS cardKingdomId FROM cards AS T1 JOIN cards AS T2 ON T1.cardKingdomFoilId = T2.id WHERE T1.cardKingdomFoilId IS NOT NULL AND T1.cardKingdomId IS NOT NULL ORDER BY T1.cardKingdomFoilId ASC LIMIT 3;", "SELECT DISTINCT T1.id AS cardKingdomFoilId, T2.id AS cardKingdomId FROM cards AS T1 JOIN cards AS T2 ON T1.cardKingdomFoilId = T2.cardKingdomId WHERE T1.cardKingdomFoilId IS NOT NULL AND T1.cardKingdomId IS NOT NULL ORDER BY T1.cardKingdomFoilId ASC, T2.cardKingdomId ASC LIMIT 3;"]}, {"question_id": 424, "answer_sql": ["SELECT CAST(COUNT(CASE WHEN isTextless = 1 AND layout = 'normal' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(isTextless) AS proportion FROM cards;"]}, {"question_id": 425, "answer_sql": ["SELECT number FROM cards WHERE subtypes LIKE '%Angel%' AND subtypes LIKE '%Wizard%' AND side IS NULL;"]}, {"question_id": 426, "answer_sql": ["SELECT s.id, s.name, t.translation FROM sets s LEFT JOIN set_translations t ON s.code = t.setCode WHERE s.mtgoCode IS NULL OR s.mtgoCode = '' ORDER BY s.name ASC LIMIT 3;", "SELECT s.id, s.name, t.translation FROM sets s JOIN set_translations t ON s.code = t.setCode WHERE s.mtgoCode IS NULL OR s.mtgoCode = '' ORDER BY s.name ASC LIMIT 3;", "SELECT s.id, s.name FROM sets s WHERE s.mtgoCode IS NULL OR s.mtgoCode = '' ORDER BY s.name ASC LIMIT 3;"]}, {"question_id": 427, "answer_sql": []}, {"question_id": 428, "answer_sql": []}, {"question_id": 429, "answer_sql": []}, {"question_id": 430, "answer_sql": ["SELECT s.id, s.name FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.language = 'Italian' AND s.block = 'Shadowmoor' ORDER BY s.name ASC LIMIT 2;"]}, {"question_id": 431, "answer_sql": []}, {"question_id": 432, "answer_sql": ["SELECT T1.name, T1.baseSetSize FROM sets AS T1 JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Russian' ORDER BY T1.baseSetSize DESC LIMIT 1;"]}, {"question_id": 433, "answer_sql": []}, {"question_id": 434, "answer_sql": []}, {"question_id": 435, "answer_sql": []}, {"question_id": 436, "answer_sql": ["SELECT id FROM cards WHERE frameEffects = 'extendedart';"]}, {"question_id": 437, "answer_sql": ["SELECT c.id, c.artist, c.asciiName, c.borderColor, c.isFullArt FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.borderColor = 'black' AND c.isFullArt = 1;", "SELECT c.id, c.name, c.borderColor, c.isFullArt FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.borderColor = 'black' AND c.isFullArt = 1;", "SELECT c.name FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.borderColor = 'black' AND c.isFullArt = 1;"]}, {"question_id": 438, "answer_sql": []}, {"question_id": 439, "answer_sql": ["SELECT T1.name FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.setCode = 'ALL';"]}, {"question_id": 440, "answer_sql": ["SELECT language FROM foreign_data WHERE name = 'A Pedra Fellwar';"]}, {"question_id": 441, "answer_sql": ["SELECT T1.code FROM sets AS T1 JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'en' AND T2.translation = '07/13/2007';"]}, {"question_id": 442, "answer_sql": ["SELECT baseSetSize, code FROM sets WHERE block = 'Masques' INTERSECT SELECT baseSetSize, code FROM sets WHERE block = 'Mirage';", "SELECT baseSetSize, code FROM sets WHERE block IN ('Masques', 'Mirage');"]}, {"question_id": 443, "answer_sql": ["SELECT DISTINCT T1.code FROM sets AS T1 JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'en' AND T2.translation = 'expansion';"]}, {"question_id": 444, "answer_sql": ["SELECT T2.name, T2.type FROM cards AS T1 JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.watermark = 'BOROS' ORDER BY T2.name;"]}, {"question_id": 445, "answer_sql": ["SELECT T2.language, T2.flavorText, T2.type FROM cards AS T1 JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.watermark = 'colorpie';"]}, {"question_id": 446, "answer_sql": ["SELECT CAST(COUNT(CASE WHEN convertedManaCost = 10 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(convertedManaCost) AS percentage FROM cards WHERE setCode = 'Abyssal Horror';"]}, {"question_id": 447, "answer_sql": ["SELECT T1.code FROM sets AS T1 JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'en' AND T2.translation = 'Expansion Commander';"]}, {"question_id": 448, "answer_sql": ["SELECT T2.name, T2.type FROM cards AS T1 JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.watermark = 'ABZAN' ORDER BY T2.name;"]}, {"question_id": 449, "answer_sql": []}, {"question_id": 450, "answer_sql": ["SELECT COUNT(*) FROM cards WHERE artist = 'Aaron Miller' AND cardKingdomFoilId = cardKingdomId AND cardKingdomId IS NOT NULL;"]}, {"question_id": 451, "answer_sql": ["SELECT COUNT(*) FROM cards WHERE availability LIKE '%paper%' AND hand = '+%';"]}, {"question_id": 452, "answer_sql": []}, {"question_id": 453, "answer_sql": ["SELECT convertedManaCost FROM cards WHERE name = 'Ancestor`s Chosen';"]}, {"question_id": 454, "answer_sql": ["SELECT COUNT(*) FROM cards WHERE borderColor = 'white' AND power = '*' OR power IS NULL;", "SELECT COUNT(*) FROM cards WHERE borderColor = 'WHITE' AND power = '*' OR power IS NULL;", "SELECT COUNT(T1.id) AS unknown_power_count FROM cards AS T1 JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.borderColor = 'WHITE' AND T1.power = '*';", "SELECT COUNT(T1.id) AS unknown_power_count FROM cards AS T1 JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.borderColor = 'white' AND T1.power = '*';"]}, {"question_id": 455, "answer_sql": ["SELECT name FROM cards WHERE isPromo = 1 AND side IS NOT NULL"]}, {"question_id": 456, "answer_sql": ["SELECT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer';"]}, {"question_id": 457, "answer_sql": ["SELECT DISTINCT T1.purchaseUrls FROM cards AS T1 JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.promoTypes = 'bundle'"]}, {"question_id": 458, "answer_sql": ["SELECT COUNT(DISTINCT artist) AS artist_count FROM cards WHERE availability LIKE '%arena,mtgo%' AND borderColor = 'black';", "SELECT COUNT(DISTINCT c.artist) AS artist_count FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.borderColor = 'black' AND c.printings LIKE '%arena,mtgo%'"]}, {"question_id": 459, "answer_sql": ["SELECT name, convertedManaCost FROM cards WHERE name = 'Serra Angel' UNION ALL SELECT name, convertedManaCost FROM cards WHERE name = 'Shrine Keeper' ORDER BY convertedManaCost DESC LIMIT 1;"]}, {"question_id": 460, "answer_sql": ["SELECT T1.artist FROM cards AS T1 JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.name = 'Battra, Dark Destroyer';"]}, {"question_id": 461, "answer_sql": ["SELECT c.name, c.convertedManaCost FROM cards c JOIN sets s ON c.setCode = s.code WHERE c.frameVersion = '2003' ORDER BY c.convertedManaCost DESC LIMIT 3;"]}, {"question_id": 462, "answer_sql": ["SELECT T1.name FROM sets AS T1 JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Italian' AND T1.name = 'Ancestor\\u0027s Chosen';"]}, {"question_id": 463, "answer_sql": ["SELECT COUNT(T1.id) AS translation_count FROM sets AS T1 JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.name = 'Angel of Mercy';"]}, {"question_id": 464, "answer_sql": []}, {"question_id": 465, "answer_sql": []}, {"question_id": 466, "answer_sql": []}, {"question_id": 467, "answer_sql": ["SELECT SUM(baseSetSize) AS total_cards FROM sets WHERE code = 'Hauptset Zehnte Edition';"]}, {"question_id": 468, "answer_sql": ["SELECT translation FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE sets.name = 'Eighth Edition' AND set_translations.language = 'Simplified Chinese';"]}, {"question_id": 469, "answer_sql": ["SELECT EXISTS ( SELECT 1 FROM sets WHERE mtgoCode IS NOT NULL ) AS angel_of_mercy_appeared_on_mtg_online;", "SELECT EXISTS ( SELECT 1 FROM sets WHERE mtgoCode IS NOT NULL AND name = 'Angel of Mercy' )"]}, {"question_id": 470, "answer_sql": ["SELECT releaseDate FROM sets WHERE name = 'Ancestor''s Chosen';"]}, {"question_id": 471, "answer_sql": ["SELECT type FROM sets WHERE code = 'Hauptset Zehnte Edition';"]}, {"question_id": 472, "answer_sql": []}, {"question_id": 473, "answer_sql": ["SELECT s.code AS setCode FROM cards c JOIN sets s ON c.setCode = s.code WHERE c.name = 'Adarkar Valkyrie' AND s.isForeignOnly = 1;", "SELECT EXISTS ( SELECT 1 FROM sets WHERE code = 'Adarkar Valkyrie' AND isForeignOnly = 1 )"]}, {"question_id": 474, "answer_sql": ["SELECT COUNT(*) FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.language = 'Italian' AND s.baseSetSize < 10;"]}, {"question_id": 475, "answer_sql": ["SELECT COUNT(*) FROM cards WHERE setCode = 'Coldsnap' AND borderColor = 'black';"]}, {"question_id": 476, "answer_sql": ["SELECT name FROM cards WHERE setCode = 'Coldsnap' ORDER BY convertedManaCost DESC LIMIT 1;", "SELECT T1.name FROM cards AS T1 JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Coldsnap' ORDER BY T1.convertedManaCost DESC LIMIT 1;"]}, {"question_id": 477, "answer_sql": ["SELECT artist FROM cards WHERE setCode = 'Coldsnap' AND (artist = 'Jeremy Jarvis' OR artist = 'Aaron Miller' OR artist = 'Chippy');"]}, {"question_id": 478, "answer_sql": ["SELECT number FROM cards WHERE number = 4 AND setCode = 'Coldsnap';"]}, {"question_id": 479, "answer_sql": ["SELECT COUNT(T1.id) AS unknown_power_count FROM cards AS T1 JOIN set_translations AS T2 ON T1.uuid = T2.setCode WHERE T1.convertedManaCost > 5 AND T1.power = '*' OR T1.power = 'T1.power is null';", "SELECT COUNT(T1.id) AS unknown_power_count FROM cards AS T1 JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.convertedManaCost > 5 AND T1.power = '*' OR T1.power = 'T1.power is null';"]}, {"question_id": 480, "answer_sql": ["SELECT T2.flavorText FROM cards AS T1 JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Ancestor''s Chosen' AND T2.language = 'Italian';"]}, {"question_id": 481, "answer_sql": ["SELECT language FROM foreign_data WHERE name = 'Ancestor''s Chosen' AND flavorText IS NOT NULL;"]}, {"question_id": 482, "answer_sql": ["SELECT T1.type FROM cards AS T1 JOIN set_translations AS T2 ON T1.uuid = T2.setCode WHERE T2.language = 'German' AND T1.name = 'Ancestor''s Chosen';"]}, {"question_id": 483, "answer_sql": ["SELECT T1.text FROM cards AS T1 JOIN set_translations AS T2 ON T1.uuid = T2.setCode WHERE T2.language = 'Italian' AND T1.setCode = 'Coldsnap';"]}, {"question_id": 484, "answer_sql": []}, {"question_id": 485, "answer_sql": ["SELECT MAX(r.date) AS ruling_date FROM rulings r JOIN cards c ON r.uuid = c.uuid WHERE c.name = 'Reminisce';"]}, {"question_id": 486, "answer_sql": ["SELECT CAST(SUM(CASE WHEN T1.convertedManaCost = 7 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.convertedManaCost) AS percentage FROM cards AS T1 JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Coldsnap';"]}, {"question_id": 487, "answer_sql": ["SELECT CAST(COUNT(CASE WHEN cardKingdomFoilId IS NOT NULL THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(name) AS percentage FROM cards WHERE name = 'Coldsnap';", "SELECT CAST(SUM(CASE WHEN t1.cardKingdomFoilId IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) AS incredibly_powerful_percentage FROM cards t1 JOIN sets t2 ON t1.setCode = t2.code WHERE t2.name = 'Coldsnap';"]}, {"question_id": 488, "answer_sql": ["SELECT code FROM sets WHERE releaseDate = '2017-07-14';"]}, {"question_id": 489, "answer_sql": ["SELECT keyruneCode FROM sets WHERE code = 'PKHC';", "SELECT T1.keyruneCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'en' AND T2.translation = 'PKHC';"]}, {"question_id": 490, "answer_sql": ["SELECT mcmId FROM sets WHERE code = 'SS2';", "SELECT T1.mcmId FROM sets AS T1 JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.translation = 'SS2';"]}, {"question_id": 491, "answer_sql": ["SELECT T1.name, T1.mcmName FROM sets AS T1 JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'en' AND T2.translation = 'English' AND T2.setCode = (SELECT T3.code FROM sets AS T3 WHERE T3.releaseDate = '2017-06-09');"]}, {"question_id": 492, "answer_sql": ["SELECT type FROM sets WHERE code = 'From the Vault: Lore';", "SELECT type FROM sets WHERE name = 'From the Vault: Lore';"]}, {"question_id": 493, "answer_sql": ["SELECT parentCode FROM sets WHERE name = 'Commander 2014 Oversized';"]}, {"question_id": 494, "answer_sql": ["SELECT c.id, c.artist, c.text, CASE WHEN c.hasContentWarning = 1 THEN 'Yes' ELSE 'No' END AS hasContentWarning FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.artist = 'Jim Pavelec';"]}, {"question_id": 495, "answer_sql": ["SELECT releaseDate FROM sets WHERE name = 'Evacuation';"]}, {"question_id": 496, "answer_sql": []}, {"question_id": 497, "answer_sql": ["SELECT type FROM sets WHERE code = 'Huiti\u00e8me \u00e9dition';"]}, {"question_id": 498, "answer_sql": ["SELECT T1.name, T2.translation FROM sets AS T1 JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'French' AND T1.name = 'Tendo Ice Bridge';"]}, {"question_id": 499, "answer_sql": ["SELECT COUNT(id) AS translation_count FROM set_translations WHERE setCode = 'Salvat 2011';"]}, {"question_id": 500, "answer_sql": ["SELECT T1.name FROM sets AS T1 JOIN set_translations AS T2 ON T1.code = T2.setCode JOIN cards AS T3 ON T1.code = T3.setCode WHERE T2.language = 'Japanese' AND T3.name = 'Fellwar Stone';", "SELECT T1.name FROM cards AS T1 JOIN set_translations AS T2 ON T1.uuid = T2.setCode WHERE T2.language = 'Japanese' AND T1.name = 'Fellwar Stone';"]}, {"question_id": 501, "answer_sql": ["SELECT T1.name, T1.convertedManaCost FROM cards AS T1 JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Journey into Nyx Hero''s Path' ORDER BY T1.convertedManaCost DESC LIMIT 1;", "SELECT T1.name FROM cards AS T1 JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Journey into Nyx Hero''s Path' ORDER BY T1.convertedManaCost DESC LIMIT 1;"]}, {"question_id": 502, "answer_sql": ["SELECT releaseDate FROM sets WHERE name = 'Ola de fr\u00edo';"]}, {"question_id": 503, "answer_sql": ["SELECT T2.type FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.name = 'Samite Pilgrim';"]}, {"question_id": 504, "answer_sql": ["SELECT COUNT(*) FROM cards WHERE setCode = 'World Championship Decks 2004' AND convertedManaCost = '3';"]}, {"question_id": 505, "answer_sql": []}, {"question_id": 506, "answer_sql": []}, {"question_id": 507, "answer_sql": []}, {"question_id": 508, "answer_sql": ["SELECT DISTINCT t1.availability FROM cards t1 WHERE t1.artist = 'Aleksi Briclot' AND t1.isTextless = 1;"]}, {"question_id": 509, "answer_sql": ["SELECT id FROM sets WHERE baseSetSize = (SELECT MAX(baseSetSize) FROM sets)"]}, {"question_id": 510, "answer_sql": ["SELECT T1.artist, T1.manaCost FROM cards AS T1 JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.side IS NULL ORDER BY T1.manaCost DESC LIMIT 1;", "SELECT artist, MAX(convertedManaCost) AS maxConvertedManaCost FROM cards WHERE side IS NULL GROUP BY artist ORDER BY maxConvertedManaCost DESC LIMIT 1;", "SELECT T1.artist, T2.flavorText FROM cards AS T1 JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.side IS NULL ORDER BY T1.convertedManaCost DESC LIMIT 1;"]}, {"question_id": 511, "answer_sql": ["SELECT MAX(frameEffects) AS most_common_frame_effects FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL;"]}, {"question_id": 512, "answer_sql": ["SELECT COUNT(*) FROM cards WHERE power IS NULL OR power = '*' AND hasFoil = 0 AND duelDeck = 'a';"]}, {"question_id": 513, "answer_sql": ["SELECT s.id FROM sets s JOIN legalities l ON s.id = l.id WHERE s.type = 'commander' GROUP BY s.id ORDER BY SUM(CASE WHEN s.isFoilOnly = 0 AND s.isNonFoilOnly = 0 AND s.isOnlineOnly = 0 THEN 1 ELSE 0 END) DESC LIMIT 1;"]}, {"question_id": 514, "answer_sql": []}, {"question_id": 515, "answer_sql": []}, {"question_id": 516, "answer_sql": ["SELECT COUNT(*) AS card_count FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE artist = 'Volkan Baga' AND language = 'French';"]}, {"question_id": 517, "answer_sql": ["SELECT COUNT(T1.id) AS rare_enchantment_cards FROM cards AS T1 JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'rare' AND T1.types = 'Enchantment' AND T2.status = 'Legal';"]}, {"question_id": 518, "answer_sql": ["SELECT T2.format, T1.name FROM cards AS T1 JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'banned' GROUP BY T2.format ORDER BY COUNT(T2.format) DESC LIMIT 1;"]}, {"question_id": 519, "answer_sql": []}, {"question_id": 520, "answer_sql": []}, {"question_id": 521, "answer_sql": []}, {"question_id": 522, "answer_sql": []}, {"question_id": 523, "answer_sql": []}, {"question_id": 524, "answer_sql": ["SELECT c.artist FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.borderColor = 'black' AND c.availability = 'arena';"]}, {"question_id": 525, "answer_sql": ["SELECT T1.uuid FROM cards AS T1 JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status IN ('banned', 'restricted');"]}, {"question_id": 526, "answer_sql": ["SELECT COUNT(id) AS numberOfCards FROM cards WHERE artist = 'Matthew D. Wilson' AND availability = 'paper';"]}, {"question_id": 527, "answer_sql": []}, {"question_id": 528, "answer_sql": ["SELECT cards.name FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.name IN ( SELECT name FROM sets WHERE setCode = 'Hour of Devastation' )"]}, {"question_id": 529, "answer_sql": ["SELECT DISTINCT T1.name FROM sets AS T1 LEFT JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Korean' AND T2.translation IS NOT NULL AND T2.translation NOT LIKE '%Japanese%'"]}, {"question_id": 530, "answer_sql": []}, {"question_id": 531, "answer_sql": ["SELECT DisplayName, Reputation FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') ORDER BY Reputation DESC LIMIT 1;"]}, {"question_id": 532, "answer_sql": []}, {"question_id": 533, "answer_sql": ["SELECT COUNT(DISTINCT u.Id) AS UsersLastAccessedAfter20140901 FROM users u WHERE u.LastAccessDate > '2014-09-01 00:00:00';"]}, {"question_id": 534, "answer_sql": ["SELECT DisplayName FROM users WHERE Views = (SELECT MAX(Views) FROM users)"]}, {"question_id": 535, "answer_sql": ["SELECT COUNT(DISTINCT u.Id) AS NumberOfUsersWithMoreThan100UpvotesAndMoreThan1Downvotes FROM users u JOIN votes v ON u.Id = v.UserId WHERE u.UpVotes > 100 AND u.DownVotes > 1;"]}, {"question_id": 536, "answer_sql": ["SELECT COUNT(DISTINCT u.Id) AS NumberOfUsers FROM users u WHERE u.Views > 10 AND u.CreationDate > '2013-12-31';", "SELECT COUNT(DISTINCT u.Id) AS NumberOfUsers FROM users u JOIN votes v ON u.Id = v.UserId WHERE u.Views > 10 AND u.CreationDate > '2013-12-31';"]}, {"question_id": 537, "answer_sql": ["SELECT COUNT(DISTINCT p.Id) AS PostCount FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE u.DisplayName = 'csgillespie';"]}, {"question_id": 538, "answer_sql": ["SELECT T2.Title FROM users AS T1 JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'csgillespie';"]}, {"question_id": 539, "answer_sql": ["SELECT u.DisplayName FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE p.Title = 'Eliciting priors from experts';"]}, {"question_id": 540, "answer_sql": ["SELECT T1.Title FROM posts AS T1 JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie' ORDER BY T1.ViewCount DESC LIMIT 1;"]}, {"question_id": 541, "answer_sql": ["SELECT u.DisplayName FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE p.FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts) ORDER BY u.DisplayName ASC LIMIT 1;"]}, {"question_id": 542, "answer_sql": ["SELECT SUM(T2.CommentCount) AS TotalComments FROM users AS T1 JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'csgillespie';", "SELECT SUM(CommentCount) AS TotalComments FROM posts WHERE OwnerDisplayName = 'csgillespie';"]}, {"question_id": 543, "answer_sql": ["SELECT MAX(posts.AnswerCount) AS MaxAnswers FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'csgillespie';"]}, {"question_id": 544, "answer_sql": ["SELECT T2.DisplayName FROM posts AS T1 JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Examples for teaching: Correlation does not mean causation' AND T1.LastEditorUserId = T2.Id", "SELECT T2.DisplayName FROM posts AS T1 JOIN users AS T2 ON T1.OwnerUserId = T2.Id JOIN postHistory AS T3 ON T1.Id = T3.PostId WHERE T1.Title = 'Examples for teaching: Correlation does not mean causation' AND T3.UserId = T1.LastEditorUserId;"]}, {"question_id": 545, "answer_sql": ["SELECT COUNT(T1.ParentId) AS RootPostsCount FROM posts AS T1 JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie' AND T1.ParentId IS NULL;"]}, {"question_id": 546, "answer_sql": ["SELECT DISTINCT u.DisplayName FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE p.ClosedDate IS NOT NULL;", "SELECT DisplayName FROM users WHERE Id IN ( SELECT OwnerUserId FROM posts WHERE ClosedDate IS NOT NULL )"]}, {"question_id": 547, "answer_sql": ["SELECT COUNT(T1.Id) AS NumberOfPosts FROM posts AS T1 JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.Age > 65 AND T1.Score >= 20;"]}, {"question_id": 548, "answer_sql": ["SELECT T1.Location FROM users AS T1 JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.Title = 'Eliciting priors from experts'"]}, {"question_id": 549, "answer_sql": ["SELECT T2.Body FROM tags AS T1 JOIN posts AS T2 ON T1.ExcerptPostId = T2.Id WHERE T1.TagName = 'bayesian';"]}, {"question_id": 550, "answer_sql": ["SELECT p.Body, t.TagName FROM tags t JOIN posts p ON t.ExcerptPostId = p.Id WHERE t.Count = (SELECT MAX(Count) FROM tags) ORDER BY p.ViewCount DESC LIMIT 1;", "SELECT p.Body FROM posts p JOIN tags t ON p.Id = t.ExcerptPostId WHERE t.Count = (SELECT MAX(Count) FROM tags) ORDER BY p.ViewCount DESC LIMIT 1;"]}, {"question_id": 551, "answer_sql": ["SELECT COUNT(*) AS BadgeCount FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie');"]}, {"question_id": 552, "answer_sql": ["SELECT DISTINCT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'csgillespie';"]}, {"question_id": 553, "answer_sql": []}, {"question_id": 554, "answer_sql": ["SELECT DisplayName FROM users WHERE Id = (SELECT UserId FROM badges GROUP BY UserId ORDER BY COUNT(Id) DESC LIMIT 1);"]}, {"question_id": 555, "answer_sql": ["SELECT AVG(posts.Score) AS AverageScore FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'csgillespie';"]}, {"question_id": 556, "answer_sql": []}, {"question_id": 557, "answer_sql": []}, {"question_id": 558, "answer_sql": ["SELECT COUNT(v.Id) AS VoteCount FROM votes v JOIN users u ON v.UserId = u.Id WHERE u.Id = 58 AND v.CreationDate = '2010-07-19';"]}, {"question_id": 559, "answer_sql": ["SELECT MAX(T1.CreationDate) AS MaxVotesCreationDate FROM votes AS T1 WHERE T1.VoteTypeId = (SELECT MAX(T2.VoteTypeId) FROM votes AS T2 GROUP BY T2.PostId)", "SELECT MAX(T1.CreationDate) AS MaxVotesCreationDate FROM votes AS T1 WHERE T1.VoteTypeId = (SELECT MAX(T2.VoteTypeId) FROM votes AS T2 GROUP BY T2.VoteTypeId)", "SELECT CreationDate FROM votes GROUP BY CreationDate ORDER BY COUNT(Id) DESC LIMIT 1;"]}, {"question_id": 560, "answer_sql": ["SELECT COUNT(T1.Id) AS Revival_Badges FROM badges AS T1 JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Name = 'Revival';"]}, {"question_id": 561, "answer_sql": ["SELECT posts.Title FROM posts JOIN comments ON posts.Id = comments.PostId WHERE comments.Score = (SELECT MAX(comments.Score) FROM comments) ORDER BY posts.Score DESC LIMIT 1;"]}, {"question_id": 562, "answer_sql": ["SELECT COUNT(comments.Id) AS CommentCount FROM comments WHERE comments.PostId = ( SELECT posts.Id FROM posts WHERE posts.ViewCount = 1910 );"]}, {"question_id": 563, "answer_sql": ["SELECT T2.FavoriteCount FROM users AS T1 JOIN votes AS T3 ON T1.Id = T3.UserId JOIN posts AS T2 ON T3.PostId = T2.Id JOIN comments AS T4 ON T2.Id = T4.PostId WHERE T1.Id = 3025 AND T4.CreationDate = '2014-04-23 20:29:39.0';", "SELECT T1.FavoriteCount FROM posts AS T1 JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T2.UserId = '3025' AND T2.CreationDate = '2014-04-23 20:29:39.0';"]}, {"question_id": 564, "answer_sql": []}, {"question_id": 565, "answer_sql": ["SELECT p.Id AS PostId FROM posts p JOIN comments c ON p.Id = c.PostId WHERE c.UserId = 23853 AND c.CreationDate = '2013-07-12 09:08:18.0' AND p.ClosedDate IS NULL;"]}, {"question_id": 566, "answer_sql": ["SELECT Reputation FROM users WHERE Id = (SELECT OwnerUserId FROM posts WHERE Id = '65041');"]}, {"question_id": 567, "answer_sql": ["SELECT COUNT(DISTINCT OwnerUserId) AS NumberOfPosts FROM posts WHERE OwnerDisplayName = 'Tiago Pasqualini';", "SELECT COUNT(T1.Id) AS PostCount FROM users AS T1 JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Tiago Pasqualini';"]}, {"question_id": 568, "answer_sql": ["SELECT DisplayName FROM users WHERE Id = (SELECT UserId FROM votes WHERE Id = 381800);"]}, {"question_id": 569, "answer_sql": ["SELECT COUNT(v.Id) AS VoteCount FROM votes v JOIN posts p ON v.PostId = p.Id WHERE p.Title LIKE '%data visualization%';"]}, {"question_id": 570, "answer_sql": ["SELECT T2.Name FROM users AS T1 JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'DatEpicCoderGuyWhoPrograms';"]}, {"question_id": 571, "answer_sql": []}, {"question_id": 572, "answer_sql": ["SELECT SUM(ViewCount) AS TotalViews FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer';"]}, {"question_id": 573, "answer_sql": ["SELECT Text FROM comments WHERE Score = 17;"]}, {"question_id": 574, "answer_sql": ["SELECT DisplayName FROM users WHERE WebsiteUrl = 'http://stackoverflow.com';"]}, {"question_id": 575, "answer_sql": ["SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'SilentGhost';"]}, {"question_id": 576, "answer_sql": ["SELECT c.UserId FROM comments c JOIN users u ON c.UserId = u.Id WHERE c.Text = 'thank you user93';"]}, {"question_id": 577, "answer_sql": ["SELECT c.Text FROM comments c JOIN users u ON c.UserId = u.Id WHERE u.DisplayName = 'A Lion';"]}, {"question_id": 578, "answer_sql": ["SELECT u.DisplayName, u.Reputation FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE p.Title = 'Understanding what Dassault iSight is doing?';"]}, {"question_id": 579, "answer_sql": ["SELECT c.Text FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.Title = 'How does gentle boosting differ from AdaBoost?'"]}, {"question_id": 580, "answer_sql": ["SELECT DisplayName FROM users WHERE Id IN ( SELECT UserId FROM badges WHERE Name = 'Necromancer' )"]}, {"question_id": 581, "answer_sql": []}, {"question_id": 582, "answer_sql": ["SELECT T1.Title FROM posts AS T1 JOIN postHistory AS T2 ON T1.Id = T2.PostId JOIN users AS T3 ON T2.UserId = T3.Id WHERE T3.DisplayName = 'Vebjorn Ljosa' AND T2.Comment IS NOT NULL;"]}, {"question_id": 583, "answer_sql": ["SELECT p.Score, u.WebsiteUrl FROM posts p JOIN users u ON p.OwnerUserId = u.Id JOIN postHistory ph ON p.Id = ph.PostId WHERE ph.UserId = (SELECT Id FROM users WHERE DisplayName = 'Yevgeny')"]}, {"question_id": 584, "answer_sql": ["SELECT c.Text FROM comments c JOIN postHistory ph ON c.PostId = ph.PostId JOIN posts p ON ph.PostId = p.Id WHERE p.Title = 'Why square the difference instead of taking the absolute value in standard deviation?' AND c.UserId IN ( SELECT u.Id FROM users u JOIN votes v ON u.Id = v.UserId WHERE v.VoteTypeId = 2 )"]}, {"question_id": 585, "answer_sql": []}, {"question_id": 586, "answer_sql": ["SELECT u.DisplayName FROM users u JOIN votes v ON u.Id = v.UserId JOIN posts p ON v.PostId = p.Id WHERE p.Title LIKE '%variance%' AND v.BountyAmount = 50;"]}, {"question_id": 587, "answer_sql": []}, {"question_id": 588, "answer_sql": ["SELECT COUNT(DISTINCT c.Id) AS TotalComments FROM comments c JOIN users u ON c.UserId = u.Id WHERE u.Id = 13;"]}, {"question_id": 589, "answer_sql": ["SELECT Id FROM users ORDER BY Reputation DESC LIMIT 1;"]}, {"question_id": 590, "answer_sql": ["SELECT Id FROM users ORDER BY Views ASC LIMIT 1;"]}, {"question_id": 591, "answer_sql": ["SELECT COUNT(DISTINCT T1.UserId) AS NumberOfUsersAwardedSupporterBadge FROM badges AS T1 JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Date BETWEEN '2011-01-01' AND '2011-12-31';"]}, {"question_id": 592, "answer_sql": []}, {"question_id": 593, "answer_sql": []}, {"question_id": 594, "answer_sql": ["SELECT DisplayName, Reputation FROM users WHERE Id = (SELECT OwnerUserId FROM posts WHERE Id = 1);"]}, {"question_id": 595, "answer_sql": []}, {"question_id": 596, "answer_sql": ["SELECT u.DisplayName, b.Name FROM users u JOIN ( SELECT UserId, COUNT(Id) AS CommentCount FROM comments GROUP BY UserId ORDER BY CommentCount DESC LIMIT 1 ) c ON u.Id = c.UserId JOIN badges b ON u.Id = b.UserId;"]}, {"question_id": 597, "answer_sql": []}, {"question_id": 598, "answer_sql": []}, {"question_id": 599, "answer_sql": ["SELECT pht.Id, COUNT(DISTINCT ch.UserId) AS UniqueUsers FROM postHistory pht JOIN postLinks pl ON pht.Id = pl.Id JOIN postHistory ch ON pl.Id = ch.Id WHERE pht.PostId = 3720 GROUP BY pht.Id;", "SELECT pht.Id, COUNT(DISTINCT ch.UserId) AS UniqueUsers FROM postHistory pht JOIN comments ch ON pht.PostId = ch.PostId WHERE pht.PostId = 3720 GROUP BY pht.Id;"]}, {"question_id": 600, "answer_sql": ["SELECT p.Id, p.ViewCount FROM posts p JOIN postLinks pl ON p.Id = pl.PostId JOIN posts plPost ON pl.RelatedPostId = plPost.Id WHERE plPost.Id = 61217;", "SELECT p.Id, p.ViewCount FROM posts p JOIN postLinks pl ON p.Id = pl.PostId JOIN posts r ON pl.RelatedPostId = r.Id WHERE p.Id = 61217;"]}, {"question_id": 601, "answer_sql": []}, {"question_id": 602, "answer_sql": ["SELECT p.Id, u.Id FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.Score > 60;"]}, {"question_id": 603, "answer_sql": []}, {"question_id": 604, "answer_sql": []}, {"question_id": 605, "answer_sql": ["SELECT COUNT(DISTINCT T1.UserId) AS NumberOfUsersWithAnnouncerBadge FROM badges AS T1 JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Name = 'Announcer';"]}, {"question_id": 606, "answer_sql": ["SELECT DISTINCT T1.Name FROM badges AS T1 JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Date = '2010-07-19 19:39:08';"]}, {"question_id": 607, "answer_sql": ["SELECT COUNT(DISTINCT c.Id) AS PositiveCommentsCount FROM comments c WHERE c.Score > 60;"]}, {"question_id": 608, "answer_sql": ["SELECT c.Text FROM comments c JOIN users u ON c.UserId = u.Id WHERE c.CreationDate = '2010-07-19 19:16:14.0';"]}, {"question_id": 609, "answer_sql": ["SELECT COUNT(Id) AS NumberOfPostsWithScore10 FROM posts WHERE Score = 10;"]}, {"question_id": 610, "answer_sql": ["SELECT DISTINCT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Reputation = (SELECT MAX(Reputation) FROM users) ORDER BY u.Reputation DESC;", "SELECT DISTINCT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Reputation = (SELECT MAX(Reputation) FROM users) ORDER BY b.Name;"]}, {"question_id": 611, "answer_sql": []}, {"question_id": 612, "answer_sql": ["SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'Pierre';"]}, {"question_id": 613, "answer_sql": ["SELECT DISTINCT b.Date FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Location = 'Rochester, NY';"]}, {"question_id": 614, "answer_sql": ["SELECT CAST(COUNT(DISTINCT UserId) AS REAL) * 100 / COUNT(DISTINCT UserId) AS Percentage FROM badges WHERE Name = 'Teacher';"]}, {"question_id": 615, "answer_sql": []}, {"question_id": 616, "answer_sql": ["SELECT T2.Score FROM users AS T1 JOIN votes AS T3 ON T1.Id = T3.UserId JOIN posts AS T2 ON T3.PostId = T2.Id JOIN comments AS T4 ON T2.Id = T4.PostId WHERE T4.CreationDate = '2010-07-19 19:19:56.0';"]}, {"question_id": 617, "answer_sql": ["SELECT c.Text FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.CreaionDate = '2010-07-19 19:37:33.0'", "SELECT c.Id AS CommentId, c.PostId AS PostId, c.Score AS Score, c.Text AS CommentText, c.CreationDate AS CommentCreationDate, u.DisplayName AS CommenterDisplayName FROM comments c JOIN users u ON c.UserId = u.Id WHERE c.CreationDate = '2010-07-19 19:37:33.0'"]}, {"question_id": 618, "answer_sql": ["SELECT U.DisplayName, U.Age FROM users U JOIN badges B ON U.Id = B.UserId WHERE U.Location = 'Vienna, Austria' AND B.Name = 'badge_name';"]}, {"question_id": 619, "answer_sql": ["SELECT COUNT(DISTINCT b.UserId) AS AdultBadgeCount FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Age BETWEEN 19 AND 65;"]}, {"question_id": 620, "answer_sql": ["SELECT COUNT(T1.Views) AS ViewsCount FROM users AS T1 JOIN badges AS T2 ON T1.Id = T2.UserId JOIN posts AS T3 ON T1.Id = T3.OwnerUserId WHERE T2.Date = '2010-07-19 19:39:08.0';", "SELECT COUNT(DISTINCT u.Id) AS Views FROM users u JOIN badges b ON u.Id = b.UserId JOIN posts p ON u.Id = p.OwnerUserId WHERE b.Date = '2010-07-19 19:39:08.0'", "SELECT COUNT(T1.Views) AS ViewsCount FROM users AS T1 JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Date = '2010-07-19 19:39:08.0';"]}, {"question_id": 621, "answer_sql": ["SELECT DISTINCT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Reputation = (SELECT MIN(Reputation) FROM users)", "SELECT DISTINCT b.Name FROM badges b JOIN users u ON b.UserId = u.Id ORDER BY u.Reputation ASC LIMIT 1;", "SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Reputation = (SELECT MIN(Reputation) FROM users) ORDER BY u.Reputation ASC;"]}, {"question_id": 622, "answer_sql": ["SELECT T1.Name FROM badges AS T1 JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Sharpie';"]}, {"question_id": 623, "answer_sql": ["SELECT COUNT(*) AS EldersWithSupporterBadge FROM users u JOIN badges b ON u.Id = b.UserId WHERE u.Age > 65 AND b.Name = 'Supporter';"]}, {"question_id": 624, "answer_sql": ["SELECT DisplayName FROM users WHERE Id = 30;"]}, {"question_id": 625, "answer_sql": ["SELECT COUNT(DISTINCT u.Id) AS NumberOfUsersFromNewYork FROM users u JOIN posts p ON u.Id = p.OwnerUserId JOIN tags t ON p.Id = t.ExcerptPostId WHERE u.Location = 'New York';"]}, {"question_id": 626, "answer_sql": []}, {"question_id": 627, "answer_sql": ["SELECT COUNT(DISTINCT u.Id) AS AdultUsers FROM users u WHERE u.Age BETWEEN 19 AND 65;"]}, {"question_id": 628, "answer_sql": ["SELECT DisplayName FROM users WHERE Views = (SELECT MAX(Views) FROM users);"]}, {"question_id": 629, "answer_sql": []}, {"question_id": 630, "answer_sql": ["SELECT T2.tagName FROM users AS T1 JOIN votes AS T3 ON T1.Id = T3.UserId JOIN posts AS T4 ON T3.PostId = T4.Id JOIN postLinks AS T5 ON T4.Id = T5.PostId JOIN tags AS T2 ON T5.RelatedPostId = T2.Id WHERE T1.DisplayName = 'John Stauffer';"]}, {"question_id": 631, "answer_sql": ["SELECT COUNT(T1.Id) AS NumberOfPosts FROM users AS T1 JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Daniel Vassallo';"]}, {"question_id": 632, "answer_sql": ["SELECT COUNT(T1.Id) AS VoteCount FROM votes AS T1 JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Harlan';"]}, {"question_id": 633, "answer_sql": ["SELECT p.Id FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'slashnick' GROUP BY p.Id ORDER BY p.AnswerCount DESC LIMIT 1;", "SELECT p.Id FROM posts p JOIN votes v ON p.Id = v.PostId GROUP BY p.Id ORDER BY AnswerCount DESC LIMIT 1;"]}, {"question_id": 634, "answer_sql": ["SELECT p.Id AS PostId, p.Title AS PostTitle, p.ViewCount AS ViewCount FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName IN ('Harvey Motulsky', 'Noah Snyder') ORDER BY p.ViewCount DESC LIMIT 1;"]}, {"question_id": 635, "answer_sql": ["SELECT COUNT(*) AS NumberOfPosts FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'Matt Parker' AND p.Score > 4;"]}, {"question_id": 636, "answer_sql": ["SELECT COUNT(T1.Score) AS NegativeComments FROM comments AS T1 JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Neil McGuigan' AND T1.Score < 60;", "SELECT COUNT(T2.Id) AS NegativeComments FROM users AS T1 JOIN votes AS T3 ON T1.Id = T3.UserId JOIN comments AS T2 ON T2.UserId = T1.Id WHERE T1.DisplayName = 'Neil McGuigan' AND T2.Score < 60;"]}, {"question_id": 637, "answer_sql": []}, {"question_id": 638, "answer_sql": ["SELECT DISTINCT T1.DisplayName FROM users AS T1 JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Organizer';"]}, {"question_id": 639, "answer_sql": []}, {"question_id": 640, "answer_sql": []}, {"question_id": 641, "answer_sql": ["SELECT COUNT(DISTINCT T1.UserId) AS NumberOfUsers FROM badges AS T1 JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Date >= '2014-01-01' AND T1.Date < '2015-01-01';", "SELECT COUNT(DISTINCT b.UserId) AS NumberOfUsers FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.DisplayName LIKE '%commentator%' AND u.DisplayName LIKE '%2014%'"]}, {"question_id": 642, "answer_sql": []}, {"question_id": 643, "answer_sql": ["SELECT DisplayName, Age FROM users WHERE Id = (SELECT OwnerUserId FROM posts ORDER BY ViewCount DESC LIMIT 1);"]}, {"question_id": 644, "answer_sql": ["SELECT p.CreaionDate AS LastEditDate, u.Id AS LastEditorUserId FROM posts p JOIN users u ON p.LastEditorUserId = u.Id WHERE p.Title = 'Detecting a given face in a database of facial images';", "SELECT p.CreaionDate AS LastEditDate, u.Id AS LastEditorUserId FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.Title = 'Detecting a given face in a database of facial images';"]}, {"question_id": 645, "answer_sql": ["SELECT COUNT(*) AS NegativeComments FROM comments WHERE Score < 60 AND UserId = 13;"]}, {"question_id": 646, "answer_sql": ["SELECT p.Title, u.DisplayName FROM posts p JOIN comments c ON p.Id = c.PostId JOIN users u ON c.UserId = u.Id WHERE c.Score > 60;"]}, {"question_id": 647, "answer_sql": []}, {"question_id": 648, "answer_sql": ["SELECT u.DisplayName, u.WebsiteUrl FROM users u JOIN posts p ON u.Id = p.OwnerUserId JOIN votes v ON p.Id = v.PostId WHERE p.FavoriteCount > 150;"]}, {"question_id": 649, "answer_sql": ["SELECT p.Id AS PostId, COUNT(ph.Id) AS PostHistoryCount, MAX(ph.CreationDate) AS LastEditDate FROM posts p JOIN postHistory ph ON p.Id = ph.PostId WHERE p.Title = 'What is the best introductory Bayesian statistics textbook?' GROUP BY p.Id ORDER BY PostHistoryCount DESC;"]}, {"question_id": 650, "answer_sql": ["SELECT u.DisplayName, u.Location, p.LasActivityDate FROM users u JOIN votes v ON u.Id = v.UserId JOIN posts p ON p.OwnerUserId = u.Id JOIN badges b ON b.UserId = u.Id WHERE b.Name = 'Outliers';"]}, {"question_id": 651, "answer_sql": ["SELECT T2.Title FROM posts AS T1 JOIN postLinks AS T3 ON T1.Id = T3.PostId JOIN posts AS T2 ON T3.RelatedPostId = T2.Id WHERE T1.Title = 'How to tell if something happened in a data set which monitors a value over time';"]}, {"question_id": 652, "answer_sql": []}, {"question_id": 653, "answer_sql": ["SELECT u.DisplayName FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE p.ViewCount = (SELECT MAX(ViewCount) FROM posts) ORDER BY p.ViewCount DESC LIMIT 1;"]}, {"question_id": 654, "answer_sql": []}, {"question_id": 655, "answer_sql": ["SELECT p.Title, pl.LinkTypeId FROM posts p JOIN postLinks pl ON p.Id = pl.PostId WHERE p.Title = 'What are principal component scores?';"]}, {"question_id": 656, "answer_sql": ["SELECT T2.DisplayName FROM posts AS T1 JOIN votes AS T3 ON T1.Id = T3.PostId JOIN users AS T2 ON T2.Id = T1.OwnerUserId WHERE T1.ParentId IS NOT NULL ORDER BY T1.Score DESC LIMIT 1;"]}, {"question_id": 657, "answer_sql": ["SELECT u.DisplayName, u.WebsiteUrl FROM votes v JOIN users u ON v.UserId = u.Id WHERE v.VoteTypeId = 8 ORDER BY v.BountyAmount DESC LIMIT 1;"]}, {"question_id": 658, "answer_sql": ["SELECT T1.Title, T1.ViewCount FROM posts AS T1 ORDER BY T1.ViewCount DESC LIMIT 5;"]}, {"question_id": 659, "answer_sql": ["SELECT COUNT(T1.Id) AS TagCount FROM tags AS T1 WHERE T1.Count BETWEEN 5000 AND 7000;"]}, {"question_id": 660, "answer_sql": ["SELECT OwnerUserId FROM posts WHERE FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts)"]}, {"question_id": 661, "answer_sql": ["SELECT MAX(T1.Reputation) AS MostInfluentialAge FROM users AS T1 WHERE T1.AccountId = ( SELECT T2.AccountId FROM users AS T2 GROUP BY T2.AccountId ORDER BY COUNT(*) DESC LIMIT 1 );", "SELECT Age FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users)", "SELECT MAX(T1.Reputation) AS MostInfluentialAge FROM users AS T1 WHERE T1.AccountId = (SELECT T2.AccountId FROM users AS T2 WHERE T2.Reputation = (SELECT MAX(Reputation) FROM users))"]}, {"question_id": 662, "answer_sql": []}, {"question_id": 663, "answer_sql": ["SELECT Id FROM users ORDER BY Age ASC LIMIT 1;"]}, {"question_id": 664, "answer_sql": ["SELECT MAX(posts.Score) AS MostPopularTagScore FROM posts JOIN tags ON posts.Id = tags.ExcerptPostId GROUP BY posts.Score;"]}, {"question_id": 665, "answer_sql": []}, {"question_id": 666, "answer_sql": ["SELECT MAX(posts.Id) AS PostId FROM posts JOIN votes ON posts.Id = votes.PostId JOIN users ON votes.UserId = users.Id WHERE users.Id = 1465 GROUP BY posts.Id ORDER BY posts.FavoriteCount DESC LIMIT 1;", "SELECT MAX(posts.Id) AS MostValuablePostId FROM posts JOIN votes ON posts.Id = votes.PostId JOIN users ON votes.UserId = users.Id WHERE users.Id = 1465;"]}, {"question_id": 667, "answer_sql": ["SELECT T1.Title FROM posts AS T1 JOIN postLinks AS T2 ON T1.Id = T2.PostId ORDER BY T2.CreationDate ASC LIMIT 1;"]}, {"question_id": 668, "answer_sql": ["SELECT DisplayName FROM users WHERE Id = (SELECT UserId FROM badges GROUP BY UserId ORDER BY COUNT(Name) DESC LIMIT 1)"]}, {"question_id": 669, "answer_sql": ["SELECT MIN(T1.CreationDate) AS FirstVoteDate FROM votes AS T1 JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'chl';", "SELECT MIN(T1.CreationDate) AS FirstVoteDate FROM votes AS T1 JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'chl' GROUP BY T1.CreationDate;"]}, {"question_id": 670, "answer_sql": ["SELECT MIN(T1.CreaionDate) AS Date FROM posts AS T1 JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.Age = (SELECT MIN(Age) FROM users);"]}, {"question_id": 671, "answer_sql": ["SELECT DisplayName FROM users WHERE Id = (SELECT UserId FROM badges WHERE Name = 'Autobiographer' ORDER BY Date ASC LIMIT 1);"]}, {"question_id": 672, "answer_sql": ["SELECT COUNT(DISTINCT u.Id) AS UserCount FROM users u JOIN posts p ON u.Id = p.OwnerUserId JOIN votes v ON p.Id = v.PostId WHERE u.Location = 'United Kingdom' GROUP BY u.Id HAVING SUM(CASE WHEN v.VoteTypeId = 1 THEN 1 ELSE 0 END) >= 4;"]}, {"question_id": 673, "answer_sql": ["SELECT AVG(v.PostId) AS AverageNumberOfPostsVoted FROM votes v JOIN users u ON v.UserId = u.Id WHERE u.Age = (SELECT MAX(Age) FROM users);"]}, {"question_id": 674, "answer_sql": ["SELECT DisplayName FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users)"]}, {"question_id": 675, "answer_sql": ["SELECT COUNT(DISTINCT u.Id) AS NumberOfUsers FROM users u JOIN votes v ON u.Id = v.UserId WHERE u.Reputation > 2000 AND u.Views > 1000;"]}, {"question_id": 676, "answer_sql": []}, {"question_id": 677, "answer_sql": []}, {"question_id": 678, "answer_sql": ["SELECT posts.Id, posts.Title FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'Harvey Motulsky' ORDER BY posts.ViewCount DESC LIMIT 1;"]}, {"question_id": 679, "answer_sql": ["SELECT Id, Title FROM posts ORDER BY Score DESC LIMIT 1;"]}, {"question_id": 680, "answer_sql": ["SELECT AVG(posts.Score) AS AverageScore FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'Stephen Turner';"]}, {"question_id": 681, "answer_sql": []}, {"question_id": 682, "answer_sql": []}, {"question_id": 683, "answer_sql": []}, {"question_id": 684, "answer_sql": ["SELECT CAST(COUNT(CASE WHEN Age BETWEEN 13 AND 18 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(Id) AS Percentage FROM users;", "SELECT COUNT(CASE WHEN Age BETWEEN 13 AND 18 THEN 1 ELSE NULL END) * 100.0 / COUNT(Id) AS percentage FROM users WHERE Age BETWEEN 13 AND 18;", "SELECT (COUNT(CASE WHEN Age BETWEEN 13 AND 18 THEN 1 ELSE NULL END) / COUNT(Id)) * 100 AS percentage FROM users;"]}, {"question_id": 685, "answer_sql": ["SELECT u.DisplayName, SUM(p.ViewCount) AS TotalViews FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.Title = 'Computer Game Datasets' GROUP BY u.Id ORDER BY TotalViews DESC LIMIT 1;"]}, {"question_id": 686, "answer_sql": ["SELECT COUNT(*) AS TotalPostsAboveAverage FROM posts WHERE ViewCount > (SELECT AVG(ViewCount) FROM posts);"]}, {"question_id": 687, "answer_sql": ["SELECT COUNT(*) AS CommentCount FROM comments WHERE Score = (SELECT MAX(Score) FROM posts);"]}, {"question_id": 688, "answer_sql": ["SELECT COUNT(DISTINCT p.Id) AS NumberOfPosts FROM posts p JOIN votes v ON p.Id = v.PostId WHERE p.ViewCount > 35000 AND v.VoteTypeId = 2 AND p.CommentCount = 0;", "SELECT COUNT(DISTINCT p.Id) AS NumberOfPosts FROM posts p JOIN votes v ON p.Id = v.PostId WHERE p.ViewCount > 35000 AND v.VoteTypeId = 1 AND p.CommentCount = 0;"]}, {"question_id": 689, "answer_sql": ["SELECT u.DisplayName, u.Location FROM users u JOIN posts p ON u.Id = p.OwnerUserId JOIN postLinks pl ON p.Id = pl.PostId WHERE p.Id = 183 ORDER BY pl.CreationDate DESC LIMIT 1;"]}, {"question_id": 690, "answer_sql": ["SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'Emmett' ORDER BY b.Date DESC LIMIT 1;"]}, {"question_id": 691, "answer_sql": ["SELECT COUNT(DISTINCT u.Id) AS AdultUsersWithOver5000Upvotes FROM users u JOIN votes v ON u.Id = v.UserId WHERE u.Age BETWEEN 19 AND 65 AND u.UpVotes > 5000;"]}, {"question_id": 692, "answer_sql": ["SELECT Date - stats_badges.Date AS Duration FROM badges AS stats_badges JOIN users AS users ON stats_badges.UserId = users.Id WHERE users.DisplayName = 'Zolomon';", "SELECT T1.Date - T2.CreationDate AS Duration FROM badges AS T1 JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Zolomon';"]}, {"question_id": 693, "answer_sql": ["SELECT COUNT(DISTINCT p.Id) AS NumberOfPosts, COUNT(DISTINCT c.Id) AS NumberOfComments FROM users u JOIN posts p ON u.Id = p.OwnerUserId JOIN comments c ON p.Id = c.PostId WHERE u.CreationDate = (SELECT MAX(CreationDate) FROM users)"]}, {"question_id": 694, "answer_sql": []}, {"question_id": 695, "answer_sql": ["SELECT COUNT(DISTINCT T1.UserId) AS NumberOfUsersWithCitizenPatrolBadge FROM badges AS T1 JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Name = 'Citizen Patrol';"]}, {"question_id": 696, "answer_sql": ["SELECT COUNT(DISTINCT p.Id) AS PostCount FROM posts p JOIN tags t ON p.Id = t.ExcerptPostId WHERE t.TagName = 'careers';", "SELECT COUNT(T1.Id) AS NumberOfPostsWithCareersTag FROM tags AS T1 JOIN posts AS T2 ON T1.Id = T2.Tags WHERE T1.TagName = 'careers';"]}, {"question_id": 697, "answer_sql": ["SELECT u.Reputation, p.ViewCount FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE u.DisplayName = 'Jarrod Dixon';"]}, {"question_id": 698, "answer_sql": ["SELECT COUNT(DISTINCT c.Id) AS CommentCount, COUNT(DISTINCT p.Id) AS AnswerCount FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.Title = 'Clustering 1D data';"]}, {"question_id": 699, "answer_sql": ["SELECT CreationDate FROM users WHERE DisplayName = 'IrishStat';"]}, {"question_id": 700, "answer_sql": []}, {"question_id": 701, "answer_sql": ["SELECT CAST((SUM(CASE WHEN T1.Score > 50 THEN 1 ELSE 0 END) * 100) / COUNT(T1.Score) AS REAL) AS Percentage FROM posts AS T1 JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.Reputation = ( SELECT MAX(Reputation) FROM users );"]}, {"question_id": 702, "answer_sql": ["SELECT COUNT(*) AS NumberOfPostsWithScoreLessThan20 FROM posts WHERE Score < 20;"]}, {"question_id": 703, "answer_sql": ["SELECT COUNT(T2.Id) AS Count FROM tags AS T1 JOIN posts AS T2 ON T1.Id = T2.Id WHERE T1.Id < 15 AND T1.Count <= 20;"]}, {"question_id": 704, "answer_sql": ["SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'sample';"]}, {"question_id": 705, "answer_sql": ["SELECT u.Reputation, COUNT(v.Id) AS UpVotes FROM users u JOIN votes v ON u.Id = v.UserId JOIN comments c ON u.Id = c.UserId WHERE c.Text = 'fine, you win :)' GROUP BY u.Id;"]}, {"question_id": 706, "answer_sql": ["SELECT c.Text FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.Title = 'How can I adapt ANOVA for binary data?'"]}, {"question_id": 707, "answer_sql": ["SELECT c.Id, c.Score FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.ViewCount BETWEEN 100 AND 150 ORDER BY c.Score DESC LIMIT 1;"]}, {"question_id": 708, "answer_sql": []}, {"question_id": 709, "answer_sql": ["SELECT COUNT(T1.PostId) AS NumberOfPosts FROM comments AS T1 JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.Score = 0 AND T2.ViewCount < 5;", "SELECT COUNT(DISTINCT c.PostId) AS PostsWithViewCountLowerThan5 FROM comments c WHERE c.Score = 0;", "SELECT COUNT(DISTINCT c.PostId) AS NumberOfPostsWithViewCountLowerThan5 FROM comments c JOIN posts p ON c.PostId = p.Id WHERE c.Score = 0 AND p.ViewCount < 5;"]}, {"question_id": 710, "answer_sql": ["SELECT COUNT(DISTINCT c.Id) AS CommentsWithZeroScore FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.CommentCount = 1 AND c.Score = 0;", "SELECT COUNT(DISTINCT c.Id) AS NumberOfCommentsWithZeroScore FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.CommentCount = 1;"]}, {"question_id": 711, "answer_sql": ["SELECT COUNT(DISTINCT T1.UserId) AS TotalUsers FROM comments AS T1 JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Score = 0 AND T2.Age = 40;", "SELECT COUNT(DISTINCT c.UserId) AS TotalUsers FROM comments c JOIN posts p ON c.PostId = p.Id WHERE c.Score = 0 AND p.OwnerUserId IN ( SELECT u.Id FROM users u WHERE u.Age = 40 );"]}, {"question_id": 712, "answer_sql": ["SELECT p.Id, c.Id AS CommentId, c.Text FROM posts p JOIN comments c ON p.Id = c.PostId WHERE p.Title = 'Group differences on a five point Likert item';"]}, {"question_id": 713, "answer_sql": ["SELECT COUNT(voteTypeId) AS UpVoteCount FROM votes WHERE PostId = ( SELECT Id FROM comments WHERE Text = 'R is also lazy evaluated.' ) AND VoteTypeId = 1;", "SELECT SUM(votes.BountyAmount) AS UpVoteNumber FROM votes JOIN comments ON votes.PostId = comments.Id WHERE comments.Text = 'R is also lazy evaluated.' AND comments.UserId = (SELECT UserId FROM comments WHERE Text = 'R is also lazy evaluated.')"]}, {"question_id": 714, "answer_sql": ["SELECT c.Text FROM comments c JOIN users u ON c.UserId = u.Id WHERE u.DisplayName = 'Harvey Motulsky';", "SELECT c.Id, c.Text, c.CreationDate, c.UserId, u.DisplayName FROM comments c JOIN users u ON c.UserId = u.Id WHERE u.DisplayName = 'Harvey Motulsky';"]}, {"question_id": 715, "answer_sql": ["SELECT DISTINCT T1.DisplayName FROM users AS T1 JOIN votes AS T2 ON T1.Id = T2.UserId JOIN comments AS T3 ON T3.UserId = T1.Id WHERE T2.VoteTypeId = 2 AND T3.Score BETWEEN 1 AND 5 AND T1.DownVotes = 0;", "SELECT DISTINCT T2.DisplayName FROM comments AS T1 JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Score BETWEEN 1 AND 5 AND T2.DownVotes = 0;", "SELECT DISTINCT c.UserId, u.DisplayName FROM comments c JOIN users u ON c.UserId = u.Id WHERE c.Score BETWEEN 1 AND 5 AND u.DownVotes = 0;"]}, {"question_id": 716, "answer_sql": []}, {"question_id": 717, "answer_sql": ["SELECT T2.power_name FROM superhero AS T1 JOIN hero_power AS T3 ON T1.id = T3.hero_id JOIN superpower AS T2 ON T3.power_id = T2.id WHERE T1.superhero_name = '3-D Man';"]}, {"question_id": 718, "answer_sql": ["SELECT COUNT(*) FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Super Strength';"]}, {"question_id": 719, "answer_sql": ["SELECT COUNT(s.id) AS num_superheroes FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Super Strength' AND s.height_cm > 200;"]}, {"question_id": 720, "answer_sql": ["SELECT superhero_name FROM superhero WHERE id IN ( SELECT hero_id FROM hero_power GROUP BY hero_id HAVING COUNT(power_id) > 15 )"]}, {"question_id": 721, "answer_sql": ["SELECT COUNT(*) AS num_superheroes FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Blue';"]}, {"question_id": 722, "answer_sql": ["SELECT T2.colour FROM superhero AS T1 JOIN alignment AS T3 ON T1.alignment_id = T3.id JOIN colour AS T2 ON T1.skin_colour_id = T2.id WHERE T1.superhero_name = 'Apocalypse';"]}, {"question_id": 723, "answer_sql": ["SELECT COUNT(*) FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'blue eyes' AND ha.attribute_value = 'Blue' AND s.id IN ( SELECT hero_id FROM hero_power hp JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Agility' );"]}, {"question_id": 724, "answer_sql": []}, {"question_id": 725, "answer_sql": ["SELECT COUNT(*) AS superhero_count FROM superhero WHERE publisher_id = ( SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics' );"]}, {"question_id": 726, "answer_sql": []}, {"question_id": 727, "answer_sql": ["SELECT T2.publisher_name FROM superhero AS T1 JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Sauron';"]}, {"question_id": 728, "answer_sql": ["SELECT COUNT(*) AS num_superheroes FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Blue' AND publisher.publisher_name = 'Marvel Comics';"]}, {"question_id": 729, "answer_sql": ["SELECT AVG(height_cm) AS average_height FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics');"]}, {"question_id": 730, "answer_sql": []}, {"question_id": 731, "answer_sql": ["SELECT COUNT(*) AS superhero_count FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'DC Comics');"]}, {"question_id": 732, "answer_sql": []}, {"question_id": 733, "answer_sql": ["SELECT COUNT(*) AS gold_eyed_superheroes FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Gold' AND publisher.publisher_name = 'Marvel Comics';"]}, {"question_id": 734, "answer_sql": []}, {"question_id": 735, "answer_sql": ["SELECT COUNT(*) AS num_superheroes FROM superhero JOIN colour ON superhero.hair_colour_id = colour.id WHERE colour.colour = 'Blond';"]}, {"question_id": 736, "answer_sql": ["SELECT s.superhero_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'Intelligence' ORDER BY ha.attribute_value ASC LIMIT 1;"]}, {"question_id": 737, "answer_sql": []}, {"question_id": 738, "answer_sql": ["SELECT COUNT(*) AS num_superheroes FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute_name = 'Durability' AND attribute_value < 50;"]}, {"question_id": 739, "answer_sql": ["SELECT superhero_name FROM superhero WHERE id IN ( SELECT hero_id FROM hero_power WHERE power_id IN ( SELECT id FROM superpower WHERE power_name = 'Death Touch' ) )"]}, {"question_id": 740, "answer_sql": []}, {"question_id": 741, "answer_sql": ["SELECT superhero_name FROM superhero WHERE superhero_name = (SELECT superhero_name FROM superhero GROUP BY superhero_name ORDER BY COUNT(superhero_name) DESC LIMIT 1);"]}, {"question_id": 742, "answer_sql": ["SELECT COUNT(*) FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Vampire';"]}, {"question_id": 743, "answer_sql": ["SELECT COUNT(h.id) AS superheroes_with_alignment, COUNT(CASE WHEN a.alignment = 'Bad' THEN h.id ELSE NULL END) AS superheroes_with_alignment_and_publisher FROM superhero h JOIN alignment a ON h.alignment_id = a.id JOIN publisher p ON h.publisher_id = p.id WHERE p.publisher_name = 'Marvel Comics'"]}, {"question_id": 744, "answer_sql": ["SELECT SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) AS difference FROM superhero AS T1 JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.alignment_id IN (SELECT id FROM alignment WHERE alignment = 'Hero')", "SELECT SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) AS difference FROM superhero AS T1 JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.alignment_id IS NOT NULL", "SELECT SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) AS difference FROM superhero AS T1 JOIN publisher AS T2 ON T1.publisher_id = T2.id;"]}, {"question_id": 745, "answer_sql": ["SELECT T1.publisher_id FROM superhero AS T1 JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Star Trek';"]}, {"question_id": 746, "answer_sql": []}, {"question_id": 747, "answer_sql": ["SELECT COUNT(*) FROM superhero WHERE full_name IS NULL;"]}, {"question_id": 748, "answer_sql": []}, {"question_id": 749, "answer_sql": ["SELECT T2.power_name FROM superhero AS T1 JOIN hero_power AS T3 ON T1.id = T3.hero_id JOIN superpower AS T2 ON T3.power_id = T2.id WHERE T1.superhero_name = 'Deathlok';"]}, {"question_id": 750, "answer_sql": ["SELECT AVG(s.weight_kg) AS average_weight FROM superhero s JOIN gender g ON s.gender_id = g.id WHERE g.gender = 'Female';"]}, {"question_id": 751, "answer_sql": ["SELECT DISTINCT sp.power_name FROM superpower sp JOIN hero_power hp ON sp.id = hp.power_id JOIN superhero su ON hp.hero_id = su.id WHERE su.gender_id = (SELECT id FROM gender WHERE gender = 'Male') LIMIT 5;"]}, {"question_id": 752, "answer_sql": ["SELECT superhero_name FROM superhero WHERE race_id = (SELECT id FROM race WHERE race = 'Alien');"]}, {"question_id": 753, "answer_sql": ["SELECT s.superhero_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id WHERE ha.attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Eye Colour') AND s.height_cm BETWEEN 170 AND 190;"]}, {"question_id": 754, "answer_sql": []}, {"question_id": 755, "answer_sql": ["SELECT superhero_name FROM superhero WHERE race_id = (SELECT id FROM race WHERE race = 'Demi-God') LIMIT 5;"]}, {"question_id": 756, "answer_sql": ["SELECT COUNT(*) FROM superhero WHERE alignment_id = 'Bad';"]}, {"question_id": 757, "answer_sql": []}, {"question_id": 758, "answer_sql": []}, {"question_id": 759, "answer_sql": ["SELECT T1.eye_colour_id, T2.colour FROM superhero AS T1 JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.height_cm = (SELECT MAX(height_cm) FROM superhero)", "SELECT T1.eye_colour_id, T2.colour FROM superhero AS T1 JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.height_cm = (SELECT MAX(weight_kg) FROM superhero)", "SELECT T1.eye_colour_id, T2.colour FROM superhero AS T1 JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.height_cm = (SELECT MAX(height_cm) FROM superhero) ORDER BY T1.height_cm DESC LIMIT 1;"]}, {"question_id": 760, "answer_sql": []}, {"question_id": 761, "answer_sql": []}, {"question_id": 762, "answer_sql": []}, {"question_id": 763, "answer_sql": ["SELECT attribute_value FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE superhero_name = 'Abomination';"]}, {"question_id": 764, "answer_sql": ["SELECT T2.power_name FROM superhero AS T1 JOIN hero_power AS T3 ON T1.id = T3.hero_id JOIN superpower AS T2 ON T3.power_id = T2.id WHERE T1.id = 1;"]}, {"question_id": 765, "answer_sql": ["SELECT COUNT(*) AS num_heroes FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'stealth';"]}, {"question_id": 766, "answer_sql": ["SELECT s.full_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id WHERE ha.attribute_id = (SELECT attribute_id FROM attribute WHERE attribute_name = 'strength') ORDER BY ha.attribute_value DESC LIMIT 1;"]}, {"question_id": 767, "answer_sql": ["SELECT AVG(height_cm) AS average_height FROM superhero WHERE skin_colour_id = 1;"]}, {"question_id": 768, "answer_sql": ["SELECT COUNT(*) AS superhero_count FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Dark Horse Comics');"]}, {"question_id": 769, "answer_sql": ["SELECT s.superhero_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE a.attribute_name = 'durability' AND sp.power_name = 'durability' AND s.publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Dark Horse Comics') ORDER BY ha.attribute_value DESC LIMIT 1;"]}, {"question_id": 770, "answer_sql": []}, {"question_id": 771, "answer_sql": []}, {"question_id": 772, "answer_sql": []}, {"question_id": 773, "answer_sql": []}, {"question_id": 774, "answer_sql": []}, {"question_id": 775, "answer_sql": []}, {"question_id": 776, "answer_sql": []}, {"question_id": 777, "answer_sql": ["SELECT gender.gender FROM superhero JOIN alignment ON superhero.alignment_id = alignment.id JOIN gender ON superhero.gender_id = gender.id WHERE superhero_name = 'Agent 13';", "SELECT gender_id FROM superhero WHERE superhero_name = 'Agent 13';"]}, {"question_id": 778, "answer_sql": []}, {"question_id": 779, "answer_sql": ["SELECT COUNT(power_id) AS power_count FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = 'Amazo';"]}, {"question_id": 780, "answer_sql": ["SELECT T2.power_name FROM superhero AS T1 JOIN hero_power AS T3 ON T1.id = T3.hero_id JOIN superpower AS T2 ON T3.power_id = T2.id WHERE T1.full_name = 'Hunter Zolomon';"]}, {"question_id": 781, "answer_sql": []}, {"question_id": 782, "answer_sql": ["SELECT superhero_name FROM superhero WHERE eye_colour_id = (SELECT id FROM colour WHERE colour = 'Black') AND hair_colour_id = (SELECT id FROM colour WHERE colour = 'Black');"]}, {"question_id": 783, "answer_sql": []}, {"question_id": 784, "answer_sql": ["SELECT s.full_name FROM superhero s JOIN race r ON s.race_id = r.id JOIN alignment a ON s.alignment_id = a.id WHERE r.race = 'Vampire';", "SELECT superhero_name FROM superhero WHERE race_id = (SELECT id FROM race WHERE race = 'Vampire');"]}, {"question_id": 785, "answer_sql": ["SELECT superhero_name FROM superhero WHERE alignment_id = (SELECT id FROM alignment WHERE alignment = 'Neutral');", "SELECT superhero_name FROM superhero WHERE alignment_id = (SELECT id FROM alignment WHERE alignment = 'Neutral') AND superhero_name IN ( SELECT superhero_name FROM hero_attribute WHERE attribute_id IN ( SELECT id FROM attribute WHERE attribute_name = 'Alignment' ) )"]}, {"question_id": 786, "answer_sql": []}, {"question_id": 787, "answer_sql": ["SELECT race.race, alignment.alignment FROM superhero JOIN alignment ON superhero.alignment_id = alignment.id JOIN gender ON superhero.gender_id = gender.id JOIN race ON superhero.race_id = race.id WHERE superhero.full_name = 'Cameron Hicks';"]}, {"question_id": 788, "answer_sql": []}, {"question_id": 789, "answer_sql": ["SELECT AVG(s.weight_kg) AS average_weight FROM superhero s JOIN race r ON s.race_id = r.id JOIN alignment a ON s.alignment_id = a.id WHERE r.race = 'Alien';"]}, {"question_id": 790, "answer_sql": ["SELECT SUM(CASE WHEN full_name = 'Emil Blonsky' THEN weight_kg ELSE 0 END) - SUM(CASE WHEN full_name = 'Charles Chandler' THEN weight_kg ELSE 0 END) AS weight_difference FROM superhero WHERE full_name IN ('Emil Blonsky', 'Charles Chandler')", "SELECT SUM(weight_kg) - SUM(weight_kg) FROM superhero WHERE full_name = 'Emil Blonsky' AND full_name = 'Charles Chandler';"]}, {"question_id": 791, "answer_sql": ["SELECT superhero_name, AVG(height_cm) AS average_height FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id GROUP BY superhero_name;"]}, {"question_id": 792, "answer_sql": ["SELECT T2.power_name FROM superhero AS T1 JOIN hero_power AS T3 ON T1.id = T3.hero_id JOIN superpower AS T2 ON T3.power_id = T2.id WHERE T1.superhero_name = 'Abomination';"]}, {"question_id": 793, "answer_sql": ["SELECT COUNT(*) FROM superhero s JOIN race r ON s.race_id = r.id WHERE r.id = 21 AND s.gender_id = 1;", "SELECT COUNT(*) FROM superhero s JOIN race r ON s.race_id = r.id WHERE r.race = 'god/eternal' AND s.gender_id = 1;", "SELECT COUNT(*) FROM superhero s JOIN race r ON s.race_id = r.id JOIN alignment a ON s.alignment_id = a.id WHERE r.id = 21 AND s.gender_id = 1;"]}, {"question_id": 794, "answer_sql": ["SELECT s1.superhero_name FROM superhero s1 JOIN hero_attribute ha1 ON s1.id = ha1.hero_id JOIN attribute a1 ON ha1.attribute_id = a1.id WHERE a1.attribute_name = 'Speed' ORDER BY ha1.attribute_value DESC LIMIT 1;"]}, {"question_id": 795, "answer_sql": ["SELECT COUNT(*) AS neutral_superheroes FROM superhero WHERE alignment_id = 3;"]}, {"question_id": 796, "answer_sql": ["SELECT attribute_name, attribute_value FROM attribute JOIN hero_attribute ON attribute.id = hero_attribute.attribute_id JOIN superhero ON superhero.id = hero_attribute.hero_id WHERE superhero_name = '3-D Man';"]}, {"question_id": 797, "answer_sql": []}, {"question_id": 798, "answer_sql": ["SELECT T2.publisher_name FROM superhero AS T1 JOIN publisher AS T2 ON T1.publisher_id = T2.id JOIN hero_attribute AS T3 ON T1.id = T3.hero_id JOIN attribute AS T4 ON T3.attribute_id = T4.id WHERE T1.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy');", "SELECT T2.publisher_name FROM superhero AS T1 JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy');"]}, {"question_id": 799, "answer_sql": ["SELECT COUNT(*) AS superhero_count FROM superhero WHERE publisher_id = 1;"]}, {"question_id": 800, "answer_sql": ["SELECT CAST(SUM(CASE WHEN eye_colour_id = 7 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM superhero;", "SELECT SUM(CASE WHEN eye_colour_id = 7 THEN 1 ELSE 0 END) * 100.0 / COUNT(*) AS percentage FROM superhero WHERE eye_colour_id = 7;"]}, {"question_id": 801, "answer_sql": ["SELECT SUM(CASE WHEN gender_id = 1 THEN 1 ELSE 0 END) / SUM(CASE WHEN gender_id = 2 THEN 1 ELSE 0 END) AS ratio FROM superhero;"]}, {"question_id": 802, "answer_sql": ["SELECT s.superhero_name FROM superhero s WHERE s.height_cm = (SELECT MAX(height_cm) FROM superhero)", "SELECT s.superhero_name FROM superhero s WHERE s.height_cm = (SELECT MAX(height_cm) FROM superhero) ORDER BY s.height_cm DESC LIMIT 1;"]}, {"question_id": 803, "answer_sql": []}, {"question_id": 804, "answer_sql": ["SELECT superhero_name FROM superhero WHERE id = 294;"]}, {"question_id": 805, "answer_sql": ["SELECT superhero_name FROM superhero WHERE weight_kg = 0 OR weight_kg IS NULL;"]}, {"question_id": 806, "answer_sql": []}, {"question_id": 807, "answer_sql": ["SELECT T2.power_name FROM superhero AS T1 JOIN hero_power AS T3 ON T1.id = T3.hero_id JOIN superpower AS T2 ON T3.power_id = T2.id WHERE T1.full_name = 'Helen Parr';"]}, {"question_id": 808, "answer_sql": []}, {"question_id": 809, "answer_sql": ["SELECT T2.publisher_name FROM superhero AS T1 JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.id = 38;"]}, {"question_id": 810, "answer_sql": []}, {"question_id": 811, "answer_sql": ["SELECT alignment.alignment, superpower.power_name FROM superhero JOIN alignment ON superhero.alignment_id = alignment.id JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = 'Atom IV';"]}, {"question_id": 812, "answer_sql": ["SELECT superhero_name FROM superhero WHERE eye_colour_id = (SELECT id FROM colour WHERE colour = 'Blue') LIMIT 5;"]}, {"question_id": 813, "answer_sql": ["SELECT AVG(attribute_value) AS average_attribute_value FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE alignment_id = 3;"]}, {"question_id": 814, "answer_sql": []}, {"question_id": 815, "answer_sql": ["SELECT COUNT(*) AS good_female_superheroes FROM superhero WHERE alignment_id = 1 AND gender_id = 2;"]}, {"question_id": 816, "answer_sql": []}, {"question_id": 817, "answer_sql": []}, {"question_id": 818, "answer_sql": ["SELECT CAST(SUM(CASE WHEN T2.gender_id = 2 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.id) AS Percentage FROM alignment AS T1 JOIN superhero AS T2 ON T1.id = T2.alignment_id WHERE T1.id = 2;"]}, {"question_id": 819, "answer_sql": ["SELECT COUNT(*) FROM superhero T1 WHERE T1.weight_kg = 0 OR T1.weight_kg IS NULL AND T1.eye_colour_id = (SELECT eye_colour_id FROM colour WHERE colour.id = 7) AND T1.eye_colour_id = (SELECT eye_colour_id FROM colour WHERE colour.id = 1);", "SELECT COUNT(*) FROM superhero T1 WHERE T1.weight_kg = 0 OR T1.weight_kg IS NULL GROUP BY T1.eye_colour_id HAVING T1.eye_colour_id = 7 OR T1.eye_colour_id = 1;", "SELECT COUNT(*) FROM superhero T1 WHERE T1.weight_kg = 0 OR T1.weight_kg IS NULL GROUP BY T1.id HAVING SUM(T1.eye_colour_id = 7) - SUM(T1.eye_colour_id = 1) > 0;", "SELECT SUM(CASE WHEN T1.eye_colour_id = 7 THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.eye_colour_id = 1 THEN 1 ELSE 0 END) FROM superhero AS T1 JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.weight_kg = 0 OR T1.weight_kg IS NULL;"]}, {"question_id": 820, "answer_sql": ["SELECT attribute_value FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE superhero_name = 'Hulk' AND attribute_name = 'Strength';"]}, {"question_id": 821, "answer_sql": []}, {"question_id": 822, "answer_sql": []}, {"question_id": 823, "answer_sql": ["SELECT COUNT(*) AS female_superheroes FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' AND gender_id = (SELECT id FROM gender WHERE gender = 'Female');"]}, {"question_id": 824, "answer_sql": ["SELECT s.superhero_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Wind Control' ORDER BY s.superhero_name;"]}, {"question_id": 825, "answer_sql": []}, {"question_id": 826, "answer_sql": ["SELECT MAX(s.weight_kg) AS heaviest_superhero_weight FROM superhero s JOIN publisher p ON s.publisher_id = p.id WHERE p.publisher_name = 'DC Comics';"]}, {"question_id": 827, "answer_sql": ["SELECT AVG(height_cm) AS average_height FROM superhero WHERE race_id <> 1 AND publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Dark Horse Comics')"]}, {"question_id": 828, "answer_sql": []}, {"question_id": 829, "answer_sql": ["SELECT SUM(CASE WHEN T2.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) AS difference FROM superhero AS T1 JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.alignment_id IN (SELECT id FROM alignment WHERE alignment = 'DC Comics') AND T1.alignment_id IN (SELECT id FROM alignment WHERE alignment = 'Marvel Comics')"]}, {"question_id": 830, "answer_sql": []}, {"question_id": 831, "answer_sql": ["SELECT T2.colour FROM superhero AS T1 JOIN alignment AS T3 ON T1.alignment_id = T3.id JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Abomination';"]}, {"question_id": 832, "answer_sql": ["SELECT superhero_name FROM superhero WHERE height_cm = (SELECT MAX(height_cm) FROM superhero)", "SELECT s.superhero_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id WHERE ha.attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Height') ORDER BY s.height_cm DESC LIMIT 1;"]}, {"question_id": 833, "answer_sql": ["SELECT superhero_name FROM superhero WHERE full_name = 'Charles Chandler';"]}, {"question_id": 834, "answer_sql": []}, {"question_id": 835, "answer_sql": []}, {"question_id": 836, "answer_sql": ["SELECT COUNT(*) AS total_superheroes FROM superhero WHERE full_name LIKE 'John%';"]}, {"question_id": 837, "answer_sql": ["SELECT hero_id FROM hero_attribute ORDER BY attribute_value ASC LIMIT 1;", "SELECT superhero.id FROM superhero WHERE superhero.id = (SELECT hero_id FROM hero_attribute WHERE attribute_value = (SELECT MIN(attribute_value) FROM hero_attribute GROUP BY hero_id)) ORDER BY superhero.id ASC LIMIT 1;"]}, {"question_id": 838, "answer_sql": ["SELECT s.full_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'Alien';"]}, {"question_id": 839, "answer_sql": []}, {"question_id": 840, "answer_sql": ["SELECT T2.attribute_value FROM superhero AS T1 JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Aquababy';"]}, {"question_id": 841, "answer_sql": ["SELECT superhero.weight_kg, race.race FROM superhero JOIN race ON superhero.race_id = race.id JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id JOIN colour ON attribute.attribute_name = colour.colour WHERE superhero.id = 40;", "SELECT superhero.weight_kg, race.race FROM superhero JOIN alignment ON superhero.alignment_id = alignment.id JOIN gender ON superhero.gender_id = gender.id JOIN race ON superhero.race_id = race.id WHERE superhero.id = 40;"]}, {"question_id": 842, "answer_sql": ["SELECT AVG(height_cm) AS average_height FROM superhero WHERE alignment_id = (SELECT id FROM alignment WHERE alignment = 'Neutral')"]}, {"question_id": 843, "answer_sql": ["SELECT superhero.id FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Intelligence';"]}, {"question_id": 844, "answer_sql": ["SELECT T2.colour FROM superhero AS T1 JOIN alignment AS T3 ON T1.alignment_id = T3.id JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Blackwulf';"]}, {"question_id": 845, "answer_sql": ["SELECT sp.power_name FROM superpower sp JOIN hero_power hp ON sp.id = hp.power_id JOIN superhero s ON hp.hero_id = s.id WHERE s.height_cm > (SELECT AVG(height_cm) * 0.8 FROM superhero);"]}, {"question_id": 846, "answer_sql": []}, {"question_id": 847, "answer_sql": ["SELECT D.surname FROM drivers D JOIN qualifying Q ON D.driverId = Q.driverId WHERE Q.raceId = (SELECT raceId FROM races WHERE round = 2 AND year = 2023) AND Q.q2 = (SELECT MIN(q2) FROM qualifying WHERE raceId = (SELECT raceId FROM races WHERE round = 2 AND year = 2023)) ORDER BY D.surname ASC LIMIT 1;", "SELECT D.surname FROM drivers D JOIN qualifying Q ON D.driverId = Q.driverId WHERE Q.raceId = 19 AND Q.q2 = (SELECT MIN(q2) FROM qualifying WHERE raceId = 19 AND q2 IS NOT NULL)"]}, {"question_id": 848, "answer_sql": ["SELECT DISTINCT T1.year FROM races AS T1 JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.location = 'Shanghai';"]}, {"question_id": 849, "answer_sql": ["SELECT url FROM circuits WHERE name = 'Circuit de Barcelona-Catalunya';", "SELECT url FROM races WHERE circuitId = ( SELECT circuitId FROM circuits WHERE name = 'Circuit de Barcelona-Catalunya' );", "SELECT url FROM circuits WHERE circuitRef = 'Circuit de Barcelona-Catalunya';"]}, {"question_id": 850, "answer_sql": ["SELECT T1.name FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T1.country = 'Germany';"]}, {"question_id": 851, "answer_sql": []}, {"question_id": 852, "answer_sql": ["SELECT COUNT(raceId) AS races_count FROM races WHERE year = 2010 AND circuitId IN ( SELECT circuitId FROM circuits WHERE country NOT IN ('Asia', 'Europe') );"]}, {"question_id": 853, "answer_sql": ["SELECT DISTINCT T1.name FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T1.country = 'Spain';", "SELECT T1.name FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T1.country = 'Spain';", "SELECT DISTINCT races.name FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.country = 'Spain';"]}, {"question_id": 854, "answer_sql": ["SELECT circuits.lat, circuits.lng FROM circuits JOIN races ON circuits.circuitId = races.circuitId JOIN results ON races.raceId = results.raceId WHERE races.name = 'Australian Grand Prix';", "SELECT circuits.location FROM circuits JOIN races ON circuits.circuitId = races.circuitId JOIN results ON races.raceId = results.raceId WHERE races.name = 'Australian Grand Prix';"]}, {"question_id": 855, "answer_sql": ["SELECT r.name, r.url FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.name = 'Sepang International Circuit';", "SELECT r.name, r.date, r.url FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.name = 'Sepang International Circuit';", "SELECT r.name FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.name = 'Sepang International Circuit';"]}, {"question_id": 856, "answer_sql": ["SELECT T1.time FROM races AS T1 JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Sepang International Circuit';"]}, {"question_id": 857, "answer_sql": ["SELECT circuits.lat, circuits.lng FROM circuits JOIN races ON circuits.circuitId = races.circuitId JOIN results ON races.raceId = results.raceId WHERE races.name = 'Abu Dhabi Grand Prix';"]}, {"question_id": 858, "answer_sql": []}, {"question_id": 859, "answer_sql": ["SELECT q1 FROM qualifying WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Bruno' AND surname = 'Senna');", "SELECT q1 FROM qualifying WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Bruno' AND surname = 'Senna') AND raceId = 354;"]}, {"question_id": 860, "answer_sql": ["SELECT T3.nationality FROM races AS T1 JOIN qualifying AS T2 ON T1.raceId = T2.raceId JOIN drivers AS T3 ON T2.driverId = T3.driverId WHERE T2.q2 = '0:01:40' AND T1.raceId = 355;"]}, {"question_id": 861, "answer_sql": ["SELECT T2.number FROM races AS T1 JOIN qualifying AS T3 ON T1.raceId = T3.raceId JOIN drivers AS T2 ON T3.driverId = T2.driverId WHERE T3.q3 = '0:01:54';"]}, {"question_id": 862, "answer_sql": []}, {"question_id": 863, "answer_sql": ["SELECT s.year FROM seasons s JOIN races r ON s.year = r.year WHERE r.raceId = 901;"]}, {"question_id": 864, "answer_sql": ["SELECT COUNT(DISTINCT driverId) AS num_drivers_finished FROM races JOIN results ON races.raceId = results.raceId WHERE strftime('%Y-%m-%d', races.date) = '2015-11-29';"]}, {"question_id": 865, "answer_sql": ["SELECT D.driverRef, D.surname, D.forename, D.dob FROM drivers D JOIN results R ON D.driverId = R.driverId WHERE R.raceId = (SELECT raceId FROM races WHERE year = 2023 AND round = 592) ORDER BY D.dob ASC LIMIT 1;", "SELECT D.driverRef, D.forename, D.surname, D.dob FROM drivers D JOIN results R ON D.driverId = R.driverId WHERE R.raceId = 592 AND R.time IS NOT NULL ORDER BY D.dob ASC LIMIT 1;", "SELECT D.driverRef, D.surname, D.forename, D.dob FROM drivers D JOIN results R ON D.driverId = R.driverId WHERE R.raceId = 592 AND R.time IS NOT NULL ORDER BY D.dob ASC LIMIT 1;"]}, {"question_id": 866, "answer_sql": ["SELECT d.driverRef, d.url FROM drivers d JOIN lapTimes lt ON d.driverId = lt.driverId WHERE lt.time = '0:01:27';"]}, {"question_id": 867, "answer_sql": ["SELECT drivers.forename, drivers.surname, driverStandings.positionText FROM drivers JOIN driverStandings ON drivers.driverId = driverStandings.driverId JOIN races ON driverStandings.raceId = races.raceId WHERE races.year = 1993 AND races.raceId = (SELECT raceId FROM races WHERE name = 'Race No.933') ORDER BY driverStandings.position LIMIT 1;"]}, {"question_id": 868, "answer_sql": ["SELECT location FROM circuits WHERE circuitRef = 'Malaysia Grand Prix';"]}, {"question_id": 869, "answer_sql": ["SELECT c.url FROM constructors c JOIN constructorResults cr ON c.constructorId = cr.constructorId JOIN races r ON cr.raceId = r.raceId WHERE r.round = 9 ORDER BY cr.points DESC LIMIT 1;"]}, {"question_id": 870, "answer_sql": ["SELECT q1 FROM qualifying WHERE raceId = (SELECT raceId FROM races WHERE round = 345) AND driverId = (SELECT driverId FROM drivers WHERE forename = 'Lucas' AND surname = 'di Grassi');"]}, {"question_id": 871, "answer_sql": ["SELECT drivers.driverId, drivers.surname, drivers.nationality FROM drivers JOIN qualifying ON drivers.driverId = qualifying.driverId WHERE qualifying.q2 = '0:01:15' AND qualifying.raceId = (SELECT raceId FROM races WHERE round = 347);"]}, {"question_id": 872, "answer_sql": ["SELECT T2.code FROM races AS T1 JOIN qualifying AS T3 ON T1.raceId = T3.raceId JOIN drivers AS T2 ON T3.driverId = T2.driverId WHERE T1.round = 45 AND T3.q3 = '0:01:33' LIMIT 1;"]}, {"question_id": 873, "answer_sql": ["SELECT T2.time FROM races AS T1 INNER JOIN lapTimes AS T2 ON T1.raceId = T2.raceId WHERE T1.raceId = 743 AND T2.driverId = (SELECT driverId FROM drivers WHERE forename = 'Bruce' AND surname = 'McLaren')"]}, {"question_id": 874, "answer_sql": ["SELECT D.surname, D.forename FROM drivers D JOIN results R ON D.driverId = R.driverId JOIN races R1 ON R.raceId = R1.raceId WHERE R1.name = 'San Marino Grand Prix' AND R1.year = 2006 AND R.position = 2;"]}, {"question_id": 875, "answer_sql": ["SELECT s.year FROM seasons s JOIN races r ON s.year = r.year WHERE r.raceId = 901;"]}, {"question_id": 876, "answer_sql": []}, {"question_id": 877, "answer_sql": ["SELECT MIN(dob) AS youngest_driver FROM drivers WHERE driverId IN ( SELECT driverId FROM results WHERE raceId = ( SELECT raceId FROM races WHERE year = 2022 AND round = 872 ) );"]}, {"question_id": 878, "answer_sql": ["SELECT D.surname, D.forename FROM drivers D JOIN lapTimes LT ON D.driverId = LT.driverId WHERE LT.raceId = (SELECT raceId FROM races WHERE round = 348) ORDER BY LT.time ASC LIMIT 1;"]}, {"question_id": 879, "answer_sql": ["SELECT T1.nationality FROM drivers AS T1 JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.fastestLapSpeed IS NOT NULL ORDER BY T2.fastestLapSpeed DESC LIMIT 1;"]}, {"question_id": 880, "answer_sql": []}, {"question_id": 881, "answer_sql": ["SELECT COUNT(DISTINCT CASE WHEN T1.date = '1983-07-16' THEN T2.driverid ELSE NULL END) / COUNT(T2.driverid) AS race_completion_rate FROM races AS T1 JOIN drivers AS T2 ON T1.raceId = T2.driverId WHERE T1.date = '1983-07-16';"]}, {"question_id": 882, "answer_sql": ["SELECT year FROM races WHERE name = 'Singapore Grand Prix' ORDER BY year LIMIT 1;"]}, {"question_id": 883, "answer_sql": ["SELECT COUNT(raceId) AS race_count, name FROM races WHERE year = 2005 ORDER BY raceId DESC;"]}, {"question_id": 884, "answer_sql": []}, {"question_id": 885, "answer_sql": ["SELECT races.name, races.date FROM races JOIN seasons ON races.year = seasons.year WHERE seasons.year = 1999 AND races.round = (SELECT MAX(round) FROM races WHERE year = 1999)"]}, {"question_id": 886, "answer_sql": ["SELECT year FROM races GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1;"]}, {"question_id": 887, "answer_sql": ["SELECT races.name FROM races WHERE races.year = 2017 AND races.year != 2000;"]}, {"question_id": 888, "answer_sql": ["SELECT circuits.country, circuits.location FROM circuits JOIN races ON circuits.circuitId = races.circuitId JOIN seasons ON races.year = seasons.year WHERE seasons.year = (SELECT MIN(year) FROM seasons) AND circuits.country = 'Europe';"]}, {"question_id": 889, "answer_sql": ["SELECT MAX(year) FROM races WHERE circuitId = (SELECT circuitId FROM circuits WHERE name = 'Brands Hatch') AND name LIKE 'British Grand Prix';"]}, {"question_id": 890, "answer_sql": []}, {"question_id": 891, "answer_sql": ["SELECT d.driverRef, d.number, d.forename, d.surname, ds.position, ds.positionText FROM drivers d JOIN driverStandings ds ON d.driverId = ds.driverId WHERE ds.raceId = (SELECT raceId FROM races WHERE year = 2010 AND name = 'Singapore Grand Prix') ORDER BY ds.position;", "SELECT d.driverId, d.surname, d.forename, ds.positionText FROM drivers d JOIN driverStandings ds ON d.driverId = ds.driverId WHERE ds.raceId = (SELECT raceId FROM races WHERE year = 2010 AND name = 'Singapore Grand Prix') ORDER BY ds.positionText;", "SELECT d.driverId, d.surname, d.forename, ds.position, ds.positionText FROM drivers d JOIN driverStandings ds ON d.driverId = ds.driverId WHERE ds.raceId = (SELECT raceId FROM races WHERE year = 2010 AND name = 'Singapore Grand Prix') ORDER BY ds.position;"]}, {"question_id": 892, "answer_sql": ["SELECT d.forename, d.surname FROM drivers d JOIN driverStandings ds ON d.driverId = ds.driverId WHERE ds.points = (SELECT MAX(points) FROM driverStandings)"]}, {"question_id": 893, "answer_sql": ["SELECT d.surname, d.forename, SUM(r.points) AS total_points FROM drivers d JOIN results r ON d.driverId = r.driverId WHERE r.raceId = (SELECT raceId FROM races WHERE name = 'Chinese Grand Prix' AND year = 2017) GROUP BY d.driverId ORDER BY total_points DESC LIMIT 3;"]}, {"question_id": 894, "answer_sql": ["SELECT drivers.driverRef AS driver, races.name AS race FROM lapTimes JOIN drivers ON lapTimes.driverId = drivers.driverId JOIN races ON lapTimes.raceId = races.raceId WHERE lapTimes.time = (SELECT MIN(time) FROM lapTimes) ORDER BY races.name, drivers.driverRef;"]}, {"question_id": 895, "answer_sql": []}, {"question_id": 896, "answer_sql": []}, {"question_id": 897, "answer_sql": ["SELECT d.surname AS driver_name, d.nationality AS driver_nationality, AVG(rs.points) AS average_points FROM drivers d JOIN driverStandings rs ON d.driverId = rs.driverId GROUP BY d.driverId ORDER BY COUNT(rs.wins) DESC LIMIT 1;", "SELECT d.driverRef AS driver_name, d.nationality, AVG(rs.points) AS average_points FROM drivers d JOIN driverStandings rs ON d.driverId = rs.driverId GROUP BY d.driverRef, d.nationality ORDER BY COUNT(rs.wins) DESC LIMIT 1;"]}, {"question_id": 898, "answer_sql": ["SELECT T1.driverId, T1.forename, T1.surname, T1.dob, T1.nationality FROM drivers AS T1 WHERE T1.nationality = 'Japanese' ORDER BY T1.dob ASC LIMIT 1;"]}, {"question_id": 899, "answer_sql": ["SELECT DISTINCT c.circuitRef, c.name FROM circuits c JOIN races r ON c.circuitId = r.circuitId WHERE r.year BETWEEN 1990 AND 2000 GROUP BY c.circuitRef, c.name HAVING COUNT(DISTINCT r.year) = 4;"]}, {"question_id": 900, "answer_sql": ["SELECT circuits.name, circuits.location, races.name FROM circuits JOIN races ON circuits.circuitId = races.circuitId WHERE circuits.country = 'USA' AND races.year = 2006;"]}, {"question_id": 901, "answer_sql": []}, {"question_id": 902, "answer_sql": []}, {"question_id": 903, "answer_sql": []}, {"question_id": 904, "answer_sql": []}, {"question_id": 905, "answer_sql": []}, {"question_id": 906, "answer_sql": ["SELECT min(raceId) AS first_race, SUM(points) AS first_race_points FROM drivers JOIN results ON drivers.driverId = results.driverId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' GROUP BY raceId"]}, {"question_id": 907, "answer_sql": ["SELECT r.name AS race_name, c.country AS hosting_country, r.date FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE r.year = 2017 ORDER BY r.date;", "SELECT r.name AS race_name, c.country AS hosting_country FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE r.year = 2017 ORDER BY r.date;"]}, {"question_id": 908, "answer_sql": []}, {"question_id": 909, "answer_sql": ["SELECT CAST(COUNT(CASE WHEN country = 'Germany' THEN races.raceId ELSE NULL END) AS REAL) * 100 / COUNT(races.raceId) AS percentage FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.name = 'Europearn Grand Prix';"]}, {"question_id": 910, "answer_sql": ["SELECT circuits.location FROM circuits JOIN races ON circuits.circuitId = races.circuitId WHERE circuits.name = 'Silverstone Circuit';", "SELECT location, lat, lng FROM circuits WHERE circuitRef = 'SILVERSTONE';"]}, {"question_id": 911, "answer_sql": ["SELECT circuits.name, circuits.lat FROM circuits WHERE circuits.name IN ('Silverstone Circuit', 'Hockenheimring', 'Hungaroring') ORDER BY circuits.lat DESC LIMIT 1;", "SELECT circuits.name FROM circuits WHERE circuits.name IN ('Silverstone Circuit', 'Hockenheimring', 'Hungaroring') ORDER BY circuits.lat DESC LIMIT 1;"]}, {"question_id": 912, "answer_sql": ["SELECT circuitRef FROM circuits WHERE name = 'Marina Bay Street Circuit';"]}, {"question_id": 913, "answer_sql": ["SELECT T2.country FROM races AS T1 JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.alt = (SELECT MAX(alt) FROM circuits)"]}, {"question_id": 914, "answer_sql": ["SELECT COUNT(driverId) AS driver_count FROM drivers WHERE code IS NULL;"]}, {"question_id": 915, "answer_sql": []}, {"question_id": 916, "answer_sql": ["SELECT surname FROM drivers WHERE nationality = 'italian';"]}, {"question_id": 917, "answer_sql": ["SELECT url FROM drivers WHERE forename = 'Anthony' AND surname = 'Davidson';"]}, {"question_id": 918, "answer_sql": ["SELECT driverRef FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton';"]}, {"question_id": 919, "answer_sql": ["SELECT circuits.name FROM races JOIN circuits ON races.circuitId = circuits.circuitId JOIN results ON races.raceId = results.raceId WHERE races.year = 2009 AND races.name = 'Spanish Grand Prix';"]}, {"question_id": 920, "answer_sql": ["SELECT DISTINCT T1.year FROM races AS T1 JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Silverstone Circuit';"]}, {"question_id": 921, "answer_sql": ["SELECT r.* FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.name = 'Silverstone Circuit';", "SELECT r.name AS race_name, c.name AS circuit_name FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.name = 'Silverstone Circuit';"]}, {"question_id": 922, "answer_sql": ["SELECT T1.time FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Abu Dhabi Circuit' AND T1.year = 2010;"]}, {"question_id": 923, "answer_sql": ["SELECT COUNT(DISTINCT raceId) AS numberOfRaces FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.country = 'Italy';", "SELECT COUNT(DISTINCT raceId) AS numberOfRaces FROM races WHERE circuitId IN ( SELECT circuitId FROM circuits WHERE location LIKE '%Italy%' );"]}, {"question_id": 924, "answer_sql": ["SELECT T1.date FROM races AS T1 JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Barcelona-Catalunya';"]}, {"question_id": 925, "answer_sql": ["SELECT url FROM circuits WHERE circuitRef = 'SPA'"]}, {"question_id": 926, "answer_sql": []}, {"question_id": 927, "answer_sql": ["SELECT d.forename, d.surname FROM drivers d JOIN results r ON d.driverId = r.driverId WHERE r.fastestLapSpeed IS NOT NULL ORDER BY r.fastestLapSpeed DESC LIMIT 1;"]}, {"question_id": 928, "answer_sql": []}, {"question_id": 929, "answer_sql": []}, {"question_id": 930, "answer_sql": []}, {"question_id": 931, "answer_sql": ["SELECT MAX(fastestLapSpeed) AS fastestLapSpeed FROM results WHERE raceId = (SELECT raceId FROM races WHERE name = 'Spanish Grand Prix' AND year = 2009);"]}, {"question_id": 932, "answer_sql": []}, {"question_id": 933, "answer_sql": ["SELECT T2.positionOrder AS final_rank FROM drivers AS T1 JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = (SELECT raceId FROM races WHERE name = 'Australian Grand Prix' AND year = 2008) ORDER BY T2.positionOrder DESC LIMIT 1;", "SELECT T2.positionOrder AS final_rank FROM drivers AS T1 JOIN results AS T2 ON T1.driverId = T2.driverId JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.name = 'Australian Grand Prix' AND T3.year = 2008 AND T1.forename = 'Lewis' AND T1.surname = 'Hamilton';", "SELECT T2.positionOrder FROM drivers AS T1 JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T1.driverRef = 'Lewis Hamilton' AND T2.raceId = (SELECT raceId FROM races WHERE name = 'Australian Grand Prix' AND year = 2008) ORDER BY T2.positionOrder DESC LIMIT 1;"]}, {"question_id": 934, "answer_sql": []}, {"question_id": 935, "answer_sql": []}, {"question_id": 936, "answer_sql": ["SELECT q1, q2, q3, fastestLapTime FROM qualifying JOIN results ON qualifying.raceId = results.raceId JOIN drivers ON results.driverId = drivers.driverId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND results.raceId = (SELECT raceId FROM races WHERE name = 'Australian Grand Prix' AND year = 2008)", "SELECT q1, q2, q3, fastestLapTime, fastestLapSpeed FROM qualifying JOIN results ON qualifying.raceId = results.raceId JOIN drivers ON results.driverId = drivers.driverId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND results.raceId = (SELECT raceId FROM races WHERE name = 'Australian Grand Prix' AND year = 2008)"]}, {"question_id": 937, "answer_sql": ["SELECT T1.time FROM races AS T1 JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T2.position = 2 AND T1.year = 2008 AND T1.name = 'Australian Grand Prix'", "SELECT T2.time FROM races AS T1 JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T1.year = 2008 AND T1.name = 'Australian Grand Prix' AND T2.position = 2;"]}, {"question_id": 938, "answer_sql": []}, {"question_id": 939, "answer_sql": []}, {"question_id": 940, "answer_sql": []}, {"question_id": 941, "answer_sql": ["SELECT SUM(points) AS total_points FROM drivers JOIN results ON drivers.driverId = results.driverId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';"]}, {"question_id": 942, "answer_sql": ["SELECT AVG(CAST(REPLACE(REPLACE(fastestLapTime, ':', ''), '.', '') AS REAL) * 0.01) AS average_lap_time FROM results WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton');", "SELECT AVG(CAST(REPLACE(REPLACE(fastestLapTime, ':', ''), '.', '') AS REAL) / 1000) AS average_lap_time FROM results WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton');"]}, {"question_id": 943, "answer_sql": []}, {"question_id": 944, "answer_sql": ["SELECT (CASE WHEN T1.time IS NULL THEN 0 ELSE ((T2.time - T1.time) / T1.time) * 100 END) AS percentage_faster FROM results AS T1 JOIN results AS T2 ON T1.raceId = T2.raceId AND T1.driverId = T2.driverId WHERE T1.raceId = (SELECT raceId FROM races WHERE name = '2008 Australian Grand Prix') AND T1.position = (SELECT MAX(position) FROM results WHERE raceId = (SELECT raceId FROM races WHERE name = '2008 Australian Grand Prix'))"]}, {"question_id": 945, "answer_sql": ["SELECT COUNT(circuitId) AS circuit_count FROM circuits WHERE location = 'Melbourne, Australia';"]}, {"question_id": 946, "answer_sql": ["SELECT circuits.location FROM circuits JOIN races ON circuits.circuitId = races.circuitId WHERE circuits.country = 'USA';", "SELECT circuits.location FROM circuits WHERE circuits.country = 'USA';"]}, {"question_id": 947, "answer_sql": []}, {"question_id": 948, "answer_sql": []}, {"question_id": 949, "answer_sql": ["SELECT c.name, SUM(cr.points) AS total_points FROM constructors c JOIN constructorResults cr ON c.constructorId = cr.constructorId GROUP BY c.name ORDER BY total_points DESC LIMIT 1;"]}, {"question_id": 950, "answer_sql": ["SELECT T2.name FROM races AS T1 INNER JOIN constructorResults AS T3 ON T1.raceId = T3.raceId INNER JOIN constructors AS T2 ON T3.constructorId = T2.constructorId WHERE T1.year = 2018 AND T1.raceId = 291 AND T3.points = 0;"]}, {"question_id": 951, "answer_sql": []}, {"question_id": 952, "answer_sql": ["SELECT DISTINCT c.name FROM constructors c JOIN constructorStandings cs ON c.constructorId = cs.constructorId WHERE cs.position = 1;"]}, {"question_id": 953, "answer_sql": []}, {"question_id": 954, "answer_sql": []}, {"question_id": 955, "answer_sql": ["SELECT s.year, AVG(l.time) AS average_time FROM races s JOIN lapTimes l ON s.raceId = l.raceId WHERE l.time IS NOT NULL GROUP BY s.year ORDER BY s.year;"]}, {"question_id": 956, "answer_sql": ["SELECT DISTINCT D.forename, D.surname FROM drivers D JOIN driverStandings DS ON D.driverId = DS.driverId WHERE D.dob > '1975-01-01' AND DS.position = 2;", "SELECT D.forename, D.surname FROM drivers D JOIN driverStandings DS ON D.driverId = DS.driverId WHERE D.dob > '1975-01-01' AND DS.position = 2;"]}, {"question_id": 957, "answer_sql": ["SELECT COUNT(DISTINCT driverId) AS numberOfItalianDriversNotFinished FROM drivers WHERE driverId IN ( SELECT driverId FROM results WHERE time IS NULL );", "SELECT COUNT(DISTINCT driverId) AS numberOfItalianDriversNotFinished FROM drivers WHERE driverId IN ( SELECT driverId FROM results WHERE position IS NULL );", "SELECT COUNT(DISTINCT driverId) AS numberOfItalianDriversWithoutFinish FROM drivers WHERE driverId IN ( SELECT driverId FROM results WHERE time IS NULL ) AND nationality = 'Italy';", "SELECT COUNT(DISTINCT driverId) AS numberOfItalianDriversNotFinished FROM drivers WHERE driverId IN ( SELECT driverId FROM results WHERE time IS NULL ) AND nationality = 'Italian';"]}, {"question_id": 958, "answer_sql": ["SELECT drivers.forename, drivers.surname FROM drivers WHERE drivers.driverId = ( SELECT drivers.driverId FROM drivers INNER JOIN lapTimes ON drivers.driverId = lapTimes.driverId WHERE lapTimes.time = ( SELECT MIN(time) FROM lapTimes ) );", "SELECT drivers.forename, drivers.surname FROM drivers WHERE drivers.driverId = ( SELECT drivers.driverId FROM drivers INNER JOIN lapTimes ON drivers.driverId = lapTimes.driverId ORDER BY lapTimes.milliseconds ASC LIMIT 1 );"]}, {"question_id": 959, "answer_sql": []}, {"question_id": 960, "answer_sql": ["SELECT AVG(fastestLapSpeed) AS average_fastest_lap_speed FROM races JOIN results ON races.raceId = results.raceId WHERE races.name = 'Spanish Grand Prix' AND races.year = 2009;"]}, {"question_id": 961, "answer_sql": ["SELECT r.name, r.year FROM races r JOIN results res ON r.raceId = res.raceId WHERE res.milliseconds IS NOT NULL ORDER BY res.milliseconds ASC LIMIT 1;"]}, {"question_id": 962, "answer_sql": []}, {"question_id": 963, "answer_sql": []}, {"question_id": 964, "answer_sql": ["SELECT DISTINCT drivers.driverRef, drivers.forename, drivers.surname FROM drivers WHERE drivers.nationality = 'America';"]}, {"question_id": 965, "answer_sql": ["SELECT raceId FROM races WHERE year = 2009;"]}, {"question_id": 966, "answer_sql": []}, {"question_id": 967, "answer_sql": ["SELECT D.driverRef AS driver_code, COUNT(D.driverRef) AS netherlandic_drivers FROM drivers D WHERE D.dob >= DATE('now', '-3 years') GROUP BY D.driverRef ORDER BY COUNT(D.driverRef) DESC LIMIT 3;", "SELECT T1.driverId, T1.driverRef FROM drivers AS T1 WHERE T1.dob <= DATE('now', '-3 years') ORDER BY T1.dob ASC LIMIT 3;", "SELECT T1.driverId, T1.driverRef, T1.number, T1.code FROM drivers AS T1 WHERE T1.dob <= DATE('now', '-3 years') ORDER BY T1.dob ASC LIMIT 3;", "SELECT T1.driverId, T1.driverRef, T1.forename, T1.surname, T1.dob FROM drivers AS T1 WHERE T1.dob <= DATE('now', '-3 years') ORDER BY T1.dob ASC LIMIT 3;", "SELECT D.driverRef AS driver_code, COUNT(D.driverRef) AS netherlandic_drivers FROM drivers D WHERE D.dob <= DATE('now', '-3 years') GROUP BY D.driverRef ORDER BY COUNT(D.driverRef) DESC LIMIT 3;", "SELECT D.driverRef AS driver_ref, D.number AS driver_number, D.forename AS driver_forename, D.surname AS driver_surname, D.dob AS driver_dob FROM drivers D WHERE D.dob <= '1990-01-01' ORDER BY D.dob ASC LIMIT 3;"]}, {"question_id": 968, "answer_sql": []}, {"question_id": 969, "answer_sql": []}, {"question_id": 970, "answer_sql": ["SELECT d.driverId, d.surname, d.forename, d.dob, MIN(l.time) AS earliest_lap_time FROM drivers d JOIN lapTimes l ON d.driverId = l.driverId WHERE d.dob BETWEEN '1980-01-01' AND '1990-12-31' GROUP BY d.driverId, d.surname, d.forename, d.dob ORDER BY earliest_lap_time ASC LIMIT 3;"]}, {"question_id": 971, "answer_sql": []}, {"question_id": 972, "answer_sql": []}, {"question_id": 973, "answer_sql": []}, {"question_id": 974, "answer_sql": []}, {"question_id": 975, "answer_sql": ["SELECT year, MAX(time) AS max_time FROM races WHERE time IS NOT NULL GROUP BY year ORDER BY MAX(time) ASC LIMIT 1;", "SELECT year, MIN(time) AS lowest_speed FROM races WHERE time IS NOT NULL GROUP BY year ORDER BY lowest_speed ASC LIMIT 1;"]}, {"question_id": 976, "answer_sql": ["SELECT d.driverId FROM drivers d JOIN lapTimes lt ON d.driverId = lt.driverId WHERE lt.position = 1 ORDER BY lt.time ASC LIMIT 5;", "SELECT d.driverId FROM drivers d JOIN lapTimes lt ON d.driverId = lt.driverId WHERE lt.lap = 1 ORDER BY lt.time ASC LIMIT 5;"]}, {"question_id": 977, "answer_sql": ["SELECT COUNT(driverId) AS disqualified_finishers FROM races JOIN results ON races.raceId = results.raceId WHERE races.year BETWEEN 2010 AND 2019 AND results.statusId = 2 AND results.time IS NULL AND results.raceId BETWEEN 50 AND 100;", "SELECT COUNT(driverId) AS disqualified_finishers FROM races JOIN results ON races.raceId = results.raceId WHERE races.year BETWEEN 2005 AND 2010 AND results.statusId = 2 AND results.time IS NULL;", "SELECT COUNT(driverId) AS disqualified_finishers FROM races JOIN results ON races.raceId = results.raceId WHERE races.raceId BETWEEN 50 AND 100 AND results.statusId = 2 AND results.time IS NULL;"]}, {"question_id": 978, "answer_sql": []}, {"question_id": 979, "answer_sql": []}, {"question_id": 980, "answer_sql": ["SELECT d.driverRef AS reference_name, d.nationality, d.dob FROM drivers d JOIN qualifying q ON d.driverId = q.driverId WHERE q.raceId = 23 AND q.q2 IS NOT NULL;"]}, {"question_id": 981, "answer_sql": []}, {"question_id": 982, "answer_sql": []}, {"question_id": 983, "answer_sql": ["SELECT c.constructorRef, c.url FROM constructors c JOIN constructorResults cr ON c.constructorId = cr.constructorId WHERE c.nationality = 'Italian' AND cr.points = (SELECT MAX(points) FROM constructorResults WHERE constructorId = c.constructorId)", "SELECT c.constructorRef, c.url FROM constructors c JOIN constructorResults cr ON c.constructorId = cr.constructorId WHERE c.nationality = 'Italian' AND cr.points = (SELECT MAX(points) FROM constructorResults) ORDER BY cr.points DESC LIMIT 1;", "SELECT c.constructorRef, c.url FROM constructors c JOIN constructorResults cr ON c.constructorId = cr.constructorId WHERE c.nationality = 'Italian' ORDER BY cr.points DESC LIMIT 1;"]}, {"question_id": 984, "answer_sql": ["SELECT c.url FROM constructors c JOIN constructorStandings cs ON c.constructorId = cs.constructorId WHERE cs.wins = (SELECT MAX(wins) FROM constructorStandings)", "SELECT c.url FROM constructors c JOIN constructorStandings cs ON c.constructorId = cs.constructorId GROUP BY c.url ORDER BY SUM(cs.wins) DESC LIMIT 1;", "SELECT c.url FROM constructors c WHERE c.constructorId = ( SELECT cr.constructorId FROM constructorResults cr GROUP BY cr.constructorId ORDER BY SUM(CASE WHEN cr.status = 'W' THEN 1 ELSE 0 END) DESC LIMIT 1 );"]}, {"question_id": 985, "answer_sql": ["SELECT D.driverRef, D.surname, D.forename, L.time FROM drivers D JOIN lapTimes L ON D.driverId = L.driverId JOIN races R ON L.raceId = R.raceId WHERE R.name = 'French Grand Prix' ORDER BY L.time ASC LIMIT 1;", "SELECT drivers.forename, drivers.surname, lapTimes.time FROM drivers JOIN lapTimes ON drivers.driverId = lapTimes.driverId WHERE lapTimes.raceId = (SELECT raceId FROM races WHERE name = 'French Grand Prix') ORDER BY lapTimes.time ASC LIMIT 1;", "SELECT d.surname, d.forename, l.time FROM drivers d JOIN lapTimes l ON d.driverId = l.driverId WHERE l.raceId = (SELECT raceId FROM races WHERE name = 'French Grand Prix') AND l.lap = 3 ORDER BY l.time ASC LIMIT 1;", "SELECT drivers.forename, drivers.surname, lapTimes.time FROM drivers JOIN lapTimes ON drivers.driverId = lapTimes.driverId JOIN races ON lapTimes.raceId = races.raceId WHERE races.name = 'French Grand Prix' ORDER BY lapTimes.time ASC LIMIT 1;"]}, {"question_id": 986, "answer_sql": ["SELECT raceId, time, milliseconds FROM lapTimes WHERE position = 1 ORDER BY time DESC LIMIT 1;", "SELECT r.name, MIN(l.time) AS fastest_lap_time_milliseconds FROM races r JOIN lapTimes l ON r.raceId = l.raceId WHERE l.position = 1 GROUP BY r.raceId ORDER BY r.year, r.round LIMIT 1;", "SELECT raceId, time, milliseconds FROM lapTimes WHERE position = 1 ORDER BY time LIMIT 1;"]}, {"question_id": 987, "answer_sql": ["SELECT AVG(T1.fastestLapTime) AS average_fastest_lap_time FROM results AS T1 JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = '2006 United States Grand Prix' AND T1.position < 11;"]}, {"question_id": 988, "answer_sql": ["SELECT d.surname, d.forename, AVG(p.duration) AS avg_pit_stop_duration FROM drivers d JOIN pitStops p ON d.driverId = p.driverId WHERE d.nationality = 'Germany' AND d.dob BETWEEN '1980-01-01' AND '1985-12-31' GROUP BY d.driverId ORDER BY avg_pit_stop_duration ASC LIMIT 5;"]}, {"question_id": 989, "answer_sql": ["SELECT d.forename, d.surname, r.time FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN races r2 ON r.raceId = r2.raceId WHERE r2.name = 'Canadian Grand Prix' AND r2.year = 2008 ORDER BY r.time ASC LIMIT 1;"]}, {"question_id": 990, "answer_sql": []}, {"question_id": 991, "answer_sql": ["SELECT drivers.forename, drivers.surname, drivers.dob FROM drivers WHERE drivers.nationality = 'Austrian' AND drivers.dob BETWEEN '1981-01-01' AND '1991-12-31';"]}, {"question_id": 992, "answer_sql": ["SELECT drivers.forename, drivers.surname, drivers.dob, drivers.url FROM drivers WHERE drivers.nationality = 'German' AND drivers.dob BETWEEN '1971-01-01' AND '1985-12-31' ORDER BY drivers.dob DESC;", "SELECT drivers.forename, drivers.surname, drivers.dob FROM drivers WHERE drivers.nationality = 'German' AND drivers.dob BETWEEN '1971-01-01' AND '1985-12-31' ORDER BY drivers.dob DESC;"]}, {"question_id": 993, "answer_sql": ["SELECT location, country, lat, lng FROM circuits WHERE circuitRef = 'Hungaroring';"]}, {"question_id": 994, "answer_sql": []}, {"question_id": 995, "answer_sql": []}, {"question_id": 996, "answer_sql": ["SELECT AVG(T1.year) AS annual_average_races FROM races AS T1 WHERE T1.date >= '2000-01-01' AND T1.date <= '2010-12-31' GROUP BY T1.year"]}, {"question_id": 997, "answer_sql": ["SELECT MAX(nationality) AS citizenship FROM drivers;"]}, {"question_id": 998, "answer_sql": ["SELECT COUNT(DISTINCT T1.driverId) AS victories FROM drivers AS T1 JOIN driverStandings AS T2 ON T1.driverId = T2.driverId WHERE T2.position = 91;", "SELECT COUNT(DISTINCT T1.driverId) AS victories FROM drivers AS T1 JOIN driverStandings AS T2 ON T1.driverId = T2.driverId WHERE T2.position = 91 AND T2.wins > 0;"]}, {"question_id": 999, "answer_sql": []}, {"question_id": 1000, "answer_sql": ["SELECT c.location, c.country FROM circuits c JOIN races r ON c.circuitId = r.circuitId WHERE r.date = (SELECT MAX(date) FROM races) ORDER BY c.location LIMIT 1;", "SELECT c.location + c.country AS full_location FROM circuits c WHERE c.circuitId = ( SELECT r.circuitId FROM races r WHERE r.date = ( SELECT MAX(date) FROM races ) );"]}, {"question_id": 1001, "answer_sql": []}, {"question_id": 1002, "answer_sql": []}, {"question_id": 1003, "answer_sql": ["SELECT COUNT(DISTINCT T1.driverId) AS accidentCount FROM results AS T1 JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Canadian Grand Prix' AND T1.statusId = 3;"]}, {"question_id": 1004, "answer_sql": []}, {"question_id": 1005, "answer_sql": ["SELECT MAX(T2.time) AS longest_pit_stop_time FROM races AS T1 JOIN pitStops AS T2 ON T1.raceId = T2.raceId GROUP BY T1.raceId;", "SELECT MAX(duration) AS longest_pit_stop_time FROM pitStops;", "SELECT MAX(T2.time) AS longest_time_spent_at_pitstop FROM drivers AS T1 JOIN pitStops AS T2 ON T1.driverId = T2.driverId;", "SELECT MAX(T1.duration) AS longest_pit_stop_time FROM pitStops AS T1 JOIN races AS T2 ON T1.raceId = T2.raceId JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T2.date = (SELECT MAX(date) FROM races);"]}, {"question_id": 1006, "answer_sql": ["SELECT MAX(time) AS fastest_time FROM lapTimes;"]}, {"question_id": 1007, "answer_sql": ["SELECT MAX(T1.duration) AS longest_time FROM pitStops AS T1 JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.driverRef = 'Lewis Hamilton';"]}, {"question_id": 1008, "answer_sql": ["SELECT T2.time, T2.lap FROM races AS T1 JOIN pitStops AS T2 ON T1.raceId = T2.raceId JOIN drivers AS T3 ON T2.driverId = T3.driverId WHERE T3.driverRef = 'Lewis Hamilton' AND T1.year = 2011 AND T1.name = 'Australian Grand Prix';"]}, {"question_id": 1009, "answer_sql": ["SELECT T1.time, T2.driverId, T3.duration FROM lapTimes AS T1 JOIN drivers AS T2 ON T1.driverId = T2.driverId JOIN pitStops AS T3 ON T1.driverId = T3.driverId AND T1.lap = T3.lap WHERE T1.raceId = (SELECT raceId FROM races WHERE name = '2011 Australian Grand Prix')"]}, {"question_id": 1010, "answer_sql": ["SELECT T1.time, T1.lap FROM lapTimes AS T1 JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' ORDER BY T1.time ASC LIMIT 1;"]}, {"question_id": 1011, "answer_sql": ["SELECT d.surname, d.forename FROM drivers d JOIN lapTimes lt ON d.driverId = lt.driverId WHERE lt.time = (SELECT MIN(time) FROM lapTimes) ORDER BY lt.time ASC LIMIT 1;", "SELECT d.forename, d.surname FROM drivers d JOIN lapTimes lt ON d.driverId = lt.driverId WHERE lt.time = (SELECT MIN(time) FROM lapTimes) ORDER BY lt.time ASC LIMIT 1;"]}, {"question_id": 1012, "answer_sql": []}, {"question_id": 1013, "answer_sql": ["SELECT T1.time FROM races AS T1 JOIN lapTimes AS T2 ON T1.raceId = T2.raceId WHERE T1.name = 'Austrian Grand Prix Circuit' ORDER BY T2.milliseconds ASC LIMIT 1;", "SELECT MAX(time) AS fastest_lap_time FROM lapTimes WHERE raceId = ( SELECT raceId FROM races WHERE name = 'Austrian Grand Prix Circuit' );"]}, {"question_id": 1014, "answer_sql": []}, {"question_id": 1015, "answer_sql": ["SELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Austrian Grand Prix Circuit' ORDER BY T1.date DESC LIMIT 1;"]}, {"question_id": 1016, "answer_sql": ["SELECT p.time, p.duration FROM pitStops p JOIN races r ON p.raceId = r.raceId JOIN qualifying q ON r.raceId = q.raceId WHERE q.driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton') AND r.name = 'Austrian Grand Prix Circuit' ORDER BY p.lap, p.time LIMIT 1;"]}, {"question_id": 1017, "answer_sql": ["SELECT circuits.location FROM circuits JOIN races ON circuits.circuitId = races.circuitId JOIN lapTimes ON races.raceId = lapTimes.raceId AND circuits.circuitId = lapTimes.driverId WHERE lapTimes.time = '1:29.488'", "SELECT circuits.location, circuits.lat, circuits.lng FROM circuits JOIN races ON circuits.circuitId = races.circuitId JOIN lapTimes ON races.raceId = lapTimes.raceId WHERE lapTimes.time = '1:29.488';", "SELECT circuits.location, circuits.lat, circuits.lng FROM circuits JOIN races ON circuits.circuitId = races.circuitId JOIN lapTimes ON races.raceId = lapTimes.raceId AND circuits.circuitId = lapTimes.driverId WHERE lapTimes.time = '1:29.488'"]}, {"question_id": 1018, "answer_sql": ["SELECT AVG(lapTimes.milliseconds) AS average_time FROM lapTimes JOIN drivers ON lapTimes.driverId = drivers.driverId WHERE drivers.driverRef = 'Lewis Hamilton';"]}, {"question_id": 1019, "answer_sql": ["SELECT AVG(lapTimes.milliseconds) AS average_lap_time FROM lapTimes JOIN races ON lapTimes.raceId = races.raceId JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.country = 'Italy';"]}, {"question_id": 1020, "answer_sql": ["SELECT player_api_id FROM Player_Attributes WHERE overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes);"]}, {"question_id": 1021, "answer_sql": ["SELECT MAX(height) AS max_height, player_name FROM Player WHERE player_api_id = (SELECT MAX(player_api_id) FROM Player)", "SELECT MAX(height) AS max_height, player_name FROM Player ORDER BY max_height DESC LIMIT 1;", "SELECT MAX(height) AS max_height, player_name FROM Player WHERE player_api_id = (SELECT home_player_1 FROM Match WHERE home_player_1 IS NOT NULL) GROUP BY player_api_id;"]}, {"question_id": 1022, "answer_sql": ["SELECT preferred_foot FROM Player_Attributes WHERE potential = (SELECT MIN(potential) FROM Player_Attributes) ORDER BY preferred_foot ASC LIMIT 1;"]}, {"question_id": 1023, "answer_sql": ["SELECT COUNT(T1.player_api_id) AS attack_players FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.overall_rating BETWEEN 60 AND 65 AND T1.defensive_work_rate = 'low';"]}, {"question_id": 1024, "answer_sql": []}, {"question_id": 1025, "answer_sql": ["SELECT L.name AS league_name FROM League L JOIN Match M ON L.id = M.league_id GROUP BY L.id, L.name ORDER BY SUM(M.home_team_goal + M.away_team_goal) DESC LIMIT 1;"]}, {"question_id": 1026, "answer_sql": ["SELECT T2.team_long_name FROM Match AS T1 JOIN Team AS T2 ON T1.home_team_api_id = T2.team_fifa_api_id WHERE T1.season = '2015/2016' GROUP BY T2.team_long_name ORDER BY COUNT(CASE WHEN T1.home_team_goal < T1.away_team_goal THEN 1 ELSE NULL END) ASC LIMIT 1;", "SELECT T2.team_long_name AS home_team FROM Match AS T1 JOIN Team AS T3 ON T1.home_team_api_id = T3.team_api_id JOIN Team AS T2 ON T1.away_team_api_id = T2.team_api_id WHERE T1.season = '2015/2016' GROUP BY T2.team_long_name ORDER BY COUNT(T1.id) ASC LIMIT 1;", "SELECT T1.team_long_name AS home_team, COUNT(*) AS match_count FROM Team AS T1 JOIN Match AS M ON T1.team_api_id = M.home_team_api_id WHERE M.season = '2015/2016' AND M.home_team_goal < M.away_team_goal GROUP BY T1.team_long_name ORDER BY match_count ASC LIMIT 1;"]}, {"question_id": 1027, "answer_sql": ["SELECT player_name FROM Player WHERE player_api_id IN ( SELECT home_player_X1 FROM Match WHERE home_player_X1 IS NOT NULL GROUP BY home_player_X1 ORDER BY COUNT(*) DESC LIMIT 10 ) OR player_api_id IN ( SELECT away_player_X1 FROM Match WHERE away_player_X1 IS NOT NULL GROUP BY away_player_X1 ORDER BY COUNT(*) DESC LIMIT 10 );"]}, {"question_id": 1028, "answer_sql": ["SELECT T2.team_long_name FROM League AS T1 JOIN Team AS T3 ON T1.id = T3.team_fifa_api_id JOIN Team_Attributes AS T4 ON T3.team_fifa_api_id = T4.team_fifa_api_id JOIN Match AS T5 ON T1.id = T5.league_id JOIN Team AS T2 ON T5.away_team_api_id = T2.team_fifa_api_id WHERE T1.name = 'Scotland Premier League' AND T5.season = '2009/2010' GROUP BY T2.team_long_name ORDER BY COUNT(CASE WHEN T5.away_team_goal > T5.home_team_goal THEN 1 ELSE NULL END) DESC LIMIT 1;"]}, {"question_id": 1029, "answer_sql": ["SELECT T2.team_long_name AS team_name, T1.buildUpPlaySpeedClass AS buildUpPlaySpeedClass FROM Team_Attributes AS T1 JOIN Team AS T2 ON T1.team_fifa_api_id = T2.team_fifa_api_id WHERE T1.buildUpPlaySpeedClass = ( SELECT MAX(buildUpPlaySpeedClass) FROM Team_Attributes ) ORDER BY T1.buildUpPlaySpeedClass DESC LIMIT 4;", "SELECT T2.team_long_name AS team_name, T1.buildUpPlaySpeedClass AS buildUpPlaySpeedClass, T1.buildUpPlaySpeed AS buildUpPlaySpeed FROM Team_Attributes AS T1 JOIN Team AS T2 ON T1.team_fifa_api_id = T2.team_fifa_api_id WHERE T1.buildUpPlaySpeed = (SELECT MAX(buildUpPlaySpeed) FROM Team_Attributes) ORDER BY T1.buildUpPlaySpeed DESC LIMIT 4;", "SELECT T2.team_long_name AS team_name, T1.buildUpPlaySpeedClass AS buildUpPlaySpeedClass, MAX(T1.buildUpPlaySpeed) AS max_buildUpPlaySpeed FROM Team_Attributes AS T1 JOIN Team AS T2 ON T1.team_fifa_api_id = T2.team_fifa_api_id WHERE T1.buildUpPlaySpeedClass = 'MAX' GROUP BY T2.team_long_name, T1.buildUpPlaySpeedClass ORDER BY max_buildUpPlaySpeed DESC LIMIT 4;", "SELECT T2.team_long_name AS team_name, T1.buildUpPlaySpeed AS buildUpPlaySpeed FROM Team_Attributes AS T1 JOIN Team AS T2 ON T1.team_fifa_api_id = T2.team_fifa_api_id WHERE T1.buildUpPlaySpeed = ( SELECT MAX(buildUpPlaySpeed) FROM Team_Attributes ) ORDER BY T1.buildUpPlaySpeed DESC LIMIT 4;"]}, {"question_id": 1030, "answer_sql": ["SELECT L.name FROM League L JOIN Match M ON L.id = M.league_id WHERE M.season = '2015/2016' GROUP BY L.name ORDER BY SUM(CASE WHEN M.home_team_goal = M.away_team_goal THEN 1 ELSE 0 END) DESC LIMIT 1;", "SELECT L.name FROM League L JOIN Match M ON L.id = M.league_id GROUP BY L.id, L.name HAVING MAX(M.home_team_goal) = MAX(M.away_team_goal) AND M.season = '2015/2016'"]}, {"question_id": 1031, "answer_sql": []}, {"question_id": 1032, "answer_sql": ["SELECT L.name, COUNT(L.id) AS match_count FROM League L WHERE L.id = (SELECT league_id FROM (SELECT league_id, COUNT(id) AS match_count FROM Match GROUP BY league_id ORDER BY match_count DESC LIMIT 1)) GROUP BY L.id;", "SELECT L.name, COUNT(L.id) AS match_count FROM League L JOIN Match M ON L.id = M.league_id GROUP BY L.id ORDER BY match_count DESC LIMIT 1;"]}, {"question_id": 1033, "answer_sql": ["SELECT AVG(T1.height) AS average_height FROM Player AS T1 WHERE T1.birthday >= '1990-01-01 00:00:00' AND T1.birthday < '1996-01-01 00:00:00';"]}, {"question_id": 1034, "answer_sql": ["SELECT player_api_id FROM Player_Attributes WHERE overall_rating = ( SELECT MAX(overall_rating) FROM Player_Attributes WHERE date LIKE '%2010%' ) ORDER BY overall_rating DESC LIMIT 1;", "SELECT T2.player_api_id FROM ( SELECT T1.player_api_id, MAX(T1.overall_rating) AS max_overall_rating FROM Player_Attributes AS T1 WHERE substr(T1.date, 1, 4) = '2010' GROUP BY T1.player_api_id ) AS T3 JOIN Player_Attributes AS T2 ON T2.player_api_id = T3.player_api_id ORDER BY T3.max_overall_rating DESC LIMIT 1;", "SELECT player_api_id FROM Player_Attributes WHERE date LIKE '2010%' GROUP BY player_api_id ORDER BY AVG(overall_rating) DESC LIMIT 1;", "SELECT player_api_id FROM Player_Attributes WHERE date LIKE '2010%' GROUP BY player_api_id HAVING MAX(overall_rating) > ( SELECT MAX(overall_rating) FROM Player_Attributes WHERE date LIKE '2010%' ) ORDER BY MAX(overall_rating) DESC;"]}, {"question_id": 1035, "answer_sql": ["SELECT T2.team_fifa_api_id FROM Team_Attributes AS T1 JOIN Team AS T2 ON T1.team_fifa_api_id = T2.team_fifa_api_id WHERE T1.buildUpPlaySpeed BETWEEN 51 AND 59 GROUP BY T2.team_fifa_api_id HAVING COUNT(*) > 50;", "SELECT T2.team_fifa_api_id FROM Team_Attributes AS T1 JOIN Team AS T2 ON T1.team_fifa_api_id = T2.team_fifa_api_id WHERE T1.buildUpPlaySpeed BETWEEN 51 AND 59"]}, {"question_id": 1036, "answer_sql": ["SELECT T2.team_long_name FROM Team_Attributes AS T1 JOIN Team AS T2 ON T1.team_fifa_api_id = T2.team_fifa_api_id WHERE T1.buildUpPlayPassing > ( SELECT AVG(buildUpPlayPassing) FROM Team_Attributes WHERE strftime('%Y', date) = '2012' ) GROUP BY T2.team_long_name ORDER BY T1.buildUpPlayPassing DESC;", "SELECT T2.team_long_name FROM Team_Attributes AS T1 JOIN Team AS T2 ON T1.team_fifa_api_id = T2.team_fifa_api_id WHERE T1.buildUpPlayPassing > ( SELECT AVG(buildUpPlayPassing) FROM Team_Attributes WHERE strftime('%Y', date) = '2012' ) ORDER BY T1.buildUpPlayPassing DESC;"]}, {"question_id": 1037, "answer_sql": ["SELECT CAST(SUM(CASE WHEN T1.preferred_foot = 'left' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.player_fifa_api_id) FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id WHERE T2.birthday BETWEEN '1987-01-01 00:00:00' AND '1992-12-31 00:00:00'"]}, {"question_id": 1038, "answer_sql": ["SELECT L.name, SUM(T.home_team_goal + T.away_team_goal) AS total_goals FROM Match T JOIN League L ON T.league_id = L.id GROUP BY L.name ORDER BY total_goals ASC LIMIT 5;"]}, {"question_id": 1039, "answer_sql": ["SELECT AVG(T1.long_shots) AS average_long_shots FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id WHERE T2.player_name = 'Ahmed Samir Farag';"]}, {"question_id": 1040, "answer_sql": ["SELECT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height > 180 GROUP BY T1.player_name ORDER BY AVG(T2.heading_accuracy) DESC LIMIT 10;"]}, {"question_id": 1041, "answer_sql": []}, {"question_id": 1042, "answer_sql": ["SELECT L.name FROM League L JOIN ( SELECT league_id, AVG(home_team_goal) AS avg_home_goals, AVG(away_team_goal) AS avg_away_goals FROM Match WHERE season = '2009/2010' GROUP BY league_id ) M ON L.id = M.league_id WHERE M.avg_home_goals > M.avg_away_goals;"]}, {"question_id": 1043, "answer_sql": ["SELECT team_short_name FROM Team WHERE team_long_name = 'Queens Park Rangers';"]}, {"question_id": 1044, "answer_sql": ["SELECT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.birthday LIKE '197010%'"]}, {"question_id": 1045, "answer_sql": ["SELECT T1.attacking_work_rate FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id WHERE T2.player_name = 'Franco Zennaro';"]}, {"question_id": 1046, "answer_sql": []}, {"question_id": 1047, "answer_sql": []}, {"question_id": 1048, "answer_sql": ["SELECT overall_rating FROM Player_Attributes JOIN Player ON Player_Attributes.player_fifa_api_id = Player.player_fifa_api_id WHERE strftime('%Y', Player_Attributes.date) = '2011' AND Player.player_name = 'Gabriel Tamas';"]}, {"question_id": 1049, "answer_sql": ["SELECT COUNT(T1.id) AS match_count FROM Match AS T1 JOIN League AS T2 ON T1.league_id = T2.id WHERE T2.name = 'Scotland Premier League' AND T1.season = '2015/2016';"]}, {"question_id": 1050, "answer_sql": ["SELECT preferred_foot FROM Player_Attributes WHERE player_api_id = ( SELECT player_api_id FROM Player ORDER BY birthday ASC LIMIT 1 )"]}, {"question_id": 1051, "answer_sql": []}, {"question_id": 1052, "answer_sql": ["SELECT COUNT(T1.player_api_id) AS preferred_foot_count FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.weight < 130 AND T1.preferred_foot = 'left';"]}, {"question_id": 1053, "answer_sql": []}, {"question_id": 1054, "answer_sql": ["SELECT defensive_work_rate FROM Player_Attributes JOIN Player ON Player_Attributes.player_fifa_api_id = Player.player_fifa_api_id WHERE player_name = 'David Wilson';"]}, {"question_id": 1055, "answer_sql": ["SELECT T2.birthday FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes)", "SELECT T2.birthday FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes) ORDER BY T2.birthday ASC LIMIT 1;"]}, {"question_id": 1056, "answer_sql": ["SELECT T1.name FROM League AS T1 JOIN Country AS T2 ON T1.country_id = T2.id WHERE T2.name = 'Netherlands';", "SELECT T2.name FROM League AS T1 JOIN Country AS T2 ON T1.country_id = T2.id WHERE T2.name = 'Netherlands';"]}, {"question_id": 1057, "answer_sql": ["SELECT AVG(T1.home_team_goal) AS average_home_team_goal FROM Match AS T1 JOIN League AS T2 ON T1.country_id = T2.id JOIN Country AS T3 ON T2.country_id = T3.id WHERE T3.name = 'Poland' AND T1.season = '2010/2011';"]}, {"question_id": 1058, "answer_sql": []}, {"question_id": 1059, "answer_sql": []}, {"question_id": 1060, "answer_sql": ["SELECT COUNT(*) FROM Player WHERE strftime('%Y', birthday) > '1990';"]}, {"question_id": 1061, "answer_sql": ["SELECT COUNT(*) FROM Player WHERE player_name LIKE 'Adam%' AND weight > 170;", "SELECT COUNT(*) FROM Player WHERE player_name = 'Adam' AND weight > 170;"]}, {"question_id": 1062, "answer_sql": ["SELECT T2.player_name FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.overall_rating > 80 AND strftime('%Y', T1.date) BETWEEN '2008' AND '2010';"]}, {"question_id": 1063, "answer_sql": ["SELECT potential FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Doran');"]}, {"question_id": 1064, "answer_sql": []}, {"question_id": 1065, "answer_sql": ["SELECT DISTINCT T2.team_long_name FROM Team_Attributes AS T1 JOIN Team AS T2 ON T1.team_fifa_api_id = T2.team_fifa_api_id WHERE T1.buildUpPlaySpeedClass = 'Fast';", "SELECT T2.team_long_name FROM Team_Attributes AS T1 JOIN Team AS T2 ON T1.team_fifa_api_id = T2.team_fifa_api_id WHERE T1.buildUpPlaySpeedClass = 'Fast';"]}, {"question_id": 1066, "answer_sql": []}, {"question_id": 1067, "answer_sql": ["SELECT T2.team_short_name FROM Team_Attributes AS T1 JOIN Team AS T2 ON T1.team_fifa_api_id = T2.team_fifa_api_id WHERE T1.buildUpPlayPassing > 70;"]}, {"question_id": 1068, "answer_sql": ["SELECT AVG(overall_rating) AS average_overall_rating FROM Player_Attributes WHERE date BETWEEN strftime('%Y', '2010-01-01') AND strftime('%Y', '2015-12-31') AND overall_rating > 170 AND player_api_id IN ( SELECT player_api_id FROM Player WHERE height > 170 );"]}, {"question_id": 1069, "answer_sql": ["SELECT T1.player_name, T1.height FROM Player AS T1 WHERE T1.height = (SELECT MIN(height) FROM Player) ORDER BY T1.height ASC LIMIT 1;"]}, {"question_id": 1070, "answer_sql": ["SELECT T1.country_id, T1.name FROM League AS T1 JOIN Country AS T2 ON T1.country_id = T2.id WHERE T1.name = 'Italy Serie A';", "SELECT T2.name FROM League AS T1 JOIN Country AS T2 ON T1.country_id = T2.id WHERE T1.name = 'Italy Serie A';"]}, {"question_id": 1071, "answer_sql": []}, {"question_id": 1072, "answer_sql": ["SELECT AVG(T1.overall_rating) AS average_overall_rating FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id WHERE T2.player_name = 'Aaron Doran';"]}, {"question_id": 1073, "answer_sql": []}, {"question_id": 1074, "answer_sql": ["SELECT T2.team_short_name FROM Match AS T1 JOIN Team AS T3 ON T1.home_team_api_id = T3.team_api_id JOIN Team AS T2 ON T1.away_team_api_id = T2.team_api_id WHERE T1.home_team_goal = 10;", "SELECT T2.team_short_name FROM Match AS T1 JOIN Team AS T3 ON T1.home_team_api_id = T3.team_api_id JOIN Team AS T4 ON T1.away_team_api_id = T4.team_api_id JOIN Team AS T2 ON T4.team_fifa_api_id = T2.team_fifa_api_id WHERE T1.home_team_goal = 10 AND T1.home_team_api_id = T2.team_fifa_api_id;", "SELECT T2.team_short_name FROM Match AS T1 JOIN Team AS T3 ON T1.home_team_api_id = T3.team_api_id JOIN Team AS T4 ON T1.away_team_api_id = T4.team_api_id JOIN Team AS T2 ON T1.home_team_api_id = T2.team_api_id WHERE T1.home_team_goal = 10 AND T2.team_short_name IS NOT NULL;"]}, {"question_id": 1075, "answer_sql": ["SELECT P.player_name, PA.balance, PA.potential FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE PA.potential = 61 ORDER BY PA.balance DESC LIMIT 1;"]}, {"question_id": 1076, "answer_sql": []}, {"question_id": 1077, "answer_sql": ["SELECT team_long_name FROM Team WHERE team_short_name = 'GEN';"]}, {"question_id": 1078, "answer_sql": ["SELECT T1.player_name, T2.player_name FROM Player AS T1 JOIN Player AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id WHERE T1.birthday < T2.birthday ORDER BY T1.birthday ASC LIMIT 1;"]}, {"question_id": 1079, "answer_sql": ["SELECT player_name, player_api_id, height FROM Player ORDER BY height DESC LIMIT 1;"]}, {"question_id": 1080, "answer_sql": ["SELECT COUNT(T1.player_api_id) AS count FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.preferred_foot = 'left' AND T1.attacking_work_rate = 'low';"]}, {"question_id": 1081, "answer_sql": ["SELECT T2.name FROM League AS T1 JOIN Country AS T2 ON T1.country_id = T2.id WHERE T1.name = 'Belgium Jupiler League';", "SELECT T1.country_id, T1.name FROM League AS T1 JOIN Country AS T2 ON T1.country_id = T2.id WHERE T1.name = 'Belgium Jupiler League';", "SELECT T1.name FROM League AS T1 JOIN Country AS T2 ON T1.country_id = T2.id WHERE T1.name = 'Belgium Jupiler League';"]}, {"question_id": 1082, "answer_sql": ["SELECT DISTINCT T1.name FROM League AS T1 JOIN Country AS T2 ON T1.country_id = T2.id WHERE T2.name = 'Germany';"]}, {"question_id": 1083, "answer_sql": []}, {"question_id": 1084, "answer_sql": ["SELECT COUNT(*) AS player_count FROM Player_Attributes PA JOIN Player P ON PA.player_api_id = P.player_api_id WHERE strftime('%Y', P.birthday) < '1986' AND PA.defensive_work_rate = 'high';"]}, {"question_id": 1085, "answer_sql": []}, {"question_id": 1086, "answer_sql": ["SELECT heading_accuracy FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Ariel Borysiuk');"]}, {"question_id": 1087, "answer_sql": []}, {"question_id": 1088, "answer_sql": []}, {"question_id": 1089, "answer_sql": ["SELECT COUNT(*) AS match_count FROM Match WHERE season = '2008/2009' AND country_id = (SELECT id FROM Country WHERE name = 'Belgium');"]}, {"question_id": 1090, "answer_sql": []}, {"question_id": 1091, "answer_sql": []}, {"question_id": 1092, "answer_sql": ["SELECT L.name FROM League L WHERE L.id = (SELECT league_id FROM Match WHERE season = '2008/2009' GROUP BY league_id ORDER BY COUNT(*) DESC LIMIT 1);"]}, {"question_id": 1093, "answer_sql": ["SELECT AVG(T1.overall_rating) AS average_overall_rating FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.birthday < '1986-01-01' GROUP BY T2.birthday;", "SELECT AVG(T1.overall_rating) AS average_overall_rating FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.birthday < '1986-01-01' GROUP BY T1.player_api_id;"]}, {"question_id": 1094, "answer_sql": []}, {"question_id": 1095, "answer_sql": []}, {"question_id": 1096, "answer_sql": ["SELECT AVG(T1.overall_rating) AS average_overall_rating FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Pietro Marino';"]}, {"question_id": 1097, "answer_sql": ["SELECT SUM(T2.crossing) AS total_crossing_score FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id JOIN Team_Attributes AS T3 ON T1.player_fifa_api_id = T3.team_fifa_api_id JOIN Team AS T4 ON T3.team_fifa_api_id = T4.team_fifa_api_id WHERE T1.player_name = 'Aaron Lennox';", "SELECT SUM(T2.crossing) AS total_crossing_score FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = 'Aaron Lennox';"]}, {"question_id": 1098, "answer_sql": []}, {"question_id": 1099, "answer_sql": []}, {"question_id": 1100, "answer_sql": []}, {"question_id": 1101, "answer_sql": []}, {"question_id": 1102, "answer_sql": []}, {"question_id": 1103, "answer_sql": ["SELECT overall_rating FROM Player_Attributes JOIN Player ON Player_Attributes.player_fifa_api_id = Player.player_fifa_api_id WHERE player_name = 'Aaron Mooy' AND date = '2016-02-04 00:00:00';"]}, {"question_id": 1104, "answer_sql": ["SELECT overall_rating, potential FROM Player_Attributes JOIN Player ON Player_Attributes.player_fifa_api_id = Player.player_fifa_api_id WHERE player_name = 'Francesco Parravicini' AND date = '2010-08-30 00:00:00';"]}, {"question_id": 1105, "answer_sql": ["SELECT T2.attacking_work_rate FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = 'Francesco Migliore' AND T2.date = '2015-05-01 00:00:00';"]}, {"question_id": 1106, "answer_sql": []}, {"question_id": 1107, "answer_sql": ["SELECT T1.date FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id WHERE T2.player_name = 'Kevin Constant' AND T1.crossing = (SELECT MAX(crossing) FROM Player_Attributes WHERE player_fifa_api_id = T2.player_fifa_api_id) ORDER BY T1.date ASC LIMIT 1;", "SELECT T1.date FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Kevin Constant' ORDER BY T1.crossing DESC LIMIT 1;", "SELECT T1.date FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id WHERE T2.player_name = 'Kevin Constant' AND T1.crossing = (SELECT MAX(crossing) FROM Player_Attributes WHERE player_fifa_api_id = T2.player_fifa_api_id)"]}, {"question_id": 1108, "answer_sql": []}, {"question_id": 1109, "answer_sql": ["SELECT T2.buildUpPlayDribblingClass FROM Match AS T1 JOIN Team AS T3 ON T1.home_team_api_id = T3.team_api_id JOIN Team_Attributes AS T2 ON T3.team_fifa_api_id = T2.team_fifa_api_id WHERE T1.date = '2015-09-10 00:00:00' AND T1.country_id = (SELECT id FROM Country WHERE name = 'LEI')"]}, {"question_id": 1110, "answer_sql": []}, {"question_id": 1111, "answer_sql": []}, {"question_id": 1112, "answer_sql": []}, {"question_id": 1113, "answer_sql": ["SELECT T2.defenceAggressionClass FROM Team AS T1 JOIN Team_Attributes AS T2 ON T1.team_fifa_api_id = T2.team_fifa_api_id WHERE T1.team_long_name = 'Hannover 96' AND T2.date = '2015-09-10 00:00:00';"]}, {"question_id": 1114, "answer_sql": ["SELECT AVG(T1.overall_rating) AS average_overall_rating FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Marko Arnautovic' AND T1.date BETWEEN '2007-02-22 00:00:00' AND '2016-04-21 00:00:00';"]}, {"question_id": 1115, "answer_sql": ["SELECT CAST((SUM(CASE WHEN T1.date = '2013/7/12' THEN 1 ELSE 0 END) * 100) AS REAL) / COUNT(T1.date) * 100 AS Percentage FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id WHERE T2.player_name = 'Landon Donovan' AND T1.date = '2013/7/12' AND T2.player_name = 'Jordan Bowery';"]}, {"question_id": 1116, "answer_sql": ["SELECT player_name FROM Player WHERE height = (SELECT MAX(height) FROM Player) LIMIT 5;", "SELECT player_name FROM Player ORDER BY height DESC LIMIT 5;"]}, {"question_id": 1117, "answer_sql": ["SELECT `player_api_id` FROM `Player` ORDER BY `weight` DESC LIMIT 10;"]}, {"question_id": 1118, "answer_sql": ["SELECT player_name FROM Player WHERE strftime('%Y', birthday) <= strftime('%Y', CURRENT_DATE) - 35;"]}, {"question_id": 1119, "answer_sql": ["SELECT COUNT(home_team_goal) AS home_team_goals FROM Match WHERE home_player_X1 = (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Lennon')"]}, {"question_id": 1120, "answer_sql": ["SELECT SUM(CASE WHEN T1.player_name = 'Daan Smith' THEN T2.away_team_goal ELSE 0 END) + SUM(CASE WHEN T1.player_name = 'Filipe Ferreira' THEN T2.away_team_goal ELSE 0 END) FROM Player AS T1 JOIN Team AS T3 ON T1.player_api_id = T3.team_fifa_api_id JOIN Match AS T2 ON T2.home_team_api_id = T3.team_api_id OR T2.away_team_api_id = T3.team_api_id WHERE T1.player_name IN ('Daan Smith', 'Filipe Ferreira') GROUP BY T1.player_name;", "SELECT SUM(CASE WHEN T2.player_name = 'Daan Smith' THEN T1.away_team_goal ELSE 0 END) + SUM(CASE WHEN T2.player_name = 'Filipe Ferreira' THEN T1.away_team_goal ELSE 0 END) AS total_goals FROM Match AS T1 JOIN Player AS T2 ON T1.home_player_1 = T2.player_api_id OR T1.home_player_2 = T2.player_api_id OR T1.home_player_3 = T2.player_api_id OR T1.home_player_4 = T2.player_api_id OR T1.home_player_5 = T2.player_api_id OR T1.home_player_6 = T2.player_api_id OR T1.home_player_7 = T2.player_api_id OR T1.home_player_8 = T2.player_api_id OR T1.home_player_9 = T2.player_api_id OR T1.home_player_10 = T2.player_api_id OR T1.home_player_11 = T2.player_api_id", "SELECT SUM(CASE WHEN T2.player_name = 'Daan Smith' THEN T1.away_team_goal ELSE 0 END) + SUM(CASE WHEN T2.player_name = 'Filipe Ferreira' THEN T1.away_team_goal ELSE 0 END) AS total_goals FROM Match AS T1 JOIN Player AS T2 ON T1.home_player_X1 = T2.player_api_id JOIN Player AS T3 ON T1.away_player_X1 = T3.player_api_id WHERE T2.player_name IN ('Daan Smith', 'Filipe Ferreira')"]}, {"question_id": 1121, "answer_sql": []}, {"question_id": 1122, "answer_sql": []}, {"question_id": 1123, "answer_sql": []}, {"question_id": 1124, "answer_sql": []}, {"question_id": 1125, "answer_sql": ["SELECT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.finishing = 1 ORDER BY T1.birthday ASC LIMIT 1;", "SELECT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.finishing = 1 ORDER BY T1.birthday DESC LIMIT 1;"]}, {"question_id": 1126, "answer_sql": []}, {"question_id": 1127, "answer_sql": []}, {"question_id": 1128, "answer_sql": []}, {"question_id": 1129, "answer_sql": []}, {"question_id": 1130, "answer_sql": ["SELECT T2.team_short_name FROM Match AS T1 JOIN Team AS T3 ON T1.away_team_api_id = T3.team_fifa_api_id JOIN Team_Attributes AS T4 ON T3.team_fifa_api_id = T4.team_fifa_api_id JOIN Team AS T2 ON T1.away_team_api_id = T2.team_fifa_api_id WHERE T4.chanceCreationPassingClass = 'Safe'", "SELECT T2.team_short_name FROM Match AS T1 JOIN Team AS T3 ON T1.away_team_api_id = T3.team_api_id JOIN Team_Attributes AS T4 ON T3.team_fifa_api_id = T4.team_fifa_api_id JOIN Team AS T2 ON T1.away_team_api_id = T2.team_api_id WHERE T4.chanceCreationPassingClass = 'Safe';"]}, {"question_id": 1131, "answer_sql": []}, {"question_id": 1132, "answer_sql": ["SELECT player_name FROM Player WHERE height > 180 ORDER BY player_name ASC LIMIT 3;"]}, {"question_id": 1133, "answer_sql": ["SELECT COUNT(*) FROM Player WHERE player_name LIKE 'Aaron%' AND birthday > '1990-01-01';"]}, {"question_id": 1134, "answer_sql": ["SELECT SUM(CASE WHEN T1.id = 6 THEN T1.jumping ELSE 0 END) - SUM(CASE WHEN T1.id = 23 THEN T1.jumping ELSE 0 END) AS jumping_difference FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.id IN (6, 23);", "SELECT SUM(jumping) AS jumping_difference FROM Player_Attributes WHERE id IN (6, 23);", "SELECT SUM(CASE WHEN T1.id = 6 THEN T2.jumping ELSE 0 END) - SUM(CASE WHEN T1.id = 23 THEN T2.jumping ELSE 0 END) AS jumping_difference FROM Player_Attributes AS T1 JOIN Player_Attributes AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id WHERE T1.id IN (6, 23)"]}, {"question_id": 1135, "answer_sql": ["SELECT T1.player_api_id, T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.potential = (SELECT MIN(T2.potential) FROM Player_Attributes AS T2) AND T2.preferred_foot = 'right' ORDER BY T2.potential ASC LIMIT 3;", "SELECT T1.player_api_id FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.potential = (SELECT MIN(potential) FROM Player_Attributes) AND T1.preferred_foot = 'right' ORDER BY T1.potential ASC LIMIT 3;"]}, {"question_id": 1136, "answer_sql": ["SELECT COUNT(T1.player_api_id) AS player_count FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.crossing = (SELECT MAX(crossing) FROM Player_Attributes WHERE preferred_foot = 'left') AND T1.preferred_foot = 'left' AND T1.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes WHERE preferred_foot = 'left')", "SELECT COUNT(T1.player_api_id) AS player_count FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.crossing = (SELECT MAX(T3.crossing) FROM Player_Attributes AS T3 WHERE T3.preferred_foot = 'left') AND T1.preferred_foot = 'left'"]}, {"question_id": 1137, "answer_sql": ["SELECT (COUNT(CASE WHEN strength > 80 AND stamina > 80 THEN 1 END) * 100) / COUNT(*) AS percentage FROM Player_Attributes WHERE strength > 80 AND stamina > 80;", "SELECT (COUNT(CASE WHEN strength > 80 AND stamina > 80 THEN 1 END) / COUNT(*)) * 100 AS percentage FROM Player_Attributes", "SELECT (COUNT(CASE WHEN strength > 80 AND stamina > 80 THEN 1 END) * 100) / COUNT(*) AS percentage FROM Player_Attributes"]}, {"question_id": 1138, "answer_sql": ["SELECT T2.name AS country_name FROM League AS T1 JOIN Country AS T2 ON T1.country_id = T2.id WHERE T1.name = 'Poland Ekstraklasa';", "SELECT T1.country_id, T1.name FROM League AS T1 JOIN Country AS T2 ON T1.country_id = T2.id WHERE T2.name = 'Poland' AND T1.name = 'Ekstraklasa';"]}, {"question_id": 1139, "answer_sql": ["SELECT home_team_goal, away_team_goal FROM Match WHERE date = '2008-09-24' AND league_id = (SELECT league_id FROM League WHERE name = 'Belgian Jupiler League');"]}, {"question_id": 1140, "answer_sql": ["SELECT `Player_Attributes`.crossing, `Player_Attributes`.agility, `Player_Attributes`.acceleration FROM `Player_Attributes` JOIN `Player` ON `Player_Attributes`.player_api_id = `Player`.player_api_id WHERE `Player`.player_name = 'Alexis Blin';", "SELECT `Player_Attributes`.crossing, `Player_Attributes`.agility, `Player_Attributes`.acceleration FROM `Player_Attributes` JOIN `Player` ON `Player_Attributes`.player_fifa_api_id = `Player`.player_api_id WHERE `Player`.player_name = 'Alexis Blin';"]}, {"question_id": 1141, "answer_sql": ["SELECT T2.buildUpPlaySpeedClass AS speed_class FROM Team AS T1 JOIN Team_Attributes AS T2 ON T1.team_fifa_api_id = T2.team_fifa_api_id WHERE T1.team_long_name = 'KSV Cercle Brugge';"]}, {"question_id": 1142, "answer_sql": ["SELECT COUNT(id) AS game_count FROM Match WHERE season = '2015/2016' AND league_id = (SELECT id FROM League WHERE name = 'Italian Serie A');"]}, {"question_id": 1143, "answer_sql": ["SELECT MAX(T1.home_team_goal) AS highest_score FROM Match AS T1 JOIN League AS T2 ON T1.league_id = T2.id JOIN Country AS T3 ON T2.country_id = T3.id WHERE T3.name = 'Netherlands' AND T2.name = 'Eredivisie';", "SELECT MAX(home_team_goal) AS highest_score FROM Match WHERE league_id = (SELECT id FROM League WHERE country_id = (SELECT id FROM Country WHERE name = 'Netherlands')) AND country_id = (SELECT id FROM Country WHERE name = 'Netherlands');"]}, {"question_id": 1144, "answer_sql": ["SELECT P.player_name, P.weight, PA.finishing, PA.curve FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE P.weight = (SELECT MAX(weight) FROM Player) ORDER BY PA.finishing DESC, PA.curve DESC;", "SELECT P.player_name, P.weight, PA.finishing, PA.curve FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE P.weight = (SELECT MAX(weight) FROM Player) ORDER BY PA.finishing DESC, PA.curve DESC LIMIT 1;"]}, {"question_id": 1145, "answer_sql": ["SELECT L.name FROM League L JOIN Match M ON L.id = M.league_id WHERE M.season = '2015/2016' GROUP BY L.name ORDER BY COUNT(M.id) DESC LIMIT 1;"]}, {"question_id": 1146, "answer_sql": ["SELECT T2.team_long_name FROM Match AS T1 JOIN Team AS T3 ON T1.away_team_api_id = T3.team_api_id JOIN Team AS T2 ON T1.home_team_api_id = T2.team_api_id WHERE T1.away_team_goal = (SELECT MAX(away_team_goal) FROM Match) ORDER BY T1.away_team_goal DESC LIMIT 1;"]}, {"question_id": 1147, "answer_sql": ["SELECT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes) ORDER BY T1.player_name ASC LIMIT 1;"]}, {"question_id": 1148, "answer_sql": []}, {"question_id": 1149, "answer_sql": ["SELECT (COUNT(CASE WHEN SEX = 'M' AND Admission = '+' THEN ID ELSE NULL END) - COUNT(CASE WHEN SEX = 'M' AND Admission = '-' THEN ID ELSE NULL END)) * 100 / ( COUNT(CASE WHEN SEX = 'M' AND Admission = '+' THEN ID ELSE NULL END) + COUNT(CASE WHEN SEX = 'M' AND Admission = '-' THEN ID ELSE NULL END) ) AS deviation_percentage FROM Patient WHERE SEX = 'M';", "SELECT (COUNT(CASE WHEN SEX = 'M' AND Admission = '+' THEN ID ELSE NULL END) - COUNT(CASE WHEN SEX = 'M' AND Admission = '-' THEN ID ELSE NULL END)) / (COUNT(CASE WHEN SEX = 'M' AND Admission = '+' THEN ID ELSE NULL END) + COUNT(CASE WHEN SEX = 'M' AND Admission = '-' THEN ID ELSE NULL END)) * 100 AS DeviationPercentage FROM Patient"]}, {"question_id": 1150, "answer_sql": []}, {"question_id": 1151, "answer_sql": []}, {"question_id": 1152, "answer_sql": []}, {"question_id": 1153, "answer_sql": ["SELECT T2.Date, T1.Diagnosis FROM Examination AS T1 JOIN Patient AS T3 ON T1.ID = T3.ID JOIN Laboratory AS T2 ON T2.ID = T1.ID WHERE T3.ID = 30609 ORDER BY T2.Date;"]}, {"question_id": 1154, "answer_sql": ["SELECT P.SEX, P.Birthday, E.`Examination Date`, E.Symptoms FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE P.ID = 163109;"]}, {"question_id": 1155, "answer_sql": ["SELECT P.ID, P.SEX, P.Birthday FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.Date BETWEEN '2020-01-01' AND '2020-12-31' AND L.ID = (SELECT ID FROM Laboratory WHERE Date BETWEEN '2020-01-01' AND '2020-12-31' AND LDH > 500)", "SELECT P.ID, P.SEX, P.Birthday FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.Date NOT NULL AND L.LDH > 500;", "SELECT P.ID, P.SEX, P.Birthday FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.LDH > 500;"]}, {"question_id": 1156, "answer_sql": []}, {"question_id": 1157, "answer_sql": ["SELECT P.ID, P.SEX, P.Diagnosis FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE E.Thrombosis = 2;"]}, {"question_id": 1158, "answer_sql": []}, {"question_id": 1159, "answer_sql": ["SELECT P.ID, P.SEX, P.Diagnosis FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.ALB < 3.5;"]}, {"question_id": 1160, "answer_sql": []}, {"question_id": 1161, "answer_sql": []}, {"question_id": 1162, "answer_sql": []}, {"question_id": 1163, "answer_sql": []}, {"question_id": 1164, "answer_sql": ["SELECT COUNT(DISTINCT T1.ID) AS WomenWithMostSeriousThrombosis FROM Examination T1 JOIN Patient T2 ON T1.ID = T2.ID WHERE T1.Thrombosis = '1' AND T2.SEX = 'F' AND T1.`Examination Date` BETWEEN '1997-01-01' AND '1997-12-31';", "SELECT COUNT(DISTINCT P.ID) AS WomenWithMostSeriousThrombosis FROM Examination E JOIN Patient P ON E.ID = P.ID JOIN Laboratory L ON E.ID = L.ID WHERE E.Thrombosis = 1 AND P.SEX = 'F' AND E.`Examination Date` BETWEEN '1997-01-01' AND '1997-12-31';"]}, {"question_id": 1165, "answer_sql": []}, {"question_id": 1166, "answer_sql": []}, {"question_id": 1167, "answer_sql": []}, {"question_id": 1168, "answer_sql": []}, {"question_id": 1169, "answer_sql": []}, {"question_id": 1170, "answer_sql": []}, {"question_id": 1171, "answer_sql": ["SELECT COUNT(DISTINCT P.ID) AS UnderagePatientsExamined FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE P.Birthday < 18 AND E.`Examination Date` BETWEEN '1990-01-01' AND '1993-12-31';", "SELECT COUNT(DISTINCT E.ID) AS UnderagePatientsExamined FROM Examination E JOIN Patient P ON E.ID = P.ID WHERE P.Birthday < '1990-01-01' AND E.`Examination Date` BETWEEN '1990-01-01' AND '1993-12-31';"]}, {"question_id": 1172, "answer_sql": []}, {"question_id": 1173, "answer_sql": ["SELECT MAX(T2.Diagnosis) AS MostCommonIllness FROM Examination AS T1 JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.`Examination Date` BETWEEN '1985-01-01' AND '1995-12-31';", "SELECT MAX(T2.Diagnosis) AS MostCommonIllness FROM Examination AS T1 JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.`Examination Date` BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY T2.Diagnosis;", "SELECT MAX(T1.Diagnosis) AS MostCommonIllness FROM Examination T1 JOIN Patient T2 ON T1.ID = T2.ID WHERE T1.`Examination Date` BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY T1.Diagnosis;", "SELECT MAX(T2.Diagnosis) AS MostCommonIllness FROM Examination AS T1 JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.`Examination Date` BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY T1.ID;"]}, {"question_id": 1174, "answer_sql": []}, {"question_id": 1175, "answer_sql": ["SELECT P.ID AS PatientID, P.SEX, P.Birthday, P.Description, P.`First Date`, P.Admission, P.Diagnosis, EX.`Examination Date`, EX.`aCL IgG`, EX.`aCL IgM`, EX.`aCL IgA`, EX.Diagnosis, EX.KCT, EX.RVVT, EX.LAC, EX.Symptoms, EX.Thrombosis, EX.`aCL IgG` AS HighestHemoglobinCount, EX.Diagnosis AS DoctorDiagnosis FROM Patient P JOIN Examination EX ON P.ID = EX.ID WHERE EX.`aCL IgG` = ( SELECT MAX(`aCL IgG`) FROM Examination ) ORDER BY EX.`Examination Date` DESC;"]}, {"question_id": 1176, "answer_sql": ["SELECT `ANA Pattern`, `ANA` FROM Examination WHERE ID = 3605340 AND `Examination Date` = '1996-12-02';"]}, {"question_id": 1177, "answer_sql": ["SELECT T1.`T-CHO` AS TotalCholesterolStatus FROM Laboratory AS T1 JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.ID = 2927464 AND T1.Date = '1995-09-04' AND T1.`T-CHO` < 250;", "SELECT T2.`T-CHO` AS cholesterol_level FROM Patient AS T1 JOIN Examination AS T3 ON T1.ID = T3.ID JOIN Laboratory AS T2 ON T3.ID = T2.ID WHERE T1.ID = 2927464 AND T3.`Examination Date` = '1995-09-04' AND T2.`T-CHO` < 250;", "SELECT CASE WHEN TP < 250 THEN 'Yes' ELSE 'No' END AS TotalCholesterolStatus FROM Laboratory WHERE ID = 2927464 AND Date = '1995-09-04';"]}, {"question_id": 1178, "answer_sql": ["SELECT DISTINCT P.SEX FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE E.Diagnosis = 'AORTITIS' ORDER BY P.SEX ASC LIMIT 1;"]}, {"question_id": 1179, "answer_sql": ["SELECT T2.`aCL IgM` FROM Patient AS T1 JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.Description = '1994-02-19' AND T1.Diagnosis = 'SLE' AND T2.`Examination Date` = '1993-11-12';", "SELECT Examination.`aCL IgM` FROM Examination JOIN Patient ON Examination.ID = Patient.ID JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Patient.Description = '1994-02-19' AND Examination.Diagnosis = 'SLE' AND Examination.`Examination Date` = '1993-11-12';"]}, {"question_id": 1180, "answer_sql": []}, {"question_id": 1181, "answer_sql": []}, {"question_id": 1182, "answer_sql": ["SELECT COUNT(L.ID) AS Total_Laboratory_Tests FROM Examination E JOIN Patient P ON E.ID = P.ID JOIN Laboratory L ON L.ID = P.ID WHERE E.`Examination Date` = '1995-01-01' AND P.Diagnosis = 'SJS';"]}, {"question_id": 1183, "answer_sql": ["SELECT p.Diagnosis FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE e.`Examination Date` = '1997-01-27' AND p.`First Date` = (SELECT MIN(ID) FROM Examination WHERE Diagnosis = 'SLE');", "SELECT p.Diagnosis FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE e.`Examination Date` = '1997-01-27' AND p.`First Date` = '1997-01-27';"]}, {"question_id": 1184, "answer_sql": ["SELECT Symptoms FROM Examination WHERE `Examination Date` = '1993-09-27' AND ID IN ( SELECT ID FROM Patient WHERE Birthday = '1959-03-01' );"]}, {"question_id": 1185, "answer_sql": ["SELECT T2.ID, (SUM(CASE WHEN T2.Date LIKE '1981-12-%' THEN T2.`T-CHO` ELSE 0 END) - SUM(CASE WHEN T2.Date LIKE '1981-11-%' THEN T2.`T-CHO` ELSE 0 END)) / SUM(CASE WHEN T2.Date LIKE '1981-11-%' THEN T2.`T-CHO` ELSE 0 END) AS DecreaseRate FROM Laboratory AS T2 JOIN Patient AS T1 ON T2.ID = T1.ID WHERE T1.Birthday = '1959-02-18' GROUP BY T2.ID ORDER BY DecreaseRate DESC;", "SELECT T2.ID, (SUM(CASE WHEN T2.Date LIKE '1981-11-%' THEN T2.`T-CHO` ELSE 0 END) - SUM(CASE WHEN T2.Date LIKE '1981-12-%' THEN T2.`T-CHO` ELSE 0 END)) / SUM(CASE WHEN T2.Date LIKE '1981-11-%' THEN 1 ELSE 0 END) AS DecreaseRate FROM Laboratory AS T2 JOIN Patient AS T1 ON T1.ID = T2.ID WHERE T1.Birthday = '1959-02-18' GROUP BY T2.ID ORDER BY DecreaseRate DESC;", "SELECT (SUM(CASE WHEN T1.Date LIKE '1981-12-%' THEN T1.`T-CHO` ELSE 0 END) - SUM(CASE WHEN T1.Date LIKE '1981-11-%' THEN T1.`T-CHO` ELSE 0 END)) / SUM(CASE WHEN T1.Date LIKE '1981-11-%' THEN T1.`T-CHO` ELSE 0 END) * 100 AS DecreaseRate FROM Laboratory AS T1 JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.Birthday = '1959-02-18';", "SELECT (SUM(CASE WHEN T1.Date LIKE '1981-11-%' THEN T1.`T-CHO` ELSE 0 END) - SUM(CASE WHEN T1.Date LIKE '1981-12-%' THEN T1.`T-CHO` ELSE 0 END)) / SUM(CASE WHEN T1.Date LIKE '1981-11-%' THEN 1 ELSE 0 END) AS DecreaseRate FROM Laboratory AS T1 JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.Birthday = '1959-02-18';"]}, {"question_id": 1186, "answer_sql": ["SELECT DISTINCT P.ID FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE E.Diagnosis = 'Behcet' AND E.`Examination Date` BETWEEN '1970-01-01' AND '1997-12-31';", "SELECT DISTINCT P.ID FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON E.ID = L.ID WHERE P.Diagnosis = 'Behcet' AND E.`Examination Date` BETWEEN '1970-01-01' AND '1997-12-31';"]}, {"question_id": 1187, "answer_sql": ["SELECT P.ID FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE E.`Examination Date` BETWEEN '1987-07-06' AND '1996-01-31' AND L.GPT > 30 AND L.ALB < 4 GROUP BY P.ID ORDER BY P.ID;", "SELECT P.ID FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID AND L.Date BETWEEN '1987-07-06' AND '1996-01-31' WHERE L.GPT > 30 AND L.ALB < 4 GROUP BY P.ID ORDER BY P.ID;"]}, {"question_id": 1188, "answer_sql": []}, {"question_id": 1189, "answer_sql": ["SELECT COUNT(DISTINCT T1.ID) AS patient_count FROM Examination AS T1 JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.Thrombosis = 2 AND T1.`ANA Pattern` = 'S' AND T1.`aCL IgM` > (SELECT AVG(`aCL IgM`) FROM Examination WHERE Thrombosis = 2 AND `ANA Pattern` = 'S')"]}, {"question_id": 1190, "answer_sql": ["SELECT CAST(SUM(CASE WHEN UA <= 6.5 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Laboratory WHERE `U-PRO` > 0 AND `U-PRO` < 30", "SELECT CAST(COUNT(CASE WHEN UA <= 6.5 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(CASE WHEN `U-PRO` > 0 AND `U-PRO` < 30 THEN 1 ELSE NULL END) AS percentage FROM Laboratory JOIN Examination ON Laboratory.ID = Examination.ID JOIN Patient ON Examination.ID = Patient.ID WHERE `U-PRO` > 0 AND `U-PRO` < 30 AND UA <= 6.5;"]}, {"question_id": 1191, "answer_sql": ["SELECT CAST(SUM(CASE WHEN T2.SEX = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.ID) AS Percentage FROM Examination AS T1 JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.`Examination Date` BETWEEN '1981-01-01' AND '1981-12-31' AND T2.SEX = 'M' AND T1.Diagnosis = 'BEHCET';"]}, {"question_id": 1192, "answer_sql": ["SELECT P.ID, P.SEX, P.Birthday, P.Description, P.`First Date`, P.Admission, P.Diagnosis, L.ID, L.Date, L.GOT, L.GPT, L.LDH, L.ALP, L.TP, L.ALB, L.UA, L.UN, L.CRE, L.`T-BIL`, L.`T-CHO`, L.TG, L.CPK, L.GLU, L.WBC, L.RBC, L.HGB, L.HCT, L.PLT, L.PT, L.APTT, L.FG, L.PIC, L.TAT, L.TAT2, L.`U-PRO`, L.IGG, L.IGA, L.IGM, L.CRP, L.RA, L.RF, L.C3, L.C4, L.RNP, L.SM, L.SC170, L.SSA, L.SSB, L.CENTROMEA, L.DNA, L.`DNA-II` FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID AND L.Date BETWEEN '1991-10-01' AND '1991-10-31' WHERE E.Diagnosis = 'Thrombosis' AND L.`T-BIL` < 2.0;"]}, {"question_id": 1193, "answer_sql": ["SELECT COUNT(DISTINCT P.ID) AS Women_Born_1980_1989 FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE P.SEX = 'F' AND P.BIRTHDAY BETWEEN '1980-01-01' AND '1989-12-31' AND E.`ANA Pattern` != 'p';", "SELECT COUNT(*) AS Women_Born_1980_1989 FROM Patient P WHERE P.SEX = 'F' AND P.BIRTHDAY BETWEEN '1980-01-01' AND '1989-12-31' AND NOT EXISTS ( SELECT 1 FROM Examination E WHERE E.Diagnosis = 'p' AND E.ID = P.ID );", "SELECT COUNT(DISTINCT P.ID) AS Women_Born_1980_1989 FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE P.SEX = 'F' AND P.BIRTHDAY BETWEEN '1980-01-01' AND '1989-12-31';"]}, {"question_id": 1194, "answer_sql": ["SELECT DISTINCT P.SEX FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE E.Diagnosis = 'PSS' AND L.CRP > 2 AND L.CRE = 1 AND L.LDH = 123;"]}, {"question_id": 1195, "answer_sql": ["SELECT AVG(Laboratory.ALB) AS AverageBloodAlbuminLevel FROM Laboratory JOIN Patient ON Laboratory.ID = Patient.ID JOIN Examination ON Patient.ID = Examination.ID WHERE Patient.SEX = 'F' AND Laboratory.PLT > 400 AND Examination.Diagnosis = 'SLE';"]}, {"question_id": 1196, "answer_sql": ["SELECT MAX(Symptoms) AS MostCommonSign FROM Examination WHERE Diagnosis = 'SLE';"]}, {"question_id": 1197, "answer_sql": ["SELECT p.Description, p.Diagnosis FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE p.ID = 48473 ORDER BY e.`Examination Date` ASC LIMIT 1;", "SELECT `First Date`, Diagnosis FROM Patient WHERE ID = 48473;"]}, {"question_id": 1198, "answer_sql": ["SELECT COUNT(DISTINCT P.ID) AS FemalePatientsWithAPS FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE P.SEX = 'F' AND E.Diagnosis = 'APS';"]}, {"question_id": 1199, "answer_sql": []}, {"question_id": 1200, "answer_sql": ["SELECT SUM(CASE WHEN Diagnosis LIKE '%SLE%' THEN 1 ELSE 0 END) / SUM(CASE WHEN Diagnosis LIKE '%ITP%' THEN 1 ELSE 0 END) * 100 AS Proportion FROM Examination WHERE Diagnosis LIKE '%SLE%' AND Thrombosis = 1;", "SELECT (SUM(CASE WHEN Diagnosis LIKE '%SLE%' THEN 1 ELSE 0 END) / COUNT(DISTINCT ID)) * 100 FROM Examination WHERE Diagnosis LIKE '%SLE%' AND Thrombosis = 1;"]}, {"question_id": 1201, "answer_sql": []}, {"question_id": 1202, "answer_sql": []}, {"question_id": 1203, "answer_sql": ["SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE P.SEX = 'F' AND L.WBC < 3.5;"]}, {"question_id": 1204, "answer_sql": []}, {"question_id": 1205, "answer_sql": ["SELECT 'M' AS Sex, UA FROM Laboratory WHERE ID = 57266 AND UA > 8.0 UNION SELECT 'F' AS Sex, UA FROM Laboratory WHERE ID = 57266 AND UA > 6.5", "SELECT 'M' AS Sex, UA FROM Laboratory WHERE ID = 57266 AND Date = (SELECT MIN(Date) FROM Laboratory WHERE ID = 57266) AND UA > 8.0 UNION SELECT 'F' AS Sex, UA FROM Laboratory WHERE ID = 57266 AND Date = (SELECT MIN(Date) FROM Laboratory WHERE ID = 57266) AND UA > 6.5;", "SELECT 'M' AS Sex, UA FROM Laboratory WHERE ID = 57266 AND UA > 8.0 UNION ALL SELECT 'F' AS Sex, UA FROM Laboratory WHERE ID = 57266 AND UA > 6.5", "SELECT 'M' AS Sex, UA FROM Laboratory WHERE ID = 57266 AND Date = (SELECT MIN(Date) FROM Laboratory WHERE ID = 57266) UNION SELECT 'F' AS Sex, UA FROM Laboratory WHERE ID = 57266 AND Date = (SELECT MIN(Date) FROM Laboratory WHERE ID = 57266)"]}, {"question_id": 1206, "answer_sql": ["SELECT Examination.`Examination Date` FROM Examination JOIN Patient ON Examination.ID = Patient.ID JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Patient.ID = 48473 AND Examination.`Examination Date` = (SELECT Date FROM Laboratory WHERE ID = 48473 AND GOT > 60)"]}, {"question_id": 1207, "answer_sql": ["SELECT P.SEX, P.Birthday FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE E.`Examination Date` BETWEEN '1994-01-01' AND '1994-12-31' AND E.`aCL IgG` < 60 AND E.`aCL IgM` < 60 AND E.`aCL IgA` < 60 AND E.`ANA Pattern` = 'Normal' AND E.`ANA` < 1000 AND E.`aCL IgG` IS NOT NULL AND E.`aCL IgM` IS NOT NULL AND E.`aCL IgA` IS NOT NULL AND E.`ANA Pattern` IS NOT NULL AND E.`ANA` IS NOT NULL AND E.`aCL IgG` != 0 AND E.`aCL IgM` != 0 AND E.`aCL IgA` != 0 AND E.`ANA Pattern` != '';"]}, {"question_id": 1208, "answer_sql": ["SELECT P.ID FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.Date BETWEEN '2020-01-01' AND '2020-12-31' AND L.GPT >= 60;", "SELECT P.ID FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.GPT > 60 AND EXISTS ( SELECT 1 FROM Examination WHERE ID = P.ID AND GPT > 60 );"]}, {"question_id": 1209, "answer_sql": []}, {"question_id": 1210, "answer_sql": ["SELECT AVG(LDH) AS AverageIndex FROM Laboratory WHERE LDH < 500 GROUP BY LDH", "SELECT AVG(LDH) AS AverageIndex FROM Laboratory WHERE LDH < 500 GROUP BY ID;"]}, {"question_id": 1211, "answer_sql": []}, {"question_id": 1212, "answer_sql": ["SELECT P.ID, P.SEX, P.Birthday, P.Description, P.`First Date`, P.Admission, P.Diagnosis, E.Diagnosis AS ExaminationDiagnosis, E.Thrombosis, L.ALP FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.ALP < 300", "SELECT P.ID, P.SEX, P.Birthday, P.Description, P.`First Date`, P.Admission, P.Diagnosis, E.Diagnosis AS ExaminationDiagnosis, E.Thrombosis, L.ALP FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID AND L.Date = E.`Examination Date` WHERE L.ALP < 300"]}, {"question_id": 1213, "answer_sql": ["SELECT P.ID FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE P.Birthday = '1982-04-01' AND E.`Examination Date` BETWEEN '1982-01-01' AND '1982-12-31' AND E.`aCL IgG` < 300;", "SELECT P.ID FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE P.Birthday = '1982-04-01' AND E.`aCL IgG` < 300;"]}, {"question_id": 1214, "answer_sql": ["SELECT P.ID, P.SEX, P.Birthday FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.TP < 6.0;"]}, {"question_id": 1215, "answer_sql": ["SELECT P.ID, (TP - 8.5) AS TP_deviation FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON E.ID = L.ID WHERE P.SEX = 'F' AND L.TP > 8.5;"]}, {"question_id": 1216, "answer_sql": ["SELECT P.ID, P.Birthday FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.ALB NOT BETWEEN 3.5 AND 5.5 ORDER BY P.Birthday DESC;"]}, {"question_id": 1217, "answer_sql": []}, {"question_id": 1218, "answer_sql": ["SELECT CAST(COUNT(CASE WHEN SEX = 'F' AND UA > 8.0 THEN 1 ELSE NULL END) + COUNT(CASE WHEN SEX = 'F' AND UA > 6.5 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(*) AS Percentage FROM Laboratory JOIN Patient ON Laboratory.ID = Patient.ID WHERE SEX = 'F';", "SELECT CAST(COUNT(CASE WHEN SEX = 'F' AND UA > 8.0 THEN 1 ELSE NULL END) + COUNT(CASE WHEN SEX = 'F' AND UA > 6.5 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(*) AS Percentage FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE SEX = 'F' AND (UA > 8.0 OR UA > 6.5);", "SELECT CAST(COUNT(CASE WHEN SEX = 'F' AND UA > 8.0 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(CASE WHEN SEX = 'F' THEN 1 ELSE NULL END) AS Percentage FROM Laboratory JOIN Patient ON Laboratory.ID = Patient.ID WHERE SEX = 'F' AND UA > 8.0;", "SELECT CAST(COUNT(CASE WHEN SEX = 'F' AND UA > 8.0 THEN 1 ELSE NULL END) + COUNT(CASE WHEN SEX = 'F' AND UA > 6.5 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(*) AS Percentage FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE SEX = 'F' AND (UA > 8.0 OR UA > 6.5);"]}, {"question_id": 1219, "answer_sql": ["SELECT AVG(L.UA) AS Average_UA FROM Laboratory L JOIN Examination E ON L.ID = E.ID JOIN Patient P ON E.ID = P.ID WHERE L.Date = (SELECT MAX(Date) FROM Laboratory WHERE ID = E.ID) AND L.UA < 8.0 AND P.SEX = 'M' UNION ALL SELECT AVG(L.UA) AS Average_UA FROM Laboratory L JOIN Examination E ON L.ID = E.ID JOIN Patient P ON E.ID = P.ID WHERE L.Date = (SELECT MAX(Date) FROM Laboratory WHERE ID = E.ID) AND L.UA < 6.5 AND P.SEX = 'F';", "SELECT AVG(L.UA) AS AverageUAIndex FROM Laboratory L JOIN Patient P ON L.ID = P.ID WHERE L.Date = (SELECT MAX(Date) FROM Laboratory WHERE ID = P.ID) AND L.UA < 8.0 AND P.SEX = 'M' UNION ALL SELECT AVG(L.UA) AS AverageUAIndex FROM Laboratory L JOIN Patient P ON L.ID = P.ID WHERE L.Date = (SELECT MAX(Date) FROM Laboratory WHERE ID = P.ID) AND L.UA < 6.5 AND P.SEX = 'F';"]}, {"question_id": 1220, "answer_sql": ["SELECT P.ID, P.SEX, P.Birthday FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.UN = 29;"]}, {"question_id": 1221, "answer_sql": ["SELECT P.ID, P.SEX, P.Birthday FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE P.Diagnosis = 'RA' AND L.UN < 30;"]}, {"question_id": 1222, "answer_sql": ["SELECT COUNT(P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.CRE > 1.5;"]}, {"question_id": 1223, "answer_sql": ["SELECT CASE WHEN SUM(CASE WHEN SEX = 'M' THEN 1 ELSE 0 END) > SUM(CASE WHEN SEX = 'F' THEN 1 ELSE 0 END) AND CRE >= 1.5 THEN 'True' ELSE 'False' END AS Result FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE CRE >= 1.5 GROUP BY CRE;", "SELECT CASE WHEN SUM(CASE WHEN SEX = 'M' THEN 1 ELSE 0 END) > SUM(CASE WHEN SEX = 'F' THEN 1 ELSE 0 END) AND CRE >= 1.5 THEN 'True' ELSE 'False' END AS Result FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE CRE >= 1.5;", "SELECT CASE WHEN SUM(CASE WHEN SEX = 'M' THEN 1 ELSE 0 END) > SUM(CASE WHEN SEX = 'F' THEN 1 ELSE 0 END) AND CRE >= 1.5 THEN 'True' ELSE 'False' END AS Result FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE CRE >= 1.5 GROUP BY CRE", "SELECT CASE WHEN SUM(CASE WHEN SEX = 'M' THEN 1 ELSE 0 END) > SUM(CASE WHEN SEX = 'F' THEN 1 ELSE 0 END) AND CRE >= 1.5 THEN 'True' ELSE 'False' END AS Result FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE CRE >= 1.5;"]}, {"question_id": 1224, "answer_sql": []}, {"question_id": 1225, "answer_sql": ["SELECT P.SEX, COUNT(*) AS PatientCount FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.`T-BIL` >= 2.0 GROUP BY P.SEX;"]}, {"question_id": 1226, "answer_sql": []}, {"question_id": 1227, "answer_sql": []}, {"question_id": 1228, "answer_sql": ["SELECT P.ID, P.Diagnosis FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON L.ID = E.ID WHERE L.TG > 300;"]}, {"question_id": 1229, "answer_sql": []}, {"question_id": 1230, "answer_sql": []}, {"question_id": 1231, "answer_sql": []}, {"question_id": 1232, "answer_sql": []}, {"question_id": 1233, "answer_sql": ["SELECT P.ID, L.GLU FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE P.Description >= '1991-01-01' AND L.Date >= '1991-01-01' AND L.GLU < 180 GROUP BY P.ID, L.GLU ORDER BY P.ID;", "SELECT P.ID, L.GLU FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE P.Description >= '1991-01-01' AND L.Date = (SELECT MIN(Date) FROM Laboratory WHERE ID = P.ID) AND L.GLU < 180;"]}, {"question_id": 1234, "answer_sql": []}, {"question_id": 1235, "answer_sql": ["SELECT P.ID, P.Birthday, P.Description FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.RBC < 3.5 ORDER BY P.Birthday;"]}, {"question_id": 1236, "answer_sql": ["SELECT P.ID, P.SEX, P.Birthday, P.Description, P.`First Date`, P.Admission, P.Diagnosis, L.RBC, E.Diagnosis AS Examination_Diagnosis FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE P.SEX = 'F' AND P.Birthday >= DATE('now', '-50 years') AND L.RBC IN (3.5, 6.0) AND E.Diagnosis = 'Admitted';"]}, {"question_id": 1237, "answer_sql": []}, {"question_id": 1238, "answer_sql": ["SELECT P.ID, P.SEX FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE P.Diagnosis = 'SLE' AND L.HGB BETWEEN 10 AND 17 ORDER BY P.Birthday ASC LIMIT 1;"]}, {"question_id": 1239, "answer_sql": []}, {"question_id": 1240, "answer_sql": ["SELECT AVG(T1.HCT) AS Average_HCT FROM Laboratory AS T1 JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.Date LIKE '1991%' GROUP BY T1.Date HAVING AVG(T1.HCT) < 29;", "SELECT AVG(T1.HCT) AS AverageHCT FROM Laboratory AS T1 JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.Date LIKE '1991%' GROUP BY T1.Date HAVING T1.HCT < 29;"]}, {"question_id": 1241, "answer_sql": ["SELECT COUNT(CASE WHEN PLT < 100 THEN 1 ELSE NULL END) AS lower_than_normal, COUNT(CASE WHEN PLT > 400 THEN 1 ELSE NULL END) AS higher_than_normal FROM Laboratory WHERE PLT < 100;"]}, {"question_id": 1242, "answer_sql": []}, {"question_id": 1243, "answer_sql": []}, {"question_id": 1244, "answer_sql": []}, {"question_id": 1245, "answer_sql": ["SELECT COUNT(T1.ID) AS ExamCount FROM Examination AS T1 JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.`Examination Date` > '1997-01-01' AND T2.APTT < 45;"]}, {"question_id": 1246, "answer_sql": ["SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE E.Thrombosis = 3 AND L.APTT > 45 AND P.ID NOT IN ( SELECT ID FROM Examination WHERE Thrombosis = 3 );"]}, {"question_id": 1247, "answer_sql": ["SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.WBC BETWEEN 3.5 AND 9.0 AND (L.FG <= 150 OR L.FG >= 450);"]}, {"question_id": 1248, "answer_sql": ["SELECT COUNT(DISTINCT P.ID) AS num_patients FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE P.Birthday > '1980-01-01' AND L.FG NOT BETWEEN 150 AND 450;", "SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.FG < 150 OR L.FG > 450 AND P.Birthday > '1980-01-01';", "SELECT COUNT(DISTINCT P.ID) AS num_patients FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE P.Birthday > '1980-01-01' AND L.FG BETWEEN 150 AND 450;"]}, {"question_id": 1249, "answer_sql": []}, {"question_id": 1250, "answer_sql": ["SELECT P.ID FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.`U-PRO` BETWEEN 0 AND 30 AND P.Diagnosis = 'SLE';", "SELECT P.ID FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON L.ID = P.ID WHERE L.`U-PRO` BETWEEN 0 AND 30 AND E.Diagnosis = 'SLE';"]}, {"question_id": 1251, "answer_sql": ["SELECT COUNT(DISTINCT P.ID) AS Abortion_Patients FROM Examination E JOIN Patient P ON E.ID = P.ID JOIN Laboratory L ON E.ID = L.ID WHERE E.`aCL IgG` < 900 AND E.Symptoms = 'abortion';"]}, {"question_id": 1252, "answer_sql": ["SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.IGG BETWEEN 900 AND 2000 AND E.Symptoms IS NOT NULL;", "SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE E.`aCL IgG` BETWEEN 900 AND 2000 AND E.Symptoms IS NOT NULL;"]}, {"question_id": 1253, "answer_sql": ["SELECT P.Diagnosis FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.IGA BETWEEN 80 AND 500 ORDER BY E.`Examination Date` DESC LIMIT 1;", "SELECT P.Diagnosis FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.ID IN ( SELECT ID FROM Laboratory WHERE IGA BETWEEN 80 AND 500 GROUP BY ID ORDER BY AVG(IGA) DESC LIMIT 1 )"]}, {"question_id": 1254, "answer_sql": []}, {"question_id": 1255, "answer_sql": ["SELECT MAX(Diagnosis) AS MostCommonDisease FROM Examination WHERE `aCL IgM` NOT BETWEEN 40 AND 400 GROUP BY Diagnosis;", "SELECT Diagnosis FROM Examination WHERE `aCL IgM` NOT BETWEEN 40 AND 400 GROUP BY Diagnosis ORDER BY COUNT(Diagnosis) DESC LIMIT 1;"]}, {"question_id": 1256, "answer_sql": ["SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.CRP LIKE '+' OR L.CRP LIKE '-' OR L.CRP < 1.0 AND P.Description IS NULL;"]}, {"question_id": 1257, "answer_sql": []}, {"question_id": 1258, "answer_sql": ["SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.RF = '+-' AND E.KCT = '+';"]}, {"question_id": 1259, "answer_sql": []}, {"question_id": 1260, "answer_sql": []}, {"question_id": 1261, "answer_sql": ["SELECT COUNT(DISTINCT P.ID) AS Normal_RF_Patients_without_Thrombosis FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.RF < 20 AND E.Thrombosis = '0';", "SELECT COUNT(P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.RF < 20 AND E.Thrombosis = '0';"]}, {"question_id": 1262, "answer_sql": ["SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.C3 > 35 AND E.`ANA Pattern` = 'P';"]}, {"question_id": 1263, "answer_sql": []}, {"question_id": 1264, "answer_sql": ["SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE E.Diagnosis = 'Thrombosis' AND L.C4 > 10;"]}, {"question_id": 1265, "answer_sql": []}, {"question_id": 1266, "answer_sql": ["SELECT MIN(P.Birthday) AS Min_Birthday, P.Description FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.RNP NOT IN ('-', '+-') GROUP BY P.Birthday, P.Description ORDER BY MIN(P.Birthday) LIMIT 1;", "SELECT MIN(T2.Birthday) AS Min_Birthday, T2.ID, T2.Birthday FROM Examination AS T1 JOIN Patient AS T2 ON T1.ID = T2.ID JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T3.RNP NOT IN ('-', '+-') GROUP BY T2.ID, T2.Birthday ORDER BY T2.Birthday ASC LIMIT 1;", "SELECT MIN(P.Birthday) AS Min_Birthday, P.Birthday FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.RNP NOT IN ('-', '+-') GROUP BY P.Birthday ORDER BY Min_Birthday ASC LIMIT 1;", "SELECT MIN(T2.Birthday) AS Min_Birthday, T2.ID AS Patient_ID FROM Examination AS T1 JOIN Patient AS T2 ON T1.ID = T2.ID JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T3.RNP NOT IN ('-', '+-') GROUP BY T2.ID ORDER BY T2.Birthday ASC LIMIT 1;"]}, {"question_id": 1267, "answer_sql": ["SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.SM = '-' AND E.Thrombosis = '1';", "SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.SM = '-' GROUP BY P.ID HAVING MAX(E.Thrombosis) = 1;"]}, {"question_id": 1268, "answer_sql": ["SELECT T1.ID FROM Examination T1 JOIN Patient T2 ON T1.ID = T2.ID WHERE T2.Sex = 'M' AND T2.Sex = 'F' AND T2.Sex = 'O' AND T1.`aCL IgG` > 0 AND T1.`aCL IgM` > 0 AND T1.`aCL IgA` > 0 AND T1.`aCL IgG` < 0 AND T1.`aCL IgM` < 0 AND T1.`aCL IgA` < 0 AND T1.`aCL IgG` != '-' AND T1.`aCL IgM` != '-' AND T1.`aCL IgA` != '-' AND T1.`aCL IgG` != '+' AND T1.`aCL IgM` != '+' AND T1.`aCL IgA` != '+' GROUP BY T1.ID ORDER BY T2.Birthday ASC LIMIT 3;", "SELECT T2.ID FROM Examination AS T1 JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.`aCL IgG` != '-' AND T1.`aCL IgG` != '+-' ORDER BY T2.Birthday ASC LIMIT 3;"]}, {"question_id": 1269, "answer_sql": ["SELECT P.ID FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE E.`Examination Date` >= '1997-01-01' AND E.`aCL IgG` = 0 AND E.`aCL IgM` = 0 AND E.`aCL IgA` = 0 AND E.`ANA Pattern` = '-';"]}, {"question_id": 1270, "answer_sql": ["SELECT COUNT(DISTINCT T1.ID) AS num_patients FROM Examination AS T1 JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.`aCL IgG` = 'normal anti-scl70' AND T2.SEX = 'M' AND T1.Symptoms = 'vertigo';"]}, {"question_id": 1271, "answer_sql": []}, {"question_id": 1272, "answer_sql": ["SELECT ID FROM Patient WHERE ID = (SELECT ID FROM Examination WHERE Diagnosis = 'SSA' AND `Examination Date` = (SELECT MIN(`Examination Date`) FROM Examination))"]}, {"question_id": 1273, "answer_sql": ["SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.SSB = '0' AND E.Diagnosis = 'SLE';"]}, {"question_id": 1274, "answer_sql": ["SELECT COUNT(DISTINCT T1.ID) AS count FROM Examination AS T1 JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.`aCL IgG` IN ('-', '+-') AND T1.Symptoms IS NOT NULL;"]}, {"question_id": 1275, "answer_sql": ["SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.CENTROMEA IN ('-', '+-') AND L.SSB IN ('-', '+-');"]}, {"question_id": 1276, "answer_sql": ["SELECT DISTINCT P.Diagnosis FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.DNA >= 8 AND E.Diagnosis IS NOT NULL;"]}, {"question_id": 1277, "answer_sql": []}, {"question_id": 1278, "answer_sql": ["SELECT COUNT(DISTINCT P.ID) AS Num_Admitted FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.`DNA-II` < 8 AND P.Admission = '+';"]}, {"question_id": 1279, "answer_sql": []}, {"question_id": 1280, "answer_sql": ["SELECT COUNT(P.ID) AS MalePatientsWithNormalGOT FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.GOT < 60;"]}, {"question_id": 1281, "answer_sql": ["SELECT MIN(T2.Birthday) AS Youngest_Birthdate FROM Examination AS T1 JOIN Patient AS T2 ON T1.ID = T2.ID JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T3.GOT >= 60 GROUP BY T1.ID, T2.Birthday ORDER BY T2.Birthday ASC LIMIT 1;", "SELECT MIN(T2.Birthday) AS Youngest_Birthdate FROM Examination AS T1 JOIN Patient AS T2 ON T1.ID = T2.ID JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T3.GOT >= 60 GROUP BY T2.ID;", "SELECT MIN(T2.Birthday) AS Youngest_Birthdate FROM Examination AS T1 JOIN Patient AS T2 ON T1.ID = T2.ID JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T3.GOT >= 60 GROUP BY T2.Birthday;"]}, {"question_id": 1282, "answer_sql": ["SELECT P.Birthday FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON L.ID = E.ID WHERE L.Date BETWEEN '2020-01-01' AND '2020-12-31' AND L.GPT < 60 GROUP BY P.Birthday ORDER BY COUNT(*) DESC LIMIT 3;", "SELECT P.Birthday FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON L.ID = E.ID WHERE L.GPT < 60 GROUP BY P.Birthday ORDER BY COUNT(*) DESC LIMIT 3;"]}, {"question_id": 1283, "answer_sql": ["SELECT COUNT(P.ID) AS MalePatients FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.GOT < 60 AND P.SEX = 'M';"]}, {"question_id": 1284, "answer_sql": []}, {"question_id": 1285, "answer_sql": ["SELECT MAX(P.ID) AS LatestPatientID FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.Date = (SELECT MAX(Date) FROM Laboratory) AND L.LDH >= 500;"]}, {"question_id": 1286, "answer_sql": ["SELECT COUNT(DISTINCT P.ID) AS AdmittedPatients FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.ALP > 300 AND P.Admission = '+';"]}, {"question_id": 1287, "answer_sql": []}, {"question_id": 1288, "answer_sql": ["SELECT Diagnosis FROM Patient WHERE ID IN ( SELECT ID FROM Laboratory WHERE TP < 6.0 )"]}, {"question_id": 1289, "answer_sql": ["SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE P.Diagnosis = 'SJS' AND L.TP > 6.0 AND L.TP < 8.5;"]}, {"question_id": 1290, "answer_sql": ["SELECT T1.`Examination Date` FROM Examination AS T1 JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.`aCL IgG` = (SELECT MAX(T3.`aCL IgG`) FROM Examination AS T3 WHERE T3.`aCL IgG` > 3.5 AND T3.`aCL IgG` < 5.5)", "SELECT T1.`Examination Date` FROM Examination AS T1 JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.`aCL IgG` = (SELECT MAX(T3.`aCL IgG`) FROM Examination AS T3 JOIN Patient AS T4 ON T3.ID = T4.ID WHERE T3.`aCL IgG` > 3.5 AND T3.`aCL IgG` < 5.5) ORDER BY T1.`Examination Date` ASC;", "SELECT T1.`Examination Date` FROM Examination AS T1 JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.`aCL IgG` = (SELECT MAX(T3.`aCL IgG`) FROM Examination AS T3 JOIN Patient AS T4 ON T3.ID = T4.ID WHERE T3.`aCL IgG` > 3.5 AND T3.`aCL IgG` < 5.5 GROUP BY T3.`aCL IgG`) ORDER BY T1.`Examination Date` ASC;"]}, {"question_id": 1291, "answer_sql": ["SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.ALB BETWEEN 3.5 AND 5.5 AND L.TP BETWEEN 6.0 AND 8.5;", "SELECT COUNT(P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.ALB BETWEEN 3.5 AND 5.5 AND L.TP BETWEEN 6.0 AND 8.5;", "SELECT COUNT(P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.ALB > 3.5 AND L.ALB < 5.5 AND L.TP BETWEEN 6.0 AND 8.5;"]}, {"question_id": 1292, "answer_sql": ["SELECT Examination.`aCL IgG`, Examination.`aCL IgM`, Examination.`aCL IgA`, Examination.`aCL IgA` AS anti_cardiolipin_antiobody_concentration FROM Examination JOIN Patient ON Examination.ID = Patient.ID JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Patient.Sex = 'F' AND Examination.`aCL IgA` IN ( SELECT MAX(`aCL IgA`) FROM Examination WHERE Examination.`aCL IgA` > 6.50 )", "SELECT T1.`aCL IgG`, T1.`aCL IgM`, T1.`aCL IgA` FROM Examination AS T1 JOIN Patient AS T2 ON T1.ID = T2.ID JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T2.Sex = 'F' AND T3.UA > 6.50 ORDER BY T3.UA DESC LIMIT 1;"]}, {"question_id": 1293, "answer_sql": []}, {"question_id": 1294, "answer_sql": ["SELECT P.ID FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID AND L.Date = (SELECT MAX(Date) FROM Laboratory WHERE ID = P.ID) WHERE L.CRE < 1.5 ORDER BY L.IGG DESC LIMIT 1;", "SELECT P.ID FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON L.ID = E.ID WHERE L.CRE < 1.5 ORDER BY L.IGG DESC LIMIT 1;"]}, {"question_id": 1295, "answer_sql": ["SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON L.ID = E.ID WHERE L.`T-BIL` >= 2.0 AND E.`ANA Pattern` LIKE '%P%';"]}, {"question_id": 1296, "answer_sql": []}, {"question_id": 1297, "answer_sql": []}, {"question_id": 1298, "answer_sql": ["SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE E.`ANA Pattern` = 'P' AND L.`T-CHO` < 250;"]}, {"question_id": 1299, "answer_sql": ["SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.TG < 200 AND E.Symptoms IS NOT NULL;"]}, {"question_id": 1300, "answer_sql": ["SELECT P.Diagnosis FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON L.ID = E.ID WHERE L.TG < 200 GROUP BY P.Diagnosis ORDER BY MAX(L.TG) DESC LIMIT 1;", "SELECT T2.Diagnosis FROM Examination AS T1 JOIN Patient AS T2 ON T1.ID = T2.ID JOIN Laboratory AS T3 ON T3.ID = T1.ID WHERE T3.Date BETWEEN '2020-01-01' AND '2020-12-31' GROUP BY T2.Diagnosis ORDER BY MAX(T3.TG) - 200 DESC LIMIT 1;"]}, {"question_id": 1301, "answer_sql": ["SELECT P.ID FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE E.Thrombosis = 0 AND L.CPK < 250;"]}, {"question_id": 1302, "answer_sql": []}, {"question_id": 1303, "answer_sql": ["SELECT MIN(P.Birthday) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.GLU > 180 AND P.Birthday = (SELECT MIN(Birthday) FROM Patient);"]}, {"question_id": 1304, "answer_sql": ["SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.GLU < 180 AND E.Thrombosis = 0;", "SELECT COUNT(P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.GLU < 180 AND E.Thrombosis = 0;"]}, {"question_id": 1305, "answer_sql": []}, {"question_id": 1306, "answer_sql": ["SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE P.Diagnosis = 'SLE' AND L.WBC BETWEEN 3.5 AND 9.0;"]}, {"question_id": 1307, "answer_sql": ["SELECT P.ID FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE E.Diagnosis = 'Outpatient' AND L.RBC >= 6.0 OR L.RBC <= 3.5;", "SELECT DISTINCT P.ID FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.RBC >= 6.0 OR L.RBC <= 3.5 AND P.Admission = '-'"]}, {"question_id": 1308, "answer_sql": ["SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.PLT > 100 AND L.PLT < 400 AND E.Diagnosis IS NOT NULL;"]}, {"question_id": 1309, "answer_sql": ["SELECT P.ID, P.SEX, P.Birthday, P.Description, P.`First Date`, P.Admission, P.Diagnosis, L.PLT FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON L.ID = E.ID WHERE P.Diagnosis = 'MCTD' AND L.PLT BETWEEN 100 AND 400;"]}, {"question_id": 1310, "answer_sql": ["SELECT AVG(PT) AS Average_PT FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.SEX = 'M' AND PT < 14;"]}, {"question_id": 1311, "answer_sql": ["SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE E.Thrombosis IN (2, 1) AND L.PT < 14;"]}, {"question_id": 1312, "answer_sql": ["SELECT major_name FROM major WHERE major_id = (SELECT link_to_major FROM member WHERE first_name = 'Angela' AND last_name = 'Sanders');"]}, {"question_id": 1313, "answer_sql": ["SELECT COUNT(DISTINCT member_id) AS student_count FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'Engineering';"]}, {"question_id": 1314, "answer_sql": ["SELECT first_name, last_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'Art and Design';"]}, {"question_id": 1315, "answer_sql": ["SELECT COUNT(T1.member_id) AS attended_students FROM member AS T1 JOIN attendance AS T2 ON T1.member_id = T2.link_to_member JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'Women''s Soccer';"]}, {"question_id": 1316, "answer_sql": ["SELECT T1.phone FROM member AS T1 JOIN attendance AS T2 ON T1.member_id = T2.link_to_member JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'Women''s Soccer';"]}, {"question_id": 1317, "answer_sql": []}, {"question_id": 1318, "answer_sql": ["SELECT event_name FROM event WHERE event_id = ( SELECT link_to_event FROM attendance GROUP BY link_to_event ORDER BY COUNT(link_to_event) DESC LIMIT 1 )", "SELECT event.event_name FROM event JOIN attendance ON event.event_id = attendance.link_to_event JOIN member ON attendance.link_to_member = member.member_id WHERE member.zip = (SELECT zip_code FROM zip_code WHERE zip_code = (SELECT MIN(zip_code) FROM zip_code)) GROUP BY event.event_name ORDER BY COUNT(attendance.link_to_event) DESC LIMIT 1;", "SELECT event_name, event_date, type, notes, location, status FROM event WHERE event_id = ( SELECT link_to_event FROM attendance GROUP BY link_to_event ORDER BY COUNT(link_to_event) DESC LIMIT 1 )", "SELECT event.event_name FROM event JOIN attendance ON event.event_id = attendance.link_to_event JOIN member ON attendance.link_to_member = member.member_id GROUP BY event.event_name ORDER BY COUNT(attendance.link_to_event) DESC LIMIT 1;", "SELECT event.event_name FROM event JOIN attendance ON event.event_id = attendance.link_to_event JOIN member ON attendance.link_to_member = member.member_id WHERE member.zip = (SELECT zip_code FROM zip_code WHERE zip_code IN (SELECT zip FROM member)) GROUP BY event.event_name ORDER BY COUNT(attendance.link_to_event) DESC LIMIT 1;"]}, {"question_id": 1319, "answer_sql": []}, {"question_id": 1320, "answer_sql": ["SELECT event_name FROM event JOIN attendance ON event.event_id = attendance.link_to_event JOIN member ON attendance.link_to_member = member.member_id WHERE member.first_name = 'MAYA' AND member.last_name = 'MCLEAN';"]}, {"question_id": 1321, "answer_sql": []}, {"question_id": 1322, "answer_sql": ["SELECT COUNT(DISTINCT event_id) AS num_meetings FROM event WHERE event_id IN ( SELECT link_to_event FROM attendance GROUP BY link_to_event HAVING COUNT(link_to_event) > 10 )", "SELECT COUNT(DISTINCT e.event_id) AS meeting_count FROM event e JOIN attendance a ON e.event_id = a.link_to_event GROUP BY e.event_id HAVING COUNT(a.link_to_member) > 10;", "SELECT COUNT(e.event_id) AS meeting_count FROM event e JOIN attendance a ON e.event_id = a.link_to_event GROUP BY e.event_id HAVING COUNT(a.link_to_event) > 10;", "SELECT COUNT(DISTINCT event_id) AS meeting_count FROM event WHERE type = 'Meeting' GROUP BY event_id HAVING COUNT(event_id) > 10;"]}, {"question_id": 1323, "answer_sql": ["SELECT event_name FROM event JOIN attendance ON event.event_id = attendance.link_to_event GROUP BY event.event_id HAVING COUNT(attendance.link_to_event) > 20;", "SELECT event_name FROM event JOIN attendance ON event.event_id = attendance.link_to_event GROUP BY event_name HAVING COUNT(attendance.link_to_event) > 20;"]}, {"question_id": 1324, "answer_sql": []}, {"question_id": 1325, "answer_sql": ["SELECT MAX(cost) AS most_expensive_expense FROM expense WHERE expense_description LIKE '%club events%'"]}, {"question_id": 1326, "answer_sql": ["SELECT COUNT(DISTINCT m.member_id) AS member_count FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE ma.major_name = 'Environmental Engineering';"]}, {"question_id": 1327, "answer_sql": ["SELECT m.first_name, m.last_name FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE e.event_name = 'Laugh Out Loud';"]}, {"question_id": 1328, "answer_sql": ["SELECT DISTINCT m.last_name FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE ma.major_name = 'Law and Constitutional Studies';"]}, {"question_id": 1329, "answer_sql": []}, {"question_id": 1330, "answer_sql": []}, {"question_id": 1331, "answer_sql": []}, {"question_id": 1332, "answer_sql": ["SELECT SUM(budget.remaining) AS total_spent FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE event_name = 'September Meeting' AND category = 'Food';", "SELECT SUM(budget.spent) AS total_spent FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'September Meeting' AND budget.category = 'Food';"]}, {"question_id": 1333, "answer_sql": []}, {"question_id": 1334, "answer_sql": ["SELECT first_name, last_name FROM member WHERE zip IN ( SELECT zip FROM zip_code WHERE state = 'Illinois' );"]}, {"question_id": 1335, "answer_sql": ["SELECT SUM(budget.remaining) AS total_spent FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE event_name = 'September Meeting' AND category = 'Advertisement';", "SELECT SUM(budget.spent) AS total_spent FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE event_name = 'September Meeting' AND category = 'Advertisement';"]}, {"question_id": 1336, "answer_sql": []}, {"question_id": 1337, "answer_sql": ["SELECT SUM(amount) AS total_budget FROM budget WHERE event_status = 'October Speaker';"]}, {"question_id": 1338, "answer_sql": ["SELECT e.event_name, e.event_date, e.event_id, e.type, e.notes, e.location, e.status, COUNT(e.event_id) AS expense_count, COUNT(i.amount) AS income_count, COUNT(b.amount) AS budget_count, COUNT(e.event_id) = COUNT(e.event_id) AS is_expense_approved FROM event e JOIN attendance a ON e.event_id = a.link_to_event JOIN member m ON a.link_to_member = m.member_id LEFT JOIN income i ON m.member_id = i.link_to_member LEFT JOIN budget b ON e.event_id = b.link_to_event WHERE e.event_name = 'October Meeting' AND e.event_date = '2019-10-08' GROUP BY e.event_name, e.event_date, e.event_id, e.type, e.notes, e.location, e.status HAVING is_expense_approved = 1"]}, {"question_id": 1339, "answer_sql": []}, {"question_id": 1340, "answer_sql": []}, {"question_id": 1341, "answer_sql": ["SELECT location FROM event WHERE event_name = 'Spring Budget Review';"]}, {"question_id": 1342, "answer_sql": ["SELECT expense.cost FROM expense JOIN event ON expense.link_to_budget = event.event_id WHERE event.event_name = 'Posters' AND event.event_date = '2019-09-04';"]}, {"question_id": 1343, "answer_sql": ["SELECT MAX(budget.remaining) AS remaining FROM budget WHERE budget.category = 'Food';"]}, {"question_id": 1344, "answer_sql": ["SELECT notes FROM income WHERE source = 'Fundraising' AND date_received = '2019-09-14';"]}, {"question_id": 1345, "answer_sql": ["SELECT COUNT(DISTINCT major_id) AS major_count FROM major WHERE college = 'College of Humanities and Social Sciences';"]}, {"question_id": 1346, "answer_sql": ["SELECT phone FROM member WHERE first_name = 'Carlo' AND last_name = 'Jacobs';"]}, {"question_id": 1347, "answer_sql": ["SELECT T2.county FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Adela' AND T1.last_name = 'O''Gallagher';"]}, {"question_id": 1348, "answer_sql": ["SELECT COUNT(budget_id) AS exceeded_budget_count FROM budget WHERE event_status = 'November Meeting' AND remaining < 0;"]}, {"question_id": 1349, "answer_sql": ["SELECT SUM(amount) AS total_budget_amount FROM budget WHERE event_status = 'September Speaker';"]}, {"question_id": 1350, "answer_sql": []}, {"question_id": 1351, "answer_sql": []}, {"question_id": 1352, "answer_sql": ["SELECT COUNT(DISTINCT T1.member_id) AS large_t_shirt_count FROM member AS T1 JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Human Development and Family Studies' AND T1.t_shirt_size = 'Large';"]}, {"question_id": 1353, "answer_sql": ["SELECT type FROM zip_code WHERE zip_code = (SELECT zip FROM member WHERE first_name = 'Christof' AND last_name = 'Nielson');"]}, {"question_id": 1354, "answer_sql": []}, {"question_id": 1355, "answer_sql": ["SELECT DISTINCT T2.state FROM member AS T1 JOIN zip_code AS T2 ON T1.zip = T2.zip_code JOIN major AS T3 ON T1.link_to_major = T3.major_id WHERE T1.first_name = 'Sacha' AND T1.last_name = 'Harrison';"]}, {"question_id": 1356, "answer_sql": []}, {"question_id": 1357, "answer_sql": ["SELECT T2.date_received FROM member AS T1 JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Connor' AND T1.last_name = 'Hilton' AND T2.source = 'Dues';"]}, {"question_id": 1358, "answer_sql": []}, {"question_id": 1359, "answer_sql": []}, {"question_id": 1360, "answer_sql": ["SELECT (SUM(budget.remaining) * 100) / SUM(budget.remaining) AS percentage FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE event_name = 'November Speaker';", "SELECT (SUM(budget.remaining) * 100) / (SELECT SUM(amount) FROM budget WHERE category = 'Parking' AND event_name = 'November Speaker') AS percentage FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'November Speaker';"]}, {"question_id": 1361, "answer_sql": ["SELECT SUM(cost) AS total_cost FROM expense WHERE expense_description = 'Pizza';"]}, {"question_id": 1362, "answer_sql": ["SELECT COUNT(DISTINCT T2.city) AS city_count FROM member AS T1 JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.county = 'Orange County' AND T2.state = 'Virginia';"]}, {"question_id": 1363, "answer_sql": ["SELECT DISTINCT department FROM major WHERE college = 'College of Humanities and Social Sciences';"]}, {"question_id": 1364, "answer_sql": []}, {"question_id": 1365, "answer_sql": ["SELECT expense_description, cost FROM expense WHERE link_to_budget = ( SELECT budget_id FROM budget WHERE event_status = 'completed' ORDER BY remaining ASC LIMIT 1 ) ORDER BY cost ASC;", "SELECT expense_description, cost FROM expense WHERE link_to_budget = ( SELECT budget_id FROM budget WHERE remaining = ( SELECT MIN(remaining) FROM budget ) );"]}, {"question_id": 1366, "answer_sql": ["SELECT m.first_name, m.last_name FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE e.event_name = 'October Meeting';"]}, {"question_id": 1367, "answer_sql": ["SELECT major.college, COUNT(member.member_id) AS member_count FROM member JOIN major ON member.link_to_major = major.major_id GROUP BY major.college ORDER BY member_count DESC LIMIT 1;"]}, {"question_id": 1368, "answer_sql": []}, {"question_id": 1369, "answer_sql": ["SELECT event_name FROM event WHERE event_id = ( SELECT link_to_event FROM budget ORDER BY amount DESC LIMIT 1 );"]}, {"question_id": 1370, "answer_sql": ["SELECT expense_description FROM expense WHERE link_to_member = (SELECT member_id FROM member WHERE position = 'Vice President')", "SELECT expense_description FROM expense WHERE link_to_member = (SELECT link_to_member FROM member WHERE position = 'Vice President')"]}, {"question_id": 1371, "answer_sql": []}, {"question_id": 1372, "answer_sql": ["SELECT date_received FROM income WHERE link_to_member = 'Casey Mason';", "SELECT date_received FROM income WHERE link_to_member = (SELECT member_id FROM member WHERE first_name = 'Casey' AND last_name = 'Mason');"]}, {"question_id": 1373, "answer_sql": ["SELECT COUNT(T1.zip) AS count FROM member AS T1 JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.state = 'Maryland';"]}, {"question_id": 1374, "answer_sql": []}, {"question_id": 1375, "answer_sql": ["SELECT first_name, last_name FROM member WHERE link_to_major = (SELECT major_id FROM major WHERE major_name = 'School of Applied Sciences, Technology and Education');"]}, {"question_id": 1376, "answer_sql": []}, {"question_id": 1377, "answer_sql": ["SELECT COUNT(DISTINCT member_id) AS president_count FROM member WHERE position = 'President';"]}, {"question_id": 1378, "answer_sql": ["SELECT MAX(spent) AS highest_budget_spend FROM budget;", "SELECT MAX(budget.spent) AS highest_budget_spend FROM budget WHERE budget.event_status = 'active';"]}, {"question_id": 1379, "answer_sql": []}, {"question_id": 1380, "answer_sql": ["SELECT SUM(spent) AS total_spent FROM budget WHERE category = 'Food';"]}, {"question_id": 1381, "answer_sql": ["SELECT member.first_name, member.last_name FROM member JOIN attendance ON member.member_id = attendance.link_to_member GROUP BY member.first_name, member.last_name HAVING COUNT(attendance.link_to_event) > 7;", "SELECT member.first_name, member.last_name FROM member JOIN attendance ON member.member_id = attendance.link_to_member GROUP BY member.member_id HAVING COUNT(attendance.link_to_event) > 7;", "SELECT member_id, first_name, last_name FROM member WHERE member_id IN ( SELECT link_to_member FROM attendance GROUP BY link_to_member HAVING COUNT(link_to_event) > 7 )"]}, {"question_id": 1382, "answer_sql": ["SELECT DISTINCT m.first_name, m.last_name FROM member m JOIN major ma ON m.link_to_major = ma.major_id JOIN event e ON m.zip = e.location WHERE ma.major_name = 'Interior Design' AND e.event_name = 'Community Theater';", "SELECT m.first_name, m.last_name FROM member m JOIN major ma ON m.link_to_major = ma.major_id JOIN event e ON e.event_name = 'Community Theater' JOIN attendance a ON a.link_to_member = m.member_id WHERE ma.major_name = 'Interior Design';", "SELECT DISTINCT m.first_name, m.last_name FROM member m JOIN major ma ON m.link_to_major = ma.major_id JOIN event e ON e.event_name = 'Community Theater' JOIN attendance a ON a.link_to_event = e.event_id AND a.link_to_member = m.member_id WHERE ma.major_name = 'Interior Design';"]}, {"question_id": 1383, "answer_sql": ["SELECT member_id, first_name, last_name FROM member WHERE zip = (SELECT zip_code FROM zip_code WHERE city = 'Georgetown' AND state = 'South Carolina');", "SELECT member_id, first_name, last_name FROM member WHERE zip IN ( SELECT zip FROM zip_code WHERE city = 'Georgetown' AND state = 'South Carolina' );"]}, {"question_id": 1384, "answer_sql": ["SELECT SUM(income.amount) AS total_income FROM income JOIN member ON income.link_to_member = member.member_id WHERE member.first_name = 'Grant' AND member.last_name = 'Gilmour';"]}, {"question_id": 1385, "answer_sql": ["SELECT member.first_name, member.last_name FROM member JOIN income ON member.member_id = income.link_to_member WHERE income.amount > 40;"]}, {"question_id": 1386, "answer_sql": []}, {"question_id": 1387, "answer_sql": []}, {"question_id": 1388, "answer_sql": ["SELECT member.first_name, member.last_name, income.source FROM member JOIN income ON member.member_id = income.link_to_member WHERE income.amount = (SELECT MAX(amount) FROM income) ORDER BY income.amount DESC;"]}, {"question_id": 1389, "answer_sql": []}, {"question_id": 1390, "answer_sql": []}, {"question_id": 1391, "answer_sql": ["SELECT SUM(CASE WHEN major_name = 'Finance' THEN 1 ELSE 0 END) / SUM(CASE WHEN major_name = 'Physics' THEN 1 ELSE 0 END) AS finance_to_physics_ratio FROM major"]}, {"question_id": 1392, "answer_sql": ["SELECT source, MAX(amount) AS max_amount FROM income WHERE date_received BETWEEN '2019-09-01' AND '2019-09-30' GROUP BY source ORDER BY max_amount DESC LIMIT 1;", "SELECT source, MAX(amount) AS max_amount FROM income WHERE date_received BETWEEN '2019-09-01' AND '2019-09-30' GROUP BY source;"]}, {"question_id": 1393, "answer_sql": ["SELECT first_name, last_name, email FROM member WHERE position = 'Secretary';"]}, {"question_id": 1394, "answer_sql": ["SELECT COUNT(DISTINCT T1.member_id) AS member_count FROM member AS T1 JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Physics Teaching';"]}, {"question_id": 1395, "answer_sql": []}, {"question_id": 1396, "answer_sql": []}, {"question_id": 1397, "answer_sql": []}, {"question_id": 1398, "answer_sql": ["SELECT event_name FROM event JOIN budget ON event.event_id = budget.link_to_event WHERE category = 'Advertisement' ORDER BY spent DESC LIMIT 1;"]}, {"question_id": 1399, "answer_sql": []}, {"question_id": 1400, "answer_sql": ["SELECT CAST(SUM(CASE WHEN type = 'Community Service' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(event_id) FROM event WHERE event_date BETWEEN '2019-01-01' AND '2019-12-31';", "SELECT SUM(CASE WHEN type = 'Community Service' THEN 1 ELSE 0 END) * 100 / COUNT(event_id) * 100 FROM event WHERE event_date BETWEEN '2019-01-01' AND '2019-12-31'"]}, {"question_id": 1401, "answer_sql": ["SELECT expense.cost FROM expense JOIN member ON expense.link_to_member = member.member_id JOIN event ON member.link_to_major = event.event_id WHERE event.event_name = 'September Speaker' AND expense.expense_description = 'Posters';"]}, {"question_id": 1402, "answer_sql": []}, {"question_id": 1403, "answer_sql": ["SELECT e.event_name FROM event e JOIN budget b ON e.event_id = b.link_to_event JOIN expense ex ON b.budget_id = ex.link_to_budget WHERE e.status = 'Closed' ORDER BY ex.cost - b.remaining DESC LIMIT 1;", "SELECT e.event_name FROM event e JOIN budget b ON e.event_id = b.link_to_event JOIN expense ex ON b.budget_id = ex.link_to_budget WHERE e.status = 'Closed' AND ex.cost > b.remaining ORDER BY b.remaining ASC LIMIT 1;"]}, {"question_id": 1404, "answer_sql": ["SELECT e.event_name AS event_name, SUM(ei.cost) AS total_approved_cost FROM event e JOIN attendance a ON e.event_id = a.link_to_event JOIN income i ON a.link_to_member = i.link_to_member JOIN expense ei ON a.link_to_member = ei.link_to_member WHERE e.event_name = 'October Meeting' GROUP BY e.event_name"]}, {"question_id": 1405, "answer_sql": ["SELECT category, amount FROM budget WHERE event_status = 'April Speaker' ORDER BY amount ASC;", "SELECT category, spent FROM budget WHERE link_to_event = (SELECT event_id FROM event WHERE event_name = 'April Speaker') ORDER BY spent ASC;", "SELECT category, amount FROM budget WHERE link_to_event = (SELECT event_id FROM event WHERE event_name = 'April Speaker') ORDER BY amount ASC;"]}, {"question_id": 1406, "answer_sql": ["SELECT MAX(budget.remaining) AS highest_budget, budget.event_status FROM budget WHERE budget.category = 'Food';", "SELECT MAX(budget.remaining) AS highest_budget, budget.event_status FROM budget WHERE budget.category = 'Food' GROUP BY budget.event_status;"]}, {"question_id": 1407, "answer_sql": ["SELECT T1.event_name, T1.event_date, T1.type, T1.notes, T1.location, T1.status, T2.category, T2.spent, T2.remaining, T2.amount, T2.event_status FROM event AS T1 JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.category = 'Advertisement' ORDER BY T2.amount DESC LIMIT 3;", "SELECT category, amount FROM budget WHERE category = 'Advertisement' ORDER BY amount DESC LIMIT 3;", "SELECT budget_id, category, amount FROM budget WHERE category = 'Advertisement' ORDER BY amount DESC LIMIT 3;", "SELECT T1.category, T1.spent, T1.remaining, T1.amount FROM budget AS T1 WHERE T1.category = 'Advertisement' ORDER BY T1.amount DESC LIMIT 3;", "SELECT budget_id, category, amount, remaining, event_status FROM budget WHERE category = 'Advertisement' ORDER BY amount DESC LIMIT 3;"]}, {"question_id": 1408, "answer_sql": ["SELECT SUM(cost) AS total_cost_spent_parking FROM expense WHERE expense_description = 'Parking';"]}, {"question_id": 1409, "answer_sql": ["SELECT SUM(cost) AS total_expense FROM expense WHERE expense_date = '2019-08-20';"]}, {"question_id": 1410, "answer_sql": ["SELECT member.first_name, member.last_name, SUM(expense.cost) AS total_cost FROM member JOIN expense ON member.member_id = expense.link_to_member WHERE member.member_id = 'rec4BLdZHS2Blfp4v' GROUP BY member.member_id;"]}, {"question_id": 1411, "answer_sql": ["SELECT expense_description FROM expense JOIN member ON expense.link_to_member = member.member_id WHERE member.first_name = 'Sacha' AND member.last_name = 'Harrison';", "SELECT expense_description FROM expense WHERE link_to_member = 'Sacha Harrison';"]}, {"question_id": 1412, "answer_sql": []}, {"question_id": 1413, "answer_sql": ["SELECT DISTINCT T1.zip_code FROM zip_code AS T1 JOIN member AS T2 ON T1.zip_code = T2.zip JOIN expense AS T3 ON T2.member_id = T3.link_to_member WHERE T3.cost < 50"]}, {"question_id": 1414, "answer_sql": []}, {"question_id": 1415, "answer_sql": ["SELECT T1.position FROM member AS T1 JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Business';"]}, {"question_id": 1416, "answer_sql": ["SELECT COUNT(*) AS member_count FROM member WHERE link_to_major = (SELECT major_id FROM major WHERE major_name = 'Business') AND t_shirt_size = 'Medium';"]}, {"question_id": 1417, "answer_sql": []}, {"question_id": 1418, "answer_sql": []}, {"question_id": 1419, "answer_sql": ["SELECT category FROM budget WHERE event_status = 'taken place in 2020-03-24T12:00:00';"]}, {"question_id": 1420, "answer_sql": []}, {"question_id": 1421, "answer_sql": []}, {"question_id": 1422, "answer_sql": []}, {"question_id": 1423, "answer_sql": ["SELECT COUNT(income_id) AS income_count FROM income WHERE amount = 50;"]}, {"question_id": 1424, "answer_sql": ["SELECT COUNT(*) AS member_count FROM member WHERE position = 'Member' AND t_shirt_size = 'X-Large';"]}, {"question_id": 1425, "answer_sql": []}, {"question_id": 1426, "answer_sql": []}, {"question_id": 1427, "answer_sql": []}, {"question_id": 1428, "answer_sql": []}, {"question_id": 1429, "answer_sql": ["SELECT event_name FROM event JOIN attendance ON event.event_id = attendance.link_to_event JOIN member ON attendance.link_to_member = member.member_id WHERE position = 'Vice President' AND location = '900 E. Washington St.'", "SELECT e.event_name FROM event e JOIN attendance a ON e.event_id = a.link_to_event JOIN member m ON a.link_to_member = m.member_id WHERE m.position = 'Vice President' AND m.zip = (SELECT zip FROM zip_code WHERE city = 'Washington' AND state = 'IL' AND short_state = 'IL')"]}, {"question_id": 1430, "answer_sql": ["SELECT member.last_name, member.position FROM member JOIN expense ON member.member_id = expense.link_to_member WHERE expense.expense_description = 'Pizza' AND expense.expense_date = '2019-09-10';"]}, {"question_id": 1431, "answer_sql": []}, {"question_id": 1432, "answer_sql": []}, {"question_id": 1433, "answer_sql": []}, {"question_id": 1434, "answer_sql": []}, {"question_id": 1435, "answer_sql": ["SELECT event_name FROM event WHERE type = 'Game' AND status = 'Closed' AND event_date BETWEEN '2019-03-15' AND '2020-03-20';", "SELECT DISTINCT event_name FROM event WHERE type = 'Game' AND status = 'Closed' AND event_date BETWEEN '2019-03-15' AND '2020-03-20';"]}, {"question_id": 1436, "answer_sql": ["SELECT e.event_id, e.event_name FROM event e JOIN attendance a ON e.event_id = a.link_to_event JOIN member m ON a.link_to_member = m.member_id WHERE m.zip IN ( SELECT z.zip_code FROM zip_code z JOIN member m ON z.zip_code = m.zip WHERE m.zip IS NOT NULL GROUP BY z.zip_code HAVING SUM(CASE WHEN m.link_to_major IS NOT NULL THEN m.link_to_major ELSE NULL END) > 0 AND SUM(CASE WHEN m.link_to_major IS NOT NULL THEN m.link_to_major ELSE NULL END) * 100 / COUNT(m.link_to_major) > 50 ) AND m.zip IS NOT NULL GROUP BY e.event_id, e.event_name HAVING SUM(CASE WHEN m.link_to_major IS NOT NULL THEN m.link_to_major ELSE NULL END) * 100 / COUNT(m.link_to_major) > 50"]}, {"question_id": 1437, "answer_sql": []}, {"question_id": 1438, "answer_sql": ["SELECT major.college FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Katy' AND member.link_to_major = 'rec1N0upiVLy5esTO';"]}, {"question_id": 1439, "answer_sql": ["SELECT phone FROM member WHERE link_to_major = (SELECT major_id FROM major WHERE major_name = 'Business' AND department = 'College of Agriculture and Applied Sciences');"]}, {"question_id": 1440, "answer_sql": []}, {"question_id": 1441, "answer_sql": ["SELECT COUNT(DISTINCT m.member_id) FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE ma.major_name = 'Education' AND ma.department = 'College of Education & Human Services';"]}, {"question_id": 1442, "answer_sql": ["SELECT CAST(SUM(CASE WHEN T2.remaining < 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.event_id) AS percentage FROM event AS T1 JOIN budget AS T2 ON T1.event_id = T2.link_to_event", "SELECT CAST(SUM(CASE WHEN T2.remaining < 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.event_id) AS percentage FROM event AS T1 JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.remaining < 0;"]}, {"question_id": 1443, "answer_sql": ["SELECT event_id, location, status FROM event WHERE event_date BETWEEN '2019-11-01' AND '2020-03-31';"]}, {"question_id": 1444, "answer_sql": ["SELECT expense_description, SUM(cost) AS total_cost FROM expense GROUP BY expense_description HAVING SUM(cost) / COUNT(expense_id) > 50;", "SELECT expense_id, expense_description, expense_date, cost, approved, link_to_member, link_to_budget FROM expense WHERE cost > (SELECT AVG(cost) FROM expense) GROUP BY expense_id, expense_description, expense_date, cost, approved, link_to_member, link_to_budget HAVING COUNT(expense_id) > 1;", "SELECT expense_id, expense_description, expense_date, cost, approved, link_to_member, link_to_budget FROM expense WHERE cost > (SELECT AVG(cost) FROM expense) GROUP BY expense_id, expense_description, expense_date, cost, approved, link_to_member, link_to_budget"]}, {"question_id": 1445, "answer_sql": ["SELECT first_name, last_name FROM member WHERE t_shirt_size = 'X-Large';"]}, {"question_id": 1446, "answer_sql": ["SELECT (SUM(CASE WHEN type = 'PO Box' THEN 1 ELSE 0 END) * 100) / COUNT(zip_code) AS percentage FROM zip_code", "SELECT CAST(COUNT(CASE WHEN type = 'PO Box' THEN zip_code ELSE NULL END) AS REAL) * 100 / COUNT(zip_code) AS PO_Box_Percentage FROM zip_code;"]}, {"question_id": 1447, "answer_sql": ["SELECT event_name, location FROM event WHERE event_id IN ( SELECT link_to_event FROM budget WHERE remaining > 0 ) AND status = 'Underspent';"]}, {"question_id": 1448, "answer_sql": []}, {"question_id": 1449, "answer_sql": ["SELECT member.first_name, member.last_name, major.major_name FROM member JOIN major ON member.link_to_major = major.major_id JOIN expense ON member.member_id = expense.link_to_member WHERE expense.cost > 100;"]}, {"question_id": 1450, "answer_sql": []}, {"question_id": 1451, "answer_sql": []}, {"question_id": 1452, "answer_sql": []}, {"question_id": 1453, "answer_sql": []}, {"question_id": 1454, "answer_sql": []}, {"question_id": 1455, "answer_sql": []}, {"question_id": 1456, "answer_sql": []}, {"question_id": 1457, "answer_sql": ["SELECT m.first_name, m.last_name, m.phone FROM member m JOIN expense e ON m.member_id = e.link_to_member GROUP BY m.member_id HAVING SUM(e.cost) > ( SELECT AVG(cost) FROM expense );", "SELECT m.first_name, m.last_name, m.phone FROM member m JOIN expense e ON m.member_id = e.link_to_member WHERE e.cost > (SELECT AVG(cost) FROM expense);", "SELECT m.first_name, m.last_name, m.phone FROM member m JOIN expense e ON m.member_id = e.link_to_member WHERE e.cost > (SELECT AVG(cost) FROM expense) GROUP BY m.first_name, m.last_name, m.phone;"]}, {"question_id": 1458, "answer_sql": []}, {"question_id": 1459, "answer_sql": []}, {"question_id": 1460, "answer_sql": ["SELECT member.first_name, member.last_name, expense.cost FROM expense JOIN member ON expense.link_to_member = member.member_id WHERE expense.expense_description IN ('Water', 'Veggie tray', 'supplies')"]}, {"question_id": 1461, "answer_sql": []}, {"question_id": 1462, "answer_sql": ["SELECT category, amount FROM budget WHERE event_status = 'budgeted' AND link_to_event = 'January Speaker';"]}, {"question_id": 1463, "answer_sql": ["SELECT event_name FROM event JOIN budget ON event.event_id = budget.link_to_event WHERE budget.category = 'Food';"]}, {"question_id": 1464, "answer_sql": ["SELECT m.first_name, m.last_name, i.amount FROM member m JOIN income i ON m.member_id = i.link_to_member WHERE i.date_received = '9/9/2019';"]}, {"question_id": 1465, "answer_sql": []}, {"question_id": 1466, "answer_sql": ["SELECT major_name, college FROM member JOIN major ON member.link_to_major = major.major_id WHERE position = 'Secretary';", "SELECT major.college, member.first_name, member.last_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Secretary';"]}, {"question_id": 1467, "answer_sql": ["SELECT e.event_name FROM event e JOIN budget b ON e.event_id = b.link_to_event JOIN expense ex ON b.budget_id = ex.link_to_budget WHERE b.category = 'Speaker Gifts' GROUP BY e.event_name", "SELECT e.event_name FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE b.category = 'Speaker Gifts' GROUP BY e.event_name"]}, {"question_id": 1468, "answer_sql": []}, {"question_id": 1469, "answer_sql": ["SELECT member.first_name, member.last_name, member.position FROM member JOIN major ON member.link_to_major = major.major_id JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.short_state = 'NC' AND zip_code.city = 'Lincolnton';"]}, {"question_id": 1470, "answer_sql": ["SELECT COUNT(T1.GasStationID) AS PremiumGasStations FROM gasstations AS T1 JOIN customers AS T2 ON T1.ChainID = T2.CustomerID WHERE T1.Country = 'CZE' AND T1.Segment = 'Premium';", "SELECT COUNT(T2.GasStationID) AS PremiumGasStations FROM customers AS T1 JOIN transactions_1k AS T3 ON T1.CustomerID = T3.CustomerID JOIN gasstations AS T2 ON T2.GasStationID = T3.GasStationID WHERE T1.Segment = 'Premium' AND T2.Country = 'CZE';"]}, {"question_id": 1471, "answer_sql": ["SELECT COUNT(CASE WHEN Currency = 'EUR' THEN 1 ELSE NULL END) / COUNT(CASE WHEN Currency = 'CZK' THEN 1 ELSE NULL END) AS Ratio FROM customers"]}, {"question_id": 1472, "answer_sql": ["SELECT c.CustomerID, c.Segment, c.Currency, SUM(y.Consumption) AS TotalConsumption FROM customers c JOIN `yearmonth` y ON c.CustomerID = y.CustomerID WHERE y.Date BETWEEN '201201' AND '201212' GROUP BY c.CustomerID, c.Segment, c.Currency ORDER BY TotalConsumption ASC LIMIT 1;", "SELECT c.CustomerID, c.Segment, c.Currency, SUM(y.Consumption) AS TotalConsumption FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID JOIN yearmonth y ON c.CustomerID = y.CustomerID AND y.Date BETWEEN '201201' AND '201212' WHERE t.Date BETWEEN '201201' AND '201212' GROUP BY c.CustomerID, c.Segment, c.Currency ORDER BY TotalConsumption ASC LIMIT 1;"]}, {"question_id": 1473, "answer_sql": ["SELECT AVG(T2.Consumption) AS AverageMonthlyConsumption FROM customers AS T1 JOIN transactions_1k AS T3 ON T1.CustomerID = T3.CustomerID JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID AND T2.Date BETWEEN '201301' AND '201312' WHERE T1.Segment = 'SME' GROUP BY T1.Segment", "SELECT AVG(T2.Consumption) / 12 AS AverageMonthlyConsumption FROM customers AS T1 JOIN transactions_1k AS T3 ON T1.CustomerID = T3.CustomerID JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID AND T2.Date BETWEEN '201301' AND '201312' WHERE T1.Segment = 'SME' GROUP BY T1.Segment;", "SELECT AVG(T2.Consumption) AS AverageMonthlyConsumption FROM customers AS T1 JOIN transactions_1k AS T3 ON T1.CustomerID = T3.CustomerID JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID AND T2.Date BETWEEN '201301' AND '201312' WHERE T1.Segment = 'SME' GROUP BY T1.CustomerID"]}, {"question_id": 1474, "answer_sql": ["SELECT c.CustomerID, c.Segment, c.Currency FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID JOIN yearmonth ym ON c.CustomerID = ym.CustomerID AND ym.Date BETWEEN '201101' AND '201112' WHERE c.Currency = 'CZK' GROUP BY c.CustomerID, c.Segment, c.Currency ORDER BY SUM(t.Amount) DESC LIMIT 1;"]}, {"question_id": 1475, "answer_sql": ["SELECT COUNT(T1.CustomerID) AS NumberOfCustomers FROM customers AS T1 JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date BETWEEN '201201' AND '201212' AND T1.Segment = 'KAM' AND T2.Consumption < 30000;", "SELECT COUNT(DISTINCT T1.CustomerID) AS NumberOfCustomers FROM customers AS T1 JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date BETWEEN '201201' AND '201212' AND T1.Segment = 'KAM' AND T2.Consumption < 30000;"]}, {"question_id": 1476, "answer_sql": []}, {"question_id": 1477, "answer_sql": ["SELECT y.Date, y.Consumption, y.CustomerID, c.Segment, c.Currency FROM yearmonth y JOIN customers c ON y.CustomerID = c.CustomerID WHERE c.Currency = 'EUR' ORDER BY y.Consumption DESC LIMIT 1;", "SELECT Date, SUM(Consumption) AS TotalConsumption FROM yearmonth JOIN customers ON yearmonth.CustomerID = customers.CustomerID WHERE customers.Currency = 'EUR' GROUP BY Date ORDER BY TotalConsumption DESC LIMIT 1;"]}, {"question_id": 1478, "answer_sql": ["SELECT Segment FROM customers WHERE CustomerID = ( SELECT CustomerID FROM yearmonth GROUP BY Date ORDER BY SUM(Consumption) ASC LIMIT 1 )", "SELECT Segment FROM customers WHERE CustomerID = ( SELECT CustomerID FROM ( SELECT CustomerID, SUM(Consumption) AS total_consumption FROM yearmonth GROUP BY CustomerID ORDER BY total_consumption ASC LIMIT 1 ) AS subquery )"]}, {"question_id": 1479, "answer_sql": ["SELECT T1.CustomerID, T1.Date, T1.Consumption FROM yearmonth AS T1 JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'CZK' ORDER BY T1.Consumption DESC LIMIT 1;", "SELECT T1.Date, T1.Consumption, T1.CustomerID, T2.Currency FROM yearmonth AS T1 JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'CZK' ORDER BY T1.Consumption DESC LIMIT 1;", "SELECT T1.Date, T1.Consumption, T2.Currency FROM yearmonth AS T1 JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'CZK' ORDER BY T1.Consumption DESC LIMIT 1;"]}, {"question_id": 1480, "answer_sql": ["SELECT ym.Date, SUM(ym.Consumption) AS TotalConsumption FROM yearmonth ym JOIN customers c ON ym.CustomerID = c.CustomerID WHERE c.Segment = 'SME' AND ym.Date LIKE '2013%' GROUP BY ym.Date ORDER BY TotalConsumption DESC LIMIT 1;"]}, {"question_id": 1481, "answer_sql": ["SELECT 'SME' AS Segment, SUM(CASE WHEN T1.Segment = 'SME' THEN T2.Consumption ELSE 0 END) - SUM(CASE WHEN T1.Segment = 'LAM' THEN T2.Consumption ELSE 0 END) AS Difference FROM customers AS T1 JOIN (SELECT CustomerID, SUM(Price * Amount) AS Consumption FROM transactions_1k WHERE Date BETWEEN '201301' AND '201312' GROUP BY CustomerID ORDER BY Consumption ASC LIMIT 1) AS T2 ON T1.CustomerID = T2.CustomerID GROUP BY T1.Segment"]}, {"question_id": 1482, "answer_sql": ["SELECT c.Segment, (SUM(CASE WHEN STRFTIME('%Y', t.Date) = '2013' THEN t.Amount ELSE 0 END) - SUM(CASE WHEN STRFTIME('%Y', t.Date) = '2012' THEN t.Amount ELSE 0 END)) / SUM(CASE WHEN STRFTIME('%Y', t.Date) = '2013' THEN t.Amount ELSE 0 END) * 100 AS PercentageIncrease FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID WHERE STRFTIME('%Y', t.Date) BETWEEN '201201' AND '201312' GROUP BY c.Segment ORDER BY PercentageIncrease DESC, c.Segment LIMIT 3;"]}, {"question_id": 1483, "answer_sql": ["SELECT SUM(T2.Consumption) AS TotalConsumption FROM customers AS T1 JOIN `yearmonth` AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.CustomerID = 6 AND T2.Date BETWEEN '201308' AND '201311';", "SELECT SUM(T2.Amount) AS TotalConsumption FROM customers AS T1 JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.CustomerID = 6 AND T2.Date BETWEEN '201308' AND '201311';"]}, {"question_id": 1484, "answer_sql": ["SELECT COUNT(CASE WHEN Segment = 'Discount' THEN GasStationID ELSE NULL END) AS DiscountGasStations FROM gasstations WHERE Country = 'Czech Republic' UNION ALL SELECT COUNT(CASE WHEN Segment = 'Discount' THEN GasStationID ELSE NULL END) AS DiscountGasStations FROM gasstations WHERE Country = 'Slovakia'"]}, {"question_id": 1485, "answer_sql": ["SELECT SUM(CASE WHEN T1.Date LIKE '201304' THEN T1.Consumption ELSE 0 END) - SUM(CASE WHEN T1.Date LIKE '201304' THEN -T1.Consumption ELSE 0 END) AS Difference FROM yearmonth AS T1 JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.CustomerID = 7 AND T1.Date LIKE '201304'"]}, {"question_id": 1486, "answer_sql": []}, {"question_id": 1487, "answer_sql": ["SELECT c.CustomerID, c.Segment, c.Currency, y.Date, y.Consumption FROM customers c JOIN yearmonth y ON c.CustomerID = y.CustomerID JOIN transactions_1k t ON c.CustomerID = t.CustomerID WHERE c.Currency = 'Euro' AND y.Date LIKE '201310' ORDER BY y.Consumption DESC LIMIT 1;"]}, {"question_id": 1488, "answer_sql": ["SELECT c.Segment, SUM(t.Amount) AS TotalConsumption FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID JOIN yearmonth ym ON c.CustomerID = ym.CustomerID AND ym.Date = t.Date WHERE c.Segment = 'KAM' GROUP BY c.Segment ORDER BY TotalConsumption DESC LIMIT 1;"]}, {"question_id": 1489, "answer_sql": ["SELECT SUM(T1.Amount) AS TotalConsumption FROM transactions_1k AS T1 JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Segment = 'KAM' AND T1.Date LIKE '201305%'", "SELECT SUM(T2.Consumption) AS TotalConsumption FROM customers AS T1 JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'KAM' AND T2.Date = '201305'"]}, {"question_id": 1490, "answer_sql": ["SELECT (SUM(CASE WHEN T2.Amount > 46.73 THEN 1 ELSE 0 END) * 100.0 / COUNT(T2.CustomerID)) AS Percentage FROM customers AS T1 JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM';"]}, {"question_id": 1491, "answer_sql": ["SELECT g.Country, COUNT(*) AS ValueForMoneyGasStations FROM gasstations g JOIN transactions_1k t ON g.GasStationID = t.GasStationID JOIN customers c ON t.CustomerID = c.CustomerID WHERE t.Price / t.Amount >= 0.8 GROUP BY g.Country ORDER BY ValueForMoneyGasStations DESC;", "SELECT g.Country, COUNT(*) AS ValueForMoneyGasStations FROM gasstations g JOIN transactions_1k t ON g.GasStationID = t.GasStationID WHERE t.Price / t.Amount >= 1 GROUP BY g.Country ORDER BY ValueForMoneyGasStations DESC;"]}, {"question_id": 1492, "answer_sql": ["SELECT (SUM(CASE WHEN T1.Segment = 'KAM' THEN T2.Price ELSE 0 END) / SUM(T2.Price)) * 100.0 AS Percentage FROM customers AS T1 JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'EUR';"]}, {"question_id": 1493, "answer_sql": ["SELECT CAST(COUNT(CASE WHEN Consumption > 528.3 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(CASE WHEN Consumption > 528.3 THEN 1 ELSE NULL END) AS Percentage FROM yearmonth WHERE Date LIKE '201202%';"]}, {"question_id": 1494, "answer_sql": []}, {"question_id": 1495, "answer_sql": ["SELECT c.CustomerID FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID JOIN yearmonth y ON c.CustomerID = y.CustomerID AND y.Date = '201309' GROUP BY c.CustomerID ORDER BY SUM(t.Amount) DESC LIMIT 1;"]}, {"question_id": 1496, "answer_sql": ["SELECT c.Segment FROM customers c JOIN yearmonth ym ON c.CustomerID = ym.CustomerID WHERE ym.Date = '201309' GROUP BY c.Segment ORDER BY SUM(ym.Consumption) ASC LIMIT 1;"]}, {"question_id": 1497, "answer_sql": ["SELECT c.Segment, SUM(t.Amount) AS TotalConsumption FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID JOIN yearmonth y ON c.CustomerID = y.CustomerID AND y.Date = '201206' GROUP BY c.Segment ORDER BY TotalConsumption ASC LIMIT 1;", "SELECT c.Segment FROM customers c JOIN yearmonth ym ON c.CustomerID = ym.CustomerID WHERE ym.Date = '201206' GROUP BY c.Segment ORDER BY SUM(ym.Consumption) ASC LIMIT 1;", "SELECT c.Segment FROM customers c JOIN yearmonth ym ON c.CustomerID = ym.CustomerID WHERE ym.Date = '201206' ORDER BY ym.Consumption ASC LIMIT 1;"]}, {"question_id": 1498, "answer_sql": ["SELECT MAX(T1.Consumption) AS HighestMonthlyConsumption FROM yearmonth AS T1 WHERE T1.Date LIKE '2012%';", "SELECT MAX(T1.Consumption) AS HighestMonthlyConsumption FROM yearmonth AS T1 WHERE STRFTIME('%Y', T1.Date) = '2012';"]}, {"question_id": 1499, "answer_sql": ["SELECT c.CustomerID, c.Segment, c.Currency, SUM(ym.Consumption) / 12 AS BiggestMonthlyConsumption FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID JOIN yearmonth ym ON ym.CustomerID = c.CustomerID AND ym.Date = t.Date JOIN gasstations g ON g.GasStationID = t.GasStationID WHERE c.Currency = 'euro' GROUP BY c.CustomerID, c.Segment, c.Currency ORDER BY BiggestMonthlyConsumption DESC LIMIT 1;"]}, {"question_id": 1500, "answer_sql": ["SELECT T3.Description FROM transactions_1k AS T1 JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID JOIN products AS T3 ON T1.ProductID = T3.ProductID JOIN yearmonth AS T4 ON T2.CustomerID = T4.CustomerID AND T4.Date LIKE '201309%' WHERE T1.Date LIKE '201309%' GROUP BY T3.Description ORDER BY T3.Description;", "SELECT T3.Description FROM customers AS T1 JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID JOIN products AS T3 ON T2.ProductID = T3.ProductID JOIN yearmonth AS T4 ON T1.CustomerID = T4.CustomerID AND T4.Date LIKE '201309%' ORDER BY T4.Date;"]}, {"question_id": 1501, "answer_sql": []}, {"question_id": 1502, "answer_sql": ["SELECT DISTINCT g.ChainID, g.Country FROM gasstations g JOIN transactions_1k t ON g.GasStationID = t.GasStationID JOIN customers c ON t.CustomerID = c.CustomerID WHERE t.Price = 'EUR';"]}, {"question_id": 1503, "answer_sql": ["SELECT T2.Description FROM transactions_1k AS T1 JOIN products AS T2 ON T1.ProductID = T2.ProductID JOIN customers AS T3 ON T1.CustomerID = T3.CustomerID WHERE T1.Price = (SELECT Price FROM products WHERE Description = 'euro');"]}, {"question_id": 1504, "answer_sql": ["SELECT AVG(T1.Price) AS AverageTotalPrice FROM transactions_1k AS T1 JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date LIKE '2012-01%' GROUP BY T1.Date;"]}, {"question_id": 1505, "answer_sql": ["SELECT COUNT(DISTINCT c.CustomerID) AS NumberOfCustomers FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID JOIN yearmonth y ON c.CustomerID = y.CustomerID AND y.Date = t.Date WHERE t.Price = 'EUR' AND y.Consumption > 1000;"]}, {"question_id": 1506, "answer_sql": []}, {"question_id": 1507, "answer_sql": ["SELECT T1.Date, T1.Time FROM transactions_1k AS T1 JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.ChainID = 11"]}, {"question_id": 1508, "answer_sql": ["SELECT COUNT(T1.TransactionID) AS NumberOfTransactions FROM transactions_1k AS T1 JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE' AND T1.Price > 1000;"]}, {"question_id": 1509, "answer_sql": ["SELECT COUNT(T1.TransactionID) AS NumberOfTransactions FROM transactions_1k AS T1 JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE' AND T1.Date > '2012-01-01'"]}, {"question_id": 1510, "answer_sql": ["SELECT AVG(T1.Price) AS AverageTotalPrice FROM transactions_1k AS T1 JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE' GROUP BY T1.Date, T1.CustomerID;", "SELECT AVG(T1.Price) AS AverageTotalPrice FROM transactions_1k AS T1 JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE';", "SELECT AVG(T1.Price) AS AverageTotalPrice FROM transactions_1k AS T1 JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE' GROUP BY T1.GasStationID;", "SELECT AVG(T1.Price) AS AverageTotalPrice FROM transactions_1k AS T1 JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID JOIN customers AS T3 ON T1.CustomerID = T3.CustomerID WHERE T2.Country = 'CZE' GROUP BY T1.CustomerID;"]}, {"question_id": 1511, "answer_sql": ["SELECT AVG(T1.Price) AS AverageTotalPrice FROM transactions_1k AS T1 JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'EUR';", "SELECT AVG(T1.Price) AS AverageTotalPrice FROM transactions_1k AS T1 JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'euro';"]}, {"question_id": 1512, "answer_sql": ["SELECT c.CustomerID, c.Segment, c.Currency, SUM(t.Amount) as TotalAmount FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID WHERE t.Date = '2012-08-25' GROUP BY c.CustomerID, c.Segment, c.Currency ORDER BY TotalAmount DESC LIMIT 1;"]}, {"question_id": 1513, "answer_sql": []}, {"question_id": 1514, "answer_sql": ["SELECT T2.Currency FROM transactions_1k AS T1 JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '2012-08-24' AND T1.Time = '16:25:00'"]}, {"question_id": 1515, "answer_sql": ["SELECT Segment FROM customers WHERE CustomerID = ( SELECT CustomerID FROM ( SELECT CustomerID, MIN(Date) AS min_date FROM transactions_1k WHERE Date LIKE '2012-08-%' AND Time LIKE '21:20:00' GROUP BY CustomerID ) AS subquery )", "SELECT c.Segment FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID JOIN yearmonth y ON c.CustomerID = y.CustomerID AND y.Date = '2012-08-23' WHERE t.Date = '2012-08-23' AND t.Time = '21:20:00';"]}, {"question_id": 1516, "answer_sql": ["SELECT COUNT(T1.TransactionID) AS NumberOfTransactions FROM transactions_1k AS T1 JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID JOIN sqlite_sequence AS T3 ON T2.CustomerID = T3.name WHERE T1.Date LIKE '2012-08-26%' AND T1.Date LIKE '%13:00:00' AND T1.Price = (SELECT Price FROM products WHERE Description = 'EUR');"]}, {"question_id": 1517, "answer_sql": ["SELECT Segment FROM customers WHERE CustomerID = ( SELECT CustomerID FROM ( SELECT CustomerID, MIN(Date) AS MinDate FROM transactions_1k GROUP BY CustomerID ) AS MinDatePerCustomer )"]}, {"question_id": 1518, "answer_sql": []}, {"question_id": 1519, "answer_sql": ["SELECT ProductID FROM transactions_1k WHERE Date = '2012-08-23' AND Time = '21:20:00';"]}, {"question_id": 1520, "answer_sql": ["SELECT c.CustomerID, SUM(t.Amount) AS TotalExpenses, t.Date FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID WHERE t.Date LIKE '2012-01-01' AND t.Amount = 124.05 GROUP BY c.CustomerID, t.Date ORDER BY c.CustomerID, t.Date;"]}, {"question_id": 1521, "answer_sql": []}, {"question_id": 1522, "answer_sql": ["SELECT c.Currency FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID JOIN yearmonth y ON c.CustomerID = y.CustomerID AND y.Date LIKE '201306%' WHERE t.Amount = 214582.17;"]}, {"question_id": 1523, "answer_sql": []}, {"question_id": 1524, "answer_sql": ["SELECT T2.Segment, T2.Currency FROM transactions_1k AS T1 JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '2012-08-24' AND T1.Amount = 548.4"]}, {"question_id": 1525, "answer_sql": ["SELECT (COUNT(CASE WHEN Currency = 'EUR' THEN 1 ELSE NULL END) / COUNT(CASE WHEN Currency = 'EUR' THEN NULL ELSE 1 END)) * 100 FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID WHERE t.Date = '2012-08-25';", "SELECT (COUNT(CASE WHEN Currency = 'EUR' THEN 1 ELSE NULL END) * 100.0 / COUNT(CASE WHEN Currency IS NOT NULL THEN 1 ELSE NULL END)) AS Percentage FROM customers JOIN transactions_1k ON customers.CustomerID = transactions_1k.CustomerID WHERE transactions_1k.Date = '2012-08-25';", "SELECT (COUNT(CASE WHEN Currency = 'EUR' THEN 1 ELSE NULL END) * 100) / COUNT(CASE WHEN Currency IS NOT NULL THEN 1 ELSE NULL END) FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID JOIN yearmonth y ON c.CustomerID = y.CustomerID AND y.Date = '2012-08-25' WHERE Currency = 'EUR';", "SELECT (COUNT(CASE WHEN Currency = 'EUR' THEN 1 ELSE NULL END) * 100) / COUNT(CASE WHEN Currency IS NOT NULL THEN 1 ELSE NULL END) FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID WHERE t.Date = '2012-08-25';"]}, {"question_id": 1526, "answer_sql": ["SELECT c.CustomerID, (SELECT Consumption FROM yearmonth WHERE Date = '2012-08-24' AND CustomerID = c.CustomerID) - (SELECT Consumption FROM yearmonth WHERE Date = '2013-08-24' AND CustomerID = c.CustomerID) AS ConsumptionDecreaseRate FROM customers c WHERE c.CustomerID = ( SELECT t1.CustomerID FROM transactions_1k t1 INNER JOIN yearmonth t2 ON t1.CustomerID = t2.CustomerID AND t1.Date = t2.Date WHERE t1.Amount = 634.8 AND t1.Date LIKE '2012%' );"]}, {"question_id": 1527, "answer_sql": ["SELECT g.GasStationID, g.Country, SUM(t.Amount) AS TotalRevenue FROM gasstations g JOIN transactions_1k t ON g.GasStationID = t.GasStationID GROUP BY g.GasStationID, g.Country ORDER BY TotalRevenue DESC LIMIT 1;", "SELECT g.GasStationID, g.Country, MAX(t.Amount) AS HighestRevenue FROM gasstations g JOIN transactions_1k t ON g.GasStationID = t.GasStationID GROUP BY g.GasStationID, g.Country ORDER BY HighestRevenue DESC;"]}, {"question_id": 1528, "answer_sql": ["SELECT (SUM(CASE WHEN Segment = 'premium' THEN 1 ELSE 0 END) * 100.0 / COUNT(Segment)) AS PremiumPercentage FROM customers JOIN transactions_1k ON customers.CustomerID = transactions_1k.CustomerID WHERE customers.Segment = 'SVK';"]}, {"question_id": 1529, "answer_sql": ["SELECT t1.Amount, t2.Consumption FROM transactions_1k t1 JOIN customers t3 ON t1.CustomerID = t3.CustomerID JOIN yearmonth t2 ON t3.CustomerID = t2.CustomerID AND t2.Date LIKE '201201%' WHERE t3.CustomerID = 38508", "SELECT t1.CustomerID, t1.Amount FROM transactions_1k t1 JOIN customers t2 ON t1.CustomerID = t2.CustomerID WHERE t2.CustomerID = 38508 UNION ALL SELECT t1.CustomerID, t1.Amount FROM transactions_1k t1 JOIN customers t2 ON t1.CustomerID = t2.CustomerID WHERE t2.CustomerID = 38508 AND t1.Date LIKE '201201%'"]}, {"question_id": 1530, "answer_sql": ["SELECT p.Description FROM products p WHERE p.ProductID = ( SELECT t.ProductID FROM transactions_1k t WHERE t.ProductID = p.ProductID GROUP BY t.ProductID ORDER BY SUM(t.Amount) DESC LIMIT 5 ) ORDER BY p.Description;", "SELECT p.Description FROM products p JOIN ( SELECT ProductID, SUM(Amount) as TotalAmount FROM transactions_1k GROUP BY ProductID ORDER BY TotalAmount DESC LIMIT 5 ) t ON p.ProductID = t.ProductID", "SELECT p.Description FROM products p WHERE p.ProductID = ( SELECT t.ProductID FROM transactions_1k t WHERE t.ProductID = p.ProductID GROUP BY t.ProductID ORDER BY SUM(t.Amount) DESC LIMIT 5 )", "SELECT T2.Description FROM transactions_1k AS T1 JOIN products AS T2 ON T1.ProductID = T2.ProductID ORDER BY T1.Amount DESC LIMIT 5;", "SELECT p.Description FROM products p WHERE p.ProductID = ( SELECT t.ProductID FROM transactions_1k t GROUP BY t.ProductID ORDER BY SUM(t.Amount) DESC LIMIT 5 ) ORDER BY p.Description;"]}, {"question_id": 1531, "answer_sql": ["SELECT c.CustomerID, c.Segment, c.Currency, AVG(t.Price / t.Amount) AS AveragePricePerItem FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID WHERE t.Amount > 0 GROUP BY c.CustomerID, c.Segment, c.Currency ORDER BY AveragePricePerItem DESC LIMIT 1;"]}, {"question_id": 1532, "answer_sql": ["SELECT g.Country FROM gasstations g JOIN transactions_1k t ON g.GasStationID = t.GasStationID WHERE t.ProductID = 2 ORDER BY t.Price DESC LIMIT 1;"]}, {"question_id": 1533, "answer_sql": ["SELECT ym.CustomerID, ym.Date, ym.Consumption FROM yearmonth ym JOIN transactions_1k t ON ym.CustomerID = t.CustomerID WHERE t.ProductID = 5 AND t.Price / t.Amount > 29.00 AND ym.Date LIKE '201208%'"]}]