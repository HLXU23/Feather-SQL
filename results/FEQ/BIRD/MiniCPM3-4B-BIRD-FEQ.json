[
    {
        "question_id": 0,
        "answer_sql": "SELECT MAX(`Percent (%) Eligible Free (K-12)`) AS HighestEligibleFreeRate FROM frpm WHERE `County Code` = 'Alameda'"
    },
    {
        "question_id": 1,
        "answer_sql": "SELECT frpm.CDSCode, (frpm.`Free Meal Count (Ages 5-17)` / frpm.`Enrollment (Ages 5-17)`) AS eligible_free_rate FROM frpm WHERE frpm.`School Type` LIKE '%continuation%' ORDER BY eligible_free_rate ASC LIMIT 3;"
    },
    {
        "question_id": 2,
        "answer_sql": "SELECT DISTINCT Zip FROM schools WHERE County = 'Fresno' AND Charter = 1;"
    },
    {
        "question_id": 3,
        "answer_sql": ""
    },
    {
        "question_id": 4,
        "answer_sql": "SELECT schools.Phone FROM schools JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE frpm.`Charter School (Y/N)` = 1 AND schools.OpenDate > '2000-01-01';"
    },
    {
        "question_id": 5,
        "answer_sql": "SELECT COUNT(*) FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE satscores.AvgScrMath < 400 AND schools.Virtual = 'F';"
    },
    {
        "question_id": 6,
        "answer_sql": ""
    },
    {
        "question_id": 7,
        "answer_sql": "SELECT s.Phone FROM schools s JOIN ( SELECT cds, MAX(NumGE1500) AS MaxGE1500 FROM satscores GROUP BY cds ) AS sat_max ON s.CDSCode = sat_max.cds WHERE sat_max.MaxGE1500 > 0;"
    },
    {
        "question_id": 8,
        "answer_sql": "SELECT SUM(NumTstTakr) AS TotalTestTakers FROM satscores WHERE cds IN ( SELECT CDSCode FROM frpm WHERE `FRPM Count (K-12)` = ( SELECT MAX(`FRPM Count (K-12)`) FROM frpm ) );"
    },
    {
        "question_id": 9,
        "answer_sql": "SELECT COUNT(*) FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds WHERE s.Charter = 1 AND ss.AvgScrMath > 560;"
    },
    {
        "question_id": 10,
        "answer_sql": ""
    },
    {
        "question_id": 11,
        "answer_sql": ""
    },
    {
        "question_id": 12,
        "answer_sql": "SELECT MAX(`Percent (%) Eligible Free (Ages 5-17)`) AS HighestEligibleFreeRate FROM frpm WHERE `Percent (%) Eligible Free (Ages 5-17)` IS NOT NULL AND `Percent (%) Eligible Free (Ages 5-17)` > 0 AND `2013-14 CALPADS Fall 1 Certification Status` = 1;"
    },
    {
        "question_id": 13,
        "answer_sql": "SELECT s.Phone FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds WHERE (ss.NumGE1500 / ss.NumTstTakr) >= ( SELECT AVG((ss2.NumGE1500 / ss2.NumTstTakr)) FROM satscores ss2 ) ORDER BY (ss.NumGE1500 / ss.NumTstTakr) DESC LIMIT 3;"
    },
    {
        "question_id": 14,
        "answer_sql": ""
    },
    {
        "question_id": 15,
        "answer_sql": "SELECT s.District, AVG(ss.AvgScrRead) AS AvgReadingScore FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds WHERE s.StatusType = 'Active' GROUP BY s.District ORDER BY AvgReadingScore DESC LIMIT 1;"
    },
    {
        "question_id": 16,
        "answer_sql": "SELECT COUNT(*) FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds WHERE s.County = 'Alameda' AND ss.NumTstTakr < 100;"
    },
    {
        "question_id": 17,
        "answer_sql": "SELECT s.CharterNum FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds WHERE ss.AvgScrWrite = 499;"
    },
    {
        "question_id": 18,
        "answer_sql": "SELECT COUNT(*) FROM schools s JOIN schools_admins sa ON s.CDSCode = sa.CDSCode WHERE s.County = 'Contra Costa' AND s.FundingType = 'direct' AND ( SELECT COUNT(*) FROM satscores ss WHERE ss.cds = s.CDSCode ) <= 250;"
    },
    {
        "question_id": 19,
        "answer_sql": ""
    },
    {
        "question_id": 20,
        "answer_sql": ""
    },
    {
        "question_id": 21,
        "answer_sql": "SELECT COUNT(*) FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE s.County = 'Los Angeles' AND f.`Free Meal Count (K-12)` > 500 AND f.`Free Meal Count (K-12)` < 700;"
    },
    {
        "question_id": 22,
        "answer_sql": ""
    },
    {
        "question_id": 23,
        "answer_sql": ""
    },
    {
        "question_id": 24,
        "answer_sql": ""
    },
    {
        "question_id": 25,
        "answer_sql": "SELECT DISTINCT s.FundingType FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds WHERE s.County = 'Riverside' AND ss.AvgScrMath > 400;"
    },
    {
        "question_id": 26,
        "answer_sql": ""
    },
    {
        "question_id": 27,
        "answer_sql": "SELECT schools.School, satscores.AvgScrWrite, schools.Phone FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE (schools.OpenDate > '1991-12-31' OR schools.ClosedDate < '2000-01-01') ORDER BY schools.School;"
    },
    {
        "question_id": 28,
        "answer_sql": ""
    },
    {
        "question_id": 29,
        "answer_sql": ""
    },
    {
        "question_id": 30,
        "answer_sql": ""
    },
    {
        "question_id": 31,
        "answer_sql": "SELECT frpm.`Percent (%) Eligible Free (K-12)` AS eligible_free_rate FROM frpm WHERE frpm.`Low Grade` = '1' AND frpm.`High Grade` = '12' ORDER BY frpm.`Enrollment (K-12)` DESC LIMIT 2;"
    },
    {
        "question_id": 32,
        "answer_sql": ""
    },
    {
        "question_id": 33,
        "answer_sql": "SELECT schools.School, schools.Website FROM schools JOIN frpm ON schools.CDSCode = frpm.CDSCode JOIN satscores ON schools.CDSCode = satscores.cds WHERE frpm.`Free Meal Count (Ages 5-17)` BETWEEN 1900 AND 2000 AND satscores.enroll12 > 0;"
    },
    {
        "question_id": 34,
        "answer_sql": ""
    },
    {
        "question_id": 35,
        "answer_sql": ""
    },
    {
        "question_id": 36,
        "answer_sql": ""
    },
    {
        "question_id": 37,
        "answer_sql": ""
    },
    {
        "question_id": 38,
        "answer_sql": "SELECT s.Website FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds WHERE s.County = 'Los Angeles' AND ss.enroll12 BETWEEN 2000 AND 3000;"
    },
    {
        "question_id": 39,
        "answer_sql": "SELECT AVG(NumTstTakr) FROM satscores WHERE cds IN ( SELECT CDSCode FROM schools WHERE OpenDate BETWEEN '1980-01-01' AND '1980-12-31' ) AND cds IN ( SELECT CDSCode FROM frpm WHERE `School Type` LIKE '%Fresno%' );"
    },
    {
        "question_id": 40,
        "answer_sql": "WITH avg_scores AS ( SELECT s.CDSCode, AVG(ss.AvgScrRead) AS avg_read_score FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds WHERE s.District = 'Fresno Unified' GROUP BY s.CDSCode ), lowest_avg AS ( SELECT * FROM avg_scores ORDER BY avg_read_score ASC LIMIT 1 ) SELECT s.Phone FROM schools s JOIN lowest_avg la ON s.CDSCode = la.CDSCode"
    },
    {
        "question_id": 41,
        "answer_sql": ""
    },
    {
        "question_id": 42,
        "answer_sql": ""
    },
    {
        "question_id": 43,
        "answer_sql": ""
    },
    {
        "question_id": 44,
        "answer_sql": "SELECT AVG(AvgScrWrite) AS avg_writing_score, schools.City FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE NumGE1500 >= 1 AND satscores.cds IN ( SELECT cds FROM satscores GROUP BY cds HAVING COUNT(*) = ( SELECT COUNT(*) FROM satscores WHERE NumGE1500 >= 1 ) ) ORDER BY avg_writing_score DESC LIMIT 1;"
    },
    {
        "question_id": 45,
        "answer_sql": ""
    },
    {
        "question_id": 46,
        "answer_sql": "SELECT schools.State, schools.School, SUM(frpm.`Enrollment (K-12)`) AS TotalEnrollment FROM schools JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE schools.DOC = '31' AND frpm.`Low Grade` = 'K' AND frpm.`High Grade` = '12' GROUP BY schools.State, schools.School ORDER BY TotalEnrollment DESC;"
    },
    {
        "question_id": 47,
        "answer_sql": "SELECT CAST(COUNT(*) AS REAL) / 12 AS Monthly_Average FROM schools WHERE DOC = '52' AND OpenDate BETWEEN '1980-01-01' AND '1980-12-31';"
    },
    {
        "question_id": 48,
        "answer_sql": "SELECT (COUNT(*) OVER (PARTITION BY CASE WHEN schools.DOC = '54' THEN 1 ELSE 0 END) / COUNT(*) OVER (PARTITION BY CASE WHEN schools.DOC = '52' THEN 1 ELSE 0 END)) AS ratio FROM schools WHERE schools.County = 'Orange'"
    },
    {
        "question_id": 49,
        "answer_sql": "SELECT s.County, s.School, s.ClosedDate FROM schools s WHERE s.StatusType = 'Closed' GROUP BY s.County, s.School, s.ClosedDate ORDER BY COUNT(*) DESC LIMIT 1;"
    },
    {
        "question_id": 50,
        "answer_sql": "SELECT s.Street, s.School FROM schools s JOIN ( SELECT schools.CDSCode, AVG(AvgScrMath) AS Math_Avg FROM satscores JOIN schools ON satscores.cds = schools.CDSCode GROUP BY schools.CDSCode ORDER BY Math_Avg DESC LIMIT 6 ) AS subquery ON s.CDSCode = subquery.CDSCode ORDER BY Math_Avg DESC LIMIT 1;"
    },
    {
        "question_id": 51,
        "answer_sql": ""
    },
    {
        "question_id": 52,
        "answer_sql": "SELECT COUNT(*) FROM satscores s JOIN schools sc ON s.cds = sc.CDSCode WHERE (s.AvgScrRead + s.AvgScrMath + s.AvgScrWrite) >= 1500 AND sc.City = 'Lakeport';"
    },
    {
        "question_id": 53,
        "answer_sql": "SELECT SUM(NumTstTakr) FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE schools.City = 'Fresno';"
    },
    {
        "question_id": 54,
        "answer_sql": ""
    },
    {
        "question_id": 55,
        "answer_sql": "SELECT (SELECT COUNT(*) FROM schools WHERE State = 'California' AND County = 'Colusa') / (SELECT COUNT(*) FROM schools WHERE State = 'California' AND County = 'Humboldt') AS ratio;"
    },
    {
        "question_id": 56,
        "answer_sql": "SELECT COUNT(*) FROM schools WHERE State = 'California' AND StatusType = 'Active' AND County = 'San Joaquin';"
    },
    {
        "question_id": 57,
        "answer_sql": ""
    },
    {
        "question_id": 58,
        "answer_sql": "SELECT schools.Phone, schools.Ext, schools.School FROM schools WHERE schools.Zip = '95203-3704';"
    },
    {
        "question_id": 59,
        "answer_sql": ""
    },
    {
        "question_id": 60,
        "answer_sql": "SELECT Website FROM schools WHERE Charter = 1 AND Virtual = 'P' AND County = 'San Joaquin';"
    },
    {
        "question_id": 61,
        "answer_sql": "SELECT COUNT(*) FROM schools WHERE Charter = 1 AND County = 'Hickman' AND DOC = '52';"
    },
    {
        "question_id": 62,
        "answer_sql": "SELECT COUNT(*) FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE s.Charter = 0 AND s.County = 'Los Angeles' AND (f.`Percent (%) Eligible Free (K-12)` * 100 / f.`Enrollment (K-12)`) < 0.18;"
    },
    {
        "question_id": 63,
        "answer_sql": ""
    },
    {
        "question_id": 64,
        "answer_sql": "SELECT COUNT(*) FROM schools s JOIN schools_admins sa ON s.CDSCode = sa.CDSCode WHERE s.County = 'Hickman' AND s.CharterNum = '00D4';"
    },
    {
        "question_id": 65,
        "answer_sql": "SELECT (COUNT(CASE WHEN s.FundingType = 'Locally Funded' THEN 1 END) * 100) / COUNT(DISTINCT s.CDSCode) FROM schools s WHERE s.County = 'Santa Clara'"
    },
    {
        "question_id": 66,
        "answer_sql": "SELECT COUNT(*) FROM schools WHERE StatusType = 'Open' AND County = 'Stanislaus' AND FundingType = 'Directly Funded' AND OpenDate BETWEEN '2000-01-01' AND '2005-12-31';"
    },
    {
        "question_id": 67,
        "answer_sql": ""
    },
    {
        "question_id": 68,
        "answer_sql": ""
    },
    {
        "question_id": 69,
        "answer_sql": "SELECT schools.CDSCode AS 'National Center for Educational Statistics school district identification number' FROM schools WHERE schools.SOC = 31;"
    },
    {
        "question_id": 70,
        "answer_sql": "SELECT COUNT(*) FROM schools WHERE County = 'Alpine' AND (StatusType = 'Active' OR StatusType = 'Closed');"
    },
    {
        "question_id": 71,
        "answer_sql": ""
    },
    {
        "question_id": 72,
        "answer_sql": "SELECT SUM(enroll12) FROM satscores WHERE cds = (SELECT CDSCode FROM schools WHERE EdOpsCode = 'SSS') AND rtype = '12';"
    },
    {
        "question_id": 73,
        "answer_sql": ""
    },
    {
        "question_id": 74,
        "answer_sql": "SELECT MIN(`Low Grade`) AS LowestGrade FROM frpm WHERE `District Code` = 613360 AND `School Type` = 'District Special Education Consortia School' AND `Educational Option Type` = 'EdOpsCode = ''SPECON''';"
    },
    {
        "question_id": 75,
        "answer_sql": ""
    },
    {
        "question_id": 76,
        "answer_sql": "SELECT S.City FROM schools S JOIN frpm F ON S.CDSCode = F.CDSCode WHERE S.EILCode = 'HS' AND F.`Low Grade` = 9 AND F.`High Grade` = 12 AND S.County = 'Merced';"
    },
    {
        "question_id": 77,
        "answer_sql": ""
    },
    {
        "question_id": 78,
        "answer_sql": ""
    },
    {
        "question_id": 79,
        "answer_sql": "SELECT County, COUNT(*) AS NumberOfSchools FROM schools WHERE County IN ('San Diego', 'Santa Barbara') AND Virtual = 'F' GROUP BY County ORDER BY NumberOfSchools DESC LIMIT 1;"
    },
    {
        "question_id": 80,
        "answer_sql": "SELECT S.School, S.Latitude FROM schools S WHERE S.Latitude = (SELECT MAX(Latitude) FROM schools);"
    },
    {
        "question_id": 81,
        "answer_sql": ""
    },
    {
        "question_id": 82,
        "answer_sql": ""
    },
    {
        "question_id": 83,
        "answer_sql": "SELECT COUNT(DISTINCT s.City) AS NumberOfCities, s.City, COUNT(DISTINCT s.CDSCode) AS NumberOfSchools FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE s.Magnet = 1 -- Offers a magnet program AND s.`Low Grade` = 'K' -- Kindergarten AND s.`High Grade` = '8' -- 8th grade GROUP BY s.City;"
    },
    {
        "question_id": 84,
        "answer_sql": ""
    },
    {
        "question_id": 85,
        "answer_sql": ""
    },
    {
        "question_id": 86,
        "answer_sql": ""
    },
    {
        "question_id": 87,
        "answer_sql": ""
    },
    {
        "question_id": 88,
        "answer_sql": ""
    },
    {
        "question_id": 89,
        "answer_sql": "SELECT COUNT(*) FROM account a JOIN client c ON a.district_id = c.district_id JOIN district d ON a.district_id = d.district_id WHERE d.A3 = 'POPLATEK PO OBRATU' AND a.account_id IN (SELECT account_id FROM trans WHERE type = 'issuance after transaction')"
    },
    {
        "question_id": 90,
        "answer_sql": "SELECT COUNT(*) FROM account JOIN district ON account.district_id = district.district_id WHERE district.A3 = 'Prague' AND EXISTS (SELECT 1 FROM loan WHERE loan.account_id = account.account_id);"
    },
    {
        "question_id": 91,
        "answer_sql": "SELECT AVG(A12) - AVG(A13) FROM district;"
    },
    {
        "question_id": 92,
        "answer_sql": ""
    },
    {
        "question_id": 93,
        "answer_sql": "SELECT COUNT(*) FROM client c JOIN district d ON c.district_id = d.district_id WHERE c.gender = 'M' AND d.A3 = 'North Bohemia' AND c.birth_date <= date('now', '-18 years') AND (c.birth_date >= date('now', '-50 years')) AND d.A11 > 8000;"
    },
    {
        "question_id": 94,
        "answer_sql": ""
    },
    {
        "question_id": 95,
        "answer_sql": ""
    },
    {
        "question_id": 96,
        "answer_sql": "SELECT COUNT(*) FROM account a JOIN client c ON a.account_id = c.client_id WHERE a.frequency = 'POPLATEK TYDNE' AND c.gender = 'Owner';"
    },
    {
        "question_id": 97,
        "answer_sql": ""
    },
    {
        "question_id": 98,
        "answer_sql": "SELECT account.account_id, account.frequency, account.date, loan.amount FROM account JOIN loan ON account.account_id = loan.account_id WHERE loan.date LIKE '%1997%' ORDER BY loan.amount ASC LIMIT 1;"
    },
    {
        "question_id": 99,
        "answer_sql": ""
    },
    {
        "question_id": 100,
        "answer_sql": "SELECT COUNT(*) FROM client c JOIN account a ON c.client_id = a.district_id JOIN district d ON a.district_id = d.district_id WHERE c.gender = 'F' AND c.birth_date < '1950-01-01' AND d.A2 = 'Slokolov';"
    },
    {
        "question_id": 101,
        "answer_sql": "SELECT account_id FROM account WHERE date = '1995-01-01' ORDER BY date LIMIT 1;"
    },
    {
        "question_id": 102,
        "answer_sql": "SELECT DISTINCT account.account_id FROM account JOIN trans ON account.account_id = trans.account_id WHERE account.date < '1997-01-01' AND trans.amount > 3000;"
    },
    {
        "question_id": 103,
        "answer_sql": ""
    },
    {
        "question_id": 104,
        "answer_sql": ""
    },
    {
        "question_id": 105,
        "answer_sql": "SELECT a.district_id FROM account a JOIN loan l ON a.account_id = l.account_id WHERE l.date = '1994-08-25';"
    },
    {
        "question_id": 106,
        "answer_sql": ""
    },
    {
        "question_id": 107,
        "answer_sql": "SELECT client.gender FROM client JOIN district ON client.district_id = district.district_id JOIN account ON client.district_id = account.district_id WHERE district.A11 = (SELECT MAX(A11) FROM district) ORDER BY client.birth_date ASC LIMIT 1;"
    },
    {
        "question_id": 108,
        "answer_sql": "SELECT min(t.amount) FROM trans t JOIN account a ON t.account_id = a.account_id JOIN client c ON a.district_id = c.district_id WHERE a.account_id = (SELECT account_id FROM loan WHERE status = 'approved' ORDER BY amount DESC LIMIT 1) AND t.date > (SELECT date FROM account WHERE account_id = (SELECT account_id FROM loan WHERE status = 'approved' ORDER BY amount DESC LIMIT 1))"
    },
    {
        "question_id": 109,
        "answer_sql": ""
    },
    {
        "question_id": 110,
        "answer_sql": "SELECT DISTINCT d.disp_id FROM disp d JOIN client c ON d.client_id = c.client_id JOIN account a ON d.account_id = a.account_id JOIN trans t ON a.account_id = t.account_id WHERE t.amount = 5100 AND t.date = '1998-09-02';"
    },
    {
        "question_id": 111,
        "answer_sql": "SELECT COUNT(*) FROM account WHERE district_id IN ( SELECT district_id FROM district WHERE A2 = 'Litomerice' ) AND date BETWEEN '1996-01-01' AND '1996-12-31';"
    },
    {
        "question_id": 112,
        "answer_sql": "SELECT D.A2 FROM district D, client C WHERE C.gender = 'F' AND C.birth_date = '1976-01-29' AND C.district_id = D.district_id;"
    },
    {
        "question_id": 113,
        "answer_sql": ""
    },
    {
        "question_id": 114,
        "answer_sql": ""
    },
    {
        "question_id": 115,
        "answer_sql": ""
    },
    {
        "question_id": 116,
        "answer_sql": ""
    },
    {
        "question_id": 117,
        "answer_sql": "SELECT (SUM(CASE WHEN loan.status = 'A' THEN loan.amount ELSE 0 END) / SUM(loan.amount)) * 100 AS percentage_paid_no_issue FROM loan;"
    },
    {
        "question_id": 118,
        "answer_sql": "SELECT (SUM(CASE WHEN l.status = 'C' AND l.amount < 100000 THEN 1 ELSE 0 END) * 100.0) / COUNT(*) FROM account a LEFT JOIN loan l ON a.account_id = l.account_id WHERE l.amount < 100000;"
    },
    {
        "question_id": 119,
        "answer_sql": ""
    },
    {
        "question_id": 120,
        "answer_sql": ""
    },
    {
        "question_id": 121,
        "answer_sql": "SELECT account.account_id, account.date FROM account JOIN district ON account.district_id = district.district_id WHERE district.A2 = 'Prachatice';"
    },
    {
        "question_id": 122,
        "answer_sql": "SELECT d.A2 AS district, d.A3 AS region FROM district d JOIN account a ON a.district_id = d.district_id JOIN loan l ON a.account_id = l.account_id WHERE l.loan_id = 4990;"
    },
    {
        "question_id": 123,
        "answer_sql": "SELECT a.account_id, d.A2 AS district, d.A3 AS region FROM account a JOIN loan l ON a.account_id = l.account_id JOIN district d ON a.district_id = d.district_id WHERE l.amount > 300000;"
    },
    {
        "question_id": 124,
        "answer_sql": "SELECT loan.loan_id, district.A3, district.A11 FROM loan JOIN account ON loan.account_id = account.account_id JOIN district ON account.district_id = district.district_id WHERE loan.duration = 60;"
    },
    {
        "question_id": 125,
        "answer_sql": ""
    },
    {
        "question_id": 126,
        "answer_sql": "SELECT (COUNT(*) * 100.0) / (SELECT COUNT(*) FROM account WHERE date = '1993-01-01' AND district_id IN (SELECT district_id FROM district WHERE A2 LIKE '%Decin%')) AS percentage FROM account WHERE date = '1993-01-01' AND district_id IN (SELECT district_id FROM district WHERE A2 LIKE '%Decin%');"
    },
    {
        "question_id": 127,
        "answer_sql": "SELECT account_id FROM account WHERE date LIKE '%-%' AND date LIKE '%-%' AND date LIKE '%-%';"
    },
    {
        "question_id": 128,
        "answer_sql": "SELECT district.A2, COUNT(DISTINCT CASE WHEN client.gender = 'F' THEN client.client_id END) AS female_account_holders FROM client JOIN district ON client.district_id = district.district_id GROUP BY district.A2 ORDER BY female_account_holders DESC LIMIT 10;"
    },
    {
        "question_id": 129,
        "answer_sql": "SELECT DISTINCT d.A2, SUM(t.amount) AS total_withdrawal FROM trans t JOIN account a ON t.account_id = a.account_id JOIN district d ON a.district_id = d.district_id WHERE t.type = 'VYDAJ' AND t.date LIKE '1996-01%' GROUP BY d.A2 ORDER BY total_withdrawal DESC LIMIT 10;"
    },
    {
        "question_id": 130,
        "answer_sql": "SELECT COUNT(DISTINCT c.client_id) FROM client c JOIN account a ON c.district_id = a.district_id WHERE c.district_id IN ( SELECT district_id FROM district WHERE A3 = 'South Bohemia' ) AND a.account_id NOT IN ( SELECT DISTINCT account_id FROM card );"
    },
    {
        "question_id": 131,
        "answer_sql": "SELECT DISTRICT.A3, COUNT(*) as active_loans FROM loan JOIN account ON loan.account_id = account.account_id JOIN district ON account.district_id = district.district_id WHERE loan.status IN ('C', 'D') GROUP BY district.A3 ORDER BY active_loans DESC LIMIT 1;"
    },
    {
        "question_id": 132,
        "answer_sql": "SELECT AVG(l.amount) FROM loan l JOIN client c ON l.account_id = c.client_id WHERE c.gender = 'M';"
    },
    {
        "question_id": 133,
        "answer_sql": "SELECT DISTRICT.A2 AS district_name, DISTRICT.A13 AS unemployment_rate FROM DISTRICT WHERE DISTRICT.A13 IS NOT NULL AND DISTRICT.A13 != '' ORDER BY DISTRICT.A13 DESC;"
    },
    {
        "question_id": 134,
        "answer_sql": "SELECT COUNT(account_id) FROM account WHERE district_id IN ( SELECT district_id FROM district WHERE A16 = ( SELECT MAX(A16) FROM district ) );"
    },
    {
        "question_id": 135,
        "answer_sql": "SELECT COUNT(*) FROM trans t JOIN account a ON t.account_id = a.account_id WHERE t.operation = 'VYBER KARTOU' AND a.frequency = 'POPLATEK MESICNE' AND t.amount < 0;"
    },
    {
        "question_id": 136,
        "answer_sql": "SELECT COUNT(*) FROM loan JOIN account ON loan.account_id = account.account_id JOIN trans ON loan.account_id = trans.account_id WHERE loan.amount >= 250000 AND trans.type = 'P' AND trans.date BETWEEN '1995-01-01' AND '1997-12-31' AND account.frequency = 'POPLATEK MESICNE';"
    },
    {
        "question_id": 137,
        "answer_sql": "SELECT COUNT(*) FROM account a JOIN disp d ON a.account_id = d.account_id WHERE d.client_id IN (SELECT client_id FROM client WHERE district_id = (SELECT district_id FROM district WHERE A2 = 'Branch location 1')) AND a.account_id IN (SELECT account_id FROM loan WHERE status = 'C' OR status = 'D');"
    },
    {
        "question_id": 138,
        "answer_sql": "SELECT COUNT(*) FROM client c JOIN district d ON c.district_id = d.district_id WHERE c.gender = 'M' AND d.A15 = (SELECT MAX(A15) FROM district);"
    },
    {
        "question_id": 139,
        "answer_sql": ""
    },
    {
        "question_id": 140,
        "answer_sql": "SELECT COUNT(*) FROM account WHERE district_id IN (SELECT district_id FROM district WHERE A2 = 'Pisek');"
    },
    {
        "question_id": 141,
        "answer_sql": "SELECT DISTINCT T1.A2 FROM district T1, trans T2 WHERE T1.district_id = T2.account_id AND T2.amount > 10000 AND T2.date LIKE '1997%';"
    },
    {
        "question_id": 142,
        "answer_sql": ""
    },
    {
        "question_id": 143,
        "answer_sql": ""
    },
    {
        "question_id": 144,
        "answer_sql": "SELECT AVG(t.amount) FROM trans t JOIN account a ON t.account_id = a.account_id WHERE t.operation = 'VYBER KARTOU' AND strftime('%Y', t.date) = '2021' AND strftime('%m', t.date) BETWEEN '01' AND '12';"
    },
    {
        "question_id": 145,
        "answer_sql": ""
    },
    {
        "question_id": 146,
        "answer_sql": "SELECT DISTINCT c.client_id, c.gender, c.birth_date, c.district_id, a.account_id, a.frequency, a.date, ca.card_id, ca.disp_id, ca.type, ca.issued, l.loan_id, l.account_id, l.date, l.amount, l.duration, l.payments, l.status FROM client c JOIN account a ON c.client_id = a.district_id JOIN card ca ON a.account_id = ca.disp_id JOIN loan l ON a.account_id = l.account_id WHERE c.gender = 'F'"
    },
    {
        "question_id": 147,
        "answer_sql": "SELECT COUNT(*) FROM client c JOIN district d ON c.district_id = d.district_id WHERE c.gender = 'F' AND d.A3 = 'south Bohemia';"
    },
    {
        "question_id": 148,
        "answer_sql": ""
    },
    {
        "question_id": 149,
        "answer_sql": ""
    },
    {
        "question_id": 150,
        "answer_sql": "SELECT COUNT(*) FROM account a JOIN district d ON a.district_id = d.district_id JOIN trans t ON a.account_id = t.account_id WHERE d.A3 = 'North Bohemia' AND t.bank = 'AB';"
    },
    {
        "question_id": 151,
        "answer_sql": "SELECT DISTINCT d.A2 FROM district d JOIN account a ON d.district_id = a.district_id JOIN trans t ON a.account_id = t.account_id WHERE t.type = 'VYDAJ';"
    },
    {
        "question_id": 152,
        "answer_sql": "SELECT AVG(A15) FROM district WHERE A15 > 4000 AND A3 LIKE '%1995%';"
    },
    {
        "question_id": 153,
        "answer_sql": ""
    },
    {
        "question_id": 154,
        "answer_sql": "SELECT COUNT(*) FROM client c JOIN district d ON c.district_id = d.district_id WHERE d.A2 = 'Hl.m. Praha' AND c.gender = 'M';"
    },
    {
        "question_id": 155,
        "answer_sql": "SELECT (COUNT(CASE WHEN card.type = 'Gold' AND card.issued < '1998' THEN 1 END) * 100) / COUNT(*) FROM card;"
    },
    {
        "question_id": 156,
        "answer_sql": ""
    },
    {
        "question_id": 157,
        "answer_sql": "SELECT A15 FROM district WHERE district_id = (SELECT district_id FROM account WHERE account_id = 532);"
    },
    {
        "question_id": 158,
        "answer_sql": ""
    },
    {
        "question_id": 159,
        "answer_sql": ""
    },
    {
        "question_id": 160,
        "answer_sql": "SELECT COUNT(*) FROM account a JOIN loan l ON a.account_id = l.account_id WHERE a.frequency = 'POPLATEK TYDNE' AND l.amount < 200000;"
    },
    {
        "question_id": 161,
        "answer_sql": "SELECT type FROM card WHERE card_id = (SELECT card_id FROM client WHERE client_id = 13539);"
    },
    {
        "question_id": 162,
        "answer_sql": "SELECT A3 FROM district WHERE district_id = (SELECT district_id FROM client WHERE client_id = 3541);"
    },
    {
        "question_id": 163,
        "answer_sql": "SELECT district_id, COUNT(*) as account_count FROM account JOIN loan ON account.account_id = loan.account_id WHERE loan.status = 'A' GROUP BY district_id ORDER BY account_count DESC LIMIT 1;"
    },
    {
        "question_id": 164,
        "answer_sql": ""
    },
    {
        "question_id": 165,
        "answer_sql": ""
    },
    {
        "question_id": 166,
        "answer_sql": "SELECT COUNT(*) FROM account WHERE district_id IN (SELECT district_id FROM district WHERE A2 = 'Jesenik');"
    },
    {
        "question_id": 167,
        "answer_sql": "SELECT DISTINCT c.client_id FROM client c JOIN disp d ON c.client_id = d.client_id JOIN card crd ON d.disp_id = crd.disp_id WHERE crd.issued >= '1997-01-01'"
    },
    {
        "question_id": 168,
        "answer_sql": "SELECT COUNT(CASE WHEN gender = 'F' THEN 1 END) / COUNT(*) * 100 AS percentage_women FROM client WHERE district_id IN ( SELECT district_id FROM district WHERE A11 > 10000 );"
    },
    {
        "question_id": 169,
        "answer_sql": ""
    },
    {
        "question_id": 170,
        "answer_sql": "SELECT COUNT(*) FROM trans WHERE date > '1995-01-01' AND operation = 'VYBER KARTOU';"
    },
    {
        "question_id": 171,
        "answer_sql": "SELECT (SELECT SUM(A16) FROM district WHERE A3 = 'North Bohemia') - (SELECT SUM(A16) FROM district WHERE A3 = 'East Bohemia') AS difference;"
    },
    {
        "question_id": 172,
        "answer_sql": "SELECT COUNT(*) FROM disp WHERE account_id >= 1 AND account_id <= 10 AND (type = 'owner' OR type = 'disponent');"
    },
    {
        "question_id": 173,
        "answer_sql": "SELECT COUNT(*) AS request_frequency, k_symbol AS debit_purpose FROM trans WHERE account_id = 3 GROUP BY k_symbol;"
    },
    {
        "question_id": 174,
        "answer_sql": "SELECT birth_date FROM client WHERE client_id = 130;"
    },
    {
        "question_id": 175,
        "answer_sql": "SELECT COUNT(*) FROM account a JOIN disp d ON a.account_id = d.account_id WHERE d.type = 'disp_type' AND a.frequency = 'POPLATEK PO OBRATU';"
    },
    {
        "question_id": 176,
        "answer_sql": "SELECT SUM(l.amount) AS total_debt, COUNT(l.amount) AS payment_frequency FROM loan l JOIN account a ON l.account_id = a.account_id JOIN client c ON a.district_id = c.district_id WHERE c.client_id = 992;"
    },
    {
        "question_id": 177,
        "answer_sql": ""
    },
    {
        "question_id": 178,
        "answer_sql": "SELECT type FROM card WHERE card_id = (SELECT card_id FROM disp WHERE client_id = (SELECT client_id FROM client WHERE client_id = 9));"
    },
    {
        "question_id": 179,
        "answer_sql": "SELECT SUM(t.amount) FROM trans t JOIN account a ON t.account_id = a.account_id JOIN client c ON a.district_id = c.district_id WHERE c.client_id = 617 AND strftime('%Y', t.date) = '1998';"
    },
    {
        "question_id": 180,
        "answer_sql": ""
    },
    {
        "question_id": 181,
        "answer_sql": "SELECT client_id FROM client JOIN loan ON client.client_id = loan.account_id WHERE client.gender = 'F' ORDER BY loan.amount DESC LIMIT 3;"
    },
    {
        "question_id": 182,
        "answer_sql": "SELECT COUNT(*) FROM client c JOIN disp d ON c.client_id = d.client_id JOIN account a ON d.account_id = a.account_id WHERE c.gender = 'M' AND c.birth_date BETWEEN '1974-01-01' AND '1976-12-31' AND a.account_id IN ( SELECT account_id FROM trans t WHERE t.type = 'SIPO' AND t.amount > 4000 );"
    },
    {
        "question_id": 183,
        "answer_sql": "SELECT COUNT(*) FROM account a JOIN district d ON a.district_id = d.district_id WHERE d.A2 LIKE '%Beroun%' AND a.date > '1996-01-01';"
    },
    {
        "question_id": 184,
        "answer_sql": "SELECT COUNT(*) FROM client c JOIN disp d ON c.client_id = d.client_id JOIN card crd ON d.disp_id = crd.disp_id WHERE c.gender = 'F' AND crd.type = 'junior';"
    },
    {
        "question_id": 185,
        "answer_sql": "SELECT (COUNT(*) * 100) / SUM(CASE WHEN gender = 'F' THEN 1 ELSE 0 END) AS Proportion FROM client WHERE district_id IN ( SELECT district_id FROM district WHERE A3 LIKE '%Prague%' )"
    },
    {
        "question_id": 186,
        "answer_sql": "SELECT (COUNT(CASE WHEN client.gender = 'M' AND disp.type = 'POPLATEK TYDNE' THEN 1 END) / COUNT(disp.type)) * 100 AS percentage FROM client LEFT JOIN disp ON client.client_id = disp.client_id LEFT JOIN account ON disp.account_id = account.account_id;"
    },
    {
        "question_id": 187,
        "answer_sql": "SELECT COUNT(*) FROM client JOIN account ON client.district_id = account.district_id WHERE account.frequency = 'POPLATEK TYDNE';"
    },
    {
        "question_id": 188,
        "answer_sql": ""
    },
    {
        "question_id": 189,
        "answer_sql": "SELECT a.account_id FROM account a JOIN client c ON a.district_id = c.district_id JOIN district d ON a.district_id = d.district_id WHERE c.gender = 'F' AND d.A11 = (SELECT MIN(A11) FROM district) ORDER BY d.A11 ASC LIMIT 1;"
    },
    {
        "question_id": 190,
        "answer_sql": ""
    },
    {
        "question_id": 191,
        "answer_sql": "SELECT COUNT(*) FROM loan JOIN account ON loan.account_id = account.account_id WHERE loan.duration = 24 AND account.frequency = 'POPLATEK TYDNE';"
    },
    {
        "question_id": 192,
        "answer_sql": "SELECT AVG(amount) FROM loan WHERE status IN ('C', 'D') AND loan.date = (SELECT date FROM trans WHERE trans.trans_id = loan.loan_id)"
    },
    {
        "question_id": 193,
        "answer_sql": ""
    },
    {
        "question_id": 194,
        "answer_sql": "SELECT client.client_id, client.birth_date - 18 AS age FROM client JOIN disp ON client.client_id = disp.client_id JOIN card ON disp.disp_id = card.disp_id WHERE card.type = 'gold' AND EXISTS ( SELECT 1 FROM loan WHERE loan.account_id = disp.account_id );"
    },
    {
        "question_id": 195,
        "answer_sql": "SELECT bond_type, COUNT(*) AS count FROM bond GROUP BY bond_type ORDER BY count DESC LIMIT 1;"
    },
    {
        "question_id": 196,
        "answer_sql": "SELECT COUNT(*) FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE m.label = '-' AND a.element = 'cl';"
    },
    {
        "question_id": 197,
        "answer_sql": "SELECT AVG(CASE WHEN atom.element = 'o' THEN 1 ELSE 0 END) AS avg_oxygen_atoms FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '-';"
    },
    {
        "question_id": 198,
        "answer_sql": ""
    },
    {
        "question_id": 199,
        "answer_sql": "SELECT COUNT(*) FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE a.element = 'na' AND m.label = '-';"
    },
    {
        "question_id": 200,
        "answer_sql": ""
    },
    {
        "question_id": 201,
        "answer_sql": ""
    },
    {
        "question_id": 202,
        "answer_sql": "SELECT COUNT(*) FROM bond WHERE bond_type = '#';"
    },
    {
        "question_id": 203,
        "answer_sql": "SELECT COUNT(*) FROM atom WHERE element != 'br';"
    },
    {
        "question_id": 204,
        "answer_sql": "SELECT COUNT(*) FROM molecule WHERE molecule_id BETWEEN 'TR000' AND 'TR099' AND label = '+';"
    },
    {
        "question_id": 205,
        "answer_sql": ""
    },
    {
        "question_id": 206,
        "answer_sql": "SELECT DISTINCT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR004_8_9';"
    },
    {
        "question_id": 207,
        "answer_sql": "SELECT DISTINCT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '=';"
    },
    {
        "question_id": 208,
        "answer_sql": ""
    },
    {
        "question_id": 209,
        "answer_sql": "SELECT b.bond_type FROM bond b INNER JOIN atom a ON b.molecule_id = a.molecule_id WHERE a.element = 'te';"
    },
    {
        "question_id": 210,
        "answer_sql": ""
    },
    {
        "question_id": 211,
        "answer_sql": ""
    },
    {
        "question_id": 212,
        "answer_sql": "SELECT element, COUNT(*) as count FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '-' GROUP BY element ORDER BY count ASC LIMIT 1;"
    },
    {
        "question_id": 213,
        "answer_sql": "SELECT b.bond_type FROM `bond` b INNER JOIN `connected` c ON b.bond_id = c.bond_id WHERE c.atom_id = 'TR004_8' AND c.atom_id2 = 'TR004_20';"
    },
    {
        "question_id": 214,
        "answer_sql": ""
    },
    {
        "question_id": 215,
        "answer_sql": "SELECT COUNT(*) FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id JOIN bond ON molecule.molecule_id = bond.molecule_id JOIN connected ON atom.atom_id = connected.atom_id WHERE atom.element IN ('i', 's') AND bond.bond_type = '-';"
    },
    {
        "question_id": 216,
        "answer_sql": "SELECT DISTINCT a.atom_id FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = '#';"
    },
    {
        "question_id": 217,
        "answer_sql": ""
    },
    {
        "question_id": 218,
        "answer_sql": ""
    },
    {
        "question_id": 219,
        "answer_sql": ""
    },
    {
        "question_id": 220,
        "answer_sql": "SELECT DISTINCT element FROM atom WHERE molecule_id = 'TR000' ORDER BY element ASC LIMIT 3;"
    },
    {
        "question_id": 221,
        "answer_sql": "SELECT DISTINCT a1.atom_id, a2.atom_id FROM connected AS c JOIN atom AS a1 ON c.atom_id = a1.atom_id JOIN atom AS a2 ON c.atom_id2 = a2.atom_id WHERE c.bond_id = 'TR001_2_6' AND a1.molecule_id = 'TR001' AND a2.molecule_id = 'TR001';"
    },
    {
        "question_id": 222,
        "answer_sql": "SELECT SUM(CASE WHEN m.label = '+' THEN 1 ELSE 0 END) - SUM(CASE WHEN m.label = '-' THEN 1 ELSE 0 END) AS difference FROM molecule m;"
    },
    {
        "question_id": 223,
        "answer_sql": ""
    },
    {
        "question_id": 224,
        "answer_sql": "SELECT bond_id FROM connected WHERE atom_id2 = 'TR000_2';"
    },
    {
        "question_id": 225,
        "answer_sql": "SELECT m.molecule_id, m.label FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = '=' ORDER BY m.label ASC LIMIT 5;"
    },
    {
        "question_id": 226,
        "answer_sql": ""
    },
    {
        "question_id": 227,
        "answer_sql": ""
    },
    {
        "question_id": 228,
        "answer_sql": ""
    },
    {
        "question_id": 229,
        "answer_sql": "SELECT b.bond_type FROM bond b WHERE b.molecule_id = 'TR000';"
    },
    {
        "question_id": 230,
        "answer_sql": "SELECT atom.element, molecule.label FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR060';"
    },
    {
        "question_id": 231,
        "answer_sql": ""
    },
    {
        "question_id": 232,
        "answer_sql": "SELECT m.molecule_id, m.label FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id JOIN connected c ON b.bond_id = c.bond_id WHERE b.bond_type = '-' AND m.label = '-' ORDER BY m.molecule_id ASC LIMIT 3;"
    },
    {
        "question_id": 233,
        "answer_sql": ""
    },
    {
        "question_id": 234,
        "answer_sql": "SELECT COUNT(*) FROM connected c WHERE (c.atom_id = 'TR009_12' OR c.atom_id2 = 'TR009_12') AND c.bond_id LIKE 'TR009_%';"
    },
    {
        "question_id": 235,
        "answer_sql": "SELECT COUNT(*) FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE m.label = '+' AND a.element = 'br';"
    },
    {
        "question_id": 236,
        "answer_sql": ""
    },
    {
        "question_id": 237,
        "answer_sql": "SELECT m.label FROM molecule m JOIN atom a ON a.molecule_id = m.molecule_id WHERE a.atom_id = 'TR001_10';"
    },
    {
        "question_id": 238,
        "answer_sql": "SELECT COUNT(*) FROM bond WHERE bond_type = '#';"
    },
    {
        "question_id": 239,
        "answer_sql": "SELECT COUNT(*) FROM connected c WHERE c.atom_id = 'TR%_19' OR c.atom_id2 = 'TR%_19';"
    },
    {
        "question_id": 240,
        "answer_sql": "SELECT atom.element FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR004';"
    },
    {
        "question_id": 241,
        "answer_sql": "SELECT COUNT(*) FROM molecule WHERE label = '-';"
    },
    {
        "question_id": 242,
        "answer_sql": ""
    },
    {
        "question_id": 243,
        "answer_sql": "SELECT b.bond_id FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a ON c.atom_id = a.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE (a.element = 'p' OR a2.element = 'p') AND (a.element = 'n' OR a2.element = 'n');"
    },
    {
        "question_id": 244,
        "answer_sql": ""
    },
    {
        "question_id": 245,
        "answer_sql": ""
    },
    {
        "question_id": 246,
        "answer_sql": ""
    },
    {
        "question_id": 247,
        "answer_sql": "SELECT DISTINCT a.element FROM atom a LEFT JOIN connected c ON a.atom_id = c.atom_id WHERE c.atom_id IS NULL;"
    },
    {
        "question_id": 248,
        "answer_sql": ""
    },
    {
        "question_id": 249,
        "answer_sql": "SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR144_8_19';"
    },
    {
        "question_id": 250,
        "answer_sql": "SELECT m.molecule_id, COUNT(DISTINCT b.bond_id) AS double_bonds FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE m.label = '+' AND b.bond_type = '=' GROUP BY m.molecule_id ORDER BY double_bonds DESC LIMIT 1;"
    },
    {
        "question_id": 251,
        "answer_sql": ""
    },
    {
        "question_id": 252,
        "answer_sql": "SELECT DISTINCT a.atom_id FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE a.element = 'pb' AND a2.element != 'pb';"
    },
    {
        "question_id": 253,
        "answer_sql": "SELECT DISTINCT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '#';"
    },
    {
        "question_id": 254,
        "answer_sql": ""
    },
    {
        "question_id": 255,
        "answer_sql": ""
    },
    {
        "question_id": 256,
        "answer_sql": "SELECT COUNT(*) FROM atom WHERE element IN ('c', 'h');"
    },
    {
        "question_id": 257,
        "answer_sql": "SELECT DISTINCT T3.atom_id2 FROM atom AS T1 LEFT JOIN connected AS T2 ON T1.atom_id = T2.atom_id LEFT JOIN connected AS T3 ON T1.atom_id = T3.atom_id2 WHERE T1.element = 's';"
    },
    {
        "question_id": 258,
        "answer_sql": "SELECT b.bond_type FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE a.element = 'sn';"
    },
    {
        "question_id": 259,
        "answer_sql": "SELECT COUNT(DISTINCT a.element) FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = '-';"
    },
    {
        "question_id": 260,
        "answer_sql": "SELECT COUNT(*) FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id JOIN bond b ON a.molecule_id = b.molecule_id AND b.bond_type = '#' WHERE (a.element = 'p' OR a.element = 'br');"
    },
    {
        "question_id": 261,
        "answer_sql": "SELECT b.bond_id FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE m.label = '+';"
    },
    {
        "question_id": 262,
        "answer_sql": ""
    },
    {
        "question_id": 263,
        "answer_sql": ""
    },
    {
        "question_id": 264,
        "answer_sql": "SELECT label FROM molecule WHERE molecule_id IN ('TR000', 'TR001', 'TR002');"
    },
    {
        "question_id": 265,
        "answer_sql": "SELECT m.molecule_id FROM molecule m WHERE m.label = '-';"
    },
    {
        "question_id": 266,
        "answer_sql": "SELECT COUNT(*) AS total_carcinogenic_molecules FROM molecule WHERE label = '+' AND molecule_id BETWEEN 'TR000' AND 'TR030';"
    },
    {
        "question_id": 267,
        "answer_sql": "SELECT b.bond_type FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE m.molecule_id BETWEEN 'TR000' AND 'TR050';"
    },
    {
        "question_id": 268,
        "answer_sql": "SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR001_10_11';"
    },
    {
        "question_id": 269,
        "answer_sql": "SELECT COUNT(T3.bond_id) FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T1.element = 'i';"
    },
    {
        "question_id": 270,
        "answer_sql": "SELECT CASE WHEN MAX(label) = '+' THEN 'carcinogenic' ELSE 'non carcinogenic' END AS most_label FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.element = 'ca';"
    },
    {
        "question_id": 271,
        "answer_sql": ""
    },
    {
        "question_id": 272,
        "answer_sql": "SELECT DISTINCT m.molecule_id FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id JOIN bond b ON m.molecule_id = b.molecule_id JOIN connected c ON a.atom_id = c.atom_id JOIN connected c2 ON a.atom_id = c2.atom_id2 WHERE a.element = 'c' AND b.bond_type = '#' AND m.label = '-' AND c.bond_id = c2.bond_id LIMIT 2;"
    },
    {
        "question_id": 273,
        "answer_sql": ""
    },
    {
        "question_id": 274,
        "answer_sql": "SELECT DISTINCT atom.element FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR001';"
    },
    {
        "question_id": 275,
        "answer_sql": "SELECT m.molecule_id FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = '=';"
    },
    {
        "question_id": 276,
        "answer_sql": ""
    },
    {
        "question_id": 277,
        "answer_sql": "SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR005_16_26';"
    },
    {
        "question_id": 278,
        "answer_sql": "SELECT COUNT(*) FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id JOIN atom a ON m.molecule_id = a.molecule_id JOIN connected c ON a.atom_id = c.atom_id WHERE m.label = '-' AND b.bond_type = '-'"
    },
    {
        "question_id": 279,
        "answer_sql": "SELECT m.label FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_id = 'TR001_10_11';"
    },
    {
        "question_id": 280,
        "answer_sql": "SELECT b.bond_id FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id JOIN atom a ON a.molecule_id = m.molecule_id JOIN connected c ON c.atom_id = a.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE b.bond_type = '#' AND (m.label = '+' OR m.label = '-');"
    },
    {
        "question_id": 281,
        "answer_sql": "SELECT T1.element FROM atom AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id JOIN connected AS T3 ON T1.atom_id = T3.atom_id WHERE T2.label = '+' AND CAST(SUBSTR(T1.atom_id, 7, 1) AS INTEGER) = 4 AND T1.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca');"
    },
    {
        "question_id": 282,
        "answer_sql": ""
    },
    {
        "question_id": 283,
        "answer_sql": "SELECT m.label FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.element = 'ca'"
    },
    {
        "question_id": 284,
        "answer_sql": "SELECT b.bond_type FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a ON c.atom_id = a.atom_id WHERE a.element = 'te';"
    },
    {
        "question_id": 285,
        "answer_sql": "SELECT DISTINCT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR001_10_11';"
    },
    {
        "question_id": 286,
        "answer_sql": "SELECT (COUNT(*) * 100.0) / (SELECT COUNT(*) FROM `molecule`) AS percentage FROM bond WHERE bond_type = '#';"
    },
    {
        "question_id": 287,
        "answer_sql": ""
    },
    {
        "question_id": 288,
        "answer_sql": "SELECT m.label FROM molecule m INNER JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.atom_id = 'TR001_1';"
    },
    {
        "question_id": 289,
        "answer_sql": "SELECT label FROM molecule WHERE molecule_id = 'TR151';"
    },
    {
        "question_id": 290,
        "answer_sql": ""
    },
    {
        "question_id": 291,
        "answer_sql": "SELECT COUNT(*) FROM molecule WHERE label = '+';"
    },
    {
        "question_id": 292,
        "answer_sql": "SELECT DISTINCT a.atom_id FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.molecule_id LIKE 'TR%0' AND a.element = 'c';"
    },
    {
        "question_id": 293,
        "answer_sql": "SELECT COUNT(DISTINCT a.atom_id) FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.label = '+';"
    },
    {
        "question_id": 294,
        "answer_sql": ""
    },
    {
        "question_id": 295,
        "answer_sql": "SELECT COUNT(*) FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.label = '+' AND a.element = 'H';"
    },
    {
        "question_id": 296,
        "answer_sql": ""
    },
    {
        "question_id": 297,
        "answer_sql": "SELECT DISTINCT a.atom_id FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE a.element = 'c' AND m.label != '-'"
    },
    {
        "question_id": 298,
        "answer_sql": ""
    },
    {
        "question_id": 299,
        "answer_sql": ""
    },
    {
        "question_id": 300,
        "answer_sql": ""
    },
    {
        "question_id": 301,
        "answer_sql": ""
    },
    {
        "question_id": 302,
        "answer_sql": "SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR001_2_4';"
    },
    {
        "question_id": 303,
        "answer_sql": "SELECT COUNT(*) AS double_bonds, m.label AS is_carcinogenic FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id JOIN connected c ON b.bond_id = c.bond_id WHERE m.label IS NOT NULL AND b.bond_type = '=' AND m.molecule_id = 'TR006';"
    },
    {
        "question_id": 304,
        "answer_sql": "SELECT m.molecule_id, a.element FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE m.label = '+' AND a.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca');"
    },
    {
        "question_id": 305,
        "answer_sql": ""
    },
    {
        "question_id": 306,
        "answer_sql": "SELECT DISTINCT m.molecule_id, GROUP_CONCAT(a.element) FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id JOIN bond b ON m.molecule_id = b.molecule_id JOIN connected c ON a.atom_id = c.atom_id WHERE b.bond_type = '#' GROUP BY m.molecule_id"
    },
    {
        "question_id": 307,
        "answer_sql": "SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR000_2_3';"
    },
    {
        "question_id": 308,
        "answer_sql": "SELECT COUNT(*) FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE a.element = 'cl';"
    },
    {
        "question_id": 309,
        "answer_sql": ""
    },
    {
        "question_id": 310,
        "answer_sql": ""
    },
    {
        "question_id": 311,
        "answer_sql": "SELECT COUNT(DISTINCT m.molecule_id) FROM molecule m LEFT JOIN atom a ON m.molecule_id = a.molecule_id LEFT JOIN bond b ON m.molecule_id = b.molecule_id LEFT JOIN connected c ON a.atom_id = c.atom_id WHERE a.element != 's' AND (b.bond_type != '=' OR c.bond_id IS NULL);"
    },
    {
        "question_id": 312,
        "answer_sql": "SELECT m.label FROM `molecule` m INNER JOIN `bond` b ON m.molecule_id = b.molecule_id INNER JOIN `connected` c ON b.bond_id = c.bond_id WHERE b.bond_id = 'TR001_2_4';"
    },
    {
        "question_id": 313,
        "answer_sql": "SELECT COUNT(*) FROM atom WHERE molecule_id = 'TR005';"
    },
    {
        "question_id": 314,
        "answer_sql": "SELECT COUNT(*) FROM bond WHERE bond_type = '-';"
    },
    {
        "question_id": 315,
        "answer_sql": "SELECT m.molecule_id, m.label FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.element = 'cl' AND m.label = '+';"
    },
    {
        "question_id": 316,
        "answer_sql": "SELECT m.molecule_id FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.element = 'c' AND m.label = '-';"
    },
    {
        "question_id": 317,
        "answer_sql": ""
    },
    {
        "question_id": 318,
        "answer_sql": "SELECT m.molecule_id FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE b.bond_id = 'TR001_1_7';"
    },
    {
        "question_id": 319,
        "answer_sql": "SELECT COUNT(DISTINCT a.element) FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_id = 'TR001_3_4';"
    },
    {
        "question_id": 320,
        "answer_sql": "SELECT b.bond_type FROM bond b JOIN connected c ON b.bond_id = c.bond_id WHERE c.atom_id = 'TR000_1' AND c.atom_id2 = 'TR000_2';"
    },
    {
        "question_id": 321,
        "answer_sql": ""
    },
    {
        "question_id": 322,
        "answer_sql": "SELECT atom.element FROM atom WHERE atom.atom_id = 'TR000_1';"
    },
    {
        "question_id": 323,
        "answer_sql": "SELECT label FROM molecule WHERE molecule_id = 'TR000';"
    },
    {
        "question_id": 324,
        "answer_sql": ""
    },
    {
        "question_id": 325,
        "answer_sql": "SELECT COUNT(*) FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE a.element = 'n' AND m.label = '+';"
    },
    {
        "question_id": 326,
        "answer_sql": "SELECT m.molecule_id FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id JOIN bond b ON m.molecule_id = b.molecule_id JOIN connected c ON a.atom_id = c.atom_id WHERE a.element = 's' AND b.bond_type = '=';"
    },
    {
        "question_id": 327,
        "answer_sql": "SELECT m.molecule_id FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id GROUP BY m.molecule_id HAVING COUNT(a.atom_id) > 5 AND m.label = '-'"
    },
    {
        "question_id": 328,
        "answer_sql": "SELECT DISTINCT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '=' AND atom.molecule_id = 'TR024'"
    },
    {
        "question_id": 329,
        "answer_sql": "SELECT m.molecule_id, m.label, COUNT(a.atom_id) AS atom_count FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE m.label = '+' GROUP BY m.molecule_id, m.label ORDER BY atom_count DESC LIMIT 1;"
    },
    {
        "question_id": 330,
        "answer_sql": ""
    },
    {
        "question_id": 331,
        "answer_sql": "SELECT COUNT(*) FROM molecule WHERE label = '+';"
    },
    {
        "question_id": 332,
        "answer_sql": "SELECT COUNT(*) FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE m.molecule_id BETWEEN 'TR004' AND 'TR010' AND b.bond_type = '-';"
    },
    {
        "question_id": 333,
        "answer_sql": "SELECT COUNT(*) FROM atom WHERE molecule_id = 'TR008' AND element = 'c';"
    },
    {
        "question_id": 334,
        "answer_sql": "SELECT atom.element FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.atom_id = 'TR004_7' AND molecule.label = '-'"
    },
    {
        "question_id": 335,
        "answer_sql": "SELECT COUNT(*) FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id JOIN connected c ON b.bond_id = c.bond_id WHERE c.atom_id IN ( SELECT atom_id FROM atom WHERE element = 'o' ) AND c.atom_id2 IN ( SELECT atom_id FROM atom WHERE element = 'o' ) AND b.bond_type = ' = ';"
    },
    {
        "question_id": 336,
        "answer_sql": ""
    },
    {
        "question_id": 337,
        "answer_sql": ""
    },
    {
        "question_id": 338,
        "answer_sql": ""
    },
    {
        "question_id": 339,
        "answer_sql": "SELECT atom.atom_id FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id JOIN ( SELECT molecule_id FROM molecule WHERE label = '+' ) m ON atom.molecule_id = m.molecule_id JOIN ( SELECT atom_id FROM atom WHERE element = 'o' ) a ON atom.atom_id = a.atom_id;"
    },
    {
        "question_id": 340,
        "answer_sql": ""
    },
    {
        "question_id": 341,
        "answer_sql": "SELECT DISTINCT c.id, c.name, c.borderColor, c.cardKingdomFoilId, c.cardKingdomId FROM cards c WHERE c.borderColor = 'borderless' AND (c.cardKingdomFoilId IS NULL OR (c.cardKingdomFoilId IS NOT NULL AND c.cardKingdomId IS NOT NULL AND c.cardKingdomId != c.cardKingdomFoilId))"
    },
    {
        "question_id": 342,
        "answer_sql": ""
    },
    {
        "question_id": 343,
        "answer_sql": "SELECT name FROM cards WHERE frameVersion = 2015 AND edhrecRank < 100;"
    },
    {
        "question_id": 344,
        "answer_sql": "SELECT c.name FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.rarity = 'mythic' AND l.status = 'Banned' AND l.format = 'gladiator';"
    },
    {
        "question_id": 345,
        "answer_sql": "SELECT l.status FROM legalities l JOIN cards c ON l.uuid = c.uuid WHERE c.type = 'Artifact' AND c.side IS NULL AND l.format = 'vintage';"
    },
    {
        "question_id": 346,
        "answer_sql": ""
    },
    {
        "question_id": 347,
        "answer_sql": ""
    },
    {
        "question_id": 348,
        "answer_sql": "SELECT r.text FROM rulings r JOIN cards c ON r.uuid = c.uuid WHERE c.name = 'Sublime Epiphany' AND c.number = '74s';"
    },
    {
        "question_id": 349,
        "answer_sql": "SELECT c.name, c.artist, c.isPromo FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.isPromo = 1 GROUP BY c.uuid ORDER BY COUNT(r.uuid) DESC LIMIT 1;"
    },
    {
        "question_id": 350,
        "answer_sql": ""
    },
    {
        "question_id": 351,
        "answer_sql": "SELECT cards.name FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Japanese' AND cards.isAlternative = 1;"
    },
    {
        "question_id": 352,
        "answer_sql": ""
    },
    {
        "question_id": 353,
        "answer_sql": "SELECT s.code, s.totalSetSize FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.language = 'Italian';"
    },
    {
        "question_id": 354,
        "answer_sql": "SELECT COUNT(DISTINCT t2.type) FROM cards AS t1 JOIN sets AS t2 ON t1.setCode = t2.code WHERE t1.artist = 'Aaron Boyd';"
    },
    {
        "question_id": 355,
        "answer_sql": "SELECT keywords FROM cards WHERE name = 'Angel of Mercy';"
    },
    {
        "question_id": 356,
        "answer_sql": "SELECT COUNT(*) FROM cards WHERE power = '*';"
    },
    {
        "question_id": 357,
        "answer_sql": "SELECT promoTypes FROM cards WHERE name = 'Duress';"
    },
    {
        "question_id": 358,
        "answer_sql": "SELECT borderColor FROM cards WHERE name = 'Ancestor''s Chosen';"
    },
    {
        "question_id": 359,
        "answer_sql": "SELECT type FROM cards WHERE name = 'Ancestor''s Chosen';"
    },
    {
        "question_id": 360,
        "answer_sql": "SELECT DISTINCT language FROM set_translations WHERE setCode IN ( SELECT setCode FROM sets WHERE EXISTS ( SELECT 1 FROM cards WHERE name = 'Angel of Mercy' AND uuid IN ( SELECT uuid FROM cards WHERE name = 'Angel of Mercy' ) ) );"
    },
    {
        "question_id": 361,
        "answer_sql": "SELECT COUNT(*) FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE l.status = 'restricted' AND c.isTextless = 0;"
    },
    {
        "question_id": 362,
        "answer_sql": ""
    },
    {
        "question_id": 363,
        "answer_sql": "SELECT COUNT(*) FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'restricted' AND cards.isStarter = 1;"
    },
    {
        "question_id": 364,
        "answer_sql": "SELECT status FROM legalities WHERE uuid = (SELECT uuid FROM cards WHERE name = 'Cloudchaser Eagle');"
    },
    {
        "question_id": 365,
        "answer_sql": "SELECT type FROM cards WHERE name = 'Benalish Knight';"
    },
    {
        "question_id": 366,
        "answer_sql": "SELECT l.status FROM legalities l JOIN cards c ON l.uuid = c.uuid WHERE c.name = 'Benalish Knight';"
    },
    {
        "question_id": 367,
        "answer_sql": ""
    },
    {
        "question_id": 368,
        "answer_sql": ""
    },
    {
        "question_id": 369,
        "answer_sql": ""
    },
    {
        "question_id": 370,
        "answer_sql": "SELECT COUNT(*) FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.borderColor = 'borderless' AND foreign_data.language = 'Russian';"
    },
    {
        "question_id": 371,
        "answer_sql": ""
    },
    {
        "question_id": 372,
        "answer_sql": "SELECT COUNT(*) FROM cards WHERE toughness = '99';"
    },
    {
        "question_id": 373,
        "answer_sql": "SELECT name FROM cards WHERE artist = 'Aaron Boyd';"
    },
    {
        "question_id": 374,
        "answer_sql": "SELECT COUNT(*) FROM cards WHERE borderColor = 'black' AND availability = 'mtgo';"
    },
    {
        "question_id": 375,
        "answer_sql": "SELECT id FROM cards WHERE convertedManaCost = 0;"
    },
    {
        "question_id": 376,
        "answer_sql": "SELECT cards.layout FROM cards WHERE cards.keywords LIKE '%flying%';"
    },
    {
        "question_id": 377,
        "answer_sql": ""
    },
    {
        "question_id": 378,
        "answer_sql": ""
    },
    {
        "question_id": 379,
        "answer_sql": "SELECT id FROM cards WHERE duelDeck = 'a';"
    },
    {
        "question_id": 380,
        "answer_sql": ""
    },
    {
        "question_id": 381,
        "answer_sql": ""
    },
    {
        "question_id": 382,
        "answer_sql": ""
    },
    {
        "question_id": 383,
        "answer_sql": ""
    },
    {
        "question_id": 384,
        "answer_sql": ""
    },
    {
        "question_id": 385,
        "answer_sql": "SELECT r.text FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.name = 'Beacon of Immortality';"
    },
    {
        "question_id": 386,
        "answer_sql": "SELECT COUNT(*) AS future_cards_count, l.status FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.frameVersion = 'future' AND l.status = 'legal';"
    },
    {
        "question_id": 387,
        "answer_sql": ""
    },
    {
        "question_id": 388,
        "answer_sql": ""
    },
    {
        "question_id": 389,
        "answer_sql": ""
    },
    {
        "question_id": 390,
        "answer_sql": "SELECT cards.colors, legalities.format FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.id BETWEEN 1 AND 20;"
    },
    {
        "question_id": 391,
        "answer_sql": "SELECT cards.uuid, cards.name, cards.colors, foreign_data.language FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.originalType = 'Artifact' AND cards.colors = 'B';"
    },
    {
        "question_id": 392,
        "answer_sql": "SELECT name FROM cards JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.rarity = 'uncommon' ORDER BY rulings.date ASC LIMIT 3;"
    },
    {
        "question_id": 393,
        "answer_sql": "SELECT COUNT(*) FROM cards WHERE artist = 'John Avon' AND cardKingdomId IS NOT NULL AND cardKingdomFoilId IS NOT NULL AND cardKingdomId != cardKingdomFoilId;"
    },
    {
        "question_id": 394,
        "answer_sql": "SELECT COUNT(*) FROM cards WHERE borderColor = 'white' AND (cardKingdomFoilId = cardKingdomId AND cardKingdomId IS NOT NULL);"
    },
    {
        "question_id": 395,
        "answer_sql": "SELECT COUNT(*) FROM cards WHERE artist = 'UDON' AND availability = 'mtgo' AND hand = -1;"
    },
    {
        "question_id": 396,
        "answer_sql": "SELECT COUNT(*) FROM cards WHERE frameVersion = 1993 AND availability = 'paper' AND hasContentWarning = 1;"
    },
    {
        "question_id": 397,
        "answer_sql": "SELECT manaCost FROM cards WHERE layout = 'normal' AND frameVersion = 2003 AND borderColor = 'black' AND (availability = 'paper' OR availability = 'mtgo')"
    },
    {
        "question_id": 398,
        "answer_sql": "SELECT SUM(convertedManaCost) FROM cards WHERE artist = 'Rob Alexander';"
    },
    {
        "question_id": 399,
        "answer_sql": "SELECT DISTINCT types FROM cards WHERE availability = 'arena';"
    },
    {
        "question_id": 400,
        "answer_sql": "SELECT s.code FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.language = 'Spanish';"
    },
    {
        "question_id": 401,
        "answer_sql": ""
    },
    {
        "question_id": 402,
        "answer_sql": "SELECT id, (COUNT(id) OVER()) / COUNT(id) * 100 AS percentage FROM cards WHERE isStorySpotlight = 1 AND isTextless = 1 ORDER BY id;"
    },
    {
        "question_id": 403,
        "answer_sql": ""
    },
    {
        "question_id": 404,
        "answer_sql": "SELECT DISTINCT language FROM set_translations WHERE setCode = (SELECT code FROM sets WHERE baseSetSize = 309);"
    },
    {
        "question_id": 405,
        "answer_sql": "SELECT COUNT(*) FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE sets.block = 'Commander' AND set_translations.language = 'Portuguese (Brasil)';"
    },
    {
        "question_id": 406,
        "answer_sql": ""
    },
    {
        "question_id": 407,
        "answer_sql": "SELECT DISTINCT t1.type || ' (' || t1.subtypes || ' / ' || t1.supertypes || ')' AS card_type FROM cards AS t1 JOIN set_translations AS t2 ON t1.setCode = t2.setCode WHERE t2.language = 'German' AND t1.subtypes IS NOT NULL AND t1.supertypes IS NOT NULL;"
    },
    {
        "question_id": 408,
        "answer_sql": "SELECT COUNT(*) FROM cards WHERE power IS NULL AND (power IS NULL OR power = '*') AND EXISTS ( SELECT 1 FROM cards c2 WHERE c2.id = cards.id AND c2.power IS NOT NULL AND c2.power != '*' );"
    },
    {
        "question_id": 409,
        "answer_sql": ""
    },
    {
        "question_id": 410,
        "answer_sql": "SELECT id FROM cards WHERE artist = 'Erica Yang' AND availability = 'paper';"
    },
    {
        "question_id": 411,
        "answer_sql": ""
    },
    {
        "question_id": 412,
        "answer_sql": ""
    },
    {
        "question_id": 413,
        "answer_sql": "SELECT COUNT(*) FROM cards JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.rarity = 'rare' AND rulings.date = '2009-01-10';"
    },
    {
        "question_id": 414,
        "answer_sql": "SELECT s.code, s.name, st.translation FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE s.baseSetSize = 180 AND s.block = 'Ravnica';"
    },
    {
        "question_id": 415,
        "answer_sql": ""
    },
    {
        "question_id": 416,
        "answer_sql": ""
    },
    {
        "question_id": 417,
        "answer_sql": ""
    },
    {
        "question_id": 418,
        "answer_sql": "SELECT availability FROM cards WHERE artist = 'Daren Bader';"
    },
    {
        "question_id": 419,
        "answer_sql": "SELECT COUNT(*) FROM cards WHERE borderColor = 'borderless' AND edhrecRank > 12000;"
    },
    {
        "question_id": 420,
        "answer_sql": "SELECT COUNT(*) FROM cards WHERE isOversized = 1 AND isReprint = 1 AND isPromo = 1;"
    },
    {
        "question_id": 421,
        "answer_sql": "SELECT DISTINCT c.name FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.power IS NULL OR c.power = '*' AND l.status = 'legal' AND l.format = 'arena' ORDER BY c.name ASC LIMIT 3;"
    },
    {
        "question_id": 422,
        "answer_sql": "SELECT language FROM foreign_data WHERE multiverseid = 149934;"
    },
    {
        "question_id": 423,
        "answer_sql": "SELECT cardKingdomFoilId, cardKingdomId FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL ORDER BY cardKingdomFoilId ASC LIMIT 3;"
    },
    {
        "question_id": 424,
        "answer_sql": ""
    },
    {
        "question_id": 425,
        "answer_sql": "SELECT id FROM cards WHERE faceName IS NULL AND subtypes LIKE '%Angel%' AND subtypes LIKE '%Wizard%';"
    },
    {
        "question_id": 426,
        "answer_sql": "SELECT s.name FROM sets s WHERE s.mtgoCode IS NULL OR s.mtgoCode = '' ORDER BY s.name ASC LIMIT 3;"
    },
    {
        "question_id": 427,
        "answer_sql": "SELECT DISTINCT language FROM set_translations WHERE setCode = 'ARC';"
    },
    {
        "question_id": 428,
        "answer_sql": ""
    },
    {
        "question_id": 429,
        "answer_sql": "SELECT s.code, s.type FROM sets s WHERE s.id = 206;"
    },
    {
        "question_id": 430,
        "answer_sql": "SELECT s.id, s.code, s.name FROM sets s JOIN set_translations st ON s.code = st.setCode JOIN ( SELECT setCode FROM set_translations WHERE language = 'Italian' ) italian_sets ON s.code = italian_sets.setCode WHERE s.block = 'Shadowmoor' ORDER BY s.name ASC LIMIT 2;"
    },
    {
        "question_id": 431,
        "answer_sql": ""
    },
    {
        "question_id": 432,
        "answer_sql": "SELECT s.code, s.name, s.baseSetSize FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.language = 'Russian' ORDER BY s.baseSetSize DESC LIMIT 1;"
    },
    {
        "question_id": 433,
        "answer_sql": ""
    },
    {
        "question_id": 434,
        "answer_sql": ""
    },
    {
        "question_id": 435,
        "answer_sql": ""
    },
    {
        "question_id": 436,
        "answer_sql": "SELECT id FROM cards WHERE frameEffects = 'extendedart';"
    },
    {
        "question_id": 437,
        "answer_sql": "SELECT name FROM cards WHERE borderColor = 'black' AND isFullArt = 1;"
    },
    {
        "question_id": 438,
        "answer_sql": ""
    },
    {
        "question_id": 439,
        "answer_sql": "SELECT name FROM sets WHERE code = 'ALL';"
    },
    {
        "question_id": 440,
        "answer_sql": "SELECT language FROM foreign_data WHERE name = 'A Pedra Fellwar';"
    },
    {
        "question_id": 441,
        "answer_sql": "SELECT code FROM sets WHERE releaseDate = '2007-07-13';"
    },
    {
        "question_id": 442,
        "answer_sql": ""
    },
    {
        "question_id": 443,
        "answer_sql": "SELECT code FROM sets WHERE type = 'expansion';"
    },
    {
        "question_id": 444,
        "answer_sql": "SELECT name, types FROM cards WHERE watermark = 'boros';"
    },
    {
        "question_id": 445,
        "answer_sql": "SELECT cards.type, cards.flavorText, cards.watermark FROM cards WHERE cards.watermark = 'colorpie';"
    },
    {
        "question_id": 446,
        "answer_sql": ""
    },
    {
        "question_id": 447,
        "answer_sql": ""
    },
    {
        "question_id": 448,
        "answer_sql": "SELECT name, types FROM cards WHERE watermark = 'abzan';"
    },
    {
        "question_id": 449,
        "answer_sql": "SELECT cards.type, cards.watermark FROM cards WHERE cards.watermark = 'azorius';"
    },
    {
        "question_id": 450,
        "answer_sql": "SELECT COUNT(*) FROM cards WHERE artist = 'Aaron Miller' AND (cardKingdomFoilId = cardKingdomId AND cardKingdomId IS NOT NULL);"
    },
    {
        "question_id": 451,
        "answer_sql": "SELECT COUNT(*) FROM cards WHERE availability LIKE '%paper%' AND hand LIKE '+%';"
    },
    {
        "question_id": 452,
        "answer_sql": ""
    },
    {
        "question_id": 453,
        "answer_sql": ""
    },
    {
        "question_id": 454,
        "answer_sql": "SELECT COUNT(*) FROM cards WHERE borderColor = 'white' AND (power = '*' OR power IS NULL);"
    },
    {
        "question_id": 455,
        "answer_sql": "SELECT name FROM cards WHERE isPromo = 1 AND side IS NOT NULL;"
    },
    {
        "question_id": 456,
        "answer_sql": "SELECT DISTINCT types FROM cards WHERE name = 'Molimo, Maro-Sorcerer';"
    },
    {
        "question_id": 457,
        "answer_sql": "SELECT DISTINCT purchaseUrls FROM cards WHERE promoTypes = 'bundle';"
    },
    {
        "question_id": 458,
        "answer_sql": "SELECT COUNT(DISTINCT artist) FROM cards WHERE borderColor = 'black' AND availability LIKE '%arena,mtgo%';"
    },
    {
        "question_id": 459,
        "answer_sql": "SELECT name, convertedManaCost FROM cards WHERE name = 'Serra Angel' OR name = 'Shrine Keeper' ORDER BY convertedManaCost DESC LIMIT 1;"
    },
    {
        "question_id": 460,
        "answer_sql": "SELECT artist FROM cards WHERE flavorName = 'Battra, Dark Destroyer';"
    },
    {
        "question_id": 461,
        "answer_sql": "SELECT name FROM cards WHERE frameVersion = '2003' ORDER BY convertedManaCost DESC LIMIT 3;"
    },
    {
        "question_id": 462,
        "answer_sql": ""
    },
    {
        "question_id": 463,
        "answer_sql": "SELECT COUNT(*) FROM set_translations WHERE setCode IN ( SELECT code FROM sets WHERE name = 'Angel of Mercy' );"
    },
    {
        "question_id": 464,
        "answer_sql": ""
    },
    {
        "question_id": 465,
        "answer_sql": "SELECT EXISTS ( SELECT 1 FROM cards c JOIN set_translations st ON c.setCode = st.setCode WHERE c.name = 'Ancestor''s Chosen' AND st.language = 'Korean' ) AS has_korean_version;"
    },
    {
        "question_id": 466,
        "answer_sql": "SELECT COUNT(*) FROM cards JOIN set_translations ON cards.setCode = set_translations.setCode JOIN sets ON set_translations.setCode = sets.code WHERE set_translations.translation = 'Hauptset Zehnte Edition' AND cards.artist = 'Adam Rex';"
    },
    {
        "question_id": 467,
        "answer_sql": ""
    },
    {
        "question_id": 468,
        "answer_sql": ""
    },
    {
        "question_id": 469,
        "answer_sql": ""
    },
    {
        "question_id": 470,
        "answer_sql": "SELECT s.releaseDate FROM sets s JOIN cards c ON s.code = c.setCode WHERE c.name = 'Ancestor''s Chosen';"
    },
    {
        "question_id": 471,
        "answer_sql": ""
    },
    {
        "question_id": 472,
        "answer_sql": "SELECT COUNT(*) FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE sets.block = 'Ice Age' AND set_translations.language = 'Italian';"
    },
    {
        "question_id": 473,
        "answer_sql": "SELECT COUNT(*) > 0 FROM cards JOIN sets ON cards.setCode = sets.code WHERE cards.name = 'Adarkar Valkyrie' AND sets.isForeignOnly = 1;"
    },
    {
        "question_id": 474,
        "answer_sql": "SELECT COUNT(*) FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.language = 'Italian' AND st.translation IS NOT NULL AND s.baseSetSize < 10;"
    },
    {
        "question_id": 475,
        "answer_sql": "SELECT COUNT(*) FROM cards WHERE name = 'Coldsnap' AND borderColor = 'black';"
    },
    {
        "question_id": 476,
        "answer_sql": ""
    },
    {
        "question_id": 477,
        "answer_sql": ""
    },
    {
        "question_id": 478,
        "answer_sql": ""
    },
    {
        "question_id": 479,
        "answer_sql": "SELECT COUNT(*) FROM cards JOIN sets ON cards.setCode = sets.code WHERE cards.convertedManaCost > 5 AND cards.power IN ('*', NULL) AND sets.name = 'Coldsnap';"
    },
    {
        "question_id": 480,
        "answer_sql": ""
    },
    {
        "question_id": 481,
        "answer_sql": "SELECT DISTINCT language FROM foreign_data WHERE uuid IN ( SELECT uuid FROM cards WHERE name = 'Ancestor''s Chosen' AND flavorText IS NOT NULL ) AND flavorText IS NOT NULL;"
    },
    {
        "question_id": 482,
        "answer_sql": "SELECT type FROM cards JOIN set_translations ON cards.setCode = set_translations.setCode WHERE cards.name = 'Ancestor''s Chosen' AND set_translations.language = 'German'"
    },
    {
        "question_id": 483,
        "answer_sql": "SELECT r.text FROM rulings r JOIN cards c ON r.uuid = c.uuid JOIN sets s ON c.setCode = s.code JOIN set_translations st ON s.code = st.setCode AND st.language = 'Italian' WHERE s.name = 'Coldsnap' AND r.text IS NOT NULL;"
    },
    {
        "question_id": 484,
        "answer_sql": ""
    },
    {
        "question_id": 485,
        "answer_sql": "SELECT date FROM rulings WHERE uuid IN ( SELECT uuid FROM cards WHERE name = 'Reminisce' );"
    },
    {
        "question_id": 486,
        "answer_sql": ""
    },
    {
        "question_id": 487,
        "answer_sql": ""
    },
    {
        "question_id": 488,
        "answer_sql": "SELECT code FROM sets WHERE releaseDate = '2017-07-14';"
    },
    {
        "question_id": 489,
        "answer_sql": "SELECT keyruneCode FROM sets WHERE code = 'PKHC';"
    },
    {
        "question_id": 490,
        "answer_sql": "SELECT mcmId FROM sets WHERE code = 'SS2';"
    },
    {
        "question_id": 491,
        "answer_sql": "SELECT s.mcmName FROM sets s WHERE s.releaseDate = '2017-06-09';"
    },
    {
        "question_id": 492,
        "answer_sql": ""
    },
    {
        "question_id": 493,
        "answer_sql": "SELECT code FROM sets WHERE name = 'Commander 2014 Oversized';"
    },
    {
        "question_id": 494,
        "answer_sql": ""
    },
    {
        "question_id": 495,
        "answer_sql": "SELECT s.releaseDate FROM sets s JOIN cards c ON s.code = c.setCode WHERE c.name = 'Evacuation';"
    },
    {
        "question_id": 496,
        "answer_sql": "SELECT baseSetSize FROM sets WHERE code = (SELECT code FROM set_translations WHERE translation = 'Rinascita di Alara');"
    },
    {
        "question_id": 497,
        "answer_sql": "SELECT type FROM sets WHERE code = (SELECT code FROM set_translations WHERE translation = 'Huiti\u00e8me \u00e9dition');"
    },
    {
        "question_id": 498,
        "answer_sql": ""
    },
    {
        "question_id": 499,
        "answer_sql": "SELECT COUNT(*) FROM set_translations WHERE setCode = (SELECT code FROM sets WHERE name = 'Salvat 2011');"
    },
    {
        "question_id": 500,
        "answer_sql": "SELECT s.name FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.language = 'Japanese' AND EXISTS ( SELECT 1 FROM cards c WHERE c.name = 'Fellwar Stone' AND c.uuid IN ( SELECT uuid FROM legalities l WHERE l.status = 'Legal' ) );"
    },
    {
        "question_id": 501,
        "answer_sql": ""
    },
    {
        "question_id": 502,
        "answer_sql": "SELECT releaseDate FROM sets WHERE code = (SELECT code FROM set_translations WHERE translation = 'Ola de fr\u00edo');"
    },
    {
        "question_id": 503,
        "answer_sql": "SELECT s.type FROM sets s JOIN cards c ON s.code = c.setCode WHERE c.name = 'Samite Pilgrim';"
    },
    {
        "question_id": 504,
        "answer_sql": "SELECT COUNT(*) FROM cards c JOIN sets s ON c.setCode = s.code WHERE s.name = 'World Championship Decks 2004' AND c.convertedManaCost = 3;"
    },
    {
        "question_id": 505,
        "answer_sql": "SELECT translation FROM set_translations WHERE language = 'Chinese Simplified' AND setCode = (SELECT code FROM sets WHERE name = 'Mirrodin');"
    },
    {
        "question_id": 506,
        "answer_sql": ""
    },
    {
        "question_id": 507,
        "answer_sql": ""
    },
    {
        "question_id": 508,
        "answer_sql": "SELECT DISTINCT availability FROM cards WHERE artist = 'Aleksi Briclot' AND isTextless = 1;"
    },
    {
        "question_id": 509,
        "answer_sql": "SELECT id FROM sets WHERE baseSetSize = (SELECT MAX(baseSetSize) FROM sets);"
    },
    {
        "question_id": 510,
        "answer_sql": "SELECT artist FROM cards WHERE faceName IS NULL OR faceName IS NULL AND convertedManaCost IS NOT NULL ORDER BY convertedManaCost DESC LIMIT 1;"
    },
    {
        "question_id": 511,
        "answer_sql": "SELECT MAX(frameEffects) FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL;"
    },
    {
        "question_id": 512,
        "answer_sql": "SELECT COUNT(*) FROM cards WHERE power IS NULL OR power = '*' AND hasFoil = 0 AND duelDeck = 'a';"
    },
    {
        "question_id": 513,
        "answer_sql": ""
    },
    {
        "question_id": 514,
        "answer_sql": "SELECT cards.name, cards.manaCost FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.format = 'duel' ORDER BY CAST(cards.manaCost AS REAL) DESC LIMIT 10;"
    },
    {
        "question_id": 515,
        "answer_sql": ""
    },
    {
        "question_id": 516,
        "answer_sql": "SELECT COUNT(*) FROM cards WHERE artist = 'Volkan Baga' AND EXISTS (SELECT 1 FROM foreign_data WHERE cards.uuid = foreign_data.uuid AND language = 'French');"
    },
    {
        "question_id": 517,
        "answer_sql": "SELECT COUNT(*) FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.rarity = 'rare' AND c.types = 'Enchantment' AND c.name = 'Abundance' AND l.status = 'Legal';"
    },
    {
        "question_id": 518,
        "answer_sql": ""
    },
    {
        "question_id": 519,
        "answer_sql": ""
    },
    {
        "question_id": 520,
        "answer_sql": ""
    },
    {
        "question_id": 521,
        "answer_sql": ""
    },
    {
        "question_id": 522,
        "answer_sql": ""
    },
    {
        "question_id": 523,
        "answer_sql": ""
    },
    {
        "question_id": 524,
        "answer_sql": "SELECT DISTINCT artist FROM cards WHERE BorderColor = 'black' AND availability = 'arena';"
    },
    {
        "question_id": 525,
        "answer_sql": ""
    },
    {
        "question_id": 526,
        "answer_sql": "SELECT COUNT(*) FROM cards WHERE artist = 'Matthew D. Wilson' AND availability = 'paper';"
    },
    {
        "question_id": 527,
        "answer_sql": ""
    },
    {
        "question_id": 528,
        "answer_sql": ""
    },
    {
        "question_id": 529,
        "answer_sql": "SELECT s.name FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.language NOT LIKE '%Japanese%' AND st.language = 'Korean';"
    },
    {
        "question_id": 530,
        "answer_sql": ""
    },
    {
        "question_id": 531,
        "answer_sql": "SELECT DisplayName, MAX(Reputation) AS MaxReputation FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') GROUP BY DisplayName HAVING MAX(Reputation) = (SELECT MAX(Reputation) FROM users WHERE DisplayName = 'Harlan') OR MAX(Reputation) = (SELECT MAX(Reputation) FROM users WHERE DisplayName = 'Jarrod Dixon');"
    },
    {
        "question_id": 532,
        "answer_sql": ""
    },
    {
        "question_id": 533,
        "answer_sql": "SELECT COUNT(*) FROM users WHERE LastAccessDate > '2014-09-01 00:00:00';"
    },
    {
        "question_id": 534,
        "answer_sql": "SELECT Users.DisplayName FROM Users WHERE Users.Views = (SELECT MAX(Views) FROM Users);"
    },
    {
        "question_id": 535,
        "answer_sql": "SELECT COUNT(*) FROM users WHERE UpVotes > 100 AND DownVotes > 1;"
    },
    {
        "question_id": 536,
        "answer_sql": "SELECT COUNT(*) FROM users WHERE Views > 10 AND STRFTIME('%Y', CreationDate) > '2013';"
    },
    {
        "question_id": 537,
        "answer_sql": "SELECT COUNT(*) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie');"
    },
    {
        "question_id": 538,
        "answer_sql": "SELECT p.Title FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'csgillespie';"
    },
    {
        "question_id": 539,
        "answer_sql": ""
    },
    {
        "question_id": 540,
        "answer_sql": "SELECT p.Title FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'csgillespie' ORDER BY p.ViewCount DESC LIMIT 1;"
    },
    {
        "question_id": 541,
        "answer_sql": "SELECT u.DisplayName FROM users u INNER JOIN posts p ON u.Id = p.OwnerUserId WHERE p.FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts);"
    },
    {
        "question_id": 542,
        "answer_sql": ""
    },
    {
        "question_id": 543,
        "answer_sql": "SELECT MAX(posts.AnswerCount) FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'csgillespie';"
    },
    {
        "question_id": 544,
        "answer_sql": "SELECT LastEditorDisplayName FROM posts WHERE Title = 'Examples for teaching: Correlation does not mean causation';"
    },
    {
        "question_id": 545,
        "answer_sql": "SELECT COUNT(*) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie') AND ParentId IS NULL;"
    },
    {
        "question_id": 546,
        "answer_sql": "SELECT DISTINCT u.DisplayName FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE p.ClosedDate IS NOT NULL;"
    },
    {
        "question_id": 547,
        "answer_sql": "SELECT COUNT(*) FROM posts WHERE OwnerUserId IN (SELECT Id FROM users WHERE Age > 65) AND Score >= 20;"
    },
    {
        "question_id": 548,
        "answer_sql": "SELECT u.Location FROM users u INNER JOIN posts p ON u.Id = p.OwnerUserId WHERE p.Title = 'Eliciting priors from experts';"
    },
    {
        "question_id": 549,
        "answer_sql": "SELECT p.Body FROM posts p JOIN tags t ON p.Id = t.ExcerptPostId WHERE t.TagName = 'bayesian';"
    },
    {
        "question_id": 550,
        "answer_sql": "SELECT p.Body FROM posts p JOIN tags t ON p.Id = t.ExcerptPostId WHERE t.Count = (SELECT MAX(Count) FROM tags);"
    },
    {
        "question_id": 551,
        "answer_sql": "SELECT COUNT(*) FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie');"
    },
    {
        "question_id": 552,
        "answer_sql": "SELECT Name FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie');"
    },
    {
        "question_id": 553,
        "answer_sql": ""
    },
    {
        "question_id": 554,
        "answer_sql": "SELECT u.DisplayName FROM users u JOIN badges b ON u.Id = b.UserId GROUP BY u.Id ORDER BY COUNT(b.Id) DESC LIMIT 1;"
    },
    {
        "question_id": 555,
        "answer_sql": "SELECT AVG(posts.Score) FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'csgillespie';"
    },
    {
        "question_id": 556,
        "answer_sql": ""
    },
    {
        "question_id": 557,
        "answer_sql": "SELECT (COUNT(DISTINCT CASE WHEN u.Age > 65 THEN p.Id END) * 100) / COUNT(p.Id) FROM posts p INNER JOIN users u ON p.OwnerUserId = u.Id WHERE p.Score > 20;"
    },
    {
        "question_id": 558,
        "answer_sql": "SELECT COUNT(*) FROM votes WHERE UserId = 58 AND CreationDate = '2010-07-19';"
    },
    {
        "question_id": 559,
        "answer_sql": "SELECT MAX(CreationDate) FROM votes;"
    },
    {
        "question_id": 560,
        "answer_sql": "SELECT COUNT(*) FROM badges WHERE Name = 'Revival';"
    },
    {
        "question_id": 561,
        "answer_sql": "SELECT p.Title FROM posts p JOIN ( SELECT PostId FROM comments WHERE Score = (SELECT MAX(Score) FROM comments) ) c ON p.Id = c.PostId;"
    },
    {
        "question_id": 562,
        "answer_sql": "SELECT COUNT(comments.Id) FROM posts JOIN comments ON posts.Id = comments.PostId WHERE posts.ViewCount = 1910;"
    },
    {
        "question_id": 563,
        "answer_sql": ""
    },
    {
        "question_id": 564,
        "answer_sql": ""
    },
    {
        "question_id": 565,
        "answer_sql": "SELECT p.Title, p.LastEditDate, p.ClosedDate FROM posts p JOIN comments c ON p.Id = c.PostId WHERE c.UserId = 23853 AND c.CreationDate = '2013-07-12 09:08:18.0' LIMIT 1;"
    },
    {
        "question_id": 566,
        "answer_sql": "SELECT users.Reputation FROM users INNER JOIN posts ON users.Id = posts.OwnerUserId WHERE posts.Id = 65041;"
    },
    {
        "question_id": 567,
        "answer_sql": "SELECT COUNT(*) FROM posts WHERE OwnerUserId IN ( SELECT Id FROM users WHERE DisplayName = 'Tiago Pasqualini' );"
    },
    {
        "question_id": 568,
        "answer_sql": "SELECT u.DisplayName FROM users u INNER JOIN votes v ON u.Id = v.UserId WHERE v.Id = 6347;"
    },
    {
        "question_id": 569,
        "answer_sql": "SELECT COUNT(*) FROM votes WHERE PostId IN (SELECT Id FROM posts WHERE Title LIKE '%data visualization%');"
    },
    {
        "question_id": 570,
        "answer_sql": "SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'DatEpicCoderGuyWhoPrograms';"
    },
    {
        "question_id": 571,
        "answer_sql": "SELECT CAST(COUNT(posts.Id) AS REAL) / COUNT(votes.Id) AS TimesOfPostsToVotes FROM posts JOIN users ON posts.OwnerUserId = users.Id JOIN votes ON posts.OwnerUserId = votes.UserId WHERE users.Id = 24;"
    },
    {
        "question_id": 572,
        "answer_sql": "SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer';"
    },
    {
        "question_id": 573,
        "answer_sql": "SELECT Text FROM comments WHERE Score = 17;"
    },
    {
        "question_id": 574,
        "answer_sql": "SELECT DisplayName FROM users WHERE WebsiteUrl = 'http://stackoverflow.com';"
    },
    {
        "question_id": 575,
        "answer_sql": "SELECT Name FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'SilentGhost');"
    },
    {
        "question_id": 576,
        "answer_sql": "SELECT u.DisplayName FROM users u INNER JOIN comments c ON u.Id = c.UserId WHERE c.Text = 'thank you user93!';"
    },
    {
        "question_id": 577,
        "answer_sql": "SELECT c.Text FROM comments c JOIN users u ON c.UserId = u.Id WHERE u.DisplayName = 'A Lion';"
    },
    {
        "question_id": 578,
        "answer_sql": "SELECT u.DisplayName, u.Reputation FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.Title = 'Understanding what Dassault iSight is doing?';"
    },
    {
        "question_id": 579,
        "answer_sql": "SELECT c.Text FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.Title = 'How does gentle boosting differ from AdaBoost?';"
    },
    {
        "question_id": 580,
        "answer_sql": "SELECT users.DisplayName FROM users JOIN badges ON users.Id = badges.UserId WHERE badges.Name = 'Necromancer' LIMIT 10;"
    },
    {
        "question_id": 581,
        "answer_sql": ""
    },
    {
        "question_id": 582,
        "answer_sql": "SELECT p.Title FROM posts p JOIN users u ON p.LastEditorUserId = u.Id WHERE u.DisplayName = 'Vebjorn Ljosa';"
    },
    {
        "question_id": 583,
        "answer_sql": "SELECT SUM(p.Score) AS TotalScore, u.WebsiteUrl FROM posts p JOIN users u ON p.LastEditorUserId = u.Id WHERE u.DisplayName = 'Yevgeny';"
    },
    {
        "question_id": 584,
        "answer_sql": "SELECT c.Text FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.Title = 'Why square the difference instead of taking the absolute value in standard deviation?' AND p.LastEditorUserId IN (SELECT DISTINCT UserId FROM postHistory WHERE PostId = (SELECT Id FROM posts WHERE Title = 'Why square the difference instead of taking the absolute value in standard deviation?'));"
    },
    {
        "question_id": 585,
        "answer_sql": "SELECT SUM(votes.BountyAmount) FROM votes JOIN posts ON votes.PostId = posts.Id JOIN (SELECT Id FROM posts WHERE Title LIKE '%data%') AS post ON posts.Id = post.Id;"
    },
    {
        "question_id": 586,
        "answer_sql": "SELECT users.DisplayName FROM users JOIN votes ON users.Id = votes.UserId JOIN posts ON votes.PostId = posts.Id WHERE posts.Title LIKE '%variance%' AND votes.BountyAmount = 50;"
    },
    {
        "question_id": 587,
        "answer_sql": ""
    },
    {
        "question_id": 588,
        "answer_sql": "SELECT COUNT(*) FROM comments WHERE UserId = 13;"
    },
    {
        "question_id": 589,
        "answer_sql": "SELECT Id FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users);"
    },
    {
        "question_id": 590,
        "answer_sql": ""
    },
    {
        "question_id": 591,
        "answer_sql": "SELECT COUNT(*) FROM badges WHERE Name = 'Supporter' AND Date BETWEEN '2011-01-01' AND '2011-12-31';"
    },
    {
        "question_id": 592,
        "answer_sql": "SELECT COUNT(DISTINCT u.Id) FROM users u JOIN badges b ON u.Id = b.UserId GROUP BY u.Id HAVING COUNT(b.Name) > 5;"
    },
    {
        "question_id": 593,
        "answer_sql": "SELECT COUNT(DISTINCT u.Id) FROM users u JOIN badges b1 ON u.Id = b1.UserId AND b1.Name = 'Supporter' JOIN badges b2 ON u.Id = b2.UserId AND b2.Name = 'Teacher' WHERE u.Location = 'New York';"
    },
    {
        "question_id": 594,
        "answer_sql": "SELECT u.DisplayName, u.Reputation FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE p.Id = 1;"
    },
    {
        "question_id": 595,
        "answer_sql": ""
    },
    {
        "question_id": 596,
        "answer_sql": "SELECT u.Id, u.DisplayName, b.Name FROM users u JOIN badges b ON u.Id = b.UserId WHERE u.Id IN ( SELECT UserId FROM comments GROUP BY UserId ORDER BY COUNT(Id) DESC LIMIT 1 );"
    },
    {
        "question_id": 597,
        "answer_sql": "SELECT COUNT(*) FROM users JOIN badges ON users.Id = badges.UserId WHERE badges.Name = 'Teacher' AND users.Location = 'India';"
    },
    {
        "question_id": 598,
        "answer_sql": ""
    },
    {
        "question_id": 599,
        "answer_sql": "SELECT ph.PostHistoryTypeId, COUNT(DISTINCT c.UserId) AS UniqueUsers FROM postHistory ph JOIN posts p ON ph.PostId = p.Id LEFT JOIN comments c ON p.Id = c.PostId WHERE p.Id = 3720 GROUP BY ph.PostHistoryTypeId;"
    },
    {
        "question_id": 600,
        "answer_sql": "SELECT p.Id, p.ViewCount FROM posts p JOIN postLinks pl ON p.Id = pl.PostId WHERE pl.RelatedPostId = 61217;"
    },
    {
        "question_id": 601,
        "answer_sql": ""
    },
    {
        "question_id": 602,
        "answer_sql": "SELECT p.Id AS PostId, u.Id AS UserId FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.Score > 60;"
    },
    {
        "question_id": 603,
        "answer_sql": ""
    },
    {
        "question_id": 604,
        "answer_sql": "SELECT AVG(u.UpVotes) AS AvgUpvotes, AVG(u.Age) AS AvgAge FROM users u JOIN posts p ON u.Id = p.OwnerUserId GROUP BY u.Id HAVING COUNT(p.Id) > 10;"
    },
    {
        "question_id": 605,
        "answer_sql": "SELECT COUNT(DISTINCT u.Id) FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Name = 'Announcer';"
    },
    {
        "question_id": 606,
        "answer_sql": ""
    },
    {
        "question_id": 607,
        "answer_sql": "SELECT COUNT(*) FROM comments WHERE Score > 60;"
    },
    {
        "question_id": 608,
        "answer_sql": "SELECT Text FROM comments WHERE CreationDate = '2010-07-19 19:16:14.0';"
    },
    {
        "question_id": 609,
        "answer_sql": "SELECT COUNT(*) FROM posts WHERE Score = 10;"
    },
    {
        "question_id": 610,
        "answer_sql": "SELECT DISTINCT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Reputation = (SELECT MAX(Reputation) FROM users);"
    },
    {
        "question_id": 611,
        "answer_sql": "SELECT u.Reputation FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Date = '2010-07-19 19:39:08.0';"
    },
    {
        "question_id": 612,
        "answer_sql": "SELECT b.Name FROM badges b INNER JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'Pierre';"
    },
    {
        "question_id": 613,
        "answer_sql": "SELECT b.Date FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Location = 'Rochester, NY';"
    },
    {
        "question_id": 614,
        "answer_sql": "SELECT (COUNT(DISTINCT badges.UserId) * 100) / COUNT(DISTINCT users.Id) AS Percentage FROM badges JOIN users ON badges.UserId = users.Id WHERE badges.Name = 'Teacher';"
    },
    {
        "question_id": 615,
        "answer_sql": "SELECT (COUNT(DISTINCT CASE WHEN u.Age BETWEEN 13 AND 18 THEN u.Id END) * 100) / COUNT(DISTINCT u.Id) AS Percentage FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Name = 'Organizer';"
    },
    {
        "question_id": 616,
        "answer_sql": ""
    },
    {
        "question_id": 617,
        "answer_sql": "SELECT Text FROM comments WHERE CreationDate = '2010-07-19 19:37:33.0' AND PostId IN (SELECT Id FROM posts WHERE CreationDate = '2010-07-19 19:37:33.0');"
    },
    {
        "question_id": 618,
        "answer_sql": "SELECT users.Age FROM users JOIN badges ON users.Id = badges.UserId WHERE users.Location = 'Vienna, Austria';"
    },
    {
        "question_id": 619,
        "answer_sql": "SELECT COUNT(*) FROM badges JOIN users ON badges.UserId = users.Id WHERE badges.Name = 'Supporter' AND users.Age BETWEEN 19 AND 65;"
    },
    {
        "question_id": 620,
        "answer_sql": "SELECT SUM(u.Views) FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Date = '2010-07-19 19:39:08.0';"
    },
    {
        "question_id": 621,
        "answer_sql": "SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Reputation = (SELECT MIN(Reputation) FROM users);"
    },
    {
        "question_id": 622,
        "answer_sql": "SELECT b.Name FROM badges b INNER JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'Sharpie';"
    },
    {
        "question_id": 623,
        "answer_sql": "SELECT COUNT(*) FROM badges JOIN users ON badges.UserId = users.Id WHERE badges.Name = 'Supporter' AND users.Age > 65;"
    },
    {
        "question_id": 624,
        "answer_sql": "SELECT DisplayName FROM users WHERE Id = 30;"
    },
    {
        "question_id": 625,
        "answer_sql": "SELECT COUNT(*) FROM users WHERE Location = 'New York';"
    },
    {
        "question_id": 626,
        "answer_sql": ""
    },
    {
        "question_id": 627,
        "answer_sql": "SELECT COUNT(*) FROM users WHERE Age BETWEEN 19 AND 65;"
    },
    {
        "question_id": 628,
        "answer_sql": "SELECT DisplayName, Views FROM users WHERE Views = (SELECT MAX(Views) FROM users);"
    },
    {
        "question_id": 629,
        "answer_sql": ""
    },
    {
        "question_id": 630,
        "answer_sql": ""
    },
    {
        "question_id": 631,
        "answer_sql": "SELECT COUNT(*) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Daniel Vassallo');"
    },
    {
        "question_id": 632,
        "answer_sql": "SELECT COUNT(*) FROM votes WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'Harlan');"
    },
    {
        "question_id": 633,
        "answer_sql": ""
    },
    {
        "question_id": 634,
        "answer_sql": "SELECT p.OwnerDisplayName, SUM(p.ViewCount) AS TotalViewCount FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE (u.DisplayName = 'Harvey Motulsky' OR u.DisplayName = 'Noah Snyder') GROUP BY p.OwnerDisplayName ORDER BY TotalViewCount DESC LIMIT 1;"
    },
    {
        "question_id": 635,
        "answer_sql": ""
    },
    {
        "question_id": 636,
        "answer_sql": "SELECT COUNT(*) FROM comments c JOIN posts p ON c.PostId = p.Id JOIN users u ON c.UserId = u.Id WHERE u.DisplayName = 'Neil McGuigan' AND c.Score < 60;"
    },
    {
        "question_id": 637,
        "answer_sql": ""
    },
    {
        "question_id": 638,
        "answer_sql": "SELECT u.DisplayName FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Name = 'Organizer';"
    },
    {
        "question_id": 639,
        "answer_sql": ""
    },
    {
        "question_id": 640,
        "answer_sql": "SELECT (SELECT SUM(ViewCount) FROM posts WHERE OwnerDisplayName = 'Mornington') - (SELECT SUM(ViewCount) FROM posts WHERE OwnerDisplayName = 'Amos') AS ViewCountDifference;"
    },
    {
        "question_id": 641,
        "answer_sql": "SELECT COUNT(DISTINCT u.Id) FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Name = 'commentator' AND b.Date BETWEEN '2014-01-01' AND '2014-12-31';"
    },
    {
        "question_id": 642,
        "answer_sql": ""
    },
    {
        "question_id": 643,
        "answer_sql": "SELECT u.DisplayName, u.Age FROM users u WHERE u.Views = (SELECT MAX(Views) FROM users);"
    },
    {
        "question_id": 644,
        "answer_sql": "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Detecting a given face in a database of facial images';"
    },
    {
        "question_id": 645,
        "answer_sql": "SELECT COUNT(*) FROM comments WHERE UserId = 13 AND Score < 60;"
    },
    {
        "question_id": 646,
        "answer_sql": ""
    },
    {
        "question_id": 647,
        "answer_sql": "SELECT Name FROM badges WHERE Date LIKE '2011-%' AND UserId IN (SELECT Id FROM users WHERE Location = 'North Pole');"
    },
    {
        "question_id": 648,
        "answer_sql": "SELECT u.DisplayName, u.WebsiteUrl FROM users u JOIN posts p ON u.Id = p.OwnerUserId JOIN votes v ON p.Id = v.PostId WHERE p.FavoriteCount > 150;"
    },
    {
        "question_id": 649,
        "answer_sql": ""
    },
    {
        "question_id": 650,
        "answer_sql": ""
    },
    {
        "question_id": 651,
        "answer_sql": ""
    },
    {
        "question_id": 652,
        "answer_sql": ""
    },
    {
        "question_id": 653,
        "answer_sql": "SELECT u.DisplayName FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.ViewCount = (SELECT MAX(ViewCount) FROM posts);"
    },
    {
        "question_id": 654,
        "answer_sql": "SELECT u.DisplayName, u.Location FROM users u JOIN posts p ON u.Id = p.OwnerUserId JOIN tags t ON p.Id = t.ExcerptPostId WHERE t.TagName = 'hypothesis-testing';"
    },
    {
        "question_id": 655,
        "answer_sql": "SELECT p.Title, pl.LinkTypeId FROM posts p JOIN postLinks pl ON p.Id = pl.PostId WHERE p.Title = 'What are principal component scores?';"
    },
    {
        "question_id": 656,
        "answer_sql": ""
    },
    {
        "question_id": 657,
        "answer_sql": "SELECT u.DisplayName, u.WebsiteUrl FROM users u JOIN votes v ON u.Id = v.UserId WHERE v.VoteTypeId = 8 ORDER BY v.BountyAmount DESC LIMIT 1;"
    },
    {
        "question_id": 658,
        "answer_sql": "SELECT Title FROM posts WHERE ViewCount = (SELECT MAX(ViewCount) FROM posts) ORDER BY ViewCount DESC LIMIT 5;"
    },
    {
        "question_id": 659,
        "answer_sql": "SELECT COUNT(*) FROM tags WHERE Count BETWEEN 5000 AND 7000;"
    },
    {
        "question_id": 660,
        "answer_sql": ""
    },
    {
        "question_id": 661,
        "answer_sql": "SELECT users.Age FROM users WHERE users.Reputation = (SELECT MAX(Reputation) FROM users);"
    },
    {
        "question_id": 662,
        "answer_sql": ""
    },
    {
        "question_id": 663,
        "answer_sql": "SELECT Id FROM users ORDER BY Age ASC LIMIT 1;"
    },
    {
        "question_id": 664,
        "answer_sql": "SELECT MAX(p.Score) FROM posts p JOIN tags t ON p.Id = t.ExcerptPostId WHERE t.Count = (SELECT MAX(Count) FROM tags);"
    },
    {
        "question_id": 665,
        "answer_sql": ""
    },
    {
        "question_id": 666,
        "answer_sql": "SELECT posts.Id FROM posts JOIN votes ON posts.Id = votes.PostId WHERE votes.UserId = 1465 GROUP BY posts.Id ORDER BY posts.FavoriteCount DESC LIMIT 1;"
    },
    {
        "question_id": 667,
        "answer_sql": "SELECT p.Title FROM posts p JOIN postLinks pl ON p.Id = pl.PostId WHERE pl.CreationDate = (SELECT MIN(CreationDate) FROM postLinks);"
    },
    {
        "question_id": 668,
        "answer_sql": "SELECT u.DisplayName FROM users u JOIN badges b ON u.Id = b.UserId GROUP BY u.Id, u.DisplayName HAVING COUNT(b.Name) = (SELECT MAX(c.count) FROM (SELECT COUNT(Name) AS count FROM badges GROUP BY UserId) c);"
    },
    {
        "question_id": 669,
        "answer_sql": "SELECT MIN(v.CreationDate) FROM votes v JOIN users u ON v.UserId = u.Id WHERE u.DisplayName = 'chl';"
    },
    {
        "question_id": 670,
        "answer_sql": "SELECT MIN(users.CreationDate) FROM users JOIN posts ON users.Id = posts.OwnerUserId WHERE posts.OwnerUserId IN (SELECT Id FROM users ORDER BY Age ASC LIMIT 1)"
    },
    {
        "question_id": 671,
        "answer_sql": "SELECT u.DisplayName FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Name = 'Autobiographer' AND b.Date = (SELECT MIN(Date) FROM badges WHERE Name = 'Autobiographer');"
    },
    {
        "question_id": 672,
        "answer_sql": "SELECT COUNT(*) FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE u.Location = 'United Kingdom' AND p.FavoriteCount >= 4;"
    },
    {
        "question_id": 673,
        "answer_sql": "SELECT AVG(v.PostId) FROM users u INNER JOIN votes v ON u.Id = v.UserId WHERE u.Age = (SELECT MIN(Age) FROM users);"
    },
    {
        "question_id": 674,
        "answer_sql": "SELECT DisplayName FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users);"
    },
    {
        "question_id": 675,
        "answer_sql": "SELECT COUNT(*) FROM users WHERE Reputation > 2000 AND Views > 1000;"
    },
    {
        "question_id": 676,
        "answer_sql": ""
    },
    {
        "question_id": 677,
        "answer_sql": ""
    },
    {
        "question_id": 678,
        "answer_sql": "SELECT p.Id, p.Title FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'Harvey Motulsky' ORDER BY p.ViewCount DESC LIMIT 1;"
    },
    {
        "question_id": 679,
        "answer_sql": "SELECT posts.Id, posts.Title, users.DisplayName FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE posts.Score = (SELECT MAX(Score) FROM posts);"
    },
    {
        "question_id": 680,
        "answer_sql": "SELECT AVG(posts.Score) FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'Stephen Turner';"
    },
    {
        "question_id": 681,
        "answer_sql": ""
    },
    {
        "question_id": 682,
        "answer_sql": ""
    },
    {
        "question_id": 683,
        "answer_sql": ""
    },
    {
        "question_id": 684,
        "answer_sql": ""
    },
    {
        "question_id": 685,
        "answer_sql": ""
    },
    {
        "question_id": 686,
        "answer_sql": "SELECT COUNT(*) FROM posts WHERE ViewCount > (SELECT AVG(ViewCount) FROM posts);"
    },
    {
        "question_id": 687,
        "answer_sql": ""
    },
    {
        "question_id": 688,
        "answer_sql": "SELECT COUNT(*) FROM posts WHERE ViewCount > 35000 AND CommentCount = 0;"
    },
    {
        "question_id": 689,
        "answer_sql": ""
    },
    {
        "question_id": 690,
        "answer_sql": "SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'Emmett' AND b.Date = (SELECT MAX(Date) FROM badges WHERE UserId = u.Id);"
    },
    {
        "question_id": 691,
        "answer_sql": "SELECT COUNT(*) FROM users WHERE Age BETWEEN 19 AND 65 AND UpVotes > 5000;"
    },
    {
        "question_id": 692,
        "answer_sql": "SELECT MAX(T1.Date) - MIN(T2.CreationDate) AS TimeTaken FROM badges AS T1 JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Zolomon';"
    },
    {
        "question_id": 693,
        "answer_sql": "SELECT COUNT(DISTINCT p.Id) AS post_count, COUNT(DISTINCT c.Id) AS comment_count FROM users u JOIN posts p ON u.Id = p.OwnerUserId LEFT JOIN comments c ON p.Id = c.PostId WHERE u.CreationDate = (SELECT MAX(CreationDate) FROM users);"
    },
    {
        "question_id": 694,
        "answer_sql": "SELECT c.Text, u.DisplayName FROM comments c JOIN users u ON c.UserId = u.Id WHERE c.PostId IN ( SELECT p.Id FROM posts p WHERE p.Title = 'Analysing wind data with R' ) AND c.CreationDate = ( SELECT MAX(cc.CreationDate) FROM comments cc WHERE cc.PostId = c.PostId );"
    },
    {
        "question_id": 695,
        "answer_sql": "SELECT COUNT(*) FROM badges WHERE Name = 'Citizen Patrol';"
    },
    {
        "question_id": 696,
        "answer_sql": "SELECT COUNT(*) FROM posts p JOIN tags t ON p.Id = t.ExcerptPostId WHERE t.TagName = 'careers';"
    },
    {
        "question_id": 697,
        "answer_sql": ""
    },
    {
        "question_id": 698,
        "answer_sql": ""
    },
    {
        "question_id": 699,
        "answer_sql": "SELECT CreationDate FROM users WHERE DisplayName = 'IrishStat';"
    },
    {
        "question_id": 700,
        "answer_sql": ""
    },
    {
        "question_id": 701,
        "answer_sql": "SELECT (COUNT(DISTINCT CASE WHEN posts.Score >= 50 THEN posts.Id END) * 100) / COUNT(DISTINCT posts.Id) as percentage FROM posts JOIN users ON users.Id = posts.OwnerUserId WHERE users.Reputation = (SELECT MAX(Reputation) FROM users);"
    },
    {
        "question_id": 702,
        "answer_sql": "SELECT COUNT(*) FROM posts WHERE Score < 20;"
    },
    {
        "question_id": 703,
        "answer_sql": "SELECT COUNT(*) FROM tags WHERE Id < 15 AND Count <= 20;"
    },
    {
        "question_id": 704,
        "answer_sql": "SELECT t.ExcerptPostId, t.WikiPostId FROM tags t WHERE t.TagName = 'sample';"
    },
    {
        "question_id": 705,
        "answer_sql": "SELECT u.Reputation, COUNT(*) as UpVotes FROM users u JOIN comments c ON u.Id = c.UserId WHERE c.Text = 'fine, you win :)' GROUP BY u.Id;"
    },
    {
        "question_id": 706,
        "answer_sql": ""
    },
    {
        "question_id": 707,
        "answer_sql": "SELECT c.Id, c.Score, c.Text FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.ViewCount BETWEEN 100 AND 150 ORDER BY c.Score DESC LIMIT 1;"
    },
    {
        "question_id": 708,
        "answer_sql": ""
    },
    {
        "question_id": 709,
        "answer_sql": "SELECT COUNT(*) FROM comments c JOIN posts p ON c.PostId = p.Id WHERE c.Score = 0 AND p.ViewCount < 5;"
    },
    {
        "question_id": 710,
        "answer_sql": "SELECT COUNT(*) FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.CommentCount = 1 AND c.Score = 0;"
    },
    {
        "question_id": 711,
        "answer_sql": "SELECT COUNT(DISTINCT u.Id) FROM comments c JOIN users u ON c.UserId = u.Id WHERE c.Score = 0 AND u.Age = 40;"
    },
    {
        "question_id": 712,
        "answer_sql": "SELECT p.Id AS PostId, c.Id AS CommentId FROM posts p JOIN comments c ON p.Id = c.PostId WHERE p.Title = 'Group differences on a five point Likert item';"
    },
    {
        "question_id": 713,
        "answer_sql": "SELECT u.Reputation FROM users u JOIN comments c ON u.Id = c.UserId WHERE c.Text = 'R is also lazy evaluated.';"
    },
    {
        "question_id": 714,
        "answer_sql": "SELECT c.Text FROM comments c JOIN users u ON c.UserId = u.Id WHERE u.DisplayName = 'Harvey Motulsky';"
    },
    {
        "question_id": 715,
        "answer_sql": ""
    },
    {
        "question_id": 716,
        "answer_sql": ""
    },
    {
        "question_id": 717,
        "answer_sql": "SELECT sp.power_name FROM superpower sp JOIN hero_power hp ON sp.id = hp.power_id JOIN superhero sh ON hp.hero_id = sh.id WHERE sh.superhero_name = '3-D Man';"
    },
    {
        "question_id": 718,
        "answer_sql": "SELECT COUNT(*) FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Super Strength';"
    },
    {
        "question_id": 719,
        "answer_sql": "SELECT COUNT(*) FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Super Strength' AND s.height_cm > 200;"
    },
    {
        "question_id": 720,
        "answer_sql": "SELECT full_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id GROUP BY superhero.id HAVING COUNT(hero_power.power_id) > 15;"
    },
    {
        "question_id": 721,
        "answer_sql": "SELECT COUNT(*) FROM superhero s JOIN colour c ON s.eye_colour_id = c.id WHERE c.colour = 'Blue';"
    },
    {
        "question_id": 722,
        "answer_sql": "SELECT c.colour FROM colour c JOIN superhero s ON s.skin_colour_id = c.id WHERE s.superhero_name = 'Apocalypse';"
    },
    {
        "question_id": 723,
        "answer_sql": "SELECT COUNT(*) FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE s.eye_colour_id = (SELECT id FROM colour WHERE colour = 'Blue') AND sp.power_name = 'Agility' AND a.attribute_name = 'Agility';"
    },
    {
        "question_id": 724,
        "answer_sql": "SELECT superhero.superhero_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Agility' AND superhero.eye_colour_id = (SELECT colour.id FROM colour WHERE colour.colour = 'Blue') AND superhero.hair_colour_id = (SELECT colour.id FROM colour WHERE colour.colour = 'Blond');"
    },
    {
        "question_id": 725,
        "answer_sql": "SELECT COUNT(*) FROM superhero s JOIN publisher p ON s.publisher_id = p.id WHERE p.publisher_name = 'Marvel Comics';"
    },
    {
        "question_id": 726,
        "answer_sql": "SELECT superhero.full_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics') AND superhero.height_cm = (SELECT MAX(height_cm) FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics'));"
    },
    {
        "question_id": 727,
        "answer_sql": ""
    },
    {
        "question_id": 728,
        "answer_sql": "SELECT COUNT(*) FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE s.publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics') AND s.eye_colour_id = (SELECT id FROM colour WHERE colour = 'Blue');"
    },
    {
        "question_id": 729,
        "answer_sql": "SELECT AVG(height_cm) FROM superhero s INNER JOIN publisher p ON s.publisher_id = p.id WHERE p.publisher_name = 'Marvel Comics';"
    },
    {
        "question_id": 730,
        "answer_sql": "SELECT (SUM(CASE WHEN sp.power_name = 'Super Strength' THEN 1 ELSE 0 END) * 100) / COUNT(sh.id) FROM superhero sh JOIN hero_power hp ON sh.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sh.publisher_id IN ( SELECT publisher_id FROM publisher WHERE publisher_name = 'Marvel Comics' );"
    },
    {
        "question_id": 731,
        "answer_sql": "SELECT COUNT(*) FROM superhero s JOIN publisher p ON s.publisher_id = p.id WHERE p.publisher_name = 'DC Comics';"
    },
    {
        "question_id": 732,
        "answer_sql": ""
    },
    {
        "question_id": 733,
        "answer_sql": "SELECT COUNT(*) FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'Eye Colour' AND s.eye_colour_id = (SELECT id FROM colour WHERE colour = 'Gold') AND s.publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics');"
    },
    {
        "question_id": 734,
        "answer_sql": "SELECT publisher_name FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero_name = 'Blue Beetle II';"
    },
    {
        "question_id": 735,
        "answer_sql": "SELECT COUNT(*) FROM superhero s JOIN colour c ON s.hair_colour_id = c.id WHERE c.colour = 'Blond';"
    },
    {
        "question_id": 736,
        "answer_sql": ""
    },
    {
        "question_id": 737,
        "answer_sql": ""
    },
    {
        "question_id": 738,
        "answer_sql": ""
    },
    {
        "question_id": 739,
        "answer_sql": "SELECT superhero.superhero_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Death Touch';"
    },
    {
        "question_id": 740,
        "answer_sql": "SELECT COUNT(*) FROM superhero h JOIN hero_attribute ha ON h.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id JOIN gender g ON h.gender_id = g.id WHERE a.attribute_name = 'Strength' AND ha.attribute_value = 100 AND g.gender = 'Female';"
    },
    {
        "question_id": 741,
        "answer_sql": "SELECT superhero_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id GROUP BY superhero.id ORDER BY COUNT(hero_power.power_id) DESC LIMIT 1;"
    },
    {
        "question_id": 742,
        "answer_sql": "SELECT COUNT(*) FROM superhero s JOIN race r ON s.race_id = r.id WHERE r.race = 'Vampire';"
    },
    {
        "question_id": 743,
        "answer_sql": "SELECT (SUM(CASE WHEN superhero.alignment_id IN (SELECT id FROM alignment WHERE alignment = 'Bad') THEN 1 ELSE 0 END) * 100) / COUNT(superhero.id) AS percentage, COUNT(superhero.id) AS count_superheroes FROM superhero WHERE superhero.publisher_id IN (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics');"
    },
    {
        "question_id": 744,
        "answer_sql": "SELECT (SELECT COUNT(*) FROM superhero WHERE publisher_id IN (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics')) - (SELECT COUNT(*) FROM superhero WHERE publisher_id IN (SELECT id FROM publisher WHERE publisher_name = 'DC Comics')) AS difference;"
    },
    {
        "question_id": 745,
        "answer_sql": ""
    },
    {
        "question_id": 746,
        "answer_sql": "SELECT AVG(a.attribute_value) FROM hero_attribute a JOIN superhero s ON a.hero_id = s.id;"
    },
    {
        "question_id": 747,
        "answer_sql": "SELECT COUNT(*) FROM superhero WHERE full_name IS NULL;"
    },
    {
        "question_id": 748,
        "answer_sql": "SELECT colour.colour FROM colour JOIN superhero ON colour.id = superhero.eye_colour_id WHERE superhero.id = 75;"
    },
    {
        "question_id": 749,
        "answer_sql": "SELECT sp.power_name FROM superpower sp JOIN hero_power hp ON sp.id = hp.power_id JOIN superhero sh ON hp.hero_id = sh.id WHERE sh.superhero_name = 'Deathlok';"
    },
    {
        "question_id": 750,
        "answer_sql": "SELECT AVG(weight_kg) FROM superhero WHERE gender_id = 2;"
    },
    {
        "question_id": 751,
        "answer_sql": "SELECT sp.power_name FROM superpower sp JOIN hero_power hp ON sp.id = hp.power_id JOIN superhero sh ON hp.hero_id = sh.id JOIN gender g ON sh.gender_id = g.id WHERE g.gender = 'Male' LIMIT 5;"
    },
    {
        "question_id": 752,
        "answer_sql": "SELECT superhero_name FROM superhero WHERE race_id = (SELECT id FROM race WHERE race = 'Alien');"
    },
    {
        "question_id": 753,
        "answer_sql": ""
    },
    {
        "question_id": 754,
        "answer_sql": "SELECT sp.power_name FROM superpower sp JOIN hero_power hp ON sp.id = hp.power_id WHERE hp.hero_id = 56;"
    },
    {
        "question_id": 755,
        "answer_sql": "SELECT full_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.race_id = (SELECT id FROM race WHERE race = 'Demi-God') LIMIT 5;"
    },
    {
        "question_id": 756,
        "answer_sql": "SELECT COUNT(*) FROM superhero WHERE alignment_id = 1;"
    },
    {
        "question_id": 757,
        "answer_sql": ""
    },
    {
        "question_id": 758,
        "answer_sql": ""
    },
    {
        "question_id": 759,
        "answer_sql": "SELECT c.colour FROM colour c JOIN superhero s ON s.eye_colour_id = c.id WHERE s.weight_kg = (SELECT MAX(weight_kg) FROM superhero);"
    },
    {
        "question_id": 760,
        "answer_sql": "SELECT (COUNT(*) * 100) / (SELECT COUNT(*) FROM superhero) AS percentage FROM superhero WHERE height_cm BETWEEN 150 AND 180 AND publisher_id = 13;"
    },
    {
        "question_id": 761,
        "answer_sql": "SELECT s.full_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id WHERE s.gender_id IN (SELECT id FROM gender WHERE gender = 'Male') AND s.weight_kg > (SELECT AVG(weight_kg) * 0.79 FROM superhero)"
    },
    {
        "question_id": 762,
        "answer_sql": "SELECT power_name, COUNT(*) as count FROM hero_power JOIN superpower ON hero_power.power_id = superpower.id GROUP BY power_name ORDER BY count DESC LIMIT 1;"
    },
    {
        "question_id": 763,
        "answer_sql": "SELECT ha.attribute_value FROM hero_attribute ha JOIN superhero sh ON ha.hero_id = sh.id WHERE sh.superhero_name = 'Abomination';"
    },
    {
        "question_id": 764,
        "answer_sql": "SELECT sp.power_name FROM superpower sp JOIN hero_power hp ON sp.id = hp.power_id WHERE hp.hero_id = 1;"
    },
    {
        "question_id": 765,
        "answer_sql": "SELECT COUNT(*) FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'stealth';"
    },
    {
        "question_id": 766,
        "answer_sql": ""
    },
    {
        "question_id": 767,
        "answer_sql": "SELECT AVG(s.id) FROM superhero s LEFT JOIN colour c ON s.skin_colour_id = c.id WHERE c.id != 1;"
    },
    {
        "question_id": 768,
        "answer_sql": "SELECT COUNT(*) FROM superhero s JOIN publisher p ON s.publisher_id = p.id WHERE p.publisher_name = 'Dark Horse Comics';"
    },
    {
        "question_id": 769,
        "answer_sql": ""
    },
    {
        "question_id": 770,
        "answer_sql": "SELECT c.colour FROM colour c JOIN superhero s ON s.eye_colour_id = c.id WHERE s.full_name = 'Abraham Sapien';"
    },
    {
        "question_id": 771,
        "answer_sql": "SELECT s.superhero_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Flight';"
    },
    {
        "question_id": 772,
        "answer_sql": ""
    },
    {
        "question_id": 773,
        "answer_sql": "SELECT superhero.superhero_name, publisher.publisher_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN colour AS hair_colour ON hair_colour.id = superhero.hair_colour_id JOIN colour AS eye_colour ON eye_colour.id = superhero.eye_colour_id JOIN colour AS skin_colour ON skin_colour.id = superhero.skin_colour_id JOIN publisher ON superhero.publisher_id = publisher.id WHERE hair_colour.id = skin_colour.id AND hair_colour.id = eye_colour.id;"
    },
    {
        "question_id": 774,
        "answer_sql": "SELECT race.race FROM superhero JOIN race ON superhero.race_id = race.id WHERE superhero.superhero_name = 'A-Bomb';"
    },
    {
        "question_id": 775,
        "answer_sql": "SELECT (SUM(CASE WHEN s.hair_colour_id IN (SELECT id FROM colour WHERE colour = 'Blue') AND g.gender = 'Female' THEN 1 ELSE 0 END) * 100) / COUNT(g.gender) FROM gender g JOIN superhero s ON g.id = s.gender_id JOIN colour c ON s.hair_colour_id = c.id WHERE c.colour = 'Blue' AND g.gender = 'Female';"
    },
    {
        "question_id": 776,
        "answer_sql": ""
    },
    {
        "question_id": 777,
        "answer_sql": "SELECT gender.gender FROM superhero JOIN gender ON superhero.gender_id = gender.id WHERE superhero.superhero_name = 'Agent 13';"
    },
    {
        "question_id": 778,
        "answer_sql": "SELECT superhero.superhero_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Adaptation';"
    },
    {
        "question_id": 779,
        "answer_sql": "SELECT COUNT(*) FROM hero_power WHERE hero_id = (SELECT id FROM superhero WHERE superhero_name = 'Amazo');"
    },
    {
        "question_id": 780,
        "answer_sql": "SELECT sp.power_name FROM superhero sh JOIN hero_power hp ON sh.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sh.full_name = 'Hunter Zolomon';"
    },
    {
        "question_id": 781,
        "answer_sql": "SELECT superhero.height_cm FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Amber';"
    },
    {
        "question_id": 782,
        "answer_sql": ""
    },
    {
        "question_id": 783,
        "answer_sql": "SELECT c.colour FROM colour c JOIN superhero s ON s.skin_colour_id = c.id WHERE c.colour = 'Gold';"
    },
    {
        "question_id": 784,
        "answer_sql": "SELECT superhero.full_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.race_id IN (SELECT id FROM race WHERE race = 'Vampire');"
    },
    {
        "question_id": 785,
        "answer_sql": "SELECT superhero_name FROM superhero JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.alignment = 'Neutral';"
    },
    {
        "question_id": 786,
        "answer_sql": ""
    },
    {
        "question_id": 787,
        "answer_sql": "SELECT race.race, alignment.alignment FROM superhero JOIN race ON superhero.race_id = race.id JOIN alignment ON superhero.alignment_id = alignment.id WHERE superhero.superhero_name = 'Cameron Hicks';"
    },
    {
        "question_id": 788,
        "answer_sql": "SELECT (SUM(CASE WHEN superhero.gender_id IN (SELECT id FROM gender WHERE gender = 'Female') THEN 1 ELSE 0 END) * 100) / COUNT(DISTINCT superhero.publisher_id) FROM superhero WHERE superhero.publisher_id IN (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics');"
    },
    {
        "question_id": 789,
        "answer_sql": "SELECT AVG(weight_kg) FROM superhero WHERE race_id IN (SELECT id FROM race WHERE race = 'Alien');"
    },
    {
        "question_id": 790,
        "answer_sql": "SELECT SUM(weight_kg) AS weight_difference FROM superhero WHERE full_name = 'Emil Blonsky' - ( SELECT SUM(weight_kg) FROM superhero WHERE full_name = 'Charles Chandler' );"
    },
    {
        "question_id": 791,
        "answer_sql": "SELECT AVG(height_cm) AS average_height FROM superhero;"
    },
    {
        "question_id": 792,
        "answer_sql": "SELECT sp.power_name FROM superhero sh JOIN hero_power hp ON sh.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sh.superhero_name = 'Abomination';"
    },
    {
        "question_id": 793,
        "answer_sql": "SELECT COUNT(*) FROM superhero s JOIN gender g ON s.gender_id = g.id JOIN race r ON s.race_id = r.id WHERE r.race = 'god/eternal' AND g.gender = 'male';"
    },
    {
        "question_id": 794,
        "answer_sql": ""
    },
    {
        "question_id": 795,
        "answer_sql": "SELECT COUNT(*) FROM superhero WHERE alignment_id = 3;"
    },
    {
        "question_id": 796,
        "answer_sql": ""
    },
    {
        "question_id": 797,
        "answer_sql": ""
    },
    {
        "question_id": 798,
        "answer_sql": ""
    },
    {
        "question_id": 799,
        "answer_sql": "SELECT COUNT(*) FROM superhero WHERE publisher_id IS NULL;"
    },
    {
        "question_id": 800,
        "answer_sql": "SELECT (COUNT(*) * 100.0) / (SELECT COUNT(*) FROM superhero) AS percentage FROM superhero WHERE eye_colour_id = (SELECT id FROM colour WHERE colour = 'blue');"
    },
    {
        "question_id": 801,
        "answer_sql": ""
    },
    {
        "question_id": 802,
        "answer_sql": "SELECT superhero_name FROM superhero ORDER BY height_cm DESC LIMIT 1;"
    },
    {
        "question_id": 803,
        "answer_sql": ""
    },
    {
        "question_id": 804,
        "answer_sql": "SELECT superhero_name FROM superhero WHERE id = 294;"
    },
    {
        "question_id": 805,
        "answer_sql": "SELECT full_name FROM superhero WHERE weight_kg IN (0, NULL);"
    },
    {
        "question_id": 806,
        "answer_sql": "SELECT c.colour FROM colour c JOIN superhero s ON s.eye_colour_id = c.id WHERE s.full_name = 'Karen Beecher-Duncan';"
    },
    {
        "question_id": 807,
        "answer_sql": "SELECT sp.power_name FROM superhero sh JOIN hero_power hp ON sh.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sh.full_name = 'Helen Parr';"
    },
    {
        "question_id": 808,
        "answer_sql": ""
    },
    {
        "question_id": 809,
        "answer_sql": "SELECT publisher.publisher_name FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.id = 38;"
    },
    {
        "question_id": 810,
        "answer_sql": "SELECT race.race FROM race JOIN superhero ON race.id = superhero.race_id JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE hero_attribute.attribute_value = (SELECT MAX(attribute_value) FROM hero_attribute);"
    },
    {
        "question_id": 811,
        "answer_sql": "SELECT alignment.alignment, superpower.power_name FROM superhero JOIN alignment ON superhero.alignment_id = alignment.id JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = 'Atom IV';"
    },
    {
        "question_id": 812,
        "answer_sql": "SELECT superhero.full_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Blue' LIMIT 5;"
    },
    {
        "question_id": 813,
        "answer_sql": "SELECT AVG(ha.attribute_value) FROM hero_attribute ha JOIN superhero s ON ha.hero_id = s.id WHERE s.alignment_id = 3;"
    },
    {
        "question_id": 814,
        "answer_sql": "SELECT c.colour FROM colour c JOIN superhero s ON s.skin_colour_id = c.id JOIN hero_attribute ha ON s.id = ha.hero_id WHERE ha.attribute_value = 100;"
    },
    {
        "question_id": 815,
        "answer_sql": "SELECT COUNT(*) FROM superhero s JOIN gender g ON s.gender_id = g.id JOIN alignment a ON s.alignment_id = a.id WHERE g.gender = 'Female' AND a.alignment = 'Good';"
    },
    {
        "question_id": 816,
        "answer_sql": "SELECT superhero_name FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE hero_attribute.attribute_value BETWEEN 75 AND 80;"
    },
    {
        "question_id": 817,
        "answer_sql": ""
    },
    {
        "question_id": 818,
        "answer_sql": "SELECT (SUM(CASE WHEN superhero.gender_id = 2 THEN 1 ELSE 0 END) * 100.0) / COUNT(superhero.id) FROM superhero WHERE superhero.alignment_id = 2;"
    },
    {
        "question_id": 819,
        "answer_sql": "SELECT (SELECT COUNT(*) FROM superhero WHERE weight_kg = 0 AND eye_colour_id = (SELECT id FROM colour WHERE colour = 'blue')) - (SELECT COUNT(*) FROM superhero WHERE weight_kg = 0 AND eye_colour_id = (SELECT id FROM colour WHERE colour = 'no color')) AS difference;"
    },
    {
        "question_id": 820,
        "answer_sql": ""
    },
    {
        "question_id": 821,
        "answer_sql": "SELECT s.power_name FROM superpower s JOIN hero_power h ON s.id = h.power_id JOIN superhero su ON h.hero_id = su.id WHERE su.superhero_name = 'Ajax';"
    },
    {
        "question_id": 822,
        "answer_sql": "SELECT COUNT(*) FROM superhero s JOIN colour c ON s.skin_colour_id = c.id JOIN alignment a ON s.alignment_id = a.id WHERE c.colour = 'Green' AND a.alignment = 'Bad';"
    },
    {
        "question_id": 823,
        "answer_sql": "SELECT COUNT(*) FROM superhero s JOIN gender g ON s.gender_id = g.id JOIN publisher p ON s.publisher_id = p.id WHERE g.gender = 'Female' AND p.publisher_name = 'Marvel Comics';"
    },
    {
        "question_id": 824,
        "answer_sql": "SELECT superhero_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Wind Control' ORDER BY superhero_name ASC;"
    },
    {
        "question_id": 825,
        "answer_sql": "SELECT s.gender_id FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN hero_attribute ha ON s.id = ha.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Phoenix Force';"
    },
    {
        "question_id": 826,
        "answer_sql": "SELECT superhero_name FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'DC Comics') ORDER BY weight_kg DESC LIMIT 1;"
    },
    {
        "question_id": 827,
        "answer_sql": "SELECT AVG(height_cm) AS average_height FROM superhero WHERE race_id NOT IN (SELECT id FROM race WHERE race = 'Human') AND publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Dark Horse Comics');"
    },
    {
        "question_id": 828,
        "answer_sql": ""
    },
    {
        "question_id": 829,
        "answer_sql": "SELECT (SELECT COUNT(*) FROM superhero WHERE publisher_id IN (SELECT id FROM publisher WHERE publisher_name = 'DC Comics')) - (SELECT COUNT(*) FROM superhero WHERE publisher_id IN (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics')) AS difference;"
    },
    {
        "question_id": 830,
        "answer_sql": ""
    },
    {
        "question_id": 831,
        "answer_sql": "SELECT c.colour FROM colour c JOIN superhero s ON s.eye_colour_id = c.id WHERE s.superhero_name = 'Abomination';"
    },
    {
        "question_id": 832,
        "answer_sql": "SELECT superhero_name FROM superhero WHERE height_cm = (SELECT MAX(height_cm) FROM superhero);"
    },
    {
        "question_id": 833,
        "answer_sql": "SELECT superhero_name FROM superhero WHERE full_name = 'Charles Chandler';"
    },
    {
        "question_id": 834,
        "answer_sql": "SELECT (SUM(CASE WHEN superhero.gender_id IN (SELECT id FROM gender WHERE gender = 'Female') THEN 1 ELSE 0 END) * 100.0) / COUNT(superhero.publisher_id) FROM superhero WHERE superhero.publisher_id IN (SELECT id FROM publisher WHERE publisher_name = 'George Lucas');"
    },
    {
        "question_id": 835,
        "answer_sql": "SELECT (SUM(CASE WHEN superhero.alignment_id IN (SELECT id FROM alignment WHERE alignment = 'Good') THEN 1 ELSE 0 END) * 100.0) / COUNT(superhero.publisher_id) FROM superhero WHERE superhero.publisher_id IN (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics');"
    },
    {
        "question_id": 836,
        "answer_sql": "SELECT COUNT(*) FROM superhero WHERE full_name LIKE 'John%';"
    },
    {
        "question_id": 837,
        "answer_sql": "SELECT hero_id FROM hero_attribute WHERE attribute_value = (SELECT MIN(attribute_value) FROM hero_attribute);"
    },
    {
        "question_id": 838,
        "answer_sql": "SELECT full_name FROM superhero WHERE superhero_name = 'Alien';"
    },
    {
        "question_id": 839,
        "answer_sql": ""
    },
    {
        "question_id": 840,
        "answer_sql": "SELECT ha.attribute_value FROM hero_attribute ha JOIN superhero s ON ha.hero_id = s.id WHERE s.superhero_name = 'Aquababy';"
    },
    {
        "question_id": 841,
        "answer_sql": "SELECT superhero.weight_kg, race.race FROM superhero JOIN race ON superhero.race_id = race.id WHERE superhero.id = 40;"
    },
    {
        "question_id": 842,
        "answer_sql": "SELECT AVG(s.height_cm) FROM superhero s JOIN alignment a ON s.alignment_id = a.id WHERE a.alignment = 'neutral';"
    },
    {
        "question_id": 843,
        "answer_sql": "SELECT h.id FROM superhero h JOIN hero_power hp ON h.id = hp.hero_id JOIN hero_attribute ha ON h.id = ha.hero_id JOIN superpower s ON hp.power_id = s.id WHERE s.power_name = 'Intelligence';"
    },
    {
        "question_id": 844,
        "answer_sql": "SELECT c.colour FROM colour c JOIN superhero s ON s.eye_colour_id = c.id WHERE s.superhero_name = 'Blackwulf';"
    },
    {
        "question_id": 845,
        "answer_sql": ""
    },
    {
        "question_id": 846,
        "answer_sql": "SELECT driverRef FROM drivers WHERE driverId IN ( SELECT driverId FROM results WHERE raceId = 18 AND position < 5 )"
    },
    {
        "question_id": 847,
        "answer_sql": "SELECT DISTINCT d.surname FROM drivers d JOIN qualifying q ON d.driverId = q.driverId WHERE q.raceId = 19 AND q.q2 = (SELECT MIN(q2) FROM qualifying WHERE raceId = 19)"
    },
    {
        "question_id": 848,
        "answer_sql": "SELECT DISTINCT year FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.location = 'Shanghai';"
    },
    {
        "question_id": 849,
        "answer_sql": "SELECT url FROM circuits WHERE name = 'Circuit de Barcelona-Catalunya';"
    },
    {
        "question_id": 850,
        "answer_sql": "SELECT DISTINCT r.name FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.country = 'Germany';"
    },
    {
        "question_id": 851,
        "answer_sql": ""
    },
    {
        "question_id": 852,
        "answer_sql": "SELECT COUNT(*) FROM races WHERE year = 2010 AND circuitId NOT IN ( SELECT circuitId FROM circuits WHERE location IN ('Asia', 'Europe') );"
    },
    {
        "question_id": 853,
        "answer_sql": "SELECT DISTINCT r.name FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.country = 'Spain';"
    },
    {
        "question_id": 854,
        "answer_sql": ""
    },
    {
        "question_id": 855,
        "answer_sql": "SELECT races.url FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.name = 'Sepang International Circuit';"
    },
    {
        "question_id": 856,
        "answer_sql": "SELECT time FROM races WHERE circuitId IN (SELECT circuitId FROM circuits WHERE name = 'Sepang International Circuit')"
    },
    {
        "question_id": 857,
        "answer_sql": ""
    },
    {
        "question_id": 858,
        "answer_sql": "SELECT c.nationality FROM constructors c JOIN constructorResults cr ON c.constructorId = cr.constructorId JOIN races r ON r.raceId = cr.raceId WHERE r.raceId = 24 AND cr.points = 1;"
    },
    {
        "question_id": 859,
        "answer_sql": "SELECT q1 FROM qualifying WHERE raceId = 354 AND driverId = (SELECT driverId FROM drivers WHERE forename = 'Bruno' AND surname = 'Senna');"
    },
    {
        "question_id": 860,
        "answer_sql": ""
    },
    {
        "question_id": 861,
        "answer_sql": ""
    },
    {
        "question_id": 862,
        "answer_sql": "SELECT COUNT(DISTINCT d.driverId) FROM drivers d LEFT JOIN results r ON d.driverId = r.driverId WHERE r.raceId IN ( SELECT raceId FROM races WHERE name = 'Bahrain Grand Prix' AND year = 2007 ) AND r.time IS NOT NULL;"
    },
    {
        "question_id": 863,
        "answer_sql": "SELECT year, url FROM seasons WHERE year = (SELECT year FROM races WHERE raceId = 901);"
    },
    {
        "question_id": 864,
        "answer_sql": "SELECT COUNT(DISTINCT drivers.driverId) FROM drivers JOIN results ON drivers.driverId = results.driverId WHERE results.raceId IN ( SELECT races.raceId FROM races WHERE races.date = '2015-11-29' ) AND results.time IS NOT NULL;"
    },
    {
        "question_id": 865,
        "answer_sql": "SELECT drivers.forename, drivers.surname, drivers.dob FROM drivers JOIN results ON drivers.driverId = results.driverId WHERE results.raceId = 592 AND results.time IS NOT NULL ORDER BY drivers.dob ASC LIMIT 1;"
    },
    {
        "question_id": 866,
        "answer_sql": ""
    },
    {
        "question_id": 867,
        "answer_sql": "SELECT d.nationality FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN races ra ON r.raceId = ra.raceId WHERE ra.raceId = 933 AND r.fastestLapSpeed = (SELECT MAX(fastestLapSpeed) FROM results WHERE raceId = 933);"
    },
    {
        "question_id": 868,
        "answer_sql": ""
    },
    {
        "question_id": 869,
        "answer_sql": "SELECT c.url FROM constructors c JOIN constructorResults cr ON c.constructorId = cr.constructorId JOIN races r ON cr.raceId = r.raceId WHERE r.raceId = 9 ORDER BY cr.points DESC LIMIT 1;"
    },
    {
        "question_id": 870,
        "answer_sql": "SELECT q1 FROM qualifying WHERE raceId = 345 AND driverId = (SELECT driverId FROM drivers WHERE forename = 'Lucas' AND surname = 'di Grassi');"
    },
    {
        "question_id": 871,
        "answer_sql": ""
    },
    {
        "question_id": 872,
        "answer_sql": ""
    },
    {
        "question_id": 873,
        "answer_sql": "SELECT time FROM results WHERE raceId = 743 AND driverId = (SELECT driverId FROM drivers WHERE forename = 'Bruce' AND surname = 'McLaren');"
    },
    {
        "question_id": 874,
        "answer_sql": ""
    },
    {
        "question_id": 875,
        "answer_sql": "SELECT year, url FROM seasons WHERE year = (SELECT year FROM races WHERE raceId = 901);"
    },
    {
        "question_id": 876,
        "answer_sql": "SELECT COUNT(DISTINCT driverId) FROM results WHERE raceId IN ( SELECT raceId FROM races WHERE year = 2015 AND date = '2015-11-29' )"
    },
    {
        "question_id": 877,
        "answer_sql": "SELECT drivers.forename, drivers.surname, drivers.dob FROM drivers JOIN results ON results.driverId = drivers.driverId WHERE results.raceId = 872 AND results.position IS NOT NULL ORDER BY drivers.dob LIMIT 1;"
    },
    {
        "question_id": 878,
        "answer_sql": "SELECT d.forename, d.surname FROM drivers d JOIN lapTimes lt ON d.driverId = lt.driverId WHERE lt.raceId = 348 AND lt.time = (SELECT MIN(time) FROM lapTimes WHERE raceId = 348);"
    },
    {
        "question_id": 879,
        "answer_sql": "SELECT d.nationality FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN races rr ON r.raceId = rr.raceId WHERE r.fastestLapSpeed = (SELECT MAX(fastestLapSpeed) FROM results WHERE raceId = 348) AND rr.raceId = 348;"
    },
    {
        "question_id": 880,
        "answer_sql": "SELECT (SELECT MAX(fastestLapSpeed) FROM results WHERE raceId = 854) - (SELECT MAX(fastestLapSpeed) FROM results WHERE raceId = 853) AS speed_difference, (SELECT MAX(fastestLapSpeed) FROM results WHERE raceId = 853) AS fastest_lap_speed_853, ((SELECT MAX(fastestLapSpeed) FROM results WHERE raceId = 854) - (SELECT MAX(fastestLapSpeed) FROM results WHERE raceId = 853)) / (SELECT MAX(fastestLapSpeed) FROM results WHERE raceId = 853) * 100 AS percentage_faster FROM results WHERE raceId = 853;"
    },
    {
        "question_id": 881,
        "answer_sql": "SELECT (COUNT(DISTINCT dr.driverId) * 1.0) / COUNT(DISTINCT dr.driverId) FROM drivers dr INNER JOIN results r ON dr.driverId = r.driverId WHERE r.raceId IN ( SELECT raceId FROM races WHERE year = 1983 AND round = 1 ) AND r.statusId = (SELECT statusId FROM status WHERE status = 'completed');"
    },
    {
        "question_id": 882,
        "answer_sql": "SELECT MIN(year) FROM races WHERE name = 'Singapore Grand Prix';"
    },
    {
        "question_id": 883,
        "answer_sql": "SELECT COUNT(*) AS race_count, name AS race_name FROM races WHERE year = 2005 GROUP BY race_name ORDER BY race_count DESC;"
    },
    {
        "question_id": 884,
        "answer_sql": ""
    },
    {
        "question_id": 885,
        "answer_sql": "SELECT name, date FROM races WHERE year = 1999 AND round = (SELECT MAX(round) FROM races WHERE year = 1999);"
    },
    {
        "question_id": 886,
        "answer_sql": "SELECT year, COUNT(round) as num_races FROM races GROUP BY year ORDER BY num_races DESC LIMIT 1;"
    },
    {
        "question_id": 887,
        "answer_sql": "SELECT DISTINCT r.name FROM races r JOIN seasons s ON r.year = s.year WHERE r.year = 2017 AND s.year != 2000;"
    },
    {
        "question_id": 888,
        "answer_sql": ""
    },
    {
        "question_id": 889,
        "answer_sql": ""
    },
    {
        "question_id": 890,
        "answer_sql": "SELECT COUNT(DISTINCT year) FROM races WHERE name = 'British Grand Prix' AND circuitId IN (SELECT circuitId FROM circuits WHERE name = 'Silverstone');"
    },
    {
        "question_id": 891,
        "answer_sql": "SELECT d.forename, d.surname, ds.position FROM drivers d JOIN driverStandings ds ON d.driverId = ds.driverId WHERE raceId IN ( SELECT raceId FROM races WHERE year = 2010 AND name = 'Singapore Grand Prix' ) ORDER BY ds.position;"
    },
    {
        "question_id": 892,
        "answer_sql": "SELECT d.forename, d.surname, r.points FROM drivers d JOIN results r ON d.driverId = r.driverId WHERE r.points = (SELECT MAX(points) FROM results)"
    },
    {
        "question_id": 893,
        "answer_sql": "SELECT d.forename, d.surname, r.points FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN races r1 ON r.raceId = r1.raceId JOIN seasons s ON r1.year = s.year WHERE s.year = 2017 AND r1.name = 'Chinese Grand Prix' ORDER BY r.points DESC LIMIT 3;"
    },
    {
        "question_id": 894,
        "answer_sql": ""
    },
    {
        "question_id": 895,
        "answer_sql": "SELECT AVG(time) AS average_lap_time FROM lapTimes WHERE raceId IN ( SELECT raceId FROM races WHERE year = 2009 AND name = 'Chinese Grand Prix' ) AND driverId IN ( SELECT driverId FROM drivers WHERE forename = 'Sebastian' AND surname = 'Vettel' );"
    },
    {
        "question_id": 896,
        "answer_sql": ""
    },
    {
        "question_id": 897,
        "answer_sql": ""
    },
    {
        "question_id": 898,
        "answer_sql": ""
    },
    {
        "question_id": 899,
        "answer_sql": "SELECT c.circuitId, c.name FROM circuits c JOIN races r ON c.circuitId = r.circuitId WHERE r.year BETWEEN 1990 AND 2000 GROUP BY c.circuitId, c.name HAVING COUNT(DISTINCT r.raceId) = 4;"
    },
    {
        "question_id": 900,
        "answer_sql": "SELECT c.name, c.location, r.name FROM circuits c JOIN races r ON c.circuitId = r.circuitId WHERE c.country = 'USA' AND r.year = 2006;"
    },
    {
        "question_id": 901,
        "answer_sql": "SELECT r.name AS race_name, c.name AS circuit_name, c.location FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE r.date BETWEEN '2005-09-01' AND '2005-09-30';"
    },
    {
        "question_id": 902,
        "answer_sql": "SELECT r.name FROM races r JOIN results r1 ON r.raceId = r1.raceId JOIN drivers d ON r1.driverId = d.driverId WHERE d.forename = 'Alex' AND d.surname = 'Yoong' AND r1.position < 10;"
    },
    {
        "question_id": 903,
        "answer_sql": "SELECT MAX(points) FROM results WHERE driverId IN (SELECT driverId FROM drivers WHERE forename = 'Michael' AND surname = 'Schumacher') AND raceId IN (SELECT raceId FROM races WHERE circuitId IN (SELECT circuitId FROM circuits WHERE name = 'Sepang International Circuit'));"
    },
    {
        "question_id": 904,
        "answer_sql": ""
    },
    {
        "question_id": 905,
        "answer_sql": ""
    },
    {
        "question_id": 906,
        "answer_sql": ""
    },
    {
        "question_id": 907,
        "answer_sql": "SELECT r.raceId, r.name, r.date, c.country FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE r.year = 2017 ORDER BY r.date;"
    },
    {
        "question_id": 908,
        "answer_sql": ""
    },
    {
        "question_id": 909,
        "answer_sql": ""
    },
    {
        "question_id": 910,
        "answer_sql": ""
    },
    {
        "question_id": 911,
        "answer_sql": "SELECT name, lat FROM circuits WHERE name IN ('Silverstone Circuit', 'Hockenheimring', 'Hungaroring') ORDER BY lat DESC LIMIT 1;"
    },
    {
        "question_id": 912,
        "answer_sql": "SELECT circuitRef FROM circuits WHERE name = 'Marina Bay Street Circuit';"
    },
    {
        "question_id": 913,
        "answer_sql": ""
    },
    {
        "question_id": 914,
        "answer_sql": "SELECT COUNT(*) FROM drivers WHERE code IS NULL;"
    },
    {
        "question_id": 915,
        "answer_sql": "SELECT nationality FROM drivers WHERE dob = (SELECT MIN(dob) FROM drivers);"
    },
    {
        "question_id": 916,
        "answer_sql": ""
    },
    {
        "question_id": 917,
        "answer_sql": "SELECT url FROM drivers WHERE forename = 'Anthony' AND surname = 'Davidson';"
    },
    {
        "question_id": 918,
        "answer_sql": "SELECT driverRef FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton';"
    },
    {
        "question_id": 919,
        "answer_sql": "SELECT c.name FROM circuits c JOIN races r ON r.circuitId = c.circuitId WHERE r.name = 'Spanish Grand Prix' AND r.year = 2009;"
    },
    {
        "question_id": 920,
        "answer_sql": ""
    },
    {
        "question_id": 921,
        "answer_sql": ""
    },
    {
        "question_id": 922,
        "answer_sql": ""
    },
    {
        "question_id": 923,
        "answer_sql": "SELECT COUNT(*) FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.country = 'Italy';"
    },
    {
        "question_id": 924,
        "answer_sql": ""
    },
    {
        "question_id": 925,
        "answer_sql": "SELECT c.url FROM circuits c JOIN races r ON c.circuitId = r.circuitId JOIN seasons s ON r.year = s.year WHERE s.year = 2009 AND c.country = 'Spain'"
    },
    {
        "question_id": 926,
        "answer_sql": "SELECT MIN(results.fastestLapTime) AS fastest_lap_time FROM results WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton');"
    },
    {
        "question_id": 927,
        "answer_sql": "SELECT d.forename, d.surname FROM drivers d JOIN lapTimes lt ON d.driverId = lt.driverId WHERE lt.time = (SELECT MIN(time) FROM lapTimes);"
    },
    {
        "question_id": 928,
        "answer_sql": "SELECT driverRef FROM drivers JOIN results ON drivers.driverId = results.driverId JOIN races ON results.raceId = races.raceId WHERE races.name = 'Australian Grand Prix' AND races.year = 2008 ORDER BY results.position ASC LIMIT 1;"
    },
    {
        "question_id": 929,
        "answer_sql": ""
    },
    {
        "question_id": 930,
        "answer_sql": "SELECT raceId FROM results WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton') ORDER BY rank ASC LIMIT 1;"
    },
    {
        "question_id": 931,
        "answer_sql": ""
    },
    {
        "question_id": 932,
        "answer_sql": ""
    },
    {
        "question_id": 933,
        "answer_sql": ""
    },
    {
        "question_id": 934,
        "answer_sql": "SELECT forename, surname FROM drivers WHERE driverId = (SELECT driverId FROM results WHERE raceId = (SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix') AND grid = 4);"
    },
    {
        "question_id": 935,
        "answer_sql": "SELECT COUNT(DISTINCT drivers.driverId) FROM results JOIN drivers ON results.driverId = drivers.driverId WHERE raceId IN ( SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix' ) AND results.time IS NOT NULL;"
    },
    {
        "question_id": 936,
        "answer_sql": "SELECT MAX(laps.time) AS fastest_lap FROM lapTimes AS laps JOIN races ON laps.raceId = races.raceId JOIN drivers ON laps.driverId = drivers.driverId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND races.name = 'Australian Grand Prix 2008';"
    },
    {
        "question_id": 937,
        "answer_sql": "SELECT r.time FROM results r JOIN races r1 ON r.raceId = r1.raceId JOIN seasons s ON r1.year = s.year WHERE s.year = 2008 AND r1.name = 'Australian Grand Prix' AND r.position = 2;"
    },
    {
        "question_id": 938,
        "answer_sql": ""
    },
    {
        "question_id": 939,
        "answer_sql": "SELECT COUNT(*) FROM drivers WHERE nationality = 'American' AND driverId IN ( SELECT driverId FROM results WHERE raceId IN ( SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix' ) );"
    },
    {
        "question_id": 940,
        "answer_sql": "SELECT COUNT(DISTINCT drivers.driverId) FROM drivers JOIN results ON drivers.driverId = results.driverId JOIN races ON results.raceId = races.raceId WHERE races.name = '2008 Australian Grand Prix' AND results.time IS NOT NULL;"
    },
    {
        "question_id": 941,
        "answer_sql": "SELECT SUM(points) FROM results WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton');"
    },
    {
        "question_id": 942,
        "answer_sql": "SELECT AVG(fastestLapTime) AS average_fastest_lap_time FROM results WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton');"
    },
    {
        "question_id": 943,
        "answer_sql": "SELECT COUNT(DISTINCT r.raceId) / COUNT(r.raceId) AS rate FROM races r JOIN results rr ON r.raceId = rr.raceId WHERE r.name = '2008 Australian Grand Prix' AND rr.time IS NOT NULL;"
    },
    {
        "question_id": 944,
        "answer_sql": ""
    },
    {
        "question_id": 945,
        "answer_sql": "SELECT COUNT(*) FROM circuits WHERE location = 'Melbourne' AND country = 'Australia';"
    },
    {
        "question_id": 946,
        "answer_sql": "SELECT lat, lng FROM circuits WHERE country = 'USA';"
    },
    {
        "question_id": 947,
        "answer_sql": "SELECT COUNT(*) FROM drivers WHERE nationality = 'British' AND dob > 1980;"
    },
    {
        "question_id": 948,
        "answer_sql": ""
    },
    {
        "question_id": 949,
        "answer_sql": "SELECT c.name AS constructor_name, MAX(cs.points) AS highest_points FROM constructors c JOIN constructorResults cr ON c.constructorId = cr.constructorId JOIN constructorStandings cs ON cs.constructorId = c.constructorId GROUP BY c.constructorId ORDER BY highest_points DESC LIMIT 1;"
    },
    {
        "question_id": 950,
        "answer_sql": "SELECT c.name FROM constructors c JOIN constructorResults cr ON c.constructorId = cr.constructorId JOIN races r ON r.raceId = cr.raceId WHERE r.raceId = 291 AND cr.points = 0;"
    },
    {
        "question_id": 951,
        "answer_sql": "SELECT COUNT(DISTINCT c.constructorId) FROM constructors c JOIN constructorResults cr ON c.constructorId = cr.constructorId JOIN races r ON cr.raceId = r.raceId WHERE c.nationality = 'Japanese' AND r.raceId IN (SELECT raceId FROM races GROUP BY raceId HAVING COUNT(raceId) = 2) AND cr.points = 0;"
    },
    {
        "question_id": 952,
        "answer_sql": "SELECT DISTINCT c.name FROM constructors c JOIN constructorStandings cs ON c.constructorId = cs.constructorId WHERE cs.position = 1;"
    },
    {
        "question_id": 953,
        "answer_sql": "SELECT COUNT(*) FROM constructors WHERE nationality = 'French' AND EXISTS ( SELECT 1 FROM lapTimes WHERE lap > 50 AND lapTimes.driverId IN ( SELECT driverId FROM drivers WHERE drivers.nationality = 'French' ) );"
    },
    {
        "question_id": 954,
        "answer_sql": ""
    },
    {
        "question_id": 955,
        "answer_sql": ""
    },
    {
        "question_id": 956,
        "answer_sql": "SELECT forename, surname FROM drivers WHERE dob > 1975 AND (SELECT COUNT(*) FROM driverStandings WHERE driverId = drivers.driverId AND position = 2) > 0;"
    },
    {
        "question_id": 957,
        "answer_sql": "SELECT COUNT(DISTINCT drivers.driverId) FROM drivers JOIN results ON drivers.driverId = results.driverId WHERE drivers.nationality = 'Italian' AND results.time IS NULL;"
    },
    {
        "question_id": 958,
        "answer_sql": "SELECT d.forename, d.surname FROM drivers d JOIN ( SELECT raceId, MIN(time) AS min_time FROM lapTimes GROUP BY raceId ) lt ON d.driverId = lt.raceId AND lt.min_time = ( SELECT MIN(time) FROM lapTimes WHERE raceId = lt.raceId ) ORDER BY lt.min_time LIMIT 1;"
    },
    {
        "question_id": 959,
        "answer_sql": ""
    },
    {
        "question_id": 960,
        "answer_sql": "SELECT AVG(fastestLapSpeed) FROM results WHERE raceId IN ( SELECT raceId FROM races WHERE name = 'Spanish Grand Prix' AND year = 2009 ) AND fastestLapSpeed IS NOT NULL;"
    },
    {
        "question_id": 961,
        "answer_sql": "SELECT r.name, r.year FROM races r JOIN results rj ON r.raceId = rj.raceId WHERE rj.milliseconds = (SELECT MIN(milliseconds) FROM results WHERE milliseconds IS NOT NULL)"
    },
    {
        "question_id": 962,
        "answer_sql": "SELECT (COUNT(DISTINCT dr.driverId) * 100) / COUNT(DISTINCT dr.driverId) FROM drivers dr JOIN results r ON dr.driverId = r.driverId WHERE r.raceId IN (SELECT raceId FROM races WHERE year BETWEEN 2000 AND 2005) AND dr.dob < 1985 AND r.laps > 50;"
    },
    {
        "question_id": 963,
        "answer_sql": "SELECT COUNT(*) FROM drivers JOIN lapTimes ON drivers.driverId = lapTimes.driverId WHERE drivers.nationality = 'French' AND lapTimes.time < '02:00.00';"
    },
    {
        "question_id": 964,
        "answer_sql": ""
    },
    {
        "question_id": 965,
        "answer_sql": "SELECT raceId FROM races WHERE year = 2009;"
    },
    {
        "question_id": 966,
        "answer_sql": "SELECT COUNT(DISTINCT driverId) FROM results WHERE raceId = 18;"
    },
    {
        "question_id": 967,
        "answer_sql": ""
    },
    {
        "question_id": 968,
        "answer_sql": "SELECT driverRef FROM drivers WHERE forename = 'Robert' AND surname = 'Kubica';"
    },
    {
        "question_id": 969,
        "answer_sql": "SELECT COUNT(*) FROM drivers WHERE nationality = 'Australian' AND dob LIKE '1980-%-%';"
    },
    {
        "question_id": 970,
        "answer_sql": "SELECT d.forename, d.surname, MIN(l.time) AS earliest_lap_time FROM drivers d JOIN lapTimes l ON d.driverId = l.driverId WHERE d.dob BETWEEN '1980-01-01' AND '1990-12-31' GROUP BY d.driverId ORDER BY earliest_lap_time LIMIT 3;"
    },
    {
        "question_id": 971,
        "answer_sql": "SELECT driverRef FROM drivers WHERE nationality = 'German' ORDER BY dob ASC LIMIT 1;"
    },
    {
        "question_id": 972,
        "answer_sql": ""
    },
    {
        "question_id": 973,
        "answer_sql": ""
    },
    {
        "question_id": 974,
        "answer_sql": "SELECT year FROM races JOIN results ON races.raceId = results.raceId WHERE results.fastestLapTime IS NOT NULL OR results.fastestLapTime != '' ORDER BY results.fastestLapTime ASC LIMIT 1;"
    },
    {
        "question_id": 975,
        "answer_sql": ""
    },
    {
        "question_id": 976,
        "answer_sql": "SELECT DISTINCT r.driverId FROM results r JOIN lapTimes lt ON r.raceId = lt.raceId AND r.driverId = lt.driverId AND lt.lap = 1 WHERE r.position IS NULL ORDER BY lt.time LIMIT 5;"
    },
    {
        "question_id": 977,
        "answer_sql": "SELECT COUNT(*) FROM results WHERE raceId > 50 AND raceId < 100 AND time IS NOT NULL AND statusId = 2;"
    },
    {
        "question_id": 978,
        "answer_sql": "SELECT COUNT(*) AS count, location, lat, lng FROM circuits WHERE country = 'Austria' GROUP BY location, lat, lng;"
    },
    {
        "question_id": 979,
        "answer_sql": "SELECT raceId, COUNT(DISTINCT driverId) as finishers FROM results WHERE time IS NOT NULL GROUP BY raceId ORDER BY finishers DESC LIMIT 1;"
    },
    {
        "question_id": 980,
        "answer_sql": "SELECT drivers.driverRef, drivers.nationality, drivers.dob FROM drivers JOIN qualifying ON drivers.driverId = qualifying.driverId WHERE qualifying.raceId = 23 AND qualifying.q2 IS NOT NULL;"
    },
    {
        "question_id": 981,
        "answer_sql": "SELECT r.year, c.name, r.date, r.time FROM races r JOIN results rj ON r.raceId = rj.raceId JOIN drivers d ON rj.driverId = d.driverId JOIN qualifying q ON r.raceId = q.raceId AND d.driverId = q.driverId JOIN constructors c ON q.constructorId = c.constructorId WHERE d.forename = 'Max' AND q.q1 IS NOT NULL ORDER BY d.dob LIMIT 1;"
    },
    {
        "question_id": 982,
        "answer_sql": "SELECT COUNT(*) FROM drivers JOIN results ON drivers.driverId = results.driverId JOIN status ON results.statusId = status.statusId WHERE drivers.nationality = 'American' AND status.status = 'disqualified';"
    },
    {
        "question_id": 983,
        "answer_sql": "SELECT c.name, c.url FROM constructors c JOIN ( SELECT constructorId, MAX(points) max_points FROM constructorResults GROUP BY constructorId ) cr ON c.constructorId = cr.constructorId WHERE c.nationality = 'Italian' AND cr.max_points = ( SELECT MAX(points) FROM constructorResults GROUP BY constructorId )"
    },
    {
        "question_id": 984,
        "answer_sql": ""
    },
    {
        "question_id": 985,
        "answer_sql": ""
    },
    {
        "question_id": 986,
        "answer_sql": "SELECT raceId, MIN(time) AS fastest_time_ms FROM lapTimes WHERE position = 1 GROUP BY raceId HAVING MAX(position) = 1;"
    },
    {
        "question_id": 987,
        "answer_sql": "SELECT AVG(r.fastestLapTime) FROM results r JOIN races r1 ON r.raceId = r1.raceId JOIN circuits c ON r1.circuitId = c.circuitId WHERE r1.name = 'United States Grand Prix' AND r1.year = 2006 AND r.rank < 11;"
    },
    {
        "question_id": 988,
        "answer_sql": "SELECT d.forename, d.surname, AVG(p.duration) as avg_pitstop_duration FROM drivers d JOIN pitStops p ON d.driverId = p.driverId WHERE d.dob BETWEEN '1980-01-01' AND '1985-12-31' GROUP BY d.driverId ORDER BY avg_pitstop_duration ASC LIMIT 5;"
    },
    {
        "question_id": 989,
        "answer_sql": ""
    },
    {
        "question_id": 990,
        "answer_sql": "SELECT c.constructorRef, c.url FROM constructorStandings cs JOIN constructors c ON cs.constructorId = c.constructorId WHERE cs.raceId IN ( SELECT raceId FROM races WHERE year = 2009 AND name = 'Singapore Grand Prix' ) AND cs.position = 1;"
    },
    {
        "question_id": 991,
        "answer_sql": "SELECT forename || ' ' || surname AS full_name, dob FROM drivers WHERE nationality = 'Austrian' AND dob BETWEEN '1981-01-01' AND '1991-12-31';"
    },
    {
        "question_id": 992,
        "answer_sql": "SELECT forename || ' ' || surname AS full_name, url AS wikipedia_link, dob AS date_of_birth FROM drivers WHERE nationality = 'German' AND dob BETWEEN '1971-01-01' AND '1985-12-31' ORDER BY dob DESC;"
    },
    {
        "question_id": 993,
        "answer_sql": "SELECT location, country, lat, lng FROM circuits WHERE name = 'Hungaroring';"
    },
    {
        "question_id": 994,
        "answer_sql": "SELECT c.name, c.nationality, SUM(cr.points) as total_points FROM constructors c JOIN constructorResults cr ON c.constructorId = cr.constructorId JOIN races r ON cr.raceId = r.raceId WHERE r.name = 'Monaco Grand Prix' AND r.year BETWEEN 1980 AND 2010 GROUP BY c.constructorId ORDER BY total_points DESC LIMIT 1;"
    },
    {
        "question_id": 995,
        "answer_sql": "SELECT AVG(results.points) AS average_score FROM results JOIN drivers ON results.driverId = drivers.driverId JOIN races ON results.raceId = races.raceId JOIN circuits ON races.circuitId = circuits.circuitId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND circuits.country = 'Turkey';"
    },
    {
        "question_id": 996,
        "answer_sql": ""
    },
    {
        "question_id": 997,
        "answer_sql": "SELECT MAX(nationality) FROM drivers;"
    },
    {
        "question_id": 998,
        "answer_sql": "SELECT COUNT(*) AS victories FROM results WHERE position = 91;"
    },
    {
        "question_id": 999,
        "answer_sql": "SELECT r.name FROM races r JOIN results r1 ON r.raceId = r1.raceId WHERE r1.fastestLapTime = (SELECT MIN(fastestLapTime) FROM results);"
    },
    {
        "question_id": 1000,
        "answer_sql": "SELECT c.location || ', ' || c.country AS full_location FROM circuits c JOIN races r ON r.circuitId = c.circuitId WHERE r.date = (SELECT MAX(date) FROM races) LIMIT 1;"
    },
    {
        "question_id": 1001,
        "answer_sql": "SELECT forename || ' ' || surname AS full_name FROM drivers JOIN qualifying ON drivers.driverId = qualifying.driverId WHERE qualifying.raceId = ( SELECT raceId FROM races WHERE year = 2008 AND circuitId = ( SELECT circuitId FROM circuits WHERE name = 'Marina Bay Street Circuit' ) ) AND qualifying.position = 1 AND qualifying.q3 IS NOT NULL;"
    },
    {
        "question_id": 1002,
        "answer_sql": ""
    },
    {
        "question_id": 1003,
        "answer_sql": ""
    },
    {
        "question_id": 1004,
        "answer_sql": "SELECT d.forename, d.surname, COUNT(*) as wins FROM drivers d JOIN results r ON d.driverId = r.driverId WHERE r.rank = 1 GROUP BY d.driverId ORDER BY d.dob ASC LIMIT 1;"
    },
    {
        "question_id": 1005,
        "answer_sql": "SELECT MAX(duration) FROM pitStops;"
    },
    {
        "question_id": 1006,
        "answer_sql": "SELECT MIN(time) AS fastest_lap_time FROM lapTimes;"
    },
    {
        "question_id": 1007,
        "answer_sql": "SELECT MAX(duration) FROM pitStops WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton');"
    },
    {
        "question_id": 1008,
        "answer_sql": "SELECT lap FROM pitStops WHERE raceId = (SELECT raceId FROM races WHERE year = 2011 AND name = 'Australian Grand Prix') AND driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton');"
    },
    {
        "question_id": 1009,
        "answer_sql": "SELECT p.time, p.duration FROM pitStops p WHERE p.raceId IN ( SELECT r.raceId FROM races r JOIN seasons s ON r.year = s.year WHERE s.year = 2011 AND r.name = 'Australian Grand Prix' ) AND p.driverId IN ( SELECT d.driverId FROM drivers d JOIN results r ON d.driverId = r.driverId WHERE r.raceId IN ( SELECT r.raceId FROM races r JOIN seasons s ON r.year = s.year WHERE s.year = 2011 AND r.name = 'Australian Grand Prix' ) );"
    },
    {
        "question_id": 1010,
        "answer_sql": "SELECT MAX(time) AS fastest_lap_time FROM lapTimes WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton');"
    },
    {
        "question_id": 1011,
        "answer_sql": "SELECT d.forename, d.surname FROM drivers d JOIN lapTimes lt ON d.driverId = lt.driverId WHERE lt.time = (SELECT MIN(time) FROM lapTimes)"
    },
    {
        "question_id": 1012,
        "answer_sql": ""
    },
    {
        "question_id": 1013,
        "answer_sql": "SELECT MIN(time) AS fastest_lap_time FROM lapTimes WHERE raceId IN ( SELECT raceId FROM races WHERE circuitId IN ( SELECT circuitId FROM circuits WHERE name = 'Austrian Grand Prix' ) )"
    },
    {
        "question_id": 1014,
        "answer_sql": ""
    },
    {
        "question_id": 1015,
        "answer_sql": "SELECT raceId FROM races WHERE name = 'Austrian Grand Prix' AND time IS NOT NULL;"
    },
    {
        "question_id": 1016,
        "answer_sql": ""
    },
    {
        "question_id": 1017,
        "answer_sql": "SELECT c.location, c.lat, c.lng FROM circuits c JOIN lapTimes lt ON c.circuitId = lt.raceId WHERE lt.time = '1:29.488';"
    },
    {
        "question_id": 1018,
        "answer_sql": "SELECT AVG(milliseconds) AS average_pit_stop_time FROM pitStops WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton');"
    },
    {
        "question_id": 1019,
        "answer_sql": "SELECT AVG(milliseconds) AS average_lap_time FROM lapTimes WHERE raceId IN ( SELECT raceId FROM races WHERE circuitId IN ( SELECT circuitId FROM circuits WHERE location LIKE '%Italy%' ) );"
    },
    {
        "question_id": 1020,
        "answer_sql": "SELECT player_api_id FROM Player_Attributes ORDER BY overall_rating DESC LIMIT 1;"
    },
    {
        "question_id": 1021,
        "answer_sql": "SELECT player_name, height FROM Player WHERE height = (SELECT MAX(height) FROM Player);"
    },
    {
        "question_id": 1022,
        "answer_sql": "SELECT `preferred_foot` FROM `Player_Attributes` WHERE `potential` = (SELECT MIN(`potential`) FROM `Player_Attributes`);"
    },
    {
        "question_id": 1023,
        "answer_sql": "SELECT COUNT(*) FROM Player_Attributes WHERE overall_rating >= 60 AND overall_rating < 65 AND defensive_work_rate = 'low';"
    },
    {
        "question_id": 1024,
        "answer_sql": "SELECT player_api_id FROM Player_Attributes ORDER BY crossing DESC LIMIT 5;"
    },
    {
        "question_id": 1025,
        "answer_sql": "SELECT League.name, SUM(home_team_goal + away_team_goal) AS total_goals FROM League JOIN Match ON League.id = Match.league_id WHERE Match.season = '2015/2016' GROUP BY League.name ORDER BY total_goals DESC LIMIT 1;"
    },
    {
        "question_id": 1026,
        "answer_sql": ""
    },
    {
        "question_id": 1027,
        "answer_sql": "SELECT Player.player_name AS full_name FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player_Attributes.penalties = (SELECT MAX(penalties) FROM Player_Attributes) LIMIT 10;"
    },
    {
        "question_id": 1028,
        "answer_sql": ""
    },
    {
        "question_id": 1029,
        "answer_sql": "SELECT Team.team_long_name, Team_Attributes.buildUpPlaySpeed FROM Team JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id WHERE Team_Attributes.buildUpPlaySpeed = (SELECT MAX(buildUpPlaySpeed) FROM Team_Attributes) LIMIT 4;"
    },
    {
        "question_id": 1030,
        "answer_sql": "SELECT League.name, SUM(CASE WHEN home_team_goal = away_team_goal THEN 1 ELSE 0 END) AS draw_matches FROM League JOIN Match ON League.id = Match.league_id WHERE Match.season = '2015/2016' GROUP BY League.name ORDER BY draw_matches DESC LIMIT 1;"
    },
    {
        "question_id": 1031,
        "answer_sql": ""
    },
    {
        "question_id": 1032,
        "answer_sql": "SELECT League.name, COUNT(Match.id) as total_matches FROM League JOIN Match ON League.id = Match.league_id GROUP BY League.name ORDER BY total_matches DESC LIMIT 1;"
    },
    {
        "question_id": 1033,
        "answer_sql": ""
    },
    {
        "question_id": 1034,
        "answer_sql": ""
    },
    {
        "question_id": 1035,
        "answer_sql": "SELECT team_fifa_api_id FROM Team_Attributes WHERE buildUpPlaySpeed BETWEEN 51 AND 59;"
    },
    {
        "question_id": 1036,
        "answer_sql": "SELECT T.team_long_name FROM Team T JOIN Team_Attributes TA ON T.team_api_id = TA.team_api_id WHERE strftime('%Y', TA.date) = '2012' GROUP BY T.team_long_name HAVING AVG(buildUpPlayPassing) > (SELECT AVG(buildUpPlayPassing) FROM Team_Attributes WHERE strftime('%Y', date) = '2012' AND buildUpPlayPassing IS NOT NULL)"
    },
    {
        "question_id": 1037,
        "answer_sql": ""
    },
    {
        "question_id": 1038,
        "answer_sql": "SELECT L.name, SUM(home_team_goal + away_team_goal) AS total_goals FROM League L JOIN Match M ON L.id = M.league_id GROUP BY L.id ORDER BY total_goals DESC LIMIT 5;"
    },
    {
        "question_id": 1039,
        "answer_sql": ""
    },
    {
        "question_id": 1040,
        "answer_sql": "SELECT player_name, AVG(heading_accuracy) AS avg_heading_accuracy FROM Player_Attributes JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE height > 180 GROUP BY Player.player_name ORDER BY avg_heading_accuracy DESC LIMIT 10;"
    },
    {
        "question_id": 1041,
        "answer_sql": ""
    },
    {
        "question_id": 1042,
        "answer_sql": "SELECT League.name FROM League JOIN Match ON League.id = Match.league_id WHERE Match.season = '2009/2010' GROUP BY League.id HAVING AVG(home_team_goal) > AVG(away_team_goal);"
    },
    {
        "question_id": 1043,
        "answer_sql": "SELECT team_short_name FROM Team WHERE team_long_name = 'Queens Park Rangers';"
    },
    {
        "question_id": 1044,
        "answer_sql": "SELECT player_name FROM Player WHERE substr(birthday,1,4) = '1970' AND substr(birthday,6,2) = '10';"
    },
    {
        "question_id": 1045,
        "answer_sql": "SELECT `attacking_work_rate` FROM `Player_Attributes` WHERE `player_api_id` = (SELECT `player_api_id` FROM `Player` WHERE `player_name` = 'Franco Zennaro');"
    },
    {
        "question_id": 1046,
        "answer_sql": ""
    },
    {
        "question_id": 1047,
        "answer_sql": "SELECT finishing FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Francois Affolter') AND date = '2014-09-18 00:00:00';"
    },
    {
        "question_id": 1048,
        "answer_sql": ""
    },
    {
        "question_id": 1049,
        "answer_sql": "SELECT COUNT(*) FROM Match WHERE season = '2015/2016' AND league_id IN ( SELECT id FROM League WHERE name = 'Scotland Premier League' );"
    },
    {
        "question_id": 1050,
        "answer_sql": ""
    },
    {
        "question_id": 1051,
        "answer_sql": "SELECT player_name, potential FROM Player_Attributes JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE potential = (SELECT MAX(potential) FROM Player_Attributes);"
    },
    {
        "question_id": 1052,
        "answer_sql": ""
    },
    {
        "question_id": 1053,
        "answer_sql": "SELECT team_short_name FROM Team JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id WHERE Team_Attributes.chanceCreationPassingClass = 'Risky';"
    },
    {
        "question_id": 1054,
        "answer_sql": ""
    },
    {
        "question_id": 1055,
        "answer_sql": "SELECT birthday FROM Player WHERE player_api_id IN (SELECT player_api_id FROM Player_Attributes WHERE overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes));"
    },
    {
        "question_id": 1056,
        "answer_sql": "SELECT name FROM League WHERE country_id IN (SELECT id FROM Country WHERE name = 'Netherlands');"
    },
    {
        "question_id": 1057,
        "answer_sql": "SELECT AVG(home_team_goal) FROM Match WHERE country_id IN (SELECT id FROM Country WHERE name = 'Poland') AND season = '2010/2011';"
    },
    {
        "question_id": 1058,
        "answer_sql": ""
    },
    {
        "question_id": 1059,
        "answer_sql": ""
    },
    {
        "question_id": 1060,
        "answer_sql": "SELECT COUNT(*) FROM Player WHERE strftime('%Y', birthday) = '1990';"
    },
    {
        "question_id": 1061,
        "answer_sql": "SELECT COUNT(*) FROM Player WHERE player_name LIKE '%Adam%' AND weight > 170;"
    },
    {
        "question_id": 1062,
        "answer_sql": "SELECT player_name FROM Player_Attributes JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE overall_rating > 80 AND strftime('%Y', date) BETWEEN '2008' AND '2010';"
    },
    {
        "question_id": 1063,
        "answer_sql": "SELECT potential FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Doran');"
    },
    {
        "question_id": 1064,
        "answer_sql": ""
    },
    {
        "question_id": 1065,
        "answer_sql": "SELECT team_long_name FROM Team WHERE team_fifa_api_id IN (SELECT team_fifa_api_id FROM Team_Attributes WHERE buildUpPlaySpeedClass = 'Fast');"
    },
    {
        "question_id": 1066,
        "answer_sql": ""
    },
    {
        "question_id": 1067,
        "answer_sql": "SELECT team_short_name FROM Team JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id WHERE Team_Attributes.buildUpPlayPassing > 70;"
    },
    {
        "question_id": 1068,
        "answer_sql": ""
    },
    {
        "question_id": 1069,
        "answer_sql": "SELECT player_name FROM Player WHERE height = (SELECT MIN(height) FROM Player);"
    },
    {
        "question_id": 1070,
        "answer_sql": "SELECT country_id FROM League WHERE name = 'Italy Serie A';"
    },
    {
        "question_id": 1071,
        "answer_sql": "SELECT team_short_name FROM Team JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id WHERE Team_Attributes.buildUpPlaySpeed = 31 AND Team_Attributes.buildUpPlayDribbling = 53 AND Team_Attributes.buildUpPlayPassing = 32;"
    },
    {
        "question_id": 1072,
        "answer_sql": "SELECT AVG(overall_rating) FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Doran');"
    },
    {
        "question_id": 1073,
        "answer_sql": ""
    },
    {
        "question_id": 1074,
        "answer_sql": ""
    },
    {
        "question_id": 1075,
        "answer_sql": ""
    },
    {
        "question_id": 1076,
        "answer_sql": ""
    },
    {
        "question_id": 1077,
        "answer_sql": "SELECT team_long_name FROM Team WHERE team_short_name = 'GEN';"
    },
    {
        "question_id": 1078,
        "answer_sql": "SELECT CASE WHEN P1.birthday > P2.birthday THEN P1.player_name ELSE P2.player_name END AS older_player FROM Player P1, Player P2 WHERE (P1.player_name = 'Aaron Lennon' AND P2.player_name = 'Abdelaziz Barrada') OR (P1.player_name = 'Abdelaziz Barrada' AND P2.player_name = 'Aaron Lennon');"
    },
    {
        "question_id": 1079,
        "answer_sql": "SELECT player_name FROM Player WHERE height = (SELECT MAX(height) FROM Player);"
    },
    {
        "question_id": 1080,
        "answer_sql": "SELECT COUNT(*) FROM Player_Attributes WHERE preferred_foot = 'left' AND attacking_work_rate = 'low';"
    },
    {
        "question_id": 1081,
        "answer_sql": "SELECT country_id FROM League WHERE name = 'Belgium Jupiler League';"
    },
    {
        "question_id": 1082,
        "answer_sql": "SELECT name FROM League WHERE country_id IN (SELECT id FROM Country WHERE name = 'Germany');"
    },
    {
        "question_id": 1083,
        "answer_sql": "SELECT player_name FROM Player WHERE player_api_id = (SELECT player_api_id FROM Player_Attributes WHERE overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes));"
    },
    {
        "question_id": 1084,
        "answer_sql": "SELECT COUNT(*) FROM Player_Attributes JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE strftime('%Y', Player.birthday) < '1986' AND (Player_Attributes.defensive_work_rate = 'high' OR Player_Attributes.attacking_work_rate = 'high');"
    },
    {
        "question_id": 1085,
        "answer_sql": "SELECT p.player_name FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE pa.crossing = (SELECT MAX(crossing) FROM Player_Attributes);"
    },
    {
        "question_id": 1086,
        "answer_sql": "SELECT heading_accuracy FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Ariel Borysiuk');"
    },
    {
        "question_id": 1087,
        "answer_sql": ""
    },
    {
        "question_id": 1088,
        "answer_sql": ""
    },
    {
        "question_id": 1089,
        "answer_sql": "SELECT COUNT(*) FROM Match WHERE country_id IN (SELECT id FROM Country WHERE name = 'Belgium') AND season = '2008/2009';"
    },
    {
        "question_id": 1090,
        "answer_sql": "SELECT long_passing FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player ORDER BY birthday ASC LIMIT 1);"
    },
    {
        "question_id": 1091,
        "answer_sql": "SELECT COUNT(*) FROM Match WHERE strftime('%Y', date) = '2009' AND strftime('%m', date) = '04' AND league_id IN ( SELECT id FROM League WHERE name = 'Belgium Jupiler League' );"
    },
    {
        "question_id": 1092,
        "answer_sql": "SELECT league_id FROM Match WHERE season = '2008/2009' GROUP BY league_id ORDER BY COUNT(*) DESC LIMIT 1;"
    },
    {
        "question_id": 1093,
        "answer_sql": ""
    },
    {
        "question_id": 1094,
        "answer_sql": ""
    },
    {
        "question_id": 1095,
        "answer_sql": "SELECT AVG(buildUpPlaySpeed) FROM Team_Attributes WHERE team_fifa_api_id IN ( SELECT team_api_id FROM Team WHERE team_long_name = 'Heart of Midlothian' );"
    },
    {
        "question_id": 1096,
        "answer_sql": "SELECT AVG(T1.overall_rating) FROM Player_Attributes T1 JOIN Player T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Pietro Marino';"
    },
    {
        "question_id": 1097,
        "answer_sql": "SELECT SUM(Player_Attributes.crossing) FROM Player_Attributes JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE Player.player_name = 'Aaron Lennox';"
    },
    {
        "question_id": 1098,
        "answer_sql": "SELECT MAX(chanceCreationPassing), chanceCreationPassingClass FROM Team_Attributes WHERE team_fifa_api_id IN (SELECT team_fifa_api_id FROM Team WHERE team_long_name = 'Ajax');"
    },
    {
        "question_id": 1099,
        "answer_sql": "SELECT preferred_foot FROM Player_Attributes WHERE player_api_id IN (SELECT player_api_id FROM Player WHERE player_name = 'Abdou Diallo');"
    },
    {
        "question_id": 1100,
        "answer_sql": ""
    },
    {
        "question_id": 1101,
        "answer_sql": "SELECT AVG(away_team_goal) FROM Match WHERE home_team_api_id IN ( SELECT team_api_id FROM Team WHERE team_long_name = 'Parma' ) AND country_id IN ( SELECT id FROM Country WHERE name = 'Italy' );"
    },
    {
        "question_id": 1102,
        "answer_sql": ""
    },
    {
        "question_id": 1103,
        "answer_sql": ""
    },
    {
        "question_id": 1104,
        "answer_sql": ""
    },
    {
        "question_id": 1105,
        "answer_sql": ""
    },
    {
        "question_id": 1106,
        "answer_sql": ""
    },
    {
        "question_id": 1107,
        "answer_sql": ""
    },
    {
        "question_id": 1108,
        "answer_sql": ""
    },
    {
        "question_id": 1109,
        "answer_sql": ""
    },
    {
        "question_id": 1110,
        "answer_sql": ""
    },
    {
        "question_id": 1111,
        "answer_sql": ""
    },
    {
        "question_id": 1112,
        "answer_sql": ""
    },
    {
        "question_id": 1113,
        "answer_sql": ""
    },
    {
        "question_id": 1114,
        "answer_sql": "SELECT AVG(Player_Attributes.overall_rating) FROM Player_Attributes JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE Player.player_name = 'Marko Arnautovic' AND Player_Attributes.date BETWEEN '2007-02-22 00:00:00' AND '2016-04-21 00:00:00';"
    },
    {
        "question_id": 1115,
        "answer_sql": ""
    },
    {
        "question_id": 1116,
        "answer_sql": "SELECT player_name FROM Player WHERE height = (SELECT MAX(height) FROM Player) LIMIT 5;"
    },
    {
        "question_id": 1117,
        "answer_sql": "SELECT `player_api_id` FROM `Player` ORDER BY `weight` DESC LIMIT 10;"
    },
    {
        "question_id": 1118,
        "answer_sql": ""
    },
    {
        "question_id": 1119,
        "answer_sql": ""
    },
    {
        "question_id": 1120,
        "answer_sql": "SELECT SUM(away_team_goal) FROM Match JOIN Player ON Match.away_player_1 = Player.player_api_id WHERE Player.player_name = 'Daan Smith' OR Player.player_name = 'Filipe Ferreira';"
    },
    {
        "question_id": 1121,
        "answer_sql": ""
    },
    {
        "question_id": 1122,
        "answer_sql": "SELECT player_name FROM Player_Attributes AS PA JOIN Player AS P ON PA.player_api_id = P.player_api_id WHERE PA.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes) LIMIT 10;"
    },
    {
        "question_id": 1123,
        "answer_sql": ""
    },
    {
        "question_id": 1124,
        "answer_sql": "SELECT DISTINCT P.player_name FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE PA.attacking_work_rate = 'high';"
    },
    {
        "question_id": 1125,
        "answer_sql": ""
    },
    {
        "question_id": 1126,
        "answer_sql": ""
    },
    {
        "question_id": 1127,
        "answer_sql": ""
    },
    {
        "question_id": 1128,
        "answer_sql": ""
    },
    {
        "question_id": 1129,
        "answer_sql": "SELECT T.team_long_name FROM Team T JOIN Team_Attributes TA ON T.team_api_id = TA.team_api_id WHERE TA.buildUpPlaySpeedClass = 'Slow';"
    },
    {
        "question_id": 1130,
        "answer_sql": "SELECT team_short_name FROM Team JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id WHERE Team_Attributes.chanceCreationPassingClass = 'Safe';"
    },
    {
        "question_id": 1131,
        "answer_sql": "SELECT AVG(height) FROM Player WHERE birthday LIKE '%Italy%';"
    },
    {
        "question_id": 1132,
        "answer_sql": "SELECT player_name FROM Player WHERE height > 180 ORDER BY player_name ASC LIMIT 3;"
    },
    {
        "question_id": 1133,
        "answer_sql": "SELECT COUNT(*) FROM Player WHERE player_name LIKE 'Aaron%' AND birthday > '1990';"
    },
    {
        "question_id": 1134,
        "answer_sql": "SELECT (SELECT jumping FROM Player_Attributes WHERE id = 6) - (SELECT jumping FROM Player_Attributes WHERE id = 23) AS difference;"
    },
    {
        "question_id": 1135,
        "answer_sql": "SELECT id FROM Player_Attributes WHERE potential = (SELECT MIN(potential) FROM Player_Attributes) AND preferred_foot = 'right' ORDER BY id LIMIT 3;"
    },
    {
        "question_id": 1136,
        "answer_sql": "SELECT COUNT(*) FROM Player_Attributes WHERE crossing = (SELECT MAX(crossing) FROM Player_Attributes) AND preferred_foot = 'left';"
    },
    {
        "question_id": 1137,
        "answer_sql": "SELECT COUNT(*) / (SELECT COUNT(*) FROM Player) * 100 AS percentage FROM Player_Attributes WHERE strength > 80 AND stamina > 80;"
    },
    {
        "question_id": 1138,
        "answer_sql": "SELECT country_id FROM League WHERE name = 'Poland Ekstraklasa';"
    },
    {
        "question_id": 1139,
        "answer_sql": "SELECT home_team_goal, away_team_goal FROM Match WHERE date LIKE '2008-09-24%';"
    },
    {
        "question_id": 1140,
        "answer_sql": ""
    },
    {
        "question_id": 1141,
        "answer_sql": ""
    },
    {
        "question_id": 1142,
        "answer_sql": "SELECT COUNT(*) FROM Match WHERE season = '2015/2016' AND league_id IN ( SELECT id FROM League WHERE name = 'Serie A' );"
    },
    {
        "question_id": 1143,
        "answer_sql": "SELECT MAX(home_team_goal) FROM Match WHERE league_id IN (SELECT id FROM League WHERE name = 'Eredivisie') AND country_id IN (SELECT id FROM Country WHERE name = 'Netherlands');"
    },
    {
        "question_id": 1144,
        "answer_sql": ""
    },
    {
        "question_id": 1145,
        "answer_sql": ""
    },
    {
        "question_id": 1146,
        "answer_sql": "SELECT Team.team_long_name FROM Team INNER JOIN Match ON Team.team_api_id = Match.away_team_api_id WHERE Match.away_team_goal = (SELECT MAX(away_team_goal) FROM Match);"
    },
    {
        "question_id": 1147,
        "answer_sql": "SELECT player_name FROM Player WHERE player_api_id IN (SELECT player_api_id FROM Player_Attributes WHERE overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes));"
    },
    {
        "question_id": 1148,
        "answer_sql": ""
    },
    {
        "question_id": 1149,
        "answer_sql": "SELECT (COUNT(DISTINCT CASE WHEN SEX = 'M' AND Admission = '+' THEN ID END) * 100.0) / COUNT(DISTINCT CASE WHEN SEX = 'M' THEN ID END) AS InPatientPercentage, (COUNT(DISTINCT CASE WHEN SEX = 'M' AND Admission = '-' THEN ID END) * 100.0) / COUNT(DISTINCT CASE WHEN SEX = 'M' THEN ID END) AS OutPatientPercentage FROM Patient;"
    },
    {
        "question_id": 1150,
        "answer_sql": ""
    },
    {
        "question_id": 1151,
        "answer_sql": "SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Patient WHERE Birthday BETWEEN '1930-01-01' AND '1940-12-31') AS percentage_inpatient FROM Patient WHERE Birthday BETWEEN '1930-01-01' AND '1940-12-31' AND Admission = '+';"
    },
    {
        "question_id": 1152,
        "answer_sql": ""
    },
    {
        "question_id": 1153,
        "answer_sql": ""
    },
    {
        "question_id": 1154,
        "answer_sql": "SELECT Patient.SEX, Patient.Birthday, Examination.`Examination Date`, Examination.Symptoms FROM Patient LEFT JOIN Examination ON Patient.ID = Examination.ID WHERE Patient.ID = 163109;"
    },
    {
        "question_id": 1155,
        "answer_sql": "SELECT Patient.ID, SEX, Birthday FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE LDH > 500;"
    },
    {
        "question_id": 1156,
        "answer_sql": "SELECT Patient.ID, (strftime('%Y', 'now') - strftime('%Y', Patient.Birthday)) AS age FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.RVVT = '+';"
    },
    {
        "question_id": 1157,
        "answer_sql": "SELECT Patient.ID, Patient.SEX, Examination.Diagnosis FROM Examination JOIN Patient ON Examination.ID = Patient.ID WHERE Examination.Thrombosis = 2;"
    },
    {
        "question_id": 1158,
        "answer_sql": ""
    },
    {
        "question_id": 1159,
        "answer_sql": ""
    },
    {
        "question_id": 1160,
        "answer_sql": ""
    },
    {
        "question_id": 1161,
        "answer_sql": ""
    },
    {
        "question_id": 1162,
        "answer_sql": "SELECT COUNT(*) FROM Patient WHERE SEX = 'F' AND Description = '1997' AND Admission = '-';"
    },
    {
        "question_id": 1163,
        "answer_sql": ""
    },
    {
        "question_id": 1164,
        "answer_sql": ""
    },
    {
        "question_id": 1165,
        "answer_sql": ""
    },
    {
        "question_id": 1166,
        "answer_sql": ""
    },
    {
        "question_id": 1167,
        "answer_sql": ""
    },
    {
        "question_id": 1168,
        "answer_sql": ""
    },
    {
        "question_id": 1169,
        "answer_sql": ""
    },
    {
        "question_id": 1170,
        "answer_sql": ""
    },
    {
        "question_id": 1171,
        "answer_sql": "SELECT COUNT(*) FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE p.Birthday < 1993 AND e.`Examination Date` BETWEEN '1990-01-01' AND '1993-12-31';"
    },
    {
        "question_id": 1172,
        "answer_sql": ""
    },
    {
        "question_id": 1173,
        "answer_sql": "SELECT Diagnosis, COUNT(*) as Frequency FROM Examination WHERE `Examination Date` BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY Diagnosis ORDER BY Frequency DESC LIMIT 1;"
    },
    {
        "question_id": 1174,
        "answer_sql": ""
    },
    {
        "question_id": 1175,
        "answer_sql": ""
    },
    {
        "question_id": 1176,
        "answer_sql": "SELECT ANA FROM Examination WHERE ID = 3605340 AND `Examination Date` = '1996-12-02';"
    },
    {
        "question_id": 1177,
        "answer_sql": "SELECT T.TP < 250 AS `Normal Level` FROM Laboratory T WHERE T.ID = 2927464 AND T.Date = '1995-09-04';"
    },
    {
        "question_id": 1178,
        "answer_sql": ""
    },
    {
        "question_id": 1179,
        "answer_sql": ""
    },
    {
        "question_id": 1180,
        "answer_sql": ""
    },
    {
        "question_id": 1181,
        "answer_sql": ""
    },
    {
        "question_id": 1182,
        "answer_sql": "SELECT COUNT(Laboratory.ID) FROM Examination JOIN Patient ON Examination.ID = Patient.ID JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Patient.`First Date` = '1991-06-13' AND Patient.Diagnosis = 'SJS' AND Laboratory.Date BETWEEN '1995-01-01' AND '1995-12-31';"
    },
    {
        "question_id": 1183,
        "answer_sql": "SELECT p.Diagnosis FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE p.`First Date` = '1997-01-27' AND e.`Examination Date` = '1997-01-27' AND p.Diagnosis = 'SLE';"
    },
    {
        "question_id": 1184,
        "answer_sql": "SELECT Symptoms FROM Examination WHERE `Examination Date` = '1993-09-27' AND ID IN ( SELECT ID FROM Patient WHERE Birthday = '1959-03-01' );"
    },
    {
        "question_id": 1185,
        "answer_sql": ""
    },
    {
        "question_id": 1186,
        "answer_sql": ""
    },
    {
        "question_id": 1187,
        "answer_sql": "SELECT Patient.ID FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Examination.`Examination Date` BETWEEN '1987-07-06' AND '1996-01-31' AND Laboratory.GPT > 30 AND Laboratory.ALB < 4;"
    },
    {
        "question_id": 1188,
        "answer_sql": ""
    },
    {
        "question_id": 1189,
        "answer_sql": "SELECT COUNT(*) FROM Examination e JOIN Patient p ON e.ID = p.ID WHERE e.Thrombosis = 2 AND e.ANA = 'S' AND e.`aCL IgM` > (SELECT AVG(`aCL IgM`) FROM Examination) * 1.2;"
    },
    {
        "question_id": 1190,
        "answer_sql": "SELECT (SUM(CASE WHEN T2.UA <= 6.5 AND T2.`U-PRO` > 0 AND T2.`U-PRO` < 30 THEN 1 ELSE 0 END) * 100.0) / COUNT(T2.`U-PRO`) AS Percentage FROM (SELECT `U-PRO`, UA FROM Laboratory) T2;"
    },
    {
        "question_id": 1191,
        "answer_sql": ""
    },
    {
        "question_id": 1192,
        "answer_sql": "SELECT p.ID, p.SEX, p.Birthday, p.Description, p.`First Date`, p.Admission, p.Diagnosis FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.Admission = '-' AND l.Date LIKE '1991-10%' AND l.`T-BIL` < 2.0;"
    },
    {
        "question_id": 1193,
        "answer_sql": "SELECT COUNT(*) FROM Examination e JOIN Patient p ON e.ID = p.ID WHERE e.`ANA Pattern` != 'p' AND p.SEX = 'F' AND p.Birthday BETWEEN '1980-01-01' AND '1989-12-31';"
    },
    {
        "question_id": 1194,
        "answer_sql": "SELECT Patient.SEX FROM Examination JOIN Patient ON Examination.ID = Patient.ID JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Examination.Diagnosis = 'PSS' AND Laboratory.CRP = '2+' AND Laboratory.CRE = 1 AND Laboratory.LDH = 123;"
    },
    {
        "question_id": 1195,
        "answer_sql": "SELECT AVG(T.ALB) FROM Examination E JOIN Patient P ON E.ID = P.ID JOIN Laboratory T ON E.ID = T.ID WHERE P.SEX = 'F' AND E.Thrombosis = 'SLE' AND T.PLT > 400;"
    },
    {
        "question_id": 1196,
        "answer_sql": "SELECT Symptoms FROM Examination WHERE Diagnosis = 'SLE' GROUP BY Symptoms ORDER BY COUNT(*) DESC LIMIT 1;"
    },
    {
        "question_id": 1197,
        "answer_sql": "SELECT Description, Diagnosis FROM Patient WHERE ID = 48473;"
    },
    {
        "question_id": 1198,
        "answer_sql": "SELECT COUNT(*) FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE p.SEX = 'F' AND e.Diagnosis = 'APS';"
    },
    {
        "question_id": 1199,
        "answer_sql": ""
    },
    {
        "question_id": 1200,
        "answer_sql": "SELECT (SUM(CASE WHEN Diagnosis LIKE '%ITP%' THEN 1 ELSE 0 END) * 100) / (SUM(CASE WHEN Diagnosis LIKE '%SLE%' THEN 1 ELSE 0 END) + 1) AS Proportion FROM Examination;"
    },
    {
        "question_id": 1201,
        "answer_sql": ""
    },
    {
        "question_id": 1202,
        "answer_sql": "SELECT COUNT(*) FROM Patient p JOIN Examination e ON p.ID = e.ID JOIN Laboratory l ON p.ID = l.ID WHERE p.SEX = 'M' AND e.`Examination Date` BETWEEN '1995-01-01' AND '1997-12-31' AND p.Diagnosis = 'BEHCET' AND p.Admission = '-';"
    },
    {
        "question_id": 1203,
        "answer_sql": ""
    },
    {
        "question_id": 1204,
        "answer_sql": ""
    },
    {
        "question_id": 1205,
        "answer_sql": "SELECT UA FROM Laboratory WHERE ID = (SELECT ID FROM Patient WHERE SEX = 'M' AND ID = 57266) AND Date = (SELECT MAX(Date) FROM Laboratory WHERE ID = (SELECT ID FROM Patient WHERE SEX = 'M' AND ID = 57266));"
    },
    {
        "question_id": 1206,
        "answer_sql": "SELECT Laboratory.Date FROM Laboratory JOIN Patient ON Laboratory.ID = Patient.ID WHERE Patient.ID = 48473 AND Laboratory.GOT >= 60;"
    },
    {
        "question_id": 1207,
        "answer_sql": ""
    },
    {
        "question_id": 1208,
        "answer_sql": "SELECT p.ID FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.SEX = 'M' AND l.GPT >= 60;"
    },
    {
        "question_id": 1209,
        "answer_sql": ""
    },
    {
        "question_id": 1210,
        "answer_sql": "SELECT AVG(LDH) FROM Laboratory WHERE LDH < 500;"
    },
    {
        "question_id": 1211,
        "answer_sql": ""
    },
    {
        "question_id": 1212,
        "answer_sql": "SELECT P.ID, P.SEX, P.Birthday, P.Description, P.`First Date`, P.Admission, E.Thrombosis FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE E.`aCL IgA` IS NOT NULL AND E.`aCL IgA` < 300 AND (P.Admission = '+' OR P.Admission = '-');"
    },
    {
        "question_id": 1213,
        "answer_sql": "SELECT p.ID, l.ALP < 300 AS is_alp_normal FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.Birthday = '1982-04-01';"
    },
    {
        "question_id": 1214,
        "answer_sql": "SELECT p.ID, p.SEX, p.Birthday FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.TP < 6.0;"
    },
    {
        "question_id": 1215,
        "answer_sql": ""
    },
    {
        "question_id": 1216,
        "answer_sql": ""
    },
    {
        "question_id": 1217,
        "answer_sql": ""
    },
    {
        "question_id": 1218,
        "answer_sql": ""
    },
    {
        "question_id": 1219,
        "answer_sql": ""
    },
    {
        "question_id": 1220,
        "answer_sql": "SELECT Patient.ID, Patient.SEX, Patient.Birthday FROM Patient LEFT JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.UN = 29;"
    },
    {
        "question_id": 1221,
        "answer_sql": "SELECT Patient.ID, SEX, Birthday FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Diagnosis = 'RA' AND UA < 30;"
    },
    {
        "question_id": 1222,
        "answer_sql": "SELECT COUNT(*) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.SEX = 'M' AND l.CRE >= 1.5;"
    },
    {
        "question_id": 1223,
        "answer_sql": "SELECT (SELECT COUNT(*) FROM Patient p WHERE p.SEX = 'M' AND EXISTS (SELECT 1 FROM Laboratory l WHERE l.ID = p.ID AND l.CRE >= 1.5)) > (SELECT COUNT(*) FROM Patient p WHERE p.SEX = 'F' AND EXISTS (SELECT 1 FROM Laboratory l WHERE l.ID = p.ID AND l.CRE >= 1.5))"
    },
    {
        "question_id": 1224,
        "answer_sql": ""
    },
    {
        "question_id": 1225,
        "answer_sql": "SELECT SEX, COUNT(*) AS Total FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE `T-BIL` >= 2.0 GROUP BY SEX;"
    },
    {
        "question_id": 1226,
        "answer_sql": ""
    },
    {
        "question_id": 1227,
        "answer_sql": ""
    },
    {
        "question_id": 1228,
        "answer_sql": "SELECT Patient.ID, Patient.Diagnosis FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.TG > 300;"
    },
    {
        "question_id": 1229,
        "answer_sql": "SELECT COUNT(*) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.TG >= 200 AND (current_date - Birthday) / 365.25 > 50;"
    },
    {
        "question_id": 1230,
        "answer_sql": "SELECT DISTINCT Patient.ID FROM Patient LEFT JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Admission = '-' AND CPK < 250;"
    },
    {
        "question_id": 1231,
        "answer_sql": "SELECT COUNT(*) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.Birthday BETWEEN '1936-01-01' AND '1956-12-31' AND p.SEX = 'M' AND l.CPK >= 250;"
    },
    {
        "question_id": 1232,
        "answer_sql": ""
    },
    {
        "question_id": 1233,
        "answer_sql": ""
    },
    {
        "question_id": 1234,
        "answer_sql": ""
    },
    {
        "question_id": 1235,
        "answer_sql": ""
    },
    {
        "question_id": 1236,
        "answer_sql": ""
    },
    {
        "question_id": 1237,
        "answer_sql": "SELECT Patient.ID, SEX FROM Patient LEFT JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Admission = '-' AND HGB < 10;"
    },
    {
        "question_id": 1238,
        "answer_sql": ""
    },
    {
        "question_id": 1239,
        "answer_sql": ""
    },
    {
        "question_id": 1240,
        "answer_sql": "SELECT AVG(HCT) FROM Laboratory WHERE Date LIKE '1991%' AND HCT < 29;"
    },
    {
        "question_id": 1241,
        "answer_sql": "SELECT SUM(CASE WHEN LABORATORY.PLT < 100 THEN 1 ELSE 0 END) AS below_normal, SUM(CASE WHEN LABORATORY.PLT > 400 THEN 1 ELSE 0 END) AS above_normal FROM LABORATORY JOIN Patient ON LABORATORY.ID = Patient.ID;"
    },
    {
        "question_id": 1242,
        "answer_sql": ""
    },
    {
        "question_id": 1243,
        "answer_sql": ""
    },
    {
        "question_id": 1244,
        "answer_sql": "SELECT p.ID, p.SEX, p.Birthday, p.Description, p.`First Date`, p.Admission, p.Diagnosis FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE STRFTIME('%Y', p.`First Date`) > '1992' AND l.PT < 14;"
    },
    {
        "question_id": 1245,
        "answer_sql": ""
    },
    {
        "question_id": 1246,
        "answer_sql": ""
    },
    {
        "question_id": 1247,
        "answer_sql": ""
    },
    {
        "question_id": 1248,
        "answer_sql": "SELECT COUNT(DISTINCT Patient.ID) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.Birthday > '1980-01-01' AND Laboratory.FG BETWEEN 150 AND 450;"
    },
    {
        "question_id": 1249,
        "answer_sql": ""
    },
    {
        "question_id": 1250,
        "answer_sql": "SELECT p.ID FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE e.Diagnosis = 'SLE' AND p.ID IN (SELECT l.ID FROM Laboratory l WHERE l.`U-PRO` BETWEEN 0 AND 30);"
    },
    {
        "question_id": 1251,
        "answer_sql": ""
    },
    {
        "question_id": 1252,
        "answer_sql": ""
    },
    {
        "question_id": 1253,
        "answer_sql": ""
    },
    {
        "question_id": 1254,
        "answer_sql": ""
    },
    {
        "question_id": 1255,
        "answer_sql": "SELECT Diagnosis, COUNT(*) AS Frequency FROM Examination WHERE `aCL IgM` NOT BETWEEN 40 AND 400 GROUP BY Diagnosis ORDER BY Frequency DESC LIMIT 1;"
    },
    {
        "question_id": 1256,
        "answer_sql": ""
    },
    {
        "question_id": 1257,
        "answer_sql": ""
    },
    {
        "question_id": 1258,
        "answer_sql": ""
    },
    {
        "question_id": 1259,
        "answer_sql": ""
    },
    {
        "question_id": 1260,
        "answer_sql": ""
    },
    {
        "question_id": 1261,
        "answer_sql": ""
    },
    {
        "question_id": 1262,
        "answer_sql": ""
    },
    {
        "question_id": 1263,
        "answer_sql": ""
    },
    {
        "question_id": 1264,
        "answer_sql": ""
    },
    {
        "question_id": 1265,
        "answer_sql": "SELECT COUNT(DISTINCT Patient.ID) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.RNP IN ('-', '+-') AND Patient.Admission = '+';"
    },
    {
        "question_id": 1266,
        "answer_sql": "SELECT P.Birthday AS `Date of Birth` FROM Patient P INNER JOIN Laboratory L ON P.ID = L.ID WHERE L.RNP NOT IN('-', '+-') ORDER BY P.Birthday ASC LIMIT 1;"
    },
    {
        "question_id": 1267,
        "answer_sql": ""
    },
    {
        "question_id": 1268,
        "answer_sql": ""
    },
    {
        "question_id": 1269,
        "answer_sql": ""
    },
    {
        "question_id": 1270,
        "answer_sql": ""
    },
    {
        "question_id": 1271,
        "answer_sql": ""
    },
    {
        "question_id": 1272,
        "answer_sql": ""
    },
    {
        "question_id": 1273,
        "answer_sql": "SELECT COUNT(DISTINCT p.ID) FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE e.`ANA Pattern` = '-' OR e.`ANA Pattern` = '+-' AND e.Diagnosis = 'SLE';"
    },
    {
        "question_id": 1274,
        "answer_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Examination T1 JOIN Patient T2 ON T1.ID = T2.ID WHERE T1.`ANA Pattern` IN ('-', '+-') AND T1.Symptoms IS NOT NULL;"
    },
    {
        "question_id": 1275,
        "answer_sql": ""
    },
    {
        "question_id": 1276,
        "answer_sql": ""
    },
    {
        "question_id": 1277,
        "answer_sql": "SELECT COUNT(DISTINCT Patient.ID) FROM Patient LEFT JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.`DNA` IS NULL AND Patient.Description IS NULL;"
    },
    {
        "question_id": 1278,
        "answer_sql": "SELECT COUNT(*) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.`DNA-II` > 8 AND p.Admission = '+';"
    },
    {
        "question_id": 1279,
        "answer_sql": ""
    },
    {
        "question_id": 1280,
        "answer_sql": "SELECT COUNT(*) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.SEX = 'M' AND l.GOT < 60;"
    },
    {
        "question_id": 1281,
        "answer_sql": ""
    },
    {
        "question_id": 1282,
        "answer_sql": "SELECT p.Birthday, p.ID FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.GPT < 60 ORDER BY l.GPT DESC LIMIT 3;"
    },
    {
        "question_id": 1283,
        "answer_sql": ""
    },
    {
        "question_id": 1284,
        "answer_sql": ""
    },
    {
        "question_id": 1285,
        "answer_sql": ""
    },
    {
        "question_id": 1286,
        "answer_sql": "SELECT COUNT(*) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.ALP >= 300 AND p.Admission = '+';"
    },
    {
        "question_id": 1287,
        "answer_sql": "SELECT COUNT(*) FROM Patient p LEFT JOIN Laboratory l ON p.ID = l.ID WHERE p.Admission = '-' AND l.ALP < 300;"
    },
    {
        "question_id": 1288,
        "answer_sql": "SELECT DISTINCT T2.Diagnosis FROM Laboratory T1 INNER JOIN Examination T2 ON T1.ID = T2.ID WHERE T1.TP < 6.0;"
    },
    {
        "question_id": 1289,
        "answer_sql": "SELECT COUNT(*) FROM Examination e JOIN Patient p ON e.ID = p.ID WHERE e.Diagnosis = 'SJS' AND EXISTS ( SELECT 1 FROM Laboratory l WHERE l.ID = e.ID AND l.TP > 6.0 AND l.TP < 8.5 );"
    },
    {
        "question_id": 1290,
        "answer_sql": "SELECT E.`Examination Date` FROM Examination E JOIN Laboratory L ON E.ID = L.ID WHERE L.ALB > 3.5 AND L.ALB < 5.5 ORDER BY L.ALB DESC LIMIT 1;"
    },
    {
        "question_id": 1291,
        "answer_sql": "SELECT COUNT(*) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.SEX = 'M' AND l.ALB > 3.5 AND l.ALB < 5.5 AND l.TP BETWEEN 6.0 AND 8.5;"
    },
    {
        "question_id": 1292,
        "answer_sql": ""
    },
    {
        "question_id": 1293,
        "answer_sql": ""
    },
    {
        "question_id": 1294,
        "answer_sql": ""
    },
    {
        "question_id": 1295,
        "answer_sql": ""
    },
    {
        "question_id": 1296,
        "answer_sql": ""
    },
    {
        "question_id": 1297,
        "answer_sql": ""
    },
    {
        "question_id": 1298,
        "answer_sql": ""
    },
    {
        "question_id": 1299,
        "answer_sql": ""
    },
    {
        "question_id": 1300,
        "answer_sql": ""
    },
    {
        "question_id": 1301,
        "answer_sql": "SELECT DISTINCT Patient.ID FROM Patient LEFT JOIN Examination ON Patient.ID = Examination.ID LEFT JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Examination.Thrombosis = 0 AND Laboratory.CPK < 250;"
    },
    {
        "question_id": 1302,
        "answer_sql": "SELECT COUNT(*) FROM Examination e JOIN Laboratory l ON e.ID = l.ID WHERE e.Thrombosis IS NOT NULL AND l.CPK < 250 AND (e.KCT = '+' OR e.RVVT = '+' OR e.LAC = '+');"
    },
    {
        "question_id": 1303,
        "answer_sql": ""
    },
    {
        "question_id": 1304,
        "answer_sql": ""
    },
    {
        "question_id": 1305,
        "answer_sql": ""
    },
    {
        "question_id": 1306,
        "answer_sql": ""
    },
    {
        "question_id": 1307,
        "answer_sql": "SELECT p.ID FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.RBC <= 3.5 OR l.RBC >= 6.0 AND p.Admission = '-';"
    },
    {
        "question_id": 1308,
        "answer_sql": ""
    },
    {
        "question_id": 1309,
        "answer_sql": "SELECT PLT FROM Laboratory JOIN Patient ON Laboratory.ID = Patient.ID WHERE PLT BETWEEN 100 AND 400 AND Diagnosis = 'MCTD';"
    },
    {
        "question_id": 1310,
        "answer_sql": ""
    },
    {
        "question_id": 1311,
        "answer_sql": ""
    },
    {
        "question_id": 1312,
        "answer_sql": ""
    },
    {
        "question_id": 1313,
        "answer_sql": "SELECT COUNT(*) FROM member WHERE link_to_major IN ( SELECT major_id FROM major WHERE department = 'College of Engineering' );"
    },
    {
        "question_id": 1314,
        "answer_sql": ""
    },
    {
        "question_id": 1315,
        "answer_sql": ""
    },
    {
        "question_id": 1316,
        "answer_sql": ""
    },
    {
        "question_id": 1317,
        "answer_sql": ""
    },
    {
        "question_id": 1318,
        "answer_sql": "SELECT e.event_id, e.event_name, COUNT(a.link_to_event) AS total_attendance FROM event e JOIN attendance a ON e.event_id = a.link_to_event GROUP BY e.event_id, e.event_name ORDER BY total_attendance DESC LIMIT 1;"
    },
    {
        "question_id": 1319,
        "answer_sql": "SELECT college FROM major WHERE major_id IN (SELECT link_to_major FROM member WHERE position = 'Vice President');"
    },
    {
        "question_id": 1320,
        "answer_sql": "SELECT event.event_name FROM event JOIN attendance ON event.event_id = attendance.link_to_event JOIN member ON attendance.link_to_member = member.member_id WHERE member.first_name = 'Maya' AND member.last_name = 'Mclean';"
    },
    {
        "question_id": 1321,
        "answer_sql": "SELECT COUNT(*) FROM event e JOIN attendance a ON e.event_id = a.link_to_event JOIN member m ON a.link_to_member = m.member_id WHERE e.event_date LIKE '%2019%' AND m.first_name = 'Sacha' AND m.last_name = 'Harrison';"
    },
    {
        "question_id": 1322,
        "answer_sql": "SELECT COUNT(event_id) FROM event JOIN attendance ON event.event_id = attendance.link_to_event JOIN member ON attendance.link_to_member = member.member_id WHERE event.type = 'Meeting' GROUP BY event.event_id HAVING COUNT(event_id) > 10;"
    },
    {
        "question_id": 1323,
        "answer_sql": "SELECT e.event_name FROM event e JOIN attendance a ON e.event_id = a.link_to_event GROUP BY e.event_id HAVING COUNT(a.link_to_member) > 20;"
    },
    {
        "question_id": 1324,
        "answer_sql": ""
    },
    {
        "question_id": 1325,
        "answer_sql": "SELECT MAX(cost) FROM expense WHERE link_to_budget IN (SELECT link_to_budget FROM budget WHERE link_to_event IN (SELECT event_id FROM event));"
    },
    {
        "question_id": 1326,
        "answer_sql": "SELECT COUNT(*) FROM member WHERE link_to_major = (SELECT major_id FROM major WHERE major_name = 'Environmental Engineering');"
    },
    {
        "question_id": 1327,
        "answer_sql": "SELECT member.first_name, member.last_name FROM member JOIN attendance ON member.member_id = attendance.link_to_member JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Laugh Out Loud';"
    },
    {
        "question_id": 1328,
        "answer_sql": "SELECT last_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE major_name = 'Law and Constitutional Studies';"
    },
    {
        "question_id": 1329,
        "answer_sql": "SELECT zip_code.county FROM zip_code JOIN member ON member.zip = zip_code.zip_code WHERE member.first_name = 'Sherri' AND member.last_name = 'Ramsey';"
    },
    {
        "question_id": 1330,
        "answer_sql": ""
    },
    {
        "question_id": 1331,
        "answer_sql": "SELECT SUM(amount) FROM income WHERE link_to_member IN (SELECT member_id FROM member WHERE position = 'Vice President');"
    },
    {
        "question_id": 1332,
        "answer_sql": "SELECT SUM(b.spent) FROM budget b JOIN event e ON b.link_to_event = e.event_id WHERE e.event_name = 'September Meeting' AND b.category = 'Food';"
    },
    {
        "question_id": 1333,
        "answer_sql": "SELECT m.zip, z.city, z.state FROM member m JOIN zip_code z ON m.zip = z.zip_code WHERE m.position = 'President';"
    },
    {
        "question_id": 1334,
        "answer_sql": "SELECT member.first_name, member.last_name FROM member JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.state = 'Illinois';"
    },
    {
        "question_id": 1335,
        "answer_sql": "SELECT SUM(spent) FROM budget WHERE category = 'Advertisement' AND link_to_event IN ( SELECT event_id FROM event WHERE event_name = 'September Meeting' );"
    },
    {
        "question_id": 1336,
        "answer_sql": ""
    },
    {
        "question_id": 1337,
        "answer_sql": "SELECT SUM(budget.amount) FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'October Speaker';"
    },
    {
        "question_id": 1338,
        "answer_sql": ""
    },
    {
        "question_id": 1339,
        "answer_sql": ""
    },
    {
        "question_id": 1340,
        "answer_sql": ""
    },
    {
        "question_id": 1341,
        "answer_sql": "SELECT location FROM event WHERE event_name = 'Spring Budget Review';"
    },
    {
        "question_id": 1342,
        "answer_sql": "SELECT SUM(cost) FROM expense WHERE expense_description = 'Poster' AND expense_date = '2019-09-04';"
    },
    {
        "question_id": 1343,
        "answer_sql": ""
    },
    {
        "question_id": 1344,
        "answer_sql": "SELECT notes FROM income WHERE source = 'Fundraising' AND date_received = '2019-09-14';"
    },
    {
        "question_id": 1345,
        "answer_sql": "SELECT COUNT(*) FROM major WHERE department = 'College of Humanities and Social Sciences';"
    },
    {
        "question_id": 1346,
        "answer_sql": "SELECT phone FROM member WHERE first_name = 'Carlo' AND last_name = 'Jacobs';"
    },
    {
        "question_id": 1347,
        "answer_sql": "SELECT zip_code.county FROM member JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.first_name = 'Adela' AND member.last_name = 'O''Gallagher';"
    },
    {
        "question_id": 1348,
        "answer_sql": "SELECT COUNT(*) FROM budget WHERE link_to_event = 'November Meeting' AND remaining < 0;"
    },
    {
        "question_id": 1349,
        "answer_sql": "SELECT SUM(b.amount) FROM budget b JOIN event e ON b.link_to_event = e.event_id WHERE e.event_name = 'September Speaker';"
    },
    {
        "question_id": 1350,
        "answer_sql": ""
    },
    {
        "question_id": 1351,
        "answer_sql": ""
    },
    {
        "question_id": 1352,
        "answer_sql": "SELECT COUNT(*) FROM member WHERE link_to_major = (SELECT major_id FROM major WHERE major_name = 'Human Development and Family Studies') AND t_shirt_size = 'Large';"
    },
    {
        "question_id": 1353,
        "answer_sql": "SELECT type FROM zip_code WHERE zip_code = (SELECT zip FROM member WHERE first_name = 'Christof' AND last_name = 'Nielson');"
    },
    {
        "question_id": 1354,
        "answer_sql": ""
    },
    {
        "question_id": 1355,
        "answer_sql": "SELECT state FROM zip_code JOIN member ON member.zip = zip_code.zip_code WHERE member.first_name = 'Sacha' AND member.last_name = 'Harrison';"
    },
    {
        "question_id": 1356,
        "answer_sql": ""
    },
    {
        "question_id": 1357,
        "answer_sql": ""
    },
    {
        "question_id": 1358,
        "answer_sql": ""
    },
    {
        "question_id": 1359,
        "answer_sql": ""
    },
    {
        "question_id": 1360,
        "answer_sql": "SELECT (SUM(b.spent) / COUNT(e.event_name)) * 100 FROM budget b JOIN event e ON b.link_to_event = e.event_id WHERE e.event_name = 'November Speaker' AND b.category = 'Parking';"
    },
    {
        "question_id": 1361,
        "answer_sql": "SELECT SUM(cost) FROM expense WHERE expense_description = 'Pizza';"
    },
    {
        "question_id": 1362,
        "answer_sql": "SELECT COUNT(*) FROM zip_code WHERE state = 'Virginia' AND county = 'Orange County';"
    },
    {
        "question_id": 1363,
        "answer_sql": "SELECT DISTINCT department FROM major WHERE college = 'College of Humanities and Social Sciences';"
    },
    {
        "question_id": 1364,
        "answer_sql": ""
    },
    {
        "question_id": 1365,
        "answer_sql": "SELECT e.expense_description FROM expense e JOIN budget b ON e.link_to_budget = b.budget_id WHERE b.remaining = (SELECT MIN(remaining) FROM budget);"
    },
    {
        "question_id": 1366,
        "answer_sql": "SELECT m.* FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE e.event_name = 'October Meeting';"
    },
    {
        "question_id": 1367,
        "answer_sql": "SELECT major.college FROM major JOIN member ON member.link_to_major = major.major_id GROUP BY major.college ORDER BY COUNT(member.member_id) DESC LIMIT 1;"
    },
    {
        "question_id": 1368,
        "answer_sql": ""
    },
    {
        "question_id": 1369,
        "answer_sql": "SELECT e.event_name, MAX(b.amount) AS max_budget FROM event e JOIN budget b ON e.event_id = b.link_to_event GROUP BY e.event_name ORDER BY max_budget DESC LIMIT 1;"
    },
    {
        "question_id": 1370,
        "answer_sql": "SELECT e.expense_description FROM expense e JOIN member m ON e.link_to_member = m.member_id WHERE m.position = 'Vice President';"
    },
    {
        "question_id": 1371,
        "answer_sql": "SELECT COUNT(DISTINCT a.link_to_member) FROM attendance a JOIN event e ON a.link_to_event = e.event_id WHERE e.event_name = 'Women''s Soccer';"
    },
    {
        "question_id": 1372,
        "answer_sql": "SELECT date_received FROM income WHERE link_to_member = (SELECT member_id FROM member WHERE first_name = 'Casey' AND last_name = 'Mason');"
    },
    {
        "question_id": 1373,
        "answer_sql": "SELECT COUNT(*) FROM member WHERE zip IN ( SELECT zip_code FROM zip_code WHERE state = 'Maryland' );"
    },
    {
        "question_id": 1374,
        "answer_sql": "SELECT COUNT(*) FROM attendance a JOIN event e ON a.link_to_event = e.event_id JOIN member m ON a.link_to_member = m.member_id WHERE m.phone = '954-555-6240';"
    },
    {
        "question_id": 1375,
        "answer_sql": "SELECT member.first_name, member.last_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'School of Applied Sciences, Technology and Education';"
    },
    {
        "question_id": 1376,
        "answer_sql": ""
    },
    {
        "question_id": 1377,
        "answer_sql": "SELECT COUNT(*) FROM member WHERE position = 'President';"
    },
    {
        "question_id": 1378,
        "answer_sql": "SELECT MAX(spent) FROM budget;"
    },
    {
        "question_id": 1379,
        "answer_sql": ""
    },
    {
        "question_id": 1380,
        "answer_sql": "SELECT SUM(b.spent) AS total_food_spent FROM budget b JOIN expense e ON b.budget_id = e.link_to_budget WHERE b.category = 'Food';"
    },
    {
        "question_id": 1381,
        "answer_sql": "SELECT member.first_name, member.last_name FROM member JOIN attendance ON member.member_id = attendance.link_to_member GROUP BY member.member_id HAVING COUNT(attendance.link_to_event) > 7;"
    },
    {
        "question_id": 1382,
        "answer_sql": "SELECT member.first_name, member.last_name FROM member JOIN attendance ON member.member_id = attendance.link_to_member JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Community Theater' AND member.link_to_major = (SELECT major_id FROM major WHERE major_name = 'Interior Design');"
    },
    {
        "question_id": 1383,
        "answer_sql": "SELECT first_name || ' ' || last_name AS full_name FROM member JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.city = 'Georgetown' AND zip_code.state = 'South Carolina';"
    },
    {
        "question_id": 1384,
        "answer_sql": "SELECT SUM(income.amount) FROM income JOIN member ON income.link_to_member = member.member_id WHERE member.first_name = 'Grant' AND member.last_name = 'Gilmour';"
    },
    {
        "question_id": 1385,
        "answer_sql": "SELECT member.first_name, member.last_name FROM member JOIN income ON member.member_id = income.link_to_member WHERE income.amount > 40;"
    },
    {
        "question_id": 1386,
        "answer_sql": "SELECT SUM(e.cost) AS total_expense FROM expense e JOIN budget b ON e.link_to_budget = b.budget_id JOIN event eve ON b.link_to_event = eve.event_id WHERE eve.event_name = 'Baseball game';"
    },
    {
        "question_id": 1387,
        "answer_sql": ""
    },
    {
        "question_id": 1388,
        "answer_sql": ""
    },
    {
        "question_id": 1389,
        "answer_sql": ""
    },
    {
        "question_id": 1390,
        "answer_sql": ""
    },
    {
        "question_id": 1391,
        "answer_sql": "SELECT SUM(CASE WHEN major_name = 'Finance' THEN 1 ELSE 0 END) / SUM(CASE WHEN major_name = 'Physics' THEN 1 ELSE 0 END) AS ratio FROM major;"
    },
    {
        "question_id": 1392,
        "answer_sql": "SELECT source, SUM(amount) AS total_amount FROM income WHERE date_received BETWEEN '2019-09-01' AND '2019-09-30' GROUP BY source ORDER BY total_amount DESC LIMIT 1;"
    },
    {
        "question_id": 1393,
        "answer_sql": "SELECT first_name || ' ' || last_name AS full_name, email FROM member WHERE position = 'Secretary';"
    },
    {
        "question_id": 1394,
        "answer_sql": "SELECT COUNT(*) FROM member WHERE link_to_major = (SELECT major_id FROM major WHERE major_name = 'Physics Teaching');"
    },
    {
        "question_id": 1395,
        "answer_sql": ""
    },
    {
        "question_id": 1396,
        "answer_sql": ""
    },
    {
        "question_id": 1397,
        "answer_sql": ""
    },
    {
        "question_id": 1398,
        "answer_sql": "SELECT e.event_name FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE b.category = 'Advertisement' ORDER BY b.spent DESC LIMIT 1;"
    },
    {
        "question_id": 1399,
        "answer_sql": "SELECT COUNT(*) > 0 FROM attendance a JOIN event e ON a.link_to_event = e.event_id WHERE e.event_name = 'Women''s Soccer' AND a.link_to_member = (SELECT member_id FROM member WHERE first_name = 'Maya' AND last_name = 'Mclean');"
    },
    {
        "question_id": 1400,
        "answer_sql": ""
    },
    {
        "question_id": 1401,
        "answer_sql": ""
    },
    {
        "question_id": 1402,
        "answer_sql": ""
    },
    {
        "question_id": 1403,
        "answer_sql": "SELECT e.event_name FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE e.status = 'Closed' AND b.remaining < 0 ORDER BY b.remaining LIMIT 1;"
    },
    {
        "question_id": 1404,
        "answer_sql": ""
    },
    {
        "question_id": 1405,
        "answer_sql": "SELECT b.category, b.spent FROM budget b JOIN event e ON b.link_to_event = e.event_id WHERE e.event_name = 'April Speaker' ORDER BY b.spent ASC;"
    },
    {
        "question_id": 1406,
        "answer_sql": "SELECT MAX(amount) FROM budget WHERE category = 'Food';"
    },
    {
        "question_id": 1407,
        "answer_sql": "SELECT budget_id, amount FROM budget WHERE category = 'Advertisement' ORDER BY amount DESC LIMIT 3;"
    },
    {
        "question_id": 1408,
        "answer_sql": "SELECT SUM(cost) FROM expense WHERE expense_description = 'Parking';"
    },
    {
        "question_id": 1409,
        "answer_sql": "SELECT SUM(cost) AS total_expense FROM expense WHERE expense_date = '2019-08-20';"
    },
    {
        "question_id": 1410,
        "answer_sql": "SELECT member.first_name, member.last_name, SUM(expense.cost) AS total_cost FROM member JOIN expense ON member.member_id = expense.link_to_member WHERE member.member_id = 'rec4BLdZHS2Blfp4v' GROUP BY member.first_name, member.last_name;"
    },
    {
        "question_id": 1411,
        "answer_sql": "SELECT expense_description FROM expense WHERE link_to_member = (SELECT member_id FROM member WHERE first_name = 'Sacha' AND last_name = 'Harrison');"
    },
    {
        "question_id": 1412,
        "answer_sql": "SELECT e.expense_description FROM expense e JOIN member m ON e.link_to_member = m.member_id WHERE m.t_shirt_size = 'X-Large';"
    },
    {
        "question_id": 1413,
        "answer_sql": "SELECT zip FROM member JOIN expense ON member.member_id = expense.link_to_member WHERE expense.cost < 50;"
    },
    {
        "question_id": 1414,
        "answer_sql": ""
    },
    {
        "question_id": 1415,
        "answer_sql": ""
    },
    {
        "question_id": 1416,
        "answer_sql": "SELECT COUNT(*) FROM member WHERE link_to_major = (SELECT major_id FROM major WHERE major_name = 'Business') AND t_shirt_size = 'Medium';"
    },
    {
        "question_id": 1417,
        "answer_sql": "SELECT e.type FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE b.remaining > 30;"
    },
    {
        "question_id": 1418,
        "answer_sql": ""
    },
    {
        "question_id": 1419,
        "answer_sql": ""
    },
    {
        "question_id": 1420,
        "answer_sql": ""
    },
    {
        "question_id": 1421,
        "answer_sql": ""
    },
    {
        "question_id": 1422,
        "answer_sql": ""
    },
    {
        "question_id": 1423,
        "answer_sql": "SELECT COUNT(*) FROM income WHERE amount = 50;"
    },
    {
        "question_id": 1424,
        "answer_sql": "SELECT COUNT(*) FROM member WHERE position = 'Member' AND t_shirt_size = 'X-Large';"
    },
    {
        "question_id": 1425,
        "answer_sql": "SELECT COUNT(major_id) FROM major WHERE department = 'School of Applied Sciences, Technology and Education' AND college = 'College of Agriculture and Applied Sciences';"
    },
    {
        "question_id": 1426,
        "answer_sql": "SELECT m.last_name, m.link_to_major, major.major_name, major.department, major.college FROM member m JOIN major ON m.link_to_major = major.major_id WHERE major.major_name = 'Environmental Engineering';"
    },
    {
        "question_id": 1427,
        "answer_sql": "SELECT b.category FROM budget b JOIN event e ON b.link_to_event = e.event_id WHERE e.location = 'MU 215' AND b.spent = 0 AND e.type = 'Guest Speaker';"
    },
    {
        "question_id": 1428,
        "answer_sql": ""
    },
    {
        "question_id": 1429,
        "answer_sql": ""
    },
    {
        "question_id": 1430,
        "answer_sql": "SELECT last_name, position FROM member JOIN expense ON member.member_id = expense.link_to_member JOIN budget ON expense.link_to_budget = budget.budget_id JOIN event ON budget.link_to_event = event.event_id WHERE expense.expense_description = 'Pizza' AND expense.expense_date = '2019-09-10';"
    },
    {
        "question_id": 1431,
        "answer_sql": "SELECT last_name FROM member JOIN attendance ON member.member_id = attendance.link_to_member JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer' AND member.position = 'Member';"
    },
    {
        "question_id": 1432,
        "answer_sql": ""
    },
    {
        "question_id": 1433,
        "answer_sql": "SELECT DISTINCT zip_code.state FROM zip_code WHERE zip_code.type = 'PO Box';"
    },
    {
        "question_id": 1434,
        "answer_sql": ""
    },
    {
        "question_id": 1435,
        "answer_sql": "SELECT event_name FROM event WHERE type = 'Game' AND status = 'Closed' AND event_date BETWEEN '2019-03-15' AND '2020-03-20';"
    },
    {
        "question_id": 1436,
        "answer_sql": ""
    },
    {
        "question_id": 1437,
        "answer_sql": ""
    },
    {
        "question_id": 1438,
        "answer_sql": ""
    },
    {
        "question_id": 1439,
        "answer_sql": ""
    },
    {
        "question_id": 1440,
        "answer_sql": "SELECT email FROM member JOIN income ON member.member_id = income.link_to_member WHERE income.date_received BETWEEN '2019-09-10' AND '2019-11-19' AND income.amount > 20;"
    },
    {
        "question_id": 1441,
        "answer_sql": "SELECT COUNT(*) FROM member WHERE link_to_major = (SELECT major_id FROM major WHERE major_name = 'education') AND position = 'Member';"
    },
    {
        "question_id": 1442,
        "answer_sql": ""
    },
    {
        "question_id": 1443,
        "answer_sql": "SELECT event_id, location, status FROM event WHERE event_date BETWEEN '2019-11-01' AND '2020-03-31';"
    },
    {
        "question_id": 1444,
        "answer_sql": "SELECT expense_description, SUM(cost) FROM expense GROUP BY expense_description HAVING SUM(cost) / COUNT(expense_id) > 50;"
    },
    {
        "question_id": 1445,
        "answer_sql": "SELECT member.first_name || ' ' || member.last_name AS full_name FROM member WHERE member.t_shirt_size = 'X-Large';"
    },
    {
        "question_id": 1446,
        "answer_sql": ""
    },
    {
        "question_id": 1447,
        "answer_sql": "SELECT e.event_name, e.location FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE b.remaining > 0;"
    },
    {
        "question_id": 1448,
        "answer_sql": ""
    },
    {
        "question_id": 1449,
        "answer_sql": ""
    },
    {
        "question_id": 1450,
        "answer_sql": ""
    },
    {
        "question_id": 1451,
        "answer_sql": ""
    },
    {
        "question_id": 1452,
        "answer_sql": ""
    },
    {
        "question_id": 1453,
        "answer_sql": ""
    },
    {
        "question_id": 1454,
        "answer_sql": ""
    },
    {
        "question_id": 1455,
        "answer_sql": "SELECT b.budget_id, b.spent FROM budget b JOIN expense e ON b.budget_id = e.link_to_budget WHERE e.expense_description = 'Water, chips, cookies' ORDER BY e.cost DESC LIMIT 1;"
    },
    {
        "question_id": 1456,
        "answer_sql": "SELECT member.first_name, member.last_name, SUM(expense.cost) AS total_spent FROM member JOIN expense ON member.member_id = expense.link_to_member GROUP BY member.member_id ORDER BY total_spent DESC LIMIT 5;"
    },
    {
        "question_id": 1457,
        "answer_sql": "SELECT m.first_name, m.last_name, m.phone FROM member m JOIN expense e ON m.member_id = e.link_to_member WHERE e.cost > (SELECT AVG(cost) FROM expense)"
    },
    {
        "question_id": 1458,
        "answer_sql": "SELECT (SUM(CASE WHEN member.zip IN (SELECT zip_code FROM zip_code WHERE state = 'Maine') THEN 1 ELSE 0 END) * 100.0 / COUNT(member.position)) - (SUM(CASE WHEN member.zip IN (SELECT zip_code FROM zip_code WHERE state = 'Vermont') THEN 1 ELSE 0 END) * 100.0 / COUNT(member.position)) AS difference_percentage FROM member;"
    },
    {
        "question_id": 1459,
        "answer_sql": "SELECT major_name, department FROM major WHERE major_id IN (SELECT link_to_major FROM member WHERE first_name = 'Garrett' AND last_name = 'Gerke');"
    },
    {
        "question_id": 1460,
        "answer_sql": "SELECT member.first_name, member.last_name, e.cost FROM member JOIN expense e ON member.member_id = e.link_to_member WHERE e.expense_description = 'Water, Veggie tray, supplies';"
    },
    {
        "question_id": 1461,
        "answer_sql": "SELECT last_name, phone FROM member WHERE link_to_major = (SELECT major_id FROM major WHERE major_name = 'Elementary Education');"
    },
    {
        "question_id": 1462,
        "answer_sql": "SELECT category, amount FROM budget WHERE link_to_event = (SELECT event_id FROM event WHERE event_name = 'January Speaker');"
    },
    {
        "question_id": 1463,
        "answer_sql": "SELECT event.event_name FROM event JOIN budget ON event.event_id = budget.link_to_event WHERE budget.category = 'Food';"
    },
    {
        "question_id": 1464,
        "answer_sql": "SELECT member.first_name, member.last_name, income.amount FROM member JOIN income ON member.member_id = income.link_to_member WHERE income.date_received = '2019-09-09'"
    },
    {
        "question_id": 1465,
        "answer_sql": "SELECT category FROM budget WHERE link_to_event = (SELECT link_to_event FROM expense WHERE expense_description = 'Posters');"
    },
    {
        "question_id": 1466,
        "answer_sql": "SELECT member.first_name || ' ' || member.last_name AS full_name, major.major_name AS college FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Secretary';"
    },
    {
        "question_id": 1467,
        "answer_sql": "SELECT e.event_name, SUM(b.spent) AS total_spent FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE b.category = 'Speaker Gifts' GROUP BY e.event_name;"
    },
    {
        "question_id": 1468,
        "answer_sql": ""
    },
    {
        "question_id": 1469,
        "answer_sql": "SELECT member.first_name, member.last_name, member.position FROM member JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.city = 'Lincolnton' AND zip_code.state = 'North Carolina' AND zip_code.zip_code = 28092;"
    },
    {
        "question_id": 1470,
        "answer_sql": "SELECT COUNT(*) FROM gasstations WHERE Country = 'CZE' AND Segment LIKE '%Premium%';"
    },
    {
        "question_id": 1471,
        "answer_sql": "SELECT (COUNT(CASE WHEN customers.Currency = 'EUR' THEN 1 END)) / (COUNT(CASE WHEN customers.Currency = 'CZK' THEN 1 END)) AS ratio FROM customers;"
    },
    {
        "question_id": 1472,
        "answer_sql": "SELECT CustomerID FROM yearmonth WHERE Date BETWEEN '201201' AND '201212' ORDER BY Consumption ASC LIMIT 1;"
    },
    {
        "question_id": 1473,
        "answer_sql": "SELECT AVG(Consumption) / 12 AS Average_Monthly_Consumption FROM yearmonth WHERE Date BETWEEN '20130101' AND '20131231' AND CustomerID IN ( SELECT CustomerID FROM customers WHERE Segment = 'SME' );"
    },
    {
        "question_id": 1474,
        "answer_sql": ""
    },
    {
        "question_id": 1475,
        "answer_sql": "SELECT COUNT(*) FROM yearmonth WHERE CustomerID IN ( SELECT CustomerID FROM customers WHERE Segment = 'KAM' ) AND Date BETWEEN '201201' AND '201212' AND Consumption < 30000;"
    },
    {
        "question_id": 1476,
        "answer_sql": "SELECT (SELECT SUM(Consumption) FROM yearmonth WHERE Date BETWEEN '201201' AND '201212' AND CustomerID IN (SELECT CustomerID FROM customers WHERE Currency = 'CZK')) - (SELECT SUM(Consumption) FROM yearmonth WHERE Date BETWEEN '201201' AND '201212' AND CustomerID IN (SELECT CustomerID FROM customers WHERE Currency = 'EUR')) AS Difference;"
    },
    {
        "question_id": 1477,
        "answer_sql": ""
    },
    {
        "question_id": 1478,
        "answer_sql": "SELECT c.Segment, SUM(l.Consumption) AS TotalConsumption FROM customers c JOIN yearmonth l ON c.CustomerID = l.CustomerID GROUP BY c.Segment ORDER BY TotalConsumption ASC LIMIT 1;"
    },
    {
        "question_id": 1479,
        "answer_sql": ""
    },
    {
        "question_id": 1480,
        "answer_sql": ""
    },
    {
        "question_id": 1481,
        "answer_sql": ""
    },
    {
        "question_id": 1482,
        "answer_sql": ""
    },
    {
        "question_id": 1483,
        "answer_sql": "SELECT SUM(Consumption) FROM yearmonth WHERE Date BETWEEN '201308' AND '201311' AND CustomerID = 6;"
    },
    {
        "question_id": 1484,
        "answer_sql": "SELECT (SELECT COUNT(*) FROM gasstations WHERE Country = 'Czech Republic' AND Segment = 'discount') - (SELECT COUNT(*) FROM gasstations WHERE Country = 'Slovakia' AND Segment = 'discount') AS Difference;"
    },
    {
        "question_id": 1485,
        "answer_sql": "SELECT (SELECT Consumption FROM yearmonth WHERE Date = '201304' AND CustomerID = 7) - (SELECT Consumption FROM yearmonth WHERE Date = '201304' AND CustomerID = 5);"
    },
    {
        "question_id": 1486,
        "answer_sql": ""
    },
    {
        "question_id": 1487,
        "answer_sql": ""
    },
    {
        "question_id": 1488,
        "answer_sql": "SELECT c.CustomerID, c.Segment, SUM(t.Amount) AS TotalConsumption FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID WHERE c.CustomerID IN ( SELECT CustomerID FROM customers WHERE Segment = 'KAM' ) GROUP BY c.CustomerID, c.Segment ORDER BY TotalConsumption DESC LIMIT 1;"
    },
    {
        "question_id": 1489,
        "answer_sql": "SELECT SUM(Consumption) FROM yearmonth WHERE Date = '201305' AND CustomerID IN (SELECT CustomerID FROM customers WHERE Segment = 'KAM');"
    },
    {
        "question_id": 1490,
        "answer_sql": "SELECT (COUNT(DISTINCT CASE WHEN T.CustomerID IN (SELECT CustomerID FROM customers WHERE Segment = 'LAM') AND T.Amount > 46.73 THEN T.CustomerID END) * 100) / COUNT(DISTINCT CASE WHEN T.CustomerID IN (SELECT CustomerID FROM customers WHERE Segment = 'LAM') THEN T.CustomerID END) AS Percentage FROM transactions_1k T;"
    },
    {
        "question_id": 1491,
        "answer_sql": "SELECT Country, COUNT(*) as TotalValueForMoneyStations FROM gasstations gs JOIN transactions_1k t ON gs.GasStationID = t.GasStationID WHERE t.Amount / t.Price > 1 -- Assuming value for money is defined as amount being greater than price GROUP BY Country;"
    },
    {
        "question_id": 1492,
        "answer_sql": "SELECT (SUM(CASE WHEN T1.Currency = 'EUR' THEN 1 ELSE 0 END) * 100) / COUNT(T1.CustomerID) FROM customers T1 JOIN transactions_1k T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'KAM';"
    },
    {
        "question_id": 1493,
        "answer_sql": "SELECT (SUM(CASE WHEN Consumption > 528.3 THEN 1 ELSE 0 END) * 100.0) / COUNT(*) FROM yearmonth WHERE Date = '201202';"
    },
    {
        "question_id": 1494,
        "answer_sql": "SELECT (COUNT(CASE WHEN gasstations.Country = 'Slovakia' AND gasstations.Segment = 'premium' THEN 1 END) * 100) / COUNT(gasstations.GasStationID) FROM gasstations;"
    },
    {
        "question_id": 1495,
        "answer_sql": "SELECT CustomerID FROM yearmonth WHERE Date = '201309' ORDER BY Consumption DESC LIMIT 1;"
    },
    {
        "question_id": 1496,
        "answer_sql": "SELECT c.Segment FROM customers c JOIN yearmonth ym ON c.CustomerID = ym.CustomerID WHERE ym.Date = '201309' ORDER BY ym.Consumption ASC LIMIT 1;"
    },
    {
        "question_id": 1497,
        "answer_sql": "SELECT c.CustomerID, c.Segment, c.Currency, MAX(y.Consumption) AS LeastConsumption FROM customers c JOIN yearmonth y ON c.CustomerID = y.CustomerID WHERE y.Date = '201206' GROUP BY c.CustomerID, c.Segment, c.Currency ORDER BY LeastConsumption ASC LIMIT 1;"
    },
    {
        "question_id": 1498,
        "answer_sql": "SELECT MAX(Consumption) FROM yearmonth WHERE strftime('%Y', Date) = '2012';"
    },
    {
        "question_id": 1499,
        "answer_sql": ""
    },
    {
        "question_id": 1500,
        "answer_sql": ""
    },
    {
        "question_id": 1501,
        "answer_sql": ""
    },
    {
        "question_id": 1502,
        "answer_sql": ""
    },
    {
        "question_id": 1503,
        "answer_sql": ""
    },
    {
        "question_id": 1504,
        "answer_sql": "SELECT AVG(Price) FROM transactions_1k WHERE Date LIKE '2012-01%';"
    },
    {
        "question_id": 1505,
        "answer_sql": "SELECT COUNT(*) FROM yearmonth WHERE Consumption > 1000 AND CustomerID IN (SELECT CustomerID FROM customers WHERE Currency = 'EUR');"
    },
    {
        "question_id": 1506,
        "answer_sql": "SELECT p.Description FROM transactions_1k t JOIN gasstations gs ON t.GasStationID = gs.GasStationID JOIN products p ON t.ProductID = p.ProductID WHERE gs.Country = 'CZE';"
    },
    {
        "question_id": 1507,
        "answer_sql": "SELECT Time FROM transactions_1k WHERE GasStationID IN (SELECT GasStationID FROM gasstations WHERE ChainID = 11);"
    },
    {
        "question_id": 1508,
        "answer_sql": "SELECT COUNT(*) FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE g.Country = 'CZE' AND t.Price > 1000;"
    },
    {
        "question_id": 1509,
        "answer_sql": "SELECT COUNT(*) FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE g.Country = 'CZE' AND t.Date > '2012-01-01';"
    },
    {
        "question_id": 1510,
        "answer_sql": "SELECT AVG(Price) FROM transactions_1k WHERE GasStationID IN (SELECT GasStationID FROM gasstations WHERE Country = 'CZE');"
    },
    {
        "question_id": 1511,
        "answer_sql": "SELECT AVG(t.Amount) FROM transactions_1k t JOIN customers c ON t.CustomerID = c.CustomerID WHERE c.Currency = 'EUR';"
    },
    {
        "question_id": 1512,
        "answer_sql": "SELECT CustomerID, SUM(Amount) AS TotalPaid FROM transactions_1k WHERE Date = '2012-08-25' GROUP BY CustomerID ORDER BY TotalPaid DESC LIMIT 1;"
    },
    {
        "question_id": 1513,
        "answer_sql": "SELECT Country FROM gasstations AS g JOIN transactions_1k AS t ON g.GasStationID = t.GasStationID WHERE t.Date = '2012-08-25' ORDER BY t.Date ASC LIMIT 1;"
    },
    {
        "question_id": 1514,
        "answer_sql": "SELECT C.Currency FROM customers C JOIN transactions_1k T ON C.CustomerID = T.CustomerID WHERE T.Date = '2012-08-24' AND T.Time = '16:25:00';"
    },
    {
        "question_id": 1515,
        "answer_sql": "SELECT T2.Segment FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '2012-08-23' AND T1.Time = '21:20:00';"
    },
    {
        "question_id": 1516,
        "answer_sql": "SELECT COUNT(*) FROM transactions_1k WHERE Date = '2012-08-26' AND Time < '13:00:00' AND Amount > 0;"
    },
    {
        "question_id": 1517,
        "answer_sql": "SELECT Segment FROM customers ORDER BY CustomerID LIMIT 1;"
    },
    {
        "question_id": 1518,
        "answer_sql": "SELECT Country FROM gasstations AS T1 WHERE T1.GasStationID = (SELECT GasStationID FROM transactions_1k WHERE Date = '2012-08-24' AND Time = '12:42:00')"
    },
    {
        "question_id": 1519,
        "answer_sql": "SELECT T1.ProductID FROM transactions_1k AS T1 WHERE T1.Date = '2012-08-23' AND T1.Time = '21:20:00';"
    },
    {
        "question_id": 1520,
        "answer_sql": ""
    },
    {
        "question_id": 1521,
        "answer_sql": "SELECT COUNT(*) FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE t.Date = '2012-08-26' AND t.Time BETWEEN '08:00' AND '09:00' AND g.Country = 'CZE';"
    },
    {
        "question_id": 1522,
        "answer_sql": "SELECT c.Currency FROM customers c JOIN yearmonth y ON c.CustomerID = y.CustomerID WHERE y.Date LIKE '201306' AND y.Consumption = 214582.17;"
    },
    {
        "question_id": 1523,
        "answer_sql": "SELECT Country FROM gasstations WHERE GasStationID = (SELECT GasStationID FROM transactions_1k WHERE CardID = 667467);"
    },
    {
        "question_id": 1524,
        "answer_sql": ""
    },
    {
        "question_id": 1525,
        "answer_sql": "SELECT (COUNT(DISTINCT CASE WHEN C.Currency = 'EUR' THEN T.CustomerID END) / COUNT(T.CustomerID)) * 100 AS Percentage FROM transactions_1k T JOIN customers C ON T.CustomerID = C.CustomerID WHERE T.Date = '2012-08-25';"
    },
    {
        "question_id": 1526,
        "answer_sql": ""
    },
    {
        "question_id": 1527,
        "answer_sql": "SELECT GasStationID, SUM(Amount) AS TotalRevenue FROM transactions_1k GROUP BY GasStationID ORDER BY TotalRevenue DESC LIMIT 1;"
    },
    {
        "question_id": 1528,
        "answer_sql": "SELECT (SUM(CASE WHEN customers.Segment = 'premium' THEN 1 ELSE 0 END) * 100) / COUNT(customers.Segment) FROM customers WHERE customers.Currency = 'SVK';"
    },
    {
        "question_id": 1529,
        "answer_sql": "SELECT SUM(Amount) FROM transactions_1k WHERE CustomerID = 38508 AND GasStationID IN (SELECT GasStationID FROM gasstations) AND Date IN ('201201');"
    },
    {
        "question_id": 1530,
        "answer_sql": "SELECT products.Description AS ProductName FROM products JOIN transactions_1k ON transactions_1k.ProductID = products.ProductID GROUP BY products.ProductID ORDER BY COUNT(*) DESC LIMIT 5;"
    },
    {
        "question_id": 1531,
        "answer_sql": "SELECT c.CustomerID, c.Currency, AVG(t.Price / t.Amount) AS AvgPricePerItem FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID GROUP BY c.CustomerID, c.Currency ORDER BY SUM(t.Amount) DESC LIMIT 1;"
    },
    {
        "question_id": 1532,
        "answer_sql": ""
    },
    {
        "question_id": 1533,
        "answer_sql": "SELECT c.CustomerID, ym.Consumption FROM customers c JOIN yearmonth ym ON c.CustomerID = ym.CustomerID JOIN transactions_1k t ON c.CustomerID = t.CustomerID WHERE t.ProductID = 5 AND t.Price / t.Amount > 29.00 AND ym.Date LIKE '201208%';"
    }
]