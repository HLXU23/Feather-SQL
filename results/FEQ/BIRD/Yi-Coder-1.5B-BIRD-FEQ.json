[{"question_id": 0, "answer_sql": []}, {"question_id": 1, "answer_sql": ["SELECT frpm.CDSCode, frpm.`County Name`, frpm.`District Name`, frpm.`School Name`, frpm.`2013-14 CALPADS Fall 1 Certification Status` FROM frpm WHERE frpm.`2013-14 CALPADS Fall 1 Certification Status` = 1 ORDER BY frpm.`2013-14 CALPADS Fall 1 Certification Status` ASC LIMIT 3;"]}, {"question_id": 2, "answer_sql": []}, {"question_id": 3, "answer_sql": ["SELECT s.CDSCode, s.School, s.Street, s.City, s.State, s.MailStreet, s.MailCity, s.MailState FROM frpm f JOIN schools s ON f.CDSCode = s.CDSCode WHERE f.`FRPM Count (K-12)` = ( SELECT MAX(`FRPM Count (K-12)`) FROM frpm )", "SELECT s.CDSCode, s.School, s.Street, s.City, s.State, s.Zip, s.MailStreet, s.MailCity, s.MailState, s.MailZip FROM frpm f JOIN schools s ON f.CDSCode = s.CDSCode WHERE f.`FRPM Count (K-12)` = ( SELECT MAX(`FRPM Count (K-12)`) FROM frpm )"]}, {"question_id": 4, "answer_sql": ["SELECT Phone, Street, City, State, State as Zip, LastUpdate FROM schools JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE `Charter School (Y/N)` = 1 AND `Charter Funding Type` = 'Direct' AND OpenDate > '2000-01-01' AND `Charter School Number` IS NOT NULL;"]}, {"question_id": 5, "answer_sql": []}, {"question_id": 6, "answer_sql": []}, {"question_id": 7, "answer_sql": []}, {"question_id": 8, "answer_sql": ["SELECT satscores.NumTstTakr FROM frpm JOIN satscores ON frpm.CDSCode = satscores.cds WHERE frpm.`FRPM Count (K-12)` = ( SELECT MAX(`FRPM Count (K-12)`) FROM frpm )"]}, {"question_id": 9, "answer_sql": ["SELECT COUNT(*) FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE satscores.AvgScrMath > 560 AND schools.Charter = 1;", "SELECT COUNT(*) FROM frpm JOIN satscores ON frpm.CDSCode = satscores.cds WHERE AvgScrMath > 560 AND satscores.rtype = 'Charter';", "SELECT COUNT(*) FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds WHERE ss.AvgScrMath > 560;"]}, {"question_id": 10, "answer_sql": ["SELECT frpm.`FRPM Count (Ages 5-17)` FROM frpm JOIN satscores ON frpm.CDSCode = satscores.cds WHERE satscores.AvgScrRead = (SELECT MAX(AvgScrRead) FROM satscores) AND satscores.rtype = 'SAT';"]}, {"question_id": 11, "answer_sql": []}, {"question_id": 12, "answer_sql": []}, {"question_id": 13, "answer_sql": ["SELECT Phone FROM schools WHERE CDSCode IN (SELECT cds FROM satscores WHERE NumTstTakr = (SELECT MAX(NumTstTakr) FROM satscores)) ORDER BY Phone;"]}, {"question_id": 14, "answer_sql": []}, {"question_id": 15, "answer_sql": ["SELECT s.District, AVG(satscores.AvgScrRead) as Average_Reading_Score FROM schools s JOIN satscores ON s.CDSCode = satscores.cds WHERE s.StatusType = 'Active' GROUP BY s.District ORDER BY Average_Reading_Score DESC LIMIT 1;"]}, {"question_id": 16, "answer_sql": ["SELECT COUNT(*) FROM frpm WHERE `County Code` = 'Alameda' AND `School Code` IN (SELECT `School Code` FROM satscores WHERE `County Code` = 'Alameda' AND NumTstTakr < 100);", "SELECT COUNT(*) FROM frpm JOIN satscores ON frpm.CDSCode = satscores.cds JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE satscores.NumTstTakr < 100;"]}, {"question_id": 17, "answer_sql": ["SELECT `Charter School Number` FROM frpm WHERE `Academic Year` = '2013-14' AND `County Code` = '060' AND `District Code` = '001' AND `School Code` = '001' AND `Educational Option Type` = 'Charter' AND `Charter School (Y/N)` = '1' AND `2013-14 CALPADS Fall 1 Certification Status` = '1' AND `Charter School Number` IS NOT NULL;"]}, {"question_id": 18, "answer_sql": []}, {"question_id": 19, "answer_sql": ["SELECT Phone FROM schools WHERE CDSCode IN (SELECT cds FROM satscores WHERE NumTstTakr = (SELECT MAX(NumTstTakr) FROM satscores));", "SELECT Phone FROM schools WHERE CDSCode IN (SELECT cds FROM satscores ORDER BY AvgScrMath DESC LIMIT 1);"]}, {"question_id": 20, "answer_sql": ["SELECT COUNT(*) FROM frpm WHERE `Low Grade` = 9 AND `High Grade` = 12 AND `County Name` = 'Amador';", "SELECT COUNT(*) FROM frpm WHERE `Low Grade` = 9 AND `High Grade` = 12;", "SELECT COUNT(*) FROM frpm WHERE `Low Grade` = 9 AND `High Grade` = 12 AND `District Name` = 'Amador';"]}, {"question_id": 21, "answer_sql": ["SELECT COUNT(*) FROM frpm WHERE `Enrollment (K-12)` > 500 AND (`Free Meal Count (K-12)` > 700 OR `Free Meal Count (K-12)` = 700);", "SELECT COUNT(*) FROM frpm WHERE `Enrollment (K-12)` > 500 AND `Free Meal Count (K-12)` > 0 AND `Free Meal Count (K-12)` < 700;", "SELECT COUNT(*) FROM frpm WHERE `Enrollment (K-12)` > 500 AND (`Free Meal Count (K-12)` > 700 OR `Free Meal Count (K-12)` > 500);"]}, {"question_id": 22, "answer_sql": ["SELECT satscores.cds, COUNT(satscores.rtype) as NumTstTakr FROM satscores JOIN frpm ON satscores.cds = frpm.CDSCode WHERE frpm.`County Code` = '060' GROUP BY satscores.cds ORDER BY NumTstTakr DESC LIMIT 1;"]}, {"question_id": 23, "answer_sql": []}, {"question_id": 24, "answer_sql": []}, {"question_id": 25, "answer_sql": ["SELECT S.School, S.FundingType FROM schools AS S JOIN ( SELECT cds, AVG(AvgScrMath) as avg_avg_math FROM satscores GROUP BY cds HAVING AVG(AvgScrMath) > 400 ) AS M ON S.CDSCode = M.cds WHERE S.City = 'Riverside'"]}, {"question_id": 26, "answer_sql": ["SELECT S.School, S.Street, S.City, S.State, S.Zip, S.MailStreet, S.MailCity, S.MailState, S.MailZip, S.MailStreet, S.MailStrAbr, S.MailCity, S.MailZip, S.MailState, S.Phone, S.Ext, S.Website, S.OpenDate, S.ClosedDate, S.Charter, S.CharterNum, S.FundingType, S.DOC, S.DOCType, S.SOC, S.SOCType, S.EdOpsCode, S.EdOpsName, S.EILCode, S.EILName, S.GSoffered, S.GSserved, S.Virtual, S.Magnet, S.Latitude, S.Longitude, S.AdmFName1, S.AdmLName1, S.AdmEmail1, S.AdmFName2, S.AdmLName2, S.AdmEmail2, S.AdmFName3, S.AdmLName3, S.AdmEmail3, S.LastUpdate FROM schools S JOIN schools_admins SA ON S.CDSCode = SA.CDSCode WHERE S.State = 'CA' AND S.City = 'Monterey' AND S.Charter = 1 AND S.CharterNum IS NOT NULL AND S.CharterNum > 800 AND S.SOC IS NOT NULL AND S.SOC = 'Free or Reduced Price Meals' AND S.SOCType = 'Ages 15-17' AND SA.LastUpdate > '2022-01-01' AND S.LastUpdate > '2022-01-01';"]}, {"question_id": 27, "answer_sql": ["SELECT s.School, satscores.AvgScrWrite FROM schools s JOIN satscores ON s.CDSCode = satscores.cds WHERE s.OpenDate > '1991-01-01' AND s.ClosedDate < '2000-01-01';"]}, {"question_id": 28, "answer_sql": []}, {"question_id": 29, "answer_sql": ["SELECT `Academic Year`, `School Name` FROM frpm WHERE `Enrollment (K-12)` = ( SELECT MAX(`Enrollment (K-12)`) FROM frpm ) AND `School Type` = 'K-12' AND `Educational Option Type` = 'Public'", "SELECT `Academic Year`, `School Name` FROM frpm WHERE `Enrollment (K-12)` = ( SELECT MAX(`Enrollment (K-12)`) FROM frpm )"]}, {"question_id": 30, "answer_sql": ["SELECT s.City, SUM(ss.enroll12) as TotalEnrollment FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode JOIN satscores ss ON s.CDSCode = ss.cds WHERE s.StatusType = 'Open' GROUP BY s.City ORDER BY TotalEnrollment ASC LIMIT 5;"]}, {"question_id": 31, "answer_sql": ["SELECT frpm.CDSCode, frpm.`County Name`, frpm.`District Name`, frpm.`School Name`, frpm.`Enrollment (K-12)`, frpm.`Free Meal Count (K-12)`, frpm.`Percent (%) Eligible Free (K-12)` FROM frpm WHERE frpm.`Enrollment (K-12)` IN (SELECT MAX(`Enrollment (K-12)`) FROM frpm) AND frpm.`School Name` IN (SELECT `School Name` FROM frpm WHERE `School Name` IN (SELECT `School Name` FROM frpm WHERE `Low Grade` = '10' AND `High Grade` = '11'));"]}, {"question_id": 32, "answer_sql": []}, {"question_id": 33, "answer_sql": ["SELECT S.School, S.Website FROM schools S JOIN schools_admins SA ON S.CDSCode = SA.CDSCode WHERE SA.SchoolCode IN ( SELECT SA2.SchoolCode FROM schools_admins SA2 WHERE SA2.CountyCode = 'Los Angeles' AND SA2.DistrictCode = '01' AND SA2.SchoolName LIKE '%Free Meal Count (Ages 5-17)%' AND SA2.SchoolName LIKE '%1900-2000%' ) AND S.Charter = 1 AND S.CharterNum IS NOT NULL;"]}, {"question_id": 34, "answer_sql": []}, {"question_id": 35, "answer_sql": []}, {"question_id": 36, "answer_sql": []}, {"question_id": 37, "answer_sql": ["SELECT Street, City, Zip, State FROM schools WHERE CDSCode IN (SELECT cds FROM satscores WHERE NumTstTakr = (SELECT MIN(NumTstTakr) FROM satscores));"]}, {"question_id": 38, "answer_sql": ["SELECT Website FROM schools WHERE CDSCode IN (SELECT CDSCode FROM frpm WHERE `Enrollment (Ages 5-17)` BETWEEN 2000 AND 3000);"]}, {"question_id": 39, "answer_sql": ["SELECT AVG(NumTstTakr) as Average_Test_Takers FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE schools.OpenDate <= '1980-12-31' AND schools.ClosedDate >= '1980-01-01';", "SELECT SUM(NumTstTakr) as TotalTestTakers FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE schools.OpenDate <= '1980-12-31' AND schools.OpenDate >= '1980-01-01'", "SELECT AVG(satscores.NumTstTakr) FROM satscores JOIN frpm ON satscores.cds = frpm.CDSCode WHERE frpm.CDSCode IN (SELECT CDSCode FROM schools WHERE City = 'Fresno' AND OpenDate <= '1980-12-31' AND ClosedDate >= '1980-01-01');"]}, {"question_id": 40, "answer_sql": ["SELECT Phone FROM schools WHERE CDSCode IN (SELECT cds FROM satscores WHERE rtype = 'Lowest Average Score in Reading' AND sname = 'Fresno Unified');"]}, {"question_id": 41, "answer_sql": ["SELECT s.School, s.Street, s.City, s.State, s.Zip, s.MailCity, s.MailState, s.MailZip, s.MailStreet, s.MailStrAbr, s.Website, s.Virtual, MAX(satscores.AvgScrRead) as TopAvgReadingScore FROM schools s JOIN satscores ON s.CDSCode = satscores.cds WHERE s.Virtual = 'F' GROUP BY s.School, s.Street, s.City, s.State, s.Zip, s.MailCity, s.MailState, s.MailZip, s.MailStreet, s.MailStrAbr, s.Website ORDER BY TopAvgReadingScore DESC LIMIT 5;", "SELECT s.School, s.Street, s.City, s.State, s.Zip, s.MailCity, s.MailState, s.MailZip, s.Phone, s.Website, s.Virtual, s.Magnet, s.Latitude, s.Longitude, s.AdmFName1, s.AdmLName1, s.AdmEmail1, s.LastUpdate FROM schools AS s JOIN schools_admins AS sa ON s.CDSCode = sa.CDSCode WHERE s.Virtual = 'F' ORDER BY s.Latitude DESC, s.Longitude DESC LIMIT 5;"]}, {"question_id": 42, "answer_sql": ["SELECT sname, dname, cname FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE satscores.AvgScrMath = (SELECT MAX(AvgScrMath) FROM satscores)", "SELECT s.rtype, s.sname FROM satscores s JOIN schools u ON s.cds = u.CDSCode WHERE s.AvgScrMath = ( SELECT MAX(AvgScrMath) FROM satscores WHERE cds = u.CDSCode ) GROUP BY s.rtype, s.sname ORDER BY s.AvgScrMath DESC LIMIT 1;"]}, {"question_id": 43, "answer_sql": ["SELECT AVG(satscores.AvgScrMath) as AverageMathScore, schools.County FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE satscores.AvgScrMath = (SELECT MIN(AvgScrMath) FROM satscores) GROUP BY schools.County;"]}, {"question_id": 44, "answer_sql": ["SELECT AvgScrWrite, City FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE NumTstTakr >= 1500 ORDER BY NumTstTakr DESC LIMIT 1", "SELECT AVG(AvgScrWrite) as Average_Writing_Score, City FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE NumTstTakr >= 1500 GROUP BY City ORDER BY MAX(NumTstTakr) DESC;", "SELECT AVG(AvgScrWrite) as Average_Writing_Score, City FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE NumTstTakr >= 1500 GROUP BY City ORDER BY AVG(AvgScrWrite) DESC LIMIT 1;"]}, {"question_id": 45, "answer_sql": []}, {"question_id": 46, "answer_sql": ["SELECT s.School, s.State, SUM(ss.enroll12) as Enrollment FROM schools s JOIN schools_admins sa ON s.CDSCode = sa.CDSCode JOIN satscores ss ON s.CDSCode = ss.cds WHERE s.DOC = 31 AND s.DOCType = 'State Special' GROUP BY s.School, s.State ORDER BY Enrollment DESC;"]}, {"question_id": 47, "answer_sql": ["SELECT AVG(DOC) as MonthlyAverage FROM (SELECT DOC FROM schools WHERE DOC = 52 AND OpenDate <= '1980-12-31' AND OpenDate >= '1980-01-01') as SubQuery;"]}, {"question_id": 48, "answer_sql": ["SELECT (SELECT COUNT(*) FROM schools WHERE DOC = 54) AS 'Unified', (SELECT COUNT(*) FROM schools WHERE DOC = 52) AS 'Elementary', (SELECT COUNT(*) FROM schools WHERE DOC = 54) / (SELECT COUNT(*) FROM schools WHERE DOC = 52) AS 'Ratio'", "SELECT (SELECT COUNT(*) FROM schools WHERE DOC = 52) AS Unified_Orange_County , (SELECT COUNT(*) FROM schools WHERE DOC = 54) AS Unified_Orange_County", "SELECT (SELECT COUNT(*) FROM schools WHERE DOC = 52) / (SELECT COUNT(*) FROM schools WHERE DOC = 54) AS Ratio;", "SELECT SUM(CASE WHEN DOC = '52' THEN 1 ELSE 0 END) AS 'ESD_Count', SUM(CASE WHEN DOC = '54' THEN 1 ELSE 0 END) AS 'USD_Count', (SUM(CASE WHEN DOC = '52' THEN 1 ELSE 0 END) / SUM(CASE WHEN DOC = '54' THEN 1 ELSE 0 END)) AS 'Ratio' FROM schools"]}, {"question_id": 49, "answer_sql": ["SELECT COUNT(DISTINCT schools.CDSCode) as Total_Count, schools.County FROM schools WHERE schools.ClosedDate IS NOT NULL GROUP BY schools.County ORDER BY Total_Count DESC LIMIT 1;", "SELECT COUNT(DISTINCT s.County) as TotalCounties, s.County, COUNT(sc.cds) as TotalSchools FROM schools s LEFT JOIN schools_admins sa ON s.CDSCode = sa.CDSCode LEFT JOIN satscores sc ON s.CDSCode = sc.cds WHERE s.StatusType = 'Closed' GROUP BY s.County ORDER BY TotalSchools DESC;", "SELECT s.County, COUNT(DISTINCT s.CDSCode) as NumSchools, MAX(s.ClosedDate) as ClosureDate FROM schools s JOIN schools_admins sa ON s.CDSCode = sa.CDSCode WHERE s.StatusType = 'Closed' GROUP BY s.County ORDER BY NumSchools DESC;", "SELECT COUNT(DISTINCT schools.CDSCode) as Total_Count, schools.County FROM schools WHERE schools.StatusType = 'Closed' GROUP BY schools.County ORDER BY Total_Count DESC LIMIT 1;", "SELECT COUNT(DISTINCT schools.CDSCode) as Total_Count, schools.County, schools.School FROM schools WHERE schools.StatusType = 'Closed' GROUP BY schools.County ORDER BY Total_Count DESC LIMIT 1;"]}, {"question_id": 50, "answer_sql": ["SELECT S.Street, S.City, S.State, S.Zip FROM schools AS S JOIN ( SELECT cds, MAX(AvgScrMath) AS MaxMath FROM satscores GROUP BY cds ) AS M ON S.CDSCode = M.cds WHERE S.CDSCode IN ( SELECT cds FROM satscores WHERE AvgScrMath = ( SELECT MAX(AvgScrMath) FROM satscores ) ) ORDER BY M.MaxMath DESC LIMIT 1;", "SELECT S.Street, S.City, S.State, S.Zip FROM schools AS S JOIN ( SELECT cds, MAX(AvgScrMath) AS MaxMath FROM satscores GROUP BY cds ) AS M ON S.CDSCode = M.cds WHERE S.CDSCode IN ( SELECT cds FROM satscores GROUP BY cds ORDER BY MAX(AvgScrMath) DESC LIMIT 1 OFFSET 5 )"]}, {"question_id": 51, "answer_sql": []}, {"question_id": 52, "answer_sql": ["SELECT COUNT(*) FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE schools.City = 'Lakeport' AND (satscores.AvgScrRead + satscores.AvgScrMath + satscores.AvgScrWrite) >= 1500;", "SELECT COUNT(*) FROM schools JOIN satscores ON schools.CDSCode = satscores.cds JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE satscores.AvgScrRead + satscores.AvgScrMath + satscores.AvgScrWrite >= 1500 AND schools.City = 'Lakeport';", "SELECT COUNT(*) FROM satscores JOIN schools ON satscores.cds = schools.CDSCode JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE satscores.NumTstTakr >= 1500 AND schools.City = 'Lakeport'"]}, {"question_id": 53, "answer_sql": ["SELECT satscores.NumTstTakr FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE schools.City = 'Fresno';"]}, {"question_id": 54, "answer_sql": ["SELECT s.CDSCode, s.Zip, s.City, s.State, s.Street, s.StreetAbr, s.City, s.Zip, s.State FROM schools s JOIN schools_admins sa ON s.CDSCode = sa.CDSCode WHERE sa.AdmFName1 = 'Avetik' AND sa.AdmLName1 = 'Atoian';"]}, {"question_id": 55, "answer_sql": ["SELECT (SELECT COUNT(*) FROM schools WHERE State = 'CA' AND MailState = 'Colusa') AS 'Colusa', (SELECT COUNT(*) FROM schools WHERE State = 'CA' AND MailState = 'Humboldt') AS 'Humboldt', (SELECT COUNT(*) FROM schools WHERE State = 'CA' AND MailState = 'Colusa') / (SELECT COUNT(*) FROM schools WHERE State = 'CA' AND MailState = 'Humboldt') AS 'Ratio'", "SELECT (SELECT COUNT(*) FROM schools WHERE State = 'CA' AND County = 'Colusa') AS 'Colusa', (SELECT COUNT(*) FROM schools WHERE State = 'CA' AND County = 'Humboldt') AS 'Humboldt', (SELECT COUNT(*) FROM schools WHERE State = 'CA' AND County = 'Colusa') / (SELECT COUNT(*) FROM schools WHERE State = 'CA' AND County = 'Humboldt') AS 'Ratio'", "SELECT (SELECT COUNT(*) FROM schools WHERE State = 'CA' AND MailState = 'Colusa') / (SELECT COUNT(*) FROM schools WHERE State = 'CA' AND MailState = 'Humboldt') AS ratio;"]}, {"question_id": 56, "answer_sql": ["SELECT COUNT(*) FROM schools WHERE MailState = 'California' AND City = 'San Joaquin';"]}, {"question_id": 57, "answer_sql": ["SELECT Phone, Ext FROM schools WHERE CDSCode IN ( SELECT cds FROM satscores ORDER BY AvgScrWrite DESC LIMIT 1 OFFSET 332 )", "SELECT Phone, Ext FROM schools WHERE LastUpdate = (SELECT MAX(LastUpdate) FROM schools)"]}, {"question_id": 58, "answer_sql": []}, {"question_id": 59, "answer_sql": ["SELECT Website FROM schools WHERE AdmFName1 = 'Mike Larson' AND AdmLName1 = 'Alvarez' OR AdmFName2 = 'Mike Larson' AND AdmLName2 = 'Alvarez' OR AdmFName3 = 'Mike Larson' AND AdmLName3 = 'Alvarez';"]}, {"question_id": 60, "answer_sql": ["SELECT Website FROM schools WHERE Virtual = 'P' AND Charter = 1 AND County = 'San Joaquin';", "SELECT Website FROM schools WHERE Virtual = 'P' AND Charter = 1 AND State = 'San Joaquin';"]}, {"question_id": 61, "answer_sql": ["SELECT COUNT(*) FROM schools JOIN schools_admins ON schools.CDSCode = schools_admins.CDSCode JOIN satscores ON schools.CDSCode = satscores.cds WHERE schools.City = 'Hickman' AND schools.Charter = 1 AND satscores.rtype = 'DOC' AND satscores.dname = '52';"]}, {"question_id": 62, "answer_sql": ["SELECT COUNT(*) FROM frpm WHERE `Charter School (Y/N)` = 0 AND `County Name` = 'Los Angeles' AND `Percent (%) Eligible Free (K-12)` < 0.18;", "SELECT COUNT(*) FROM frpm WHERE `Charter School (Y/N)` = 0 AND `Percent (%) Eligible Free (K-12)` < 0.18;"]}, {"question_id": 63, "answer_sql": ["SELECT s.School, s.City, sa.AdmFName1, sa.AdmLName1, sa.AdmEmail1 FROM schools s JOIN schools_admins sa ON s.CDSCode = sa.CDSCode WHERE s.Charter = 1 AND s.CharterNum = '00D2';"]}, {"question_id": 64, "answer_sql": []}, {"question_id": 65, "answer_sql": ["SELECT (COUNT(CASE WHEN `Charter School (Y/N)` = '1' AND `Charter Funding Type` = 'Locally Funded' THEN 1 END) / (SELECT COUNT(*) FROM (SELECT `Charter School (Y/N)`, `Charter Funding Type` FROM frpm WHERE `Charter School (Y/N)` = '1')) * 100) AS Percentage_of_Santa_Clara_County_Schools_That_Are_Locally_Funded FROM frpm", "SELECT (COUNT(CASE WHEN `Charter School (Y/N)` = 'Y' AND `Charter Funding Type` = 'Santa Clara' THEN 1 END) / (SELECT COUNT(*) FROM (SELECT `Charter School (Y/N)`, `Charter Funding Type` FROM frpm WHERE `Charter School (Y/N)` = 'Y' AND `Charter Funding Type` IN ('Santa Clara', 'Other')) AS t) * 100) AS Percentage_of_Santa_Clara_County_Schools_That_Are_Locally_Funded FROM frpm;"]}, {"question_id": 66, "answer_sql": ["SELECT COUNT(*) FROM schools WHERE FundingType = 'Directly Funded' AND OpenDate BETWEEN '2000-01-01' AND '2005-12-31';"]}, {"question_id": 67, "answer_sql": []}, {"question_id": 68, "answer_sql": ["SELECT s.County, COUNT(f.CDSCode) as FRPM_Count FROM schools s JOIN schools_admins sa ON s.CDSCode = sa.CDSCode JOIN frpm f ON s.CDSCode = f.CDSCode WHERE s.SOC = 11 AND s.LastUpdate BETWEEN '1980-01-01' AND '1989-12-31' GROUP BY s.County ORDER BY FRPM_Count DESC LIMIT 1;", "SELECT County FROM schools WHERE Soc = 11 AND OpenDate < '1990-01-01' AND ClosedDate >= '1980-01-01' AND Soc = 11 GROUP BY County ORDER BY COUNT(*) DESC LIMIT 1;"]}, {"question_id": 69, "answer_sql": ["SELECT s.CDSCode FROM schools s JOIN schools_admins sa ON s.CDSCode = sa.CDSCode WHERE s.SOC = '31'", "SELECT s.CDSCode FROM schools s WHERE s.SOC = 31;"]}, {"question_id": 70, "answer_sql": ["SELECT COUNT(*) FROM frpm WHERE `District Name` = 'Alpine' AND `District Type` = 'Active' AND `School Type` = 'Closed' AND `Charter School (Y/N)` = '0';"]}, {"question_id": 71, "answer_sql": []}, {"question_id": 72, "answer_sql": ["SELECT COUNT(*) FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE satscores.rtype = 'SAT' AND satscores.sname = 'State Special School'"]}, {"question_id": 73, "answer_sql": []}, {"question_id": 74, "answer_sql": ["SELECT `Low Grade` FROM frpm WHERE `District Code` = 613360 AND `District Type` = 'SPECON';"]}, {"question_id": 75, "answer_sql": ["SELECT `Educational Option Type` FROM frpm WHERE `NSLP Provision Status` = '2' AND `County Code` = '37' AND `School Code` IS NOT NULL;"]}, {"question_id": 76, "answer_sql": []}, {"question_id": 77, "answer_sql": []}, {"question_id": 78, "answer_sql": ["SELECT `School Type` FROM frpm WHERE `School Type` = 'Elementary' GROUP BY `School Type` ORDER BY COUNT(*) DESC LIMIT 1;"]}, {"question_id": 79, "answer_sql": ["SELECT COUNT(*) FROM schools WHERE County IN (SELECT County FROM schools WHERE Virtual = 'F') AND County NOT IN (SELECT County FROM schools WHERE Virtual = 'T');", "SELECT COUNT(*) as 'Count' FROM schools WHERE County NOT IN ( SELECT County FROM schools WHERE Virtual = 'F' ) GROUP BY County ORDER BY 'Count' DESC LIMIT 1;", "SELECT COUNT(*) as 'Count' FROM schools WHERE County IN ('San Diego', 'Santa Barbara') AND Virtual = 'F';", "SELECT COUNT(*) FROM schools WHERE County NOT IN ('San Diego', 'Santa Barbara') AND Virtual = 'F';", "SELECT COUNT(*) FROM schools WHERE County IN ( SELECT County FROM schools WHERE Virtual = 'F' GROUP BY County ORDER BY COUNT(*) DESC LIMIT 1 ) AND County NOT IN ( SELECT County FROM schools WHERE Virtual = 'T' GROUP BY County ORDER BY COUNT(*) DESC LIMIT 1 )", "SELECT COUNT(*) as Amount FROM schools AS s JOIN schools_admins AS sa ON s.CDSCode = sa.CDSCode WHERE s.County != 'San Diego' AND s.County != 'Santa Barbara' AND s.Virtual = 'F'"]}, {"question_id": 80, "answer_sql": []}, {"question_id": 81, "answer_sql": []}, {"question_id": 82, "answer_sql": []}, {"question_id": 83, "answer_sql": ["SELECT COUNT(*), City, COUNT(DISTINCT CDSCode) as NumSchools FROM schools WHERE Magnet = 1 AND (EdOpsCode = 'M' OR EdOpsCode = 'MP') GROUP BY City"]}, {"question_id": 84, "answer_sql": ["SELECT s.District, COUNT(DISTINCT sa.AdmFName1) as NumFNames FROM schools_admins sa JOIN schools s ON sa.CDSCode = s.CDSCode WHERE s.District IS NOT NULL GROUP BY s.District ORDER BY NumFNames DESC LIMIT 2;"]}, {"question_id": 85, "answer_sql": []}, {"question_id": 86, "answer_sql": ["SELECT AdmLName1, District, County, School FROM schools WHERE Charter = 40;"]}, {"question_id": 87, "answer_sql": ["SELECT `AdmEmail1`, `AdmEmail2`, `AdmEmail3` FROM schools WHERE County = 'San Bernardino' AND DOC = 54 AND Soc = 62 AND OpenDate BETWEEN '2009-01-01' AND '2010-12-31';", "SELECT `AdmEmail1`, `AdmEmail2`, `AdmEmail3` FROM schools WHERE County = 'San Bernardino' AND DOC = 54 AND Soc = 62 AND OpenDate <= '2010-12-31' AND ClosedDate >= '2009-01-01';", "SELECT `AdmEmail1`, `AdmEmail2`, `AdmEmail3` FROM schools WHERE `SOC` = 62 AND `DOC` = 54 AND `OpenDate` BETWEEN '2009-01-01' AND '2010-12-31';"]}, {"question_id": 88, "answer_sql": ["SELECT adm.AdmEmail1, adm.AdmFName1, adm.AdmLName1, adm.SchoolName FROM schools AS s JOIN schools_admins AS adm ON s.CDSCode = adm.CDSCode JOIN satscores AS sat ON s.CDSCode = sat.cds WHERE sat.NumTstTakr >= 1500 ORDER BY sat.NumTstTakr DESC LIMIT 1;", "SELECT s.School, s.Street, s.City, s.State, s.AdmEmail1, s.LastUpdate FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds WHERE ss.NumTstTakr >= 1500 ORDER BY ss.NumTstTakr DESC LIMIT 1;", "SELECT AdmEmail1, AdmFName1, AdmLName1, AdmEmail2, AdmFName2, AdmLName2, AdmEmail3, AdmLName3 FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE satscores.NumTstTakr >= 1500 ORDER BY satscores.NumTstTakr DESC LIMIT 1;", "SELECT s.School, s.Street, s.City, s.State, s.AdmEmail1 FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds WHERE ss.NumTstTakr >= 1500 ORDER BY ss.NumTstTakr DESC LIMIT 1;"]}, {"question_id": 89, "answer_sql": []}, {"question_id": 90, "answer_sql": ["SELECT COUNT(*) FROM account WHERE district_id IN ( SELECT district_id FROM district WHERE A3 = 'Prague' );", "SELECT COUNT(*) FROM account JOIN district ON account.district_id = district.district_id WHERE district.A3 = 'Prague' AND account.frequency = 'Loan';", "SELECT COUNT(*) FROM account WHERE district_id IN (SELECT district_id FROM district WHERE A3 = 'Prague') AND account_id IN (SELECT account_id FROM loan);"]}, {"question_id": 91, "answer_sql": ["SELECT A12 AS 'Unemployment Rate 1995', A13 AS 'Unemployment Rate 1996' FROM district;"]}, {"question_id": 92, "answer_sql": []}, {"question_id": 93, "answer_sql": ["SELECT COUNT(*) FROM client JOIN district ON client.district_id = district.district_id JOIN loan ON client.client_id = loan.account_id JOIN account ON loan.account_id = account.account_id JOIN disp ON account.account_id = disp.account_id WHERE client.gender = 'M' AND district.A3 = 'North Bohemia' AND loan.amount > 8000 AND loan.payments > 0;"]}, {"question_id": 94, "answer_sql": []}, {"question_id": 95, "answer_sql": []}, {"question_id": 96, "answer_sql": ["SELECT COUNT(*) FROM client JOIN disp ON client.client_id = disp.client_id JOIN account ON disp.account_id = account.account_id WHERE disp.type = 'POPLATEK TYDNE' AND account.frequency = 'weekly';"]}, {"question_id": 97, "answer_sql": ["SELECT client.client_id, client.gender, client.birth_date, district.A2, district.A3, district.A4, district.A5, district.A6, district.A7, district.A8, district.A9, district.A10, district.A11, district.A12, district.A13, district.A14, district.A15, district.A16 FROM client JOIN disp ON client.client_id = disp.client_id JOIN loan ON client.client_id = loan.account_id JOIN district ON client.district_id = district.district_id WHERE disp.type = 'POPLATK PO OBRATU' AND loan.status = 'AKTIVN\u00cd'"]}, {"question_id": 98, "answer_sql": []}, {"question_id": 99, "answer_sql": ["SELECT account_id, SUM(amount) as total_amount FROM loan WHERE duration > 12 GROUP BY account_id ORDER BY total_amount DESC LIMIT 1;", "SELECT account.account_id, account.date, account.frequency, loan.amount FROM account JOIN loan ON account.account_id = loan.account_id WHERE loan.duration > 12 AND account.date >= '1993-01-01' ORDER BY loan.amount DESC LIMIT 1;"]}, {"question_id": 100, "answer_sql": ["SELECT COUNT(*) FROM client JOIN district ON client.district_id = district.district_id WHERE client.gender = 'F' AND client.birth_date < '1950' AND district.A2 = 'Slokolov';"]}, {"question_id": 101, "answer_sql": ["SELECT account.account_id, account.date FROM account WHERE account.date = (SELECT MIN(date) FROM account WHERE date >= '1995-01-01' AND date <= '1995-12-31');"]}, {"question_id": 102, "answer_sql": []}, {"question_id": 103, "answer_sql": ["SELECT client.client_id FROM client JOIN disp ON client.client_id = disp.client_id JOIN card ON disp.disp_id = card.disp_id WHERE card.issued = '1994-03-03';", "SELECT client.client_id FROM client JOIN disp ON client.client_id = disp.client_id JOIN card ON disp.disp_id = card.disp_id WHERE card.issued = '1994-03-03' AND client.gender = 'male';"]}, {"question_id": 104, "answer_sql": ["SELECT account.date FROM account WHERE account.account_id = ( SELECT account_id FROM loan WHERE loan.loan_id = ( SELECT loan_id FROM `order` WHERE `order`.order_id = ( SELECT order_id FROM trans WHERE trans.trans_id = 8 ) ) );", "SELECT a.account_id, a.date FROM account a JOIN trans t ON a.account_id = t.account_id WHERE t.date = '1998-10-14' AND t.type = 'debit' AND t.amount = 840;", "SELECT account.date FROM account WHERE account.account_id = ( SELECT account_id FROM loan WHERE loan.date = '1998-10-14' );"]}, {"question_id": 105, "answer_sql": ["SELECT account.district_id FROM account JOIN loan ON account.account_id = loan.account_id WHERE loan.date = '1994-08-25'"]}, {"question_id": 106, "answer_sql": ["SELECT MAX(amount) FROM trans JOIN disp ON trans.account_id = disp.account_id JOIN card ON disp.disp_id = card.disp_id WHERE card.issued = '1996-10-21';"]}, {"question_id": 107, "answer_sql": ["SELECT client.gender FROM client JOIN district ON client.district_id = district.district_id WHERE district.A11 = (SELECT AVG(district.A11) FROM district) ORDER BY client.birth_date ASC LIMIT 1;"]}, {"question_id": 108, "answer_sql": []}, {"question_id": 109, "answer_sql": ["SELECT COUNT(*) FROM client WHERE district_id IN (SELECT district_id FROM district WHERE A2 = 'Jesenik' AND gender = 'F')"]}, {"question_id": 110, "answer_sql": ["SELECT disp.disp_id FROM disp JOIN client ON disp.client_id = client.client_id JOIN account ON disp.account_id = account.account_id JOIN trans ON account.account_id = trans.account_id WHERE trans.type = 'transaction' AND trans.amount = 5100 AND trans.date = '1998-09-02';"]}, {"question_id": 111, "answer_sql": ["SELECT COUNT(*) FROM account WHERE district_id = (SELECT district_id FROM district WHERE A2 = 'Litomerice' AND A16 = 1996);"]}, {"question_id": 112, "answer_sql": ["SELECT A2 FROM district WHERE A15 = 1976 AND A16 = 29 AND A7 = 'F';", "SELECT d.A2 FROM client c JOIN district d ON c.district_id = d.district_id WHERE c.gender = 'F' AND c.birth_date = '1976-01-29';", "SELECT d.district_id, d.A2 FROM client c JOIN district d ON c.district_id = d.district_id WHERE c.gender = 'F' AND c.birth_date = '1976-01-29';"]}, {"question_id": 113, "answer_sql": ["SELECT client.birth_date FROM client JOIN disp ON client.client_id = disp.client_id JOIN account ON disp.account_id = account.account_id JOIN loan ON account.account_id = loan.account_id WHERE loan.amount = 98832 AND loan.date = '1996/1/3';", "SELECT client.birth_date FROM client JOIN disp ON client.client_id = disp.client_id JOIN account ON disp.account_id = account.account_id JOIN loan ON account.account_id = loan.account_id WHERE loan.amount = 98832 AND loan.date = '1996-01-03';"]}, {"question_id": 114, "answer_sql": ["SELECT account_id FROM account WHERE district_id = (SELECT district_id FROM district WHERE A2 = 'Prague')"]}, {"question_id": 115, "answer_sql": ["SELECT (COUNT(CASE WHEN gender = 'M' THEN 1 END) * 100.0) / (SELECT COUNT(*) FROM client WHERE district_id IN (SELECT district_id FROM district WHERE A3 = 'South Bohemia')) AS percentage_of_male_clients FROM client;", "SELECT A3, COUNT(CASE WHEN gender = 'M' THEN 1 END) * 100 / COUNT(*) FROM client JOIN district ON client.district_id = district.district_id WHERE A2 = 'South Bohemia' GROUP BY A3;"]}, {"question_id": 116, "answer_sql": ["SELECT (balance_1998 - balance_1993) / balance_1993 * 100 AS increase_rate FROM (SELECT account_id, MAX(balance) AS balance_1998, MIN(balance) AS balance_1993 FROM trans WHERE date >= '1993-03-22' AND date <= '1998-12-27' AND type = 'debit' GROUP BY account_id) AS t"]}, {"question_id": 117, "answer_sql": ["SELECT (SUM(CASE WHEN status = 'A' THEN amount END)) / SUM(amount) * 100 as percentage_fully_paid FROM loan JOIN account ON loan.account_id = account.account_id", "SELECT (SUM(CASE WHEN status = 'A' THEN amount ELSE 0 END) / SUM(amount)) * 100 as percentage_fully_paid FROM loan JOIN account ON loan.account_id = account.account_id WHERE account.frequency = 'monthly';"]}, {"question_id": 118, "answer_sql": ["SELECT (SUM(loan.amount) * 100) / (SELECT SUM(loan.amount) FROM loan WHERE loan.status = 'C' AND loan.amount < 100000) AS percentage_running_no_issue FROM loan JOIN account ON loan.account_id = account.account_id WHERE loan.status = 'C' AND loan.amount < 100000;", "SELECT (SUM(loan.amount) * 100) / (SELECT SUM(loan.amount) FROM loan WHERE loan.status = 'C' AND loan.amount < 100000) AS percentage_running FROM loan WHERE loan.status = 'C';"]}, {"question_id": 119, "answer_sql": []}, {"question_id": 120, "answer_sql": ["SELECT account.account_id, COUNT(distinct account.date) as frequency FROM account JOIN client ON account.district_id = client.district_id JOIN district ON client.district_id = district.district_id WHERE district.A2 = 'east Bohemia' AND account.date BETWEEN '1995-01-01' AND '2000-12-31' GROUP BY account.account_id;"]}, {"question_id": 121, "answer_sql": ["SELECT account_id, date FROM account WHERE district_id = (SELECT district_id FROM district WHERE A2 = 'Practice')", "SELECT account_id, date FROM account WHERE district_id = (SELECT district_id FROM district WHERE A2 = 'Prachatice')"]}, {"question_id": 122, "answer_sql": []}, {"question_id": 123, "answer_sql": []}, {"question_id": 124, "answer_sql": []}, {"question_id": 125, "answer_sql": ["SELECT DISTINCT A12, A13 FROM loan JOIN client ON loan.account_id = client.client_id JOIN district ON client.district_id = district.district_id WHERE status = 'D' AND (A13 - A12) / A12 * 100 > 0 AND A13 BETWEEN '1995-01-01' AND '1996-12-31';", "SELECT DISTINCT A12, A13 FROM loan JOIN client ON loan.account_id = client.client_id JOIN district ON client.district_id = district.district_id WHERE status = 'D'", "SELECT A12, A13 FROM loan JOIN district ON loan.account_id = district.district_id WHERE status = 'D'", "SELECT DISTINCT A12, A13 FROM loan JOIN client ON loan.account_id = client.client_id JOIN district ON client.district_id = district.district_id WHERE status = 'D' AND date >= '1995-01-01' AND date <= '1996-12-31'"]}, {"question_id": 126, "answer_sql": ["SELECT account.account_id, account.frequency, account.date, district.A2 FROM account JOIN district ON account.district_id = district.district_id WHERE account.date = '1993-01-01' AND district.A2 = 'Decin'", "SELECT (COUNT(*) * 100.0) / (SELECT COUNT(*) FROM account WHERE district_id = 'Decin' AND date = '1993-01-01') as percentage FROM account;"]}, {"question_id": 127, "answer_sql": ["SELECT account_id FROM account WHERE frequency = 'POPLATEK MESICNE';"]}, {"question_id": 128, "answer_sql": ["SELECT DISTINCT D.district_id, D.A2, COUNT(C.client_id) as female_account_holders FROM district D JOIN client C ON D.district_id = C.district_id WHERE C.gender = 'F' GROUP BY D.district_id ORDER BY female_account_holders DESC LIMIT 10;", "SELECT DISTINCT A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16 FROM district WHERE A16 IN ( SELECT COUNT(*) FROM client WHERE gender = 'F' GROUP BY district_id ORDER BY COUNT(*) DESC LIMIT 10 )"]}, {"question_id": 129, "answer_sql": []}, {"question_id": 130, "answer_sql": ["SELECT COUNT(*) FROM client WHERE district_id IN (SELECT district_id FROM district WHERE A2 = 'South Bohemia');"]}, {"question_id": 131, "answer_sql": ["SELECT A3 FROM district WHERE A11 = (SELECT MAX(A11) FROM district WHERE A15 IS NOT NULL);", "SELECT A3 as District FROM district WHERE A16 = ( SELECT MAX(A16) FROM district WHERE A14 = 'C' );"]}, {"question_id": 132, "answer_sql": ["SELECT AVG(loan.amount) FROM loan JOIN client ON loan.account_id = client.client_id WHERE client.gender = 'M';"]}, {"question_id": 133, "answer_sql": ["SELECT A2 AS District, A13 AS Unemployment_Rate FROM district WHERE A13 = (SELECT MAX(A13) FROM district);"]}, {"question_id": 134, "answer_sql": ["SELECT COUNT(DISTINCT account_id) FROM account JOIN district ON account.district_id = district.district_id WHERE district.A16 = (SELECT MAX(A16) FROM district);"]}, {"question_id": 135, "answer_sql": []}, {"question_id": 136, "answer_sql": ["SELECT account_id, COUNT(*) as total_loans FROM loan WHERE date BETWEEN '1995-01-01' AND '1997-12-31' AND amount >= 250000 AND status = 'POPLATEK MESICNE' GROUP BY account_id;", "SELECT COUNT(*) FROM loan WHERE date BETWEEN '1995-01-01' AND '1997-12-31' AND amount >= 250000 AND status = 'POPLATEK MESICNE';"]}, {"question_id": 137, "answer_sql": ["SELECT COUNT(*) FROM account JOIN loan ON account.account_id = loan.account_id WHERE loan.status = 'C'", "SELECT COUNT(*) FROM account JOIN loan ON account.account_id = loan.account_id WHERE loan.status = 'C' AND account.district_id = 1;", "SELECT COUNT(*) FROM account JOIN loan ON account.account_id = loan.account_id JOIN `order` ON account.account_id = `order`.account_id WHERE loan.status = 'C' AND `order`.bank_to = 'Branch location 1'"]}, {"question_id": 138, "answer_sql": []}, {"question_id": 139, "answer_sql": ["SELECT COUNT(*) FROM card WHERE type = 'disponent';"]}, {"question_id": 140, "answer_sql": ["SELECT COUNT(*) FROM account WHERE district_id IN (SELECT district_id FROM district WHERE A2 = 'Pisek');"]}, {"question_id": 141, "answer_sql": ["SELECT DISTINCT district.A2, district.A3, district.A4, district.A5, district.A6, district.A7, district.A8, district.A9, district.A10, district.A11, district.A12, district.A13, district.A14, district.A15, district.A16 FROM district JOIN trans ON district.district_id = trans.account_id WHERE trans.amount > 10000 AND trans.date > '1997-01-01'", "SELECT DISTINCT district.A2, district.A3, district.A4, district.A5, district.A6, district.A7, district.A8, district.A9, district.A10, district.A11, district.A12, district.A13, district.A14, district.A15, district.A16 FROM district JOIN account ON district.district_id = account.district_id JOIN loan ON account.account_id = loan.account_id WHERE loan.date = '1997-01-01' AND loan.amount > 10000;", "SELECT DISTINCT district.A2, district.A3, district.A4, district.A5, district.A6, district.A7, district.A8, district.A9, district.A10, district.A11, district.A12, district.A13, district.A14, district.A15, district.A16 FROM district JOIN trans ON district.district_id = trans.account_id WHERE trans.amount > 10000 AND trans.date = '1997-01-01'"]}, {"question_id": 142, "answer_sql": ["SELECT account.account_id FROM account JOIN `order` ON account.account_id = `order`.account_id WHERE `order`.k_symbol = 'SIPO' AND account.district_id = (SELECT district_id FROM district WHERE A2 = 'Pisek');"]}, {"question_id": 143, "answer_sql": ["SELECT account.account_id, account.district_id, account.frequency, account.date FROM account JOIN disp ON account.account_id = disp.account_id JOIN card ON disp.disp_id = card.disp_id WHERE card.type = 'gold' AND card.type = 'junior'"]}, {"question_id": 144, "answer_sql": ["SELECT AVG(card.type) as average_amount FROM card JOIN disp ON card.disp_id = disp.disp_id JOIN account ON disp.account_id = account.account_id WHERE account.date >= '2021-01-01' AND account.date < '2022-01-01'"]}, {"question_id": 145, "answer_sql": []}, {"question_id": 146, "answer_sql": ["SELECT client.client_id, client.gender FROM client JOIN disp ON client.client_id = disp.client_id JOIN card ON disp.disp_id = card.disp_id JOIN loan ON client.client_id = loan.account_id WHERE client.gender = 'F';", "SELECT client.client_id, client.gender, card.type, loan.status FROM client JOIN disp ON client.client_id = disp.client_id JOIN card ON disp.disp_id = card.disp_id JOIN loan ON client.client_id = loan.account_id WHERE client.gender = 'F';"]}, {"question_id": 147, "answer_sql": ["SELECT COUNT(*) FROM client WHERE gender = 'F' AND district_id IN (SELECT district_id FROM district WHERE A3 = 'south Bohemia');"]}, {"question_id": 148, "answer_sql": ["SELECT account.account_id, account.frequency, account.date, loan.amount, loan.duration, loan.payments, loan.status FROM account JOIN loan ON account.account_id = loan.account_id WHERE account.district_id = 'Tabor' AND loan.status = 'Eligible';"]}, {"question_id": 149, "answer_sql": []}, {"question_id": 150, "answer_sql": ["SELECT COUNT(*) FROM account JOIN `order` ON account.account_id = `order`.account_id WHERE `order`.bank_to = 'AB' AND account.district_id = (SELECT district_id FROM district WHERE A2 = 'North Bohemia');", "SELECT COUNT(*) FROM account JOIN trans ON account.account_id = trans.account_id WHERE trans.bank = 'AB';"]}, {"question_id": 151, "answer_sql": ["SELECT DISTINCT district.A2 FROM account JOIN disp ON account.account_id = disp.account_id JOIN client ON disp.client_id = client.client_id JOIN district ON client.district_id = district.district_id WHERE disp.type = 'VYDAJ';", "SELECT DISTINCT DIST.district_id, DIST.A2, DIST.A3, DIST.A4, DIST.A5, DIST.A6, DIST.A7, DIST.A8, DIST.A9, DIST.A10, DIST.A11, DIST.A12, DIST.A13, DIST.A14, DIST.A15, DIST.A16 FROM district DIST JOIN account ACC ON DIST.district_id = ACC.district_id JOIN trans TRN ON ACC.account_id = TRN.account_id WHERE TRN.type = 'VYDAJ'"]}, {"question_id": 152, "answer_sql": ["SELECT AVG(loan.amount) as average_amount FROM district JOIN account ON district.district_id = account.district_id JOIN loan ON account.account_id = loan.account_id WHERE district.A8 > 4000 AND account.date >= '1997-01-01' AND loan.date >= '1995-01-01';"]}, {"question_id": 153, "answer_sql": ["SELECT COUNT(*) FROM card JOIN disp ON card.disp_id = disp.disp_id JOIN client ON disp.client_id = client.client_id JOIN account ON client.district_id = account.district_id WHERE card.type = 'classic' AND disp.type = 'loan';", "SELECT COUNT(*) FROM card WHERE type = 'classic';"]}, {"question_id": 154, "answer_sql": ["SELECT COUNT(*) FROM client WHERE gender = 'M' AND district_id = (SELECT district_id FROM district WHERE A2 = 'Hl.m. Praha');"]}, {"question_id": 155, "answer_sql": ["SELECT (COUNT(type = 'gold' AND issued < '1998') / COUNT(*)) * 100 AS percent_gold_issued_before_1998 FROM card JOIN client ON card.disp_id = client.client_id JOIN account ON client.district_id = account.district_id", "SELECT (COUNT(*) * 100 / (SELECT COUNT(*) FROM card WHERE type = 'gold' AND issued < '1998')) as Percentage FROM card"]}, {"question_id": 156, "answer_sql": ["SELECT client.gender, client.birth_date FROM client JOIN account ON client.district_id = account.district_id JOIN loan ON account.account_id = loan.account_id WHERE loan.amount = ( SELECT MAX(loan.amount) FROM loan )"]}, {"question_id": 157, "answer_sql": ["SELECT COUNT(*) FROM district WHERE A15 = 1995 AND A8 = 532;", "SELECT A15 FROM district JOIN account ON district.district_id = account.district_id WHERE account.account_id = 532 AND account.date = '1995-01-01';"]}, {"question_id": 158, "answer_sql": ["SELECT account.district_id FROM account JOIN `order` ON account.account_id = `order`.account_id WHERE `order`.order_id = 33333;"]}, {"question_id": 159, "answer_sql": ["SELECT * FROM trans WHERE account_id = 3356 AND type = 'VYBER' AND operation = 'VYBER';"]}, {"question_id": 160, "answer_sql": ["SELECT COUNT(*) FROM account JOIN loan ON account.account_id = loan.account_id WHERE account.frequency = 'POPLATEK TYDNE' AND loan.amount < 200000;"]}, {"question_id": 161, "answer_sql": ["SELECT type FROM card WHERE disp_id=(SELECT disp_id FROM client WHERE client_id=13539);", "SELECT card.type FROM card JOIN disp ON disp.disp_id = card.disp_id JOIN client ON client.client_id = disp.client_id WHERE client.client_id = 13539;", "SELECT type FROM disp WHERE client_id = 13539;"]}, {"question_id": 162, "answer_sql": []}, {"question_id": 163, "answer_sql": []}, {"question_id": 164, "answer_sql": ["SELECT client.gender, client.birth_date, district.A2, district.A3, district.A4, district.A5, district.A6, district.A7, district.A8, district.A9, district.A10, district.A11, district.A12, district.A13, district.A14, district.A15, district.A16 FROM client JOIN disp ON client.client_id = disp.client_id JOIN account ON disp.account_id = account.account_id JOIN district ON client.district_id = district.district_id WHERE disp.disp_id = 32423;", "SELECT `order`.account_id FROM `order` WHERE `order`.order_id = 32423;", "SELECT client.gender, client.birth_date FROM client JOIN `order` ON client.client_id = `order`.account_id WHERE `order`.order_id = 32423;", "SELECT `order`.bank_to FROM `order` WHERE `order`.order_id = 32423;"]}, {"question_id": 165, "answer_sql": []}, {"question_id": 166, "answer_sql": ["SELECT COUNT(*) FROM account WHERE district_id = (SELECT district_id FROM district WHERE A2 = 'Jesenik');"]}, {"question_id": 167, "answer_sql": ["SELECT client.client_id FROM client JOIN disp ON client.client_id = disp.client_id JOIN card ON disp.disp_id = card.disp_id WHERE card.issued > '1996-01-01' GROUP BY client.client_id;", "SELECT client.client_id FROM client JOIN disp ON client.client_id = disp.client_id JOIN card ON disp.disp_id = card.disp_id WHERE card.issued >= '1996-01-01' GROUP BY client.client_id;", "SELECT client.client_id FROM client JOIN disp ON client.client_id = disp.client_id JOIN card ON disp.disp_id = card.disp_id WHERE card.issued >= '1997-01-01' GROUP BY client.client_id;"]}, {"question_id": 168, "answer_sql": ["SELECT COUNT(*) / (SELECT COUNT(*) FROM client WHERE gender = 'F' AND A11 > 10000) * 100 AS percentage FROM client JOIN district ON client.district_id = district.district_id WHERE client.gender = 'F' AND district.A11 > 10000;", "SELECT (COUNT(*) * 100.0) / (SELECT COUNT(*) FROM client WHERE district_id IN ( SELECT district_id FROM district WHERE A11 > 10000 )) AS percentage FROM client WHERE client.district_id IN ( SELECT district_id FROM district WHERE A11 > 10000 ) AND client.gender = 'F';"]}, {"question_id": 169, "answer_sql": []}, {"question_id": 170, "answer_sql": []}, {"question_id": 171, "answer_sql": []}, {"question_id": 172, "answer_sql": ["SELECT COUNT(*) FROM disp WHERE account_id = 10;", "SELECT COUNT(*) FROM disp JOIN account ON disp.account_id = account.account_id WHERE account.account_id = 1 AND disp.account_id = 10;"]}, {"question_id": 173, "answer_sql": []}, {"question_id": 174, "answer_sql": ["SELECT birth_date FROM client WHERE client_id = 130;"]}, {"question_id": 175, "answer_sql": ["SELECT COUNT(*) FROM disp d JOIN client c ON d.client_id = c.client_id JOIN account a ON d.account_id = a.account_id JOIN loan l ON a.account_id = l.account_id WHERE d.type = 'FREQUENCY' AND l.status = 'POPLATEK PO OBRATU';"]}, {"question_id": 176, "answer_sql": []}, {"question_id": 177, "answer_sql": ["SELECT SUM(trans.amount) AS total_amount, client.gender FROM trans JOIN client ON trans.account_id = client.client_id WHERE client.client_id = 4 AND trans.trans_id = 851;"]}, {"question_id": 178, "answer_sql": ["SELECT card.type FROM card JOIN client ON card.disp_id = client.client_id WHERE client.client_id = 9;", "SELECT type FROM card WHERE disp_id = (SELECT disp_id FROM client WHERE client_id = 9);", "SELECT c.gender, c.birth_date, d.type FROM client c JOIN disp d ON c.client_id = d.client_id WHERE c.client_id = 9 AND d.type = 'Credit';"]}, {"question_id": 179, "answer_sql": []}, {"question_id": 180, "answer_sql": ["SELECT client.client_id, client.gender, client.birth_date, district.A2, district.A3, district.A4, district.A5, district.A6, district.A7, district.A8, district.A9, district.A10, district.A11, district.A12, district.A13, district.A14, district.A15, district.A16 FROM client JOIN district ON client.district_id = district.district_id WHERE client.birth_date BETWEEN '1983-01-01' AND '1987-12-31' AND district.A2 LIKE '%East Bohemia%';"]}, {"question_id": 181, "answer_sql": ["SELECT client.client_id, client.gender, account.account_id, loan.loan_id FROM client JOIN account ON client.district_id = account.district_id JOIN disp ON account.account_id = disp.account_id JOIN loan ON disp.disp_id = loan.account_id WHERE client.gender = 'F' ORDER BY loan.amount DESC LIMIT 3;", "SELECT client.client_id, client.gender, loan.amount FROM client JOIN loan ON client.client_id = loan.account_id WHERE client.gender = 'F' ORDER BY loan.amount DESC LIMIT 3;", "SELECT client.client_id, client.gender, account.account_id, loan.amount FROM client JOIN account ON client.district_id = account.district_id JOIN disp ON account.account_id = disp.account_id JOIN loan ON disp.disp_id = loan.account_id WHERE client.gender = 'F' ORDER BY loan.amount DESC LIMIT 3;"]}, {"question_id": 182, "answer_sql": ["SELECT COUNT(*) FROM client JOIN disp ON client.client_id = disp.client_id JOIN account ON disp.account_id = account.account_id JOIN loan ON account.account_id = loan.account_id WHERE client.gender = 'M' AND client.birth_date BETWEEN '1974-01-01' AND '1976-12-31' AND loan.status = 'SIPO' AND loan.amount > 4000;"]}, {"question_id": 183, "answer_sql": ["SELECT COUNT(*) FROM account WHERE district_id = (SELECT district_id FROM district WHERE A2 = 'Beroun') AND date > '1996-12-31';"]}, {"question_id": 184, "answer_sql": ["SELECT COUNT(*) FROM client JOIN disp ON client.client_id = disp.client_id JOIN card ON disp.disp_id = card.disp_id WHERE client.gender = 'F' AND card.type = 'junior';", "SELECT COUNT(*) FROM client WHERE gender = 'F' AND EXISTS (SELECT 1 FROM disp WHERE client.client_id = disp.client_id AND disp.type = 'Credit');"]}, {"question_id": 185, "answer_sql": ["SELECT (COUNT(client_id) * (SELECT A3 FROM district WHERE district_id = 1)) / (SELECT COUNT(DISTINCT account_id) FROM account WHERE district_id = 1) * 100 as percentage_female_prague FROM client WHERE gender = 'F' AND district_id = 1;", "SELECT (COUNT(client_id) * 1.0 / (SELECT COUNT(*) FROM client WHERE district_id = 1 AND gender = 'F')) * 100 AS percentage_female_prague_branch FROM client WHERE district_id = 1;", "SELECT COUNT(client.client_id) * 1.0 / (SELECT COUNT(*) FROM account WHERE district_id = 1) * 100 AS female_proportion FROM client WHERE client.gender = 'F' AND client.district_id = 1;", "SELECT COUNT(*) / COUNT(DISTINCT client.client_id) * 100 AS percentage FROM client JOIN disp ON client.client_id = disp.client_id JOIN account ON disp.account_id = account.account_id WHERE account.district_id = (SELECT district_id FROM district WHERE A3 = 'Prague') AND client.gender = 'F';"]}, {"question_id": 186, "answer_sql": ["SELECT COUNT(*) / (SELECT COUNT(*) FROM client WHERE gender = 'M') * 100 FROM client c JOIN disp d ON c.client_id = d.client_id WHERE d.type = 'POPLATEK TYDNE'"]}, {"question_id": 187, "answer_sql": ["SELECT COUNT(*) FROM client WHERE gender = 'POPLATEK TYDNE';"]}, {"question_id": 188, "answer_sql": ["SELECT account.account_id, account.date, account.frequency, loan.amount, loan.duration, loan.payments, loan.status FROM account JOIN loan ON account.account_id = loan.account_id WHERE loan.duration > 24 AND account.date < '1997-01-01' ORDER BY loan.amount ASC, account.date ASC LIMIT 1;", "SELECT account.account_id, account.date, account.frequency, loan.amount FROM account JOIN loan ON account.account_id = loan.account_id WHERE loan.duration > 24 AND account.date < '1997-01-01' ORDER BY loan.amount ASC LIMIT 1;"]}, {"question_id": 189, "answer_sql": []}, {"question_id": 190, "answer_sql": ["SELECT COUNT(*) FROM client WHERE birth_date BETWEEN '1920-01-01' AND '1920-12-31' AND district_id IN (SELECT district_id FROM district WHERE A3 = 'East Bohemia');"]}, {"question_id": 191, "answer_sql": []}, {"question_id": 192, "answer_sql": ["SELECT AVG(loan.amount) FROM loan JOIN trans ON loan.account_id = trans.account_id WHERE trans.type = 'POPLATEK PO OBRATU' AND loan.status = 'C';"]}, {"question_id": 193, "answer_sql": ["SELECT client.client_id, client.district_id FROM client JOIN disp ON client.client_id = disp.client_id JOIN account ON disp.account_id = account.account_id WHERE account.frequency = 'right'"]}, {"question_id": 194, "answer_sql": ["SELECT client.client_id, client.gender, client.birth_date, district.A16 FROM client JOIN disp ON client.client_id = disp.client_id JOIN card ON disp.disp_id = card.disp_id JOIN loan ON client.client_id = loan.account_id JOIN district ON client.district_id = district.district_id WHERE card.type = 'gold' AND loan.status = 'approved' ORDER BY district.A16 DESC;"]}, {"question_id": 195, "answer_sql": ["SELECT bond_type, COUNT(*) as frequency FROM bond GROUP BY bond_type ORDER BY frequency DESC LIMIT 1;"]}, {"question_id": 196, "answer_sql": ["SELECT COUNT(*) FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE atom.element = 'cl' AND atom.molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '-');", "SELECT COUNT(*) FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE atom.element = 'cl' AND atom.molecule_id NOT IN (SELECT molecule_id FROM molecule WHERE label = '-');"]}, {"question_id": 197, "answer_sql": ["SELECT AVG(atom.element = 'o') AS avg_oxygen_atoms FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '-';", "SELECT AVG(atom.element = 'o') AS avg_oxygen_atoms FROM atom JOIN bond ON atom.atom_id = bond.molecule_id WHERE bond.bond_type = '-';"]}, {"question_id": 198, "answer_sql": ["SELECT AVG(carcinogenic_molecules) FROM (SELECT COUNT(*) as carcinogenic_molecules FROM atom WHERE element = 'C' AND atom_id IN (SELECT atom_id FROM connected WHERE bond_id IN (SELECT bond_id FROM bond WHERE bond_type = '-')));"]}, {"question_id": 199, "answer_sql": ["SELECT COUNT(*) FROM atom JOIN connected ON atom.atom_id = connected.atom_id2 JOIN bond ON connected.bond_id = bond.bond_id WHERE atom.element = 'na' AND bond.bond_type = '-';", "SELECT COUNT(*) FROM atom WHERE element = 'na' AND molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '-');"]}, {"question_id": 200, "answer_sql": []}, {"question_id": 201, "answer_sql": ["SELECT (SUM(atom.element = 'c') / COUNT(*)) * 100 AS percentage_carbon_in_double_bond_molecules FROM connected JOIN atom ON connected.atom_id = atom.atom_id JOIN bond ON atom.atom_id = bond.molecule_id WHERE bond.bond_type = ' = '", "SELECT (SUM(atom.element = 'c') / COUNT(atom.atom_id)) * 100 AS percentage_carbon_in_double_bond_molecules FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON bond.bond_id = connected.bond_id WHERE bond.bond_type = ' = ' GROUP BY connected.atom_id, connected.atom_id2, bond.bond_id;"]}, {"question_id": 202, "answer_sql": ["SELECT COUNT(*) FROM bond WHERE bond_type = '#';"]}, {"question_id": 203, "answer_sql": ["SELECT COUNT(*) FROM atom WHERE element != 'br';"]}, {"question_id": 204, "answer_sql": ["SELECT COUNT(*) FROM molecule JOIN atom ON atom.molecule_id = molecule.molecule_id JOIN connected ON connected.atom_id = atom.atom_id WHERE molecule.molecule_id BETWEEN 'TR000' AND 'TR099' AND atom.element = '+'", "SELECT COUNT(*) FROM `molecule` JOIN `atom` ON `atom`.`molecule_id` = `molecule`.`molecule_id` JOIN `connected` ON `connected`.`atom_id` = `atom`.`atom_id` WHERE `molecule`.`molecule_id` BETWEEN 'TR000' AND 'TR099' AND `molecule`.`label` = '+'", "SELECT COUNT(*) FROM `molecule` WHERE `label` = '+' AND `molecule_id` BETWEEN 'TR000' AND 'TR099' LIMIT 100;", "SELECT COUNT(*) FROM molecule WHERE label = '+' LIMIT 100;"]}, {"question_id": 205, "answer_sql": []}, {"question_id": 206, "answer_sql": ["SELECT a.element FROM connected c JOIN atom a ON c.atom_id = a.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_id = 'TR004_8_9'", "SELECT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_id = 'TR004_8_9' GROUP BY a.element ORDER BY a.element;", "SELECT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = 'TR004_8_9';"]}, {"question_id": 207, "answer_sql": ["SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON bond.bond_id = connected.bond_id WHERE bond.bond_type = ' = ';"]}, {"question_id": 208, "answer_sql": []}, {"question_id": 209, "answer_sql": []}, {"question_id": 210, "answer_sql": []}, {"question_id": 211, "answer_sql": []}, {"question_id": 212, "answer_sql": ["SELECT element, COUNT(*) as count FROM atom WHERE molecule_id NOT IN ( SELECT molecule_id FROM molecule WHERE label = '-' ) GROUP BY element ORDER BY count ASC LIMIT 1;", "SELECT element, COUNT(*) as count FROM ( SELECT m.molecule_id FROM molecule m WHERE m.label != '-' ) n JOIN atom a ON a.molecule_id = n.molecule_id GROUP BY element ORDER BY count ASC LIMIT 1;", "SELECT element FROM atom WHERE molecule_id NOT IN (SELECT molecule_id FROM molecule WHERE label = '-') GROUP BY element ORDER BY COUNT(*) ASC LIMIT 1;", "SELECT element FROM atom WHERE molecule_id IN ( SELECT molecule_id FROM molecule WHERE label = '-' ) GROUP BY element ORDER BY COUNT(*) ASC LIMIT 1;", "SELECT element, COUNT(*) as count FROM ( SELECT m.molecule_id FROM molecule m WHERE m.label != '-' ) n JOIN atom a ON a.molecule_id = n.molecule_id GROUP BY element ORDER BY count DESC LIMIT 1;"]}, {"question_id": 213, "answer_sql": []}, {"question_id": 214, "answer_sql": ["SELECT m.label FROM molecule m JOIN connected c ON m.molecule_id = c.atom_id JOIN atom a ON a.atom_id = c.atom_id2 WHERE a.element <> 'sn' AND m.label IS NOT NULL GROUP BY m.molecule_id HAVING COUNT(DISTINCT a.atom_id) = 1 ORDER BY m.label;"]}, {"question_id": 215, "answer_sql": ["SELECT COUNT(*) FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE atom.element = 'i' AND bond.bond_type = '-';", "SELECT COUNT(*) FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE atom.element = 'i' AND bond.bond_type = '-' AND atom.atom_id IN (SELECT atom_id FROM connected WHERE atom_id2 IN (SELECT atom_id FROM atom WHERE element = 's'));"]}, {"question_id": 216, "answer_sql": ["SELECT a.atom_id, a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = '#';", "SELECT a.atom_id, a.element, b.bond_type FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = '#';"]}, {"question_id": 217, "answer_sql": ["SELECT a.atom_id, a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.molecule_id = 'TR181' GROUP BY a.atom_id, a.element;", "SELECT a.atom_id, a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.molecule_id = 'TR181';"]}, {"question_id": 218, "answer_sql": []}, {"question_id": 219, "answer_sql": []}, {"question_id": 220, "answer_sql": ["SELECT DISTINCT element FROM atom JOIN connected ON atom.atom_id = connected.atom_id WHERE connected.atom_id IN ( SELECT atom_id FROM connected WHERE atom_id2 = 'TR000' ) ORDER BY element ASC LIMIT 3;", "SELECT DISTINCT element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.molecule_id = 'TR000' ORDER BY element ASC LIMIT 3;"]}, {"question_id": 221, "answer_sql": ["SELECT atom.atom_id, atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR001_2_6' AND atom.molecule_id = 'TR001';", "SELECT a.atom_id, a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_id = 'TR001_2_6' AND c.atom_id2 = 'TR001';"]}, {"question_id": 222, "answer_sql": ["SELECT SUM(label = '+') - SUM(label = '-') AS difference FROM molecule;"]}, {"question_id": 223, "answer_sql": ["SELECT atom_id FROM connected WHERE bond_id = 'TR_000_2_5';"]}, {"question_id": 224, "answer_sql": ["SELECT bond_id FROM connected WHERE atom_id2 = 'TR000_2';"]}, {"question_id": 225, "answer_sql": ["SELECT m.molecule_id, m.label FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = ' = ' ORDER BY m.label ASC LIMIT 5;"]}, {"question_id": 226, "answer_sql": ["SELECT (SUM(bond_type = ' = ') / COUNT(bond_id)) * 100 as percent_double_bonds FROM bond WHERE molecule_id = 'TR008';"]}, {"question_id": 227, "answer_sql": []}, {"question_id": 228, "answer_sql": ["SELECT (SUM(atom.element = 'h') * 100.0 / COUNT(atom.atom_id)) as percent FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON molecule.molecule_id = connected.atom_id2 WHERE molecule.molecule_id = 'TR206';", "SELECT (SUM(element = 'h') * 100.0 / COUNT(atom_id)) AS percent_hydrogen FROM atom WHERE molecule_id = 'TR206';"]}, {"question_id": 229, "answer_sql": ["SELECT bond_type FROM bond JOIN connected ON bond.bond_id = connected.bond_id WHERE connected.atom_id = 'TR000'", "SELECT bond_type FROM bond WHERE molecule_id = 'TR000';"]}, {"question_id": 230, "answer_sql": ["SELECT atom.element, molecule.label FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON molecule.molecule_id = connected.atom_id WHERE molecule.molecule_id = 'TR060' GROUP BY atom.element, molecule.label ORDER BY atom.element, molecule.label;", "SELECT a.element, m.label FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id JOIN molecule m ON b.molecule_id = m.molecule_id WHERE m.molecule_id = 'TR060'"]}, {"question_id": 231, "answer_sql": ["SELECT m.molecule_id, m.label, b.bond_type, COUNT(b.bond_type) as bond_count FROM molecule as m JOIN connected as c ON m.molecule_id = c.atom_id JOIN bond as b ON c.bond_id = b.bond_id WHERE m.molecule_id = 'TR018' GROUP BY b.bond_type ORDER BY bond_count DESC;", "SELECT b.bond_type, COUNT(*) as bond_count FROM connected c JOIN atom a ON c.atom_id = a.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE a.molecule_id = 'TR018' GROUP BY b.bond_type ORDER BY bond_count DESC LIMIT 1;", "SELECT b.bond_type FROM connected c JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE a1.molecule_id = 'TR018' GROUP BY b.bond_type ORDER BY SUM(c.atom_id2 = 'atom1') DESC, b.bond_type LIMIT 1;", "SELECT b.bond_type, m.label FROM (SELECT bond_type, COUNT(*) as count FROM connected JOIN bond ON connected.bond_id = bond.bond_id WHERE molecule_id = 'TR018' GROUP BY bond_type) as t JOIN bond as b ON t.bond_type = b.bond_type JOIN molecule as m ON b.molecule_id = m.molecule_id WHERE m.label = '+' ORDER BY t.count DESC LIMIT 1;"]}, {"question_id": 232, "answer_sql": ["SELECT m.molecule_id, m.label FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id JOIN connected c ON c.bond_id = b.bond_id WHERE c.atom_id2 NOT IN ( SELECT atom_id FROM atom a WHERE a.element = 'C' ) GROUP BY m.molecule_id, m.label HAVING COUNT(DISTINCT c.atom_id) = 2 ORDER BY m.label LIMIT 3;", "SELECT m.molecule_id, m.label FROM molecule m WHERE m.molecule_id NOT IN ( SELECT c.atom_id2 FROM connected c WHERE c.bond_id IN ( SELECT b.bond_id FROM bond b WHERE b.bond_type = '-' ) GROUP BY c.atom_id2 HAVING COUNT(c.atom_id) = 1 ) ORDER BY m.label ASC LIMIT 3;"]}, {"question_id": 233, "answer_sql": ["SELECT b.bond_type FROM bond b JOIN connected c ON b.bond_id = c.bond_id WHERE c.atom_id IN ( SELECT atom_id FROM atom WHERE molecule_id = 'TR006' ) ORDER BY b.bond_type ASC LIMIT 2;", "SELECT b.bond_type FROM bond b JOIN connected c ON b.bond_id = c.bond_id WHERE c.atom_id IN ( SELECT a.atom_id FROM atom a JOIN connected conn ON a.atom_id = conn.atom_id WHERE conn.atom_id2 = 'TR006' ) ORDER BY b.bond_type ASC LIMIT 2;"]}, {"question_id": 234, "answer_sql": ["SELECT COUNT(*) FROM `connected` JOIN `bond` ON `connected`.`bond_id` = `bond`.`bond_id` WHERE `atom_id` = 'TR009_12' OR `atom_id2` = 'TR009_12';"]}, {"question_id": 235, "answer_sql": ["SELECT COUNT(*) FROM `molecule` JOIN `atom` ON `molecule`.`molecule_id` = `atom`.`molecule_id` JOIN `connected` ON `atom`.`atom_id` = `connected`.`atom_id` WHERE `element` = 'br' AND `label` = '+'", "SELECT COUNT(*) FROM molecule JOIN connected ON molecule.molecule_id = connected.atom_id JOIN atom ON connected.atom_id = atom.atom_id JOIN bond ON atom.molecule_id = bond.molecule_id WHERE molecule.label = '+' AND atom.element = 'br';"]}, {"question_id": 236, "answer_sql": ["SELECT bond.bond_type, atom.atom_id, atom.element FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON connected.atom_id = atom.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE bond.bond_id = 'TR001_6_9';", "SELECT bond_type, atom_id, atom_id2 FROM bond JOIN connected ON bond.bond_id = connected.bond_id WHERE connected.bond_id = 'TR001_6_9';", "SELECT bond.bond_type, atom.atom_id, atom.element FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON connected.atom_id = atom.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR001_6_9'"]}, {"question_id": 237, "answer_sql": ["SELECT m.label, CASE WHEN EXISTS (SELECT 1 FROM connected AS c WHERE c.atom_id = 'TR001_10' AND c.bond_id IN (SELECT b.bond_id FROM bond AS b WHERE b.molecule_id = m.molecule_id)) THEN 'Yes' ELSE 'No' END AS is_carcinogenic FROM molecule AS m WHERE m.molecule_id = (SELECT molecule_id FROM atom WHERE atom_id = 'TR001_10');", "SELECT m.molecule_id, m.label FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN molecule m ON m.molecule_id = c.atom_id WHERE a.atom_id = 'TR001_10'", "SELECT m.label, CASE WHEN EXISTS (SELECT 1 FROM connected AS c INNER JOIN atom AS a ON c.atom_id = a.atom_id INNER JOIN bond AS b ON c.bond_id = b.bond_id WHERE a.atom_id = 'TR001_10' AND b.bond_type = 'C') THEN 'Carcinogenic' ELSE 'Not carcinogenic' END AS Is_Carcinogenic FROM molecule AS m WHERE m.molecule_id IN (SELECT DISTINCT a.molecule_id FROM atom AS a INNER JOIN connected AS c ON a.atom_id = c.atom_id WHERE a.atom_id = 'TR001_10');"]}, {"question_id": 238, "answer_sql": ["SELECT COUNT(*) FROM `bond` WHERE `bond_type` = '#';", "SELECT COUNT(*) FROM bond JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond_type = '#';"]}, {"question_id": 239, "answer_sql": ["SELECT COUNT(*) FROM connected WHERE atom_id='TR%_19';"]}, {"question_id": 240, "answer_sql": ["SELECT element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.molecule_id = 'TR004' GROUP BY element;", "SELECT element FROM atom JOIN connected ON atom.atom_id = connected.atom_id WHERE connected.atom_id2 = 'TR004'"]}, {"question_id": 241, "answer_sql": ["SELECT COUNT(*) FROM molecule WHERE label != '-';"]}, {"question_id": 242, "answer_sql": ["SELECT m.molecule_id, m.label FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN molecule m ON c.atom_id = m.molecule_id WHERE SUBSTRING(a.atom_id, 7, 2) BETWEEN 21 AND 25 AND m.label = '+' GROUP BY m.molecule_id;"]}, {"question_id": 243, "answer_sql": ["SELECT b.bond_type FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE a1.element = 'p' AND a2.element = 'n';", "SELECT b.bond_type FROM bond b JOIN connected c ON b.bond_id = c.bond_id WHERE c.atom_id IN (SELECT atom_id FROM atom WHERE element IN ('p', 'n'));"]}, {"question_id": 244, "answer_sql": ["SELECT m.label FROM molecule m JOIN ( SELECT b.molecule_id, COUNT(*) as double_bonds FROM bond b WHERE b.bond_type = ' = ' GROUP BY b.molecule_id ORDER BY double_bonds DESC LIMIT 1 ) d ON m.molecule_id = d.molecule_id WHERE m.label = '+'"]}, {"question_id": 245, "answer_sql": []}, {"question_id": 246, "answer_sql": []}, {"question_id": 247, "answer_sql": ["SELECT atom.element FROM atom WHERE atom.atom_id NOT IN (SELECT connected.atom_id FROM connected)", "SELECT atom.element FROM atom LEFT JOIN connected ON atom.atom_id = connected.atom_id2 WHERE atom.atom_id NOT IN (SELECT connected.atom_id FROM connected) AND atom.element NOT IN ('h', 'c', 'n', 'p', 's', 'o', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca');"]}, {"question_id": 248, "answer_sql": ["SELECT a.atom_id, a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = '#' AND c.atom_id2 = 'TR447';", "SELECT atom.atom_id, atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON bond.bond_id = connected.bond_id WHERE bond.bond_type = '#' AND atom.molecule_id = 'TR447';"]}, {"question_id": 249, "answer_sql": ["SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON bond.bond_id = connected.bond_id WHERE bond.molecule_id = 'TR144_8_19' GROUP BY atom.element;", "SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id WHERE connected.bond_id = 'TR144_8_19';"]}, {"question_id": 250, "answer_sql": ["SELECT a.molecule_id, COUNT(b.bond_id) as double_bonds FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE a.element = 'C' AND b.bond_type = ' = ' AND a.molecule_id IN ( SELECT m.molecule_id FROM molecule m WHERE label = '+' ) GROUP BY a.molecule_id ORDER BY double_bonds DESC LIMIT 1;"]}, {"question_id": 251, "answer_sql": ["SELECT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = 'c' GROUP BY a.element ORDER BY COUNT(*) ASC LIMIT 1;", "SELECT a.element FROM atom a JOIN ( SELECT atom_id, MIN(atom_id) as min_atom_id FROM connected WHERE bond_id IN ( SELECT bond_id FROM bond WHERE molecule_id IN ( SELECT molecule_id FROM molecule WHERE label = '+' ) ) GROUP BY atom_id ) b ON a.atom_id = b.min_atom_id ORDER BY a.element;", "SELECT a.element FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.label = '+' GROUP BY a.element ORDER BY COUNT(*) ASC LIMIT 1;", "SELECT element, COUNT(*) as frequency FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE label = '+' GROUP BY element ORDER BY frequency ASC LIMIT 1;"]}, {"question_id": 252, "answer_sql": ["SELECT atom.atom_id, atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id2 JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = 'single' AND atom.element = 'pb';", "SELECT a.atom_id, a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id WHERE a.element = 'pb'", "SELECT atom.atom_id FROM atom JOIN connected ON atom.atom_id = connected.atom_id2 WHERE atom.element = 'pb';"]}, {"question_id": 253, "answer_sql": ["SELECT element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON bond.bond_id = connected.bond_id WHERE bond_type = '#'", "SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON bond.bond_id = connected.bond_id WHERE bond.bond_type = '#' GROUP BY atom.element ORDER BY atom.element;"]}, {"question_id": 254, "answer_sql": []}, {"question_id": 255, "answer_sql": []}, {"question_id": 256, "answer_sql": ["SELECT COUNT(*) FROM atom WHERE element IN ('c', 'h');", "SELECT COUNT(*) FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE atom.element IN ('c', 'h')"]}, {"question_id": 257, "answer_sql": ["SELECT `atom_id2` FROM `connected` JOIN `atom` ON `atom`.`atom_id` = `connected`.`atom_id2` WHERE `atom`.`element` = 's' GROUP BY `atom_id2`;", "SELECT `atom_id2` FROM `connected` JOIN `atom` ON `connected`.`atom_id2` = `atom`.`atom_id` WHERE `atom`.`element` = 's';", "SELECT atom.atom_id AS atom_id2 FROM atom JOIN connected ON atom.atom_id = connected.atom_id2 JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = 'sulfur'"]}, {"question_id": 258, "answer_sql": []}, {"question_id": 259, "answer_sql": ["SELECT COUNT(*) FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '-';", "SELECT COUNT(*) FROM atom WHERE element NOT IN (SELECT DISTINCT element FROM bond WHERE bond_type = '-');", "SELECT COUNT(*) FROM atom WHERE element IS NOT NULL AND atom_id IN (SELECT atom_id FROM connected WHERE bond_id IN (SELECT bond_id FROM bond WHERE bond_type = '-'));"]}, {"question_id": 260, "answer_sql": ["SELECT COUNT(*) FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE atom.element IN ('p', 'br') AND bond.bond_type = '#';", "SELECT COUNT(*) FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE atom.element = 'p' OR atom.element = 'br' AND bond.bond_type = '#';"]}, {"question_id": 261, "answer_sql": ["SELECT b.bond_id FROM bond b JOIN connected c ON b.bond_id = c.bond_id WHERE c.atom_id IN ( SELECT a.atom_id FROM atom a JOIN connected conn ON a.atom_id = conn.atom_id WHERE a.element = 'C' ) AND b.bond_type = 'C'", "SELECT bond.bond_id FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON connected.atom_id = atom.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+' GROUP BY bond.bond_id;"]}, {"question_id": 262, "answer_sql": ["SELECT m.label FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id JOIN connected c ON c.atom_id = b.molecule_id WHERE b.bond_type = '-' AND c.bond_id IS NULL"]}, {"question_id": 263, "answer_sql": []}, {"question_id": 264, "answer_sql": ["SELECT m.label FROM molecule m JOIN connected c ON m.molecule_id = c.atom_id JOIN atom a ON c.atom_id2 = a.atom_id WHERE a.atom_id IN ('TR000', 'TR001', 'TR002')"]}, {"question_id": 265, "answer_sql": ["SELECT DISTINCT m.molecule_id FROM molecule m JOIN atom a ON a.molecule_id = m.molecule_id WHERE m.label != '-' AND a.element NOT IN ('C', 'N', 'O', 'S');", "SELECT DISTINCT m.molecule_id FROM molecule m JOIN atom a ON a.molecule_id = m.molecule_id JOIN bond b ON b.molecule_id = a.atom_id JOIN connected c ON c.atom_id = a.atom_id AND c.atom_id2 = a.atom_id WHERE m.label != '-' AND b.bond_type != 'single';"]}, {"question_id": 266, "answer_sql": ["SELECT COUNT(*) FROM `molecule` AS m JOIN `connected` AS c ON m.`molecule_id` = c.`atom_id` JOIN `atom` AS a ON c.`atom_id2` = a.`atom_id` WHERE a.`element` = 'C' AND m.`molecule_id` BETWEEN 'TR000' AND 'TR030' AND m.`label` = '+';"]}, {"question_id": 267, "answer_sql": ["SELECT bond_type FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.molecule_id BETWEEN 'TR000' AND 'TR050'", "SELECT bond.bond_type FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.molecule_id BETWEEN 'TR000' AND 'TR050';", "SELECT bond_type FROM bond JOIN connected ON bond.bond_id = connected.bond_id WHERE connected.atom_id IN (SELECT atom_id FROM atom WHERE molecule_id IN (SELECT molecule_id FROM molecule WHERE label = 'TR000' OR label = 'TR050'));", "SELECT bond_type FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.molecule_id BETWEEN 'TR000' AND 'TR050' GROUP BY bond_type ORDER BY bond_type;"]}, {"question_id": 268, "answer_sql": ["SELECT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_id = 'TR001_10_11';", "SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON bond.bond_id = connected.bond_id WHERE bond.bond_type = 'TR001_10_11';"]}, {"question_id": 269, "answer_sql": ["SELECT COUNT(*) FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.element = 'i';"]}, {"question_id": 270, "answer_sql": ["SELECT MAX(label) as Carcinogenicity FROM molecule JOIN atom ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'ca'", "SELECT label, COUNT(*) as count FROM ( SELECT a.molecule_id, m.label FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE a.element = 'ca' ) t GROUP BY label ORDER BY count DESC;"]}, {"question_id": 271, "answer_sql": ["SELECT a.atom_id, a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_id = 'TR001_1_8' AND a.element IN ('cl', 'c');", "SELECT atom.atom_id, atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE atom.element = 'cl' AND bond.bond_type = 'TR001_1_8' AND atom.atom_id IN ( SELECT atom_id2 FROM connected WHERE atom_id = 'cl' );"]}, {"question_id": 272, "answer_sql": ["SELECT DISTINCT m.molecule_id, m.label FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id JOIN connected c ON c.atom_id = m.molecule_id WHERE b.bond_type = '#' AND m.label = '-' AND c.atom_id2 IN ( SELECT atom_id FROM atom WHERE element = 'c' ) ORDER BY m.molecule_id;"]}, {"question_id": 273, "answer_sql": []}, {"question_id": 274, "answer_sql": ["SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON molecule.molecule_id = connected.atom_id2 WHERE molecule.molecule_id = 'TR001';"]}, {"question_id": 275, "answer_sql": ["SELECT m.molecule_id FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = ' = ';"]}, {"question_id": 276, "answer_sql": ["SELECT atom_id, atom_id2 FROM connected JOIN bond ON connected.bond_id = bond.bond_id WHERE bond_type = '#'", "SELECT atom_id, atom_id2 FROM connected JOIN bond ON connected.bond_id = bond.bond_id WHERE bond_type = '#' GROUP BY atom_id, atom_id2 ORDER BY atom_id, atom_id2;", "SELECT atom_id, atom_id2 FROM connected JOIN bond ON connected.bond_id = bond.bond_id WHERE bond_type = '#' LIMIT 2;"]}, {"question_id": 277, "answer_sql": ["SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR005_16_26';"]}, {"question_id": 278, "answer_sql": ["SELECT COUNT(*) FROM `molecule` AS m JOIN `bond` AS b ON m.`molecule_id` = b.`molecule_id` JOIN `connected` AS c ON c.`bond_id` = b.`bond_id` WHERE b.`bond_type` = '-';", "SELECT COUNT(*) FROM `molecule` JOIN `connected` ON `molecule`.`molecule_id` = `connected`.`atom_id2` JOIN `atom` ON `connected`.`atom_id` = `atom`.`atom_id` WHERE `atom`.`element` = 'C' AND `connected`.`bond_id` IS NULL;", "SELECT COUNT(*) FROM `molecule` JOIN `bond` ON `molecule`.`molecule_id` = `bond`.`molecule_id` JOIN `atom` ON `bond`.`molecule_id` = `atom`.`molecule_id` WHERE `bond`.`bond_type` = '-';", "SELECT COUNT(*) FROM connected JOIN atom ON connected.atom_id = atom.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '-';"]}, {"question_id": 279, "answer_sql": ["SELECT m.label FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id JOIN molecule m ON b.molecule_id = m.molecule_id WHERE b.bond_id = 'TR001_10_11' AND m.label = '+'"]}, {"question_id": 280, "answer_sql": ["SELECT c.bond_id, m.label FROM connected AS c JOIN atom AS a ON c.atom_id = a.atom_id JOIN bond AS b ON c.bond_id = b.bond_id JOIN molecule AS m ON b.molecule_id = m.molecule_id WHERE a.element = '#' AND m.label IN ('+', '-')", "SELECT b.bond_id, m.label FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE b.bond_type = '#' AND m.label = '+'", "SELECT b.bond_id FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE m.label = '+' AND b.bond_type = '#'", "SELECT b.bond_id, m.label FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE b.bond_type = '#' AND m.label IN ('+', '-')", "SELECT c.bond_id, m.label FROM connected AS c JOIN atom AS a1 ON c.atom_id = a1.atom_id JOIN bond AS b ON b.bond_id = c.bond_id JOIN molecule AS m ON m.molecule_id = b.molecule_id WHERE b.bond_type = '#' AND m.label = '+'"]}, {"question_id": 281, "answer_sql": ["SELECT element, COUNT(*) as count FROM connected JOIN atom ON connected.atom_id = atom.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE substr(atom.atom_id, 7, 1) = '4' AND molecule.label = '+' AND atom.element IN ('c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca') GROUP BY element ORDER BY count DESC;", "SELECT element, COUNT(*) as count FROM connected JOIN atom ON atom.atom_id = connected.atom_id JOIN molecule ON molecule.molecule_id = atom.molecule_id WHERE substr(atom.atom_id, 7, 1) = '4' AND atom.element = 'c' GROUP BY element HAVING element = 'c'", "SELECT COUNT(*) FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE substr(atom.atom_id, 7, 1) = '4' AND atom.element = 'c' AND bond.bond_type = 'c'", "SELECT element, COUNT(*) as count FROM connected JOIN atom ON atom.atom_id = connected.atom_id JOIN molecule ON molecule.molecule_id = atom.molecule_id WHERE substr(atom.atom_id, 7, 1) = '4' AND molecule.label = '+' GROUP BY element ORDER BY count DESC;", "SELECT COUNT(*) FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE substr(atom.atom_id, 7, 1) = '4' AND atom.element = 'c' AND molecule.label = '+'"]}, {"question_id": 282, "answer_sql": ["SELECT label FROM molecule JOIN atom ON molecule.molecule_id = atom.molecule_id JOIN connected ON atom.atom_id = connected.atom_id WHERE element = 'h' AND molecule.molecule_id = 'TR006' GROUP BY molecule.molecule_id, label HAVING COUNT(atom.atom_id) / COUNT(connected.atom_id2) = 1;", "SELECT label FROM molecule JOIN atom ON atom.molecule_id = molecule.molecule_id JOIN connected ON connected.atom_id = atom.atom_id WHERE molecule.molecule_id = 'TR006' AND atom.element = 'h'", "SELECT label FROM molecule JOIN atom ON molecule.molecule_id = atom.molecule_id JOIN connected ON atom.atom_id = connected.atom_id WHERE element = 'h' AND molecule.molecule_id = 'TR006' GROUP BY molecule.molecule_id HAVING SUM(1) = (SELECT COUNT(1) FROM atom WHERE element = 'h')", "SELECT m.label, (SELECT COUNT(*) FROM atom WHERE atom.element = 'h' AND atom.molecule_id = 'TR006') / (SELECT COUNT(*) FROM atom WHERE atom.molecule_id = 'TR006') AS ratio FROM molecule m WHERE m.molecule_id = 'TR006';", "SELECT m.label, (SELECT COUNT(*) FROM atom WHERE atom.element = 'h' AND atom.molecule_id = 'TR006') as Hydrogen_ratio FROM molecule as m WHERE m.molecule_id = 'TR006';"]}, {"question_id": 283, "answer_sql": ["SELECT label FROM molecule JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'ca'", "SELECT molecule_id FROM atom WHERE element = 'ca'", "SELECT m.label FROM molecule m JOIN atom a ON a.molecule_id = m.molecule_id JOIN connected c ON c.atom_id = a.atom_id WHERE a.element = 'ca' GROUP BY m.molecule_id HAVING SUM(CASE WHEN m.label = '+' THEN 1 ELSE 0 END) > 0"]}, {"question_id": 284, "answer_sql": ["SELECT bond_type FROM bond WHERE molecule_id IN (SELECT molecule_id FROM atom WHERE element = 'te');", "SELECT bond_type FROM bond JOIN connected ON bond.bond_id = connected.bond_id WHERE connected.atom_id IN (SELECT atom_id FROM atom WHERE element = 'te')"]}, {"question_id": 285, "answer_sql": ["SELECT a.element AS atom1, b.element AS atom2 FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN atom b ON c.atom_id2 = b.atom_id WHERE a.element IN ('c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca') AND b.element IN ('c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca') AND a.atom_id < b.atom_id AND a.molecule_id = 'TR001_10_11' AND b.molecule_id = 'TR001_10_11';", "SELECT a.element AS atom1, b.element AS atom2 FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN atom b ON c.atom_id2 = b.atom_id WHERE a.element = 'cl' AND b.element = 'c'"]}, {"question_id": 286, "answer_sql": ["SELECT molecule_id, COUNT(*) as triple_bond_count FROM connected JOIN bond ON connected.bond_id = bond.bond_id WHERE bond_type = '#' GROUP BY molecule_id HAVING triple_bond_count / COUNT(DISTINCT molecule_id) * 100 > 0", "SELECT (SELECT COUNT(*) FROM connected WHERE bond_id IS NOT NULL) * 100.0 / (SELECT COUNT(*) FROM connected) FROM connected WHERE bond_id = '#';", "SELECT COUNT(*) as triple_bond_count FROM connected JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '#';", "SELECT (SELECT COUNT(*) FROM connected WHERE bond_id IS NOT NULL) * 100.0 / (SELECT COUNT(*) FROM molecule) AS percentage_triple_bonds;", "SELECT (COUNT(*) * 100.0) / (SELECT COUNT(*) FROM connected) AS percentage_triple_bonds FROM connected JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '#';", "SELECT (COUNT(*) * 100.0) / (SELECT COUNT(*) FROM molecule WHERE label = '#') AS percentage FROM connected WHERE bond_id IN (SELECT bond_id FROM bond WHERE bond_type = '#');", "SELECT (SELECT COUNT(*) FROM connected WHERE bond_id IS NOT NULL) * 100.0 / (SELECT COUNT(*) FROM connected) AS percentage_triple_bonds;", "SELECT (SELECT COUNT(*) FROM connected WHERE bond_id = '#') * 100.0 / (SELECT COUNT(*) FROM bond) AS percentage_triple_bond;"]}, {"question_id": 287, "answer_sql": []}, {"question_id": 288, "answer_sql": ["SELECT label FROM molecule JOIN connected ON molecule.molecule_id = connected.atom_id WHERE connected.atom_id = 'TR001_1'", "SELECT m.label FROM molecule m JOIN atom a ON a.molecule_id = m.molecule_id JOIN connected c ON c.atom_id = a.atom_id WHERE a.atom_id = 'TR001_1'"]}, {"question_id": 289, "answer_sql": ["SELECT label FROM molecule JOIN atom ON atom.molecule_id = molecule.molecule_id JOIN bond ON bond.molecule_id = molecule.molecule_id WHERE atom.element = 'N' AND bond.bond_type = 'C' GROUP BY molecule.molecule_id HAVING SUM(label = '+') = COUNT(*)"]}, {"question_id": 290, "answer_sql": ["SELECT a.atom_id, a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = 'single' AND a.element = 'cl';", "SELECT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.molecule_id = 'TR151' GROUP BY a.element;", "SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR151'", "SELECT a.atom_id, a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id WHERE a.element = 'cl'", "SELECT a.atom_id, a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE a.element = 'cl'"]}, {"question_id": 291, "answer_sql": ["SELECT COUNT(*) FROM molecule JOIN connected ON molecule.molecule_id = connected.atom_id JOIN atom ON atom.atom_id = connected.atom_id2 JOIN bond ON bond.bond_id = connected.bond_id WHERE atom.element = 'C' AND bond.bond_type = 'ar' AND molecule.label = '+'", "SELECT COUNT(*) FROM `molecule` WHERE `label` = '+'"]}, {"question_id": 292, "answer_sql": ["SELECT atom_id FROM atom WHERE element = 'c' AND substr(molecule_id, 3, 3) BETWEEN 10 AND 50;"]}, {"question_id": 293, "answer_sql": ["SELECT COUNT(atom.atom_id) FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+'"]}, {"question_id": 294, "answer_sql": ["SELECT bond.bond_id FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON atom.atom_id = connected.atom_id JOIN molecule ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+' AND bond.bond_type = ' = ';"]}, {"question_id": 295, "answer_sql": ["SELECT COUNT(*) FROM atom JOIN connected ON atom.atom_id = connected.atom_id2 JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE element = 'h' AND label = '+' AND molecule.molecule_id IN ( SELECT molecule_id FROM atom WHERE element = 'h' );", "SELECT COUNT(*) FROM atom JOIN connected ON atom.atom_id = connected.atom_id2 JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE element = 'h' AND label = '+' AND molecule.molecule_id IN (SELECT molecule_id FROM bond WHERE bond_type = 'c');"]}, {"question_id": 296, "answer_sql": ["SELECT m.molecule_id FROM molecule m JOIN connected c ON m.molecule_id = c.atom_id WHERE c.atom_id2 = 'TR00_1' AND c.bond_id IN ( SELECT bond_id FROM bond WHERE molecule_id = 'TR00_1_2' );"]}, {"question_id": 297, "answer_sql": ["SELECT a.atom_id FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE a.element = 'c' AND b.bond_type = 'single' AND a.molecule_id NOT IN ( SELECT m.molecule_id FROM molecule m WHERE m.label = '-' );", "SELECT atom.atom_id FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON bond.bond_id = connected.bond_id WHERE atom.element = 'c' AND bond.bond_type = '-' LIMIT 1;"]}, {"question_id": 298, "answer_sql": ["SELECT (SUM(m.label = '+' AND a.element = 'h') * 100.0) / COUNT(m.molecule_id) AS percentage FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.element = 'h';"]}, {"question_id": 299, "answer_sql": ["SELECT b.bond_type FROM connected c JOIN atom a ON c.atom_id = a.atom_id JOIN bond b ON c.bond_id = b.bond_id JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.molecule_id = 'TR124' AND b.bond_type = 'c'", "SELECT label FROM molecule WHERE molecule_id = 'TR124';"]}, {"question_id": 300, "answer_sql": ["SELECT a.atom_id, a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id WHERE c.atom_id2 = 'TR186' GROUP BY a.atom_id, a.element HAVING COUNT(DISTINCT c.atom_id2) = 1;"]}, {"question_id": 301, "answer_sql": ["SELECT bond_type FROM bond WHERE bond_id = 'TR007_4_19';", "SELECT bond_type FROM bond WHERE molecule_id = 'TR007_4_19';"]}, {"question_id": 302, "answer_sql": ["SELECT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = 'TR001_2_4'", "SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN atom as atom2 ON connected.atom_id2 = atom2.atom_id WHERE connected.bond_id = 'TR001_2_4'"]}, {"question_id": 303, "answer_sql": []}, {"question_id": 304, "answer_sql": ["SELECT m.molecule_id, a.element FROM molecule m JOIN connected c ON m.molecule_id = c.atom_id JOIN atom a ON c.atom_id = a.atom_id WHERE a.element IN ('c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca') AND m.label = '+' ORDER BY m.molecule_id;"]}, {"question_id": 305, "answer_sql": []}, {"question_id": 306, "answer_sql": ["SELECT m.molecule_id, m.label, GROUP_CONCAT(DISTINCT a.element) as elements FROM molecule m JOIN connected c ON m.molecule_id = c.atom_id JOIN atom a ON c.atom_id2 = a.atom_id WHERE c.bond_id = '#' GROUP BY m.molecule_id, m.label HAVING elements LIKE '%c%' AND elements LIKE '%h%' AND elements LIKE '%o%';"]}, {"question_id": 307, "answer_sql": ["SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON bond.bond_id = connected.bond_id WHERE bond.bond_id = 'TR000_2_3'", "SELECT a.element, b.bond_type FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_id = 'TR000_2_3';", "SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = 'TR000_2_3';"]}, {"question_id": 308, "answer_sql": ["SELECT COUNT(*) FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON bond.molecule_id = atom.molecule_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'cl';", "SELECT COUNT(*) FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON atom.atom_id = connected.atom_id JOIN molecule ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'cl';", "SELECT COUNT(*) FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON atom.atom_id = connected.atom_id WHERE atom.element = 'cl';"]}, {"question_id": 309, "answer_sql": ["SELECT atom.atom_id, COUNT(bond.bond_id) as bond_count FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE atom.molecule_id = 'TR346' GROUP BY atom.atom_id;", "SELECT atom.atom_id, COUNT(bond.bond_id) as bond_count FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON bond.molecule_id = connected.atom_id WHERE atom.molecule_id = 'TR346' GROUP BY atom.atom_id;"]}, {"question_id": 310, "answer_sql": ["SELECT COUNT(*) FROM molecule JOIN bond ON molecule.molecule_id = bond.molecule_id JOIN connected ON connected.atom_id = atom.atom_id JOIN atom ON atom.molecule_id = molecule.molecule_id WHERE bond.bond_type = ' = ' AND molecule.label = '+'"]}, {"question_id": 311, "answer_sql": ["SELECT COUNT(*) FROM `molecule` WHERE `molecule_id` NOT IN ( SELECT `molecule_id` FROM `bond` WHERE `bond_type` != ' = ' ) AND `molecule_id` NOT IN ( SELECT `molecule_id` FROM `atom` WHERE `element` = 's' )", "SELECT COUNT(*) FROM molecule WHERE molecule_id NOT IN ( SELECT DISTINCT molecule_id FROM atom WHERE element = 's' AND atom_id IN ( SELECT atom_id FROM bond WHERE bond_type != ' = ' ) );"]}, {"question_id": 312, "answer_sql": ["SELECT m.label FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id JOIN molecule m ON b.molecule_id = m.molecule_id WHERE b.bond_type = 'TR001_2_4' AND m.label = '+'"]}, {"question_id": 313, "answer_sql": ["SELECT COUNT(*) FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR005';", "SELECT COUNT(*) FROM atom WHERE molecule_id = 'TR005';"]}, {"question_id": 314, "answer_sql": ["SELECT COUNT(*) FROM bond WHERE bond_type = '-';"]}, {"question_id": 315, "answer_sql": []}, {"question_id": 316, "answer_sql": ["SELECT m.molecule_id, m.label FROM molecule AS m JOIN atom AS a ON m.molecule_id = a.molecule_id JOIN connected AS c ON a.atom_id = c.atom_id WHERE a.element = 'c' AND m.label != '-' GROUP BY m.molecule_id, m.label HAVING COUNT(DISTINCT c.bond_id) = 0;", "SELECT m.molecule_id, m.label FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id JOIN connected c ON a.atom_id = c.atom_id WHERE a.element = 'c' AND m.label != '-'", "SELECT m.molecule_id, m.label FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id JOIN connected c ON a.atom_id = c.atom_id WHERE a.element = 'c' AND m.label != '-' GROUP BY m.molecule_id, m.label ORDER BY COUNT(DISTINCT c.bond_id) DESC;"]}, {"question_id": 317, "answer_sql": []}, {"question_id": 318, "answer_sql": []}, {"question_id": 319, "answer_sql": ["SELECT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_id = 'TR001_3_4';", "SELECT COUNT(*) FROM connected WHERE bond_id = 'TR001_3_4'", "SELECT COUNT(DISTINCT atom.element) as 'Number of unique elements' FROM connected JOIN atom ON connected.atom_id = atom.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR001_3_4';", "SELECT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_id = 'TR001_3_4' GROUP BY a.element"]}, {"question_id": 320, "answer_sql": ["SELECT bond_type FROM bond JOIN connected ON bond.bond_id = connected.bond_id WHERE connected.atom_id = 'TR000_1' AND connected.atom_id2 = 'TR000_2';"]}, {"question_id": 321, "answer_sql": []}, {"question_id": 322, "answer_sql": ["SELECT element FROM atom WHERE atom_id = 'TR000_1';"]}, {"question_id": 323, "answer_sql": ["SELECT label FROM molecule WHERE molecule_id = 'TR000';", "SELECT label FROM molecule JOIN connected ON molecule.molecule_id = connected.atom_id JOIN atom ON atom.atom_id = connected.atom_id2 WHERE atom.atom_id = 'TR000'"]}, {"question_id": 324, "answer_sql": []}, {"question_id": 325, "answer_sql": ["SELECT COUNT(*) FROM molecule JOIN connected ON molecule.molecule_id = connected.atom_id2 JOIN atom ON atom.atom_id = connected.atom_id WHERE atom.element = 'n' AND molecule.label = '+'", "SELECT COUNT(*) FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'n' AND molecule.label = '+'", "SELECT COUNT(*) FROM `molecule` JOIN `atom` ON `molecule`.`molecule_id` = `atom`.`molecule_id` WHERE `atom`.`element` = 'n' AND `molecule`.`label` = '+'", "SELECT COUNT(*) FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE atom.element = 'n' AND connected.bond_id IS NOT NULL;"]}, {"question_id": 326, "answer_sql": ["SELECT m.molecule_id, m.label FROM molecule m JOIN atom a ON a.molecule_id = m.molecule_id JOIN bond b ON b.molecule_id = m.molecule_id WHERE a.element = 's' AND b.bond_type = ' = ';"]}, {"question_id": 327, "answer_sql": ["SELECT m.label FROM molecule m JOIN connected c ON m.molecule_id = c.atom_id WHERE m.label != '-' GROUP BY m.molecule_id HAVING COUNT(c.atom_id2) > 5;"]}, {"question_id": 328, "answer_sql": ["SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON bond.bond_id = connected.bond_id WHERE bond.bond_type = '=' AND atom.molecule_id = 'TR024'", "SELECT element FROM connected JOIN atom ON connected.atom_id = atom.atom_id JOIN bond ON atom.atom_id = bond.molecule_id JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR024' AND bond.bond_type = '=';"]}, {"question_id": 329, "answer_sql": ["SELECT m.molecule_id, m.label FROM molecule AS m JOIN atom AS a ON m.molecule_id = a.molecule_id WHERE m.label = '+' GROUP BY m.molecule_id, m.label ORDER BY COUNT(a.atom_id) DESC LIMIT 1;"]}, {"question_id": 330, "answer_sql": ["SELECT (SUM(molecule.label = '+') * 100.0) / (COUNT(molecule.molecule_id) * 100.0) AS percentage_carcinogenic FROM molecule JOIN connected ON molecule.molecule_id = connected.atom_id JOIN atom ON connected.atom_id = atom.atom_id JOIN bond ON atom.molecule_id = bond.molecule_id WHERE atom.element = 'h' AND bond.bond_type = '#';"]}, {"question_id": 331, "answer_sql": ["SELECT COUNT(*) FROM `molecule` WHERE `label` = '+'", "SELECT m.molecule_id, m.label FROM molecule m JOIN connected c ON m.molecule_id = c.atom_id WHERE m.label = '+' GROUP BY m.molecule_id;"]}, {"question_id": 332, "answer_sql": ["SELECT COUNT(*) FROM `molecule` WHERE `molecule_id` BETWEEN 'TR004' AND 'TR010' AND `molecule_id` NOT IN ( SELECT `molecule_id` FROM `bond` WHERE `bond_type` = '-')", "SELECT COUNT(*) FROM molecule WHERE molecule_id BETWEEN 'TR004' AND 'TR010' AND (SELECT COUNT(*) FROM connected WHERE connected.atom_id = molecule.molecule_id AND connected.atom_id2 IN (SELECT atom_id FROM atom WHERE element = 'C' AND atom_id NOT IN (SELECT atom_id FROM connected WHERE bond_id IS NOT NULL)) AND connected.bond_id IS NULL) = 0;"]}, {"question_id": 333, "answer_sql": ["SELECT COUNT(*) as 'carbon_count' FROM atom a JOIN connected c ON a.atom_id = c.atom_id WHERE a.element = 'c'", "SELECT COUNT(*) FROM atom WHERE element = 'c' AND molecule_id = 'TR008';", "SELECT COUNT(*) FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR008' AND atom.element = 'c';"]}, {"question_id": 334, "answer_sql": ["SELECT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE a.atom_id = 'TR004_7' AND b.bond_type != 'carcinogenic' AND b.molecule_id IN ( SELECT m.molecule_id FROM molecule m WHERE m.label != '-' )", "SELECT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id WHERE a.atom_id = 'TR004_7' AND c.bond_id NOT IN ( SELECT b.bond_id FROM bond b WHERE b.bond_type = 'carcinogenic' );"]}, {"question_id": 335, "answer_sql": ["SELECT COUNT(*) FROM `molecule` JOIN `connected` ON `molecule`.`molecule_id` = `connected`.`atom_id2` JOIN `atom` ON `connected`.`atom_id` = `atom`.`atom_id` WHERE `atom`.`element` = 'o' AND `connected`.`bond_id` IS NOT NULL;"]}, {"question_id": 336, "answer_sql": ["SELECT COUNT(*) FROM molecule JOIN bond ON molecule.molecule_id = bond.molecule_id JOIN connected ON connected.atom_id = atom.atom_id JOIN atom ON connected.atom_id2 = atom.atom_id WHERE bond.bond_type = '#' AND molecule.label = '-' AND connected.bond_id IS NOT NULL;"]}, {"question_id": 337, "answer_sql": ["SELECT atom.element, bond.bond_type FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.molecule_id = 'TR016'"]}, {"question_id": 338, "answer_sql": ["SELECT atom.atom_id FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR012' AND connected.bond_id IN (SELECT bond_id FROM bond WHERE bond_type = ' = ');"]}, {"question_id": 339, "answer_sql": ["SELECT atom_id FROM atom WHERE element = 'o'"]}, {"question_id": 340, "answer_sql": ["SELECT c.asciiName, c.availability, c.borderColor, c.cardKingdomFoilId, c.cardKingdomId, c.colors, c.convertedManaCost, c.duelDeck, c.edhrecRank, c.faceConvertedManaCost, c.faceName, c.flavorName, c.flavorText, c.frameEffects, c.frameVersion, c.hand, c.hasAlternativeDeckLimit, c.hasContentWarning, c.hasFoil, c.hasNonFoil, c.isAlternative, c.isFullArt, c.isOnlineOnly, c.isOversized, c.isPromo, c.isReprint, c.isReserved, c.isStarter, c.isStorySpotlight, c.isTextless, c.isTimeshifted, c.keywords, c.layout, c.leadershipSkills, c.life, c.loyalty, c.manaCost, c.mcmId, c.mcmMetaId, c.mtgArenaId, c.mtgjsonV4Id, c.mtgoFoilId, c.mtgoId, c.multiverseId, c.name, c.number, c.originalReleaseDate, c.originalText, c.originalType, c.otherFaceIds, c.power, c.printings, c.promoTypes, c.purchaseUrls, c.rarity, c.scryfallId, c.scryfallIllustrationId, c.scryfallOracleId, c.setCode, c.side, c.subtypes, c.supertypes, c.tcgplayerProductId, c.text, c.toughness, c.type, c.types, c.uuid, c.variations, c.watermark FROM cards c WHERE c.cardKingdomFoilId = c.cardKingdomId AND c.cardKingdomId is not null;"]}, {"question_id": 341, "answer_sql": ["SELECT c.asciiName, c.availability, c.colors, c.convertedManaCost, c.hand, c.life, c.name, c.rarity, c.text, c.type, c.uuid FROM cards c JOIN ( SELECT cardKingdomId, cardKingdomFoilId FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL GROUP BY cardKingdomId HAVING COUNT(DISTINCT cardKingdomFoilId) = 0 ) fd ON c.cardKingdomId = fd.cardKingdomId WHERE c.borderColor = 'borderless' AND c.cardKingdomFoilId IS NULL;"]}, {"question_id": 342, "answer_sql": ["SELECT name FROM cards WHERE faceConvertedManaCost = ( SELECT MAX(faceConvertedManaCost) FROM cards );"]}, {"question_id": 343, "answer_sql": ["SELECT c.name FROM cards c JOIN (SELECT flavorText, language, multiverseid, name, text, type, uuid FROM foreign_data WHERE language = 'en' AND multiverseid = 1000000000) fd ON c.uuid = fd.uuid WHERE c.frameVersion = '2015' AND c.edhrecRank <= 100;", "SELECT cards.name FROM cards WHERE frameVersion = '2015' AND edhrecRank < 100;"]}, {"question_id": 344, "answer_sql": ["SELECT c.name, c.colors, c.type, c.rarity, c.manaCost, c.life, c.toughness, c.power FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.rarity = 'mythic' AND c.type = 'creature' AND l.status = 'Banned' AND c.setCode = 'gladiator';"]}, {"question_id": 345, "answer_sql": ["SELECT l.status FROM legalities l JOIN cards c ON c.uuid = l.uuid WHERE c.type = 'Artifact' AND c.side IS NULL AND l.format = 'vintage';", "SELECT l.status FROM legalities l JOIN cards c ON l.uuid = c.uuid WHERE c.type = 'Artifact' AND c.side IS NULL AND c.setCode = 'V1'"]}, {"question_id": 346, "answer_sql": ["SELECT c.id, c.artist FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.power = '*' OR c.power IS NULL AND c.types LIKE '%commander%' AND fd.language = 'en' AND fd.text IS NOT NULL AND c.id IN (SELECT uuid FROM legalities WHERE format = 'commander' AND status = 'Legal');"]}, {"question_id": 347, "answer_sql": ["SELECT c.*, f.flavorText, r.text FROM cards c JOIN foreign_data f ON c.uuid = f.uuid JOIN rulings r ON c.uuid = r.uuid WHERE c.artist = 'Stephen Daniel' AND c.hasContentWarning = 1;"]}, {"question_id": 348, "answer_sql": ["SELECT r.text FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.name = 'Sublime Epiphany' AND c.number = '74s';"]}, {"question_id": 349, "answer_sql": []}, {"question_id": 350, "answer_sql": ["SELECT foreign_data.flavorText FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.name = 'annul' AND cards.number = '29';", "SELECT foreign_data.flavorText FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.name = 'Annul' AND cards.number = '29';", "SELECT flavorText FROM cards WHERE name = 'Annul' AND number = '29';"]}, {"question_id": 351, "answer_sql": ["SELECT c.name FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE fd.language = 'Japanese' AND c.isAlternative = 1;"]}, {"question_id": 352, "answer_sql": ["SELECT (SUM(CASE WHEN flavorText IS NOT NULL AND language = 'Chinese Simplified' THEN 1 ELSE 0 END)) * 100 / (SELECT COUNT(*) FROM cards WHERE flavorText IS NOT NULL) AS percentage_chinese_simplified FROM foreign_data;"]}, {"question_id": 353, "answer_sql": ["SELECT sets.code, sets.name, sets.releaseDate, sets.totalSetSize, sets.isFoilOnly, sets.isForeignOnly, sets.isNonFoilOnly, sets.isOnlineOnly, sets.isPartialPreview, sets.tcgplayerGroupId, sets.mcmId, sets.mcmName, sets.mtgoCode, sets.baseSetSize, sets.booster, sets.keyruneCode, sets.mcmIdExtras, sets.parentCode, sets.isNonFoilOnly, sets.isOnlineOnly, sets.isPartialPreview, sets.mtgoCode, sets.baseSetSize, sets.booster, sets.keyruneCode, sets.mcmIdExtras, sets.parentCode FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.language = 'Italian';", "SELECT sets.code, sets.name, sets.totalSetSize FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.language = 'Italian';", "SELECT s.code, s.name, s.totalSetSize FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.language = 'Italian' ORDER BY s.totalSetSize DESC;", "SELECT sets.code, sets.name, sets.releaseDate, sets.totalSetSize, sets.isFoilOnly, sets.isNonFoilOnly, sets.isForeignOnly, sets.isOnlineOnly, sets.isPartialPreview, set_translations.translation FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.language = 'Italian';", "SELECT sets.code, sets.name, sets.releaseDate, sets.totalSetSize, sets.mcmId, sets.mtgoCode, sets.baseSetSize, sets.isFoilOnly, sets.isNonFoilOnly, sets.isOnlineOnly, sets.isPartialPreview, set_translations.translation FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.language = 'Italian' ORDER BY sets.releaseDate DESC;", "SELECT s.code, s.name, s.releaseDate, s.totalSetSize FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.language = 'Italian';"]}, {"question_id": 354, "answer_sql": ["SELECT COUNT(DISTINCT type) as NumberOfTypesOfCards FROM cards WHERE artist = 'Aaron Boyd';"]}, {"question_id": 355, "answer_sql": ["SELECT keywords FROM cards WHERE asciiName = 'Angel of Mercy';"]}, {"question_id": 356, "answer_sql": ["SELECT COUNT(*) FROM cards WHERE power = '*';"]}, {"question_id": 357, "answer_sql": ["SELECT DISTINCT s.name as set_name, st.translation as set_translation FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE s.code = 'scryfall' AND st.language = 'English' AND st.translation = 'Duress';"]}, {"question_id": 358, "answer_sql": []}, {"question_id": 359, "answer_sql": []}, {"question_id": 360, "answer_sql": ["SELECT DISTINCT language FROM set_translations WHERE setCode = 'ANG'"]}, {"question_id": 361, "answer_sql": []}, {"question_id": 362, "answer_sql": ["SELECT r.text as ruling_text FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.name = 'Condemn' AND r.text LIKE '%description%' LIMIT 1;", "SELECT r.text as ruling_text FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.name = 'Condemn'", "SELECT r.text as ruling_text FROM rulings as r JOIN cards as c ON r.uuid = c.uuid WHERE c.name = 'Condemn' LIMIT 1;"]}, {"question_id": 363, "answer_sql": []}, {"question_id": 364, "answer_sql": ["SELECT status FROM legalities WHERE uuid = (SELECT uuid FROM cards WHERE name = 'Cloudchaser Eagle');", "SELECT status FROM legalities WHERE uuid = (SELECT uuid FROM cards WHERE asciiName = 'Cloudchaser Eagle');"]}, {"question_id": 365, "answer_sql": ["SELECT type FROM cards WHERE asciiName = 'Benalish Knight';"]}, {"question_id": 366, "answer_sql": ["SELECT flavorText FROM cards WHERE asciiName = 'Benalish Knight';"]}, {"question_id": 367, "answer_sql": ["SELECT DISTINCT artist FROM cards WHERE asciiName = 'Phyrexian' AND availability = 'in_print';"]}, {"question_id": 368, "answer_sql": ["SELECT (SELECT COUNT(*) FROM cards WHERE borderColor = 'borderless') * 100 / (SELECT COUNT(*) FROM cards) AS percentage_borderless_cards;"]}, {"question_id": 369, "answer_sql": ["SELECT COUNT(*) FROM cards WHERE scryfallIllustrationId = 'German' AND isReprint = 1;"]}, {"question_id": 370, "answer_sql": []}, {"question_id": 371, "answer_sql": []}, {"question_id": 372, "answer_sql": ["SELECT COUNT(*) FROM cards WHERE toughness = '99';"]}, {"question_id": 373, "answer_sql": ["SELECT cards.asciiName, cards.name, cards.uuid FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.name = 'Aaron Boyd';", "SELECT cards.asciiName FROM cards WHERE cards.artist = 'Aaron Boyd';", "SELECT cards.asciiName, cards.id FROM cards WHERE cards.artist = 'Aaron Boyd';"]}, {"question_id": 374, "answer_sql": ["SELECT COUNT(*) FROM cards WHERE borderColor = 'black' AND availability = 'mtgo';"]}, {"question_id": 375, "answer_sql": ["SELECT id FROM cards WHERE convertedManaCost = 0;"]}, {"question_id": 376, "answer_sql": ["SELECT layout FROM cards WHERE keywords LIKE '%flying%';"]}, {"question_id": 377, "answer_sql": ["SELECT COUNT(*) FROM cards WHERE subtypes LIKE '%Summon - Angel%' AND subtypes != 'Angel';"]}, {"question_id": 378, "answer_sql": ["SELECT c1.cardKingdomFoilId, c1.cardKingdomId FROM cards c1 JOIN cards c2 ON c1.cardKingdomId = c2.cardKingdomId WHERE c1.cardKingdomFoilId IS NOT NULL AND c2.cardKingdomFoilId IS NULL;"]}, {"question_id": 379, "answer_sql": ["SELECT id FROM cards WHERE duelDeck = 'a';"]}, {"question_id": 380, "answer_sql": []}, {"question_id": 381, "answer_sql": []}, {"question_id": 382, "answer_sql": ["SELECT c.* FROM cards c JOIN set_translations st ON c.setCode = st.setCode WHERE st.language = 'Japanese' AND st.translation = 'available in paper';"]}, {"question_id": 383, "answer_sql": []}, {"question_id": 384, "answer_sql": []}, {"question_id": 385, "answer_sql": ["SELECT text FROM rulings WHERE uuid = (SELECT uuid FROM cards WHERE name = 'Beacon of Immortality');"]}, {"question_id": 386, "answer_sql": []}, {"question_id": 387, "answer_sql": ["SELECT name, colors, colorIndicator FROM cards WHERE setCode = 'OGW';", "SELECT name, colors, cardKingdomId, cardKingdomFoilId FROM cards WHERE setCode = 'OGW';", "SELECT cards.name, cards.colors, sets.name as set_name, sets.type as set_type FROM cards JOIN sets ON cards.setCode = sets.code WHERE sets.code = 'OGW';", "SELECT name, colors, type FROM cards WHERE setCode = 'OGW';", "SELECT name, colors, type, multiverseid FROM cards WHERE setCode = 'OGW';"]}, {"question_id": 388, "answer_sql": ["SELECT c.name, st.translation, st.language FROM cards c JOIN set_translations st ON c.uuid = st.setCode WHERE c.convertedManaCost = 5 AND c.setCode = '10E';"]}, {"question_id": 389, "answer_sql": []}, {"question_id": 390, "answer_sql": ["SELECT colors FROM cards WHERE id BETWEEN 1 AND 20;"]}, {"question_id": 391, "answer_sql": ["SELECT cards.name, foreign_data.text FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.type = 'Artifact' AND cards.colors = 'B' AND foreign_data.language IN ('English', 'French')", "SELECT cards.name, foreign_data.text, foreign_data.language FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.originalType = 'Artifact' AND cards.colors = 'B' AND foreign_data.language IN ('English', 'French') ORDER BY cards.name ASC;", "SELECT cards.name, foreign_data.text, foreign_data.language FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.type = 'Artifact' AND cards.colors = 'B' AND foreign_data.language IN ('English', 'French', 'German', 'Italian', 'Spanish') ORDER BY cards.name;", "SELECT cards.* FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.originalType = 'Artifact' AND cards.colors = 'B' AND foreign_data.language IN ('English', 'French')", "SELECT cards.* FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.originalType = 'Artifact' AND cards.colors = 'B' AND foreign_data.language IN ('English', 'French', 'German', 'Italian', 'Spanish')", "SELECT cards.name FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.type = 'Artifact' AND cards.colors = 'B' AND foreign_data.language IS NOT NULL;", "SELECT cards.id, cards.name, foreign_data.text FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.type = 'Artifact' AND cards.colors = 'B' AND foreign_data.language IS NOT NULL;", "SELECT cards.name FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.originalType = 'Artifact' AND cards.colors = 'B' AND foreign_data.language IN ('English', 'French', 'German', 'Spanish', 'Italian', 'Portuguese', 'Russian', 'Japanese', 'Chinese', 'Korean', 'Traditional Chinese', 'Simplified Chinese') AND foreign_data.text IS NOT NULL;", "SELECT cards.name FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.originalType = 'Artifact' AND cards.colors = 'B' AND foreign_data.language IN (SELECT DISTINCT language FROM foreign_data);", "SELECT cards.name, foreign_data.text FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.originalType = 'Artifact' AND cards.colors = 'B' AND foreign_data.language IS NOT NULL;", "SELECT cards.name, foreign_data.text FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.type = 'Artifact' AND cards.colors = 'B' AND foreign_data.language IN ('English', 'French', 'German', 'Italian', 'Spanish')"]}, {"question_id": 392, "answer_sql": []}, {"question_id": 393, "answer_sql": ["SELECT COUNT(*) FROM cards WHERE artist = 'John Avon' AND hasFoil = 1 AND isOversized = 0;"]}, {"question_id": 394, "answer_sql": ["SELECT COUNT(*) FROM cards WHERE borderColor = 'white' AND cardKingdomFoilId = cardKingdomId AND cardKingdomId is not null;"]}, {"question_id": 395, "answer_sql": ["SELECT COUNT(*) FROM cards WHERE artist = 'UDON' AND availability = 'mtgo' AND hand = -1;"]}, {"question_id": 396, "answer_sql": ["SELECT COUNT(*) FROM cards WHERE frameVersion = '1993' AND availability = 'paper' AND hasContentWarning = 1;"]}, {"question_id": 397, "answer_sql": ["SELECT manaCost FROM cards WHERE layout = 'normal' AND frameVersion = 2003 AND borderColor = 'black' AND availability IN ('paper', 'mtgo');"]}, {"question_id": 398, "answer_sql": ["SELECT SUM(convertedManaCost) FROM cards WHERE artist = 'Rob Alexander';"]}, {"question_id": 399, "answer_sql": ["SELECT type FROM cards WHERE availability = 'arena';", "SELECT types FROM cards WHERE availability = 'arena';"]}, {"question_id": 400, "answer_sql": []}, {"question_id": 401, "answer_sql": ["SELECT COUNT(id) / (SELECT COUNT(*) FROM cards WHERE frameEffects = 'legendary') * 100 AS percentage FROM cards WHERE hand = '+3';"]}, {"question_id": 402, "answer_sql": ["SELECT c.id, c.name, (SELECT COUNT(*) FROM foreign_data fd WHERE fd.uuid = c.uuid) as text_box_count, (SELECT COUNT(*) FROM foreign_data fd WHERE fd.uuid = c.uuid AND fd.text IS NOT NULL) / (SELECT COUNT(*) FROM foreign_data fd WHERE fd.uuid = c.uuid) * 100 as text_box_percentage FROM cards c WHERE c.isStorySpotlight = 1 AND c.isTextless = 1;", "SELECT id, (CASE WHEN isStorySpotlight = 1 AND isTextless = 1 THEN 100 ELSE 0 END) as percentage FROM cards WHERE isStorySpotlight = 1 ORDER BY id;"]}, {"question_id": 403, "answer_sql": []}, {"question_id": 404, "answer_sql": ["SELECT translation FROM set_translations WHERE setCode = '309';"]}, {"question_id": 405, "answer_sql": ["SELECT COUNT(*) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.language = 'Portuguese (Brasil)' AND sets.block = 'Commander' AND sets.code = 'COMM';"]}, {"question_id": 406, "answer_sql": ["SELECT c.* FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.types LIKE '%Creature%' AND l.status = 'legal';"]}, {"question_id": 407, "answer_sql": ["SELECT types.type FROM cards AS types WHERE types.subtypes IS NOT NULL AND types.supertypes IS NOT NULL AND types.subtypes LIKE '%German%' AND types.supertypes LIKE '%German%';"]}, {"question_id": 408, "answer_sql": ["SELECT COUNT(*) FROM cards WHERE power = '' OR power = '*';"]}, {"question_id": 409, "answer_sql": []}, {"question_id": 410, "answer_sql": []}, {"question_id": 411, "answer_sql": ["SELECT artist FROM cards WHERE text = 'Das perfekte Gegenmittel zu einer dichten Formation';"]}, {"question_id": 412, "answer_sql": ["SELECT name FROM cards WHERE type = 'Creature' AND layout = 'normal' AND borderColor = 'black' AND flavorText LIKE '%in French%' AND flavorText LIKE '%by artist Matthew D. Wilson%';"]}, {"question_id": 413, "answer_sql": []}, {"question_id": 414, "answer_sql": ["SELECT translation FROM set_translations WHERE setCode = 'RAV';", "SELECT translation FROM set_translations WHERE setCode = '180';"]}, {"question_id": 415, "answer_sql": []}, {"question_id": 416, "answer_sql": []}, {"question_id": 417, "answer_sql": []}, {"question_id": 418, "answer_sql": ["SELECT layout FROM cards WHERE artist = 'Daren Bader';"]}, {"question_id": 419, "answer_sql": ["SELECT COUNT(*) FROM cards WHERE borderColor = 'borderless' AND edhrecRank > 12000;"]}, {"question_id": 420, "answer_sql": ["SELECT COUNT(*) FROM cards WHERE isOversized = 1 AND isReprint = 1 AND isPromo = 1;"]}, {"question_id": 421, "answer_sql": ["SELECT name FROM cards WHERE power = '*' AND types LIKE '%unknown%' AND (promoTypes = 'arenaleague' OR promoTypes = 'Arena League') ORDER BY name ASC LIMIT 3;"]}, {"question_id": 422, "answer_sql": ["SELECT language FROM foreign_data WHERE multiverseid = 149934;", "SELECT flavorText FROM cards WHERE multiverseId = 149934;"]}, {"question_id": 423, "answer_sql": ["SELECT cardKingdomFoilId, cardKingdomId FROM cards WHERE cardKingdomFoilId is not null AND cardKingdomId is not null ORDER BY cardKingdomFoilId ASC LIMIT 3;"]}, {"question_id": 424, "answer_sql": []}, {"question_id": 425, "answer_sql": ["SELECT uuid FROM cards WHERE subtypes LIKE '%Angel%' AND subtypes LIKE '%Wizard%' AND otherFaceIds IS NULL;"]}, {"question_id": 426, "answer_sql": ["SELECT s.name, st.translation FROM sets s LEFT JOIN set_translations st ON s.code = st.setCode WHERE s.mtgoCode IS NULL OR s.mtgoCode = '' ORDER BY s.name ASC LIMIT 3;", "SELECT s.name as SetName FROM sets s WHERE s.mtgoCode IS NULL OR s.mtgoCode = '' ORDER BY s.name ASC LIMIT 3;", "SELECT s.code, s.name FROM sets s WHERE s.mtgoCode IS NULL OR s.mtgoCode = '' ORDER BY s.name ASC LIMIT 3;"]}, {"question_id": 427, "answer_sql": []}, {"question_id": 428, "answer_sql": ["SELECT sets.name, set_translations.translation FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE sets.id = 5;"]}, {"question_id": 429, "answer_sql": []}, {"question_id": 430, "answer_sql": ["SELECT s.code, s.name, s.releaseDate FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.language = 'Italian' AND s.block = 'Shadowmoor' ORDER BY s.name ASC LIMIT 2;", "SELECT s.code, s.name FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.language = 'Italian' AND s.block = 'Shadowmoor' ORDER BY s.name ASC LIMIT 2;"]}, {"question_id": 431, "answer_sql": []}, {"question_id": 432, "answer_sql": []}, {"question_id": 433, "answer_sql": []}, {"question_id": 434, "answer_sql": []}, {"question_id": 435, "answer_sql": ["SELECT c.id, c.name FROM cards c WHERE c.borderColor = 'black' AND c.id IN ( SELECT fd.uuid FROM foreign_data fd WHERE fd.language = 'en' AND fd.type = 'card' );"]}, {"question_id": 436, "answer_sql": ["SELECT id FROM cards WHERE frameEffects = 'extendedart';", "SELECT uuid FROM cards WHERE frameEffects = 'extendedart';"]}, {"question_id": 437, "answer_sql": ["SELECT name FROM cards WHERE isFullArt = 1 AND borderColor = 'black';", "SELECT name FROM cards WHERE isFullArt = 1;", "SELECT cards.asciiName FROM cards WHERE cards.borderColor = 'black' AND cards.isFullArt = 1;"]}, {"question_id": 438, "answer_sql": ["SELECT language FROM set_translations WHERE setCode = '174';"]}, {"question_id": 439, "answer_sql": ["SELECT name FROM sets WHERE code = 'ALL';"]}, {"question_id": 440, "answer_sql": ["SELECT foreign_data.text FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.asciiName = 'A Pedra Fellwar';"]}, {"question_id": 441, "answer_sql": ["SELECT code FROM sets WHERE releaseDate = '2007-07-13';"]}, {"question_id": 442, "answer_sql": ["SELECT baseSetSize, code FROM sets WHERE name IN ('Masques', 'Mirage');"]}, {"question_id": 443, "answer_sql": ["SELECT code FROM sets WHERE type = 'expansion';"]}, {"question_id": 444, "answer_sql": ["SELECT fd.name, c.type FROM foreign_data fd JOIN cards c ON fd.uuid = c.uuid WHERE c.watermark = 'boros' AND c.name = 'Boros';", "SELECT fd.name, c.type FROM foreign_data fd JOIN cards c ON fd.uuid = c.uuid WHERE c.watermark = 'boros';"]}, {"question_id": 445, "answer_sql": ["SELECT fd.language, fd.flavorText, c.type FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.watermark = 'colorpie'", "SELECT fd.language, fd.flavorText FROM foreign_data fd JOIN cards c ON c.uuid = fd.uuid WHERE c.watermark = 'colorpie'"]}, {"question_id": 446, "answer_sql": []}, {"question_id": 447, "answer_sql": ["SELECT code FROM sets WHERE type = 'Commander';"]}, {"question_id": 448, "answer_sql": ["SELECT fd.name, c.type FROM foreign_data fd JOIN cards c ON fd.uuid = c.uuid WHERE c.watermark = 'abzan' AND c.name = 'Abzan, the Warden';", "SELECT fd.name, c.type FROM foreign_data fd JOIN cards c ON fd.uuid = c.uuid WHERE c.watermark = 'abzan';"]}, {"question_id": 449, "answer_sql": ["SELECT fd.language, c.type FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.watermark = 'Azorius'"]}, {"question_id": 450, "answer_sql": ["SELECT COUNT(*) FROM cards WHERE artist = 'Aaron Miller' AND cardKingdomId is not null;"]}, {"question_id": 451, "answer_sql": ["SELECT COUNT(*) FROM cards WHERE availability LIKE '%paper%' AND hand = '+%';"]}, {"question_id": 452, "answer_sql": []}, {"question_id": 453, "answer_sql": ["SELECT convertedManaCost FROM cards WHERE asciiName = 'Ancestor`s Chosen';"]}, {"question_id": 454, "answer_sql": ["SELECT COUNT(*) FROM cards WHERE borderColor = 'white' AND power = '*' OR power IS NULL;"]}, {"question_id": 455, "answer_sql": ["SELECT DISTINCT cards.name FROM cards WHERE cards.isPromo = 1 AND cards.side IS NOT NULL AND cards.side != '';", "SELECT c1.name FROM cards c1 JOIN foreign_data fd1 ON c1.uuid = fd1.uuid JOIN foreign_data fd2 ON c1.uuid = fd2.uuid WHERE c1.isPromo = 1 AND c1.side IS NOT NULL AND fd1.name = fd2.name AND c1.side <> fd2.name;"]}, {"question_id": 456, "answer_sql": ["SELECT DISTINCT subtypes, supertypes FROM cards WHERE asciiName = 'Molimo, Maro-Sorcerer';"]}, {"question_id": 457, "answer_sql": []}, {"question_id": 458, "answer_sql": ["SELECT COUNT(*) FROM cards WHERE borderColor = 'black' AND availability LIKE '%arena,mtgo%';"]}, {"question_id": 459, "answer_sql": ["SELECT name, convertedManaCost FROM cards WHERE name IN ('Serra Angel', 'Shrine Keeper') ORDER BY convertedManaCost DESC LIMIT 1;"]}, {"question_id": 460, "answer_sql": ["SELECT artist FROM cards WHERE flavorName = 'Battra, Dark Destroyer';", "SELECT artist FROM cards WHERE asciiName = 'Battra, Dark Destroyer';"]}, {"question_id": 461, "answer_sql": ["SELECT name, convertedManaCost, frameVersion FROM cards WHERE frameVersion = '2003' ORDER BY convertedManaCost DESC LIMIT 3;"]}, {"question_id": 462, "answer_sql": []}, {"question_id": 463, "answer_sql": ["SELECT COUNT(*) FROM sets WHERE name LIKE '%Angel of Mercy%';"]}, {"question_id": 464, "answer_sql": ["SELECT name FROM cards WHERE setCode = 'Hauptset Zehnte Edition';"]}, {"question_id": 465, "answer_sql": []}, {"question_id": 466, "answer_sql": ["SELECT COUNT(*) FROM cards WHERE artist = 'Adam Rex' AND setCode = 'Hauptset Zehnte Edition';"]}, {"question_id": 467, "answer_sql": ["SELECT COUNT(*) FROM sets WHERE code = 'Hauptset Zehnte Edition';"]}, {"question_id": 468, "answer_sql": ["SELECT translation FROM set_translations WHERE setCode = 'Eighth Edition' AND language = 'Simplified Chinese';"]}, {"question_id": 469, "answer_sql": ["SELECT mtgoId FROM cards WHERE name = 'Angel of Mercy';", "SELECT COUNT(*) FROM cards WHERE name = 'Angel of Mercy' AND isOnlineOnly = 1;", "SELECT mtgoId FROM cards WHERE name = 'Angel of Mercy' AND isOnlineOnly = 1;"]}, {"question_id": 470, "answer_sql": ["SELECT releaseDate FROM sets WHERE code = 'Ancestor''s Chosen';"]}, {"question_id": 471, "answer_sql": ["SELECT type FROM sets WHERE code = 'Hauptset Zehnte Edition';"]}, {"question_id": 472, "answer_sql": ["SELECT COUNT(*) FROM sets WHERE code = 'Ice Age' AND (SELECT COUNT(*) FROM set_translations WHERE set_translations.setCode = sets.code AND set_translations.language = 'Italian') > 0;"]}, {"question_id": 473, "answer_sql": ["SELECT s.name FROM sets s WHERE s.code = 'Adarkar Valkyrie' AND s.isForeignOnly = 1;"]}, {"question_id": 474, "answer_sql": ["SELECT COUNT(*) FROM sets WHERE code IN (SELECT setCode FROM set_translations WHERE language = 'Italian' AND translation IS NOT NULL) AND baseSetSize < 10;"]}, {"question_id": 475, "answer_sql": ["SELECT COUNT(*) FROM cards WHERE borderColor = 'black' AND setCode = 'Coldsnap';"]}, {"question_id": 476, "answer_sql": ["SELECT name, convertedManaCost FROM cards WHERE setCode = 'Coldsnap' ORDER BY convertedManaCost DESC LIMIT 1;"]}, {"question_id": 477, "answer_sql": ["SELECT artist FROM cards WHERE asciiName = 'Coldsnap' AND artist IN ('Jeremy Jarvis', 'Aaron Miller','Chippy');"]}, {"question_id": 478, "answer_sql": ["SELECT c.name, c.number FROM cards c JOIN sets s ON c.setCode = s.code WHERE s.code = 'Coldsnap' AND c.number = 4;", "SELECT c.name, c.number, s.name as set_name FROM cards c JOIN sets s ON c.setCode = s.code WHERE c.number = 4 AND s.name = 'Coldsnap';"]}, {"question_id": 479, "answer_sql": ["SELECT COUNT(*) FROM cards JOIN set_translations ON cards.setCode = set_translations.setCode JOIN sets ON cards.setCode = sets.code JOIN foreign_data ON cards.uuid = foreign_data.uuid JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.convertedManaCost > 5 AND sets.code = 'Coldsnap' AND foreign_data.text = 'unknown power' AND rulings.text = '*'", "SELECT COUNT(*) FROM cards WHERE convertedManaCost > 5 AND setCode = 'Coldsnap' AND power = '*' OR power IS NULL;"]}, {"question_id": 480, "answer_sql": ["SELECT foreign_data.flavorText FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.name = 'Ancestor''s Chosen' AND foreign_data.language = 'Italian';", "SELECT foreign_data.flavorText FROM foreign_data WHERE foreign_data.name = 'Ancestor''s Chosen' AND foreign_data.language = 'Italian';"]}, {"question_id": 481, "answer_sql": []}, {"question_id": 482, "answer_sql": []}, {"question_id": 483, "answer_sql": ["SELECT fd.flavorText FROM foreign_data fd JOIN cards c ON fd.uuid = c.uuid WHERE c.setCode = 'Coldsnap' AND fd.language = 'Italian';"]}, {"question_id": 484, "answer_sql": ["SELECT c.asciiName, c.name, c.convertedManaCost FROM cards c JOIN set_translations st ON c.uuid = st.setCode WHERE st.language = 'Italian' AND c.setCode = 'Coldsnap' ORDER BY c.convertedManaCost DESC LIMIT 1;"]}, {"question_id": 485, "answer_sql": ["SELECT date FROM rulings WHERE uuid = (SELECT uuid FROM cards WHERE name = 'Reminisce');", "SELECT date FROM rulings WHERE uuid = (SELECT uuid FROM cards WHERE asciiName = 'Reminisce');"]}, {"question_id": 486, "answer_sql": []}, {"question_id": 487, "answer_sql": ["SELECT (SUM(cardKingdomId is not null) * 100.0) / SUM(name = 'Coldsnap') AS percentage_of_incredibly_powerful_cards FROM cards WHERE setCode = 'CS1';"]}, {"question_id": 488, "answer_sql": ["SELECT code FROM sets WHERE releaseDate = '2017-07-14';"]}, {"question_id": 489, "answer_sql": ["SELECT keyruneCode FROM sets WHERE code = 'PKHC';"]}, {"question_id": 490, "answer_sql": ["SELECT mcmId FROM sets WHERE code = 'SS2';"]}, {"question_id": 491, "answer_sql": ["SELECT mcmName FROM sets WHERE releaseDate = '2017-06-09';"]}, {"question_id": 492, "answer_sql": ["SELECT type FROM sets WHERE code = 'From the Vault: Lore';"]}, {"question_id": 493, "answer_sql": ["SELECT parentCode FROM sets WHERE name = 'Commander 2014 Oversized';", "SELECT parentCode FROM sets WHERE code = 'Commander 2014 Oversized';"]}, {"question_id": 494, "answer_sql": ["SELECT c.*, f.flavorText, r.text FROM cards c JOIN foreign_data f ON c.uuid = f.uuid JOIN rulings r ON c.uuid = r.uuid WHERE c.artist = 'Jim Pavelec' AND c.hasContentWarning = 1;"]}, {"question_id": 495, "answer_sql": ["SELECT releaseDate FROM sets WHERE code = '2019-06-13';"]}, {"question_id": 496, "answer_sql": ["SELECT COUNT(*) FROM sets WHERE code = 'Rinascita di Alara';", "SELECT baseSetSize FROM sets WHERE code = 'Rinascita di Alara';"]}, {"question_id": 497, "answer_sql": ["SELECT type FROM sets WHERE code = 'Huiti\u00e8me \u00e9dition';"]}, {"question_id": 498, "answer_sql": ["SELECT sets.name FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.language = 'French' AND set_translations.translation = 'Tendo Ice Bridge';"]}, {"question_id": 499, "answer_sql": ["SELECT COUNT(*) FROM set_translations WHERE setCode = 'Salvat 2011';"]}, {"question_id": 500, "answer_sql": []}, {"question_id": 501, "answer_sql": ["SELECT name, convertedManaCost FROM cards WHERE setCode = 'Journey into Nyx Hero''s Path' ORDER BY convertedManaCost DESC LIMIT 1;"]}, {"question_id": 502, "answer_sql": ["SELECT releaseDate FROM sets WHERE code = 'Ola de fr\u00edo';"]}, {"question_id": 503, "answer_sql": ["SELECT type FROM sets WHERE code = '2015';", "SELECT type FROM sets WHERE code = '10E';"]}, {"question_id": 504, "answer_sql": ["SELECT COUNT(*) FROM cards WHERE setCode = 'World Championship Decks 2004' AND convertedManaCost = 3;"]}, {"question_id": 505, "answer_sql": ["SELECT translation FROM set_translations WHERE setCode = 'Mirrodin' AND language = 'Chinese Simplified';"]}, {"question_id": 506, "answer_sql": []}, {"question_id": 507, "answer_sql": []}, {"question_id": 508, "answer_sql": []}, {"question_id": 509, "answer_sql": ["SELECT MAX(baseSetSize), code FROM sets GROUP BY code ORDER BY MAX(baseSetSize) DESC LIMIT 1;"]}, {"question_id": 510, "answer_sql": ["SELECT artist, MAX(convertedManaCost) as max_cmc FROM cards WHERE side IS NULL GROUP BY artist ORDER BY max_cmc DESC LIMIT 1;"]}, {"question_id": 511, "answer_sql": ["SELECT MAX(frameEffects) as most_common_frame_effect FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL;"]}, {"question_id": 512, "answer_sql": ["SELECT COUNT(*) FROM cards WHERE power IS NULL AND hasFoil = 0 AND duelDeck = 'a';", "SELECT COUNT(*) FROM cards WHERE power IS NULL OR power = '*' AND hasFoil = 0 AND duelDeck = 'a';"]}, {"question_id": 513, "answer_sql": ["SELECT code FROM sets WHERE type = 'commander' AND totalSetSize = (SELECT MAX(totalSetSize) FROM sets WHERE type = 'commander') AND isFoilOnly = 0 AND isForeignOnly = 0 AND isNonFoilOnly = 0 AND isOnlineOnly = 0 AND isPartialPreview = 0;", "SELECT s.code FROM sets s WHERE s.type = 'commander' ORDER BY s.totalSetSize DESC LIMIT 1;"]}, {"question_id": 514, "answer_sql": ["SELECT cards.name, cards.manaCost, cards.convertedManaCost FROM cards WHERE cards.availability = 'in_print' ORDER BY cards.convertedManaCost DESC LIMIT 10;"]}, {"question_id": 515, "answer_sql": []}, {"question_id": 516, "answer_sql": []}, {"question_id": 517, "answer_sql": []}, {"question_id": 518, "answer_sql": ["SELECT s.name, MAX(l.status) as max_banned_status FROM legalities as l JOIN sets as s ON l.uuid = s.code WHERE l.status = 'banned' GROUP BY s.name ORDER BY max_banned_status DESC LIMIT 1;"]}, {"question_id": 519, "answer_sql": []}, {"question_id": 520, "answer_sql": ["SELECT s.name AS set_name, c.artist AS illustrator, COUNT(c.asciiName) AS total_cards FROM sets s JOIN cards c ON c.cardKingdomId = s.code WHERE c.artist = (SELECT MIN(artist) FROM cards) GROUP BY s.name, c.artist ORDER BY total_cards ASC;"]}, {"question_id": 521, "answer_sql": []}, {"question_id": 522, "answer_sql": ["SELECT name, format FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE edhrecRank = 1 AND status = 'banned' AND format IS NOT NULL;"]}, {"question_id": 523, "answer_sql": []}, {"question_id": 524, "answer_sql": ["SELECT artist FROM cards WHERE BorderColor = 'black' AND availability = 'arena';"]}, {"question_id": 525, "answer_sql": []}, {"question_id": 526, "answer_sql": ["SELECT COUNT(*) FROM cards WHERE artist = 'Matthew D. Wilson' AND availability = 'paper';"]}, {"question_id": 527, "answer_sql": []}, {"question_id": 528, "answer_sql": ["SELECT s.name AS set_name, c.name AS card_name, l.status AS legal_status, l.format AS format_name FROM sets s JOIN cards c ON s.code = c.setCode JOIN legalities l ON c.uuid = l.uuid WHERE s.name = 'Hour of Devastation' AND l.status = 'legal'"]}, {"question_id": 529, "answer_sql": ["SELECT DISTINCT sets.name FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.language = 'Korean' AND sets.name NOT LIKE '%Japanese%' AND sets.name LIKE '%Korean%';", "SELECT DISTINCT s.name FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.language = 'Korean' AND s.code NOT LIKE '%Japanese%';"]}, {"question_id": 530, "answer_sql": ["SELECT frameVersion, cards.name, sets.name as setName, rulings.text as ruling FROM cards JOIN sets ON cards.cardKingdomId = sets.code JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.artist = 'Allen Williams' AND sets.name = 'Banned' AND rulings.text IS NOT NULL;"]}, {"question_id": 531, "answer_sql": ["SELECT MAX(users.Reputation) as Highest_Reputation FROM users WHERE users.DisplayName IN ('Harlan', 'Jarrod Dixon');"]}, {"question_id": 532, "answer_sql": []}, {"question_id": 533, "answer_sql": ["SELECT COUNT(*) FROM users WHERE LastAccessDate > '2014-09-01 00:00:00';"]}, {"question_id": 534, "answer_sql": ["SELECT MAX(Views) as Most_Number_of_Views FROM users;", "SELECT MAX(Views) as Most_Number_Of_Views, DisplayName as User_Display_Name FROM users"]}, {"question_id": 535, "answer_sql": ["SELECT COUNT(*) FROM users WHERE UpVotes > 100 AND DownVotes > 1;"]}, {"question_id": 536, "answer_sql": ["SELECT COUNT(*) FROM users WHERE Views > 10 AND CreationDate > '2013-12-31';", "SELECT COUNT(*) FROM users WHERE Views > 10 AND CreationDate > '2013-01-01';"]}, {"question_id": 537, "answer_sql": ["SELECT COUNT(*) FROM posts WHERE OwnerDisplayName = 'csgillespie';"]}, {"question_id": 538, "answer_sql": ["SELECT Title FROM posts WHERE OwnerDisplayName = 'csgillespie';"]}, {"question_id": 539, "answer_sql": ["SELECT OwnerDisplayName FROM posts WHERE Title = 'Eliciting priors from experts';"]}, {"question_id": 540, "answer_sql": ["SELECT Title FROM posts WHERE OwnerDisplayName = 'csgillespie' ORDER BY ViewCount DESC LIMIT 1;"]}, {"question_id": 541, "answer_sql": ["SELECT OwnerDisplayName FROM posts WHERE FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts);"]}, {"question_id": 542, "answer_sql": ["SELECT SUM(CommentCount) as TotalComments FROM posts WHERE OwnerDisplayName = 'csgillespie';"]}, {"question_id": 543, "answer_sql": ["SELECT MAX(AnswerCount) as Most_Answers FROM posts WHERE OwnerDisplayName = 'csgillespie';"]}, {"question_id": 544, "answer_sql": ["SELECT LastEditorDisplayName FROM posts WHERE Title = 'Examples for teaching: Correlation does not mean causation';"]}, {"question_id": 545, "answer_sql": ["SELECT COUNT(*) FROM posts WHERE OwnerDisplayName = 'csgillespie' AND ParentId IS NULL;"]}, {"question_id": 546, "answer_sql": ["SELECT OwnerDisplayName FROM posts WHERE ClosedDate IS NOT NULL;"]}, {"question_id": 547, "answer_sql": ["SELECT COUNT(*) FROM posts WHERE OwnerUserId IN ( SELECT Id FROM users WHERE Age > 65 ) AND Score >= 20;"]}, {"question_id": 548, "answer_sql": ["SELECT Location FROM users WHERE Id = (SELECT OwnerUserId FROM posts WHERE Title = 'Eliciting priors from experts');"]}, {"question_id": 549, "answer_sql": ["SELECT Body FROM posts WHERE Id = ( SELECT WikiPostId FROM tags WHERE TagName = 'bayesian' )"]}, {"question_id": 550, "answer_sql": ["SELECT Body FROM posts WHERE Tags LIKE '%most popular tag%' AND PostTypeId = 1 ORDER BY ViewCount DESC LIMIT 1;"]}, {"question_id": 551, "answer_sql": ["SELECT COUNT(*) FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie');"]}, {"question_id": 552, "answer_sql": ["SELECT Name FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie');"]}, {"question_id": 553, "answer_sql": []}, {"question_id": 554, "answer_sql": ["SELECT MAX(u.DisplayName) as DisplayName FROM users u JOIN ( SELECT UserId, COUNT(Id) as Count FROM badges GROUP BY UserId ) b ON u.Id = b.UserId"]}, {"question_id": 555, "answer_sql": ["SELECT AVG(Score) as AverageScore FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie');", "SELECT AVG(Score) as AverageScore FROM posts WHERE OwnerDisplayName = 'csgillespie';"]}, {"question_id": 556, "answer_sql": ["SELECT AVG(badges.Name) as AverageBadges FROM badges JOIN users ON badges.UserId = users.Id WHERE users.Views > 200;"]}, {"question_id": 557, "answer_sql": ["SELECT (COUNT(posts.Id) * 1.0) * (COUNT(users.Id) * 1.0) / (SELECT COUNT(Id) FROM posts WHERE Score > 20) * 100 AS percentage_of_posts_owned_by_elder_user FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE posts.Score > 20 AND users.Age > 65;", "SELECT (COUNT(*) * 100.0) / (SELECT COUNT(*) FROM posts WHERE OwnerUserId IN (SELECT Id FROM users WHERE Age > 65)) AS percentage FROM posts WHERE Score > 20;", "SELECT (COUNT(posts.Id) * 1.0) * 100 / (SELECT COUNT(Id) FROM users WHERE Age > 65) AS percentage_owned_by_elder_user FROM posts WHERE posts.Score > 20;", "SELECT (COUNT(posts.Id) * 1.0) * (COUNT(users.Id) * 1.0) / (SELECT COUNT(Id) FROM users WHERE Age > 65) AS percentage FROM posts INNER JOIN users ON posts.OwnerUserId = users.Id WHERE posts.Score > 20;"]}, {"question_id": 558, "answer_sql": ["SELECT COUNT(*) FROM votes WHERE UserId = 58 AND CreationDate = '2010-07-19';"]}, {"question_id": 559, "answer_sql": ["SELECT MAX(CreationDate) as MaxVotedDate FROM votes", "SELECT MAX(CreationDate) FROM votes WHERE VoteTypeId = 1;"]}, {"question_id": 560, "answer_sql": ["SELECT COUNT(*) FROM badges WHERE Name = 'Revival';"]}, {"question_id": 561, "answer_sql": ["SELECT Title FROM posts WHERE Id = ( SELECT PostId FROM comments WHERE Score = ( SELECT MAX(Score) FROM comments ) );"]}, {"question_id": 562, "answer_sql": ["SELECT COUNT(*) FROM comments WHERE PostId = (SELECT Id FROM posts WHERE ViewCount = 1910);"]}, {"question_id": 563, "answer_sql": []}, {"question_id": 564, "answer_sql": ["SELECT Text FROM comments WHERE PostId = 107829;"]}, {"question_id": 565, "answer_sql": ["SELECT p.Title, p.ClosedDate FROM posts p JOIN comments c ON p.Id = c.PostId WHERE c.UserId = 23853 AND c.CreationDate = '2013-07-12 09:08:18.0' AND p.ClosedDate IS NULL;", "SELECT p.Title FROM posts p JOIN comments c ON p.Id = c.PostId WHERE c.UserId = 23853 AND c.CreationDate = '2013-07-12 09:08:18.0'", "SELECT posts.Body FROM posts JOIN comments ON posts.Id = comments.PostId WHERE comments.UserId = 23853 AND comments.CreationDate = '2013-07-12 09:08:18.0' AND posts.ClosedDate IS NOT NULL;", "SELECT p.Title, p.ClosedDate FROM posts p JOIN comments c ON p.Id = c.PostId WHERE c.UserId = 23853 AND c.CreationDate = '2013-07-12 09:08:18.0'"]}, {"question_id": 566, "answer_sql": ["SELECT Reputation FROM users WHERE Id = 65041;"]}, {"question_id": 567, "answer_sql": ["SELECT COUNT(*) FROM posts WHERE OwnerDisplayName = 'Tiago Pasqualini';"]}, {"question_id": 568, "answer_sql": ["SELECT DisplayName FROM users WHERE Id = 6347;"]}, {"question_id": 569, "answer_sql": ["SELECT COUNT(*) FROM votes WHERE PostId IN (SELECT Id FROM posts WHERE Title LIKE '%data visualization%');"]}, {"question_id": 570, "answer_sql": ["SELECT Name FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'DatEpicCoderGuyWhoPrograms');"]}, {"question_id": 571, "answer_sql": []}, {"question_id": 572, "answer_sql": ["SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer';"]}, {"question_id": 573, "answer_sql": ["SELECT Text FROM comments WHERE Score = 17;"]}, {"question_id": 574, "answer_sql": ["SELECT DisplayName FROM users WHERE WebsiteUrl = 'http://stackoverflow.com';"]}, {"question_id": 575, "answer_sql": ["SELECT Name FROM badges WHERE UserId = ( SELECT Id FROM users WHERE DisplayName = 'SilentGhost' );"]}, {"question_id": 576, "answer_sql": ["SELECT UserDisplayName FROM comments WHERE Text = 'thank you user93!' AND UserId = (SELECT Id FROM users WHERE DisplayName = 'user93');", "SELECT UserDisplayName FROM comments WHERE Text = 'thank you user93!'"]}, {"question_id": 577, "answer_sql": ["SELECT comments.Text FROM comments JOIN users ON comments.UserId = users.Id WHERE users.DisplayName = 'A Lion';"]}, {"question_id": 578, "answer_sql": ["SELECT DisplayName, Reputation FROM users WHERE DisplayName = 'Understanding what Dassault iSight is doing?'"]}, {"question_id": 579, "answer_sql": ["SELECT comments.Text FROM comments JOIN posts ON comments.PostId = posts.Id WHERE posts.Title = 'How does gentle boosting differ from AdaBoost?';"]}, {"question_id": 580, "answer_sql": ["SELECT users.DisplayName FROM users JOIN badges ON users.Id = badges.UserId WHERE badges.Name = 'Necromancer' ORDER BY users.DisplayName ASC LIMIT 10;", "SELECT users.DisplayName FROM badges JOIN users ON badges.UserId = users.Id WHERE badges.Name = 'Necromancer' LIMIT 10;"]}, {"question_id": 581, "answer_sql": ["SELECT LastEditorDisplayName FROM posts WHERE Title = 'Open source tools for visualizing multi-dimensional data?';"]}, {"question_id": 582, "answer_sql": ["SELECT Title FROM posts WHERE LastEditorUserId = (SELECT Id FROM users WHERE DisplayName = 'Vebjorn Ljosa');"]}, {"question_id": 583, "answer_sql": ["SELECT SUM(posts.Score) as TotalScore FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'Yevgeny' AND users.WebsiteUrl IS NOT NULL;", "SELECT SUM(Score) as TotalScore FROM posts WHERE LastEditorUserId IN (SELECT Id FROM users WHERE DisplayName = 'Yevgeny' AND WebsiteUrl IS NOT NULL);"]}, {"question_id": 584, "answer_sql": ["SELECT c.* FROM comments c JOIN users u ON c.UserId = u.Id WHERE c.PostId = ( SELECT p.Id FROM posts p WHERE p.Title = 'Why square the difference instead of taking the absolute value in standard deviation?' ) AND u.DisplayName != '[Deleted User]' ORDER BY c.CreationDate;", "SELECT c.* FROM comments c JOIN users u ON c.UserId = u.Id WHERE u.DisplayName = 'Edited by User' AND c.Text LIKE '%square the difference instead of taking the absolute value in standard deviation%' AND c.CreationDate > '2021-01-01' AND c.CreationDate < '2021-12-31';", "SELECT comments.Text FROM comments JOIN posts ON comments.PostId = posts.Id WHERE posts.Title = 'Why square the difference instead of taking the absolute value in standard deviation?';"]}, {"question_id": 585, "answer_sql": ["SELECT SUM(BountyAmount) FROM votes WHERE PostId IN (SELECT Id FROM posts WHERE Title LIKE '%data%')"]}, {"question_id": 586, "answer_sql": ["SELECT users.DisplayName FROM users JOIN votes ON users.Id = votes.UserId JOIN posts ON votes.PostId = posts.Id WHERE posts.Title LIKE '%variance%' AND votes.BountyAmount = 50;"]}, {"question_id": 587, "answer_sql": []}, {"question_id": 588, "answer_sql": ["SELECT COUNT(*) FROM comments WHERE UserId = 13;"]}, {"question_id": 589, "answer_sql": ["SELECT MAX(Reputation) as Highest_Reputation FROM users;", "SELECT Id, DisplayName, Reputation FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users);"]}, {"question_id": 590, "answer_sql": ["SELECT MIN(Id) as UserId FROM users WHERE Views = (SELECT MIN(Views) FROM users);", "SELECT Id, DisplayName, Views FROM users ORDER BY Views ASC LIMIT 1;"]}, {"question_id": 591, "answer_sql": ["SELECT COUNT(*) FROM badges WHERE Name = 'Supporter' AND Date >= '2011-01-01' AND Date <= '2011-12-31';", "SELECT COUNT(*) FROM badges WHERE Name = 'Supporter' AND Date = '2011-01-01';"]}, {"question_id": 592, "answer_sql": ["SELECT COUNT(*) FROM users WHERE Id IN ( SELECT UserId FROM badges GROUP BY UserId HAVING COUNT(*) > 5 );"]}, {"question_id": 593, "answer_sql": ["SELECT COUNT(*) FROM users u JOIN badges b1 ON u.Id = b1.UserId JOIN badges b2 ON u.Id = b2.UserId WHERE u.Location = 'New York' AND b1.Name = 'Supporter' AND b2.Name = 'Teachers';", "SELECT COUNT(*) FROM users JOIN badges ON users.Id = badges.UserId WHERE users.Location = 'New York' AND badges.Name IN ('Supporter', 'Teacher');", "SELECT COUNT(*) FROM users u JOIN badges b1 ON u.Id = b1.UserId JOIN badges b2 ON u.Id = b2.UserId WHERE b1.Name = 'Supporter' AND b2.Name = 'Teacher' AND u.Location = 'New York';", "SELECT COUNT(*) FROM users JOIN badges ON users.Id = badges.UserId WHERE users.Location = 'New York' AND badges.Name IN ('Supporter', 'Teachers');"]}, {"question_id": 594, "answer_sql": ["SELECT DisplayName, Reputation FROM users WHERE Id = 1;"]}, {"question_id": 595, "answer_sql": []}, {"question_id": 596, "answer_sql": ["SELECT u.DisplayName, b.Name FROM users u JOIN badges b ON u.Id = b.UserId WHERE u.Id IN (SELECT UserId FROM comments GROUP BY UserId ORDER BY COUNT(*) DESC LIMIT 1)", "SELECT users.DisplayName, badges.Name FROM users JOIN comments ON users.Id = comments.UserId JOIN badges ON users.Id = badges.UserId WHERE comments.PostId IN ( SELECT Id FROM posts WHERE PostTypeId = 1 ORDER BY Score DESC LIMIT 1 )", "SELECT users.DisplayName, badges.Name FROM users JOIN comments ON users.Id = comments.UserId JOIN badges ON users.Id = badges.UserId WHERE comments.PostId IN ( SELECT Id FROM posts WHERE PostTypeId = 1 ORDER BY CommentCount DESC LIMIT 1 ) GROUP BY users.Id;", "SELECT users.DisplayName, badges.Name FROM users JOIN comments ON users.Id = comments.UserId JOIN badges ON users.Id = badges.UserId WHERE comments.PostId IN ( SELECT posts.Id FROM posts WHERE posts.OwnerUserId = ( SELECT MAX(posts.Id) FROM posts ) ) ORDER BY comments.Score DESC;"]}, {"question_id": 597, "answer_sql": ["SELECT COUNT(*) FROM badges JOIN users ON badges.UserId = users.Id WHERE users.Location = 'India' AND badges.Name = 'Teacher';"]}, {"question_id": 598, "answer_sql": []}, {"question_id": 599, "answer_sql": ["SELECT PostHistoryTypeId, COUNT(DISTINCT UserId) as UniqueUsers FROM postHistory WHERE PostId = 3720 GROUP BY PostHistoryTypeId;"]}, {"question_id": 600, "answer_sql": ["SELECT p.Title, p.ViewCount FROM posts p JOIN postLinks pl ON p.Id = pl.PostId WHERE pl.RelatedPostId = 61217;", "SELECT Title, ViewCount FROM posts WHERE Id = 61217;", "SELECT Title, ViewCount FROM posts WHERE ParentId = 61217;"]}, {"question_id": 601, "answer_sql": ["SELECT Score, postLinks.LinkTypeId FROM posts JOIN postLinks ON posts.Id = postLinks.PostId WHERE posts.Id = 395;"]}, {"question_id": 602, "answer_sql": ["SELECT posts.Id, users.Id FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE posts.Score > 60;"]}, {"question_id": 603, "answer_sql": []}, {"question_id": 604, "answer_sql": []}, {"question_id": 605, "answer_sql": ["SELECT COUNT(*) FROM badges WHERE Name = 'Announcer';"]}, {"question_id": 606, "answer_sql": ["SELECT Name FROM badges WHERE Date = '2010-07-19 19:39:08'"]}, {"question_id": 607, "answer_sql": ["SELECT COUNT(*) FROM comments WHERE Score > 60;"]}, {"question_id": 608, "answer_sql": ["SELECT Text FROM comments WHERE CreationDate = '2010-07-19 19:16:14.0';"]}, {"question_id": 609, "answer_sql": ["SELECT COUNT(*) FROM posts WHERE Score = 10;"]}, {"question_id": 610, "answer_sql": ["SELECT Name FROM badges WHERE UserId = (SELECT Id FROM users ORDER BY Reputation DESC LIMIT 1);"]}, {"question_id": 611, "answer_sql": ["SELECT reputation FROM users WHERE Id IN ( SELECT UserId FROM badges WHERE Date = '2010-07-19 19:39:08.0' );", "SELECT Users.Reputation FROM Users JOIN badges ON Users.Id = badges.UserId WHERE badges.Date = '2010-07-19 19:39:08.0';"]}, {"question_id": 612, "answer_sql": ["SELECT Name FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'Pierre');"]}, {"question_id": 613, "answer_sql": ["SELECT DISTINCT badges.Date FROM badges INNER JOIN users ON badges.UserId = users.Id WHERE users.Location = 'Rochester, NY';", "SELECT badges.Date FROM badges JOIN users ON badges.UserId = users.Id WHERE users.Location = 'Rochester, NY';"]}, {"question_id": 614, "answer_sql": ["SELECT (COUNT(UserId) * 1.0) / (SELECT COUNT(*) FROM users WHERE badges.UserId IS NOT NULL) * 100 as percentage_of_users FROM badges WHERE Name = 'Teacher';", "SELECT (COUNT(UserId) * 100.0) / (SELECT COUNT(UserId) FROM badges WHERE Name = 'Teacher') AS percentage_of_users_with_teacher_badge FROM badges;", "SELECT (COUNT(UserId) * 1.0) / (SELECT COUNT(UserId) FROM users WHERE badges.UserId IS NOT NULL AND badges.Name = 'Teacher') * 100 AS percentage_of_users_with_teacher_badge FROM badges WHERE badges.Name = 'Teacher';", "SELECT (COUNT(UserId) - COUNT(badges.UserId)) * 100 / COUNT(UserId) as percentage FROM users LEFT JOIN badges ON users.Id = badges.UserId WHERE badges.Name = 'Teacher';"]}, {"question_id": 615, "answer_sql": ["SELECT (COUNT(UserId) * 100.0) / (SELECT COUNT(*) FROM users WHERE Age BETWEEN 13 AND 18) AS percentage_of_teenagers FROM badges WHERE Name = 'Organizer'"]}, {"question_id": 616, "answer_sql": ["SELECT Score FROM comments WHERE CreationDate = '2010-07-19 19:19:56.0';"]}, {"question_id": 617, "answer_sql": ["SELECT Text, CreationDate FROM comments WHERE CreationDate = '2010-07-19 19:37:33.0';", "SELECT Text FROM comments WHERE CreationDate = '2010-07-19 19:37:33.0';"]}, {"question_id": 618, "answer_sql": ["SELECT Age FROM users WHERE Location = 'Vienna, Austria';", "SELECT users.Age FROM users JOIN badges ON users.Id = badges.UserId WHERE users.Location = 'Vienna, Austria';"]}, {"question_id": 619, "answer_sql": ["SELECT COUNT(*) FROM users JOIN badges ON users.Id = badges.UserId WHERE badges.Name = 'Supporter' AND users.Age BETWEEN 19 AND 65;"]}, {"question_id": 620, "answer_sql": ["SELECT COUNT(*) FROM users WHERE LastAccessDate = '2010-07-19 19:39:08.0' AND Reputation > 0;"]}, {"question_id": 621, "answer_sql": ["SELECT Name FROM badges WHERE UserId IN ( SELECT Id FROM users WHERE Reputation = ( SELECT MIN(Reputation) FROM users ) ) ORDER BY Name ASC;", "SELECT Name FROM badges WHERE UserId = (SELECT Id FROM users ORDER BY Reputation ASC LIMIT 1);"]}, {"question_id": 622, "answer_sql": ["SELECT Name FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'Sharpie');"]}, {"question_id": 623, "answer_sql": ["SELECT COUNT(*) FROM badges WHERE Name = 'Supporter' AND UserId IN (SELECT Id FROM users WHERE Age > 65);"]}, {"question_id": 624, "answer_sql": ["SELECT DisplayName FROM users WHERE Id = 30;"]}, {"question_id": 625, "answer_sql": ["SELECT COUNT(*) FROM users WHERE Location = 'New York';"]}, {"question_id": 626, "answer_sql": []}, {"question_id": 627, "answer_sql": ["SELECT COUNT(*) FROM users WHERE Age BETWEEN 19 AND 65;"]}, {"question_id": 628, "answer_sql": ["SELECT DisplayName FROM users WHERE Views = ( SELECT MAX(Views) FROM users );"]}, {"question_id": 629, "answer_sql": []}, {"question_id": 630, "answer_sql": ["SELECT TagName FROM tags WHERE WikiPostId IN (SELECT Id FROM posts WHERE OwnerDisplayName = 'John Stauffer');"]}, {"question_id": 631, "answer_sql": ["SELECT COUNT(*) FROM posts WHERE OwnerDisplayName = 'Daniel Vassallo';"]}, {"question_id": 632, "answer_sql": ["SELECT COUNT(*) FROM votes WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'Harlan');"]}, {"question_id": 633, "answer_sql": ["SELECT posts.Id FROM posts WHERE posts.OwnerDisplayName = 'slashnick' AND posts.AnswerCount = ( SELECT MAX(AnswerCount) FROM posts WHERE posts.OwnerDisplayName = 'slashnick' );"]}, {"question_id": 634, "answer_sql": ["SELECT posts.Id, posts.Title, posts.ViewCount FROM posts WHERE posts.OwnerDisplayName = 'Harvey Motulsky' OR posts.OwnerDisplayName = 'Noah Snyder' ORDER BY posts.ViewCount DESC LIMIT 1;"]}, {"question_id": 635, "answer_sql": []}, {"question_id": 636, "answer_sql": ["SELECT COUNT(*) FROM comments JOIN posts ON comments.PostId = posts.Id WHERE posts.OwnerDisplayName = 'Neil McGuigan' AND comments.Score < 60;"]}, {"question_id": 637, "answer_sql": ["SELECT tags.TagName FROM tags JOIN postLinks ON tags.Id = postLinks.RelatedPostId JOIN posts ON postLinks.PostId = posts.Id WHERE posts.OwnerDisplayName = 'Mark Meckes' AND posts.ClosedDate IS NULL AND tags.Id NOT IN ( SELECT postLinks.RelatedPostId FROM postLinks JOIN posts ON postLinks.PostId = posts.Id WHERE posts.OwnerDisplayName = 'Mark Meckes' AND posts.ClosedDate IS NULL ) AND tags.Id NOT IN ( SELECT tags.Id FROM tags JOIN posts ON tags.Id = posts.Tags WHERE posts.OwnerDisplayName = 'Mark Meckes' AND posts.ClosedDate IS NULL );"]}, {"question_id": 638, "answer_sql": ["SELECT DisplayName FROM badges JOIN users ON badges.UserId = users.Id WHERE Name = 'Organizer';"]}, {"question_id": 639, "answer_sql": []}, {"question_id": 640, "answer_sql": []}, {"question_id": 641, "answer_sql": ["SELECT COUNT(*) FROM badges WHERE UserId IN ( SELECT Id FROM users WHERE CreationDate LIKE '2014-%' AND badges.Name = 'commentator' );"]}, {"question_id": 642, "answer_sql": []}, {"question_id": 643, "answer_sql": []}, {"question_id": 644, "answer_sql": ["SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Detecting a given face in a database of facial images';"]}, {"question_id": 645, "answer_sql": ["SELECT COUNT(*) FROM comments INNER JOIN users ON comments.UserId = users.Id WHERE comments.Score < 60;", "SELECT COUNT(*) FROM comments JOIN users ON comments.UserId = users.Id WHERE users.Id = 13 AND comments.Score < 60;"]}, {"question_id": 646, "answer_sql": ["SELECT p.Title, GROUP_CONCAT(DISTINCT c.UserDisplayName) as UserDisplayNames FROM posts p JOIN comments c ON p.Id = c.PostId WHERE c.Score > 60 GROUP BY p.Id"]}, {"question_id": 647, "answer_sql": ["SELECT Name FROM badges WHERE UserId IN ( SELECT Id FROM users WHERE Location = 'North Pole' ) AND Date LIKE '2011%';"]}, {"question_id": 648, "answer_sql": []}, {"question_id": 649, "answer_sql": ["SELECT postHistory.PostHistoryTypeId, postHistory.RevisionGUID, postHistory.CreationDate, postHistory.Text, postHistory.Comment, postHistory.UserDisplayName FROM postHistory WHERE postHistory.PostId = (SELECT Id FROM posts WHERE Title = 'What is the best introductory Bayesian statistics textbook?') ORDER BY postHistory.CreationDate DESC;", "SELECT postHistory.PostHistoryTypeId, postHistory.RevisionGUID, postHistory.CreationDate, postHistory.Text, postHistory.Comment, postHistory.UserDisplayName FROM postHistory WHERE postHistory.PostId = ( SELECT Id FROM posts WHERE Title = 'What is the best introductory Bayesian statistics textbook?' );"]}, {"question_id": 650, "answer_sql": ["SELECT users.LastAccessDate, users.Location FROM users JOIN badges ON users.Id = badges.UserId WHERE badges.Name = 'Outliers';"]}, {"question_id": 651, "answer_sql": ["SELECT Title FROM posts WHERE Id = (SELECT RelatedPostId FROM postLinks WHERE PostId = (SELECT Id FROM posts WHERE Title = 'How to tell if something happened in a data set which monitors a value over time'));", "SELECT Title FROM posts WHERE Id = (SELECT ParentId FROM posts WHERE Id = (SELECT AcceptedAnswerId FROM posts WHERE Id = (SELECT PostId FROM votes WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'How to tell if something happened in a data set which monitors a value over time'))));"]}, {"question_id": 652, "answer_sql": []}, {"question_id": 653, "answer_sql": ["SELECT OwnerDisplayName FROM posts WHERE ViewCount = (SELECT MAX(ViewCount) FROM posts);"]}, {"question_id": 654, "answer_sql": []}, {"question_id": 655, "answer_sql": ["SELECT PostId, LinkTypeId FROM postLinks WHERE PostId = (SELECT Id FROM posts WHERE Title = 'What are principal component scores?') AND LinkTypeId = 1;"]}, {"question_id": 656, "answer_sql": ["SELECT ParentId, MAX(Score) FROM posts WHERE ParentId IS NOT NULL GROUP BY ParentId ORDER BY MAX(Score) DESC LIMIT 1;", "SELECT ParentId, OwnerDisplayName FROM posts WHERE Score = ( SELECT MAX(Score) FROM posts WHERE ParentId IS NOT NULL )"]}, {"question_id": 657, "answer_sql": ["SELECT u.DisplayName, u.WebsiteUrl FROM users u JOIN votes v ON u.Id = v.UserId WHERE v.VoteTypeId = 8 AND v.BountyAmount = (SELECT MAX(BountyAmount) FROM votes WHERE VoteTypeId = 8) ORDER BY v.BountyAmount DESC;"]}, {"question_id": 658, "answer_sql": []}, {"question_id": 659, "answer_sql": ["SELECT COUNT(*) FROM tags WHERE Count BETWEEN 5000 AND 7000;"]}, {"question_id": 660, "answer_sql": ["SELECT OwnerUserId FROM posts WHERE FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts);"]}, {"question_id": 661, "answer_sql": ["SELECT MAX(Reputation) as InfluentialUserAge FROM users;"]}, {"question_id": 662, "answer_sql": []}, {"question_id": 663, "answer_sql": ["SELECT MIN(Age) FROM users;"]}, {"question_id": 664, "answer_sql": ["SELECT MAX(Count) as Popular_Tag_Score FROM tags"]}, {"question_id": 665, "answer_sql": []}, {"question_id": 666, "answer_sql": ["SELECT MAX(FavoriteCount) as MostValuablePost FROM posts WHERE OwnerUserId = 1465;", "SELECT MAX(posts.Id) FROM posts JOIN votes ON posts.Id = votes.PostId WHERE votes.UserId = 1465;"]}, {"question_id": 667, "answer_sql": ["SELECT MIN(CreationDate) FROM postLinks;", "SELECT Title FROM posts WHERE Id = (SELECT MIN(PostId) FROM postLinks);"]}, {"question_id": 668, "answer_sql": []}, {"question_id": 669, "answer_sql": ["SELECT MIN(CreationDate) FROM votes WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'chl');"]}, {"question_id": 670, "answer_sql": ["SELECT MIN(users.CreationDate) as FirstPostDate FROM users WHERE users.Id = (SELECT MIN(users.Id) FROM users);"]}, {"question_id": 671, "answer_sql": ["SELECT DisplayName FROM users WHERE Id = (SELECT UserId FROM badges ORDER BY Date ASC LIMIT 1);", "SELECT DisplayName FROM users WHERE Id = (SELECT UserId FROM badges WHERE Name = 'Autobiographer' ORDER BY Date ASC LIMIT 1);"]}, {"question_id": 672, "answer_sql": []}, {"question_id": 673, "answer_sql": ["SELECT AVG(PostId) FROM votes WHERE UserId = (SELECT Id FROM users ORDER BY Age ASC LIMIT 1);"]}, {"question_id": 674, "answer_sql": ["SELECT DisplayName FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users);"]}, {"question_id": 675, "answer_sql": ["SELECT COUNT(*) FROM users WHERE Reputation > 2000 AND Views > 1000;"]}, {"question_id": 676, "answer_sql": []}, {"question_id": 677, "answer_sql": []}, {"question_id": 678, "answer_sql": ["SELECT Id, Title FROM posts WHERE OwnerDisplayName = 'Harvey Motulsky' ORDER BY ViewCount DESC LIMIT 1;"]}, {"question_id": 679, "answer_sql": ["SELECT Id, Title FROM posts WHERE Score = (SELECT MAX(Score) FROM posts);"]}, {"question_id": 680, "answer_sql": ["SELECT AVG(Score) FROM posts WHERE OwnerDisplayName = 'Stephen Turner';"]}, {"question_id": 681, "answer_sql": []}, {"question_id": 682, "answer_sql": []}, {"question_id": 683, "answer_sql": []}, {"question_id": 684, "answer_sql": []}, {"question_id": 685, "answer_sql": ["SELECT posts.ViewCount, posts.OwnerDisplayName FROM posts WHERE posts.Title = 'Computer Game Datasets';"]}, {"question_id": 686, "answer_sql": ["SELECT COUNT(*) FROM posts WHERE ViewCount > (SELECT AVG(ViewCount) FROM posts);"]}, {"question_id": 687, "answer_sql": ["SELECT COUNT(*) FROM comments WHERE PostId = (SELECT Id FROM posts ORDER BY Score DESC LIMIT 1);"]}, {"question_id": 688, "answer_sql": ["SELECT COUNT(*) FROM posts WHERE ViewCount > 35000 AND CommentCount = 0;"]}, {"question_id": 689, "answer_sql": ["SELECT users.DisplayName, users.Location FROM users JOIN postHistory ON users.Id = postHistory.UserId WHERE postHistory.Id = (SELECT MAX(Id) FROM postHistory WHERE PostId = 183);"]}, {"question_id": 690, "answer_sql": ["SELECT * FROM badges WHERE UserId IN (SELECT Id FROM users WHERE DisplayName = 'Emmett');", "SELECT Name FROM badges WHERE UserId IN (SELECT Id FROM users WHERE DisplayName = 'Emmett');", "SELECT Name FROM badges WHERE UserId IN (SELECT Id FROM users WHERE DisplayName = 'Emmett') ORDER BY Date DESC LIMIT 1;"]}, {"question_id": 691, "answer_sql": ["SELECT COUNT(*) FROM users WHERE Age BETWEEN 19 AND 65 AND UpVotes > 5000;"]}, {"question_id": 692, "answer_sql": []}, {"question_id": 693, "answer_sql": ["SELECT MAX(CreationDate) as LatestCreationDate, COUNT(*) as NumberOfUsers FROM users", "SELECT COUNT(*) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE LastAccessDate = (SELECT MAX(LastAccessDate) FROM users));", "SELECT COUNT(*) as NumberOfPosts, COUNT(*) as NumberOfComments FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.CreationDate = (SELECT MAX(CreationDate) FROM users);", "SELECT MAX(CreationDate) as LatestCreationDate FROM users;"]}, {"question_id": 694, "answer_sql": ["SELECT Text, UserDisplayName FROM comments WHERE PostId = (SELECT Id FROM posts WHERE Title = 'Analysing wind data with R') ORDER BY CreationDate DESC LIMIT 1;", "SELECT c.Text, u.DisplayName FROM comments c JOIN users u ON c.UserId = u.Id WHERE c.PostId = (SELECT p.Id FROM posts p WHERE p.Title = 'Analysing wind data with R') ORDER BY c.CreationDate DESC LIMIT 1;"]}, {"question_id": 695, "answer_sql": ["SELECT COUNT(*) FROM badges WHERE Name = 'Citizen Patrol';"]}, {"question_id": 696, "answer_sql": ["SELECT COUNT(*) FROM posts WHERE Tags LIKE '%careers%';"]}, {"question_id": 697, "answer_sql": []}, {"question_id": 698, "answer_sql": ["SELECT COUNT(*) as TotalComments, (SELECT COUNT(*) FROM posts WHERE AcceptedAnswerId = posts.Id) as TotalAnswers FROM posts WHERE Title = 'Clustering 1D data';", "SELECT COUNT(*) as TotalComments FROM comments WHERE PostId IN (SELECT Id FROM posts WHERE Title = 'Clustering 1D data');", "SELECT COUNT(*) FROM posts WHERE Title = 'Clustering 1D data';"]}, {"question_id": 699, "answer_sql": ["SELECT CreationDate FROM users WHERE DisplayName = 'IrishStat';"]}, {"question_id": 700, "answer_sql": []}, {"question_id": 701, "answer_sql": ["SELECT (COUNT(posts.Id) * 100.0) / (SELECT COUNT(*) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users))) as percentage FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users)) AND Score > 50;", "SELECT (COUNT(posts.Id) * 100.0) / (SELECT COUNT(users.Id) FROM users WHERE users.Reputation = (SELECT MAX(users.Reputation) FROM users)) as percentage FROM posts WHERE posts.OwnerUserId IN (SELECT users.Id FROM users WHERE users.Reputation = (SELECT MAX(users.Reputation) FROM users)) AND posts.Score > 50;", "SELECT (COUNT(posts.Id) * 100.0) / (SELECT COUNT(*) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users))) as percentage FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users));"]}, {"question_id": 702, "answer_sql": ["SELECT COUNT(*) FROM posts WHERE Score < 20;"]}, {"question_id": 703, "answer_sql": ["SELECT COUNT(*) FROM tags WHERE Id < 15 AND Count <= 20;", "SELECT COUNT(*) FROM tags WHERE Count <= 20;"]}, {"question_id": 704, "answer_sql": ["SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'sample';"]}, {"question_id": 705, "answer_sql": ["SELECT reputation, UpVotes FROM users WHERE DisplayName = 'fine, you win :)';", "SELECT users.Reputation, users.UpVotes FROM users JOIN comments ON users.Id = comments.UserId WHERE comments.Text = 'fine, you win :)';"]}, {"question_id": 706, "answer_sql": ["SELECT Text FROM comments WHERE PostId IN (SELECT Id FROM posts WHERE Title = 'How can I adapt ANOVA for binary data?');"]}, {"question_id": 707, "answer_sql": ["SELECT Text, Score FROM comments WHERE PostId IN ( SELECT Id FROM posts WHERE ViewCount BETWEEN 100 AND 150 ) AND Score = ( SELECT MAX(Score) FROM comments WHERE PostId IN ( SELECT Id FROM posts WHERE ViewCount BETWEEN 100 AND 150 ) );"]}, {"question_id": 708, "answer_sql": ["SELECT comments.CreationDate, users.Age FROM comments JOIN users ON comments.UserId = users.Id WHERE comments.Text LIKE '%http%' LIMIT 1;"]}, {"question_id": 709, "answer_sql": []}, {"question_id": 710, "answer_sql": ["SELECT COUNT(*) FROM comments WHERE Score = 0 AND PostId IN (SELECT Id FROM posts WHERE CommentCount = 1);"]}, {"question_id": 711, "answer_sql": ["SELECT COUNT(*) FROM comments WHERE Score = 0 AND UserId IN (SELECT Id FROM users WHERE Age = 40);"]}, {"question_id": 712, "answer_sql": ["SELECT posts.Id AS PostId, comments.Text AS Comment FROM posts INNER JOIN postHistory ON posts.Id = postHistory.PostId INNER JOIN comments ON postHistory.Id = comments.PostId WHERE posts.Title = 'Group differences on a five point Likert item';", "SELECT posts.Id, comments.Text FROM posts JOIN comments ON posts.Id = comments.PostId WHERE posts.Title = 'Group differences on a five point Likert item';"]}, {"question_id": 713, "answer_sql": ["SELECT UpVotes FROM users WHERE DisplayName = 'R' AND AccountId IN (SELECT UserId FROM comments WHERE Text = 'R is also lazy evaluated.');"]}, {"question_id": 714, "answer_sql": ["SELECT c.Text FROM comments c JOIN users u ON c.UserId = u.Id WHERE u.DisplayName = 'Harvey Motulsky';", "SELECT c.* FROM comments c JOIN users u ON c.UserId = u.Id WHERE u.DisplayName = 'Harvey Motulsky';"]}, {"question_id": 715, "answer_sql": []}, {"question_id": 716, "answer_sql": ["SELECT (COUNT(UserId) * 100.0) / (SELECT COUNT(*) FROM users WHERE UpVotes = 0 AND Score BETWEEN 5 AND 10) as percentage FROM comments WHERE Score BETWEEN 5 AND 10;"]}, {"question_id": 717, "answer_sql": []}, {"question_id": 718, "answer_sql": ["SELECT COUNT(*) FROM hero_power h JOIN superpower sp ON h.power_id = sp.id WHERE sp.power_name = 'Super Strength';"]}, {"question_id": 719, "answer_sql": ["SELECT COUNT(*) FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Super Strength' AND superhero.height_cm > 200;"]}, {"question_id": 720, "answer_sql": ["SELECT s.superhero_name, s.full_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name IN ( SELECT power_name FROM superpower ORDER BY power_name ASC LIMIT 15 ) GROUP BY s.id;", "SELECT s.superhero_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name IN ( SELECT power_name FROM hero_power GROUP BY hero_id HAVING COUNT(power_id) > 15 ) GROUP BY s.id HAVING COUNT(s.superhero_name) > 15;", "SELECT s.superhero_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id GROUP BY s.superhero_name HAVING COUNT(sp.power_name) > 15;", "SELECT s.superhero_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name IN ( SELECT power_name FROM superpower ORDER BY power_name ASC LIMIT 15 ) GROUP BY s.id HAVING COUNT(s.superhero_name) > 15;"]}, {"question_id": 721, "answer_sql": ["SELECT COUNT(*) FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Blue';"]}, {"question_id": 722, "answer_sql": ["SELECT colour.colour FROM superhero JOIN colour ON superhero.skin_colour_id = colour.id WHERE superhero.superhero_name = 'Apocalypse';"]}, {"question_id": 723, "answer_sql": ["SELECT COUNT(*) FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE eye_colour_id = (SELECT id FROM colour WHERE colour = 'Blue') AND power_name = 'Agility';"]}, {"question_id": 724, "answer_sql": []}, {"question_id": 725, "answer_sql": ["SELECT COUNT(*) FROM publisher WHERE publisher_name = 'Marvel Comics';", "SELECT COUNT(*) FROM superhero WHERE publisher_id IN (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics');"]}, {"question_id": 726, "answer_sql": []}, {"question_id": 727, "answer_sql": []}, {"question_id": 728, "answer_sql": []}, {"question_id": 729, "answer_sql": []}, {"question_id": 730, "answer_sql": []}, {"question_id": 731, "answer_sql": ["SELECT COUNT(*) FROM publisher WHERE publisher_name = 'DC Comics';"]}, {"question_id": 732, "answer_sql": []}, {"question_id": 733, "answer_sql": ["SELECT COUNT(*) FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id JOIN alignment ON superhero.alignment_id = alignment.id WHERE publisher.publisher_name = 'Marvel Comics' AND alignment.alignment = 'Gold-eyed';", "SELECT COUNT(*) FROM superhero WHERE eye_colour_id = (SELECT id FROM colour WHERE colour = 'Gold') AND publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics');"]}, {"question_id": 734, "answer_sql": []}, {"question_id": 735, "answer_sql": ["SELECT COUNT(*) FROM superhero WHERE hair_colour_id = (SELECT id FROM colour WHERE colour = 'Blond')"]}, {"question_id": 736, "answer_sql": ["SELECT s.superhero_name FROM superhero s WHERE s.id = (SELECT MIN(h.hero_id) FROM hero_attribute h WHERE h.attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Intelligence'));"]}, {"question_id": 737, "answer_sql": ["SELECT race.race FROM superhero JOIN race ON superhero.race_id = race.id WHERE superhero.superhero_name = 'Copycat';"]}, {"question_id": 738, "answer_sql": []}, {"question_id": 739, "answer_sql": ["SELECT superhero_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE power_name = 'Death Touch';"]}, {"question_id": 740, "answer_sql": []}, {"question_id": 741, "answer_sql": []}, {"question_id": 742, "answer_sql": []}, {"question_id": 743, "answer_sql": []}, {"question_id": 744, "answer_sql": ["SELECT SUM(publisher_name = 'Marvel Comics') - SUM(publisher_name = 'DC Comics') as difference_in_superheroes_published FROM publisher;"]}, {"question_id": 745, "answer_sql": []}, {"question_id": 746, "answer_sql": ["SELECT AVG(attribute_value) as average_attribute_value FROM hero_attribute;"]}, {"question_id": 747, "answer_sql": ["SELECT COUNT(*) FROM superhero WHERE full_name IS NULL;"]}, {"question_id": 748, "answer_sql": []}, {"question_id": 749, "answer_sql": []}, {"question_id": 750, "answer_sql": ["SELECT AVG(weight_kg) FROM superhero WHERE gender_id = 2;"]}, {"question_id": 751, "answer_sql": ["SELECT superpower.power_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.gender_id = (SELECT id FROM gender WHERE gender = 'Male') GROUP BY superpower.power_name;", "SELECT superpower.power_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.gender_id = (SELECT id FROM gender WHERE gender = 'Male') GROUP BY superpower.power_name LIMIT 5;"]}, {"question_id": 752, "answer_sql": ["SELECT s.superhero_name FROM superhero s WHERE s.race_id = (SELECT id FROM race WHERE race = 'Alien') AND s.superhero_name LIKE '%' ORDER BY s.superhero_name;", "SELECT s.superhero_name FROM superhero s WHERE s.race_id = (SELECT id FROM race WHERE race = 'Alien') AND s.superhero_name LIKE 'alien%';"]}, {"question_id": 753, "answer_sql": ["SELECT s.superhero_name FROM superhero s WHERE s.height_cm BETWEEN 170 AND 190 AND s.eye_colour_id = 1"]}, {"question_id": 754, "answer_sql": ["SELECT superpower.power_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.id = 56;"]}, {"question_id": 755, "answer_sql": ["SELECT super.superhero_name FROM superhero super WHERE super.race_id = (SELECT id FROM race WHERE race.race = 'Demi-God') LIMIT 5;"]}, {"question_id": 756, "answer_sql": ["SELECT COUNT(*) FROM superhero WHERE alignment_id = 'Bad';"]}, {"question_id": 757, "answer_sql": ["SELECT race.race FROM superhero JOIN race ON superhero.race_id = race.id WHERE superhero.weight_kg = 169;"]}, {"question_id": 758, "answer_sql": []}, {"question_id": 759, "answer_sql": ["SELECT c.colour FROM colour c JOIN hero_attribute ha ON c.id = ha.attribute_id JOIN attribute a ON a.id = ha.attribute_id JOIN superhero s ON s.id = ha.hero_id WHERE a.attribute_name = 'Eye Colour' AND s.weight_kg = (SELECT MAX(weight_kg) FROM superhero);"]}, {"question_id": 760, "answer_sql": []}, {"question_id": 761, "answer_sql": ["SELECT full_name FROM superhero WHERE gender_id = 1 AND weight_kg > (SELECT AVG(weight_kg) FROM superhero);"]}, {"question_id": 762, "answer_sql": ["SELECT superpower.power_name FROM hero_power JOIN superpower ON hero_power.power_id = superpower.id GROUP BY superpower.power_name ORDER BY COUNT(superpower.power_name) DESC LIMIT 1;"]}, {"question_id": 763, "answer_sql": ["SELECT attribute_value FROM hero_attribute JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Abomination';", "SELECT attribute_value FROM hero_attribute WHERE hero_id = ( SELECT id FROM superhero WHERE superhero_name = 'Abomination' );"]}, {"question_id": 764, "answer_sql": []}, {"question_id": 765, "answer_sql": ["SELECT COUNT(*) FROM hero_power JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'stealth';"]}, {"question_id": 766, "answer_sql": ["SELECT s.superhero_name, MAX(ha.attribute_value) as strength FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'strength' GROUP BY s.superhero_name ORDER BY strength DESC LIMIT 1;", "SELECT MAX(s.superhero_name) AS 'Hero with Highest Strength' FROM superhero AS s JOIN hero_attribute AS ha ON s.id = ha.hero_id JOIN attribute AS a ON ha.attribute_id = a.id WHERE a.attribute_name = 'strength';"]}, {"question_id": 767, "answer_sql": ["SELECT AVG(superhero.height_cm) FROM superhero WHERE skin_colour_id = 1;"]}, {"question_id": 768, "answer_sql": ["SELECT COUNT(*) FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Dark Horse Comics');"]}, {"question_id": 769, "answer_sql": []}, {"question_id": 770, "answer_sql": ["SELECT c.colour FROM colour c JOIN hero_attribute ha ON c.id = ha.attribute_id JOIN hero_power hp ON ha.hero_id = hp.hero_id JOIN superhero s ON hp.power_id = s.id WHERE s.superhero_name = 'Abraham Sapien' AND s.alignment_id = 1;"]}, {"question_id": 771, "answer_sql": ["SELECT s.superhero_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Flight';"]}, {"question_id": 772, "answer_sql": ["SELECT c1.colour as eyes, c2.colour as hair, c3.colour as skin FROM superhero s JOIN colour c1 ON s.eye_colour_id = c1.id JOIN colour c2 ON s.hair_colour_id = c2.id JOIN colour c3 ON s.skin_colour_id = c3.id JOIN gender g ON s.gender_id = g.id JOIN publisher p ON s.publisher_id = p.id WHERE g.gender = 'Female' AND p.publisher_name = 'Dark Horse Comics'", "SELECT gender.gender, colour.colour AS eyes, colour.colour AS hair, colour.colour AS skin FROM superhero JOIN gender ON superhero.gender_id = gender.id JOIN colour ON (superhero.eye_colour_id = colour.id AND superhero.hair_colour_id = colour.id AND superhero.skin_colour_id = colour.id) WHERE gender.gender = 'Female' AND superhero.publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Dark Horse Comics')", "SELECT superhero.superhero_name, colour.colour AS eyes, colour.colour AS hair, colour.colour AS skin FROM superhero JOIN hero_attribute ON hero_attribute.hero_id = superhero.id JOIN attribute ON attribute.id = hero_attribute.attribute_id JOIN colour ON colour.id = hero_attribute.attribute_value WHERE superhero.gender_id = 2 AND superhero.publisher_id = 1"]}, {"question_id": 773, "answer_sql": []}, {"question_id": 774, "answer_sql": ["SELECT r.race FROM race r JOIN superhero s ON s.race_id = r.id WHERE s.superhero_name = 'A-Bomb';", "SELECT alignment.alignment FROM alignment JOIN superhero ON alignment.id = superhero.alignment_id WHERE superhero.superhero_name = 'A-Bomb';"]}, {"question_id": 775, "answer_sql": []}, {"question_id": 776, "answer_sql": ["SELECT superhero.superhero_name, race.race FROM superhero JOIN race ON superhero.race_id = race.id WHERE superhero.superhero_name = 'Charles Chandler';"]}, {"question_id": 777, "answer_sql": ["SELECT gender.gender FROM superhero JOIN gender ON superhero.gender_id = gender.id WHERE superhero.superhero_name = 'Agent 13';"]}, {"question_id": 778, "answer_sql": ["SELECT s.superhero_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Adaptation';"]}, {"question_id": 779, "answer_sql": ["SELECT COUNT(*) FROM hero_power WHERE hero_id IN (SELECT id FROM superhero WHERE superhero_name = 'Amazo');"]}, {"question_id": 780, "answer_sql": []}, {"question_id": 781, "answer_sql": ["SELECT height_cm FROM superhero WHERE eye_colour_id = (SELECT id FROM colour WHERE colour = 'Amber');"]}, {"question_id": 782, "answer_sql": ["SELECT superhero_name FROM superhero WHERE eye_colour_id = (SELECT id FROM colour WHERE colour = 'Black') AND hair_colour_id = (SELECT id FROM colour WHERE colour = 'Black');", "SELECT super.superhero_name FROM superhero super JOIN hero_attribute ha ON super.id = ha.hero_id JOIN attribute attr ON ha.attribute_id = attr.id WHERE attr.attribute_name = 'eye_colour' AND ha.attribute_value = 1 AND attr.attribute_name = 'hair_colour' AND ha.attribute_value = 1 AND super.eye_colour_id = 1 AND super.hair_colour_id = 1;"]}, {"question_id": 783, "answer_sql": ["SELECT c.colour FROM colour c JOIN hero_attribute ha ON c.id = ha.attribute_id JOIN attribute a ON ha.attribute_id = a.id JOIN hero_power hp ON ha.hero_id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id JOIN superhero s ON s.id = hp.hero_id WHERE a.attribute_name = 'Eye colour' AND c.colour = 'Gold' GROUP BY c.colour;"]}, {"question_id": 784, "answer_sql": []}, {"question_id": 785, "answer_sql": ["SELECT super.superhero_name FROM superhero super WHERE super.alignment_id = ( SELECT alignment.id FROM alignment WHERE alignment.alignment = 'Neutral' )"]}, {"question_id": 786, "answer_sql": []}, {"question_id": 787, "answer_sql": ["SELECT race.race, alignment.alignment FROM superhero JOIN race ON superhero.race_id = race.id JOIN alignment ON superhero.alignment_id = alignment.id WHERE superhero.superhero_name = 'Cameron Hicks';"]}, {"question_id": 788, "answer_sql": []}, {"question_id": 789, "answer_sql": []}, {"question_id": 790, "answer_sql": []}, {"question_id": 791, "answer_sql": ["SELECT superhero_name, AVG(height_cm) as average_height FROM superhero GROUP BY superhero_name;"]}, {"question_id": 792, "answer_sql": ["SELECT power_name FROM superpower WHERE id = (SELECT power_id FROM hero_power WHERE hero_id = (SELECT id FROM superhero WHERE superhero_name = 'Abomination'));"]}, {"question_id": 793, "answer_sql": ["SELECT COUNT(*) FROM superhero WHERE race_id = 21 AND gender_id = 1;"]}, {"question_id": 794, "answer_sql": ["SELECT MAX(s.superhero_name) as fastest_hero FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'Speed';"]}, {"question_id": 795, "answer_sql": ["SELECT COUNT(*) FROM superhero WHERE alignment_id = 3;"]}, {"question_id": 796, "answer_sql": ["SELECT attribute.attribute_name, hero_attribute.attribute_value FROM attribute JOIN hero_attribute ON attribute.id = hero_attribute.attribute_id WHERE attribute.attribute_name = 'attributes' AND hero_attribute.hero_id = ( SELECT id FROM superhero WHERE superhero_name = '3-D Man' );", "SELECT attribute.attribute_name, hero_attribute.attribute_value FROM attribute JOIN hero_attribute ON attribute.id = hero_attribute.attribute_id WHERE hero_attribute.hero_id = ( SELECT id FROM superhero WHERE superhero_name = '3-D Man' );"]}, {"question_id": 797, "answer_sql": ["SELECT super.superhero_name FROM superhero AS super JOIN colour AS eye ON super.eye_colour_id = eye.id JOIN colour AS hair ON super.hair_colour_id = hair.id WHERE eye.colour = 'blue' AND hair.colour = 'brown';", "SELECT * FROM superhero WHERE eye_colour_id = 7 AND hair_colour_id = 9;"]}, {"question_id": 798, "answer_sql": []}, {"question_id": 799, "answer_sql": ["SELECT COUNT(*) FROM superhero WHERE publisher_id IS NULL;", "SELECT COUNT(*) FROM superhero WHERE publisher_id = 1;"]}, {"question_id": 800, "answer_sql": ["SELECT (SUM(CASE WHEN eye_colour_id = 7 THEN 1 ELSE 0 END)) * 100.0 / COUNT(*) AS percentage FROM superhero", "SELECT (SUM(CASE WHEN eye_colour_id = 7 THEN 1 ELSE 0 END)) * 100.0 / COUNT(*) AS percentage FROM superhero WHERE eye_colour_id = 7;"]}, {"question_id": 801, "answer_sql": ["SELECT SUM(gender_id = 1) as male_superheroes, SUM(gender_id = 2) as female_superheroes, (SUM(gender_id = 1) / SUM(gender_id = 2)) as ratio FROM superhero;"]}, {"question_id": 802, "answer_sql": ["SELECT MAX(height_cm), superhero_name FROM superhero GROUP BY height_cm;", "SELECT MAX(height_cm) as tallest_superhero FROM superhero;", "SELECT MAX(height_cm), superhero_name FROM superhero GROUP BY publisher_id;", "SELECT MAX(height_cm), superhero_name FROM superhero GROUP BY height_cm, superhero_name ORDER BY MAX(height_cm) DESC;", "SELECT MAX(height_cm), superhero_name FROM superhero GROUP BY publisher_id ORDER BY MAX(height_cm) DESC;"]}, {"question_id": 803, "answer_sql": ["SELECT hero_power.power_id FROM hero_power JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'cryokinesis';"]}, {"question_id": 804, "answer_sql": ["SELECT superhero.superhero_name FROM superhero WHERE id = 294;"]}, {"question_id": 805, "answer_sql": ["SELECT full_name FROM superhero WHERE weight_kg = 0 OR weight_kg IS NULL;", "SELECT full_name FROM superhero WHERE weight_kg IS NULL;", "SELECT full_name FROM superhero WHERE weight_kg = 0 OR weight_kg = NULL;"]}, {"question_id": 806, "answer_sql": ["SELECT c.colour FROM colour c JOIN hero_attribute ha ON c.id = ha.attribute_id JOIN hero_power hp ON ha.hero_id = hp.hero_id JOIN superhero su ON hp.hero_id = su.id WHERE su.full_name = 'Karen Beecher-Duncan';", "SELECT c.colour FROM colour c JOIN hero_attribute ha ON c.id = ha.attribute_value JOIN hero_power hp ON ha.hero_id = hp.hero_id JOIN superhero su ON hp.power_id = su.id WHERE su.full_name = 'Karen Beecher-Duncan';", "SELECT c.colour FROM colour c JOIN hero_attribute ha ON c.id = ha.attribute_id JOIN hero_power hp ON ha.hero_id = hp.hero_id JOIN superhero su ON hp.power_id = su.id WHERE su.full_name = 'Karen Beecher-Duncan';"]}, {"question_id": 807, "answer_sql": ["SELECT hero_power.power_id FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.full_name = 'Helen Parr';"]}, {"question_id": 808, "answer_sql": ["SELECT race.race FROM superhero JOIN race ON superhero.race_id = race.id WHERE superhero.weight_kg = 108 AND superhero.height_cm = 188;"]}, {"question_id": 809, "answer_sql": []}, {"question_id": 810, "answer_sql": []}, {"question_id": 811, "answer_sql": ["SELECT alignment.alignment, hero_power.power_id FROM alignment JOIN superhero ON alignment.id = superhero.alignment_id JOIN hero_power ON superhero.id = hero_power.hero_id WHERE superhero.superhero_name = 'Atom IV';"]}, {"question_id": 812, "answer_sql": ["SELECT super.superhero_name, super.full_name FROM superhero super JOIN colour eye ON super.eye_colour_id = eye.id WHERE eye.colour = 'Blue';"]}, {"question_id": 813, "answer_sql": ["SELECT AVG(attribute_value) FROM hero_attribute JOIN superhero ON hero_attribute.hero_id = superhero.id WHERE alignment_id = 3;"]}, {"question_id": 814, "answer_sql": ["SELECT c.colour FROM colour c JOIN hero_attribute ha ON c.id = ha.attribute_value JOIN attribute a ON a.id = ha.attribute_id WHERE a.attribute_name = 'skin_colour' AND ha.hero_id IN ( SELECT s.id FROM superhero s WHERE s.alignment_id = 1 AND s.superhero_name IS NOT NULL AND s.full_name IS NOT NULL AND s.height_cm = 180 AND s.weight_kg = 70 )"]}, {"question_id": 815, "answer_sql": ["SELECT COUNT(*) FROM superhero WHERE gender_id = 2 AND alignment_id = 1;"]}, {"question_id": 816, "answer_sql": ["SELECT s.superhero_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'attribute_value BETWEEN 75 AND 80'"]}, {"question_id": 817, "answer_sql": []}, {"question_id": 818, "answer_sql": []}, {"question_id": 819, "answer_sql": []}, {"question_id": 820, "answer_sql": ["SELECT hero_attribute.attribute_value FROM hero_attribute JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Strength' AND hero_attribute.hero_id = ( SELECT id FROM superhero WHERE superhero_name = 'Hulk' );"]}, {"question_id": 821, "answer_sql": []}, {"question_id": 822, "answer_sql": []}, {"question_id": 823, "answer_sql": ["SELECT COUNT(*) FROM superhero WHERE gender_id = 2 AND publisher_id = 1;", "SELECT COUNT(*) FROM superhero WHERE gender_id = (SELECT id FROM gender WHERE gender = 'Female') AND publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics');"]}, {"question_id": 824, "answer_sql": ["SELECT DISTINCT s.superhero_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Wind Control' ORDER BY s.superhero_name;"]}, {"question_id": 825, "answer_sql": ["SELECT gender.gender FROM hero_power JOIN superpower ON hero_power.power_id = superpower.id JOIN hero_attribute ON hero_power.hero_id = hero_attribute.hero_id JOIN superhero ON hero_attribute.hero_id = superhero.id JOIN gender ON superhero.gender_id = gender.id WHERE superpower.power_name = 'Phoenix Force';", "SELECT gender.gender FROM gender JOIN hero_power ON gender.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Phoenix Force';"]}, {"question_id": 826, "answer_sql": []}, {"question_id": 827, "answer_sql": []}, {"question_id": 828, "answer_sql": []}, {"question_id": 829, "answer_sql": []}, {"question_id": 830, "answer_sql": ["SELECT attribute.attribute_name FROM attribute JOIN hero_attribute ON attribute.id = hero_attribute.attribute_id JOIN superhero ON hero_attribute.hero_id = superhero.id WHERE superhero.superhero_name = 'Black Panther' AND hero_attribute.attribute_value = ( SELECT MIN(attribute_value) FROM hero_attribute JOIN superhero ON hero_attribute.hero_id = superhero.id WHERE superhero.superhero_name = 'Black Panther' );", "SELECT attribute.attribute_name FROM attribute JOIN hero_attribute ON attribute.id = hero_attribute.attribute_id JOIN superhero ON attribute.id = superhero.id WHERE superhero.superhero_name = 'Black Panther' ORDER BY hero_attribute.attribute_value ASC LIMIT 1;"]}, {"question_id": 831, "answer_sql": ["SELECT c.colour FROM superhero s JOIN colour c ON s.eye_colour_id = c.id WHERE s.superhero_name = 'Abomination';"]}, {"question_id": 832, "answer_sql": ["SELECT MAX(height_cm) FROM superhero;"]}, {"question_id": 833, "answer_sql": ["SELECT superhero.superhero_name FROM superhero WHERE superhero.full_name = 'Charles Chandler';"]}, {"question_id": 834, "answer_sql": []}, {"question_id": 835, "answer_sql": []}, {"question_id": 836, "answer_sql": ["SELECT COUNT(*) FROM superhero WHERE full_name LIKE 'John%';"]}, {"question_id": 837, "answer_sql": ["SELECT hero_id FROM hero_attribute WHERE attribute_id IN (SELECT id FROM attribute WHERE attribute_name = 'lowest attribute value') ORDER BY hero_id ASC LIMIT 1;", "SELECT hero_id FROM hero_attribute WHERE attribute_id IN (SELECT MIN(attribute_id) FROM hero_attribute)", "SELECT hero_id FROM hero_attribute WHERE attribute_id IN (SELECT MIN(attribute_id) FROM hero_attribute) AND hero_id IN (SELECT id FROM superhero WHERE publisher_id = 1);", "SELECT hero_id FROM hero_attribute WHERE attribute_id = (SELECT MIN(attribute_id) FROM hero_attribute) GROUP BY hero_id;"]}, {"question_id": 838, "answer_sql": ["SELECT full_name FROM superhero WHERE superhero_name = 'Alien';"]}, {"question_id": 839, "answer_sql": ["SELECT full_name FROM superhero WHERE eye_colour_id = (SELECT id FROM colour WHERE colour = 'brown') AND weight_kg < 100;"]}, {"question_id": 840, "answer_sql": ["SELECT hero_attribute.attribute_value FROM hero_attribute JOIN superhero ON hero_attribute.hero_id = superhero.id WHERE superhero.superhero_name = 'Aquababy';"]}, {"question_id": 841, "answer_sql": []}, {"question_id": 842, "answer_sql": ["SELECT AVG(height_cm) FROM superhero WHERE publisher_id IS NULL AND alignment_id IS NULL;", "SELECT AVG(height_cm) FROM superhero WHERE publisher_id IS NULL;"]}, {"question_id": 843, "answer_sql": ["SELECT hero_id FROM hero_power WHERE power_id IN (SELECT id FROM superpower WHERE power_name = 'Intelligence');"]}, {"question_id": 844, "answer_sql": ["SELECT c.colour FROM colour c JOIN hero_attribute ha ON c.id = ha.attribute_id JOIN hero_power hp ON ha.hero_id = hp.hero_id JOIN superhero su ON hp.power_id = su.id WHERE su.superhero_name = 'Blackwulf';"]}, {"question_id": 845, "answer_sql": ["SELECT hero_power.power_id as Power FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id WHERE hero_power.power_id IN ( SELECT power_id FROM hero_power GROUP BY hero_id HAVING COUNT(power_id) = ( SELECT COUNT(*) FROM hero_power ) ) AND superhero.height_cm > ( SELECT AVG(height_cm) * 0.8 FROM superhero );"]}, {"question_id": 846, "answer_sql": ["SELECT DISTINCT drivers.driverRef FROM drivers JOIN qualifying ON drivers.driverId = qualifying.driverId WHERE qualifying.raceId = 18 AND qualifying.q1 != '' ORDER BY drivers.driverRef;"]}, {"question_id": 847, "answer_sql": ["SELECT surname FROM drivers WHERE driverId = (SELECT driverId FROM qualifying WHERE raceId = 19 AND q2 = (SELECT MIN(q2) FROM qualifying WHERE raceId = 19));"]}, {"question_id": 848, "answer_sql": ["SELECT races.year FROM races WHERE races.circuitId IN (SELECT circuits.circuitId FROM circuits WHERE circuits.name = 'Shanghai') AND races.name = 'Shanghai';"]}, {"question_id": 849, "answer_sql": ["SELECT circuits.circuitRef, circuits.name, circuits.country, circuits.lat, circuits.lng, circuits.alt, circuits.url FROM circuits WHERE circuits.url = 'https://en.wikipedia.org/wiki/Circuit_de_Barcelona-Catalunya';", "SELECT circuits.circuitRef FROM circuits WHERE circuits.name = 'Circuit de Barcelona-Catalunya';", "SELECT circuits.name FROM circuits WHERE circuits.name = 'Circuit de Barcelona-Catalunya';"]}, {"question_id": 850, "answer_sql": ["SELECT circuits.name FROM circuits WHERE circuits.country = 'Germany';"]}, {"question_id": 851, "answer_sql": []}, {"question_id": 852, "answer_sql": ["SELECT COUNT(*) FROM races WHERE year = 2010 AND circuitId IN (SELECT circuitId FROM circuits WHERE country NOT IN ('Asia', 'Europe'));"]}, {"question_id": 853, "answer_sql": ["SELECT circuits.name FROM circuits WHERE circuits.country = 'Spain';"]}, {"question_id": 854, "answer_sql": ["SELECT lat, lng FROM circuits WHERE circuitRef = 'aus';"]}, {"question_id": 855, "answer_sql": ["SELECT * FROM circuits WHERE circuitRef = 'Sepang';", "SELECT * FROM circuits WHERE name = 'Sepang International Circuit';"]}, {"question_id": 856, "answer_sql": ["SELECT races.name, races.date, races.time FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.name = 'Sepang International Circuit';", "SELECT races.name, races.date FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.name = 'Sepang International Circuit';", "SELECT races.name, races.date FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.name = 'Sepang International';"]}, {"question_id": 857, "answer_sql": ["SELECT lat, lng FROM circuits WHERE circuitRef = 'Abu Dhabi Grand Prix';"]}, {"question_id": 858, "answer_sql": ["SELECT constructors.name FROM constructors JOIN constructorStandings ON constructors.constructorId = constructorStandings.constructorId JOIN races ON races.raceId = constructorStandings.raceId WHERE races.round = 24 AND constructorStandings.points = 1;"]}, {"question_id": 859, "answer_sql": ["SELECT q1.qualifyId, q1.number, q1.position, q1.q1, q1.q2, q1.q3 FROM qualifying AS q1 JOIN drivers ON q1.driverId = drivers.driverId WHERE drivers.surname = 'Senna' AND q1.raceId = 354;", "SELECT q1.qualifyId, q1.number, q1.position, q1.q1, q1.q2, q1.q3 FROM qualifying AS q1 JOIN drivers ON q1.driverId = drivers.driverId WHERE drivers.surname = 'Senna' AND q1.qualifyId = 354;"]}, {"question_id": 860, "answer_sql": ["SELECT drivers.nationality FROM qualifying JOIN drivers ON qualifying.driverId = drivers.driverId WHERE qualifying.q2 = '0:01:40'", "SELECT drivers.nationality FROM qualifying JOIN drivers ON qualifying.driverId = drivers.driverId WHERE qualifying.qualifyId = 355;", "SELECT drivers.nationality FROM qualifying JOIN drivers ON qualifying.driverId = drivers.driverId WHERE qualifying.raceId = 355;"]}, {"question_id": 861, "answer_sql": ["SELECT drivers.number FROM drivers JOIN qualifying ON drivers.driverId = qualifying.driverId WHERE qualifying.raceId = 903 AND qualifying.q3 = '0:01:54';"]}, {"question_id": 862, "answer_sql": ["SELECT COUNT(D.driverId) FROM drivers D LEFT JOIN ( SELECT raceId, COUNT(statusId) as finished FROM results WHERE statusId != 1 GROUP BY raceId ) R ON D.driverId = R.raceId WHERE R.finished IS NULL;", "SELECT COUNT(*) FROM drivers WHERE driverId NOT IN ( SELECT driverId FROM results WHERE raceId IN ( SELECT raceId FROM races WHERE year = 2007 AND round = 1 AND circuitId = 1 ) );", "SELECT COUNT(*) FROM drivers d JOIN results r ON d.driverId = r.driverId WHERE r.raceId IN ( SELECT raceId FROM races WHERE year = 2007 AND name = 'Bahrain' ) AND r.statusId != 1;", "SELECT COUNT(D.driverId) FROM drivers D LEFT JOIN ( SELECT raceId, driverId, statusId FROM results WHERE raceId = ( SELECT raceId FROM races WHERE name = 'Bahrain Grand Prix' AND year = 2007 ) AND statusId = ( SELECT statusId FROM status WHERE status = 'Finished' ) ) R ON D.driverId = R.driverId WHERE R.raceId IS NULL;", "SELECT COUNT(D.driverId) FROM drivers D LEFT JOIN ( SELECT raceId, COUNT(driverId) as finished_drivers FROM results WHERE statusId = (SELECT statusId FROM status WHERE status = 'Finished') GROUP BY raceId ) R ON D.driverId = R.raceId WHERE R.finished_drivers < D.number AND R.raceId IS NOT NULL;", "SELECT COUNT(*) FROM drivers WHERE driverId NOT IN (SELECT driverId FROM results WHERE raceId IN (SELECT raceId FROM races WHERE year = 2007 AND round = 1 AND circuitId IN (SELECT circuitId FROM circuits WHERE name = 'Bahrain')));"]}, {"question_id": 863, "answer_sql": ["SELECT races.year FROM races WHERE races.raceId = 901;", "SELECT s.url as season_url FROM seasons s JOIN races r ON s.year = r.year WHERE r.raceId = 901 AND r.round = 1;", "SELECT url FROM seasons WHERE year = (SELECT year FROM races WHERE raceId = 901);"]}, {"question_id": 864, "answer_sql": ["SELECT COUNT(*) FROM results JOIN drivers ON results.driverId = drivers.driverId WHERE results.raceId IN ( SELECT raceId FROM races WHERE year = 2015 AND round = 1 ) AND statusId = ( SELECT statusId FROM status WHERE status = 'Finished' )", "SELECT COUNT(*) FROM results WHERE statusId = (SELECT statusId FROM status WHERE status = 'Finished');", "SELECT COUNT(DISTINCT drivers.driverId) FROM results JOIN drivers ON results.driverId = drivers.driverId WHERE results.raceId IN (SELECT raceId FROM races WHERE year = 2015 AND date = '2015-11-29') AND results.statusId IN (SELECT statusId FROM status WHERE status = 'Finished');", "SELECT d.forename, d.surname, COUNT(*) as finished_count FROM results r INNER JOIN drivers d ON r.driverId = d.driverId WHERE r.raceId IN ( SELECT raceId FROM races WHERE year = 2015 AND round = 1 ) GROUP BY d.forename, d.surname ORDER BY finished_count DESC;", "SELECT COUNT(*) FROM results WHERE raceId = (SELECT raceId FROM races WHERE year = 2015 AND round = 1);", "SELECT COUNT(*) FROM results WHERE position != 0;"]}, {"question_id": 865, "answer_sql": ["SELECT forename, surname FROM drivers WHERE driverId IN ( SELECT driverId FROM results WHERE raceId = 592 AND position = 1 AND time IS NOT NULL ) ORDER BY dob ASC;", "SELECT drivers.forename, drivers.surname, drivers.dob FROM drivers JOIN results ON drivers.driverId = results.driverId WHERE results.position = 1 AND results.raceId = 592 ORDER BY drivers.dob ASC LIMIT 1;", "SELECT drivers.forename, drivers.surname, drivers.dob FROM drivers JOIN results ON drivers.driverId = results.driverId WHERE results.raceId IN ( SELECT races.raceId FROM races WHERE races.round = 1 ) ORDER BY drivers.dob ASC LIMIT 1;", "SELECT drivers.forename, drivers.surname, drivers.dob FROM drivers JOIN results ON drivers.driverId = results.driverId WHERE results.raceId = 592 ORDER BY drivers.dob ASC LIMIT 1;"]}, {"question_id": 866, "answer_sql": ["SELECT drivers.url FROM drivers JOIN lapTimes ON drivers.driverId = lapTimes.driverId WHERE lapTimes.time = '0:01:27';"]}, {"question_id": 867, "answer_sql": ["SELECT drivers.surname FROM drivers JOIN lapTimes ON drivers.driverId = lapTimes.driverId WHERE lapTimes.milliseconds = ( SELECT MAX(lapTimes.milliseconds) FROM lapTimes WHERE raceId = 933 );", "SELECT drivers.forename, drivers.surname FROM drivers JOIN lapTimes ON drivers.driverId = lapTimes.driverId WHERE lapTimes.milliseconds = (SELECT MAX(milliseconds) FROM lapTimes WHERE raceId = 933);", "SELECT drivers.surname FROM drivers JOIN lapTimes ON drivers.driverId = lapTimes.driverId JOIN races ON lapTimes.raceId = races.raceId WHERE races.raceId = 933 AND lapTimes.milliseconds = (SELECT MIN(milliseconds) FROM lapTimes WHERE raceId = 933) AND drivers.surname = 'Vettel';"]}, {"question_id": 868, "answer_sql": ["SELECT circuits.circuitRef, circuits.name, circuits.lat, circuits.lng, circuits.alt, circuits.country, circuits.url FROM circuits WHERE circuits.name = 'Melbourne';", "SELECT * FROM circuits WHERE name = 'Circuit of the Americas';"]}, {"question_id": 869, "answer_sql": ["SELECT constructors.url FROM constructors JOIN constructorStandings ON constructors.constructorId = constructorStandings.constructorId WHERE constructorStandings.raceId = ( SELECT MAX(raceId) FROM races WHERE year = 2021 )"]}, {"question_id": 870, "answer_sql": ["SELECT q1.qualifyId, q1.number, q1.position, q1.q1, q1.q2, q1.q3 FROM qualifying AS q1 JOIN drivers AS d ON q1.driverId = d.driverId JOIN results AS r ON q1.raceId = r.raceId WHERE r.driverId = 1 AND q1.raceId = 345;", "SELECT q1.qualifyId, q1.number, q1.position, q1.q1, q1.q2, q1.q3 FROM qualifying q1 JOIN drivers d ON q1.driverId = d.driverId WHERE d.surname = 'di Grassi' AND q1.raceId = 345;", "SELECT q1.qualifyId, q1.position, q1.q1, q1.q2, q1.q3 FROM qualifying q1 JOIN drivers d ON q1.driverId = d.driverId WHERE d.surname = 'di Grassi' AND q1.raceId = 345;", "SELECT q1.qualifyId, q1.position, q1.q1, q1.q2, q1.q3 FROM qualifying AS q1 JOIN drivers AS d ON q1.driverId = d.driverId JOIN results AS r ON q1.raceId = r.raceId WHERE r.driverId = 1 AND q1.raceId = 345;"]}, {"question_id": 871, "answer_sql": []}, {"question_id": 872, "answer_sql": ["SELECT drivers.code FROM qualifying JOIN drivers ON qualifying.driverId = drivers.driverId WHERE qualifying.q3 = '0:01:33';", "SELECT drivers.code FROM qualifying JOIN drivers ON qualifying.driverId = drivers.driverId WHERE qualifying.qualifyId = 45;"]}, {"question_id": 873, "answer_sql": ["SELECT time FROM results WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Bruce' AND surname = 'McLaren') AND raceId = (SELECT raceId FROM races WHERE name = 'No.743');"]}, {"question_id": 874, "answer_sql": ["SELECT drivers.surname FROM drivers JOIN qualifying ON drivers.driverId = qualifying.driverId WHERE qualifying.raceId = ( SELECT races.raceId FROM races WHERE races.name = 'San Marino Grand Prix' AND races.year = 2006 ) AND qualifying.position = 2;", "SELECT drivers.surname FROM drivers JOIN results ON drivers.driverId = results.driverId WHERE results.raceId IN ( SELECT races.raceId FROM races WHERE races.name = 'San Marino Grand Prix' AND races.year = 2006 ) AND results.position = 2;"]}, {"question_id": 875, "answer_sql": ["SELECT seasons.year FROM races JOIN seasons ON races.year = seasons.year WHERE races.raceId = 901;", "SELECT url FROM seasons WHERE year = ( SELECT year FROM races WHERE raceId = 901 );"]}, {"question_id": 876, "answer_sql": ["SELECT COUNT(*) FROM results WHERE raceId = (SELECT raceId FROM races WHERE year = 2015 AND round = 1);"]}, {"question_id": 877, "answer_sql": ["SELECT drivers.forename, drivers.surname, drivers.dob FROM drivers JOIN results ON drivers.driverId = results.driverId WHERE results.raceId = 872 AND results.statusId = (SELECT statusId FROM status WHERE status.status = 'Finished') ORDER BY drivers.dob ASC LIMIT 1;"]}, {"question_id": 878, "answer_sql": ["SELECT drivers.forename, drivers.surname FROM drivers JOIN lapTimes ON drivers.driverId = lapTimes.driverId WHERE lapTimes.time = ( SELECT MIN(time) FROM lapTimes WHERE raceId = 348 ) AND lapTimes.raceId = 348;"]}, {"question_id": 879, "answer_sql": ["SELECT drivers.nationality FROM drivers JOIN lapTimes ON drivers.driverId = lapTimes.driverId WHERE lapTimes.milliseconds = (SELECT MIN(milliseconds) FROM lapTimes WHERE raceId = 348);", "SELECT drivers.nationality FROM drivers JOIN lapTimes ON drivers.driverId = lapTimes.driverId WHERE lapTimes.milliseconds = (SELECT MIN(milliseconds) FROM lapTimes WHERE raceId = 348) AND lapTimes.raceId = 348;"]}, {"question_id": 880, "answer_sql": ["SELECT ROUND( ( ( ( SELECT fastestLapSpeed FROM results WHERE raceId = 853 ) - ( SELECT fastestLapSpeed FROM results WHERE raceId = 854 ) ) / ( ( SELECT fastestLapSpeed FROM results WHERE raceId = 853 ) ) * 100 ) ) as percentage", "SELECT ROUND( (SUBSTR(fastestLapSpeed, INSTR(fastestLapSpeed, ' ') + 1)) * 100 / (SUBSTR(fastestLapSpeed, INSTR(fastestLapSpeed, ' ') + 1)) ) as percentage FROM results WHERE raceId = 853;"]}, {"question_id": 881, "answer_sql": []}, {"question_id": 882, "answer_sql": ["SELECT MIN(year) FROM races WHERE name = 'Singapore Grand Prix';"]}, {"question_id": 883, "answer_sql": ["SELECT COUNT(*) as total_races, name FROM races WHERE year = 2005 ORDER BY name DESC;"]}, {"question_id": 884, "answer_sql": ["SELECT * FROM races WHERE date = (SELECT MIN(date) FROM races);"]}, {"question_id": 885, "answer_sql": ["SELECT name, date FROM races WHERE year = 1999 ORDER BY round DESC LIMIT 1;", "SELECT name, date FROM seasons JOIN races ON seasons.year = races.year WHERE races.round = (SELECT MAX(round) FROM races WHERE year = 1999) ORDER BY date DESC LIMIT 1;", "SELECT name, date FROM seasons JOIN races ON seasons.year = races.year WHERE races.round = (SELECT MAX(round) FROM races WHERE year = 1999);"]}, {"question_id": 886, "answer_sql": ["SELECT MAX(year) as Max_Year FROM seasons;"]}, {"question_id": 887, "answer_sql": ["SELECT races.name FROM races WHERE races.year = 2017 AND NOT EXISTS ( SELECT 1 FROM seasons WHERE seasons.year = 2000 );", "SELECT r.name FROM races r WHERE r.year = 2017 AND NOT EXISTS (SELECT 1 FROM seasons s WHERE s.year = 2000 AND r.year = s.year);"]}, {"question_id": 888, "answer_sql": ["SELECT circuits.name, circuits.location, circuits.country FROM circuits WHERE circuits.circuitId = (SELECT MIN(circuits.circuitId) FROM circuits WHERE circuits.country = 'Europe');"]}, {"question_id": 889, "answer_sql": ["SELECT MAX(year) as last_f1_season FROM seasons WHERE url LIKE '%British Grand Prix%';"]}, {"question_id": 890, "answer_sql": ["SELECT COUNT(*) FROM seasons WHERE url LIKE '%British%';"]}, {"question_id": 891, "answer_sql": ["SELECT D.forename, D.surname, DR.position, DR.positionText, DR.points, DR.wins FROM drivers D JOIN driverStandings DR ON D.driverId = DR.driverId WHERE DR.raceId = (SELECT raceId FROM races WHERE year = 2010 ORDER BY round DESC LIMIT 1) ORDER BY DR.position;", "SELECT D.forename, D.surname, DR.position, DR.positionText, DR.points, DR.wins FROM drivers D JOIN driverStandings DR ON D.driverId = DR.driverId WHERE DR.raceId IN (SELECT raceId FROM races WHERE year = 2010) ORDER BY DR.position ASC;"]}, {"question_id": 892, "answer_sql": ["SELECT forename, surname FROM drivers WHERE driverId = (SELECT driverId FROM results WHERE points = (SELECT MAX(points) FROM results));"]}, {"question_id": 893, "answer_sql": ["SELECT drivers.forename, drivers.surname, results.points FROM drivers JOIN results ON drivers.driverId = results.driverId JOIN races ON results.raceId = races.raceId WHERE races.name = 'Chinese Grand Prix' AND races.year = 2017 ORDER BY results.points DESC LIMIT 3;"]}, {"question_id": 894, "answer_sql": ["SELECT MIN(time) as best_lap_time FROM lapTimes;"]}, {"question_id": 895, "answer_sql": ["SELECT AVG(time) FROM lapTimes WHERE driverId = (SELECT driverId FROM drivers WHERE driverRef = 'Sebastian Vettel') AND raceId = (SELECT raceId FROM races WHERE name = 'Chinese Grand Prix' AND year = 2009);"]}, {"question_id": 896, "answer_sql": []}, {"question_id": 897, "answer_sql": []}, {"question_id": 898, "answer_sql": ["SELECT forename, surname FROM drivers WHERE nationality = 'Japanese' AND dob = (SELECT MIN(dob) FROM drivers WHERE nationality = 'Japanese');"]}, {"question_id": 899, "answer_sql": ["SELECT circuits.circuitId, circuits.name, circuits.url FROM circuits JOIN races ON circuits.circuitId = races.circuitId JOIN seasons ON races.year = seasons.year WHERE seasons.year BETWEEN 1990 AND 2000 GROUP BY circuits.circuitId HAVING COUNT(races.raceId) = 4;", "SELECT circuits.circuitId, circuits.name, circuits.country, circuits.lat, circuits.lng, circuits.alt, circuits.url FROM circuits JOIN races ON circuits.circuitId = races.circuitId WHERE races.year BETWEEN 1990 AND 2000 GROUP BY circuits.circuitId HAVING COUNT(races.raceId) = 4;"]}, {"question_id": 900, "answer_sql": ["SELECT circuits.name, circuits.location, races.name FROM circuits JOIN races ON circuits.circuitId = races.circuitId WHERE races.year = 2006 AND circuits.country = 'USA';"]}, {"question_id": 901, "answer_sql": ["SELECT r.name AS race_name, c.name AS circuit_name, c.location AS circuit_location FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE r.date = '2005-09-01'"]}, {"question_id": 902, "answer_sql": ["SELECT r.raceId, r.name FROM races r JOIN results res ON r.raceId = res.raceId JOIN drivers d ON res.driverId = d.driverId WHERE d.forename = 'Alex' AND d.surname = 'Yoong' AND res.position < 10;", "SELECT r.raceId, r.name, r.date FROM races r JOIN results res ON r.raceId = res.raceId JOIN drivers dr ON res.driverId = dr.driverId WHERE dr.forename = 'Alex' AND dr.surname = 'Yoong' AND res.position < 10;"]}, {"question_id": 903, "answer_sql": ["SELECT COUNT(*) FROM constructorStandings WHERE constructorId = (SELECT constructorId FROM constructors WHERE name = 'Michael Schumacher') AND position = 1;"]}, {"question_id": 904, "answer_sql": ["SELECT races.name, seasons.year FROM races JOIN seasons ON races.year = seasons.year JOIN drivers ON races.circuitId = drivers.driverId WHERE drivers.forename = 'Michael' AND drivers.surname = 'Schumacher' ORDER BY races.name ASC, seasons.year ASC LIMIT 1;", "SELECT races.name, seasons.year FROM races JOIN seasons ON races.year = seasons.year JOIN drivers ON races.raceId = drivers.driverId WHERE drivers.forename = 'Michael' AND drivers.surname = 'Schumacher' ORDER BY races.name ASC, seasons.year ASC LIMIT 1;", "SELECT races.name, seasons.year FROM races JOIN seasons ON races.year = seasons.year JOIN drivers ON races.raceId = drivers.driverId JOIN constructorResults ON races.raceId = constructorResults.raceId JOIN constructors ON constructorResults.constructorId = constructors.constructorId WHERE drivers.forename = 'Michael' AND drivers.surname = 'Schumacher' ORDER BY races.name ASC, seasons.year ASC;", "SELECT races.name, seasons.year FROM races JOIN seasons ON races.year = seasons.year JOIN drivers ON races.circuitId = drivers.driverId WHERE drivers.forename = 'Michael' AND drivers.surname = 'Schumacher' ORDER BY races.name ASC, seasons.year ASC;", "SELECT races.name, seasons.year FROM races JOIN seasons ON races.year = seasons.year JOIN drivers ON races.circuitId = drivers.driverId JOIN constructorResults ON races.raceId = constructorResults.raceId JOIN constructors ON constructorResults.constructorId = constructors.constructorId WHERE drivers.forename = 'Michael' AND drivers.surname = 'Schumacher' ORDER BY races.name ASC, seasons.year ASC;"]}, {"question_id": 905, "answer_sql": ["SELECT AVG(points) FROM constructorStandings WHERE raceId = (SELECT raceId FROM seasons WHERE year = 2000) AND constructorId = (SELECT constructorId FROM constructors WHERE name = 'Eddie Irvine');"]}, {"question_id": 906, "answer_sql": ["SELECT name, points FROM races JOIN driverStandings ON races.raceId = driverStandings.raceId JOIN drivers ON driverStandings.driverId = drivers.driverId WHERE drivers.driverRef = 'Lewis Hamilton' ORDER BY races.year ASC LIMIT 1;"]}, {"question_id": 907, "answer_sql": ["SELECT races.name, circuits.country FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.year = 2017 ORDER BY races.date;", "SELECT r.raceId, r.name, r.date, c.country FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE r.year = 2017 ORDER BY r.date;", "SELECT R.raceId, R.name, C.country FROM races R JOIN circuits C ON R.circuitId = C.circuitId WHERE R.year = 2017 ORDER BY R.date;"]}, {"question_id": 908, "answer_sql": ["SELECT MAX(laps) as Most_Laps, races.name as Race_Name, seasons.year as Year, circuits.location as Circuit_Location FROM results JOIN races ON results.raceId = races.raceId JOIN seasons ON races.year = seasons.year JOIN circuits ON races.circuitId = circuits.circuitId GROUP BY races.name, seasons.year, circuits.location ORDER BY Most_Laps DESC LIMIT 1;", "SELECT MAX(laps) as Most_Laps, races.name as Race_Name, seasons.year as Year, circuits.location as Circuit_Location FROM results JOIN races ON results.raceId = races.raceId JOIN seasons ON races.year = seasons.year JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.name = 'The Red Bull World Championship'"]}, {"question_id": 909, "answer_sql": []}, {"question_id": 910, "answer_sql": ["SELECT lat, lng FROM circuits WHERE circuitRef = 'Silverstone';"]}, {"question_id": 911, "answer_sql": ["SELECT name FROM circuits WHERE lat = (SELECT MAX(lat) FROM circuits);"]}, {"question_id": 912, "answer_sql": ["SELECT circuits.circuitRef FROM circuits WHERE circuits.name = 'Marina Bay Street Circuit';"]}, {"question_id": 913, "answer_sql": ["SELECT name, country, alt FROM circuits WHERE alt = (SELECT MAX(alt) FROM circuits);", "SELECT name, country, max(alt) as highest_altitude FROM circuits"]}, {"question_id": 914, "answer_sql": ["SELECT COUNT(*) FROM drivers WHERE code IS NULL;"]}, {"question_id": 915, "answer_sql": ["SELECT MIN(dob) FROM drivers;"]}, {"question_id": 916, "answer_sql": ["SELECT surname FROM drivers WHERE nationality = 'italian';"]}, {"question_id": 917, "answer_sql": ["SELECT url FROM drivers WHERE driverRef = 'Anthony Davidson';"]}, {"question_id": 918, "answer_sql": ["SELECT drivers.driverRef FROM drivers WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';"]}, {"question_id": 919, "answer_sql": ["SELECT name FROM circuits WHERE circuitId = (SELECT circuitId FROM races WHERE year = 2009 AND round = 1);", "SELECT circuits.circuitRef FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.year = 2009 AND races.name = 'Spanish Grand Prix';", "SELECT circuits.circuitRef FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.year = 2009;", "SELECT circuits.circuitRef, circuits.name, circuits.country, circuits.lat, circuits.lng, circuits.alt, circuits.url FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.year = 2009;", "SELECT circuits.name FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.year = 2009;"]}, {"question_id": 920, "answer_sql": ["SELECT DISTINCT year FROM races WHERE circuitId = (SELECT circuitId FROM circuits WHERE name = 'Silverstone');"]}, {"question_id": 921, "answer_sql": ["SELECT * FROM races WHERE url = 'more information refers to url' AND circuitId IN (SELECT circuitId FROM circuits WHERE name = 'Silverstone');"]}, {"question_id": 922, "answer_sql": ["SELECT date FROM races WHERE year = 2010 AND circuitId = (SELECT circuitId FROM circuits WHERE name = 'Abu Dhabi')"]}, {"question_id": 923, "answer_sql": []}, {"question_id": 924, "answer_sql": ["SELECT DISTINCT races.date FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.name = 'Barcelona-Catalunya';"]}, {"question_id": 925, "answer_sql": ["SELECT url FROM circuits WHERE name = 'Circuit of the Year 2009';"]}, {"question_id": 926, "answer_sql": ["SELECT MIN(fastestLapTime) as fastest_lap_time FROM results WHERE driverId = (SELECT driverId FROM drivers WHERE surname = 'Hamilton') AND statusId = (SELECT statusId FROM status WHERE status = 'Finished')", "SELECT MIN(fastestLapTime) as fastest_lap_time FROM results WHERE driverId = (SELECT driverId FROM drivers WHERE surname = 'Hamilton') AND statusId = (SELECT statusId FROM status WHERE status = 'Complete');"]}, {"question_id": 927, "answer_sql": ["SELECT drivers.forename, drivers.surname FROM drivers JOIN (SELECT raceId, driverId, MIN(milliseconds) as fastest_lap_time FROM lapTimes GROUP BY raceId, driverId) as fastest_lap_times ON drivers.driverId = fastest_lap_times.driverId WHERE fastest_lap_times.fastest_lap_time = (SELECT MIN(milliseconds) FROM lapTimes) AND drivers.forename = 'Nico' AND drivers.surname = 'Rosberg';", "SELECT drivers.forename, drivers.surname FROM drivers JOIN (SELECT raceId, driverId, MIN(milliseconds) as fastest_lap_time FROM lapTimes GROUP BY raceId, driverId) as fastest_lap_times ON drivers.driverId = fastest_lap_times.driverId WHERE fastest_lap_times.fastest_lap_time = (SELECT MIN(milliseconds) FROM lapTimes) LIMIT 1;"]}, {"question_id": 928, "answer_sql": ["SELECT drivers.surname FROM drivers JOIN results ON drivers.driverId = results.driverId WHERE results.raceId = (SELECT raceId FROM races WHERE name = 'Australian Grand Prix' AND year = 2008) AND results.statusId = (SELECT statusId FROM status WHERE status = '1st');", "SELECT drivers.surname FROM drivers JOIN results ON drivers.driverId = results.driverId WHERE results.raceId IN ( SELECT races.raceId FROM races WHERE races.name = 'Australian Grand Prix' AND races.year = 2008 ) AND results.statusId = ( SELECT status.statusId FROM status WHERE status.status = 'Finished' ) ORDER BY results.position LIMIT 1;"]}, {"question_id": 929, "answer_sql": []}, {"question_id": 930, "answer_sql": ["SELECT MIN(r.raceId) as raceId FROM results r JOIN drivers d ON r.driverId = d.driverId WHERE d.surname = 'Hamilton' AND r.statusId = (SELECT statusId FROM status WHERE status = 'Race cancelled');", "SELECT MIN(position) as Highest_Position FROM results WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton');"]}, {"question_id": 931, "answer_sql": ["SELECT MAX(fastestLapSpeed) as fastest_lap_speed FROM results WHERE raceId = (SELECT raceId FROM races WHERE name = 'Spanish Grand Prix' AND year = 2009);"]}, {"question_id": 932, "answer_sql": []}, {"question_id": 933, "answer_sql": ["SELECT positionOrder FROM results WHERE driverId = (SELECT driverId FROM drivers WHERE surname = 'Hamilton') AND raceId = (SELECT raceId FROM races WHERE year = 2008 AND round = 1);", "SELECT positionOrder FROM results WHERE driverId = (SELECT driverId FROM drivers WHERE driverRef = 'Lewis Hamilton') AND raceId = (SELECT raceId FROM races WHERE name = 'Australian Grand Prix' AND year = 2008);", "SELECT positionOrder FROM results WHERE driverId = (SELECT driverId FROM drivers WHERE surname = 'Hamilton') AND raceId = (SELECT MAX(raceId) FROM races WHERE year = 2008);"]}, {"question_id": 934, "answer_sql": ["SELECT forename, surname FROM drivers WHERE number = 4 AND driverRef = 'a1';"]}, {"question_id": 935, "answer_sql": ["SELECT COUNT(*) FROM results WHERE raceId = (SELECT raceId FROM races WHERE name = 'Australian Grand Prix' AND year = 2008);", "SELECT COUNT(*) FROM results WHERE time IS NOT NULL;"]}, {"question_id": 936, "answer_sql": ["SELECT fastestLapTime FROM results WHERE driverId = (SELECT driverId FROM drivers WHERE surname = 'Hamilton') AND raceId = (SELECT raceId FROM races WHERE name = 'Australian Grand Prix' AND year = 2008);"]}, {"question_id": 937, "answer_sql": ["SELECT time FROM results WHERE raceId = (SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix') AND driverId = (SELECT driverId FROM drivers WHERE surname = 'Second');"]}, {"question_id": 938, "answer_sql": ["SELECT constructors.name FROM constructors JOIN constructorStandings ON constructors.constructorId = constructorStandings.constructorId WHERE constructorStandings.raceId IN (SELECT races.raceId FROM races WHERE races.year = 2008 AND races.circuitId = (SELECT circuits.circuitId FROM circuits WHERE circuits.country = 'Australia'));"]}, {"question_id": 939, "answer_sql": ["SELECT COUNT(*) FROM drivers WHERE nationality = 'American' AND driverRef = 'US1';"]}, {"question_id": 940, "answer_sql": ["SELECT COUNT(*) FROM drivers WHERE driverId IN (SELECT driverId FROM results WHERE raceId IN (SELECT raceId FROM races WHERE year = 2008 AND round = 1 AND circuitId IN (SELECT circuitId FROM circuits WHERE name = 'Australian Grand Prix')));"]}, {"question_id": 941, "answer_sql": ["SELECT SUM(points) as total_points FROM constructorStandings WHERE constructorId = (SELECT constructorId FROM drivers WHERE driverRef = 'Lewis Hamilton');"]}, {"question_id": 942, "answer_sql": ["SELECT AVG(CAST(fastestLapTime AS REAL)) AS average_fastest_lap_time FROM results WHERE driverId = (SELECT driverId FROM drivers WHERE surname = 'Hamilton') AND statusId = (SELECT statusId FROM status WHERE status = 'Finished')", "SELECT AVG(CAST(fastestLapTime AS REAL)) as average_fastest_lap_time FROM results WHERE driverId = (SELECT driverId FROM drivers WHERE driverRef = 'Hamilton');"]}, {"question_id": 943, "answer_sql": ["SELECT COUNT(raceId) as total_races FROM races WHERE time IS NOT NULL;", "SELECT COUNT(*) as rate FROM races r JOIN driverStandings ds ON r.raceId = ds.raceId JOIN drivers d ON ds.driverId = d.driverId WHERE r.year = 2008 AND d.surname = 'Australian';", "SELECT COUNT(*) as rate FROM races r JOIN driverStandings ds ON r.raceId = ds.raceId JOIN drivers d ON ds.driverId = d.driverId WHERE r.year = 2008 AND r.time IS NOT NULL;"]}, {"question_id": 944, "answer_sql": ["SELECT (SUM(results.points) - MAX(results.points)) / MAX(results.points) * 100 AS percentage_faster FROM results WHERE results.raceId = (SELECT MAX(raceId) FROM races WHERE year = 2008);", "SELECT (SUBSTR(results.time, 1, 8) - SUBSTR(champion_results.time, 1, 8)) * 100 / SUBSTR(champion_results.time, 1, 8) AS percentage_faster FROM (SELECT MAX(position) AS max_position, driverId FROM results WHERE raceId = (SELECT MAX(year) FROM races) GROUP BY driverId) AS last_driver JOIN results ON results.driverId = last_driver.driverId AND results.position = last_driver.max_position JOIN (SELECT MAX(points) AS max_points, constructorId FROM constructorStandings WHERE raceId = (SELECT MAX(year) FROM races) GROUP BY constructorId) AS champion_constructor JOIN constructors ON constructors.constructorId = champion_constructor.constructorId JOIN results AS champion_results ON results.constructorId = champion_constructor.constructorId WHERE results.raceId = (SELECT MAX(year) FROM races)"]}, {"question_id": 945, "answer_sql": ["SELECT COUNT(*) FROM circuits WHERE location = 'Melbourne' AND country = 'Australia';"]}, {"question_id": 946, "answer_sql": ["SELECT circuits.location, circuits.lat, circuits.lng FROM circuits WHERE circuits.country = 'USA';"]}, {"question_id": 947, "answer_sql": ["SELECT COUNT(*) FROM drivers WHERE dob > '1980-01-01';"]}, {"question_id": 948, "answer_sql": ["SELECT AVG(points) FROM constructorStandings WHERE constructorId IN (SELECT constructorId FROM constructors WHERE nationality = 'British');"]}, {"question_id": 949, "answer_sql": ["SELECT constructors.name FROM constructors JOIN constructorStandings ON constructors.constructorId = constructorStandings.constructorId WHERE constructorStandings.points = ( SELECT MAX(constructorStandings.points) FROM constructorStandings );", "SELECT constructors.name, SUM(constructorResults.points) as total_points FROM constructors JOIN constructorResults ON constructors.constructorId = constructorResults.constructorId GROUP BY constructors.name ORDER BY total_points DESC LIMIT 1;"]}, {"question_id": 950, "answer_sql": ["SELECT constructors.name FROM constructors JOIN constructorStandings ON constructors.constructorId = constructorStandings.constructorId WHERE constructorStandings.raceId = 291 AND constructorStandings.points = 0;", "SELECT constructors.name FROM constructors JOIN constructorStandings ON constructors.constructorId = constructorStandings.constructorId WHERE constructorStandings.raceId = 18 AND constructorStandings.points = 0;"]}, {"question_id": 951, "answer_sql": ["SELECT COUNT(constructorId) FROM constructorStandings WHERE raceId IN ( SELECT raceId FROM races WHERE year = 2019 ) AND points = 0;"]}, {"question_id": 952, "answer_sql": ["SELECT constructors.name FROM constructors JOIN constructorStandings ON constructors.constructorId = constructorStandings.constructorId WHERE constructorStandings.position = 1 AND constructorStandings.wins > 0 ORDER BY constructors.name;", "SELECT constructors.name FROM constructors JOIN constructorStandings ON constructors.constructorId = constructorStandings.constructorId WHERE constructorStandings.position = 1;", "SELECT constructors.name FROM constructors JOIN constructorStandings ON constructors.constructorId = constructorStandings.constructorId WHERE constructorStandings.position = 1 ORDER BY constructors.name;"]}, {"question_id": 953, "answer_sql": ["SELECT COUNT(*) FROM constructors WHERE constructorId IN (SELECT constructorId FROM qualifying WHERE number > 50);", "SELECT COUNT(*) FROM drivers JOIN lapTimes ON drivers.driverId = lapTimes.driverId WHERE drivers.nationality = 'France' AND lapTimes.lap > 50;", "SELECT COUNT(*) FROM constructors WHERE constructorId IN ( SELECT constructorId FROM lapTimes WHERE lap > 50 );"]}, {"question_id": 954, "answer_sql": []}, {"question_id": 955, "answer_sql": ["SELECT s.year, AVG(r.time) as average_time FROM seasons s JOIN races r ON s.year = r.year WHERE r.time IS NOT NULL GROUP BY s.year;"]}, {"question_id": 956, "answer_sql": []}, {"question_id": 957, "answer_sql": ["SELECT COUNT(*) FROM drivers WHERE driverId NOT IN (SELECT driverId FROM results WHERE time IS NULL);"]}, {"question_id": 958, "answer_sql": ["SELECT D.forename, D.surname FROM drivers D JOIN lapTimes LT ON D.driverId = LT.driverId WHERE LT.milliseconds = (SELECT MIN(milliseconds) FROM lapTimes) LIMIT 1;", "SELECT drivers.forename, drivers.surname FROM drivers JOIN (SELECT raceId, driverId, MIN(milliseconds) as fastest_lap_time FROM lapTimes GROUP BY raceId, driverId) as fastest_lap_times ON drivers.driverId = fastest_lap_times.driverId WHERE fastest_lap_times.fastest_lap_time = (SELECT MIN(milliseconds) FROM lapTimes) AND drivers.forename = 'Nico' AND drivers.surname = 'Rosberg';"]}, {"question_id": 959, "answer_sql": ["SELECT fastestLap FROM results WHERE raceId = (SELECT raceId FROM races WHERE year = 2009) AND constructorId = (SELECT constructorId FROM constructors WHERE name = 'Champion');"]}, {"question_id": 960, "answer_sql": []}, {"question_id": 961, "answer_sql": []}, {"question_id": 962, "answer_sql": ["SELECT COUNT(r.resultId) * 100 / (SELECT COUNT(*) FROM drivers WHERE dob < '1985-01-01') AS percentage FROM results r JOIN races r2 ON r.raceId = r2.raceId JOIN drivers d ON r.driverId = d.driverId JOIN seasons s ON r2.year = s.year JOIN status st ON r.statusId = st.statusId WHERE d.dob < '1985-01-01' AND r2.year BETWEEN 2000 AND 2005 AND r.laps > 50 AND st.status = 'P';"]}, {"question_id": 963, "answer_sql": ["SELECT COUNT(*) FROM drivers JOIN lapTimes ON drivers.driverId = lapTimes.driverId WHERE lapTimes.time < '02:00.00' AND drivers.nationality = 'French';"]}, {"question_id": 964, "answer_sql": ["SELECT drivers.driverRef, drivers.forename, drivers.surname FROM drivers WHERE drivers.nationality = 'America';"]}, {"question_id": 965, "answer_sql": ["SELECT raceId FROM races WHERE year = 2009;"]}, {"question_id": 966, "answer_sql": ["SELECT COUNT(*) FROM races WHERE raceId = 18;"]}, {"question_id": 967, "answer_sql": ["SELECT c.country, COUNT(*) as 'Netherlandic drivers' FROM drivers d JOIN seasons s ON d.dob >= s.year JOIN circuits c ON s.url = c.url WHERE c.country = 'Netherlands' GROUP BY c.country ORDER BY c.country;"]}, {"question_id": 968, "answer_sql": ["SELECT drivers.driverRef FROM drivers WHERE drivers.forename = 'Robert' AND drivers.surname = 'Kubica';"]}, {"question_id": 969, "answer_sql": []}, {"question_id": 970, "answer_sql": ["SELECT DISTINCT drivers.forename, drivers.surname, MIN(lapTimes.time) as earliest_lap_time FROM drivers JOIN lapTimes ON drivers.driverId = lapTimes.driverId WHERE drivers.nationality = 'Germany' AND drivers.dob BETWEEN '1980-01-01' AND '1990-12-31' GROUP BY drivers.driverId ORDER BY earliest_lap_time ASC LIMIT 3;"]}, {"question_id": 971, "answer_sql": []}, {"question_id": 972, "answer_sql": []}, {"question_id": 973, "answer_sql": ["SELECT drivers.forename, drivers.surname, MAX(lapTimes.time) as fastest_lap_time FROM drivers JOIN lapTimes ON drivers.driverId = lapTimes.driverId WHERE drivers.dob < '1982-01-01' AND drivers.nationality = 'Spanish' GROUP BY drivers.driverId ORDER BY fastest_lap_time ASC LIMIT 10;", "SELECT drivers.forename, drivers.surname, MAX(lapTimes.time) as latest_lap_time FROM drivers JOIN lapTimes ON drivers.driverId = lapTimes.driverId WHERE drivers.dob < '1982-01-01' AND drivers.nationality = 'Spain' GROUP BY drivers.driverId ORDER BY latest_lap_time ASC LIMIT 10;"]}, {"question_id": 974, "answer_sql": []}, {"question_id": 975, "answer_sql": []}, {"question_id": 976, "answer_sql": ["SELECT drivers.driverId FROM drivers JOIN lapTimes ON drivers.driverId = lapTimes.driverId WHERE lapTimes.time = ( SELECT MIN(time) FROM lapTimes WHERE lapTimes.lap = 1 ) ORDER BY lapTimes.time ASC LIMIT 5;"]}, {"question_id": 977, "answer_sql": ["SELECT COUNT(*) FROM results WHERE statusId = 2 AND laps != 0;", "SELECT COUNT(*) FROM results JOIN status ON results.statusId = status.statusId WHERE status.status = 'disqualified' AND results.raceId BETWEEN 51 AND 100;", "SELECT COUNT(*) FROM results WHERE statusId = 2 AND raceId BETWEEN 51 AND 100;"]}, {"question_id": 978, "answer_sql": ["SELECT COUNT(*), circuits.circuitId, circuits.name, circuits.location, circuits.lat, circuits.lng FROM circuits WHERE circuits.country = 'Austria' GROUP BY circuits.circuitId, circuits.name, circuits.location, circuits.lat, circuits.lng;", "SELECT COUNT(*) as total_circuits, circuits.circuitId, circuits.name, circuits.location, circuits.lat, circuits.lng, circuits.alt, circuits.url FROM circuits WHERE circuits.location = 'Austria' GROUP BY circuits.circuitId, circuits.name, circuits.location, circuits.lat, circuits.lng, circuits.alt, circuits.url;", "SELECT COUNT(*) as total_circuits, circuits.name, circuits.location, circuits.lat, circuits.lng FROM circuits WHERE circuits.country = 'Austria' GROUP BY circuits.circuitId ORDER BY total_circuits DESC;", "SELECT COUNT(*), circuits.location, circuits.lat, circuits.lng FROM circuits WHERE circuits.country = 'Austria' GROUP BY circuits.circuitId;", "SELECT COUNT(*) as total_circuits, circuits.name, circuits.location, circuits.lat, circuits.lng FROM circuits WHERE circuits.country = 'Austria' GROUP BY circuits.name, circuits.location, circuits.lat, circuits.lng;", "SELECT COUNT(*), circuits.circuitId, circuits.name, circuits.location, circuits.lat, circuits.lng, circuits.alt, circuits.url FROM circuits WHERE circuits.country = 'Austria' GROUP BY circuits.circuitId, circuits.name, circuits.location, circuits.lat, circuits.lng, circuits.alt, circuits.url;", "SELECT COUNT(*), circuits.circuitRef, circuits.name, circuits.location, circuits.country, circuits.lat, circuits.lng, circuits.alt, circuits.url FROM circuits WHERE circuits.country = 'Austria' GROUP BY circuits.circuitRef, circuits.name, circuits.location, circuits.country, circuits.lat, circuits.lng, circuits.alt, circuits.url;"]}, {"question_id": 979, "answer_sql": ["SELECT MAX(laps) as Max_Laps FROM results WHERE time IS NOT NULL;", "SELECT MAX(laps) as most_laps, raceId FROM results WHERE time IS NOT NULL GROUP BY raceId ORDER BY most_laps DESC LIMIT 1;", "SELECT MAX(number) as race_number FROM qualifying WHERE q1 IS NOT NULL;"]}, {"question_id": 980, "answer_sql": ["SELECT drivers.driverRef, drivers.nationality, drivers.dob FROM drivers JOIN qualifying ON drivers.driverId = qualifying.driverId WHERE qualifying.q2 IS NOT NULL AND qualifying.raceId = 23;"]}, {"question_id": 981, "answer_sql": ["SELECT races.year, races.name, races.date, races.time FROM seasons JOIN races ON seasons.year = races.year JOIN drivers ON races.circuitId = drivers.driverId WHERE drivers.dob = (SELECT MIN(dob) FROM drivers) AND races.round = 1;"]}, {"question_id": 982, "answer_sql": ["SELECT COUNT(*) FROM results WHERE statusId = 2;"]}, {"question_id": 983, "answer_sql": ["SELECT c.name, c.url FROM constructors c WHERE c.nationality = 'Italian' AND c.constructorId = (SELECT MAX(constructorStandings.points) FROM constructorStandings WHERE constructorStandings.constructorId = c.constructorId);"]}, {"question_id": 984, "answer_sql": ["SELECT url FROM constructors WHERE constructorId = (SELECT MAX(constructorId) FROM constructorStandings WHERE wins = (SELECT MAX(wins) FROM constructorStandings));"]}, {"question_id": 985, "answer_sql": ["SELECT drivers.forename, drivers.surname, results.time FROM drivers JOIN results ON drivers.driverId = results.driverId WHERE results.raceId IN (SELECT races.raceId FROM races WHERE races.name = 'French Grand Prix') AND results.position = 3 ORDER BY results.time ASC;", "SELECT drivers.forename, drivers.surname, drivers.dob, results.time FROM drivers JOIN results ON drivers.driverId = results.driverId WHERE results.raceId IN (SELECT races.raceId FROM races WHERE races.name = 'French Grand Prix') AND results.position = 3 ORDER BY results.time ASC;"]}, {"question_id": 986, "answer_sql": ["SELECT MIN(time) as fastest_lap_time FROM lapTimes WHERE position = 1;", "SELECT MIN(time) * 1000 as fastest_lap_time FROM lapTimes WHERE position = 1;", "SELECT races.name, lapTimes.time, lapTimes.milliseconds FROM races JOIN lapTimes ON races.raceId = lapTimes.raceId WHERE lapTimes.position = 1 ORDER BY lapTimes.milliseconds ASC LIMIT 1;"]}, {"question_id": 987, "answer_sql": ["SELECT AVG(fastestLapTime) as average_fastest_lap_time FROM (SELECT fastestLapTime, driverId FROM results WHERE raceId IN (SELECT raceId FROM races WHERE year = 2006 AND statusId = (SELECT statusId FROM status WHERE status = 'Grand Prix')) ORDER BY fastestLapTime ASC LIMIT 10) as top_10_drivers;"]}, {"question_id": 988, "answer_sql": ["SELECT drivers.forename, drivers.surname, AVG(pitStops.duration) as average_duration FROM drivers JOIN (SELECT raceId, driverId, AVG(time) as duration FROM pitStops WHERE time IS NOT NULL GROUP BY raceId, driverId) as pitStops ON drivers.driverId = pitStops.driverId WHERE drivers.nationality = 'Germany' AND drivers.dob BETWEEN '1980-01-01' AND '1985-12-31' GROUP BY drivers.forename, drivers.surname ORDER BY average_duration ASC LIMIT 5;"]}, {"question_id": 989, "answer_sql": ["SELECT drivers.surname, results.time FROM drivers JOIN results ON drivers.driverId = results.driverId WHERE results.raceId IN (SELECT races.raceId FROM races WHERE races.name = 'Canadian Grand Prix' AND races.year = 2008) AND results.statusId = (SELECT status.statusId FROM status WHERE status.status = 'Champion') ORDER BY results.time;"]}, {"question_id": 990, "answer_sql": ["SELECT constructors.constructorRef, constructors.url FROM constructors JOIN constructorStandings ON constructors.constructorId = constructorStandings.constructorId WHERE constructorStandings.raceId IN (SELECT raceId FROM races WHERE year = 2009 AND name = 'Singapore Grand Prix') AND constructorStandings.position = 1;", "SELECT constructors.constructorRef, constructors.url FROM constructors JOIN constructorStandings ON constructors.constructorId = constructorStandings.constructorId WHERE constructorStandings.raceId IN ( SELECT races.raceId FROM races WHERE races.year = 2009 AND races.circuitId = ( SELECT circuits.circuitId FROM circuits WHERE circuits.name = 'Singapore' ) ) AND constructorStandings.position = 1;", "SELECT constructors.constructorRef, constructors.url FROM constructors JOIN constructorStandings ON constructors.constructorId = constructorStandings.constructorId WHERE constructorStandings.raceId = (SELECT MAX(raceId) FROM races WHERE year = 2009) AND constructors.constructorId = (SELECT constructorId FROM results WHERE raceId = (SELECT MAX(raceId) FROM races WHERE year = 2009) AND position = 1);"]}, {"question_id": 991, "answer_sql": ["SELECT drivers.forename, drivers.surname, drivers.dob FROM drivers WHERE drivers.nationality = 'Austrian' AND drivers.dob BETWEEN '1981-01-01' AND '1991-12-31';"]}, {"question_id": 992, "answer_sql": ["SELECT CONCAT(forename, ' ', surname) AS fullName, CONCAT('https://en.wikipedia.org/wiki/', CONCAT(forename, '_', surname)) AS wikiPageLink, dob AS dateOfBirth FROM drivers WHERE nationality = 'German' AND dob BETWEEN '1971-01-01' AND '1985-12-31' ORDER BY dob DESC;", "SELECT CONCAT(forename, ' ', surname) AS fullName, url AS wikiPediaPageLink, dob AS dateOfBirth FROM drivers WHERE nationality = 'German' AND dob BETWEEN '1971-01-01' AND '1985-12-31' ORDER BY dob DESC;", "SELECT CONCAT(forename, ' ', surname) AS full_name, CONCAT('https://en.wikipedia.org/wiki/', REPLACE(SUBSTR(forename, 1, 1), ' ', '_')) AS wiki_link, dob AS date_of_birth FROM drivers WHERE nationality = 'German' AND dob BETWEEN '1971-01-01' AND '1985-12-31' ORDER BY dob DESC;"]}, {"question_id": 993, "answer_sql": ["SELECT name, location, country, lat, lng FROM circuits WHERE circuitRef = 'Hungaroring';"]}, {"question_id": 994, "answer_sql": ["SELECT constructors.name, MAX(constructorResults.points) as max_points, constructors.nationality FROM constructors JOIN constructorResults ON constructors.constructorId = constructorResults.constructorId JOIN races ON races.raceId = constructorResults.raceId WHERE races.name = 'Monaco Grand Prix' AND races.year BETWEEN 1980 AND 2010 GROUP BY constructors.constructorId, constructors.name, constructors.nationality ORDER BY max_points DESC;", "SELECT constructors.name, MAX(constructorResults.points) as max_points, constructors.nationality FROM constructors JOIN constructorResults ON constructors.constructorId = constructorResults.constructorId JOIN races ON races.raceId = constructorResults.raceId WHERE races.name = 'Monaco Grand Prix' AND races.year BETWEEN 1980 AND 2010 GROUP BY constructors.constructorId ORDER BY max_points DESC LIMIT 1;"]}, {"question_id": 995, "answer_sql": []}, {"question_id": 996, "answer_sql": ["SELECT AVG(year) as average_number_of_races FROM seasons WHERE year BETWEEN 2000 AND 2010;"]}, {"question_id": 997, "answer_sql": ["SELECT MAX(nationality) as Most_Citizenship FROM drivers;", "SELECT nationality FROM drivers WHERE nationality = (SELECT MAX(nationality) FROM drivers);"]}, {"question_id": 998, "answer_sql": ["SELECT constructors.name FROM constructors JOIN constructorStandings ON constructors.constructorId = constructorStandings.constructorId WHERE constructorStandings.position = 91 AND constructors.constructorRef = 'RedBull' LIMIT 1;"]}, {"question_id": 999, "answer_sql": []}, {"question_id": 1000, "answer_sql": ["SELECT name, location, country FROM circuits WHERE circuitId = (SELECT MAX(circuitId) FROM races);", "SELECT name, location, country, lat, lng, alt, url FROM circuits WHERE circuitId = (SELECT MAX(circuitId) FROM races);"]}, {"question_id": 1001, "answer_sql": ["SELECT CONCAT(forename, ' ', surname) as full_name FROM drivers WHERE driverId = (SELECT driverId FROM qualifying WHERE raceId = (SELECT raceId FROM races WHERE year = 2008 AND round = 3 AND circuitId = (SELECT circuitId FROM circuits WHERE name = 'Marina Bay Street Circuit')));"]}, {"question_id": 1002, "answer_sql": []}, {"question_id": 1003, "answer_sql": ["SELECT drivers.surname, COUNT(status.statusId) as number_of_accidents FROM drivers JOIN results ON drivers.driverId = results.driverId JOIN status ON status.statusId = results.statusId WHERE status.status = 'Accident' GROUP BY drivers.surname ORDER BY number_of_accidents DESC LIMIT 1;", "SELECT drivers.surname, COUNT(status.statusId) as number_of_accidents FROM drivers JOIN results ON drivers.driverId = results.driverId JOIN status ON results.statusId = status.statusId WHERE status.status = 'accident' GROUP BY drivers.surname ORDER BY number_of_accidents DESC LIMIT 1;", "SELECT COUNT(*) FROM drivers JOIN (SELECT driverId FROM driverStandings WHERE position = 1) as highest_accidents ON drivers.driverId = highest_accidents.driverId WHERE drivers.nationality = 'Canadian';", "SELECT COUNT(*) as total_accidents FROM results WHERE statusId = 3 AND raceId IN (SELECT raceId FROM races WHERE name = 'Canadian Grand Prix');", "SELECT COUNT(*) FROM drivers WHERE number = (SELECT MAX(number) FROM drivers WHERE nationality = 'Canada') AND driverRef = (SELECT driverRef FROM drivers WHERE nationality = 'Canada') AND driverId = (SELECT driverId FROM drivers WHERE nationality = 'Canada');"]}, {"question_id": 1004, "answer_sql": ["SELECT d.forename, d.surname, COUNT(*) as wins FROM drivers d JOIN driverStandings ds ON d.driverId = ds.driverId WHERE d.dob = (SELECT MIN(dob) FROM drivers) GROUP BY d.forename, d.surname LIMIT 1;", "SELECT drivers.forename, drivers.surname, MIN(drivers.dob) as oldest_date, COUNT(results.wins) as total_wins FROM drivers LEFT JOIN (SELECT driverId, COUNT(CASE WHEN status.status = 'W' THEN 1 END) as wins FROM results LEFT JOIN status ON results.statusId = status.statusId GROUP BY driverId) as results ON drivers.driverId = results.driverId WHERE drivers.dob = (SELECT MIN(dob) FROM drivers) GROUP BY drivers.forename, drivers.surname LIMIT 1;"]}, {"question_id": 1005, "answer_sql": ["SELECT MAX(duration) as longest_time_at_pit_stop FROM pitStops;"]}, {"question_id": 1006, "answer_sql": []}, {"question_id": 1007, "answer_sql": ["SELECT MAX(duration) as longest_time FROM pitStops WHERE driverId = (SELECT driverId FROM drivers WHERE surname = 'Hamilton') AND raceId = (SELECT raceId FROM races WHERE name = 'Monaco');"]}, {"question_id": 1008, "answer_sql": ["SELECT lapTimes.time FROM lapTimes JOIN drivers ON lapTimes.driverId = drivers.driverId WHERE drivers.surname = 'Hamilton' AND lapTimes.raceId = 187 ORDER BY lapTimes.lap ASC LIMIT 1;", "SELECT lapTimes.time FROM lapTimes JOIN drivers ON lapTimes.driverId = drivers.driverId WHERE drivers.surname = 'Hamilton' AND lapTimes.raceId = 1;", "SELECT lapTimes.time FROM lapTimes JOIN drivers ON lapTimes.driverId = drivers.driverId WHERE drivers.surname = 'Hamilton' AND lapTimes.raceId = (SELECT raceId FROM races WHERE name = 'Australian Grand Prix' AND year = 2011);"]}, {"question_id": 1009, "answer_sql": ["SELECT d.forename, d.surname, p.raceId, p.driverId, p.stop, p.time, p.duration, p.milliseconds FROM drivers d JOIN pitStops p ON d.driverId = p.driverId WHERE p.raceId = (SELECT raceId FROM races WHERE year = 2011 AND round = 1) AND p.stop = (SELECT MIN(stop) FROM pitStops WHERE raceId = (SELECT raceId FROM races WHERE year = 2011 AND round = 1)) ORDER BY d.forename, d.surname;", "SELECT d.forename, d.surname, p.raceId, p.driverId, p.stop, p.time, p.milliseconds FROM drivers d JOIN pitStops p ON d.driverId = p.driverId WHERE p.raceId = (SELECT raceId FROM races WHERE year = 2011 AND round = 1) AND p.stop = (SELECT MIN(stop) FROM pitStops WHERE raceId = (SELECT raceId FROM races WHERE year = 2011 AND round = 1)) ORDER BY d.forename, d.surname;", "SELECT d.forename, d.surname, p.raceId, p.driverId, p.stop, p.time, p.milliseconds FROM drivers d JOIN pitStops p ON d.driverId = p.driverId WHERE p.raceId = (SELECT MAX(r.raceId) FROM races r WHERE r.year = 2011 AND r.round = 1) AND p.stop = (SELECT MIN(s.stop) FROM pitStops s WHERE s.raceId = (SELECT MAX(r.raceId) FROM races r WHERE r.year = 2011 AND r.round = 1)) AND p.time IS NOT NULL AND p.milliseconds IS NOT NULL;", "SELECT drivers.forename, drivers.surname, pitStops.time, pitStops.duration FROM drivers JOIN pitStops ON drivers.driverId = pitStops.driverId WHERE pitStops.raceId = (SELECT raceId FROM races WHERE name = 'Australian Grand Prix' AND year = 2011) AND pitStops.stop = (SELECT MIN(stop) FROM pitStops WHERE raceId = (SELECT raceId FROM races WHERE name = 'Australian Grand Prix' AND year = 2011));", "SELECT d.forename, d.surname, p.raceId, p.driverId, p.stop, p.time, p.milliseconds FROM drivers d JOIN pitStops p ON d.driverId = p.driverId WHERE p.raceId = (SELECT raceId FROM races WHERE year = 2011 AND name = 'Australian Grand Prix') ORDER BY p.raceId, p.stop;", "SELECT drivers.forename, drivers.surname, pitStops.time, pitStops.duration, pitStops.milliseconds FROM drivers JOIN pitStops ON drivers.driverId = pitStops.driverId WHERE pitStops.raceId = (SELECT raceId FROM races WHERE name = 'Australian Grand Prix' AND year = 2011) AND pitStops.stop = (SELECT MIN(stop) FROM pitStops WHERE raceId = (SELECT raceId FROM races WHERE name = 'Australian Grand Prix' AND year = 2011));"]}, {"question_id": 1010, "answer_sql": ["SELECT lapTimes.time, lapTimes.milliseconds FROM lapTimes JOIN drivers ON lapTimes.driverId = drivers.driverId WHERE drivers.surname = 'Hamilton' ORDER BY lapTimes.time ASC, lapTimes.milliseconds ASC LIMIT 1;"]}, {"question_id": 1011, "answer_sql": ["SELECT D.forename, D.surname FROM drivers D JOIN lapTimes LT ON D.driverId = LT.driverId WHERE LT.time = (SELECT MIN(time) FROM lapTimes) AND LT.milliseconds = (SELECT MIN(milliseconds) FROM lapTimes WHERE raceId = (SELECT MAX(raceId) FROM lapTimes));", "SELECT D.forename, D.surname FROM drivers D JOIN lapTimes LT ON D.driverId = LT.driverId WHERE LT.time = (SELECT MIN(time) FROM lapTimes) LIMIT 1;"]}, {"question_id": 1012, "answer_sql": []}, {"question_id": 1013, "answer_sql": ["SELECT lapTimes.time, drivers.surname FROM lapTimes JOIN drivers ON lapTimes.driverId = drivers.driverId WHERE lapTimes.raceId IN (SELECT races.raceId FROM races WHERE races.circuitId = (SELECT circuits.circuitId FROM circuits WHERE circuits.name = 'Austrian Grand Prix')) ORDER BY lapTimes.time ASC;"]}, {"question_id": 1014, "answer_sql": []}, {"question_id": 1015, "answer_sql": ["SELECT name, date FROM races WHERE circuitId = (SELECT circuitId FROM circuits WHERE name = 'Austrian Grand Prix') AND time = (SELECT MIN(time) FROM races WHERE circuitId = (SELECT circuitId FROM circuits WHERE name = 'Austrian Grand Prix'));"]}, {"question_id": 1016, "answer_sql": []}, {"question_id": 1017, "answer_sql": []}, {"question_id": 1018, "answer_sql": ["SELECT AVG(milliseconds) FROM pitStops WHERE driverId = (SELECT driverId FROM drivers WHERE surname = 'Hamilton');"]}, {"question_id": 1019, "answer_sql": []}, {"question_id": 1020, "answer_sql": ["SELECT player_api_id, overall_rating FROM Player_Attributes ORDER BY overall_rating DESC LIMIT 1;"]}, {"question_id": 1021, "answer_sql": ["SELECT MAX(height), player_name FROM Player;"]}, {"question_id": 1022, "answer_sql": []}, {"question_id": 1023, "answer_sql": ["SELECT COUNT(*) FROM Player_Attributes WHERE attacking_work_rate = 'low' AND defensive_work_rate != 'high';", "SELECT COUNT(*) FROM Player_Attributes WHERE attacking_work_rate = 'low';"]}, {"question_id": 1024, "answer_sql": ["SELECT player_api_id FROM Player_Attributes WHERE crossing = ( SELECT MAX(crossing) FROM Player_Attributes );", "SELECT player_api_id, MAX(crossing) as max_crossing FROM Player_Attributes GROUP BY player_api_id ORDER BY max_crossing DESC LIMIT 5;"]}, {"question_id": 1025, "answer_sql": ["SELECT `league_id`, COUNT(`id`) as `total_goals` FROM `Match` WHERE `season` = '2016' GROUP BY `league_id` ORDER BY `total_goals` DESC LIMIT 1;"]}, {"question_id": 1026, "answer_sql": ["SELECT Team.team_long_name, COUNT(*) as matches_lost FROM Team JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id JOIN Match ON Team_Attributes.team_fifa_api_id = Match.away_team_api_id WHERE Match.date BETWEEN '2015-01-01' AND '2016-12-31' GROUP BY Team.team_long_name ORDER BY matches_lost ASC LIMIT 1;"]}, {"question_id": 1027, "answer_sql": []}, {"question_id": 1028, "answer_sql": ["SELECT team_long_name FROM Team WHERE team_api_id = ( SELECT MAX(away_team_api_id) FROM Match WHERE season = '2010' AND country_id = ( SELECT country_id FROM League WHERE name = 'Scotland Premier League' ) );", "SELECT team_short_name FROM Team WHERE team_api_id = ( SELECT MAX(away_team_api_id) FROM Match WHERE season = '2010/2011' AND home_team_goal < away_team_goal )"]}, {"question_id": 1029, "answer_sql": ["SELECT MAX(buildUpPlaySpeed) FROM Team_Attributes;"]}, {"question_id": 1030, "answer_sql": ["SELECT `league_id`, `name` FROM `Match` JOIN `League` ON `Match`.`league_id` = `League`.`id` WHERE `season` = '2016' AND `stage` = 0 AND `home_team_goal` = `away_team_goal` GROUP BY `league_id` ORDER BY COUNT(*) DESC LIMIT 1;"]}, {"question_id": 1031, "answer_sql": ["SELECT Player.player_name, Player.birthday FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player_Attributes.sprint_speed >= 97 AND Player_Attributes.date BETWEEN '2013-01-01 00:00:00' AND '2015-12-31 00:00:00';", "SELECT Player.player_name, Player.birthday, Player.height FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player_Attributes.sprint_speed >= 97 AND Player_Attributes.date BETWEEN '2013-01-01 00:00:00' AND '2015-12-31 00:00:00';", "SELECT Player.player_name FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player_Attributes.sprint_speed >= 97 AND Player_Attributes.date BETWEEN '2013-01-01 00:00:00' AND '2015-12-31 00:00:00';"]}, {"question_id": 1032, "answer_sql": ["SELECT name, COUNT(*) as matches_played FROM League WHERE id = (SELECT MAX(id) FROM League);"]}, {"question_id": 1033, "answer_sql": ["SELECT AVG(height) FROM Player WHERE birthday >= '1990-01-01 00:00:00' AND birthday < '1996-01-01 00:00:00';"]}, {"question_id": 1034, "answer_sql": ["SELECT player_api_id FROM Player_Attributes WHERE overall_rating > (SELECT AVG(overall_rating) FROM Player_Attributes WHERE substr(date,1,4) = '2010') ORDER BY overall_rating DESC LIMIT 1;", "SELECT player_api_id FROM Player_Attributes WHERE overall_rating > (SELECT AVG(overall_rating) FROM Player_Attributes WHERE substr(date,1,4) = '2010') GROUP BY player_api_id ORDER BY MAX(overall_rating) DESC;"]}, {"question_id": 1035, "answer_sql": ["SELECT `team_fifa_api_id` FROM `Team_Attributes` WHERE `buildUpPlaySpeed` BETWEEN 51 AND 59;"]}, {"question_id": 1036, "answer_sql": ["SELECT team_long_name FROM Team WHERE team_long_name IN (SELECT team_long_name FROM Team_Attributes WHERE strftime('%Y', date) = '2012' AND buildUpPlayPassing > (SELECT AVG(buildUpPlayPassing) FROM Team_Attributes WHERE strftime('%Y', date) = '2012'));"]}, {"question_id": 1037, "answer_sql": []}, {"question_id": 1038, "answer_sql": ["SELECT `name`, SUM(`home_team_goal` + `away_team_goal`) as total_goals FROM `League` JOIN `Match` ON `League`.`id` = `Match`.`league_id` GROUP BY `name` ORDER BY total_goals ASC LIMIT 5;", "SELECT `league_id`, SUM(`home_team_goal` + `away_team_goal`) as total_goals FROM `Match` GROUP BY `league_id` ORDER BY total_goals ASC LIMIT 5;"]}, {"question_id": 1039, "answer_sql": []}, {"question_id": 1040, "answer_sql": ["SELECT player_name, AVG(heading_accuracy) as average_heading_accuracy FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE height > 180 GROUP BY player_name ORDER BY average_heading_accuracy DESC LIMIT 10;"]}, {"question_id": 1041, "answer_sql": ["SELECT t1.team_long_name FROM Team t1 JOIN Team_Attributes ta1 ON t1.team_api_id = ta1.team_api_id JOIN Team_Attributes ta2 ON t1.team_api_id = ta2.team_api_id WHERE ta1.buildUpPlayDribblingClass = 'Normal' AND ta2.chanceCreationPassingClass = 'Normal' AND t1.team_long_name NOT IN ( SELECT t2.team_long_name FROM Team t2 JOIN Team_Attributes ta2 ON t2.team_api_id = ta2.team_api_id WHERE ta2.chanceCreationPassingClass <> 'Normal' ) ORDER BY ta2.chanceCreationPassing DESC;", "SELECT team_long_name, chanceCreationPassing FROM Team JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id WHERE buildUpPlayDribblingClass = 'Normal' AND date > '2014-01-01 00:00:00' AND date < '2014-01-31 00:00:00' GROUP BY team_long_name HAVING chanceCreationPassing < AVG(chanceCreationPassing) ORDER BY chanceCreationPassing DESC;"]}, {"question_id": 1042, "answer_sql": []}, {"question_id": 1043, "answer_sql": ["SELECT team_short_name FROM Team WHERE team_long_name = 'Queens Park Rangers';"]}, {"question_id": 1044, "answer_sql": ["SELECT Player.player_name, Player.birthday FROM Player WHERE substr(Player.birthday,6,2) = '10' AND substr(Player.birthday,1,4) = '1970';", "SELECT `player_api_id`, `player_name` FROM `Player` WHERE substr(birthday,1,4) = '1970' AND substr(birthday,6,2) = '10';", "SELECT `player_name`, `player_api_id` FROM `Player` WHERE substr(birthday,1,4) = '1970' AND substr(birthday,6,2) = '10';"]}, {"question_id": 1045, "answer_sql": ["SELECT `attacking_work_rate` FROM `Player_Attributes` WHERE `player_api_id` = 1;"]}, {"question_id": 1046, "answer_sql": []}, {"question_id": 1047, "answer_sql": ["SELECT finishing FROM Player_Attributes WHERE player_api_id = 1 AND date = '2014-09-18 00:00:00';"]}, {"question_id": 1048, "answer_sql": ["SELECT `overall_rating` FROM `Player_Attributes` WHERE `player_api_id` = (SELECT `player_api_id` FROM `Player` WHERE `player_name` = 'Gabriel Tamas' AND `birthday` LIKE '2011%');", "SELECT `overall_rating` FROM `Player_Attributes` WHERE `player_api_id` = (SELECT `player_api_id` FROM `Player` WHERE `player_name` = 'Gabriel Tamas');"]}, {"question_id": 1049, "answer_sql": ["SELECT COUNT(*) FROM Match WHERE season = '2015/2016' AND country_id = (SELECT id FROM Country WHERE name = 'Scotland');"]}, {"question_id": 1050, "answer_sql": ["SELECT `attacking_work_rate` FROM `Player_Attributes` WHERE `date` = (SELECT MIN(`birthday`) FROM `Player`);"]}, {"question_id": 1051, "answer_sql": []}, {"question_id": 1052, "answer_sql": []}, {"question_id": 1053, "answer_sql": []}, {"question_id": 1054, "answer_sql": ["SELECT `defensive_work_rate` FROM `Player_Attributes` WHERE `player_api_id` = (SELECT `id` FROM `Player` WHERE `player_name` = 'David Wilson');", "SELECT `defensive_work_rate` FROM `Player_Attributes` WHERE `player_api_id` = (SELECT `player_api_id` FROM `Player` WHERE `player_name` = 'David Wilson');"]}, {"question_id": 1055, "answer_sql": []}, {"question_id": 1056, "answer_sql": ["SELECT `name` FROM `League` WHERE `country_id` = (SELECT `id` FROM `Country` WHERE `name` = 'Netherlands');"]}, {"question_id": 1057, "answer_sql": ["SELECT AVG(home_team_goal) FROM Match WHERE season = '2010/2011' AND country_id = (SELECT id FROM Country WHERE name = 'Poland');"]}, {"question_id": 1058, "answer_sql": []}, {"question_id": 1059, "answer_sql": []}, {"question_id": 1060, "answer_sql": ["SELECT COUNT(*) FROM Player WHERE strftime('%Y', birthday) > '1990';", "SELECT COUNT(*) FROM Player WHERE strftime('%Y', birthday) = '1990';"]}, {"question_id": 1061, "answer_sql": ["SELECT COUNT(*) FROM Player WHERE player_name = 'Adam' AND weight > 170;"]}, {"question_id": 1062, "answer_sql": ["SELECT Player.player_name FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player_Attributes.overall_rating > 80 AND strftime('%Y', Player_Attributes.date) BETWEEN '2008' AND '2010';"]}, {"question_id": 1063, "answer_sql": []}, {"question_id": 1064, "answer_sql": []}, {"question_id": 1065, "answer_sql": ["SELECT team_long_name FROM Team JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id WHERE buildUpPlaySpeedClass = 'Fast';"]}, {"question_id": 1066, "answer_sql": []}, {"question_id": 1067, "answer_sql": ["SELECT t1.team_short_name FROM Team t1 JOIN Team_Attributes ta1 ON t1.team_api_id = ta1.team_api_id WHERE ta1.buildUpPlayPassing > 70;"]}, {"question_id": 1068, "answer_sql": []}, {"question_id": 1069, "answer_sql": ["SELECT player_name FROM Player WHERE height = (SELECT MIN(height) FROM Player);", "SELECT player_name, height FROM Player WHERE height = (SELECT MIN(height) FROM Player);"]}, {"question_id": 1070, "answer_sql": ["SELECT `country_id` FROM `League` WHERE `name` = 'Italy Serie A';", "SELECT `country`.`name` FROM `League` JOIN `Country` ON `League`.`country_id` = `Country`.`id` WHERE `League`.`name` = 'Italy Serie A';"]}, {"question_id": 1071, "answer_sql": []}, {"question_id": 1072, "answer_sql": []}, {"question_id": 1073, "answer_sql": ["SELECT COUNT(*) FROM Match WHERE `league_id` = (SELECT `id` FROM `League` WHERE `name` = 'Germany 1. Bundesliga') AND strftime('%Y-%m', `date`) BETWEEN '2008-08' AND '2008-10';"]}, {"question_id": 1074, "answer_sql": []}, {"question_id": 1075, "answer_sql": []}, {"question_id": 1076, "answer_sql": []}, {"question_id": 1077, "answer_sql": ["SELECT team_long_name FROM Team WHERE team_short_name = 'GEN';"]}, {"question_id": 1078, "answer_sql": ["SELECT `Player`.`player_name`, `Player`.`birthday` FROM `Player` WHERE `Player`.`birthday` < '1998-01-01' ORDER BY `Player`.`birthday` DESC LIMIT 1;", "SELECT `player_name` FROM `Player` WHERE `birthday` = (SELECT MIN(`birthday`) FROM `Player` WHERE `player_name` = 'Aaron Lennon' OR `player_name` = 'Abdelaziz Barrada');", "SELECT `Player`.`player_name`, `Player`.`birthday` FROM `Player` WHERE `Player`.`birthday` < '1995-01-01' ORDER BY `Player`.`birthday` DESC LIMIT 1;", "SELECT `Player`.`player_name`, `Player`.`birthday` FROM `Player` WHERE `Player`.`birthday` < '1997-01-01' ORDER BY `Player`.`birthday` DESC LIMIT 1;", "SELECT `Player`.`player_name`, `Player`.`birthday` FROM `Player` WHERE `Player`.`birthday` = ( SELECT MAX(`Player`.`birthday`) FROM `Player` WHERE `Player`.`player_name` = 'Aaron Lennon' ) OR `Player`.`birthday` = ( SELECT MAX(`Player`.`birthday`) FROM `Player` WHERE `Player`.`player_name` = 'Abdelaziz Barrada' );"]}, {"question_id": 1079, "answer_sql": ["SELECT player_name, height FROM Player WHERE height = (SELECT MAX(height) FROM Player);"]}, {"question_id": 1080, "answer_sql": ["SELECT COUNT(*) FROM Player_Attributes WHERE preferred_foot = 'left' AND attacking_work_rate = 'low';"]}, {"question_id": 1081, "answer_sql": ["SELECT `name` FROM `League` WHERE `name` = 'Belgium Jupiler League';"]}, {"question_id": 1082, "answer_sql": ["SELECT * FROM League WHERE country_id IN (SELECT id FROM Country WHERE name = 'Germany');", "SELECT League.name FROM League JOIN Country ON League.country_id = Country.id WHERE Country.name = 'Germany';"]}, {"question_id": 1083, "answer_sql": []}, {"question_id": 1084, "answer_sql": []}, {"question_id": 1085, "answer_sql": ["SELECT player_name FROM Player WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Alexis') OR player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Ariel Borysiuk') OR player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Arouna Kone');", "SELECT player_name FROM Player WHERE player_api_id IN (SELECT player_api_id FROM Player_Attributes WHERE crossing = (SELECT MAX(crossing) FROM Player_Attributes));"]}, {"question_id": 1086, "answer_sql": ["SELECT `heading_accuracy` FROM `Player_Attributes` WHERE `player_api_id` = 1;", "SELECT `heading_accuracy` FROM `Player_Attributes` WHERE `player_api_id` = (SELECT `player_api_id` FROM `Player` WHERE `player_name` = 'Ariel Borysiuk');"]}, {"question_id": 1087, "answer_sql": []}, {"question_id": 1088, "answer_sql": []}, {"question_id": 1089, "answer_sql": ["SELECT COUNT(*) FROM Match WHERE country_id = (SELECT id FROM Country WHERE name = 'Belgium') AND season = '2008/2009' AND stage = 0;", "SELECT COUNT(*) FROM Match WHERE country_id = (SELECT id FROM Country WHERE name = 'Belgium') AND season = '2008/2009' AND stage = 1;", "SELECT COUNT(*) FROM Match WHERE country_id = (SELECT id FROM Country WHERE name = 'Belgium') AND season = '2008/2009';"]}, {"question_id": 1090, "answer_sql": []}, {"question_id": 1091, "answer_sql": ["SELECT COUNT(*) FROM Match WHERE `league_id` = (SELECT id FROM League WHERE name = 'Belgium Jupiler League') AND `date` >= '2009-04-01' AND `date` <= '2009-04-30';", "SELECT COUNT(*) FROM Match WHERE `league_id` = (SELECT `id` FROM `League` WHERE `name` = 'Belgium Jupiler League') AND `season` = '2009' AND strftime('%m', `date`) = '04';"]}, {"question_id": 1092, "answer_sql": ["SELECT `name` FROM `League` WHERE `id` = (SELECT `league_id` FROM `Match` WHERE `season` = '2008/2009' GROUP BY `league_id` ORDER BY `id` DESC LIMIT 1);"]}, {"question_id": 1093, "answer_sql": []}, {"question_id": 1094, "answer_sql": []}, {"question_id": 1095, "answer_sql": []}, {"question_id": 1096, "answer_sql": []}, {"question_id": 1097, "answer_sql": []}, {"question_id": 1098, "answer_sql": []}, {"question_id": 1099, "answer_sql": []}, {"question_id": 1100, "answer_sql": []}, {"question_id": 1101, "answer_sql": ["SELECT AVG(away_team_goal) as average_goals_away FROM Match WHERE away_team_api_id = (SELECT team_api_id FROM Team WHERE team_long_name = 'Parma') AND country_id = (SELECT id FROM Country WHERE name = 'Italy');"]}, {"question_id": 1102, "answer_sql": ["SELECT Player.player_name FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player_Attributes.overall_rating = 77 AND Player_Attributes.date = '2016/6/23' ORDER BY Player.birthday ASC LIMIT 1;"]}, {"question_id": 1103, "answer_sql": ["SELECT `overall_rating` FROM `Player_Attributes` WHERE `player_api_id` = (SELECT `player_api_id` FROM `Player` WHERE `player_name` = 'Aaron Mooy');"]}, {"question_id": 1104, "answer_sql": []}, {"question_id": 1105, "answer_sql": []}, {"question_id": 1106, "answer_sql": ["SELECT `defensive_work_rate` FROM `Player_Attributes` WHERE `player_api_id` = (SELECT `player_api_id` FROM `Player` WHERE `player_name` = 'Kevin Berigaud') AND `date` = '2013-02-22 00:00:00';", "SELECT `defensive_work_rate` FROM `Player_Attributes` WHERE `player_api_id` = (SELECT `player_api_id` FROM `Player` WHERE `player_name` = 'Kevin Berigaud');"]}, {"question_id": 1107, "answer_sql": ["SELECT date FROM Team_Attributes WHERE team_api_id = ( SELECT team_api_id FROM Player WHERE player_api_id = ( SELECT player_api_id FROM Player_Attributes WHERE crossing = ( SELECT MAX(crossing) FROM Player_Attributes WHERE player_api_id = 10000000 ) ) )", "SELECT date, MAX(crossing) FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Kevin Constant');"]}, {"question_id": 1108, "answer_sql": []}, {"question_id": 1109, "answer_sql": []}, {"question_id": 1110, "answer_sql": []}, {"question_id": 1111, "answer_sql": []}, {"question_id": 1112, "answer_sql": []}, {"question_id": 1113, "answer_sql": []}, {"question_id": 1114, "answer_sql": []}, {"question_id": 1115, "answer_sql": []}, {"question_id": 1116, "answer_sql": ["SELECT player_name FROM Player WHERE height = (SELECT MAX(height) FROM Player);", "SELECT player_name FROM Player WHERE id IN (SELECT MAX(id) FROM Player GROUP BY player_fifa_api_id LIMIT 5);", "SELECT player_name FROM Player WHERE id IN (SELECT MAX(id) FROM Player GROUP BY player_name LIMIT 5);"]}, {"question_id": 1117, "answer_sql": ["SELECT player_api_id FROM Player ORDER BY weight DESC LIMIT 10;"]}, {"question_id": 1118, "answer_sql": []}, {"question_id": 1119, "answer_sql": ["SELECT home_team_goal FROM Match WHERE home_player_X1 = 157 AND away_player_X1 = 157;"]}, {"question_id": 1120, "answer_sql": ["SELECT SUM(away_team_goal) FROM Match WHERE home_player_X1 = (SELECT id FROM Player WHERE player_name = 'Daan Smith') AND away_player_X1 = (SELECT id FROM Player WHERE player_name = 'Filipe Ferreira');"]}, {"question_id": 1121, "answer_sql": []}, {"question_id": 1122, "answer_sql": []}, {"question_id": 1123, "answer_sql": ["SELECT player_name FROM Player WHERE player_api_id IN ( SELECT player_api_id FROM Player_Attributes WHERE potential = ( SELECT MAX(potential) FROM Player_Attributes ) );"]}, {"question_id": 1124, "answer_sql": []}, {"question_id": 1125, "answer_sql": []}, {"question_id": 1126, "answer_sql": []}, {"question_id": 1127, "answer_sql": []}, {"question_id": 1128, "answer_sql": []}, {"question_id": 1129, "answer_sql": []}, {"question_id": 1130, "answer_sql": ["SELECT team_short_name FROM Team WHERE team_long_name = 'played safe while creating chance of passing';"]}, {"question_id": 1131, "answer_sql": []}, {"question_id": 1132, "answer_sql": ["SELECT player_name FROM Player WHERE height > 180 ORDER BY player_name ASC LIMIT 3;"]}, {"question_id": 1133, "answer_sql": ["SELECT COUNT(*) FROM Player WHERE player_name LIKE 'Aaron%' AND birthday > '1990-01-01';"]}, {"question_id": 1134, "answer_sql": []}, {"question_id": 1135, "answer_sql": ["SELECT `player_api_id` FROM `Player_Attributes` WHERE `potential` = (SELECT MIN(`potential`) FROM `Player_Attributes`) AND `preferred_foot` = 'right' LIMIT 3;"]}, {"question_id": 1136, "answer_sql": ["SELECT COUNT(*) as `Number of Players` FROM `Player_Attributes` WHERE `crossing` = (SELECT MAX(`crossing`) FROM `Player_Attributes`) AND `preferred_foot` = 'left' AND `attacking_work_rate` = 'medium';"]}, {"question_id": 1137, "answer_sql": []}, {"question_id": 1138, "answer_sql": ["SELECT Country . name FROM League JOIN Country ON League . country_id = Country . id WHERE League . name = 'Poland Ekstraklasa'"]}, {"question_id": 1139, "answer_sql": ["SELECT `home_team_goal`, `away_team_goal` FROM `Match` WHERE `date` = '2008-09-24' AND `league_id` = (SELECT `id` FROM `League` WHERE `name` = 'Belgian Jupiler League') AND `country_id` = (SELECT `id` FROM `Country` WHERE `name` = 'Belgium') AND `home_team_api_id` = (SELECT `team_api_id` FROM `Team` WHERE `team_long_name` = 'Home Team') AND `away_team_api_id` = (SELECT `team_api_id` FROM `Team` WHERE `team_long_name` = 'Away Team');"]}, {"question_id": 1140, "answer_sql": []}, {"question_id": 1141, "answer_sql": []}, {"question_id": 1142, "answer_sql": ["SELECT COUNT(*) FROM Match WHERE season = '2015/2016';"]}, {"question_id": 1143, "answer_sql": ["SELECT MAX(home_team_goal) FROM Match WHERE country_id = (SELECT id FROM Country WHERE name = 'Netherlands') AND league_id = (SELECT id FROM League WHERE name = 'Eredivisie');"]}, {"question_id": 1144, "answer_sql": ["SELECT player_name, MAX(weight) FROM Player WHERE weight = (SELECT MAX(weight) FROM Player);"]}, {"question_id": 1145, "answer_sql": ["SELECT L.name AS League , COUNT(M.id) AS Games FROM League L JOIN Match M ON L.id = M.league_id WHERE M.date BETWEEN '2015-08-01' AND '2016-07-31' GROUP BY L.name ORDER BY Games DESC LIMIT 1;", "SELECT L.name as League FROM League L WHERE L.name = (SELECT team_long_name FROM Team WHERE team_api_id = (SELECT team_api_id FROM Team WHERE team_fifa_api_id = (SELECT team_fifa_api_id FROM Match WHERE match_api_id = (SELECT match_api_id FROM Match WHERE date = '2015/2016' AND season = '2015/2016'))));", "SELECT L.name as League_Name FROM League L JOIN ( SELECT country_id FROM Match WHERE season = '2015/2016' GROUP BY country_id ORDER BY COUNT(id) DESC LIMIT 1 ) M ON L.country_id = M.country_id;"]}, {"question_id": 1146, "answer_sql": ["SELECT team_long_name FROM Team WHERE team_api_id = (SELECT away_team_api_id FROM Match WHERE away_team_goal = (SELECT MAX(away_team_goal) FROM Match));"]}, {"question_id": 1147, "answer_sql": ["SELECT player_name FROM Player WHERE player_api_id = (SELECT MAX(player_api_id) FROM Player);"]}, {"question_id": 1148, "answer_sql": []}, {"question_id": 1149, "answer_sql": []}, {"question_id": 1150, "answer_sql": []}, {"question_id": 1151, "answer_sql": ["SELECT COUNT(*) as Inpatient_Count FROM Patient WHERE Birthday BETWEEN '1930-01-01' AND '1940-12-31' AND Admission = '+';", "SELECT '[' || CAST((COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Examination WHERE Admission = '+')) AS INTEGER) || ']%' FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Patient.Birthday BETWEEN '1930-01-01' AND '1940-12-31' AND Admission = '+'"]}, {"question_id": 1152, "answer_sql": ["SELECT COUNT(ID) / (SELECT COUNT(ID) FROM Patient WHERE Diagnosis = 'SLE' AND Admission = '+') as ratio FROM Patient WHERE Diagnosis = 'SLE' AND Admission = '-'", "SELECT COUNT(ID) as 'Outpatient', COUNT(ID) as 'Inpatient' FROM Patient WHERE Diagnosis = 'SLE'"]}, {"question_id": 1153, "answer_sql": ["SELECT * FROM Laboratory JOIN Patient ON Laboratory.ID = Patient.ID WHERE Patient.ID = 30609 AND Patient.Diagnosis = 'Diagnosis';", "SELECT Patient.Diagnosis, Laboratory.Date FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.ID = 30609 ORDER BY Laboratory.Date;", "SELECT Laboratory.Date, Laboratory.GOT, Laboratory.GPT, Laboratory.LDH, Laboratory.ALP, Laboratory.TP, Laboratory.ALB, Laboratory.UA, Laboratory.UN, Laboratory.CRE, Laboratory.`T-BIL`, Laboratory.`T-CHO`, Laboratory.TG, Laboratory.CPK, Laboratory.GLU, Laboratory.WBC, Laboratory.RBC, Laboratory.HGB, Laboratory.HCT, Laboratory.PLT, Laboratory.PT, Laboratory.APTT, Laboratory.FG, Laboratory.PIC, Laboratory.TAT, Laboratory.TAT2, Laboratory.`U-PRO`, Laboratory.IGG, Laboratory.IGA, Laboratory.IGM, Laboratory.CRP, Laboratory.RA, Laboratory.RF, Laboratory.C3, Laboratory.C4, Laboratory.RNP, Laboratory.SM, Laboratory.SC170, Laboratory.SSA, Laboratory.SSB, Laboratory.CENTROMEA, Laboratory.DNA, Laboratory.`DNA-II` FROM Laboratory WHERE Laboratory.ID = 30609;", "SELECT P.ID, P.Diagnosis, L.Date FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE P.ID = 30609 ORDER BY L.Date;"]}, {"question_id": 1154, "answer_sql": ["SELECT Patient.SEX, Patient.Birthday, Examination.`Examination Date`, Examination.Symptoms FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Patient.ID = 163109;", "SELECT Patient.SEX, Patient.Birthday FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.ID = 163109;"]}, {"question_id": 1155, "answer_sql": ["SELECT Patient.ID, Patient.SEX, Patient.Birthday FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.LDH > 500;"]}, {"question_id": 1156, "answer_sql": []}, {"question_id": 1157, "answer_sql": ["SELECT Patient.ID, Patient.SEX, Patient.Diagnosis FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.Thrombosis = 2;"]}, {"question_id": 1158, "answer_sql": ["SELECT P.ID, P.SEX, P.Birthday, P.Description, P.`First Date`, P.Admission, P.Diagnosis FROM Patient P WHERE P.Birthday = '1937' AND (SELECT `T-CHO` FROM Laboratory L WHERE L.ID = P.ID) >= '250';"]}, {"question_id": 1159, "answer_sql": ["SELECT Patient.ID, Patient.SEX, Patient.Diagnosis FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.ALB < 3.5;"]}, {"question_id": 1160, "answer_sql": []}, {"question_id": 1161, "answer_sql": []}, {"question_id": 1162, "answer_sql": []}, {"question_id": 1163, "answer_sql": []}, {"question_id": 1164, "answer_sql": ["SELECT COUNT(*) FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.Thrombosis = 1 AND strftime('%Y', Examination.`Examination Date`) = '1997' AND Patient.SEX = 'F';", "SELECT COUNT(*) FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.Thrombosis = 1 AND Patient.SEX = 'F';", "SELECT COUNT(*) FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.Thrombosis = 1 AND Examination.`Examination Date` = '1997-01-01' AND Patient.SEX = 'F';"]}, {"question_id": 1165, "answer_sql": []}, {"question_id": 1166, "answer_sql": ["SELECT P.ID, P.SEX, P.Birthday, P.Description, P.`First Date`, P.Admission, P.Diagnosis FROM Patient P WHERE P.Birthday = (SELECT MIN(Birthday) FROM Patient);"]}, {"question_id": 1167, "answer_sql": []}, {"question_id": 1168, "answer_sql": []}, {"question_id": 1169, "answer_sql": []}, {"question_id": 1170, "answer_sql": ["SELECT COUNT(*) FROM Patient WHERE ID NOT IN (SELECT Patient.ID FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.`Examination Date` >= '2022-01-01')", "SELECT COUNT(*) FROM Patient WHERE `First Date` > '1999-12-31'"]}, {"question_id": 1171, "answer_sql": ["SELECT COUNT(*) FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Patient.Birthday < '1990-01-01' AND Examination.`Examination Date` BETWEEN '1990-01-01' AND '1993-12-31';", "SELECT COUNT(*) FROM Patient WHERE Birthday < '1990-01-01' AND `First Date` BETWEEN '1990-01-01' AND '1993-12-31';"]}, {"question_id": 1172, "answer_sql": ["SELECT COUNT(*) FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Patient.SEX = 'M' AND Laboratory.`T-BIL` > 2.0;"]}, {"question_id": 1173, "answer_sql": ["SELECT Examination.Diagnosis, COUNT(Examination.Diagnosis) as Diagnosis_Count FROM Examination JOIN Patient ON Examination.ID = Patient.ID WHERE Examination.`Examination Date` BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY Examination.Diagnosis ORDER BY Diagnosis_Count DESC;", "SELECT Diagnosis FROM Examination WHERE `Examination Date` BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY Diagnosis ORDER BY COUNT(Diagnosis) DESC LIMIT 1;"]}, {"question_id": 1174, "answer_sql": ["SELECT AVG(Birthday) FROM Patient WHERE `First Date` BETWEEN '1991-10-01' AND '1991-10-30';"]}, {"question_id": 1175, "answer_sql": []}, {"question_id": 1176, "answer_sql": ["SELECT `aCL IgG` FROM Examination WHERE ID = 3605340 AND `Examination Date` = '1996-12-02';"]}, {"question_id": 1177, "answer_sql": ["SELECT Laboratory.TP, Laboratory.ALB, Laboratory.UA, Laboratory.UN, Laboratory.CRE, Laboratory.`T-BIL`, Laboratory.`T-CHO`, Laboratory.TG, Laboratory.CPK, Laboratory.GLU, Laboratory.WBC, Laboratory.RBC, Laboratory.HGB, Laboratory.HCT, Laboratory.PLT, Laboratory.PT, Laboratory.APTT, Laboratory.FG, Laboratory.PIC, Laboratory.TAT, Laboratory.TAT2, Laboratory.`U-PRO`, Laboratory.IGG, Laboratory.IGA, Laboratory.IGM, Laboratory.CRP, Laboratory.RA, Laboratory.RF, Laboratory.C3, Laboratory.C4, Laboratory.RNP, Laboratory.SM, Laboratory.SSA, Laboratory.SSB, Laboratory.CENTROMEA, Laboratory.DNA, Laboratory.`DNA-II` FROM Laboratory JOIN Patient ON Laboratory.ID = Patient.ID WHERE Patient.ID = 2927464 AND Laboratory.Date = '1995-09-04' AND Laboratory.TP < 250;", "SELECT P.ID, L.TP, E.`Examination Date` FROM Patient P JOIN Laboratory L ON P.ID = L.ID JOIN Examination E ON P.ID = E.ID WHERE P.ID = 2927464 AND L.TP = 650 AND E.`Examination Date` = '1995-09-04';", "SELECT P.ID, L.Date, L.TG FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE P.ID = 2927464 AND L.Date = '1995-09-04' AND L.TG < 250;"]}, {"question_id": 1178, "answer_sql": ["SELECT SEX FROM Patient WHERE Diagnosis = 'AORTITIS';", "SELECT Patient.SEX FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.Diagnosis = 'AORTITIS';"]}, {"question_id": 1179, "answer_sql": []}, {"question_id": 1180, "answer_sql": ["SELECT Patient.ID, Patient.SEX FROM Patient WHERE Patient.SEX = 'M' AND Patient.`First Date` = '1992-06-12'"]}, {"question_id": 1181, "answer_sql": []}, {"question_id": 1182, "answer_sql": ["SELECT COUNT(*) FROM Laboratory JOIN Patient ON Laboratory.ID = Patient.ID WHERE Patient.`First Date` = '1991-06-13' AND Patient.Diagnosis = 'SJS';"]}, {"question_id": 1183, "answer_sql": ["SELECT Patient.Diagnosis FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.`Examination Date` = '1997-01-27' AND Examination.Diagnosis = 'SLE';"]}, {"question_id": 1184, "answer_sql": ["SELECT Symptoms FROM Examination WHERE `Examination Date` = '1993-09-02' AND ID = (SELECT ID FROM Patient WHERE Birthday = '1959-03-01');"]}, {"question_id": 1185, "answer_sql": []}, {"question_id": 1186, "answer_sql": ["SELECT Patient.ID, Patient.Diagnosis FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Patient.Diagnosis = 'Behcet' AND Examination.`Examination Date` BETWEEN '197-01-01' AND '1997-12-31';", "SELECT Patient.ID, Patient.SEX, Patient.Birthday, Patient.Description, Patient.`First Date`, Patient.Admission, Patient.Diagnosis FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.`Examination Date` BETWEEN '1970-01-01' AND '1998-12-31' AND Examination.Diagnosis = 'Behcet' ORDER BY Patient.ID;"]}, {"question_id": 1187, "answer_sql": ["SELECT Examination.ID, Patient.ID, Patient.SEX, Patient.Birthday, Patient.Description, Patient.`First Date`, Patient.Admission, Patient.Diagnosis, Laboratory.Date, Laboratory.GOT, Laboratory.GPT, Laboratory.LDH, Laboratory.ALP, Laboratory.TP, Laboratory.ALB, Laboratory.UA, Laboratory.UN, Laboratory.CRE, Laboratory.`T-BIL`, Laboratory.`T-CHO`, Laboratory.TG, Laboratory.CPK, Laboratory.GLU, Laboratory.WBC, Laboratory.RBC, Laboratory.HGB, Laboratory.HCT, Laboratory.PLT, Laboratory.PT, Laboratory.APTT, Laboratory.FG, Laboratory.PIC, Laboratory.TAT, Laboratory.TAT2, Laboratory.`U-PRO`, Laboratory.IGG, Laboratory.IGA, Laboratory.IGM, Laboratory.CRP, Laboratory.RA, Laboratory.RF, Laboratory.C3, Laboratory.C4, Laboratory.RNP, Laboratory.SM, Laboratory.SC170, Laboratory.SSA, Laboratory.SSB, Laboratory.CENTROMEA, Laboratory.DNA, Laboratory.`DNA-II` FROM Examination JOIN Patient ON Examination.ID = Patient.ID JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Examination.`Examination Date` BETWEEN '1987-07-06' AND '1996-01-31' AND Laboratory.GPT > 30 AND Laboratory.ALB < 4;"]}, {"question_id": 1188, "answer_sql": []}, {"question_id": 1189, "answer_sql": ["SELECT COUNT(*) FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.Thrombosis = 2 AND Examination.`ANA Pattern` = 'S' AND Examination.`aCL IgM` > (SELECT AVG(`aCL IgM`) FROM Examination) * 1.2;", "SELECT AVG(`aCL IgM`) * 1.2 as `Avg_IgM` FROM Examination e JOIN Patient p ON e.ID = p.ID JOIN Laboratory l ON e.ID = l.ID WHERE e.Thrombosis = 2 AND e.ANA = 'S';"]}, {"question_id": 1190, "answer_sql": ["SELECT (SUM(CASE WHEN `U-PRO` > 0 AND `U-PRO` < 30 AND UA < 6.5 THEN 1 ELSE 0 END)) * 100 / (SELECT COUNT(*) FROM Patient WHERE `U-PRO` > 0 AND `U-PRO` < 30) as percentage FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID;", "SELECT (COUNT(*) * 100.0) / (SELECT COUNT(*) FROM Laboratory WHERE `U-PRO` > 0 AND `U-PRO` < 30) as percentage FROM Laboratory WHERE UA < 6.5;"]}, {"question_id": 1191, "answer_sql": []}, {"question_id": 1192, "answer_sql": ["SELECT Patient.ID, Patient.SEX, Patient.Birthday, Patient.Description, Patient.`First Date`, Patient.Admission, Patient.Diagnosis FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.Date LIKE '1991-10%' AND Laboratory.`T-BIL` < 2.0;"]}, {"question_id": 1193, "answer_sql": ["SELECT COUNT(*) FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.ANA <> 'p' AND Patient.SEX = 'F' AND Patient.Birthday BETWEEN '1980-01-01' AND '1989-12-31';", "SELECT COUNT(*) FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.ANA = 'p' AND Patient.SEX = 'F' AND Patient.Birthday BETWEEN '1980-01-01' AND '1989-12-31';"]}, {"question_id": 1194, "answer_sql": ["SELECT Patient.SEX FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Examination.Diagnosis = 'PSS' AND Laboratory.CRP > 2 AND Laboratory.CRE = 1 AND Laboratory.LDH = 123;"]}, {"question_id": 1195, "answer_sql": ["SELECT AVG(ALB) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE SEX = 'F' AND PLT > 400 AND Diagnosis = 'SLE';"]}, {"question_id": 1196, "answer_sql": ["SELECT Symptoms FROM Examination WHERE Diagnosis = 'SLE' ORDER BY Symptoms ASC LIMIT 1;"]}, {"question_id": 1197, "answer_sql": ["SELECT Patient.ID, Patient.Diagnosis, Examination.`Examination Date` FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.ID = 48473 ORDER BY Examination.`Examination Date` ASC;", "SELECT E.`Examination Date`, P.Diagnosis FROM Examination E JOIN Patient P ON E.ID = P.ID WHERE P.ID = 48473 ORDER BY E.`Examination Date` ASC LIMIT 1;", "SELECT `Description`, Diagnosis FROM Patient WHERE ID = 48473", "SELECT Patient.ID, Patient.Diagnosis, Examination.`Examination Date` FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Patient.ID = 48473 ORDER BY Examination.`Examination Date` ASC;"]}, {"question_id": 1198, "answer_sql": ["SELECT COUNT(*) FROM Patient WHERE SEX = 'F' AND Diagnosis = 'APS';", "SELECT COUNT(*) FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Patient.SEX = 'F' AND Examination.Diagnosis = 'APS';"]}, {"question_id": 1199, "answer_sql": []}, {"question_id": 1200, "answer_sql": ["SELECT (SUM(Examination.Thrombosis = 1)) / (SELECT COUNT(*) FROM Patient WHERE Patient.Diagnosis LIKE '%SLE%') * 100 as Thrombosis_Proportion FROM Examination JOIN Patient ON Examination.ID = Patient.ID WHERE Patient.Diagnosis LIKE '%SLE%';", "SELECT (SUM(Examination.Thrombosis = 1) * 1.0) / (SUM(Examination.Thrombosis = 1) + SUM(Examination.Thrombosis = 0)) * 100 AS Thrombosis_Proportion FROM Examination JOIN Patient ON Examination.ID = Patient.ID WHERE Patient.Diagnosis LIKE '%ITP%' AND Examination.Thrombosis = 1", "SELECT (SUM(Examination.Thrombosis = 1) * 1.0) / (SUM(Examination.Thrombosis = 1) + SUM(Examination.Thrombosis = 0)) * 100 AS Thrombosis_Proportion FROM Examination JOIN Patient ON Examination.ID = Patient.ID WHERE Patient.Diagnosis LIKE '%SLE%'"]}, {"question_id": 1201, "answer_sql": []}, {"question_id": 1202, "answer_sql": ["SELECT COUNT(*) FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.SEX = 'M' AND Examination.`Examination Date` BETWEEN '1995-01-01' AND '1995-12-31' AND Examination.Diagnosis = 'BEHCET' AND Patient.Admission != '-' AND Examination.Thrombosis = 0;"]}, {"question_id": 1203, "answer_sql": ["SELECT COUNT(*) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE SEX = 'F' AND WBC < 3.5;", "SELECT COUNT(*) FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Patient.SEX = 'F' AND Laboratory.WBC < 3.5;"]}, {"question_id": 1204, "answer_sql": []}, {"question_id": 1205, "answer_sql": ["SELECT Patient.Description, Laboratory.UA FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.ID = 57266 AND Laboratory.UA > 6.5;", "SELECT P.ID, P.SEX, L.UA FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE P.ID = 57266 AND L.UA > 8.0 AND L.UA < 6.5 AND P.SEX = 'M';", "SELECT P.ID, P.SEX, L.UA FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE P.ID = 57266 AND L.UA > 8.0 AND L.UA > 6.5 AND L.UA < 10.0;", "SELECT P.ID, P.SEX, L.UA FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.UA > 8.0 AND P.SEX = 'M' UNION SELECT P.ID, P.SEX, L.UA FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.UA > 6.5 AND P.SEX = 'F';"]}, {"question_id": 1206, "answer_sql": ["SELECT Laboratory.Date FROM Laboratory JOIN Patient ON Laboratory.ID = Patient.ID WHERE Patient.ID = 48473 AND Laboratory.GOT >= 60;"]}, {"question_id": 1207, "answer_sql": ["SELECT P.ID, P.SEX, P.Birthday FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.Date = '1994-01-01' AND L.GOT < 60;"]}, {"question_id": 1208, "answer_sql": ["SELECT Patient.ID FROM Patient WHERE Patient.SEX = 'M' AND Patient.`First Date` IS NOT NULL AND Patient.Diagnosis = 'ALT glutamic pylvic transaminase (GPT)' AND Patient.`First Date` < '2022-01-01' AND Patient.`First Date` > '2021-12-31' AND Patient.`First Date` <= (SELECT Examination.`Examination Date` FROM Examination WHERE Examination.`aCL IgG` >= 60 AND Examination.`aCL IgG` IS NOT NULL)", "SELECT Patient.ID FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.SEX = 'M' AND Laboratory.GPT >= 60;"]}, {"question_id": 1209, "answer_sql": ["SELECT Patient.ID, Patient.SEX, Patient.Birthday, Patient.Description, Patient.`First Date`, Patient.Admission, Patient.Diagnosis FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.`aCL IgG` > 60 ORDER BY Patient.Birthday ASC;"]}, {"question_id": 1210, "answer_sql": ["SELECT AVG(LDH) FROM Laboratory WHERE LDH < 500;"]}, {"question_id": 1211, "answer_sql": []}, {"question_id": 1212, "answer_sql": ["SELECT P.Admission FROM Patient P WHERE P.ID IN ( SELECT E.ID FROM Examination E WHERE E.`aCL IgG` < 300 AND E.`aCL IgM` < 300 AND E.`aCL IgA` < 300 )"]}, {"question_id": 1213, "answer_sql": ["SELECT Patient.ID FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.Birthday = '1982-04-01' AND Laboratory.ALP < 300;", "SELECT Patient.ID FROM Patient WHERE Patient.Birthday = '1982-04-01' AND Patient.Description = 'alkaliphophatase (ALP) within normal range';"]}, {"question_id": 1214, "answer_sql": []}, {"question_id": 1215, "answer_sql": []}, {"question_id": 1216, "answer_sql": []}, {"question_id": 1217, "answer_sql": ["SELECT Patient.ID, Patient.SEX, Patient.Birthday, Patient.Description, Patient.`First Date`, Patient.Admission, Patient.Diagnosis FROM Patient WHERE Patient.Birthday BETWEEN '1982-01-01' AND '1982-12-31' AND Patient.Description = 'Albumin within normal range'", "SELECT P.ID, P.SEX, P.Birthday, L.ALB FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE P.Birthday BETWEEN '1982-01-01' AND '1982-12-31' AND L.ALB BETWEEN 3.5 AND 5.5;"]}, {"question_id": 1218, "answer_sql": ["SELECT COUNT(*) as 'Female_Patients_Above_8_UA' FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE SEX = 'F' AND UA > 8.0;", "SELECT COUNT(*) / (SELECT COUNT(*) FROM Laboratory WHERE SEX = 'F' AND UA > 8.0) * 100 as Percentage FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE SEX = 'F' AND UA > 8.0;"]}, {"question_id": 1219, "answer_sql": ["SELECT AVG(Laboratory.UA) as Average_UA FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.UA < 6.5 AND Patient.SEX = 'F'", "SELECT AVG(Laboratory.UA) FROM Laboratory JOIN Patient ON Laboratory.ID = Patient.ID WHERE Patient.SEX = 'M' AND Laboratory.UA < 8.0 OR Patient.SEX = 'F' AND Laboratory.UA < 6.5;", "SELECT AVG(UA) as Average_UA FROM Laboratory as Lab JOIN Patient as Pat ON Lab.ID = Pat.ID WHERE Pat.SEX in ('M', 'F') AND Lab.UA >= 8.0;", "SELECT AVG(Laboratory.UA) FROM Laboratory JOIN Patient ON Laboratory.ID = Patient.ID WHERE Patient.SEX = 'M' AND Laboratory.UA < 8.0;"]}, {"question_id": 1220, "answer_sql": []}, {"question_id": 1221, "answer_sql": ["SELECT Patient.ID, Patient.SEX, Patient.Birthday FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.UN < 30 AND Patient.Diagnosis = 'RA';"]}, {"question_id": 1222, "answer_sql": ["SELECT COUNT(*) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.SEX = 'M' AND Laboratory.CRE >= 1.5;"]}, {"question_id": 1223, "answer_sql": []}, {"question_id": 1224, "answer_sql": ["SELECT ID, SEX, Birthday FROM Patient WHERE ID IN (SELECT Patient.ID FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.`T-BIL` = (SELECT MAX(`T-BIL`) FROM Laboratory));"]}, {"question_id": 1225, "answer_sql": ["SELECT P.SEX, COUNT(*) as 'Number of Patients' FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.`T-BIL` < 2.0 GROUP BY P.SEX;"]}, {"question_id": 1226, "answer_sql": ["SELECT Patient.ID, Laboratory.TAT2 FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.TAT2 = (SELECT MAX(Laboratory.TAT2) FROM Laboratory) ORDER BY Patient.Birthday ASC LIMIT 1;", "SELECT Patient.ID, Laboratory.TAT2 FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.TAT = ( SELECT MAX(Laboratory.TAT) FROM Laboratory WHERE Laboratory.TG < 200 ) ORDER BY Patient.Birthday DESC LIMIT 1;", "SELECT Patient.ID, Laboratory.TAT FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Patient.Birthday = (SELECT MIN(Birthday) FROM Patient) AND Laboratory.TAT = (SELECT MAX(TAT) FROM Laboratory);", "SELECT Patient.ID, Laboratory.`T-CHO` FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.`T-CHO` = (SELECT MAX(`T-CHO`) FROM Laboratory);", "SELECT Patient.ID, MAX(Laboratory.TAT) as TAT_Index FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID GROUP BY Patient.ID ORDER BY MIN(Patient.Birthday) ASC, MAX(Laboratory.TAT) DESC LIMIT 1;", "SELECT Patient.ID, Laboratory.TAT FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.TAT = ( SELECT MAX(Laboratory.TAT) FROM Laboratory );"]}, {"question_id": 1227, "answer_sql": []}, {"question_id": 1228, "answer_sql": ["SELECT Patient.ID, Patient.Diagnosis FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.TG > 300;", "SELECT P.ID, P.SEX, P.Birthday, P.Description, P.`First Date`, P.Admission, P.Diagnosis FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.TG > 300;"]}, {"question_id": 1229, "answer_sql": []}, {"question_id": 1230, "answer_sql": ["SELECT DISTINCT Patient.ID FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.CPK < 250 AND Laboratory.CPK IS NOT NULL;"]}, {"question_id": 1231, "answer_sql": ["SELECT COUNT(*) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.Birthday BETWEEN '1936-01-01' AND '1956-12-31' AND Patient.SEX = 'M' AND Laboratory.CPK >= 250;"]}, {"question_id": 1232, "answer_sql": []}, {"question_id": 1233, "answer_sql": ["SELECT Patient.ID, Laboratory.GLU FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.Date >= '1991-01-01' AND Laboratory.GLU < 180;"]}, {"question_id": 1234, "answer_sql": ["SELECT Patient.ID, Patient.SEX, Patient.Birthday FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.WBC < 3.5 OR Laboratory.WBC > 9.0 GROUP BY Patient.SEX ORDER BY Patient.Birthday ASC;"]}, {"question_id": 1235, "answer_sql": ["SELECT P.ID, P.Birthday, P.Description, P.`First Date`, P.Admission, P.Diagnosis FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.RBC < 3.5"]}, {"question_id": 1236, "answer_sql": []}, {"question_id": 1237, "answer_sql": ["SELECT Patient.ID, Patient.SEX FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.HGB < 10;"]}, {"question_id": 1238, "answer_sql": []}, {"question_id": 1239, "answer_sql": []}, {"question_id": 1240, "answer_sql": ["SELECT AVG(HCT) FROM Laboratory WHERE HCT < (SELECT AVG(HCT) FROM Laboratory) AND Date LIKE '1991%';", "SELECT AVG(HCT) FROM Laboratory WHERE Date LIKE '1991%' AND HCT < 29;", "SELECT AVG(HCT) FROM Laboratory WHERE HCT < (SELECT AVG(HCT) FROM Laboratory WHERE Date LIKE '1991%');"]}, {"question_id": 1241, "answer_sql": ["SELECT SUM(PLT < 100) as 'Lower than normal', SUM(PLT > 400) as 'Higher than normal' FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE PLT IS NOT NULL;"]}, {"question_id": 1242, "answer_sql": []}, {"question_id": 1243, "answer_sql": []}, {"question_id": 1244, "answer_sql": ["SELECT P.ID, P.SEX, P.Birthday, P.Description, P.`First Date`, P.Admission, P.Diagnosis FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE P.`First Date` > '1992-01-01' AND E.`aCL IgG` < 14 AND E.`aCL IgM` < 14 AND E.`aCL IgA` < 14 AND L.PT < 14;"]}, {"question_id": 1245, "answer_sql": []}, {"question_id": 1246, "answer_sql": []}, {"question_id": 1247, "answer_sql": ["SELECT COUNT(DISTINCT Patient.ID) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.SEX = 'M' AND Laboratory.WBC BETWEEN 3.5 AND 9.0 AND Laboratory.FG BETWEEN 150 AND 450;", "SELECT COUNT(*) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Sex = 'M' AND WBC BETWEEN 3.5 AND 9.0 AND FG >= 150 OR FG <= 450;"]}, {"question_id": 1248, "answer_sql": ["SELECT COUNT(DISTINCT Patient.ID) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.Birthday > '1980-01-01' AND Laboratory.FG BETWEEN 150 AND 450;"]}, {"question_id": 1249, "answer_sql": ["SELECT Patient.Diagnosis FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.`U-PRO` >= 30;"]}, {"question_id": 1250, "answer_sql": ["SELECT Patient.ID FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.TP < 30 AND Patient.Diagnosis = 'SLE';", "SELECT Patient.ID FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID JOIN Examination ON Patient.ID = Examination.ID WHERE Laboratory.`U-PRO` BETWEEN 0 AND 30 AND Patient.Diagnosis = 'SLE';", "SELECT Patient.ID FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE `U-PRO` BETWEEN 0 AND 30 AND Diagnosis = 'SLE';"]}, {"question_id": 1251, "answer_sql": ["SELECT COUNT(*) FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.`aCL IgG` < 900 AND Examination.Symptoms = 'abortion';"]}, {"question_id": 1252, "answer_sql": ["SELECT COUNT(*) FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.`aCL IgG` BETWEEN 900 AND 2000 AND Examination.Symptoms IS NOT NULL;", "SELECT COUNT(*) FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE IGG BETWEEN 900 AND 2000 AND Symptoms IS NOT NULL;"]}, {"question_id": 1253, "answer_sql": ["SELECT Patient.Diagnosis FROM Patient JOIN ( SELECT * FROM Laboratory WHERE IGA BETWEEN 80 AND 500 ORDER BY TG DESC LIMIT 1 ) Lab ON Patient.ID = Lab.ID"]}, {"question_id": 1254, "answer_sql": ["SELECT COUNT(*) FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.`aCL IgA` BETWEEN 80 AND 500 AND strftime('%Y', Examination.`Examination Date`) >= '1990';"]}, {"question_id": 1255, "answer_sql": []}, {"question_id": 1256, "answer_sql": ["SELECT COUNT(*) FROM Patient LEFT JOIN Laboratory ON Patient.ID = Laboratory.ID LEFT JOIN Examination ON Patient.ID = Examination.ID WHERE Laboratory.CRP IS NULL AND Patient.Description IS NULL;", "SELECT COUNT(*) FROM Patient LEFT JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.CRP IS NULL OR Laboratory.CRP < 1.0 AND Patient.Description IS NULL;", "SELECT COUNT(*) FROM Laboratory LEFT JOIN Patient ON Laboratory.ID = Patient.ID WHERE Laboratory.CRP IS NOT NULL AND Patient.Description IS NULL;"]}, {"question_id": 1257, "answer_sql": ["SELECT COUNT(*) FROM Patient WHERE ID NOT IN (SELECT Patient.ID FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.CRP NOT IN ('+-', '-') AND Laboratory.CRP >= 1.0) AND SUBSTR(Birthday, 6, 2) < 18;"]}, {"question_id": 1258, "answer_sql": ["SELECT COUNT(*) FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.KCT = '+' AND Examination.RVVT = 'normal Rhuematoid Factor';"]}, {"question_id": 1259, "answer_sql": []}, {"question_id": 1260, "answer_sql": []}, {"question_id": 1261, "answer_sql": ["SELECT COUNT(*) FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Examination.`aCL IgG` = 0 AND Examination.`aCL IgM` = 0 AND Examination.`aCL IgA` = 0 AND Examination.Thrombosis = 0 AND Examination.`ANA Pattern` = 'Normal' AND Examination.`aCL IgG` < 20;"]}, {"question_id": 1262, "answer_sql": ["SELECT COUNT(DISTINCT Patient.ID) FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Examination.`ANA Pattern` = 'P' AND Laboratory.C3 > 35;"]}, {"question_id": 1263, "answer_sql": ["SELECT Patient.ID FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.`aCL IgA` = ( SELECT MAX(`aCL IgA`) FROM Examination WHERE Examination.`aCL IgG` < 29 OR Examination.`aCL IgG` > 52 )"]}, {"question_id": 1264, "answer_sql": ["SELECT COUNT(*) FROM Examination JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Laboratory.C4 > 10 AND Examination.Thrombosis = 1;"]}, {"question_id": 1265, "answer_sql": []}, {"question_id": 1266, "answer_sql": ["SELECT Patient.Birthday FROM Patient WHERE Patient.Birthday = (SELECT MAX(Birthday) FROM Patient WHERE Patient.Diagnosis = 'abnormal anti-ribonuclear protein level')", "SELECT Patient.Birthday FROM Patient WHERE Patient.Birthday = ( SELECT MAX(Patient.Birthday) FROM Patient WHERE Patient.Diagnosis NOT IN ('-', '+-') );"]}, {"question_id": 1267, "answer_sql": ["SELECT COUNT(*) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID JOIN Examination ON Patient.ID = Examination.ID WHERE Laboratory.SM = 'negative' AND Examination.Thrombosis = '1';"]}, {"question_id": 1268, "answer_sql": ["SELECT P.ID FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.SM NOT IN ('-', '+-') GROUP BY P.ID ORDER BY P.Birthday DESC LIMIT 3;", "SELECT Patient.ID, Patient.Birthday FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.SM NOT IN ('-', '+-') ORDER BY Patient.Birthday DESC LIMIT 3;", "SELECT Patient.ID FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.SM NOT IN ('-', '+-') ORDER BY Patient.Birthday DESC LIMIT 3;", "SELECT Patient.ID FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.SM NOT IN ('-', '+-') ORDER BY Patient.Birthday DESC LIMIT 3;", "SELECT Patient.ID FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID JOIN Examination ON Patient.ID = Examination.ID WHERE Laboratory.SM NOT IN ('-', '+-') AND Patient.Birthday = ( SELECT MIN(Birthday) FROM Patient WHERE Birthday > '2000-01-01' ) ORDER BY Patient.ID DESC LIMIT 3;"]}, {"question_id": 1269, "answer_sql": []}, {"question_id": 1270, "answer_sql": ["SELECT COUNT(*) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON L.ID = E.ID WHERE SC170 = 'normal' AND Symptoms = 'vertigo' AND Sex = 'M';"]}, {"question_id": 1271, "answer_sql": []}, {"question_id": 1272, "answer_sql": []}, {"question_id": 1273, "answer_sql": []}, {"question_id": 1274, "answer_sql": []}, {"question_id": 1275, "answer_sql": ["SELECT COUNT(*) FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE CENTROMEA IN ('-', '+-') AND SSB IN ('-', '+-') AND Sex = 'M';"]}, {"question_id": 1276, "answer_sql": ["SELECT P.Diagnosis FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.`DNA-II` >= 8"]}, {"question_id": 1277, "answer_sql": ["SELECT COUNT(DISTINCT Patient.ID) FROM Patient WHERE Patient.Description IS NULL AND Patient.`First Date` < '1990-01-01' AND Patient.Diagnosis = 'normal anti-DNA level';", "SELECT COUNT(DISTINCT Patient.ID) FROM Patient WHERE Patient.Description IS NULL AND Patient.`First Date` IS NOT NULL AND Patient.Diagnosis IS NOT NULL AND Patient.Admission IS NOT NULL AND Patient.Birthday IS NOT NULL AND Patient.SEX IS NOT NULL;", "SELECT COUNT(DISTINCT Patient.ID) FROM Patient WHERE Patient.Description IS NULL AND Patient.`First Date` < '1990-01-01' AND Patient.Diagnosis <> 'normal';"]}, {"question_id": 1278, "answer_sql": ["SELECT COUNT(*) FROM Patient WHERE ID IN (SELECT Patient.ID FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE `DNA-II` < 8 AND Admission = '+');"]}, {"question_id": 1279, "answer_sql": []}, {"question_id": 1280, "answer_sql": []}, {"question_id": 1281, "answer_sql": ["SELECT MIN(Birthday) as youngest_born FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.GOT >= 60;", "SELECT P.Birthday FROM Patient P WHERE P.ID IN ( SELECT P.ID FROM Patient P INNER JOIN Laboratory L ON P.ID = L.ID WHERE L.GOT >= 60 GROUP BY P.ID ORDER BY P.ID LIMIT 1 )"]}, {"question_id": 1282, "answer_sql": ["SELECT P.Birthday FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.GPT < 60 ORDER BY L.GPT DESC LIMIT 3;"]}, {"question_id": 1283, "answer_sql": ["SELECT COUNT(*) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.GOT < 60 AND Patient.Sex = 'M';"]}, {"question_id": 1284, "answer_sql": []}, {"question_id": 1285, "answer_sql": []}, {"question_id": 1286, "answer_sql": []}, {"question_id": 1287, "answer_sql": ["SELECT COUNT(*) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.ALP < 300;"]}, {"question_id": 1288, "answer_sql": ["SELECT Patient.Diagnosis FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.TP < 6.0;"]}, {"question_id": 1289, "answer_sql": ["SELECT Patient.ID FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Examination.Diagnosis = 'SJS' AND Laboratory.TP BETWEEN 6.0 AND 8.5;", "SELECT COUNT(*) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Diagnosis = 'SJS' AND TP BETWEEN 6.0 AND 8.5;"]}, {"question_id": 1290, "answer_sql": []}, {"question_id": 1291, "answer_sql": ["SELECT COUNT(*) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Sex = 'M' AND ALB > 3.5 AND ALB < 5.5 AND TP BETWEEN 6.0 AND 8.5;"]}, {"question_id": 1292, "answer_sql": []}, {"question_id": 1293, "answer_sql": ["SELECT MAX(Examination.`aCL IgG`) as `aCL IgG` FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Laboratory.CRE < 1.5;"]}, {"question_id": 1294, "answer_sql": []}, {"question_id": 1295, "answer_sql": ["SELECT COUNT(*) FROM Laboratory JOIN Examination ON Laboratory.ID = Examination.ID WHERE `T-BIL` >= 2.0 AND ANA LIKE '%P%';"]}, {"question_id": 1296, "answer_sql": []}, {"question_id": 1297, "answer_sql": []}, {"question_id": 1298, "answer_sql": []}, {"question_id": 1299, "answer_sql": ["SELECT COUNT(*) FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.TG < 200 GROUP BY Patient.ID HAVING Symptoms IS NOT NULL;"]}, {"question_id": 1300, "answer_sql": ["SELECT Examination.Diagnosis FROM Examination JOIN Patient ON Examination.ID = Patient.ID JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Patient.SEX = 'Male' AND Laboratory.TG BETWEEN 50 AND 199 ORDER BY Laboratory.TG DESC LIMIT 1;", "SELECT P.Diagnosis FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.TG < 200 AND P.Diagnosis IS NOT NULL GROUP BY P.ID, P.Diagnosis ORDER BY MAX(L.TG) DESC LIMIT 1;"]}, {"question_id": 1301, "answer_sql": []}, {"question_id": 1302, "answer_sql": []}, {"question_id": 1303, "answer_sql": ["SELECT P.Birthday FROM Patient P WHERE P.ID = (SELECT MIN(P1.ID) FROM Patient P1 WHERE P1.Description = (SELECT MIN(L1.Date) FROM Laboratory L1 WHERE L1.GLU > 180));", "SELECT P.Birthday FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.GLU > 180 ORDER BY P.Birthday ASC LIMIT 1;"]}, {"question_id": 1304, "answer_sql": ["SELECT COUNT(*) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID JOIN Examination ON Patient.ID = Examination.ID WHERE Laboratory.GLU < 180 AND Examination.Thrombosis = 0;"]}, {"question_id": 1305, "answer_sql": []}, {"question_id": 1306, "answer_sql": ["SELECT COUNT(*) FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Examination.Diagnosis = 'SLE' AND Laboratory.WBC BETWEEN 3.5 AND 9.0;"]}, {"question_id": 1307, "answer_sql": ["SELECT Patient.ID FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.RBC BETWEEN 3.5 AND 6.0 AND Patient.Admission = '-';", "SELECT Patient.ID FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE (Laboratory.RBC < 3.5 OR Laboratory.RBC > 6.0) AND Patient.Admission = '-';"]}, {"question_id": 1308, "answer_sql": ["SELECT COUNT(*) FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.ID IN ( SELECT Patient.ID FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.`aCL IgG` = 0 AND Examination.`aCL IgG` = 0 AND Examination.Diagnosis IS NOT NULL ) AND Laboratory.PLT BETWEEN 100 AND 400;", "SELECT COUNT(*) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE PLT > 100 AND PLT < 400 AND Diagnosis IS NOT NULL;", "SELECT COUNT(*) FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.Diagnosis IS NOT NULL AND Laboratory.PLT BETWEEN 100 AND 400;", "SELECT COUNT(*) FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.ID IN ( SELECT Patient.ID FROM Patient WHERE PLT > 100 AND PLT < 400 ) AND Examination.Diagnosis IS NOT NULL;"]}, {"question_id": 1309, "answer_sql": ["SELECT Patient.ID, Patient.Diagnosis, Laboratory.PLT FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.PLT > 100 AND Laboratory.PLT < 400 AND Patient.Diagnosis = 'MCTD';"]}, {"question_id": 1310, "answer_sql": []}, {"question_id": 1311, "answer_sql": ["SELECT Patient.ID, COUNT(*) as Severe_Thrombosis_Normal_PT FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Examination.Thrombosis = 2 AND Laboratory.PT < 14 GROUP BY Patient.ID;", "SELECT COUNT(*) FROM Examination e JOIN Patient p ON e.ID = p.ID JOIN Laboratory l ON p.ID = l.ID WHERE e.Thrombosis = 2 AND l.PT < 14;", "SELECT Patient.ID FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Examination.Thrombosis = 2 OR Examination.Thrombosis = 1 AND Laboratory.PT < 14;"]}, {"question_id": 1312, "answer_sql": []}, {"question_id": 1313, "answer_sql": ["SELECT COUNT(*) FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.college = 'College of Engineering';", "SELECT COUNT(*) FROM member WHERE link_to_major = 'Engineering';"]}, {"question_id": 1314, "answer_sql": ["SELECT first_name || ' ' || last_name AS full_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'Art and Design';"]}, {"question_id": 1315, "answer_sql": []}, {"question_id": 1316, "answer_sql": ["SELECT phone FROM member JOIN attendance ON member.member_id = attendance.link_to_member JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer';"]}, {"question_id": 1317, "answer_sql": ["SELECT COUNT(*) FROM member JOIN attendance ON member.member_id = attendance.link_to_member JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer' AND member.t_shirt_size = 'Medium' AND member.position = 'Student';", "SELECT COUNT(*) FROM member JOIN attendance ON member.member_id = attendance.link_to_member JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer' AND member.t_shirt_size = 'Medium'"]}, {"question_id": 1318, "answer_sql": ["SELECT event_name FROM event JOIN attendance ON event.event_id = attendance.link_to_event GROUP BY event_name ORDER BY COUNT(attendance.link_to_event) DESC LIMIT 1;"]}, {"question_id": 1319, "answer_sql": []}, {"question_id": 1320, "answer_sql": []}, {"question_id": 1321, "answer_sql": ["SELECT COUNT(*) FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN event ON attendance.link_to_event = event.event_id WHERE member.first_name = 'Sacha' AND member.last_name = 'Harrison' AND event.event_date LIKE '%2019%';"]}, {"question_id": 1322, "answer_sql": ["SELECT event.event_name FROM event JOIN attendance ON event.event_id = attendance.link_to_event WHERE attendance.link_to_member IN ( SELECT member_id FROM member GROUP BY member_id HAVING COUNT(member_id) > 10 ) AND event.type = 'Meeting';", "SELECT COUNT(*) FROM event WHERE type = 'Meeting' AND status = 'Attended' AND (SELECT COUNT(link_to_event) FROM attendance WHERE link_to_event = event.event_id) > 10;"]}, {"question_id": 1323, "answer_sql": ["SELECT event_name FROM event WHERE (SELECT COUNT(link_to_event) FROM attendance WHERE link_to_event = event.event_id) > 20;"]}, {"question_id": 1324, "answer_sql": []}, {"question_id": 1325, "answer_sql": ["SELECT MAX(cost) FROM expense JOIN budget ON expense.link_to_budget = budget.budget_id WHERE expense_description LIKE '%club events%';"]}, {"question_id": 1326, "answer_sql": ["SELECT COUNT(*) FROM member WHERE link_to_major = 'Environmental Engineering';"]}, {"question_id": 1327, "answer_sql": ["SELECT first_name || ' ' || last_name AS full_name FROM member JOIN attendance ON member.member_id = attendance.link_to_member JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Laugh Out Loud';"]}, {"question_id": 1328, "answer_sql": ["SELECT last_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE major_name = 'Law and Constitutional Studies' ORDER BY last_name;", "SELECT last_name FROM member WHERE link_to_major = (SELECT major_id FROM major WHERE major_name = 'Law and Constitutional Studies');"]}, {"question_id": 1329, "answer_sql": ["SELECT county FROM zip_code WHERE city = 'Sherri Ramsey' AND state = 'TX';"]}, {"question_id": 1330, "answer_sql": ["SELECT college FROM major WHERE major_id = (SELECT link_to_major FROM member WHERE first_name = 'Tyler' AND last_name = 'Hewitt');", "SELECT college FROM major WHERE major_id = (SELECT link_to_major FROM member WHERE member_id = (SELECT link_to_member FROM attendance WHERE link_to_event = 'Event_ID_HERE'));"]}, {"question_id": 1331, "answer_sql": ["SELECT amount FROM income WHERE source = 'Vice President'"]}, {"question_id": 1332, "answer_sql": ["SELECT SUM(budget.remaining) FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'September Meeting' AND budget.category = 'Food';", "SELECT spent FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE category = 'Food' AND event_name = 'September Meeting';", "SELECT SUM(budget.amount) as total_spent FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'September Meeting' AND budget.category = 'Food';"]}, {"question_id": 1333, "answer_sql": []}, {"question_id": 1334, "answer_sql": ["SELECT first_name || ' ' || last_name AS full_name FROM member JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.state = 'IL';"]}, {"question_id": 1335, "answer_sql": ["SELECT SUM(remaining) as total_spent FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE category = 'Advertisement' AND event_name = 'September Meeting';", "SELECT spent FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE category = 'Advertisement' AND event_name = 'September Meeting';"]}, {"question_id": 1336, "answer_sql": ["SELECT department FROM major WHERE major_name IN (SELECT major_name FROM member WHERE first_name='Pierce' AND last_name='Guidi');"]}, {"question_id": 1337, "answer_sql": ["SELECT SUM(amount) FROM budget WHERE event_status = 'October Speaker';"]}, {"question_id": 1338, "answer_sql": ["SELECT COUNT(*) FROM expense WHERE link_to_budget IN (SELECT budget_id FROM budget WHERE event_status = 'approved' AND link_to_event = '2019-10-08') AND approved = True;"]}, {"question_id": 1339, "answer_sql": ["SELECT AVG(expense.cost + income.amount - budget.spent) AS total_average_cost FROM expense JOIN income ON expense.link_to_member = income.link_to_member JOIN budget ON expense.link_to_budget = budget.budget_id WHERE expense.expense_date BETWEEN '2022-09-01' AND '2022-10-31'"]}, {"question_id": 1340, "answer_sql": ["SELECT SUM(spent.remaining) as total_spent FROM ( SELECT b.category, b.spent, b.remaining, b.amount, e.expense_description, e.cost, e.approved, e.link_to_member, e.link_to_budget FROM budget b JOIN expense e ON b.budget_id = e.link_to_budget WHERE b.event_status = 'approved' AND e.approved = 'yes' AND e.expense_description = 'Student Club' UNION SELECT b.category, b.spent, b.remaining, b.amount, '', '', '', '', '' FROM budget b WHERE b.event_status = 'approved' AND b.budget_id NOT IN (SELECT link_to_budget FROM expense WHERE expense_description = 'Student Club') ) spent"]}, {"question_id": 1341, "answer_sql": ["SELECT location FROM event WHERE event_name = 'Spring Budget Review';"]}, {"question_id": 1342, "answer_sql": ["SELECT b.spent FROM budget b JOIN event e ON b.link_to_event = e.event_id WHERE e.event_name = 'Poster' AND e.event_date = '2019-09-04';"]}, {"question_id": 1343, "answer_sql": ["SELECT remaining FROM budget WHERE category = 'Food' ORDER BY remaining DESC LIMIT 1;", "SELECT remaining FROM budget WHERE category = 'Food';"]}, {"question_id": 1344, "answer_sql": ["SELECT notes FROM income WHERE date_received = '2019-09-14' AND source = 'Fundraising';"]}, {"question_id": 1345, "answer_sql": ["SELECT COUNT(*) FROM major WHERE college = 'College of Humanities and Social Sciences';"]}, {"question_id": 1346, "answer_sql": ["SELECT phone FROM member WHERE first_name = 'Carlo' AND last_name = 'Jacobs';"]}, {"question_id": 1347, "answer_sql": ["SELECT county FROM zip_code WHERE short_state = 'TX' AND city = 'Adela O''Gallagher';"]}, {"question_id": 1348, "answer_sql": ["SELECT COUNT(*) FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'November Meeting' AND budget.remaining < 0;", "SELECT COUNT(*) FROM budget WHERE event_status = 'exceeded' AND link_to_event = 'November Meeting';"]}, {"question_id": 1349, "answer_sql": ["SELECT SUM(amount) as total_budget_amount FROM budget WHERE event_status = 'September Speaker';"]}, {"question_id": 1350, "answer_sql": []}, {"question_id": 1351, "answer_sql": ["SELECT major.major_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.member_id = 'member_id_brent_thomason';"]}, {"question_id": 1352, "answer_sql": ["SELECT COUNT(*) FROM member WHERE link_to_major = 'Human Development and Family Studies' AND t_shirt_size = 'Large';"]}, {"question_id": 1353, "answer_sql": []}, {"question_id": 1354, "answer_sql": []}, {"question_id": 1355, "answer_sql": []}, {"question_id": 1356, "answer_sql": ["SELECT major.department FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'President';", "SELECT major.major_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'President';"]}, {"question_id": 1357, "answer_sql": ["SELECT date_received FROM income WHERE source = 'Dues'", "SELECT date_received FROM income JOIN member ON income.link_to_member = member.member_id WHERE source = 'Dues' AND first_name = 'Connor' AND last_name = 'Hilton';"]}, {"question_id": 1358, "answer_sql": []}, {"question_id": 1359, "answer_sql": []}, {"question_id": 1360, "answer_sql": []}, {"question_id": 1361, "answer_sql": ["SELECT SUM(cost) as Total_Cost_of_Pizzas FROM expense JOIN budget ON expense.link_to_budget = budget.budget_id JOIN event ON budget.link_to_event = event.event_id WHERE expense_description = 'Pizza';"]}, {"question_id": 1362, "answer_sql": ["SELECT COUNT(DISTINCT city) FROM zip_code WHERE state = 'Virginia' AND county = 'Orange';"]}, {"question_id": 1363, "answer_sql": ["SELECT department FROM major WHERE college = 'College of Humanities and Social Sciences';", "SELECT DISTINCT department FROM major WHERE college='College of Humanities and Social Sciences';"]}, {"question_id": 1364, "answer_sql": ["SELECT county, city, state FROM zip_code WHERE short_state = 'TX' AND city = 'Amarillo';", "SELECT county, city, state FROM zip_code WHERE short_state = 'TX' AND city = 'Amarillo' AND state = 'TX';", "SELECT county, city, state FROM zip_code WHERE short_state = 'TX' AND zip_code = '75001';"]}, {"question_id": 1365, "answer_sql": []}, {"question_id": 1366, "answer_sql": ["SELECT member.first_name, member.last_name FROM member JOIN attendance ON member.member_id = attendance.link_to_member JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'October Meeting';", "SELECT m.member_id, m.first_name, m.last_name FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE e.event_name = 'October Meeting';", "SELECT m.member_id, m.first_name, m.last_name, m.email, m.position, m.t_shirt_size, m.phone, m.zip, m.link_to_major, m.first_name || ' ' || m.last_name as full_name FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE e.event_name = 'October Meeting';", "SELECT member.first_name, member.last_name FROM member JOIN attendance ON member.member_id = attendance.link_to_member WHERE attendance.link_to_event = 'October Meeting';"]}, {"question_id": 1367, "answer_sql": []}, {"question_id": 1368, "answer_sql": ["SELECT major.major_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.phone = '809-555-3360';"]}, {"question_id": 1369, "answer_sql": ["SELECT event_name, MAX(amount) FROM budget JOIN event ON budget.link_to_event = event.event_id GROUP BY event_name ORDER BY MAX(amount) DESC LIMIT 1;"]}, {"question_id": 1370, "answer_sql": ["SELECT e.expense_description FROM expense e JOIN member m ON e.link_to_member = m.member_id JOIN member mp ON m.link_to_major = mp.link_to_major WHERE m.position = 'Vice President' AND e.approved = 'Yes';"]}, {"question_id": 1371, "answer_sql": ["SELECT COUNT(*) FROM attendance JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer';"]}, {"question_id": 1372, "answer_sql": ["SELECT date_received FROM income WHERE link_to_member = (SELECT member_id FROM member WHERE first_name = 'Casey' AND last_name = 'Mason');"]}, {"question_id": 1373, "answer_sql": []}, {"question_id": 1374, "answer_sql": ["SELECT COUNT(*) FROM attendance WHERE link_to_member = (SELECT member_id FROM member WHERE phone = '954-555-6240');"]}, {"question_id": 1375, "answer_sql": ["SELECT first_name, last_name FROM member WHERE link_to_major = 'School of Applied Sciences, Technology and Education';"]}, {"question_id": 1376, "answer_sql": []}, {"question_id": 1377, "answer_sql": ["SELECT COUNT(*) FROM member WHERE position = 'President';"]}, {"question_id": 1378, "answer_sql": ["SELECT MAX(spent) FROM budget;"]}, {"question_id": 1379, "answer_sql": []}, {"question_id": 1380, "answer_sql": ["SELECT SUM(spent) FROM budget WHERE category = 'Food';"]}, {"question_id": 1381, "answer_sql": ["SELECT first_name, last_name FROM member WHERE member_id IN ( SELECT link_to_member FROM attendance GROUP BY link_to_member HAVING COUNT(link_to_event) > 7 );"]}, {"question_id": 1382, "answer_sql": []}, {"question_id": 1383, "answer_sql": ["SELECT first_name, last_name FROM member WHERE zip = (SELECT zip_code FROM zip_code WHERE state = 'South Carolina' AND city = 'Georgetown');"]}, {"question_id": 1384, "answer_sql": ["SELECT SUM(amount) FROM income WHERE link_to_member = (SELECT member_id FROM member WHERE first_name = 'Grant' AND last_name = 'Gilmour');"]}, {"question_id": 1385, "answer_sql": []}, {"question_id": 1386, "answer_sql": ["SELECT SUM(expense.cost) as TotalExpense FROM expense JOIN budget ON expense.link_to_budget = budget.budget_id WHERE budget.category = 'Yearly Kickoff';", "SELECT SUM(expense.cost) as total_expense FROM expense JOIN budget ON expense.link_to_budget = budget.budget_id JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'Yearly Kickoff';"]}, {"question_id": 1387, "answer_sql": ["SELECT member.first_name, member.last_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Yearly Kickoff';"]}, {"question_id": 1388, "answer_sql": ["SELECT first_name, last_name, source FROM member m JOIN income i ON m.member_id = i.link_to_member WHERE i.amount = (SELECT MAX(amount) FROM income)"]}, {"question_id": 1389, "answer_sql": []}, {"question_id": 1390, "answer_sql": []}, {"question_id": 1391, "answer_sql": []}, {"question_id": 1392, "answer_sql": ["SELECT source FROM income WHERE date_received BETWEEN '2019-09-01' AND '2019-09-30' ORDER BY amount DESC LIMIT 1;", "SELECT source FROM income WHERE date_received BETWEEN '2019-09-01' AND '2019-09-30' GROUP BY source ORDER BY SUM(amount) DESC;"]}, {"question_id": 1393, "answer_sql": ["SELECT first_name || ' ' || last_name as full_name, email FROM member WHERE position = 'Secretary' AND link_to_major = 'Student Club';"]}, {"question_id": 1394, "answer_sql": ["SELECT COUNT(*) FROM member WHERE link_to_major = 'Physics Teaching';", "SELECT COUNT(*) FROM member JOIN major ON member.link_to_major = major.major_id WHERE major_name = 'Physics Teaching';"]}, {"question_id": 1395, "answer_sql": []}, {"question_id": 1396, "answer_sql": []}, {"question_id": 1397, "answer_sql": ["SELECT AVG(spent) FROM budget WHERE category = 'Food' AND event_status = 'Closed';", "SELECT AVG(spent) FROM (SELECT SUM(spent) as spent FROM budget WHERE category = 'Food' AND event_status = 'Closed') as total;"]}, {"question_id": 1398, "answer_sql": []}, {"question_id": 1399, "answer_sql": ["SELECT e.event_name FROM event e JOIN attendance a ON e.event_id = a.link_to_event JOIN member m ON a.link_to_member = m.member_id WHERE m.first_name = 'Maya' AND m.last_name = 'Mclean' AND e.event_name = 'Women''s Soccer';", "SELECT e.event_name FROM event e JOIN attendance a ON e.event_id = a.link_to_event WHERE a.link_to_member = 'Maya Mclean';", "SELECT m.first_name, m.last_name FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE e.event_name = 'Women''s Soccer' AND m.first_name = 'Maya' AND m.last_name = 'Mclean';"]}, {"question_id": 1400, "answer_sql": ["SELECT (SUM(CASE WHEN type = 'Community Service' THEN 1 ELSE 0 END)) * 100 / (SUM(CASE WHEN type IS NOT NULL THEN 1 ELSE 0 END)) AS percentage_share FROM event WHERE event_date BETWEEN '2019-01-01' AND '2019-12-31';", "SELECT (SUM(CASE WHEN type = 'Community Service' THEN 1 ELSE 0 END)) * 100 / (SUM(CASE WHEN type = 'Community Service' THEN 1 ELSE 0 END) + SUM(CASE WHEN type = 'Other' THEN 1 ELSE 0 END)) AS percentage_share FROM event WHERE event_date BETWEEN '2019-01-01' and '2019-12-31';"]}, {"question_id": 1401, "answer_sql": []}, {"question_id": 1402, "answer_sql": ["SELECT t_shirt_size, COUNT(t_shirt_size) as count FROM member GROUP BY t_shirt_size ORDER BY count DESC LIMIT 1;"]}, {"question_id": 1403, "answer_sql": ["SELECT event_name FROM event e JOIN ( SELECT link_to_event, MIN(remaining) as min_remaining FROM budget b WHERE remaining < 0 GROUP BY link_to_event ) b ON e.event_id = b.link_to_event WHERE e.status = 'Closed';"]}, {"question_id": 1404, "answer_sql": ["SELECT e.expense_description, SUM(e.cost) as total_value FROM expense e JOIN budget b ON e.link_to_budget = b.budget_id JOIN event ee ON b.link_to_event = ee.event_id WHERE ee.event_name = 'October Meeting' GROUP BY e.expense_description;", "SELECT SUM(expense.cost) AS total_approved_expenses FROM expense JOIN budget ON expense.link_to_budget = budget.budget_id JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'October Meeting';"]}, {"question_id": 1405, "answer_sql": ["SELECT b.category, SUM(b.amount) as total_budgeted FROM budget b JOIN event e ON b.link_to_event = e.event_id WHERE e.event_name = 'April Speaker' GROUP BY b.category ORDER BY total_budgeted ASC;", "SELECT budget.category, budget.amount FROM budget WHERE budget.event_status = 'April Speaker' ORDER BY budget.amount ASC;"]}, {"question_id": 1406, "answer_sql": ["SELECT MAX(amount) as Highest_Budgeted_Amount FROM budget WHERE category = 'Food';"]}, {"question_id": 1407, "answer_sql": ["SELECT category, amount FROM budget WHERE category = 'Advertisement' ORDER BY amount DESC LIMIT 3;", "SELECT category, amount FROM budget WHERE category = 'Advertising' ORDER BY amount DESC LIMIT 3;"]}, {"question_id": 1408, "answer_sql": []}, {"question_id": 1409, "answer_sql": ["SELECT SUM(cost) FROM expense WHERE expense_date = '2019-08-20';"]}, {"question_id": 1410, "answer_sql": ["SELECT m.first_name || ' ' || m.last_name AS full_name, SUM(i.amount) AS total_cost FROM income i JOIN member m ON i.link_to_member = m.member_id WHERE m.member_id = 'rec4BLdZHS2Blfp4v' GROUP BY m.first_name, m.last_name;"]}, {"question_id": 1411, "answer_sql": ["SELECT e.expense_description FROM expense e JOIN member m ON e.link_to_member = m.member_id JOIN member sah ON m.member_id = sah.member_id WHERE m.first_name = 'Sacha' AND m.last_name = 'Harrison';", "SELECT e.expense_description FROM expense e JOIN member m ON e.link_to_member = m.member_id JOIN member sah ON m.member_id = 'sah' WHERE m.first_name = 'Sacha' AND m.last_name = 'Harrison';"]}, {"question_id": 1412, "answer_sql": ["SELECT e.expense_description FROM expense e JOIN member m ON e.link_to_member = m.member_id JOIN major j ON m.link_to_major = j.major_id WHERE m.t_shirt_size = 'X-Large';"]}, {"question_id": 1413, "answer_sql": ["SELECT zip_code.zip_code FROM zip_code JOIN member ON member.zip = zip_code.zip_code WHERE member.member_id IN ( SELECT link_to_member FROM income WHERE amount < 50 )"]}, {"question_id": 1414, "answer_sql": ["SELECT major.major_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Phillip' AND member.last_name = 'Cullen';"]}, {"question_id": 1415, "answer_sql": ["SELECT member.first_name, member.last_name, member.position FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Business';", "SELECT member.position FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Business';", "SELECT position FROM member WHERE link_to_major = 'Business';"]}, {"question_id": 1416, "answer_sql": ["SELECT COUNT(*) FROM member JOIN major ON member.link_to_major = major.major_id WHERE major_name = 'Business' AND t_shirt_size = 'Medium';", "SELECT COUNT(*) FROM member WHERE link_to_major = 'Business' AND t_shirt_size = 'Medium';"]}, {"question_id": 1417, "answer_sql": ["SELECT e.event_name FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE b.remaining > 30;"]}, {"question_id": 1418, "answer_sql": ["SELECT event_name FROM event WHERE location = 'MU 215';"]}, {"question_id": 1419, "answer_sql": ["SELECT event.event_name FROM event WHERE event.event_date = '2020-03-24T12:00:00';"]}, {"question_id": 1420, "answer_sql": []}, {"question_id": 1421, "answer_sql": []}, {"question_id": 1422, "answer_sql": ["SELECT event.event_name FROM event WHERE event.location = 'MU 215';"]}, {"question_id": 1423, "answer_sql": ["SELECT COUNT(*) FROM income WHERE amount = 50;"]}, {"question_id": 1424, "answer_sql": ["SELECT COUNT(*) FROM member WHERE t_shirt_size = 'X-Large';"]}, {"question_id": 1425, "answer_sql": ["SELECT COUNT(*) FROM major WHERE department = 'School of Applied Sciences' AND college = 'The College of Agriculture and Applied Sciences';"]}, {"question_id": 1426, "answer_sql": ["SELECT last_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE major_name = 'Environmental Engineering';"]}, {"question_id": 1427, "answer_sql": ["SELECT budget.category FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE event.location = 'MU 215' AND event.type = 'Guest Speaker' AND budget.spent = 0;"]}, {"question_id": 1428, "answer_sql": []}, {"question_id": 1429, "answer_sql": ["SELECT event_name FROM event WHERE type = 'Social' AND location = 'Vice President' AND location = '900 E. Washington St.';"]}, {"question_id": 1430, "answer_sql": ["SELECT last_name, position FROM member WHERE email IN (SELECT member_id FROM expense WHERE expense_description = 'Pizza' AND expense_date = '2019-09-10')"]}, {"question_id": 1431, "answer_sql": ["SELECT last_name FROM member JOIN attendance ON member.member_id = attendance.link_to_member JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer';"]}, {"question_id": 1432, "answer_sql": []}, {"question_id": 1433, "answer_sql": ["SELECT state FROM zip_code WHERE short_state = 'PO Box';", "SELECT DISTINCT state FROM zip_code WHERE type = 'PO Box';"]}, {"question_id": 1434, "answer_sql": ["SELECT zip_code.zip_code FROM zip_code WHERE zip_code.type = 'PO Box' AND zip_code.state = 'Puerto Rico';"]}, {"question_id": 1435, "answer_sql": ["SELECT event_name FROM event WHERE type = 'Game' AND status = 'Closed' AND event_date BETWEEN '2019-03-15' AND '2020-03-20';"]}, {"question_id": 1436, "answer_sql": ["SELECT e.event_name, e.event_date, e.location FROM event e JOIN attendance a ON e.event_id = a.link_to_event JOIN member m ON a.link_to_member = m.member_id WHERE m.email IN ( SELECT member_id FROM income WHERE amount > 50 ) AND e.status = 'approved';"]}, {"question_id": 1437, "answer_sql": []}, {"question_id": 1438, "answer_sql": []}, {"question_id": 1439, "answer_sql": ["SELECT phone FROM member WHERE link_to_major = 'major_id_for_business'"]}, {"question_id": 1440, "answer_sql": ["SELECT email FROM member WHERE member_id IN (SELECT link_to_member FROM attendance WHERE link_to_event IN (SELECT event_id FROM event WHERE event_date BETWEEN '2019-09-10' and '2019-11-19')) AND member_id IN (SELECT member_id FROM income WHERE source = 'Payment' AND amount > 20);", "SELECT email FROM member WHERE member_id IN (SELECT link_to_member FROM attendance WHERE link_to_event IN (SELECT event_id FROM event WHERE event_date BETWEEN '2019-09-10' and '2019-11-19')) AND member_id IN (SELECT link_to_member FROM expense WHERE link_to_budget IN (SELECT budget_id FROM budget WHERE amount > 20));"]}, {"question_id": 1441, "answer_sql": ["SELECT COUNT(*) FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'education';"]}, {"question_id": 1442, "answer_sql": []}, {"question_id": 1443, "answer_sql": ["SELECT event_id, location, status FROM event WHERE event_date BETWEEN '2019-11-01' and '2020-03-31' AND type = 'Conducted';", "SELECT event_id, location, status FROM event WHERE event_date BETWEEN '2019-11-01' and '2020-03-31';"]}, {"question_id": 1444, "answer_sql": ["SELECT e.expense_description FROM expense e JOIN (SELECT link_to_budget, AVG(cost) as avg_cost FROM expense GROUP BY link_to_budget) ex ON e.link_to_budget = ex.link_to_budget WHERE ex.avg_cost > 50;", "SELECT e.expense_description FROM expense e JOIN ( SELECT b.budget_id, AVG(b.spent) as avg_spent FROM budget b GROUP BY b.budget_id HAVING AVG(b.spent) > 50 ) b ON e.link_to_budget = b.budget_id WHERE e.cost > 50;", "SELECT e.expense_description FROM expense e JOIN (SELECT AVG(cost) as avg_cost, link_to_budget FROM expense GROUP BY link_to_budget) ex ON e.link_to_budget = ex.link_to_budget WHERE e.cost > ex.avg_cost;", "SELECT e.expense_description FROM expense e JOIN (SELECT AVG(cost) as avg_cost, link_to_budget FROM expense GROUP BY link_to_budget) ex ON e.link_to_budget = ex.link_to_budget WHERE e.cost > ex.avg_cost GROUP BY e.expense_description;"]}, {"question_id": 1445, "answer_sql": ["SELECT first_name || ' ' || last_name AS full_name FROM member WHERE t_shirt_size = 'X-Large';"]}, {"question_id": 1446, "answer_sql": ["SELECT (SUM(zip_code.type = 'PO Box') * 100) / COUNT(zip_code.zip_code) AS percentage_po_boxes FROM zip_code;", "SELECT (SUM(zip_code.type = 'PO Box') / COUNT(zip_code)) * 100 AS percentage_po_boxes FROM zip_code;"]}, {"question_id": 1447, "answer_sql": []}, {"question_id": 1448, "answer_sql": []}, {"question_id": 1449, "answer_sql": ["SELECT first_name || ' ' || last_name AS full_name, major_name FROM member JOIN ( SELECT link_to_member, SUM(cost) AS total_cost FROM expense GROUP BY link_to_member HAVING SUM(cost) > 100 ) AS expense_data ON member.member_id = expense_data.link_to_member JOIN major ON member.link_to_major = major.major_id;"]}, {"question_id": 1450, "answer_sql": []}, {"question_id": 1451, "answer_sql": ["SELECT m.first_name, m.last_name FROM member m JOIN ( SELECT link_to_member FROM attendance GROUP BY link_to_member HAVING COUNT(link_to_event) > 1 ) a ON a.link_to_member = m.member_id JOIN ( SELECT MAX(cost) as max_cost, link_to_member FROM expense GROUP BY link_to_member HAVING COUNT(link_to_budget) > 1 ) e ON e.link_to_member = m.member_id WHERE e.max_cost = ( SELECT MAX(cost) FROM expense WHERE link_to_member IN ( SELECT link_to_member FROM attendance GROUP BY link_to_member HAVING COUNT(link_to_event) > 1 ) ) ORDER BY e.max_cost DESC;", "SELECT MAX(cost) FROM expense WHERE link_to_budget IN (SELECT budget_id FROM budget WHERE event_status = 'approved');", "SELECT m.first_name, m.last_name FROM member m JOIN ( SELECT link_to_member FROM attendance GROUP BY link_to_member HAVING COUNT(link_to_event) > 1 ) a ON a.link_to_member = m.member_id JOIN ( SELECT MAX(cost) as max_cost, link_to_member FROM expense GROUP BY link_to_member HAVING COUNT(link_to_budget) > 1 ) e ON e.link_to_member = m.member_id WHERE e.max_cost = ( SELECT MAX(cost) FROM expense GROUP BY link_to_member HAVING COUNT(link_to_budget) > 1 ) ORDER BY e.max_cost DESC;", "SELECT m.first_name || ' ' || m.last_name AS Member, MAX(e.cost) AS Most_Spent FROM member m JOIN (SELECT link_to_member FROM attendance GROUP BY link_to_member HAVING COUNT(link_to_event) > 1) a ON m.member_id = a.link_to_member JOIN expense e ON m.member_id = e.link_to_member GROUP BY m.member_id ORDER BY Most_Spent DESC LIMIT 1;"]}, {"question_id": 1452, "answer_sql": []}, {"question_id": 1453, "answer_sql": []}, {"question_id": 1454, "answer_sql": []}, {"question_id": 1455, "answer_sql": []}, {"question_id": 1456, "answer_sql": []}, {"question_id": 1457, "answer_sql": []}, {"question_id": 1458, "answer_sql": []}, {"question_id": 1459, "answer_sql": ["SELECT major_name FROM major WHERE major_name = (SELECT link_to_major FROM member WHERE first_name = 'Garrett' AND last_name = 'Gerke');"]}, {"question_id": 1460, "answer_sql": ["SELECT e.expense_description, e.cost FROM expense e JOIN budget b ON e.link_to_budget = b.budget_id JOIN event ee ON b.link_to_event = ee.event_id WHERE e.expense_description = 'Water, Veggie tray, supplies' AND ee.event_name = 'Sponsored event';", "SELECT member .first_name || ' ' || member .last_name AS full_name, expense .expense_description, expense .cost FROM member JOIN expense ON member .member_id = expense .link_to_member JOIN budget ON expense .link_to_budget = budget .budget_id WHERE budget .category = 'Food' AND expense .expense_description = 'Water, Veggie tray, supplies'", "SELECT m.first_name, m.last_name, e.expense_description, e.cost FROM expense e JOIN member m ON e.link_to_member = m.member_id WHERE e.expense_description = 'Water, Veggie tray, supplies'"]}, {"question_id": 1461, "answer_sql": ["SELECT last_name, phone FROM member JOIN major ON member.link_to_major = major.major_id WHERE major_name = 'Elementary Education';"]}, {"question_id": 1462, "answer_sql": ["SELECT budget.category, SUM(budget.amount) as total_budgeted FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'January Speaker' GROUP BY budget.category;", "SELECT budget.category, budget.amount FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'January Speaker';"]}, {"question_id": 1463, "answer_sql": ["SELECT event_name FROM event WHERE type = 'Food';"]}, {"question_id": 1464, "answer_sql": ["SELECT first_name, last_name, amount FROM member JOIN income ON member.member_id = income .link_to_member WHERE date_received = '09/09/2019' AND source = 'Funds';"]}, {"question_id": 1465, "answer_sql": ["SELECT b.category FROM budget b JOIN expense e ON b.budget_id = e.link_to_budget WHERE e.expense_description = 'Posters';"]}, {"question_id": 1466, "answer_sql": []}, {"question_id": 1467, "answer_sql": ["SELECT e.event_name, SUM(b.spent) as total_spent FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE b.category = 'Speaker Gifts' GROUP BY e.event_name;"]}, {"question_id": 1468, "answer_sql": ["SELECT zip_code.city FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.first_name = 'Garrett' AND member.last_name = 'Girke';"]}, {"question_id": 1469, "answer_sql": []}, {"question_id": 1470, "answer_sql": ["SELECT COUNT(*) FROM gasstations WHERE Country = 'CZE' AND Segment = 'Premium';", "SELECT COUNT(*) FROM gasstations JOIN customers ON gasstations.ChainID = customers.CustomerID WHERE customers.Segment = 'CZE' AND customers.Currency = 'Premium';"]}, {"question_id": 1471, "answer_sql": ["SELECT (count(Currency = 'EUR') / count(Currency = 'CZK')) as ratio_eur_czk FROM customers JOIN transactions_1k ON customers.CustomerID = transactions_1k.CustomerID", "SELECT (COUNT(CASE WHEN customers.Currency = 'EUR' THEN 1 END)) / (COUNT(CASE WHEN customers.Currency = 'CZK' THEN 1 END)) FROM customers JOIN transactions_1k ON customers.CustomerID = transactions_1k.CustomerID;"]}, {"question_id": 1472, "answer_sql": ["SELECT customers.CustomerID, customers.Segment, customers.Currency, yearmonth.Date, yearmonth.Consumption FROM customers JOIN ( SELECT CustomerID, Date, SUM(Amount) as Consumption FROM transactions_1k WHERE Date BETWEEN '201201' AND '201212' GROUP BY CustomerID, Date ) as yearmonth ON customers.CustomerID = yearmonth.CustomerID ORDER BY yearmonth.Consumption ASC;", "SELECT customers.CustomerID, customers.Segment, customers.Currency FROM customers JOIN transactions_1k ON customers.CustomerID = transactions_1k .CustomerID JOIN gasstations ON transactions_1k .GasStationID = gasstations.GasStationID WHERE transactions_1k .Date BETWEEN '2012-01-01' AND '2012-12-31' GROUP BY customers.CustomerID ORDER BY MIN( transactions_1k .Amount) ASC;", "SELECT customers.CustomerID, customers.Segment, customers.Currency FROM customers JOIN transactions_1k ON customers.CustomerID = transactions_1k .CustomerID JOIN gasstations ON transactions_1k .GasStationID = gasstations.GasStationID WHERE transactions_1k .Date BETWEEN '2012-01-01' AND '2012-12-31' GROUP BY customers.CustomerID, customers.Segment, customers.Currency ORDER BY COUNT(DISTINCT transactions_1k .ProductID) ASC LIMIT 1;", "SELECT c.CustomerID, SUM(t.Amount) as TotalConsumption FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID WHERE strftime('%Y', t.Date) = '2012' GROUP BY c.CustomerID ORDER BY TotalConsumption ASC LIMIT 1;"]}, {"question_id": 1473, "answer_sql": ["SELECT AVG(Consumption) / 12 FROM ( SELECT Consumption FROM yearmonth WHERE Date BETWEEN '2013-01-01' AND '2013-12-31' AND CustomerID IN ( SELECT CustomerID FROM customers WHERE Segment = 'SME' ) ) AS Consumption_2013;", "SELECT AVG(Consumption) / 12 FROM (SELECT Consumption FROM yearmonth WHERE Date BETWEEN '201301' AND '201312' AND CustomerID IN (SELECT CustomerID FROM customers WHERE Segment = 'SME'));"]}, {"question_id": 1474, "answer_sql": ["SELECT c.CustomerID, COUNT(t.TransactionID) as TotalTransactions FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID JOIN gasstations g ON t.GasStationID = g.GasStationID JOIN products p ON t.ProductID = p.ProductID WHERE t.Date BETWEEN '2011-01-01' AND '2011-12-31' AND c.Currency = 'CZK' GROUP BY c.CustomerID ORDER BY TotalTransactions DESC LIMIT 1;"]}, {"question_id": 1475, "answer_sql": ["SELECT COUNT(*) FROM customers c JOIN transactions_1k t1k ON c.CustomerID = t1k.CustomerID JOIN yearmonth ym ON c.CustomerID = ym.CustomerID WHERE t1k.Date BETWEEN '20120101' AND '20121231' AND ym.Consumption < 30000;", "SELECT t1.CustomerID, COUNT(t1.TransactionID) as ConsumptionCount FROM transactions_1k as t1 JOIN customers as c1 ON t1.CustomerID = c1.CustomerID JOIN gasstations as g1 ON t1.GasStationID = g1.GasStationID JOIN products as p1 ON t1.ProductID = p1.ProductID JOIN yearmonth as y1 ON t1.CustomerID = y1.CustomerID AND t1.Date = y1.Date WHERE t1.Date BETWEEN '201201' AND '201212' AND t1.Amount < 30000 AND c1.Segment = 'KAM' GROUP BY t1.CustomerID, t1.Date HAVING COUNT(t1.TransactionID) < 30000;", "SELECT COUNT(*) FROM transactions_1k AS t1 JOIN yearmonth AS y ON t1.CustomerID = y.CustomerID AND t1.Date BETWEEN '2012-01-01' AND '2012-12-31' JOIN customers AS c ON t1.CustomerID = c.CustomerID WHERE c.Segment IN ('KAM', 'Mumbai', 'Bangalore') AND y.Consumption < 30000;", "SELECT COUNT(*) FROM customers c JOIN yearmonth y ON c.CustomerID = y.CustomerID WHERE y.Date BETWEEN '201201' AND '201212' AND y.Consumption < 30000;", "SELECT COUNT(*) FROM customers c JOIN transactions_1k t1k ON c.CustomerID = t1k.CustomerID JOIN yearmonth ym ON c.CustomerID = ym.CustomerID WHERE t1k.Date BETWEEN '2012-01-01' AND '2012-12-31' AND ym.Consumption < 30000;", "SELECT COUNT(*) FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID WHERE t.Date BETWEEN '2012-01-01' AND '2012-12-31' AND t.Amount < 30000 AND c.Segment = 'KAM';"]}, {"question_id": 1476, "answer_sql": ["SELECT c.CustomerID, SUM(t.Consumption) as TotalConsumption FROM customers c JOIN yearmonth ym ON c.CustomerID = ym.CustomerID JOIN (SELECT CustomerID, SUM(Consumption) as Consumption FROM yearmonth WHERE Date BETWEEN '2012-01-01' AND '2012-12-31' GROUP BY CustomerID) t ON c.CustomerID = t.CustomerID WHERE c.Currency = 'CZK' AND ym.Date BETWEEN '2012-01-01' AND '2012-12-31' GROUP BY c.CustomerID UNION ALL SELECT c.CustomerID, SUM(t.Consumption) as TotalConsumption FROM customers c JOIN yearmonth ym ON c.CustomerID = ym.CustomerID JOIN (SELECT CustomerID, SUM(Consumption) as Consumption FROM yearmonth WHERE Date BETWEEN '2012-01-01' AND '2012-12-31' GROUP BY CustomerID) t ON c.CustomerID = t.CustomerID WHERE c.Currency = 'EUR' AND ym.Date BETWEEN '2012-01-01' AND '2012-12-31' GROUP BY c.CustomerID"]}, {"question_id": 1477, "answer_sql": []}, {"question_id": 1478, "answer_sql": ["SELECT Segment, MIN(Consumption) as MinConsumption FROM ( SELECT c.Segment, y.Date, y.Consumption FROM customers c JOIN yearmonth y ON c.CustomerID = y.CustomerID ) GROUP BY Segment ORDER BY MinConsumption ASC LIMIT 1;", "SELECT customers.Segment, COUNT(*) as Consumption FROM customers JOIN yearmonth ON customers.CustomerID = yearmonth .CustomerID GROUP BY customers.Segment ORDER BY Consumption ASC LIMIT 1;", "SELECT Segment, MIN(Consumption) as MinConsumption FROM ( SELECT c.Segment, y.Date, y.Consumption FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID JOIN yearmonth y ON c.CustomerID = y.CustomerID AND strftime('%Y-%m', y.Date) = date('now', 'start of month') WHERE t.Date BETWEEN date('now', 'start of month') AND date('now', 'end of month') ) GROUP BY Segment ORDER BY MinConsumption ASC LIMIT 1;", "SELECT customers.Segment FROM customers JOIN ( SELECT CustomerID, MIN(Consumption) as Consumption FROM yearmonth GROUP BY CustomerID ) as MinConsumption ON customers.CustomerID = MinConsumption.CustomerID ORDER BY MinConsumption.Consumption ASC LIMIT 1;"]}, {"question_id": 1479, "answer_sql": ["SELECT c.CustomerID, SUM(t.Amount) as TotalAmount FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE strftime('%Y', t.Date) = '2021' GROUP BY t.Date ORDER BY TotalAmount DESC LIMIT 1;", "SELECT yearmonth.Date, SUM(yearmonth.Consumption) as TotalConsumption FROM yearmonth WHERE yearmonth.CustomerID IN (SELECT CustomerID FROM customers WHERE Currency = 'CZK') GROUP BY yearmonth.Date ORDER BY TotalConsumption DESC LIMIT 1;", "SELECT strftime('%Y', Date) as Year, SUM(Amount) as TotalConsumption FROM transactions_1k JOIN customers ON transactions_1k.CustomerID = customers.CustomerID JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE customers.Currency = 'CZK' GROUP BY strftime('%Y', Date) ORDER BY TotalConsumption DESC;"]}, {"question_id": 1480, "answer_sql": ["SELECT strftime('%m', yearmonth.Date) as Month, AVG(Consumption) as AverageConsumption FROM yearmonth WHERE strftime('%Y', Date) = '2013' AND strftime('%S', Date) = '00' AND strftime('%T', Date) = '00' GROUP BY Month ORDER BY AverageConsumption DESC LIMIT 1;", "SELECT MAX(Consumption) FROM ( SELECT y.Date, y.CustomerID, y.Consumption FROM yearmonth y JOIN transactions_1k t ON y.CustomerID = t.CustomerID AND y.Date = DATE(t.Date, 'start of month') WHERE y.Date BETWEEN '2013-01-01' AND '2013-12-31' AND y.CustomerID IN ( SELECT CustomerID FROM customers WHERE Segment = 'SME' ) ) x;"]}, {"question_id": 1481, "answer_sql": ["SELECT Segment, SUM(Consumption) AS TotalConsumption, AVG(Consumption) AS AverageConsumption, SUM(Consumption) - AVG(Consumption) AS Difference FROM (SELECT Customers.Segment, YearMonth.Consumption, ROW_NUMBER() OVER (PARTITION BY YearMonth.CustomerID ORDER BY YearMonth.Consumption ASC) as Rank FROM Customers JOIN YearMonth ON Customers.CustomerID = YearMonth.CustomerID WHERE YearMonth.Date BETWEEN '20130101' AND '20131231' AND YearMonth.Consumption = ( SELECT MIN(YearMonth2.Consumption) FROM YearMonth AS YearMonth2 WHERE YearMonth2.Date BETWEEN '20130101' AND '20131231' AND YearMonth2.CustomerID IN ( SELECT CustomerID FROM Customers WHERE Segment IN ('SME', 'LAM', 'KAM', 'SME') ) ) GROUP BY Customers.CustomerID, YearMonth.Consumption) AS SubQuery WHERE Rank = 1 GROUP BY Segment ORDER BY TotalConsumption DESC;", "SELECT t.GasStationID, g.Segment, AVG(y.Consumption) AS AnnualAverageConsumption FROM transactions_1k AS t JOIN gasstations AS g ON t.GasStationID = g.GasStationID JOIN customers AS c ON t.CustomerID = c.CustomerID JOIN yearmonth AS y ON c.CustomerID = y.CustomerID WHERE c.Segment IN ('SME', 'LAM', 'KAM', 'SME') AND t.Date BETWEEN '2013-01-01' AND '2013-12-31' AND c.Currency = 'CZK' GROUP BY t.GasStationID, g.Segment ORDER BY AnnualAverageConsumption DESC;"]}, {"question_id": 1482, "answer_sql": ["SELECT c.Segment, (SUM(t.Amount) - (SELECT SUM(Amount) FROM transactions_1k WHERE Date BETWEEN '201201' AND '201312' AND CustomerID IN (SELECT CustomerID FROM customers WHERE Segment = 'SME') GROUP BY GasStationID) - (SELECT SUM(Amount) FROM transactions_1k WHERE Date BETWEEN '201201' AND '201312' AND CustomerID IN (SELECT CustomerID FROM customers WHERE Segment = 'LAM') GROUP BY GasStationID)) / (SELECT SUM(Amount) FROM transactions_1k WHERE Date BETWEEN '201301' AND '201312' AND CustomerID IN (SELECT CustomerID FROM customers WHERE Segment = 'SME') GROUP BY GasStationID) * 100 AS Percentage_Increase FROM transactions_1k t JOIN customers c ON t.CustomerID = c.CustomerID WHERE t.Date BETWEEN '201201' AND '201312' GROUP BY c.Segment ORDER BY Percentage_Increase DESC;"]}, {"question_id": 1483, "answer_sql": ["SELECT SUM(Amount) FROM transactions_1k JOIN yearmonth ON transactions_1k.CustomerID = yearmonth.CustomerID AND transactions_1k.Date BETWEEN '2013-08-01' AND '2013-11-30';", "SELECT SUM(Consumption) FROM ( SELECT y.Consumption FROM yearmonth y WHERE y.Date BETWEEN '20130801' AND '20131131' AND y.CustomerID = 6 ) AS t;"]}, {"question_id": 1484, "answer_sql": ["SELECT COUNT(*) FROM gasstations WHERE Country = 'Czech Republic' AND Segment = 'discount';"]}, {"question_id": 1485, "answer_sql": ["SELECT Consumption FROM yearmonth JOIN transactions_1k ON yearmonth.CustomerID = transactions_1k.CustomerID AND yearmonth.Date = '2013-04' WHERE transactions_1k.CustomerID = 7", "SELECT SUM(Consumption) FROM yearmonth WHERE CustomerID = 7 AND Date = '201304';", "SELECT SUM(Consumption) FROM yearmonth JOIN transactions_1k ON yearmonth.CustomerID = transactions_1k.CustomerID AND yearmonth.Date = '201304' WHERE transactions_1k.Date = '201304' AND transactions_1k.CustomerID IN (5, 7);"]}, {"question_id": 1486, "answer_sql": ["SELECT (SELECT COUNT(*) FROM transactions_1k WHERE CustomerID IN (SELECT CustomerID FROM customers WHERE Currency = 'CZK') AND ProductID IN (SELECT ProductID FROM products WHERE Description = 'SME')) - (SELECT COUNT(*) FROM transactions_1k WHERE CustomerID IN (SELECT CustomerID FROM customers WHERE Currency = 'EUR') AND ProductID IN (SELECT ProductID FROM products WHERE Description = 'SME')) as AmountOfMoreSMEs;", "SELECT (SELECT COUNT(*) FROM transactions_1k WHERE CustomerID IN (SELECT CustomerID FROM customers WHERE Currency = 'CZK')) - (SELECT COUNT(*) FROM transactions_1k WHERE CustomerID IN (SELECT CustomerID FROM customers WHERE Currency = 'EUR')) AS AmountOfMoreSMEs;"]}, {"question_id": 1487, "answer_sql": ["SELECT c.CustomerID, c.Segment, c.Currency, SUM(t.Amount) as TotalAmount FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID WHERE c.Currency = 'Euro' AND strftime('%Y%m', t.Date) = '201310' GROUP BY c.CustomerID, c.Segment, c.Currency ORDER BY TotalAmount DESC LIMIT 1;", "SELECT c.CustomerID, c.Segment, sm.Consumption FROM customers c JOIN (SELECT CustomerID, MAX(Consumption) as Consumption FROM yearmonth WHERE Date = '201310' GROUP BY CustomerID) sm ON c.CustomerID = sm.CustomerID WHERE c.Currency = 'EUR'", "SELECT c.CustomerID, c.Segment, SUM(t.Amount) as TotalConsumption FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID JOIN yearmonth y ON c.CustomerID = y.CustomerID AND y.Date = '201310' WHERE c.Currency = 'EUR' GROUP BY c.CustomerID, c.Segment ORDER BY TotalConsumption DESC LIMIT 1;"]}, {"question_id": 1488, "answer_sql": ["SELECT c.CustomerID, SUM(t.Amount) as TotalConsumed FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID JOIN yearmonth y ON c.CustomerID = y.CustomerID AND t.Date = y.Date GROUP BY c.CustomerID ORDER BY TotalConsumed DESC LIMIT 1;", "SELECT c.CustomerID, SUM(t.Amount) as TotalConsumed FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID WHERE c.Segment = 'KAM' GROUP BY c.CustomerID ORDER BY TotalConsumed DESC LIMIT 1;"]}, {"question_id": 1489, "answer_sql": ["SELECT SUM(Consumption) FROM yearmonth WHERE CustomerID IN (SELECT CustomerID FROM customers WHERE Segment = 'KAM') AND Date = '201305';", "SELECT SUM(Consumption) FROM yearmonth WHERE CustomerID IN (SELECT CustomerID FROM customers WHERE Segment = 'KAM') AND Date = '2013-05';"]}, {"question_id": 1490, "answer_sql": ["SELECT t.Date, COUNT(*) AS 'LAM_Customers', SUM(t.Amount) AS 'Total_Amount', (SUM(t.Amount) - AVG(t.Amount)) / AVG(t.Amount) * 100 AS 'Percentage_Consumed_More_Than_46_73' FROM transactions_1k t JOIN customers c ON t.CustomerID = c.CustomerID JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE c.Segment = 'LAM' AND g.ChainID IN (SELECT ChainID FROM gasstations WHERE Segment = 'LAM') GROUP BY t.Date HAVING 'Total_Amount' > 46.73", "SELECT (SUM(Consumption) * 100 / (SELECT COUNT(*) FROM customers WHERE Segment = 'LAM')) FROM yearmonth WHERE CustomerID IN (SELECT CustomerID FROM customers WHERE Segment = 'LAM');", "SELECT (SUM(CASE WHEN transactions_1k .Amount > 46.73 AND transactions_1k .CustomerID IN (SELECT CustomerID FROM customers WHERE Segment = 'LAM') THEN 1 ELSE 0 END)) * 100 / (SUM(CASE WHEN transactions_1k .Amount > 46.73 AND transactions_1k .CustomerID IN (SELECT CustomerID FROM customers WHERE Segment = 'LAM') THEN 1 ELSE 0 END)) * 100 FROM transactions_1k INNER JOIN (SELECT CustomerID FROM customers WHERE Segment = 'LAM') AS LAM_customers ON transactions_1k .CustomerID = LAM_customers.CustomerID;", "SELECT (COUNT(*) * 100.0) / (SELECT COUNT(*) FROM transactions_1k WHERE GasStationID IN (SELECT GasStationID FROM gasstations WHERE ChainID = 1000)) AS Percentage FROM transactions_1k WHERE GasStationID IN (SELECT GasStationID FROM gasstations WHERE ChainID = 1000) AND CustomerID IN (SELECT CustomerID FROM customers WHERE Segment = 'LAM') AND Amount > 46.73;"]}, {"question_id": 1491, "answer_sql": ["SELECT Country, COUNT(*) as 'Number of Value for Money Gas Stations' FROM gasstations JOIN (SELECT GasStationID FROM transactions_1k WHERE Price/Amount > 1 GROUP BY GasStationID) AS GasStationsWithValueForMoneyProducts ON gasstations.GasStationID = GasStationsWithValueForMoneyProducts.GasStationID GROUP BY Country ORDER BY COUNT(*) DESC;", "SELECT Country, COUNT(*) as Value_for_money_Gas_Stations FROM gasstations JOIN (SELECT GasStationID, AVG(Price/Amount) as Value_for_Money FROM transactions_1k GROUP BY GasStationID) as avg_price ON gasstations.GasStationID = avg_price.GasStationID WHERE avg_price.Value_for_Money > 1 GROUP BY Country ORDER BY Value_for_money_Gas_Stations DESC;"]}, {"question_id": 1492, "answer_sql": ["SELECT (SUM(CASE WHEN customers.Currency = 'Euro' THEN 1 ELSE 0 END) * 100.0 / SUM(1)) * 100.0 as Percentage_of_KAM_Customers_Paying_in_Euros FROM transactions_1k JOIN customers ON transactions_1k.CustomerID = customers.CustomerID WHERE customers.Segment = 'KAM';", "SELECT (SUM(t.Amount) * 100) / (SELECT SUM(t2.Amount) FROM transactions_1k t2 WHERE t2.CustomerID IN (SELECT CustomerID FROM customers WHERE Segment = 'KAM') GROUP BY t2.CustomerID) AS Percentage_KAM_Euros FROM transactions_1k t WHERE t.CustomerID IN (SELECT CustomerID FROM customers WHERE Segment = 'KAM');", "SELECT (SUM(Amount)/SUM(Price)*100) * 100 as 'Euro_percentage' FROM transactions_1k WHERE CustomerID IN (SELECT CustomerID FROM customers WHERE Segment = 'KAM')", "SELECT (SUM(CASE WHEN customers.Currency = 'Euro' THEN 1 ELSE 0 END) * 100.0) / (SELECT COUNT(*) FROM customers WHERE customers.Currency = 'Euro') AS Percentage_of_KAM_Customers_Paying_in_Euros FROM transactions_1k JOIN customers ON transactions_1k.CustomerID = customers.CustomerID WHERE customers.Segment = 'KAM';"]}, {"question_id": 1493, "answer_sql": ["SELECT (SUM(Consumption) - (SELECT SUM(Consumption) FROM yearmonth WHERE Date = '201202' AND CustomerID IN (SELECT CustomerID FROM customers WHERE Segment = 'High Importance'))) / (SELECT SUM(Consumption) FROM yearmonth WHERE Date = '201202' AND CustomerID IN (SELECT CustomerID FROM customers WHERE Segment = 'High Importance')) * 100 AS Percentage FROM yearmonth WHERE Date = '201202'", "SELECT c.CustomerID, (SUM(y.Consumption) - t.TotalConsumption) / t.TotalConsumption * 100 as Percentage FROM customers c JOIN (SELECT CustomerID, SUM(Amount) as TotalConsumption FROM transactions_1k WHERE Date = '201202' GROUP BY CustomerID) t ON c.CustomerID = t.CustomerID JOIN (SELECT CustomerID, SUM(Consumption) as Consumption FROM yearmonth WHERE Date = '201202' GROUP BY CustomerID) y ON c.CustomerID = y.CustomerID WHERE y.Consumption > 528.3 GROUP BY c.CustomerID;", "SELECT (SUM(Consumption) - (SELECT SUM(Consumption) FROM yearmonth WHERE Date = '201202')) / (SELECT SUM(Consumption) FROM yearmonth WHERE Date = '201202') * 100 FROM yearmonth WHERE Date = '201202';"]}, {"question_id": 1494, "answer_sql": ["SELECT (SELECT COUNT(*) FROM gasstations WHERE Country = 'Slovakia' AND Segment = 'Premium') / (SELECT COUNT(*) FROM gasstations WHERE Country = 'Slovakia') * 100;"]}, {"question_id": 1495, "answer_sql": ["SELECT c.CustomerID FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID WHERE t.Date = '201309' GROUP BY c.CustomerID ORDER BY SUM(t.Amount) DESC LIMIT 1;"]}, {"question_id": 1496, "answer_sql": ["SELECT customers.Segment FROM customers JOIN yearmonth ON customers.CustomerID = yearmonth .CustomerID WHERE yearmonth .Date = '201309' ORDER BY Consumption ASC LIMIT 1;", "SELECT customers.Segment FROM customers JOIN yearmonth ON customers.CustomerID = yearmonth .CustomerID WHERE yearmonth .Date = '201309' GROUP BY customers.Segment ORDER BY SUM( yearmonth .Consumption) ASC LIMIT 1;"]}, {"question_id": 1497, "answer_sql": ["SELECT customers.CustomerID, customers.Segment, customers.Currency, SUM(transactions_1k.Amount) as TotalConsumed FROM customers JOIN transactions_1k ON customers.CustomerID = transactions_1k.CustomerID JOIN yearmonth ON customers.CustomerID = yearmonth.CustomerID AND yearmonth.Date = '201206' WHERE yearmonth.Date = '201206' GROUP BY customers.CustomerID ORDER BY TotalConsumed ASC LIMIT 1;", "SELECT customers.CustomerID, customers.Segment, customers.Currency FROM customers JOIN yearmonth ON customers.CustomerID = yearmonth .CustomerID WHERE yearmonth .Date = '201206' ORDER BY Consumption ASC LIMIT 1;", "SELECT customers.CustomerID, customers.Segment, customers.Currency FROM customers JOIN transactions_1k ON customers.CustomerID = transactions_1k .CustomerID JOIN gasstations ON transactions_1k .GasStationID = gasstations.GasStationID WHERE strftime('%Y%m', transactions_1k .Date) = '201206' GROUP BY customers.CustomerID ORDER BY MIN( transactions_1k .Amount) ASC LIMIT 1;", "SELECT transactions_1k.CustomerID, SUM(transactions_1k.Amount) as TotalAmount FROM transactions_1k JOIN yearmonth ON transactions_1k.CustomerID = yearmonth.CustomerID WHERE yearmonth.Date = '201206' GROUP BY transactions_1k.CustomerID ORDER BY TotalAmount ASC LIMIT 1;"]}, {"question_id": 1498, "answer_sql": ["SELECT MAX(Consumption) as HighestMonthlyConsumption FROM ( SELECT CustomerID, Date, Consumption FROM yearmonth WHERE Date LIKE '2012-__' ) AS SubQuery;", "SELECT y.Date, y.CustomerID, y.Consumption FROM yearmonth y JOIN transactions_1k t ON y.CustomerID = t.CustomerID AND y.Date = DATE(t.Date, '-1 year') WHERE y.Date BETWEEN '2012-01-01' AND '2012-12-31' GROUP BY y.Date, y.CustomerID ORDER BY y.Consumption DESC;", "SELECT MAX(Consumption) FROM yearmonth WHERE Date LIKE '2012%';"]}, {"question_id": 1499, "answer_sql": ["SELECT c.CustomerID, c.Segment, c.Currency, SUM(t.Amount) as TotalConsumption FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID WHERE c.Currency = 'euro' GROUP BY c.CustomerID, c.Segment, c.Currency ORDER BY TotalConsumption DESC LIMIT 1;"]}, {"question_id": 1500, "answer_sql": ["SELECT p.Description FROM transactions_1k t JOIN products p ON t.ProductID = p.ProductID WHERE t.Date LIKE '2013-09%' AND t.ProductID IN (SELECT ProductID FROM products WHERE Description LIKE '%product_description%');"]}, {"question_id": 1501, "answer_sql": ["SELECT gasstations.Country FROM gasstations JOIN transactions_1k ON gasstations.GasStationID = transactions_1k.GasStationID WHERE strftime('%Y%m', transactions_1k.Date) = '201306' GROUP BY gasstations.Country;"]}, {"question_id": 1502, "answer_sql": []}, {"question_id": 1503, "answer_sql": ["SELECT p.Description FROM transactions_1k t JOIN products p ON t.ProductID = p.ProductID JOIN customers c ON t.CustomerID = c.CustomerID WHERE c.Currency = 'EUR' AND t.ProductID IN ( SELECT ProductID FROM products WHERE Description LIKE '%Euro%' );"]}, {"question_id": 1504, "answer_sql": ["SELECT AVG(Price * Amount) as AverageTotalPrice FROM transactions_1k WHERE strftime('%Y-%m', Date) = '2012-01' AND GasStationID IN ( SELECT GasStationID FROM gasstations WHERE ChainID = 1 );"]}, {"question_id": 1505, "answer_sql": ["SELECT COUNT(*) FROM customers JOIN transactions_1k ON customers.CustomerID = transactions_1k.CustomerID WHERE customers.Currency = 'EUR' AND transactions_1k.Amount > 0 AND transactions_1k.Price > 0 AND transactions_1k.Date LIKE '%2022-01%' GROUP BY customers.CustomerID HAVING SUM(transactions_1k.Amount * transactions_1k.Price) > 1000;", "SELECT COUNT(*) FROM customers JOIN transactions_1k ON customers.CustomerID = transactions_1k.CustomerID JOIN products ON transactions_1k.ProductID = products.ProductID WHERE customers.Currency = 'EUR' AND products.Description = 'Gas' AND transactions_1k.Amount > 1000 AND transactions_1k.Price > 0 AND transactions_1k.Date LIKE '%2022-01%';", "SELECT COUNT(*) FROM customers JOIN transactions_1k ON customers.CustomerID = transactions_1k.CustomerID WHERE customers.Currency = 'EUR' AND transactions_1k.Amount > 0 AND transactions_1k.Price > 0 AND transactions_1k.Price * transactions_1k.Amount > 1000;"]}, {"question_id": 1506, "answer_sql": ["SELECT p.Description FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID JOIN products p ON t.ProductID = p.ProductID WHERE g.Country = 'CZE'", "SELECT products.Description FROM transactions_1k JOIN products ON transactions_1k.ProductID = products.ProductID JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE gasstations.Country = 'CZE' GROUP BY products.Description;", "SELECT products.Description FROM transactions_1k JOIN products ON transactions_1k.ProductID = products.ProductID JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE gasstations.Country = 'CZE' AND transactions_1k.Date >= date('now', '-1 year') GROUP BY products.Description ORDER BY COUNT(*) DESC;"]}, {"question_id": 1507, "answer_sql": ["SELECT DISTINCT t1.Time FROM transactions_1k t1 JOIN gasstations gs ON t1.GasStationID = gs.GasStationID WHERE gs.ChainID = 11;", "SELECT t1.Time FROM transactions_1k t1 JOIN gasstations g1 ON t1.GasStationID = g1.GasStationID JOIN customers c1 ON t1.CustomerID = c1.CustomerID WHERE g1.ChainID = 11 GROUP BY t1.Time ORDER BY t1.Time;", "SELECT t1.Time FROM transactions_1k t1 JOIN gasstations g1 ON t1.GasStationID = g1.GasStationID JOIN customers c1 ON t1.CustomerID = c1.CustomerID WHERE g1.ChainID = 11 ORDER BY t1.Time;", "SELECT DISTINCT t1.Time FROM transactions_1k t1 JOIN gasstations g1 ON t1.GasStationID = g1.GasStationID JOIN customers c1 ON t1.CustomerID = c1.CustomerID JOIN gasstations g2 ON g1.ChainID = g2.ChainID WHERE g2.GasStationID = 11;"]}, {"question_id": 1508, "answer_sql": ["SELECT SUM(Amount) FROM transactions_1k JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE gasstations.Country = 'CZE' AND transactions_1k.Price > 1000;", "SELECT COUNT(*) FROM transactions_1k JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE gasstations.Country = 'CZE' AND transactions_1k.Price > 1000;"]}, {"question_id": 1509, "answer_sql": ["SELECT COUNT(*) FROM transactions_1k JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE gasstations.Country = 'CZE' AND transactions_1k.Date > '2012-01-01';"]}, {"question_id": 1510, "answer_sql": ["SELECT t.CustomerID, p.ProductID, AVG(t.Amount) as AverageTotalPrice FROM transactions_1k as t JOIN gasstations as gs ON t.GasStationID = gs.GasStationID JOIN customers as c ON t.CustomerID = c.CustomerID JOIN products as p ON t.ProductID = p.ProductID WHERE gs.Country = 'CZE' GROUP BY t.CustomerID, p.ProductID;", "SELECT g.Country, DATE(t.Date) as Date, AVG(t.Amount * t.Price) as AverageTotalPrice FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE g.Country = 'CZE' GROUP BY g.Country, DATE(t.Date), t.CustomerID", "SELECT AVG(t.Price * t.Amount) as AverageTotalPrice FROM transactions_1k as t JOIN gasstations as gs ON t.GasStationID = gs.GasStationID JOIN products as p ON t.ProductID = p.ProductID WHERE gs.Country = 'CZE';"]}, {"question_id": 1511, "answer_sql": ["SELECT AVG(Amount * Price) as AverageTotalPrice FROM transactions_1k WHERE CustomerID IN (SELECT CustomerID FROM customers WHERE Currency = 'EUR');"]}, {"question_id": 1512, "answer_sql": ["SELECT transactions_1k.CustomerID, SUM(transactions_1k.Amount) as TotalAmount FROM transactions_1k JOIN ( SELECT CustomerID, Date, Consumption FROM yearmonth WHERE strftime('%Y', Date) = '2012' AND strftime('%m', Date) = '08' ) as YM ON transactions_1k.CustomerID = YM.CustomerID GROUP BY transactions_1k.CustomerID ORDER BY TotalAmount DESC LIMIT 1;", "SELECT transactions_1k.CustomerID, SUM(transactions_1k.Amount) as TotalAmount FROM transactions_1k JOIN customers ON transactions_1k.CustomerID = customers.CustomerID WHERE strftime('%Y', Date) = '2012' AND strftime('%m', Date) = '08' AND strftime('%d', Date) = '25' GROUP BY transactions_1k.CustomerID ORDER BY TotalAmount DESC LIMIT 1;", "SELECT transactions_1k.CustomerID, SUM(transactions_1k.Amount) as TotalAmount FROM transactions_1k JOIN customers ON transactions_1k.CustomerID = customers.CustomerID WHERE strftime('%Y-%m-%d', '2012-08-25') = '2012-08-25' GROUP BY transactions_1k.CustomerID ORDER BY TotalAmount DESC LIMIT 1;", "SELECT c.CustomerID, c.Segment, c.Currency FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID WHERE t.Date = '2012-08-25' ORDER BY t.Amount DESC LIMIT 1;"]}, {"question_id": 1513, "answer_sql": ["SELECT gasstations.Country FROM gasstations JOIN (SELECT CustomerID, MIN(Date) as MinDate FROM transactions_1k WHERE strftime('%Y', Date) = '2012' AND strftime('%m', Date) = '08' GROUP BY CustomerID) as FirstPaidCustomers ON gasstations.GasStationID = FirstPaidCustomers.CustomerID WHERE gasstations.ChainID = (SELECT ChainID FROM customers WHERE CustomerID = FirstPaidCustomers.CustomerID)", "SELECT gasstations.Country FROM gasstations JOIN transactions_1k ON gasstations.GasStationID = transactions_1k.GasStationID JOIN customers ON transactions_1k.CustomerID = customers.CustomerID WHERE transactions_1k.Date = '2012-08-25' AND customers.Currency = 'USD' AND gasstations.Segment = 'First' ORDER BY gasstations.Country ASC LIMIT 1;"]}, {"question_id": 1514, "answer_sql": ["SELECT p.Description FROM transactions_1k t JOIN customers c ON t.CustomerID = c.CustomerID JOIN gasstations g ON t.GasStationID = g.GasStationID JOIN products p ON t.ProductID = p.ProductID WHERE t.Time = '16:25:00' AND strftime('%Y', t.Date) = '2012' AND strftime('%m', t.Date) = '08' ORDER BY t.Amount DESC LIMIT 1;", "SELECT p.Description FROM transactions_1k t JOIN products p ON t.ProductID = p.ProductID WHERE t.Time = '16:25:00' AND t.Date = '2012-08-24' AND t.CustomerID IN ( SELECT CustomerID FROM customers WHERE Currency = '[Currency]' );", "SELECT customers.Currency FROM customers JOIN transactions_1k ON customers.CustomerID = transactions_1k.CustomerID WHERE transactions_1k.Time = '16:25:00' AND transactions_1k.Date = '2012-08-24';"]}, {"question_id": 1515, "answer_sql": ["SELECT customers.Segment FROM customers JOIN transactions_1k T1 ON customers.CustomerID = T1.CustomerID JOIN gasstations G1 ON T1.GasStationID = G1.GasStationID WHERE G1.GasStationID = 1 AND T1.Date = '2012-08-23' AND T1.Time = '21:20:00';", "SELECT C.Segment FROM customers C JOIN transactions_1k T1 ON C.CustomerID = T1.CustomerID JOIN gasstations G ON T1.GasStationID = G.GasStationID WHERE T1.Date = '2012-08-23' AND T1.Time = '21:20:00';"]}, {"question_id": 1516, "answer_sql": ["SELECT COUNT(*) FROM transactions_1k WHERE Date='2012-08-26' AND Time<'13:00:00' AND CustomerID IN (SELECT CustomerID FROM customers WHERE Currency='EUR');"]}, {"question_id": 1517, "answer_sql": ["SELECT customers.Segment FROM customers JOIN transactions_1k ON customers.CustomerID = transactions_1k.CustomerID WHERE transactions_1k.Date = (SELECT MIN(Date) FROM transactions_1k) GROUP BY customers.CustomerID ORDER BY customers.CustomerID LIMIT 1;", "SELECT customers.Segment FROM customers WHERE customers.CustomerID = (SELECT MIN(CustomerID) FROM transactions_1k);"]}, {"question_id": 1518, "answer_sql": ["SELECT gasstations.Country FROM transactions_1k JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE transactions_1k.Date = '2012-08-24' AND transactions_1k.Time = '12:42:00';", "SELECT gasstations.Country FROM transactions_1k JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE strftime('%Y-%m-%d %H:%M:%S', transactions_1k.Time) = '2012-08-24 12:42:00';"]}, {"question_id": 1519, "answer_sql": ["SELECT T1.ProductID FROM transactions_1k T1 WHERE DATE(T1.Date) = '2012-08-23' AND T1.Time = '21:20:00';"]}, {"question_id": 1520, "answer_sql": ["SELECT t.Date, t.Amount FROM transactions_1k t JOIN customers c ON t.CustomerID = c.CustomerID JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE c.CustomerID = 1 AND t.Date = '2012-01-01' AND t.ProductID = 1;"]}, {"question_id": 1521, "answer_sql": []}, {"question_id": 1522, "answer_sql": ["SELECT Currency FROM customers WHERE CustomerID = ( SELECT CustomerID FROM transactions_1k WHERE Date LIKE '201306%' AND Amount = 214582.17 )"]}, {"question_id": 1523, "answer_sql": ["SELECT gasstations.Country FROM transactions_1k JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE transactions_1k.CardID = 667467", "SELECT gasstations.Country FROM transactions_1k JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE transactions_1k.CardID = 667467 AND transactions_1k.ProductID = ( SELECT ProductID FROM products WHERE Description = 'No.667467' );"]}, {"question_id": 1524, "answer_sql": ["SELECT gasstations.Country FROM transactions_1k JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE transactions_1k.Date = '2012-08-24' AND transactions_1k.Amount = 548.4 AND transactions_1k.ProductID = (SELECT ProductID FROM products WHERE Description = 'Nationality');"]}, {"question_id": 1525, "answer_sql": ["SELECT (COUNT(*) * 100.0) / (SELECT COUNT(*) FROM transactions_1k WHERE strftime('%Y-%m-%d', Date) = '2012-08-25') as Percentage FROM transactions_1k WHERE strftime('%Y-%m-%d', Date) = '2012-08-25' AND CustomerID IN (SELECT CustomerID FROM customers WHERE Currency = 'EUR');", "SELECT (SUM(CASE WHEN customers.Currency = 'EUR' THEN 1 ELSE 0 END) * 100.0 / SUM(1)) AS 'EUR_Usage_Percentage' FROM transactions_1k JOIN customers ON transactions_1k .CustomerID = customers.CustomerID WHERE transactions_1k .Date = '2012-08-25' AND customers.Segment = '2012/8/25'", "SELECT c.CustomerID, c.Segment, c.Currency, COUNT(t.TransactionID) as TransactionCount FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID WHERE t.Date = '2012-08-25' AND c.Currency = 'EUR' GROUP BY c.CustomerID, c.Segment, c.Currency HAVING TransactionCount > 0"]}, {"question_id": 1526, "answer_sql": ["SELECT (SUM(t.Amount) - (SELECT SUM(t2.Amount) FROM transactions_1k t2 WHERE strftime('%Y-%m', t2.Date) = '2012-08' AND t2.CustomerID = 634)) / (SELECT SUM(t3.Amount) FROM transactions_1k t3 WHERE strftime('%Y-%m', t3.Date) = '2012-08' AND t3.CustomerID = 634) FROM transactions_1k t WHERE strftime('%Y-%m', t.Date) = '2012-08' AND t.CustomerID = 634;", "SELECT (consumption_2012 - consumption_2013) / consumption_2012 as consumption_decrease_rate FROM (SELECT CustomerID, SUM(Amount) as consumption_2012, MIN(Date) as min_date_2012 FROM transactions_1k WHERE Date BETWEEN '2012-08-24' AND '2013-08-23' GROUP BY CustomerID) AS t1 JOIN (SELECT CustomerID, SUM(Amount) as consumption_2013 FROM transactions_1k WHERE Date BETWEEN '2013-08-24' AND '2014-08-23' GROUP BY CustomerID) AS t2 ON t1.CustomerID = t2.CustomerID WHERE t1.min_date_2012 = '2012-08-24'", "SELECT (consumption_2012 - consumption_2013) / consumption_2012 as decrease_rate FROM (SELECT CustomerID, AVG(Consumption) as consumption_2012, SUM(Consumption) as total_consumption FROM yearmonth WHERE DATE('2012-08-24') BETWEEN Date AND DATE('2012-08-25') GROUP BY CustomerID) AS customer_2012 JOIN (SELECT CustomerID, AVG(Consumption) as consumption_2013, SUM(Consumption) as total_consumption FROM yearmonth WHERE DATE('2013-08-24') BETWEEN Date AND DATE('2013-08-25') GROUP BY CustomerID) AS customer_2013 ON customer_2012.CustomerID = customer_2013.CustomerID;"]}, {"question_id": 1527, "answer_sql": ["SELECT gasstations.GasStationID, gasstations.ChainID, gasstations.Country, gasstations.Segment, SUM(transactions_1k.Amount * transactions_1k.Price) as TotalRevenue FROM gasstations JOIN transactions_1k ON gasstations.GasStationID = transactions_1k.GasStationID GROUP BY gasstations.GasStationID, gasstations.ChainID, gasstations.Country, gasstations.Segment ORDER BY TotalRevenue DESC LIMIT 1;", "SELECT gasstations.GasStationID, gasstations.Country, SUM(transactions_1k.Amount * transactions_1k.Price) as TotalRevenue FROM gasstations JOIN transactions_1k ON gasstations.GasStationID = transactions_1k.GasStationID GROUP BY gasstations.GasStationID, gasstations.Country ORDER BY TotalRevenue DESC LIMIT 1;", "SELECT gasstations.GasStationID, SUM(transactions_1k.Amount * transactions_1k.Price) as TotalRevenue FROM gasstations JOIN transactions_1k ON gasstations.GasStationID = transactions_1k.GasStationID GROUP BY gasstations.GasStationID ORDER BY TotalRevenue DESC LIMIT 1;"]}, {"question_id": 1528, "answer_sql": ["SELECT c.Segment, (SELECT COUNT(*) FROM transactions_1k WHERE GasStationID IN (SELECT GasStationID FROM gasstations WHERE Segment = 'SVK') AND CustomerID IN (SELECT CustomerID FROM customers WHERE Segment = 'premium')) / (SELECT COUNT(*) FROM transactions_1k WHERE GasStationID IN (SELECT GasStationID FROM gasstations WHERE Segment = 'SVK')) * 100 AS percentage FROM customers c WHERE c.Segment = 'SVK';"]}, {"question_id": 1529, "answer_sql": ["SELECT SUM(Amount) as Total_Amount FROM transactions_1k WHERE CustomerID = 38508 AND Date = '201201';", "SELECT t.Amount FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID JOIN customers c ON t.CustomerID = c.CustomerID WHERE c.CustomerID = 38508 AND t.Date = '201201'"]}, {"question_id": 1530, "answer_sql": ["SELECT p.Description, SUM(t.Amount) as TotalAmount FROM transactions_1k t JOIN products p ON t.ProductID = p.ProductID GROUP BY p.Description ORDER BY TotalAmount DESC LIMIT 5;", "SELECT p.Description FROM products p JOIN transactions_1k t ON p.ProductID = t.ProductID GROUP BY p.ProductID ORDER BY SUM(t.Amount) DESC LIMIT 5;"]}, {"question_id": 1531, "answer_sql": ["SELECT c.CustomerID, c.Segment, AVG(t.Price / t.Amount) as AveragePricePerItem, g.Country, COUNT(DISTINCT p.ProductID) as NumberOfUniqueProducts FROM transactions_1k t JOIN customers c ON t.CustomerID = c.CustomerID JOIN gasstations g ON t.GasStationID = g.GasStationID JOIN products p ON t.ProductID = p.ProductID WHERE t.Date BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY c.CustomerID, c.Segment, g.Country ORDER BY AveragePricePerItem DESC, NumberOfUniqueProducts DESC LIMIT 1;"]}, {"question_id": 1532, "answer_sql": ["SELECT gasstations.Country FROM gasstations JOIN transactions_1k ON gasstations.GasStationID = transactions_1k.GasStationID JOIN products ON transactions_1k.ProductID = products.ProductID WHERE products.ProductID = 2 ORDER BY transactions_1k.Price DESC LIMIT 1;"]}, {"question_id": 1533, "answer_sql": ["SELECT c.CustomerID, c.Segment, c.Currency, t.Consumption FROM customers c JOIN (SELECT CustomerID, AVG(Price / Amount) as Consumption FROM transactions_1k WHERE ProductID = 5 AND Date LIKE '201208%' GROUP BY CustomerID) t ON c.CustomerID = t.CustomerID WHERE t.Consumption > 29.00;"]}]