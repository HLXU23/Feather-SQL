[{"question_id": 0, "answer_sql": "SELECT count(*) FROM club;"}, {"question_id": 1, "answer_sql": "SELECT count(*) FROM club;"}, {"question_id": 2, "answer_sql": "SELECT Name FROM club ORDER BY Name ASC;"}, {"question_id": 3, "answer_sql": "SELECT Name FROM club ORDER BY Name ASC"}, {"question_id": 4, "answer_sql": "SELECT Manager, Captain FROM club;"}, {"question_id": 5, "answer_sql": "SELECT Manager, Captain FROM club;"}, {"question_id": 6, "answer_sql": "SELECT name FROM club WHERE manufacturer != 'Nike'"}, {"question_id": 7, "answer_sql": "SELECT Name FROM club WHERE Manufacturer != 'Nike';"}, {"question_id": 8, "answer_sql": "SELECT name FROM player ORDER BY wins_count ASC;"}, {"question_id": 9, "answer_sql": "SELECT name FROM player ORDER BY wins_count ASC;"}, {"question_id": 10, "answer_sql": "SELECT Name FROM player ORDER BY Earnings DESC LIMIT 1;"}, {"question_id": 11, "answer_sql": "SELECT Name FROM player ORDER BY Earnings DESC LIMIT 1;"}, {"question_id": 12, "answer_sql": "SELECT DISTINCT country FROM player WHERE earnings > 1200000;"}, {"question_id": 13, "answer_sql": "SELECT Country FROM player WHERE Earnings > 1200000;"}, {"question_id": 14, "answer_sql": "SELECT country FROM player WHERE earnings = (SELECT max(earnings) FROM player WHERE wins_count > 2)"}, {"question_id": 15, "answer_sql": "SELECT T1.Country FROM player AS T1 INNER JOIN club AS T2 ON T1.Club_ID = T2.Club_ID WHERE T1.Wins_count > 2 ORDER BY T1.Earnings DESC LIMIT 1"}, {"question_id": 16, "answer_sql": "SELECT T1.Name, T3.Name FROM player AS T1 INNER JOIN club AS T2 ON T1.Club_ID = T2.Club_ID INNER JOIN club AS T3 ON T2.Sponsor = T3.Name"}, {"question_id": 17, "answer_sql": "SELECT T1.Name, T2.Name FROM player AS T1 INNER JOIN club AS T2 ON T1.Club_ID = T2.Club_ID;"}, {"question_id": 18, "answer_sql": "SELECT T1.Name FROM club AS T1 INNER JOIN player AS T2 ON T1.Club_ID = T2.Club_ID WHERE T2.Wins_count > 2;"}, {"question_id": 19, "answer_sql": "SELECT T1.Name FROM club AS T1 INNER JOIN player AS T2 ON T1.Club_ID = T2.Club_ID WHERE T2.Wins_count > 2"}, {"question_id": 20, "answer_sql": "SELECT T1.Name FROM player AS T1 INNER JOIN club AS T2 ON T1.Club_ID = T2.Club_ID WHERE T2.Manager = 'Sam Allardyce'"}, {"question_id": 21, "answer_sql": "SELECT T1.Name FROM player AS T1 INNER JOIN club AS T2 ON T1.Club_ID = T2.Club_ID WHERE T2.Manager = 'Sam Allardyce'"}, {"question_id": 22, "answer_sql": "SELECT T1.Name FROM club AS T1 INNER JOIN player AS T2 ON T1.Club_ID = T2.Club_ID GROUP BY T1.Name ORDER BY AVG(T2.Earnings) DESC"}, {"question_id": 23, "answer_sql": "SELECT T1.Name FROM club AS T1 INNER JOIN player AS T2 ON T1.Club_ID = T2.Club_ID GROUP BY T1.Name ORDER BY AVG(T2.Earnings) DESC;"}, {"question_id": 24, "answer_sql": "SELECT Manufacturer , COUNT(*) FROM club GROUP BY Manufacturer;"}, {"question_id": 25, "answer_sql": "SELECT T1.Manufacturer, COUNT(*) FROM club AS T1 INNER JOIN player AS T2 ON T1.Club_ID = T2.Club_ID GROUP BY T1.Manufacturer;"}, {"question_id": 26, "answer_sql": "SELECT Manufacturer FROM club GROUP BY Manufacturer ORDER BY COUNT(*) DESC LIMIT 1;"}, {"question_id": 27, "answer_sql": "SELECT Manufacturer FROM club GROUP BY Manufacturer ORDER BY COUNT(*) DESC LIMIT 1;"}, {"question_id": 28, "answer_sql": "SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(*) > 1;"}, {"question_id": 29, "answer_sql": "SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(*) > 1;"}, {"question_id": 30, "answer_sql": "SELECT country FROM player GROUP BY country HAVING count(*) > 1;"}, {"question_id": 31, "answer_sql": "SELECT Country FROM player GROUP BY Country HAVING COUNT(*) > 1;"}, {"question_id": 32, "answer_sql": "SELECT Name FROM club WHERE Club_ID NOT IN (SELECT Club_ID FROM player)"}, {"question_id": 33, "answer_sql": "SELECT Name FROM club WHERE Club_ID NOT IN (SELECT Club_ID FROM player)"}, {"question_id": 34, "answer_sql": "SELECT country FROM player WHERE earnings > 1400000 UNION SELECT country FROM player WHERE earnings < 1100000"}, {"question_id": 35, "answer_sql": "SELECT Country FROM player WHERE Earnings > 1400000 INTERSECT SELECT Country FROM player WHERE Earnings < 1100000;"}, {"question_id": 36, "answer_sql": "SELECT count(DISTINCT Country) FROM player;"}, {"question_id": 37, "answer_sql": "SELECT COUNT(DISTINCT Country) FROM player;"}, {"question_id": 38, "answer_sql": "SELECT Earnings FROM player WHERE Country = 'Australia' OR Country = 'Zimbabwe'"}, {"question_id": 39, "answer_sql": "SELECT Earnings FROM player WHERE Country = 'Australia' OR Country = 'Zimbabwe'"}, {"question_id": 40, "answer_sql": "SELECT T1.customer_id, T2.customer_first_name, T2.customer_last_name FROM Orders AS T1 INNER JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING COUNT(*) > 2 INTERSECT SELECT T1.customer_id, T2.customer_first_name, T2.customer_last_name FROM Orders AS T1 INNER JOIN Customers AS T2 ON T1.customer_id = T2.customer_id INNER JOIN Order_Items AS T3 ON T1.order_id = T3.order_id GROUP BY T1.customer_id HAVING COUNT(*) >= 3;"}, {"question_id": 41, "answer_sql": "SELECT T1.customer_id, T1.customer_first_name, T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id = T2.customer_id JOIN Order_Items AS T3 ON T2.order_id = T3.order_id GROUP BY T1.customer_id HAVING COUNT(*) > 2 INTERSECT SELECT T4.customer_id, T4.customer_first_name, T4.customer_last_name FROM Customers AS T4 JOIN Order_Items AS T5 ON T4.customer_id = T5.customer_id JOIN Orders AS T6 ON T5.order_id = T6.order_id GROUP BY T4.customer_id HAVING COUNT(*) >= 3"}, {"question_id": 42, "answer_sql": "SELECT T1.order_id, T1.order_status_code , count(*) FROM Orders AS T1 JOIN Order_Items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id;"}, {"question_id": 43, "answer_sql": "SELECT Orders.order_id , count(Order_Items.order_item_id) , Orders.order_status_code FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id GROUP BY Orders.order_id"}, {"question_id": 44, "answer_sql": "SELECT T1.date_order_placed FROM Orders AS T1 INNER JOIN Order_Items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id HAVING COUNT(*) <= 1 OR T1.date_order_placed = ( SELECT MIN(date_order_placed) FROM Orders );"}, {"question_id": 45, "answer_sql": "SELECT MIN(date_order_placed) FROM Orders;"}, {"question_id": 46, "answer_sql": "SELECT customer_first_name , customer_middle_initial , customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name , T1.customer_middle_initial , T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id = T2.customer_id"}, {"question_id": 47, "answer_sql": "SELECT customer_first_name, customer_last_name, customer_middle_initial FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Orders)"}, {"question_id": 48, "answer_sql": "SELECT DISTINCT T1.product_id, T1.product_name, T1.product_price, T1.product_color FROM Products AS T1 JOIN Order_Items AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_id HAVING COUNT(*) < 2"}, {"question_id": 49, "answer_sql": "SELECT T1.product_id , T1.product_name , T1.product_price , T1.product_color FROM Products AS T1 JOIN Order_Items AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id HAVING COUNT(*) < 2"}, {"question_id": 50, "answer_sql": "SELECT T1.order_id, T1.date_order_placed FROM Orders AS T1 JOIN Order_Items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id HAVING COUNT(*) >= 2"}, {"question_id": 51, "answer_sql": "SELECT T1.order_id, T1.date_order_placed FROM Orders AS T1 JOIN Order_Items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id HAVING COUNT(*) >= 2;"}, {"question_id": 52, "answer_sql": "SELECT T2.product_id, T3.product_name, T3.product_price FROM Order_Items AS T1 INNER JOIN Orders AS T2 ON T1.order_id = T2.order_id INNER JOIN Products AS T3 ON T1.product_id = T3.product_id GROUP BY T2.order_id ORDER BY COUNT(*) DESC LIMIT 1"}, {"question_id": 53, "answer_sql": "SELECT T1.product_id, T1.product_name, T1.product_price FROM Products AS T1 INNER JOIN Order_Items AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id ORDER BY COUNT(*) DESC LIMIT 1;"}, {"question_id": 54, "answer_sql": "The least sum of the product prices order have the least sum of the product prices. List the order id and sum."}, {"question_id": 55, "answer_sql": "SELECT T1.order_id , T2.product_price * T2.quantity_ordered FROM Orders AS T1 JOIN Order_Items AS T2 ON T1.order_id = T2.order_id JOIN Products AS T3 ON T2.product_id = T3.product_id GROUP BY T1.order_id ORDER BY sum(T3.product_price * T3.quantity_ordered) ASC LIMIT 1;"}, {"question_id": 56, "answer_sql": "SELECT payment_method_code FROM Customer_Payment_Methods GROUP BY payment_method_code ORDER BY COUNT(*) DESC LIMIT 1"}, {"question_id": 57, "answer_sql": "SELECT T1.payment_method_code FROM Customer_Payment_Methods AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.payment_method_code ORDER BY count(*) DESC LIMIT 1"}, {"question_id": 58, "answer_sql": "SELECT T2.gender_code , COUNT(*) FROM Customers AS T1 JOIN Customer_Payment_Methods AS T2 ON T1.customer_id = T2.customer_id JOIN Order_Items AS T3 ON T2.customer_id = T3.order_id JOIN Products AS T4 ON T3.product_id = T4.product_id GROUP BY T2.gender_code"}, {"question_id": 59, "answer_sql": "SELECT T2.gender_code, COUNT(*) FROM Customers AS T1 INNER JOIN Customer_Payment_Methods AS T2 ON T1.customer_id = T2.customer_id INNER JOIN Order_Items AS T3 ON T2.customer_id = T3.customer_id INNER JOIN Products AS T4 ON T3.product_id = T4.product_id GROUP BY T2.gender_code;"}, {"question_id": 60, "answer_sql": "SELECT T2.gender_code , COUNT(*) FROM Orders AS T1 INNER JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.gender_code;"}, {"question_id": 61, "answer_sql": "SELECT T2.gender_code , COUNT(*) FROM Orders AS T1 INNER JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.gender_code;"}, {"question_id": 62, "answer_sql": "SELECT T1.customer_first_name , T1.customer_middle_initial , T1.customer_last_name , T2.payment_method_code FROM Customers AS T1 JOIN Customer_Payment_Methods AS T2 ON T1.customer_id = T2.customer_id;"}, {"question_id": 63, "answer_sql": "SELECT T1.customer_first_name , T1.customer_middle_initial , T1.customer_last_name , T2.payment_method_code FROM Customers AS T1 JOIN Customer_Payment_Methods AS T2 ON T1.customer_id = T2.customer_id;"}, {"question_id": 64, "answer_sql": "SELECT DISTINCT T1.invoice_status_code , T1.invoice_date , T2.shipment_date FROM Invoices AS T1 JOIN Shipments AS T2 ON T1.invoice_number = T2.invoice_number;"}, {"question_id": 65, "answer_sql": "SELECT `Invoices`.`invoice_status_code` , `Invoices`.`invoice_date` , `Shipments`.`shipment_date` FROM `Invoices` JOIN `Shipments` ON `Invoices`.`invoice_number` = `Shipments`.`invoice_number`;"}, {"question_id": 66, "answer_sql": "SELECT T3.product_name , T2.shipment_date FROM Shipment_items AS T1 INNER JOIN Shipments AS T2 ON T1.shipment_id = T2.shipment_id INNER JOIN Order_items AS T3 ON T2.order_id = T3.order_id INNER JOIN Products AS T4 ON T3.product_id = T4.product_id"}, {"question_id": 67, "answer_sql": "SELECT T3.product_name , T2.shipment_date FROM Shipment_items AS T1 INNER JOIN Shipments AS T2 ON T1.shipment_id = T2.shipment_id INNER JOIN Order_items AS T3 ON T2.order_id = T3.order_id INNER JOIN Products AS T4 ON T3.product_id = T4.product_id;"}, {"question_id": 68, "answer_sql": "SELECT T1.order_item_status_code , T2.shipment_tracking_number FROM Order_Items AS T1 JOIN Shipments AS T2 ON T1.order_id = T2.order_id WHERE T1.order_item_status_code = 'Active' OR T1.order_item_status_code = 'Shipped';"}, {"question_id": 69, "answer_sql": "SELECT DISTINCT T1.order_item_status_code , T2.shipment_tracking_number FROM Order_Items AS T1 INNER JOIN Shipments AS T2 ON T1.order_id = T2.order_id WHERE T1.order_item_status_code = ORDERED AND T2.shipment_tracking_number != ;"}, {"question_id": 70, "answer_sql": "SELECT T3.product_name , T3.product_color FROM Order_Items AS T1 INNER JOIN Shipment_Items AS T2 ON T1.order_item_id = T2.order_item_id INNER JOIN Products AS T3 ON T1.product_id = T3.product_id INNER JOIN Shipments AS T4 ON T2.shipment_id = T4.shipment_id;"}, {"question_id": 71, "answer_sql": "SELECT T3.product_name, T3.product_color FROM Shipment_Items AS T1 INNER JOIN Shipments AS T2 ON T1.shipment_id = T2.shipment_id INNER JOIN Order_Items AS T3 ON T2.order_id = T3.order_id INNER JOIN Products AS T4 ON T3.product_id = T4.product_id;"}, {"question_id": 72, "answer_sql": "SELECT DISTINCT T3.product_name, T3.product_price, T3.product_description FROM Customer_Payment_Methods AS T1 INNER JOIN Customers AS T2 ON T1.customer_id = T2.customer_id INNER JOIN Products AS T3 ON T1.customer_id = T3.product_id WHERE T2.gender_code = 'F'"}, {"question_id": 73, "answer_sql": "SELECT DISTINCT T3.product_name, T3.product_price, T3.product_description FROM Customer_Payment_Methods AS T1 INNER JOIN Customers AS T2 ON T1.customer_id = T2.customer_id INNER JOIN Order_Items AS T3 ON T2.customer_id = T3.order_id INNER JOIN Products AS T4 ON T3.product_id = T4.product_id WHERE T2.gender_code = 'F';"}, {"question_id": 74, "answer_sql": "SELECT DISTINCT T1.invoice_status_code FROM Invoices AS T1 INNER JOIN Orders AS T2 ON T1.invoice_number = T2.order_id INNER JOIN Order_Items AS T3 ON T2.order_id = T3.order_id INNER JOIN Shipments AS T4 ON T1.invoice_number = T4.invoice_number WHERE T4.shipment_id IS NULL;"}, {"question_id": 75, "answer_sql": "SELECT DISTINCT T1.invoice_status_code FROM Invoices AS T1 INNER JOIN Orders AS T2 ON T1.invoice_number = T2.order_id WHERE T2.order_status_code = 'Open';"}, {"question_id": 76, "answer_sql": "SELECT Orders.order_id , Orders.date_order_placed , SUM(Products.product_price) FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY Orders.order_id;"}, {"question_id": 77, "answer_sql": "SELECT Orders.order_id , Orders.date_order_placed , SUM (Customer_Payment_Methods.payment_method_code = 'Credit Card' OR Customer_Payment_Methods.payment_method_code = 'Debit Card') FROM Customers JOIN Customer_Payment_Methods ON Customers.customer_id = Customer_Payment_Methods.customer_id JOIN Orders ON Customers.customer_id = Orders.customer_id JOIN Order_Items ON Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY Orders.order_id;"}, {"question_id": 78, "answer_sql": "SELECT COUNT(DISTINCT customer_id) FROM Orders;"}, {"question_id": 79, "answer_sql": "SELECT COUNT(DISTINCT customer_id) FROM `Orders`;"}, {"question_id": 80, "answer_sql": "SELECT COUNT(DISTINCT order_item_status_code) FROM Order_Items;"}, {"question_id": 81, "answer_sql": "SELECT COUNT(DISTINCT order_item_status_code) FROM Order_Items;"}, {"question_id": 82, "answer_sql": "SELECT COUNT(DISTINCT payment_method_code) FROM Customer_Payment_Methods;"}, {"question_id": 83, "answer_sql": "SELECT COUNT(DISTINCT payment_method_code) FROM Customer_Payment_Methods;"}, {"question_id": 84, "answer_sql": "SELECT login_name, login_password FROM Customers WHERE phone_number LIKE '+12%';"}, {"question_id": 85, "answer_sql": "SELECT login_name, login_password FROM Customers WHERE phone_number LIKE '+12%';"}, {"question_id": 86, "answer_sql": "SELECT DISTINCT T1.product_size FROM Products AS T1 INNER JOIN Order_Items AS T2 ON T1.product_id = T2.product_id WHERE T1.product_name LIKE '%Dell%'"}, {"question_id": 87, "answer_sql": "SELECT DISTINCT T1.product_size FROM Products AS T1 INNER JOIN Order_Items AS T2 ON T1.product_id = T2.product_id WHERE T1.product_name LIKE '%Dell%'"}, {"question_id": 88, "answer_sql": "SELECT product_price , product_size FROM Products WHERE product_price > ( SELECT AVG(product_price) FROM Products );"}, {"question_id": 89, "answer_sql": "SELECT product_price , product_size FROM Products WHERE product_price > ( SELECT AVG(product_price) FROM Products );"}, {"question_id": 90, "answer_sql": "SELECT COUNT(DISTINCT product_id) FROM Order_Items EXCEPT SELECT COUNT(DISTINCT product_id) FROM Order_Items WHERE order_item_status_code = 'Sold';"}, {"question_id": 91, "answer_sql": "SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_Items );"}, {"question_id": 92, "answer_sql": "SELECT COUNT(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Payment_Methods);"}, {"question_id": 93, "answer_sql": "SELECT COUNT(*) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payment_Methods );"}, {"question_id": 94, "answer_sql": "SELECT DISTINCT order_status_code , date_order_placed FROM Orders;"}, {"question_id": 95, "answer_sql": "SELECT order_status_code , date_order_placed FROM Orders;"}, {"question_id": 96, "answer_sql": "SELECT address_line_1, town_city, county FROM Customers WHERE country = 'USA';"}, {"question_id": 97, "answer_sql": "SELECT address_line_1, town_city, county FROM Customers WHERE country = 'United States';"}, {"question_id": 98, "answer_sql": "SELECT T1.customer_first_name , T3.product_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id = T2.customer_id JOIN Order_Items AS T3 ON T2.order_id = T3.order_id JOIN Products AS T4 ON T3.product_id = T4.product_id"}, {"question_id": 99, "answer_sql": "SELECT T3.customer_first_name, T2.product_name FROM Order_Items AS T1 INNER JOIN Products AS T2 ON T1.product_id = T2.product_id INNER JOIN Orders AS T3 ON T3.order_id = T1.order_id INNER JOIN Customers AS T4 ON T4.customer_id = T3.customer_id"}, {"question_id": 100, "answer_sql": "SELECT COUNT(*) FROM Shipments;"}, {"question_id": 101, "answer_sql": "SELECT COUNT(DISTINCT T2.product_id) FROM Shipments AS T1 INNER JOIN Shipment_Items AS T2 ON T1.shipment_id = T2.shipment_id;"}, {"question_id": 102, "answer_sql": "SELECT AVG(product_price) FROM Products;"}, {"question_id": 103, "answer_sql": "SELECT AVG(product_price) FROM Products;"}, {"question_id": 104, "answer_sql": "SELECT AVG(T2.product_price) FROM Order_Items AS T1 INNER JOIN Products AS T2 ON T1.product_id = T2.product_id INNER JOIN Orders AS T3 ON T3.order_id = T1.order_id;"}, {"question_id": 105, "answer_sql": "SELECT AVG(product_price) FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id JOIN Orders ON Order_Items.order_id = Orders.order_id;"}, {"question_id": 106, "answer_sql": "SELECT t1.email_address , t1.town_city , t1.county FROM customers AS t1 JOIN customer_payment_methods AS t2 ON t1.customer_id = t2.customer_id JOIN (SELECT gender_code , COUNT(*) AS num FROM customers GROUP BY gender_code ORDER BY num LIMIT 1) AS t3 ON t1.gender_code = t3.gender_code;"}, {"question_id": 107, "answer_sql": "SELECT email_address , town_city , county FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Orders ) ORDER BY gender_code;"}, {"question_id": 108, "answer_sql": "SELECT T1.date_order_placed FROM Orders AS T1 JOIN Customer_Payment_Methods AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING COUNT(*) >= 2;"}, {"question_id": 109, "answer_sql": "SELECT T2.date_order_placed FROM Customer_Payment_Methods AS T1 INNER JOIN Orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING COUNT(*) >= 2;"}, {"question_id": 110, "answer_sql": "SELECT order_status_code FROM Orders GROUP BY order_status_code ORDER BY COUNT(*) ASC LIMIT 1"}, {"question_id": 111, "answer_sql": "SELECT order_status_code FROM Orders GROUP BY order_status_code ORDER BY COUNT(*) ASC LIMIT 1;"}, {"question_id": 112, "answer_sql": "SELECT DISTINCT T1.product_id, T1.product_description FROM Products AS T1 JOIN Order_Items AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_id HAVING COUNT(*) > 3;"}, {"question_id": 113, "answer_sql": "SELECT T1.product_id, T1.product_description FROM Products AS T1 JOIN Order_Items AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id HAVING COUNT(*) > 3;"}, {"question_id": 114, "answer_sql": "SELECT T1.invoice_date , T1.invoice_number FROM Invoices AS T1 JOIN Shipments AS T2 ON T1.invoice_number = T2.invoice_number GROUP BY T1.invoice_number HAVING COUNT(*) >= 2;"}, {"question_id": 115, "answer_sql": "SELECT T2.invoice_date, T2.invoice_number FROM Shipments AS T1 INNER JOIN Invoices AS T2 ON T1.invoice_number = T2.invoice_number GROUP BY T2.invoice_number HAVING COUNT(*) >= 2;"}, {"question_id": 116, "answer_sql": "SELECT shipment_tracking_number , shipment_date FROM Shipments"}, {"question_id": 117, "answer_sql": "SELECT shipment_tracking_number , shipment_date FROM Shipments"}, {"question_id": 118, "answer_sql": "SELECT product_color, product_description, product_size FROM Products WHERE product_price < ( SELECT MAX(product_price) FROM Products );"}, {"question_id": 119, "answer_sql": "SELECT product_color , product_description , product_size FROM Products WHERE product_price < ( SELECT max(product_price) FROM Products )"}, {"question_id": 120, "answer_sql": "SELECT name FROM director WHERE age > (SELECT avg(age) FROM director);"}, {"question_id": 121, "answer_sql": "SELECT name FROM director ORDER BY age DESC LIMIT 1;"}, {"question_id": 122, "answer_sql": "SELECT COUNT(*) FROM channel WHERE internet LIKE '%bbc%';"}, {"question_id": 123, "answer_sql": "SELECT count(DISTINCT Digital_terrestrial_channel) FROM channel;"}, {"question_id": 124, "answer_sql": "SELECT title FROM program ORDER BY start_year DESC;"}, {"question_id": 125, "answer_sql": "SELECT d.name FROM director d JOIN program p ON d.director_id = p.director_id GROUP BY d.name ORDER BY COUNT(p.program_id) DESC LIMIT 1;"}, {"question_id": 126, "answer_sql": "SELECT t1.name, t1.age FROM director AS t1 JOIN program AS t2 ON t1.director_id = t2.director_id GROUP BY t1.director_id ORDER BY count(*) DESC LIMIT 1"}, {"question_id": 127, "answer_sql": "SELECT title FROM program ORDER BY start_year DESC LIMIT 1;"}, {"question_id": 128, "answer_sql": "SELECT T1.Name, T1.Internet FROM channel AS T1 INNER JOIN program AS T2 ON T1.Channel_ID = T2.Channel_ID GROUP BY T2.Channel_ID HAVING COUNT(*) > 1"}, {"question_id": 129, "answer_sql": "The number of programs for each channel can be found by grouping by channel_id and channel name. The count of programs for each channel can be obtained by using the count function."}, {"question_id": 130, "answer_sql": "SELECT COUNT(*) FROM channel WHERE channel_id NOT IN (SELECT channel_id FROM program);"}, {"question_id": 131, "answer_sql": "SELECT t2.name FROM program AS t1 JOIN director AS t2 ON t1.director_id = t2.director_id WHERE t1.title = Dracula ;"}, {"question_id": 132, "answer_sql": "SELECT t1.name, t1.internet FROM channel AS t1 JOIN program AS t2 ON t1.channel_id = t2.channel_id GROUP BY t2.channel_id ORDER BY COUNT(*) DESC LIMIT 1;"}, {"question_id": 133, "answer_sql": "SELECT name FROM director WHERE age BETWEEN 30 AND 60;"}, {"question_id": 134, "answer_sql": "The name of channels that have both a director younger than 40 and a director older than 60 can be found by joining the channel and director_admin tables. The channel name can be found by joining the channel and director_admin tables. The channel name is the name of the channel and the director_admin table is used to check if the director is younger than 40 or older than 60."}, {"question_id": 135, "answer_sql": "SELECT T1.Channel_ID, T1.Name FROM channel AS T1 JOIN program AS T2 ON T1.Channel_ID = T2.Channel_ID JOIN director AS T3 ON T3.Director_ID = T2.Director_ID WHERE T3.Name != 'Hank Baskett'"}, {"question_id": 136, "answer_sql": "SELECT count(*) FROM radio;"}, {"question_id": 137, "answer_sql": "SELECT Transmitter FROM radio ORDER BY ERP_kW ASC;"}, {"question_id": 138, "answer_sql": "SELECT tv_show_name, Original_Airdate FROM tv_show;"}, {"question_id": 139, "answer_sql": "SELECT Station_name FROM city_channel WHERE Affiliation != ABC"}, {"question_id": 140, "answer_sql": "SELECT Transmitter FROM radio WHERE ERP_kW > 150 OR ERP_kW < 30;"}, {"question_id": 141, "answer_sql": "SELECT Transmitter FROM radio ORDER BY ERP_kW DESC LIMIT 1"}, {"question_id": 142, "answer_sql": "SELECT AVG(ERP_kW) FROM radio;"}, {"question_id": 143, "answer_sql": "SELECT Affiliation , COUNT(*) FROM city_channel GROUP BY Affiliation;"}, {"question_id": 144, "answer_sql": "SELECT Affiliation FROM city_channel GROUP BY Affiliation ORDER BY COUNT(*) DESC LIMIT 1"}, {"question_id": 145, "answer_sql": "SELECT T1.Affiliation FROM city_channel AS T1 INNER JOIN city_channel_radio AS T2 ON T1.ID = T2.City_channel_ID GROUP BY T1.Affiliation HAVING COUNT(*) > 3"}, {"question_id": 146, "answer_sql": "SELECT City, Station_name FROM city_channel ORDER BY Station_name ASC;"}, {"question_id": 147, "answer_sql": "SELECT T3.Transmitter , T2.City FROM city_channel_radio AS T1 JOIN radio AS T2 ON T1.Radio_ID = T2.Radio_ID JOIN city_channel AS T3 ON T1.City_channel_ID = T3.ID"}, {"question_id": 148, "answer_sql": "SELECT T3.Transmitter , T2.Station_name FROM city_channel_radio AS T1 JOIN radio AS T2 ON T1.Radio_ID = T2.Radio_ID JOIN city_channel AS T3 ON T1.City_channel_ID = T3.ID ORDER BY T2.ERP_kW DESC"}, {"question_id": 149, "answer_sql": "SELECT T3.Transmitter , COUNT(*) FROM city_channel_radio AS T1 JOIN radio AS T2 ON T1.radio_id = T2.radio_id JOIN city_channel AS T3 ON T1.city_channel_id = T3.id GROUP BY T2.Transmitter"}, {"question_id": 150, "answer_sql": "SELECT DISTINCT Transmitter FROM radio WHERE Radio_ID NOT IN (SELECT Radio_ID FROM city_channel_radio);"}, {"question_id": 151, "answer_sql": "SELECT T1.Model FROM vehicle AS T1 INNER JOIN vehicle_driver AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID WHERE T1.Top_Speed = (SELECT MAX(Top_Speed) FROM vehicle) AND T1.Power > 6000;"}, {"question_id": 152, "answer_sql": "SELECT Model FROM vehicle WHERE Power > 6000 ORDER BY Top_Speed DESC LIMIT 1;"}, {"question_id": 153, "answer_sql": "SELECT Name FROM driver WHERE Citizenship = 'United States';"}, {"question_id": 154, "answer_sql": "SELECT Name FROM driver WHERE Citizenship = 'United States';"}, {"question_id": 155, "answer_sql": "The number of vehicles a driver has driven can be found by joining the vehicle_driver table with the vehicle table and grouping by driver_id. The number of vehicles a driver has driven can be found by joining the vehicle_driver table with the vehicle table and grouping by driver_id. The driver id of the driver who has driven this many vehicles is the driver_id of the driver who has driven the most vehicles."}, {"question_id": 156, "answer_sql": "SELECT T1.driver_id, COUNT(*) FROM vehicle_driver AS T1 INNER JOIN vehicle AS T2 ON T1.vehicle_id = T2.vehicle_id GROUP BY T1.driver_id ORDER BY COUNT(*) DESC LIMIT 1;"}, {"question_id": 157, "answer_sql": "SELECT MAX(Power) , AVG(Power) FROM vehicle WHERE Builder = 'Zhuzhou';"}, {"question_id": 158, "answer_sql": "SELECT MAX(Power) , AVG(Power) FROM vehicle WHERE Builder = 'Zhuzhou';"}, {"question_id": 159, "answer_sql": "The least number of times a vehicle has been driven is the number of times the vehicle has been driven least frequently. This can be found by counting the number of times a vehicle has been driven for a given vehicle_id. The id of the vehicle that has been driven the least number of times is the id of the vehicle."}, {"question_id": 160, "answer_sql": "The vehicle that has been driven the fewest times is the vehicle with the id 1."}, {"question_id": 161, "answer_sql": "SELECT T1.Top_Speed, T1.Power FROM vehicle AS T1 INNER JOIN vehicle_driver AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID WHERE T1.Build_Year = 1996;"}, {"question_id": 162, "answer_sql": "SELECT vehicle.top_speed, vehicle.power FROM vehicle WHERE vehicle.build_year = 1996;"}, {"question_id": 163, "answer_sql": "SELECT vehicle.build_year , vehicle.model , vehicle.builder FROM vehicle;"}, {"question_id": 164, "answer_sql": "SELECT vehicle.build_year, vehicle.model, vehicle.builder FROM vehicle;"}, {"question_id": 165, "answer_sql": "SELECT COUNT(*) FROM vehicle_driver AS VD JOIN vehicle AS V ON VD.vehicle_id = V.vehicle_id WHERE V.build_year = 2012;"}, {"question_id": 166, "answer_sql": "SELECT COUNT(DISTINCT driver.Name) FROM driver INNER JOIN vehicle_driver ON driver.Driver_ID = vehicle_driver.Driver_ID INNER JOIN vehicle ON vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID WHERE vehicle.Build_Year = 2012;"}, {"question_id": 167, "answer_sql": "SELECT COUNT(*) FROM driver WHERE Racing_Series = 'NASCAR';"}, {"question_id": 168, "answer_sql": "SELECT COUNT(*) FROM driver AS T1 INNER JOIN vehicle_driver AS T2 ON T1.driver_id = T2.driver_id WHERE T1.racing_series = 'NASCAR';"}, {"question_id": 169, "answer_sql": "SELECT AVG(Top_Speed) FROM vehicle;"}, {"question_id": 170, "answer_sql": "SELECT AVG(Top_Speed) FROM vehicle;"}, {"question_id": 171, "answer_sql": "SELECT DISTINCT T1.Name FROM driver AS T1 JOIN vehicle_driver AS T2 ON T1.driver_id = T2.driver_id JOIN vehicle AS T3 ON T2.vehicle_id = T3.vehicle_id WHERE T3.Power > 5000;"}, {"question_id": 172, "answer_sql": "SELECT T2.Name FROM vehicle_driver AS T1 INNER JOIN driver AS T2 ON T1.Driver_ID = T2.Driver_ID INNER JOIN vehicle AS T3 ON T1.Vehicle_ID = T3.Vehicle_ID WHERE T3.Power > 5000;"}, {"question_id": 173, "answer_sql": "SELECT Model FROM vehicle WHERE Total_Production > 100 OR Top_Speed > 150;"}, {"question_id": 174, "answer_sql": "SELECT Model FROM vehicle WHERE Total_Production > 100 OR Top_Speed > 150;"}, {"question_id": 175, "answer_sql": "SELECT Model, Build_Year FROM vehicle WHERE Model LIKE '%DJ%';"}, {"question_id": 176, "answer_sql": "SELECT Model, Build_Year FROM vehicle WHERE Model LIKE '%DJ%';"}, {"question_id": 177, "answer_sql": "SELECT Model FROM vehicle WHERE Vehicle_ID NOT IN (SELECT Vehicle_ID FROM vehicle_driver);"}, {"question_id": 178, "answer_sql": "SELECT Model FROM vehicle WHERE Vehicle_ID NOT IN (SELECT Vehicle_ID FROM vehicle_driver);"}, {"question_id": 179, "answer_sql": "SELECT T1.vehicle_id, T1.model FROM vehicle AS T1 INNER JOIN vehicle_driver AS T2 ON T1.vehicle_id = T2.vehicle_id WHERE T2.driver_id IN (SELECT driver_id FROM vehicle_driver GROUP BY driver_id HAVING COUNT(*) >= 2) UNION SELECT T3.vehicle_id, T3.model FROM vehicle AS T3 INNER JOIN vehicle_driver AS T4 ON T3.vehicle_id = T4.vehicle_id INNER JOIN driver AS T5 ON T4.driver_id = T5.driver_id WHERE T5.name = 'Ziyang';"}, {"question_id": 180, "answer_sql": "SELECT T1.vehicle_id, T1.model FROM vehicle AS T1 INNER JOIN vehicle_driver AS T2 ON T1.vehicle_id = T2.vehicle_id WHERE T2.driver_id IN (SELECT driver_id FROM vehicle_driver GROUP BY driver_id HAVING COUNT(*) = 2) OR T1.builder = 'Ziyang';"}, {"question_id": 181, "answer_sql": "SELECT T1.Vehicle_ID, T1.Model FROM vehicle AS T1 INNER JOIN vehicle_driver AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID INNER JOIN driver AS T3 ON T2.Driver_ID = T3.Driver_ID WHERE T3.Name = 'Jeff Gordon' OR T2.Driver_ID IN (SELECT T2.Driver_ID FROM vehicle_driver AS T2 GROUP BY T2.Driver_ID HAVING COUNT(*) > 2)"}, {"question_id": 182, "answer_sql": "The problem can be solved by using the HAVING clause in SQL. The HAVING clause is used to filter the results of a GROUP BY clause. In this case, we are going to use it to count the number of drivers for each vehicle and then filter out the ones that have more than 2 drivers or are the Jeff Gordon."}, {"question_id": 183, "answer_sql": "SELECT COUNT(*) FROM vehicle WHERE top_speed = (SELECT MAX(top_speed) FROM vehicle);"}, {"question_id": 184, "answer_sql": "SELECT COUNT(*) FROM vehicle WHERE top_speed = (SELECT MAX(top_speed) FROM vehicle);"}, {"question_id": 185, "answer_sql": "SELECT Name FROM driver ORDER BY Name ASC"}, {"question_id": 186, "answer_sql": "SELECT Name FROM driver ORDER BY Name ASC;"}, {"question_id": 187, "answer_sql": "SELECT Racing_Series , COUNT(*) FROM driver GROUP BY Racing_Series;"}, {"question_id": 188, "answer_sql": "SELECT Racing_Series , COUNT(*) FROM driver GROUP BY Racing_Series;"}, {"question_id": 189, "answer_sql": "SELECT DISTINCT T3.Name, T3.Citizenship FROM vehicle_driver AS T1 INNER JOIN vehicle AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID INNER JOIN driver AS T3 ON T1.Driver_ID = T3.Driver_ID WHERE T2.Model = 'DJ1';"}, {"question_id": 190, "answer_sql": "SELECT DISTINCT T2.Name, T2.Citizenship FROM vehicle_driver AS T1 INNER JOIN driver AS T2 ON T1.Driver_ID = T2.Driver_ID INNER JOIN vehicle AS T3 ON T1.Vehicle_ID = T3.Vehicle_ID WHERE T3.Model = 'DJ1';"}, {"question_id": 191, "answer_sql": "SELECT COUNT(*) FROM driver WHERE driver_id NOT IN (SELECT driver_id FROM vehicle_driver);"}, {"question_id": 192, "answer_sql": "SELECT COUNT(*) FROM driver WHERE driver_id NOT IN (SELECT driver_id FROM vehicle_driver);"}, {"question_id": 193, "answer_sql": "SELECT count(*) FROM Exams;"}, {"question_id": 194, "answer_sql": "SELECT count(*) FROM Exams;"}, {"question_id": 195, "answer_sql": "SELECT DISTINCT Subject_Code FROM Exams ORDER BY Subject_Code ASC;"}, {"question_id": 196, "answer_sql": "SELECT DISTINCT Subject_Code FROM Exams ORDER BY Subject_Code ASC;"}, {"question_id": 197, "answer_sql": "SELECT Exam_Name, Exam_Date FROM Exams WHERE Subject_Code != Database ;"}, {"question_id": 198, "answer_sql": "SELECT Exam_Date, Exam_Name FROM Exams WHERE Subject_Code != Database ;"}, {"question_id": 199, "answer_sql": "SELECT Exam_Date FROM Exams WHERE Subject_Code LIKE '%data%' ORDER BY Exam_Date DESC;"}, {"question_id": 200, "answer_sql": "SELECT T1.Exam_Date FROM Exams AS T1 INNER JOIN Questions_in_Exams AS T2 ON T1.Exam_ID = T2.Exam_ID WHERE T1.Subject_Code LIKE '%data%' ORDER BY T1.Exam_Date DESC;"}, {"question_id": 201, "answer_sql": "SELECT T1.Type_of_Question_Code , COUNT(*) FROM Questions AS T1 INNER JOIN Questions_in_Exams AS T2 ON T1.Question_ID = T2.Question_ID GROUP BY T1.Type_of_Question_Code"}, {"question_id": 202, "answer_sql": "SELECT Type_of_Question_Code , COUNT(*) FROM Questions GROUP BY Type_of_Question_Code"}, {"question_id": 203, "answer_sql": "SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments = Normal"}, {"question_id": 204, "answer_sql": "SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments = Normal"}, {"question_id": 205, "answer_sql": "SELECT COUNT(DISTINCT Comments) FROM Student_Answers;"}, {"question_id": 206, "answer_sql": "SELECT COUNT(DISTINCT Comments) FROM Student_Answers;"}, {"question_id": 207, "answer_sql": "SELECT Student_Answer_Text FROM Student_Answers ORDER BY Student_Answer_Text DESC"}, {"question_id": 208, "answer_sql": "SELECT Student_Answer_Text, COUNT(*) as count FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY count DESC;"}, {"question_id": 209, "answer_sql": "SELECT T1.First_Name , T2.Date_of_Answer FROM Students AS T1 JOIN Student_Answers AS T2 ON T1.Student_ID = T2.Student_ID"}, {"question_id": 210, "answer_sql": "SELECT T1.First_Name, T2.Date_of_Answer FROM Students AS T1 JOIN Student_Answers AS T2 ON T1.Student_ID = T2.Student_ID"}, {"question_id": 211, "answer_sql": "SELECT T2.Email_Adress, T1.Date_of_Answer FROM Student_Answers AS T1 INNER JOIN Students AS T2 ON T1.Student_ID = T2.Student_ID ORDER BY T1.Date_of_Answer DESC"}, {"question_id": 212, "answer_sql": "SELECT T1.Email_Adress , T2.Date_of_Answer FROM Students AS T1 JOIN Student_Answers AS T2 ON T1.Student_ID = T2.Student_ID ORDER BY T2.Date_of_Answer DESC"}, {"question_id": 213, "answer_sql": "SELECT Assessment FROM Student_Assessments GROUP BY Assessment ORDER BY COUNT(*) ASC LIMIT 1;"}, {"question_id": 214, "answer_sql": "SELECT Assessment FROM (SELECT Assessment, COUNT(*) as count FROM Student_Assessments GROUP BY Assessment) as subquery ORDER BY count LIMIT 1;"}, {"question_id": 215, "answer_sql": "SELECT T1.First_Name FROM Students AS T1 JOIN Student_Answers AS T2 ON T1.Student_ID = T2.Student_ID GROUP BY T2.Student_ID HAVING COUNT(*) >= 2"}, {"question_id": 216, "answer_sql": "SELECT T1.first_name FROM Students AS T1 JOIN Student_Answers AS T2 ON T1.Student_ID = T2.Student_ID GROUP BY T2.Student_ID HAVING COUNT(*) >= 2"}, {"question_id": 217, "answer_sql": "SELECT Valid_Answer_Text FROM Student_Answers AS T1 INNER JOIN Student_Assessments AS T2 ON T1.Student_Answer_ID = T2.Student_Answer_ID GROUP BY T2.Valid_Answer_ID ORDER BY COUNT(*) DESC LIMIT 1"}, {"question_id": 218, "answer_sql": "SELECT T1.Valid_Answer_Text FROM Valid_Answers AS T1 JOIN Student_Assessments AS T2 ON T1.Valid_Answer_ID = T2.Valid_Answer_ID GROUP BY T2.Valid_Answer_ID ORDER BY COUNT(*) DESC LIMIT 1"}, {"question_id": 219, "answer_sql": "SELECT Last_Name FROM Students WHERE Gender_MFU != 'M'"}, {"question_id": 220, "answer_sql": "SELECT Last_Name FROM Students WHERE Gender_MFU != 'M'"}, {"question_id": 221, "answer_sql": "SELECT Gender_MFU , COUNT(*) FROM Students GROUP BY Gender_MFU;"}, {"question_id": 222, "answer_sql": "SELECT Gender_MFU , COUNT(*) FROM Students GROUP BY Gender_MFU;"}, {"question_id": 223, "answer_sql": "SELECT Last_Name FROM Students WHERE Gender_MFU IN ('F', 'M');"}, {"question_id": 224, "answer_sql": "SELECT Last_Name FROM Students WHERE Gender_MFU = 'F' OR Gender_MFU = 'M'"}, {"question_id": 225, "answer_sql": "SELECT First_Name FROM Students WHERE Student_ID NOT IN (SELECT Student_ID FROM Student_Answers)"}, {"question_id": 226, "answer_sql": "SELECT First_Name FROM Students WHERE Student_ID NOT IN (SELECT Student_ID FROM Student_Answers)"}, {"question_id": 227, "answer_sql": "SELECT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal' INTERSECT SELECT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Absent'"}, {"question_id": 228, "answer_sql": "SELECT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal' INTERSECT SELECT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Absent'"}, {"question_id": 229, "answer_sql": "SELECT Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code HAVING COUNT(*) >= 3"}, {"question_id": 230, "answer_sql": "SELECT Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code HAVING COUNT(*) >= 3;"}, {"question_id": 231, "answer_sql": "SELECT * FROM Students"}, {"question_id": 232, "answer_sql": "SELECT * FROM Students;"}, {"question_id": 233, "answer_sql": "SELECT count(*) FROM addresses"}, {"question_id": 234, "answer_sql": "SELECT count(*) FROM addresses"}, {"question_id": 235, "answer_sql": "SELECT address_id , address_details FROM addresses;"}, {"question_id": 236, "answer_sql": "SELECT address_id , address_details FROM addresses"}, {"question_id": 237, "answer_sql": "SELECT count(*) FROM products"}, {"question_id": 238, "answer_sql": "SELECT count(*) FROM products"}, {"question_id": 239, "answer_sql": "SELECT product_id, product_type_code, product_name FROM Products;"}, {"question_id": 240, "answer_sql": "SELECT product_id, product_type_code, product_name FROM Products;"}, {"question_id": 241, "answer_sql": "SELECT product_price FROM Products WHERE product_name = 'Monitor';"}, {"question_id": 242, "answer_sql": "SELECT product_price FROM Products WHERE product_name = 'Monitor';"}, {"question_id": 243, "answer_sql": "SELECT MIN(product_price) AS 'Minimum Price', AVG(product_price) AS 'Average Price', MAX(product_price) AS 'Maximum Price' FROM products;"}, {"question_id": 244, "answer_sql": "SELECT MIN(product_price) AS 'Minimum Price', AVG(product_price) AS 'Average Price', MAX(product_price) AS 'Maximum Price' FROM products;"}, {"question_id": 245, "answer_sql": "SELECT AVG(product_price) FROM Products WHERE product_type_code = 'Clothes';"}, {"question_id": 246, "answer_sql": "SELECT AVG(product_price) FROM Products WHERE product_type_code = 'Clothes';"}, {"question_id": 247, "answer_sql": "SELECT COUNT(*) FROM Products WHERE product_type_code = 'Hardware';"}, {"question_id": 248, "answer_sql": "SELECT COUNT(*) FROM Products WHERE product_type_code = Hardware ;"}, {"question_id": 249, "answer_sql": "SELECT product_name FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products);"}, {"question_id": 250, "answer_sql": "SELECT DISTINCT T1.product_name FROM Products AS T1 INNER JOIN Order_Items AS T2 ON T1.product_id = T2.product_id WHERE T1.product_price > ( SELECT AVG(product_price) FROM Products );"}, {"question_id": 251, "answer_sql": "SELECT T1.product_name FROM Products AS T1 INNER JOIN ( SELECT AVG(product_price) FROM Products ) AS T2 ON T1.product_price > T2.AVG(product_price) WHERE T1.product_type_code = 'Hardware';"}, {"question_id": 252, "answer_sql": "SELECT T1.product_name FROM Products AS T1 INNER JOIN Order_Items AS T2 ON T1.product_id = T2.product_id WHERE T1.product_type_code = 'Hardware' AND T1.product_price > ( SELECT AVG(product_price) FROM Products WHERE product_type_code = 'Hardware' )"}, {"question_id": 253, "answer_sql": "SELECT T1.product_name FROM Products AS T1 INNER JOIN Order_Items AS T2 ON T1.product_id = T2.product_id WHERE T1.product_type_code = 'Clothes' ORDER BY T1.product_price DESC LIMIT 1;"}, {"question_id": 254, "answer_sql": "SELECT T1.product_name FROM Products AS T1 INNER JOIN Order_Items AS T2 ON T1.product_id = T2.product_id WHERE T1.product_type_code = 'Clothes' ORDER BY T1.product_price DESC LIMIT 1;"}, {"question_id": 255, "answer_sql": "SELECT T1.product_id , T1.product_name FROM Products AS T1 INNER JOIN Order_Items AS T2 ON T1.product_id = T2.product_id WHERE T1.product_type_code = 'Hardware' ORDER BY T1.product_price ASC LIMIT 1;"}, {"question_id": 256, "answer_sql": "SELECT product_id, product_name FROM products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC LIMIT 1;"}, {"question_id": 257, "answer_sql": "SELECT product_name FROM Products ORDER BY product_price DESC;"}, {"question_id": 258, "answer_sql": "SELECT product_name FROM Products ORDER BY product_price DESC;"}, {"question_id": 259, "answer_sql": "SELECT * FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC;"}, {"question_id": 260, "answer_sql": "SELECT product_name FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC;"}, {"question_id": 261, "answer_sql": "SELECT product_type_code , COUNT(*) FROM products GROUP BY product_type_code;"}, {"question_id": 262, "answer_sql": "SELECT T1.product_type_code , COUNT(*) FROM Products AS T1 JOIN Order_Items AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_type_code;"}, {"question_id": 263, "answer_sql": "SELECT p.product_type_code , AVG(p.product_price) FROM Products p GROUP BY p.product_type_code;"}, {"question_id": 264, "answer_sql": "SELECT p.product_type_code, AVG(p.product_price) FROM Products p GROUP BY p.product_type_code;"}, {"question_id": 265, "answer_sql": "SELECT product_type_code FROM products GROUP BY product_type_code HAVING COUNT(*) >= 2;"}, {"question_id": 266, "answer_sql": "SELECT product_type_code FROM Products GROUP BY product_type_code HAVING COUNT(*) >= 2;"}, {"question_id": 267, "answer_sql": "SELECT product_type_code FROM products GROUP BY product_type_code ORDER BY count(*) DESC LIMIT 1"}, {"question_id": 268, "answer_sql": "The most frequent product type code is: ```sql SELECT T1.product_type_code FROM Products AS T1 INNER JOIN Order_Items AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_type_code ORDER BY COUNT(*) DESC LIMIT 1"}, {"question_id": 269, "answer_sql": "SELECT count(*) FROM Customers;"}, {"question_id": 270, "answer_sql": "SELECT count(*) FROM Customers;"}, {"question_id": 271, "answer_sql": "SELECT customer_id , customer_name FROM Customers;"}, {"question_id": 272, "answer_sql": "SELECT customer_id , customer_name FROM Customers;"}, {"question_id": 273, "answer_sql": "SELECT customer_address, customer_phone, customer_email FROM Customers WHERE customer_name = 'Jeromy';"}, {"question_id": 274, "answer_sql": "SELECT customer_address, customer_phone, customer_email FROM Customers WHERE customer_name = 'Jeromy'"}, {"question_id": 275, "answer_sql": "SELECT payment_method_code , COUNT(*) FROM Customers GROUP BY payment_method_code;"}, {"question_id": 276, "answer_sql": "SELECT `payment_method_code` , COUNT(*) FROM `Customers` GROUP BY `payment_method_code`;"}, {"question_id": 277, "answer_sql": "SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY count(*) DESC LIMIT 1"}, {"question_id": 278, "answer_sql": "SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY COUNT(*) DESC LIMIT 1"}, {"question_id": 279, "answer_sql": "SELECT customer_name FROM Customers GROUP BY payment_method_code ORDER BY COUNT(*) ASC LIMIT 1;"}, {"question_id": 280, "answer_sql": "SELECT customer_name FROM Customers WHERE payment_method_code = (SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY COUNT(*) ASC LIMIT 1)"}, {"question_id": 281, "answer_sql": "SELECT `payment_method_code` , `customer_number` FROM `Customers` WHERE `customer_name` = Jeromy"}, {"question_id": 282, "answer_sql": "SELECT `payment_method_code` , `customer_number` FROM `Customers` WHERE `customer_name` = Jeromy"}, {"question_id": 283, "answer_sql": "SELECT DISTINCT payment_method_code FROM Customers;"}, {"question_id": 284, "answer_sql": "SELECT DISTINCT payment_method_code FROM Customers;"}, {"question_id": 285, "answer_sql": "SELECT product_id , product_type_code FROM Products ORDER BY product_name;"}, {"question_id": 286, "answer_sql": "SELECT product_id, product_type_code FROM products ORDER BY product_name ASC;"}, {"question_id": 287, "answer_sql": "SELECT T1.product_type_code FROM Products AS T1 JOIN Order_Items AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_type_code ORDER BY count(*) ASC LIMIT 1;"}, {"question_id": 288, "answer_sql": "SELECT product_type_code FROM products GROUP BY product_type_code ORDER BY count(*) ASC LIMIT 1"}, {"question_id": 289, "answer_sql": "SELECT count(*) FROM `Customer_Orders`;"}, {"question_id": 290, "answer_sql": "SELECT count(*) FROM `Customer_Orders`;"}, {"question_id": 291, "answer_sql": "SELECT T2.order_id, T2.order_date, T2.order_status_code FROM Customers AS T1 INNER JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = 'Jeromy'"}, {"question_id": 292, "answer_sql": "SELECT T2.order_id, T2.order_date, T2.order_status_code FROM Customers AS T1 INNER JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = 'Jeromy'"}, {"question_id": 293, "answer_sql": "SELECT T1.customer_name , T2.customer_id , COUNT(*) FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id;"}, {"question_id": 294, "answer_sql": "SELECT Customers.customer_name, Customers.customer_id, COUNT(Customer_Orders.order_id) FROM Customers INNER JOIN Customer_Orders ON Customers.customer_id = Customer_Orders.customer_id GROUP BY Customers.customer_id;"}, {"question_id": 295, "answer_sql": "SELECT T1.customer_id, T1.customer_name, T1.customer_phone, T1.customer_email FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1"}, {"question_id": 296, "answer_sql": "SELECT T1.customer_id, T1.customer_name, T1.customer_phone, T1.customer_email FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1;"}, {"question_id": 297, "answer_sql": "SELECT order_status_code , COUNT(*) FROM Customer_Orders GROUP BY order_status_code;"}, {"question_id": 298, "answer_sql": "SELECT order_status_code , COUNT(*) FROM Customer_Orders GROUP BY order_status_code;"}, {"question_id": 299, "answer_sql": "SELECT order_status_code FROM Customer_Orders GROUP BY order_status_code ORDER BY count(*) DESC LIMIT 1"}, {"question_id": 300, "answer_sql": "SELECT order_status_code FROM Customer_Orders GROUP BY order_status_code ORDER BY COUNT(*) DESC LIMIT 1;"}, {"question_id": 301, "answer_sql": "SELECT COUNT(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Orders);"}, {"question_id": 302, "answer_sql": "SELECT COUNT(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Orders);"}, {"question_id": 303, "answer_sql": "SELECT product_name FROM Products WHERE product_id NOT IN (SELECT product_id FROM Order_items);"}, {"question_id": 304, "answer_sql": "SELECT product_name FROM Products WHERE product_id NOT IN (SELECT product_id FROM Order_Items);"}, {"question_id": 305, "answer_sql": "SELECT COUNT(*) FROM `Order_Items` AS T1 INNER JOIN `Products` AS T2 ON T1.product_id = T2.product_id WHERE T2.product_name = Monitor ;"}, {"question_id": 306, "answer_sql": "SELECT COUNT(*) FROM `Order_Items` AS T1 INNER JOIN `Products` AS T2 ON T1.product_id = T2.product_id WHERE T2.product_type_code = 'Monitor';"}, {"question_id": 307, "answer_sql": "SELECT COUNT(DISTINCT customer_id) FROM Customer_Orders AS T1 INNER JOIN Order_Items AS T2 ON T1.order_id = T2.order_id INNER JOIN Products AS T3 ON T2.product_id = T3.product_id WHERE T3.product_name = Monitor ;"}, {"question_id": 308, "answer_sql": "SELECT COUNT(DISTINCT T1.customer_id) FROM Customer_Orders AS T1 JOIN Order_Items AS T2 ON T1.order_id = T2.order_id JOIN Products AS T3 ON T2.product_id = T3.product_id WHERE T3.product_name = Monitor ;"}, {"question_id": 309, "answer_sql": "SELECT COUNT(DISTINCT customer_id) FROM Customer_Orders;"}, {"question_id": 310, "answer_sql": "SELECT COUNT(DISTINCT customer_id) FROM Customer_Orders;"}, {"question_id": 311, "answer_sql": "SELECT customer_id FROM Customers EXCEPT SELECT customer_id FROM Customer_Orders;"}, {"question_id": 312, "answer_sql": "SELECT customer_id FROM Customers EXCEPT SELECT customer_id FROM Customer_Orders;"}, {"question_id": 313, "answer_sql": "The output requirement is a single SQL query. The query should return all the order dates and order ids of the orders with quantity of any product larger than 6 or with more than 3 products."}, {"question_id": 314, "answer_sql": "SELECT `order_id` , `order_date` FROM `Customer_Orders` WHERE `order_quantity` > 6 OR ( SELECT COUNT(*) FROM `Order_Items` AS T1 JOIN `Customer_Orders` AS T2 ON T1.`order_id` = T2.`order_id` ) > 3"}, {"question_id": 315, "answer_sql": "SELECT COUNT(*) FROM building;"}, {"question_id": 316, "answer_sql": "SELECT COUNT(*) FROM building;"}, {"question_id": 317, "answer_sql": "SELECT Name FROM building ORDER BY Number_of_Stories ASC;"}, {"question_id": 318, "answer_sql": "SELECT Name FROM building ORDER BY Number_of_Stories ASC;"}, {"question_id": 319, "answer_sql": "SELECT Address FROM building ORDER BY Completed_Year DESC;"}, {"question_id": 320, "answer_sql": "SELECT Address FROM building ORDER BY Completed_Year DESC"}, {"question_id": 321, "answer_sql": "SELECT max(Number_of_Stories) FROM building WHERE Completed_Year != 1980"}, {"question_id": 322, "answer_sql": "SELECT MAX(Number_of_Stories) FROM building WHERE Completed_Year >= 1980;"}, {"question_id": 323, "answer_sql": "SELECT AVG( Population ) FROM region ;"}, {"question_id": 324, "answer_sql": "SELECT AVG( Population ) FROM region ;"}, {"question_id": 325, "answer_sql": "SELECT Name FROM region ORDER BY Name ASC;"}, {"question_id": 326, "answer_sql": "SELECT Name FROM region ORDER BY Name ASC;"}, {"question_id": 327, "answer_sql": "SELECT t1.Capital FROM region AS t1 INNER JOIN building AS t2 ON t1.Region_ID = t2.Region_ID WHERE t1.Area > 10000"}, {"question_id": 328, "answer_sql": "SELECT t2.Capital FROM building AS t1 INNER JOIN region AS t2 ON t1.Region_ID = t2.Region_ID WHERE t2.Area > 10000;"}, {"question_id": 329, "answer_sql": "SELECT t1.Capital FROM region AS t1 JOIN building AS t2 ON t1.Region_ID = t2.Region_ID GROUP BY t1.Region_ID ORDER BY t1.Population DESC LIMIT 1;"}, {"question_id": 330, "answer_sql": "SELECT Capital FROM region WHERE Population = (SELECT MAX(Population) FROM region);"}, {"question_id": 331, "answer_sql": "SELECT Name FROM (SELECT Name, ROW_NUMBER() OVER (ORDER BY Area DESC) as rn FROM region) t WHERE rn <= 5;"}, {"question_id": 332, "answer_sql": "SELECT Name FROM (SELECT Name, ROW_NUMBER() OVER (ORDER BY Area DESC) as rn FROM region) t WHERE rn <= 5;"}, {"question_id": 333, "answer_sql": "SELECT T1.Name, T3.Name FROM building AS T1 INNER JOIN region AS T3 ON T1.Region_ID = T3.Region_ID;"}, {"question_id": 334, "answer_sql": "SELECT T1.Name, T2.Name FROM building AS T1 INNER JOIN region AS T2 ON T1.Region_ID = T2.Region_ID;"}, {"question_id": 335, "answer_sql": "SELECT T1.Name FROM region AS T1 INNER JOIN building AS T2 ON T1.Region_ID = T2.Region_ID GROUP BY T1.Name HAVING COUNT(T2.Building_ID) > 1;"}, {"question_id": 336, "answer_sql": "SELECT T1.Name FROM region AS T1 INNER JOIN building AS T2 ON T1.Region_ID = T2.Region_ID GROUP BY T1.Name HAVING COUNT(T2.Building_ID) > 1;"}, {"question_id": 337, "answer_sql": "SELECT t2.Capital FROM building AS t1 INNER JOIN region AS t2 ON t1.Region_ID = t2.Region_ID GROUP BY t2.Region_ID ORDER BY COUNT(*) DESC LIMIT 1;"}, {"question_id": 338, "answer_sql": "SELECT T2.Capital FROM building AS T1 INNER JOIN region AS T2 ON T1.Region_ID = T2.Region_ID GROUP BY T2.Region_ID ORDER BY COUNT(*) DESC LIMIT 1;"}, {"question_id": 339, "answer_sql": "SELECT T2.Address, T1.Capital FROM region AS T1 INNER JOIN building AS T2 ON T1.Region_ID = T2.Region_ID;"}, {"question_id": 340, "answer_sql": "SELECT T1.Address, T2.Name FROM building AS T1 INNER JOIN region AS T2 ON T1.Region_ID = T2.Region_ID;"}, {"question_id": 341, "answer_sql": "SELECT T2.Number_of_Stories FROM region AS T1 INNER JOIN building AS T2 ON T1.Region_ID = T2.Region_ID WHERE T1.Name = 'Abruzzo';"}, {"question_id": 342, "answer_sql": "SELECT T2.Number_of_Stories FROM building AS T1 INNER JOIN region AS T2 ON T1.Region_ID = T2.Region_ID WHERE T2.Name = Abruzzo"}, {"question_id": 343, "answer_sql": "SELECT Completed_Year , COUNT(*) FROM building GROUP BY Completed_Year;"}, {"question_id": 344, "answer_sql": "SELECT Completed_Year , COUNT(*) FROM building GROUP BY Completed_Year ;"}, {"question_id": 345, "answer_sql": "SELECT Completed_Year FROM building GROUP BY Completed_Year ORDER BY COUNT(*) DESC LIMIT 1"}, {"question_id": 346, "answer_sql": "SELECT MAX(Completed_Year) FROM building;"}, {"question_id": 347, "answer_sql": "SELECT Name FROM region WHERE Region_ID NOT IN (SELECT Region_ID FROM building)"}, {"question_id": 348, "answer_sql": "SELECT Name FROM region WHERE Region_ID NOT IN (SELECT Region_ID FROM building);"}, {"question_id": 349, "answer_sql": "SELECT Completed_Year FROM building WHERE Number_of_Stories > 20 INTERSECT SELECT Completed_Year FROM building WHERE Number_of_Stories < 15"}, {"question_id": 350, "answer_sql": "SELECT Completed_Year FROM building WHERE Number_of_Stories > 20 INTERSECT SELECT Completed_Year FROM building WHERE Number_of_Stories < 15"}, {"question_id": 351, "answer_sql": "SELECT DISTINCT Address FROM building;"}, {"question_id": 352, "answer_sql": "SELECT DISTINCT Address FROM building;"}, {"question_id": 353, "answer_sql": "SELECT Completed_Year FROM building ORDER BY Number_of_Stories DESC;"}, {"question_id": 354, "answer_sql": "SELECT Completed_Year , Number_of_Stories FROM building ORDER BY Number_of_Stories DESC;"}, {"question_id": 355, "answer_sql": "SELECT Channel_Details FROM Channels ORDER BY Channel_Details ASC;"}, {"question_id": 356, "answer_sql": "SELECT Channel_Details FROM Channels ORDER BY Channel_Details"}, {"question_id": 357, "answer_sql": "SELECT count(*) FROM Services;"}, {"question_id": 358, "answer_sql": "SELECT count(*) FROM Services"}, {"question_id": 359, "answer_sql": "SELECT Analytical_Layer_Type_Code FROM (SELECT Analytical_Layer_Type_Code , COUNT(*) AS num FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code) AS subquery ORDER BY subquery.num DESC LIMIT 1;"}, {"question_id": 360, "answer_sql": "SELECT Analytical_Layer_Type_Code FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code ORDER BY COUNT(*) DESC LIMIT 1"}, {"question_id": 361, "answer_sql": "SELECT T3.Service_Details FROM Customers AS T1 INNER JOIN Customers_and_Services AS T2 ON T1.customer_id = T2.customer_id INNER JOIN Services AS T3 ON T2.service_id = T3.service_id WHERE T1.customer_details = 'Hardy Kutch'"}, {"question_id": 362, "answer_sql": "SELECT T3.Service_Details FROM Customers AS T1 INNER JOIN Customers_and_Services AS T2 ON T1.customer_id = T2.customer_id INNER JOIN Services AS T3 ON T2.service_id = T3.service_id WHERE T1.customer_details = Hardy Kutch"}, {"question_id": 363, "answer_sql": "SELECT T2.Service_Details FROM Customers_and_Services AS T1 INNER JOIN Services AS T2 ON T1.Service_ID = T2.Service_ID GROUP BY T2.Service_ID HAVING COUNT(*) > 3"}, {"question_id": 364, "answer_sql": "SELECT T3.Service_Details FROM Customers_and_Services AS T1 INNER JOIN Customers AS T2 ON T1.Customer_ID = T2.Customer_ID INNER JOIN Services AS T3 ON T1.Service_ID = T3.Service_ID GROUP BY T3.Service_ID HAVING COUNT(*) > 3"}, {"question_id": 365, "answer_sql": "The most times a customer has used services is determined by the number of times a customer has used services. This can be determined by a subquery that counts the number of times a customer has used services and then finds the customer with the highest count."}, {"question_id": 366, "answer_sql": "SELECT T1.customer_details FROM customers AS T1 JOIN customers_and_services AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1;"}, {"question_id": 367, "answer_sql": "SELECT t1.customer_details FROM customers AS t1 JOIN customers_and_services AS t2 ON t1.customer_id = t2.customer_id JOIN services AS t3 ON t2.service_id = t3.service_id GROUP BY t1.customer_id ORDER BY count(*) DESC LIMIT 1;"}, {"question_id": 368, "answer_sql": "SELECT T1.customer_details FROM customers AS T1 JOIN customers_and_services AS T2 ON T1.customer_id = T2.customer_id JOIN services AS T3 ON T2.service_id = T3.service_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1"}, {"question_id": 369, "answer_sql": "The customer who has never used any services is the customer with no services associated with them. This can be found by checking for customers with no services associated with them."}, {"question_id": 370, "answer_sql": "SELECT customer_details FROM customers EXCEPT SELECT t1.customer_details FROM customers AS t1 JOIN customers_and_services AS t2 ON t1.customer_id = t2.customer_id WHERE t2.service_id = '0'"}, {"question_id": 371, "answer_sql": "SELECT T1.customer_details FROM customers AS T1 JOIN customers_and_services AS T2 ON T1.customer_id = T2.customer_id JOIN services AS T3 ON T2.service_id = T3.service_id GROUP BY T3.service_id ORDER BY count(*) ASC LIMIT 1;"}, {"question_id": 372, "answer_sql": "SELECT DISTINCT T1.customer_details FROM customers AS T1 JOIN customers_and_services AS T2 ON T1.customer_id = T2.customer_id JOIN services AS T3 ON T2.service_id = T3.service_id WHERE T3.service_id IN (SELECT T3.service_id FROM services AS T3 JOIN customer_interactions AS T4 ON T3.service_id = T4.service_id JOIN customers_and_services AS T5 ON T4.customer_interaction_id = T5.customer_interaction_id GROUP BY T3.service_id ORDER BY COUNT(*) ASC LIMIT 1);"}, {"question_id": 373, "answer_sql": "SELECT count(DISTINCT Customers_and_Services_Details) FROM Customers_and_Services;"}, {"question_id": 374, "answer_sql": "SELECT count(DISTINCT Customers_and_Services_Details) FROM Customers_and_Services;"}, {"question_id": 375, "answer_sql": "SELECT customer_id FROM customers WHERE customer_details LIKE %Kutch%"}, {"question_id": 376, "answer_sql": "SELECT customer_details FROM customers WHERE customer_details LIKE '%Kutch%'"}, {"question_id": 377, "answer_sql": "SELECT DISTINCT T2.Service_Details FROM Customers_and_Services AS T1 INNER JOIN Services AS T2 ON T1.Service_ID = T2.Service_ID INNER JOIN Customer_Interactions AS T3 ON T2.Service_ID = T3.Service_ID INNER JOIN Customers AS T4 ON T3.Customer_ID = T4.Customer_ID WHERE T4.Customer_Details = 'Hardy Kutch' OR T3.Status_Code = 'good'"}, {"question_id": 378, "answer_sql": "SELECT T3.Service_Details FROM Customers AS T1 INNER JOIN Customers_and_Services AS T2 ON T1.customer_id = T2.customer_id INNER JOIN Services AS T3 ON T2.service_id = T3.service_id WHERE T1.customer_details = 'Hardy Kutch' OR T3.service_details = 'good'"}, {"question_id": 379, "answer_sql": "SELECT T3.Service_Details FROM Customers AS T1 INNER JOIN Customers_and_Services AS T2 ON T1.customer_id = T2.customer_id INNER JOIN Services AS T3 ON T2.service_id = T3.service_id INNER JOIN Customer_Interactions AS T4 ON T3.service_id = T4.service_id WHERE T1.customer_details = 'Hardy Kutch' AND T4.status_code = 'good'"}, {"question_id": 380, "answer_sql": "SELECT T3.Service_Details FROM Customers AS T1 INNER JOIN Customers_and_Services AS T2 ON T1.customer_id = T2.customer_id INNER JOIN Services AS T3 ON T2.service_id = T3.service_id INNER JOIN Customer_Interactions AS T4 ON T3.service_id = T4.service_id WHERE T1.customer_details = 'Hardy Kutch' AND T4.status_code = 'bad';"}, {"question_id": 381, "answer_sql": "SELECT T3.Service_Details FROM Customer_Interactions AS T1 INNER JOIN Channels AS T2 ON T1.Channel_ID = T2.Channel_ID INNER JOIN Services AS T3 ON T1.Service_ID = T3.Service_ID WHERE T2.Channel_Details = '15 ij ' GROUP BY T3.Service_Details"}, {"question_id": 382, "answer_sql": "SELECT T3.Service_Details FROM Customer_Interactions AS T1 INNER JOIN Channels AS T2 ON T1.Channel_ID = T2.Channel_ID INNER JOIN Services AS T3 ON T1.Service_ID = T3.Service_ID WHERE T2.Channel_Details = 15 ij ;"}, {"question_id": 383, "answer_sql": "SELECT DISTINCT T1.customer_details FROM customers AS T1 INNER JOIN customer_interactions AS T2 ON T1.customer_id = T2.customer_id INNER JOIN services AS T3 ON T2.service_id = T3.service_id INNER JOIN integration_platform AS T4 ON T2.customer_interaction_id = T4.customer_interaction_id INNER JOIN analytical_layer AS T5 ON T2.customer_interaction_id = T5.customer_interaction_id WHERE T2.status_code = 'Stuck' AND T5.pattern_recognition = 'bad';"}, {"question_id": 384, "answer_sql": "SELECT DISTINCT T1.customer_details FROM customers AS T1 INNER JOIN customer_interactions AS T2 ON T1.customer_id = T2.customer_id INNER JOIN services AS T3 ON T2.service_id = T3.service_id INNER JOIN integration_platform AS T4 ON T2.customer_interaction_id = T4.customer_interaction_id WHERE T2.status_code = 'Stuck' AND T4.integration_platform_details = 'bad' AND T3.service_details = 'bad';"}, {"question_id": 385, "answer_sql": "SELECT COUNT(*) FROM Customer_Interactions AS T1 INNER JOIN Integration_Platform AS T2 ON T1.Customer_Interaction_ID = T2.Customer_Interaction_ID WHERE T1.Status_Code = Successful ;"}, {"question_id": 386, "answer_sql": "SELECT COUNT(*) FROM Integration_Platform WHERE Integration_Platform_Details = Success ;"}, {"question_id": 387, "answer_sql": "SELECT DISTINCT T1.customer_details FROM customers AS T1 INNER JOIN customer_interactions AS T2 ON T1.customer_id = T2.customer_id INNER JOIN integration_platform AS T3 ON T2.customer_interaction_id = T3.customer_interaction_id WHERE T3.integration_platform_details = 'failed';"}, {"question_id": 388, "answer_sql": "SELECT DISTINCT T1.customer_details FROM customers AS T1 INNER JOIN customer_interactions AS T2 ON T1.customer_id = T2.customer_id INNER JOIN integration_platform AS T3 ON T2.customer_interaction_id = T3.customer_interaction_id WHERE T3.integration_platform_details = 'Fail';"}, {"question_id": 389, "answer_sql": "The service(s) that has(have) never been used by any customer can be found by checking for services that do not appear in the Customers_and_Services table. This can be achieved by checking for services that do not appear in the Customers_and_Services table."}, {"question_id": 390, "answer_sql": "SELECT DISTINCT T1.Service_Details FROM Services AS T1 LEFT JOIN Customers_and_Services AS T2 ON T1.Service_ID = T2.Service_ID WHERE T2.Service_ID IS NULL;"}, {"question_id": 391, "answer_sql": "SELECT Analytical_Layer_Type_Code , COUNT(*) FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code;"}, {"question_id": 392, "answer_sql": "```sql SELECT T1.Analytical_Layer_Type_Code , COUNT(*) FROM Analytical_Layer AS T1 INNER JOIN Customers_and_Services AS T2 ON T1.Customers_and_Services_ID = T2.Customers_and_Services_ID GROUP BY T1.Analytical_Layer_Type_Code"}, {"question_id": 393, "answer_sql": "SELECT T2.Service_Details FROM Customers_and_Services AS T1 INNER JOIN Services AS T2 ON T1.Service_ID = T2.Service_ID INNER JOIN Customer_Interactions AS T3 ON T2.Service_ID = T3.Service_ID WHERE T3.Status_Code = 'unsatisfied'"}, {"question_id": 394, "answer_sql": "SELECT T1.Service_Details FROM Services AS T1 INNER JOIN Customers_and_Services AS T2 ON T1.Service_ID = T2.Service_ID INNER JOIN Customer_Interactions AS T3 ON T2.Customers_and_Services_ID = T3.Customers_and_Services_ID WHERE T3.Status_Code = 'unsatisfied';"}, {"question_id": 395, "answer_sql": "SELECT count(*) FROM Vehicles;"}, {"question_id": 396, "answer_sql": "SELECT count(*) FROM Vehicles;"}, {"question_id": 397, "answer_sql": "SELECT name FROM Vehicles ORDER BY Model_year DESC;"}, {"question_id": 398, "answer_sql": "SELECT name FROM Vehicles ORDER BY Model_year DESC;"}, {"question_id": 399, "answer_sql": "SELECT DISTINCT Type_of_powertrain FROM Vehicles;"}, {"question_id": 400, "answer_sql": "SELECT DISTINCT Type_of_powertrain FROM Vehicles;"}, {"question_id": 401, "answer_sql": "SELECT name, Type_of_powertrain, Annual_fuel_cost FROM Vehicles WHERE Model_year = 2013 OR Model_year = 2014;"}, {"question_id": 402, "answer_sql": "SELECT Vehicles.name, Vehicles.Type_of_powertrain, Vehicles.Annual_fuel_cost FROM Vehicles WHERE Vehicles.Model_year IN (2013, 2014);"}, {"question_id": 403, "answer_sql": "SELECT TYPE_of_powertrain FROM Vehicles WHERE Model_year = 2014 INTERSECT SELECT TYPE_of_powertrain FROM Vehicles WHERE Model_year = 2013"}, {"question_id": 404, "answer_sql": "SELECT Type_of_powertrain FROM Vehicles WHERE Model_year = 2013 INTERSECT SELECT Type_of_powertrain FROM Vehicles WHERE Model_year = 2014"}, {"question_id": 405, "answer_sql": "SELECT T2.Type_of_powertrain , COUNT(*) FROM Vehicles AS T1 INNER JOIN Renting_history AS T2 ON T1.id = T2.vehicles_id GROUP BY T2.Type_of_powertrain;"}, {"question_id": 406, "answer_sql": "SELECT Type_of_powertrain , COUNT(*) FROM Vehicles GROUP BY Type_of_powertrain;"}, {"question_id": 407, "answer_sql": "SELECT T2.Type_of_powertrain FROM Vehicles AS T1 INNER JOIN (SELECT Type_of_powertrain, COUNT(*) AS num FROM Vehicles GROUP BY Type_of_powertrain ORDER BY num DESC LIMIT 1) AS T2 ON T1.Type_of_powertrain = T2.Type_of_powertrain;"}, {"question_id": 408, "answer_sql": "SELECT T2.Type_of_powertrain FROM Vehicles AS T1 INNER JOIN (SELECT Type_of_powertrain, COUNT(*) AS count FROM Vehicles GROUP BY Type_of_powertrain ORDER BY count DESC LIMIT 1) AS T2 ON T1.Type_of_powertrain = T2.Type_of_powertrain;"}, {"question_id": 409, "answer_sql": "SELECT MIN ( Annual_fuel_cost ) , MAX ( Annual_fuel_cost ) , AVG ( Annual_fuel_cost ) FROM Vehicles ;"}, {"question_id": 410, "answer_sql": "SELECT MIN ( Annual_fuel_cost ) , MAX ( Annual_fuel_cost ) , AVG ( Annual_fuel_cost ) FROM Vehicles ;"}, {"question_id": 411, "answer_sql": "SELECT name, model_year FROM Vehicles WHERE city_fuel_economy_rate <= highway_fuel_economy_rate;"}, {"question_id": 412, "answer_sql": "SELECT name, model_year FROM Vehicles WHERE city_fuel_economy_rate <= highway_fuel_economy_rate;"}, {"question_id": 413, "answer_sql": "SELECT T2.Type_of_powertrain, AVG(T1.Annual_fuel_cost) FROM Vehicles AS T1 INNER JOIN (SELECT Type_of_powertrain, COUNT(*) AS cnt FROM Vehicles GROUP BY Type_of_powertrain HAVING cnt >= 2) AS T2 ON T1.Type_of_powertrain = T2.Type_of_powertrain GROUP BY T2.Type_of_powertrain;"}, {"question_id": 414, "answer_sql": "SELECT T2.Type_of_powertrain, AVG(T1.Annual_fuel_cost) FROM Vehicles AS T1 INNER JOIN (SELECT Vehicles_id, COUNT(*) FROM Renting_history GROUP BY Vehicles_id HAVING COUNT(*) > 1) AS T2 ON T1.id = T2.Vehicles_id GROUP BY T2.Type_of_powertrain;"}, {"question_id": 415, "answer_sql": "SELECT name, age, membership_credit FROM Customers;"}, {"question_id": 416, "answer_sql": "SELECT name, age, membership_credit FROM Customers;"}, {"question_id": 417, "answer_sql": "SELECT name, age FROM Customers ORDER BY membership_credit DESC LIMIT 1;"}, {"question_id": 418, "answer_sql": "SELECT name, age FROM Customers ORDER BY membership_credit DESC LIMIT 1;"}, {"question_id": 419, "answer_sql": "SELECT AVG(age) FROM Customers WHERE membership_credit > (SELECT AVG(membership_credit) FROM Customers);"}, {"question_id": 420, "answer_sql": "SELECT AVG(age) FROM Customers WHERE membership_credit > (SELECT AVG(membership_credit) FROM Customers);"}, {"question_id": 421, "answer_sql": "SELECT * FROM Discount;"}, {"question_id": 422, "answer_sql": "SELECT * FROM Discount;"}, {"question_id": 423, "answer_sql": "SELECT Vehicles.name, Renting_history.total_hours FROM Vehicles JOIN Renting_history ON Vehicles.id = Renting_history.vehicles_id;"}, {"question_id": 424, "answer_sql": "SELECT Vehicles.name, SUM(Renting_history.total_hours) FROM Vehicles INNER JOIN Renting_history ON Vehicles.id = Renting_history.vehicles_id GROUP BY Vehicles.name;"}, {"question_id": 425, "answer_sql": "SELECT name FROM Vehicles WHERE id NOT IN (SELECT vehicles_id FROM Renting_history)"}, {"question_id": 426, "answer_sql": "The vehicles that have never been rented are those that are not in the Renting_history table. This can be determined by checking for vehicles that do not have a corresponding entry in the Renting_history table."}, {"question_id": 427, "answer_sql": "SELECT T1.name FROM customers AS T1 JOIN renting_history AS T2 ON T1.id = T2.customer_id GROUP BY T1.id HAVING COUNT(*) >= 2;"}, {"question_id": 428, "answer_sql": "SELECT T1.name FROM customers AS T1 JOIN renting_history AS T2 ON T1.id = T2.customer_id GROUP BY T1.id HAVING COUNT(*) >= 2;"}, {"question_id": 429, "answer_sql": "The vehicle with the most number of renting history records is the one with the most number of records. This can be found by using the `COUNT` function in combination with `GROUP BY` and `ORDER BY`."}, {"question_id": 430, "answer_sql": "SELECT T2.name, T2.model_year FROM Renting_history AS T1 INNER JOIN Vehicles AS T2 ON T1.vehicles_id = T2.id GROUP BY T2.name, T2.model_year ORDER BY COUNT(*) DESC LIMIT 1;"}, {"question_id": 431, "answer_sql": "SELECT Vehicles.name FROM Vehicles JOIN Renting_history ON Vehicles.id = Renting_history.vehicles_id JOIN Customers ON Renting_history.customer_id = Customers.id ORDER BY Renting_history.total_hours DESC"}, {"question_id": 432, "answer_sql": "SELECT Vehicles.name FROM Vehicles JOIN Renting_history ON Vehicles.id = Renting_history.vehicles_id ORDER BY Renting_history.total_hours DESC"}, {"question_id": 433, "answer_sql": "SELECT T2.name FROM Renting_history AS T1 INNER JOIN Discount AS T2 ON T1.discount_id = T2.id GROUP BY T2.name ORDER BY COUNT(*) DESC LIMIT 1"}, {"question_id": 434, "answer_sql": "The most rental history records corresponds to the discount with the most records. This can be determined by the `discount_id` in the `Renting_history` table. The `discount_id` is a foreign key that references the `id` in the `Discount` table. The `Renting_history` table has a foreign key that references the `discount_id`, so the `discount_id` in the `Renting_history` table is the foreign key that points to the `id` in the `Discount` table. The `discount_id` in the `Renting_history` table is the foreign key that points to the `id` in the `Discount` table. The `discount_id` in the `Renting_history` table is the foreign key that points to the `id` in the `Discount` table."}, {"question_id": 435, "answer_sql": "SELECT Vehicles.name, Vehicles.Type_of_powertrain FROM Vehicles INNER JOIN Renting_history ON Vehicles.id = Renting_history.vehicles_id WHERE Renting_history.total_hours > 30;"}, {"question_id": 436, "answer_sql": "SELECT Vehicles.name, Vehicles.Type_of_powertrain FROM Vehicles INNER JOIN Renting_history ON Vehicles.id = Renting_history.vehicles_id WHERE Renting_history.total_hours > 30;"}, {"question_id": 437, "answer_sql": "SELECT TYPE_of_powertrain, AVG(City_fuel_economy_rate), AVG(Highway_fuel_economy_rate) FROM Vehicles GROUP BY TYPE_of_powertrain;"}, {"question_id": 438, "answer_sql": "SELECT Type_of_powertrain, AVG(City_fuel_economy_rate) AS Avg_City_Fuel_Economy, AVG(Highway_fuel_economy_rate) AS Avg_Highway_Fuel_Economy FROM Vehicles GROUP BY Type_of_powertrain;"}, {"question_id": 439, "answer_sql": "SELECT AVG(amount_of_loan) FROM Student_Loans;"}, {"question_id": 440, "answer_sql": "SELECT avg(amount_of_loan) FROM Student_Loans;"}, {"question_id": 441, "answer_sql": "SELECT T1.bio_data, T1.student_id FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING COUNT(*) >= 2 INTERSECT SELECT T1.bio_data, T1.student_id FROM Students AS T1 JOIN Detention AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING COUNT(*) < 2"}, {"question_id": 442, "answer_sql": "SELECT T1.bio_data, T1.student_id FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING COUNT(*) >= 2 INTERSECT SELECT T1.bio_data, T1.student_id FROM Students AS T1 JOIN Detention AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING COUNT(*) < 2"}, {"question_id": 443, "answer_sql": "SELECT T1.teacher_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id = T2.teacher_id WHERE T2.class_details LIKE '%data%' AND T2.class_details NOT LIKE '%net%'"}, {"question_id": 444, "answer_sql": "SELECT T1.teacher_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id = T2.teacher_id WHERE T2.class_details LIKE '%data%' AND T2.class_details NOT LIKE '%net%'"}, {"question_id": 445, "answer_sql": "SELECT bio_data FROM Students WHERE student_id NOT IN (SELECT student_id FROM Detention WHERE student_id IS NOT NULL UNION SELECT student_id FROM Student_Loans WHERE student_id IS NOT NULL)"}, {"question_id": 446, "answer_sql": "SELECT T1.bio_data FROM Students AS T1 LEFT JOIN Detention AS T2 ON T1.student_id = T2.student_id OR T1.student_id = T3.student_id WHERE T2.detention_id IS NULL AND T3.student_loan_id IS NULL"}, {"question_id": 447, "answer_sql": "SELECT T2.amount_of_loan , T2.date_of_loan FROM Achievements AS T1 INNER JOIN Student_Loans AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING COUNT(*) >= 2"}, {"question_id": 448, "answer_sql": "SELECT T1.amount_of_loan , T1.date_of_loan FROM Student_Loans AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id JOIN Achievements AS T3 ON T2.student_id = T3.student_id GROUP BY T2.student_id HAVING COUNT(*) >= 2"}, {"question_id": 449, "answer_sql": "SELECT T2.teacher_details, T1.teacher_id FROM Classes AS T1 INNER JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id GROUP BY T2.teacher_id ORDER BY COUNT(*) DESC LIMIT 1;"}, {"question_id": 450, "answer_sql": "SELECT T2.teacher_details, T1.teacher_id FROM Classes AS T1 INNER JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id GROUP BY T2.teacher_id ORDER BY COUNT(*) DESC LIMIT 1"}, {"question_id": 451, "answer_sql": "SELECT DISTINCT detention_type_description FROM Detention;"}, {"question_id": 452, "answer_sql": "SELECT DISTINCT detention_type_description FROM Detention;"}, {"question_id": 453, "answer_sql": "SELECT T1.student_details, T3.address_type_description FROM Students AS T1 JOIN Students_Addresses AS T2 ON T1.student_id = T2.student_id JOIN Ref_Address_Types AS T3 ON T2.address_type_code = T3.address_type_code"}, {"question_id": 454, "answer_sql": "SELECT T1.student_details, T3.address_type_description FROM Students AS T1 JOIN Students_Addresses AS T2 ON T1.student_id = T2.student_id JOIN Ref_Address_Types AS T3 ON T2.address_type_code = T3.address_type_code"}, {"question_id": 455, "answer_sql": "SELECT T1.address_details, T2.bio_data FROM Addresses AS T1 INNER JOIN Students AS T2 ON T1.address_id = T2.student_id"}, {"question_id": 456, "answer_sql": "SELECT T1.address_details, T2.bio_data FROM Students_Addresses AS T1 INNER JOIN Students AS T2 ON T1.student_id = T2.student_id"}, {"question_id": 457, "answer_sql": "SELECT Students.bio_data , Transcripts.date_of_transcript FROM Students JOIN Transcripts ON Students.student_id = Transcripts.student_id"}, {"question_id": 458, "answer_sql": "SELECT Students.bio_data , Transcripts.date_of_transcript FROM Students JOIN Transcripts ON Students.student_id = Transcripts.student_id"}, {"question_id": 459, "answer_sql": "SELECT T1.behaviour_monitoring_details, T2.result_details FROM Behaviour_Monitoring AS T1 JOIN ( SELECT student_id, behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY student_id ORDER BY COUNT(*) DESC LIMIT 1 ) AS T2 ON T1.student_id = T2.student_id;"}, {"question_id": 460, "answer_sql": "SELECT `behaviour_monitoring_details`, COUNT(*) as count FROM Behaviour_Monitoring GROUP BY `behaviour_monitoring_details` ORDER BY count DESC LIMIT 1;"}, {"question_id": 461, "answer_sql": "SELECT T1.bio_data, T1.student_details FROM Students AS T1 INNER JOIN Behaviour_Monitoring AS T2 ON T1.student_id = T2.student_id INNER JOIN (SELECT student_id, COUNT(*) FROM Behaviour_Monitoring GROUP BY student_id HAVING COUNT(*) = 3) AS T3 ON T1.student_id = T3.student_id ORDER BY T3.COUNT(*) DESC;"}, {"question_id": 462, "answer_sql": "SELECT T1.bio_data, T1.student_details FROM Students AS T1 INNER JOIN Behaviour_Monitoring AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING COUNT(*) > 3 ORDER BY COUNT(*) DESC LIMIT 1"}, {"question_id": 463, "answer_sql": "SELECT T1.bio_data FROM Students AS T1 INNER JOIN Behaviour_Monitoring AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id ORDER BY COUNT(T2.behaviour_monitoring_details) DESC LIMIT 1"}, {"question_id": 464, "answer_sql": "SELECT T1.bio_data FROM Students AS T1 INNER JOIN Behaviour_Monitoring AS T2 ON T1.student_id = T2.student_id GROUP BY T2.behaviour_monitoring_details ORDER BY COUNT(T2.behaviour_monitoring_details) DESC LIMIT 1"}, {"question_id": 465, "answer_sql": "SELECT DISTINCT T1.bio_data, T3.event_date FROM Students AS T1 INNER JOIN Student_Events AS T2 ON T1.student_id = T2.student_id INNER JOIN Events AS T3 ON T2.event_id = T3.event_id;"}, {"question_id": 466, "answer_sql": "SELECT T1.bio_data, T2.event_date FROM Students AS T1 INNER JOIN Student_Events AS T2 ON T1.student_id = T2.student_id;"}, {"question_id": 467, "answer_sql": "SELECT COUNT(T1.student_id) , T2.event_type_code , T2.event_type_description FROM Student_Events AS T1 JOIN Ref_Event_Types AS T2 ON T1.event_type_code = T2.event_type_code GROUP BY T2.event_type_code ORDER BY COUNT(T1.student_id) DESC LIMIT 1"}, {"question_id": 468, "answer_sql": "SELECT T2.event_type_code, T2.event_type_description, COUNT(T1.student_id) FROM Student_Events AS T1 JOIN Ref_Event_Types AS T2 ON T1.event_type_code = T2.event_type_code GROUP BY T2.event_type_code ORDER BY COUNT(T1.student_id) DESC LIMIT 1;"}, {"question_id": 469, "answer_sql": "SELECT T1.achievement_details, T2.achievement_type_description FROM Achievements AS T1 INNER JOIN Ref_Achievement_Type AS T2 ON T1.achievement_type_code = T2.achievement_type_code"}, {"question_id": 470, "answer_sql": "SELECT T1.achievement_details, T2.achievement_type_description FROM Achievements AS T1 INNER JOIN Ref_Achievement_Type AS T2 ON T1.achievement_type_code = T2.achievement_type_code"}, {"question_id": 471, "answer_sql": "SELECT COUNT(DISTINCT teacher_id) FROM Classes WHERE teacher_id NOT IN (SELECT DISTINCT teacher_id FROM Achievements WHERE student_id NOT IN (SELECT DISTINCT student_id FROM Achievements WHERE achievement_type_code = 'Won'))"}, {"question_id": 472, "answer_sql": "SELECT COUNT(DISTINCT teacher_id) FROM Classes WHERE teacher_id NOT IN (SELECT DISTINCT teacher_id FROM Students WHERE student_id NOT IN (SELECT student_id FROM Achievements));"}, {"question_id": 473, "answer_sql": "SELECT T2.date_of_transcript , T2.transcript_details FROM Students AS T1 INNER JOIN Transcripts AS T2 ON T1.student_id = T2.student_id"}, {"question_id": 474, "answer_sql": "SELECT T2.date_of_transcript, T2.transcript_details FROM Students AS T1 INNER JOIN Transcripts AS T2 ON T1.student_id = T2.student_id"}, {"question_id": 475, "answer_sql": "SELECT T1.achievement_type_code, T1.achievement_details, T2.date_achievement FROM Ref_Achievement_Type AS T1 INNER JOIN Achievements AS T2 ON T1.achievement_type_code = T2.achievement_type_code"}, {"question_id": 476, "answer_sql": "SELECT T1.achievement_type_code, T1.achievement_details, T2.date_achievement FROM Ref_Achievement_Type AS T1 INNER JOIN Achievements AS T2 ON T1.achievement_type_code = T2.achievement_type_code"}, {"question_id": 477, "answer_sql": "SELECT datetime_detention_start, datetime_detention_end FROM Detention"}, {"question_id": 478, "answer_sql": "SELECT datetime_detention_start, datetime_detention_end FROM Detention;"}, {"question_id": 479, "answer_sql": "SELECT bio_data FROM Students WHERE student_details LIKE '%Suite%'"}, {"question_id": 480, "answer_sql": "SELECT bio_data FROM Students WHERE student_details LIKE '%Suite%';"}, {"question_id": 481, "answer_sql": "SELECT T1.teacher_details, T3.student_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id = T2.teacher_id JOIN Students AS T3 ON T2.student_id = T3.student_id;"}, {"question_id": 482, "answer_sql": "SELECT T1.teacher_details, T3.student_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id = T2.teacher_id JOIN Students AS T3 ON T2.student_id = T3.student_id GROUP BY T2.teacher_id, T3.student_id;"}, {"question_id": 483, "answer_sql": "SELECT teacher_id, COUNT(course_id) as num_courses FROM Classes GROUP BY teacher_id ORDER BY num_courses DESC LIMIT 1;"}, {"question_id": 484, "answer_sql": "SELECT T2.teacher_id, COUNT(*) as num_courses FROM Classes AS T1 INNER JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id GROUP BY T2.teacher_id ORDER BY num_courses DESC LIMIT 1;"}, {"question_id": 485, "answer_sql": "SELECT COUNT(*) , T2.student_id FROM Classes AS T1 INNER JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id ORDER BY COUNT(*) DESC LIMIT 1"}, {"question_id": 486, "answer_sql": "SELECT T1.student_id, COUNT(*) FROM Classes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1;"}, {"question_id": 487, "answer_sql": "SELECT T1.student_id, T1.student_details FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING COUNT(*) = 2;"}, {"question_id": 488, "answer_sql": "SELECT T1.student_id, T1.student_details FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING COUNT(*) = 2;"}, {"question_id": 489, "answer_sql": "SELECT T1.detention_type_code, T1.detention_type_description FROM Ref_Detention_Type AS T1 INNER JOIN Detention AS T2 ON T1.detention_type_code = T2.detention_type_code GROUP BY T2.detention_type_code ORDER BY COUNT(*) ASC LIMIT 1;"}, {"question_id": 490, "answer_sql": "SELECT T1.detention_type_code, T1.detention_type_description FROM Ref_Detention_Type AS T1 JOIN Detention AS T2 ON T1.detention_type_code = T2.detention_type_code GROUP BY T2.detention_type_code ORDER BY COUNT(*) ASC LIMIT 1"}, {"question_id": 491, "answer_sql": "SELECT T1.bio_data, T1.student_details FROM Students AS T1 INNER JOIN Student_Loans AS T2 ON T1.student_id = T2.student_id WHERE T2.amount_of_loan > (SELECT AVG(amount_of_loan) FROM Student_Loans)"}, {"question_id": 492, "answer_sql": "SELECT T1.bio_data, T1.student_details FROM Students AS T1 INNER JOIN Student_Loans AS T2 ON T1.student_id = T2.student_id WHERE T2.amount_of_loan > (SELECT AVG(amount_of_loan) FROM Student_Loans)"}, {"question_id": 493, "answer_sql": "SELECT MIN(date_of_loan) FROM Student_Loans;"}, {"question_id": 494, "answer_sql": "SELECT date_of_loan FROM Student_Loans ORDER BY date_of_loan ASC LIMIT 1;"}, {"question_id": 495, "answer_sql": "SELECT T1.bio_data FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id = T2.student_id WHERE T2.amount_of_loan = (SELECT min(amount_of_loan) FROM Student_Loans);"}, {"question_id": 496, "answer_sql": "SELECT T1.bio_data FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id = T2.student_id ORDER BY T2.amount_of_loan LIMIT 1;"}, {"question_id": 497, "answer_sql": "SELECT T1.date_of_transcript FROM Transcripts AS T1 JOIN Student_Loans AS T2 ON T1.student_id = T2.student_id ORDER BY T2.amount_of_loan DESC LIMIT 1"}, {"question_id": 498, "answer_sql": "SELECT T1.date_of_transcript FROM Transcripts AS T1 JOIN Student_Loans AS T2 ON T1.student_id = T2.student_id ORDER BY T2.amount_of_loan DESC LIMIT 1;"}, {"question_id": 499, "answer_sql": "SELECT T1.teacher_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id = T2.teacher_id JOIN Students AS T3 ON T2.student_id = T3.student_id JOIN Transcripts AS T4 ON T3.student_id = T4.student_id ORDER BY T4.date_of_transcript LIMIT 1"}, {"question_id": 500, "answer_sql": "SELECT T1.teacher_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id = T2.teacher_id JOIN Students AS T3 ON T3.student_id = T2.student_id JOIN Transcripts AS T4 ON T4.student_id = T3.student_id WHERE T4.date_of_transcript = (SELECT min(date_of_transcript) FROM Transcripts)"}, {"question_id": 501, "answer_sql": "SELECT T2.student_id , sum(T1.amount_of_loan) FROM Student_Loans AS T1 INNER JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id;"}, {"question_id": 502, "answer_sql": "SELECT T1.student_id , SUM(T2.amount_of_loan) FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id;"}, {"question_id": 503, "answer_sql": "SELECT T1.student_id, T1.bio_data, COUNT(*) FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id;"}, {"question_id": 504, "answer_sql": "SELECT T1.student_id, T1.bio_data, COUNT(*) FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id;"}, {"question_id": 505, "answer_sql": "SELECT COUNT(DISTINCT student_id) FROM Detention;"}, {"question_id": 506, "answer_sql": "SELECT COUNT(DISTINCT student_id) FROM Detention;"}, {"question_id": 507, "answer_sql": "SELECT T1.address_type_code, T1.address_type_description FROM Ref_Address_Types AS T1 INNER JOIN Students_Addresses AS T2 ON T1.address_type_code = T2.address_type_code GROUP BY T2.address_type_code ORDER BY COUNT(*) DESC LIMIT 1"}, {"question_id": 508, "answer_sql": "SELECT T1.address_type_code, T1.address_type_description FROM Ref_Address_Types AS T1 INNER JOIN Students_Addresses AS T2 ON T1.address_type_code = T2.address_type_code GROUP BY T2.address_type_code ORDER BY COUNT(*) DESC LIMIT 1"}, {"question_id": 509, "answer_sql": "SELECT T1.bio_data FROM Students AS T1 INNER JOIN Student_Events AS T2 ON T1.student_id = T2.student_id LEFT JOIN Student_Loans AS T3 ON T1.student_id = T3.student_id WHERE T3.student_loan_id IS NULL"}, {"question_id": 510, "answer_sql": "SELECT T1.bio_data FROM Students AS T1 INNER JOIN Student_Events AS T2 ON T1.student_id = T2.student_id LEFT JOIN Student_Loans AS T3 ON T1.student_id = T3.student_id WHERE T3.student_loan_id IS NULL"}, {"question_id": 511, "answer_sql": "SELECT T1.date_from , T1.date_to FROM Students_Addresses AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.student_id IN (SELECT student_id FROM Transcripts GROUP BY student_id HAVING COUNT(*) = 2)"}, {"question_id": 512, "answer_sql": "SELECT T1.date_from , T1.date_to FROM Students_Addresses AS T1 JOIN Addresses AS T2 ON T1.address_id = T2.address_id JOIN Transcripts AS T3 ON T3.student_id = T1.student_id GROUP BY T1.student_id HAVING COUNT(*) = 2"}, {"question_id": 513, "answer_sql": "SELECT datetime_detention_start FROM Detention GROUP BY datetime_detention_start ORDER BY COUNT(*) DESC LIMIT 1"}, {"question_id": 514, "answer_sql": "SELECT datetime_detention_start FROM Detention;"}, {"question_id": 515, "answer_sql": "SELECT Name FROM Author;"}, {"question_id": 516, "answer_sql": "SELECT Name FROM Author;"}, {"question_id": 517, "answer_sql": "SELECT Name, Address FROM Client;"}, {"question_id": 518, "answer_sql": "SELECT Name, Address FROM Client;"}, {"question_id": 519, "answer_sql": "SELECT Title, ISBN, SalePrice FROM Book;"}, {"question_id": 520, "answer_sql": "SELECT Title, ISBN, SalePrice FROM Book;"}, {"question_id": 521, "answer_sql": "SELECT count(*) FROM Book;"}, {"question_id": 522, "answer_sql": "SELECT count(*) FROM Book;"}, {"question_id": 523, "answer_sql": "SELECT count(*) FROM Author;"}, {"question_id": 524, "answer_sql": "SELECT count(*) FROM Author;"}, {"question_id": 525, "answer_sql": "SELECT count(*) FROM Client;"}, {"question_id": 526, "answer_sql": "SELECT count(*) FROM Client;"}, {"question_id": 527, "answer_sql": "SELECT Name, Address FROM Client ORDER BY Name ASC;"}, {"question_id": 528, "answer_sql": "SELECT Name, Address FROM Client ORDER BY Name ASC;"}, {"question_id": 529, "answer_sql": "SELECT T1.Title , T3.Name FROM Book AS T1 JOIN Author_Book AS T2 ON T1.ISBN = T2.ISBN JOIN Author AS T3 ON T3.idAuthor = T2.Author;"}, {"question_id": 530, "answer_sql": "SELECT T1.Title , T3.Name FROM Book AS T1 JOIN Author_Book AS T2 ON T1.ISBN = T2.ISBN JOIN Author AS T3 ON T3.idAuthor = T2.Author;"}, {"question_id": 531, "answer_sql": "SELECT T1.IdOrder , T2.Name FROM Orders AS T1 JOIN Client AS T2 ON T1.IdClient = T2.IdClient"}, {"question_id": 532, "answer_sql": "SELECT Orders.IdOrder , Client.Name FROM Client JOIN Orders ON Client.IdClient = Orders.IdClient"}, {"question_id": 533, "answer_sql": "SELECT T1.Name, COUNT(*) FROM Author AS T1 INNER JOIN Author_Book AS T2 ON T1.idAuthor = T2.Author GROUP BY T1.idAuthor;"}, {"question_id": 534, "answer_sql": "SELECT T1.Name, COUNT(*) FROM Author AS T1 INNER JOIN Author_Book AS T2 ON T1.idAuthor = T2.Author GROUP BY T1.idAuthor;"}, {"question_id": 535, "answer_sql": "SELECT T2.isbn , count(*) FROM Books_Order AS T1 JOIN `Book` AS T2 ON T1.isbn = T2.isbn GROUP BY T2.isbn"}, {"question_id": 536, "answer_sql": "SELECT T2.isbn , count(*) FROM Books_Order AS T1 JOIN `Book` AS T2 ON T1.isbn = T2.isbn GROUP BY T2.isbn"}, {"question_id": 537, "answer_sql": "SELECT T2.isbn , sum(T1.amount) FROM Books_Order AS T1 JOIN `Order` AS T2 ON T1.idorder = T2.idorder GROUP BY T2.isbn;"}, {"question_id": 538, "answer_sql": "SELECT Book.ISBN , SUM(Books_Order.amount) FROM Book JOIN Books_Order ON Book.ISBN = Books_Order.ISBN GROUP BY Book.ISBN"}, {"question_id": 539, "answer_sql": "SELECT T1.title FROM book AS T1 JOIN books_order AS T2 ON T1.isbn = T2.isbn GROUP BY T2.isbn ORDER BY count(*) DESC LIMIT 1"}, {"question_id": 540, "answer_sql": "SELECT T1.title FROM book AS T1 INNER JOIN books_order AS T2 ON T1.isbn = T2.isbn GROUP BY T2.isbn ORDER BY sum(T2.amount) DESC LIMIT 1;"}, {"question_id": 541, "answer_sql": "SELECT T1.title, T1.purchaseprice FROM book AS T1 INNER JOIN books_order AS T2 ON T1.isbn = T2.isbn GROUP BY T2.isbn ORDER BY sum(T2.amount) DESC LIMIT 1;"}, {"question_id": 542, "answer_sql": "SELECT T1.title, T1.purchaseprice FROM book AS T1 INNER JOIN books_order AS T2 ON T1.isbn = T2.isbn GROUP BY T2.isbn ORDER BY sum(T2.amount) DESC LIMIT 1"}, {"question_id": 543, "answer_sql": "SELECT T1.Title FROM Book AS T1 INNER JOIN Books_Order AS T2 ON T1.ISBN = T2.ISBN;"}, {"question_id": 544, "answer_sql": "SELECT DISTINCT T1.Title FROM Book AS T1 INNER JOIN Books_Order AS T2 ON T1.ISBN = T2.ISBN INNER JOIN Orders AS T3 ON T2.IdOrder = T3.IdOrder WHERE T3.DateOrder > '2012-01-01';"}, {"question_id": 545, "answer_sql": "SELECT T1.Name FROM Client AS T1 JOIN Orders AS T2 ON T1.IdClient = T2.IdClient GROUP BY T1.Name HAVING COUNT(*) >= 1"}, {"question_id": 546, "answer_sql": "SELECT DISTINCT T1.Name FROM Client AS T1 JOIN Orders AS T2 ON T1.IdClient = T2.IdClient;"}, {"question_id": 547, "answer_sql": "SELECT T1.Name, COUNT(*) FROM Client AS T1 JOIN Orders AS T2 ON T1.IdClient = T2.IdClient GROUP BY T1.IdClient;"}, {"question_id": 548, "answer_sql": "SELECT T2.Name, COUNT(*) FROM Books_Order AS T1 INNER JOIN Orders AS T2 ON T1.IdOrder = T2.IdOrder INNER JOIN Client AS T3 ON T2.IdClient = T3.IdClient GROUP BY T3.Name;"}, {"question_id": 549, "answer_sql": "```sql SELECT T1.Name FROM Client AS T1 JOIN Orders AS T2 ON T1.IdClient = T2.IdClient GROUP BY T1.IdClient ORDER BY COUNT(*) DESC LIMIT 1"}, {"question_id": 550, "answer_sql": "The client who has made the most orders is:"}, {"question_id": 551, "answer_sql": "SELECT T1.Name, SUM(T2.amount) FROM Client AS T1 JOIN Books_Order AS T2 ON T1.IdClient = T2.IdOrder GROUP BY T1.IdClient;"}, {"question_id": 552, "answer_sql": "SELECT T2.Name, SUM(T1.amount) FROM Books_Order AS T1 INNER JOIN Orders AS T2 ON T1.IdOrder = T2.IdOrder GROUP BY T2.IdClient;"}, {"question_id": 553, "answer_sql": "SELECT T1.Name FROM Client AS T1 JOIN Books_Order AS T2 ON T1.IdClient = T2.IdOrder GROUP BY T1.Name ORDER BY sum(T2.amount) DESC LIMIT 1;"}, {"question_id": 554, "answer_sql": "SELECT T1.Name FROM Client AS T1 JOIN Orders AS T2 ON T1.IdClient = T2.IdClient JOIN Books_Order AS T3 ON T2.IdOrder = T3.IdOrder GROUP BY T1.Name ORDER BY SUM(T3.amount) DESC LIMIT 1"}, {"question_id": 555, "answer_sql": "The book titles for books that have no orders are:"}, {"question_id": 556, "answer_sql": "SELECT Title FROM Book WHERE ISBN NOT IN (SELECT ISBN FROM Books_Order);"}, {"question_id": 557, "answer_sql": "SELECT Name FROM Client WHERE IdClient NOT IN (SELECT IdClient FROM Orders);"}, {"question_id": 558, "answer_sql": "SELECT Name FROM Client WHERE IdClient NOT IN (SELECT IdClient FROM Orders);"}, {"question_id": 559, "answer_sql": "SELECT MAX(SalePrice) , MIN(SalePrice) FROM Book;"}, {"question_id": 560, "answer_sql": "SELECT MAX(SalePrice) , MIN(SalePrice) FROM Book;"}, {"question_id": 561, "answer_sql": "SELECT AVG(PurchasePrice) , AVG(SalePrice) FROM `Book`;"}, {"question_id": 562, "answer_sql": "SELECT AVG(PurchasePrice) AS AveragePurchasePrice, AVG(SalePrice) AS AverageSalePrice FROM `Book`;"}, {"question_id": 563, "answer_sql": "SELECT MAX(SalePrice - PurchasePrice) FROM Book;"}, {"question_id": 564, "answer_sql": "SELECT MAX(salePrice - purchasePrice) FROM book;"}, {"question_id": 565, "answer_sql": "SELECT Title FROM Book WHERE SalePrice > (SELECT AVG(SalePrice) FROM Book);"}, {"question_id": 566, "answer_sql": "SELECT Title FROM Book WHERE SalePrice > (SELECT AVG(SalePrice) FROM Book);"}, {"question_id": 567, "answer_sql": "SELECT Title FROM Book ORDER BY SalePrice ASC LIMIT 1;"}, {"question_id": 568, "answer_sql": "SELECT Title FROM `Book` WHERE SalePrice = (SELECT MIN(SalePrice) FROM `Book`);"}, {"question_id": 569, "answer_sql": "SELECT Title FROM Book ORDER BY PurchasePrice DESC LIMIT 1;"}, {"question_id": 570, "answer_sql": "SELECT Title FROM Book WHERE PurchasePrice = (SELECT MAX(PurchasePrice) FROM Book);"}, {"question_id": 571, "answer_sql": "SELECT AVG(T1.SalePrice) FROM Book AS T1 INNER JOIN Author_Book AS T2 ON T1.ISBN = T2.ISBN INNER JOIN Author AS T3 ON T3.idAuthor = T2.Author WHERE T3.Name = 'George Orwell';"}, {"question_id": 572, "answer_sql": "SELECT AVG(T1.SalePrice) FROM Book AS T1 INNER JOIN Author_Book AS T2 ON T1.ISBN = T2.ISBN INNER JOIN Author AS T3 ON T3.idAuthor = T2.Author WHERE T3.Name = 'George Orwell';"}, {"question_id": 573, "answer_sql": "SELECT T1.SalePrice FROM Book AS T1 INNER JOIN Author_Book AS T2 ON T1.ISBN = T2.ISBN INNER JOIN Author AS T3 ON T3.idAuthor = T2.Author WHERE T3.Name = 'Plato';"}, {"question_id": 574, "answer_sql": "SELECT T1.SalePrice FROM Book AS T1 INNER JOIN Author_Book AS T2 ON T1.ISBN = T2.ISBN INNER JOIN Author AS T3 ON T3.idAuthor = T2.Author WHERE T3.Name = 'Plato';"}, {"question_id": 575, "answer_sql": "SELECT T1.Title FROM Book AS T1 INNER JOIN Author_Book AS T2 ON T1.ISBN = T2.ISBN INNER JOIN Author AS T3 ON T3.idAuthor = T2.Author WHERE T3.Name = 'George Orwell' ORDER BY T1.SalePrice ASC LIMIT 1;"}, {"question_id": 576, "answer_sql": "SELECT T1.Title FROM Book AS T1 INNER JOIN Author_Book AS T2 ON T1.ISBN = T2.ISBN WHERE T1.SalePrice = (SELECT MIN(SalePrice) FROM Book WHERE Title = 'George Orwell')"}, {"question_id": 577, "answer_sql": "SELECT T1.Title FROM Book AS T1 INNER JOIN Author_Book AS T2 ON T1.ISBN = T2.ISBN INNER JOIN Author AS T3 ON T3.idAuthor = T2.Author WHERE T3.Name = 'Plato' AND T1.SalePrice < (SELECT AVG(SalePrice) FROM Book);"}, {"question_id": 578, "answer_sql": "SELECT T1.Title FROM Book AS T1 INNER JOIN Author_Book AS T2 ON T1.ISBN = T2.ISBN INNER JOIN Author AS T3 ON T3.idAuthor = T2.Author WHERE T3.Name = 'Plato' AND T1.SalePrice < (SELECT AVG(SalePrice) FROM Book);"}, {"question_id": 579, "answer_sql": "SELECT T1.Name FROM Author AS T1 INNER JOIN Author_Book AS T2 ON T1.idAuthor = T2.Author WHERE T2.ISBN = (SELECT ISBN FROM Book WHERE Title = 'Pride and Prejudice');"}, {"question_id": 580, "answer_sql": "SELECT T1.Name FROM Author AS T1 INNER JOIN Author_Book AS T2 ON T1.idAuthor = T2.Author INNER JOIN Book AS T3 ON T2.ISBN = T3.ISBN WHERE T3.Title = 'Pride and Prejudice';"}, {"question_id": 581, "answer_sql": "SELECT T1.Title FROM Book AS T1 INNER JOIN Author_Book AS T2 ON T1.ISBN = T2.ISBN INNER JOIN Author AS T3 ON T3.idAuthor = T2.Author WHERE T3.Name LIKE '%Plato%'"}, {"question_id": 582, "answer_sql": "SELECT T1.Title FROM Book AS T1 INNER JOIN Author_Book AS T2 ON T1.ISBN = T2.ISBN INNER JOIN Author AS T3 ON T3.idAuthor = T2.Author WHERE T3.Name LIKE '%Plato%'"}, {"question_id": 583, "answer_sql": "SELECT COUNT(*) FROM Books_Order AS T1 INNER JOIN Book AS T2 ON T1.ISBN = T2.ISBN WHERE T2.Title = 'Pride and Prejudice';"}, {"question_id": 584, "answer_sql": "SELECT COUNT(*) FROM Books_Order AS T1 INNER JOIN Book AS T2 ON T1.ISBN = T2.ISBN WHERE T2.Title = 'Pride and Prejudice';"}, {"question_id": 585, "answer_sql": "SELECT T2.IdOrder FROM Books_Order AS T1 INNER JOIN Orders AS T2 ON T1.IdOrder = T2.IdOrder INNER JOIN Book AS T3 ON T3.ISBN = T1.ISBN WHERE T3.Title = 'Pride and Prejudice' OR T3.Title = 'The Little Prince'"}, {"question_id": 586, "answer_sql": "SELECT T3.IdOrder FROM Book AS T1 INNER JOIN Books_Order AS T2 ON T1.ISBN = T2.ISBN INNER JOIN Orders AS T3 ON T2.IdOrder = T3.IdOrder WHERE T1.Title = 'Pride and Prejudice' OR T1.Title = 'The Little Prince'"}, {"question_id": 587, "answer_sql": "SELECT T3.isbn FROM client AS T1 INNER JOIN orders AS T2 ON T1.idclient = T2.idclient INNER JOIN books_order AS T3 ON T2.idorder = T3.idorder WHERE T1.name = 'Peter Doe' AND T1.name = 'James Smith' GROUP BY T3.isbn HAVING count(*) > 1"}, {"question_id": 588, "answer_sql": "SELECT T3.isbn FROM client AS T1 INNER JOIN orders AS T2 ON T1.idclient = T2.idclient INNER JOIN books_order AS T3 ON T2.idorder = T3.idorder WHERE T1.name = 'Peter Doe' AND T1.name = 'James Smith'"}, {"question_id": 589, "answer_sql": "SELECT T3.Title FROM Books_Order AS T1 INNER JOIN Orders AS T2 ON T1.IdOrder = T2.IdOrder INNER JOIN Book AS T3 ON T3.ISBN = T1.ISBN INNER JOIN Client AS T4 ON T4.IdClient = T2.IdClient WHERE T4.Name = 'Peter Doe' AND T4.Name != 'James Smith'"}, {"question_id": 590, "answer_sql": "SELECT T3.Title FROM Client AS T1 INNER JOIN Books_Order AS T2 ON T1.IdClient = T2.IdClient INNER JOIN Book AS T3 ON T2.ISBN = T3.ISBN WHERE T1.Name = 'Peter Doe' AND T1.IdClient = 1 INTERSECT SELECT T3.Title FROM Client AS T1 INNER JOIN Books_Order AS T2 ON T1.IdClient = T2.IdClient INNER JOIN Book AS T3 ON T2.ISBN = T3.ISBN WHERE T1.Name = 'James Smith' AND T1.IdClient = 2"}, {"question_id": 591, "answer_sql": "SELECT T3.Name FROM Books_Order AS T1 INNER JOIN Book AS T2 ON T1.ISBN = T2.ISBN INNER JOIN Orders AS T3 ON T1.IdOrder = T3.IdOrder INNER JOIN Client AS T4 ON T3.IdClient = T4.IdClient WHERE T2.Title = 'Pride and Prejudice';"}, {"question_id": 592, "answer_sql": "SELECT T3.Name FROM Books_Order AS T1 INNER JOIN Book AS T2 ON T1.ISBN = T2.ISBN INNER JOIN Orders AS T3 ON T1.IdOrder = T3.IdOrder INNER JOIN Client AS T4 ON T3.IdClient = T4.IdClient WHERE T2.Title = 'Pride and Prejudice';"}, {"question_id": 593, "answer_sql": "SELECT count(*) FROM book;"}, {"question_id": 594, "answer_sql": "SELECT Title FROM book ORDER BY Title ASC;"}, {"question_id": 595, "answer_sql": "SELECT title FROM book ORDER BY pages DESC;"}, {"question_id": 596, "answer_sql": "SELECT TYPE, RELEASE FROM book;"}, {"question_id": 597, "answer_sql": "SELECT MAX( Chapters ) , MIN( Chapters ) , Title FROM book GROUP BY Title ;"}, {"question_id": 598, "answer_sql": "SELECT Title FROM book WHERE TYPE != 'Poet'"}, {"question_id": 599, "answer_sql": "SELECT AVG(Rating) FROM review;"}, {"question_id": 600, "answer_sql": "SELECT T1.Title , T2.Rating FROM book AS T1 JOIN review AS T2 ON T1.Book_ID = T2.Book_ID"}, {"question_id": 601, "answer_sql": "SELECT T2.Rating FROM book AS T1 INNER JOIN review AS T2 ON T1.Book_ID = T2.Book_ID ORDER BY T1.Chapters DESC LIMIT 1"}, {"question_id": 602, "answer_sql": "SELECT Rank FROM review WHERE Book_ID = (SELECT Book_ID FROM book ORDER BY Pages LIMIT 1);"}, {"question_id": 603, "answer_sql": "SELECT t1.title FROM book AS t1 INNER JOIN review AS t2 ON t1.book_id = t2.book_id ORDER BY t2.rank DESC LIMIT 1;"}, {"question_id": 604, "answer_sql": "SELECT AVG(t2.Readers_in_Million) FROM book AS t1 INNER JOIN review AS t2 ON t1.Book_ID = t2.Book_ID WHERE t1.Type = Novel ;"}, {"question_id": 605, "answer_sql": "SELECT TYPE , COUNT(*) FROM book GROUP BY TYPE;"}, {"question_id": 606, "answer_sql": "SELECT TYPE FROM book GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1;"}, {"question_id": 607, "answer_sql": "SELECT TYPE FROM book GROUP BY TYPE HAVING COUNT(*) >= 3;"}, {"question_id": 608, "answer_sql": "SELECT T1.Title FROM book AS T1 JOIN review AS T2 ON T1.Book_ID = T2.Book_ID ORDER BY T2.Rating ASC;"}, {"question_id": 609, "answer_sql": "SELECT T1.Title , T1.Audio FROM book AS T1 JOIN review AS T2 ON T1.Book_ID = T2.Book_ID ORDER BY T2.Readers_in_Million DESC"}, {"question_id": 610, "answer_sql": "SELECT COUNT(*) FROM book WHERE book_id NOT IN (SELECT book_id FROM review);"}, {"question_id": 611, "answer_sql": "SELECT TYPE FROM book WHERE Chapters > 75 INTERSECT SELECT TYPE FROM book WHERE Chapters < 50"}, {"question_id": 612, "answer_sql": "SELECT COUNT(DISTINCT TYPE) FROM book;"}, {"question_id": 613, "answer_sql": "SELECT TYPE, Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM review);"}, {"question_id": 614, "answer_sql": "SELECT count(*) FROM customer;"}, {"question_id": 615, "answer_sql": "SELECT count(*) FROM customer;"}, {"question_id": 616, "answer_sql": "SELECT Name FROM customer ORDER BY Level_of_Membership ASC;"}, {"question_id": 617, "answer_sql": "SELECT Name FROM customer ORDER BY Level_of_Membership ASC;"}, {"question_id": 618, "answer_sql": "SELECT Nationality , Card_Credit FROM customer;"}, {"question_id": 619, "answer_sql": "SELECT Nationality , Card_Credit FROM customer;"}, {"question_id": 620, "answer_sql": "SELECT Name FROM customer WHERE Nationality = 'England' OR Nationality = 'Australia'"}, {"question_id": 621, "answer_sql": "```sql SELECT Name FROM customer WHERE Nationality = 'England' OR Nationality = 'Australia'"}, {"question_id": 622, "answer_sql": "SELECT AVG(Card_Credit) FROM customer WHERE Level_of_Membership > 1;"}, {"question_id": 623, "answer_sql": "SELECT AVG(Card_Credit) FROM customer WHERE Level_of_Membership > 1;"}, {"question_id": 624, "answer_sql": "SELECT Card_Credit FROM customer ORDER BY Level_of_Membership DESC LIMIT 1"}, {"question_id": 625, "answer_sql": "SELECT T1.Card_Credit FROM customer AS T1 INNER JOIN customer_order AS T2 ON T1.Customer_ID = T2.Customer_ID GROUP BY T1.Customer_ID ORDER BY T1.Level_of_Membership DESC LIMIT 1"}, {"question_id": 626, "answer_sql": "SELECT Nationality , COUNT(*) FROM customer GROUP BY Nationality;"}, {"question_id": 627, "answer_sql": "SELECT Nationality , COUNT(*) FROM customer GROUP BY Nationality;"}, {"question_id": 628, "answer_sql": "SELECT Nationality FROM customer GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1;"}, {"question_id": 629, "answer_sql": "The most customers have, according to the question, is from the nationality 'CAMBODIA' with 1,095 customers."}, {"question_id": 630, "answer_sql": "SELECT Nationality FROM customer WHERE Card_Credit < 50 INTERSECT SELECT Nationality FROM customer WHERE Card_Credit > 75;"}, {"question_id": 631, "answer_sql": "The solution to the problem is to use the `INTERSECT` clause in SQL, which returns the rows that have the same values in both tables. The `INTERSECT` clause is used to select the intersection of rows from two or more SELECT statements. The SELECT statements are executed independently, and the result is a set of intersecting rows."}, {"question_id": 632, "answer_sql": "SELECT T1.Name, T2.Dish_Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID = T2.Customer_ID"}, {"question_id": 633, "answer_sql": "SELECT T1.Name, T2.Dish_Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID = T2.Customer_ID"}, {"question_id": 634, "answer_sql": "```sql SELECT T3.Name, T2.Dish_Name FROM customer_order AS T1 INNER JOIN customer AS T2 ON T1.Customer_ID = T2.Customer_ID INNER JOIN branch AS T3 ON T1.Branch_ID = T3.Branch_ID ORDER BY T1.Quantity DESC"}, {"question_id": 635, "answer_sql": "SELECT T1.Name, T2.Dish_Name FROM customer AS T1 INNER JOIN customer_order AS T2 ON T1.Customer_ID = T2.Customer_ID INNER JOIN branch AS T3 ON T2.Branch_ID = T3.Branch_ID ORDER BY T2.Quantity DESC"}, {"question_id": 636, "answer_sql": "```sql SELECT T1.Name , SUM(T2.Quantity) FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID = T2.Customer_ID GROUP BY T1.Name"}, {"question_id": 637, "answer_sql": "```sql SELECT T1.Name , SUM(T2.Quantity) FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID = T2.Customer_ID GROUP BY T1.Name"}, {"question_id": 638, "answer_sql": "SELECT T1.Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID = T2.Customer_ID GROUP BY T1.Name HAVING sum(T2.Quantity) > 1;"}, {"question_id": 639, "answer_sql": "SELECT T1.Name FROM customer AS T1 INNER JOIN customer_order AS T2 ON T1.Customer_ID = T2.Customer_ID GROUP BY T1.Name HAVING SUM(T2.Quantity) > 1;"}, {"question_id": 640, "answer_sql": "SELECT DISTINCT manager FROM branch;"}, {"question_id": 641, "answer_sql": "SELECT DISTINCT manager FROM branch;"}, {"question_id": 642, "answer_sql": "SELECT Name FROM customer WHERE Customer_ID NOT IN (SELECT Customer_ID FROM customer_order)"}, {"question_id": 643, "answer_sql": "SELECT Name FROM customer WHERE Customer_ID NOT IN (SELECT Customer_ID FROM customer_order);"}, {"question_id": 644, "answer_sql": "SELECT count(*) FROM `member`;"}, {"question_id": 645, "answer_sql": "SELECT Name FROM member ORDER BY Age ASC;"}, {"question_id": 646, "answer_sql": "SELECT Name, Nationality FROM member;"}, {"question_id": 647, "answer_sql": "SELECT Name FROM member WHERE Nationality != 'England'"}, {"question_id": 648, "answer_sql": "SELECT Name FROM member WHERE Age = 19 OR Age = 20;"}, {"question_id": 649, "answer_sql": "SELECT Name FROM member ORDER BY Age DESC LIMIT 1;"}, {"question_id": 650, "answer_sql": "SELECT Nationality , COUNT(*) FROM member GROUP BY Nationality;"}, {"question_id": 651, "answer_sql": "SELECT Nationality FROM member GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1"}, {"question_id": 652, "answer_sql": "SELECT Nationality FROM `member` GROUP BY Nationality HAVING COUNT(*) >= 2"}, {"question_id": 653, "answer_sql": "SELECT T3.Name, T2.Club_Name FROM club_leader AS T1 INNER JOIN club AS T2 ON T1.Club_ID = T2.Club_ID INNER JOIN member AS T3 ON T1.Member_ID = T3.Member_ID;"}, {"question_id": 654, "answer_sql": "SELECT T1.Team_Leader FROM club AS T1 INNER JOIN club_leader AS T2 ON T1.Club_ID = T2.Club_ID WHERE T1.Overall_Ranking > 100;"}, {"question_id": 655, "answer_sql": "SELECT T1.Name FROM member AS T1 INNER JOIN club_leader AS T2 ON T1.Member_ID = T2.Member_ID INNER JOIN club AS T3 ON T3.Club_ID = T2.Club_ID WHERE T2.Year_Join < '2018-01-01'"}, {"question_id": 656, "answer_sql": "SELECT Team_Leader FROM club WHERE Club_Name = Houston ;"}, {"question_id": 657, "answer_sql": "SELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM club_leader);"}, {"question_id": 658, "answer_sql": "The solution to the problem is to use the IN operator in the WHERE clause to check if a member's age is both greater than 22 and less than 19."}, {"question_id": 659, "answer_sql": "SELECT AVG(T2.Age) FROM club_leader AS T1 INNER JOIN member AS T2 ON T1.member_id = T2.member_id;"}, {"question_id": 660, "answer_sql": "SELECT Club_Name FROM club WHERE Club_Name LIKE '%state%'"}, {"question_id": 661, "answer_sql": "SELECT Collection_Subset_Name FROM Collection_Subsets;"}, {"question_id": 662, "answer_sql": "SELECT Collection_Subset_Name FROM Collection_Subsets;"}, {"question_id": 663, "answer_sql": "SELECT Collecrtion_Subset_Details FROM Collection_Subsets WHERE Collection_Subset_Name = Top collection ;"}, {"question_id": 664, "answer_sql": "SELECT Collection_Subsets.Collecrtion_Subset_Details FROM Collection_Subsets WHERE Collection_Subsets.Collection_Subset_Name = Top collection ;"}, {"question_id": 665, "answer_sql": "SELECT Document_Subset_Name FROM Document_Subsets;"}, {"question_id": 666, "answer_sql": "SELECT Document_Subset_Name FROM Document_Subsets;"}, {"question_id": 667, "answer_sql": "SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000';"}, {"question_id": 668, "answer_sql": "SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000';"}, {"question_id": 669, "answer_sql": "SELECT document_object_id FROM Document_Objects;"}, {"question_id": 670, "answer_sql": "SELECT document_object_id FROM Document_Objects;"}, {"question_id": 671, "answer_sql": "SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin';"}, {"question_id": 672, "answer_sql": "SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin';"}, {"question_id": 673, "answer_sql": "SELECT T1.Owner FROM Document_Objects AS T1 INNER JOIN Documents_in_Collections AS T2 ON T1.document_object_id = T2.document_object_id INNER JOIN Collections AS T3 ON T2.collection_id = T3.collection_id WHERE T3.collection_name = 'Braeden Collection'"}, {"question_id": 674, "answer_sql": "SELECT T1.Owner FROM Document_Objects AS T1 INNER JOIN Documents_in_Collections AS T2 ON T1.document_object_id = T2.document_object_id INNER JOIN Collections AS T3 ON T2.collection_id = T3.collection_id WHERE T3.collection_name = 'Braeden Collection'"}, {"question_id": 675, "answer_sql": "SELECT T1.Owner FROM Document_Objects AS T1 INNER JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID WHERE T2.Owner = 'Marlin' AND T1.Parent_Document_Object_ID IS NOT NULL;"}, {"question_id": 676, "answer_sql": "SELECT T1.Owner FROM Document_Objects AS T1 INNER JOIN Document_Subsets AS T2 ON T1.Document_Object_ID = T2.Document_Subset_ID WHERE T1.Owner = 'Marlin'"}, {"question_id": 677, "answer_sql": "SELECT DISTINCT Description FROM Document_Objects WHERE Parent_Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members);"}, {"question_id": 678, "answer_sql": "SELECT DISTINCT Description FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL;"}, {"question_id": 679, "answer_sql": "SELECT COUNT(document_object_id) FROM Document_Objects WHERE Owner = Marlin ;"}, {"question_id": 680, "answer_sql": "SELECT COUNT(document_object_id) FROM Document_Objects WHERE Owner = Marlin ;"}, {"question_id": 681, "answer_sql": "SELECT document_object_id FROM document_objects WHERE document_object_id NOT IN (SELECT parent_document_object_id FROM document_objects WHERE document_object_id <> (SELECT min(document_object_id) FROM document_objects)) GROUP BY document_object_id;"}, {"question_id": 682, "answer_sql": "SELECT document_object_id FROM document_objects EXCEPT SELECT parent_document_object_id FROM document_objects;"}, {"question_id": 683, "answer_sql": "SELECT Parent_Document_Object_ID, COUNT(*) FROM Document_Objects GROUP BY Parent_Document_Object_ID;"}, {"question_id": 684, "answer_sql": "SELECT T2.Parent_Document_Object_ID, COUNT(*) FROM Document_Objects AS T1 INNER JOIN Documents_in_Collections AS T2 ON T1.document_object_id = T2.document_object_id GROUP BY T2.Parent_Document_Object_ID;"}, {"question_id": 685, "answer_sql": "SELECT Collection_Name FROM Collections;"}, {"question_id": 686, "answer_sql": "SELECT Collection_Name FROM Collections;"}, {"question_id": 687, "answer_sql": "SELECT Collection_Description FROM Collections WHERE Collection_Name = Best ;"}, {"question_id": 688, "answer_sql": "SELECT Collection_Description FROM Collections WHERE Collection_Name = Best ;"}, {"question_id": 689, "answer_sql": "SELECT Parent_Collection_ID FROM Collections WHERE Collection_Name = Nice ;"}, {"question_id": 690, "answer_sql": "SELECT Parent_Collection_ID FROM Collections WHERE Collection_Name = Nice ;"}, {"question_id": 691, "answer_sql": "SELECT Collection_Name FROM Collections WHERE Collection_ID NOT IN (SELECT Parent_Collection_ID FROM Collections)"}, {"question_id": 692, "answer_sql": "SELECT Collection_Name FROM Collections WHERE Collection_ID != (SELECT Parent_Collection_ID FROM Collections)"}, {"question_id": 693, "answer_sql": "SELECT document_object_id FROM document_objects GROUP BY document_object_id HAVING count(*) > 1;"}, {"question_id": 694, "answer_sql": "SELECT document_object_id FROM document_objects GROUP BY document_object_id HAVING count(*) > 1;"}, {"question_id": 695, "answer_sql": "SELECT COUNT(*) FROM Collections AS T1 INNER JOIN Documents_in_collections AS T2 ON T1.collection_id = T2.collection_id WHERE T1.collection_name = Best"}, {"question_id": 696, "answer_sql": "SELECT COUNT(*) FROM Collections AS T1 INNER JOIN Documents_in_collections AS T2 ON T1.collection_id = T2.collection_id WHERE T1.collection_name = Best"}, {"question_id": 697, "answer_sql": "SELECT T1.document_object_id FROM Document_Subset_Members AS T1 JOIN Document_Objects AS T2 ON T1.Document_Object_ID = T2.document_object_id WHERE T2.Owner = 'Ransom'"}, {"question_id": 698, "answer_sql": "SELECT T2.document_object_id FROM Document_Objects AS T1 INNER JOIN Document_Subset_Members AS T2 ON T1.document_object_id = T2.document_object_id WHERE T1.owner = 'Ransom'"}, {"question_id": 699, "answer_sql": "SELECT Collection_Subset_ID , Collection_Subset_Name , COUNT(*) FROM Collections GROUP BY Collection_Subset_ID;"}, {"question_id": 700, "answer_sql": "SELECT Collection_Subset_ID, Collection_Subset_Name, COUNT(*) FROM Collection_Subsets GROUP BY Collection_Subset_ID;"}, {"question_id": 701, "answer_sql": "SELECT document_object_id, COUNT(*) as num_children FROM Document_Objects WHERE document_object_id IN (SELECT related_document_object_id FROM Document_Subset_Members) GROUP BY document_object_id ORDER BY num_children DESC LIMIT 1;"}, {"question_id": 702, "answer_sql": "SELECT Document_Object_ID , COUNT(*) FROM Document_Objects GROUP BY Document_Object_ID;"}, {"question_id": 703, "answer_sql": "SELECT T1.document_object_id, COUNT(T2.related_document_object_id) FROM Document_Objects AS T1 INNER JOIN Document_Subset_Members AS T2 ON T1.document_object_id = T2.document_object_id GROUP BY T1.document_object_id ORDER BY COUNT(T2.related_document_object_id) ASC LIMIT 1;"}, {"question_id": 704, "answer_sql": "SELECT Document_Object_ID FROM Document_Objects GROUP BY Document_Object_ID ORDER BY COUNT(*) ASC LIMIT 1;"}, {"question_id": 705, "answer_sql": "SELECT T1.document_object_id , count(*) FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.document_subset_id = T2.document_subset_id WHERE T2.document_subset_details LIKE 2 to 4 related documents GROUP BY T1.document_object_id HAVING count(*) BETWEEN 2 AND 4;"}, {"question_id": 706, "answer_sql": "SELECT Document_Object_ID, COUNT(Related_Document_Object_ID) FROM Document_Subset_Members WHERE Document_Subset_ID BETWEEN 2 AND 4 GROUP BY Document_Object_ID;"}, {"question_id": 707, "answer_sql": "```sql SELECT T1.Owner FROM Document_Objects AS T1 INNER JOIN Document_Objects AS T2 ON T1.Document_Object_ID = T2.Parent_Document_Object_ID WHERE T2.Owner = 'Braeden'"}, {"question_id": 708, "answer_sql": "SELECT DISTINCT T1.Owner FROM Document_Objects AS T1 INNER JOIN Document_Subset_Members AS T2 ON T1.document_object_id = T2.document_object_id INNER JOIN Document_Objects AS T3 ON T2.related_document_object_id = T3.document_object_id WHERE T3.Owner = 'Braeden';"}, {"question_id": 709, "answer_sql": "SELECT DISTINCT T3.document_subset_name FROM document_subset_members AS T1 INNER JOIN document_objects AS T2 ON T1.document_object_id = T2.document_object_id INNER JOIN document_subsets AS T3 ON T1.document_subset_id = T3.document_subset_id WHERE T2.owner = 'Braeden';"}, {"question_id": 710, "answer_sql": "SELECT DISTINCT Document_Subset_Name FROM Document_Subsets AS T1 INNER JOIN Document_Subset_Members AS T2 ON T1.document_subset_id = T2.document_subset_id INNER JOIN Document_Objects AS T3 ON T2.document_object_id = T3.document_object_id WHERE T3.owner = 'Braeden';"}, {"question_id": 711, "answer_sql": "SELECT Document_Subset_ID, Document_Subset_Name, COUNT(DISTINCT Related_Document_Object_ID) FROM Document_Subset_Members JOIN Document_Subsets ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID GROUP BY Document_Subset_ID;"}, {"question_id": 712, "answer_sql": "SELECT Document_Subset_ID, Document_Subset_Name, COUNT(DISTINCT Related_Document_Object_ID) FROM Document_Subset_Members JOIN Document_Subsets ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.document_Subset_ID GROUP BY Document_Subset_ID;"}, {"question_id": 713, "answer_sql": "SELECT Document_Subset_ID , Document_Subset_Name , COUNT(DISTINCT Document_Object_ID) FROM Document_Subset_Members GROUP BY Document_Subset_ID ORDER BY COUNT(DISTINCT Document_Object_ID) DESC LIMIT 1;"}, {"question_id": 714, "answer_sql": "SELECT Document_Subset_ID, Document_Subset_Name , COUNT(*) FROM Document_Subsets GROUP BY Document_Subset_ID ORDER BY COUNT(*) DESC LIMIT 1;"}, {"question_id": 715, "answer_sql": "SELECT T1.document_object_id FROM Document_Subset_Members AS T1 INNER JOIN Document_Subsets AS T2 ON T1.document_subset_id = T2.document_subset_id WHERE T2.document_subset_name = 'Best for 2000'"}, {"question_id": 716, "answer_sql": "SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000';"}, {"question_id": 717, "answer_sql": "SELECT Document_Subset_Name, Document_Subset_ID FROM Document_Subsets AS T1 INNER JOIN Document_Subset_Members AS T2 ON T1.document_subset_id = T2.document_subset_id GROUP BY T2.document_object_id;"}, {"question_id": 718, "answer_sql": "SELECT T3.Document_Subset_Name , T2.document_object_id , T1.document_object_id FROM Document_Subset_Members AS T1 JOIN Document_Objects AS T2 ON T1.Document_Object_ID = T1.Related_Document_Object_ID JOIN Document_Subsets AS T3 ON T1.Document_Subset_ID = T3.document_subset_id"}, {"question_id": 719, "answer_sql": "SELECT T3.Collection_Name FROM Document_Objects AS T1 INNER JOIN Documents_in_Collections AS T2 ON T1.document_object_id = T2.document_object_id INNER JOIN Collections AS T3 ON T2.collection_id = T3.collection_id WHERE T1.Owner = 'Ransom ' GROUP BY T3.Collection_Name;"}, {"question_id": 720, "answer_sql": "SELECT T3.Collection_Name FROM Document_Objects AS T1 INNER JOIN Documents_in_Collections AS T2 ON T1.document_object_id = T2.document_object_id INNER JOIN Collections AS T3 ON T2.collection_id = T3.collection_id WHERE T1.Owner = 'Ransom'"}, {"question_id": 721, "answer_sql": "SELECT T2.document_object_id, COUNT(*) FROM Documents_in_collections AS T1 INNER JOIN Document_Objects AS T2 ON T1.document_object_id = T2.document_object_id GROUP BY T2.document_object_id;"}, {"question_id": 722, "answer_sql": "SELECT Document_Object_ID , COUNT(*) FROM Documents_in_collections GROUP BY Document_Object_ID;"}, {"question_id": 723, "answer_sql": "SELECT COUNT(*) FROM Documents_in_collections AS T1 INNER JOIN Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T2.Collection_Name = Best ;"}, {"question_id": 724, "answer_sql": "SELECT COUNT(*) FROM Documents_in_collections AS T1 INNER JOIN Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T2.Collection_Name = Best"}, {"question_id": 725, "answer_sql": "SELECT T3.document_object_id FROM collections AS T1 INNER JOIN doc_collections AS T2 ON T1.collection_id = T2.collection_id INNER JOIN document_objects AS T3 ON T2.document_object_id = T3.document_object_id WHERE T1.collection_name = 'Best';"}, {"question_id": 726, "answer_sql": "SELECT COUNT(*) FROM Documents_in_collections AS T1 INNER JOIN Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T2.Collection_Name = Best"}, {"question_id": 727, "answer_sql": "SELECT T3.collection_name, T3.collection_id, COUNT(*) as num_documents FROM Documents_in_collections AS T1 JOIN Collections AS T2 ON T1.collection_id = T2.collection_id JOIN Collections AS T3 ON T1.collection_id = T3.collection_id GROUP BY T3.collection_name ORDER BY num_documents DESC LIMIT 1;"}, {"question_id": 728, "answer_sql": "SELECT T3.collection_name , T3.collection_id , COUNT(*) FROM document_objects AS T1 JOIN Documents_in_collections AS T2 ON T1.document_object_id = T2.document_object_id JOIN Collections AS T3 ON T2.collection_id = T3.collection_id WHERE T3.collection_name = 'Best' GROUP BY T3.collection_name ORDER BY COUNT(*) DESC LIMIT 1;"}, {"question_id": 729, "answer_sql": "SELECT T3.document_object_id FROM document_subset_members AS T1 INNER JOIN document_subsets AS T2 ON T1.document_subset_id = T2.document_subset_id INNER JOIN documents_in_collections AS T3 ON T1.document_object_id = T3.document_object_id INNER JOIN collections AS T4 ON T3.collection_id = T4.collection_id WHERE T2.document_subset_name = 'Best for 2000' AND T4.collection_name = 'Best';"}, {"question_id": 730, "answer_sql": "SELECT T3.document_object_id FROM document_subsets AS T1 INNER JOIN document_subset_members AS T2 ON T1.document_subset_id = T2.document_subset_id INNER JOIN Documents_in_collections AS T3 ON T2.document_object_id = T3.document_object_id INNER JOIN Collections AS T4 ON T3.collection_id = T4.collection_id WHERE T1.document_subset_name = 'Best for 2000' AND T4.collection_name = 'Best'"}, {"question_id": 731, "answer_sql": "SELECT document_object_id FROM document_subset_members WHERE document_subset_id = (SELECT document_subset_id FROM document_subsets WHERE document_subset_name = 'Best') EXCEPT SELECT document_object_id FROM document_subset_members WHERE document_subset_id = (SELECT document_subset_id FROM document_subsets WHERE document_subset_name = 'Best' AND document_subset_details = 'for 2000')"}, {"question_id": 732, "answer_sql": "SELECT DISTINCT T2.document_object_id FROM collection_subset_members AS T1 INNER JOIN document_subset_members AS T2 ON T1.related_collection_id = T2.related_document_object_id INNER JOIN collections AS T3 ON T1.collection_id = T3.collection_id WHERE T3.collection_name = 'Best' AND T3.collection_name != 'Best for 2000'"}, {"question_id": 733, "answer_sql": "SELECT document_object_id FROM Document_Subset_Members WHERE document_subset_id IN (SELECT document_subset_id FROM Document_Subsets WHERE document_subset_name = 'Best for 2000') UNION SELECT document_object_id FROM Documents_in_collections WHERE collection_id IN (SELECT collection_id FROM Collections WHERE collection_name = 'Best')"}, {"question_id": 734, "answer_sql": "SELECT DISTINCT T1.document_object_id FROM Document_Subset_Members AS T1 INNER JOIN Document_Subsets AS T2 ON T1.document_subset_id = T2.document_subset_id WHERE T2.document_subset_name = 'Best for 2000' UNION SELECT T3.document_object_id FROM Collection_Subset_Members AS T3 INNER JOIN Collection_Subsets AS T4 ON T3.collection_subset_id = T4.collection_subset_id WHERE T4.collection_subset_name = 'Best'"}, {"question_id": 735, "answer_sql": "SELECT T3.Collection_Name FROM Collections AS T1 INNER JOIN Collection_Subset_Members AS T2 ON T1.Collection_ID = T2.Collection_ID INNER JOIN Collections AS T3 ON T3.Collection_ID = T2.Related_Collection_ID WHERE T1.Collection_Name = 'Best';"}, {"question_id": 736, "answer_sql": "SELECT T3.Collection_Name FROM Collections AS T1 INNER JOIN Collection_Subset_Members AS T2 ON T1.Collection_ID = T2.Collection_ID INNER JOIN Collections AS T3 ON T3.Collection_ID = T2.Related_Collection_ID WHERE T1.Collection_Name = Best"}, {"question_id": 737, "answer_sql": "SELECT COUNT(*) FROM Collections AS T1 INNER JOIN Collection_Subset_Members AS T2 ON T1.collection_id = T2.collection_id INNER JOIN Collections AS T3 ON T3.collection_id = T2.related_collection_id WHERE T3.collection_name = Best"}, {"question_id": 738, "answer_sql": "SELECT COUNT(DISTINCT T2.collection_id) FROM collections AS T1 INNER JOIN doc_collections AS T2 ON T1.collection_id = T2.collection_id WHERE T1.collection_name = 'Best';"}, {"question_id": 739, "answer_sql": "SELECT T3.Collection_Subset_Name FROM Collections AS T1 INNER JOIN Collection_Subset_Members AS T2 ON T1.Collection_ID = T2.Collection_ID INNER JOIN Collection_Subsets AS T3 ON T2.Collection_Subset_ID = T3.Collection_Subset_ID WHERE T1.Collection_Name = 'Best in'"}, {"question_id": 740, "answer_sql": "SELECT T3.collection_subset_name FROM collections AS T1 INNER JOIN collection_subset_members AS T2 ON T1.collection_id = T2.collection_id INNER JOIN collection_subsets AS T3 ON T2.collection_subset_id = T3.collection_subset_id WHERE T1.collection_name = 'Best'"}, {"question_id": 741, "answer_sql": "SELECT COUNT(*) FROM songs WHERE name LIKE '%Love%';"}, {"question_id": 742, "answer_sql": "The lexicographical order of songs is determined by the song name. The songs are listed in ascending order, so the name of the song is the first element in the list."}, {"question_id": 743, "answer_sql": "SELECT name, language FROM songs;"}, {"question_id": 744, "answer_sql": "SELECT MAX(voice_sound_quality) , MIN(voice_sound_quality) FROM `performance_score`;"}, {"question_id": 745, "answer_sql": "SELECT T2.voice_sound_quality, T2.rhythm_tempo, T2.stage_presence FROM participants AS T1 INNER JOIN performance_score AS T2 ON T1.id = T2.participant_id WHERE T1.name = 'Freeway'"}, {"question_id": 746, "answer_sql": "SELECT id, language, original_artist FROM songs WHERE name != 'Love'"}, {"question_id": 747, "answer_sql": "SELECT name, original_artist FROM songs WHERE english_translation = 'All the streets of love';"}, {"question_id": 748, "answer_sql": "SELECT DISTINCT T2.stage_presence FROM songs AS T1 INNER JOIN performance_score AS T2 ON T1.id = T2.songs_id WHERE T1.language = 'English';"}, {"question_id": 749, "answer_sql": "SELECT T1.id, T1.name FROM participants AS T1 JOIN performance_score AS T2 ON T1.id = T2.participant_id GROUP BY T1.id HAVING COUNT(*) >= 2;"}, {"question_id": 750, "answer_sql": "SELECT T1.id, T1.name, T1.popularity FROM participants AS T1 JOIN performance_score AS T2 ON T1.id = T2.participant_id JOIN songs AS T3 ON T2.songs_id = T3.id ORDER BY T2.songs_id DESC;"}, {"question_id": 751, "answer_sql": "SELECT T1.id, T1.name FROM participants AS T1 JOIN performance_score AS T2 ON T1.id = T2.participant_id WHERE T2.voice_sound_quality = 5 OR T2.rhythm_tempo = 5;"}, {"question_id": 752, "answer_sql": "SELECT T2.voice_sound_quality FROM songs AS T1 INNER JOIN performance_score AS T2 ON T1.id = T2.songs_id WHERE T1.name = 'The Balkan Girls' AND T1.language = 'English';"}, {"question_id": 753, "answer_sql": "SELECT T2.id, T2.name FROM performance_score AS T1 INNER JOIN songs AS T2 ON T1.songs_id = T2.id GROUP BY T2.id ORDER BY COUNT(*) DESC LIMIT 1;"}, {"question_id": 754, "answer_sql": "SELECT COUNT(*) FROM `performance_score` WHERE `stage_presence` < 7 OR `stage_presence` > 9;"}, {"question_id": 755, "answer_sql": "SELECT COUNT(*) FROM performance_score AS T1 INNER JOIN songs AS T2 ON T1.songs_id = T2.id WHERE T1.rhythm_tempo IS NULL AND T1.stage_presence IS NULL;"}, {"question_id": 756, "answer_sql": "SELECT l.language, AVG(ps.rhythm_tempo) FROM performance_score ps JOIN songs s ON ps.songs_id = s.id JOIN (SELECT DISTINCT language FROM songs) l ON s.language = l.language GROUP BY l.language;"}, {"question_id": 757, "answer_sql": "SELECT DISTINCT T1.name FROM participants AS T1 JOIN performance_score AS T2 ON T1.id = T2.participant_id JOIN songs AS T3 ON T2.songs_id = T3.id WHERE T3.language = 'English';"}, {"question_id": 758, "answer_sql": "SELECT T1.name, T1.popularity FROM participants AS T1 INNER JOIN performance_score AS T2 ON T1.id = T2.participant_id INNER JOIN songs AS T3 ON T2.songs_id = T3.id WHERE T3.language = 'Croatian' AND T3.english_translation = 'English' GROUP BY T1.id;"}, {"question_id": 759, "answer_sql": "SELECT name FROM songs WHERE name LIKE '%Is%';"}, {"question_id": 760, "answer_sql": "SELECT T1.original_artist FROM songs AS T1 INNER JOIN performance_score AS T2 ON T1.id = T2.songs_id WHERE T2.rhythm_tempo > 5 ORDER BY T2.voice_sound_quality DESC;"}, {"question_id": 761, "answer_sql": "SELECT count(*) FROM City;"}, {"question_id": 762, "answer_sql": "SELECT count(*) FROM City;"}, {"question_id": 763, "answer_sql": "SELECT DISTINCT state FROM City;"}, {"question_id": 764, "answer_sql": "SELECT DISTINCT state FROM City;"}, {"question_id": 765, "answer_sql": "SELECT count(DISTINCT country) FROM City;"}, {"question_id": 766, "answer_sql": "SELECT count(DISTINCT country) FROM City;"}, {"question_id": 767, "answer_sql": "SELECT city_name, city_code, state, country FROM City;"}, {"question_id": 768, "answer_sql": "SELECT city_name, city_code, state, country FROM City;"}, {"question_id": 769, "answer_sql": "SELECT latitude, longitude FROM City WHERE city_name = 'Baltimore';"}, {"question_id": 770, "answer_sql": "SELECT latitude, longitude FROM City WHERE city_name = 'Baltimore';"}, {"question_id": 771, "answer_sql": "SELECT city_name FROM City WHERE state = 'PA';"}, {"question_id": 772, "answer_sql": "SELECT city_name FROM City WHERE state = 'PA';"}, {"question_id": 773, "answer_sql": "SELECT count(*) FROM City WHERE country = 'Canada';"}, {"question_id": 774, "answer_sql": "SELECT count(*) FROM City WHERE country = 'Canada';"}, {"question_id": 775, "answer_sql": "SELECT city_name FROM City WHERE country = 'USA' ORDER BY latitude"}, {"question_id": 776, "answer_sql": "SELECT city_name FROM City WHERE country = 'USA' ORDER BY latitude"}, {"question_id": 777, "answer_sql": "SELECT T1.state , count(*) FROM City AS T1 INNER JOIN State AS T2 ON T1.state = T2.state GROUP BY T2.state;"}, {"question_id": 778, "answer_sql": "SELECT state, COUNT(*) FROM City GROUP BY state;"}, {"question_id": 779, "answer_sql": "SELECT country, COUNT(*) FROM City GROUP BY country;"}, {"question_id": 780, "answer_sql": "SELECT country, COUNT(*) FROM City GROUP BY country;"}, {"question_id": 781, "answer_sql": "SELECT state FROM city GROUP BY state HAVING count(*) >= 2;"}, {"question_id": 782, "answer_sql": "SELECT T1.state FROM City AS T1 INNER JOIN (SELECT city_code FROM City GROUP BY city_code HAVING COUNT(*) >= 2) AS T2 ON T1.city_code = T2.city_code GROUP BY T1.state;"}, {"question_id": 783, "answer_sql": "SELECT T1.state FROM City AS T1 INNER JOIN Direct_distance AS T2 ON T1.city_code = T2.city1_code GROUP BY T1.state ORDER BY count(*) DESC LIMIT 1;"}, {"question_id": 784, "answer_sql": "SELECT T1.state FROM City AS T1 INNER JOIN (SELECT city_code, COUNT(*) AS num FROM City GROUP BY city_code ORDER BY num DESC LIMIT 1) AS T2 ON T1.city_code = T2.city_code;"}, {"question_id": 785, "answer_sql": "SELECT country FROM city GROUP BY country ORDER BY count(*) LIMIT 1;"}, {"question_id": 786, "answer_sql": "SELECT country FROM city GROUP BY country ORDER BY count(*) LIMIT 1;"}, {"question_id": 787, "answer_sql": "SELECT T1.Fname , T1.Lname FROM Student AS T1 JOIN City AS T2 ON T1.city_code = T2.city_code WHERE T2.state = 'MD'"}, {"question_id": 788, "answer_sql": "SELECT T1.Fname, T1.Lname FROM Student AS T1 JOIN City AS T2 ON T1.city_code = T2.city_code WHERE T2.state = 'MD'"}, {"question_id": 789, "answer_sql": "SELECT COUNT(*) FROM Student AS T1 INNER JOIN City AS T2 ON T1.city_code = T2.city_code WHERE T2.country = 'China';"}, {"question_id": 790, "answer_sql": "SELECT COUNT(*) FROM Student AS T1 INNER JOIN City AS T2 ON T1.city_code = T2.city_code WHERE T2.country = 'China';"}, {"question_id": 791, "answer_sql": "SELECT T1.Fname , T1.Major FROM Student AS T1 JOIN City AS T2 ON T1.city_code = T2.city_code WHERE T2.city_name = 'Baltimore'"}, {"question_id": 792, "answer_sql": "SELECT T1.Fname , T1.Major FROM Student AS T1 JOIN City AS T2 ON T1.city_code = T2.city_code WHERE T2.city_name = 'Baltimore'"}, {"question_id": 793, "answer_sql": "SELECT country, COUNT(*) FROM Student JOIN City ON Student.city_code = City.city_code GROUP BY country;"}, {"question_id": 794, "answer_sql": "SELECT T1.country, COUNT(*) FROM City AS T1 INNER JOIN Student AS T2 ON T1.city_code = T2.city_code GROUP BY T1.country;"}, {"question_id": 795, "answer_sql": "SELECT T3.city_name, COUNT(*) FROM Student AS T1 INNER JOIN Direct_distance AS T2 ON T1.city_code = T2.city1_code INNER JOIN City AS T3 ON T2.city2_code = T3.city_code GROUP BY T3.city_name"}, {"question_id": 796, "answer_sql": "SELECT T3.city_name, COUNT(*) FROM Student AS T1 INNER JOIN Direct_distance AS T2 ON T1.city_code = T2.city1_code INNER JOIN City AS T3 ON T3.city_code = T2.city2_code GROUP BY T3.city_name"}, {"question_id": 797, "answer_sql": "SELECT T1.state FROM city AS T1 INNER JOIN student AS T2 ON T1.city_code = T2.city_code GROUP BY T1.state ORDER BY count(*) DESC LIMIT 1;"}, {"question_id": 798, "answer_sql": "SELECT T1.state FROM City AS T1 INNER JOIN Student AS T2 ON T1.city_code = T2.city_code GROUP BY T1.state ORDER BY count(*) DESC LIMIT 1;"}, {"question_id": 799, "answer_sql": "SELECT T1.country FROM city AS T1 INNER JOIN student AS T2 ON T1.city_code = T2.city_code GROUP BY T1.country ORDER BY count(*) ASC LIMIT 1;"}, {"question_id": 800, "answer_sql": "SELECT T1.country FROM City AS T1 INNER JOIN Student AS T2 ON T1.city_code = T2.city_code GROUP BY T1.country ORDER BY count(*) ASC LIMIT 1;"}, {"question_id": 801, "answer_sql": "SELECT T3.city_name FROM Student AS T1 INNER JOIN Direct_distance AS T2 ON T1.city_code = T2.city1_code INNER JOIN City AS T3 ON T3.city_code = T2.city2_code GROUP BY T3.city_name HAVING COUNT(*) >= 3;"}, {"question_id": 802, "answer_sql": "SELECT T3.city_name FROM Student AS T1 INNER JOIN Direct_distance AS T2 ON T1.city_code = T2.city1_code INNER JOIN City AS T3 ON T3.city_code = T2.city2_code GROUP BY T3.city_name HAVING COUNT(*) >= 3;"}, {"question_id": 803, "answer_sql": "SELECT T1.state FROM City AS T1 INNER JOIN Student AS T2 ON T1.city_code = T2.city_code GROUP BY T1.state HAVING COUNT(*) > 5;"}, {"question_id": 804, "answer_sql": "SELECT T1.state FROM City AS T1 INNER JOIN Student AS T2 ON T1.city_code = T2.city_code GROUP BY T1.state HAVING COUNT(*) > 5;"}, {"question_id": 805, "answer_sql": "SELECT StuID FROM Student WHERE city_code NOT IN (SELECT city_code FROM City WHERE country = 'USA')"}, {"question_id": 806, "answer_sql": "SELECT StuID FROM Student WHERE city_code NOT IN (SELECT city_code FROM City WHERE country = 'USA')"}, {"question_id": 807, "answer_sql": "SELECT T1.StuID FROM Student AS T1 INNER JOIN City AS T2 ON T1.city_code = T2.city_code WHERE T1.Sex = F AND T2.state = PA ;"}, {"question_id": 808, "answer_sql": "SELECT T1.StuID FROM Student AS T1 INNER JOIN City AS T2 ON T1.city_code = T2.city_code WHERE T1.Sex = 'F' AND T2.state = 'PA';"}, {"question_id": 809, "answer_sql": "SELECT StuID FROM Student WHERE Sex = 'M' AND city_code NOT IN (SELECT city_code FROM City WHERE country = 'USA');"}, {"question_id": 810, "answer_sql": "SELECT StuID FROM Student WHERE Sex = 'M' AND country != 'USA'"}, {"question_id": 811, "answer_sql": "SELECT distance FROM Direct_distance WHERE city1_code = 'BAL' AND city2_code = 'CHI';"}, {"question_id": 812, "answer_sql": "SELECT distance FROM Direct_distance WHERE city1_code = 'BAL' AND city2_code = 'CHI';"}, {"question_id": 813, "answer_sql": "SELECT distance FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston') AND city2_code = (SELECT city_code FROM City WHERE city_name = 'Newark');"}, {"question_id": 814, "answer_sql": "SELECT distance FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston') AND city2_code = (SELECT city_code FROM City WHERE city_name = 'Newark');"}, {"question_id": 815, "answer_sql": "SELECT AVG(distance) , MIN(distance) , MAX(distance) FROM Direct_distance;"}, {"question_id": 816, "answer_sql": "SELECT AVG(distance) , MIN(distance) , MAX(distance) FROM Direct_distance;"}, {"question_id": 817, "answer_sql": "SELECT city1_code, city2_code FROM Direct_distance ORDER BY distance DESC LIMIT 1;"}, {"question_id": 818, "answer_sql": "SELECT city1_code, city2_code FROM Direct_distance WHERE distance = (SELECT MAX(distance) FROM Direct_distance);"}, {"question_id": 819, "answer_sql": "SELECT T1.city_code, T3.city_code FROM City AS T1 INNER JOIN Direct_distance AS T2 ON T1.city_code = T2.city1_code INNER JOIN City AS T3 ON T3.city_code = T2.city2_code WHERE T2.distance > (SELECT AVG(distance) FROM Direct_distance)"}, {"question_id": 820, "answer_sql": "SELECT T2.city1_code FROM Direct_distance AS T1 INNER JOIN City AS T2 ON T1.city1_code = T2.city_code WHERE T1.distance > (SELECT AVG(distance) FROM Direct_distance)"}, {"question_id": 821, "answer_sql": "SELECT T1.city_code, T3.city_code FROM City AS T1 INNER JOIN Direct_distance AS T2 ON T1.city_code = T2.city1_code INNER JOIN City AS T3 ON T3.city_code = T2.city2_code WHERE T2.distance < 1000;"}, {"question_id": 822, "answer_sql": "SELECT T2.city1_code, T2.city2_code FROM Direct_distance AS T1 INNER JOIN City AS T2 ON T1.city1_code = T2.city_code WHERE T1.distance < 1000;"}, {"question_id": 823, "answer_sql": "SELECT sum(distance) FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'BAL') AND city2_code != (SELECT city_code FROM City WHERE city_name = 'BAL');"}, {"question_id": 824, "answer_sql": "SELECT sum(distance) FROM Direct_distance WHERE city1_code = 'BAL'"}, {"question_id": 825, "answer_sql": "SELECT AVG(distance) FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston')"}, {"question_id": 826, "answer_sql": "SELECT AVG(distance) FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston') AND city2_code != (SELECT city_code FROM City WHERE city_name = 'Boston');"}, {"question_id": 827, "answer_sql": "SELECT T1.city_name FROM City AS T1 INNER JOIN Direct_distance AS T2 ON T1.city_code = T2.city1_code WHERE T2.distance = (SELECT MAX(distance) FROM Direct_distance WHERE city1_code = 'CHIC' )"}, {"question_id": 828, "answer_sql": "The nearest city to Chicago is city_name. You can use the following SQL query to find the city_name: ```sql SELECT T1.city_name FROM City AS T1 INNER JOIN Direct_distance AS T2 ON T1.city_code = T2.city1_code WHERE T2.distance = (SELECT MAX(distance) FROM Direct_distance WHERE city1_code = 'CHIC')"}, {"question_id": 829, "answer_sql": "SELECT T1.city_name FROM City AS T1 INNER JOIN Direct_distance AS T2 ON T1.city_code = T2.city1_code WHERE T1.city_name = (SELECT city_name FROM City WHERE city_code = (SELECT city2_code FROM Direct_distance WHERE distance = (SELECT MAX(distance) FROM Direct_distance WHERE city1_code = Boston ) AND city1_code = T2.city1_code)) ORDER BY T2.distance DESC LIMIT 1;"}, {"question_id": 830, "answer_sql": "SELECT T3.city_name FROM City AS T1 INNER JOIN Direct_distance AS T2 ON T1.city_code = T2.city1_code INNER JOIN City AS T3 ON T3.city_code = T2.city2_code WHERE T1.city_name = 'Boston' ORDER BY T2.distance DESC LIMIT 1;"}, {"question_id": 831, "answer_sql": "SELECT city1_code, SUM(distance) FROM Direct_distance GROUP BY city1_code;"}, {"question_id": 832, "answer_sql": "The response to the question is as follows: ```sql SELECT T1.city_code , SUM(T2.distance) FROM City AS T1 INNER JOIN Direct_distance AS T2 ON T1.city_code = T2.city1_code GROUP BY T1.city_code"}, {"question_id": 833, "answer_sql": "SELECT T3.city_name , avg(T2.distance) FROM Student AS T1 INNER JOIN Direct_distance AS T2 ON T1.city_code = T2.city1_code INNER JOIN City AS T3 ON T3.city_code = T2.city2_code GROUP BY T3.city_name"}, {"question_id": 834, "answer_sql": "SELECT T3.city_name , avg(T2.distance) FROM Student AS T1 INNER JOIN Direct_distance AS T2 ON T1.city_code = T2.city1_code INNER JOIN City AS T3 ON T3.city_code = T2.city2_code GROUP BY T3.city_code;"}, {"question_id": 835, "answer_sql": "SELECT T1.city_name , T3.city_name , T2.distance FROM City AS T1 INNER JOIN Direct_distance AS T2 ON T1.city_code = T2.city1_code INNER JOIN City AS T3 ON T3.city_code = T2.city2_code INNER JOIN Student AS T4 ON T1.city_code = T4.city_code WHERE T4.Fname = 'Linda' AND T4.Lname = 'Smith' AND T3.Fname = 'Tracy' AND T3.Lname = 'Kim';"}, {"question_id": 836, "answer_sql": "SELECT T3.distance FROM Student AS T1 INNER JOIN Student AS T2 ON T1.advisor = T2.StuID INNER JOIN Direct_distance AS T3 ON T3.city1_code = T1.city_code AND T3.city2_code = T2.city_code WHERE T1.Fname = 'Linda' AND T1.Lname = 'Smith' AND T2.Fname = 'Tracy' AND T2.Lname = 'Kim'"}, {"question_id": 837, "answer_sql": "SELECT T1.fname, T1.lname FROM Student AS T1 INNER JOIN Student AS T2 ON T1.city_code = T2.advisor WHERE T2.fname = 'Linda' AND T2.lname = 'Smith' ORDER BY T1.age DESC LIMIT 1;"}, {"question_id": 838, "answer_sql": "SELECT T1.Fname, T1.Lname FROM Student AS T1 INNER JOIN Student AS T2 ON T1.city_code = T2.city_code WHERE T2.Fname = 'Linda' AND T2.Lname = 'Smith' ORDER BY T1.city_code DESC LIMIT 1;"}, {"question_id": 839, "answer_sql": "SELECT T1.state FROM City AS T1 INNER JOIN Student AS T2 ON T1.city_code = T2.city_code WHERE T2.fname = 'Linda'"}, {"question_id": 840, "answer_sql": "SELECT T1.state FROM City AS T1 INNER JOIN Student AS T2 ON T1.city_code = T2.city_code WHERE T2.Fname = 'Linda'"}, {"question_id": 841, "answer_sql": "SELECT * FROM Sailors WHERE age > 30;"}, {"question_id": 842, "answer_sql": "SELECT name FROM Sailors WHERE age > (SELECT max(age) FROM Sailors);"}, {"question_id": 843, "answer_sql": "SELECT name, age FROM Sailors WHERE age < 30;"}, {"question_id": 844, "answer_sql": "SELECT name, age FROM Sailors WHERE age < 30;"}, {"question_id": 845, "answer_sql": "SELECT T3.name FROM Reserves AS T1 INNER JOIN Boats AS T2 ON T1.bid = T2.bid INNER JOIN Sailors AS T3 ON T3.sid = T1.sid WHERE T3.sid = 1;"}, {"question_id": 846, "answer_sql": "SELECT DISTINCT bid FROM Reserves WHERE sid = 1;"}, {"question_id": 847, "answer_sql": "SELECT T2.name FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.sid WHERE T1.bid = 102;"}, {"question_id": 848, "answer_sql": "SELECT T1.name FROM Sailors AS T1 INNER JOIN Reserves AS T2 ON T1.sid = T2.sid WHERE T2.bid = 102"}, {"question_id": 849, "answer_sql": "SELECT DISTINCT bid FROM Reserves;"}, {"question_id": 850, "answer_sql": "SELECT DISTINCT bid FROM Reserves;"}, {"question_id": 851, "answer_sql": "SELECT name FROM Sailors WHERE name LIKE '%e%';"}, {"question_id": 852, "answer_sql": "SELECT name FROM Sailors WHERE name LIKE '%e%';"}, {"question_id": 853, "answer_sql": "SELECT DISTINCT sid FROM Sailors WHERE age > (SELECT max(age) FROM Sailors);"}, {"question_id": 854, "answer_sql": "SELECT DISTINCT sid FROM Sailors WHERE sid != (SELECT MIN(sid) FROM Sailors WHERE rating = (SELECT MAX(rating) FROM Sailors));"}, {"question_id": 855, "answer_sql": "The solution to the problem is to use a subquery to check for the maximum rating of sailors and then use this value to select the unique names of sailors."}, {"question_id": 856, "answer_sql": "SELECT DISTINCT name FROM Sailors WHERE age > (SELECT MAX(rating) FROM Sailors WHERE rating > 7);"}, {"question_id": 857, "answer_sql": "SELECT DISTINCT name, sid FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid;"}, {"question_id": 858, "answer_sql": "SELECT DISTINCT s.name, s.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid GROUP BY s.sid HAVING COUNT(r.bid) >= 1;"}, {"question_id": 859, "answer_sql": "The solution to the problem is to use the subquery to count the number of reserves for each sailor and then use the WHERE clause to filter out the sailors who reserved more than one boat."}, {"question_id": 860, "answer_sql": "SELECT T1.name FROM Sailors AS T1 INNER JOIN Reserves AS T2 ON T1.sid = T2.sid GROUP BY T1.name HAVING COUNT(T2.bid) >= 2;"}, {"question_id": 861, "answer_sql": "SELECT T1.sid FROM Reserves AS T1 INNER JOIN Boats AS T2 ON T1.bid = T2.bid WHERE T2.color = 'red' OR T2.color = 'blue';"}, {"question_id": 862, "answer_sql": "SELECT DISTINCT T1.sid FROM Reserves AS T1 INNER JOIN Boats AS T2 ON T1.bid = T2.bid WHERE T2.color IN ('red', 'blue');"}, {"question_id": 863, "answer_sql": "SELECT DISTINCT T1.name, T1.sid FROM Sailors AS T1 INNER JOIN Reserves AS T2 ON T1.sid = T2.sid INNER JOIN Boats AS T3 ON T3.bid = T2.bid WHERE T3.color = 'red' OR T3.color = 'blue';"}, {"question_id": 864, "answer_sql": "SELECT DISTINCT T1.name, T1.sid FROM Sailors AS T1 INNER JOIN Reserves AS T2 ON T1.sid = T2.sid INNER JOIN Boats AS T3 ON T3.bid = T2.bid WHERE T3.color IN ('red', 'blue');"}, {"question_id": 865, "answer_sql": "SELECT T1.sid FROM Reserves AS T1 INNER JOIN Boats AS T2 ON T1.bid = T2.bid WHERE T2.color IN ('red', 'blue') GROUP BY T1.sid HAVING COUNT(DISTINCT T2.color) = 2;"}, {"question_id": 866, "answer_sql": "SELECT T1.sid FROM Reserves AS T1 INNER JOIN Boats AS T2 ON T1.bid = T2.bid WHERE T2.color IN ('red', 'blue') GROUP BY T1.sid HAVING COUNT(DISTINCT T2.color) = 2;"}, {"question_id": 867, "answer_sql": "SELECT T1.name, T1.sid FROM Sailors AS T1 INNER JOIN Reserves AS T2 ON T1.sid = T2.sid INNER JOIN Boats AS T3 ON T3.bid = T2.bid WHERE T3.color IN ('red', 'blue');"}, {"question_id": 868, "answer_sql": "SELECT DISTINCT T1.name, T1.sid FROM Sailors AS T1 INNER JOIN Reserves AS T2 ON T1.sid = T2.sid INNER JOIN Boats AS T3 ON T3.bid = T2.bid WHERE T3.color IN ('red', 'blue');"}, {"question_id": 869, "answer_sql": "SELECT sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves);"}, {"question_id": 870, "answer_sql": "SELECT sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves);"}, {"question_id": 871, "answer_sql": "SELECT name, sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves);"}, {"question_id": 872, "answer_sql": "SELECT name, sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves);"}, {"question_id": 873, "answer_sql": "SELECT sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves);"}, {"question_id": 874, "answer_sql": "SELECT sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves)"}, {"question_id": 875, "answer_sql": "SELECT DISTINCT T1.name FROM Sailors AS T1 INNER JOIN Reserves AS T2 ON T1.sid = T2.sid WHERE T2.bid = 103;"}, {"question_id": 876, "answer_sql": "SELECT T1.name FROM Sailors AS T1 INNER JOIN Reserves AS T2 ON T1.sid = T2.sid WHERE T2.bid = 103;"}, {"question_id": 877, "answer_sql": "```sql SELECT name FROM Sailors WHERE rating > (SELECT max(rating) FROM Sailors WHERE name = 'Luis')"}, {"question_id": 878, "answer_sql": "SELECT name FROM Sailors WHERE rating > (SELECT MAX(rating) FROM Sailors WHERE name = 'Luis')"}, {"question_id": 879, "answer_sql": "The name of all sailors whose rating is higher than all sailors named Luis is: ```sql SELECT name FROM Sailors WHERE rating > (SELECT max(rating) FROM Sailors WHERE name = 'Luis')"}, {"question_id": 880, "answer_sql": "The solution to the problem is as follows: ```sql SELECT name FROM Sailors WHERE rating > (SELECT MAX(rating) FROM Sailors WHERE name = 'Luis')"}, {"question_id": 881, "answer_sql": "SELECT DISTINCT name, sid FROM Sailors INNER JOIN Reserves ON Sailors.sid = Reserves.sid WHERE Sailors.rating > 2;"}, {"question_id": 882, "answer_sql": "SELECT DISTINCT s.name, s.sid FROM Sailors s INNER JOIN Reserves r ON s.sid = r.sid WHERE s.rating >= 3;"}, {"question_id": 883, "answer_sql": "SELECT name, age FROM Sailors WHERE rating = (SELECT MAX(rating) FROM Sailors);"}, {"question_id": 884, "answer_sql": "SELECT name, age FROM Sailors WHERE rating = (SELECT MAX(rating) FROM Sailors);"}, {"question_id": 885, "answer_sql": "SELECT COUNT(*) FROM Sailors;"}, {"question_id": 886, "answer_sql": "SELECT count(*) FROM Sailors;"}, {"question_id": 887, "answer_sql": "SELECT AVG(age) FROM Sailors WHERE rating = 7;"}, {"question_id": 888, "answer_sql": "SELECT AVG(age) FROM Sailors WHERE rating = 7;"}, {"question_id": 889, "answer_sql": "SELECT COUNT(*) FROM Sailors WHERE name LIKE 'D%';"}, {"question_id": 890, "answer_sql": "SELECT COUNT(*) FROM Sailors WHERE name LIKE 'D%';"}, {"question_id": 891, "answer_sql": "SELECT AVG(rating) , MAX(age) FROM Sailors;"}, {"question_id": 892, "answer_sql": "SELECT AVG(rating) AS avg_rating, MAX(age) AS max_age FROM Sailors;"}, {"question_id": 893, "answer_sql": "SELECT Boats.name, COUNT(*) FROM Boats INNER JOIN Reserves ON Boats.bid = Reserves.bid GROUP BY Boats.name;"}, {"question_id": 894, "answer_sql": "SELECT Boats.name, COUNT(*) FROM Boats INNER JOIN Reserves ON Boats.bid = Reserves.bid GROUP BY Boats.name;"}, {"question_id": 895, "answer_sql": "The number of reservations for each boat with id greater than 50 can be found by using the COUNT function on the Reserves table, with the WHERE clause filtering for boats with id greater than 50."}, {"question_id": 896, "answer_sql": "SELECT Boats.bid, COUNT(*) FROM Boats INNER JOIN Reserves ON Boats.bid = Reserves.bid WHERE Boats.bid > 50 GROUP BY Boats.bid;"}, {"question_id": 897, "answer_sql": "The number of reservations for each boat with more than 1 reservation can be found by using the GROUP BY and HAVING clauses in SQL. The GROUP BY clause is used to group the results by the boat name, and the HAVING clause is used to filter out the boats that have more than 1 reservation."}, {"question_id": 898, "answer_sql": "SELECT T1.name, COUNT(*) FROM Boats AS T1 INNER JOIN Reserves AS T2 ON T1.bid = T2.bid GROUP BY T1.bid HAVING COUNT(*) > 1;"}, {"question_id": 899, "answer_sql": "SELECT Boats.name, COUNT(*) FROM Reserves INNER JOIN Sailors ON Reserves.sid = Sailors.sid INNER JOIN Boats ON Reserves.bid = Boats.bid WHERE Sailors.sid > 1 GROUP BY Boats.name;"}, {"question_id": 900, "answer_sql": "SELECT Boats.name, COUNT(*) FROM Boats INNER JOIN Reserves ON Boats.bid = Reserves.bid INNER JOIN Sailors ON Sailors.sid = Reserves.sid WHERE Sailors.sid > 1 GROUP BY Boats.name;"}, {"question_id": 901, "answer_sql": "SELECT s.rating , AVG(s.age) FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color = 'red' GROUP BY s.rating;"}, {"question_id": 902, "answer_sql": "SELECT s.rating, AVG(s.age) FROM Sailors s INNER JOIN Reserves r ON s.sid = r.sid INNER JOIN Boats b ON r.bid = b.bid WHERE b.color = 'red' GROUP BY s.rating;"}, {"question_id": 903, "answer_sql": "SELECT name, rating, age FROM Sailors ORDER BY rating, age"}, {"question_id": 904, "answer_sql": "SELECT name, rating, age FROM Sailors ORDER BY rating, age;"}, {"question_id": 905, "answer_sql": "SELECT count(*) FROM Boats;"}, {"question_id": 906, "answer_sql": "SELECT count(*) FROM Boats;"}, {"question_id": 907, "answer_sql": "SELECT COUNT(*) FROM Boats WHERE color = 'red';"}, {"question_id": 908, "answer_sql": "SELECT COUNT(*) FROM Boats WHERE color = 'red';"}, {"question_id": 909, "answer_sql": "SELECT DISTINCT T3.name FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.sid INNER JOIN Boats AS T3 ON T1.bid = T3.bid WHERE T2.age BETWEEN 20 AND 30;"}, {"question_id": 910, "answer_sql": "SELECT DISTINCT T3.name FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.sid INNER JOIN Boats AS T3 ON T1.bid = T3.bid WHERE T2.age BETWEEN 20 AND 30;"}, {"question_id": 911, "answer_sql": "The solution to the problem is as follows: ```sql SELECT name FROM Sailors WHERE rating > (SELECT max(rating) FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color = 'red')))"}, {"question_id": 912, "answer_sql": "SELECT name FROM Sailors WHERE rating > (SELECT max(rating) FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color = 'red')))"}, {"question_id": 913, "answer_sql": "SELECT MAX(rating) FROM Sailors;"}, {"question_id": 914, "answer_sql": "SELECT MAX(rating) FROM Sailors;"}, {"question_id": 915, "answer_sql": "SELECT T3.name FROM Reserves AS T1 JOIN Boats AS T2 ON T1.bid = T2.bid JOIN Sailors AS T3 ON T1.sid = T3.sid WHERE T2.name = 'Melon';"}, {"question_id": 916, "answer_sql": "SELECT DISTINCT T1.name FROM Sailors AS T1 INNER JOIN Reserves AS T2 ON T1.sid = T2.sid INNER JOIN Boats AS T3 ON T3.bid = T2.bid WHERE T3.name = 'Melon';"}, {"question_id": 917, "answer_sql": "SELECT name, age FROM Sailors ORDER BY rating DESC;"}, {"question_id": 918, "answer_sql": "SELECT name, age FROM Sailors ORDER BY rating DESC;"}, {"question_id": 919, "answer_sql": "SELECT Model FROM headphone ORDER BY Price DESC LIMIT 1;"}, {"question_id": 920, "answer_sql": "The headphone model with the highest price is [Model]."}, {"question_id": 921, "answer_sql": "SELECT DISTINCT Model FROM headphones ORDER BY Model ASC;"}, {"question_id": 922, "answer_sql": "SELECT DISTINCT Model FROM headphones ORDER BY Model ASC;"}, {"question_id": 923, "answer_sql": "SELECT T1.Class FROM headphone AS T1 JOIN stock AS T2 ON T1.Headphone_ID = T2.Headphone_ID GROUP BY T1.Class ORDER BY COUNT(*) DESC LIMIT 1"}, {"question_id": 924, "answer_sql": "The most expensive headphone class is:"}, {"question_id": 925, "answer_sql": "SELECT T1.Class FROM headphone AS T1 JOIN stock AS T2 ON T1.Headphone_ID = T2.Headphone_ID GROUP BY T1.Class HAVING COUNT(*) > 2;"}, {"question_id": 926, "answer_sql": "SELECT Class FROM headphone WHERE Headphone_ID NOT IN (SELECT Headphone_ID FROM stock GROUP BY Headphone_ID HAVING COUNT(*) > 2) GROUP BY Class;"}, {"question_id": 927, "answer_sql": "SELECT `Class` , COUNT(*) FROM `headphone` WHERE Price > 200 GROUP BY `Class`;"}, {"question_id": 928, "answer_sql": "SELECT T2.Class, COUNT(*) FROM headphone AS T1 INNER JOIN (SELECT Class FROM headphone WHERE Price > 200 GROUP BY Class) AS T2 ON T1.Class = T2.Class GROUP BY T2.Class;"}, {"question_id": 929, "answer_sql": "SELECT COUNT(DISTINCT Earpads) FROM headphone;"}, {"question_id": 930, "answer_sql": "SELECT COUNT(DISTINCT Earpads) FROM headphone;"}, {"question_id": 931, "answer_sql": "SELECT e.Earpads FROM headphone e JOIN stock s ON e.Headphone_ID = s.Headphone_ID GROUP BY e.Earpads ORDER BY COUNT(*) DESC LIMIT 2"}, {"question_id": 932, "answer_sql": "SELECT T2.earpads FROM stock AS T1 INNER JOIN headphones AS T2 ON T1.headphone_id = T2.headphone_id GROUP BY T2.earpads ORDER BY COUNT(*) DESC LIMIT 2"}, {"question_id": 933, "answer_sql": "SELECT Model, Class, Construction FROM headphones ORDER BY Price ASC LIMIT 1;"}, {"question_id": 934, "answer_sql": "The lowest price headphone is the one with the lowest price. So, the headphone with the lowest price is the one with the lowest price."}, {"question_id": 935, "answer_sql": "SELECT avg(Price) , Construction FROM headphone GROUP BY Construction"}, {"question_id": 936, "answer_sql": "SELECT AVG(Price) , Construction FROM headphone GROUP BY Construction;"}, {"question_id": 937, "answer_sql": "SELECT Class FROM headphone WHERE Earpads = Bowls INTERSECT SELECT Class FROM headphone WHERE Earpads = Comfort Pads ;"}, {"question_id": 938, "answer_sql": "SELECT Class FROM headphones WHERE Earpads = 'Bowls' INTERSECT SELECT Class FROM headphones WHERE Earpads = 'Comfort Pads';"}, {"question_id": 939, "answer_sql": "SELECT T1.Earpads FROM headphones AS T1 INNER JOIN stock AS T2 ON T1.Headphone_ID = T2.Headphone_ID WHERE T1.Construction = 'plastic' AND T1.Earpads = 'no'"}, {"question_id": 940, "answer_sql": "SELECT DISTINCT Earpads FROM headphone WHERE Construction != 'Plastic';"}, {"question_id": 941, "answer_sql": "SELECT Model FROM headphone WHERE Price < (SELECT AVG(Price) FROM headphone)"}, {"question_id": 942, "answer_sql": "SELECT Model FROM headphone WHERE Price < (SELECT avg(Price) FROM headphone)"}, {"question_id": 943, "answer_sql": "SELECT Name FROM store ORDER BY Date_Opened ASC;"}, {"question_id": 944, "answer_sql": "SELECT Name FROM store ORDER BY Date_Opened ASC;"}, {"question_id": 945, "answer_sql": "SELECT Name, Parking FROM store WHERE Neighborhood = 'Tarzana';"}, {"question_id": 946, "answer_sql": "SELECT Name, Parking FROM store WHERE Neighborhood = Tarzana ;"}, {"question_id": 947, "answer_sql": "SELECT COUNT(DISTINCT Neighborhood) FROM store;"}, {"question_id": 948, "answer_sql": "SELECT count(DISTINCT Neighborhood) FROM store;"}, {"question_id": 949, "answer_sql": "SELECT Neighborhood , COUNT(*) FROM store GROUP BY Neighborhood;"}, {"question_id": 950, "answer_sql": "SELECT Neighborhood , COUNT(*) FROM store GROUP BY Neighborhood;"}, {"question_id": 951, "answer_sql": "SELECT T3.Name , COUNT(*) FROM stock AS T1 JOIN headphones AS T2 ON T1.Headphone_ID = T2.Headphone_ID JOIN store AS T3 ON T1.Store_ID = T3.Store_ID GROUP BY T1.Store_ID ORDER BY COUNT(*) DESC LIMIT 1;"}, {"question_id": 952, "answer_sql": "SELECT T3.Name , SUM(T2.Quantity) FROM stock AS T2 JOIN store AS T3 ON T2.Store_ID = T3.Store_ID JOIN headphones AS T1 ON T2.Headphone_ID = T1.Headphone_ID GROUP BY T3.Name;"}, {"question_id": 953, "answer_sql": "SELECT Name FROM store WHERE store_id NOT IN (SELECT store_id FROM stock);"}, {"question_id": 954, "answer_sql": "The following is the required SQL query: ```sql SELECT Name FROM store WHERE store_id NOT IN (SELECT store_id FROM stock)"}, {"question_id": 955, "answer_sql": "SELECT Model FROM headphone WHERE Headphone_ID NOT IN (SELECT Headphone_ID FROM stock)"}, {"question_id": 956, "answer_sql": "The headphone models that are not in stock in any store can be found by checking the `headphone` table and excluding any headphones that are in stock."}, {"question_id": 957, "answer_sql": "SELECT T2.model FROM stock AS T1 INNER JOIN headphones AS T2 ON T1.headphone_id = T2.headphone_id GROUP BY T2.model ORDER BY SUM(T1.quantity) DESC LIMIT 1;"}, {"question_id": 958, "answer_sql": "SELECT T1.model FROM headphones AS T1 JOIN stock AS T2 ON T1.headphone_id = T2.headphone_id GROUP BY T2.headphone_id ORDER BY sum(T2.quantity) DESC LIMIT 1"}, {"question_id": 959, "answer_sql": "SELECT COUNT(*) FROM stock AS T1 INNER JOIN headphone AS T2 ON T1.headphone_id = T2.headphone_id INNER JOIN store AS T3 ON T3.store_id = T1.store_id WHERE T3.name = 'Woodman';"}, {"question_id": 960, "answer_sql": "SELECT SUM(t3.quantity) FROM stock AS t3 JOIN store AS t2 ON t3.store_id = t2.store_id JOIN headphones AS t1 ON t3.headphone_id = t1.headphone_id WHERE t1.model = 'Woodman';"}, {"question_id": 961, "answer_sql": "```sql SELECT Neighborhood FROM store WHERE store_id NOT IN (SELECT store_id FROM stock)"}, {"question_id": 962, "answer_sql": "The neighborhood where no headphones are in stock is: ```sql SELECT Neighborhood FROM store WHERE store_id NOT IN (SELECT store_id FROM stock)"}, {"question_id": 963, "answer_sql": "SELECT COUNT (DISTINCT author_id) FROM Author_list;"}, {"question_id": 964, "answer_sql": "SELECT COUNT (DISTINCT author_id) FROM Author_list;"}, {"question_id": 965, "answer_sql": "SELECT COUNT ( DISTINCT paper_id ) FROM Paper;"}, {"question_id": 966, "answer_sql": "SELECT COUNT ( DISTINCT paper_id ) FROM Paper;"}, {"question_id": 967, "answer_sql": "SELECT count(*) FROM Affiliation;"}, {"question_id": 968, "answer_sql": "SELECT count(*) FROM Affiliation;"}, {"question_id": 969, "answer_sql": "SELECT COUNT ( DISTINCT paper_id ) FROM Paper WHERE venue = 'NAACL 2000';"}, {"question_id": 970, "answer_sql": "SELECT COUNT ( DISTINCT t1.paper_id ) FROM Paper AS t1 INNER JOIN Author_list AS t2 ON t1.paper_id = t2.paper_id WHERE t1.year = 2000 AND t1.venue = NAACL ;"}, {"question_id": 971, "answer_sql": "SELECT COUNT ( DISTINCT t3.paper_id ) FROM Author_list AS t2 JOIN Author AS t1 ON t2.author_id = t1.author_id JOIN Paper AS t3 ON t2.paper_id = t3.paper_id WHERE t1.name = Columbia University AND t3.year = 2009;"}, {"question_id": 972, "answer_sql": "SELECT COUNT ( DISTINCT t3.paper_id ) FROM Author_list AS t2 JOIN Author AS t1 ON t2.author_id = t1.author_id JOIN Paper AS t3 ON t2.paper_id = t3.paper_id WHERE t1.name = Columbia University AND t3.year = 2009;"}, {"question_id": 973, "answer_sql": "SELECT name , address FROM Affiliation;"}, {"question_id": 974, "answer_sql": "SELECT name , address FROM Affiliation;"}, {"question_id": 975, "answer_sql": "SELECT DISTINCT venue , YEAR FROM Paper ORDER BY YEAR;"}, {"question_id": 976, "answer_sql": "SELECT DISTINCT venue FROM Paper ORDER BY year;"}, {"question_id": 977, "answer_sql": "SELECT DISTINCT t3.title , t3.paper_id FROM Author_list AS t2 JOIN Author AS t1 ON t2.author_id = t1.author_id JOIN Paper AS t3 ON t3.paper_id = t2.paper_id WHERE t1.name = 'Harvard University';"}, {"question_id": 978, "answer_sql": "SELECT DISTINCT t3.title , t3.paper_id FROM Author_list AS t2 JOIN Author AS t1 ON t2.author_id = t1.author_id JOIN Paper AS t3 ON t3.paper_id = t2.paper_id JOIN Affiliation AS t4 ON t4.affiliation_id = t2.affiliation_id WHERE t4.name = 'Harvard University';"}, {"question_id": 979, "answer_sql": "SELECT Paper.title, Paper.paper_id FROM Paper INNER JOIN Author_list ON Paper.paper_id = Author_list.paper_id INNER JOIN Author ON Author_list.author_id = Author.author_id WHERE Author.name = 'Mckeown'"}, {"question_id": 980, "answer_sql": "SELECT DISTINCT t3.title , t3.paper_id FROM Author AS t1 JOIN Author_list AS t2 ON t1.author_id = t2.author_id JOIN Paper AS t3 ON t2.paper_id = t3.paper_id WHERE t1.name = Mckeown ;"}, {"question_id": 981, "answer_sql": "SELECT DISTINCT t3.paper_id FROM Author_list AS t1 INNER JOIN Paper AS t2 ON t1.paper_id = t2.paper_id INNER JOIN Author_list AS t3 ON t1.paper_id = t3.paper_id WHERE t1.affiliation_id IN ( SELECT affiliation_id FROM Affiliation WHERE name IN ('Stanford University', 'Columbia University') ) AND t3.affiliation_id IN ( SELECT affiliation_id FROM Affiliation WHERE name IN ('Stanford University', 'Columbia University') );"}, {"question_id": 982, "answer_sql": "SELECT DISTINCT t3.title, t3.paper_id FROM author_list AS t1 INNER JOIN affiliation AS t2 ON t1.affiliation_id = t2.affiliation_id INNER JOIN paper AS t3 ON t1.paper_id = t3.paper_id WHERE t2.name IN ('Stanford University', 'Columbia University') GROUP BY t3.paper_id HAVING COUNT (DISTINCT t2.name) = 2;"}, {"question_id": 983, "answer_sql": "SELECT DISTINCT t3.paper_id FROM Author AS t1 INNER JOIN Author_list AS t2 ON t1.author_id = t2.author_id INNER JOIN Paper AS t3 ON t2.paper_id = t3.paper_id WHERE t1.name IN ('Mckeown, Kathleen', 'Rambow, Owen') AND t3.title LIKE '%co-authored by Mckeown, Kathleen and Rambow, Owen%';"}, {"question_id": 984, "answer_sql": "SELECT DISTINCT t3.title , t3.paper_id FROM Author AS t1 JOIN Author_list AS t2 ON t1.author_id = t2.author_id JOIN Paper AS t3 ON t2.paper_id = t3.paper_id WHERE t1.name IN ('Mckeown, Kathleen', 'Rambow, Owen') ORDER BY t3.paper_id;"}, {"question_id": 985, "answer_sql": "SELECT DISTINCT t3.title , t3.paper_id FROM Author AS t1 JOIN Author_list AS t2 ON t1.author_id = t2.author_id JOIN Paper AS t3 ON t2.paper_id = t3.paper_id WHERE t1.name = 'Mckeown' EXCEPT SELECT DISTINCT t3.title , t3.paper_id FROM Author AS t1 JOIN Author_list AS t2 ON t1.author_id = t2.author_id JOIN Paper AS t3 ON t2.paper_id = t3.paper_id WHERE t1.name = 'Rambow'"}, {"question_id": 986, "answer_sql": "SELECT DISTINCT t3.title , t3.paper_id FROM Author AS t1 JOIN Author_list AS t2 ON t1.author_id = t2.author_id JOIN Paper AS t3 ON t2.paper_id = t3.paper_id WHERE t1.name = 'Mckeown' AND t1.name NOT IN ( SELECT t1.name FROM Author AS t1 JOIN Author_list AS t2 ON t1.author_id = t2.author_id JOIN Paper AS t3 ON t2.paper_id = t3.paper_id WHERE t1.name = 'Rambow' )"}, {"question_id": 987, "answer_sql": "SELECT DISTINCT t3.title , t3.paper_id FROM Author_list AS t1 JOIN Author AS t2 ON t1.author_id = t2.author_id JOIN Paper AS t3 ON t3.paper_id = t1.paper_id WHERE t2.name IN ('Mckeown, Kathleen' , 'Rambow, Owen');"}, {"question_id": 988, "answer_sql": "SELECT DISTINCT t3.title , t3.paper_id FROM Author AS t1 JOIN Author_list AS t2 ON t1.author_id = t2.author_id JOIN Paper AS t3 ON t2.paper_id = t3.paper_id WHERE t1.name IN ('Mckeown, Kathleen' , 'Rambow, Owen') OR t1.name = 'Kathleen, Owen';"}, {"question_id": 989, "answer_sql": "SELECT Author.name , COUNT (DISTINCT Author_list.paper_id) FROM Author JOIN Author_list ON Author.author_id = Author_list.author_id GROUP BY Author.name ORDER BY COUNT (DISTINCT Author_list.paper_id) DESC;"}, {"question_id": 990, "answer_sql": "SELECT Author.name, COUNT(Author_list.paper_id) as num_papers FROM Author JOIN Author_list ON Author.author_id = Author_list.author_id GROUP BY Author.name ORDER BY num_papers DESC;"}, {"question_id": 991, "answer_sql": "SELECT a.name , COUNT ( al.paper_id ) FROM Affiliation a JOIN Author_list al ON a.affiliation_id = al.affiliation_id GROUP BY a.name ORDER BY COUNT ( al.paper_id );"}, {"question_id": 992, "answer_sql": "SELECT T2.name FROM Author_list AS T1 INNER JOIN Affiliation AS T2 ON T1.affiliation_id = T2.affiliation_id GROUP BY T2.name ORDER BY COUNT(*) DESC;"}, {"question_id": 993, "answer_sql": "SELECT name FROM Author WHERE author_id IN ( SELECT author_id FROM Author_list GROUP BY author_id HAVING COUNT ( DISTINCT paper_id ) > 50 );"}, {"question_id": 994, "answer_sql": "SELECT name FROM Author WHERE author_id IN ( SELECT author_id FROM Author_list GROUP BY author_id HAVING COUNT ( DISTINCT paper_id ) > 50 );"}, {"question_id": 995, "answer_sql": "SELECT DISTINCT t1.name FROM Author AS t1 JOIN Author_list AS t2 ON t1.author_id = t2.author_id GROUP BY t1.name HAVING COUNT(*) = 1;"}, {"question_id": 996, "answer_sql": "SELECT DISTINCT T1.name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id = T2.author_id GROUP BY T1.name HAVING COUNT(*) = 1;"}, {"question_id": 997, "answer_sql": "SELECT venue , YEAR FROM Paper GROUP BY venue ORDER BY count(*) DESC LIMIT 1;"}, {"question_id": 998, "answer_sql": "SELECT venue , YEAR FROM Paper GROUP BY venue ORDER BY count(*) DESC LIMIT 1;"}, {"question_id": 999, "answer_sql": "SELECT venue FROM Paper GROUP BY venue ORDER BY COUNT(paper_id) LIMIT 1;"}, {"question_id": 1000, "answer_sql": "SELECT venue FROM Paper GROUP BY venue ORDER BY COUNT (*) LIMIT 1;"}, {"question_id": 1001, "answer_sql": "SELECT COUNT (cited_paper_id) FROM Citation WHERE paper_id = 'A00-1002';"}, {"question_id": 1002, "answer_sql": "SELECT COUNT ( DISTINCT t3.cited_paper_id ) FROM Author_list AS t2 JOIN Paper AS t3 ON t2.paper_id = t3.paper_id WHERE t3.paper_id = A00-1002 ;"}, {"question_id": 1003, "answer_sql": "SELECT COUNT ( DISTINCT t3.paper_id ) FROM Author_list AS t2 JOIN Paper AS t3 ON t2.paper_id = t3.paper_id WHERE t2.paper_id = D12-1027 ;"}, {"question_id": 1004, "answer_sql": "SELECT COUNT ( t3.cited_paper_id ) FROM Paper AS t1 INNER JOIN Citation AS t2 ON t1.paper_id = t2.paper_id INNER JOIN Citation AS t3 ON t2.cited_paper_id = t3.paper_id WHERE t1.paper_id = 'D12-1027';"}, {"question_id": 1005, "answer_sql": "SELECT t3.cited_paper_id , COUNT ( t3.cited_paper_id ) FROM Paper AS t1 JOIN Citation AS t2 ON t1.paper_id = t2.paper_id JOIN Citation AS t3 ON t2.cited_paper_id = t1.paper_id GROUP BY t3.cited_paper_id ORDER BY COUNT ( t3.cited_paper_id ) DESC LIMIT 1;"}, {"question_id": 1006, "answer_sql": "SELECT t3.cited_paper_id , COUNT ( t3.cited_paper_id ) FROM Author AS t1 JOIN Author_list AS t2 ON t1.author_id = t2.author_id JOIN Citation AS t3 ON t2.paper_id = t3.paper_id GROUP BY t3.cited_paper_id ORDER BY COUNT ( t3.cited_paper_id ) DESC LIMIT 1;"}, {"question_id": 1007, "answer_sql": "SELECT t1.title FROM Paper AS t1 INNER JOIN Citation AS t2 ON t1.paper_id = t2.paper_id GROUP BY t2.paper_id ORDER BY COUNT(*) DESC LIMIT 1;"}, {"question_id": 1008, "answer_sql": "SELECT t3.title FROM Citation AS t1 JOIN Paper AS t3 ON t1.paper_id = t3.paper_id JOIN Paper AS t2 ON t1.cited_paper_id = t2.paper_id GROUP BY t3.title ORDER BY COUNT(*) DESC LIMIT 1;"}, {"question_id": 1009, "answer_sql": "SELECT t3.paper_id , COUNT(*) FROM Author_list AS t2 JOIN Author AS t1 ON t2.author_id = t1.author_id JOIN Paper AS t3 ON t3.paper_id = t2.paper_id JOIN Citation AS t4 ON t3.paper_id = t4.paper_id GROUP BY t3.paper_id ORDER BY COUNT(*) DESC LIMIT 10;"}, {"question_id": 1010, "answer_sql": "SELECT t3.cited_paper_id, COUNT(*) as num_cited FROM Author_list as t1 JOIN Author AS t2 ON t1.author_id = t2.author_id JOIN Citation AS t3 ON t1.paper_id = t3.paper_id GROUP BY t3.cited_paper_id ORDER BY num_cited DESC LIMIT 10;"}, {"question_id": 1011, "answer_sql": "SELECT COUNT ( t4.cited_paper_id ) FROM Author AS t1 JOIN Author_list AS t2 ON t1.author_id = t2.author_id JOIN Paper AS t3 ON t2.paper_id = t3.paper_id JOIN Citation AS t4 ON t3.paper_id = t4.paper_id WHERE t1.name = Mckeown AND t1.name = Kathleen ;"}, {"question_id": 1012, "answer_sql": "SELECT COUNT ( t4.cited_paper_id ) FROM Author AS t1 JOIN Author_list AS t2 ON t1.author_id = t2.author_id JOIN Author AS t3 ON t3.author_id = t2.author_id JOIN Citation AS t4 ON t3.author_id = t4.paper_id WHERE t1.name = Mckeown AND t3.name = Kathleen ;"}, {"question_id": 1013, "answer_sql": "SELECT COUNT ( DISTINCT t4.cited_paper_id ) FROM Author AS t1 JOIN Author_list AS t2 ON t1.author_id = t2.author_id JOIN Paper AS t3 ON t2.paper_id = t3.paper_id JOIN Citation AS t4 ON t3.paper_id = t4.paper_id WHERE t1.name = Mckeown AND t1.name = Kathleen ;"}, {"question_id": 1014, "answer_sql": "SELECT COUNT ( DISTINCT t4.cited_paper_id ) FROM Author AS t1 JOIN Author_list AS t2 ON t1.author_id = t2.author_id JOIN Paper AS t3 ON t2.paper_id = t3.paper_id JOIN Citation AS t4 ON t3.paper_id = t4.paper_id WHERE t1.name = Mckeown , Kathleen ;"}, {"question_id": 1015, "answer_sql": "SELECT t1.name , COUNT(*) FROM Author AS t1 JOIN Citation AS t2 ON t1.author_id = t2.paper_id GROUP BY t1.author_id ORDER BY COUNT(*) DESC LIMIT 1;"}, {"question_id": 1016, "answer_sql": "SELECT T2.name , COUNT(*) FROM Citation AS T1 JOIN Author AS T2 ON T1.paper_id = T2.author_id GROUP BY T2.name ORDER BY COUNT(*) DESC LIMIT 1;"}, {"question_id": 1017, "answer_sql": "SELECT DISTINCT t3.venue , t3.year FROM Author AS t1 JOIN Author_list AS t2 ON t1.author_id = t2.author_id JOIN Paper AS t3 ON t2.paper_id = t3.paper_id WHERE t1.name = Mckeown , Kathleen ;"}, {"question_id": 1018, "answer_sql": "SELECT DISTINCT t3.venue, t3.year FROM Author AS t1 INNER JOIN Author_list AS t2 ON t1.author_id = t2.author_id INNER JOIN Paper AS t3 ON t2.paper_id = t3.paper_id WHERE t1.name = 'Mckeown , Kathleen';"}, {"question_id": 1019, "answer_sql": "SELECT DISTINCT venue, year FROM Paper INNER JOIN Author_list ON Paper.paper_id = Author_list.paper_id INNER JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.name = 'Columbia University';"}, {"question_id": 1020, "answer_sql": "SELECT DISTINCT venue, year FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id JOIN Author ON Author_list.author_id = Author.author_id JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.name = 'Columbia University';"}, {"question_id": 1021, "answer_sql": "SELECT Author.name FROM Author JOIN Author_list ON Author.author_id = Author_list.author_id JOIN Paper ON Author_list.paper_id = Paper.paper_id WHERE Paper.year = 2009 GROUP BY Author.name ORDER BY COUNT(*) DESC LIMIT 1;"}, {"question_id": 1022, "answer_sql": "SELECT t1.name FROM Author AS t1 JOIN Author_list AS t2 ON t1.author_id = t2.author_id JOIN Paper AS t3 ON t2.paper_id = t3.paper_id WHERE t3.year = 2009 GROUP BY t1.name ORDER BY COUNT ( t3.paper_id ) DESC LIMIT 1;"}, {"question_id": 1023, "answer_sql": "SELECT DISTINCT t3.name FROM Paper AS t1 INNER JOIN Author_list AS t2 ON t1.paper_id = t2.paper_id INNER JOIN Affiliation AS t3 ON t3.affiliation_id = t2.affiliation_id WHERE t1.year = 2009 GROUP BY t3.name ORDER BY COUNT ( t1.paper_id ) DESC LIMIT 3;"}, {"question_id": 1024, "answer_sql": "SELECT T2.name FROM Author_list AS T1 INNER JOIN Affiliation AS T2 ON T1.affiliation_id = T2.affiliation_id INNER JOIN Paper AS T3 ON T1.paper_id = T3.paper_id WHERE T3.year = 2009 GROUP BY T2.name ORDER BY COUNT ( DISTINCT T1.paper_id ) DESC LIMIT 3;"}, {"question_id": 1025, "answer_sql": "SELECT COUNT ( DISTINCT t3.paper_id ) FROM Author_list AS t2 JOIN Author AS t1 ON t2.author_id = t1.author_id JOIN Paper AS t3 ON t2.paper_id = t3.paper_id WHERE t1.name = Columbia University AND ( t3.year <= 2009 OR t3.year = NULL );"}, {"question_id": 1026, "answer_sql": "SELECT COUNT ( DISTINCT t3.paper_id ) FROM Author_list AS t2 JOIN Author AS t1 ON t2.author_id = t1.author_id JOIN Paper AS t3 ON t2.paper_id = t3.paper_id WHERE t1.name = Columbia University AND ( t3.year <= 2009 OR t3.year = NULL );"}, {"question_id": 1027, "answer_sql": "SELECT COUNT ( DISTINCT t3.paper_id ) FROM Author_list AS t2 JOIN Author AS t1 ON t2.author_id = t1.author_id JOIN Paper AS t3 ON t2.paper_id = t3.paper_id WHERE t1.name = Stanford University AND t3.year BETWEEN 2000 AND 2009;"}, {"question_id": 1028, "answer_sql": "SELECT COUNT ( DISTINCT t3.paper_id ) FROM Author_list AS t2 JOIN Author AS t1 ON t2.author_id = t1.author_id JOIN Paper AS t3 ON t3.paper_id = t2.paper_id WHERE t1.name = Stanford University AND t3.year >= 2000 AND t3.year <= 2009;"}, {"question_id": 1029, "answer_sql": "SELECT t3.title FROM Author_list AS t1 INNER JOIN Author AS t2 ON t1.author_id = t2.author_id INNER JOIN Paper AS t3 ON t1.paper_id = t3.paper_id GROUP BY t1.paper_id ORDER BY COUNT(t2.author_id) DESC LIMIT 1"}, {"question_id": 1030, "answer_sql": "SELECT title FROM Paper ORDER BY ( SELECT COUNT(*) FROM Author_list WHERE Paper.paper_id = Author_list.paper_id ) DESC LIMIT 1;"}, {"question_id": 1031, "answer_sql": "SELECT COUNT ( DISTINCT t4.name ) FROM Author AS t4 JOIN Author_list AS t1 ON t4.author_id = t1.author_id JOIN Author AS t3 ON t3.author_id = t1.author_id JOIN Author_list AS t2 ON t3.author_id = t2.author_id WHERE t4.name = 'Mckeown , Kathleen' AND t3.name = 'Kathleen';"}, {"question_id": 1032, "answer_sql": "SELECT COUNT ( DISTINCT t5.name ) FROM Author AS t1 JOIN Author_list AS t2 ON t1.author_id = t2.author_id JOIN Author AS t3 ON t3.author_id = t2.author_id JOIN Author_list AS t4 ON t3.author_id = t4.author_id JOIN Author AS t5 ON t5.author_id = t4.author_id WHERE t1.name = 'Mckeown , Kathleen' AND t5.name = 'Kathleen Mckeown';"}, {"question_id": 1033, "answer_sql": "SELECT COUNT ( DISTINCT t4.paper_id ) , t3.name FROM Author AS t3 JOIN Author_list AS t2 ON t3.author_id = t2.author_id JOIN Author AS t4 ON t4.author_id = t2.author_id JOIN Paper AS t5 ON t5.paper_id = t2.paper_id JOIN Author_list AS t1 ON t4.author_id = t1.author_id JOIN Paper AS t6 ON t6.paper_id = t1.paper_id JOIN Author AS t7 ON t7.author_id = t1.author_id WHERE t3.name = Mckeown , Kathleen AND t4.name = Kathleen Mckeown AND t6.title = Quantum Computing GROUP BY t3.name ORDER BY COUNT ( DISTINCT t4.paper_id ) DESC;"}, {"question_id": 1034, "answer_sql": "SELECT t1.name FROM Author AS t1 INNER JOIN Author_list AS t2 ON t1.author_id = t2.author_id INNER JOIN Author AS t3 ON t3.author_id = t2.author_id WHERE t1.name != 'Mckeown , Kathleen' AND t3.name = 'Mckeown , Kathleen' GROUP BY t1.name ORDER BY COUNT(t2.paper_id) DESC LIMIT 1;"}, {"question_id": 1035, "answer_sql": "SELECT paper_id FROM Paper WHERE title LIKE '%translation%';"}, {"question_id": 1036, "answer_sql": "SELECT paper_id FROM Paper WHERE title LIKE '%translation%';"}, {"question_id": 1037, "answer_sql": "SELECT DISTINCT t1.paper_id, t1.title FROM Paper AS t1 LEFT JOIN Citation AS t2 ON t1.paper_id = t2.paper_id WHERE t2.paper_id IS NULL;"}, {"question_id": 1038, "answer_sql": "SELECT DISTINCT t1.paper_id, t1.title FROM Paper AS t1 LEFT JOIN Citation AS t2 ON t1.paper_id = t2.paper_id WHERE t2.paper_id IS NULL;"}, {"question_id": 1039, "answer_sql": "SELECT T2.name FROM Author_list AS T1 INNER JOIN Affiliation AS T2 ON T1.affiliation_id = T2.affiliation_id INNER JOIN Paper AS T3 ON T1.paper_id = T3.paper_id WHERE T2.address LIKE '%China%' GROUP BY T2.name ORDER BY COUNT(*) DESC LIMIT 1;"}, {"question_id": 1040, "answer_sql": "SELECT T1.name FROM Affiliation AS T1 INNER JOIN Author_list AS T2 ON T1.affiliation_id = T2.affiliation_id INNER JOIN Paper AS T3 ON T2.paper_id = T3.paper_id WHERE T1.address LIKE '%China%' GROUP BY T1.name ORDER BY COUNT(T3.paper_id) DESC LIMIT 1;"}, {"question_id": 1041, "answer_sql": "SELECT COUNT(*) , YEAR FROM Paper GROUP BY YEAR;"}, {"question_id": 1042, "answer_sql": "SELECT venue , YEAR , COUNT(*) FROM Paper GROUP BY venue , YEAR;"}, {"question_id": 1043, "answer_sql": "SELECT `Affiliation`.name , COUNT(*) FROM `Affiliation` JOIN `Author_list` ON `Affiliation`.affiliation_id = `Author_list`.affiliation_id GROUP BY `Affiliation`.name;"}, {"question_id": 1044, "answer_sql": "SELECT COUNT ( t3.paper_id ) , t1.name FROM affiliation AS t1 JOIN author_list AS t2 ON t1.affiliation_id = t2.affiliation_id JOIN paper AS t3 ON t2.paper_id = t3.paper_id GROUP BY t1.name;"}, {"question_id": 1045, "answer_sql": "SELECT t1.title FROM Paper AS t1 INNER JOIN Citation AS t2 ON t1.paper_id = t2.paper_id GROUP BY t1.paper_id HAVING COUNT ( t2.paper_id ) > 50;"}, {"question_id": 1046, "answer_sql": "SELECT DISTINCT t1.title FROM Paper AS t1 JOIN Citation AS t2 ON t1.paper_id = t2.paper_id GROUP BY t1.paper_id HAVING COUNT(*) > 50;"}, {"question_id": 1047, "answer_sql": "SELECT COUNT(DISTINCT author_id) - COUNT(DISTINCT t3.author_id) FROM Author_list AS t1 INNER JOIN Paper AS t2 ON t1.paper_id = t2.paper_id INNER JOIN Citation AS t3 ON t2.paper_id = t3.paper_id GROUP BY t2.paper_id HAVING COUNT(t3.cited_paper_id) > 50;"}, {"question_id": 1048, "answer_sql": "SELECT COUNT(DISTINCT author_id) FROM Author_list WHERE author_id NOT IN ( SELECT T1.author_id FROM Author_list AS T1 JOIN Citation AS T2 ON T1.paper_id = T2.paper_id GROUP BY T1.author_id HAVING COUNT(*) > 50 );"}, {"question_id": 1049, "answer_sql": "SELECT DISTINCT t1.name FROM Author AS t1 JOIN Author_list AS t2 ON t1.author_id = t2.author_id JOIN Paper AS t3 ON t2.paper_id = t3.paper_id WHERE t3.year = 2009 AND (t3.venue = 'NAACL' OR t3.venue = 'ACL');"}, {"question_id": 1050, "answer_sql": "SELECT DISTINCT t1.name FROM Author AS t1 INNER JOIN Author_list AS t2 ON t1.author_id = t2.author_id INNER JOIN Paper AS t3 ON t2.paper_id = t3.paper_id WHERE t3.year = 2009 AND t3.venue IN ('NAACL', 'ACL') GROUP BY t1.name HAVING COUNT (DISTINCT t3.venue) = 2;"}, {"question_id": 1051, "answer_sql": "SELECT DISTINCT a.name FROM Author a WHERE a.author_id NOT IN ( SELECT al.author_id FROM Author_list al JOIN Paper p ON al.paper_id = p.paper_id WHERE p.venue = 'ACL' );"}, {"question_id": 1052, "answer_sql": "SELECT DISTINCT name FROM Author WHERE author_id NOT IN ( SELECT author_id FROM Author_list WHERE affiliation_id = ( SELECT affiliation_id FROM Affiliation WHERE name = 'ACL' ) );"}, {"question_id": 1053, "answer_sql": "SELECT count(*) FROM conference;"}, {"question_id": 1054, "answer_sql": "SELECT count(*) FROM conference;"}, {"question_id": 1055, "answer_sql": "SELECT DISTINCT Conference_Name FROM conference;"}, {"question_id": 1056, "answer_sql": "SELECT DISTINCT Conference_Name FROM conference;"}, {"question_id": 1057, "answer_sql": "SELECT Conference_Name, Year, Location FROM conference;"}, {"question_id": 1058, "answer_sql": "SELECT Conference_Name, Year, Location FROM conference;"}, {"question_id": 1059, "answer_sql": "SELECT Conference_Name , COUNT(*) FROM conference GROUP BY Conference_Name;"}, {"question_id": 1060, "answer_sql": "SELECT Conference_Name , COUNT(*) FROM conference GROUP BY Conference_Name"}, {"question_id": 1061, "answer_sql": "SELECT YEAR , COUNT(*) FROM conference GROUP BY YEAR;"}, {"question_id": 1062, "answer_sql": "SELECT YEAR, COUNT(*) FROM conference GROUP BY YEAR;"}, {"question_id": 1063, "answer_sql": "SELECT YEAR FROM conference GROUP BY YEAR ORDER BY COUNT(*) ASC LIMIT 1;"}, {"question_id": 1064, "answer_sql": "SELECT YEAR FROM conference GROUP BY YEAR ORDER BY COUNT(*) ASC LIMIT 1;"}, {"question_id": 1065, "answer_sql": "SELECT LOCATION FROM conference GROUP BY LOCATION HAVING COUNT(*) >= 2"}, {"question_id": 1066, "answer_sql": "SELECT LOCATION FROM conference GROUP BY LOCATION HAVING COUNT(*) >= 2"}, {"question_id": 1067, "answer_sql": "SELECT institution_name, location, founded FROM institution;"}, {"question_id": 1068, "answer_sql": "SELECT Institution_Name, Location, Founding FROM institution;"}, {"question_id": 1069, "answer_sql": "SELECT COUNT(*) FROM institution WHERE founded BETWEEN 1850 AND 1900;"}, {"question_id": 1070, "answer_sql": "SELECT COUNT(*) FROM institution WHERE founded BETWEEN 1850 AND 1900;"}, {"question_id": 1071, "answer_sql": "SELECT institution_name, location FROM institution ORDER BY founded DESC LIMIT 1;"}, {"question_id": 1072, "answer_sql": "SELECT institution_name, location FROM institution ORDER BY founded DESC LIMIT 1;"}, {"question_id": 1073, "answer_sql": "SELECT T2.institution_name , count(*) FROM staff AS T1 JOIN institution AS T2 ON T1.institution_id = T2.institution_id WHERE T2.founded > 1800 GROUP BY T2.institution_name ;"}, {"question_id": 1074, "answer_sql": "SELECT T2.institution_name , COUNT(*) FROM staff AS T1 JOIN institution AS T2 ON T1.institution_id = T2.institution_id WHERE T2.founded > 1800 GROUP BY T2.institution_name;"}, {"question_id": 1075, "answer_sql": "SELECT institution_name FROM institution WHERE institution_id NOT IN (SELECT institution_id FROM staff)"}, {"question_id": 1076, "answer_sql": "SELECT institution_name FROM institution WHERE institution_id NOT IN (SELECT institution_id FROM staff)"}, {"question_id": 1077, "answer_sql": "SELECT name FROM staff WHERE age > (SELECT avg(age) FROM staff);"}, {"question_id": 1078, "answer_sql": "SELECT name FROM staff WHERE age > (SELECT avg(age) FROM staff);"}, {"question_id": 1079, "answer_sql": "SELECT MAX(Age) , MIN(Age) FROM staff WHERE Nationality = 'United States';"}, {"question_id": 1080, "answer_sql": "SELECT MAX(Age) , MIN(Age) FROM staff;"}, {"question_id": 1081, "answer_sql": "SELECT t3.Conference_Name FROM staff AS t1 INNER JOIN conference_participation AS t2 ON t1.staff_id = t2.staff_id INNER JOIN conference AS t3 ON t2.Conference_ID = t3.Conference_ID WHERE t1.Nationality = 'Canada'"}, {"question_id": 1082, "answer_sql": "SELECT DISTINCT t3.conference_name FROM staff AS t1 INNER JOIN conference_participation AS t2 ON t1.staff_id = t2.staff_id INNER JOIN conference AS t3 ON t2.conference_id = t3.conference_id WHERE t1.nationality = 'Canada';"}, {"question_id": 1083, "answer_sql": "The problem can be solved by using the `INTERSECT` clause in SQL, which returns the rows that have the same values in both tables. The `conference_participation` table has two roles: 'speaker' and 'sponsor'. We can use the `INTERSECT` clause to find the staff_id's that are present in both tables. The `staff` table has a foreign key `Institution_ID`, which is the same as the `institution` table's `Institution_ID`. So, we can use the `institution` table to find the staff members. The `conference` table has a foreign key `Conference_ID`, which is the same as the `conference_participation` table's `Conference_ID`. So, we can use the `conference_participation` table to find the staff members."}, {"question_id": 1084, "answer_sql": "The question asks for the names of the staff members who have been both a speaker and a sponsor at some conference. This can be achieved by joining the `conference_participation` table with the `staff` table on the `staff_ID` field. The `conference_participation` table is a foreign key that references the `staff_ID` field in the `staff` table. This allows us to check if a staff member has been assigned a role in a conference. If they have both a 'speaker' and a 'sponsor' role, they will be included in the result set."}, {"question_id": 1085, "answer_sql": "SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id = T2.staff_id JOIN conference AS T3 ON T2.conference_id = T3.conference_id WHERE T3.conference_name = 'ACL' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id = T2.staff_id JOIN conference AS T3 ON T2.conference_id = T3.conference_id WHERE T3.conference_name = 'NACCL'"}, {"question_id": 1086, "answer_sql": "SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id = T2.staff_id WHERE T2.Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_Name IN ('ACL', 'NACCL')) GROUP BY T1.name HAVING COUNT(DISTINCT T2.Conference_ID) = 2;"}, {"question_id": 1087, "answer_sql": "SELECT T3.name FROM conference AS T1 JOIN conference_participation AS T2 ON T1.conference_id = T2.conference_id JOIN staff AS T3 ON T2.staff_id = T3.staff_id WHERE T1.year = 2003 OR T1.year = 2004"}, {"question_id": 1088, "answer_sql": "SELECT T3.name FROM conference AS T1 JOIN conference_participation AS T2 ON T1.conference_id = T2.conference_id JOIN staff AS T3 ON T2.staff_id = T3.staff_id WHERE T1.year = 2003 OR T1.year = 2004"}, {"question_id": 1089, "answer_sql": "SELECT T2.Conference_Name, T2.Year, COUNT(*) FROM conference_participation AS T1 INNER JOIN conference AS T2 ON T1.Conference_ID = T2.Conference_ID GROUP BY T2.Conference_Name;"}, {"question_id": 1090, "answer_sql": "SELECT c.Conference_Name, c.Year, COUNT(cp.staff_ID) FROM conference c JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_ID;"}, {"question_id": 1091, "answer_sql": "SELECT T2.Conference_Name FROM conference_participation AS T1 INNER JOIN conference AS T2 ON T1.Conference_ID = T2.Conference_ID GROUP BY T2.Conference_Name ORDER BY COUNT(*) DESC LIMIT 2"}, {"question_id": 1092, "answer_sql": "SELECT T2.Conference_Name FROM conference_participation AS T1 JOIN conference AS T2 ON T1.Conference_ID = T2.Conference_ID GROUP BY T1.Conference_ID ORDER BY COUNT(*) DESC LIMIT 2"}, {"question_id": 1093, "answer_sql": "SELECT name, nationality FROM staff WHERE staff_id NOT IN (SELECT staff_id FROM conference_participation WHERE conference_id IN (SELECT conference_id FROM conference WHERE conference_name LIKE '%ACL%'))"}, {"question_id": 1094, "answer_sql": "SELECT name, nationality FROM staff WHERE staff_id NOT IN (SELECT staff_id FROM conference_participation WHERE conference_id IN (SELECT conference_id FROM conference WHERE conference_name LIKE '%ACL%'))"}, {"question_id": 1095, "answer_sql": "SELECT institution_name, location FROM institution WHERE institution_id NOT IN (SELECT institution_id FROM staff JOIN conference_participation ON staff.staff_id = conference_participation.staff_id JOIN conference ON conference_participation.conference_id = conference.conference_id WHERE conference.year = 2004)"}, {"question_id": 1096, "answer_sql": "SELECT institution_name, location FROM institution WHERE institution_id NOT IN (SELECT institution_id FROM staff JOIN conference_participation ON staff.staff_id = conference_participation.staff_id JOIN conference ON conference_participation.conference_id = conference.conference_id WHERE conference.year = 2004)"}, {"question_id": 1097, "answer_sql": "SELECT pilot_name FROM PilotSkills WHERE age = (SELECT MAX(age) FROM PilotSkills);"}, {"question_id": 1098, "answer_sql": "The oldest pilot is the pilot with the oldest age."}, {"question_id": 1099, "answer_sql": "SELECT pilot_name FROM PilotSkills WHERE age < (SELECT AVG(age) FROM PilotSkills) ORDER BY age;"}, {"question_id": 1100, "answer_sql": "SELECT pilot_name FROM PilotSkills WHERE age < (SELECT AVG(age) FROM PilotSkills) ORDER BY age ASC;"}, {"question_id": 1101, "answer_sql": "SELECT * FROM PilotSkills WHERE age < 30;"}, {"question_id": 1102, "answer_sql": "SELECT * FROM PilotSkills WHERE age < 30;"}, {"question_id": 1103, "answer_sql": "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age < 35;"}, {"question_id": 1104, "answer_sql": "SELECT pilot_name FROM PilotSkills WHERE age < 35 AND plane_name = 'Piper Cub';"}, {"question_id": 1105, "answer_sql": "SELECT T1.location FROM Hangar AS T1 INNER JOIN PilotSkills AS T2 ON T1.plane_name = T2.plane_name WHERE T2.plane_name = 'F-14 Fighter';"}, {"question_id": 1106, "answer_sql": "SELECT T1.location FROM Hangar AS T1 INNER JOIN PilotSkills AS T2 ON T1.plane_name = T2.plane_name WHERE T2.plane_name = 'F-14 Fighter';"}, {"question_id": 1107, "answer_sql": "SELECT COUNT(DISTINCT location) FROM Hangar;"}, {"question_id": 1108, "answer_sql": "SELECT COUNT(DISTINCT location) FROM Hangar;"}, {"question_id": 1109, "answer_sql": "SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Jones' AND age = 32;"}, {"question_id": 1110, "answer_sql": "SELECT T2.plane_name FROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T1.pilot_name = 'Jones' AND T1.age = 32;"}, {"question_id": 1111, "answer_sql": "SELECT COUNT(*) FROM PilotSkills WHERE age > 40;"}, {"question_id": 1112, "answer_sql": "SELECT COUNT(*) FROM PilotSkills WHERE age > 40;"}, {"question_id": 1113, "answer_sql": "SELECT COUNT(*) FROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T1.age < 35 AND T1.plane_name = 'B-52 Bomber';"}, {"question_id": 1114, "answer_sql": "SELECT COUNT(*) FROM PilotSkills WHERE plane_name = 'B-52 Bombers' AND age < 35;"}, {"question_id": 1115, "answer_sql": "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age = (SELECT MIN(age) FROM PilotSkills WHERE plane_name = 'Piper Cub');"}, {"question_id": 1116, "answer_sql": "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age = (SELECT MIN(age) FROM PilotSkills WHERE plane_name = 'Piper Cub');"}, {"question_id": 1117, "answer_sql": "SELECT plane_name FROM PilotSkills GROUP BY plane_name ORDER BY COUNT(*) DESC LIMIT 1;"}, {"question_id": 1118, "answer_sql": "SELECT plane_name FROM PilotSkills GROUP BY plane_name ORDER BY COUNT(*) DESC LIMIT 1;"}, {"question_id": 1119, "answer_sql": "SELECT plane_name FROM Hangar WHERE plane_name NOT IN (SELECT plane_name FROM PilotSkills GROUP BY plane_name ORDER BY COUNT(*) ASC LIMIT 1);"}, {"question_id": 1120, "answer_sql": "SELECT plane_name FROM Hangar WHERE plane_name NOT IN (SELECT plane_name FROM PilotSkills GROUP BY plane_name ORDER BY COUNT(*) ASC LIMIT 1);"}, {"question_id": 1121, "answer_sql": "SELECT COUNT(DISTINCT pilot_name) FROM PilotSkills INNER JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name WHERE Hangar.location = 'Chicago';"}, {"question_id": 1122, "answer_sql": "SELECT COUNT(DISTINCT pilot_name) FROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.location = 'Chicago';"}, {"question_id": 1123, "answer_sql": "SELECT T1.plane_name FROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T1.pilot_name = 'Smith' AND T1.age = 41;"}, {"question_id": 1124, "answer_sql": "SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Smith' AND age = 41;"}, {"question_id": 1125, "answer_sql": "SELECT COUNT(DISTINCT plane_name) FROM Hangar;"}, {"question_id": 1126, "answer_sql": "SELECT COUNT(DISTINCT plane_name) FROM PilotSkills;"}, {"question_id": 1127, "answer_sql": "SELECT COUNT(*) FROM PilotSkills WHERE pilot_name = 'Smith';"}, {"question_id": 1128, "answer_sql": "SELECT COUNT(*) FROM PilotSkills WHERE pilot_name = 'Smith';"}, {"question_id": 1129, "answer_sql": "SELECT COUNT(*) FROM PilotSkills WHERE age > 40;"}, {"question_id": 1130, "answer_sql": "SELECT COUNT(*) FROM PilotSkills WHERE age > 40;"}, {"question_id": 1131, "answer_sql": "SELECT pilot_name FROM PilotSkills WHERE age BETWEEN 30 AND 40 ORDER BY age ASC;"}, {"question_id": 1132, "answer_sql": "SELECT pilot_name FROM PilotSkills WHERE age BETWEEN 30 AND 40 ORDER BY age ASC;"}, {"question_id": 1133, "answer_sql": "SELECT pilot_name FROM PilotSkills ORDER BY age DESC;"}, {"question_id": 1134, "answer_sql": "SELECT pilot_name FROM PilotSkills ORDER BY age DESC;"}, {"question_id": 1135, "answer_sql": "SELECT location FROM Hangar ORDER BY plane_name ASC;"}, {"question_id": 1136, "answer_sql": "SELECT location FROM Hangar ORDER BY plane_name;"}, {"question_id": 1137, "answer_sql": "SELECT DISTINCT plane_name FROM PilotSkills ORDER BY plane_name;"}, {"question_id": 1138, "answer_sql": "SELECT DISTINCT plane_name FROM PilotSkills ORDER BY plane_name;"}, {"question_id": 1139, "answer_sql": "SELECT COUNT(*) FROM PilotSkills WHERE age > 40 OR age < 30;"}, {"question_id": 1140, "answer_sql": "SELECT COUNT(*) FROM PilotSkills WHERE age > 40 OR age < 30;"}, {"question_id": 1141, "answer_sql": "SELECT pilot_name, age FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age > 35 UNION SELECT pilot_name, age FROM PilotSkills WHERE plane_name = 'F-14 Fighter' AND age < 30;"}, {"question_id": 1142, "answer_sql": "SELECT pilot_name, age FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age > 35 UNION SELECT pilot_name, age FROM PilotSkills WHERE plane_name = 'F-14 Fighter' AND age < 30;"}, {"question_id": 1143, "answer_sql": "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND pilot_name NOT IN (SELECT pilot_name FROM PilotSkills WHERE plane_name = 'B-52 Bomber')"}, {"question_id": 1144, "answer_sql": "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'PiperCub' AND pilot_name NOT IN (SELECT pilot_name FROM PilotSkills WHERE plane_name = 'B-52 Bomber')"}, {"question_id": 1145, "answer_sql": "SELECT pilot_name FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM Hangar WHERE plane_name IN ('Piper Cub', 'B-52 Bomber'));"}, {"question_id": 1146, "answer_sql": "SELECT pilot_name FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM Hangar WHERE plane_name = 'Piper Cub') INTERSECT SELECT pilot_name FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM Hangar WHERE plane_name = 'B-52 Bomber');"}, {"question_id": 1147, "answer_sql": "SELECT AVG(age) AS avg_age, MIN(age) AS min_age FROM PilotSkills;"}, {"question_id": 1148, "answer_sql": "SELECT AVG(age) AS avg_age, MIN(age) AS min_age FROM PilotSkills;"}, {"question_id": 1149, "answer_sql": "The following is the SQL query: ```sql SELECT pilot_name FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM Hangar WHERE location = 'Austin') INTERSECT SELECT pilot_name FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM Hangar WHERE location = 'Boston')"}, {"question_id": 1150, "answer_sql": "The response to the question is: ```sql SELECT DISTINCT pilot_name FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM Hangar WHERE location IN ('Austin', 'Boston'))"}, {"question_id": 1151, "answer_sql": "SELECT pilot_name FROM PilotSkills WHERE plane_name IN ('Piper Cub', 'F-14 Fighter') GROUP BY pilot_name HAVING COUNT(*) = 2;"}, {"question_id": 1152, "answer_sql": "SELECT pilot_name FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM Hangar WHERE plane_name = 'Piper Cub' OR plane_name = 'F-14 Fighter');"}, {"question_id": 1153, "answer_sql": "SELECT plane_type, AVG(age) FROM PilotSkills INNER JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name GROUP BY plane_type;"}, {"question_id": 1154, "answer_sql": "SELECT plane_name, AVG(age) FROM PilotSkills GROUP BY plane_name;"}, {"question_id": 1155, "answer_sql": "SELECT count(*) , plane_type FROM Planes GROUP BY plane_type;"}, {"question_id": 1156, "answer_sql": "SELECT plane_name, COUNT(*) FROM Hangar GROUP BY plane_name;"}, {"question_id": 1157, "answer_sql": "The problem can be solved by using the subquery to find the oldest pilot for each type of plane. The result is then ordered by plane name."}, {"question_id": 1158, "answer_sql": "SELECT DISTINCT plane_name, pilot_name FROM (SELECT plane_name, pilot_name, ROW_NUMBER() OVER (PARTITION BY plane_name ORDER BY age DESC) as rn FROM PilotSkills) t WHERE rn = 1 ORDER BY plane_name;"}, {"question_id": 1159, "answer_sql": "SELECT pilot_name, plane_name FROM PilotSkills WHERE age = (SELECT MAX(age) FROM PilotSkills GROUP BY plane_name);"}, {"question_id": 1160, "answer_sql": "SELECT DISTINCT plane_name, pilot_name FROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name INNER JOIN PilotSkills AS T3 ON T1.pilot_name = T3.pilot_name WHERE T1.age = (SELECT MAX(age) FROM PilotSkills AS T4 WHERE T4.pilot_name = T1.pilot_name);"}, {"question_id": 1161, "answer_sql": "The output requirement is a single SQL query. The query should return the max age for each group of pilots with the same name."}, {"question_id": 1162, "answer_sql": "SELECT pilot_name, MAX(age) FROM PilotSkills GROUP BY pilot_name;"}, {"question_id": 1163, "answer_sql": "SELECT h.location, COUNT(DISTINCT ps.pilot_name) AS num_pilots, AVG(ps.age) AS avg_pilot_age FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name GROUP BY h.location;"}, {"question_id": 1164, "answer_sql": "SELECT Hangar.location, COUNT(PilotSkills.pilot_name) AS num_pilots, AVG(PilotSkills.age) AS avg_age FROM PilotSkills INNER JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name GROUP BY Hangar.location;"}, {"question_id": 1165, "answer_sql": "SELECT COUNT(*) FROM (SELECT pilot_name, COUNT(*) as num_pilots FROM PilotSkills GROUP BY plane_name HAVING AVG(age) < 35) AS subquery;"}, {"question_id": 1166, "answer_sql": "SELECT plane_name, COUNT(*) as num_pilots FROM PilotSkills WHERE age < 35 GROUP BY plane_name;"}, {"question_id": 1167, "answer_sql": "SELECT T2.location FROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T1.age = (SELECT MIN(age) FROM PilotSkills);"}, {"question_id": 1168, "answer_sql": "SELECT T1.location FROM Hangar AS T1 INNER JOIN PilotSkills AS T2 ON T1.plane_name = T2.plane_name WHERE T2.age = (SELECT MIN(age) FROM PilotSkills);"}, {"question_id": 1169, "answer_sql": "SELECT DISTINCT T1.pilot_name, T1.age FROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.location = 'Austin';"}, {"question_id": 1170, "answer_sql": "SELECT pilot_name, age FROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.location = 'Austin';"}, {"question_id": 1171, "answer_sql": "The response to the question can be generated as follows: ```sql SELECT pilot_name FROM PilotSkills WHERE age > (SELECT age FROM PilotSkills WHERE plane_name = 'Piper Cub') ORDER BY pilot_name"}, {"question_id": 1172, "answer_sql": "The problem can be solved by first checking if Piper Cub has flown any plane, and if so, finding the oldest pilot who has flown. If not, finding the oldest pilot. The result is then ordered alphabetically."}, {"question_id": 1173, "answer_sql": "SELECT COUNT(*) FROM PilotSkills WHERE age < (SELECT MAX(age) FROM PilotSkills WHERE plane_name = 'F-14 Fighter');"}, {"question_id": 1174, "answer_sql": "SELECT COUNT(*) FROM PilotSkills WHERE age < (SELECT MAX(age) FROM PilotSkills WHERE plane_name = 'F-14 Fighter');"}, {"question_id": 1175, "answer_sql": "SELECT DISTINCT plane_name FROM Hangar WHERE plane_name LIKE '%Bomber%';"}, {"question_id": 1176, "answer_sql": "SELECT DISTINCT plane_name FROM PilotSkills WHERE plane_name LIKE '%Bomber%';"}, {"question_id": 1177, "answer_sql": "SELECT COUNT(*) FROM PilotSkills WHERE age > (SELECT MAX(age) FROM PilotSkills WHERE plane_name = 'Piper Cub');"}, {"question_id": 1178, "answer_sql": "SELECT COUNT(*) FROM PilotSkills WHERE age > (SELECT MIN(age) FROM PilotSkills WHERE pilot_name = 'Piper Cub');"}, {"question_id": 1179, "answer_sql": "SELECT name FROM district ORDER BY area_km DESC LIMIT 1;"}, {"question_id": 1180, "answer_sql": "SELECT T1.Area_km, T1.Government_website FROM district AS T1 JOIN district_spokesman AS T2 ON T1.District_ID = T2.District_ID JOIN spokesman_district AS T3 ON T2.Spokesman_ID = T3.Spokesman_ID JOIN spokesman AS T4 ON T3.Spokesman_ID = T4.Spokesman_ID ORDER BY T1.Population ASC LIMIT 1;"}, {"question_id": 1181, "answer_sql": "SELECT Name , Population FROM district WHERE Area_km > (SELECT AVG( Area_km ) FROM district );"}, {"question_id": 1182, "answer_sql": "SELECT MAX( Area_km ) , AVG( Area_km ) FROM district;"}, {"question_id": 1183, "answer_sql": "SELECT SUM(Population) FROM district WHERE Area_km IN (SELECT Area_km FROM district ORDER BY Area_km DESC LIMIT 3);"}, {"question_id": 1184, "answer_sql": "SELECT District_ID, Name, Government_website FROM district ORDER BY Population ASC;"}, {"question_id": 1185, "answer_sql": "SELECT t1.name FROM district AS t1 INNER JOIN spokesman_district AS t2 ON t1.district_id = t2.district_id WHERE t1.government_website LIKE '%gov%'"}, {"question_id": 1186, "answer_sql": "SELECT District_ID , Name FROM district WHERE Population > 4000 OR Area_km > 3000;"}, {"question_id": 1187, "answer_sql": "SELECT Name, Speach_title FROM spokesman;"}, {"question_id": 1188, "answer_sql": "SELECT AVG( Age ) , AVG( Points ) FROM spokesman WHERE Rank_position = 1;"}, {"question_id": 1189, "answer_sql": "SELECT Name, Points FROM spokesman WHERE Age < 40;"}, {"question_id": 1190, "answer_sql": "SELECT Name FROM spokesman ORDER BY Age DESC LIMIT 1;"}, {"question_id": 1191, "answer_sql": "SELECT name FROM spokesman WHERE points < (SELECT avg(points) FROM spokesman);"}, {"question_id": 1192, "answer_sql": "SELECT t1.name FROM district AS t1 JOIN spokesman_district AS t2 ON t1.district_id = t2.district_id GROUP BY t2.district_id ORDER BY COUNT(*) DESC LIMIT 1;"}, {"question_id": 1193, "answer_sql": "SELECT s.Name FROM spokesman s INNER JOIN spokesman_district sd ON s.Spokesman_ID = sd.Spokesman_ID WHERE sd.Start_year < 2004;"}, {"question_id": 1194, "answer_sql": "SELECT T3.Name, COUNT(*) FROM spokesman_district AS T1 JOIN district AS T2 ON T1.District_ID = T2.District_ID JOIN spokesman AS T3 ON T1.Spokesman_ID = T3.Spokesman_ID GROUP BY T2.Name"}, {"question_id": 1195, "answer_sql": "The solution to the problem is to use the intersect operator (INTERSECT) in the SELECT statement. The intersect operator returns the common rows between two SELECT statements. The intersect operator is used to select the records that have the same values in both tables. The SQL query is as follows: ```sql SELECT T1.Name FROM district AS T1 INNER JOIN spokesman_district AS T2 ON T1.District_ID = T2.District_ID INNER JOIN spokesman AS T3 ON T2.Spokesman_ID = T3.Spokesman_ID WHERE T3.Rank_position = 1 INTERSECT SELECT T1.Name FROM district AS T1 INNER JOIN spokesman_district AS T2 ON T1.District_ID = T2.District_ID INNER JOIN spokesman AS T3 ON T2.Spokesman_ID = T3.Spokesman_ID WHERE T3.Rank_position = 2"}, {"question_id": 1196, "answer_sql": "SELECT T1.Name FROM district AS T1 INNER JOIN spokesman_district AS T2 ON T1.District_ID = T2.District_ID GROUP BY T2.District_ID HAVING COUNT(*) > 1"}, {"question_id": 1197, "answer_sql": "SELECT COUNT(*) FROM district WHERE district_id NOT IN (SELECT district_id FROM spokesman_district);"}, {"question_id": 1198, "answer_sql": "SELECT Name FROM spokesman WHERE Spokesman_ID NOT IN (SELECT Spokesman_ID FROM spokesman_district);"}, {"question_id": 1199, "answer_sql": "SELECT AVG( District_ID ) FROM district AS T1 INNER JOIN spokesman_district AS T2 ON T1.District_ID = T2.District_ID GROUP BY T1.District_ID"}, {"question_id": 1200, "answer_sql": "SELECT title FROM Sculptures WHERE year = (SELECT MAX(year) FROM Sculptures);"}, {"question_id": 1201, "answer_sql": "SELECT title FROM Sculptures WHERE year = (SELECT MAX(year) FROM Sculptures);"}, {"question_id": 1202, "answer_sql": "SELECT title, location FROM Paintings ORDER BY year ASC LIMIT 1;"}, {"question_id": 1203, "answer_sql": "SELECT title, location FROM Paintings WHERE year = (SELECT MIN(year) FROM Paintings);"}, {"question_id": 1204, "answer_sql": "SELECT title FROM Sculptures WHERE location = 'Gallery 226';"}, {"question_id": 1205, "answer_sql": "SELECT title FROM Sculptures WHERE location = 'gallery 226';"}, {"question_id": 1206, "answer_sql": "SELECT title, location FROM Paintings;"}, {"question_id": 1207, "answer_sql": "SELECT title, location FROM Paintings;"}, {"question_id": 1208, "answer_sql": "SELECT title, location FROM Sculptures;"}, {"question_id": 1209, "answer_sql": "SELECT title, location FROM Sculptures;"}, {"question_id": 1210, "answer_sql": "SELECT medium FROM Paintings WHERE paintingID = 80;"}, {"question_id": 1211, "answer_sql": "SELECT T2.medium FROM Paintings AS T1 INNER JOIN Artists AS T2 ON T1.painterID = T2.artistID WHERE T1.paintingID = 80;"}, {"question_id": 1212, "answer_sql": "SELECT fname, lname FROM Artists WHERE birthYear > 1850;"}, {"question_id": 1213, "answer_sql": "SELECT fname, lname FROM Artists WHERE birthYear > 1850;"}, {"question_id": 1214, "answer_sql": "SELECT title, year FROM Sculptures WHERE location != 'Gallery 226';"}, {"question_id": 1215, "answer_sql": "SELECT title, year FROM Sculptures WHERE location != 'Gallery 226'"}, {"question_id": 1216, "answer_sql": "SELECT DISTINCT a.fname, a.lname FROM Artists a JOIN Sculptures s ON a.artistID = s.sculptorID WHERE s.year < 1900;"}, {"question_id": 1217, "answer_sql": "SELECT DISTINCT a.fname, a.lname FROM Artists a JOIN Sculptures s ON a.artistID = s.sculptorID WHERE s.year < 1900;"}, {"question_id": 1218, "answer_sql": "SELECT DISTINCT T1.birthYear FROM Artists AS T1 INNER JOIN Sculptures AS T2 ON T1.artistID = T2.sculptorID WHERE T2.year > 1920;"}, {"question_id": 1219, "answer_sql": "SELECT DISTINCT T1.birthYear FROM Artists AS T1 INNER JOIN Sculptures AS T2 ON T1.artistID = T2.sculptorID WHERE T2.year > 1920;"}, {"question_id": 1220, "answer_sql": "SELECT fname, lname FROM Artists WHERE deathYear - birthYear = (SELECT MAX(deathYear - birthYear) FROM Artists)"}, {"question_id": 1221, "answer_sql": "The artist who lived the longest is the artist with the longest life span. This can be found by finding the artist with the earliest birth year and the latest death year. The full name of the artist is simply the concatenation of the first name, the middle name, and the last name."}, {"question_id": 1222, "answer_sql": "SELECT deathYear - birthYear FROM Artists ORDER BY deathYear - birthYear LIMIT 1;"}, {"question_id": 1223, "answer_sql": "SELECT T2.deathYear - T2.birthYear + 1 FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID INNER JOIN Sculptures AS T3 ON T1.artistID = T3.sculptorID WHERE T2.height_mm IS NOT NULL ORDER BY T2.height_mm LIMIT 1;"}, {"question_id": 1224, "answer_sql": "SELECT fname, (deathYear - birthYear) AS age FROM Artists ORDER BY age DESC LIMIT 1;"}, {"question_id": 1225, "answer_sql": "SELECT fname, (YEAR(CURRENT_DATE) - birthYear) AS age FROM Artists ORDER BY age DESC LIMIT 1;"}, {"question_id": 1226, "answer_sql": "SELECT COUNT(*) FROM Paintings WHERE location = gallery 240 ;"}, {"question_id": 1227, "answer_sql": "SELECT COUNT(*) FROM Paintings WHERE gallery = 240;"}, {"question_id": 1228, "answer_sql": "SELECT COUNT(*) FROM Paintings AS T1 INNER JOIN Artists AS T2 ON T1.painterID = T2.artistID WHERE T2.deathYear IS NOT NULL ORDER BY T2.deathYear - T2.birthYear DESC LIMIT 1;"}, {"question_id": 1229, "answer_sql": "SELECT COUNT(*) FROM Paintings AS T1 INNER JOIN Artists AS T2 ON T1.painterID = T2.artistID WHERE T2.deathYear IS NOT NULL ORDER BY T2.deathYear - T2.birthYear DESC LIMIT 1;"}, {"question_id": 1230, "answer_sql": "SELECT T2.title, T2.year FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T1.fname = 'Mary'"}, {"question_id": 1231, "answer_sql": "SELECT Paintings.title, Paintings.year FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T1.fname = 'Mary'"}, {"question_id": 1232, "answer_sql": "SELECT Paintings.width_mm FROM Artists INNER JOIN Paintings ON Artists.artistID = Paintings.painterID WHERE Artists.birthYear < 1850;"}, {"question_id": 1233, "answer_sql": "SELECT T2.width_mm FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T1.birthYear < 1850;"}, {"question_id": 1234, "answer_sql": "SELECT Paintings.location, Paintings.medium FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID WHERE Artists.fname = 'Pablo';"}, {"question_id": 1235, "answer_sql": "SELECT Paintings.location, Paintings.mediumOn FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID WHERE Artists.fname = 'Pablo'"}, {"question_id": 1236, "answer_sql": "The task requires to find the first and last names of the artists who have both works of paintings and sculptures. This can be achieved by joining the Artists table with the Paintings and Sculptures tables on the artistID. The intersection of these two tables will contain the artistID, fname, and lname."}, {"question_id": 1237, "answer_sql": "SELECT DISTINCT fname, lname FROM Artists A INNER JOIN Paintings P ON A.artistID = P.painterID INNER JOIN Sculptures S ON A.artistID = S.sculptorID;"}, {"question_id": 1238, "answer_sql": "SELECT DISTINCT a.fname, a.lname FROM Artists a INNER JOIN Paintings p ON a.artistID = p.painterID WHERE p.medium = 'Oil' AND p.mediumOn = 'Lithographic' AND a.artistID NOT IN (SELECT DISTINCT a.artistID FROM Artists a INNER JOIN Sculptures s ON a.artistID = s.sculptorID);"}, {"question_id": 1239, "answer_sql": "SELECT DISTINCT T1.fname, T1.lname FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T2.medium = 'oil' INTERSECT SELECT DISTINCT T1.fname, T1.lname FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T2.medium = 'lithographic';"}, {"question_id": 1240, "answer_sql": "SELECT T1.birthYear FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T2.year = 1884 AND T2.medium = 'canvas';"}, {"question_id": 1241, "answer_sql": "SELECT T1.birthYear FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T2.year = 1884;"}, {"question_id": 1242, "answer_sql": "SELECT DISTINCT T1.fname FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T2.location = 'gallery 241' AND T2.medium = 'oil';"}, {"question_id": 1243, "answer_sql": "SELECT DISTINCT fname FROM Artists a JOIN Paintings p ON a.artistID = p.painterID WHERE p.galleryNumber = 241 AND p.medium = 'oil';"}, {"question_id": 1244, "answer_sql": "SELECT medium, COUNT(*) FROM Art_Pieces GROUP BY medium;"}, {"question_id": 1245, "answer_sql": "SELECT medium, COUNT(*) FROM Artists a JOIN Paintings p ON a.artistID = p.painterID JOIN Sculptures s ON a.artistID = s.sculptorID GROUP BY medium;"}, {"question_id": 1246, "answer_sql": "SELECT medium, AVG(height_mm) FROM Paintings GROUP BY medium;"}, {"question_id": 1247, "answer_sql": "SELECT medium, AVG(height_mm) FROM Paintings GROUP BY medium;"}, {"question_id": 1248, "answer_sql": "SELECT location, COUNT(*) FROM Paintings WHERE year < 1900 GROUP BY location;"}, {"question_id": 1249, "answer_sql": "SELECT location, COUNT(*) FROM Paintings WHERE year < 1900 GROUP BY location;"}, {"question_id": 1250, "answer_sql": "SELECT title FROM Paintings WHERE year > 1910 AND medium = 'oil';"}, {"question_id": 1251, "answer_sql": "SELECT title FROM Paintings WHERE year > 1910 AND medium = 'oil';"}, {"question_id": 1252, "answer_sql": "SELECT DISTINCT painterID FROM Paintings WHERE location = 'Gallery 240' AND medium = 'Oil';"}, {"question_id": 1253, "answer_sql": "SELECT DISTINCT painterID FROM Paintings WHERE medium = 'oil' AND location = 'gallery 240';"}, {"question_id": 1254, "answer_sql": "SELECT DISTINCT title FROM paintings WHERE height_mm > (SELECT max(height_mm) FROM paintings WHERE mediumOn = 'canvas');"}, {"question_id": 1255, "answer_sql": "SELECT DISTINCT title FROM Paintings WHERE height_mm > (SELECT MAX(height_mm) FROM Paintings WHERE mediumOn = 'canvas');"}, {"question_id": 1256, "answer_sql": "SELECT DISTINCT paintingID FROM Paintings WHERE year < (SELECT MIN(year) FROM Paintings WHERE location = 'gallery 240');"}, {"question_id": 1257, "answer_sql": "SELECT DISTINCT paintingID FROM Paintings WHERE year < (SELECT MIN(year) FROM Paintings WHERE location = 'Gallery 240');"}, {"question_id": 1258, "answer_sql": "SELECT paintingID FROM Paintings WHERE year = (SELECT MIN(year) FROM Paintings);"}, {"question_id": 1259, "answer_sql": "SELECT paintingID FROM Paintings WHERE year = (SELECT MIN(year) FROM Paintings);"}, {"question_id": 1260, "answer_sql": "SELECT T1.fname, T1.lname FROM Artists AS T1 INNER JOIN Sculptures AS T2 ON T1.artistID = T2.sculptorID WHERE T2.title LIKE '%female%'"}, {"question_id": 1261, "answer_sql": "SELECT DISTINCT T1.fname, T1.lname FROM Artists AS T1 INNER JOIN Sculptures AS T2 ON T1.artistID = T2.sculptorID WHERE T2.title LIKE '%female%'"}, {"question_id": 1262, "answer_sql": "SELECT DISTINCT title FROM Paintings ORDER BY title;"}, {"question_id": 1263, "answer_sql": "SELECT DISTINCT title FROM Paintings ORDER BY title;"}, {"question_id": 1264, "answer_sql": "SELECT DISTINCT title FROM Paintings ORDER BY height_mm;"}, {"question_id": 1265, "answer_sql": "The output requirement is a single line of text containing the SQL query. The query should list the titles of all distinct paintings, from shortest to longest in height."}, {"question_id": 1266, "answer_sql": "SELECT title FROM Paintings WHERE year BETWEEN 1900 AND 1950 UNION SELECT title FROM Sculptures WHERE year BETWEEN 1900 AND 1950;"}, {"question_id": 1267, "answer_sql": "SELECT title FROM Paintings WHERE year BETWEEN 1900 AND 1950 UNION SELECT title FROM Sculptures WHERE year BETWEEN 1900 AND 1950;"}, {"question_id": 1268, "answer_sql": "SELECT title FROM Paintings WHERE painterID = 222 UNION SELECT title FROM Sculptures WHERE sculptorID = 222;"}, {"question_id": 1269, "answer_sql": "SELECT title FROM Paintings WHERE painterID = 222 UNION SELECT title FROM Sculptures WHERE sculptorID = 222;"}, {"question_id": 1270, "answer_sql": "SELECT painterID FROM Paintings WHERE year < 1900 GROUP BY painterID ORDER BY COUNT(*) DESC LIMIT 1;"}, {"question_id": 1271, "answer_sql": "SELECT T1.artistID FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T2.year < 1900 GROUP BY T1.artistID ORDER BY COUNT(T2.paintingID) DESC LIMIT 1;"}, {"question_id": 1272, "answer_sql": "SELECT T1.fname FROM Artists AS T1 JOIN Sculptures AS T2 ON T1.artistID = T2.sculptorID GROUP BY T2.sculptorID ORDER BY COUNT(*) DESC LIMIT 1;"}, {"question_id": 1273, "answer_sql": "SELECT T1.fname FROM Artists AS T1 INNER JOIN Sculptures AS T2 ON T1.artistID = T2.sculptorID GROUP BY T2.sculptorID ORDER BY COUNT(*) DESC LIMIT 1;"}, {"question_id": 1274, "answer_sql": "SELECT title FROM Paintings WHERE width_mm < 600 OR height_mm > 800;"}, {"question_id": 1275, "answer_sql": "SELECT title FROM Paintings WHERE width_mm < 600 OR height_mm > 800;"}, {"question_id": 1276, "answer_sql": "SELECT DISTINCT location FROM Paintings WHERE year < 1885 OR year > 1930;"}, {"question_id": 1277, "answer_sql": "SELECT DISTINCT location FROM Paintings WHERE year < 1885 OR year > 1930;"}, {"question_id": 1278, "answer_sql": "SELECT paintingID FROM Paintings WHERE height_mm > 500 AND height_mm < 2000;"}, {"question_id": 1279, "answer_sql": "SELECT paintingID FROM Paintings WHERE height_mm > 500 AND width_mm < 2000;"}, {"question_id": 1280, "answer_sql": "SELECT DISTINCT location FROM paintings WHERE mediumOn IN ('panel', 'canvas');"}, {"question_id": 1281, "answer_sql": "SELECT DISTINCT location FROM Paintings WHERE mediumOn IN ('on panels', 'on canvas');"}, {"question_id": 1282, "answer_sql": "SELECT DISTINCT location FROM Paintings WHERE year < 1885 INTERSECT SELECT DISTINCT location FROM Paintings WHERE year > 1930;"}, {"question_id": 1283, "answer_sql": "SELECT DISTINCT location FROM Paintings WHERE year < 1885 INTERSECT SELECT DISTINCT location FROM Paintings WHERE year > 1930;"}, {"question_id": 1284, "answer_sql": "SELECT AVG(height_mm), AVG(width_mm) FROM Paintings WHERE medium = 'oil' AND location = 'place of gallery 241';"}, {"question_id": 1285, "answer_sql": "SELECT AVG(height_mm), AVG(width_mm) FROM Paintings WHERE medium = 'oil' AND location = 'gallery 241';"}, {"question_id": 1286, "answer_sql": "SELECT MAX(height_mm), paintingID FROM Paintings WHERE year < 1900 GROUP BY paintingID;"}, {"question_id": 1287, "answer_sql": "SELECT height_mm, paintingID FROM Paintings WHERE year < 1900 ORDER BY height_mm DESC LIMIT 1;"}, {"question_id": 1288, "answer_sql": "SELECT year, MAX(height_mm), MAX(width_mm) FROM Paintings GROUP BY year;"}, {"question_id": 1289, "answer_sql": "SELECT year, MAX(height_mm), MAX(width_mm) FROM paintings GROUP BY year;"}, {"question_id": 1290, "answer_sql": "SELECT Artists.fname, Artists.lname, AVG(Paintings.height_mm), AVG(Paintings.width_mm) FROM Artists INNER JOIN Paintings ON Artists.artistID = Paintings.painterID GROUP BY Artists.fname, Artists.lname ORDER BY Artists.fname, Artists.lname"}, {"question_id": 1291, "answer_sql": "SELECT AVG(Paintings.height_mm), AVG(Paintings.width_mm), Artists.fname, Artists.lname FROM Artists INNER JOIN Paintings ON Artists.artistID = Paintings.painterID GROUP BY Artists.fname, Artists.lname ORDER BY Artists.fname, Artists.lname"}, {"question_id": 1292, "answer_sql": "SELECT T1.fname , count(*) FROM Artists AS T1 JOIN Paintings AS T2 ON T1.artistID = T2.painterID GROUP BY T1.artistID HAVING count(*) >= 2"}, {"question_id": 1293, "answer_sql": "SELECT T1.fname, COUNT(*) FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID GROUP BY T1.fname HAVING COUNT(*) >= 2"}, {"question_id": 1294, "answer_sql": "SELECT T1.deathYear FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID GROUP BY T1.artistID HAVING COUNT(T2.paintingID) <= 3;"}, {"question_id": 1295, "answer_sql": "SELECT a.fname, a.lname, a.deathYear FROM Artists a INNER JOIN Paintings p ON a.artistID = p.painterID WHERE (SELECT COUNT(*) FROM Paintings WHERE painterID = a.artistID) < 4;"}, {"question_id": 1296, "answer_sql": "SELECT T1.deathYear FROM Artists AS T1 JOIN Sculptures AS T2 ON T1.artistID = T2.sculptorID GROUP BY T2.sculptorID ORDER BY COUNT(*) LIMIT 1;"}, {"question_id": 1297, "answer_sql": "SELECT T1.deathYear FROM Artists AS T1 JOIN Sculptures AS T2 ON T1.artistID = T2.sculptorID GROUP BY T2.sculptorID ORDER BY COUNT(*) ASC LIMIT 1;"}, {"question_id": 1298, "answer_sql": "SELECT paintingID, height_mm FROM Paintings WHERE (height_mm, width_mm) IN (SELECT MAX(height_mm), MAX(width_mm) FROM Paintings WHERE gallery = 240) AND gallery = 240;"}, {"question_id": 1299, "answer_sql": "SELECT height_mm, paintingID FROM Paintings WHERE location = 'Gallery 240' ORDER BY width_mm DESC LIMIT 1;"}, {"question_id": 1300, "answer_sql": "SELECT paintingID FROM Paintings WHERE year < (SELECT MIN(year) FROM Paintings WHERE gallery = 240)"}, {"question_id": 1301, "answer_sql": "SELECT paintingID FROM Paintings WHERE year < (SELECT MIN (year) FROM Paintings WHERE gallery = 240) GROUP BY paintingID;"}, {"question_id": 1302, "answer_sql": "SELECT paintingID FROM Paintings WHERE height_mm > (SELECT MAX(height_mm) FROM Paintings WHERE year > 1900);"}, {"question_id": 1303, "answer_sql": "SELECT paintingID FROM Paintings WHERE height_mm > (SELECT MAX(height_mm) FROM Paintings WHERE year > 1900);"}, {"question_id": 1304, "answer_sql": "SELECT T1.fname, T1.lname FROM Artists AS T1 JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T2.medium = oil GROUP BY T1.fname, T1.lname ORDER BY count(*) DESC LIMIT 3;"}, {"question_id": 1305, "answer_sql": "SELECT Artists.fname, Artists.lname, COUNT(*) as num_paintings FROM Artists INNER JOIN Paintings ON Artists.artistID = Paintings.painterID WHERE Paintings.medium = 'oil' GROUP BY Artists.fname, Artists.lname ORDER BY num_paintings DESC;"}, {"question_id": 1306, "answer_sql": "SELECT paintingID, location, title FROM Paintings WHERE medium = 'oil' ORDER BY year"}, {"question_id": 1307, "answer_sql": "SELECT paintingID, location, title FROM Paintings ORDER BY year;"}, {"question_id": 1308, "answer_sql": "SELECT year, location, title FROM Paintings WHERE height_mm > 1000 ORDER BY title;"}, {"question_id": 1309, "answer_sql": "SELECT year, location, title FROM Paintings WHERE height_mm > 1000 ORDER BY title"}, {"question_id": 1310, "answer_sql": "SELECT Artists.fname, Artists.lname FROM Artists INNER JOIN Paintings ON Artists.artistID = Paintings.painterID WHERE Artists.artistID NOT IN (SELECT Artists.artistID FROM Artists INNER JOIN Sculptures ON Artists.artistID = Sculptures.sculptorID)"}, {"question_id": 1311, "answer_sql": "SELECT fname, lname FROM Artists WHERE artistID NOT IN (SELECT sculptorID FROM Sculptures) INTERSECT SELECT fname, lname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings);"}, {"question_id": 1312, "answer_sql": "SELECT location FROM paintings WHERE year < 1885 AND mediumOn != 'canvas'"}, {"question_id": 1313, "answer_sql": "SELECT DISTINCT location FROM Paintings WHERE year < 1885 AND mediumOn != 'canvas';"}, {"question_id": 1314, "answer_sql": "SELECT count(*) FROM race;"}, {"question_id": 1315, "answer_sql": "SELECT count(*) FROM race;"}, {"question_id": 1316, "answer_sql": "SELECT Winning_driver, Winning_team FROM race ORDER BY Winning_team ASC;"}, {"question_id": 1317, "answer_sql": "SELECT Winning_driver, Winning_team FROM race ORDER BY Winning_team"}, {"question_id": 1318, "answer_sql": "SELECT T1.Winning_driver FROM race AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE T1.Pole_Position != 'Junior Strous'"}, {"question_id": 1319, "answer_sql": "SELECT T1.Winning_driver FROM race AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE T1.Pole_Position != 'Junior Strous'"}, {"question_id": 1320, "answer_sql": "SELECT Constructor FROM driver ORDER BY Age ASC;"}, {"question_id": 1321, "answer_sql": "SELECT DISTINCT Constructor FROM driver ORDER BY Age ASC;"}, {"question_id": 1322, "answer_sql": "SELECT DISTINCT Entrant FROM driver WHERE Age >= 20;"}, {"question_id": 1323, "answer_sql": "SELECT DISTINCT Entrant FROM driver WHERE Age >= 20;"}, {"question_id": 1324, "answer_sql": "SELECT MAX(Age) , MIN(Age) FROM driver;"}, {"question_id": 1325, "answer_sql": "SELECT MAX(Age) AS Maximum_Age, MIN(Age) AS Minimum_Age FROM driver;"}, {"question_id": 1326, "answer_sql": "SELECT COUNT(DISTINCT Engine) FROM driver WHERE Age > 30 OR Age < 20;"}, {"question_id": 1327, "answer_sql": "SELECT COUNT(DISTINCT Engine) FROM driver WHERE Age > 30 OR Age < 20;"}, {"question_id": 1328, "answer_sql": "SELECT Driver_Name FROM driver ORDER BY Driver_Name DESC"}, {"question_id": 1329, "answer_sql": "SELECT Driver_Name FROM driver ORDER BY Driver_Name DESC"}, {"question_id": 1330, "answer_sql": "SELECT T1.Driver_Name , T2.Race_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID"}, {"question_id": 1331, "answer_sql": "SELECT T1.Driver_Name , T2.Race_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID"}, {"question_id": 1332, "answer_sql": "SELECT T1.Driver_Name , COUNT(*) FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID GROUP BY T1.Driver_ID;"}, {"question_id": 1333, "answer_sql": "SELECT T1.Driver_Name, COUNT(*) FROM driver AS T1 INNER JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID GROUP BY T1.Driver_Name;"}, {"question_id": 1334, "answer_sql": "SELECT T1.Age FROM driver AS T1 INNER JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID GROUP BY T2.Driver_ID ORDER BY COUNT(*) DESC LIMIT 1"}, {"question_id": 1335, "answer_sql": "SELECT t1.driver_name, t1.age FROM driver AS t1 INNER JOIN race AS t2 ON t1.driver_id = t2.driver_id GROUP BY t2.driver_id ORDER BY count(*) DESC LIMIT 1"}, {"question_id": 1336, "answer_sql": "SELECT T1.Driver_Name, T1.Age FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID GROUP BY T2.Driver_ID HAVING COUNT(*) >= 2"}, {"question_id": 1337, "answer_sql": "SELECT T1.Driver_Name, T1.Age FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID GROUP BY T2.Driver_ID HAVING COUNT(*) >= 2"}, {"question_id": 1338, "answer_sql": "SELECT T2.Race_Name FROM driver AS T1 INNER JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T1.Age >= 26;"}, {"question_id": 1339, "answer_sql": "SELECT T2.Race_Name FROM driver AS T1 INNER JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T1.Age >= 26;"}, {"question_id": 1340, "answer_sql": "SELECT Driver_Name FROM driver WHERE Constructor != Bugatti ;"}, {"question_id": 1341, "answer_sql": "SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race WHERE Constructor = 'Bugatti');"}, {"question_id": 1342, "answer_sql": "SELECT Constructor , COUNT(*) FROM driver GROUP BY Constructor;"}, {"question_id": 1343, "answer_sql": "SELECT Constructor, COUNT(*) FROM driver GROUP BY Constructor;"}, {"question_id": 1344, "answer_sql": "SELECT Engine FROM driver GROUP BY Engine ORDER BY COUNT(*) DESC LIMIT 1;"}, {"question_id": 1345, "answer_sql": "SELECT Engine FROM car_road_race.driver GROUP BY Engine ORDER BY COUNT(*) DESC LIMIT 1"}, {"question_id": 1346, "answer_sql": "SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(*) >= 2;"}, {"question_id": 1347, "answer_sql": "SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(*) >= 2;"}, {"question_id": 1348, "answer_sql": "SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race)"}, {"question_id": 1349, "answer_sql": "SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race);"}, {"question_id": 1350, "answer_sql": "SELECT Constructor FROM driver WHERE Age < 20 INTERSECT SELECT Constructor FROM driver WHERE Age > 30"}, {"question_id": 1351, "answer_sql": "SELECT Constructor FROM driver WHERE Age < 20 INTERSECT SELECT Constructor FROM driver WHERE Age > 30"}, {"question_id": 1352, "answer_sql": "SELECT Winning_team FROM race GROUP BY Winning_team HAVING COUNT(*) > 1;"}, {"question_id": 1353, "answer_sql": "SELECT Winning_team FROM race GROUP BY Winning_team HAVING COUNT(*) > 1"}, {"question_id": 1354, "answer_sql": "SELECT T1.Driver_Name FROM driver AS T1 INNER JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T2.Pole_Position = 'James Hinchcliffe' INTERSECT SELECT T1.Driver_Name FROM driver AS T1 INNER JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T2.Pole_Position = 'Carl Skerlong'"}, {"question_id": 1355, "answer_sql": "SELECT T1.Driver_Name FROM driver AS T1 INNER JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T2.Pole_Position = 'James Hinchcliffe' INTERSECT SELECT T1.Driver_Name FROM driver AS T1 INNER JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T2.Pole_Position = 'Carl Skerlong'"}, {"question_id": 1356, "answer_sql": "SELECT DISTINCT d.Driver_Name FROM driver d LEFT JOIN race r ON d.Driver_ID = r.Driver_ID WHERE r.Pole_Position <> 'James Hinchcliffe' AND r.Pole_Position IS NOT NULL;"}, {"question_id": 1357, "answer_sql": "SELECT Driver_Name FROM driver WHERE Pole_Position != 'James Hinchcliffe'"}, {"question_id": 1358, "answer_sql": "SELECT COUNT(*) FROM languages;"}, {"question_id": 1359, "answer_sql": "SELECT COUNT(*) FROM languages;"}, {"question_id": 1360, "answer_sql": "SELECT name FROM languages ORDER BY name ASC;"}, {"question_id": 1361, "answer_sql": "SELECT name FROM languages ORDER BY name ASC;"}, {"question_id": 1362, "answer_sql": "SELECT name FROM languages WHERE name LIKE '%ish%';"}, {"question_id": 1363, "answer_sql": "SELECT name FROM languages WHERE name LIKE '%ish%';"}, {"question_id": 1364, "answer_sql": "SELECT name FROM countries ORDER BY overall_score DESC;"}, {"question_id": 1365, "answer_sql": "SELECT name FROM countries ORDER BY overall_score DESC;"}, {"question_id": 1366, "answer_sql": "SELECT AVG(justice_score) FROM countries;"}, {"question_id": 1367, "answer_sql": "SELECT AVG(justice_score) FROM countries;"}, {"question_id": 1368, "answer_sql": "SELECT MAX ( health_score ) , MIN ( health_score ) FROM countries WHERE name != 'Norway'"}, {"question_id": 1369, "answer_sql": "SELECT MAX ( health_score ) , MIN ( health_score ) FROM countries WHERE name != 'Norway';"}, {"question_id": 1370, "answer_sql": "SELECT COUNT(DISTINCT language_id) FROM official_languages;"}, {"question_id": 1371, "answer_sql": "SELECT COUNT(DISTINCT language_id) FROM official_languages;"}, {"question_id": 1372, "answer_sql": "SELECT name FROM countries ORDER BY education_score DESC;"}, {"question_id": 1373, "answer_sql": "SELECT name FROM countries ORDER BY education_score DESC;"}, {"question_id": 1374, "answer_sql": "SELECT name FROM countries ORDER BY politics_score DESC LIMIT 1;"}, {"question_id": 1375, "answer_sql": "SELECT name FROM countries ORDER BY politics_score DESC LIMIT 1;"}, {"question_id": 1376, "answer_sql": "SELECT T1.name, T3.name FROM languages AS T1 JOIN official_languages AS T2 ON T1.id = T2.language_id JOIN countries AS T3 ON T3.id = T2.country_id;"}, {"question_id": 1377, "answer_sql": "SELECT T1.name, T3.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id = T2.country_id JOIN languages AS T3 ON T2.language_id = T3.id;"}, {"question_id": 1378, "answer_sql": "SELECT l.name, COUNT(ol.country_id) as num_countries FROM languages l JOIN official_languages ol ON l.id = ol.language_id GROUP BY l.name;"}, {"question_id": 1379, "answer_sql": "SELECT l.name, COUNT(ol.country_id) as num_countries FROM languages l JOIN official_languages ol ON l.id = ol.language_id GROUP BY l.name;"}, {"question_id": 1380, "answer_sql": "SELECT languages.name FROM languages INNER JOIN official_languages ON languages.id = official_languages.language_id INNER JOIN countries ON official_languages.country_id = countries.id GROUP BY languages.name ORDER BY COUNT(*) DESC LIMIT 1;"}, {"question_id": 1381, "answer_sql": "SELECT l.name FROM languages l JOIN official_languages ol ON l.id = ol.language_id JOIN countries c ON ol.country_id = c.id GROUP BY l.name ORDER BY COUNT(*) DESC LIMIT 1;"}, {"question_id": 1382, "answer_sql": "SELECT t1.name FROM languages AS t1 JOIN official_languages AS t2 ON t1.id = t2.language_id GROUP BY t2.language_id HAVING COUNT(DISTINCT t2.country_id) >= 2;"}, {"question_id": 1383, "answer_sql": "SELECT T1.name FROM languages AS T1 JOIN official_languages AS T2 ON T1.id = T2.language_id GROUP BY T2.language_id HAVING COUNT(DISTINCT T2.country_id) > 1"}, {"question_id": 1384, "answer_sql": "SELECT AVG( overall_score ) FROM countries AS t1 INNER JOIN official_languages AS t2 ON t1.id = t2.country_id INNER JOIN languages AS t3 ON t2.language_id = t3.id WHERE t3.name = 'English';"}, {"question_id": 1385, "answer_sql": "SELECT AVG( overall_score ) FROM countries AS t1 INNER JOIN official_languages AS t2 ON t1.id = t2.country_id INNER JOIN languages AS t3 ON t2.language_id = t3.id WHERE t3.name = 'English';"}, {"question_id": 1386, "answer_sql": "SELECT l.name FROM official_languages ol INNER JOIN languages l ON ol.language_id = l.id INNER JOIN countries c ON ol.country_id = c.id ORDER BY c.overall_score DESC LIMIT 3;"}, {"question_id": 1387, "answer_sql": "SELECT t3.name FROM ( SELECT t1.country_id, COUNT(*) as num FROM official_languages t1 JOIN languages t2 ON t1.language_id = t2.id GROUP BY t1.country_id ORDER BY num DESC LIMIT 3 ) t3 JOIN official_languages t4 ON t3.country_id = t4.country_id JOIN languages t5 ON t4.language_id = t5.id ORDER BY t3.num DESC LIMIT 3"}, {"question_id": 1388, "answer_sql": "SELECT l.name, AVG(c.overall_score) as avg_score FROM languages l JOIN official_languages ol ON l.id = ol.language_id JOIN countries c ON c.id = ol.country_id GROUP BY l.name ORDER BY avg_score DESC;"}, {"question_id": 1389, "answer_sql": "SELECT t3.name FROM official_languages AS t1 JOIN languages AS t2 ON t1.language_id = t2.id JOIN countries AS t3 ON t3.id = t1.country_id GROUP BY t3.id ORDER BY AVG(t3.overall_score) DESC;"}, {"question_id": 1390, "answer_sql": "The country with the most official languages can be found by finding the country with the maximum number of associated languages. This can be achieved by using the COUNT function to count the number of associated languages for each country, and then using the MAX function to find the country with the most associated languages."}, {"question_id": 1391, "answer_sql": "SELECT t1.name FROM countries AS t1 JOIN official_languages AS t2 ON t1.id = t2.country_id GROUP BY t1.id ORDER BY COUNT(*) DESC LIMIT 1;"}, {"question_id": 1392, "answer_sql": "SELECT name FROM languages WHERE id NOT IN (SELECT language_id FROM official_languages);"}, {"question_id": 1393, "answer_sql": "SELECT name FROM languages WHERE id NOT IN (SELECT language_id FROM official_languages);"}, {"question_id": 1394, "answer_sql": "SELECT name FROM countries WHERE id NOT IN (SELECT country_id FROM official_languages);"}, {"question_id": 1395, "answer_sql": "SELECT name FROM countries WHERE id NOT IN (SELECT country_id FROM official_languages);"}, {"question_id": 1396, "answer_sql": "SELECT t3.name FROM official_languages AS t1 JOIN languages AS t3 ON t1.language_id = t3.id JOIN countries AS t2 ON t2.id = t1.country_id WHERE t2.overall_score > 95 INTERSECT SELECT t3.name FROM official_languages AS t1 JOIN languages AS t3 ON t1.language_id = t3.id JOIN countries AS t2 ON t2.id = t1.country_id WHERE t2.overall_score < 90"}, {"question_id": 1397, "answer_sql": "SELECT languages.name FROM languages INNER JOIN official_languages ON languages.id = official_languages.language_id INNER JOIN countries ON official_languages.country_id = countries.id WHERE (countries.overall_score > 95 OR countries.overall_score < 90)"}, {"question_id": 1398, "answer_sql": "SELECT DISTINCT country, town_city FROM Addresses;"}, {"question_id": 1399, "answer_sql": "SELECT T1.country, T1.town_city FROM Addresses AS T1 JOIN Properties AS T2 ON T1.address_id = T2.property_address_id"}, {"question_id": 1400, "answer_sql": "SELECT T1.county_state_province FROM Addresses AS T1 INNER JOIN Properties AS T2 ON T1.address_id = T2.property_address_id GROUP BY T1.county_state_province;"}, {"question_id": 1401, "answer_sql": "SELECT T1.county_state_province FROM Addresses AS T1 INNER JOIN Properties AS T2 ON T1.address_id = T2.property_address_id"}, {"question_id": 1402, "answer_sql": "SELECT feature_description FROM Features WHERE feature_name = 'rooftop';"}, {"question_id": 1403, "answer_sql": "SELECT feature_description FROM Features WHERE feature_name = 'rooftop';"}, {"question_id": 1404, "answer_sql": "SELECT T1.feature_name, T1.feature_description FROM Features AS T1 INNER JOIN Property_Features AS T2 ON T1.feature_id = T2.feature_id GROUP BY T2.feature_id ORDER BY COUNT(*) DESC LIMIT 1"}, {"question_id": 1405, "answer_sql": "SELECT T1.feature_name, T1.feature_description FROM Features AS T1 INNER JOIN Property_Features AS T2 ON T1.feature_id = T2.feature_id GROUP BY T2.feature_id ORDER BY COUNT(*) DESC LIMIT 1"}, {"question_id": 1406, "answer_sql": "SELECT MIN(room_count) FROM Properties;"}, {"question_id": 1407, "answer_sql": "SELECT MIN(room_count) FROM Properties;"}, {"question_id": 1408, "answer_sql": "SELECT COUNT(*) FROM Properties WHERE parking_lots = 1 OR garage_yn = 1;"}, {"question_id": 1409, "answer_sql": "SELECT COUNT(*) FROM Properties WHERE parking_lots = 1 OR garage_yn = 1;"}, {"question_id": 1410, "answer_sql": "SELECT T1.age_category_code FROM Users AS T1 INNER JOIN Ref_User_Categories AS T2 ON T1.user_category_code = T2.user_category_code WHERE T1.first_name LIKE '%Mother%' OR T1.last_name LIKE '%Mother%'"}, {"question_id": 1411, "answer_sql": "SELECT DISTINCT age_category_code FROM Users AS T1 INNER JOIN Ref_Age_Categories AS T2 ON T1.age_category_code = T2.age_category_code WHERE T2.age_category_description LIKE '%Mother%'"}, {"question_id": 1412, "answer_sql": "SELECT T1.first_name FROM Users AS T1 JOIN Properties AS T2 ON T1.user_id = T2.owner_user_id GROUP BY T1.first_name ORDER BY count(*) DESC LIMIT 1"}, {"question_id": 1413, "answer_sql": "SELECT T1.first_name FROM Users AS T1 JOIN Properties AS T2 ON T1.user_id = T2.owner_user_id GROUP BY T1.first_name ORDER BY count(*) DESC LIMIT 1"}, {"question_id": 1414, "answer_sql": "SELECT AVG(room_count) FROM Properties AS T1 INNER JOIN Property_Features AS T2 ON T1.property_id = T2.property_id INNER JOIN Features AS T3 ON T2.feature_id = T3.feature_id WHERE T3.feature_name = 'garden';"}, {"question_id": 1415, "answer_sql": "SELECT AVG(room_count) FROM Properties AS T1 INNER JOIN Property_Features AS T2 ON T1.property_id = T2.property_id INNER JOIN Features AS T3 ON T2.feature_id = T3.feature_id WHERE T3.feature_name = 'garden';"}, {"question_id": 1416, "answer_sql": "SELECT T3.town_city FROM Properties AS T1 INNER JOIN Property_Features AS T2 ON T1.property_id = T2.property_id INNER JOIN Addresses AS T3 ON T1.property_address_id = T3.address_id WHERE T2.feature_value = 'yes' AND T1.property_name LIKE '%swimming pool%';"}, {"question_id": 1417, "answer_sql": "SELECT T3.town_city FROM Properties AS T1 INNER JOIN Property_Photos AS T2 ON T1.property_id = T2.property_id INNER JOIN Addresses AS T3 ON T1.property_address_id = T3.address_id WHERE T2.photo_description = 'swimming pool' GROUP BY T3.town_city;"}, {"question_id": 1418, "answer_sql": "The lowest price requested by the vendor can be found by selecting the property_id and vendor_requested_price from the Properties table. The result will be ordered by vendor_requested_price and the first row will be the property with the lowest price."}, {"question_id": 1419, "answer_sql": "SELECT T1.property_id, T1.vendor_requested_price FROM Properties AS T1 INNER JOIN User_Searches AS T2 ON T1.property_id = T2.user_id ORDER BY T1.vendor_requested_price ASC LIMIT 1;"}, {"question_id": 1420, "answer_sql": "SELECT AVG(room_count) FROM Properties;"}, {"question_id": 1421, "answer_sql": "SELECT AVG(room_count) FROM Properties;"}, {"question_id": 1422, "answer_sql": "SELECT count(DISTINCT room_size) FROM Rooms;"}, {"question_id": 1423, "answer_sql": "SELECT COUNT(DISTINCT room_size) FROM Rooms;"}, {"question_id": 1424, "answer_sql": "SELECT T1.user_id, T2.search_string FROM Users AS T1 INNER JOIN User_Searches AS T2 ON T1.user_id = T2.user_id GROUP BY T1.user_id HAVING COUNT(*) >= 2"}, {"question_id": 1425, "answer_sql": "SELECT user_id, search_seq FROM User_Searches GROUP BY user_id HAVING COUNT(*) >= 2;"}, {"question_id": 1426, "answer_sql": "SELECT MAX(search_datetime) FROM User_Searches;"}, {"question_id": 1427, "answer_sql": "SELECT MAX(search_datetime) FROM User_Searches;"}, {"question_id": 1428, "answer_sql": "SELECT search_datetime, search_string FROM User_Searches ORDER BY search_string DESC"}, {"question_id": 1429, "answer_sql": "SELECT search_string , search_datetime FROM User_Searches ORDER BY search_string DESC"}, {"question_id": 1430, "answer_sql": "SELECT T1.zip_postcode FROM Addresses AS T1 INNER JOIN Properties AS T2 ON T1.address_id = T2.property_address_id GROUP BY T2.property_address_id HAVING COUNT(T2.property_id) <= 2;"}, {"question_id": 1431, "answer_sql": "SELECT t1.zip_postcode FROM Properties AS t3 INNER JOIN Addresses AS t1 ON t3.property_address_id = t1.address_id INNER JOIN Users AS t2 ON t2.user_id = t3.owner_user_id WHERE t3.property_id NOT IN ( SELECT t4.property_id FROM Properties AS t4 INNER JOIN User_Property_History AS t1 ON t4.property_id = t1.property_id INNER JOIN Users AS t2 ON t1.user_id = t2.user_id GROUP BY t4.property_id HAVING COUNT(*) <= 2 ) GROUP BY t1.zip_postcode;"}, {"question_id": 1432, "answer_sql": "SELECT T1.user_category_code, T1.user_id FROM Users AS T1 INNER JOIN User_Searches AS T2 ON T1.user_id = T2.user_id GROUP BY T2.user_id HAVING COUNT(*) = 1"}, {"question_id": 1433, "answer_sql": "SELECT user_id, user_category_code FROM Users WHERE user_id NOT IN ( SELECT user_id FROM User_Searches GROUP BY user_id HAVING COUNT(*) > 1 ) ORDER BY user_id;"}, {"question_id": 1434, "answer_sql": "SELECT T2.age_category_code FROM User_Searches AS T1 INNER JOIN Users AS T2 ON T1.user_id = T2.user_id WHERE T1.search_datetime = ( SELECT MIN(search_datetime) FROM User_Searches );"}, {"question_id": 1435, "answer_sql": "SELECT T1.age_category_code FROM Users AS T1 INNER JOIN User_Searches AS T2 ON T1.user_id = T2.user_id ORDER BY T2.search_datetime LIMIT 1;"}, {"question_id": 1436, "answer_sql": "SELECT login_name FROM Users WHERE age_category_code = 'Senior' ORDER BY first_name"}, {"question_id": 1437, "answer_sql": "SELECT login_name FROM Users WHERE age_category_code = 'Senior' ORDER BY first_name"}, {"question_id": 1438, "answer_sql": "SELECT COUNT(*) FROM User_Searches WHERE user_id IN ( SELECT user_id FROM Users WHERE is_buyer = 1 );"}, {"question_id": 1439, "answer_sql": "SELECT COUNT(*) FROM User_Searches WHERE user_id IN ( SELECT user_id FROM Users WHERE is_buyer = 1 );"}, {"question_id": 1440, "answer_sql": "SELECT date_registered FROM Users WHERE login_name = 'ratione';"}, {"question_id": 1441, "answer_sql": "SELECT T1.date_registered FROM Users AS T1 INNER JOIN Users AS T2 ON T1.login_name = T2.login_name WHERE T2.login_name = ratione"}, {"question_id": 1442, "answer_sql": "SELECT first_name , middle_name , last_name , login_name FROM Users WHERE is_seller = 1;"}, {"question_id": 1443, "answer_sql": "SELECT first_name, middle_name, last_name, login_name FROM Users WHERE is_seller = '1'"}, {"question_id": 1444, "answer_sql": "SELECT T1.line_1_number_building, T1.line_2_number_street, T1.town_city FROM Addresses AS T1 INNER JOIN Users AS T2 ON T1.address_id = T2.user_address_id WHERE T2.age_category_code = 'Senior';"}, {"question_id": 1445, "answer_sql": "SELECT T1.line_1_number_building, T1.line_2_number_street, T1.line_3_area_locality FROM Addresses AS T1 INNER JOIN Users AS T2 ON T1.address_id = T2.user_address_id WHERE T2.age_category_code = 'Senior';"}, {"question_id": 1446, "answer_sql": "SELECT COUNT(T1.property_id) FROM Properties AS T1 INNER JOIN Property_Features AS T2 ON T1.property_id = T2.property_id GROUP BY T1.property_id HAVING COUNT(T1.property_id) >= 2;"}, {"question_id": 1447, "answer_sql": "SELECT COUNT(T1.property_id) FROM Properties AS T1 INNER JOIN Property_Features AS T2 ON T1.property_id = T2.property_id GROUP BY T1.property_id HAVING COUNT(T1.property_id) >= 2;"}, {"question_id": 1448, "answer_sql": "SELECT T1.property_id, COUNT(T1.photo_filename) FROM Property_Photos AS T1 INNER JOIN Properties AS T2 ON T1.property_id = T2.property_id GROUP BY T1.property_id;"}, {"question_id": 1449, "answer_sql": "SELECT property_id , COUNT(*) FROM Property_Photos GROUP BY property_id;"}, {"question_id": 1450, "answer_sql": "SELECT T1.user_id , count(*) FROM Users AS T1 JOIN Property_Photos AS T2 ON T1.user_id = T2.property_id GROUP BY T1.user_id;"}, {"question_id": 1451, "answer_sql": "SELECT T1.user_id , COUNT(*) FROM Users AS T1 JOIN Property_Photos AS T2 ON T1.user_id = T2.property_id GROUP BY T1.user_id;"}, {"question_id": 1452, "answer_sql": "SELECT SUM(price_max) FROM Properties AS T1 INNER JOIN Users AS T2 ON T1.owner_user_id = T2.user_id WHERE T2.user_category_code IN ('Single Mother', 'Student');"}, {"question_id": 1453, "answer_sql": "SELECT SUM(price_max) FROM Properties AS T1 INNER JOIN Users AS T2 ON T1.owner_user_id = T2.user_id WHERE T2.user_category_code IN ('Student', 'Mother');"}, {"question_id": 1454, "answer_sql": "SELECT `datestamp` , T1.property_name FROM Properties AS T1 JOIN User_Property_History AS T2 ON T1.property_id = T2.property_id ORDER BY `datestamp`"}, {"question_id": 1455, "answer_sql": "```sql SELECT T1.datestamp , T2.property_name FROM User_Property_History AS T1 JOIN Properties AS T2 ON T1.property_id = T2.property_id ORDER BY T1.datestamp"}, {"question_id": 1456, "answer_sql": "SELECT T1.property_type_description, T1.property_type_code FROM Ref_Property_Types AS T1 INNER JOIN Properties AS T2 ON T1.property_type_code = T2.property_type_code GROUP BY T1.property_type_code ORDER BY COUNT(*) DESC LIMIT 1"}, {"question_id": 1457, "answer_sql": "SELECT T2.property_type_description, COUNT(*) AS count FROM Properties AS T1 INNER JOIN Ref_Property_Types AS T2 ON T1.property_type_code = T2.property_type_code GROUP BY T2.property_type_code ORDER BY count DESC LIMIT 1;"}, {"question_id": 1458, "answer_sql": "SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code = 'Over 60';"}, {"question_id": 1459, "answer_sql": "SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code = 'Over 60';"}, {"question_id": 1460, "answer_sql": "SELECT room_size , COUNT(*) FROM Rooms GROUP BY room_size;"}, {"question_id": 1461, "answer_sql": "SELECT room_size , COUNT(*) FROM Rooms GROUP BY room_size;"}, {"question_id": 1462, "answer_sql": "SELECT T1.country FROM Addresses AS T1 INNER JOIN Users AS T2 ON T1.address_id = T2.user_address_id WHERE T2.first_name = 'Robbie'"}, {"question_id": 1463, "answer_sql": "SELECT T1.country FROM Addresses AS T1 INNER JOIN Users AS T2 ON T1.address_id = T2.user_address_id WHERE T2.first_name = 'Robbie'"}, {"question_id": 1464, "answer_sql": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Users AS T1 INNER JOIN Properties AS T2 ON T1.user_id = T2.owner_user_id WHERE T2.property_address_id = T2.property_address_id;"}, {"question_id": 1465, "answer_sql": "SELECT T1.first_name, T1.last_name FROM Users AS T1 INNER JOIN Properties AS T2 ON T1.user_id = T2.owner_user_id INNER JOIN Addresses AS T3 ON T2.property_address_id = T3.address_id;"}, {"question_id": 1466, "answer_sql": "SELECT DISTINCT t2.search_string FROM Users AS t1 INNER JOIN User_Searches AS t2 ON t1.user_id = t2.user_id WHERE t1.user_id NOT IN ( SELECT DISTINCT t3.owner_user_id FROM Properties AS t3 );"}, {"question_id": 1467, "answer_sql": "SELECT DISTINCT search_string FROM User_Searches WHERE user_id NOT IN ( SELECT DISTINCT T1.user_id FROM Users AS T1 JOIN User_Property_History AS T2 ON T1.user_id = T2.user_id );"}, {"question_id": 1468, "answer_sql": "SELECT T1.last_name , T1.user_id FROM Users AS T1 INNER JOIN User_Property_History AS T2 ON T1.user_id = T2.user_id INNER JOIN User_Searches AS T3 ON T1.user_id = T3.user_id GROUP BY T1.user_id HAVING COUNT(*) >= 2 INTERSECT SELECT T1.last_name , T1.user_id FROM Users AS T1 INNER JOIN User_Property_History AS T2 ON T1.user_id = T2.user_id INNER JOIN User_Searches AS T3 ON T1.user_id = T3.user_id GROUP BY T1.user_id HAVING COUNT(*) <= 2"}, {"question_id": 1469, "answer_sql": "SELECT T2.last_name , T2.user_id FROM User_Searches AS T1 INNER JOIN Users AS T2 ON T1.user_id = T2.user_id INNER JOIN Properties AS T3 ON T2.user_id = T3.owner_user_id GROUP BY T2.user_id HAVING COUNT(*) <= 2;"}, {"question_id": 1470, "answer_sql": "SELECT COUNT(*) FROM bike WHERE weight > 780;"}, {"question_id": 1471, "answer_sql": "SELECT product_name, weight FROM bike ORDER BY price ASC;"}, {"question_id": 1472, "answer_sql": "SELECT heat, name, nation FROM cyclist;"}, {"question_id": 1473, "answer_sql": "SELECT MAX(weight) AS max_weight, MIN(weight) AS min_weight FROM bike;"}, {"question_id": 1474, "answer_sql": "SELECT AVG(price) FROM bike WHERE material = 'Carbon CC';"}, {"question_id": 1475, "answer_sql": "SELECT name, result FROM cyclist WHERE nation != 'Russia';"}, {"question_id": 1476, "answer_sql": "SELECT DISTINCT T1.id, T1.product_name FROM bike AS T1 INNER JOIN cyclists_own_bikes AS T2 ON T1.id = T2.bike_id WHERE T2.purchase_year > 2015;"}, {"question_id": 1477, "answer_sql": "SELECT T1.id, T1.product_name FROM bike AS T1 INNER JOIN cyclists_own_bikes AS T2 ON T1.id = T2.bike_id GROUP BY T2.bike_id HAVING COUNT(*) >= 4;"}, {"question_id": 1478, "answer_sql": "The cyclist who owns the most bikes is the one with the highest result."}, {"question_id": 1479, "answer_sql": "SELECT DISTINCT T3.product_name FROM cyclists_own_bikes AS T1 INNER JOIN cyclist AS T2 ON T1.cyclist_id = T2.id INNER JOIN bike AS T3 ON T1.bike_id = T3.id WHERE T2.nation = 'Russia' OR T2.nation = 'Great Britain';"}, {"question_id": 1480, "answer_sql": "SELECT COUNT(DISTINCT heat) FROM cyclist;"}, {"question_id": 1481, "answer_sql": "SELECT COUNT(*) FROM cyclist WHERE id NOT IN (SELECT cyclist_id FROM cyclists_own_bikes WHERE purchase_year >= 2015)"}, {"question_id": 1482, "answer_sql": "SELECT DISTINCT T3.product_name FROM cyclists_own_bikes AS T1 INNER JOIN cyclist AS T2 ON T1.cyclist_id = T2.id INNER JOIN bike AS T3 ON T1.bike_id = T3.id WHERE T2.result > 4.21558;"}, {"question_id": 1483, "answer_sql": "SELECT T3.product_name, T3.price FROM cyclists_own_bikes AS T1 INNER JOIN cyclist AS T2 ON T1.cyclist_id = T2.id INNER JOIN bike AS T3 ON T1.bike_id = T3.id WHERE T2.name = 'Bradley Wiggins' AND T2.name = 'Antonio Tauler'"}, {"question_id": 1484, "answer_sql": "SELECT name, nation, result FROM cyclist WHERE id NOT IN (SELECT cyclist_id FROM cyclists_own_bikes);"}, {"question_id": 1485, "answer_sql": "SELECT product_name FROM bike WHERE material LIKE '%fiber%';"}, {"question_id": 1486, "answer_sql": "SELECT cyclist_id, COUNT(*) as bike_count FROM cyclists_own_bikes GROUP BY cyclist_id ORDER BY cyclist_id"}, {"question_id": 1487, "answer_sql": "SELECT T1.Flavor, T1.Price FROM goods AS T1 INNER JOIN items AS T2 ON T1.Id = T2.Item WHERE T1.Food = 'cake' ORDER BY T1.Price DESC LIMIT 1;"}, {"question_id": 1488, "answer_sql": "SELECT T1.Id, T1.Flavor FROM goods AS T1 INNER JOIN items AS T2 ON T1.Id = T2.Item WHERE T1.Food = 'Cake' ORDER BY T1.Price DESC LIMIT 1;"}, {"question_id": 1489, "answer_sql": "SELECT T1.Flavor, T1.Price FROM goods AS T1 INNER JOIN items AS T2 ON T1.Id = T2.Item WHERE T1.Food = 'cookies' AND T1.Price = ( SELECT MIN(Price) FROM goods WHERE Food = 'cookies' );"}, {"question_id": 1490, "answer_sql": "SELECT T1.Id, T1.Flavor FROM goods AS T1 INNER JOIN items AS T2 ON T1.Id = T2.Item WHERE T1.Food = 'cookies' ORDER BY T1.Price ASC LIMIT 1;"}, {"question_id": 1491, "answer_sql": "SELECT T1.Id FROM goods AS T1 INNER JOIN items AS T2 ON T1.Id = T2.Item WHERE T1.Flavor = 'apple';"}, {"question_id": 1492, "answer_sql": "SELECT T1.Id FROM goods AS T1 INNER JOIN items AS T2 ON T1.Id = T2.Item WHERE T1.Flavor = 'apple';"}, {"question_id": 1493, "answer_sql": "SELECT Id FROM goods WHERE Price < 3;"}, {"question_id": 1494, "answer_sql": "SELECT Id FROM goods WHERE Price < 3;"}, {"question_id": 1495, "answer_sql": "SELECT DISTINCT T1.Id FROM customers AS T1 JOIN receipts AS T2 ON T1.Id = T2.CustomerId JOIN items AS T3 ON T2.Receipt = T3.Receipt WHERE T3.Item = (SELECT Id FROM goods WHERE Flavor = 'lemon' AND Food = 'cake')"}, {"question_id": 1496, "answer_sql": "SELECT DISTINCT T3.Id FROM items AS T1 INNER JOIN goods AS T2 ON T1.Item = T2.Id INNER JOIN receipts AS T3 ON T3.ReceiptNumber = T1.Receipt INNER JOIN customers AS T4 ON T4.Id = T3.CustomerId WHERE T2.Flavor = 'lemon';"}, {"question_id": 1497, "answer_sql": "SELECT T1.Food, COUNT(*) FROM goods AS T1 INNER JOIN items AS T2 ON T1.Id = T2.Item GROUP BY T1.Food;"}, {"question_id": 1498, "answer_sql": "SELECT T1.Food, COUNT(*) FROM goods AS T1 INNER JOIN items AS T2 ON T1.Id = T2.Item GROUP BY T1.Food;"}, {"question_id": 1499, "answer_sql": "SELECT T1.Id FROM customers AS T1 JOIN receipts AS T2 ON T1.Id = T2.CustomerId JOIN items AS T3 ON T2.Receipt = T3.Receipt WHERE T3.Receipt >= 15 GROUP BY T1.Id HAVING COUNT(*) >= 15;"}, {"question_id": 1500, "answer_sql": "SELECT T2.CustomerId FROM receipts AS T1 INNER JOIN customers AS T2 ON T1.CustomerId = T2.Id GROUP BY T2.CustomerId HAVING COUNT(*) >= 15;"}, {"question_id": 1501, "answer_sql": "SELECT T1.LastName FROM customers AS T1 INNER JOIN receipts AS T2 ON T1.Id = T2.CustomerId INNER JOIN items AS T3 ON T2.Receipt = T3.Receipt INNER JOIN goods AS T4 ON T3.Item = T4.Id GROUP BY T1.Id HAVING COUNT(T2.Receipt) > 10;"}, {"question_id": 1502, "answer_sql": "SELECT T1.LastName FROM customers AS T1 INNER JOIN receipts AS T2 ON T1.Id = T2.CustomerId GROUP BY T1.Id HAVING COUNT(*) > 10;"}, {"question_id": 1503, "answer_sql": "SELECT COUNT(DISTINCT Flavor) FROM goods WHERE Food = 'Cake';"}, {"question_id": 1504, "answer_sql": "SELECT COUNT(DISTINCT Flavor) FROM goods WHERE Food = 'cake';"}, {"question_id": 1505, "answer_sql": "SELECT DISTINCT T1.Flavor FROM goods AS T1 INNER JOIN items AS T2 ON T1.Id = T2.Item WHERE T1.Food = 'Croissant';"}, {"question_id": 1506, "answer_sql": "SELECT T1.Flavor FROM goods AS T1 INNER JOIN items AS T2 ON T1.Id = T2.Item WHERE T2.Item = 'Croissant';"}, {"question_id": 1507, "answer_sql": "SELECT DISTINCT T1.Item FROM items AS T1 INNER JOIN receipts AS T2 ON T2.Receipt = T1.Receipt WHERE T2.CustomerId = 15;"}, {"question_id": 1508, "answer_sql": "SELECT DISTINCT T1.Item FROM items AS T1 INNER JOIN receipts AS T2 ON T2.Receipt = T1.Receipt WHERE T2.CustomerId = 15;"}, {"question_id": 1509, "answer_sql": "SELECT T1.Food, AVG(T1.Price) AS AveragePrice, MAX(T1.Price) AS MaxPrice, MIN(T1.Price) AS MinPrice FROM goods AS T1 INNER JOIN items AS T2 ON T1.Id = T2.Item GROUP BY T1.Food;"}, {"question_id": 1510, "answer_sql": "SELECT g.Food, AVG(g.Price) AS AveragePrice, MIN(g.Price) AS MinPrice, MAX(g.Price) AS MaxPrice FROM goods g GROUP BY g.Food;"}, {"question_id": 1511, "answer_sql": "The output requirement is a single SQL query. The query will look like this: ```sql SELECT T1.ReceiptNumber FROM receipts AS T1 INNER JOIN items AS T2 ON T1.Receipt = T2.Receipt WHERE T2.Item = 'Cake' INTERSECT SELECT T1.ReceiptNumber FROM receipts AS T1 INNER JOIN items AS T2 ON T1.Receipt = T2.Receipt WHERE T2.Item = 'Cookie'"}, {"question_id": 1512, "answer_sql": "SELECT T1.ReceiptNumber FROM receipts AS T1 INNER JOIN items AS T2 ON T1.Receipt = T2.Receipt WHERE T2.Item = 'Cake' INTERSECT SELECT T1.ReceiptNumber FROM receipts AS T1 INNER JOIN items AS T2 ON T1.Receipt = T2.Receipt WHERE T2.Item = 'Cookie';"}, {"question_id": 1513, "answer_sql": "SELECT T3.ReceiptNumber FROM customers AS T1 INNER JOIN receipts AS T2 ON T1.Id = T2.CustomerId INNER JOIN items AS T3 ON T2.Receipt = T3.Receipt INNER JOIN goods AS T4 ON T3.Item = T4.Id WHERE T1.LastName = 'LOGAN' AND T4.Flavor = 'Croissant';"}, {"question_id": 1514, "answer_sql": "SELECT T3.ReceiptNumber FROM customers AS T1 INNER JOIN receipts AS T2 ON T1.Id = T2.CustomerId INNER JOIN items AS T3 ON T2.Receipt = T3.Receipt INNER JOIN goods AS T4 ON T3.Item = T4.Id WHERE T1.LastName = 'Logan' AND T4.Flavor = 'Croissant';"}, {"question_id": 1515, "answer_sql": "SELECT T1.ReceiptNumber, T1.Date FROM receipts AS T1 INNER JOIN items AS T2 ON T1.Receipt = T2.Receipt INNER JOIN goods AS T3 ON T2.Item = T3.Id ORDER BY T3.Price DESC LIMIT 1;"}, {"question_id": 1516, "answer_sql": "SELECT T1.ReceiptNumber, T1.Date FROM receipts AS T1 INNER JOIN items AS T2 ON T1.Receipt = T2.Receipt INNER JOIN goods AS T3 ON T2.Item = T3.Id ORDER BY T3.Price DESC LIMIT 1;"}, {"question_id": 1517, "answer_sql": "The least number of times an item was bought can be determined by the number of times it was ordered. The least number of times can be found by finding the item with the least number of occurrences."}, {"question_id": 1518, "answer_sql": "SELECT T1.Item FROM items AS T1 JOIN receipts AS T2 ON T1.Receipt = T2.ReceiptNumber GROUP BY T1.Receipt ORDER BY COUNT(*) ASC LIMIT 1;"}, {"question_id": 1519, "answer_sql": "SELECT Food, COUNT(*) FROM goods GROUP BY Food;"}, {"question_id": 1520, "answer_sql": "SELECT goods.food, COUNT(*) FROM goods GROUP BY goods.food;"}, {"question_id": 1521, "answer_sql": "SELECT T2.Food, AVG(T1.Price) FROM goods AS T1 INNER JOIN items AS T2 ON T1.Id = T2.Item GROUP BY T2.Food;"}, {"question_id": 1522, "answer_sql": "SELECT T2.Food, AVG(T1.Price) FROM goods AS T1 INNER JOIN items AS T2 ON T1.Id = T2.Item GROUP BY T2.Food;"}, {"question_id": 1523, "answer_sql": "SELECT T1.Id FROM goods AS T1 INNER JOIN items AS T2 ON T1.Id = T2.Item WHERE T1.Flavor = 'Apricot' AND T1.Price < 5;"}, {"question_id": 1524, "answer_sql": "SELECT Id FROM goods WHERE Flavor = 'Apricot' AND Price < 5;"}, {"question_id": 1525, "answer_sql": "SELECT T1.Flavor FROM goods AS T1 INNER JOIN items AS T2 ON T1.Id = T2.Item WHERE T1.Food = 'Cake' AND T1.Price > 10;"}, {"question_id": 1526, "answer_sql": "SELECT T1.Flavor FROM goods AS T1 INNER JOIN items AS T2 ON T1.Id = T2.Item WHERE T1.Food = 'Cake' AND T1.Price > 10;"}, {"question_id": 1527, "answer_sql": "SELECT DISTINCT Id, Price FROM goods WHERE Price < (SELECT AVG(Price) FROM goods);"}, {"question_id": 1528, "answer_sql": "SELECT DISTINCT T1.Id, T1.Price FROM goods AS T1 WHERE T1.Price < (SELECT AVG(Price) FROM goods);"}, {"question_id": 1529, "answer_sql": "SELECT DISTINCT T1.Id FROM goods AS T1 INNER JOIN items AS T2 ON T1.Id = T2.Item WHERE T1.Price < (SELECT Price FROM goods WHERE Flavor = 'Tart');"}, {"question_id": 1530, "answer_sql": "SELECT DISTINCT Id FROM goods WHERE Price < (SELECT min(Price) FROM goods WHERE Food = 'Tart');"}, {"question_id": 1531, "answer_sql": "SELECT DISTINCT T3.ReceiptNumber FROM items AS T1 INNER JOIN goods AS T2 ON T1.Item = T2.Id INNER JOIN receipts AS T3 ON T3.ReceiptNumber = T1.Receipt WHERE T2.Price > 13;"}, {"question_id": 1532, "answer_sql": "SELECT DISTINCT T3.ReceiptNumber FROM items AS T1 INNER JOIN goods AS T2 ON T1.Item = T2.Id INNER JOIN receipts AS T3 ON T3.ReceiptNumber = T1.Receipt WHERE T2.Price > 13;"}, {"question_id": 1533, "answer_sql": "SELECT T3.Date FROM receipts AS T1 INNER JOIN items AS T2 ON T1.Receipt = T2.Receipt INNER JOIN goods AS T3 ON T2.Item = T3.Id WHERE T3.Price > 15;"}, {"question_id": 1534, "answer_sql": "SELECT T3.Date FROM customers AS T1 INNER JOIN receipts AS T2 ON T1.Id = T2.CustomerId INNER JOIN items AS T3 ON T2.Receipt = T3.Receipt INNER JOIN goods AS T4 ON T4.Id = T3.Item WHERE T4.Price > 15;"}, {"question_id": 1535, "answer_sql": "SELECT DISTINCT Id FROM goods WHERE Id LIKE '%APP%';"}, {"question_id": 1536, "answer_sql": "[SQL query]"}, {"question_id": 1537, "answer_sql": "SELECT T1.Id, T1.Price FROM goods AS T1 INNER JOIN items AS T2 ON T1.Id = T2.Item WHERE T2.Item = '70';"}, {"question_id": 1538, "answer_sql": "SELECT Id, Price FROM goods WHERE Id = '70';"}, {"question_id": 1539, "answer_sql": "SELECT LastName FROM customers ORDER BY LastName"}, {"question_id": 1540, "answer_sql": "SELECT LastName FROM customers ORDER BY LastName ASC;"}, {"question_id": 1541, "answer_sql": "SELECT DISTINCT Item FROM items ORDER BY Ordinal;"}, {"question_id": 1542, "answer_sql": "SELECT DISTINCT Item FROM items;"}, {"question_id": 1543, "answer_sql": "SELECT T1.ReceiptNumber FROM receipts AS T1 INNER JOIN items AS T2 ON T1.Receipt = T2.Receipt INNER JOIN goods AS T3 ON T2.Item = T3.Id WHERE T3.Flavor = 'apple' OR T1.CustomerId = 12;"}, {"question_id": 1544, "answer_sql": "SELECT T1.ReceiptNumber FROM receipts AS T1 INNER JOIN items AS T2 ON T1.Receipt = T2.Receipt INNER JOIN goods AS T3 ON T2.Item = T3.Id WHERE T3.Flavor = 'apple' OR T1.CustomerId = 12;"}, {"question_id": 1545, "answer_sql": "SELECT ReceiptNumber, Date FROM receipts WHERE Date = '2022-08-01';"}, {"question_id": 1546, "answer_sql": "SELECT ReceiptNumber, Date FROM receipts WHERE Date = (SELECT MAX(Date) FROM receipts);"}, {"question_id": 1547, "answer_sql": "SELECT * FROM receipts r WHERE r.Date = (SELECT MIN(Date) FROM receipts) OR (SELECT Price FROM goods WHERE Id = (SELECT Item FROM items WHERE Receipt = r.ReceiptNumber)) > 10;"}, {"question_id": 1548, "answer_sql": "SELECT ReceiptNumber FROM receipts WHERE Date = (SELECT MIN(Date) FROM receipts) OR CustomerId IN (SELECT Id FROM goods WHERE Price > 10);"}, {"question_id": 1549, "answer_sql": "SELECT Id FROM goods WHERE Flavor = 'Cookie' AND Food = 'Cake' AND Price BETWEEN 3 AND 7;"}, {"question_id": 1550, "answer_sql": "SELECT T1.Id FROM goods AS T1 INNER JOIN items AS T2 ON T1.Id = T2.Item WHERE T1.Price BETWEEN 3 AND 7 AND T1.Food IN ('Cake', 'Cookie');"}, {"question_id": 1551, "answer_sql": "The first step is to join the receipts, customers, and items tables. The join operation will be based on the foreign key relationships. The earliest date is found by ordering by the date and taking the first row."}, {"question_id": 1552, "answer_sql": "SELECT T1.FirstName, T1.LastName FROM customers AS T1 JOIN receipts AS T2 ON T1.Id = T2.CustomerId WHERE T2.Date = (SELECT MIN(Date) FROM receipts);"}, {"question_id": 1553, "answer_sql": "SELECT AVG(Price) FROM goods WHERE Flavor = 'blackberry' OR Flavor = 'blueberry';"}, {"question_id": 1554, "answer_sql": "SELECT AVG(Price) FROM goods WHERE Flavor = 'blackberry' OR Flavor = 'blueberry';"}, {"question_id": 1555, "answer_sql": "SELECT MIN(Price) FROM goods WHERE Flavor = 'Cheese';"}, {"question_id": 1556, "answer_sql": "SELECT T1.Flavor, T1.Price FROM goods AS T1 INNER JOIN items AS T2 ON T1.Id = T2.Item WHERE T1.Flavor = 'Cheese' ORDER BY T1.Price ASC LIMIT 1;"}, {"question_id": 1557, "answer_sql": "SELECT g.Flavor, MAX(g.Price) AS HighestPrice, MIN(g.Price) AS LowestPrice, AVG(g.Price) AS AveragePrice FROM goods g GROUP BY g.Flavor ORDER BY HighestPrice DESC;"}, {"question_id": 1558, "answer_sql": "SELECT g.Flavor, MAX(g.Price) as MaxPrice, MIN(g.Price) as MinPrice, AVG(g.Price) as AveragePrice FROM goods g GROUP BY g.Flavor ORDER BY g.Flavor;"}, {"question_id": 1559, "answer_sql": "SELECT min(Price) , max(Price) , Food FROM goods GROUP BY Food ORDER BY Food ASC;"}, {"question_id": 1560, "answer_sql": "SELECT Food, MIN(Price) AS MinPrice, MAX(Price) AS MaxPrice FROM goods GROUP BY Food ORDER BY Food;"}, {"question_id": 1561, "answer_sql": "SELECT Date FROM receipts GROUP BY Date ORDER BY COUNT(ReceiptNumber) DESC LIMIT 3;"}, {"question_id": 1562, "answer_sql": "SELECT Date FROM receipts GROUP BY Date ORDER BY COUNT(ReceiptNumber) DESC LIMIT 3;"}, {"question_id": 1563, "answer_sql": "SELECT T1.FirstName, T1.LastName, COUNT(*) FROM customers AS T1 JOIN receipts AS T2 ON T1.Id = T2.CustomerId JOIN items AS T3 ON T2.Receipt = T3.Receipt WHERE T3.Item = '1' GROUP BY T1.Id ORDER BY COUNT(*) DESC LIMIT 1;"}, {"question_id": 1564, "answer_sql": "SELECT T2.CustomerId, COUNT(*) FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Receipt = T2.ReceiptNumber GROUP BY T2.CustomerId ORDER BY COUNT(*) DESC LIMIT 1;"}, {"question_id": 1565, "answer_sql": "SELECT Date, COUNT(DISTINCT CustomerId) FROM receipts GROUP BY Date;"}, {"question_id": 1566, "answer_sql": "SELECT Date, COUNT(*) FROM receipts GROUP BY Date;"}, {"question_id": 1567, "answer_sql": "SELECT DISTINCT T1.FirstName, T1.LastName FROM customers AS T1 INNER JOIN receipts AS T2 ON T1.Id = T2.CustomerId INNER JOIN items AS T3 ON T2.Receipt = T3.Receipt INNER JOIN goods AS T4 ON T3.Item = T4.Id WHERE T4.Flavor = 'Tart' AND T4.Food = 'Apple';"}, {"question_id": 1568, "answer_sql": "SELECT T1.FirstName, T1.LastName FROM customers AS T1 INNER JOIN receipts AS T2 ON T1.Id = T2.CustomerId INNER JOIN items AS T3 ON T2.Receipt = T3.Receipt INNER JOIN goods AS T4 ON T3.Item = T4.Id WHERE T4.Flavor = 'apple' AND T4.Food = 'Tart';"}, {"question_id": 1569, "answer_sql": "SELECT Id FROM goods WHERE Price < (SELECT min(Price) FROM goods WHERE Food = 'Croissant') AND Food = 'Cookie';"}, {"question_id": 1570, "answer_sql": "SELECT Id FROM goods WHERE Price < (SELECT MAX(Price) FROM goods WHERE Food = 'Croissant');"}, {"question_id": 1571, "answer_sql": "SELECT T1.Id FROM goods AS T1 INNER JOIN items AS T2 ON T1.Id = T2.Item WHERE T1.Flavor = 'Cake' AND T1.Price >= ( SELECT AVG(Price) FROM goods WHERE Food = 'Tart' );"}, {"question_id": 1572, "answer_sql": "SELECT T1.Id FROM goods AS T1 INNER JOIN items AS T2 ON T1.Id = T2.Item WHERE T1.Price >= ( SELECT AVG(Price) FROM goods WHERE Food = 'Tart' ) AND T1.Food = 'Cake';"}, {"question_id": 1573, "answer_sql": "SELECT Id FROM goods WHERE Price > 2*(SELECT avg(Price) FROM goods);"}, {"question_id": 1574, "answer_sql": "SELECT Id FROM goods WHERE Price > 2*(SELECT avg(Price) FROM goods)"}, {"question_id": 1575, "answer_sql": "SELECT goods.Id, goods.Flavor, goods.Food FROM goods JOIN items ON goods.Id = items.Item ORDER BY goods.Price;"}, {"question_id": 1576, "answer_sql": "SELECT Id, Flavor, Food FROM goods ORDER BY Price ASC;"}, {"question_id": 1577, "answer_sql": "SELECT T1.Id, T1.Flavor FROM goods AS T1 INNER JOIN items AS T2 ON T1.Id = T2.Item WHERE T1.Food = 'Cake' ORDER BY T1.Flavor"}, {"question_id": 1578, "answer_sql": "SELECT T1.Id, T2.Flavor FROM items AS T1 INNER JOIN goods AS T2 ON T1.Item = T2.Id WHERE T2.Food = 'Cake' ORDER BY T2.Flavor"}, {"question_id": 1579, "answer_sql": "SELECT T1.Item FROM items AS T1 INNER JOIN goods AS T2 ON T1.Item = T2.Id WHERE T2.Flavor = 'Chocolate' GROUP BY T1.Item HAVING COUNT(T1.Item) <= 10;"}, {"question_id": 1580, "answer_sql": "SELECT T3.Item FROM goods AS T1 INNER JOIN items AS T2 ON T1.Id = T2.Item INNER JOIN receipts AS T3 ON T3.ReceiptNumber = T2.Receipt WHERE T1.Flavor = 'Chocolate' GROUP BY T3.Item HAVING COUNT(T3.Item) <= 10;"}, {"question_id": 1581, "answer_sql": "SELECT Flavor FROM goods WHERE Food = 'Cake' EXCEPT SELECT Flavor FROM goods WHERE Food = 'Tart';"}, {"question_id": 1582, "answer_sql": "SELECT T1.Flavor FROM goods AS T1 INNER JOIN items AS T2 ON T1.Id = T2.Item WHERE T1.Food = 'Cake' AND T1.Flavor NOT IN ( SELECT T1.Flavor FROM goods AS T1 INNER JOIN items AS T2 ON T1.Id = T2.Item WHERE T1.Food = 'Tart' )"}, {"question_id": 1583, "answer_sql": "The three most popular goods in this bakery are: 1. Chocolate Chip Cookies 2. Vanilla Bean 3. Red Velvet Cake"}, {"question_id": 1584, "answer_sql": "The three most purchased items at this bakery can be obtained by joining the `items` table with the `receipts` table on the `Receipt` field and grouping by the `Item` field. The `Ordinal` field can be used to order the results. The `Limit` keyword can be used to limit the number of results."}, {"question_id": 1585, "answer_sql": "SELECT T1.Id FROM customers AS T1 JOIN receipts AS T2 ON T1.Id = T2.CustomerId JOIN items AS T3 ON T2.Receipt = T3.Receipt WHERE T3.Item IN (SELECT Id FROM goods WHERE Price > 150) GROUP BY T1.Id;"}, {"question_id": 1586, "answer_sql": "SELECT T1.Id FROM customers AS T1 JOIN receipts AS T2 ON T1.Id = T2.CustomerId JOIN items AS T3 ON T2.Receipt = T3.Receipt WHERE T3.Item IN (SELECT Id FROM goods WHERE Price > 150) GROUP BY T1.Id;"}, {"question_id": 1587, "answer_sql": "The problem can be solved by using subquery and group by clause. The subquery calculates the average spending for each good, and the outer query selects the customers whose average spending for each good is above 5."}, {"question_id": 1588, "answer_sql": "SELECT T1.Id FROM customers AS T1 INNER JOIN receipts AS T2 ON T1.Id = T2.CustomerId INNER JOIN items AS T3 ON T2.Receipt = T3.ReceiptNumber INNER JOIN goods AS T4 ON T3.Item = T4.Id GROUP BY T4.Id HAVING AVG(T4.Price) > 5;"}, {"question_id": 1589, "answer_sql": "SELECT T1.Date FROM receipts AS T1 INNER JOIN items AS T2 ON T1.Receipt = T2.Receipt INNER JOIN goods AS T3 ON T2.Item = T3.Id GROUP BY T1.Date HAVING SUM(T3.Price) > 100;"}, {"question_id": 1590, "answer_sql": "SELECT T1.Date FROM receipts AS T1 INNER JOIN items AS T2 ON T1.Receipt = T2.Receipt INNER JOIN goods AS T3 ON T2.Item = T3.Id GROUP BY T1.Date HAVING SUM(T3.Price) > 100;"}, {"question_id": 1591, "answer_sql": "SELECT count(*) FROM driver;"}, {"question_id": 1592, "answer_sql": "SELECT count(*) FROM driver;"}, {"question_id": 1593, "answer_sql": "SELECT Make, COUNT(*) FROM driver WHERE Points > 150 GROUP BY Make;"}, {"question_id": 1594, "answer_sql": "SELECT Make , COUNT(*) FROM driver WHERE Points > 150 GROUP BY Make;"}, {"question_id": 1595, "answer_sql": "SELECT Make , AVG(Age) FROM driver GROUP BY Make;"}, {"question_id": 1596, "answer_sql": "SELECT Make, AVG(Age) FROM driver GROUP BY Make;"}, {"question_id": 1597, "answer_sql": "SELECT avg(Laps) FROM driver WHERE Age < 20;"}, {"question_id": 1598, "answer_sql": "SELECT avg(Laps) FROM driver WHERE Age < 20;"}, {"question_id": 1599, "answer_sql": "SELECT Manager, Sponsor FROM team ORDER BY Car_Owner ASC"}, {"question_id": 1600, "answer_sql": "SELECT Manager, Sponsor FROM team ORDER BY Car_Owner"}, {"question_id": 1601, "answer_sql": "SELECT Make FROM team GROUP BY Make HAVING COUNT(*) > 1;"}, {"question_id": 1602, "answer_sql": "SELECT Make FROM team GROUP BY Make HAVING COUNT(*) > 1;"}, {"question_id": 1603, "answer_sql": "SELECT T.Make FROM team AS T INNER JOIN team_driver AS TD ON T.Team_ID = TD.Team_ID INNER JOIN driver AS D ON TD.Driver_ID = D.Driver_ID WHERE D.Car_Owner = 'Buddy Arrington'"}, {"question_id": 1604, "answer_sql": "SELECT T.Make FROM team AS T INNER JOIN team_driver AS TD ON T.Team_ID = TD.Team_ID INNER JOIN driver AS D ON TD.Driver_ID = D.Driver_ID WHERE D.Car_Owner = 'Buddy Arrington'"}, {"question_id": 1605, "answer_sql": "SELECT MAX(Points) , MIN(Points) FROM driver;"}, {"question_id": 1606, "answer_sql": "SELECT MAX(Points) , MIN(Points) FROM driver;"}, {"question_id": 1607, "answer_sql": "SELECT count(*) FROM driver WHERE points < 150;"}, {"question_id": 1608, "answer_sql": "SELECT COUNT(*) FROM driver WHERE Points < 150;"}, {"question_id": 1609, "answer_sql": "SELECT Driver FROM driver ORDER BY Age ASC;"}, {"question_id": 1610, "answer_sql": "SELECT Driver FROM driver ORDER BY Age ASC;"}, {"question_id": 1611, "answer_sql": "SELECT Driver FROM driver ORDER BY Points DESC"}, {"question_id": 1612, "answer_sql": "SELECT * FROM driver ORDER BY Points DESC"}, {"question_id": 1613, "answer_sql": "SELECT d.Driver, c.Country FROM driver d JOIN country c ON d.Country = c.Country_ID;"}, {"question_id": 1614, "answer_sql": "SELECT d.Driver, c.Country FROM driver d JOIN country c ON d.Country = c.Country_ID;"}, {"question_id": 1615, "answer_sql": "SELECT MAX(T2.Points) FROM country AS T1 INNER JOIN driver AS T2 ON T1.Country_ID = T2.Country WHERE T1.Capital = 'Dublin'"}, {"question_id": 1616, "answer_sql": "SELECT MAX(T2.Points) FROM country AS T1 INNER JOIN driver AS T2 ON T1.Country_ID = T2.Country WHERE T1.Capital = 'Dublin'"}, {"question_id": 1617, "answer_sql": "SELECT AVG(T2.Age) FROM country AS T1 INNER JOIN driver AS T2 ON T1.Country_ID = T2.Country WHERE T1.Official_native_language = English ;"}, {"question_id": 1618, "answer_sql": "SELECT AVG(T2.Age) FROM country AS T1 INNER JOIN driver AS T2 ON T1.Country_ID = T2.Country WHERE T1.Official_native_language = 'English';"}, {"question_id": 1619, "answer_sql": "SELECT T1.Country FROM country AS T1 INNER JOIN driver AS T2 ON T1.Country_Id = T2.Country WHERE T2.Points > 150;"}, {"question_id": 1620, "answer_sql": "SELECT DISTINCT T1.Country FROM country AS T1 INNER JOIN driver AS T2 ON T1.Country_ID = T2.Country WHERE T2.Points > 150;"}, {"question_id": 1621, "answer_sql": "SELECT T1.Capital FROM country AS T1 INNER JOIN driver AS T2 ON T1.Country_Id = T2.Country ORDER BY T2.Points DESC LIMIT 1;"}, {"question_id": 1622, "answer_sql": "SELECT T1.Country, T1.Capital FROM country AS T1 INNER JOIN driver AS T2 ON T1.Country_ID = T2.Country ORDER BY T2.Points DESC LIMIT 1;"}, {"question_id": 1623, "answer_sql": "SELECT Make , COUNT(*) FROM driver GROUP BY Make;"}, {"question_id": 1624, "answer_sql": "SELECT Make , COUNT(*) FROM driver GROUP BY Make;"}, {"question_id": 1625, "answer_sql": "SELECT Make FROM driver GROUP BY Make ORDER BY COUNT(*) DESC LIMIT 1;"}, {"question_id": 1626, "answer_sql": "SELECT T.Make FROM driver AS D INNER JOIN team_driver AS TD ON D.Driver_ID = TD.Driver_ID INNER JOIN team AS T ON TD.Team_ID = T.Team_ID GROUP BY T.Make ORDER BY COUNT(*) DESC LIMIT 1;"}, {"question_id": 1627, "answer_sql": "SELECT Make FROM driver GROUP BY Make HAVING COUNT(*) >= 3"}, {"question_id": 1628, "answer_sql": "SELECT T1.Make FROM team AS T1 JOIN team_driver AS T2 ON T1.Team_ID = T2.Team_ID GROUP BY T1.Team_ID HAVING COUNT(*) >= 3;"}, {"question_id": 1629, "answer_sql": "SELECT Team FROM team WHERE Team_ID NOT IN (SELECT Team_ID FROM team_driver);"}, {"question_id": 1630, "answer_sql": "SELECT Team FROM team WHERE Team_ID NOT IN (SELECT Team_ID FROM team_driver);"}, {"question_id": 1631, "answer_sql": "SELECT T1.Country FROM country AS T1 INNER JOIN driver AS T2 ON T1.Country_Id = T2.Country WHERE T2.Make = 'Dodge' INTERSECT SELECT T1.Country FROM country AS T1 INNER JOIN driver AS T2 ON T1.Country_Id = T2.Country WHERE T2.Make = 'Chevrolet'"}, {"question_id": 1632, "answer_sql": "SELECT T1.Country FROM country AS T1 INNER JOIN driver AS T2 ON T1.Country_ID = T2.Country WHERE T2.Make = 'Dodge' INTERSECT SELECT T1.Country FROM country AS T1 INNER JOIN driver AS T2 ON T1.Country_ID = T2.Country WHERE T2.Make = 'Chevrolet'"}, {"question_id": 1633, "answer_sql": "SELECT sum(Points) , avg(Points) FROM driver;"}, {"question_id": 1634, "answer_sql": "SELECT sum(Points) , avg(Points) FROM driver;"}, {"question_id": 1635, "answer_sql": "SELECT Country FROM country WHERE Country_Id NOT IN (SELECT Country FROM driver)"}, {"question_id": 1636, "answer_sql": "SELECT Country FROM country WHERE Country_Id NOT IN (SELECT Country FROM driver)"}, {"question_id": 1637, "answer_sql": "SELECT T.Manager, T.Sponsor FROM team AS T JOIN (SELECT Team_ID, COUNT(*) as num FROM team_driver GROUP BY Team_ID ORDER BY num DESC LIMIT 1) AS Tmp ON T.Team_ID = Tmp.Team_ID;"}, {"question_id": 1638, "answer_sql": "SELECT T.Manager, T.Sponsor FROM team AS T JOIN (SELECT Team_ID, COUNT(*) as num FROM team_driver GROUP BY Team_ID ORDER BY num DESC LIMIT 1) AS Tmp ON T.Team_ID = Tmp.Team_ID;"}, {"question_id": 1639, "answer_sql": "SELECT T1.Manager, T1.Car_Owner FROM team AS T1 INNER JOIN team_driver AS T2 ON T1.Team_ID = T2.Team_ID GROUP BY T1.Team_ID HAVING COUNT(*) >= 2"}, {"question_id": 1640, "answer_sql": "SELECT T1.Manager, T1.Car_Owner FROM team AS T1 JOIN team_driver AS T2 ON T1.Team_ID = T2.Team_ID GROUP BY T1.Team_ID HAVING COUNT(*) >= 2"}, {"question_id": 1641, "answer_sql": "SELECT count(*) FROM institution;"}, {"question_id": 1642, "answer_sql": "SELECT count(*) FROM institution;"}, {"question_id": 1643, "answer_sql": "SELECT Name FROM institution ORDER BY Name ASC;"}, {"question_id": 1644, "answer_sql": "SELECT Name FROM institution ORDER BY Name ASC;"}, {"question_id": 1645, "answer_sql": "SELECT Name FROM institution ORDER BY Founded ASC;"}, {"question_id": 1646, "answer_sql": "SELECT Name FROM institution ORDER BY Founded;"}, {"question_id": 1647, "answer_sql": "SELECT City, Province FROM institution;"}, {"question_id": 1648, "answer_sql": "SELECT City, Province FROM institution;"}, {"question_id": 1649, "answer_sql": "SELECT MAX(Enrollment) , MIN(Enrollment) FROM institution;"}, {"question_id": 1650, "answer_sql": "SELECT MAX(Enrollment) , MIN(Enrollment) FROM institution;"}, {"question_id": 1651, "answer_sql": "SELECT Affiliation FROM institution WHERE City != 'Vancouver'"}, {"question_id": 1652, "answer_sql": "```sql SELECT Affiliation FROM institution WHERE City != 'Vancouver'"}, {"question_id": 1653, "answer_sql": "SELECT Stadium FROM institution ORDER BY Capacity DESC;"}, {"question_id": 1654, "answer_sql": "SELECT Stadium FROM institution ORDER BY Capacity DESC;"}, {"question_id": 1655, "answer_sql": "SELECT Stadium FROM institution ORDER BY Enrollment DESC LIMIT 1;"}, {"question_id": 1656, "answer_sql": "SELECT Stadium FROM institution ORDER BY Enrollment DESC LIMIT 1;"}, {"question_id": 1657, "answer_sql": "SELECT T1.Name, T2.Nickname FROM institution AS T1 INNER JOIN Championship AS T2 ON T1.Institution_ID = T2.Institution_ID"}, {"question_id": 1658, "answer_sql": "SELECT T1.Name, T2.Nickname FROM institution AS T1 INNER JOIN Championship AS T2 ON T1.Institution_ID = T2.Institution_ID;"}, {"question_id": 1659, "answer_sql": "SELECT t2.Nickname FROM institution AS t1 INNER JOIN Championship AS t2 ON t1.Institution_ID = t2.Institution_ID ORDER BY t1.Enrollment LIMIT 1;"}, {"question_id": 1660, "answer_sql": "SELECT t2.Nickname FROM institution AS t1 INNER JOIN Championship AS t2 ON t1.Institution_ID = t2.Institution_ID ORDER BY t1.Enrollment LIMIT 1;"}, {"question_id": 1661, "answer_sql": "SELECT T1.Name FROM institution AS T1 INNER JOIN championship AS T2 ON T1.Institution_ID = T2.Institution_ID ORDER BY T2.Number_of_Championships DESC"}, {"question_id": 1662, "answer_sql": "SELECT T1.Name FROM institution AS T1 INNER JOIN championship AS T2 ON T1.Institution_ID = T2.Institution_ID ORDER BY T2.Number_of_Championships DESC"}, {"question_id": 1663, "answer_sql": "SELECT T1.Name FROM institution AS T1 INNER JOIN championship AS T2 ON T1.Institution_ID = T2.Institution_ID GROUP BY T1.Name HAVING COUNT(*) >= 1;"}, {"question_id": 1664, "answer_sql": "SELECT T1.Name FROM institution AS T1 INNER JOIN championships AS T2 ON T1.Institution_ID = T2.Institution_ID GROUP BY T1.Name HAVING COUNT(*) >= 1;"}, {"question_id": 1665, "answer_sql": "SELECT SUM(c.Number_of_Championships) FROM institution i JOIN championship c ON i.Institution_ID = c.Institution_ID WHERE i.Affiliation = 'Public';"}, {"question_id": 1666, "answer_sql": "SELECT COUNT(*) FROM institution AS T1 INNER JOIN championship AS T2 ON T1.institution_id = T2.institution_id WHERE T1.Affiliation = 'Public';"}, {"question_id": 1667, "answer_sql": "SELECT Affiliation, COUNT(*) FROM institution GROUP BY Affiliation;"}, {"question_id": 1668, "answer_sql": "SELECT Affiliation, COUNT(*) FROM institution GROUP BY Affiliation;"}, {"question_id": 1669, "answer_sql": "SELECT Affiliation, COUNT(*) as count FROM institution GROUP BY Affiliation ORDER BY count DESC LIMIT 1;"}, {"question_id": 1670, "answer_sql": "SELECT Affiliation FROM institution GROUP BY Affiliation ORDER BY COUNT(*) DESC LIMIT 1"}, {"question_id": 1671, "answer_sql": "SELECT COUNT(*) FROM (SELECT Founded FROM institution GROUP BY Founded HAVING COUNT(*) > 1) AS Subquery;"}, {"question_id": 1672, "answer_sql": "SELECT Founded, COUNT(*) FROM institution GROUP BY Founded HAVING COUNT(*) > 1;"}, {"question_id": 1673, "answer_sql": "SELECT t2.Nickname FROM institution AS t1 INNER JOIN Championship AS t2 ON t1.Institution_ID = t2.Institution_ID ORDER BY t1.Capacity DESC"}, {"question_id": 1674, "answer_sql": "SELECT t2.Nickname FROM institution AS t1 INNER JOIN Championship AS t2 ON t1.Institution_ID = t2.Institution_ID ORDER BY t1.Capacity DESC"}, {"question_id": 1675, "answer_sql": "SELECT sum(Enrollment) FROM institution WHERE City = 'Vancouver' OR City = 'Calgary'"}, {"question_id": 1676, "answer_sql": "SELECT Enrollment FROM institution WHERE City = 'Vancouver' OR City = 'Calgary'"}, {"question_id": 1677, "answer_sql": "The output of the query will be the provinces that have both institutions founded before 1920 and institutions founded after 1950."}, {"question_id": 1678, "answer_sql": "SELECT DISTINCT Province FROM institution WHERE Founded < 1920 INTERSECT SELECT DISTINCT Province FROM institution WHERE Founded > 1950;"}, {"question_id": 1679, "answer_sql": "SELECT COUNT(DISTINCT Province) FROM institution;"}, {"question_id": 1680, "answer_sql": "SELECT COUNT(DISTINCT Province) FROM institution;"}, {"question_id": 1681, "answer_sql": "SELECT * FROM Warehouses;"}, {"question_id": 1682, "answer_sql": "SELECT * FROM Warehouses;"}, {"question_id": 1683, "answer_sql": "SELECT DISTINCT Boxes.Contents FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location = 'New York';"}, {"question_id": 1684, "answer_sql": "SELECT DISTINCT Contents FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'New York');"}, {"question_id": 1685, "answer_sql": "SELECT Contents FROM Boxes WHERE Value > 150;"}, {"question_id": 1686, "answer_sql": "SELECT Contents FROM Boxes WHERE Value > 150;"}, {"question_id": 1687, "answer_sql": "SELECT T1.Code , AVG(T2.Value) FROM Warehouses AS T1 JOIN Boxes AS T2 ON T1.Code = T2.Warehouse GROUP BY T1.Code;"}, {"question_id": 1688, "answer_sql": "SELECT Warehouses.Location, AVG(Boxes.Value) FROM Warehouses INNER JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Location;"}, {"question_id": 1689, "answer_sql": "SELECT avg(Value), sum(Value) FROM Boxes;"}, {"question_id": 1690, "answer_sql": "SELECT avg(Value), sum(Value) FROM Boxes;"}, {"question_id": 1691, "answer_sql": "SELECT avg(Capacity), sum(Capacity) FROM Warehouses;"}, {"question_id": 1692, "answer_sql": "SELECT avg(Capacity), sum(Capacity) FROM Warehouses;"}, {"question_id": 1693, "answer_sql": "SELECT Contents , avg(Value) , max(Value) FROM Boxes GROUP BY Contents;"}, {"question_id": 1694, "answer_sql": "SELECT Contents , avg(Value) , max(Value) FROM Boxes GROUP BY Contents;"}, {"question_id": 1695, "answer_sql": "The problem can be solved by using the GROUP BY and ORDER BY clauses in SQL. The GROUP BY clause is used to combine rows that have the same values in specified columns into aggregated data. The ORDER BY clause is used to sort the result-set in a specific order. In this case, we want to order the content by the total value of the boxes."}, {"question_id": 1696, "answer_sql": "SELECT Contents FROM Boxes ORDER BY Value DESC LIMIT 1;"}, {"question_id": 1697, "answer_sql": "SELECT AVG(Value) FROM Boxes;"}, {"question_id": 1698, "answer_sql": "SELECT AVG(Value) FROM Boxes;"}, {"question_id": 1699, "answer_sql": "SELECT DISTINCT Contents FROM Boxes;"}, {"question_id": 1700, "answer_sql": "SELECT DISTINCT Contents FROM Boxes;"}, {"question_id": 1701, "answer_sql": "SELECT COUNT(DISTINCT Contents) FROM Boxes;"}, {"question_id": 1702, "answer_sql": "SELECT COUNT(DISTINCT Contents) FROM Boxes;"}, {"question_id": 1703, "answer_sql": "SELECT DISTINCT Location FROM Warehouses;"}, {"question_id": 1704, "answer_sql": "SELECT DISTINCT Location FROM Warehouses;"}, {"question_id": 1705, "answer_sql": "The SQL query to solve the problem is as follows: ```sql SELECT T2.Code FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Warehouse WHERE T1.Location = 'Chicago' OR T1.Location = 'New York'"}, {"question_id": 1706, "answer_sql": "SELECT T1.Code FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code WHERE T2.Location = 'Chicago' OR T2.Location = 'New York'"}, {"question_id": 1707, "answer_sql": "SELECT sum(Value) FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location = 'Chicago' OR Warehouses.Location = 'New York';"}, {"question_id": 1708, "answer_sql": "SELECT SUM(Value) FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'Chicago' OR Location = 'New York');"}, {"question_id": 1709, "answer_sql": "SELECT Boxes.Contents FROM Warehouses INNER JOIN Boxes ON Warehouses.Code = Boxes.Warehouse WHERE Warehouses.Location = 'Chicago' OR Warehouses.Location = 'New York'"}, {"question_id": 1710, "answer_sql": "SELECT Contents FROM Boxes WHERE Warehouse = (SELECT Code FROM Warehouses WHERE Location = 'Chicago') INTERSECT SELECT Contents FROM Boxes WHERE Warehouse = (SELECT Code FROM Warehouses WHERE Location = 'New York');"}, {"question_id": 1711, "answer_sql": "SELECT DISTINCT Contents FROM Boxes WHERE Warehouse NOT IN (SELECT Code FROM Warehouses WHERE Location = 'New York')"}, {"question_id": 1712, "answer_sql": "SELECT DISTINCT Contents FROM Boxes WHERE Warehouse NOT IN (SELECT Code FROM Warehouses WHERE Location = 'New York')"}, {"question_id": 1713, "answer_sql": "SELECT T1.Location FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Warehouse WHERE T2.Contents = 'Rocks' AND T1.Code NOT IN (SELECT T1.Code FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Warehouse WHERE T2.Contents = 'Scissors')"}, {"question_id": 1714, "answer_sql": "SELECT DISTINCT T1.Location FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Warehouse WHERE T2.Contents LIKE '%Rocks%' AND T2.Contents NOT LIKE '%Scissors%'"}, {"question_id": 1715, "answer_sql": "SELECT T1.Location FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Warehouse WHERE T2.Contents = 'Rocks' OR T2.Contents = 'Scissors'"}, {"question_id": 1716, "answer_sql": "SELECT DISTINCT T1.Code FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Warehouse WHERE T2.Contents = 'Rocks' OR T2.Contents = 'Scissors';"}, {"question_id": 1717, "answer_sql": "SELECT T1.Location FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Warehouse WHERE T2.Contents = 'Rocks AND Scissors' GROUP BY T1.Location;"}, {"question_id": 1718, "answer_sql": "SELECT DISTINCT T1.Location FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Warehouse WHERE T2.Contents = 'Rocks AND Scissors'"}, {"question_id": 1719, "answer_sql": "SELECT Code, Contents FROM Boxes ORDER BY Value"}, {"question_id": 1720, "answer_sql": "SELECT Code, Contents FROM Boxes ORDER BY Value"}, {"question_id": 1721, "answer_sql": "SELECT Code, Contents FROM Boxes ORDER BY Value LIMIT 1;"}, {"question_id": 1722, "answer_sql": "SELECT Code, Contents FROM Boxes ORDER BY Value LIMIT 1;"}, {"question_id": 1723, "answer_sql": "SELECT DISTINCT Contents FROM Boxes WHERE Value > (SELECT AVG(Value) FROM Boxes);"}, {"question_id": 1724, "answer_sql": "SELECT DISTINCT Contents FROM Boxes WHERE Value > (SELECT AVG(Value) FROM Boxes);"}, {"question_id": 1725, "answer_sql": "SELECT DISTINCT Contents FROM Boxes ORDER BY Contents;"}, {"question_id": 1726, "answer_sql": "SELECT DISTINCT Contents FROM Boxes ORDER BY Contents;"}, {"question_id": 1727, "answer_sql": "The solution to the problem is to use a subquery to check for the value of the box with the content Rocks . If the value of the box is higher than the value of any box with the content Rocks , the code of the box is included in the result."}, {"question_id": 1728, "answer_sql": "SELECT Code FROM Boxes WHERE Value > (SELECT min(Value) FROM Boxes WHERE Contents = Rocks )"}, {"question_id": 1729, "answer_sql": "SELECT code, contents FROM boxes WHERE value > (SELECT max(value) FROM boxes WHERE contents = 'Scissors')"}, {"question_id": 1730, "answer_sql": "SELECT Code, Contents FROM Boxes WHERE Value > (SELECT max(Value) FROM Boxes WHERE Contents = Scissors )"}, {"question_id": 1731, "answer_sql": "SELECT sum(Value) FROM Boxes WHERE Warehouse = (SELECT Code FROM Warehouses ORDER BY Capacity DESC LIMIT 1);"}, {"question_id": 1732, "answer_sql": "SELECT sum(Value) FROM Boxes WHERE Warehouse = (SELECT Code FROM Warehouses ORDER BY Capacity DESC LIMIT 1);"}, {"question_id": 1733, "answer_sql": "SELECT T1.Code , AVG(T2.Value) FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Warehouse GROUP BY T1.Code HAVING AVG(T2.Value) > 150;"}, {"question_id": 1734, "answer_sql": "SELECT AVG(Value) , Warehouse FROM Boxes GROUP BY Warehouse HAVING AVG(Value) > 150"}, {"question_id": 1735, "answer_sql": "SELECT Contents, COUNT(*) as NumberOfBoxes, SUM(Value) as TotalValue FROM Boxes GROUP BY Contents;"}, {"question_id": 1736, "answer_sql": "SELECT Contents, SUM(Value) AS Total_Value, COUNT(*) AS Number_Of_Boxes FROM Boxes GROUP BY Contents;"}, {"question_id": 1737, "answer_sql": "SELECT w.Location, SUM(w.Capacity) as Total_Capacity, AVG(w.Capacity) as Avg_Capacity, MAX(w.Capacity) as Max_Capacity FROM Warehouses w GROUP BY w.Location;"}, {"question_id": 1738, "answer_sql": "SELECT w.Location, SUM(w.Capacity) AS Total_Capacity, AVG(w.Capacity) AS Avg_Capacity, MAX(w.Capacity) AS Max_Capacity FROM Warehouses w GROUP BY w.Location;"}, {"question_id": 1739, "answer_sql": "SELECT sum(Capacity) FROM Warehouses;"}, {"question_id": 1740, "answer_sql": "SELECT sum(Capacity) FROM Warehouses;"}, {"question_id": 1741, "answer_sql": "The most expensive boxes saved in each warehouse location can be found by subquerying the Boxes table for the maximum value for each warehouse. The outer query then selects the warehouse location and the maximum value."}, {"question_id": 1742, "answer_sql": "The response to the question can be found by using the `MAX` function in conjunction with the `subquery` to identify the most expensive box for each warehouse. The subquery selects the maximum value for each warehouse, and the outer query selects the warehouse location and the maximum value."}, {"question_id": 1743, "answer_sql": "SELECT T1.Code , count(*) FROM Warehouses AS T1 JOIN Boxes AS T2 ON T1.Code = T2.Warehouse GROUP BY T1.Code;"}, {"question_id": 1744, "answer_sql": "SELECT Warehouses.Location, COUNT(Boxes.Code) FROM Warehouses INNER JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Location;"}, {"question_id": 1745, "answer_sql": "SELECT COUNT(DISTINCT T2.Location) FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code WHERE T1.Contents = Rocks ;"}, {"question_id": 1746, "answer_sql": "SELECT COUNT(DISTINCT Warehouses.Location) FROM Warehouses INNER JOIN Boxes ON Warehouses.Code = Boxes.Warehouse WHERE Boxes.Contents = Rocks ;"}, {"question_id": 1747, "answer_sql": "SELECT Boxes.Code , Warehouses.Location FROM Boxes INNER JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code"}, {"question_id": 1748, "answer_sql": "SELECT Boxes.Code , Warehouses.Location FROM Boxes INNER JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code;"}, {"question_id": 1749, "answer_sql": "SELECT T2.Code FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Warehouse WHERE T1.Location = 'Chicago';"}, {"question_id": 1750, "answer_sql": "SELECT T2.Code FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Warehouse WHERE T1.Location = 'Chicago';"}, {"question_id": 1751, "answer_sql": "SELECT Warehouses.Location, COUNT(Boxes.Code) FROM Warehouses INNER JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Location;"}, {"question_id": 1752, "answer_sql": "SELECT Warehouses.Location, COUNT(Boxes.Code) FROM Warehouses INNER JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Location;"}, {"question_id": 1753, "answer_sql": "The number of distinct types of contents in each warehouse can be obtained by grouping by warehouse and counting distinct contents."}, {"question_id": 1754, "answer_sql": "SELECT Warehouses.Location, COUNT(DISTINCT Boxes.Contents) FROM Warehouses INNER JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Location;"}, {"question_id": 1755, "answer_sql": "```sql SELECT Code FROM Warehouses WHERE Capacity < (SELECT MAX(Capacity) FROM Warehouses)"}, {"question_id": 1756, "answer_sql": "SELECT T1.Code FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Warehouse GROUP BY T1.Code HAVING SUM(T2.Value) > T1.Capacity;"}, {"question_id": 1757, "answer_sql": "SELECT sum(Value) FROM Boxes WHERE Warehouse NOT IN (SELECT Code FROM Warehouses WHERE Location = 'Chicago');"}, {"question_id": 1758, "answer_sql": "SELECT sum(Value) FROM Boxes WHERE Warehouse NOT IN (SELECT Code FROM Warehouses WHERE Location = 'Chicago')"}, {"question_id": 1759, "answer_sql": "SELECT University_Name, City, State FROM university ORDER BY University_Name ASC;"}, {"question_id": 1760, "answer_sql": "SELECT University_Name, City, State FROM university ORDER BY University_Name ASC;"}, {"question_id": 1761, "answer_sql": "SELECT COUNT(*) FROM university WHERE State = 'Illinois' OR State = 'Ohio';"}, {"question_id": 1762, "answer_sql": "SELECT COUNT(*) FROM university WHERE State = 'Illinois' OR State = 'Ohio';"}, {"question_id": 1763, "answer_sql": "SELECT MAX(Enrollment) AS Max_Enrollment, AVG(Enrollment) AS Avg_Enrollment, MIN(Enrollment) AS Min_Enrollment FROM university;"}, {"question_id": 1764, "answer_sql": "SELECT MAX(Enrollment) AS Max_Enrollment, AVG(Enrollment) AS Avg_Enrollment, MIN(Enrollment) AS Min_Enrollment FROM university;"}, {"question_id": 1765, "answer_sql": "SELECT Team_Name FROM university WHERE Enrollment > (SELECT AVG(Enrollment) FROM university)"}, {"question_id": 1766, "answer_sql": "SELECT Team_Name FROM university WHERE Enrollment > (SELECT AVG(Enrollment) FROM university)"}, {"question_id": 1767, "answer_sql": "SELECT Home_Conference FROM university GROUP BY Home_Conference"}, {"question_id": 1768, "answer_sql": "SELECT DISTINCT Home_Conference FROM university;"}, {"question_id": 1769, "answer_sql": "SELECT Home_Conference , COUNT(*) FROM university GROUP BY Home_Conference;"}, {"question_id": 1770, "answer_sql": "SELECT Home_Conference , COUNT(*) FROM university GROUP BY Home_Conference;"}, {"question_id": 1771, "answer_sql": "SELECT State FROM university GROUP BY State ORDER BY COUNT(*) DESC LIMIT 1;"}, {"question_id": 1772, "answer_sql": "SELECT State FROM university GROUP BY State ORDER BY COUNT(*) DESC LIMIT 1;"}, {"question_id": 1773, "answer_sql": "SELECT Home_Conference FROM university GROUP BY Home_Conference HAVING AVG(Enrollment) > 2000;"}, {"question_id": 1774, "answer_sql": "SELECT Home_Conference FROM university GROUP BY Home_Conference HAVING AVG(Enrollment) > 2000;"}, {"question_id": 1775, "answer_sql": "SELECT Home_Conference FROM university GROUP BY Home_Conference ORDER BY COUNT(*) ASC LIMIT 1;"}, {"question_id": 1776, "answer_sql": "SELECT Home_Conference FROM university ORDER BY Enrollment LIMIT 1;"}, {"question_id": 1777, "answer_sql": "SELECT Major_Name, Major_Code FROM major ORDER BY Major_Code ASC"}, {"question_id": 1778, "answer_sql": "SELECT Major_Name , Major_Code FROM major ORDER BY Major_Code ASC"}, {"question_id": 1779, "answer_sql": "SELECT T3.major_name, T2.rank FROM university AS T1 INNER JOIN major_ranking AS T2 ON T1.university_id = T2.university_id INNER JOIN major AS T3 ON T3.major_id = T2.major_id WHERE T1.university_name = 'Augustana College';"}, {"question_id": 1780, "answer_sql": "SELECT T2.Rank, T1.Major_Name FROM major AS T1 INNER JOIN major_ranking AS T2 ON T1.Major_ID = T2.Major_ID INNER JOIN university AS T3 ON T3.University_ID = T2.University_ID WHERE T3.University_Name = 'Augustana College';"}, {"question_id": 1781, "answer_sql": "SELECT T3.University_Name, T3.City, T3.State FROM major_ranking AS T1 JOIN major AS T2 ON T1.Major_ID = T2.Major_ID JOIN university AS T3 ON T3.University_ID = T1.University_ID WHERE T1.Rank = 1 AND T2.Major_Name = 'Accounting';"}, {"question_id": 1782, "answer_sql": "SELECT T3.University_Name, T3.City, T3.State FROM major_ranking AS T1 JOIN major AS T2 ON T1.Major_ID = T2.Major_ID JOIN university AS T3 ON T3.University_ID = T1.University_ID WHERE T2.Major_Name = 'Accounting' AND T1.Rank = 1"}, {"question_id": 1783, "answer_sql": "SELECT t1.university_name FROM university AS t1 JOIN major_ranking AS t2 ON t1.university_id = t2.university_id WHERE rank = 1 GROUP BY t1.university_name ORDER BY count(*) DESC LIMIT 1;"}, {"question_id": 1784, "answer_sql": "SELECT t1.university_name FROM university AS t1 JOIN major_ranking AS t2 ON t1.university_id = t2.university_id WHERE rank = 1 GROUP BY t1.university_name ORDER BY count(*) DESC LIMIT 1;"}, {"question_id": 1785, "answer_sql": "SELECT DISTINCT t1.university_name FROM university AS t1 JOIN major_ranking AS t2 ON t1.university_id = t2.university_id WHERE t2.rank != 1;"}, {"question_id": 1786, "answer_sql": "SELECT University_Name FROM university WHERE University_ID NOT IN (SELECT University_ID FROM major_ranking WHERE Rank = 1);"}, {"question_id": 1787, "answer_sql": "SELECT T1.University_Name FROM university AS T1 INNER JOIN major_ranking AS T2 ON T1.University_ID = T2.University_ID INNER JOIN major AS T3 ON T3.Major_ID = T2.Major_ID WHERE T3.Major_Name IN ('Accounting', 'Urban Education') GROUP BY T1.University_Name HAVING COUNT(DISTINCT T3.Major_Name) = 2;"}, {"question_id": 1788, "answer_sql": "SELECT T1.University_Name FROM university AS T1 INNER JOIN major_ranking AS T2 ON T1.University_ID = T2.University_ID INNER JOIN major AS T3 ON T2.Major_ID = T3.Major_ID WHERE T3.Major_Name = 'Accounting' INTERSECT SELECT T1.University_Name FROM university AS T1 INNER JOIN major_ranking AS T2 ON T1.University_ID = T2.University_ID INNER JOIN major AS T3 ON T2.Major_ID = T3.Major_ID WHERE T3.Major_Name = 'Urban Education'"}, {"question_id": 1789, "answer_sql": "SELECT u.University_Name, or.Overall_Rank FROM university u JOIN overall_ranking or ON u.University_ID = or.University_ID WHERE u.State = 'Wisconsin';"}, {"question_id": 1790, "answer_sql": "SELECT u.University_Name , r.Rank FROM university u JOIN overall_ranking r ON u.University_ID = r.University_ID WHERE u.State = 'Wisconsin';"}, {"question_id": 1791, "answer_sql": "SELECT t1.university_name FROM university AS t1 JOIN overall_ranking AS t2 ON t1.university_id = t2.university_id ORDER BY t2.research_point DESC LIMIT 1;"}, {"question_id": 1792, "answer_sql": "SELECT t1.university_name FROM university AS t1 JOIN overall_ranking AS t2 ON t1.university_id = t2.university_id ORDER BY t2.research_point DESC LIMIT 1;"}, {"question_id": 1793, "answer_sql": "SELECT t1.university_name FROM university AS t1 JOIN overall_ranking AS t2 ON t1.university_id = t2.university_id ORDER BY t2.reputation_point ASC;"}, {"question_id": 1794, "answer_sql": "SELECT University_Name FROM university AS T1 JOIN overall_ranking AS T2 ON T1.University_ID = T2.University_ID ORDER BY Reputation_point ASC;"}, {"question_id": 1795, "answer_sql": "SELECT T1.University_Name FROM university AS T1 INNER JOIN major_ranking AS T2 ON T1.University_ID = T2.University_ID INNER JOIN major AS T3 ON T2.Major_ID = T3.Major_ID WHERE T3.Major_Name = 'Accounting' AND T2.Rank >= 3;"}, {"question_id": 1796, "answer_sql": "SELECT T1.University_Name FROM university AS T1 INNER JOIN major_ranking AS T2 ON T1.University_ID = T2.University_ID INNER JOIN major AS T3 ON T2.Major_ID = T3.Major_ID WHERE T3.Major_Name = 'Accounting' AND T2.Rank >= 3;"}, {"question_id": 1797, "answer_sql": "SELECT SUM(Enrollment) FROM university WHERE University_ID IN (SELECT University_ID FROM overall_ranking WHERE Rank <= 5);"}, {"question_id": 1798, "answer_sql": "SELECT COUNT(*) FROM university AS T1 INNER JOIN overall_ranking AS T2 ON T1.University_ID = T2.University_ID WHERE T2.Rank <= 5;"}, {"question_id": 1799, "answer_sql": "SELECT T1.University_Name , T2.Citation_point FROM university AS T1 INNER JOIN overall_ranking AS T2 ON T1.University_ID = T2.University_ID WHERE T2.Reputation_point >= 3"}, {"question_id": 1800, "answer_sql": "SELECT T1.University_Name , T2.Citation_point FROM university AS T1 JOIN overall_ranking AS T2 ON T1.University_ID = T2.University_ID ORDER BY T2.Reputation_point DESC LIMIT 3;"}, {"question_id": 1801, "answer_sql": "SELECT State FROM university WHERE Enrollment < 3000 GROUP BY State HAVING COUNT(*) > 2;"}, {"question_id": 1802, "answer_sql": "SELECT State FROM university WHERE Enrollment < 3000 GROUP BY State HAVING COUNT(*) > 2;"}, {"question_id": 1803, "answer_sql": "SELECT Title FROM Movies WHERE Rating = '';"}, {"question_id": 1804, "answer_sql": "SELECT Title FROM Movies WHERE Rating = 'None';"}, {"question_id": 1805, "answer_sql": "SELECT Title FROM Movies WHERE Rating = 'G';"}, {"question_id": 1806, "answer_sql": "SELECT Title FROM Movies WHERE Rating = 'G';"}, {"question_id": 1807, "answer_sql": "SELECT Movies.Title FROM Movies INNER JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE MovieTheaters.Name = 'Odeon';"}, {"question_id": 1808, "answer_sql": "SELECT Movies.Title FROM Movies INNER JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE MovieTheaters.Name = 'Odeon';"}, {"question_id": 1809, "answer_sql": "SELECT Movies.Title, MovieTheaters.Name FROM Movies INNER JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie;"}, {"question_id": 1810, "answer_sql": "SELECT Movies.Title, MovieTheaters.Name FROM Movies INNER JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie;"}, {"question_id": 1811, "answer_sql": "SELECT COUNT(*) FROM Movies WHERE Rating = 'G';"}, {"question_id": 1812, "answer_sql": "SELECT COUNT(*) FROM Movies WHERE Rating = 'G';"}, {"question_id": 1813, "answer_sql": "SELECT COUNT(*) FROM Movies;"}, {"question_id": 1814, "answer_sql": "SELECT COUNT(*) FROM MovieTheaters WHERE Movie IS NOT NULL;"}, {"question_id": 1815, "answer_sql": "SELECT COUNT(DISTINCT movie) FROM movie_theaters;"}, {"question_id": 1816, "answer_sql": "SELECT COUNT(DISTINCT Title) FROM Movies;"}, {"question_id": 1817, "answer_sql": "SELECT count(DISTINCT Name) FROM MovieTheaters;"}, {"question_id": 1818, "answer_sql": "SELECT count(DISTINCT Name) FROM MovieTheaters;"}, {"question_id": 1819, "answer_sql": "SELECT T1.Rating FROM Movies AS T1 INNER JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie WHERE T1.Title LIKE '%Citizen%'"}, {"question_id": 1820, "answer_sql": "SELECT T1.Rating FROM Movies AS T1 INNER JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie WHERE T1.Title LIKE '%Citizen%'"}, {"question_id": 1821, "answer_sql": "SELECT DISTINCT T2.Name FROM Movies AS T1 INNER JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie WHERE T1.Rating IN ('G', 'PG');"}, {"question_id": 1822, "answer_sql": "SELECT T2.Name FROM Movies AS T1 INNER JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie WHERE T1.Rating IN ('G', 'PG');"}, {"question_id": 1823, "answer_sql": "SELECT T1.Title FROM Movies AS T1 INNER JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie WHERE T2.Name = 'Cinema Odeon' OR T2.Name = 'Imperial';"}, {"question_id": 1824, "answer_sql": "SELECT Movies.Title FROM Movies INNER JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE MovieTheaters.Name = 'Odeon' OR MovieTheaters.Name = 'Imperial';"}, {"question_id": 1825, "answer_sql": "SELECT T1.Title FROM Movies AS T1 INNER JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie INNER JOIN MovieTheaters AS T3 ON T1.Code = T3.Movie WHERE T2.Name = 'Odeon' AND T3.Name = 'Imperial'"}, {"question_id": 1826, "answer_sql": "SELECT Title FROM Movies WHERE Code IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon') INTERSECT SELECT Title FROM Movies WHERE Code IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Imperial');"}, {"question_id": 1827, "answer_sql": "SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon');"}, {"question_id": 1828, "answer_sql": "SELECT Movies.Title FROM Movies EXCEPT SELECT Movies.Title FROM Movies INNER JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE MovieTheaters.Name = 'Odeon'"}, {"question_id": 1829, "answer_sql": "SELECT Title FROM Movies ORDER BY Title"}, {"question_id": 1830, "answer_sql": "SELECT Title FROM Movies ORDER BY Title ASC;"}, {"question_id": 1831, "answer_sql": "SELECT Title FROM Movies ORDER BY Rating;"}, {"question_id": 1832, "answer_sql": "SELECT Title FROM Movies ORDER BY Rating;"}, {"question_id": 1833, "answer_sql": "SELECT T1.Name FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.Movie = T2.Code GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1;"}, {"question_id": 1834, "answer_sql": "SELECT T1.Name FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.Movie = T2.Code GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1;"}, {"question_id": 1835, "answer_sql": "SELECT Movies.Title FROM Movies INNER JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie GROUP BY Movies.Title ORDER BY COUNT(*) DESC LIMIT 1;"}, {"question_id": 1836, "answer_sql": "SELECT Movies.Title FROM Movies INNER JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie GROUP BY Movies.Title ORDER BY COUNT(*) DESC LIMIT 1"}, {"question_id": 1837, "answer_sql": "```sql SELECT count(*) , Rating FROM Movies GROUP BY Rating"}, {"question_id": 1838, "answer_sql": "SELECT Movies.Rating, COUNT(*) FROM Movies GROUP BY Movies.Rating;"}, {"question_id": 1839, "answer_sql": "SELECT COUNT(*) FROM Movies WHERE Rating IS NOT NULL;"}, {"question_id": 1840, "answer_sql": "SELECT COUNT(*) FROM Movies WHERE Rating IS NOT NULL;"}, {"question_id": 1841, "answer_sql": "SELECT DISTINCT Name FROM MovieTheaters MT INNER JOIN Movies M ON MT.Movie = M.Code;"}, {"question_id": 1842, "answer_sql": "SELECT DISTINCT Name FROM MovieTheaters MT INNER JOIN Movies M ON MT.Movie = M.Code;"}, {"question_id": 1843, "answer_sql": "SELECT Name FROM MovieTheaters WHERE Movie = (SELECT Code FROM Movies WHERE Title IS NULL);"}, {"question_id": 1844, "answer_sql": "SELECT Name FROM MovieTheaters WHERE Movie IS NULL;"}, {"question_id": 1845, "answer_sql": "The SQL query to solve the problem is as follows: ```sql SELECT T2.Name FROM Movies AS T1 INNER JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie WHERE T1.Rating = 'G'"}, {"question_id": 1846, "answer_sql": "SELECT T2.Name FROM Movies AS T1 INNER JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie WHERE T1.Rating = 'G'"}, {"question_id": 1847, "answer_sql": "SELECT Title FROM Movies;"}, {"question_id": 1848, "answer_sql": "SELECT Title FROM Movies;"}, {"question_id": 1849, "answer_sql": "SELECT DISTINCT Rating FROM Movies;"}, {"question_id": 1850, "answer_sql": "SELECT DISTINCT Rating FROM Movies;"}, {"question_id": 1851, "answer_sql": "SELECT * FROM Movies WHERE Rating = 'Unrated';"}, {"question_id": 1852, "answer_sql": "SELECT * FROM Movies WHERE Rating = 'Unrated';"}, {"question_id": 1853, "answer_sql": "SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters);"}, {"question_id": 1854, "answer_sql": "SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters);"}, {"question_id": 1855, "answer_sql": "SELECT ClientName FROM ( SELECT T2.Recipient AS AccountNumber, T1.Name FROM Employee AS T1 INNER JOIN Package AS T2 ON T2.Recipient = T1.EmployeeID WHERE T2.Weight = ( SELECT MAX(Weight) FROM Package ) ) AS T3 GROUP BY T3.AccountNumber"}, {"question_id": 1856, "answer_sql": "SELECT T1.Name FROM Client AS T1 INNER JOIN Package AS T2 ON T1.AccountNumber = T2.Recipient ORDER BY T2.Weight DESC LIMIT 1;"}, {"question_id": 1857, "answer_sql": "SELECT SUM(T2.Weight) AS TotalWeight FROM Client AS T1 INNER JOIN Package AS T2 ON T1.AccountNumber = T2.Recipient WHERE T1.Name = 'Leo Wong'"}, {"question_id": 1858, "answer_sql": "SELECT SUM(T2.Weight) AS TotalWeight FROM Client AS T1 INNER JOIN Package AS T2 ON T1.AccountNumber = T2.Sender WHERE T1.Name = 'Leo Wong'"}, {"question_id": 1859, "answer_sql": "SELECT Position FROM Employee WHERE Name = 'Amy Wong';"}, {"question_id": 1860, "answer_sql": "SELECT T1.Position FROM Employee AS T1 INNER JOIN Has_Clearance AS T2 ON T1.EmployeeID = T2.Employee WHERE T1.Name = 'Amy Wong'"}, {"question_id": 1861, "answer_sql": "SELECT Salary, Position FROM Employee WHERE Name = 'Turanga Leela';"}, {"question_id": 1862, "answer_sql": "SELECT Salary, Position FROM Employee WHERE Name = 'Turanga Leela';"}, {"question_id": 1863, "answer_sql": "SELECT AVG(Salary) FROM Employee WHERE Position LIKE '%intern%';"}, {"question_id": 1864, "answer_sql": "SELECT AVG(Salary) FROM Employee WHERE Position = 'Intern';"}, {"question_id": 1865, "answer_sql": "SELECT Level FROM Has_Clearance WHERE Employee IN (SELECT EmployeeID FROM Employee WHERE Position = 'Physician') AND Planet IN (SELECT PlanetID FROM Planet WHERE Name = 'Galaxy');"}, {"question_id": 1866, "answer_sql": "SELECT Level FROM Has_Clearance WHERE Employee IN (SELECT EmployeeID FROM Employee WHERE Position = 'Physician') AND Planet IN (SELECT PlanetID FROM Planet WHERE Name = 'Galaxy');"}, {"question_id": 1867, "answer_sql": "SELECT T2.PackagNumber FROM Client AS T1 INNER JOIN Package AS T2 ON T1.AccountNumber = T2.Sender WHERE T1.Name = 'Leo Wong'"}, {"question_id": 1868, "answer_sql": "SELECT COUNT(T2.PackageNumber) FROM Employee AS T1 INNER JOIN Package AS T2 ON T2.Shipment = T1.EmployeeID WHERE T1.Name = 'Leo Wong'"}, {"question_id": 1869, "answer_sql": "SELECT T2.Packagenumber FROM Employee AS T1 INNER JOIN Package AS T2 ON T2.Recipient = T1.EmployeeID WHERE T1.Name = 'Leo Wong'"}, {"question_id": 1870, "answer_sql": "SELECT T2.PackageNumber FROM Employee AS T1 INNER JOIN Package AS T2 ON T2.Recipient = T1.EmployeeID WHERE T1.Name = 'Leo Wong'"}, {"question_id": 1871, "answer_sql": "SELECT DISTINCT T1.Name, T3.Name FROM Employee AS T1 INNER JOIN Shipment AS T2 ON T1.EmployeeID = T2.Manager INNER JOIN Package AS T3 ON T2.ShipmentID = T3.Shipment INNER JOIN Client AS T4 ON T3.Sender = T4.AccountNumber WHERE T1.Name = 'Leo Wong' OR T4.Name = 'Leo Wong'"}, {"question_id": 1872, "answer_sql": "SELECT DISTINCT T2.Packagenumber FROM Employee AS T1 INNER JOIN Package AS T2 ON T2.Sender = T1.EmployeeID WHERE T1.Name = 'Leo Wong' OR T1.Name = 'Gerhard Muller'"}, {"question_id": 1873, "answer_sql": "SELECT COUNT(*) FROM Package AS T1 INNER JOIN Client AS T2 ON T1.Sender = T2.AccountNumber INNER JOIN Client AS T3 ON T1.Recipient = T3.AccountNumber WHERE T2.Name = 'Ogden Wernstrom' AND T3.Name = 'Leo Wong'"}, {"question_id": 1874, "answer_sql": "SELECT COUNT(*) FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name = 'Ogden Wernstrom') AND Recipient = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong')"}, {"question_id": 1875, "answer_sql": "SELECT T1.Contents FROM Package AS T1 INNER JOIN Client AS T2 ON T1.Sender = T2.AccountNumber WHERE T2.Name = 'John Zoidfarb'"}, {"question_id": 1876, "answer_sql": "SELECT T2.Contents FROM Client AS T1 INNER JOIN Package AS T2 ON T1.AccountNumber = T2.Sender WHERE T1.Name = 'John Zoidfarb'"}, {"question_id": 1877, "answer_sql": "SELECT T2.Packagenumber, T2.Weight FROM Client AS T1 INNER JOIN Package AS T2 ON T1.AccountNumber = T2.Sender WHERE T1.Name = 'John' ORDER BY T2.Weight DESC LIMIT 1;"}, {"question_id": 1878, "answer_sql": "SELECT T1.PackageNumber, T1.Weight FROM Package AS T1 INNER JOIN Client AS T2 ON T1.Sender = T2.AccountNumber WHERE T2.Name = 'John' ORDER BY T1.Weight DESC LIMIT 1;"}, {"question_id": 1879, "answer_sql": "SELECT PackageNumber, Weight FROM (SELECT PackageNumber, Weight, ROW_NUMBER() OVER (ORDER BY Weight ASC) AS RowNum FROM Package) AS Subquery WHERE RowNum <= 3;"}, {"question_id": 1880, "answer_sql": "SELECT PackageNumber, Weight FROM (SELECT PackageNumber, Weight, ROW_NUMBER() OVER (ORDER BY Weight ASC) AS RowNum FROM Package) WHERE RowNum <= 3;"}, {"question_id": 1881, "answer_sql": "SELECT T1.Name, COUNT(*) FROM Client AS T1 INNER JOIN Package AS T2 ON T1.AccountNumber = T2.Sender GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1;"}, {"question_id": 1882, "answer_sql": "SELECT T1.Name, COUNT(*) FROM Client AS T1 INNER JOIN Package AS T2 ON T1.AccountNumber = T2.Sender GROUP BY T2.Sender ORDER BY COUNT(*) DESC LIMIT 1;"}, {"question_id": 1883, "answer_sql": "SELECT T1.Name, COUNT(*) FROM Client AS T1 INNER JOIN Package AS T2 ON T1.AccountNumber = T2.Recipient GROUP BY T1.Name ORDER BY COUNT(*) ASC LIMIT 1;"}, {"question_id": 1884, "answer_sql": "SELECT T1.Recipient, COUNT(*) FROM Package AS T1 INNER JOIN Shipment AS T2 ON T1.Shipment = T2.Shipment GROUP BY T1.Recipient ORDER BY COUNT(*) ASC LIMIT 1;"}, {"question_id": 1885, "answer_sql": "SELECT T1.Name FROM Client AS T1 INNER JOIN Package AS T2 ON T1.AccountNumber = T2.Sender GROUP BY T2.Sender HAVING COUNT(T2.PackageNumber) > 1"}, {"question_id": 1886, "answer_sql": "SELECT T1.Name FROM Client AS T1 INNER JOIN Package AS T2 ON T1.AccountNumber = T2.Sender GROUP BY T2.Sender HAVING COUNT(*) > 1"}, {"question_id": 1887, "answer_sql": "SELECT Coordinates FROM Planet WHERE Name = Mars ;"}, {"question_id": 1888, "answer_sql": "SELECT Coordinates FROM Planet WHERE Name = Mars ;"}, {"question_id": 1889, "answer_sql": "SELECT Name, Coordinates FROM Planet ORDER BY Name ASC;"}, {"question_id": 1890, "answer_sql": "SELECT Name, Coordinates FROM Planet ORDER BY Name ASC;"}, {"question_id": 1891, "answer_sql": "SELECT T2.ShipmentID FROM Employee AS T1 INNER JOIN Shipment AS T2 ON T1.EmployeeID = T2.Manager WHERE T1.Name = 'Phillip J. Fry'"}, {"question_id": 1892, "answer_sql": "SELECT T2.ShipmentID FROM Employee AS T1 INNER JOIN Shipment AS T2 ON T1.EmployeeID = T2.Manager WHERE T1.Name = 'Phillip J Fry'"}, {"question_id": 1893, "answer_sql": "SELECT Date FROM Shipment;"}, {"question_id": 1894, "answer_sql": "SELECT Date FROM Shipment;"}, {"question_id": 1895, "answer_sql": "SELECT T2.ShipmentID FROM Planet AS T1 INNER JOIN Shipment AS T2 ON T1.PlanetID = T2.Planet WHERE T1.Name = 'Mars';"}, {"question_id": 1896, "answer_sql": "SELECT T2.ShipmentID FROM Planet AS T1 INNER JOIN Shipment AS T2 ON T1.PlanetID = T2.Planet WHERE T1.Name = 'Mars';"}, {"question_id": 1897, "answer_sql": "SELECT T1.ShipmentID FROM Shipment AS T1 INNER JOIN Planet AS T2 ON T1.Planet = T2.PlanetID WHERE T2.Name = 'Mars' AND T1.Manager IN (SELECT EmployeeID FROM Employee WHERE Name = 'Turanga Leela')"}, {"question_id": 1898, "answer_sql": "SELECT T1.ShipmentID FROM Shipment AS T1 INNER JOIN Planet AS T2 ON T1.Planet = T2.PlanetID WHERE T2.Name = 'Mars' AND T1.Manager IN (SELECT EmployeeID FROM Employee WHERE Name = 'Turanga Leela')"}, {"question_id": 1899, "answer_sql": "SELECT T1.ShipmentID FROM Shipment AS T1 INNER JOIN Planet AS T2 ON T1.Planet = T2.PlanetID WHERE T2.Name = 'Mars' OR T1.Manager = (SELECT EmployeeID FROM Employee WHERE Name = 'Turanga Leela')"}, {"question_id": 1900, "answer_sql": "SELECT T2.ShipmentID FROM Employee AS T1 INNER JOIN Shipment AS T2 ON T1.EmployeeID = T2.Manager INNER JOIN Planet AS T3 ON T3.PlanetID = T2.Planet WHERE T1.Name = 'Turanga Leela' AND T3.Name = 'Mars'"}, {"question_id": 1901, "answer_sql": "SELECT T1.Name, COUNT(*) FROM Planet AS T1 INNER JOIN Shipment AS T2 ON T1.PlanetID = T2.Planet GROUP BY T1.Name;"}, {"question_id": 1902, "answer_sql": "SELECT T2.Name, COUNT(T1.Shipment) FROM Shipment AS T1 INNER JOIN Planet AS T2 ON T1.Planet = T2.PlanetID GROUP BY T2.Name;"}, {"question_id": 1903, "answer_sql": "SELECT T2.Name FROM Shipment AS T1 INNER JOIN Planet AS T2 ON T1.Planet = T2.PlanetID GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1;"}, {"question_id": 1904, "answer_sql": "SELECT T2.Name FROM Shipment AS T1 INNER JOIN Planet AS T2 ON T1.Planet = T2.PlanetID GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1;"}, {"question_id": 1905, "answer_sql": "SELECT T2.Name, COUNT(T1.ShipmentID) FROM Shipment AS T1 INNER JOIN Employee AS T2 ON T1.Manager = T2.EmployeeID GROUP BY T1.Manager;"}, {"question_id": 1906, "answer_sql": "SELECT COUNT(T2.ShipmentID) AS NumberOfShipments, T1.Name AS ManagerName FROM Employee AS T1 INNER JOIN Shipment AS T2 ON T1.EmployeeID = T2.Manager GROUP BY T1.Name;"}, {"question_id": 1907, "answer_sql": "SELECT SUM(T2.Weight) AS Total_Weight FROM Shipment AS T1 INNER JOIN Package AS T2 ON T1.ShipmentID = T2.Shipment INNER JOIN Planet AS T3 ON T3.PlanetID = T1.Planet WHERE T3.Name = 'Mars';"}, {"question_id": 1908, "answer_sql": "SELECT SUM(T2.Weight) AS Total_Weight FROM Package AS T2 JOIN Shipment AS T1 ON T2.Shipment = T1.Shipmentid JOIN Planet AS T3 ON T3.PlanetID = T1.Planet WHERE T3.Name = Mars ;"}, {"question_id": 1909, "answer_sql": "SELECT T2.Name, SUM(T1.Weight) FROM Package AS T1 INNER JOIN Shipment AS T2 ON T1.Shipment = T2.ShipmentID INNER JOIN Planet AS T3 ON T2.Planet = T3.PlanetID GROUP BY T2.Name;"}, {"question_id": 1910, "answer_sql": "SELECT T1.Name, SUM(T2.Weight) FROM Planet AS T1 INNER JOIN Package AS T2 ON T1.PlanetID = T2.Shipment GROUP BY T1.Name;"}, {"question_id": 1911, "answer_sql": "SELECT T3.Name FROM Package AS T1 INNER JOIN Shipment AS T2 ON T1.Shipment = T2.ShipmentID INNER JOIN Planet AS T3 ON T2.Planet = T3.PlanetID GROUP BY T3.Name HAVING SUM(T1.Weight) > 30"}, {"question_id": 1912, "answer_sql": "SELECT T1.Name FROM Planet AS T1 INNER JOIN Shipment AS T2 ON T1.PlanetID = T2.Planet INNER JOIN Package AS T3 ON T2.ShipmentID = T3.Shipment GROUP BY T1.Name HAVING SUM(T3.Weight) > 30;"}, {"question_id": 1913, "answer_sql": "SELECT T2.Packagenumber FROM Client AS T1 INNER JOIN Package AS T2 ON T1.AccountNumber = T2.Sender INNER JOIN Shipment AS T3 ON T2.Shipment = T3.Shipmentid INNER JOIN Planet AS T4 ON T3.Planet = T4.Planetid WHERE T4.Name = 'Omicron Persei 8' AND T1.Name = 'Zapp Brannigan'"}, {"question_id": 1914, "answer_sql": "SELECT COUNT(T2.PackageNumber) FROM Shipment AS T1 INNER JOIN Package AS T2 ON T1.ShipmentID = T2.Shipment INNER JOIN Client AS T3 ON T3.AccountNumber = T2.Sender WHERE T3.Name = 'Zapp Brannigan' AND T1.Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Omicron Persei 8')"}, {"question_id": 1915, "answer_sql": "SELECT T2.PackageNumber FROM Planet AS T1 INNER JOIN Package AS T2 ON T1.PlanetID = T2.Shipment WHERE T1.Name = 'Omicron Persei 8' OR T2.Recipient IN (SELECT EmployeeID FROM Employee WHERE Name = 'Zapp Brannigan')"}, {"question_id": 1916, "answer_sql": "SELECT COUNT(T2.PackageNumber) FROM Planet AS T1 INNER JOIN Package AS T2 ON T1.PlanetID = T2.Shipment INNER JOIN Shipment AS T3 ON T3.ShipmentID = T2.Shipment INNER JOIN Client AS T4 ON T4.AccountNumber = T2.Sender WHERE T1.Name = 'Omicron Persei 8' OR T4.Name = 'Zapp Brannigan'"}, {"question_id": 1917, "answer_sql": "SELECT PackageNumber, Weight FROM Package WHERE Weight BETWEEN 10 AND 30;"}, {"question_id": 1918, "answer_sql": "SELECT PackageNumber, Weight FROM Package WHERE Weight BETWEEN 10 AND 30;"}, {"question_id": 1919, "answer_sql": "SELECT DISTINCT e.Name FROM Employee e LEFT JOIN Has_Clearance hc ON e.EmployeeID = hc.Employee WHERE hc.Planet IS NULL AND e.Position = 'Manager' AND e.Remarks = 'Clearance in Mars';"}, {"question_id": 1920, "answer_sql": "SELECT DISTINCT T1.Name FROM Employee AS T1 JOIN Has_Clearance AS T2 ON T1.EmployeeID = T2.Employee WHERE T2.Planet = (SELECT PlanetID FROM Planet WHERE Name = Mars ) AND T2.Level < 2;"}, {"question_id": 1921, "answer_sql": "SELECT DISTINCT e.Name FROM Employee e INNER JOIN Has_Clearance hc ON e.EmployeeID = hc.Employee INNER JOIN Planet p ON hc.Planet = p.PlanetID WHERE p.Name = 'Omega III' AND hc.Level = 3;"}, {"question_id": 1922, "answer_sql": "SELECT DISTINCT e.Name FROM Employee e JOIN Has_Clearance hc ON e.EmployeeID = hc.Employee JOIN Planet p ON hc.Planet = p.PlanetID WHERE p.Name = 'Omega III';"}, {"question_id": 1923, "answer_sql": "SELECT T3.Name FROM Has_Clearance AS T1 INNER JOIN Employee AS T2 ON T1.Employee = T2.EmployeeID INNER JOIN Planet AS T3 ON T1.Planet = T3.PlanetID WHERE T1.Level = 1;"}, {"question_id": 1924, "answer_sql": "SELECT T3.Name FROM Has_Clearance AS T1 INNER JOIN Employee AS T2 ON T1.Employee = T2.EmployeeID INNER JOIN Planet AS T3 ON T1.Planet = T3.PlanetID WHERE T1.Level = 1;"}, {"question_id": 1925, "answer_sql": "SELECT Name FROM Employee WHERE Salary BETWEEN 5000 AND 10000;"}, {"question_id": 1926, "answer_sql": "SELECT Name FROM Employee WHERE Salary BETWEEN 5000 AND 10000;"}, {"question_id": 1927, "answer_sql": "SELECT Name FROM Employee WHERE Salary > (SELECT AVG(Salary) FROM Employee) OR Salary > 5000;"}, {"question_id": 1928, "answer_sql": "SELECT Name FROM Employee WHERE Salary > (SELECT AVG(Salary) FROM Employee) OR Salary > 5000;"}, {"question_id": 1929, "answer_sql": "SELECT COUNT(DISTINCT EmployeeID) FROM Employee AS T1 WHERE EmployeeID NOT IN (SELECT Employee FROM Has_Clearance AS T2 WHERE T2.Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars'))"}, {"question_id": 1930, "answer_sql": "SELECT COUNT(DISTINCT e.EmployeeID) FROM Employee e LEFT JOIN Has_Clearance hc ON e.EmployeeID = hc.Employee WHERE hc.Planet IS NULL AND hc.Level IS NULL;"}, {"question_id": 1931, "answer_sql": "SELECT count(*) FROM game;"}, {"question_id": 1932, "answer_sql": "SELECT count(*) FROM game;"}, {"question_id": 1933, "answer_sql": "SELECT Title, Developers FROM game ORDER BY Units_sold_Millions DESC;"}, {"question_id": 1934, "answer_sql": "SELECT Title, Developers FROM game ORDER BY Units_sold_Millions DESC;"}, {"question_id": 1935, "answer_sql": "SELECT AVG( Units_sold_Millions ) FROM game WHERE Franchise != Nintendo"}, {"question_id": 1936, "answer_sql": "SELECT AVG(Units_sold_Millions) FROM game WHERE Developers != 'Nintendo';"}, {"question_id": 1937, "answer_sql": "SELECT Platform_name , Market_district FROM platform;"}, {"question_id": 1938, "answer_sql": "SELECT Platform_name , Market_district FROM platform;"}, {"question_id": 1939, "answer_sql": "SELECT Platform_name , Platform_ID FROM platform WHERE Download_rank = 1;"}, {"question_id": 1940, "answer_sql": "SELECT Platform_name , Platform_ID FROM platform WHERE Download_rank = 1;"}, {"question_id": 1941, "answer_sql": "SELECT MAX (Rank_of_the_year) , MIN (Rank_of_the_year) FROM player;"}, {"question_id": 1942, "answer_sql": "SELECT MAX (Rank_of_the_year) , MIN (Rank_of_the_year) FROM player;"}, {"question_id": 1943, "answer_sql": "SELECT count(*) FROM player WHERE Rank_of_the_year < 3"}, {"question_id": 1944, "answer_sql": "SELECT COUNT (*) FROM player WHERE Rank_of_the_year <= 3"}, {"question_id": 1945, "answer_sql": "SELECT Player_name FROM player ORDER BY Player_name ASC;"}, {"question_id": 1946, "answer_sql": "SELECT Player_name FROM player ORDER BY Player_name ASC;"}, {"question_id": 1947, "answer_sql": "SELECT Player_name, College FROM player ORDER BY Rank_of_the_year DESC"}, {"question_id": 1948, "answer_sql": "SELECT Player_name, College FROM player ORDER BY Rank_of_the_year DESC;"}, {"question_id": 1949, "answer_sql": "SELECT T3.Player_name, T3.Rank_of_the_year FROM game_player AS T1 INNER JOIN game AS T2 ON T1.Game_ID = T2.Game_ID INNER JOIN player AS T3 ON T1.Player_ID = T3.Player_ID WHERE T2.Title = Super Mario World"}, {"question_id": 1950, "answer_sql": "SELECT T3.Player_name, T3.Rank_of_the_year FROM game_player AS T1 JOIN game AS T2 ON T1.Game_ID = T2.Game_ID JOIN player AS T3 ON T1.Player_ID = T3.Player_ID WHERE T2.Title = 'Super Mario World'"}, {"question_id": 1951, "answer_sql": "SELECT DISTINCT game.Developers FROM game JOIN game_player ON game.Game_ID = game_player.Game_ID JOIN player ON game_player.Player_ID = player.Player_ID WHERE player.College = 'Auburn'"}, {"question_id": 1952, "answer_sql": "SELECT DISTINCT T1.Developers FROM game AS T1 INNER JOIN game_player AS T2 ON T1.Game_ID = T2.Game_ID INNER JOIN player AS T3 ON T2.Player_ID = T3.Player_ID WHERE T3.College = 'Auburn';"}, {"question_id": 1953, "answer_sql": "SELECT AVG(Units_sold_Millions) FROM game_player AS T1 INNER JOIN game AS T2 ON T1.Game_ID = T2.Game_ID INNER JOIN player AS T3 ON T1.Player_ID = T3.Player_ID WHERE T3.Position = 'Guard'"}, {"question_id": 1954, "answer_sql": "SELECT AVG(Units_sold_Millions) FROM game AS T1 INNER JOIN game_player AS T2 ON T1.Game_ID = T2.Game_ID INNER JOIN player AS T3 ON T2.Player_ID = T3.Player_ID WHERE T3.Position = 'Guard'"}, {"question_id": 1955, "answer_sql": "SELECT T1.Title , T2.Platform_name FROM game AS T1 JOIN platform AS T2 ON T1.Platform_ID = T2.Platform_ID;"}, {"question_id": 1956, "answer_sql": "SELECT T1.Title , T2.Platform_name FROM game AS T1 JOIN platform AS T2 ON T1.Platform_ID = T2.Platform_ID;"}, {"question_id": 1957, "answer_sql": "SELECT T1.Title FROM game AS T1 INNER JOIN platform AS T2 ON T1.Platform_ID = T2.Platform_ID WHERE T2.Market_district = 'Asia' OR T2.Market_district = 'USA'"}, {"question_id": 1958, "answer_sql": "SELECT T1.Title FROM game AS T1 INNER JOIN platform AS T2 ON T1.Platform_ID = T2.Platform_ID WHERE T2.Market_district = 'Asia' OR T2.Market_district = 'USA'"}, {"question_id": 1959, "answer_sql": "SELECT Franchise , COUNT(*) FROM game GROUP BY Franchise;"}, {"question_id": 1960, "answer_sql": "SELECT Franchise , COUNT(*) FROM game GROUP BY Franchise;"}, {"question_id": 1961, "answer_sql": "SELECT Franchise FROM game GROUP BY Franchise ORDER BY COUNT(*) DESC LIMIT 1;"}, {"question_id": 1962, "answer_sql": "SELECT Franchise, COUNT(*) as Game_Count FROM game GROUP BY Franchise ORDER BY Game_Count DESC LIMIT 1;"}, {"question_id": 1963, "answer_sql": "SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(*) >= 2"}, {"question_id": 1964, "answer_sql": "SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(*) >= 2"}, {"question_id": 1965, "answer_sql": "SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM game_player)"}, {"question_id": 1966, "answer_sql": "SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM game_player);"}, {"question_id": 1967, "answer_sql": "SELECT T1.Title FROM game AS T1 INNER JOIN game_player AS T2 ON T1.Game_ID = T2.Game_ID INNER JOIN player AS T3 ON T2.Player_ID = T3.Player_ID WHERE T3.College = 'Oklahoma' INTERSECT SELECT T1.Title FROM game AS T1 INNER JOIN game_player AS T2 ON T1.Game_ID = T2.Game_ID INNER JOIN player AS T3 ON T2.Player_ID = T3.Player_ID WHERE T3.College = 'Auburn'"}, {"question_id": 1968, "answer_sql": "SELECT T3.Title FROM game_player AS T1 INNER JOIN player AS T2 ON T1.Player_ID = T2.Player_ID INNER JOIN game AS T3 ON T1.Game_ID = T3.Game_ID WHERE T2.College = 'Oklahoma' OR T2.College = 'Auburn'"}, {"question_id": 1969, "answer_sql": "SELECT DISTINCT Franchise FROM game;"}, {"question_id": 1970, "answer_sql": "SELECT DISTINCT Franchise FROM game;"}, {"question_id": 1971, "answer_sql": "SELECT title FROM game WHERE game_id NOT IN (SELECT game_id FROM game_player WHERE player_id IN (SELECT player_id FROM player WHERE position = 'Guard'));"}, {"question_id": 1972, "answer_sql": "SELECT Title FROM game WHERE Game_ID NOT IN (SELECT Game_ID FROM game_player WHERE Player_ID IN (SELECT Player_ID FROM player WHERE POSITION = 'Guard'))"}, {"question_id": 1973, "answer_sql": "SELECT Name FROM press ORDER BY Year_Profits_billion DESC"}, {"question_id": 1974, "answer_sql": "SELECT Name FROM press ORDER BY Year_Profits_billion DESC"}, {"question_id": 1975, "answer_sql": "SELECT Name FROM press WHERE Month_Profits_billion > 15 OR Year_Profits_billion > 100000000;"}, {"question_id": 1976, "answer_sql": "SELECT Name FROM press WHERE Year_Profits_billion > 15.00000001 OR Month_Profits_billion > 100000000;"}, {"question_id": 1977, "answer_sql": "SELECT avg(Year_Profits_billion), max(Year_Profits_billion) FROM press;"}, {"question_id": 1978, "answer_sql": "SELECT p.Name, AVG(p.Year_Profits_billion) AS Avg_Yearly_Profit, MAX(p.Year_Profits_billion) AS Max_Yearly_Profit FROM press p GROUP BY p.Name;"}, {"question_id": 1979, "answer_sql": "SELECT Name FROM press ORDER BY Month_Profits_billion DESC LIMIT 1;"}, {"question_id": 1980, "answer_sql": "SELECT t1.name FROM press AS t1 JOIN book AS t2 ON t1.press_id = t2.press_id GROUP BY t1.name ORDER BY t1.month_profits_billion DESC LIMIT 1;"}, {"question_id": 1981, "answer_sql": "SELECT Name FROM press ORDER BY Month_Profits_billion DESC LIMIT 1;"}, {"question_id": 1982, "answer_sql": "SELECT Name FROM press ORDER BY Month_Profits_billion DESC LIMIT 1;"}, {"question_id": 1983, "answer_sql": "SELECT COUNT(*) FROM author WHERE age < 30;"}, {"question_id": 1984, "answer_sql": "SELECT COUNT(*) FROM author WHERE Age < 30;"}, {"question_id": 1985, "answer_sql": "SELECT `Gender` , avg(`Age`) FROM `author` GROUP BY `Gender`;"}, {"question_id": 1986, "answer_sql": "SELECT Gender , AVG(Age) FROM author GROUP BY Gender;"}, {"question_id": 1987, "answer_sql": "SELECT `Gender` , COUNT(*) FROM `author` WHERE Age > 30 GROUP BY `Gender`;"}, {"question_id": 1988, "answer_sql": "SELECT `Gender` , COUNT(*) FROM `author` WHERE Age > 30 GROUP BY `Gender`;"}, {"question_id": 1989, "answer_sql": "SELECT Title FROM book ORDER BY Release_date DESC"}, {"question_id": 1990, "answer_sql": "SELECT Title FROM book ORDER BY Release_date DESC"}, {"question_id": 1991, "answer_sql": "SELECT Book_Series , COUNT(*) FROM book GROUP BY Book_Series;"}, {"question_id": 1992, "answer_sql": "SELECT Book_Series , COUNT(*) FROM book GROUP BY Book_Series;"}, {"question_id": 1993, "answer_sql": "SELECT Title, Release_date FROM book ORDER BY Sale_Amount DESC LIMIT 5;"}, {"question_id": 1994, "answer_sql": "SELECT Title, Release_date FROM book ORDER BY Sale_Amount DESC LIMIT 5;"}, {"question_id": 1995, "answer_sql": "SELECT book_series FROM book WHERE sale_amount > 1000 INTERSECT SELECT book_series FROM book WHERE sale_amount < 500"}, {"question_id": 1996, "answer_sql": "SELECT DISTINCT book_series FROM book WHERE sale_amount > 1000 INTERSECT SELECT DISTINCT book_series FROM book WHERE sale_amount < 500;"}, {"question_id": 1997, "answer_sql": "SELECT T1.Name FROM author AS T1 INNER JOIN book AS T2 ON T1.Author_ID = T2.Author_ID INNER JOIN press AS T3 ON T2.Press_ID = T3.Press_ID WHERE T3.Name IN ('MM', 'LT') GROUP BY T1.Name HAVING COUNT(DISTINCT T3.Name) = 2;"}, {"question_id": 1998, "answer_sql": "SELECT T1.Name FROM author AS T1 INNER JOIN book AS T2 ON T1.Author_ID = T2.Author_ID WHERE T2.Book_Series IN ('MM', 'LT') GROUP BY T1.Name HAVING COUNT(DISTINCT T2.Book_Series) = 2;"}, {"question_id": 1999, "answer_sql": "SELECT Name, Age FROM author WHERE Author_ID NOT IN (SELECT Author_ID FROM book)"}, {"question_id": 2000, "answer_sql": "SELECT Name FROM author WHERE Author_ID NOT IN (SELECT Author_ID FROM book)"}, {"question_id": 2001, "answer_sql": "SELECT T1.Name FROM author AS T1 JOIN book AS T2 ON T1.Author_ID = T2.Author_ID GROUP BY T1.Name HAVING COUNT(*) > 1;"}, {"question_id": 2002, "answer_sql": "SELECT T1.Name FROM author AS T1 JOIN book AS T2 ON T1.Author_ID = T2.Author_ID GROUP BY T1.Name HAVING COUNT(*) > 1;"}, {"question_id": 2003, "answer_sql": "SELECT T1.Title, T2.Name, T3.Name FROM book AS T1 INNER JOIN author AS T2 ON T1.Author_ID = T2.Author_ID INNER JOIN press AS T3 ON T1.Press_ID = T3.Press_ID ORDER BY T1.Sale_Amount DESC LIMIT 3;"}, {"question_id": 2004, "answer_sql": "SELECT T1.Title, T2.Name, T3.Name FROM book AS T1 INNER JOIN author AS T2 ON T1.Author_ID = T2.Author_ID INNER JOIN press AS T3 ON T1.Press_ID = T3.Press_ID ORDER BY T1.Sale_Amount DESC LIMIT 3;"}, {"question_id": 2005, "answer_sql": "SELECT T2.Name, SUM(T1.Sale_Amount) FROM book AS T1 INNER JOIN press AS T2 ON T1.Press_ID = T2.Press_ID GROUP BY T2.Name;"}, {"question_id": 2006, "answer_sql": "SELECT T1.Name, SUM(T2.Sale_Amount) FROM press AS T1 JOIN book AS T2 ON T1.Press_ID = T2.Press_ID GROUP BY T1.Name;"}, {"question_id": 2007, "answer_sql": "SELECT press.Name, COUNT(book.Book_ID) FROM book INNER JOIN press ON book.Press_ID = press.Press_ID WHERE book.Sale_Amount > 1000 GROUP BY press.Name;"}, {"question_id": 2008, "answer_sql": "SELECT T2.Name, COUNT(*) FROM book AS T1 INNER JOIN press AS T2 ON T1.Press_ID = T2.Press_ID WHERE T1.Sale_Amount > 1000 GROUP BY T2.Name;"}, {"question_id": 2009, "answer_sql": "SELECT T1.Name FROM author AS T1 JOIN book AS T2 ON T1.Author_ID = T2.Author_ID WHERE T2.Sale_Amount = (SELECT MAX(Sale_Amount) FROM book)"}, {"question_id": 2010, "answer_sql": "SELECT T1.Name FROM author AS T1 JOIN book AS T2 ON T1.Author_ID = T2.Author_ID ORDER BY T2.Sale_Amount DESC LIMIT 1;"}, {"question_id": 2011, "answer_sql": "SELECT T1.name, T1.gender FROM author AS T1 JOIN book AS T2 ON T1.author_id = T2.author_id GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1"}, {"question_id": 2012, "answer_sql": "SELECT T1.Name, T1.Gender FROM author AS T1 JOIN book AS T2 ON T1.Author_ID = T2.Author_ID GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1;"}, {"question_id": 2013, "answer_sql": "SELECT name FROM author WHERE author_id NOT IN (SELECT author_id FROM book WHERE press_id IN (SELECT press_id FROM press WHERE name = 'Accor'))"}, {"question_id": 2014, "answer_sql": "SELECT DISTINCT T1.Name FROM author AS T1 JOIN book AS T2 ON T1.Author_ID = T2.Author_ID WHERE T2.Press_ID != (SELECT Press_ID FROM press WHERE Name = 'Accor')"}, {"question_id": 2015, "answer_sql": "SELECT T2.Name, T2.Year_Profits_billion FROM book AS T1 INNER JOIN press AS T2 ON T1.Press_ID = T2.Press_ID GROUP BY T2.Name, T2.Year_Profits_billion HAVING COUNT(*) > 2"}, {"question_id": 2016, "answer_sql": "SELECT T1.Name, T1.Year_Profits_billion FROM press AS T1 INNER JOIN book AS T2 ON T1.Press_ID = T2.Press_ID GROUP BY T1.Name HAVING COUNT(*) > 2"}, {"question_id": 2017, "answer_sql": "SELECT count(*) FROM Authors;"}, {"question_id": 2018, "answer_sql": "SELECT author_name FROM Documents;"}, {"question_id": 2019, "answer_sql": "SELECT author_name, other_details FROM Authors;"}, {"question_id": 2020, "answer_sql": "SELECT other_details FROM Authors WHERE author_name = Addison Denesik ;"}, {"question_id": 2021, "answer_sql": "SELECT count(*) FROM Documents"}, {"question_id": 2022, "answer_sql": "SELECT author_name FROM Documents WHERE document_id = 4;"}, {"question_id": 2023, "answer_sql": "SELECT author_name FROM Documents WHERE document_name = 'Travel to Brazil';"}, {"question_id": 2024, "answer_sql": "SELECT COUNT(document_id) FROM Documents WHERE author_name = 'Era Kerluke';"}, {"question_id": 2025, "answer_sql": "SELECT document_name, document_description FROM Documents"}, {"question_id": 2026, "answer_sql": "SELECT document_id, document_name FROM Documents WHERE author_name = Bianka Cummings"}, {"question_id": 2027, "answer_sql": "SELECT author_name, other_details FROM Documents WHERE document_name = 'Travel to China';"}, {"question_id": 2028, "answer_sql": "SELECT author_name, COUNT(*) FROM Documents GROUP BY author_name"}, {"question_id": 2029, "answer_sql": "SELECT author_name FROM Documents GROUP BY author_name ORDER BY count(*) DESC LIMIT 1;"}, {"question_id": 2030, "answer_sql": "SELECT author_name FROM Documents GROUP BY author_name HAVING COUNT(*) >= 2"}, {"question_id": 2031, "answer_sql": "SELECT count(*) FROM Business_processes;"}, {"question_id": 2032, "answer_sql": "SELECT next_process_id, process_name, process_description FROM Business_Processes WHERE process_id = 9;"}, {"question_id": 2033, "answer_sql": "SELECT process_name FROM Business_Processes WHERE process_id IN (SELECT next_process_id FROM Business_Processes WHERE process_id = 9);"}, {"question_id": 2034, "answer_sql": "SELECT COUNT(*) FROM Process_Outcomes;"}, {"question_id": 2035, "answer_sql": "SELECT process_outcome_code, process_outcome_description FROM Process_Outcomes;"}, {"question_id": 2036, "answer_sql": "SELECT process_outcome_description FROM Process_Outcomes WHERE process_outcome_code = 'working';"}, {"question_id": 2037, "answer_sql": "SELECT count(*) FROM Process_Status;"}, {"question_id": 2038, "answer_sql": "SELECT process_status_code, process_status_description FROM Process_Status;"}, {"question_id": 2039, "answer_sql": "SELECT process_status_description FROM Process_Status WHERE process_status_code = 'ct';"}, {"question_id": 2040, "answer_sql": "SELECT count(*) FROM Staff;"}, {"question_id": 2041, "answer_sql": "SELECT staff_id, staff_details FROM Staff"}, {"question_id": 2042, "answer_sql": "SELECT other_details FROM Staff WHERE staff_id = 100;"}, {"question_id": 2043, "answer_sql": "SELECT count(*) FROM Ref_Staff_Roles;"}, {"question_id": 2044, "answer_sql": "SELECT staff_role_code, staff_role_description FROM Ref_Staff_Roles;"}, {"question_id": 2045, "answer_sql": "SELECT staff_role_description FROM Ref_Staff_Roles WHERE staff_role_code = 'HR';"}, {"question_id": 2046, "answer_sql": "SELECT COUNT(document_id) FROM Documents_Processes;"}, {"question_id": 2047, "answer_sql": "SELECT DISTINCT process_id FROM Documents_Processes;"}, {"question_id": 2048, "answer_sql": "SELECT document_id FROM Documents_Processes WHERE document_id NOT IN (SELECT document_id FROM Documents_Processes WHERE process_id IS NOT NULL)"}, {"question_id": 2049, "answer_sql": "SELECT process_id FROM Documents_Processes WHERE document_id IS NULL;"}, {"question_id": 2050, "answer_sql": "SELECT T2.process_outcome_description, T3.process_status_description FROM Documents_Processes AS T1 INNER JOIN Process_Outcomes AS T2 ON T1.process_outcome_code = T2.process_outcome_code INNER JOIN Process_Status AS T3 ON T1.process_status_code = T3.process_status_code WHERE T1.document_id = 0"}, {"question_id": 2051, "answer_sql": "SELECT T3.process_name FROM Documents AS T1 INNER JOIN Documents_Processes AS T2 ON T1.document_id = T2.document_id INNER JOIN Business_Processes AS T3 ON T2.process_id = T3.process_id WHERE T1.document_name = 'Travel to Brazil'"}, {"question_id": 2052, "answer_sql": "SELECT process_id , count(*) FROM Documents_Processes GROUP BY process_id"}, {"question_id": 2053, "answer_sql": "SELECT COUNT(*) FROM Staff_in_Processes WHERE document_id = 0 AND process_id = 9"}, {"question_id": 2054, "answer_sql": "SELECT staff_id , count(*) FROM Staff_in_Processes GROUP BY staff_id"}, {"question_id": 2055, "answer_sql": "SELECT Ref_Staff_Roles.staff_role_code , COUNT(Documents_Processes.document_id) FROM Ref_Staff_Roles JOIN Staff_in_Processes ON Ref_Staff_Roles.staff_role_code = Staff_in_Processes.staff_role_code JOIN Documents_Processes ON Staff_in_Processes.document_id = Documents_Processes.document_id GROUP BY Ref_Staff_Roles.staff_role_code"}, {"question_id": 2056, "answer_sql": "SELECT COUNT(DISTINCT staff_role_code) FROM Staff_in_Processes WHERE staff_id = 3;"}, {"question_id": 2057, "answer_sql": "SELECT count(*) FROM Agencies;"}, {"question_id": 2058, "answer_sql": "SELECT count(*) FROM Agencies;"}, {"question_id": 2059, "answer_sql": "SELECT agency_id , agency_details FROM Agencies;"}, {"question_id": 2060, "answer_sql": "SELECT agency_id, agency_details FROM Agencies;"}, {"question_id": 2061, "answer_sql": "SELECT count(*) FROM Clients;"}, {"question_id": 2062, "answer_sql": "SELECT count(*) FROM Clients;"}, {"question_id": 2063, "answer_sql": "SELECT client_id , client_details FROM Clients;"}, {"question_id": 2064, "answer_sql": "SELECT client_id , client_details FROM Clients;"}, {"question_id": 2065, "answer_sql": "SELECT T1.agency_id , count(*) FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id = T2.agency_id GROUP BY T1.agency_id;"}, {"question_id": 2066, "answer_sql": "SELECT T1.agency_id, COUNT(*) FROM Agencies AS T1 INNER JOIN Clients AS T2 ON T1.agency_id = T2.agency_id GROUP BY T1.agency_id;"}, {"question_id": 2067, "answer_sql": "SELECT T1.agency_id, T1.agency_details FROM Agencies AS T1 INNER JOIN Clients AS T2 ON T1.agency_id = T2.agency_id GROUP BY T1.agency_id ORDER BY COUNT(T2.client_id) DESC LIMIT 1;"}, {"question_id": 2068, "answer_sql": "SELECT T1.agency_id, T1.agency_details FROM Agencies AS T1 INNER JOIN Clients AS T2 ON T1.agency_id = T2.agency_id GROUP BY T1.agency_id ORDER BY COUNT(T2.client_id) DESC LIMIT 1;"}, {"question_id": 2069, "answer_sql": "SELECT T1.agency_id, T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id = T2.agency_id GROUP BY T1.agency_id HAVING COUNT(*) >= 2;"}, {"question_id": 2070, "answer_sql": "SELECT T1.agency_id, T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id = T2.agency_id GROUP BY T1.agency_id HAVING COUNT(*) >= 2;"}, {"question_id": 2071, "answer_sql": "SELECT T1.agency_details FROM Agencies AS T1 INNER JOIN Clients AS T2 ON T1.agency_id = T2.agency_id WHERE T2.client_details = 'Mac';"}, {"question_id": 2072, "answer_sql": "SELECT T1.agency_details FROM Agencies AS T1 INNER JOIN Clients AS T2 ON T1.agency_id = T2.agency_id WHERE T2.client_details = 'Mac';"}, {"question_id": 2073, "answer_sql": "SELECT T1.client_details, T2.agency_details FROM Clients AS T1 INNER JOIN Agencies AS T2 ON T1.agency_id = T2.agency_id;"}, {"question_id": 2074, "answer_sql": "SELECT T1.client_details, T2.agency_details FROM Clients AS T1 INNER JOIN Agencies AS T2 ON T1.agency_id = T2.agency_id;"}, {"question_id": 2075, "answer_sql": "SELECT sic_code , COUNT(*) FROM Clients GROUP BY sic_code;"}, {"question_id": 2076, "answer_sql": "SELECT sic_code , COUNT(*) FROM Clients GROUP BY sic_code;"}, {"question_id": 2077, "answer_sql": "SELECT client_id , client_details FROM Clients WHERE sic_code = Bad ;"}, {"question_id": 2078, "answer_sql": "SELECT client_details FROM Clients WHERE sic_code = 'Bad';"}, {"question_id": 2079, "answer_sql": "SELECT DISTINCT T1.agency_id , T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id = T2.agency_id;"}, {"question_id": 2080, "answer_sql": "SELECT DISTINCT T1.agency_id , T1.agency_details FROM Agencies AS T1 INNER JOIN Clients AS T2 ON T1.agency_id = T2.agency_id;"}, {"question_id": 2081, "answer_sql": "SELECT agency_id FROM Clients EXCEPT SELECT agency_id FROM Clients;"}, {"question_id": 2082, "answer_sql": "```sql SELECT agency_id FROM Agencies WHERE agency_id NOT IN (SELECT DISTINCT agency_id FROM Clients)"}, {"question_id": 2083, "answer_sql": "SELECT count(*) FROM Invoices;"}, {"question_id": 2084, "answer_sql": "SELECT count(*) FROM Invoices;"}, {"question_id": 2085, "answer_sql": "SELECT DISTINCT i.invoice_id, c.sic_code, i.invoice_details FROM clients c JOIN invoices i ON c.client_id = i.client_id;"}, {"question_id": 2086, "answer_sql": "SELECT invoice_id, invoice_status, invoice_details FROM Invoices;"}, {"question_id": 2087, "answer_sql": "SELECT client_id , COUNT(*) FROM Invoices GROUP BY client_id;"}, {"question_id": 2088, "answer_sql": "SELECT `client_id` , COUNT(*) FROM `Invoices` GROUP BY `client_id`;"}, {"question_id": 2089, "answer_sql": "SELECT T1.client_id , T1.client_details FROM Clients AS T1 JOIN Invoices AS T2 ON T1.client_id = T2.client_id GROUP BY T2.client_id ORDER BY count(*) DESC LIMIT 1;"}, {"question_id": 2090, "answer_sql": "SELECT T1.client_id , T1.client_details FROM Clients AS T1 JOIN Invoices AS T2 ON T1.client_id = T2.client_id GROUP BY T1.client_id ORDER BY COUNT(*) DESC LIMIT 1;"}, {"question_id": 2091, "answer_sql": "SELECT T2.client_id FROM Invoices AS T1 INNER JOIN Clients AS T2 ON T1.client_id = T2.client_id GROUP BY T2.client_id HAVING COUNT(*) >= 2;"}, {"question_id": 2092, "answer_sql": "SELECT T2.client_id FROM Invoices AS T1 INNER JOIN Clients AS T2 ON T1.client_id = T2.client_id GROUP BY T2.client_id HAVING COUNT(*) >= 2"}, {"question_id": 2093, "answer_sql": "SELECT invoice_status, COUNT(*) FROM Invoices GROUP BY invoice_status;"}, {"question_id": 2094, "answer_sql": "SELECT `invoice_status` , COUNT(*) FROM `Invoices` GROUP BY `invoice_status`;"}, {"question_id": 2095, "answer_sql": "SELECT invoice_status FROM Invoices GROUP BY invoice_status ORDER BY count(*) DESC LIMIT 1"}, {"question_id": 2096, "answer_sql": "SELECT invoice_status FROM Invoices GROUP BY invoice_status ORDER BY COUNT(*) DESC LIMIT 1"}, {"question_id": 2097, "answer_sql": "SELECT DISTINCT T2.invoice_status, T2.invoice_details, T1.client_id, T1.client_details, T1.agency_id, T1.agency_details FROM Clients AS T1 INNER JOIN Invoices AS T2 ON T1.client_id = T2.client_id;"}, {"question_id": 2098, "answer_sql": "SELECT T2.invoice_status, T2.invoice_details, T1.client_id, T1.client_details, T2.agency_id, T2.agency_details FROM Clients AS T1 INNER JOIN Invoices AS T2 ON T1.client_id = T2.client_id INNER JOIN Agencies AS T3 ON T1.agency_id = T3.agency_id;"}, {"question_id": 2099, "answer_sql": "SELECT DISTINCT meeting_type, other_details FROM `Meetings`;"}, {"question_id": 2100, "answer_sql": "SELECT DISTINCT meeting_type , other_details FROM `Meetings`;"}, {"question_id": 2101, "answer_sql": "SELECT DISTINCT meeting_outcome, purpose_of_meeting FROM `Meetings`;"}, {"question_id": 2102, "answer_sql": "SELECT DISTINCT meeting_outcome, purpose_of_meeting FROM `Meetings`;"}, {"question_id": 2103, "answer_sql": "SELECT Payments.payment_id, Payments.payment_details FROM Payments INNER JOIN Invoices ON Payments.invoice_id = Invoices.invoice_id WHERE Invoices.invoice_status = 'Working'"}, {"question_id": 2104, "answer_sql": "SELECT Payments.payment_id , Payments.payment_details FROM Payments JOIN Invoices ON Payments.invoice_id = Invoices.invoice_id WHERE Invoices.invoice_status = 'Working'"}, {"question_id": 2105, "answer_sql": "SELECT DISTINCT invoice_id, invoice_status FROM Invoices WHERE invoice_id NOT IN (SELECT invoice_id FROM Payments)"}, {"question_id": 2106, "answer_sql": "SELECT DISTINCT T1.invoice_id, T1.invoice_status FROM Invoices AS T1 LEFT JOIN Payments AS T2 ON T1.invoice_id = T2.invoice_id WHERE T2.payment_id IS NULL;"}, {"question_id": 2107, "answer_sql": "SELECT count(*) FROM Payments"}, {"question_id": 2108, "answer_sql": "SELECT count(*) FROM Payments"}, {"question_id": 2109, "answer_sql": "SELECT payment_id , invoice_id , payment_details FROM Payments;"}, {"question_id": 2110, "answer_sql": "SELECT payment_id , invoice_id , payment_details FROM Payments;"}, {"question_id": 2111, "answer_sql": "SELECT DISTINCT invoice_id, invoice_status FROM Payments;"}, {"question_id": 2112, "answer_sql": "SELECT DISTINCT invoice_id, invoice_status FROM Payments;"}, {"question_id": 2113, "answer_sql": "SELECT `Invoices`.`invoice_id` , COUNT(`Payments`.`payment_id` ) FROM `Invoices` JOIN `Payments` ON `Invoices`.`invoice_id` = `Payments`.`invoice_id` GROUP BY `Invoices`.`invoice_id`;"}, {"question_id": 2114, "answer_sql": "SELECT count(*) , T1.invoice_id FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id = T2.invoice_id GROUP BY T1.invoice_id"}, {"question_id": 2115, "answer_sql": "SELECT T1.invoice_id, T1.invoice_status, T1.invoice_details FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id = T2.invoice_id GROUP BY T2.invoice_id ORDER BY count(*) DESC LIMIT 1"}, {"question_id": 2116, "answer_sql": "SELECT T2.invoice_id, T2.invoice_status, T2.invoice_details FROM Payments AS T1 INNER JOIN Invoices AS T2 ON T1.invoice_id = T2.invoice_id GROUP BY T2.invoice_id ORDER BY COUNT(*) DESC LIMIT 1"}, {"question_id": 2117, "answer_sql": "SELECT count(*) FROM Staff;"}, {"question_id": 2118, "answer_sql": "SELECT count(*) FROM Staff;"}, {"question_id": 2119, "answer_sql": "SELECT T1.agency_id , count(*) FROM Agencies AS T1 JOIN Staff AS T2 ON T1.agency_id = T2.agency_id GROUP BY T1.agency_id;"}, {"question_id": 2120, "answer_sql": "SELECT T1.agency_id , count(*) FROM Agencies AS T1 JOIN Staff AS T2 ON T1.agency_id = T2.agency_id GROUP BY T1.agency_id;"}, {"question_id": 2121, "answer_sql": "SELECT T1.agency_id, T1.agency_details FROM Agencies AS T1 JOIN Staff AS T2 ON T1.agency_id = T2.agency_id GROUP BY T1.agency_id ORDER BY COUNT(*) DESC LIMIT 1;"}, {"question_id": 2122, "answer_sql": "SELECT T1.agency_id, T1.agency_details FROM Agencies AS T1 JOIN Staff AS T2 ON T1.agency_id = T2.agency_id GROUP BY T1.agency_id ORDER BY COUNT(*) DESC LIMIT 1;"}, {"question_id": 2123, "answer_sql": "SELECT meeting_outcome , COUNT(*) FROM Meetings GROUP BY meeting_outcome;"}, {"question_id": 2124, "answer_sql": "SELECT meeting_outcome , COUNT(*) FROM Meetings GROUP BY meeting_outcome;"}, {"question_id": 2125, "answer_sql": "SELECT T1.client_id , count(*) FROM Clients AS T1 JOIN Meetings AS T2 ON T1.client_id = T2.client_id GROUP BY T1.client_id"}, {"question_id": 2126, "answer_sql": "SELECT `client_id` , COUNT(*) FROM `Meetings` GROUP BY `client_id`;"}, {"question_id": 2127, "answer_sql": "SELECT `meeting_type` , COUNT(*) FROM `Meetings` GROUP BY `meeting_type`"}, {"question_id": 2128, "answer_sql": "SELECT meeting_type , COUNT(*) FROM Meetings GROUP BY meeting_type;"}, {"question_id": 2129, "answer_sql": "SELECT T1.meeting_id, T1.meeting_outcome, T1.meeting_type, T2.client_details FROM Meetings AS T1 INNER JOIN Clients AS T2 ON T1.client_id = T2.client_id;"}, {"question_id": 2130, "answer_sql": "SELECT `meeting_id` , `meeting_outcome` , `meeting_type` , `Clients`.`client_details` FROM `Meetings` JOIN `Clients` ON `Meetings`.`client_id` = `Clients`.`client_id`;"}, {"question_id": 2131, "answer_sql": "SELECT `Meetings`.`meeting_id` , COUNT(`Staff_in_Meetings`.`staff_id`) FROM `Meetings` JOIN `Staff_in_Meetings` ON `Meetings`.`meeting_id` =`Staff_in_Meetings`.`meeting_id` GROUP BY `Meetings`.`meeting_id`;"}, {"question_id": 2132, "answer_sql": "SELECT `Meetings`.`meeting_id` , COUNT(`Staff_in_Meetings`.`staff_id`) FROM `Meetings` JOIN `Staff_in_Meetings` ON `Meetings`.`meeting_id` =`Staff_in_Meetings`.`meeting_id` GROUP BY `Meetings`.`meeting_id`;"}, {"question_id": 2133, "answer_sql": "SELECT T2.staff_id , COUNT(*) FROM Staff_in_Meetings AS T1 JOIN Meetings AS T2 ON T1.meeting_id = T2.meeting_id GROUP BY T2.staff_id ORDER BY COUNT(*) ASC LIMIT 1"}, {"question_id": 2134, "answer_sql": "SELECT T1.staff_id FROM Staff AS T1 JOIN Staff_in_Meetings AS T2 ON T1.staff_id = T2.staff_id JOIN Meetings AS T3 ON T2.meeting_id = T3.meeting_id GROUP BY T1.staff_id ORDER BY count(*) ASC LIMIT 1;"}, {"question_id": 2135, "answer_sql": "SELECT COUNT(DISTINCT staff_id) FROM Staff_in_Meetings;"}, {"question_id": 2136, "answer_sql": "SELECT COUNT(DISTINCT staff_id) FROM Staff_in_Meetings;"}, {"question_id": 2137, "answer_sql": "SELECT COUNT(*) FROM Staff WHERE staff_id NOT IN (SELECT staff_id FROM Staff_in_Meetings);"}, {"question_id": 2138, "answer_sql": "SELECT COUNT(*) FROM Staff WHERE staff_id NOT IN (SELECT staff_id FROM Staff_in_Meetings);"}, {"question_id": 2139, "answer_sql": "SELECT DISTINCT T1.client_id, T1.client_details FROM Clients AS T1 INNER JOIN Meetings AS T2 ON T1.client_id = T2.client_id OR T1.client_id = T2.client_id;"}, {"question_id": 2140, "answer_sql": "SELECT T1.client_id, T1.client_details FROM Clients AS T1 INNER JOIN Meetings AS T2 ON T1.client_id = T2.client_id OR T1.client_id = T2.invoice_id;"}, {"question_id": 2141, "answer_sql": "SELECT T1.staff_id, T1.staff_details FROM Staff AS T1 JOIN Staff_in_Meetings AS T2 ON T1.staff_id = T2.staff_id GROUP BY T1.staff_id HAVING COUNT(*) >= 1 INTERSECT SELECT staff_id, staff_details FROM Staff WHERE staff_details LIKE '%s%'"}, {"question_id": 2142, "answer_sql": "SELECT DISTINCT T1.staff_id, T1.staff_details FROM Staff AS T1 JOIN Staff_in_Meetings AS T2 ON T1.staff_id = T2.staff_id JOIN Clients AS T3 ON T1.agency_id = T3.agency_id WHERE T3.sic_code = 'S' AND T1.staff_id IN ( SELECT T2.staff_id FROM Staff_in_Meetings AS T2 JOIN Meetings AS T3 ON T2.meeting_id = T3.meeting_id GROUP BY T2.staff_id HAVING COUNT(*) >= 1 );"}, {"question_id": 2143, "answer_sql": "SELECT T1.client_id, T1.sic_code, T1.agency_id FROM Clients AS T1 INNER JOIN Meetings AS T2 ON T1.client_id = T2.client_id INNER JOIN Invoices AS T3 ON T1.client_id = T3.client_id GROUP BY T1.client_id HAVING COUNT(T2.meeting_id) = 1;"}, {"question_id": 2144, "answer_sql": "SELECT T1.client_id, T1.sic_code, T1.agency_id FROM Clients AS T1 INNER JOIN Meetings AS T2 ON T1.client_id = T2.client_id INNER JOIN Invoices AS T3 ON T1.client_id = T3.client_id GROUP BY T1.client_id HAVING COUNT(*) = 1"}, {"question_id": 2145, "answer_sql": "SELECT T1.start_date_time , T1.end_date_time , T2.client_details , T3.staff_details FROM Meetings AS T1 JOIN Clients AS T2 ON T1.client_id = T2.client_id JOIN Staff AS T3 ON T1.client_id = T3.agency_id;"}, {"question_id": 2146, "answer_sql": "SELECT T1.start_date_time, T1.end_date_time, T2.client_details, T3.staff_details FROM Meetings AS T1 JOIN Clients AS T2 ON T1.client_id = T2.client_id JOIN Staff AS T3 ON T1.client_id = T3.agency_id;"}]