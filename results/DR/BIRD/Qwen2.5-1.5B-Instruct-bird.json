[{"question_id": 0, "answer_sql": "SELECT MAX(`Percent (%) Eligible Free (K-12)`) AS HighestEligibleFreeRate FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.County = 'Alameda';"}, {"question_id": 1, "answer_sql": "SELECT s.CDSCode, s.SchoolName, `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` AS EligibleFreeRate FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode JOIN satscores sa ON s.CDSCode = sa.cds WHERE s.SchoolType = 'Continuation School' ORDER BY EligibleFreeRate ASC LIMIT 3;"}, {"question_id": 2, "answer_sql": "SELECT T1.Zip FROM schools AS T1 JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`Charter School (Y/N)` = 1 AND T1.County = 'Fresno County Office of Education';"}, {"question_id": 3, "answer_sql": "SELECT AdmEmail1, AdmLName1, AdmEmail2, AdmLName2, AdmEmail3, AdmLName3 FROM schools WHERE AdmEmail1 IS NOT NULL ORDER BY FRPM Count (K-12) DESC LIMIT 1;"}, {"question_id": 4, "answer_sql": "SELECT T1.Phone FROM schools AS T1 JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`Charter School (Y/N)` = 1 AND T1.OpenDate > '2000-01-01';"}, {"question_id": 5, "answer_sql": "SELECT COUNT(DISTINCT s.CDSCode) AS num_schools FROM satscores JOIN schools s ON s.cds = satscores.cds WHERE satscores.rtype = 'SAT' AND satscores.sname IS NULL AND satscores.dname IS NULL AND satscores.cname IS NULL AND satscores.enroll12 < 400 AND s.Virtual = 'F';"}, {"question_id": 6, "answer_sql": "SELECT s.CDSCode, s.School, s.Street, s.City, s.State, s.Latitude, s.Longitude FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds WHERE ss.enroll12 > 500 AND (s.Magnet = 1 OR s.GSserved = 'Magnet')"}, {"question_id": 7, "answer_sql": "SELECT T1.Phone FROM schools AS T1 JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T2.AvgScrMath > 1500 ORDER BY T2.NumTstTakr DESC LIMIT 1;"}, {"question_id": 8, "answer_sql": "SELECT COUNT(satscores.cds) AS num_sat_test_takers FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE schools.SchoolType = 'FRPM' AND schools.SchoolName LIKE '%K-12%' ORDER BY satscores.FRPMCountK12 DESC LIMIT 1;"}, {"question_id": 9, "answer_sql": "SELECT COUNT(DISTINCT s.CDSCode) AS charter_funded_schools FROM satscores JOIN schools s ON s.cds = satscores.cds WHERE satscores.rtype = 'SAT' AND satscores.avgscrmath > 560 AND s.FundingType = 'Charter';"}, {"question_id": 10, "answer_sql": "SELECT satscores.FRPM_Count_Ages_5_17 FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE satscores.rtype = 'SAT' AND satscores.sname = 'Reading' ORDER BY satscores.AvgScrRead DESC LIMIT 1;"}, {"question_id": 11, "answer_sql": "SELECT CDSCode FROM schools WHERE (Enrollment (K-12) + Enrollment (Ages 5-17)) > 500;"}, {"question_id": 12, "answer_sql": "```sql SELECT satscores.cds, satscores.rtype, satscores.sname, satscores.dname, satscores.cname, satscores.enroll12, satscores.NumTstTakr, satscores.AvgScrRead, satscores.AvgScrMath, satscores.AvgScrWrite, satscores.NumGE1500, satscores.PctGE1500, satscores.AvgScrRead, satscores.AvgScrMath, satscores.AvgScrWrite, satscores.NumGE1500, satscores.PctGE1500, satscores.AvgScrRead, satscores.AvgScrMath, satscores.AvgScrWrite, satscores.NumGE1500, satscores.PctGE1500, satscores.AvgScrRead, satscores.AvgScrMath, satscores.AvgScrWrite, satscores.NumGE1500, satscores.PctGE1500, satscores.AvgScrRead, satscores.AvgScrMath, satscores.AvgScrWrite, satscores.NumGE1500, satscores.PctGE1500, satscores.AvgScrRead, satscores.AvgScrMath, satscores.AvgScrWrite, satscores.NumGE1500, satscores.PctGE1500, satscores.AvgScrRead, satscores.AvgScrMath, satscores.AvgScrWrite, satscores.NumGE1500, satscores.PctGE1500, satscores.AvgScrRead, satscores.AvgScrMath, satscores.AvgScrWrite, satscores.NumGE1500, satscores.PctGE1500, satscores.AvgScrRead, satscores.AvgScrMath, satscores.AvgScrWrite, satscores.NumGE1500, satscores.PctGE1500, s"}, {"question_id": 13, "answer_sql": "SELECT T1.Phone FROM schools AS T1 JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T2.AvgScrRead > 0 AND T2.AvgScrMath > 0 AND T2.AvgScrWrite > 0 ORDER BY T2.AvgScrRead + T2.AvgScrMath + T2.AvgScrWrite DESC LIMIT 3;"}, {"question_id": 14, "answer_sql": "SELECT s.CESCode, s.NCESDist, s.NCESSchool FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode JOIN satscores sa ON s.CDSCode = sa.cds GROUP BY s.CESCode, s.NCESDist, s.NCESSchool ORDER BY COUNT(sa.cds) DESC LIMIT 5;"}, {"question_id": 15, "answer_sql": "SELECT s.CDSCode, s.District, AVG(satscores.AvgScrRead) AS AvgScoreRead FROM schools s JOIN satscores ON s.CDSCode = satscores.cds WHERE s.DistrictType = 'Active' AND satscores.rtype = 'Reading' GROUP BY s.CDSCode, s.District ORDER BY AvgScoreRead DESC LIMIT 1;"}, {"question_id": 16, "answer_sql": "SELECT COUNT(schools.CDSCode) AS num_schools FROM schools JOIN frpm ON schools.CDSCode = frpm.CDSCode JOIN satscores ON schools.CDSCode = satscores.cds WHERE schools.County = 'Alameda' AND satscores.enroll12 < 100;"}, {"question_id": 17, "answer_sql": "SELECT CharterNum FROM satscores WHERE AvgScrWrite = 499;"}, {"question_id": 18, "answer_sql": "SELECT COUNT(DISTINCT s.CDSCode) AS num_schools FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode JOIN satscores sa ON s.CDSCode = sa.cds WHERE f.`County Code` = 'Contra Costa' AND f.`Funding Type` = 'Directly Funded' AND sa.NumTstTakr <= 250;"}, {"question_id": 19, "answer_sql": "SELECT AdmEmail1 FROM schools WHERE AvgScrMath = (SELECT MAX(AvgScrMath) FROM satscores) ORDER BY AdmEmail1 ASC LIMIT 1;"}, {"question_id": 20, "answer_sql": "SELECT COUNT(*) FROM schools WHERE Low Grade = '9' AND High Grade = '12' AND County = 'Amador';"}, {"question_id": 21, "answer_sql": "SELECT COUNT(*) FROM schools AS S JOIN frpm AS FR ON S.CDSCode = FR.CDSCode JOIN satscores AS SAT ON S.CDSCode = SAT.cds WHERE S.County = 'Los Angeles' AND SAT.AvgScrRead > 500 AND SAT.AvgScrMath < 700;"}, {"question_id": 22, "answer_sql": "SELECT s.CDSCode, s.School, COUNT(s.CDSCode) AS NumTstTakr FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds WHERE s.County = 'Contra Costa' GROUP BY s.CDSCode, s.School ORDER BY NumTstTakr DESC LIMIT 1;"}, {"question_id": 23, "answer_sql": "SELECT s.SchoolName, CONCAT(s.Street, ', ', s.City, ', ', s.State) AS FullStreetAddress FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode JOIN satscores sa ON s.CDSCode = sa.cds WHERE f.Enrollment(K-12) - f.Enrollment(Ages 5-17) > 30 ORDER BY f.Enrollment(K-12) - f.Enrollment(Ages 5-17) DESC;"}, {"question_id": 24, "answer_sql": "SELECT s.SchoolName FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode JOIN satscores sa ON s.CDSCode = sa.cds WHERE f.Percent_() Eligible Free (K-12) > 0.1 AND sa.AvgScrRead > 1500;"}, {"question_id": 25, "answer_sql": "SELECT FundingType FROM satscores WHERE AvgScrMath > 400 GROUP BY FundingType ORDER BY FundingType;"}, {"question_id": 26, "answer_sql": "SELECT s.CDSCode, s.School, s.Street, s.City, s.State, s.Zip, s.AdminFName1, s.AdminLName1, s.AdminEmail1, s.LastUpdate FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode JOIN satscores sa ON s.CDSCode = sa.cds WHERE f.High Grade = 'High Grade' AND f.Enrollment (Ages 5-17) > 800 AND sa.AvgScrRead IS NOT NULL AND sa.AvgScrMath IS NOT NULL AND sa.AvgScrWrite IS NOT NULL AND sa.NumGE1500 IS NOT NULL AND sa.PctGE1500 IS NOT NULL"}, {"question_id": 27, "answer_sql": "SELECT s.CDSCode, s.SchoolName, AVG(sc.AvgScrWrite) AS AvgScrWrite FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode JOIN satscores sc ON s.CDSCode = sc.cds WHERE s.OpenDate > '1991-12-31' OR s.ClosedDate < '2000-12-31' GROUP BY s.CDSCode, s.SchoolName"}, {"question_id": 28, "answer_sql": "SELECT s.CDSCode, s.DOCType FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode JOIN satscores sa ON s.CDSCode = sa.cds WHERE f.EducationalOptionType = 'Local' AND sa.enroll12 - sa.enroll517 > ( SELECT AVG(sa.enroll12 - sa.enroll517) FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode JOIN satscores sa ON s.CDSCode = sa.cds WHERE f.EducationalOptionType = 'Local' );"}, {"question_id": 29, "answer_sql": "SELECT OpenDate FROM schools WHERE Enrollment (K-12) = ( SELECT MAX(Enrollment (K-12)) FROM schools );"}, {"question_id": 30, "answer_sql": "SELECT City FROM schools WHERE SchoolType = 'K-12' ORDER BY Enrollment (K-12) ASC LIMIT 5;"}, {"question_id": 31, "answer_sql": "SELECT `Percent (%) Eligible Free (K-12)` AS eligible_free_rate FROM frpm WHERE `Low Grade` = '10th' AND `High Grade` = '11th' ORDER BY `Enrollment (K-12)` DESC LIMIT 10;"}, {"question_id": 32, "answer_sql": "SELECT s2.`Percent (%) Eligible Free (K-12)`, s2.`FRPM Count (K-12)`, s2.`Enrollment (K-12)` FROM schools s1 JOIN frpm f ON s1.CDSCode = f.CDSCode JOIN satscores s2 ON s1.CDSCode = s2.cds WHERE s1.`Ownership Code` = 66 ORDER BY s2.`FRPM Count (K-12)` DESC LIMIT 5;"}, {"question_id": 33, "answer_sql": "SELECT s.Website, s.School FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds WHERE ss.FreeMealCount BETWEEN 1900 AND 2000 AND ss.Ages517 = 1"}, {"question_id": 34, "answer_sql": "SELECT (satscores.FreeMealCountAges517 / satscores.EnrollmentAges517) AS FreeRate FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE schools.AdmFName1 = 'Kacey' AND schools.AdmLName1 = 'Gibson';"}, {"question_id": 35, "answer_sql": "SELECT AdmEmail1 FROM schools_admins WHERE Charter = 1 AND `School Name` IN ( SELECT SchoolName FROM frpm WHERE `School Type` = 'Charter School' AND `Enrollment (K-12)` > ( SELECT MIN(`Enrollment (K-12)`) FROM frpm WHERE `School Type` = 'Charter School' ) )"}, {"question_id": 36, "answer_sql": "SELECT AdmFName1, AdmLName1, AdmFName2, AdmLName2, AdmEmail1, AdmEmail2, AdmEmail3 FROM schools WHERE NumGE1500 = (SELECT MAX(NumGE1500) FROM satscores WHERE cds = schools.CDSCode) AND AdmFName1 IS NOT NULL AND AdmLName1 IS NOT NULL AND AdmFName2 IS NOT NULL AND AdmLName2 IS NOT NULL AND AdmFName3 IS NOT NULL ORDER BY AdmFName1, AdmLName1, AdmFName2, AdmLName2, AdmFName3, AdmLName3 LIMIT 1;"}, {"question_id": 37, "answer_sql": "SELECT Street, City, State, Zip FROM schools WHERE NumGE1500 = (SELECT MIN(NumGE1500) FROM schools) ORDER BY Zip ASC LIMIT 1;"}, {"question_id": 38, "answer_sql": "SELECT Website FROM schools WHERE CDSCode IN ( SELECT cds FROM satscores WHERE rtype = 'A' AND enroll12 BETWEEN 2000 AND 3000 ) AND County = 'Los Angeles County';"}, {"question_id": 39, "answer_sql": "SELECT AVG(NumTstTakr) AS AverageTestTakers FROM satscores WHERE YEAR(OpenDate) = 1980;"}, {"question_id": 40, "answer_sql": "SELECT AdmEmail1 FROM schools WHERE District = 'Fresno Unified' ORDER BY AvgScrRead ASC LIMIT 1;"}, {"question_id": 41, "answer_sql": "SELECT s.CDSCode, s.SchoolName, AVG(satscores.AvgScrRead) AS AvgScrRead FROM schools s JOIN satscores ON s.CDSCode = satscores.cds WHERE s.Virtual = 'F' GROUP BY s.CDSCode, s.SchoolName ORDER BY AvgScrRead DESC LIMIT 5;"}, {"question_id": 42, "answer_sql": "SELECT EdOpsName FROM schools WHERE AvgScrMath = (SELECT MAX(AvgScrMath) FROM satscores) ORDER BY AvgScrMath DESC LIMIT 1;"}, {"question_id": 43, "answer_sql": "SELECT s.CDSCode, s.County, AVG(s.AvgScrMath) AS AvgMathScore FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds GROUP BY s.CDSCode, s.County ORDER BY AvgMathScore ASC LIMIT 1;"}, {"question_id": 44, "answer_sql": "SELECT satscores.sname, schools.City FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE satscores.AvgScrWrite >= 1500 ORDER BY satscores.NumTstTakr DESC LIMIT 1;"}, {"question_id": 45, "answer_sql": "SELECT s.CDSCode, AVG(satscores.AvgScrWrite) AS AvgWriteScore FROM schools s JOIN schools_admins sa ON s.CDSCode = sa.CDSCode JOIN satscores ON s.CDSCode = satscores.cds WHERE sa.AdmFName1 = 'Ricci' AND sa.AdmLName1 = 'Ulrich' GROUP BY s.CDSCode;"}, {"question_id": 46, "answer_sql": "SELECT s.State, COUNT(f.CDSCode) AS TotalEnrollment FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode JOIN schools_admins sa ON s.CDSCode = sa.CDSCode WHERE s.DOC = 31 AND s.SchoolType = 'State Special School' GROUP BY s.State ORDER BY TotalEnrollment DESC LIMIT 1;"}, {"question_id": 47, "answer_sql": "SELECT COUNT(schools.CDSCode) / 12 AS MonthlyAverageSchools FROM schools WHERE DOC = '52' AND YEAR(LastUpdate) = 1980;"}, {"question_id": 48, "answer_sql": "SELECT COUNT(CASE WHEN DOC = 52 THEN CDSCode ELSE NULL END) / COUNT(CASE WHEN DOC = 54 THEN CDSCode ELSE NULL END) AS Ratio FROM schools WHERE DOC IN (52, 54);"}, {"question_id": 49, "answer_sql": "SELECT s.CDSCode, s.SchoolName, s.ClosedDate FROM schools s JOIN schools_admins sa ON s.CDSCode = sa.CDSCode WHERE s.StatusType = 'Closed' ORDER BY COUNT(s.CDSCode) DESC LIMIT 1;"}, {"question_id": 50, "answer_sql": "SELECT s.Street, s.School FROM schools s JOIN satscores sc ON s.CDSCode = sc.cds WHERE sc.rtype = 'SAT' AND sc.sname = 'Math' ORDER BY sc.AvgScrMath DESC LIMIT 1;"}, {"question_id": 51, "answer_sql": "SELECT s1.Street, s1.School FROM schools s1 JOIN satscores s2 ON s1.CDSCode = s2.cds WHERE s2.AvgScrRead = (SELECT MIN(AvgScrRead) FROM satscores) ORDER BY s1.Street LIMIT 1;"}, {"question_id": 52, "answer_sql": "SELECT COUNT(DISTINCT s1.cds) AS total_schools FROM schools s1 JOIN satscores s2 ON s1.CDSCode = s2.cds WHERE s2.AvgScrRead + s2.AvgScrMath + s2.AvgScrWrite >= 1500 AND s1.City = 'Lakeport';"}, {"question_id": 53, "answer_sql": "SELECT COUNT(T1.enroll12) AS test_takers FROM schools AS T1 JOIN satscores AS T2 ON T1.CDSCode = T2.cds JOIN schools_admins AS T3 ON T1.CDSCode = T3.CDSCode WHERE T3.City = 'Fresno';"}, {"question_id": 54, "answer_sql": "SELECT s.CDSCode, s.Street, s.City, s.State, sa.AdmEmail1, sa.LastUpdate FROM schools s JOIN schools_admins sa ON s.CDSCode = sa.CDSCode WHERE sa.SchoolCode = 'Avetik Atoian';"}, {"question_id": 55, "answer_sql": "SELECT COUNT(CASE WHEN T2.State = 'CA' THEN T1.CDSCode ELSE NULL END) / COUNT(CASE WHEN T2.State = 'CA' THEN T1.CDSCode ELSE NULL END) AS Ratio FROM schools AS T1 JOIN schools_admins AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.State = 'CA'"}, {"question_id": 56, "answer_sql": "SELECT COUNT(*) AS Active_Schools FROM schools WHERE State = 'CA' AND (AdmFName1 IS NOT NULL OR AdmLName1 IS NOT NULL OR AdmEmail1 IS NOT NULL OR AdmFName2 IS NOT NULL OR AdmLName2 IS NOT NULL OR AdmEmail2 IS NOT NULL OR AdmFName3 IS NOT NULL OR AdmLName3 IS NOT NULL OR AdmEmail3 IS NOT NULL);"}, {"question_id": 57, "answer_sql": "SELECT T1.Phone, T1.Ext FROM schools AS T1 JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T2.AvgScrWrite = (SELECT MAX(AvgScrWrite) FROM satscores) ORDER BY T2.AvgScrWrite DESC LIMIT 1;"}, {"question_id": 58, "answer_sql": "SELECT T1.Phone, T1.Ext, T2.SchoolName FROM schools AS T1 JOIN schools_admins AS T3 ON T1.CDSCode = T3.CDSCode JOIN schools AS T2 ON T1.School = T2.School WHERE T1.Zip = '95203-3704';"}, {"question_id": 59, "answer_sql": "SELECT T1.Website FROM schools_admins AS T1 JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.AdmFName1 = 'Mike Larson' OR T1.AdmFName1 = 'Dante Alvarez';"}, {"question_id": 60, "answer_sql": "SELECT T1.Website FROM schools AS T1 JOIN schools_admins AS T2 ON T1.CDSCode = T2.CDSCode JOIN schools AS T3 ON T2.SchoolCode = T3.School WHERE T1.Virtual = 'P' AND T1.Charter = 1 AND T1.County = 'San Joaquin';"}, {"question_id": 61, "answer_sql": "SELECT COUNT(*) AS chartered_schools FROM schools JOIN schools_admins ON schools.CDSCode = schools_admins.CDSCode WHERE schools.DOC = '52' AND schools_charter = 1 AND schools.City = 'Hickman';"}, {"question_id": 62, "answer_sql": "SELECT COUNT(CDSCode) AS TotalNonCharteredSchools FROM schools WHERE Charter = 0 AND `County Name` = 'Los Angeles' AND `Percent (%) Eligible Free (K-12)` < 0.18 AND `Low Grade` IS NOT NULL AND `High Grade` IS NOT NULL AND `Enrollment (K-12)` IS NOT NULL AND `Free Meal Count (K-12)` IS NOT NULL AND `Enrollment (K-12)` > 0 AND `Free Meal Count (K-12)` > 0;"}, {"question_id": 63, "answer_sql": "SELECT s.CDSCode, s.SchoolName, s.City FROM schools s JOIN schools_admins sa ON s.CDSCode = sa.CDSCode WHERE s.Charter = 1 AND sa.CharterNum = '00D2';"}, {"question_id": 64, "answer_sql": "SELECT COUNT(*) AS Total_Schools FROM schools JOIN schools_admins ON schools.CDSCode = schools_admins.CDSCode WHERE schools.MailCity = 'Hickman' AND schools_admins.CharterNum = '00D4';"}, {"question_id": 65, "answer_sql": "SELECT CAST(SUM(CASE WHEN FundingType = 'Local' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(CASE WHEN FundingType = 'Local' THEN 1 ELSE NULL END) AS Ratio FROM schools WHERE County = 'Santa Clara';"}, {"question_id": 66, "answer_sql": "SELECT COUNT(DISTINCT s.CDSCode) AS DirectlyFundedSchools FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode JOIN satscores sa ON s.CDSCode = sa.cds WHERE f.`County Code` = 'Stanislaus' AND f.`Educational Option Type` = 'Directly Funded' AND f.`OpenDate` BETWEEN '2000-01-01' AND '2005-12-31';"}, {"question_id": 67, "answer_sql": "SELECT SUM(CASE WHEN T1.CDSCode = '12345' THEN T2.enroll12 ELSE 0 END) AS Total_CCD_Closure FROM schools AS T1 JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.City = 'San Francisco' AND T1.ClosedDate BETWEEN '1989-01-01' AND '1989-12-31';"}, {"question_id": 68, "answer_sql": "SELECT County FROM schools WHERE SOC = 11 AND Year BETWEEN 1980 AND 1989 GROUP BY County ORDER BY COUNT(CDSCode) DESC LIMIT 1;"}, {"question_id": 69, "answer_sql": "```sql SELECT DISTINCT T1.DistrictCode, T1.SchoolName, T1.SchoolCode, T1.SchoolType, T1.SchoolName, T1.SchoolName, T1.SchoolName, T1.SchoolName, T1.SchoolName, T1.SchoolName, T1.SchoolName, T1.SchoolName, T1.SchoolName, T1.SchoolName, T1.SchoolName, T1.SchoolName, T1.SchoolName, T1.SchoolName, T1.SchoolName, T1.SchoolName, T1.SchoolName, T1.SchoolName, T1.SchoolName, T1.SchoolName, T1.SchoolName, T1.SchoolName, T1.SchoolName, T1.SchoolName, T1.SchoolName, T1.SchoolName, T1.SchoolName, T1.SchoolName, T1.SchoolName, T1.SchoolName, T1.SchoolName, T1.SchoolName, T1.SchoolName, T1.SchoolName, T1.SchoolName, T1.SchoolName, T1.SchoolName, T1.SchoolName, T1.SchoolName, T1.SchoolName, T1.SchoolName, T1.SchoolName, T1.SchoolName, T1.SchoolName, T1.SchoolName, T1.SchoolName, T1.SchoolName, T1.SchoolName, T1.SchoolName, T1.SchoolName, T1.SchoolName, T1.SchoolName, T1.SchoolName, T1.SchoolName, T1.SchoolName, T1.SchoolName, T1.SchoolName, T1.SchoolName, T1.SchoolName, T1.SchoolName, T1.SchoolName, T1.SchoolName, T1.SchoolName, T1.SchoolName, T1.SchoolName, T1.SchoolName, T1.SchoolName, T1.SchoolName, T1.SchoolName, T1.SchoolName, T1.SchoolName, T1.SchoolName, T1.SchoolName, T1.SchoolName, T1.SchoolName, T1.SchoolName, T1.SchoolName, T1.SchoolName, T1.SchoolName, T1.SchoolName, T1.S"}, {"question_id": 70, "answer_sql": "SELECT COUNT(*) AS DistrictCommunityDaySchools FROM schools WHERE County = 'Alpine' AND SchoolType = 'Community Day School' AND DistrictType = 'Active' AND StatusType = 'Active';"}, {"question_id": 71, "answer_sql": "SELECT DISTINCT T1.DistrictCode FROM schools AS T1 JOIN schools_admins AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.Magnet = 0 AND T2.City = 'Fresno';"}, {"question_id": 72, "answer_sql": "SELECT SUM(enroll12) AS TotalEnrollment FROM schools JOIN frpm ON schools.CDSCode = frpm.CDSCode JOIN satscores ON schools.CDSCode = satscores.cds WHERE schools.EdOpsCode = 'SSS' AND schools.County = 'Fremont' AND schools.AcademicYear = '2014-2015';"}, {"question_id": 73, "answer_sql": "SELECT s.FREEMEALCOUNT517 FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode JOIN satscores sa ON s.CDSCode = sa.cds WHERE sa.rtype = 'SATSCORE' AND sa.sname = 'Youth Authority' AND sa.cname = 'PO Box 1040';"}, {"question_id": 74, "answer_sql": "SELECT T1.Low Grade FROM schools AS T1 JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode JOIN satscores AS T3 ON T1.CDSCode = T3.cds WHERE T1.EdOpsCode = 'SPECON' AND T1.NCESDist = '613360';"}, {"question_id": 75, "answer_sql": "SELECT T1.SchoolName, T2.EdOpsName FROM schools AS T1 JOIN schools_admins AS T3 ON T1.CDSCode = T3.CDSCode JOIN frpm AS T4 ON T1.CDSCode = T4.CDSCode JOIN satscores AS T5 ON T1.CDSCode = T5.cds WHERE T4.`Educational Option Type` = 'FRPM' AND T4.`Charter School (Y/N)` = 1 AND T4.`Charter Funding Type` = '2' AND T4.`County Code` = '37';"}, {"question_id": 76, "answer_sql": "SELECT T1.City FROM schools AS T1 JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode JOIN satscores AS T3 ON T1.CDSCode = T3.cds WHERE T1.EILCode = 'HS' AND T1.LowGrade = 9 AND T1.HighGrade = 12 AND T1.County = 'Merced' AND T2.NSLPProvisionStatus = '2';"}, {"question_id": 77, "answer_sql": "SELECT s.CDSCode, (s.FreeMealCountAges5to17 / s.EnrollmentAges5to17) * 100 AS PercentEligibleFRPM FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode JOIN satscores sa ON s.CDSCode = sa.cds WHERE s.County = 'Los Angeles'"}, {"question_id": 78, "answer_sql": "SELECT `Low Grade`, `High Grade` FROM schools WHERE City = 'Adelanto' ORDER BY `Low Grade` ASC, `High Grade` ASC LIMIT 1;"}, {"question_id": 79, "answer_sql": "SELECT County, COUNT(*) AS SchoolCount FROM schools WHERE Virtual = 'F' GROUP BY County ORDER BY SchoolCount DESC LIMIT 1;"}, {"question_id": 80, "answer_sql": "SELECT T1.SchoolType, T1.Latitude FROM schools AS T1 WHERE T1.Latitude = (SELECT MAX(Latitude) FROM schools) ORDER BY T1.Latitude DESC LIMIT 1;"}, {"question_id": 81, "answer_sql": "SELECT T1.SchoolName FROM schools AS T1 JOIN schools_admins AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.State = 'CA' ORDER BY T1.Latitude ASC, T1.LowGrade ASC LIMIT 1;"}, {"question_id": 82, "answer_sql": "SELECT 'Low Grade' AS GradeSpan FROM schools WHERE Longitude = ( SELECT MAX(Longitude) FROM schools );"}, {"question_id": 83, "answer_sql": "SELECT COUNT(DISTINCT s1.CDSCode) AS schools_with_magnet_program, COUNT(DISTINCT s2.CDSCode) AS cities_with_k_to_8_span FROM schools s1 JOIN schools_admins sa ON s1.CDSCode = sa.CDSCode JOIN schools s2 ON sa.SchoolCode = s2.School WHERE s1.Magnet = 1 AND s2.GSserved = 'K-8';"}, {"question_id": 84, "answer_sql": "SELECT AdmFName1, AdmLName1, District FROM schools_admins WHERE AdmFName1 IS NOT NULL AND AdmLName1 IS NOT NULL GROUP BY AdmFName1, AdmLName1 ORDER BY COUNT(*) DESC LIMIT 2;"}, {"question_id": 85, "answer_sql": "SELECT T2.`District Code` AS DistrictCode FROM frpm AS T1 JOIN satscores AS T2 ON T1.CDSCode = T2.cds JOIN schools AS T3 ON T1.CDSCode = T3.CDSCode WHERE T3.AdmFName1 = 'Alusine' ORDER BY T2.`Percent (%) Eligible Free (K-12)` DESC;"}, {"question_id": 86, "answer_sql": "SELECT AdmLName1 AS AdministratorLastName, District, County, SchoolName FROM schools_admins WHERE SchoolCode = '40';"}, {"question_id": 87, "answer_sql": "SELECT AdmEmail1 FROM schools_admins JOIN schools ON schools_admins.CDSCode = schools.CDSCode WHERE schools.County = 'San Bernardino County' AND schools.District = 'San Bernardino City Unified' AND schools.SchoolType IN ('Public Intermediate/Middle Schools', 'Unified Schools') AND schools.OpenDate BETWEEN '2009-01-01' AND '2010-12-31';"}, {"question_id": 88, "answer_sql": "SELECT AdmEmail1, SchoolName FROM schools WHERE AvgScrGE1500 = ( SELECT MAX(AvgScrGE1500) FROM satscores WHERE AvgScrGE1500 IS NOT NULL ) AND AvgScrGE1500 >= 1500 ORDER BY AvgScrGE1500 DESC LIMIT 1;"}, {"question_id": 89, "answer_sql": "SELECT COUNT(account_id) AS account_count FROM account WHERE district_id IN (SELECT district_id FROM district WHERE A3 = 'POPLATEK PO OBRATU') AND account_id IN ( SELECT account_id FROM trans WHERE date >= (SELECT MIN(date) FROM trans) )"}, {"question_id": 90, "answer_sql": "SELECT COUNT(account_id) AS eligible_accounts FROM account WHERE district_id IN ( SELECT district_id FROM district WHERE A3 = 'Prague' ) AND account_id IN ( SELECT account_id FROM loan )"}, {"question_id": 91, "answer_sql": "SELECT district_id, AVG(A12) AS unemployment_1995, AVG(A13) AS unemployment_1996 FROM financial WHERE date BETWEEN '1995-01-01' AND '1995-12-31' UNION ALL SELECT district_id, AVG(A12) AS unemployment_1995, AVG(A13) AS unemployment_1996 FROM financial WHERE date BETWEEN '1996-01-01' AND '1996-12-31' GROUP BY district_id HAVING MAX(unemployment_1995) > MAX(unemployment_1996);"}, {"question_id": 92, "answer_sql": "SELECT COUNT(district_id) AS district_count FROM district d WHERE d.A11 > 6000 AND d.A11 < 10000 AND d.A7 = 'F';"}, {"question_id": 93, "answer_sql": "SELECT COUNT(T1.client_id) AS male_customers_count FROM client AS T1 JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A3 = 'North Bohemia' GROUP BY T1.client_id HAVING AVG(T1.birth_date) > 8000;"}, {"question_id": 94, "answer_sql": "SELECT T1.account_id, T1.district_id, T1.gender, T1.birth_date, T1.A11 AS average_salary FROM client AS T1 JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' ORDER BY T1.birth_date DESC, T1.A11 ASC LIMIT 1;"}, {"question_id": 95, "answer_sql": "SELECT DISTINCT T1.account_id FROM trans AS T1 JOIN account AS T2 ON T1.account_id = T2.account_id JOIN client AS T3 ON T2.district_id = T3.district_id WHERE T3.birth_date = ( SELECT MIN(birth_date) FROM client ) GROUP BY T1.account_id ORDER BY AVG(T3.birth_date) DESC, AVG(T3.birth_date) DESC LIMIT 1;"}, {"question_id": 96, "answer_sql": "SELECT COUNT(DISTINCT c.client_id) AS owner_count FROM client c JOIN account a ON c.district_id = a.district_id JOIN trans t ON a.account_id = t.account_id WHERE a.frequency = 'POPLATEK TYDNE' AND c.gender = 'Owner';"}, {"question_id": 97, "answer_sql": "SELECT DISTINCT c.client_id, c.gender, c.birth_date, d.A2, d.A3, d.A4, d.A5, d.A6, d.A7, d.A8, d.A9, d.A10, d.A11, d.A12, d.A13, d.A14, d.A15, d.A16 FROM client c JOIN disp d ON c.district_id = d.district_id JOIN trans t ON c.district_id = t.account_id JOIN loan l ON c.district_id = l.account_id WHERE t.type = 'POPLATEK PO OBRATU';"}, {"question_id": 98, "answer_sql": "SELECT a.account_id, a.frequency, a.date, a.amount FROM account a JOIN loan l ON a.account_id = l.account_id WHERE l.date >= '1997-01-01' AND l.date < '1998-01-01' ORDER BY a.amount ASC LIMIT 1;"}, {"question_id": 99, "answer_sql": "SELECT a.account_id, MAX(l.amount) AS max_approved_amount FROM account a JOIN loan l ON a.account_id = l.account_id WHERE l.duration > 12 AND a.date >= '1993-01-01' GROUP BY a.account_id ORDER BY max_approved_amount DESC LIMIT 1;"}, {"question_id": 100, "answer_sql": "SELECT COUNT(T1.client_id) AS female_customers FROM client AS T1 JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T1.birth_date < '1950-01-01' AND T2.A2 = 'Slokolov';"}, {"question_id": 101, "answer_sql": "SELECT DISTINCT a.account_id, a.date FROM account a WHERE a.date >= '1995-01-01' ORDER BY a.date ASC LIMIT 1;"}, {"question_id": 102, "answer_sql": "```sql SELECT DISTINCT a.account_id, a.district_id, a.frequency, a.date, a.frequency, a.date, a.frequency, a.date, a.frequency, a.date, a.frequency, a.date, a.frequency, a.date, a.frequency, a.date, a.frequency, a.date, a.frequency, a.date, a.frequency, a.date, a.frequency, a.date, a.frequency, a.date, a.frequency, a.date, a.frequency, a.date, a.frequency, a.date, a.frequency, a.date, a.frequency, a.date, a.frequency, a.date, a.frequency, a.date, a.frequency, a.date, a.frequency, a.date, a.frequency, a.date, a.frequency, a.date, a.frequency, a.date, a.frequency, a.date, a.frequency, a.date, a.frequency, a.date, a.frequency, a.date, a.frequency, a.date, a.frequency, a.date, a.frequency, a.date, a.frequency, a.date, a.frequency, a.date, a.frequency, a.date, a.frequency, a.date, a.frequency, a.date, a.frequency, a.date, a.frequency, a.date, a.frequency, a.date, a.frequency, a.date, a.frequency, a.date, a.frequency, a.date, a.frequency, a.date, a.frequency, a.date, a.frequency, a.date, a.frequency, a.date, a.frequency, a.date, a.frequency, a.date, a.frequency, a.date, a.frequency, a.date, a.frequency, a.date, a.frequency, a.date, a.frequency, a.date, a.frequency, a.date, a.frequency, a.date, a.frequency, a.date, a.frequency, a.date, a.frequency, a.date, a.frequency, a.date, a.frequency, a.date, a.frequency, a.date, a.frequency, a.date, a.frequency, a.date, a.frequency, a.date, a.frequency, a.date, a.frequency, a.date, a.frequency, a.date, a.frequency, a.date, a.frequency, a.date, a.frequency, a.date, a.frequency, a.date, a.frequency, a.date, a.frequency, a.date, a.frequency, a.date, a.frequency, a.date, a.frequency, a.date, a.frequency, a.date, a.frequency, a.date, a.frequency, a.date, a.frequency, a.date, a.frequency, a.date, a.frequency, a.date, a.frequency, a.date,"}, {"question_id": 103, "answer_sql": "SELECT client_id FROM card WHERE issued = '1994-03-03';"}, {"question_id": 104, "answer_sql": "SELECT DISTINCT a.date AS account_open_date FROM account a JOIN trans t ON a.account_id = t.account_id WHERE t.amount = 840 AND t.date = '1998-10-14';"}, {"question_id": 105, "answer_sql": "SELECT T1.district_id FROM loan AS T1 JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.date = '1994-08-25';"}, {"question_id": 106, "answer_sql": "SELECT MAX(t.amount) AS max_amount FROM trans t JOIN account a ON t.account_id = a.account_id JOIN card c ON a.account_id = c.account_id JOIN client cl ON a.district_id = cl.district_id WHERE c.issued LIKE '1996-10-21' AND cl.gender = 'M';"}, {"question_id": 107, "answer_sql": "SELECT T1.gender FROM client AS T1 JOIN account AS T2 ON T1.client_id = T2.client_id JOIN district AS T3 ON T1.district_id = T3.district_id WHERE T3.A11 = ( SELECT MAX(T4.A11) FROM district AS T4 JOIN account AS T5 ON T4.district_id = T5.district_id WHERE T5.account_id = ( SELECT T6.account_id FROM account AS T6 JOIN trans AS T7 ON T6.account_id = T7.account_id WHERE T7.type = 'OPEN' ORDER BY T7.date DESC LIMIT 1 ) ) ORDER BY T1.birth_date ASC LIMIT 1;"}, {"question_id": 108, "answer_sql": "SELECT T1.amount FROM loan AS T1 JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T2.district_id = (SELECT district_id FROM client WHERE client_id = (SELECT client_id FROM loan ORDER BY amount DESC LIMIT 1)) ORDER BY T2.district_id, T1.date LIMIT 1;"}, {"question_id": 109, "answer_sql": "SELECT COUNT(T1.client_id) AS num_clients FROM client AS T1 JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Jesenik' AND T1.gender = 'F';"}, {"question_id": 110, "answer_sql": "SELECT disp_id FROM trans WHERE amount = 5100 AND date LIKE '1998-09-02' GROUP BY disp_id;"}, {"question_id": 111, "answer_sql": "SELECT COUNT(account_id) AS num_accounts FROM account WHERE district_id = (SELECT district_id FROM district WHERE A2 = 'Litomerice') AND YEAR(date) = 1996;"}, {"question_id": 112, "answer_sql": "SELECT T1.district_id FROM client AS T1 JOIN account AS T2 ON T1.client_id = T2.client_id WHERE T1.gender = 'F' AND T1.birth_date = '1976-01-29';"}, {"question_id": 113, "answer_sql": "SELECT client.birth_date FROM client JOIN loan ON client.client_id = loan.account_id WHERE loan.amount = 98832 AND loan.date LIKE '1996-01-03';"}, {"question_id": 114, "answer_sql": "SELECT account_id FROM client WHERE district_id = (SELECT district_id FROM district WHERE A3 = 'Prague') LIMIT 1;"}, {"question_id": 115, "answer_sql": "SELECT CAST(COUNT(CASE WHEN T2.gender = 'M' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T2.client_id) AS percentage FROM client AS T1 JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'South Bohemia'"}, {"question_id": 116, "answer_sql": "SELECT c.client_id, (SUM(CASE WHEN t.type = 'credit' THEN t.amount ELSE 0 END) - SUM(CASE WHEN t.type = 'debit' THEN t.amount ELSE 0 END)) / SUM(CASE WHEN t.type = 'debit' THEN t.amount ELSE 0 END) * 100.0 AS increase_rate FROM client c JOIN account a ON c.district_id = a.district_id JOIN loan l ON a.account_id = l.account_id JOIN trans t ON a.account_id = t.account_id WHERE l.date >= '1993-07-05' AND l.date <= '1998-12-27' GROUP BY c.client_id ORDER BY increase_rate DESC;"}, {"question_id": 117, "answer_sql": "SELECT SUM(CASE WHEN T2.status = 'A' THEN T1.amount ELSE 0 END) / SUM(T1.amount) * 100 AS percentage FROM loan AS T1 JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T2.frequency = 'Monthly';"}, {"question_id": 118, "answer_sql": "SELECT (SUM(CASE WHEN T2.status = 'C' THEN T1.amount ELSE 0 END) / SUM(T1.amount)) * 100.0 AS percentage FROM loan AS T1 JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.amount < 100000;"}, {"question_id": 119, "answer_sql": "SELECT a.account_id, d.A2, d.A3 FROM account a JOIN district d ON a.district_id = d.district_id WHERE a.date BETWEEN '1993-01-01' AND '1993-12-31' AND a.frequency = 'POPLATEK PO OBRATU' AND a.date > (SELECT MAX(date) FROM trans);"}, {"question_id": 120, "answer_sql": "SELECT DISTINCT T1.account_id FROM account AS T1 JOIN client AS T2 ON T1.district_id = T2.district_id JOIN disp AS T3 ON T1.account_id = T3.account_id JOIN district AS T4 ON T3.district_id = T4.district_id WHERE T4.A2 = 'east Bohemia' AND T1.date BETWEEN '1995-01-01' AND '2000-12-31';"}, {"question_id": 121, "answer_sql": "SELECT account_id, date FROM account WHERE district_id = (SELECT district_id FROM district WHERE A2 = 'Prachatice')"}, {"question_id": 122, "answer_sql": "SELECT A2, A3 FROM district WHERE A2 = (SELECT A2 FROM account WHERE account_id = (SELECT account_id FROM loan WHERE loan_id = 4990)) AND A3 = (SELECT A3 FROM account WHERE account_id = (SELECT account_id FROM loan WHERE loan_id = 4990))"}, {"question_id": 123, "answer_sql": "SELECT account_id, district_id, A3 AS region FROM loan WHERE amount > 300000;"}, {"question_id": 124, "answer_sql": "SELECT loan.loan_id, district.A3 AS district, AVG(district.A11) AS average_salary FROM loan JOIN account ON loan.account_id = account.account_id JOIN district ON account.district_id = district.district_id GROUP BY loan.loan_id, district.A3 HAVING COUNT(loan.loan_id) > 0"}, {"question_id": 125, "answer_sql": "SELECT d.A2, d.A3, (A13 - A12) / A12 * 100 AS unemployment_increment_percentage FROM district d JOIN loan l ON d.district_id = l.district_id WHERE l.status = 'D'"}, {"question_id": 126, "answer_sql": "SELECT COUNT(account_id) * 100.0 / (SELECT COUNT(account_id) FROM account WHERE district_id = (SELECT district_id FROM district WHERE A2 = 'Decin')) AS percentage FROM account WHERE district_id = (SELECT district_id FROM district WHERE A2 = 'Decin') AND YEAR(date) = 1993;"}, {"question_id": 127, "answer_sql": "SELECT DISTINCT T1.account_id FROM trans AS T1 JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T2.frequency = 'POPLATEK MESICNE';"}, {"question_id": 128, "answer_sql": "SELECT district_id, COUNT(*) AS female_account_count FROM client WHERE gender = 'F' GROUP BY district_id ORDER BY female_account_count DESC LIMIT 10;"}, {"question_id": 129, "answer_sql": "SELECT d.A2 AS district_name, COUNT(t.trans_id) AS total_withdrawals FROM trans t JOIN account a ON t.account_id = a.account_id JOIN district d ON a.district_id = d.district_id WHERE t.type = 'VYDAJ' AND t.date LIKE '1996-01%' AND t.type != 'KREDITE' GROUP BY d.A2 ORDER BY total_withdrawals DESC LIMIT 10;"}, {"question_id": 130, "answer_sql": "SELECT COUNT(DISTINCT T1.account_id) AS no_cards FROM account AS T1 JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'South Bohemia' AND T1.frequency = 'Monthly';"}, {"question_id": 131, "answer_sql": "SELECT d.A3, MAX(T1.amount) FROM district d JOIN account a ON d.district_id = a.district_id JOIN loan T1 ON a.account_id = T1.account_id WHERE T1.status = 'C' GROUP BY d.A3 ORDER BY MAX(T1.amount) DESC LIMIT 1;"}, {"question_id": 132, "answer_sql": "SELECT AVG(loan.amount) AS average_loan_amount FROM loan JOIN account ON loan.account_id = account.account_id JOIN client ON account.client_id = client.client_id WHERE client.gender = 'M';"}, {"question_id": 133, "answer_sql": "SELECT T2.A2 AS branch_location, T2.A3 AS district_name, T1.A7 AS district_name FROM district AS T1 JOIN trans AS T2 ON T1.district_id = T2.account_id WHERE T2.date >= '1996-01-01' AND T2.date < '1997-01-01' ORDER BY T1.A7, T1.A3 DESC;"}, {"question_id": 134, "answer_sql": "SELECT COUNT(account_id) AS account_count FROM account WHERE YEAR(date) = 1996 GROUP BY district_id ORDER BY account_count DESC LIMIT 1;"}, {"question_id": 135, "answer_sql": "SELECT COUNT(account_id) AS account_count FROM trans JOIN account ON trans.account_id = account.account_id JOIN card ON account.account_id = card.account_id WHERE trans.type = 'VYBER KARTOU' AND trans.operation = 'POPLATEK MESICNE' AND account.frequency = 'POPLATEK MESICNE' AND trans.balance < 0;"}, {"question_id": 136, "answer_sql": "SELECT COUNT(loan_id) AS loan_count FROM loan WHERE frequency = 'POPLATEK MESICNE' AND amount >= 250000 AND date BETWEEN '1995-01-01' AND '1997-12-31';"}, {"question_id": 137, "answer_sql": "```sql SELECT COUNT(account_id) AS running_contract_accounts FROM account WHERE status = 'C' AND district_id IN ( SELECT district_id FROM disp WHERE account_id IN ( SELECT account_id FROM account WHERE status = 'C' AND district_id IN ( SELECT district_id FROM disp WHERE account_id IN ( SELECT account_id FROM account WHERE status = 'C' AND district_id IN ( SELECT district_id FROM disp WHERE account_id IN ( SELECT account_id FROM account WHERE status = 'C' AND district_id IN ( SELECT district_id FROM disp WHERE account_id IN ( SELECT account_id FROM account WHERE status = 'C' AND district_id IN ( SELECT district_id FROM disp WHERE account_id IN ( SELECT account_id FROM account WHERE status = 'C' AND district_id IN ( SELECT district_id FROM disp WHERE account_id IN ( SELECT account_id FROM account WHERE status = 'C' AND district_id IN ( SELECT district_id FROM disp WHERE account_id IN ( SELECT account_id FROM account WHERE status = 'C' AND district_id IN ( SELECT district_id FROM disp WHERE account_id IN ( SELECT account_id FROM account WHERE status = 'C' AND district_id IN ( SELECT district_id FROM disp WHERE account_id IN ( SELECT account_id FROM account WHERE status = 'C' AND district_id IN ( SELECT district_id FROM disp WHERE account_id IN ( SELECT account_id FROM account WHERE status = 'C' AND district_id IN ( SELECT district_id FROM disp WHERE account_id IN ( SELECT account_id FROM account WHERE status = 'C' AND district_id IN ( SELECT district_id FROM disp WHERE account_id IN ( SELECT account_id FROM account WHERE status = 'C' AND district_id IN ( SELECT district_id FROM disp WHERE account_id IN ( SELECT account_id FROM account WHERE status = 'C' AND district_id IN ( SELECT district_id FROM disp"}, {"question_id": 138, "answer_sql": "```sql SELECT COUNT(T1.client_id) AS male_clients FROM client AS T1 JOIN account AS T2 ON T1.district_id = T2.district_id JOIN trans AS T3 ON T1.district_id = T3.district_id WHERE T1.gender = 'M' AND T3.date BETWEEN '1995-01-01' AND '1995-12-31' GROUP BY T1.client_id HAVING COUNT(T1.client_id) = ( SELECT MAX(num_of_crimes) FROM ( SELECT COUNT(*) AS num_of_crimes FROM account AS T4 JOIN trans AS T5 ON T4.district_id = T5.district_id WHERE T4.district_id = ( SELECT district_id FROM account AS T6 JOIN trans AS T7 ON T6.district_id = T7.district_id WHERE T6.district_id = ( SELECT district_id FROM account AS T8 JOIN trans AS T9 ON T8.district_id = T9.district_id WHERE T8.district_id = ( SELECT district_id FROM account AS T10 JOIN trans AS T11 ON T10.district_id = T11.district_id WHERE T10.district_id = ( SELECT district_id FROM account AS T12 JOIN trans AS T13 ON T12.district_id = T13.district_id WHERE T12.district_id = ( SELECT district_id FROM account AS T14 JOIN trans AS T15 ON T14.district_id = T15.district_id WHERE T14.district_id = ( SELECT district_id FROM account AS T16 JOIN trans AS T17 ON T16.district_id = T17.district_id WHERE T16.district_id = ( SELECT district_id FROM account AS T18 JOIN trans AS T19 ON T18.district_id = T19.district_id WHERE T18.district_id = ( SELECT district_id FROM account AS T20 JOIN trans AS T21 ON T20.district_id = T21.district_id WHERE T20"}, {"question_id": 139, "answer_sql": "SELECT COUNT(T1.disp_id) AS high_level_cards FROM disp AS T1 JOIN card AS T2 ON T1.disp_id = T2.disp_id WHERE T1.type = 'gold' AND T1.type = 'disponent';"}, {"question_id": 140, "answer_sql": "SELECT COUNT(account_id) AS account_count FROM account WHERE district_id = (SELECT district_id FROM district WHERE A2 = 'Pisek');"}, {"question_id": 141, "answer_sql": "SELECT DISTINCT d.A2, d.A3, d.A4, d.A5, d.A6, d.A7, d.A8, d.A9, d.A10, d.A11, d.A12, d.A13, d.A14, d.A15, d.A16 FROM district d JOIN trans t ON d.district_id = t.account_id WHERE t.amount > 10000 AND YEAR(t.date) = 1997"}, {"question_id": 142, "answer_sql": "SELECT DISTINCT T1.account_id FROM trans AS T1 JOIN order AS T2 ON T1.account_id = T2.account_id JOIN account AS T3 ON T2.account_id = T3.account_id WHERE T2.bank_to = 'Pisek' AND T2.k_symbol = 'SIPO';"}, {"question_id": 143, "answer_sql": "SELECT DISTINCT a.account_id FROM account a JOIN card c1 ON a.account_id = c1.account_id JOIN card c2 ON a.account_id = c2.account_id WHERE c1.type = 'gold' AND c2.type = 'junior';"}, {"question_id": 144, "answer_sql": "SELECT AVG(T2.amount) AS average_amount FROM trans AS T1 JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.operation = 'VYBER KARTOU' AND YEAR(T1.date) = 2021;"}, {"question_id": 145, "answer_sql": "SELECT DISTINCT T1.client_id FROM trans AS T1 JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.type = 'VYBER KARTOU' AND T1.date BETWEEN '1998-01-01' AND '1998-12-31' GROUP BY T1.client_id HAVING SUM(T1.amount) < ( SELECT AVG(amount) FROM trans AS T3 JOIN account AS T4 ON T3.account_id = T4.account_id WHERE T3.type = 'VYBER KARTOU' AND T3.date BETWEEN '1998-01-01' AND '1998-12-31' )"}, {"question_id": 146, "answer_sql": "SELECT DISTINCT T1.client_id, T1.gender FROM client AS T1 JOIN account AS T2 ON T1.district_id = T2.district_id JOIN trans AS T3 ON T2.account_id = T3.account_id JOIN loan AS T4 ON T2.account_id = T4.account_id JOIN card AS T5 ON T5.disp_id = T3.account_id WHERE T1.gender = 'F' AND T5.type = 'C'"}, {"question_id": 147, "answer_sql": "SELECT COUNT(T1.account_id) AS female_clients_accounts FROM client AS T1 JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T2.A3 = 'south Bohemia';"}, {"question_id": 148, "answer_sql": "SELECT DISTINCT a.account_id FROM account a JOIN district d ON a.district_id = d.district_id JOIN loan l ON a.account_id = l.account_id WHERE d.A2 = 'Tabor' AND a.frequency = 'OWNER';"}, {"question_id": 149, "answer_sql": "SELECT DISTINCT T1.frequency, AVG(T2.A11) AS avg_income FROM account AS T1 JOIN district AS T3 ON T1.district_id = T3.district_id JOIN client AS T4 ON T1.district_id = T4.district_id JOIN trans AS T5 ON T1.account_id = T5.account_id WHERE T1.frequency = 'OWNER' AND T2.A11 NOT BETWEEN 8000 AND 9000 GROUP BY T1.frequency;"}, {"question_id": 150, "answer_sql": "SELECT COUNT(account_id) AS account_count FROM trans JOIN account ON trans.account_id = account.account_id JOIN district ON account.district_id = district.district_id WHERE district.A3 = 'North Bohemia' AND trans.type = 'partner';"}, {"question_id": 151, "answer_sql": "SELECT DISTINCT T1.A2, T1.A3, T1.A4, T1.A5, T1.A6, T1.A7, T1.A8, T1.A9, T1.A10, T1.A11, T1.A12, T1.A13, T1.A14, T1.A15, T1.A16 FROM district AS T1 JOIN account AS T2 ON T1.district_id = T2.district_id JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.type = 'VYDAJ'"}, {"question_id": 152, "answer_sql": "```sql SELECT AVG(A3) AS average_crimes FROM financial WHERE A15 > 4000 AND EXISTS ( SELECT 1 FROM account WHERE account_id IN ( SELECT account_id FROM trans WHERE date >= '1997-01-01' AND account_id IN ( SELECT account_id FROM account WHERE district_id IN ( SELECT district_id FROM client WHERE client_id IN ( SELECT client_id FROM disp WHERE account_id IN ( SELECT account_id FROM account WHERE district_id IN ( SELECT district_id FROM client WHERE client_id IN ( SELECT client_id FROM disp WHERE account_id IN ( SELECT account_id FROM account WHERE district_id IN ( SELECT district_id FROM client WHERE client_id IN ( SELECT client_id FROM disp WHERE account_id IN ( SELECT account_id FROM account WHERE district_id IN ( SELECT district_id FROM client WHERE client_id IN ( SELECT client_id FROM disp WHERE account_id IN ( SELECT account_id FROM account WHERE district_id IN ( SELECT district_id FROM client WHERE client_id IN ( SELECT client_id FROM disp WHERE account_id IN ( SELECT account_id FROM account WHERE district_id IN ( SELECT district_id FROM client WHERE client_id IN ( SELECT client_id FROM disp WHERE account_id IN ( SELECT account_id FROM account WHERE district_id IN ( SELECT district_id FROM client WHERE client_id IN ( SELECT client_id FROM disp WHERE account_id IN ( SELECT account_id FROM account WHERE district_id IN ( SELECT district_id FROM client WHERE client_id IN ( SELECT client_id FROM disp WHERE account_id IN ( SELECT account_id FROM account WHERE district_id IN ( SELECT district_id FROM client WHERE client_id IN ( SELECT client_id FROM disp WHERE account_id IN ( SELECT account_id FROM account WHERE district_id"}, {"question_id": 153, "answer_sql": "SELECT COUNT(*) AS loan_eligible_cards FROM card WHERE type = 'CLASSIC' AND disp_id IN ( SELECT disp_id FROM disp WHERE account_id IN ( SELECT account_id FROM account WHERE frequency = 'OWNER' ) );"}, {"question_id": 154, "answer_sql": "SELECT COUNT(T1.client_id) AS male_clients FROM client AS T1 JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Hl.m. Praha' AND T1.gender = 'M';"}, {"question_id": 155, "answer_sql": "SELECT (COUNT(CASE WHEN type = 'gold' AND issued < '1998-01-01' THEN 1 ELSE NULL END) / COUNT(CASE WHEN type = 'gold' THEN 1 ELSE NULL END)) * 100 AS gold_card_percentage FROM card"}, {"question_id": 156, "answer_sql": "SELECT T1.client_id, T1.gender, T1.birth_date, T1.district_id FROM client AS T1 JOIN account AS T2 ON T1.district_id = T2.district_id JOIN loan AS T3 ON T2.account_id = T3.account_id WHERE T3.amount = (SELECT MAX(amount) FROM loan) ORDER BY T1.district_id ASC LIMIT 1;"}, {"question_id": 157, "answer_sql": "SELECT COUNT(A15) AS committed_crimes FROM account WHERE account_id = 532 AND YEAR(date) = 1995;"}, {"question_id": 158, "answer_sql": "SELECT T1.district_id FROM trans AS T1 JOIN order AS T2 ON T1.account_id = T2.account_id WHERE T2.order_id = 33333;"}, {"question_id": 159, "answer_sql": "SELECT t1.date, t1.type, t1.operation, t1.amount, t1.balance, t1.k_symbol, t1.bank, t1.account FROM trans AS t1 JOIN account AS t2 ON t1.account_id = t2.account_id JOIN client AS t3 ON t2.district_id = t3.district_id WHERE t1.type = 'VYBER' AND t3.client_id = 3356;"}, {"question_id": 160, "answer_sql": "SELECT COUNT(*) FROM account a JOIN loan l ON a.account_id = l.account_id WHERE a.frequency = 'POPLATEK TYDNE' AND l.amount < 200000;"}, {"question_id": 161, "answer_sql": "SELECT T2.type FROM client AS T1 JOIN disp AS T2 ON T1.client_id = T2.client_id JOIN account AS T3 ON T1.district_id = T3.district_id JOIN trans AS T4 ON T3.account_id = T4.account_id WHERE T1.client_id = 13539;"}, {"question_id": 162, "answer_sql": "SELECT A3 FROM client WHERE client_id = 3541;"}, {"question_id": 163, "answer_sql": "SELECT d.A2, d.A3, d.A4, d.A5, d.A6, d.A7, d.A8, d.A9, d.A10, d.A11, d.A12, d.A13, d.A14, d.A15, d.A16 FROM district d JOIN account a ON d.district_id = a.district_id JOIN loan l ON a.account_id = l.account_id WHERE l.status = 'A' GROUP BY d.district_id ORDER BY COUNT(l.account_id) DESC LIMIT 1;"}, {"question_id": 164, "answer_sql": "SELECT `order`.order_id, `order`.account_id, `order`.bank_to, `order`.account_to, `order`.amount, `order`.k_symbol FROM `order` WHERE `order`.order_id = 32423;"}, {"question_id": 165, "answer_sql": "SELECT t1.date, t1.type, t1.operation, t1.amount, t1.balance, t1.k_symbol, t1.bank, t1.account FROM trans t1 JOIN account t2 ON t1.account_id = t2.account_id JOIN district t3 ON t2.district_id = t3.district_id WHERE t3.A5 = '5'"}, {"question_id": 166, "answer_sql": "SELECT COUNT(account_id) AS account_count FROM account WHERE district_id = (SELECT district_id FROM district WHERE A2 = 'Jesenik');"}, {"question_id": 167, "answer_sql": "SELECT DISTINCT c.client_id FROM client c JOIN disp d ON c.district_id = d.district_id JOIN card k ON d.account_id = k.account_id WHERE k.issued > '1996-01-01';"}, {"question_id": 168, "answer_sql": "SELECT COUNT(CASE WHEN T2.gender = 'F' THEN 1 ELSE NULL END) / COUNT(T2.client_id) * 100 FROM client AS T1 JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A11 > 10000"}, {"question_id": 169, "answer_sql": "SELECT (SUM(CASE WHEN T2.date >= '1997-01-01' THEN T2.amount ELSE 0 END) - SUM(CASE WHEN T2.date >= '1996-01-01' THEN T2.amount ELSE 0 END)) / SUM(CASE WHEN T2.date >= '1996-01-01' THEN T2.amount ELSE 0 END) * 100 AS growth_rate FROM loan AS T1 JOIN account AS T2 ON T1.account_id = T2.account_id JOIN client AS T3 ON T2.district_id = T3.district_id WHERE T3.gender = 'M'"}, {"question_id": 170, "answer_sql": "SELECT COUNT(*) FROM trans WHERE operation = 'VYBER KARTOU' AND date > '1995-12-31';"}, {"question_id": 171, "answer_sql": "SELECT SUM(CASE WHEN T3.A3 = 'North Bohemia' THEN 1 ELSE 0 END) - SUM(CASE WHEN T3.A3 = 'East Bohemia' THEN 1 ELSE 0 END) AS difference FROM trans AS T1 JOIN account AS T2 ON T1.account_id = T2.account_id JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T3.A3 IN ('North Bohemia', 'East Bohemia') AND T1.date BETWEEN '1996-01-01' AND '1996-12-31'"}, {"question_id": 172, "answer_sql": "SELECT COUNT(DISTINCT T1.disp_id) AS owner_dispositions, COUNT(DISTINCT T2.disp_id) AS disponent_dispositions FROM account AS T1 JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T1.account_id BETWEEN 1 AND 10;"}, {"question_id": 173, "answer_sql": "SELECT frequency, SUM(amount) AS total_amount FROM account JOIN loan ON account.account_id = loan.account_id WHERE account_id = 3 GROUP BY frequency;"}, {"question_id": 174, "answer_sql": "SELECT birth_date FROM client WHERE client_id = (SELECT account_id FROM account WHERE account_id = 130);"}, {"question_id": 175, "answer_sql": "SELECT COUNT(DISTINCT a.account_id) AS account_count FROM account a JOIN trans t ON a.account_id = t.account_id JOIN disp d ON a.account_id = d.account_id JOIN client c ON d.client_id = c.client_id WHERE t.type = 'POPLATEK PO OBRATU' AND c.gender = 'M' AND c.birth_date < '1990-01-01';"}, {"question_id": 176, "answer_sql": "SELECT SUM(loan.amount) AS total_debt, client.client_id, client.gender, client.birth_date, client.district_id FROM loan JOIN account ON loan.account_id = account.account_id JOIN client ON account.district_id = client.district_id WHERE client.client_id = 992 GROUP BY client.client_id, client.gender, client.birth_date, client.district_id ORDER BY client.client_id;"}, {"question_id": 177, "answer_sql": "SELECT SUM(trans.amount) AS total_amount, client.gender FROM trans JOIN account ON trans.account_id = account.account_id JOIN client ON account.client_id = client.client_id WHERE trans.trans_id = 851 AND client.client_id = 4 GROUP BY client.gender;"}, {"question_id": 178, "answer_sql": "SELECT DISTINCT c.type FROM client c JOIN disp d ON c.district_id = d.district_id JOIN card k ON d.account_id = k.account_id WHERE c.client_id = 9;"}, {"question_id": 179, "answer_sql": "SELECT SUM(trans.amount) AS total_payment FROM trans JOIN account ON trans.account_id = account.account_id JOIN client ON account.district_id = client.district_id WHERE trans.date BETWEEN '1998-01-01' AND '1998-12-31' AND client.client_id = 617;"}, {"question_id": 180, "answer_sql": "SELECT DISTINCT c.client_id, c.district_id FROM client c JOIN account a ON c.district_id = a.district_id JOIN trans t ON a.account_id = t.account_id WHERE c.birth_date BETWEEN '1983-01-01' AND '1987-12-31' AND a.district_id IN (SELECT district_id FROM district WHERE A3 = 'East Bohemia');"}, {"question_id": 181, "answer_sql": "SELECT DISTINCT T1.client_id FROM client AS T1 JOIN loan AS T2 ON T1.client_id = T2.account_id WHERE T1.gender = 'F' ORDER BY T2.amount DESC LIMIT 3;"}, {"question_id": 182, "answer_sql": "SELECT COUNT(T1.client_id) AS male_customers FROM client AS T1 JOIN account AS T2 ON T1.district_id = T2.district_id JOIN trans AS T3 ON T1.client_id = T3.account_id WHERE T1.gender = 'M' AND T1.birth_date BETWEEN '1974-01-01' AND '1976-12-31' AND T3.type = 'SIPO' AND T3.amount > 4000;"}, {"question_id": 183, "answer_sql": "SELECT COUNT(account_id) AS account_count FROM account WHERE district_id = (SELECT district_id FROM district WHERE A2 = 'Beroun') AND date > '1996-12-31';"}, {"question_id": 184, "answer_sql": "SELECT COUNT(T1.client_id) AS female_customers_with_junior_card FROM client AS T1 JOIN card AS T2 ON T1.client_id = T2.client_id WHERE T1.gender = 'F' AND T2.type = 'junior';"}, {"question_id": 185, "answer_sql": "SELECT COUNT(CASE WHEN T2.gender = 'F' THEN 1 ELSE NULL END) * 100 / COUNT(T2.client_id) AS female_clients_percentage FROM client AS T1 JOIN disp AS T2 ON T1.client_id = T2.client_id JOIN account AS T3 ON T1.district_id = T3.district_id WHERE T1.district_id = (SELECT district_id FROM district WHERE A3 = 'Prague');"}, {"question_id": 186, "answer_sql": "SELECT CAST(COUNT(CASE WHEN gender = 'M' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(*) AS percentage FROM client WHERE gender = 'M' AND frequency = 'POPLATEK TYDNE';"}, {"question_id": 187, "answer_sql": "SELECT COUNT(DISTINCT c.client_id) AS client_count FROM client c JOIN account a ON c.district_id = a.district_id JOIN trans t ON a.account_id = t.account_id WHERE a.frequency = 'POPLATEK TYDNE';"}, {"question_id": 188, "answer_sql": "SELECT a.account_id, a.date, a.amount FROM account a JOIN loan l ON a.account_id = l.account_id WHERE l.date >= DATE('now', '-24 months') ORDER BY a.amount ASC, a.date ASC LIMIT 1;"}, {"question_id": 189, "answer_sql": "SELECT DISTINCT T1.account_id FROM account AS T1 JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.gender = 'F' ORDER BY T1.district_id, T1.date DESC LIMIT 1;"}, {"question_id": 190, "answer_sql": "SELECT COUNT(DISTINCT c.client_id) AS client_count FROM client c JOIN district d ON c.district_id = d.district_id WHERE d.A3 = 'East Bohemia' AND YEAR(c.birth_date) = 1920;"}, {"question_id": 191, "answer_sql": "SELECT COUNT(*) FROM loan WHERE frequency = 'POPLATEK TYDNE' AND duration = 24;"}, {"question_id": 192, "answer_sql": "SELECT AVG(loan.amount) AS average_loan_amount FROM loan JOIN trans ON loan.account_id = trans.account_id WHERE loan.status = 'C' AND trans.type = 'POPLATEK PO OBRATU';"}, {"question_id": 193, "answer_sql": "SELECT DISTINCT c.client_id, d.district_id FROM client c JOIN account a ON c.district_id = a.district_id JOIN trans t ON a.account_id = t.account_id WHERE c.client_id = ( SELECT DISTINCT account_id FROM account WHERE frequency = 'permanent' AND status = 'active' ) OR ( SELECT DISTINCT account_id FROM loan WHERE account_id = a.account_id );"}, {"question_id": 194, "answer_sql": "SELECT DISTINCT c.client_id, c.birth_date, DATEDIFF(CURDATE(), c.birth_date) AS age FROM client c JOIN card k ON c.client_id = k.client_id WHERE k.type = 'gold' AND c.district_id IN ( SELECT district_id FROM account WHERE frequency = 'monthly' AND date >= '2020-01-01' )"}, {"question_id": 195, "answer_sql": "SELECT bond_type FROM bond GROUP BY bond_type ORDER BY COUNT(bond_type) DESC LIMIT 1;"}, {"question_id": 196, "answer_sql": "SELECT COUNT(T1.atom_id) AS chlorine_atoms FROM atom AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-' AND T1.element = 'cl';"}, {"question_id": 197, "answer_sql": "SELECT AVG(COUNT(element)) AS average_oxygen_atoms FROM atom WHERE element = 'o' AND bond_id IS NULL;"}, {"question_id": 198, "answer_sql": "SELECT AVG(COUNT(DISTINCT atom_id)) AS average_carcinogenic_molecules FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+' AND connected.bond_id IS NOT NULL AND connected.bond_type = '-'"}, {"question_id": 199, "answer_sql": "SELECT COUNT(DISTINCT atom_id) FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE element = 'na' AND molecule.label = '-'"}, {"question_id": 200, "answer_sql": "SELECT DISTINCT T1.molecule_id FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id AND T1.atom_id2 = T2.atom_id2 JOIN bond AS T3 ON T2.bond_id = T3.bond_id JOIN molecule AS T4 ON T4.molecule_id = T3.molecule_id WHERE T3.bond_type = '#' AND T4.label = '+'"}, {"question_id": 201, "answer_sql": "SELECT CAST(COUNT(CASE WHEN element = 'c' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(atom_id) FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE bond_type = ' = '"}, {"question_id": 202, "answer_sql": "SELECT COUNT(bond_id) AS triple_type_bonds FROM connected WHERE bond_id IS NOT NULL AND bond_type = '#';"}, {"question_id": 203, "answer_sql": "SELECT COUNT(DISTINCT atom_id) AS no_bromine_atoms FROM atom WHERE element != 'br';"}, {"question_id": 204, "answer_sql": "SELECT COUNT(molecule_id) AS carcinogenic_count FROM molecule WHERE molecule_id BETWEEN 'TR000' AND 'TR099' AND label = '+' LIMIT 100;"}, {"question_id": 205, "answer_sql": "SELECT DISTINCT T1.molecule_id FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id JOIN atom AS T3 ON T2.atom_id2 = T3.atom_id JOIN molecule AS T4 ON T3.molecule_id = T4.molecule_id WHERE T3.element = 'si';"}, {"question_id": 206, "answer_sql": "SELECT DISTINCT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR004_8_9' AND atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')"}, {"question_id": 207, "answer_sql": "SELECT DISTINCT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = ' = ' AND atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')"}, {"question_id": 208, "answer_sql": "SELECT T1.label FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id JOIN connected AS T3 ON T2.atom_id2 = T3.atom_id JOIN molecule AS T4 ON T1.molecule_id = T4.molecule_id WHERE T1.element = 'h' GROUP BY T1.label ORDER BY COUNT(T1.label) DESC LIMIT 1;"}, {"question_id": 209, "answer_sql": "SELECT bond_type FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id JOIN bond ON connected.bond_id = bond.bond_id WHERE element = 'te';"}, {"question_id": 210, "answer_sql": "SELECT atom_id, atom_id2 FROM connected WHERE bond_id IS NOT NULL AND bond_type = '-' GROUP BY atom_id, atom_id2 HAVING COUNT(DISTINCT bond_id) = 1;"}, {"question_id": 211, "answer_sql": "SELECT atom_id, atom_id2 FROM connected WHERE atom_id = atom_id2 AND label = '-'"}, {"question_id": 212, "answer_sql": "SELECT element FROM atom WHERE molecule_id IN ( SELECT molecule_id FROM molecule WHERE label = '-' ) GROUP BY element ORDER BY COUNT(*) ASC LIMIT 1;"}, {"question_id": 213, "answer_sql": "SELECT bond_type FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN atom atom2 ON connected.atom_id2 = atom2.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE atom.atom_id = 'TR004_8' AND atom2.atom_id = 'TR004_20';"}, {"question_id": 214, "answer_sql": "SELECT label FROM molecule WHERE molecule_id NOT IN ( SELECT DISTINCT molecule_id FROM atom WHERE element = 'sn' )"}, {"question_id": 215, "answer_sql": "SELECT COUNT(atom_id) AS atom_count FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id JOIN bond ON connected.bond_id = bond.bond_id WHERE element = 'i' AND bond_type = '-'"}, {"question_id": 216, "answer_sql": "SELECT atom_id, atom_id2 FROM connected WHERE bond_id IN ( SELECT bond_id FROM bond WHERE bond_type = '#' )"}, {"question_id": 217, "answer_sql": "SELECT atom_id FROM connected WHERE atom_id2 IN ( SELECT atom_id FROM atom WHERE molecule_id = 'TR181' ) OR atom_id IN ( SELECT atom_id FROM atom WHERE molecule_id = 'TR181' )"}, {"question_id": 218, "answer_sql": "SELECT CAST(COUNT(CASE WHEN element = 'f' THEN molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(molecule_id) AS percent FROM molecule WHERE label = '+' AND element = 'f';"}, {"question_id": 219, "answer_sql": "SELECT SUM(CASE WHEN bond_type = '#' THEN 1 ELSE 0 END) * 100 / COUNT(bond_id) AS percent FROM bond WHERE label = '+' AND bond_type = '#';"}, {"question_id": 220, "answer_sql": "SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR000' ORDER BY atom.element ASC LIMIT 3;"}, {"question_id": 221, "answer_sql": "SELECT atom_id, atom_id2 FROM connected WHERE atom_id = 'TR001' AND atom_id2 = 'TR001' AND bond_id = 'TR001_2_6';"}, {"question_id": 222, "answer_sql": "SELECT SUM(label = '+') - SUM(label = '-') AS difference FROM molecule;"}, {"question_id": 223, "answer_sql": "SELECT atom_id FROM connected WHERE atom_id2 = 'TR_000_2_5' AND bond_id IS NOT NULL;"}, {"question_id": 224, "answer_sql": "SELECT bond_id FROM connected WHERE atom_id2 = 'TR000_2'"}, {"question_id": 225, "answer_sql": "SELECT T1.label FROM molecule AS T1 JOIN connected AS T2 ON T1.molecule_id = T2.atom_id JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = ' = ' ORDER BY T1.label ASC LIMIT 5;"}, {"question_id": 226, "answer_sql": "SELECT CAST(COUNT(CASE WHEN bond_type = ' = ' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(bond_id) AS percent FROM bond JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule_id = 'TR008';"}, {"question_id": 227, "answer_sql": "SELECT CAST(SUM(CASE WHEN T1.label = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.molecule_id) AS percent FROM molecule AS T1 JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id JOIN connected AS T3 ON T2.atom_id = T3.atom_id1 OR T2.atom_id = T3.atom_id2 JOIN bond AS T4 ON T3.bond_id = T4.bond_id WHERE T4.bond_type = 'C'"}, {"question_id": 228, "answer_sql": "SELECT CAST(SUM(CASE WHEN T1.element = 'h' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.atom_id) AS percent FROM atom AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = 'TR206'"}, {"question_id": 229, "answer_sql": "SELECT bond_type FROM bond WHERE molecule_id = 'TR000' AND bond_id IN ( SELECT bond_id FROM connected WHERE atom_id = 'TR000' OR atom_id2 = 'TR000' )"}, {"question_id": 230, "answer_sql": "SELECT atom.element, molecule.label FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR060';"}, {"question_id": 231, "answer_sql": "SELECT bond_type, COUNT(*) AS bond_count FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+' AND molecule.molecule_id = 'TR018' GROUP BY bond_type ORDER BY bond_count DESC LIMIT 1;"}, {"question_id": 232, "answer_sql": "SELECT DISTINCT T1.molecule_id FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id AND T1.atom_id2 = T2.atom_id JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '-' ORDER BY T1.label ASC, T1.molecule_id ASC LIMIT 3;"}, {"question_id": 233, "answer_sql": "SELECT bond.bond_id FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR006' ORDER BY bond.bond_id LIMIT 2;"}, {"question_id": 234, "answer_sql": "SELECT COUNT(bond_id) AS bond_count FROM connected WHERE atom_id = 'TR009_12' OR atom_id2 = 'TR009_12' AND bond_id LIKE 'TR009_%';"}, {"question_id": 235, "answer_sql": "SELECT COUNT(DISTINCT T1.molecule_id) AS carcinogenic_molecules FROM atom AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id JOIN connected AS T3 ON T1.atom_id = T3.atom_id AND T1.atom_id2 = T3.atom_id2 JOIN bond AS T4 ON T3.bond_id = T4.bond_id WHERE T2.label = '+' AND T1.element = 'br';"}, {"question_id": 236, "answer_sql": "SELECT bond_type, atom_id, atom_id2 FROM connected WHERE bond_id = 'TR001_6_9';"}, {"question_id": 237, "answer_sql": "SELECT m.label AS molecule_label, CASE WHEN m.label = '+' THEN 'Yes' ELSE 'No' END AS is_carcinogenic FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id JOIN connected c ON a.atom_id = c.atom_id AND a.atom_id2 = c.atom_id2 WHERE a.atom_id = 'TR001_10';"}, {"question_id": 238, "answer_sql": "SELECT COUNT(DISTINCT T1.molecule_id) AS molecule_count FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id AND T1.atom_id2 = T2.atom_id2 JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '#';"}, {"question_id": 239, "answer_sql": "SELECT COUNT(bond_id) AS connection_count FROM connected WHERE atom_id = 'TR%_19' AND atom_id2 = 'TR%_19';"}, {"question_id": 240, "answer_sql": "SELECT DISTINCT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR004' AND atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')"}, {"question_id": 241, "answer_sql": "SELECT COUNT(DISTINCT molecule_id) AS non_carcinogenic_molecules FROM molecule WHERE label = '-';"}, {"question_id": 242, "answer_sql": "SELECT DISTINCT T1.molecule_id FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id JOIN molecule AS T3 ON T2.molecule_id = T3.molecule_id WHERE T1.atom_id BETWEEN '21' AND '25' AND T3.label = '+'"}, {"question_id": 243, "answer_sql": "SELECT bond.bond_id FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.element = 'p' AND atom.element = 'n';"}, {"question_id": 244, "answer_sql": "SELECT m.label FROM molecule m JOIN connected c ON m.molecule_id = c.atom_id JOIN atom a ON c.atom_id = a.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = ' = ' AND m.label = '+' GROUP BY m.label ORDER BY COUNT(*) DESC LIMIT 1;"}, {"question_id": 245, "answer_sql": "SELECT AVG(COUNT(bond_id)) AS average_bonds FROM atom WHERE element = 'i' GROUP BY atom_id;"}, {"question_id": 246, "answer_sql": "SELECT bond_type, bond_id FROM atom WHERE atom_id = '45';"}, {"question_id": 247, "answer_sql": "SELECT DISTINCT atom.element FROM atom WHERE atom.atom_id NOT IN ( SELECT atom_id FROM connected )"}, {"question_id": 248, "answer_sql": "SELECT atom_id FROM connected WHERE atom_id2 = 'TR447' AND bond_id IN ( SELECT bond_id FROM bond WHERE bond_type = '#' )"}, {"question_id": 249, "answer_sql": "SELECT DISTINCT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE connected.bond_id = 'TR144_8_19' AND atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')"}, {"question_id": 250, "answer_sql": "SELECT m.label FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id JOIN connected c ON a.atom_id = c.atom_id AND a.atom_id2 = c.atom_id2 JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = ' = ' AND m.label = '+' GROUP BY m.label ORDER BY COUNT(*) DESC LIMIT 1;"}, {"question_id": 251, "answer_sql": "SELECT element FROM atom WHERE molecule_id IN ( SELECT molecule_id FROM molecule WHERE label = '+' ) GROUP BY element ORDER BY COUNT(*) ASC LIMIT 1;"}, {"question_id": 252, "answer_sql": "SELECT atom_id FROM atom WHERE element = 'pb' AND atom_id IN (SELECT atom_id2 FROM connected WHERE atom_id = 'pb')"}, {"question_id": 253, "answer_sql": "SELECT DISTINCT element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond_type = '#' AND element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')"}, {"question_id": 254, "answer_sql": "SELECT CAST(COUNT(bond_id) AS REAL) / COUNT(atom_id) * 100 FROM connected WHERE atom_id = atom_id2 GROUP BY atom_id ORDER BY COUNT(atom_id) DESC LIMIT 1;"}, {"question_id": 255, "answer_sql": "SELECT SUM(CASE WHEN T2.label = '+' THEN 1 ELSE 0 END) / COUNT(T2.bond_id) AS proportion FROM connected AS T1 JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T2.bond_type = '-'"}, {"question_id": 256, "answer_sql": "SELECT COUNT(atom_id) AS total_atoms FROM atom WHERE element IN ('c', 'h');"}, {"question_id": 257, "answer_sql": "SELECT atom_id2 FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE element = 's';"}, {"question_id": 258, "answer_sql": "SELECT bond_type FROM bond JOIN atom ON bond.molecule_id = atom.molecule_id WHERE element = 'sn';"}, {"question_id": 259, "answer_sql": "SELECT COUNT(DISTINCT atom_id) AS element_count FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE bond_type = '-' GROUP BY atom_id"}, {"question_id": 260, "answer_sql": "SELECT COUNT(DISTINCT atom_id) AS total_atoms FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE bond_type = '#' AND element IN ('p', 'br')"}, {"question_id": 261, "answer_sql": "SELECT bond.bond_id FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON connected.atom_id = atom.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+'"}, {"question_id": 262, "answer_sql": "SELECT DISTINCT T1.molecule_id FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id AND T1.atom_id2 = T2.atom_id2 JOIN molecule AS T3 ON T1.molecule_id = T3.molecule_id WHERE T3.label = '-' AND T2.bond_id IS NULL;"}, {"question_id": 263, "answer_sql": "SELECT SUM(CASE WHEN element = 'cl' THEN 1 ELSE 0 END) * 100 / COUNT(atom_id) AS percent FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE element = 'cl' AND bond_type = '-'"}, {"question_id": 264, "answer_sql": "SELECT label FROM molecule WHERE molecule_id IN ('TR000', 'TR001', 'TR002');"}, {"question_id": 265, "answer_sql": "SELECT molecule_id FROM molecule WHERE label = '-'"}, {"question_id": 266, "answer_sql": "SELECT COUNT(T1.molecule_id) AS total_carcinogenic_molecules FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id AND T1.atom_id2 = T2.atom_id2 JOIN molecule AS T3 ON T1.molecule_id = T3.molecule_id WHERE T3.label = '+'"}, {"question_id": 267, "answer_sql": "SELECT bond_type FROM bond WHERE molecule_id IN ('TR000', 'TR001', 'TR002', 'TR003', 'TR004', 'TR005', 'TR006', 'TR007', 'TR008', 'TR009', 'TR010', 'TR011', 'TR012', 'TR013', 'TR014', 'TR015', 'TR016', 'TR017', 'TR018', 'TR019', 'TR020', 'TR021', 'TR022', 'TR023', 'TR024', 'TR025', 'TR026', 'TR027', 'TR028', 'TR029', 'TR030', 'TR031', 'TR032', 'TR033', 'TR034', 'TR035', 'TR036', 'TR037', 'TR038', 'TR039', 'TR040', 'TR041', 'TR042', 'TR043', 'TR044', 'TR045', 'TR046', 'TR047', 'TR048', 'TR049', 'TR050')"}, {"question_id": 268, "answer_sql": "SELECT element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR001_10_11' AND atom.element = 'cl';"}, {"question_id": 269, "answer_sql": "SELECT COUNT(bond_id) AS bond_count FROM bond JOIN atom ON bond.molecule_id = atom.molecule_id WHERE atom.element = 'i';"}, {"question_id": 270, "answer_sql": "SELECT CASE WHEN T2.label = '+' THEN 'Carcinogenic' WHEN T2.label = '-' THEN 'Non-Carcinogenic' END AS Label, COUNT(T1.molecule_id) AS Count FROM atom T1 JOIN connected T2 ON T1.atom_id = T2.atom_id1 JOIN molecule T3 ON T1.molecule_id = T3.molecule_id WHERE T1.element = 'Ca' GROUP BY T1.element ORDER BY Count DESC;"}, {"question_id": 271, "answer_sql": "SELECT EXISTS ( SELECT 1 FROM connected c JOIN atom a ON c.atom_id = a.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE a.element = 'cl' AND a2.element = 'c' AND b.bond_id = 'TR001_1_8' )"}, {"question_id": 272, "answer_sql": "SELECT DISTINCT T1.molecule_id FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id AND T1.atom_id2 = T2.atom_id2 JOIN bond AS T3 ON T2.bond_id = T3.bond_id JOIN molecule AS T4 ON T4.molecule_id = T3.molecule_id WHERE T1.element = 'c' AND T3.bond_type = '#' AND T4.label = '-'"}, {"question_id": 273, "answer_sql": "SELECT CAST(COUNT(CASE WHEN element = 'cl' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(molecule_id) AS percentage FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE element = 'cl' AND label = '+';"}, {"question_id": 274, "answer_sql": "SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR001';"}, {"question_id": 275, "answer_sql": "SELECT DISTINCT T1.molecule_id FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id AND T1.atom_id2 = T2.atom_id2 JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = ' = ';"}, {"question_id": 276, "answer_sql": "SELECT atom_id, atom_id2 FROM connected WHERE bond_id IN ( SELECT bond_id FROM bond WHERE bond_type = '#' ) LIMIT 2;"}, {"question_id": 277, "answer_sql": "SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR005_16_26' AND atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')"}, {"question_id": 278, "answer_sql": "SELECT COUNT(T1.molecule_id) AS non_carcinogenic_molecules FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id AND T1.atom_id2 = T2.atom_id2 JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '-' AND T1.element = 'C';"}, {"question_id": 279, "answer_sql": "SELECT label FROM molecule WHERE molecule_id IN ( SELECT molecule_id FROM atom WHERE atom_id IN ( SELECT atom_id FROM connected WHERE atom_id2 = 'TR001_10_11' AND bond_id = 'TR001_10_11' ) )"}, {"question_id": 280, "answer_sql": "SELECT bond_id FROM connected WHERE bond_type = '#' AND atom_id = atom_id2 AND atom_id = atom_id2 AND molecule_id IN ( SELECT molecule_id FROM atom WHERE element = 'C' ) AND label IN ('+', '-')"}, {"question_id": 281, "answer_sql": "SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE connected.atom_id2 = '4' AND molecule.label = '+' AND atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')"}, {"question_id": 282, "answer_sql": "SELECT SUM(CASE WHEN element = 'h' THEN 1 ELSE 0 END) / COUNT(element) AS ratio, label FROM atom WHERE molecule_id = 'TR006' GROUP BY label;"}, {"question_id": 283, "answer_sql": "SELECT label FROM molecule WHERE element = 'ca';"}, {"question_id": 284, "answer_sql": "SELECT bond_type FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE element = 'te';"}, {"question_id": 285, "answer_sql": "SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR001_10_11' AND atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')"}, {"question_id": 286, "answer_sql": "SELECT CAST(COUNT(CASE WHEN bond_type = '#' THEN 1 END) AS REAL) * 100 / COUNT(*) FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond_type = '#';"}, {"question_id": 287, "answer_sql": "SELECT (SUM(CASE WHEN T2.bond_type = ' = ' THEN 1 ELSE 0 END) * 100) / COUNT(T2.bond_id) AS percent FROM atom AS T1 JOIN connected AS T3 ON T1.atom_id = T3.atom_id JOIN bond AS T2 ON T3.bond_id = T2.bond_id JOIN molecule AS T4 ON T1.molecule_id = T4.molecule_id WHERE T4.molecule_id = 'TR047';"}, {"question_id": 288, "answer_sql": "SELECT label FROM molecule WHERE atom_id IN ( SELECT atom_id FROM atom WHERE atom_id = 'TR001_1' ) AND label = '+'"}, {"question_id": 289, "answer_sql": "SELECT label FROM molecule WHERE label = '+'"}, {"question_id": 290, "answer_sql": "SELECT element FROM atom WHERE molecule_id = (SELECT molecule_id FROM molecule WHERE label = 'TR151') AND element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')"}, {"question_id": 291, "answer_sql": "SELECT COUNT(DISTINCT T1.molecule_id) AS carcinogenic_compounds FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id JOIN molecule AS T3 ON T1.molecule_id = T3.molecule_id WHERE T3.label = '+';"}, {"question_id": 292, "answer_sql": "SELECT atom_id FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE element = 'c' AND molecule_id BETWEEN 'TR010' AND 'TR050'"}, {"question_id": 293, "answer_sql": "SELECT COUNT(DISTINCT atom_id) AS atom_count FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+';"}, {"question_id": 294, "answer_sql": "SELECT bond_id FROM connected WHERE atom_id IN ( SELECT atom_id FROM atom WHERE molecule_id IN ( SELECT molecule_id FROM molecule WHERE label = '+' ) AND bond_type = ' = ' ) AND atom_id2 IN ( SELECT atom_id FROM atom WHERE molecule_id IN ( SELECT molecule_id FROM molecule WHERE label = '+' ) AND bond_type = ' = ' );"}, {"question_id": 295, "answer_sql": "SELECT COUNT(DISTINCT atom_id) FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE element = 'h' AND label = '+'"}, {"question_id": 296, "answer_sql": "SELECT DISTINCT T1.molecule_id FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id AND T1.atom_id2 = T2.atom_id2 JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = 'TR00_1_2' AND T1.element = 'TR00_1';"}, {"question_id": 297, "answer_sql": "SELECT atom_id FROM atom WHERE element = 'c' AND atom_id NOT IN ( SELECT atom_id FROM connected WHERE atom_id IN ( SELECT atom_id FROM atom WHERE element = 'c' ) )"}, {"question_id": 298, "answer_sql": "SELECT CAST(SUM(CASE WHEN T1.label = '+' AND T1.element = 'h' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.molecule_id) AS percentage FROM molecule AS T1 JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id JOIN connected AS T3 ON T2.atom_id = T3.atom_id1 AND T2.atom_id2 = T3.atom_id2 JOIN atom AS T4 ON T3.bond_id = T4.bond_id WHERE T4.element = 'h';"}, {"question_id": 299, "answer_sql": "SELECT label FROM molecule WHERE label = '+';"}, {"question_id": 300, "answer_sql": "SELECT atom_id FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR186';"}, {"question_id": 301, "answer_sql": "SELECT bond_type FROM bond WHERE bond_id IN (SELECT bond_id FROM connected WHERE atom_id = 'TR007_4_19' AND atom_id2 = 'TR007_4_19')"}, {"question_id": 302, "answer_sql": "SELECT DISTINCT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR001_2_4' AND atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')"}, {"question_id": 303, "answer_sql": "SELECT COUNT(bond_id) AS double_bonds FROM connected JOIN atom ON connected.atom_id = atom.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id JOIN bond ON connected.bond_id = bond.bond_id WHERE molecule.label = '+' AND bond.bond_type = ' = ';"}, {"question_id": 304, "answer_sql": "SELECT DISTINCT atom.element, molecule.label FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca') AND molecule.label = '+'"}, {"question_id": 305, "answer_sql": "SELECT bond.bond_id, atom.element, atom2.element FROM bond JOIN atom ON bond.atom_id = atom.atom_id JOIN atom atom2 ON bond.atom_id2 = atom2.atom_id WHERE bond.bond_type = '-'"}, {"question_id": 306, "answer_sql": "SELECT DISTINCT T1.molecule_id, T1.label, T2.element FROM molecule AS T1 JOIN connected AS T3 ON T1.molecule_id = T3.atom_id JOIN atom AS T2 ON T3.atom_id = T2.atom_id WHERE T3.bond_id IN (SELECT bond_id FROM bond WHERE bond_type = '#')"}, {"question_id": 307, "answer_sql": "SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = 'TR000_2_3' AND atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')"}, {"question_id": 308, "answer_sql": "SELECT COUNT(bond_id) AS bond_count FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN atom AS cl_atom ON connected.atom_id2 = cl_atom.atom_id WHERE cl_atom.element = 'cl';"}, {"question_id": 309, "answer_sql": "SELECT atom_id, COUNT(DISTINCT bond_type) AS num_bond_types FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = 'TR346' GROUP BY atom_id;"}, {"question_id": 310, "answer_sql": "SELECT COUNT(DISTINCT T1.molecule_id) AS molecule_count, COUNT(T1.molecule_id) AS carcinogenic_molecule_count FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id AND T1.atom_id2 = T2.atom_id2 JOIN bond AS T3 ON T2.bond_id = T3.bond_id JOIN molecule AS T4 ON T4.molecule_id = T3.molecule_id WHERE T3.bond_type = ' = ' AND T4.label = '+';"}, {"question_id": 311, "answer_sql": "SELECT COUNT(DISTINCT T1.molecule_id) FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id AND T1.atom_id2 = T2.atom_id2 JOIN molecule AS T3 ON T1.molecule_id = T3.molecule_id WHERE T1.element = 's' AND T2.bond_id IS NULL;"}, {"question_id": 312, "answer_sql": "SELECT label FROM molecule WHERE molecule_id IN ( SELECT molecule_id FROM atom WHERE atom_id IN ( SELECT atom_id FROM connected WHERE atom_id2 = 'TR001_2_4' AND bond_id = ( SELECT bond_id FROM bond WHERE bond_id = 'TR001_2_4' ) ) )"}, {"question_id": 313, "answer_sql": "SELECT COUNT(DISTINCT atom_id) AS atom_count FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR005';"}, {"question_id": 314, "answer_sql": "SELECT COUNT(bond_id) AS single_bonds FROM bond WHERE bond_type = '-';"}, {"question_id": 315, "answer_sql": "SELECT DISTINCT T1.molecule_id FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id JOIN molecule AS T3 ON T1.molecule_id = T3.molecule_id WHERE T1.element = 'cl' AND T3.label = '+'"}, {"question_id": 316, "answer_sql": "SELECT DISTINCT T1.molecule_id FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id JOIN molecule AS T3 ON T1.molecule_id = T3.molecule_id WHERE T1.element = 'c' AND T3.label = '-'"}, {"question_id": 317, "answer_sql": "SELECT CAST(SUM(CASE WHEN T1.label = '+' AND T1.element = 'cl' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.molecule_id) AS percentage FROM molecule AS T1 JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id JOIN connected AS T3 ON T2.atom_id = T3.atom_id AND T2.atom_id2 = T3.atom_id2 JOIN atom AS T4 ON T3.bond_id = T4.bond_id AND T4.element = 'cl'"}, {"question_id": 318, "answer_sql": "SELECT T1.molecule_id FROM connected AS T1 JOIN atom AS T2 ON T1.atom_id = T2.atom_id JOIN atom AS T3 ON T1.atom_id2 = T3.atom_id JOIN bond AS T4 ON T1.bond_id = T4.bond_id WHERE T4.bond_id = 'TR001_1_7';"}, {"question_id": 319, "answer_sql": "SELECT COUNT(DISTINCT atom_id) AS element_count FROM connected WHERE bond_id = 'TR001_3_4' AND element = 'cl';"}, {"question_id": 320, "answer_sql": "SELECT bond_type FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.atom_id = 'TR000_1' AND atom.atom_id2 = 'TR000_2';"}, {"question_id": 321, "answer_sql": "SELECT T1.label FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id JOIN atom AS T3 ON T2.atom_id2 = T3.atom_id JOIN molecule AS T4 ON T3.molecule_id = T4.molecule_id WHERE T1.atom_id = 'TR000_2' AND T3.atom_id = 'TR000_4';"}, {"question_id": 322, "answer_sql": "SELECT element FROM atom WHERE atom_id = 'TR000_1';"}, {"question_id": 323, "answer_sql": "SELECT label FROM molecule WHERE molecule_id = 'TR000';"}, {"question_id": 324, "answer_sql": "SELECT (SUM(CASE WHEN bond_type = '-' THEN 1 ELSE 0 END) * 100) / COUNT(bond_id) AS percentage FROM bond WHERE bond_type = '-'"}, {"question_id": 325, "answer_sql": "SELECT COUNT(DISTINCT T1.molecule_id) AS carcinogenic_molecules FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id AND T1.atom_id2 = T2.atom_id2 JOIN molecule AS T3 ON T1.molecule_id = T3.molecule_id WHERE T1.element = 'n' AND T3.label = '+';"}, {"question_id": 326, "answer_sql": "SELECT DISTINCT T1.molecule_id FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id JOIN atom AS T3 ON T2.atom_id2 = T3.atom_id JOIN bond AS T4 ON T2.bond_id = T4.bond_id WHERE T1.element = 's' AND T4.bond_type = ' = '"}, {"question_id": 327, "answer_sql": "SELECT label FROM molecule WHERE label = '-' AND COUNT(DISTINCT atom_id) > 5;"}, {"question_id": 328, "answer_sql": "SELECT DISTINCT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN molecule m ON m.molecule_id = c.atom_id2 JOIN bond b ON b.bond_id = c.bond_id WHERE b.bond_type = '=' AND m.label = 'TR024' AND a.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')"}, {"question_id": 329, "answer_sql": "SELECT T1.label FROM molecule AS T1 JOIN connected AS T2 ON T1.molecule_id = T2.atom_id GROUP BY T1.label ORDER BY COUNT(T2.atom_id) DESC LIMIT 1;"}, {"question_id": 330, "answer_sql": "SELECT CAST(SUM(CASE WHEN T1.element = 'h' AND T1.bond_type = '#' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.molecule_id) FROM atom AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+';"}, {"question_id": 331, "answer_sql": "SELECT COUNT(DISTINCT molecule_id) AS carcinogenic_molecules FROM molecule WHERE label = '+';"}, {"question_id": 332, "answer_sql": "SELECT COUNT(DISTINCT T1.molecule_id) AS single_bonds_count FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id AND T1.atom_id2 = T2.atom_id2 JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '-' AND T1.molecule_id BETWEEN 'TR004' AND 'TR010';"}, {"question_id": 333, "answer_sql": "SELECT COUNT(DISTINCT atom_id) AS carbons FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE element = 'c';"}, {"question_id": 334, "answer_sql": "SELECT T1.element FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id JOIN molecule AS T3 ON T1.molecule_id = T3.molecule_id WHERE T3.label = '-' AND T2.atom_id = 'TR004_7' AND T1.element = 'cl';"}, {"question_id": 335, "answer_sql": "SELECT COUNT(DISTINCT T1.molecule_id) AS total_molecules FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id AND T1.atom_id2 = T2.atom_id2 JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = ' = ' AND T1.element = 'o';"}, {"question_id": 336, "answer_sql": "SELECT COUNT(DISTINCT T1.molecule_id) FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id AND T1.atom_id2 = T2.atom_id2 JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '#' AND T1.label != '-'"}, {"question_id": 337, "answer_sql": "SELECT atom.element, bond.bond_type FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR016';"}, {"question_id": 338, "answer_sql": "SELECT atom_id FROM connected WHERE atom_id = 'TR012' AND atom_id2 = 'TR012' AND bond_id = (SELECT bond_id FROM bond WHERE bond_type = ' = ' AND molecule_id = (SELECT molecule_id FROM molecule WHERE label = 'TR012'))"}, {"question_id": 339, "answer_sql": "SELECT atom_id FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+' AND element = 'o';"}, {"question_id": 340, "answer_sql": "SELECT c.id, c.name, c.cardKingdomFoilId, c.cardKingdomId FROM cards c JOIN sets s ON c.setCode = s.code WHERE c.cardKingdomFoilId = c.cardKingdomId AND c.cardKingdomId IS NOT NULL;"}, {"question_id": 341, "answer_sql": "SELECT DISTINCT c.id, c.name, c.borderColor, c.cardKingdomFoilId, c.cardKingdomId FROM cards c WHERE c.borderColor IS NULL AND c.cardKingdomFoilId IS NULL AND c.cardKingdomId IS NOT NULL;"}, {"question_id": 342, "answer_sql": "SELECT name FROM cards WHERE faceConvertedManaCost = (SELECT MAX(faceConvertedManaCost) FROM cards)"}, {"question_id": 343, "answer_sql": "SELECT c.* FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE l.frameVersion = '2015' AND l.edhrecRank < 100;"}, {"question_id": 344, "answer_sql": "SELECT c.name FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.rarity = 'mythic' AND l.status = 'Banned' AND l.format = 'gladiator';"}, {"question_id": 345, "answer_sql": "SELECT legalities.format, legalities.status, legalities.uuid FROM legalities JOIN cards ON legalities.uuid = cards.uuid WHERE cards.types = 'Artifact' AND cards.side IS NULL AND legalities.format = 'vintage';"}, {"question_id": 346, "answer_sql": "SELECT c.id, c.artist FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.power = '*' OR c.power IS NULL AND l.format = 'commander' AND l.status = 'Legal';"}, {"question_id": 347, "answer_sql": "SELECT c.id, c.artist, c.name, r.text, CASE WHEN c.hasContentWarning = 1 THEN 'Yes' ELSE 'No' END AS hasMissingOrDegradedProperties FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid JOIN rulings r ON c.uuid = r.uuid WHERE c.artist = 'Stephen Daniel';"}, {"question_id": 348, "answer_sql": "SELECT r.text FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.name = 'Sublime Epiphany' AND c.number = '74s';"}, {"question_id": 349, "answer_sql": "SELECT cards.name, cards.artist, IF(isPromo = 1, 'Yes', 'No') AS isPromo FROM cards JOIN rulings ON cards.uuid = rulings.uuid GROUP BY cards.uuid ORDER BY count(rulings.uuid) DESC LIMIT 1;"}, {"question_id": 350, "answer_sql": "SELECT T2.language FROM cards AS T1 JOIN set_translations AS T2 ON T1.uuid = T2.setCode WHERE T1.name = 'annul' AND T1.number = '29';"}, {"question_id": 351, "answer_sql": "SELECT name FROM cards WHERE language = 'Japanese';"}, {"question_id": 352, "answer_sql": "SELECT CAST(SUM(CASE WHEN T2.language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.id) FROM cards AS T1 JOIN set_translations AS T2 ON T1.uuid = T2.setCode;"}, {"question_id": 353, "answer_sql": "SELECT s.id AS setId, s.name AS setCode, COUNT(c.id) AS totalCards FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.language = 'Italian' GROUP BY s.id, s.name ORDER BY s.name;"}, {"question_id": 354, "answer_sql": "SELECT COUNT(DISTINCT type) AS type_count FROM cards WHERE artist = 'Aaron Boyd';"}, {"question_id": 355, "answer_sql": "SELECT keywords FROM cards WHERE name = 'Angel of Mercy';"}, {"question_id": 356, "answer_sql": "SELECT COUNT(*) FROM cards WHERE power = '*';"}, {"question_id": 357, "answer_sql": "SELECT promoTypes FROM cards WHERE name = 'Duress';"}, {"question_id": 358, "answer_sql": "SELECT borderColor FROM cards WHERE name = 'Ancestor\\'s Chosen';"}, {"question_id": 359, "answer_sql": "SELECT originalType FROM cards WHERE name = 'Ancestor\\'s Chosen';"}, {"question_id": 360, "answer_sql": "SELECT DISTINCT T2.language FROM cards AS T1 JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T1.name = 'Angel of Mercy';"}, {"question_id": 361, "answer_sql": "SELECT COUNT(*) FROM cards WHERE legalities.status = 'restricted' AND cards.isTextless = 0;"}, {"question_id": 362, "answer_sql": "SELECT text FROM rulings WHERE uuid = (SELECT uuid FROM cards WHERE name = 'Condemn');"}, {"question_id": 363, "answer_sql": "SELECT COUNT(*) FROM cards WHERE legalities.status = 'restricted' AND legalities.isStarter = 1;"}, {"question_id": 364, "answer_sql": "SELECT status FROM cards WHERE name = 'Cloudchaser Eagle';"}, {"question_id": 365, "answer_sql": "SELECT type FROM cards WHERE name = 'Benalish Knight';"}, {"question_id": 366, "answer_sql": "SELECT T1.text FROM cards AS T1 JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight';"}, {"question_id": 367, "answer_sql": "SELECT artist FROM cards WHERE flavorText LIKE '%Phyrexian%' AND flavorText LIKE '%illustrated%';"}, {"question_id": 368, "answer_sql": "SELECT CAST(COUNT(CASE WHEN borderColor = 'borderless' THEN id ELSE NULL END) AS REAL) * 100 / COUNT(id) AS percentage FROM cards;"}, {"question_id": 369, "answer_sql": "SELECT COUNT(*) FROM cards WHERE language = 'German' AND isReprint = 1;"}, {"question_id": 370, "answer_sql": "SELECT COUNT(*) FROM cards WHERE borderColor = 'borderless' AND language = 'Russian';"}, {"question_id": 371, "answer_sql": "SELECT CAST(COUNT(CASE WHEN T1.language = 'French' AND T1.isStorySpotlight = 1 THEN T1.id ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) AS Percentage FROM cards AS T1 JOIN set_translations AS T2 ON T1.uuid = T2.setCode WHERE T2.language = 'French' AND T1.isStorySpotlight = 1;"}, {"question_id": 372, "answer_sql": "SELECT COUNT(*) FROM cards WHERE toughness = 99;"}, {"question_id": 373, "answer_sql": "SELECT c.id, c.artist, c.name FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.artist = 'Aaron Boyd';"}, {"question_id": 374, "answer_sql": "SELECT COUNT(id) AS black_border_cards_only_on_mtgo FROM cards WHERE borderColor = 'black' AND availability = 'mtgo';"}, {"question_id": 375, "answer_sql": "SELECT id FROM cards WHERE convertedManaCost = 0;"}, {"question_id": 376, "answer_sql": "SELECT layout FROM cards WHERE keywords LIKE '%flying%'"}, {"question_id": 377, "answer_sql": "SELECT COUNT(T1.id) AS card_count FROM cards AS T1 WHERE T1.originalType = 'Summon - Angel' AND T1.subtypes NOT LIKE '%Angel%';"}, {"question_id": 378, "answer_sql": "SELECT id FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL;"}, {"question_id": 379, "answer_sql": "SELECT id FROM cards WHERE duelDeck = 'a';"}, {"question_id": 380, "answer_sql": "SELECT edhrecRank FROM cards WHERE frameVersion = '2015';"}, {"question_id": 381, "answer_sql": "SELECT artist FROM cards WHERE language = 'zh-Hans';"}, {"question_id": 382, "answer_sql": "SELECT c.name FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.availability = 'paper' AND fd.language = 'Japanese';"}, {"question_id": 383, "answer_sql": "SELECT COUNT(id) AS banned_white_border_cards FROM cards WHERE borderColor = 'white' AND status = 'Banned';"}, {"question_id": 384, "answer_sql": "SELECT c.uuid, f.language FROM cards c JOIN foreign_data f ON c.uuid = f.uuid WHERE c.format = 'legacy';"}, {"question_id": 385, "answer_sql": "SELECT T1.text, T1.uuid FROM cards AS T1 JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Beacon of Immortality';"}, {"question_id": 386, "answer_sql": "SELECT COUNT(id) AS numberOfCards, status AS legalityStatus FROM cards WHERE frameVersion = 'future';"}, {"question_id": 387, "answer_sql": "SELECT c.name, c.colorIdentity FROM cards c JOIN sets s ON c.setCode = s.code WHERE s.code = 'OGW';"}, {"question_id": 388, "answer_sql": "SELECT t1.name, t1.language FROM sets t1 JOIN set_translations t2 ON t1.code = t2.setCode WHERE t1.code = '10E' AND t1.convertedManaCost = 5 AND t2.translation IS NOT NULL;"}, {"question_id": 389, "answer_sql": "SELECT c.name, r.date FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.originalType = 'Creature - Elf';"}, {"question_id": 390, "answer_sql": "SELECT colorIdentity, format FROM cards WHERE id BETWEEN 1 AND 20;"}, {"question_id": 391, "answer_sql": "SELECT c.* FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.colors LIKE '%B%' AND fd.language IN ('en', 'fr', 'de', 'es', 'it', 'ru', 'ja', 'ko', 'zh-CN', 'zh-TW')"}, {"question_id": 392, "answer_sql": "SELECT c.name FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.rarity = 'uncommon' ORDER BY l.date ASC;"}, {"question_id": 393, "answer_sql": "SELECT COUNT(*) FROM cards WHERE artist = 'John Avon' AND cardKingdomId IS NOT NULL AND cardKingdomId NOT LIKE '%powerful%';"}, {"question_id": 394, "answer_sql": "SELECT COUNT(*) FROM cards WHERE borderColor = 'white' AND cardKingdomFoilId = cardKingdomId AND cardKingdomId IS NOT NULL;"}, {"question_id": 395, "answer_sql": "SELECT COUNT(*) FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE artist = 'UDON' AND availability = 'mtgo' AND hand = '-1';"}, {"question_id": 396, "answer_sql": "SELECT COUNT(*) FROM cards WHERE frameVersion = '1993' AND availability = 'paper' AND hasContentWarning = 1;"}, {"question_id": 397, "answer_sql": "SELECT T1.manaCost FROM cards AS T1 JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.layout = 'normal' AND T1.frameVersion = '2003' AND T1.borderColor = 'black' AND T1.availability IN ('paper', 'mtgo')"}, {"question_id": 398, "answer_sql": "SELECT SUM(convertedManaCost) AS total_unconverted_mana FROM cards WHERE artist = 'Rob Alexander';"}, {"question_id": 399, "answer_sql": "SELECT types FROM cards WHERE availability = 'arena';"}, {"question_id": 400, "answer_sql": "SELECT DISTINCT T1.setCode FROM cards AS T1 JOIN set_translations AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Spanish';"}, {"question_id": 401, "answer_sql": "SELECT CAST(COUNT(CASE WHEN hand = '+3' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(id) FROM cards WHERE frameEffects = 'legendary';"}, {"question_id": 402, "answer_sql": "SELECT COUNT(CASE WHEN isStorySpotlight = 1 AND isTextless = 1 THEN id ELSE NULL END) * 100 / COUNT(id) AS percentage FROM cards WHERE isStorylight = 1 AND isTextless = 1;"}, {"question_id": 403, "answer_sql": "SELECT COUNT(CASE WHEN T2.language = 'Spanish' THEN T1.id ELSE NULL END) * 100 / COUNT(T1.id) AS percentage, T1.name FROM cards AS T1 JOIN set_translations AS T2 ON T1.uuid = T2.setCode WHERE T2.language = 'Spanish';"}, {"question_id": 404, "answer_sql": "SELECT DISTINCT T1.language FROM sets AS T1 JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.baseSetSize = 309;"}, {"question_id": 405, "answer_sql": "SELECT COUNT(id) AS num_sets FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE language = 'Portuguese (Brasil)' AND setCode LIKE 'Commander';"}, {"question_id": 406, "answer_sql": "```sql SELECT c.id, c.name, c.type, c.rarity, c.mcmId, c.mcmMetaId, c.mtgoId, c.mtgoFoilId, c.mtgoId, c.mtgoFoilId, c.mtgoId, c.mtgoFoilId, c.mtgoId, c.mtgoFoilId, c.mtgoId, c.mtgoFoilId, c.mtgoId, c.mtgoFoilId, c.mtgoId, c.mtgoFoilId, c.mtgoId, c.mtgoFoilId, c.mtgoId, c.mtgoFoilId, c.mtgoId, c.mtgoFoilId, c.mtgoId, c.mtgoFoilId, c.mtgoId, c.mtgoFoilId, c.mtgoId, c.mtgoFoilId, c.mtgoId, c.mtgoFoilId, c.mtgoId, c.mtgoFoilId, c.mtgoId, c.mtgoFoilId, c.mtgoId, c.mtgoFoilId, c.mtgoId, c.mtgoFoilId, c.mtgoId, c.mtgoFoilId, c.mtgoId, c.mtgoFoilId, c.mtgoId, c.mtgoFoilId, c.mtgoId, c.mtgoFoilId, c.mtgoId, c.mtgoFoilId, c.mtgoId, c.mtgoFoilId, c.mtgoId, c.mtgoFoilId, c.mtgoId, c.mtgoFoilId, c.mtgoId, c.mtgoFoilId, c.mtgoId, c.mtgoFoilId, c.mtgoId, c.mtgoFoilId, c.mtgoId, c.mtgoFoilId, c.mtgoId, c.mtgoFoilId, c.mtgoId, c.mtgoFoilId, c.mtgoId, c.mtgoFoilId, c.mtgoId, c.mtgoFoilId, c.mtgoId, c.m"}, {"question_id": 407, "answer_sql": "SELECT DISTINCT T1.types FROM cards AS T1 JOIN set_translations AS T2 ON T1.uuid = T2.setCode WHERE T2.language = 'German';"}, {"question_id": 408, "answer_sql": "SELECT COUNT(*) FROM cards WHERE power IS NULL AND (power = '*' OR power IS NULL);"}, {"question_id": 409, "answer_sql": "SELECT COUNT(*) FROM cards WHERE format = 'pre-modern' AND text LIKE '%This is a triggered mana ability%' AND side IS NULL;"}, {"question_id": 410, "answer_sql": "SELECT id FROM cards WHERE artist = 'Erica Yang' AND availability = 'paper' AND format = 'pauper';"}, {"question_id": 411, "answer_sql": "SELECT artist FROM cards WHERE text = 'Das perfekte Gegenmittel zu einer dichten Formation';"}, {"question_id": 412, "answer_sql": "SELECT T1.name, T1.flavorText, T1.borderColor, T1.artist FROM cards AS T1 JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.language = 'French' AND T1.type = 'Creature' AND T1.layout = 'normal' AND T1.borderColor = 'black' AND T1.artist = 'Matthew D. Wilson';"}, {"question_id": 413, "answer_sql": "SELECT COUNT(T1.id) AS card_count FROM cards AS T1 JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'rare' AND T2.date = '2009-01-10';"}, {"question_id": 414, "answer_sql": "SELECT T2.language FROM sets AS T1 JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.baseSetSize = 180;"}, {"question_id": 415, "answer_sql": "SELECT (COUNT(CASE WHEN hasContentWarning = 0 THEN 1 ELSE NULL END) / COUNT(id)) * 100 FROM cards WHERE format = 'commander' AND status = 'legal';"}, {"question_id": 416, "answer_sql": "SELECT CAST(COUNT(CASE WHEN power IS NULL OR power = '*' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(power IS NULL OR power = '*') FROM cards WHERE language = 'French';"}, {"question_id": 417, "answer_sql": "SELECT CAST(COUNT(CASE WHEN T2.language = 'Japanese' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T2.language) AS percentage FROM sets AS T1 JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.type = 'expansion';"}, {"question_id": 418, "answer_sql": "SELECT availability FROM cards WHERE artist = 'Daren Bader';"}, {"question_id": 419, "answer_sql": "SELECT COUNT(*) FROM cards WHERE borderColor = 'borderless' AND edhrecRank > 12000;"}, {"question_id": 420, "answer_sql": "SELECT COUNT(*) FROM cards WHERE isOversized = 1 AND isReprint = 1 AND isPromo = 1;"}, {"question_id": 421, "answer_sql": "SELECT T1.name, T1.power FROM cards AS T1 JOIN sets AS T2 ON T1.setCode = T2.code JOIN legalities AS T3 ON T1.uuid = T3.uuid WHERE T1.power IS NULL OR T1.power = '*' AND T3.promoTypes = 'arenaleague' ORDER BY T1.name ASC LIMIT 3;"}, {"question_id": 422, "answer_sql": "SELECT language FROM cards WHERE multiverseid = 149934;"}, {"question_id": 423, "answer_sql": "SELECT T1.id, T2.id FROM cards AS T1 JOIN cards AS T2 ON T1.cardKingdomFoilId = T2.cardKingdomId WHERE T1.cardKingdomFoilId IS NOT NULL AND T1.cardKingdomId IS NOT NULL ORDER BY T1.cardKingdomFoilId ASC, T1.id ASC LIMIT 3;"}, {"question_id": 424, "answer_sql": "SELECT CAST(COUNT(CASE WHEN isTextless = 1 AND layout = 'normal' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(isTextless) AS proportion FROM cards;"}, {"question_id": 425, "answer_sql": "SELECT number FROM cards WHERE subtypes LIKE '%Angel%' AND subtypes LIKE '%Wizard%' AND side IS NULL;"}, {"question_id": 426, "answer_sql": "SELECT s.id, s.name FROM sets s WHERE s.mtgoCode IS NULL ORDER BY s.name ASC LIMIT 3;"}, {"question_id": 427, "answer_sql": "SELECT language FROM set_translations WHERE setCode = 'ARC' AND mcmName = 'Archenemy';"}, {"question_id": 428, "answer_sql": "SELECT name, translation FROM sets WHERE id = 5;"}, {"question_id": 429, "answer_sql": "SELECT language, expansionType FROM sets WHERE id = 206;"}, {"question_id": 430, "answer_sql": "SELECT s.id, s.name FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.language = 'Italian' AND s.block = 'Shadowmoor' ORDER BY s.name ASC LIMIT 2;"}, {"question_id": 431, "answer_sql": "SELECT T1.id FROM sets AS T1 JOIN cards AS T2 ON T1.code = T2.mtgoId WHERE T1.isForeignOnly = 1 AND T2.isFoilOnly = 1 AND T2.language = 'Japanese';"}, {"question_id": 432, "answer_sql": "SELECT T1.name AS setCode, T1.baseSetSize AS baseSetSize FROM sets AS T1 JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Russian' ORDER BY T1.baseSetSize DESC LIMIT 1;"}, {"question_id": 433, "answer_sql": "SELECT CAST(SUM(CASE WHEN T1.isOnlineOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.isOnlineOnly) AS Percentage FROM cards AS T1 JOIN set_translations AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'zh-Hans' AND T1.isOnlineOnly = 1;"}, {"question_id": 434, "answer_sql": "SELECT COUNT(id) AS set_count FROM sets WHERE language = 'Japanese' AND mtgoCode IS NULL OR mtgoCode = '';"}, {"question_id": 435, "answer_sql": "SELECT id FROM cards WHERE borderColor = 'black';"}, {"question_id": 436, "answer_sql": "SELECT id FROM cards WHERE frameEffects = 'extendedart';"}, {"question_id": 437, "answer_sql": "SELECT c.id, c.name, c.borderColor, c.isFullArt FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.borderColor = 'black' AND c.isFullArt = 1;"}, {"question_id": 438, "answer_sql": "SELECT language FROM sets WHERE id = 174;"}, {"question_id": 439, "answer_sql": "SELECT T1.name FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.setCode = 'ALL';"}, {"question_id": 440, "answer_sql": "SELECT language FROM foreign_data WHERE name = 'A Pedra Fellwar';"}, {"question_id": 441, "answer_sql": "SELECT T1.code FROM sets AS T1 JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'en' AND T2.translation = '07/13/2007';"}, {"question_id": 442, "answer_sql": "SELECT baseSetSize, code FROM sets WHERE block = 'Masques' AND block = 'Mirage';"}, {"question_id": 443, "answer_sql": "SELECT DISTINCT T1.code FROM sets AS T1 JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'en' AND T2.translation = 'expansion';"}, {"question_id": 444, "answer_sql": "SELECT T1.name, T1.type FROM cards AS T1 JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.watermark = 'BOROS' ORDER BY T1.name;"}, {"question_id": 445, "answer_sql": "SELECT T1.language, T1.flavorText, T1.type FROM cards AS T1 JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.watermark = 'colorpie' ORDER BY T1.type;"}, {"question_id": 446, "answer_sql": "SELECT CAST(COUNT(CASE WHEN convertedManaCost = 10 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(convertedManaCost) AS percentage FROM cards WHERE name = 'Abyssal Horror';"}, {"question_id": 447, "answer_sql": "SELECT DISTINCT T1.code FROM sets AS T1 JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'en' AND T2.translation = 'Expansion Commander';"}, {"question_id": 448, "answer_sql": "SELECT T1.name, T1.type FROM cards AS T1 JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.watermark = 'ABZAN' ORDER BY T1.name;"}, {"question_id": 449, "answer_sql": "SELECT T2.language, T2.types FROM cards AS T1 JOIN set_translations AS T2 ON T1.uuid = T2.setCode WHERE T1.watermark = 'azorius';"}, {"question_id": 450, "answer_sql": "SELECT COUNT(id) AS powerful_cards_count FROM cards WHERE artist = 'Aaron Miller' AND cardKingdomFoilId = cardKingdomId AND cardKingdomId IS NOT NULL;"}, {"question_id": 451, "answer_sql": "SELECT COUNT(*) FROM cards WHERE availability LIKE '%paper%' AND hand LIKE '+%';"}, {"question_id": 452, "answer_sql": "SELECT name FROM cards WHERE isTextless = 0"}, {"question_id": 453, "answer_sql": "SELECT convertedManaCost FROM cards WHERE name = 'Ancestor`s Chosen';"}, {"question_id": 454, "answer_sql": "SELECT COUNT(T1.id) AS unknown_power_count FROM cards AS T1 JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.borderColor = 'white' AND T1.power = '*';"}, {"question_id": 455, "answer_sql": "SELECT name FROM cards WHERE isPromo = 1 AND side IS NOT NULL;"}, {"question_id": 456, "answer_sql": "SELECT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer';"}, {"question_id": 457, "answer_sql": "SELECT DISTINCT T1.purchaseUrls FROM cards AS T1 JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.promoTypes = 'bundle' AND T1.purchaseUrls IS NOT NULL;"}, {"question_id": 458, "answer_sql": "SELECT COUNT(DISTINCT artist) AS artist_count FROM cards WHERE availability LIKE '%arena,mtgo%' AND borderColor = 'black';"}, {"question_id": 459, "answer_sql": "SELECT name, convertedManaCost FROM cards WHERE name = 'Serra Angel' OR name = 'Shrine Keeper' ORDER BY convertedManaCost DESC LIMIT 1;"}, {"question_id": 460, "answer_sql": "SELECT T1.artist FROM cards AS T1 JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.flavorName = 'Battra, Dark Destroyer';"}, {"question_id": 461, "answer_sql": "SELECT c.name, c.convertedManaCost FROM cards c JOIN sets s ON c.setCode = s.code WHERE c.frameVersion = '2003' ORDER BY c.convertedManaCost DESC LIMIT 3;"}, {"question_id": 462, "answer_sql": "SELECT T1.name, T2.translation FROM sets AS T1 JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.name = 'Ancestor\\'s Chosen' AND T2.language = 'Italian';"}, {"question_id": 463, "answer_sql": "SELECT COUNT(id) AS translation_count FROM set_translations WHERE setCode = (SELECT code FROM cards WHERE name = 'Angel of Mercy');"}, {"question_id": 464, "answer_sql": "SELECT name FROM cards WHERE setCode = 'Hauptset Zehnte Edition';"}, {"question_id": 465, "answer_sql": "SELECT EXISTS ( SELECT 1 FROM cards WHERE name = 'Ancestor\\'s Chosen' AND language = 'Korean' )"}, {"question_id": 466, "answer_sql": "SELECT COUNT(T1.id) AS numberOfCards FROM cards AS T1 JOIN set_translations AS T2 ON T1.uuid = T2.uuid WHERE T2.translation = 'Hauptset Zehnte Edition' AND T1.artist = 'Adam Rex';"}, {"question_id": 467, "answer_sql": "SELECT SUM(baseSetSize) AS total_cards FROM sets WHERE translation = 'Hauptset Zehnte Edition' AND baseSetSize > 0;"}, {"question_id": 468, "answer_sql": "SELECT translation FROM set_translations WHERE setCode = (SELECT code FROM sets WHERE name = 'Eighth Edition') AND language = 'Simplified Chinese';"}, {"question_id": 469, "answer_sql": "SELECT EXISTS ( SELECT 1 FROM sets WHERE mtgoCode IS NOT NULL AND name = 'Angel of Mercy' )"}, {"question_id": 470, "answer_sql": "SELECT releaseDate FROM sets WHERE name = 'Ancestor''s Chosen';"}, {"question_id": 471, "answer_sql": "SELECT type FROM sets WHERE code = 'Hauptset Zehnte Edition';"}, {"question_id": 472, "answer_sql": "SELECT COUNT(id) AS numberOfItalianTranslations FROM sets WHERE block = 'Ice Age' AND language = 'Italian';"}, {"question_id": 473, "answer_sql": "SELECT s.id AS setId, s.name AS setCode, s.isForeignOnly AS isForeignOnly FROM sets s WHERE s.name = 'Adarkar Valkyrie' AND s.isForeignOnly = 1;"}, {"question_id": 474, "answer_sql": "SELECT COUNT(*) FROM sets WHERE language = 'Italian' AND translation IS NOT NULL AND baseSetSize < 10;"}, {"question_id": 475, "answer_sql": "SELECT COUNT(*) FROM cards WHERE setCode = 'Coldsnap' AND borderColor = 'black';"}, {"question_id": 476, "answer_sql": "SELECT name FROM cards WHERE setCode = 'Coldsnap' ORDER BY convertedManaCost DESC LIMIT 1;"}, {"question_id": 477, "answer_sql": "SELECT artist FROM cards WHERE setCode = 'Coldsnap' AND artist IN ('Jeremy Jarvis', 'Aaron Miller', 'Chippy');"}, {"question_id": 478, "answer_sql": "SELECT number FROM cards WHERE setCode = 'Coldsnap' AND number = 4;"}, {"question_id": 479, "answer_sql": "SELECT COUNT(T1.id) AS unknown_power_count FROM cards AS T1 JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.convertedManaCost > 5 AND T1.power = '*' OR T1.power = 'T1.power IS NULL';"}, {"question_id": 480, "answer_sql": "SELECT flavorText FROM cards WHERE name = 'Ancestor''s Chosen' AND language = 'Italian';"}, {"question_id": 481, "answer_sql": "SELECT language FROM foreign_data WHERE flavorText IS NOT NULL AND name = 'Ancestor''s Chosen';"}, {"question_id": 482, "answer_sql": "SELECT T1.type, T2.language FROM cards AS T1 JOIN set_translations AS T2 ON T1.uuid = T2.setCode WHERE T1.name = 'Ancestor''s Chosen' AND T2.language = 'German';"}, {"question_id": 483, "answer_sql": "SELECT T2.text FROM sets AS T1 JOIN cards AS T2 ON T1.code = T2.setCode JOIN rulings AS T3 ON T2.uuid = T3.uuid WHERE T1.name = 'Coldsnap' AND T2.language = 'Italian';"}, {"question_id": 484, "answer_sql": "SELECT T1.name, T1.language FROM cards AS T1 JOIN set_translations AS T2 ON T1.uuid = T2.setCode WHERE T2.language = 'Italian' AND T1.setCode = 'Coldsnap' ORDER BY T1.convertedManaCost DESC LIMIT 1;"}, {"question_id": 485, "answer_sql": "SELECT T1.date FROM rulings AS T1 JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.name = 'Reminisce';"}, {"question_id": 486, "answer_sql": "SELECT CAST(SUM(CASE WHEN T1.convertedManaCost = 7 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.convertedManaCost) AS Percentage FROM cards AS T1 JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Coldsnap';"}, {"question_id": 487, "answer_sql": "SELECT CAST(SUM(CASE WHEN cardKingdomFoilId = cardKingdomId AND cardKingdomId IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) * 100 FROM cards WHERE name = 'Coldsnap';"}, {"question_id": 488, "answer_sql": "SELECT code FROM sets WHERE releaseDate = '2017-07-14';"}, {"question_id": 489, "answer_sql": "SELECT keyruneCode FROM sets WHERE code = 'PKHC';"}, {"question_id": 490, "answer_sql": "SELECT mcmId FROM sets WHERE code = 'SS2';"}, {"question_id": 491, "answer_sql": "SELECT T1.mcmName FROM sets AS T1 JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'en' AND T2.translation = '2017/6/9';"}, {"question_id": 492, "answer_sql": "SELECT type FROM sets WHERE name LIKE '%From the Vault: Lore%';"}, {"question_id": 493, "answer_sql": "SELECT parentCode FROM sets WHERE name = 'Commander 2014 Oversized';"}, {"question_id": 494, "answer_sql": "SELECT c.name AS card_name, r.text AS ruling_text, CASE WHEN c.hasContentWarning = 1 THEN 'Yes' ELSE 'No' END AS has_content_warning FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.artist = 'Jim Pavelec';"}, {"question_id": 495, "answer_sql": "SELECT releaseDate FROM sets WHERE name = 'Evacuation';"}, {"question_id": 496, "answer_sql": "SELECT SUM(baseSetSize) AS total_cards FROM sets WHERE translation = 'Rinascita di Alara';"}, {"question_id": 497, "answer_sql": "SELECT type FROM sets WHERE code = 'Huiti\u00e8me \u00e9dition';"}, {"question_id": 498, "answer_sql": "SELECT T1.name AS FrenchName FROM cards AS T1 JOIN set_translations AS T2 ON T1.uuid = T2.setCode WHERE T2.language = 'French' AND T1.name = 'Tendo Ice Bridge';"}, {"question_id": 499, "answer_sql": "SELECT COUNT(id) AS translation_count FROM set_translations WHERE setCode = 'Salvat 2011' AND translation IS NOT NULL;"}, {"question_id": 500, "answer_sql": "SELECT T2.name FROM cards AS T1 INNER JOIN set_translations AS T3 ON T1.uuid = T3.setCode WHERE T1.name = 'Fellwar Stone' AND T3.language = 'Japanese';"}, {"question_id": 501, "answer_sql": "SELECT T1.name, T1.convertedManaCost FROM cards AS T1 JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Journey into Nyx Hero''s Path' ORDER BY T1.convertedManaCost DESC LIMIT 1;"}, {"question_id": 502, "answer_sql": "SELECT releaseDate FROM sets WHERE translation = 'Ola de fr\u00edo';"}, {"question_id": 503, "answer_sql": "SELECT T1.type FROM sets AS T1 INNER JOIN sets_translations AS T2 ON T1.code = T2.setCode WHERE T2.translation = 'Samite Pilgrim' AND T1.type = (SELECT T3.type FROM sets AS T3 WHERE T3.code = T1.code);"}, {"question_id": 504, "answer_sql": "SELECT COUNT(*) FROM cards WHERE name = 'World Championship Decks 2004' AND convertedManaCost = '3';"}, {"question_id": 505, "answer_sql": "SELECT translation FROM set_translations WHERE language = 'Chinese Simplified' AND name = 'Mirrodin';"}, {"question_id": 506, "answer_sql": "SELECT CAST(SUM(CASE WHEN T1.language = 'Japanese' AND T1.isNonFoilOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.language) AS Percentage FROM cards AS T1 JOIN set_translations AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Japanese';"}, {"question_id": 507, "answer_sql": "SELECT CAST(SUM(CASE WHEN T2.isOnlineOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.id) AS Percentage FROM cards AS T1 JOIN set_translations AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Portuguese (Brazil)';"}, {"question_id": 508, "answer_sql": "SELECT DISTINCT t1.availability FROM cards t1 WHERE t1.artist = 'Aleksi Briclot' AND t1.isTextless = 1;"}, {"question_id": 509, "answer_sql": "SELECT id FROM sets WHERE baseSetSize = (SELECT MAX(baseSetSize) FROM sets)"}, {"question_id": 510, "answer_sql": "SELECT T1.artist, T2.flavorText FROM cards AS T1 JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.side IS NULL ORDER BY T1.convertedManaCost DESC LIMIT 1;"}, {"question_id": 511, "answer_sql": "SELECT MAX(frameEffects) AS most_common_frame_effects FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL;"}, {"question_id": 512, "answer_sql": "SELECT COUNT(*) FROM cards WHERE power IS NULL OR power = '*' AND hasFoil = 0 AND duelDeck = 'a';"}, {"question_id": 513, "answer_sql": "SELECT T1.id FROM sets AS T1 JOIN legalities AS T2 ON T1.code = T2.code WHERE T1.type = 'commander' GROUP BY T1.id ORDER BY SUM(CASE WHEN T2.status = 'Promotional' THEN 1 ELSE 0 END) + SUM(CASE WHEN T2.status = 'Supplemental' THEN 1 ELSE 0 END) + SUM(CASE WHEN T2.status = 'Related Supplemental' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.status = 'Alchemy' THEN 1 ELSE 0 END) DESC LIMIT 1;"}, {"question_id": 514, "answer_sql": "SELECT name, manaCost FROM cards WHERE format = 'duel' ORDER BY manaCost DESC LIMIT 10;"}, {"question_id": 515, "answer_sql": "SELECT MIN(originalReleaseDate) AS oldestReleaseDate, rarity AS legalPlayFormat FROM cards WHERE rarity = 'mythic' AND status = 'legal';"}, {"question_id": 516, "answer_sql": "SELECT COUNT(T1.id) AS numberOfCards FROM cards AS T1 JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Volkan Baga' AND T2.language = 'French';"}, {"question_id": 517, "answer_sql": "SELECT COUNT(*) FROM cards WHERE rarity = 'rare' AND types = 'Enchantment' AND name = 'Abundance' AND status = 'Legal';"}, {"question_id": 518, "answer_sql": "SELECT T1.format, T1.name FROM sets AS T1 JOIN legalities AS T2 ON T1.id = T2.id WHERE T2.status = 'banned' GROUP BY T1.format ORDER BY COUNT(T2.id) DESC LIMIT 1;"}, {"question_id": 519, "answer_sql": "SELECT language FROM sets WHERE name = 'Battlebond';"}, {"question_id": 520, "answer_sql": "SELECT T1.format, T2.text FROM cards AS T1 JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = ( SELECT artist FROM cards GROUP BY artist ORDER BY COUNT(*) ASC LIMIT 1 ) ORDER BY T1.artist;"}, {"question_id": 521, "answer_sql": "SELECT T1.status FROM cards AS T1 JOIN foreign_data AS T2 ON T1.uuid = T2.uuid JOIN legalities AS T3 ON T1.uuid = T3.uuid WHERE T1.frameVersion = '1997' AND T2.artist = 'D. Alexander Gregory' AND T3.format = 'legacy' AND T1.hasContentWarning = 1;"}, {"question_id": 522, "answer_sql": "SELECT name, format FROM cards WHERE edhrecRank = 1 AND status = 'banned';"}, {"question_id": 523, "answer_sql": "SELECT AVG(id) AS annual_average_sets, MAX(COUNT(language)) AS common_language FROM sets WHERE releaseDate BETWEEN '2012-01-01' AND '2015-12-31';"}, {"question_id": 524, "answer_sql": "SELECT c.artist FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.borderColor = 'black' AND c.availability = 'arena';"}, {"question_id": 525, "answer_sql": "SELECT c.uuid FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE l.format = 'oldschool' AND (l.status = 'banned' OR l.status = 'restricted');"}, {"question_id": 526, "answer_sql": "SELECT COUNT(id) AS numberOfCards FROM cards WHERE artist = 'Matthew D. Wilson' AND availability = 'paper';"}, {"question_id": 527, "answer_sql": "SELECT MAX(date) AS date, text FROM rulings JOIN cards ON rulings.uuid = cards.uuid WHERE artist = 'Kev Walker' ORDER BY MAX(date) DESC;"}, {"question_id": 528, "answer_sql": "SELECT cards.name FROM cards JOIN sets ON cards.setCode = sets.code WHERE sets.name = 'Hour of Devastation' UNION SELECT cards.name FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'legal';"}, {"question_id": 529, "answer_sql": "SELECT T1.name FROM sets AS T1 WHERE T1.language NOT LIKE '%Japanese%' AND T1.language = 'Korean';"}, {"question_id": 530, "answer_sql": "SELECT frameVersion AS frame_styles, name AS cards FROM cards WHERE artist = 'Allen Williams' AND status = 'banned';"}, {"question_id": 531, "answer_sql": "SELECT u.DisplayName, MAX(u.Reputation) AS MaxReputation FROM users u WHERE u.DisplayName IN ('Harlan', 'Jarrod Dixon') GROUP BY u.DisplayName;"}, {"question_id": 532, "answer_sql": "SELECT DisplayName FROM users WHERE YEAR(CreationDate) = 2014;"}, {"question_id": 533, "answer_sql": "SELECT COUNT(DISTINCT u.Id) AS UsersLastAccessedAfter20140901 FROM users u WHERE u.LastAccessDate > '2014-09-01 00:00:00';"}, {"question_id": 534, "answer_sql": "SELECT DisplayName FROM users WHERE Views = (SELECT MAX(Views) FROM users)"}, {"question_id": 535, "answer_sql": "SELECT COUNT(DISTINCT u.Id) AS NumberOfUsers FROM users u JOIN votes v ON u.Id = v.UserId WHERE u.UpVotes > 100 AND u.DownVotes > 1;"}, {"question_id": 536, "answer_sql": "SELECT COUNT(DISTINCT u.Id) AS NumberOfUsers FROM users u WHERE u.Views > 10 AND u.CreationDate > '2013-12-31';"}, {"question_id": 537, "answer_sql": "SELECT COUNT(DISTINCT p.Id) AS NumberOfPosts FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE u.DisplayName = 'csgillespie';"}, {"question_id": 538, "answer_sql": "SELECT T1.Title FROM users AS T1 JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'csgillespie';"}, {"question_id": 539, "answer_sql": "SELECT u.DisplayName FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE p.Title = 'Eliciting priors from experts';"}, {"question_id": 540, "answer_sql": "SELECT T1.Title FROM posts AS T1 JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie' ORDER BY T1.ViewCount DESC LIMIT 1;"}, {"question_id": 541, "answer_sql": "SELECT u.DisplayName FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE p.FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts) ORDER BY p.FavoriteCount DESC LIMIT 1;"}, {"question_id": 542, "answer_sql": "SELECT SUM(T2.CommentCount) AS TotalComments FROM users AS T1 JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'csgillespie';"}, {"question_id": 543, "answer_sql": "SELECT MAX(posts.AnswerCount) AS MaxAnswers FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'csgillespie';"}, {"question_id": 544, "answer_sql": "SELECT T2.DisplayName FROM posts AS T1 JOIN users AS T2 ON T1.OwnerUserId = T2.Id JOIN postHistory AS T3 ON T1.Id = T3.PostId WHERE T1.Title = 'Examples for teaching: Correlation does not mean causation' AND T3.UserId = T1.LastEditorUserId;"}, {"question_id": 545, "answer_sql": "SELECT COUNT(T1.ParentId) AS RootPostCount FROM posts AS T1 JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie' AND T1.ParentId IS NULL;"}, {"question_id": 546, "answer_sql": "SELECT DisplayName FROM users WHERE Id IN ( SELECT OwnerUserId FROM posts WHERE ClosedDate IS NOT NULL )"}, {"question_id": 547, "answer_sql": "SELECT COUNT(DISTINCT p.Id) AS NumberOfPosts FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.Age > 65 AND p.Score > 19;"}, {"question_id": 548, "answer_sql": "SELECT T2.Location FROM posts AS T1 JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts';"}, {"question_id": 549, "answer_sql": "SELECT p.Body FROM posts p JOIN tags t ON p.Id = t.ExcerptPostId WHERE t.TagName = 'bayesian';"}, {"question_id": 550, "answer_sql": "SELECT p.Body FROM posts p JOIN tags t ON p.Id = t.ExcerptPostId WHERE t.Count = (SELECT MAX(Count) FROM tags) ORDER BY p.ViewCount DESC LIMIT 1;"}, {"question_id": 551, "answer_sql": "SELECT COUNT(*) AS BadgeCount FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie');"}, {"question_id": 552, "answer_sql": "SELECT DISTINCT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'csgillespie';"}, {"question_id": 553, "answer_sql": "SELECT COUNT(T1.Id) AS BadgeCount FROM badges AS T1 JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'csgillespie' AND YEAR(T1.Date) = 2011;"}, {"question_id": 554, "answer_sql": "SELECT DisplayName FROM users WHERE Id = (SELECT UserId FROM badges GROUP BY UserId ORDER BY COUNT(Id) DESC LIMIT 1);"}, {"question_id": 555, "answer_sql": "SELECT AVG(posts.Score) AS AverageScore FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'csgillespie';"}, {"question_id": 556, "answer_sql": "SELECT AVG(COUNT(b.Id)) AS AverageBadges FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Views > 200;"}, {"question_id": 557, "answer_sql": "SELECT CAST(COUNT(CASE WHEN Age > 65 THEN Id ELSE NULL END) AS REAL) * 100 / COUNT(Id) FROM posts WHERE Score > 20;"}, {"question_id": 558, "answer_sql": "SELECT COUNT(v.Id) AS VoteCount FROM votes v JOIN users u ON v.UserId = u.Id WHERE u.Id = 58 AND v.CreationDate = '2010-07-19';"}, {"question_id": 559, "answer_sql": "SELECT MAX(T1.CreationDate) AS MaxVotesCreationDate FROM votes AS T1 WHERE T1.VoteTypeId = (SELECT MAX(T2.VoteTypeId) FROM votes AS T2 GROUP BY T2.VoteTypeId);"}, {"question_id": 560, "answer_sql": "SELECT COUNT(Id) AS Revival_Badges FROM badges WHERE Name = 'Revival';"}, {"question_id": 561, "answer_sql": "SELECT posts.Title FROM posts JOIN comments ON posts.Id = comments.PostId WHERE comments.Score = (SELECT MAX(Score) FROM comments) ORDER BY posts.Score DESC LIMIT 1;"}, {"question_id": 562, "answer_sql": "SELECT c.CommentCount FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.ViewCount = 1910;"}, {"question_id": 563, "answer_sql": "SELECT T1.FavoriteCount FROM posts AS T1 JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T2.CreationDate = '2014-04-23 20:29:39.0' AND T2.UserId = '3025';"}, {"question_id": 564, "answer_sql": "SELECT T2.Text FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.ParentId = 107829 AND T2.CommentCount = 1;"}, {"question_id": 565, "answer_sql": "SELECT p.Id, p.Title, p.CreationDate, p.Score, p.ViewCount, p.Body, p.OwnerUserId, p.LasActivityDate, p.Tags, p.AnswerCount, p.CommentCount, p.FavoriteCount, p.LastEditorUserId, p.LastEditDate, p.CommunityOwnedDate, p.ParentId, p.ClosedDate FROM posts p JOIN comments c ON p.Id = c.PostId WHERE c.UserId = 23853 AND c.CreationDate = '2013-07-12 09:08:18.0' AND p.ClosedDate IS NULL;"}, {"question_id": 566, "answer_sql": "SELECT Reputation FROM users WHERE Id = (SELECT OwnerUserId FROM posts WHERE Id = '65041');"}, {"question_id": 567, "answer_sql": "SELECT COUNT(DISTINCT OwnerUserId) AS NumberOfPosts FROM users WHERE DisplayName = 'Tiago Pasqualini';"}, {"question_id": 568, "answer_sql": "SELECT DisplayName FROM users WHERE Id = (SELECT UserId FROM votes WHERE Id = 6347);"}, {"question_id": 569, "answer_sql": "SELECT COUNT(T1.Id) AS VoteCount FROM votes AS T1 JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title LIKE '%data visualization%'"}, {"question_id": 570, "answer_sql": "SELECT T1.Name FROM users AS T1 JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'DatEpicCoderGuyWhoPrograms';"}, {"question_id": 571, "answer_sql": "SELECT COUNT(posts.Id) / COUNT(votes.Id) AS PostVsVotesRatio FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.Id = '24';"}, {"question_id": 572, "answer_sql": "SELECT SUM(ViewCount) AS TotalViews FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer';"}, {"question_id": 573, "answer_sql": "SELECT Text FROM comments WHERE Score = 17;"}, {"question_id": 574, "answer_sql": "SELECT DisplayName FROM users WHERE WebsiteUrl = 'http://stackoverflow.com';"}, {"question_id": 575, "answer_sql": "SELECT T1.Name FROM badges AS T1 JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'SilentGhost';"}, {"question_id": 576, "answer_sql": "SELECT c.UserId FROM comments c WHERE c.Text = 'thank you user93!';"}, {"question_id": 577, "answer_sql": "SELECT c.Text FROM comments c JOIN users u ON c.UserId = u.Id WHERE u.DisplayName = 'A Lion';"}, {"question_id": 578, "answer_sql": "SELECT DisplayName, Reputation FROM users WHERE DisplayName = 'Understanding what Dassault iSight is doing?';"}, {"question_id": 579, "answer_sql": "SELECT c.Text FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.Title = 'How does gentle boosting differ from AdaBoost?'"}, {"question_id": 580, "answer_sql": "SELECT DisplayName FROM users WHERE Id IN ( SELECT UserId FROM badges WHERE Name = 'Necromancer' );"}, {"question_id": 581, "answer_sql": "SELECT L.OwnerDisplayName FROM postHistory L JOIN posts P ON L.PostId = P.Id WHERE P.Title = 'Open source tools for visualizing multi-dimensional data' AND L.Comment = 'Editor';"}, {"question_id": 582, "answer_sql": "SELECT p.Title FROM posts p JOIN postHistory ph ON p.Id = ph.PostId JOIN users u ON u.Id = ph.UserId WHERE u.DisplayName = 'Vebjorn Ljosa' AND ph.Comment IS NOT NULL;"}, {"question_id": 583, "answer_sql": "SELECT p.Score, u.WebsiteUrl FROM posts p JOIN users u ON p.OwnerUserId = u.Id JOIN postHistory ph ON p.Id = ph.PostId WHERE ph.UserId = (SELECT Id FROM users WHERE DisplayName = 'Yevgeny')"}, {"question_id": 584, "answer_sql": "SELECT c.Text FROM comments c JOIN postHistory ph ON c.PostId = ph.PostId JOIN posts p ON ph.PostId = p.Id WHERE p.Title = 'Why square the difference instead of taking the absolute value in standard deviation?' AND c.UserId IN ( SELECT u.Id FROM users u JOIN votes v ON u.Id = v.UserId WHERE v.VoteTypeId = 2 )"}, {"question_id": 585, "answer_sql": "SELECT SUM(votes.BountyAmount) AS TotalBountyAmount FROM votes JOIN posts ON votes.PostId = posts.Id WHERE posts.Title LIKE '%data%';"}, {"question_id": 586, "answer_sql": "SELECT DisplayName FROM votes WHERE BountyAmount = 50 AND PostId = ( SELECT PostId FROM posts WHERE Title LIKE '%variance%' );"}, {"question_id": 587, "answer_sql": "SELECT p.Id, p.Title, p.Body, AVG(v.Score) AS AverageScore, c.Text FROM posts p JOIN tags t ON p.Id = t.ExcerptPostId JOIN tags AS humor_tags ON p.Id = humor_tags.ExcerptPostId JOIN votes v ON p.Id = v.PostId JOIN comments c ON p.Id = c.PostId WHERE t.TagName = 'humor' GROUP BY p.Id, p.Title, p.Body, c.Text"}, {"question_id": 588, "answer_sql": "SELECT COUNT(DISTINCT c.Id) AS TotalComments FROM comments c JOIN users u ON c.UserId = u.Id WHERE u.Id = 13;"}, {"question_id": 589, "answer_sql": "SELECT Id FROM users ORDER BY Reputation DESC LIMIT 1;"}, {"question_id": 590, "answer_sql": "SELECT Id FROM users ORDER BY Views ASC LIMIT 1;"}, {"question_id": 591, "answer_sql": "SELECT COUNT(DISTINCT T1.UserId) AS NumberOfUsers FROM badges AS T1 JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Date BETWEEN '2011-01-01' AND '2011-12-31';"}, {"question_id": 592, "answer_sql": "SELECT COUNT(DISTINCT UserId) AS NumberOfUsersWithMoreThan5Badges FROM badges WHERE COUNT(Name) > 5;"}, {"question_id": 593, "answer_sql": "SELECT COUNT(DISTINCT T1.UserId) AS NumberOfUsers FROM users AS T1 JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name IN ('Supporter', 'Teacher') AND T1.Location = 'New York';"}, {"question_id": 594, "answer_sql": "SELECT DisplayName, Reputation FROM users WHERE Id = (SELECT OwnerUserId FROM posts WHERE Id = 1);"}, {"question_id": 595, "answer_sql": "SELECT u.Id, u.DisplayName FROM users u JOIN ( SELECT PostId, COUNT(*) AS post_count FROM postHistory GROUP BY PostId HAVING COUNT(*) = 1 ) ph ON u.Id = ph.PostId JOIN posts p ON ph.PostId = p.Id WHERE p.Views >= 1000;"}, {"question_id": 596, "answer_sql": "SELECT u.DisplayName, b.Name FROM users u JOIN ( SELECT UserId, COUNT(Id) AS CommentCount FROM comments GROUP BY UserId ORDER BY CommentCount DESC LIMIT 1 ) c ON u.Id = c.UserId JOIN badges b ON u.Id = b.UserId;"}, {"question_id": 597, "answer_sql": "SELECT COUNT(DISTINCT T1.UserId) AS NumberOfUsers FROM users AS T1 JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Teacher' AND T1.Location = 'India';"}, {"question_id": 598, "answer_sql": "SELECT CAST(COUNT(CASE WHEN Year(Date) = 2010 THEN Name ELSE NULL END) AS REAL) * 100 / COUNT(Name) AS PercentageDifference2010, CAST(COUNT(CASE WHEN Year(Date) = 2011 THEN Name ELSE NULL END) AS REAL) * 100 / COUNT(Name) AS PercentageDifference2011 FROM badges WHERE Name = 'Student';"}, {"question_id": 599, "answer_sql": "SELECT pht.Id, COUNT(DISTINCT ch.UserId) AS UniqueUsers FROM postHistory pht JOIN comments ch ON pht.PostId = ch.PostId WHERE pht.PostId = 3720 GROUP BY pht.Id;"}, {"question_id": 600, "answer_sql": "SELECT p.Id, p.ViewCount FROM posts p JOIN postLinks pl ON p.Id = pl.PostId JOIN posts r ON pl.RelatedPostId = r.Id WHERE p.Id = 61217;"}, {"question_id": 601, "answer_sql": "SELECT Score, PostHistoryTypeId FROM postHistory WHERE PostId = 395;"}, {"question_id": 602, "answer_sql": "SELECT p.Id, u.Id FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.Score > 60;"}, {"question_id": 603, "answer_sql": "SELECT SUM(T2.FavoriteCount) AS TotalFavoriteCount FROM users AS T1 JOIN votes AS T3 ON T1.Id = T3.UserId JOIN posts AS T2 ON T3.PostId = T2.Id WHERE T1.Id = 686 AND YEAR(T2.CreaionDate) = 2011;"}, {"question_id": 604, "answer_sql": "SELECT AVG(votes.UpVotes) AS AverageUpVotes, AVG(users.Age) AS AverageUserAge FROM users JOIN votes ON users.Id = votes.UserId WHERE COUNT(users.Id) > 10 GROUP BY users.Id;"}, {"question_id": 605, "answer_sql": "SELECT COUNT(DISTINCT UserId) AS NumberOfUsersWithAnnouncerBadge FROM badges WHERE Name = 'Announcer';"}, {"question_id": 606, "answer_sql": "SELECT DISTINCT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Date = '2010-07-19 19:39:08';"}, {"question_id": 607, "answer_sql": "SELECT COUNT(*) AS PositiveComments FROM comments WHERE Score > 60;"}, {"question_id": 608, "answer_sql": "SELECT c.Text FROM comments c JOIN users u ON c.UserId = u.Id WHERE c.CreationDate = '2010-07-19 19:16:14.0';"}, {"question_id": 609, "answer_sql": "SELECT COUNT(DISTINCT p.Id) AS NumberOfPostsWithScore10 FROM posts p WHERE p.Score = 10;"}, {"question_id": 610, "answer_sql": "SELECT DISTINCT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Reputation = (SELECT MAX(Reputation) FROM users);"}, {"question_id": 611, "answer_sql": "SELECT u.Reputation FROM users u JOIN badges b ON u.Id = b.UserId JOIN postHistory ph ON u.Id = ph.UserId WHERE ph.CreationDate = '2010-07-19 19:39:08.0';"}, {"question_id": 612, "answer_sql": "SELECT T1.Name FROM badges AS T1 JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Pierre';"}, {"question_id": 613, "answer_sql": "SELECT DISTINCT b.Date FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Location = 'Rochester, NY';"}, {"question_id": 614, "answer_sql": "SELECT CAST(COUNT(CASE WHEN T1.Name = 'Teacher' THEN T2.UserId ELSE NULL END) AS REAL) * 100 / COUNT(T2.UserId) AS Percentage FROM badges AS T1 JOIN users AS T2 ON T1.UserId = T2.Id;"}, {"question_id": 615, "answer_sql": "SELECT CAST(COUNT(CASE WHEN T2.Age BETWEEN 13 AND 18 THEN T1.UserId ELSE NULL END) AS REAL) * 100 / COUNT(T1.UserId) FROM badges AS T1 JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Name = 'Organizer';"}, {"question_id": 616, "answer_sql": "SELECT T2.Score FROM users AS T1 JOIN votes AS T3 ON T1.Id = T3.UserId JOIN comments AS T2 ON T2.UserId = T1.Id WHERE T2.CreationDate = '2010-07-19 19:19:56.0';"}, {"question_id": 617, "answer_sql": "SELECT c.Id AS CommentId, c.PostId AS PostId, c.Score AS Score, c.Text AS Text, c.CreationDate AS CreationDate, c.UserId AS UserId, c.UserDisplayName AS UserDisplayName FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.CreationDate = '2010-07-19 19:37:33.0'"}, {"question_id": 618, "answer_sql": "SELECT U.DisplayName, U.Age FROM users U JOIN badges B ON U.Id = B.UserId WHERE U.Location = 'Vienna, Austria' AND B.Name = 'badge_name';"}, {"question_id": 619, "answer_sql": "SELECT COUNT(DISTINCT b.UserId) AS AdultCount FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Age BETWEEN 19 AND 65 AND b.Name = 'Supporter';"}, {"question_id": 620, "answer_sql": "SELECT COUNT(T1.Views) AS ViewsCount FROM users AS T1 JOIN badges AS T2 ON T1.Id = T2.UserId JOIN posts AS T3 ON T1.Id = T3.OwnerUserId WHERE T2.Date = '2010-07-19 19:39:08.0';"}, {"question_id": 621, "answer_sql": "SELECT DISTINCT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Reputation = (SELECT MIN(Reputation) FROM users)"}, {"question_id": 622, "answer_sql": "SELECT T1.Name FROM badges AS T1 JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Sharpie';"}, {"question_id": 623, "answer_sql": "SELECT COUNT(DISTINCT b.UserId) AS ElderSupporterCount FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Age > 65 AND b.Name = 'Supporter';"}, {"question_id": 624, "answer_sql": "SELECT DisplayName FROM users WHERE Id = 30;"}, {"question_id": 625, "answer_sql": "SELECT COUNT(DISTINCT u.Id) AS NumberOfUsersFromNewYork FROM users u JOIN posts p ON u.Id = p.OwnerUserId JOIN tags t ON p.Id = t.ExcerptPostId WHERE u.Location = 'New York';"}, {"question_id": 626, "answer_sql": "SELECT COUNT(*) AS VoteCount FROM votes WHERE YEAR(CreationDate) = 2010;"}, {"question_id": 627, "answer_sql": "SELECT COUNT(DISTINCT u.Id) AS AdultUsers FROM users u WHERE u.Age BETWEEN 19 AND 65;"}, {"question_id": 628, "answer_sql": "SELECT DisplayName FROM users WHERE Views = (SELECT MAX(Views) FROM users);"}, {"question_id": 629, "answer_sql": "SELECT (COUNT(CASE WHEN YEAR(CreationDate) = 2010 THEN Id ELSE NULL END) / COUNT(CASE WHEN YEAR(CreationDate) = 2011 THEN Id ELSE NULL END)) AS VoteRatio FROM votes;"}, {"question_id": 630, "answer_sql": "SELECT T2.tagName FROM users AS T1 JOIN votes AS T3 ON T1.Id = T3.UserId JOIN posts AS T4 ON T3.PostId = T4.Id JOIN postLinks AS T5 ON T4.Id = T5.PostId JOIN tags AS T2 ON T5.RelatedPostId = T2.Id WHERE T1.DisplayName = 'John Stauffer';"}, {"question_id": 631, "answer_sql": "SELECT COUNT(DISTINCT p.Id) AS NumberOfPosts FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'Daniel Vassallo';"}, {"question_id": 632, "answer_sql": "SELECT COUNT(T1.Id) AS VoteCount FROM votes AS T1 JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Harlan';"}, {"question_id": 633, "answer_sql": "SELECT p.Id FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'slashnick' GROUP BY p.Id ORDER BY p.AnswerCount DESC LIMIT 1;"}, {"question_id": 634, "answer_sql": "SELECT MAX(SUM(ViewCount)) AS PopularPost FROM posts WHERE DisplayName IN ('Harvey Motulsky', 'Noah Snyder');"}, {"question_id": 635, "answer_sql": "SELECT COUNT(*) AS NumberOfPosts FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'Matt Parker' AND p.Id IN ( SELECT PostId FROM votes WHERE PostId > 4 );"}, {"question_id": 636, "answer_sql": "SELECT COUNT(T2.Score) AS NegativeComments FROM users AS T1 JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Neil McGuigan' AND T2.Name = 'Negative Comment';"}, {"question_id": 637, "answer_sql": "SELECT t1.TagName FROM tags t1 JOIN postLinks t2 ON t1.Id = t2.ExcerptPostId JOIN posts t3 ON t2.PostId = t3.Id WHERE t3.DisplayName = 'Mark Meckes' AND t3.CommentCount = 0;"}, {"question_id": 638, "answer_sql": "SELECT DISTINCT U.DisplayName FROM users U JOIN badges B ON U.Id = B.UserId WHERE B.Name = 'Organizer';"}, {"question_id": 639, "answer_sql": "SELECT CAST(COUNT(CASE WHEN T2.TagName = 'r' THEN T1.Id ELSE NULL END) AS REAL) * 100 / COUNT(T2.Id) AS percentage FROM posts AS T1 JOIN tags AS T2 ON T1.Id = T2.ExcerptPostId WHERE T1.DisplayName = 'Community';"}, {"question_id": 640, "answer_sql": "SELECT SUM(CASE WHEN T2.DisplayName = 'Mornington' THEN T1.ViewCount ELSE 0 END) - SUM(CASE WHEN T2.DisplayName = 'Amos' THEN T1.ViewCount ELSE 0 END) AS ViewCountDifference FROM posts AS T1 JOIN users AS T2 ON T1.OwnerUserId = T2.Id;"}, {"question_id": 641, "answer_sql": "SELECT COUNT(DISTINCT b.UserId) AS NumberOfUsers FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.DisplayName LIKE '%commentator%' AND u.CreationDate >= '2014-01-01' AND u.CreationDate < '2015-01-01';"}, {"question_id": 642, "answer_sql": "SELECT COUNT(Id) AS NumberOfPosts FROM posts WHERE CreationDate BETWEEN '2010-07-21 00:00:00' AND '2012-07-21 23:59:59';"}, {"question_id": 643, "answer_sql": "SELECT DisplayName, Age FROM users WHERE Id = (SELECT OwnerUserId FROM posts ORDER BY ViewCount DESC LIMIT 1);"}, {"question_id": 644, "answer_sql": "SELECT p.CreaionDate AS LastEditDate, u.Id AS LastEditorUserId FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.Title = 'Detecting a given face in a database of facial images' ORDER BY p.CreaionDate DESC LIMIT 1;"}, {"question_id": 645, "answer_sql": "SELECT COUNT(*) AS NegativeComments FROM comments WHERE UserId = 13 AND Score < 60;"}, {"question_id": 646, "answer_sql": "SELECT p.Title, u.DisplayName FROM posts p JOIN comments c ON p.Id = c.PostId WHERE c.Score > 60 ORDER BY p.Title;"}, {"question_id": 647, "answer_sql": "SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Location IN ('North Pole') AND u.Id IN ( SELECT u.Id FROM users u JOIN votes v ON u.Id = v.UserId WHERE v.VoteTypeId = 1 -- 1 represents upvote AND v.CreationDate BETWEEN '2011-01-01' AND '2011-12-31' );"}, {"question_id": 648, "answer_sql": "SELECT u.DisplayName, u.WebsiteUrl FROM users u JOIN posts p ON u.Id = p.OwnerUserId JOIN votes v ON p.Id = v.PostId WHERE p.FavoriteCount > 150;"}, {"question_id": 649, "answer_sql": "SELECT p.Id, COUNT(ph.Id) AS PostHistoryCount, MAX(ph.CreationDate) AS LastEditDate FROM posts p JOIN postHistory ph ON p.Id = ph.PostId WHERE p.Title = 'What is the best introductory Bayesian statistics textbook?' GROUP BY p.Id"}, {"question_id": 650, "answer_sql": "SELECT u.DisplayName, u.Location, p.LasAccessDate FROM users u JOIN votes v ON u.Id = v.UserId JOIN posts p ON v.PostId = p.Id JOIN badges b ON p.Id = b.UserId WHERE b.Name = 'Outliers';"}, {"question_id": 651, "answer_sql": "SELECT T2.Title FROM posts AS T1 JOIN postLinks AS T3 ON T1.Id = T3.PostId JOIN posts AS T2 ON T3.RelatedPostId = T2.Id WHERE T1.Title = 'How to tell if something happened in a data set which monitors a value over time';"}, {"question_id": 652, "answer_sql": "SELECT DISTINCT p.Id, b.Name FROM posts p JOIN users u ON p.OwnerUserId = u.Id JOIN votes v ON p.Id = v.PostId JOIN badges b ON v.UserId = b.UserId WHERE u.DisplayName = 'Samuel' AND YEAR(p.CreaionDate) = 2013;"}, {"question_id": 653, "answer_sql": "SELECT u.DisplayName FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE p.ViewCount = (SELECT MAX(ViewCount) FROM posts) ORDER BY p.ViewCount DESC LIMIT 1;"}, {"question_id": 654, "answer_sql": "SELECT u.DisplayName, u.Location FROM users u JOIN tags t ON u.Id = t.OwnerUserId JOIN posts p ON u.Id = p.OwnerUserId WHERE t.TagName = 'hypothesis-testing';"}, {"question_id": 655, "answer_sql": "SELECT p.Title, pl.LinkTypeId FROM posts p JOIN postLinks pl ON p.Id = pl.PostId WHERE p.Title = 'What are principal component scores?';"}, {"question_id": 656, "answer_sql": "SELECT T2.DisplayName FROM posts AS T1 JOIN votes AS T3 ON T1.Id = T3.PostId JOIN users AS T2 ON T2.Id = T1.OwnerUserId WHERE T1.ParentId IS NOT NULL ORDER BY T1.Score DESC LIMIT 1;"}, {"question_id": 657, "answer_sql": "SELECT u.DisplayName, u.WebsiteUrl FROM users u JOIN votes v ON u.Id = v.UserId WHERE v.VoteTypeId = 8 ORDER BY v.BountyAmount DESC LIMIT 1;"}, {"question_id": 658, "answer_sql": "SELECT T1.Title FROM posts AS T1 JOIN (SELECT PostId, ViewCount FROM posts ORDER BY ViewCount DESC LIMIT 5) AS T2 ON T1.Id = T2.PostId;"}, {"question_id": 659, "answer_sql": "SELECT COUNT(T1.Id) AS TagCount FROM tags AS T1 WHERE T1.Count BETWEEN 5000 AND 7000;"}, {"question_id": 660, "answer_sql": "SELECT OwnerUserId FROM posts ORDER BY FavoriteCount DESC LIMIT 1;"}, {"question_id": 661, "answer_sql": "SELECT MAX(T1.Reputation) AS MostInfluentialAge FROM users AS T1 WHERE T1.Id = (SELECT T2.Id FROM users AS T2 WHERE T2.Reputation = (SELECT MAX(Reputation) FROM users))"}, {"question_id": 662, "answer_sql": "SELECT COUNT(*) AS NumberOfPosts FROM votes WHERE YEAR(CreationDate) = 2011 AND BountyAmount = 50;"}, {"question_id": 663, "answer_sql": "SELECT MIN(Id) AS YoungestUserId FROM users;"}, {"question_id": 664, "answer_sql": "SELECT MAX(posts.Score) AS Score FROM posts JOIN tags ON posts.Id = tags.ExcerptPostId GROUP BY posts.Score;"}, {"question_id": 665, "answer_sql": "SELECT AVG(COUNT(Id)) / 12 AS AverageMonthlyLinks FROM postHistory WHERE YEAR(CreationDate) = 2010 AND AnswerCount <= 2;"}, {"question_id": 666, "answer_sql": "SELECT MAX(posts.FavoriteCount) AS MostValuablePostId FROM posts JOIN votes ON posts.Id = votes.PostId JOIN users ON votes.UserId = users.Id WHERE users.Id = 1465;"}, {"question_id": 667, "answer_sql": "SELECT T1.Title FROM posts AS T1 JOIN postLinks AS T2 ON T1.Id = T2.PostId ORDER BY T2.CreationDate ASC LIMIT 1;"}, {"question_id": 668, "answer_sql": "SELECT DisplayName FROM users WHERE Id = (SELECT UserId FROM badges GROUP BY UserId ORDER BY COUNT(Name) DESC LIMIT 1);"}, {"question_id": 669, "answer_sql": "SELECT MIN(T1.CreationDate) AS FirstVoteDate FROM votes AS T1 JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'chl';"}, {"question_id": 670, "answer_sql": "SELECT MIN(T1.CreaionDate) AS Date FROM users AS T1 WHERE T1.Age = (SELECT MIN(Age) FROM users);"}, {"question_id": 671, "answer_sql": "SELECT DisplayName FROM users WHERE Id = (SELECT UserId FROM badges WHERE Name = 'Autobiographer' ORDER BY Date ASC LIMIT 1);"}, {"question_id": 672, "answer_sql": "SELECT COUNT(DISTINCT u.Id) AS UserCount FROM users u JOIN posts p ON u.Id = p.OwnerUserId JOIN votes v ON p.Id = v.PostId WHERE u.Location = 'United Kingdom' GROUP BY u.Id HAVING SUM(CASE WHEN v.VoteTypeId = 1 THEN 1 ELSE 0 END) >= 4;"}, {"question_id": 673, "answer_sql": "SELECT AVG(v.PostId) AS AverageNumberOfPostsVoted FROM votes v JOIN users u ON v.UserId = u.Id WHERE u.Age = (SELECT MAX(Age) FROM users);"}, {"question_id": 674, "answer_sql": "SELECT DisplayName FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users);"}, {"question_id": 675, "answer_sql": "SELECT COUNT(DISTINCT u.Id) AS NumberOfUsers FROM users u WHERE u.Reputation > 2000 AND u.Views > 1000;"}, {"question_id": 676, "answer_sql": "SELECT DisplayName FROM users WHERE Age BETWEEN 19 AND 65;"}, {"question_id": 677, "answer_sql": "SELECT COUNT(DISTINCT p.Id) AS NumberOfPosts FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'Jay Stevens' AND YEAR(p.CreationDate) = 2010;"}, {"question_id": 678, "answer_sql": "SELECT p.Id, p.Title FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'Harvey Motulsky' ORDER BY p.ViewCount DESC LIMIT 1;"}, {"question_id": 679, "answer_sql": "SELECT Id, Title FROM posts ORDER BY Score DESC LIMIT 1;"}, {"question_id": 680, "answer_sql": "SELECT AVG(posts.Score) AS AverageScore FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'Stephen Turner';"}, {"question_id": 681, "answer_sql": "SELECT DISTINCT U.DisplayName FROM users U JOIN posts P ON U.Id = P.OwnerUserId WHERE P.ViewCount > 20000 AND YEAR(P.CreaionDate) = 2011;"}, {"question_id": 682, "answer_sql": "SELECT p.Id, u.DisplayName FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts WHERE YEAR(p.CreaionDate) = 2010) AND YEAR(p.CreaionDate) = 2010;"}, {"question_id": 683, "answer_sql": "SELECT (COUNT(CASE WHEN CreationDate = '2011' AND Reputation > 1000 THEN Id ELSE NULL END) / COUNT(Id)) * 100 AS percentage FROM posts WHERE CreationDate = '2011';"}, {"question_id": 684, "answer_sql": "SELECT (COUNT(CASE WHEN Age BETWEEN 13 AND 18 THEN 1 ELSE NULL END) / COUNT(Id)) * 100 AS percentage FROM users;"}, {"question_id": 685, "answer_sql": "SELECT u.DisplayName, SUM(p.ViewCount) AS TotalViews FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.Title = 'Computer Game Datasets' GROUP BY u.Id ORDER BY TotalViews DESC LIMIT 1;"}, {"question_id": 686, "answer_sql": "SELECT COUNT(*) AS TotalPostsAboveAverage FROM posts WHERE ViewCount > (SELECT AVG(ViewCount) FROM posts);"}, {"question_id": 687, "answer_sql": "SELECT COUNT(*) AS CommentCount FROM comments WHERE Score = (SELECT MAX(Score) FROM posts);"}, {"question_id": 688, "answer_sql": "SELECT COUNT(DISTINCT p.Id) AS NumberOfPosts FROM posts p JOIN comments c ON p.Id = c.PostId WHERE p.ViewCount > 35000 AND c.CommentCount = 0;"}, {"question_id": 689, "answer_sql": "SELECT u.DisplayName, u.Location FROM users u JOIN posts p ON u.Id = p.OwnerUserId JOIN postHistory ph ON p.Id = ph.PostId WHERE p.Id = 183 ORDER BY ph.LastEditDate DESC LIMIT 1;"}, {"question_id": 690, "answer_sql": "SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'Emmett' ORDER BY b.Date DESC LIMIT 1;"}, {"question_id": 691, "answer_sql": "SELECT COUNT(DISTINCT U.Id) AS AdultUsersWithOver5000Upvotes FROM users U JOIN votes V ON U.Id = V.UserId WHERE U.Age BETWEEN 19 AND 65 AND U.UpVotes > 5000;"}, {"question_id": 692, "answer_sql": "SELECT SUBTRACT(Date, CreationDate) AS Duration FROM badges WHERE DisplayName = 'Zolomon';"}, {"question_id": 693, "answer_sql": "SELECT COUNT(DISTINCT p.Id) AS NumberOfPosts, COUNT(DISTINCT c.Id) AS NumberOfComments FROM users u JOIN posts p ON u.Id = p.OwnerUserId JOIN comments c ON p.Id = c.PostId WHERE u.CreationDate = (SELECT MAX(CreationDate) FROM users);"}, {"question_id": 694, "answer_sql": "SELECT c.Text, u.DisplayName FROM comments c JOIN users u ON c.UserId = u.Id WHERE c.PostId = ( SELECT p.Id FROM posts p WHERE p.Title = 'Analysing wind data with R' ORDER BY c.CreationDate DESC LIMIT 1 );"}, {"question_id": 695, "answer_sql": "SELECT COUNT(DISTINCT T1.UserId) AS NumberOfUsersAwardedCitizenPatrolBadge FROM badges AS T1 JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Name = 'Citizen Patrol';"}, {"question_id": 696, "answer_sql": "SELECT COUNT(DISTINCT p.Id) AS NumberOfPostsWithCareersTag FROM posts p JOIN tags t ON p.Id = t.ExcerptPostId WHERE t.TagName = 'careers';"}, {"question_id": 697, "answer_sql": "SELECT Reputation, ViewCount FROM users WHERE DisplayName = 'Jarrod Dixon';"}, {"question_id": 698, "answer_sql": "SELECT COUNT(DISTINCT c.Id) AS CommentCount, COUNT(DISTINCT p.Id) AS AnswerCount FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.Title = 'Clustering 1D data';"}, {"question_id": 699, "answer_sql": "SELECT CreationDate FROM users WHERE DisplayName = 'IrishStat';"}, {"question_id": 700, "answer_sql": "SELECT COUNT(*) AS NumberOfPostsWithBountyAmountOver30 FROM posts WHERE BountyAmount >= 30;"}, {"question_id": 701, "answer_sql": "SELECT CAST(COUNT(stats_posts.Id) AS REAL) * 100 / COUNT(stats_posts.Id) FROM ( SELECT COUNT(stats_posts.Id) AS score_above_50 FROM posts stats_posts INNER JOIN users users ON stats_posts.OwnerUserId = users.Id WHERE stats_posts.Score >= 50 GROUP BY stats_posts.OwnerUserId ) AS top_users INNER JOIN ( SELECT COUNT(stats_posts.Id) AS total_reputation FROM posts stats_posts INNER JOIN users users ON stats_posts.OwnerUserId = users.Id GROUP BY stats_posts.OwnerUserId ) AS total_users ON top_users.OwnerUserId = total_users.OwnerUserId;"}, {"question_id": 702, "answer_sql": "SELECT COUNT(*) AS NumberOfPostsWithScoreLessThan20 FROM posts WHERE Score < 20;"}, {"question_id": 703, "answer_sql": "SELECT COUNT(T1.Id) AS Count FROM tags AS T1 WHERE T1.Id < 15 AND T1.Count <= 20;"}, {"question_id": 704, "answer_sql": "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'sample';"}, {"question_id": 705, "answer_sql": "SELECT u.Reputation, COUNT(v.Id) AS UpVotes FROM users u JOIN votes v ON u.Id = v.UserId JOIN comments c ON c.UserId = v.UserId WHERE c.Text = 'fine, you win :)' GROUP BY u.Id;"}, {"question_id": 706, "answer_sql": "SELECT c.Text FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.Title = 'How can I adapt ANOVA for binary data?';"}, {"question_id": 707, "answer_sql": "SELECT c.Id, c.Score FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.ViewCount BETWEEN 100 AND 150 ORDER BY c.Score DESC LIMIT 1;"}, {"question_id": 708, "answer_sql": "SELECT comments.CreationDate, users.Age FROM comments JOIN users ON comments.UserId = users.Id WHERE comments.Text LIKE '%http%'"}, {"question_id": 709, "answer_sql": "SELECT COUNT(DISTINCT c.PostId) AS NumberOfPosts FROM comments c WHERE c.Score = 0 AND c.ViewCount < 5;"}, {"question_id": 710, "answer_sql": "SELECT COUNT(T2.Id) AS CommentsWithZeroScore FROM posts AS T1 JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.CommentCount = 1 AND T2.Score = 0;"}, {"question_id": 711, "answer_sql": "SELECT COUNT(DISTINCT T1.UserId) AS TotalUsers FROM comments AS T1 JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Score = 0 AND T2.Age = 40;"}, {"question_id": 712, "answer_sql": "SELECT p.Id, c.Id AS CommentId, c.Text FROM posts p JOIN comments c ON p.Id = c.PostId WHERE p.Title = 'Group differences on a five point Likert item';"}, {"question_id": 713, "answer_sql": "SELECT SUM(votes.BountyAmount) AS UpVoteNumber FROM votes JOIN comments ON votes.PostId = comments.Id WHERE comments.Text = 'R is also lazy evaluated.' AND comments.UserId = (SELECT UserId FROM comments WHERE Text = 'R is also lazy evaluated.');"}, {"question_id": 714, "answer_sql": "SELECT c.Text FROM comments c JOIN users u ON c.UserId = u.Id WHERE u.DisplayName = 'Harvey Motulsky';"}, {"question_id": 715, "answer_sql": "SELECT DISTINCT T2.DisplayName FROM comments AS T1 JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Score BETWEEN 1 AND 5 AND T2.DownVotes = 0;"}, {"question_id": 716, "answer_sql": "SELECT CAST(COUNT(CASE WHEN UpVotes = 0 AND Score BETWEEN 5 AND 10 THEN UserId ELSE NULL END) AS REAL) * 100 / COUNT(CASE WHEN Score BETWEEN 5 AND 10 THEN UserId ELSE NULL END) FROM comments WHERE Score BETWEEN 5 AND 10;"}, {"question_id": 717, "answer_sql": "SELECT s.power_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE s.superhero_name = '3-D Man';"}, {"question_id": 718, "answer_sql": "SELECT COUNT(*) FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Super Strength';"}, {"question_id": 719, "answer_sql": "SELECT COUNT(s.id) AS superhero_count FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Super Strength' AND s.height_cm > 200;"}, {"question_id": 720, "answer_sql": "SELECT superhero_name FROM superhero WHERE COUNT(hero_id) > 15;"}, {"question_id": 721, "answer_sql": "SELECT COUNT(*) AS num_superheroes_with_blue_eyes FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Blue';"}, {"question_id": 722, "answer_sql": "SELECT T2.colour FROM superhero AS T1 JOIN alignment AS T3 ON T1.alignment_id = T3.id JOIN skin_colour_id AS T4 ON T1.skin_colour_id = T4.id JOIN colour AS T2 ON T4.colour_id = T2.id WHERE T1.superhero_name = 'Apocalypse';"}, {"question_id": 723, "answer_sql": "SELECT COUNT(*) FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN colour c ON ha.eye_colour_id = c.id WHERE c.colour = 'Blue' AND ha.attribute_value = (SELECT id FROM attribute WHERE attribute_name = 'Agility');"}, {"question_id": 724, "answer_sql": "SELECT s.superhero_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN colour c ON ha.eye_colour_id = c.id WHERE c.colour = 'Blue';"}, {"question_id": 725, "answer_sql": "SELECT COUNT(*) AS superhero_count FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics');"}, {"question_id": 726, "answer_sql": "SELECT s.full_name FROM superhero s JOIN publisher p ON s.publisher_id = p.id JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id JOIN colour c ON a.attribute_value = c.id WHERE p.publisher_name = 'Marvel Comics' ORDER BY s.height_cm DESC LIMIT 1;"}, {"question_id": 727, "answer_sql": "SELECT T1.publisher_name FROM superhero AS T1 JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Sauron';"}, {"question_id": 728, "answer_sql": "SELECT COUNT(*) FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id JOIN colour ON superhero.eye_colour_id = colour.id WHERE publisher.publisher_name = 'Marvel Comics' AND colour.colour = 'Blue';"}, {"question_id": 729, "answer_sql": "SELECT AVG(height_cm) AS average_height FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics');"}, {"question_id": 730, "answer_sql": "SELECT CAST(SUM(CASE WHEN T2.power_name = 'Super Strength' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN superpower AS T2 ON T1.id = T2.hero_id WHERE T1.publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics')"}, {"question_id": 731, "answer_sql": "SELECT COUNT(*) AS superhero_count FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'DC Comics');"}, {"question_id": 732, "answer_sql": "SELECT T2.publisher_name FROM superhero AS T1 JOIN hero_attribute AS T3 ON T1.id = T3.hero_id JOIN attribute AS T2 ON T3.attribute_id = T2.id WHERE T2.attribute_name = 'Speed' ORDER BY T1.height_cm DESC LIMIT 1;"}, {"question_id": 733, "answer_sql": "SELECT COUNT(*) AS gold_eyed_superheroes FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id JOIN publisher ON superhero.publisher_id = publisher.id WHERE colour.colour = 'Gold' AND publisher.publisher_name = 'Marvel Comics';"}, {"question_id": 734, "answer_sql": "SELECT T2.publisher_name FROM superhero AS T1 JOIN hero_attribute AS T3 ON T1.id = T3.hero_id JOIN attribute AS T2 ON T3.attribute_id = T2.id WHERE T1.superhero_name = 'Blue Beetle II';"}, {"question_id": 735, "answer_sql": "SELECT COUNT(*) AS num_superheroes FROM superhero JOIN colour ON superhero.hair_colour_id = colour.id WHERE colour.colour = 'Blond';"}, {"question_id": 736, "answer_sql": "SELECT s.superhero_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id WHERE ha.attribute_name = 'Intelligence' ORDER BY ha.attribute_value ASC LIMIT 1;"}, {"question_id": 737, "answer_sql": "SELECT race.race FROM superhero AS s JOIN gender AS g ON s.gender_id = g.id JOIN race AS r ON s.race_id = r.id WHERE s.superhero_name = 'Copycat';"}, {"question_id": 738, "answer_sql": "SELECT COUNT(*) FROM superhero WHERE attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Durability') AND attribute_value < 50;"}, {"question_id": 739, "answer_sql": "SELECT superhero_name FROM superhero WHERE superhero_id IN ( SELECT hero_id FROM hero_power WHERE power_id IN ( SELECT id FROM superpower WHERE power_name = 'Death Touch' ) );"}, {"question_id": 740, "answer_sql": "SELECT COUNT(*) FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE s.gender_id = (SELECT id FROM gender WHERE gender = 'Female') AND a.attribute_name = 'Strength' AND a.attribute_value = 100;"}, {"question_id": 741, "answer_sql": "SELECT superhero_name FROM superhero WHERE superhero_name = (SELECT superhero_name FROM superhero GROUP BY superhero_name ORDER BY COUNT(*) DESC LIMIT 1);"}, {"question_id": 742, "answer_sql": "SELECT COUNT(*) FROM superhero WHERE race_id = (SELECT id FROM race WHERE race = 'Vampire');"}, {"question_id": 743, "answer_sql": "SELECT (SUM(CASE WHEN alignment = 'Bad' THEN 1 ELSE 0 END) * 100) / COUNT(id) AS percentage FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics');"}, {"question_id": 744, "answer_sql": "SELECT SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) AS difference FROM superhero AS T1 JOIN publisher AS T2 ON T1.publisher_id = T2.id;"}, {"question_id": 745, "answer_sql": "SELECT publisher_id FROM superhero WHERE publisher_name = 'Star Trek';"}, {"question_id": 746, "answer_sql": "SELECT AVG(attribute_value) AS average_attribute_value FROM superhero"}, {"question_id": 747, "answer_sql": "SELECT COUNT(*) FROM superhero WHERE full_name IS NULL;"}, {"question_id": 748, "answer_sql": "SELECT T2.eye_colour_id, T2.colour FROM superhero AS T1 JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.id = 75;"}, {"question_id": 749, "answer_sql": "SELECT T2.power_name FROM superhero AS T1 JOIN hero_power AS T3 ON T1.id = T3.hero_id JOIN superpower AS T2 ON T3.power_id = T2.id WHERE T1.superhero_name = 'Deathlok';"}, {"question_id": 750, "answer_sql": "SELECT AVG(s.weight_kg) AS average_weight FROM superhero s JOIN gender g ON s.gender_id = g.id WHERE g.gender = 'Female';"}, {"question_id": 751, "answer_sql": "SELECT s.power_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE s.gender_id = (SELECT id FROM gender WHERE gender = 'Male') LIMIT 5;"}, {"question_id": 752, "answer_sql": "SELECT superhero_name FROM superhero WHERE race_id = (SELECT id FROM race WHERE race = 'Alien');"}, {"question_id": 753, "answer_sql": "SELECT s.superhero_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id WHERE ha.attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'eye_colour') AND ha.attribute_value = 1 AND s.height_cm BETWEEN 170 AND 190;"}, {"question_id": 754, "answer_sql": "SELECT T2.power_name FROM superhero AS T1 JOIN hero_power AS T2 ON T1.id = T2.hero_id WHERE T1.id = 56;"}, {"question_id": 755, "answer_sql": "SELECT superhero_name FROM superhero WHERE race_id = (SELECT id FROM race WHERE race = 'Demi-God') LIMIT 5;"}, {"question_id": 756, "answer_sql": "SELECT COUNT(*) FROM superhero WHERE alignment_id = 'Bad';"}, {"question_id": 757, "answer_sql": "SELECT T1.race FROM superhero AS T1 JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.weight_kg = 169;"}, {"question_id": 758, "answer_sql": "SELECT T2.hair_colour_id, T2.colour FROM superhero AS T1 JOIN race AS T3 ON T1.race_id = T3.id JOIN gender AS T4 ON T1.gender_id = T4.id JOIN alignment AS T5 ON T1.alignment_id = T5.id JOIN superpower AS T6 ON T1.id = T6.hero_id JOIN hero_power AS T7 ON T6.id = T7.power_id JOIN superpower AS T8 ON T7.power_id = T8.id JOIN hero_attribute AS T9 ON T1.id = T9.hero_id JOIN attribute AS T10 ON T9.attribute_id = T10.id JOIN colour AS T11 ON T11.id = T10.attribute_value WHERE T1.height_cm = 185 AND T3.race = 'human' AND T11.colour IS NOT NULL;"}, {"question_id": 759, "answer_sql": "SELECT T1.eye_colour_id, T2.colour FROM superhero AS T1 JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.height_cm = (SELECT MAX(height_cm) FROM superhero) ORDER BY T1.height_cm DESC LIMIT 1;"}, {"question_id": 760, "answer_sql": "SELECT CAST(SUM(CASE WHEN T2.publisher_id = 13 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.publisher_id) FROM superhero AS T1 JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.height_cm BETWEEN 150 AND 180;"}, {"question_id": 761, "answer_sql": "SELECT s.full_name FROM superhero s JOIN ( SELECT hero_id, AVG(weight_kg) AS avg_weight FROM superhero GROUP BY hero_id ) avg_heroes ON s.id = avg_heroes.hero_id JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE s.gender_id = (SELECT id FROM gender WHERE gender = 'Male') AND s.weight_kg > (SELECT AVG(weight_kg) FROM superhero) * 0.79"}, {"question_id": 762, "answer_sql": "SELECT s.power_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id GROUP BY s.power_name ORDER BY COUNT(s.power_name) DESC LIMIT 1;"}, {"question_id": 763, "answer_sql": "SELECT T2.attribute_value FROM superhero AS T1 JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Abomination';"}, {"question_id": 764, "answer_sql": "SELECT T2.power_name FROM superhero AS T1 JOIN hero_power AS T3 ON T1.id = T3.hero_id JOIN superpower AS T2 ON T3.power_id = T2.id WHERE T1.id = 1;"}, {"question_id": 765, "answer_sql": "SELECT COUNT(*) AS count FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'stealth';"}, {"question_id": 766, "answer_sql": "SELECT s.full_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id WHERE ha.attribute_name = 'strength' ORDER BY ha.attribute_value DESC LIMIT 1;"}, {"question_id": 767, "answer_sql": "SELECT AVG(skin_colour_id) AS average_skin_colour FROM superhero WHERE skin_colour_id = 1;"}, {"question_id": 768, "answer_sql": "SELECT COUNT(*) AS superhero_count FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Dark Horse Comics');"}, {"question_id": 769, "answer_sql": "SELECT s.superhero_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE a.attribute_name = 'durability' AND s.publisher_name = 'Dark Horse Comics' ORDER BY ha.attribute_value DESC LIMIT 1;"}, {"question_id": 770, "answer_sql": "SELECT T2.colour FROM superhero AS T1 JOIN hero_attribute AS T3 ON T1.id = T3.hero_id JOIN attribute AS T2 ON T3.attribute_id = T2.id WHERE T1.full_name = 'Abraham Sapien';"}, {"question_id": 771, "answer_sql": "SELECT superhero_name FROM superhero WHERE power_id IN ( SELECT power_id FROM superpower WHERE power_name = 'Flight' );"}, {"question_id": 772, "answer_sql": "SELECT T2.eye_colour_id AS eye_colour, T2.hair_colour_id AS hair_colour, T2.skin_colour_id AS skin_colour FROM superhero AS T1 JOIN gender AS T2 ON T1.gender_id = T2.id JOIN publisher AS T3 ON T1.publisher_id = T3.id WHERE T3.publisher_name = 'Dark Horse Comics' AND T2.gender = 'Female';"}, {"question_id": 773, "answer_sql": "SELECT s.full_name, p.publisher_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN colour c ON ha.hair_colour_id = c.id AND ha.skin_colour_id = c.id JOIN colour eye_colour ON ha.eye_colour_id = eye_colour.id JOIN publisher p ON s.publisher_id = p.id WHERE ha.hair_colour_id = ha.skin_colour_id AND ha.hair_colour_id = ha.eye_colour_id;"}, {"question_id": 774, "answer_sql": "SELECT T1.race_id, T1.race, T2.alignment FROM superhero AS T1 JOIN race AS T3 ON T1.race_id = T3.id JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T1.superhero_name = 'A-Bomb';"}, {"question_id": 775, "answer_sql": "SELECT (SUM(CASE WHEN T2.colour = 'Blue' THEN 1 ELSE 0 END) * 100) / COUNT(T2.gender) AS percentage FROM superhero AS T1 JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T1.gender = 'Female';"}, {"question_id": 776, "answer_sql": "SELECT superhero_name, race_id, race FROM superhero WHERE full_name = 'Charles Chandler';"}, {"question_id": 777, "answer_sql": "SELECT gender.gender FROM superhero JOIN alignment ON superhero.alignment_id = alignment.id JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE superhero.superhero_name = 'Agent 13';"}, {"question_id": 778, "answer_sql": "SELECT superhero_name FROM superhero WHERE power_id IN ( SELECT power_id FROM superpower WHERE power_name = 'Adaptation' )"}, {"question_id": 779, "answer_sql": "SELECT COUNT(power_id) AS power_count FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = 'Amazo';"}, {"question_id": 780, "answer_sql": "SELECT T2.power_name FROM superhero AS T1 JOIN hero_attribute AS T3 ON T1.id = T3.hero_id JOIN attribute AS T2 ON T3.attribute_id = T2.id WHERE T1.full_name = 'Hunter Zolomon';"}, {"question_id": 781, "answer_sql": "SELECT s.height_cm FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id JOIN colour c ON a.eye_colour_id = c.id WHERE c.colour = 'Amber';"}, {"question_id": 782, "answer_sql": "SELECT superhero_name FROM superhero WHERE eye_colour_id = (SELECT id FROM colour WHERE colour = 'Black') AND hair_colour_id = (SELECT id FROM colour WHERE colour = 'Black');"}, {"question_id": 783, "answer_sql": "SELECT T2.eye_colour_id, T2.eye_colour FROM superhero AS T1 JOIN hero_attribute AS T3 ON T1.id = T3.hero_id JOIN attribute AS T2 ON T3.attribute_id = T2.id WHERE T2.attribute_name = 'Eye Colour' AND T1.skin_colour_id = (SELECT id FROM colour WHERE colour = 'Gold');"}, {"question_id": 784, "answer_sql": "SELECT superhero_name FROM superhero WHERE race_id = (SELECT id FROM race WHERE race = 'Vampire');"}, {"question_id": 785, "answer_sql": "SELECT superhero_name FROM superhero WHERE alignment_id = (SELECT id FROM alignment WHERE alignment = 'Neutral');"}, {"question_id": 786, "answer_sql": "SELECT COUNT(*) FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id WHERE ha.attribute_name = 'Strength' GROUP BY s.id ORDER BY MAX(ha.attribute_value) DESC LIMIT 1;"}, {"question_id": 787, "answer_sql": "SELECT race.race, alignment.alignment FROM superhero JOIN alignment ON superhero.alignment_id = alignment.id JOIN gender ON superhero.gender_id = gender.id JOIN race ON superhero.race_id = race.id WHERE superhero.full_name = 'Cameron Hicks';"}, {"question_id": 788, "answer_sql": "SELECT (SUM(CASE WHEN T2.gender = 'Female' THEN 1 ELSE 0 END) * 100) / COUNT(T2.publisher_name) AS percent FROM superhero AS T1 JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics';"}, {"question_id": 789, "answer_sql": "SELECT AVG(s.weight_kg) AS average_weight FROM superhero s JOIN race r ON s.race_id = r.id JOIN alignment a ON s.alignment_id = a.id WHERE r.race = 'Alien';"}, {"question_id": 790, "answer_sql": "SELECT SUM(CASE WHEN T2.full_name = 'Emil Blonsky' THEN T1.weight_kg ELSE 0 END) - SUM(CASE WHEN T2.full_name = 'Charles Chandler' THEN T1.weight_kg ELSE 0 END) FROM superhero AS T1 JOIN hero_attribute AS T2 ON T1.id = T2.hero_id;"}, {"question_id": 791, "answer_sql": "SELECT superhero_name, AVG(height_cm) AS average_height FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id GROUP BY superhero_name;"}, {"question_id": 792, "answer_sql": "SELECT T2.power_name FROM superhero AS T1 JOIN hero_power AS T3 ON T1.id = T3.hero_id JOIN superpower AS T2 ON T3.power_id = T2.id WHERE T1.superhero_name = 'Abomination';"}, {"question_id": 793, "answer_sql": "SELECT COUNT(*) FROM superhero s JOIN race r ON s.race_id = r.id JOIN gender g ON s.gender_id = g.id WHERE r.id = 21 AND g.id = 1;"}, {"question_id": 794, "answer_sql": "SELECT s1.superhero_name FROM superhero s1 JOIN hero_attribute ha1 ON s1.id = ha1.hero_id JOIN attribute a1 ON ha1.attribute_id = a1.id WHERE a1.attribute_name = 'Speed' ORDER BY ha1.attribute_value DESC LIMIT 1;"}, {"question_id": 795, "answer_sql": "SELECT COUNT(*) FROM superhero WHERE alignment_id = 3;"}, {"question_id": 796, "answer_sql": "SELECT attribute_name, attribute_value FROM attribute JOIN hero_attribute ON attribute.id = hero_attribute.attribute_id JOIN superhero ON superhero.id = hero_attribute.hero_id WHERE superhero_name = '3-D Man';"}, {"question_id": 797, "answer_sql": "SELECT s1.superhero_name FROM superhero s1 JOIN hero_attribute ha1 ON s1.id = ha1.hero_id JOIN attribute a1 ON ha1.attribute_id = a1.id JOIN colour c1 ON a1.attribute_value = c1.id WHERE c1.id = 7 AND c1.id = 9;"}, {"question_id": 798, "answer_sql": "SELECT T1.publisher_name FROM superhero AS T1 JOIN hero_attribute AS T2 ON T1.id = T2.hero_id JOIN attribute AS T3 ON T2.attribute_id = T3.id JOIN colour AS T4 ON T3.id = T4.id WHERE T1.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy');"}, {"question_id": 799, "answer_sql": "SELECT COUNT(*) FROM superhero WHERE publisher_id = 1;"}, {"question_id": 800, "answer_sql": "SELECT CAST(SUM(CASE WHEN T2.eye_colour_id = 7 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.superhero_name) AS percentage FROM superhero AS T1 JOIN attribute AS T2 ON T1.eye_colour_id = T2.id;"}, {"question_id": 801, "answer_sql": "SELECT SUM(CASE WHEN gender_id = 1 THEN 1 ELSE 0 END) / SUM(CASE WHEN gender_id = 2 THEN 1 ELSE 0 END) AS ratio FROM superhero;"}, {"question_id": 802, "answer_sql": "SELECT superhero_name FROM superhero WHERE height_cm = (SELECT MAX(height_cm) FROM superhero);"}, {"question_id": 803, "answer_sql": "SELECT power_id FROM superpower WHERE power_name = 'cryokinesis';"}, {"question_id": 804, "answer_sql": "SELECT superhero_name FROM superhero WHERE id = 294;"}, {"question_id": 805, "answer_sql": "SELECT superhero_name FROM superhero WHERE weight_kg = 0 OR weight_kg IS NULL;"}, {"question_id": 806, "answer_sql": "SELECT T2.eye_colour_id, T2.colour FROM superhero AS T1 JOIN hero_attribute AS T3 ON T1.id = T3.hero_id JOIN attribute AS T2 ON T3.attribute_id = T2.id WHERE T1.full_name = 'Karen Beecher-Duncan';"}, {"question_id": 807, "answer_sql": "SELECT T2.power_name FROM superhero AS T1 JOIN hero_power AS T3 ON T1.id = T3.hero_id JOIN superpower AS T2 ON T3.power_id = T2.id WHERE T1.full_name = 'Helen Parr';"}, {"question_id": 808, "answer_sql": "SELECT T2.race FROM superhero AS T1 JOIN hero_attribute AS T3 ON T1.id = T3.hero_id JOIN attribute AS T2 ON T3.attribute_id = T2.id WHERE T1.weight_kg = 108 AND T1.height_cm = 188;"}, {"question_id": 809, "answer_sql": "SELECT T2.publisher_name FROM superhero AS T1 JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.id = 38;"}, {"question_id": 810, "answer_sql": "SELECT race.race FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id GROUP BY race.race ORDER BY MAX(hero_attribute.attribute_value) DESC LIMIT 1;"}, {"question_id": 811, "answer_sql": "SELECT alignment.alignment, superpower.power_name FROM superhero JOIN alignment ON superhero.alignment_id = alignment.id JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = 'Atom IV';"}, {"question_id": 812, "answer_sql": "SELECT superhero_name FROM superhero WHERE eye_colour_id = (SELECT id FROM colour WHERE colour = 'Blue') LIMIT 5;"}, {"question_id": 813, "answer_sql": "SELECT AVG(attribute_value) AS average_attribute_value FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE alignment_id = 3;"}, {"question_id": 814, "answer_sql": "SELECT T1.skin_colour_id, T1.colour FROM superhero AS T1 JOIN hero_attribute AS T2 ON T1.id = T2.hero_id JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_value = 100;"}, {"question_id": 815, "answer_sql": "SELECT COUNT(*) AS good_female_superheroes FROM superhero WHERE alignment_id = 1 AND gender_id = 2;"}, {"question_id": 816, "answer_sql": "SELECT superhero_name FROM superhero WHERE attribute_value BETWEEN 75 AND 80;"}, {"question_id": 817, "answer_sql": "SELECT T1.race FROM superhero AS T1 JOIN gender AS T2 ON T1.gender_id = T2.id JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T3.colour = 'blue' AND T2.gender = 'male';"}, {"question_id": 818, "answer_sql": "SELECT CAST(SUM(CASE WHEN T2.gender_id = 2 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.alignment_id) FROM alignment AS T1 JOIN superhero AS T2 ON T1.id = T2.alignment_id WHERE T1.id = 2;"}, {"question_id": 819, "answer_sql": "SELECT SUM(CASE WHEN T1.eye_colour_id = 7 THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.eye_colour_id = 1 THEN 1 ELSE 0 END) AS difference FROM superhero AS T1 WHERE T1.weight_kg = 0 OR T1.weight_kg IS NULL;"}, {"question_id": 820, "answer_sql": "SELECT attribute_value FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE superhero_name = 'Hulk' AND attribute_name = 'Strength';"}, {"question_id": 821, "answer_sql": "SELECT s.power_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON sp.id = hp.power_id WHERE s.superhero_name = 'Ajax';"}, {"question_id": 822, "answer_sql": "SELECT COUNT(*) AS green_skinned_villains FROM superhero WHERE skin_colour_id = (SELECT id FROM colour WHERE colour = 'Green') AND alignment = 'Bad';"}, {"question_id": 823, "answer_sql": "SELECT COUNT(*) FROM superhero s JOIN publisher p ON s.publisher_id = p.id WHERE p.publisher_name = 'Marvel Comics' AND s.gender_id = (SELECT id FROM gender WHERE gender = 'Female');"}, {"question_id": 824, "answer_sql": "SELECT s.superhero_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Wind Control' ORDER BY s.superhero_name;"}, {"question_id": 825, "answer_sql": "SELECT T2.gender FROM superpower AS T1 JOIN hero_power AS T3 ON T1.id = T3.power_id JOIN superhero AS T2 ON T3.hero_id = T2.id WHERE T1.power_name = 'Phoenix Force';"}, {"question_id": 826, "answer_sql": "SELECT MAX(s.weight_kg) AS heaviest_superhero_weight FROM superhero s JOIN publisher p ON s.publisher_id = p.id WHERE p.publisher_name = 'DC Comics';"}, {"question_id": 827, "answer_sql": "SELECT AVG(height_cm) AS average_height FROM superhero WHERE race_id <> 1 AND publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Dark Horse Comics')"}, {"question_id": 828, "answer_sql": "SELECT superhero_name FROM superhero WHERE attribute_value = 100 AND attribute_name = 'Speed' ORDER BY height_cm DESC, weight_kg DESC LIMIT 1;"}, {"question_id": 829, "answer_sql": "SELECT SUM(CASE WHEN T2.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) AS difference FROM superhero AS T1 JOIN publisher AS T2 ON T1.publisher_id = T2.id;"}, {"question_id": 830, "answer_sql": "SELECT attribute_name FROM attribute WHERE attribute_name = 'weakest' AND superhero_name = 'Black Panther';"}, {"question_id": 831, "answer_sql": "SELECT T2.colour FROM superhero AS T1 JOIN alignment AS T3 ON T1.alignment_id = T3.id JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Abomination';"}, {"question_id": 832, "answer_sql": "SELECT superhero_name FROM superhero WHERE height_cm = (SELECT MAX(height_cm) FROM superhero);"}, {"question_id": 833, "answer_sql": "SELECT superhero_name FROM superhero WHERE full_name = 'Charles Chandler';"}, {"question_id": 834, "answer_sql": "SELECT CAST(SUM(CASE WHEN T2.gender = 'Female' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.publisher_name) AS percentage FROM superhero AS T1 JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'George Lucas';"}, {"question_id": 835, "answer_sql": "SELECT (SUM(CASE WHEN T1.publisher_name = 'Marvel Comics' AND T1.alignment = 'Good' THEN 1 ELSE 0 END) * 100.0) / COUNT(T1.publisher_name) AS percentage_good_superheroes FROM superhero AS T1 JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T1.publisher_name = 'Marvel Comics';"}, {"question_id": 836, "answer_sql": "SELECT COUNT(*) AS total_superheroes FROM superhero WHERE full_name LIKE 'John%';"}, {"question_id": 837, "answer_sql": "SELECT hero_id FROM hero_attribute ORDER BY attribute_value ASC LIMIT 1;"}, {"question_id": 838, "answer_sql": "SELECT superhero_name FROM superhero WHERE full_name = 'Alien';"}, {"question_id": 839, "answer_sql": "SELECT s.full_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE s.weight_kg < 100 AND a.eye_colour_id = (SELECT id FROM colour WHERE colour = 'brown');"}, {"question_id": 840, "answer_sql": "SELECT T2.attribute_value FROM superhero AS T1 JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Aquababy';"}, {"question_id": 841, "answer_sql": "SELECT superhero.weight_kg, race.race FROM superhero JOIN race ON superhero.race_id = race.id WHERE superhero.id = 40;"}, {"question_id": 842, "answer_sql": "SELECT AVG(height_cm) AS average_height FROM superhero WHERE alignment_id = (SELECT id FROM alignment WHERE alignment = 'Neutral')"}, {"question_id": 843, "answer_sql": "SELECT superhero.id FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Intelligence';"}, {"question_id": 844, "answer_sql": "SELECT T2.colour FROM superhero AS T1 JOIN hero_attribute AS T3 ON T1.id = T3.hero_id JOIN attribute AS T2 ON T3.attribute_id = T2.id WHERE T1.superhero_name = 'Blackwulf';"}, {"question_id": 845, "answer_sql": "SELECT s.power_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE s.height_cm > (SELECT AVG(height_cm) * 0.8 FROM superhero);"}, {"question_id": 846, "answer_sql": "SELECT T1.driverRef FROM drivers AS T1 JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.q1 IS NULL AND T2.raceId = 18 LIMIT 5;"}, {"question_id": 847, "answer_sql": "SELECT D.surname FROM drivers D JOIN qualifying Q ON D.driverId = Q.driverId WHERE Q.raceId = 19 AND Q.q2 = (SELECT MIN(q2) FROM qualifying WHERE raceId = 19 AND q2 IS NOT NULL)"}, {"question_id": 848, "answer_sql": "SELECT DISTINCT T1.year FROM races AS T1 JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.location = 'Shanghai';"}, {"question_id": 849, "answer_sql": "SELECT url FROM races WHERE circuitId = (SELECT circuitId FROM circuits WHERE name = 'Circuit de Barcelona-Catalunya');"}, {"question_id": 850, "answer_sql": "SELECT T1.name FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T1.country = 'Germany';"}, {"question_id": 851, "answer_sql": "SELECT T2.position FROM constructors AS T1 JOIN constructorResults AS T3 ON T1.constructorId = T3.constructorId JOIN races AS T4 ON T3.raceId = T4.raceId JOIN circuits AS T2 ON T4.circuitId = T2.circuitId WHERE T1.name = 'Renault';"}, {"question_id": 852, "answer_sql": "SELECT COUNT(raceId) AS races_count FROM races WHERE year = 2010 AND circuitId IN ( SELECT circuitId FROM circuits WHERE country NOT IN ('Asia', 'Europe') );"}, {"question_id": 853, "answer_sql": "SELECT DISTINCT races.name FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.country = 'Spain';"}, {"question_id": 854, "answer_sql": "SELECT circuits.location FROM circuits JOIN races ON circuits.circuitId = races.circuitId JOIN results ON races.raceId = results.raceId WHERE races.name = 'Australian Grand Prix';"}, {"question_id": 855, "answer_sql": "SELECT r.name, r.url FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.name = 'Sepang International Circuit';"}, {"question_id": 856, "answer_sql": "SELECT T1.time FROM races AS T1 JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Sepang International Circuit';"}, {"question_id": 857, "answer_sql": "SELECT circuits.lat, circuits.lng FROM circuits JOIN races ON circuits.circuitId = races.circuitId JOIN results ON races.raceId = results.raceId WHERE races.name = 'Abu Dhabi Grand Prix';"}, {"question_id": 858, "answer_sql": "SELECT T1.country FROM constructors AS T1 JOIN constructorResults AS T2 ON T1.constructorId = T2.constructorId JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.round = 24 AND T2.points = 1;"}, {"question_id": 859, "answer_sql": "SELECT q1 FROM qualifying WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Bruno' AND surname = 'Senna') AND raceId = 354;"}, {"question_id": 860, "answer_sql": "SELECT T1.nationality FROM drivers AS T1 JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.q2 = '0:01:40';"}, {"question_id": 861, "answer_sql": "SELECT T1.number FROM drivers AS T1 JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.q3 = '0:01:54';"}, {"question_id": 862, "answer_sql": "SELECT COUNT(DISTINCT driverId) AS driver_count FROM drivers WHERE driverId IN ( SELECT driverId FROM results WHERE raceId = ( SELECT raceId FROM races WHERE year = 2007 AND circuitRef = 'Bahrain' ) AND time IS NOT NULL );"}, {"question_id": 863, "answer_sql": "SELECT s.year FROM seasons s JOIN races r ON s.year = r.year WHERE r.raceId = (SELECT raceId FROM races WHERE number = 901);"}, {"question_id": 864, "answer_sql": "SELECT COUNT(DISTINCT driverId) AS num_drivers_finished FROM races WHERE date = '2015-11-29';"}, {"question_id": 865, "answer_sql": "SELECT d.surname, d.forename, d.dob FROM drivers d JOIN results r ON d.driverId = r.driverId WHERE r.raceId = (SELECT raceId FROM races WHERE year = 2023 AND round = 592) ORDER BY d.dob ASC LIMIT 1;"}, {"question_id": 866, "answer_sql": "SELECT url FROM drivers WHERE driverId = ( SELECT driverId FROM lapTimes WHERE time = '0:01:27' );"}, {"question_id": 867, "answer_sql": "SELECT drivers.surname, drivers.forename, constructors.name AS constructor_name FROM drivers JOIN results ON drivers.driverId = results.driverId JOIN races ON results.raceId = races.raceId JOIN constructorResults ON results.constructorId = constructorResults.constructorId JOIN constructorStandings ON constructorResults.constructorId = constructorStandings.constructorId WHERE races.year = 1993 AND races.round = 933 ORDER BY results.position ASC LIMIT 1;"}, {"question_id": 868, "answer_sql": "SELECT location, lat, lng FROM circuits WHERE name = 'Malaysian Grand Prix';"}, {"question_id": 869, "answer_sql": "SELECT c.url FROM constructors c JOIN constructorResults cr ON c.constructorId = cr.constructorId JOIN races r ON cr.raceId = r.raceId WHERE r.year = 2019 AND r.round = 9 ORDER BY cr.points DESC LIMIT 1;"}, {"question_id": 870, "answer_sql": "SELECT q1 FROM qualifying WHERE raceId = (SELECT raceId FROM races WHERE round = 345) AND driverId = (SELECT driverId FROM drivers WHERE forename = 'Lucas' AND surname = 'di Grassi');"}, {"question_id": 871, "answer_sql": "SELECT d.surname, d.forename, c.country FROM drivers d JOIN qualifying q ON d.driverId = q.driverId WHERE q.q2 = '0:01:15' AND q.raceId = (SELECT raceId FROM races WHERE round = 347)"}, {"question_id": 872, "answer_sql": "SELECT T2.code FROM races AS T1 JOIN qualifying AS T3 ON T1.raceId = T3.raceId JOIN drivers AS T2 ON T3.driverId = T2.driverId WHERE T1.round = 45 AND T3.q3 = '0:01:33';"}, {"question_id": 873, "answer_sql": "SELECT T2.time FROM races AS T1 INNER JOIN lapTimes AS T2 ON T1.raceId = T2.raceId WHERE T1.raceId = 743 AND T2.driverId = (SELECT driverId FROM drivers WHERE forename = 'Bruce' AND surname = 'McLaren');"}, {"question_id": 874, "answer_sql": "SELECT d.surname, d.forename, r.position FROM drivers d JOIN races r ON d.driverId = r.driverId JOIN results res ON r.raceId = res.raceId WHERE r.name = 'San Marino Grand Prix' AND r.year = 2006 AND r.position = 2;"}, {"question_id": 875, "answer_sql": "SELECT s.year FROM seasons s JOIN races r ON s.year = r.year WHERE r.raceId = (SELECT raceId FROM races WHERE number = 901);"}, {"question_id": 876, "answer_sql": "SELECT COUNT(DISTINCT driverId) AS num_drivers FROM races WHERE date = '2015-11-29';"}, {"question_id": 877, "answer_sql": "SELECT MIN(dob) AS youngest_driver FROM drivers WHERE driverId IN ( SELECT driverId FROM results WHERE raceId = ( SELECT raceId FROM races WHERE year = 2023 AND round = 872 ) );"}, {"question_id": 878, "answer_sql": "SELECT d.forename, d.surname FROM drivers d JOIN lapTimes lt ON d.driverId = lt.driverId WHERE lt.raceId = (SELECT raceId FROM races WHERE round = 348) ORDER BY lt.time ASC LIMIT 1;"}, {"question_id": 879, "answer_sql": "SELECT T1.nationality FROM drivers AS T1 JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.fastestLapSpeed = (SELECT MAX(fastestLapSpeed) FROM results WHERE raceId = 348);"}, {"question_id": 880, "answer_sql": "SELECT (100 * (fastestLapSpeed(raceId = 853) - fastestLapSpeed(raceId = 854)) / fastestLapSpeed(raceId = 853)) AS percentage_faster FROM results WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Paul' AND surname = 'Di Resta');"}, {"question_id": 881, "answer_sql": "SELECT COUNT(DISTINCT CASE WHEN T1.date = '1983-07-16' THEN T1.driverid ELSE NULL END) / COUNT(T1.driverid) AS race_completion_rate FROM drivers AS T1 JOIN races AS T2 ON T1.driverid = T2.driverid WHERE T2.date = '1983-07-16';"}, {"question_id": 882, "answer_sql": "SELECT year FROM races WHERE name = 'Singapore Grand Prix' ORDER BY year LIMIT 1;"}, {"question_id": 883, "answer_sql": "SELECT COUNT(raceId) AS race_count, name FROM races WHERE year = 2005 ORDER BY raceId DESC;"}, {"question_id": 884, "answer_sql": "SELECT raceId, name, date FROM races WHERE year = year(min(date)) AND month = month(min(date)) LIMIT 1;"}, {"question_id": 885, "answer_sql": "SELECT T1.name, T1.date FROM races AS T1 JOIN seasons AS T2 ON T1.year = T2.year WHERE T2.year = 1999 ORDER BY T1.round DESC LIMIT 1;"}, {"question_id": 886, "answer_sql": "SELECT year FROM races GROUP BY year ORDER BY COUNT(raceId) DESC LIMIT 1;"}, {"question_id": 887, "answer_sql": "SELECT races.name FROM races WHERE races.year = 2017 AND races.year != 2000;"}, {"question_id": 888, "answer_sql": "SELECT c.country, c.location FROM circuits c JOIN races r ON c.circuitId = r.circuitId WHERE r.year = (SELECT MIN(year) FROM seasons) AND r.circuitRef LIKE '%European%'"}, {"question_id": 889, "answer_sql": "SELECT MAX(year) FROM races WHERE circuitId = (SELECT circuitId FROM circuits WHERE name = 'Brands Hatch') AND name LIKE 'British Grand Prix';"}, {"question_id": 890, "answer_sql": "SELECT COUNT(DISTINCT T1.year) AS num_seasons FROM races AS T1 JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Silverstone Circuit' AND T1.name LIKE '%British Grand Prix%';"}, {"question_id": 891, "answer_sql": "SELECT d.driverId, d.surname, d.forename, ds.positionText FROM drivers d JOIN driverStandings ds ON d.driverId = ds.driverId WHERE ds.raceId = (SELECT raceId FROM races WHERE year = 2010 AND name = 'Singapore Grand Prix') ORDER BY ds.positionText;"}, {"question_id": 892, "answer_sql": "SELECT d.forename, d.surname FROM drivers d JOIN driverStandings ds ON d.driverId = ds.driverId WHERE ds.points = (SELECT MAX(points) FROM driverStandings);"}, {"question_id": 893, "answer_sql": "SELECT drivers.forename, drivers.surname, SUM(results.points) AS total_points FROM drivers JOIN races ON drivers.driverId = races.driverId JOIN results ON drivers.driverId = results.driverId WHERE races.name = 'Chinese Grand Prix' AND races.year = 2017 GROUP BY drivers.driverId ORDER BY total_points DESC LIMIT 3;"}, {"question_id": 894, "answer_sql": "SELECT d.driverRef AS driver, r.name AS race FROM drivers d JOIN races r ON d.driverId = r.driverId WHERE r.id = ( SELECT raceId FROM lapTimes ORDER BY time ASC LIMIT 1 ) ORDER BY time ASC;"}, {"question_id": 895, "answer_sql": "SELECT AVG(T2.time) AS average_lap_time FROM races AS T1 JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.forename = 'Sebastian' AND T2.surname = 'Vettel' AND T1.name = 'Chinese Grand Prix' AND T1.year = 2009;"}, {"question_id": 896, "answer_sql": "SELECT (COUNT(raceId) WHERE surname = 'Hamilton' AND year >= 2010 AND position > 1) / (COUNT(raceId) WHERE surname = 'Hamilton' AND year >= 2010) AS percentage FROM races WHERE surname = 'Hamilton' AND year >= 2010;"}, {"question_id": 897, "answer_sql": "SELECT d.surname, d.nationality, AVG(rs.points) AS average_points FROM drivers d JOIN driverStandings rs ON d.driverId = rs.driverId GROUP BY d.driverId ORDER BY COUNT(rs.wins) DESC LIMIT 1;"}, {"question_id": 898, "answer_sql": "SELECT T1.driverId, T1.forename, T1.surname, T1.dob, T2.age FROM drivers AS T1 JOIN ( SELECT driverId, MAX(dob) AS max_dob FROM drivers WHERE nationality = 'Japanese' GROUP BY driverId ) AS T3 ON T1.driverId = T3.driverId JOIN ( SELECT driverId, 2022 - YEAR(dob) + 1 AS age FROM drivers WHERE nationality = 'Japanese' ) AS T2 ON T1.driverId = T2.driverId ORDER BY T2.age ASC LIMIT 1;"}, {"question_id": 899, "answer_sql": "SELECT DISTINCT c.circuitRef, c.name FROM circuits c JOIN races r ON c.circuitId = r.circuitId WHERE r.year BETWEEN 1990 AND 2000 GROUP BY c.circuitRef, c.name HAVING COUNT(DISTINCT r.year) = 4;"}, {"question_id": 900, "answer_sql": "SELECT circuits.name, circuits.location, races.name FROM circuits JOIN races ON circuits.circuitId = races.circuitId WHERE circuits.country = 'USA' AND races.year = 2006;"}, {"question_id": 901, "answer_sql": "SELECT races.name, circuits.name AS circuit_name, circuits.location FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE month(races.date) = 9 AND year(races.date) = 2005;"}, {"question_id": 902, "answer_sql": "SELECT r.name FROM races r JOIN drivers d ON r.driverId = d.driverId WHERE d.number < 10 AND d.driverRef = 'Alex Yoong';"}, {"question_id": 903, "answer_sql": "SELECT COUNT(DISTINCT T1.driverId) AS win_count FROM drivers AS T1 JOIN results AS T2 ON T1.driverId = T2.driverId JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.circuitRef = 'Sepang International Circuit' AND T1.driverRef = 'Michael Schumacher' AND T2.position = (SELECT MAX(position) FROM results WHERE driverId = T1.driverId);"}, {"question_id": 904, "answer_sql": "SELECT r.name, r.year FROM races r JOIN lapTimes lt ON r.raceId = lt.raceId JOIN drivers d ON lt.driverId = d.driverId WHERE d.forename = 'Michael' AND d.surname = 'Schumacher' AND lt.fastestLap = (SELECT MIN(milliseconds) FROM lapTimes WHERE raceId = r.raceId)"}, {"question_id": 905, "answer_sql": "SELECT AVG(points) AS average_points FROM results WHERE year = 2000 AND driverId = (SELECT driverId FROM drivers WHERE forename = 'Eddie' AND surname = 'Irvine');"}, {"question_id": 906, "answer_sql": "SELECT min(r.year) AS first_race_year, d.surname || ', ' || d.forename AS first_race_driver FROM drivers d JOIN races r ON d.driverId = r.driverId WHERE d.driverRef = 'LEWIS HAMILTON' GROUP BY d.driverId ORDER BY first_race_year ASC LIMIT 1;"}, {"question_id": 907, "answer_sql": "SELECT r.name AS race_name, c.country AS hosting_country, r.date FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE r.year = 2017 ORDER BY r.date;"}, {"question_id": 908, "answer_sql": "SELECT r.name, r.year, c.location FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE r.laps = ( SELECT MAX(laps) FROM results );"}, {"question_id": 909, "answer_sql": "SELECT CAST(COUNT(CASE WHEN T2.country = 'Germany' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T2.name) AS percentage FROM races AS T1 JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.name = 'Europearn Grand Prix';"}, {"question_id": 910, "answer_sql": "SELECT circuits.location FROM circuits WHERE circuits.circuitRef = 'SIL';"}, {"question_id": 911, "answer_sql": "SELECT circuits.name FROM circuits WHERE circuits.lat = ( SELECT MAX(lat) FROM circuits WHERE circuitRef IN ('Silverstone Circuit', 'Hockenheimring', 'Hungaroring') );"}, {"question_id": 912, "answer_sql": "SELECT circuitRef FROM circuits WHERE name = 'Marina Bay Street Circuit';"}, {"question_id": 913, "answer_sql": "SELECT T1.country FROM circuits AS T1 WHERE T1.alt = (SELECT MAX(alt) FROM circuits);"}, {"question_id": 914, "answer_sql": "SELECT COUNT(driverId) AS driver_count FROM drivers WHERE code IS NULL;"}, {"question_id": 915, "answer_sql": "SELECT T1.country FROM drivers AS T1 JOIN races AS T2 ON T1.driverId = T2.driverId WHERE T1.dob = (SELECT MIN(dob) FROM drivers);"}, {"question_id": 916, "answer_sql": "SELECT surname FROM drivers WHERE nationality = 'italian';"}, {"question_id": 917, "answer_sql": "SELECT url FROM drivers WHERE forename = 'Anthony' AND surname = 'Davidson';"}, {"question_id": 918, "answer_sql": "SELECT driverRef FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton';"}, {"question_id": 919, "answer_sql": "SELECT circuits.name FROM races JOIN circuits ON races.circuitId = circuits.circuitId JOIN results ON races.raceId = results.raceId WHERE races.year = 2009 AND races.name = 'Spanish Grand Prix';"}, {"question_id": 920, "answer_sql": "SELECT DISTINCT T1.year FROM races AS T1 JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Silverstone Circuit';"}, {"question_id": 921, "answer_sql": "SELECT r.name AS race_name, c.name AS circuit_name, r.url AS race_url FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.name = 'Silverstone Circuit';"}, {"question_id": 922, "answer_sql": "SELECT T1.time FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Abu Dhabi Circuit' AND T1.year = 2010;"}, {"question_id": 923, "answer_sql": "SELECT COUNT(DISTINCT raceId) AS numberOfRaces FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.country = 'Italy';"}, {"question_id": 924, "answer_sql": "SELECT DISTINCT T1.date FROM races AS T1 JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Barcelona-Catalunya';"}, {"question_id": 925, "answer_sql": "SELECT url FROM circuits WHERE circuitRef = 'SPA'"}, {"question_id": 926, "answer_sql": "SELECT T1.fastestLapTime FROM results AS T1 JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton';"}, {"question_id": 927, "answer_sql": "SELECT d.forename, d.surname FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN qualifying q ON r.driverId = q.driverId WHERE q.fastestLapSpeed IS NOT NULL ORDER BY r.position, r.positionOrder LIMIT 1;"}, {"question_id": 928, "answer_sql": "SELECT D.driverRef FROM drivers D JOIN races R ON D.driverId = R.driverId JOIN results RES ON R.raceId = RES.raceId WHERE R.name = 'Australian Grand Prix' AND R.year = 2008 AND RES.position = 1;"}, {"question_id": 929, "answer_sql": "SELECT r.name FROM races r JOIN drivers d ON r.driverId = d.driverId WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton';"}, {"question_id": 930, "answer_sql": "SELECT r.name, MIN(ds.rank) AS min_rank FROM races r JOIN drivers d ON r.driverId = d.driverId JOIN driverStandings ds ON d.driverId = ds.driverId WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton' GROUP BY r.name;"}, {"question_id": 931, "answer_sql": "SELECT MAX(fastestLapSpeed) AS fastestLapSpeed FROM results WHERE raceId = (SELECT raceId FROM races WHERE name = 'Spanish Grand Prix' AND year = 2009);"}, {"question_id": 932, "answer_sql": "SELECT DISTINCT T1.year FROM races AS T1 JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton';"}, {"question_id": 933, "answer_sql": "SELECT T1.positionOrder FROM drivers AS T1 JOIN results AS T2 ON T1.driverId = T2.driverId JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.name = 'Australian Grand Prix' AND T3.year = 2008 AND T1.forename = 'Lewis' AND T1.surname = 'Hamilton';"}, {"question_id": 934, "answer_sql": "SELECT drivers.forename, drivers.surname FROM drivers JOIN races ON drivers.driverId = races.driverId JOIN seasons ON races.year = seasons.year WHERE drivers.grid = 4 AND seasons.year = 2008 AND races.name = 'Australian Grand Prix';"}, {"question_id": 935, "answer_sql": "SELECT COUNT(DISTINCT T1.driverId) AS driver_count FROM drivers AS T1 JOIN races AS T2 ON T1.driverId = T2.driverId WHERE T2.year = 2008 AND T2.circuitRef = 'AUSTRALIA' AND T2.name = '2008 Australian Grand Prix' AND T2.time IS NOT NULL;"}, {"question_id": 936, "answer_sql": "SELECT q1, q2, q3 FROM qualifying WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton') AND raceId = (SELECT raceId FROM races WHERE name = 'Australian Grand Prix' AND year = 2008);"}, {"question_id": 937, "answer_sql": "SELECT T1.time FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T2.position = 2 AND T1.year = 2008 AND T1.name = 'Australian Grand Prix';"}, {"question_id": 938, "answer_sql": "SELECT d.surname || ' ' || d.forename AS driver_name, r.name AS race_name, r.url AS race_url FROM drivers d JOIN races r ON d.driverId = r.driverId WHERE r.year = 2008 AND r.round = 1 AND r.name = 'Australian Grand Prix'"}, {"question_id": 939, "answer_sql": "SELECT COUNT(DISTINCT T1.driverId) AS driver_count FROM drivers AS T1 JOIN races AS T2 ON T1.driverId = T2.driverId JOIN seasons AS T3 ON T2.year = T3.year WHERE T1.nationality = 'American' AND T2.name = 'Australian Grand Prix' AND T3.year = 2008;"}, {"question_id": 940, "answer_sql": "SELECT COUNT(DISTINCT T1.driverId) AS driver_count FROM drivers AS T1 JOIN races AS T2 ON T1.driverId = T2.driverId WHERE T2.year = 2008 AND T2.circuitRef = 'Australian Grand Prix';"}, {"question_id": 941, "answer_sql": "SELECT SUM(points) AS total_points FROM drivers JOIN results ON drivers.driverId = results.driverId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';"}, {"question_id": 942, "answer_sql": "SELECT AVG(CAST(REPLACE(REPLACE(REPLACE(fastestLapTime, ':', ''), '.', ''), ' ', '') AS REAL) / 1000) AS average_lap_time FROM results WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton');"}, {"question_id": 943, "answer_sql": "SELECT COUNT(CASE WHEN time IS NOT NULL THEN raceId ELSE NULL END) / COUNT(raceId) AS completion_rate FROM races WHERE year = 2008 AND circuitRef = 'Australian Grand Prix';"}, {"question_id": 944, "answer_sql": "SELECT (CASE WHEN T2.time IS NULL THEN 0 ELSE (T1.time - T2.time) * 100 / T2.time END) AS percentage_faster FROM results AS T1 JOIN results AS T2 ON T1.raceId = T2.raceId AND T1.driverId = T2.driverId WHERE T1.raceId = (SELECT raceId FROM races WHERE name = '2008 Australian Grand Prix') AND T1.position = (SELECT MAX(position) FROM results WHERE raceId = (SELECT raceId FROM races WHERE name = '2008 Australian Grand Prix'))"}, {"question_id": 945, "answer_sql": "SELECT COUNT(DISTINCT circuitId) AS circuit_count FROM circuits WHERE location = 'Melbourne, Australia';"}, {"question_id": 946, "answer_sql": "SELECT circuits.location FROM circuits WHERE circuits.country = 'USA';"}, {"question_id": 947, "answer_sql": "SELECT COUNT(DISTINCT driverId) AS british_drivers FROM drivers WHERE YEAR(dob) > 1980 AND nationality = 'British';"}, {"question_id": 948, "answer_sql": "SELECT AVG(points) AS average_points FROM constructors WHERE nationality = 'British';"}, {"question_id": 949, "answer_sql": "SELECT c.name, SUM(cr.points) AS total_points FROM constructors c JOIN constructorResults cr ON c.constructorId = cr.constructorId GROUP BY c.name ORDER BY total_points DESC LIMIT 1;"}, {"question_id": 950, "answer_sql": "SELECT T1.name FROM constructors AS T1 JOIN constructorResults AS T2 ON T1.constructorId = T2.constructorId JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2018 AND T3.round = 291 AND T2.points = 0;"}, {"question_id": 951, "answer_sql": "SELECT COUNT(DISTINCT c.constructorId) AS numberOfConstructors FROM constructors c JOIN constructorResults cr ON c.constructorId = cr.constructorId JOIN races r ON cr.raceId = r.raceId WHERE r.year = 2022 AND r.round = 1 AND c.country = 'Japan' AND cr.points = 0 UNION ALL SELECT COUNT(DISTINCT c.constructorId) AS numberOfConstructors FROM constructors c JOIN constructorResults cr ON c.constructorId = cr.constructorId JOIN races r ON cr.raceId = r.raceId WHERE r.year = 2022 AND r.round = 2 AND c.country = 'Japan' AND cr.points = 0;"}, {"question_id": 952, "answer_sql": "SELECT DISTINCT c.name FROM constructors c JOIN constructorStandings cs ON c.constructorId = cs.constructorId WHERE cs.position = 1;"}, {"question_id": 953, "answer_sql": "SELECT COUNT(DISTINCT c.constructorId) AS FrenchConstructorsWithLapNumberOver50 FROM constructors c JOIN races r ON c.constructorId = r.constructorId JOIN lapTimes lt ON c.constructorId = lt.constructorId AND r.raceId = lt.raceId WHERE c.name LIKE '%France%' AND lt.lap > 50;"}, {"question_id": 954, "answer_sql": "SELECT COUNT(DISTINCT CASE WHEN T1.time IS NOT NULL AND T1.year BETWEEN 2007 AND 2009 THEN T1.driverId ELSE NULL END) / COUNT(DISTINCT T1.driverId) * 100 AS race_completion_percentage FROM races AS T1 JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.year BETWEEN 2007 AND 2009"}, {"question_id": 955, "answer_sql": "SELECT s.year, AVG(l.time) AS average_time FROM races s JOIN lapTimes l ON s.raceId = l.raceId WHERE l.time IS NOT NULL GROUP BY s.year ORDER BY s.year;"}, {"question_id": 956, "answer_sql": "SELECT D.forename, D.surname FROM drivers D JOIN driverStandings DS ON D.driverId = DS.driverId WHERE D.dob > '1975-01-01' AND DS.position = 2;"}, {"question_id": 957, "answer_sql": "SELECT COUNT(DISTINCT driverId) AS numberOfItalianDriversWithoutFinish FROM drivers WHERE driverId IN ( SELECT driverId FROM results WHERE position IS NULL );"}, {"question_id": 958, "answer_sql": "SELECT drivers.forename, drivers.surname FROM drivers WHERE drivers.driverId = (SELECT drivers.driverId FROM drivers JOIN results ON drivers.driverId = results.driverId WHERE results.fastestLapTime IS NOT NULL ORDER BY results.fastestLapTime ASC LIMIT 1);"}, {"question_id": 959, "answer_sql": "SELECT r1.position, r1.fastestLap FROM results r1 JOIN constructors c ON r1.constructorId = c.constructorId WHERE r1.year = 2009 AND c.name = 'CHAMPIONS' ORDER BY r1.fastestLap ASC LIMIT 1;"}, {"question_id": 960, "answer_sql": "SELECT AVG(T2.fastestLapSpeed) AS avg_fastest_lap_speed FROM races AS T1 JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T1.name = 'Spanish Grand Prix' AND T1.year = 2009;"}, {"question_id": 961, "answer_sql": "SELECT races.name, races.year FROM races JOIN results ON races.raceId = results.raceId WHERE results.milliseconds IS NOT NULL ORDER BY results.milliseconds ASC LIMIT 1;"}, {"question_id": 962, "answer_sql": "SELECT CAST(COUNT(DISTINCT CASE WHEN YEAR(dob) < 1985 AND laps > 50 THEN driverId ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT CASE WHEN YEAR(dob) BETWEEN 1985 AND 2005 THEN driverId ELSE NULL END) AS percentage FROM results WHERE YEAR(raceId) BETWEEN 2000 AND 2005;"}, {"question_id": 963, "answer_sql": "SELECT COUNT(DISTINCT T1.driverId) AS FrenchDriversWithLapTimeLessThan0200 FROM drivers AS T1 JOIN races AS T2 ON T1.driverId = T2.driverId JOIN lapTimes AS T3 ON T1.driverId = T3.driverId WHERE T3.time < '01:00:00';"}, {"question_id": 964, "answer_sql": "SELECT DISTINCT drivers.driverRef, drivers.forename, drivers.surname FROM drivers WHERE drivers.nationality = 'America';"}, {"question_id": 965, "answer_sql": "SELECT raceId FROM races WHERE year = 2009;"}, {"question_id": 966, "answer_sql": "SELECT COUNT(DISTINCT driverId) AS driver_count FROM races WHERE raceId = 18;"}, {"question_id": 967, "answer_sql": "SELECT T1.driverRef AS driverRef, T1.number AS number FROM drivers AS T1 WHERE T1.dob >= DATE('now', '-3 years') ORDER BY T1.dob ASC LIMIT 3;"}, {"question_id": 968, "answer_sql": "SELECT circuitRef FROM circuits WHERE driverRef = 'Robert Kubica';"}, {"question_id": 969, "answer_sql": "SELECT COUNT(DISTINCT T1.driverId) AS numberOfAustralianDrivers FROM drivers AS T1 JOIN races AS T2 ON T1.driverId = T2.driverId JOIN results AS T3 ON T1.driverId = T3.driverId WHERE T1.dob::TEXT = '1980-01-01'::TEXT AND T2.country = 'Australia';"}, {"question_id": 970, "answer_sql": "SELECT d.driverId, d.surname, d.forename, d.dob, d.nationality, r.time FROM drivers d JOIN races r ON d.driverId = r.driverId WHERE d.dob BETWEEN '1980-01-01' AND '1990-12-31' ORDER BY r.time ASC LIMIT 3;"}, {"question_id": 971, "answer_sql": "SELECT T1.name FROM drivers AS T1 JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T2.nationality = 'German' ORDER BY T1.dob LIMIT 1;"}, {"question_id": 972, "answer_sql": "SELECT drivers.driverId, drivers.code FROM drivers JOIN races ON drivers.driverId = races.driverId JOIN lapTimes ON drivers.driverId = lapTimes.driverId WHERE YEAR(dob) = 1971 AND fastestLapTime IS NOT NULL ORDER BY fastestLapTime;"}, {"question_id": 973, "answer_sql": "SELECT d.driverId, d.surname, d.forename, d.dob, r.time FROM drivers d JOIN races r ON d.driverId = r.driverId WHERE d.dob < 1982 AND r.time = (SELECT MAX(time) FROM lapTimes) ORDER BY d.dob DESC, r.time DESC LIMIT 10;"}, {"question_id": 974, "answer_sql": "```sql SELECT year FROM races WHERE fastestLapTime IS NOT NULL ORDER BY CAST(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE"}, {"question_id": 975, "answer_sql": "SELECT year, MAX(time) AS max_time FROM races JOIN lapTimes ON races.raceId = lapTimes.raceId GROUP BY year ORDER BY MAX(time) ASC LIMIT 1;"}, {"question_id": 976, "answer_sql": "SELECT d.driverId FROM drivers d JOIN lapTimes lt ON d.driverId = lt.driverId WHERE lt.position = 1 ORDER BY lt.time ASC LIMIT 5;"}, {"question_id": 977, "answer_sql": "SELECT COUNT(driverId) AS disqualified_finishers FROM races JOIN results ON races.raceId = results.raceId WHERE races.year BETWEEN 2005 AND 2010 AND results.statusId = 2 AND results.time IS NULL;"}, {"question_id": 978, "answer_sql": "SELECT COUNT(raceId) AS circuit_count, location, lat, lng FROM circuits WHERE location = 'Austria';"}, {"question_id": 979, "answer_sql": "SELECT raceId, positionText, positionOrder, points, grid, fastestLapTime, fastestLapSpeed FROM races WHERE time IS NOT NULL ORDER BY positionOrder DESC LIMIT 1;"}, {"question_id": 980, "answer_sql": "SELECT d.driverRef AS driver_name, d.nationality, d.dob FROM drivers d JOIN qualifying q ON d.driverId = q.driverId WHERE q.raceId = 23 AND q.q2 IS NOT NULL;"}, {"question_id": 981, "answer_sql": "SELECT r.year AS year, r.name AS race_name, r.date AS race_date, r.time AS race_time FROM races r JOIN drivers d ON r.driverId = d.driverId WHERE d.forename = 'Max' AND r.statusId = (SELECT statusId FROM status WHERE status = 'Q1') ORDER BY r.year ASC, r.round ASC LIMIT 1;"}, {"question_id": 982, "answer_sql": "SELECT COUNT(DISTINCT driverId) AS disqualified_drivers FROM drivers WHERE statusId = 2 AND nationality = 'American';"}, {"question_id": 983, "answer_sql": "SELECT c.constructorRef, c.url FROM constructors c JOIN constructorResults cr ON c.constructorId = cr.constructorId WHERE c.nationality = 'Italian' AND cr.points = (SELECT MAX(points) FROM constructorResults WHERE constructorId = c.constructorId)"}, {"question_id": 984, "answer_sql": "SELECT c.url FROM constructors c JOIN constructorResults cr ON c.constructorId = cr.constructorId GROUP BY c.url ORDER BY SUM(cr.wins) DESC LIMIT 1;"}, {"question_id": 985, "answer_sql": "SELECT drivers.forename, drivers.surname, qualifying.q3 FROM drivers JOIN qualifying ON drivers.driverId = qualifying.driverId WHERE qualifying.raceId = (SELECT raceId FROM races WHERE name = 'French Grand Prix') ORDER BY qualifying.q3 ASC LIMIT 1;"}, {"question_id": 986, "answer_sql": "SELECT r.name AS race_name, l.time AS fastest_lap_time_milliseconds FROM races r JOIN lapTimes l ON r.raceId = l.raceId WHERE l.position = 1 ORDER BY l.time ASC LIMIT 1;"}, {"question_id": 987, "answer_sql": "SELECT AVG(T1.fastestLapTime) AS average_fastest_lap_time FROM results AS T1 JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = '2006 United States Grand Prix' AND T1.positionOrder <= 10;"}, {"question_id": 988, "answer_sql": "SELECT d.driverId, d.surname, d.forename, AVG(p.duration) AS avg_pit_stop_duration FROM drivers d JOIN drivers p ON d.driverId = p.driverId WHERE d.born BETWEEN 1980 AND 1985 GROUP BY d.driverId, d.surname, d.forename ORDER BY avg_pit_stop_duration ASC LIMIT 5;"}, {"question_id": 989, "answer_sql": "SELECT d.forename, d.surname, r.time FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN races r2 ON r.raceId = r2.raceId WHERE r2.name = 'Canadian Grand Prix' AND r2.year = 2008 AND r2.circuitRef = 'CA' ORDER BY r.time ASC LIMIT 1;"}, {"question_id": 990, "answer_sql": "SELECT c.constructorRef, c.url FROM races r JOIN constructors c ON r.circuitId = circuits.circuitId JOIN results res ON r.raceId = res.raceId WHERE r.name = 'Singapore Grand Prix' AND res.position = 1 AND res.constructorId = (SELECT constructorId FROM constructorResults WHERE raceId = (SELECT raceId FROM races WHERE name = 'Singapore Grand Prix') AND position = 1);"}, {"question_id": 991, "answer_sql": "SELECT drivers.forename, drivers.surname, drivers.dob FROM drivers WHERE drivers.nationality = 'Austrian' AND drivers.dob BETWEEN '1981-01-01' AND '1991-12-31';"}, {"question_id": 992, "answer_sql": "SELECT drivers.forename, drivers.surname, drivers.dob, drivers.url FROM drivers WHERE drivers.nationality = 'German' AND drivers.dob BETWEEN '1971-01-01' AND '1985-12-31' ORDER BY drivers.dob DESC;"}, {"question_id": 993, "answer_sql": "SELECT location, country, (lat, lng) FROM circuits WHERE circuitRef = 'Hungaroring';"}, {"question_id": 994, "answer_sql": "SELECT c.name AS constructor_name, c.nationality AS constructor_nationality, SUM(r.points) AS total_points FROM constructors c JOIN races r ON c.constructorId = r.constructorId WHERE r.name = 'Monaco Grand Prix' AND r.year BETWEEN 1980 AND 2010 GROUP BY c.name, c.nationality ORDER BY total_points DESC LIMIT 1;"}, {"question_id": 995, "answer_sql": "SELECT AVG(T1.points) AS average_score FROM drivers AS T1 JOIN races AS T2 ON T1.driverId = T2.driverId JOIN circuits AS T3 ON T2.circuitId = T3.circuitId WHERE T3.country = 'Turkey' AND T1.forename = 'Lewis' AND T1.surname = 'Hamilton';"}, {"question_id": 996, "answer_sql": "SELECT COUNT(raceId) AS annual_average_races FROM races WHERE date BETWEEN '2000-01-01' AND '2010-12-31' GROUP BY YEAR(date) ORDER BY annual_average_races DESC LIMIT 1;"}, {"question_id": 997, "answer_sql": "SELECT MAX(nationality) AS citizenship FROM drivers;"}, {"question_id": 998, "answer_sql": "SELECT COUNT(DISTINCT T1.driverId) AS victories FROM drivers AS T1 JOIN driverStandings AS T2 ON T1.driverId = T2.driverId WHERE T2.position = 91;"}, {"question_id": 999, "answer_sql": "SELECT T1.name FROM races AS T1 JOIN lapTimes AS T2 ON T1.raceId = T2.raceId WHERE T2.fastestLapTime = (SELECT MIN(T3.fastestLapTime) FROM lapTimes AS T3 WHERE T3.raceId = T1.raceId) ORDER BY T1.name;"}, {"question_id": 1000, "answer_sql": "SELECT c.location, c.country FROM circuits c WHERE c.circuitId = ( SELECT r.circuitId FROM races r ORDER BY r.date DESC LIMIT 1 );"}, {"question_id": 1001, "answer_sql": "SELECT T1.forename, T1.surname FROM drivers AS T1 JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.position = (SELECT MIN(q3) FROM qualifying WHERE year = 2008 AND circuitRef = 'Marina Bay Street Circuit') ORDER BY T2.position ASC LIMIT 1;"}, {"question_id": 1002, "answer_sql": "SELECT drivers.forename, drivers.surname, races.name FROM drivers JOIN races ON drivers.driverId = races.driverId WHERE drivers.dob = (SELECT MAX(dob) FROM drivers) ORDER BY drivers.dob ASC LIMIT 1;"}, {"question_id": 1003, "answer_sql": "SELECT COUNT(DISTINCT T1.driverId) AS accidentCount FROM races AS T1 JOIN results AS T2 ON T1.resultId = T2.resultId JOIN status AS T3 ON T2.statusId = T3.statusId WHERE T1.name = 'Canadian Grand Prix' AND T3.status = 3;"}, {"question_id": 1004, "answer_sql": "SELECT T1.forename, T1.surname, COUNT(T2.wins) AS wins FROM drivers AS T1 JOIN constructorStandings AS T2 ON T1.driverId = T2.driverId WHERE T1.dob = (SELECT MIN(dob) FROM drivers) GROUP BY T1.driverId ORDER BY wins DESC LIMIT 1;"}, {"question_id": 1005, "answer_sql": "SELECT MAX(duration) AS longest_pit_stop_time FROM pitStops;"}, {"question_id": 1006, "answer_sql": "SELECT MAX(time) AS fastest_time FROM lapTimes;"}, {"question_id": 1007, "answer_sql": "SELECT MAX(T2.duration) AS longest_time FROM drivers AS T1 JOIN pit_stops AS T2 ON T1.driverId = T2.driverId WHERE T1.driverRef = 'Lewis Hamilton';"}, {"question_id": 1008, "answer_sql": "SELECT T1.lap FROM drivers AS T1 JOIN pitStops AS T2 ON T1.driverId = T2.driverId WHERE T1.driverRef = 'Lewis Hamilton' AND T2.status = 'PIT STOP' AND T2.raceId = (SELECT raceId FROM races WHERE name = '2011 Australian Grand Prix')"}, {"question_id": 1009, "answer_sql": "SELECT t2.driverId, t2.time, t2.duration FROM pitStops t1 JOIN drivers t2 ON t1.driverId = t2.driverId WHERE t1.raceId = (SELECT raceId FROM races WHERE name = '2011 Australian Grand Prix') AND t1.stop = 1;"}, {"question_id": 1010, "answer_sql": "SELECT T1.time, T1.lap FROM lapTimes AS T1 JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' ORDER BY T1.time ASC LIMIT 1;"}, {"question_id": 1011, "answer_sql": "SELECT d.forename, d.surname FROM drivers d JOIN lapTimes lt ON d.driverId = lt.driverId WHERE lt.time = (SELECT MIN(time) FROM lapTimes) ORDER BY d.driverId LIMIT 1;"}, {"question_id": 1012, "answer_sql": "SELECT r.position FROM races r JOIN lapTimes lt ON r.raceId = lt.raceId JOIN drivers d ON lt.driverId = d.driverId WHERE d.driverRef = 'Lewis Hamilton' AND lt.fastestLap = ( SELECT MIN(time) FROM lapTimes WHERE driverId = ( SELECT driverId FROM drivers WHERE driverRef = 'Lewis Hamilton' ) )"}, {"question_id": 1013, "answer_sql": "SELECT MAX(lap) AS fastest_lap FROM lapTimes WHERE raceId = ( SELECT raceId FROM races WHERE name = 'Austrian Grand Prix Circuit' );"}, {"question_id": 1014, "answer_sql": "SELECT t1.name AS circuitName, t2.name AS driverName, t3.name AS constructorName, t4.name AS raceName, t5.time AS fastestTime FROM circuits t1 JOIN races t2 ON t1.circuitId = t2.circuitId JOIN drivers t3 ON t2.driverId = t3.driverId JOIN lapTimes t4 ON t2.raceId = t4.raceId AND t2.driverId = t4.driverId JOIN results t5 ON t2.raceId = t5.raceId AND t2.driverId = t5.driverId WHERE t1.country = 'Italy';"}, {"question_id": 1015, "answer_sql": "SELECT r.name FROM races r JOIN lapTimes lt ON r.raceId = lt.raceId WHERE lt.position = (SELECT MAX(position) FROM lapTimes WHERE circuitId = (SELECT circuitId FROM circuits WHERE name = 'Austrian Grand Prix Circuit'))"}, {"question_id": 1016, "answer_sql": "SELECT p.time, p.duration FROM pitStops p JOIN races r ON p.raceId = r.raceId JOIN qualifying q ON r.raceId = q.raceId WHERE q.driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton') AND r.circuitRef = 'Austria' ORDER BY p.lap, p.time LIMIT 1;"}, {"question_id": 1017, "answer_sql": "SELECT circuits.location, circuits.lat, circuits.lng FROM circuits JOIN races ON circuits.circuitId = races.circuitId JOIN lapTimes ON races.raceId = lapTimes.raceId WHERE lapTimes.time = '1:29.488';"}, {"question_id": 1018, "answer_sql": "SELECT AVG(lapTimes.milliseconds) AS average_time FROM lapTimes JOIN drivers ON lapTimes.driverId = drivers.driverId WHERE drivers.driverRef = 'Lewis Hamilton';"}, {"question_id": 1019, "answer_sql": "SELECT AVG(lapTimes.milliseconds) AS average_lap_time FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.country = 'Italy';"}, {"question_id": 1020, "answer_sql": "SELECT player_api_id FROM Player_Attributes WHERE overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes);"}, {"question_id": 1021, "answer_sql": "```sql SELECT MAX(T1.height), T2.player_name FROM Player AS T1 JOIN Team AS T3 ON T1.team_fifa_api_id = T3.team_fifa_api_id JOIN Team_Attributes AS T4 ON T3.team_fifa_api_id = T4.team_fifa_api_id WHERE T4.buildUpPlaySpeedClass = 'Fast' AND T4.buildUpPlayDribblingClass = 'Good' AND T4.buildUpPlayPassingClass = 'Good' AND T4.buildUpPlayPositioningClass = 'Good' AND T4.chanceCreationPassingClass = 'Good' AND T4.chanceCreationCrossingClass = 'Good' AND T4.chanceCreationShootingClass = 'Good' AND T4.chanceCreationPositioningClass = 'Good' AND T4.defencePressureClass = 'Low' AND T4.defenceAggressionClass = 'Low' AND T4.defenceTeamWidthClass = 'Wide' AND T4.defenceDefenderLineClass = 'Wide' AND T4.buildUpPlaySpeed = 100 AND T4.buildUpPlayDribbling = 90 AND T4.buildUpPlayPassing = 90 AND T4.buildUpPlayPositioning = 90 AND T4.chanceCreationPassing = 90 AND T4.chanceCreationCrossing = 90 AND T4.chanceCreationShooting = 90 AND T4.chanceCreationPositioning = 90 AND T4.defencePressure = 90 AND T4.defenceAggression = 90 AND T4.defenceTeamWidth = 90 AND T4.defenceDefenderLine = 90 AND T4.buildUpPlaySpeedClass = 'Fast' AND T4.buildUpPlayDribblingClass = 'Good' AND T4.buildUpPlayPassingClass = 'Good' AND T4.buildUpPlayPositioningClass = 'Good' AND T4.chanceCreationPassingClass = 'Good' AND T4.chanceCreationCrossingClass = 'Good' AND T4.chanceCreationShootingClass = 'Good' AND T4.chanceCreationPositioningClass = 'Good' AND T4.defencePressureClass = 'Low' AND T4.defenceAggressionClass = 'Low' AND T4.defenceTeamWidthClass = 'Wide' AND T4.defenceDefenderLineClass = 'Wide' AND T4.buildUp"}, {"question_id": 1022, "answer_sql": "SELECT preferred_foot FROM Player_Attributes WHERE potential = (SELECT MIN(potential) FROM Player_Attributes) ORDER BY preferred_foot ASC LIMIT 1;"}, {"question_id": 1023, "answer_sql": "SELECT COUNT(T1.player_api_id) AS player_count FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.overall_rating >= 60 AND T1.overall_rating < 65 AND T1.defensive_work_rate = 'low'"}, {"question_id": 1024, "answer_sql": "SELECT home_player_X1, home_player_X2, home_player_X3, home_player_X4, home_player_X5 FROM Match WHERE home_player_X1 IS NOT NULL OR home_player_X2 IS NOT NULL OR home_player_X3 IS NOT NULL OR home_player_X4 IS NOT NULL OR home_player_X5 IS NOT NULL ORDER BY MAX(crossing) DESC LIMIT 5;"}, {"question_id": 1025, "answer_sql": "SELECT L.name FROM League L JOIN Match M ON L.id = M.league_id WHERE M.season = '2015/2016' GROUP BY L.id ORDER BY SUM(M.home_team_goal + M.away_team_goal) DESC LIMIT 1;"}, {"question_id": 1026, "answer_sql": "SELECT T1.team_long_name AS home_team, COUNT(*) AS match_count FROM Match T1 JOIN Team T2 ON T1.home_team_api_id = T2.team_api_id WHERE T1.season = '2015/2016' AND T1.home_team_goal < T1.away_team_goal GROUP BY T1.team_long_name ORDER BY match_count ASC LIMIT 1;"}, {"question_id": 1027, "answer_sql": "SELECT player_name FROM Player WHERE player_api_id IN ( SELECT home_player_X1 FROM Match WHERE home_player_X1 IS NOT NULL GROUP BY home_player_X1 ORDER BY COUNT(*) DESC LIMIT 10 ) UNION ALL SELECT player_name FROM Player WHERE player_api_id IN ( SELECT away_player_X1 FROM Match WHERE away_player_X1 IS NOT NULL GROUP BY away_player_X1 ORDER BY COUNT(*) DESC LIMIT 10 )"}, {"question_id": 1028, "answer_sql": "SELECT T2.team_long_name FROM Match AS T1 JOIN Team AS T3 ON T1.away_team_api_id = T3.team_api_id JOIN League AS T4 ON T1.league_id = T4.id WHERE T4.name = 'Scotland Premier League' AND T1.season = '2009/2010' GROUP BY T2.team_long_name ORDER BY SUM(CASE WHEN T1.away_team_goal > T1.home_team_goal THEN 1 ELSE 0 END) DESC LIMIT 1;"}, {"question_id": 1029, "answer_sql": "SELECT T2.buildUpPlaySpeed, T2.buildUpPlaySpeedClass FROM Team_Attributes AS T1 JOIN Team AS T2 ON T1.team_fifa_api_id = T2.team_fifa_api_id WHERE T2.buildUpPlaySpeed = ( SELECT MAX(buildUpPlaySpeed) FROM Team_Attributes ) ORDER BY T2.buildUpPlaySpeed DESC LIMIT 4;"}, {"question_id": 1030, "answer_sql": "SELECT L.name FROM League L JOIN Match M ON L.id = M.league_id WHERE M.season = '2015/2016' GROUP BY L.id ORDER BY SUM(CASE WHEN M.home_team_goal = M.away_team_goal THEN 1 ELSE 0 END) DESC LIMIT 1;"}, {"question_id": 1031, "answer_sql": "SELECT T1.player_name, T1.birthday, TIMESTAMPDIFF(YEAR, T1.birthday, DATE('now')) AS player_age FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.sprint_speed >= 97 AND T1.birthday BETWEEN '2013-01-01 00:00:00' AND '2015-12-31 00:00:00'"}, {"question_id": 1032, "answer_sql": "SELECT L.name, COUNT(L.id) AS match_count FROM League L WHERE L.id = (SELECT league_id FROM (SELECT league_id, COUNT(id) AS match_count FROM Match GROUP BY league_id ORDER BY match_count DESC LIMIT 1)) GROUP BY L.id;"}, {"question_id": 1033, "answer_sql": "SELECT AVG(T1.height) AS average_height FROM Player AS T1 WHERE T1.birthday >= '1990-01-01 00:00:00' AND T1.birthday < '1996-01-01 00:00:00';"}, {"question_id": 1034, "answer_sql": "SELECT T1.player_api_id FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.date LIKE '2010%' GROUP BY T1.player_api_id ORDER BY AVG(T1.overall_rating) DESC LIMIT 1;"}, {"question_id": 1035, "answer_sql": "SELECT T2.team_fifa_api_id FROM Team_Attributes AS T1 JOIN Team AS T2 ON T1.team_fifa_api_id = T2.team_fifa_api_id WHERE T1.buildUpPlaySpeed BETWEEN 51 AND 59 GROUP BY T2.team_fifa_api_id HAVING COUNT(*) > 50;"}, {"question_id": 1036, "answer_sql": "SELECT T2.team_long_name FROM Team_Attributes AS T1 JOIN Team AS T3 ON T1.team_fifa_api_id = T3.team_fifa_api_id JOIN League AS T4 ON T3.country_id = T4.country_id JOIN Country AS T5 ON T4.country_id = T5.id WHERE strftime('%Y', T4.date) = '2012' GROUP BY T2.team_long_name HAVING AVG(T1.buildUpPlayPassing) > (SELECT AVG(buildUpPlayPassing) FROM Team_Attributes WHERE strftime('%Y', date) = '2012') ORDER BY AVG(T1.buildUpPlayPassing) DESC;"}, {"question_id": 1037, "answer_sql": "SELECT CAST(SUM(CASE WHEN T2.preferred_foot = 'left' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.player_fifa_api_id) AS Percentage FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id WHERE T2.birthday BETWEEN '1987-01-01 00:00:00' AND '1992-12-31 00:00:00'"}, {"question_id": 1038, "answer_sql": "SELECT L.name, SUM(T.home_team_goal + T.away_team_goal) AS total_goals FROM League L JOIN Team T ON L.id = T.team_fifa_api_id GROUP BY L.name ORDER BY total_goals ASC LIMIT 5;"}, {"question_id": 1039, "answer_sql": "SELECT AVG(T1.long_shots) AS average_long_shots FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id JOIN Team_Attributes AS T3 ON T1.player_fifa_api_id = T3.team_fifa_api_id JOIN Team AS T4 ON T3.team_fifa_api_id = T4.team_fifa_api_id JOIN League AS T5 ON T4.team_api_id = T5.id JOIN Country AS T6 ON T5.country_id = T6.id WHERE T1.player_name = 'Ahmed Samir Farag';"}, {"question_id": 1040, "answer_sql": "SELECT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height > 180 GROUP BY T1.player_name ORDER BY AVG(T2.heading_accuracy) DESC LIMIT 10;"}, {"question_id": 1041, "answer_sql": "SELECT T2.team_long_name FROM Team_Attributes AS T1 JOIN Team AS T3 ON T1.team_fifa_api_id = T3.team_fifa_api_id JOIN League AS T4 ON T3.country_id = T4.country_id JOIN Match AS T5 ON T4.id = T5.country_id WHERE T1.buildUpPlayDribblingClass = 'Normal' AND T5.date >= '2014-01-01 00:00:00' AND T5.date <= '2014-01-31 00:00:00' GROUP BY T2.team_long_name HAVING SUM(T1.chanceCreationPassing) < (SELECT AVG(chanceCreationPassing) FROM Team_Attributes WHERE buildUpPlayDribblingClass = 'Normal' AND date >= '2014-01-01 00:00:00' AND date <= '2014-01-31 00:00:00') ORDER BY SUM(T1.chanceCreationPassing) DESC;"}, {"question_id": 1042, "answer_sql": "SELECT L.name FROM League L JOIN ( SELECT H.team_api_id, AVG(H.home_team_goal) AS avg_home_goals, AVG(A.away_team_goal) AS avg_away_goals FROM Match M JOIN Team H ON M.home_team_api_id = H.team_api_id JOIN Match A ON M.away_team_api_id = A.team_api_id WHERE M.season = '2009/2010' GROUP BY H.team_api_id ) T ON L.id = T.team_api_id WHERE T.avg_home_goals > T.avg_away_goals;"}, {"question_id": 1043, "answer_sql": "```sql SELECT T2.team_short_name FROM Team AS T1 JOIN Team_Attributes AS T3 ON T1.team_fifa_api_id = T3.team_fifa_api_id JOIN League AS T4 ON T1.team_api_id = T4.team_api_id JOIN Country AS T5 ON T4.country_id = T5.id JOIN Team AS T6 ON T5.id = T6.country_id JOIN Team_Attributes AS T7 ON T6.team_fifa_api_id = T7.team_fifa_api_id JOIN League AS T8 ON T6.team_api_id = T8.team_api_id JOIN Country AS T9 ON T8.country_id = T9.id JOIN Team AS T10 ON T9.id = T10.country_id JOIN Team_Attributes AS T11 ON T10.team_fifa_api_id = T11.team_fifa_api_id JOIN League AS T12 ON T10.team_api_id = T12.team_api_id JOIN Country AS T13 ON T12.country_id = T13.id JOIN Team AS T14 ON T13.id = T14.country_id JOIN Team_Attributes AS T15 ON T14.team_fifa_api_id = T15.team_fifa_api_id JOIN League AS T16 ON T14.team_api_id = T16.team_api_id JOIN Country AS T17 ON T16.country_id = T17.id JOIN Team AS T18 ON T17.id = T18.country_id JOIN Team_Attributes AS T19 ON T18.team_fifa_api_id = T19.team_fifa_api_id JOIN League AS T20 ON T18.team_api_id = T20.team_api_id JOIN Country AS T21 ON T20.country_id = T21.id JOIN Team AS T22 ON T21.id = T22.country_id JOIN Team_Attributes AS T23 ON T22.team_fifa_api_id = T23.team_fifa_api_id JOIN League AS T24 ON T22.team_api_id = T24.team_api_id JOIN Country AS T25 ON T24.country_id = T25.id JOIN Team AS T26 ON T25.id = T26.country_id JOIN Team_Attributes AS T27 ON T26.team_f"}, {"question_id": 1044, "answer_sql": "SELECT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.birthday LIKE '197010%'"}, {"question_id": 1045, "answer_sql": "SELECT T2.attacking_work_rate FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Franco Zennaro';"}, {"question_id": 1046, "answer_sql": "SELECT T2.buildUpPlayPositioningClass AS freedom_of_movement FROM Team AS T1 JOIN Team_Attributes AS T2 ON T1.team_fifa_api_id = T2.team_fifa_api_id JOIN League AS T3 ON T1.country_id = T3.id JOIN Country AS T4 ON T3.country_id = T4.id WHERE T1.team_long_name = 'ADO Den Haag';"}, {"question_id": 1047, "answer_sql": "SELECT T1.header_finishing_rate FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.date = '2014-09-18 00:00:00' AND T2.player_name = 'Francois Affolter' AND T1.header_finishing_rate IS NOT NULL;"}, {"question_id": 1048, "answer_sql": "SELECT overall_rating FROM Player_Attributes JOIN Player ON Player_Attributes.player_fifa_api_id = Player.player_fifa_api_id WHERE strftime('%Y', Player_Attributes.date) = '2011' AND Player.player_name = 'Gabriel Tamas';"}, {"question_id": 1049, "answer_sql": "SELECT COUNT(*) FROM Match WHERE League_id = ( SELECT id FROM League WHERE name = 'Scotland Premier League' ) AND season = '2015/2016';"}, {"question_id": 1050, "answer_sql": "SELECT preferred_foot FROM Player_Attributes WHERE player_api_id = ( SELECT player_api_id FROM Player ORDER BY birthday ASC LIMIT 1 ) ORDER BY birthday ASC LIMIT 1;"}, {"question_id": 1051, "answer_sql": "SELECT player_name, potential FROM Player WHERE player_api_id IN ( SELECT player_api_id FROM Player_Attributes ORDER BY potential DESC LIMIT 1 )"}, {"question_id": 1052, "answer_sql": "SELECT COUNT(T1.player_api_id) AS preferred_foot_count FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.weight < 130 AND T1.preferred_foot = 'left';"}, {"question_id": 1053, "answer_sql": "SELECT T2.team_short_name FROM Team_Attributes AS T1 JOIN Team AS T3 ON T1.team_fifa_api_id = T3.team_fifa_api_id JOIN League AS T4 ON T3.country_id = T4.country_id JOIN Country AS T5 ON T4.country_id = T5.id JOIN Team AS T6 ON T1.team_fifa_api_id = T6.team_fifa_api_id JOIN Player_Attributes AS T7 ON T6.team_fifa_api_id = T7.player_fifa_api_id JOIN Player AS T8 ON T7.player_api_id = T8.player_api_id WHERE T1.chanceCreationPassingClass = 'Risky'"}, {"question_id": 1054, "answer_sql": "SELECT defensive_work_rate FROM Player_Attributes JOIN Player ON Player_Attributes.player_fifa_api_id = Player.player_fifa_api_id WHERE player_name = 'David Wilson';"}, {"question_id": 1055, "answer_sql": "SELECT T1.birthday FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes);"}, {"question_id": 1056, "answer_sql": "SELECT L.name FROM League L JOIN Country C ON L.country_id = C.id WHERE C.name = 'Netherlands';"}, {"question_id": 1057, "answer_sql": "SELECT AVG(T1.home_team_goal) AS average_home_team_goal FROM Match AS T1 JOIN League AS T2 ON T1.country_id = T2.id JOIN Country AS T3 ON T2.country_id = T3.id WHERE T3.name = 'Poland' AND T1.season = '2010/2011';"}, {"question_id": 1058, "answer_sql": "SELECT MAX(height) AS shortest_football_player, MAX(finishing) AS highest_average_finishing_rate FROM Player_Attributes WHERE player_api_id = ( SELECT player_api_id FROM Player ORDER BY height ASC LIMIT 1 )"}, {"question_id": 1059, "answer_sql": "SELECT player_name FROM Player WHERE height > 180;"}, {"question_id": 1060, "answer_sql": "SELECT COUNT(*) FROM Player WHERE strftime('%Y', birthday) > '1990';"}, {"question_id": 1061, "answer_sql": "SELECT COUNT(T1.player_api_id) AS player_count FROM Player AS T1 JOIN Team AS T2 ON T1.team_fifa_api_id = T2.team_fifa_api_id JOIN Team_Attributes AS T3 ON T2.team_fifa_api_id = T3.team_fifa_api_id WHERE T1.player_name LIKE 'Adam%' AND T1.weight > 170;"}, {"question_id": 1062, "answer_sql": "SELECT T1.player_name FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.overall_rating > 80 AND strftime('%Y', T1.date) BETWEEN '2008' AND '2010';"}, {"question_id": 1063, "answer_sql": "SELECT potential FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Doran');"}, {"question_id": 1064, "answer_sql": "SELECT player_name FROM Player_Attributes WHERE preferred_foot = 'left';"}, {"question_id": 1065, "answer_sql": "SELECT T2.team_long_name FROM Team_Attributes AS T1 JOIN Team AS T2 ON T1.team_fifa_api_id = T2.team_fifa_api_id WHERE T1.buildUpPlaySpeedClass = 'Fast';"}, {"question_id": 1066, "answer_sql": "SELECT T2.buildUpPlayPassingClass AS passing_class FROM Team AS T1 JOIN Team_Attributes AS T2 ON T1.team_fifa_api_id = T2.team_fifa_api_id JOIN League AS T3 ON T1.country_id = T3.id WHERE T1.team_short_name = 'CLB';"}, {"question_id": 1067, "answer_sql": "SELECT T2.team_short_name FROM Team_Attributes AS T1 JOIN Team AS T2 ON T1.team_fifa_api_id = T2.team_fifa_api_id WHERE T1.buildUpPlayPassing > 70;"}, {"question_id": 1068, "answer_sql": "SELECT AVG(overall_rating) AS average_overall_rating FROM Player_Attributes WHERE strftime('%Y', date) BETWEEN '2010' AND '2015' AND height > 170;"}, {"question_id": 1069, "answer_sql": "SELECT T1.player_name, T1.height FROM Player AS T1 WHERE T1.height = (SELECT MIN(height) FROM Player);"}, {"question_id": 1070, "answer_sql": "SELECT T1.country_id, T1.name FROM League AS T1 JOIN Country AS T2 ON T1.country_id = T2.id WHERE T1.name = 'Italy Serie A';"}, {"question_id": 1071, "answer_sql": "SELECT T2.team_short_name FROM Team_Attributes AS T1 JOIN Team AS T3 ON T1.team_fifa_api_id = T3.team_fifa_api_id JOIN League AS T4 ON T3.country_id = T4.country_id JOIN Country AS T5 ON T4.country_id = T5.id JOIN Player_Attributes AS T6 ON T3.team_fifa_api_id = T6.player_fifa_api_id JOIN Player AS T7 ON T6.player_api_id = T7.player_api_id WHERE T1.buildUpPlaySpeed = 31 AND T1.buildUpPlayDribbling = 53 AND T1.buildUpPlayPassing = 32;"}, {"question_id": 1072, "answer_sql": "SELECT AVG(T1.overall_rating) AS average_overall_rating FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id WHERE T2.player_name = 'Aaron Doran';"}, {"question_id": 1073, "answer_sql": "SELECT COUNT(id) AS match_count FROM Match JOIN League ON Match.league_id = League.id WHERE League.name = 'Germany 1. Bundesliga' AND strftime('%Y-%m', Match.date) BETWEEN '2008-08' AND '2008-10';"}, {"question_id": 1074, "answer_sql": "SELECT T2.team_short_name FROM Match AS T1 JOIN Team AS T3 ON T1.home_team_api_id = T3.team_api_id JOIN Team AS T4 ON T1.away_team_api_id = T4.team_api_id JOIN Team AS T2 ON T4.team_fifa_api_id = T2.team_fifa_api_id WHERE T1.home_team_goal = 10 AND T1.home_team_api_id = T2.team_api_id;"}, {"question_id": 1075, "answer_sql": "SELECT P.player_name, P.balance, P.potential FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE PA.balance = (SELECT MAX(balance) FROM Player_Attributes) AND PA.potential = 61;"}, {"question_id": 1076, "answer_sql": "SELECT (SELECT AVG(ball_control) FROM Player WHERE player_name = 'Abdou Diallo') - (SELECT AVG(ball_control) FROM Player WHERE player_name = 'Aaron Appindangoye') AS difference"}, {"question_id": 1077, "answer_sql": "SELECT team_long_name FROM Team WHERE team_short_name = 'GEN';"}, {"question_id": 1078, "answer_sql": "SELECT T1.player_name, T2.player_name FROM Player AS T1 JOIN Player AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id WHERE T1.birthday < T2.birthday ORDER BY T1.birthday ASC LIMIT 1;"}, {"question_id": 1079, "answer_sql": "SELECT player_name, MAX(height) AS tallest_height FROM Player GROUP BY player_name ORDER BY tallest_height DESC LIMIT 1;"}, {"question_id": 1080, "answer_sql": "SELECT COUNT(T1.player_api_id) AS count FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.preferred_foot = 'left' AND T1.attacking_work_rate = 'low';"}, {"question_id": 1081, "answer_sql": "SELECT T1.country_id, T1.name FROM League AS T1 JOIN Country AS T2 ON T1.country_id = T2.id WHERE T1.name = 'Belgium Jupiler League';"}, {"question_id": 1082, "answer_sql": "SELECT DISTINCT L.name FROM League L JOIN Country C ON L.country_id = C.id WHERE C.name = 'Germany';"}, {"question_id": 1083, "answer_sql": "SELECT T1.player_name, T1.overall_rating FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes) ORDER BY T1.overall_rating DESC LIMIT 1;"}, {"question_id": 1084, "answer_sql": "SELECT COUNT(*) FROM Player_Attributes PA JOIN Player P ON PA.player_fifa_api_id = P.player_fifa_api_id JOIN Team_Attributes TA ON PA.team_fifa_api_id = TA.team_fifa_api_id WHERE strftime('%Y', P.birthday) < '1986' AND PA.defensive_work_rate = 'high';"}, {"question_id": 1085, "answer_sql": "SELECT MAX(crossing) AS best_crossing, player_name FROM Player_Attributes WHERE player_api_id IN (SELECT home_player_X1 FROM Match WHERE home_player_X1 IS NOT NULL) UNION ALL SELECT MAX(crossing) AS best_crossing, player_name FROM Player_Attributes WHERE player_api_id IN (SELECT away_player_X1 FROM Match WHERE away_player_X1 IS NOT NULL) ORDER BY best_crossing DESC LIMIT 1;"}, {"question_id": 1086, "answer_sql": "SELECT heading_accuracy FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Ariel Borysiuk');"}, {"question_id": 1087, "answer_sql": "SELECT COUNT(T1.player_api_id) AS volley_players_count FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height > 180 AND T2.volley > 70;"}, {"question_id": 1088, "answer_sql": "SELECT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.volley > 70 AND T2.dribbling > 70;"}, {"question_id": 1089, "answer_sql": "SELECT COUNT(*) AS match_count FROM Match JOIN League ON Match.league_id = League.id JOIN Country ON League.country_id = Country.id WHERE Country.name = 'Belgium' AND Match.season = '2008/2009';"}, {"question_id": 1090, "answer_sql": "SELECT T1.long_passing AS long_passing_score FROM Player AS T1 JOIN Team AS T2 ON T1.team_fifa_api_id = T2.team_fifa_api_id JOIN League AS T3 ON T2.country_id = T3.country_id JOIN Team_Attributes AS T4 ON T2.team_fifa_api_id = T4.team_fifa_api_id WHERE T1.birthday = (SELECT MAX(birthday) FROM Player) ORDER BY T1.birthday ASC LIMIT 1;"}, {"question_id": 1091, "answer_sql": "SELECT COUNT(id) AS match_count FROM Match JOIN League ON Match.league_id = League.id WHERE League.name = 'Belgium Jupiler League' AND strftime('%Y', Match.date) = '2009' AND strftime('%m', Match.date) = '04';"}, {"question_id": 1092, "answer_sql": "SELECT L.name FROM League L WHERE L.id = (SELECT league_id FROM Match WHERE season = '2008/2009' GROUP BY league_id ORDER BY COUNT(*) DESC LIMIT 1);"}, {"question_id": 1093, "answer_sql": "SELECT AVG(T1.overall_rating) AS average_overall_rating FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.birthday < '1986-01-01' GROUP BY T2.birthday;"}, {"question_id": 1094, "answer_sql": "SELECT (100 * (SUM(CASE WHEN T1.player_name = 'Ariel Borysiuk' THEN T2.overall_rating ELSE 0 END) / SUM(CASE WHEN T1.player_name = 'Paulin Puel' THEN T2.overall_rating ELSE 0 END))) AS percentage_difference FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = 'Ariel Borysiuk' OR T1.player_name = 'Paulin Puel';"}, {"question_id": 1095, "answer_sql": "SELECT AVG(T2.buildUpPlaySpeed) AS average_build_up_play_speed FROM Team AS T1 JOIN Team_Attributes AS T2 ON T1.team_fifa_api_id = T2.team_fifa_api_id JOIN League AS T3 ON T1.country_id = T3.id WHERE T1.team_long_name = 'Heart of Midlothian';"}, {"question_id": 1096, "answer_sql": "SELECT AVG(T1.overall_rating) AS average_overall_rating FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id WHERE T2.player_name = 'Pietro Marino';"}, {"question_id": 1097, "answer_sql": "SELECT SUM(T2.crossing) AS total_crossing_score FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = 'Aaron Lennox';"}, {"question_id": 1098, "answer_sql": "SELECT MAX(T2.chanceCreationPassing), T2.chanceCreationPassingClass FROM Team_Attributes AS T1 JOIN Team AS T3 ON T1.team_fifa_api_id = T3.team_fifa_api_id JOIN League AS T4 ON T1.league_id = T4.id JOIN Country AS T5 ON T4.country_id = T5.id JOIN Team AS T6 ON T1.team_fifa_api_id = T6.team_fifa_api_id JOIN Player_Attributes AS T7 ON T6.team_fifa_api_id = T7.player_fifa_api_id JOIN Player AS T8 ON T7.player_api_id = T8.player_api_id WHERE T6.team_long_name = 'Ajax' GROUP BY T2.chanceCreationPassingClass;"}, {"question_id": 1099, "answer_sql": "SELECT preferred_foot FROM Player_Attributes WHERE player_name = 'Abdou Diallo';"}, {"question_id": 1100, "answer_sql": "SELECT MAX(overall_rating) AS highest_overall_rating FROM Player_Attributes WHERE player_name = 'Dorlan Pabon';"}, {"question_id": 1101, "answer_sql": "SELECT AVG(T2.away_team_goal) AS average_goals FROM Team AS T1 JOIN League AS T3 ON T1.country_id = T3.id JOIN Match AS T4 ON T3.id = T4.league_id JOIN Team_Attributes AS T5 ON T1.team_fifa_api_id = T5.team_fifa_api_id JOIN Team_Attributes AS T6 ON T4.away_team_api_id = T6.team_fifa_api_id JOIN Player_Attributes AS T7 ON T1.team_fifa_api_id = T7.player_fifa_api_id JOIN Player_Attributes AS T8 ON T4.away_team_api_id = T8.player_fifa_api_id WHERE T1.team_long_name = 'Parma' AND T3.name = 'Italy';"}, {"question_id": 1102, "answer_sql": "SELECT T1.player_name FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.overall_rating = 77 AND T1.date = '2016/06/23' ORDER BY T2.birthday ASC LIMIT 1;"}, {"question_id": 1103, "answer_sql": "SELECT overall_rating FROM Player_Attributes JOIN Player ON Player_Attributes.player_fifa_api_id = Player.player_fifa_api_id WHERE Player_name = 'Aaron Mooy' AND date = '2016-02-04 00:00:00';"}, {"question_id": 1104, "answer_sql": "SELECT T2.potential FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Francesco Parravicini' AND T1.date = '2010-08-30 00:00:00';"}, {"question_id": 1105, "answer_sql": "SELECT T1.attacking_work_rate FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = 'Francesco Migliore' AND T2.date = '2015-05-01 00:00:00';"}, {"question_id": 1106, "answer_sql": "SELECT T2.defensive_work_rate FROM Player AS T1 JOIN Player_Attributes AS T3 ON T1.player_api_id = T3.player_api_id JOIN Team_Attributes AS T4 ON T1.player_fifa_api_id = T4.team_fifa_api_id JOIN Team AS T2 ON T4.team_fifa_api_id = T2.team_fifa_api_id WHERE T1.player_name = 'Kevin Berigaud' AND T1.date = '2013-02-22 00:00:00';"}, {"question_id": 1107, "answer_sql": "SELECT MIN(T1.date) AS date FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id WHERE T2.player_name = 'Kevin Constant' AND T1.crossing = (SELECT MAX(crossing) FROM Player_Attributes WHERE player_fifa_api_id = T2.player_fifa_api_id);"}, {"question_id": 1108, "answer_sql": "SELECT T2.buildUpPlaySpeedClass FROM Team AS T1 JOIN Team_Attributes AS T2 ON T1.team_fifa_api_id = T2.team_fifa_api_id JOIN League AS T3 ON T1.country_id = T3.country_id JOIN Match AS T4 ON T3.id = T4.league_id WHERE T1.team_long_name = 'Willem II' AND T4.date = '2012-02-22 00:00:00';"}, {"question_id": 1109, "answer_sql": "SELECT T2.buildUpPlayDribblingClass FROM Team AS T1 JOIN Team_Attributes AS T2 ON T1.team_fifa_api_id = T2.team_fifa_api_id JOIN League AS T3 ON T1.country_id = T3.country_id WHERE T3.name = 'LEI' AND T2.date = '2015-09-10 00:00:00';"}, {"question_id": 1110, "answer_sql": "SELECT T2.buildUpPlayPassingClass FROM Team AS T1 JOIN Team_Attributes AS T2 ON T1.team_fifa_api_id = T2.team_fifa_api_id JOIN League AS T3 ON T1.country_id = T3.country_id JOIN Match AS T4 ON T3.id = T4.league_id WHERE T1.team_long_name = 'FC Lorient' AND T4.date = '2010-02-22';"}, {"question_id": 1111, "answer_sql": "SELECT T2.buildUpPlayPassingClass FROM Team AS T1 JOIN Team_Attributes AS T2 ON T1.team_fifa_api_id = T2.team_fifa_api_id JOIN League AS T3 ON T1.country_id = T3.country_id JOIN Match AS T4 ON T3.id = T4.league_id WHERE T1.team_long_name = 'PEC Zwolle' AND T4.date = '2013-09-20 00:00:00';"}, {"question_id": 1112, "answer_sql": "SELECT T2.buildUpPlayCrossingClass FROM Team AS T1 JOIN Team_Attributes AS T2 ON T1.team_fifa_api_id = T2.team_fifa_api_id JOIN League AS T3 ON T1.country_id = T3.country_id JOIN Match AS T4 ON T3.id = T4.league_id WHERE T1.team_long_name = 'Hull City' AND T4.date = '2010-02-22 00:00:00';"}, {"question_id": 1113, "answer_sql": "SELECT T2.defenceAggressionClass FROM Team AS T1 JOIN Team_Attributes AS T2 ON T1.team_fifa_api_id = T2.team_fifa_api_id WHERE T1.team_long_name = 'Hannover 96' AND T2.date = '2015-09-10 00:00:00';"}, {"question_id": 1114, "answer_sql": "SELECT AVG(T1.overall_rating) AS average_overall_rating FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id WHERE T2.player_name = 'Marko Arnautovic' AND T1.date BETWEEN '2007-02-22 00:00:00' AND '2016-04-21 00:00:00';"}, {"question_id": 1115, "answer_sql": "SELECT CAST((SUM(CASE WHEN T1.overall_rating > T2.overall_rating THEN 1 ELSE 0 END) * 100) / COUNT(T1.overall_rating) AS REAL) * 100 AS Percentage FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.date = '2013-07-12' AND T1.player_name = 'Landon Donovan' AND T2.player_name = 'Jordan Bowery';"}, {"question_id": 1116, "answer_sql": "SELECT player_name FROM Player ORDER BY height DESC LIMIT 5;"}, {"question_id": 1117, "answer_sql": "SELECT home_player_1, home_player_2, home_player_3, home_player_4, home_player_5, home_player_6, home_player_7, home_player_8, home_player_9, home_player_10, home_player_11 FROM Player ORDER BY weight DESC LIMIT 10;"}, {"question_id": 1118, "answer_sql": "SELECT player_name FROM Player WHERE player_api_id IN ( SELECT player_api_id FROM Player_Attributes WHERE overall_rating <= 90 AND date >= '2023-01-01' AND date <= '2023-12-31' ) AND strftime('%Y', birthday) <= '2023' AND strftime('%Y', birthday) >= '1988';"}, {"question_id": 1119, "answer_sql": "SELECT COUNT(home_team_goal) AS home_team_goals FROM Match WHERE home_player_1 = (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Lennon')"}, {"question_id": 1120, "answer_sql": "SELECT SUM(CASE WHEN T2.player_name = 'Daan Smith' THEN T1.away_team_goal ELSE 0 END) + SUM(CASE WHEN T2.player_name = 'Filipe Ferreira' THEN T1.away_team_goal ELSE 0 END) FROM Match AS T1 JOIN Player AS T2 ON T1.home_player_1 = T2.player_api_id JOIN Player AS T3 ON T1.away_player_1 = T3.player_api_id WHERE T2.player_name IN ('Daan Smith', 'Filipe Ferreira');"}, {"question_id": 1121, "answer_sql": "SELECT SUM(home_team_goal) AS total_home_team_goals FROM Match WHERE home_team_api_id IN ( SELECT team_api_id FROM Team WHERE team_fifa_api_id IN ( SELECT player_fifa_api_id FROM Player WHERE player_api_id IN ( SELECT home_player_1 UNION ALL SELECT home_player_2 UNION ALL SELECT home_player_3 UNION ALL SELECT home_player_4 UNION ALL SELECT home_player_5 UNION ALL SELECT home_player_6 UNION ALL SELECT home_player_7 UNION ALL SELECT home_player_8 UNION ALL SELECT home_player_9 UNION ALL SELECT home_player_10 UNION ALL SELECT home_player_11 ) ) AND strftime('%Y', birthday) <= 2023 )"}, {"question_id": 1122, "answer_sql": "SELECT player_name FROM Player_Attributes WHERE overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes) LIMIT 10;"}, {"question_id": 1123, "answer_sql": "SELECT player_name FROM Player_Attributes WHERE potential = (SELECT MAX(potential) FROM Player_Attributes);"}, {"question_id": 1124, "answer_sql": "SELECT T1.player_name FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id JOIN Team_Attributes AS T3 ON T1.player_api_id = T3.team_fifa_api_id WHERE T1.attacking_work_rate = 'high' AND T2.attacking_work_rate = 'high';"}, {"question_id": 1125, "answer_sql": "SELECT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.finishing = 1 ORDER BY SUBTRACT(datetime(CURRENT_TIMESTAMP, 'localtime'), T1.birthday) DESC LIMIT 1;"}, {"question_id": 1126, "answer_sql": "SELECT T1.player_name FROM Player AS T1 JOIN Team AS T2 ON T1.team_fifa_api_id = T2.team_fifa_api_id JOIN Country AS T3 ON T2.country_id = T3.id WHERE T3.name = 'Belgium';"}, {"question_id": 1127, "answer_sql": "SELECT T1.player_name, T2.name AS country_name FROM Player AS T1 JOIN Team AS T3 ON T1.team_fifa_api_id = T3.team_fifa_api_id JOIN League AS T4 ON T3.country_id = T4.id JOIN Country AS T2 ON T4.country_id = T2.id JOIN Player_Attributes AS T5 ON T1.player_api_id = T5.player_api_id WHERE T5.vision > 89;"}, {"question_id": 1128, "answer_sql": "SELECT c.name AS country_name, AVG(p.weight) AS avg_weight FROM Country c JOIN Team t ON c.id = t.country_id JOIN Team_Attributes ta ON t.team_fifa_api_id = ta.team_fifa_api_id JOIN Player p ON t.team_api_id = p.team_api_id GROUP BY c.name ORDER BY avg_weight DESC LIMIT 1;"}, {"question_id": 1129, "answer_sql": "SELECT T2.team_long_name FROM Team_Attributes AS T1 JOIN Team AS T3 ON T1.team_fifa_api_id = T3.team_fifa_api_id JOIN Country AS T4 ON T3.country_id = T4.id JOIN League AS T5 ON T4.id = T5.country_id WHERE T1.buildUpPlaySpeedClass = 'Slow';"}, {"question_id": 1130, "answer_sql": "SELECT T2.team_short_name FROM Team_Attributes AS T1 JOIN Team AS T3 ON T1.team_fifa_api_id = T3.team_fifa_api_id JOIN League AS T4 ON T3.country_id = T4.country_id JOIN Match AS T5 ON T4.id = T5.country_id WHERE T1.chanceCreationPassingClass = 'Safe'"}, {"question_id": 1131, "answer_sql": "SELECT AVG(T1.height) AS average_height FROM Country AS T1 JOIN League AS T2 ON T1.id = T2.country_id JOIN Team AS T3 ON T2.id = T3.country_id JOIN Team_Attributes AS T4 ON T3.team_fifa_api_id = T4.team_fifa_api_id JOIN Player_Attributes AS T5 ON T3.team_fifa_api_id = T5.player_fifa_api_id JOIN Player AS T6 ON T5.player_api_id = T6.player_api_id WHERE T1.name = 'Italy';"}, {"question_id": 1132, "answer_sql": "SELECT T1.player_name FROM Player AS T1 JOIN Team AS T2 ON T1.team_fifa_api_id = T2.team_fifa_api_id JOIN League AS T3 ON T2.country_id = T3.country_id JOIN Team_Attributes AS T4 ON T2.team_fifa_api_id = T4.team_fifa_api_id JOIN Player_Attributes AS T5 ON T1.player_fifa_api_id = T5.player_fifa_api_id WHERE T1.height > 180 ORDER BY T1.height DESC, T1.player_name LIMIT 3;"}, {"question_id": 1133, "answer_sql": "SELECT COUNT(*) FROM Player WHERE player_name LIKE 'Aaron%' AND birthday > '1990-01-01';"}, {"question_id": 1134, "answer_sql": "SELECT SUM(CASE WHEN T1.id = 6 THEN T2.jumping ELSE 0 END) - SUM(CASE WHEN T1.id = 23 THEN T2.jumping ELSE 0 END) AS difference FROM Player_Attributes AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id JOIN Player AS T3 ON T1.player_fifa_api_id = T3.player_fifa_api_id JOIN Team_Attributes AS T4 ON T1.team_fifa_api_id = T4.team_fifa_api_id JOIN Team AS T5 ON T1.team_fifa_api_id = T5.team_fifa_api_id JOIN Match AS T6 ON T1.match_api_id = T6.match_api_id WHERE T1.id IN (6, 23) GROUP BY T1.id;"}, {"question_id": 1135, "answer_sql": "SELECT T1.player_api_id FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.potential = (SELECT MIN(potential) FROM Player_Attributes) AND T1.preferred_foot = 'right' ORDER BY T1.potential ASC LIMIT 3;"}, {"question_id": 1136, "answer_sql": "SELECT COUNT(T1.player_api_id) AS player_count FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.crossing = (SELECT MAX(T3.crossing) FROM Player_Attributes AS T3 WHERE T3.preferred_foot = 'left') AND T1.preferred_foot = 'left'"}, {"question_id": 1137, "answer_sql": "SELECT COUNT(*) * 100 / (SELECT COUNT(*) FROM Player) AS percentage FROM Player WHERE strength > 80 AND stamina > 80;"}, {"question_id": 1138, "answer_sql": "SELECT T2.name AS country_name FROM League AS T1 JOIN Country AS T2 ON T1.country_id = T2.id WHERE T1.name = 'Poland Ekstraklasa';"}, {"question_id": 1139, "answer_sql": "SELECT home_team_goal, away_team_goal FROM Match WHERE date = '2008-09-24' AND league_id = (SELECT id FROM League WHERE name = 'Belgian Jupiler League');"}, {"question_id": 1140, "answer_sql": "SELECT `Player_Attributes`.crossing, `Player_Attributes`.finishing, `Player_Attributes`.acceleration FROM `Player_Attributes` JOIN `Player` ON `Player_Attributes`.player_fifa_api_id = `Player`.player_api_id WHERE `Player`.player_name = 'Alexis Blin';"}, {"question_id": 1141, "answer_sql": "SELECT T2.buildUpPlaySpeedClass AS speed_class FROM Team AS T1 JOIN Team_Attributes AS T2 ON T1.team_fifa_api_id = T2.team_fifa_api_id WHERE T1.team_long_name = 'KSV Cercle Brugge';"}, {"question_id": 1142, "answer_sql": "SELECT COUNT(id) AS game_count FROM Match WHERE season = '2015/2016' AND league_id = (SELECT id FROM League WHERE name = 'Italian Serie A');"}, {"question_id": 1143, "answer_sql": "SELECT MAX(T1.home_team_goal) AS highest_score FROM Match AS T1 JOIN League AS T2 ON T1.league_id = T2.id JOIN Country AS T3 ON T2.country_id = T3.id WHERE T3.name = 'Netherlands' AND T2.name = 'Eredivisie';"}, {"question_id": 1144, "answer_sql": "SELECT P.player_name, P.weight, PA.finishing, PA.curve FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE P.weight = (SELECT MAX(weight) FROM Player) ORDER BY P.weight DESC LIMIT 1;"}, {"question_id": 1145, "answer_sql": "SELECT L.name FROM League L JOIN Match M ON L.id = M.league_id WHERE M.season = '2015/2016' GROUP BY L.name ORDER BY COUNT(M.id) DESC LIMIT 1;"}, {"question_id": 1146, "answer_sql": "SELECT T2.team_long_name FROM Match AS T1 JOIN Team AS T3 ON T1.away_team_api_id = T3.team_api_id JOIN Team AS T2 ON T1.home_team_api_id = T2.team_api_id WHERE T1.away_team_goal = (SELECT MAX(away_team_goal) FROM Match) ORDER BY T1.away_team_goal DESC LIMIT 1;"}, {"question_id": 1147, "answer_sql": "SELECT player_name FROM Player_Attributes WHERE overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes)"}, {"question_id": 1148, "answer_sql": "SELECT CAST(COUNT(CASE WHEN height < 180 AND overall_strength > 70 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(id) AS percentage FROM Player_Attributes WHERE overall_strength > 70;"}, {"question_id": 1149, "answer_sql": "SELECT (COUNT(CASE WHEN SEX = 'M' AND Admission = '+' THEN ID ELSE NULL END) - COUNT(CASE WHEN SEX = 'M' AND Admission = '-' THEN ID ELSE NULL END)) * 100 / (COUNT(CASE WHEN SEX = 'M' AND Admission = '+' THEN ID ELSE NULL END) + COUNT(CASE WHEN SEX = 'M' AND Admission = '-' THEN ID ELSE NULL END)) AS DeviationPercentage FROM Patient"}, {"question_id": 1150, "answer_sql": "SELECT CAST(COUNT(CASE WHEN YEAR(Birthday) > '1930' AND SEX = 'F' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(CASE WHEN SEX = 'F' THEN 1 ELSE NULL END) FROM Patient;"}, {"question_id": 1151, "answer_sql": "SELECT COUNT(DISTINCT CASE WHEN Admission = '+' THEN ID ELSE NULL END) * 100 / COUNT(DISTINCT ID) FROM Patient WHERE YEAR(Birthday) BETWEEN 1930 AND 1940;"}, {"question_id": 1152, "answer_sql": "SELECT (COUNT(CASE WHEN Diagnosis = 'SLE' AND Admission = '+' THEN ID ELSE NULL END) / COUNT(CASE WHEN Diagnosis = 'SLE' AND Admission = '-' THEN ID ELSE NULL END)) AS Ratio FROM Examination WHERE Diagnosis = 'SLE';"}, {"question_id": 1153, "answer_sql": "SELECT T2.`First Date`, T2.Diagnosis FROM Examination AS T1 JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.ID = 30609 ORDER BY T2.`First Date`;"}, {"question_id": 1154, "answer_sql": "SELECT P.SEX, P.Birthday, E.`Examination Date`, E.Symptoms FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE P.ID = 163109;"}, {"question_id": 1155, "answer_sql": "SELECT P.ID, P.SEX, P.Birthday FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.Date = (SELECT MAX(Date) FROM Laboratory WHERE LDH > 500)"}, {"question_id": 1156, "answer_sql": "SELECT P.ID, AGE(P.Birthday) AS Age FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE E.RVVT = '+' AND E.Thrombosis = 1;"}, {"question_id": 1157, "answer_sql": "SELECT P.ID, P.SEX, P.Diagnosis FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE E.Thrombosis = 2;"}, {"question_id": 1158, "answer_sql": "SELECT P.ID, P.SEX, P.Birthday, P.Description, P.`First Date`, P.Admission, P.Diagnosis, L.`T-CHO` FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE YEAR(P.Birthday) = 1937 AND L.`T-CHO` > 250;"}, {"question_id": 1159, "answer_sql": "SELECT P.ID, P.SEX, P.Diagnosis FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.ALB < 3.5;"}, {"question_id": 1160, "answer_sql": "SELECT CAST(COUNT(CASE WHEN T2.SEX = 'F' AND T2.TP < '6.0' OR T2.TP > '8.5' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T2.ID) FROM Patient AS T2 JOIN Examination AS T1 ON T2.ID = T1.ID WHERE T2.SEX = 'F';"}, {"question_id": 1161, "answer_sql": "SELECT AVG(T2.`aCL IgG`) AS AverageAntiCardiolipinIgG FROM Patient AS T1 JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.Admission = '+' AND T1.`First Date` >= DATE_SUB(CURDATE(), INTERVAL 50 YEAR)"}, {"question_id": 1162, "answer_sql": "SELECT COUNT(P.ID) AS FemalePatients FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE P.SEX = 'F' AND E.`Examination Date` = '1997-12-31' AND E.Admission = '-'"}, {"question_id": 1163, "answer_sql": "SELECT MIN(YEAR(`First Date`)) - YEAR(Birthday) AS Age FROM Patient;"}, {"question_id": 1164, "answer_sql": "SELECT COUNT(DISTINCT P.ID) AS WomenWithMostSeriousThrombosis FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE E.Thrombosis = 1 AND P.SEX = 'F' AND E.`Examination Date` BETWEEN '1997-01-01' AND '1997-12-31';"}, {"question_id": 1165, "answer_sql": "SELECT MAX(year(Birthday)) - MIN(year(Birthday)) AS age_gap FROM Patient WHERE `T-CHO` = 200 AND `T-CHO` > 200;"}, {"question_id": 1166, "answer_sql": "SELECT Symptoms, Diagnosis FROM Examination WHERE ID = (SELECT MIN(ID) FROM Patient) ORDER BY Birthday ASC;"}, {"question_id": 1167, "answer_sql": "SELECT AVG(COUNT(L.ID)) AS AverageTestsPerMonth FROM Laboratory L JOIN Patient P ON L.ID = P.ID WHERE P.SEX = 'M' AND L.Date BETWEEN '1998-01-01' AND '1998-12-31';"}, {"question_id": 1168, "answer_sql": "SELECT MAX(P.Birthday) AS 'First Date', MAX(P.Diagnosis) AS 'Diagnosis', MAX(L.`First Date`) AS 'First Date', MAX(L.Diagnosis) AS 'Diagnosis', MAX(L.`First Date`) - YEAR(P.Birthday) AS 'Age at Admission' FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON E.ID = L.ID WHERE P.Diagnosis = 'SJS' GROUP BY P.ID ORDER BY MAX(L.`First Date`) DESC LIMIT 1;"}, {"question_id": 1169, "answer_sql": "SELECT SUM(CASE WHEN SEX = 'M' AND UA <= '8.0' THEN 1 ELSE 0 END) / SUM(CASE WHEN SEX = 'F' AND UA <= '6.5' THEN 1 ELSE 0 END) AS Ratio FROM Laboratory WHERE DATE >= '2020-01-01' AND DATE <= '2021-12-31';"}, {"question_id": 1170, "answer_sql": "SELECT COUNT(DISTINCT P.ID) AS NumberOfPatients FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE SUBTRACT(year(E.`Examination Date`), year(P.`First Date`)) >= 1;"}, {"question_id": 1171, "answer_sql": "SELECT COUNT(DISTINCT E.ID) AS UnderagePatientsExamined FROM Examination E JOIN Patient P ON E.ID = P.ID WHERE P.Birthday < '1990-01-01' AND E.`Examination Date` BETWEEN '1990-01-01' AND '1993-12-31';"}, {"question_id": 1172, "answer_sql": "SELECT COUNT(P.ID) AS MalePatientsWithElevatedTotalBilirubin FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE P.SEX = 'M' AND E.`T-BIL` > '2.0';"}, {"question_id": 1173, "answer_sql": "SELECT MAX(T1.Diagnosis) AS MostCommonIllness FROM Examination T1 JOIN Patient T2 ON T1.ID = T2.ID WHERE T1.`Examination Date` BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY T1.Diagnosis;"}, {"question_id": 1174, "answer_sql": "SELECT AVG(AGE) AS AverageAge FROM ( SELECT EXTRACT(YEAR FROM EXAMINATION_DATE) - EXTRACT(YEAR FROM Birthday) AS AGE FROM Examination WHERE EXAMINATION_DATE BETWEEN '1991-10-01' AND '1991-10-30' ) AS AgeCalculation JOIN Patient AS P ON Examination.ID = P.ID WHERE P.Birthday BETWEEN '1991-01-01' AND '1991-12-31';"}, {"question_id": 1175, "answer_sql": "SELECT P.Birthday AS Patient_Birthday, P.Description AS Patient_Description, EX.`Examination Date` AS Examination_Date, EX.Diagnosis AS Examination_Diagnosis, MAX(L.HGB) AS Max_HGB FROM Patient P JOIN Examination EX ON P.ID = EX.ID JOIN Laboratory L ON EX.ID = L.ID WHERE EX.`Examination Date` = ( SELECT MAX(`Examination Date`) FROM Examination ) GROUP BY P.ID, EX.ID, EX.`Examination Date`, EX.Diagnosis, P.Birthday, P.Description ORDER BY EX.`Examination Date` DESC LIMIT 1;"}, {"question_id": 1176, "answer_sql": "SELECT `ANA Pattern`, `aCL IgG`, `aCL IgM`, `aCL IgA`, `aCL IgG` / `aCL IgM` AS `ANA Concentration` FROM Examination JOIN Patient ON Examination.ID = Patient.ID WHERE Patient.ID = 3605340 AND `Examination Date` = '1996-12-02';"}, {"question_id": 1177, "answer_sql": "SELECT T2.`T-CHO` AS cholesterol_level FROM Examination AS T1 JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.ID = 2927464 AND T1.`Examination Date` = '1995-09-04'"}, {"question_id": 1178, "answer_sql": "SELECT SEX FROM Patient WHERE Diagnosis = 'AORTITIS' AND ID = (SELECT ID FROM Examination WHERE Diagnosis = 'AORTITIS' ORDER BY ID LIMIT 1);"}, {"question_id": 1179, "answer_sql": "SELECT T2.`aCL IgM` FROM Patient AS T1 JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.Description = '1994-02-19' AND T1.Diagnosis = 'SLE' AND T2.`Examination Date` = '1993-11-12';"}, {"question_id": 1180, "answer_sql": "SELECT SEX FROM Patient WHERE SEX = 'M' AND `First Date` = '1992-06-12' AND GPT = '9';"}, {"question_id": 1181, "answer_sql": "SELECT (SUBTRACT('1992', YEAR(Birthday))) AS Age FROM Patient WHERE UA = '8.4' AND Date = '1991-10-21';"}, {"question_id": 1182, "answer_sql": "SELECT COUNT(L.ID) AS Total_Laboratory_Tests FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON L.ID = E.ID WHERE P.First_Date = '1991-06-13' AND P.Diagnosis = 'SJS' AND L.Date BETWEEN '1995-01-01' AND '1995-12-31';"}, {"question_id": 1183, "answer_sql": "SELECT Diagnosis FROM Patient WHERE `First Date` = '1997-01-27' AND Diagnosis = 'SLE';"}, {"question_id": 1184, "answer_sql": "SELECT Symptoms FROM Examination WHERE `Examination Date` = '1993-09-27' AND ID IN ( SELECT ID FROM Patient WHERE Birthday = '1959-03-01' );"}, {"question_id": 1185, "answer_sql": "SELECT (SUM(CASE WHEN T1.Birthday = '1959-02-18' AND T1.Date LIKE '1981-11-%' THEN T1.`T-CHO` ELSE 0 END) - SUM(CASE WHEN T1.Birthday = '1959-02-18' AND T1.Date LIKE '1981-12-%' THEN T1.`T-CHO` ELSE 0 END)) / SUM(CASE WHEN T1.Birthday = '1959-02-18' AND T1.Date LIKE '1981-11-%' THEN 1 ELSE 0 END) AS DecreaseRate FROM Laboratory AS T1 WHERE T1.Date LIKE '1981-11-%' OR T1.Date LIKE '1981-12-%';"}, {"question_id": 1186, "answer_sql": "SELECT P.ID FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON E.ID = L.ID WHERE P.Diagnosis = 'Behcet' AND E.`Examination Date` BETWEEN '1970-01-01' AND '1997-12-31';"}, {"question_id": 1187, "answer_sql": "SELECT P.ID FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE E.`Examination Date` BETWEEN '1987-07-06' AND '1996-01-31' AND L.GPT > 30 AND L.ALB < 4 GROUP BY P.ID ORDER BY P.ID;"}, {"question_id": 1188, "answer_sql": "SELECT ID FROM Patient WHERE SEX = 'F' AND YEAR(Birthday) = 1964 AND Admission = '+'"}, {"question_id": 1189, "answer_sql": "SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE E.Thrombosis = 2 AND E.`ANA Pattern` = 'S' AND L.`aCL IgM` = (SELECT AVG(`aCL IgM`) FROM Laboratory WHERE ID = P.ID) AND L.`aCL IgM` = (SELECT AVG(`aCL IgM`) FROM Laboratory WHERE ID = P.ID) * 1.2;"}, {"question_id": 1190, "answer_sql": "```sql SELECT CAST(SUM(CASE WHEN UA <= 6.5 AND `U-PRO` > 0 AND `U-PRO` < 30 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) AS Percentage FROM Laboratory WHERE `U-PRO` > 0 AND `U-PRO` < 30 AND `U-PRO` > 0 AND `U-PRO` < 30 AND `U-PRO` > 0 AND `U-PRO` < 30 AND `U-PRO` > 0 AND `U-PRO` < 30 AND `U-PRO` > 0 AND `U-PRO` < 30 AND `U-PRO` > 0 AND `U-PRO` < 30 AND `U-PRO` > 0 AND `U-PRO` < 30 AND `U-PRO` > 0 AND `U-PRO` < 30 AND `U-PRO` > 0 AND `U-PRO` < 30 AND `U-PRO` > 0 AND `U-PRO` < 30 AND `U-PRO` > 0 AND `U-PRO` < 30 AND `U-PRO` > 0 AND `U-PRO` < 30 AND `U-PRO` > 0 AND `U-PRO` < 30 AND `U-PRO` > 0 AND `U-PRO` < 30 AND `U-PRO` > 0 AND `U-PRO` < 30 AND `U-PRO` > 0 AND `U-PRO` < 30 AND `U-PRO` > 0 AND `U-PRO` < 30 AND `U-PRO` > 0 AND `U-PRO` < 30 AND `U-PRO` > 0 AND `U-PRO` < 30 AND `U-PRO` > 0 AND `U-PRO` < 30 AND `U-PRO` > 0 AND `U-PRO` < 30 AND `U-PRO` > 0 AND `U-PRO` < 30 AND `U-PRO` > 0 AND `U"}, {"question_id": 1191, "answer_sql": "SELECT CAST(SUM(CASE WHEN T1.DIAGNOSIS = 'BEHCET' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.DIAGNOSIS) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND YEAR(T1.`FIRST DATE`) = '1981';"}, {"question_id": 1192, "answer_sql": "SELECT P.ID, P.SEX, P.Birthday, P.Description, P.`First Date`, P.Admission, P.Diagnosis FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID AND L.Date LIKE '1991-10%' WHERE E.Diagnosis = '-' AND L.`T-BIL` < 2.0 AND E.`Examination Date` LIKE '1991-10%';"}, {"question_id": 1193, "answer_sql": "SELECT COUNT(*) FROM Patient P WHERE P.SEX = 'F' AND P.BIRTHDAY BETWEEN '1980-01-01' AND '1989-12-31' AND P.ID NOT IN ( SELECT ID FROM Examination E WHERE E.`ANA Pattern` = 'p' );"}, {"question_id": 1194, "answer_sql": "SELECT T1.SEX FROM Patient AS T1 JOIN Examination AS T2 ON T1.ID = T2.ID JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T2.Diagnosis = 'PSS' AND T3.CRP > 2 AND T3.CRE = 1 AND T3.LDH = 123;"}, {"question_id": 1195, "answer_sql": "SELECT AVG(Laboratory.ALB) AS AVG_ALB FROM Laboratory JOIN Patient ON Laboratory.ID = Patient.ID JOIN Examination ON Patient.ID = Examination.ID WHERE Patient.SEX = 'F' AND Laboratory.PLT > 400 AND Examination.Diagnosis = 'SLE';"}, {"question_id": 1196, "answer_sql": "SELECT MAX(Symptoms) AS MostCommonSign FROM Examination WHERE Diagnosis = 'SLE';"}, {"question_id": 1197, "answer_sql": "SELECT `First Date`, Diagnosis FROM Patient WHERE ID = 48473;"}, {"question_id": 1198, "answer_sql": "SELECT COUNT(DISTINCT P.ID) AS FemalePatientsWithAPS FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE P.SEX = 'F' AND E.Diagnosis = 'APS';"}, {"question_id": 1199, "answer_sql": "SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE YEAR(L.Date) = '1997' AND (L.TP > 8.5 OR L.TP < 6);"}, {"question_id": 1200, "answer_sql": "SELECT SUM(CASE WHEN Diagnosis LIKE '%SLE%' THEN 1 ELSE 0 END) / SUM(CASE WHEN Diagnosis LIKE '%ITP%' THEN 1 ELSE 0 END) * 100 FROM Examination WHERE Diagnosis LIKE '%SLE%' AND Thrombosis = 1;"}, {"question_id": 1201, "answer_sql": "SELECT CAST(COUNT(CASE WHEN SEX = 'F' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(*) AS Percentage FROM Patient WHERE YEAR(BIRTHDAY) = '1980' AND Diagnosis = 'RA';"}, {"question_id": 1202, "answer_sql": "SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE P.SEX = 'M' AND E.`Examination Date` BETWEEN '1995-01-01' AND '1997-12-31' AND E.Diagnosis = 'BEHCET' AND E.Admission = '-'"}, {"question_id": 1203, "answer_sql": "SELECT COUNT(DISTINCT P.ID) AS FemalePatientsWithWBCBelow35 FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE P.SEX = 'F' AND E.WBC < 3.5;"}, {"question_id": 1204, "answer_sql": "SELECT DATEDIFF(`Examination Date`, `First Date`) AS Time_Difference FROM Examination WHERE ID = 821298;"}, {"question_id": 1205, "answer_sql": "SELECT 'M' AS Sex, UA FROM Laboratory WHERE ID = 57266 AND Date = (SELECT MIN(Date) FROM Laboratory WHERE ID = 57266) AND UA > 8.0 UNION ALL SELECT 'F' AS Sex, UA FROM Laboratory WHERE ID = 57266 AND Date = (SELECT MIN(Date) FROM Laboratory WHERE ID = 57266) AND UA > 6.5;"}, {"question_id": 1206, "answer_sql": "SELECT Examination.`Examination Date` FROM Examination JOIN Patient ON Examination.ID = Patient.ID JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Patient.ID = 48473 AND Examination.`Examination Date` = (SELECT Date FROM Laboratory WHERE ID = 48473 AND GOT > 60)"}, {"question_id": 1207, "answer_sql": "SELECT P.SEX, P.Birthday FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE E.`Examination Date` BETWEEN '1994-01-01' AND '1994-12-31' AND E.`GOT` < 60;"}, {"question_id": 1208, "answer_sql": "SELECT P.ID FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.Date BETWEEN '2020-01-01' AND '2020-12-31' AND L.GPT >= 60;"}, {"question_id": 1209, "answer_sql": "SELECT Diagnosis FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.GPT > 60 ORDER BY Birthday ASC;"}, {"question_id": 1210, "answer_sql": "SELECT AVG(LDH) AS Average_LDH FROM Laboratory WHERE LDH < 500 GROUP BY LDH;"}, {"question_id": 1211, "answer_sql": "SELECT P.ID, AGE(P.Birthday) AS Age FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.Date = (SELECT MAX(Date) FROM Laboratory WHERE ID = P.ID) AND L.LDH BETWEEN 600 AND 800 AND P.SEX = 'M' -- Assuming male patient for this example ORDER BY P.ID;"}, {"question_id": 1212, "answer_sql": "SELECT P.ID, P.Admission, E.Diagnosis, E.Thrombosis FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE E.ALP < 300"}, {"question_id": 1213, "answer_sql": "SELECT P.ID FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE P.Birthday = '1982-04-01' AND E.ALP < 300;"}, {"question_id": 1214, "answer_sql": "SELECT P.ID, P.SEX, P.Birthday FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.TP < 6.0;"}, {"question_id": 1215, "answer_sql": "SELECT T2.ID, (T2.TP - 8.5) AS TP_deviation FROM Patient AS T1 JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND T2.TP > 8.5;"}, {"question_id": 1216, "answer_sql": "SELECT P.ID, P.Birthday FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.ALB NOT BETWEEN 3.5 AND 5.5 ORDER BY P.Birthday DESC;"}, {"question_id": 1217, "answer_sql": "SELECT P.ID, P.SEX, P.Birthday, P.Description, P.`First Date`, P.Admission, P.Diagnosis, L.ALB, CASE WHEN L.ALB BETWEEN 3.5 AND 5.5 THEN 'Albumin within normal range' ELSE 'Albumin outside normal range' END AS Albumin_Status FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE YEAR(P.Birthday) = 1982;"}, {"question_id": 1218, "answer_sql": "SELECT CAST(COUNT(CASE WHEN SEX = 'F' AND UA > 8.0 THEN 1 ELSE NULL END) + COUNT(CASE WHEN SEX = 'F' AND UA > 6.5 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(*) AS Percentage FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE SEX = 'F';"}, {"question_id": 1219, "answer_sql": "SELECT AVG(L.UA) AS AVG_UA FROM Laboratory L JOIN Examination E ON L.ID = E.ID JOIN Patient P ON E.ID = P.ID WHERE L.Date = (SELECT MAX(Date) FROM Laboratory WHERE ID = P.ID) AND (P.SEX = 'M' AND L.UA < 8.0) OR (P.SEX = 'F' AND L.UA < 6.5);"}, {"question_id": 1220, "answer_sql": "SELECT P.ID, P.SEX, P.Birthday FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE E.UN = 29;"}, {"question_id": 1221, "answer_sql": "SELECT P.ID, P.SEX, P.Birthday FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE P.Diagnosis = 'RA' AND L.UN < 30;"}, {"question_id": 1222, "answer_sql": "SELECT COUNT(P.ID) AS MalePatientsWithCREOutOfRange FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.CRE >= 1.5;"}, {"question_id": 1223, "answer_sql": "SELECT CASE WHEN SUM(CASE WHEN SEX = 'M' THEN 1 ELSE 0 END) > SUM(CASE WHEN SEX = 'F' THEN 1 ELSE 0 END) AND CRE >= 1.5 THEN 'True' ELSE 'False' END AS Result FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE CRE >= 1.5;"}, {"question_id": 1224, "answer_sql": "SELECT P.ID, P.SEX, P.Birthday FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.`T-BIL` = (SELECT MAX(T-BIL) FROM Laboratory) ORDER BY P.ID;"}, {"question_id": 1225, "answer_sql": "SELECT P.SEX, COUNT(*) AS PatientCount FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.`T-BIL` >= 2.0 GROUP BY P.SEX;"}, {"question_id": 1226, "answer_sql": "SELECT MIN(P.ID) AS Patient_ID, MAX(L.T-CHO) AS T-CHO_Index FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE P.Birthday = (SELECT MIN(birthday) FROM Patient) GROUP BY P.ID;"}, {"question_id": 1227, "answer_sql": "SELECT AVG(YEAR(NOW()) - YEAR(Birthday)) AS AverageAge FROM Patient WHERE SEX = 'M' AND `T-CHO` >= 250;"}, {"question_id": 1228, "answer_sql": "SELECT P.ID, P.Diagnosis FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.TG > 300;"}, {"question_id": 1229, "answer_sql": "SELECT COUNT(P.ID) AS AgeGreaterThan50 FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.TG > 200 AND (YEAR(current_timestamp) - YEAR(P.Birthday)) > 50;"}, {"question_id": 1230, "answer_sql": "SELECT DISTINCT P.ID FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE E.Admission = '-' AND L.CPK < 250;"}, {"question_id": 1231, "answer_sql": "SELECT COUNT(P.ID) AS MalePatientsWithCPGBeyondNormalRange FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE P.Birthday BETWEEN '1936-01-01' AND '1956-12-31' AND P.SEX = 'M' AND E.CPK >= 250;"}, {"question_id": 1232, "answer_sql": "SELECT P.ID, P.SEX, DATEDIFF(YEAR, P.Birthday, CURRENT_DATE) AS age FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.GLU >= 180 AND L.`T-CHO` < 250 GROUP BY P.ID, P.SEX, DATEDIFF(YEAR, P.Birthday, CURRENT_DATE)"}, {"question_id": 1233, "answer_sql": "SELECT P.ID, L.GLU FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE P.Description >= '1991-01-01' AND L.Date = (SELECT MIN(Date) FROM Laboratory WHERE ID = P.ID) AND L.GLU < 180;"}, {"question_id": 1234, "answer_sql": "SELECT P.ID, P.SEX, P.Birthday FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE E.WBC <= 3.5 OR E.WBC >= 9.0 GROUP BY P.SEX, P.Birthday ORDER BY DATEDIFF(CURDATE(), P.Birthday) ASC;"}, {"question_id": 1235, "answer_sql": "SELECT P.ID, P.Birthday, P.Description FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.RBC < 3.5 ORDER BY P.Birthday;"}, {"question_id": 1236, "answer_sql": "SELECT P.ID, P.SEX, P.Birthday, P.Description, P.`First Date`, P.Admission, P.Diagnosis, L.RBC, E.Diagnosis AS Examination_Diagnosis FROM Patient P JOIN Laboratory L ON P.ID = L.ID JOIN Examination E ON P.ID = E.ID WHERE P.SEX = 'F' AND P.Birthday >= DATE('now', '-50 years') AND L.RBC IN (3.5, 6.0) AND E.Diagnosis = 'Admitted';"}, {"question_id": 1237, "answer_sql": "SELECT ID, SEX FROM Patient WHERE Admission = '-' AND HGB < 10;"}, {"question_id": 1238, "answer_sql": "SELECT ID, SEX FROM Patient WHERE Diagnosis = 'SLE' AND HGB BETWEEN 10 AND 17 ORDER BY Birthday ASC LIMIT 1;"}, {"question_id": 1239, "answer_sql": "SELECT P.ID, age(P.Birthday) AS age FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID AND L.Date = (SELECT MIN(Date) FROM Laboratory WHERE ID = P.ID) WHERE L.HCT >= 52 GROUP BY P.ID, age(P.Birthday) HAVING COUNT(L.ID) >= 2;"}, {"question_id": 1240, "answer_sql": "SELECT AVG(T1.HCT) AS Average_HCT FROM Laboratory AS T1 JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.Date LIKE '1991%' GROUP BY T1.Date HAVING AVG(T1.HCT) < 29;"}, {"question_id": 1241, "answer_sql": "SELECT (SELECT COUNT(*) FROM Examination WHERE PLT < 100) - (SELECT COUNT(*) FROM Examination WHERE PLT > 400) FROM Examination WHERE PLT < 100;"}, {"question_id": 1242, "answer_sql": "SELECT p.ID, p.SEX, p.Birthday, p.Description, p.`First Date`, p.Admission, p.Diagnosis, l.ID, l.Date, l.GOT, l.GPT, l.LDH, l.ALP, l.TP, l.ALB, l.UA, l.UN, l.CRE, l.`T-BIL`, l.`T-CHO`, l.TG, l.CPK, l.GLU, l.WBC, l.RBC, l.HGB, l.HCT, l.PLT, l.PTT, l.FG, l.PIC, l.TAT, l.TAT2, l.`U-PRO`, l.IGG, l.IGA, l.IGM, l.CRP, l.RA, l.RF, l.C3, l.C4, l.RNP, l.SM, l.SC170, l.SSA, l.SSB, l.CENTROMEA, l.DNA, l.`DNA-II` FROM Patient p JOIN Examination e ON p.ID = e.ID JOIN Laboratory l ON e.ID = l.ID WHERE YEAR(l.Date) = 1984 AND YEAR(p.Birthday) < 1984 AND l.PLT BETWEEN 100 AND 400;"}, {"question_id": 1243, "answer_sql": "SELECT CAST(SUM(CASE WHEN T2.SEX = 'F' AND T2.PT >= 14 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.ID) AS Percentage FROM Patient AS T1 JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.Birthday < DATE_SUB(CURDATE(), INTERVAL 55 YEAR);"}, {"question_id": 1244, "answer_sql": "SELECT P.ID, P.`First Date`, P.Diagnosis, P.`Examination Date`, P.Sex, P.Birthday, P.Description, P.Admission, P.Diagnosis, P.`Examination Date`, P.`aCL IgG`, P.`aCL IgM`, P.`aCL IgA`, P.`ANA Pattern`, P.`ANA`, P.`aCL IgA`, P.Diagnosis, P.KCT, P.RVVT, P.LAC, P.Symptoms, P.Thrombosis, L.GOT, L.GPT, L.LDH, L.ALP, L.TP, L.ALB, L.UA, L.UN, L.CRE, L.`T-BIL`, L.`T-CHO`, L.TG, L.CPK, L.GLU, L.WBC, L.RBC, L.HGB, L.HCT, L.PLT, L.PTT, L.FG, L.PIC, L.TAT, L.TAT2, L.`U-PRO`, L.IGG, L.IGA, L.IGM, L.C3, L.C4, L.RNP, L.SM, L.SSA, L.SSB, L.CENTROMEA, L.DNA, L.`DNA-II` FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE YEAR(P.`First Date`) > 1992 AND L.PTT < 14;"}, {"question_id": 1245, "answer_sql": "SELECT COUNT(T1.ID) AS ExamCount FROM Examination AS T1 JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.`Examination Date` > '1997-01-01' AND T2.APTT < 45;"}, {"question_id": 1246, "answer_sql": "SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE E.Thrombosis = 3 AND L.APTT > 45"}, {"question_id": 1247, "answer_sql": "SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.WBC BETWEEN 3.5 AND 9.0 AND (L.FG <= 150 OR L.FG >= 450);"}, {"question_id": 1248, "answer_sql": "SELECT COUNT(DISTINCT P.ID) AS num_patients FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE P.Birthday > '1980-01-01' AND L.FG NOT BETWEEN 150 AND 450;"}, {"question_id": 1249, "answer_sql": "SELECT DISTINCT Diagnosis FROM Examination WHERE `U-PRO` >= 30;"}, {"question_id": 1250, "answer_sql": "SELECT P.ID FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.`U-PRO` BETWEEN 0 AND 30 AND P.Diagnosis = 'SLE';"}, {"question_id": 1251, "answer_sql": "SELECT COUNT(DISTINCT P.ID) AS Abortion_Patients FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.IGG < 900 AND E.Symptoms = 'abortion';"}, {"question_id": 1252, "answer_sql": "SELECT COUNT(DISTINCT P.ID) AS Num_Patients FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.IGG BETWEEN 900 AND 2000 AND E.Symptoms IS NOT NULL;"}, {"question_id": 1253, "answer_sql": "SELECT Diagnosis FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE e.`aCL IgA` BETWEEN 80 AND 500 ORDER BY e.`aCL IgA` DESC LIMIT 1;"}, {"question_id": 1254, "answer_sql": "SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE E.`aCL IgA` BETWEEN 80 AND 500 AND E.`First Date` >= '1990-01-01';"}, {"question_id": 1255, "answer_sql": "SELECT MAX(DIAGNOSIS) AS Most_Common_Disease FROM Examination WHERE IGM NOT BETWEEN 40 AND 400 GROUP BY DIAGNOSIS;"}, {"question_id": 1256, "answer_sql": "SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.CRP LIKE '+' OR L.CRP LIKE '-' OR L.CRP < 1.0 AND P.Description IS NULL;"}, {"question_id": 1257, "answer_sql": "SELECT COUNT(DISTINCT T1.ID) AS count FROM Examination AS T1 JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.CRP NOT IN ('+-', '-') AND T1.CRP >= 1.0 AND (YEAR(CURDATE()) - YEAR(T2.Birthday)) < 18;"}, {"question_id": 1258, "answer_sql": "SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.RF = '+' AND L.CENTROMEA = 'RA-';"}, {"question_id": 1259, "answer_sql": "SELECT Diagnosis FROM Patient WHERE YEAR(Birthday) > 1995 AND RA IN ('-', '+-');"}, {"question_id": 1260, "answer_sql": "SELECT P.ID FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.RF < 20 AND (YEAR(CURDATE()) - YEAR(P.Birthday)) > 60;"}, {"question_id": 1261, "answer_sql": "SELECT COUNT(DISTINCT P.ID) AS NormalRFNoThrombosis FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.RF < 20 AND E.Thrombosis = '0';"}, {"question_id": 1262, "answer_sql": "SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.C3 > 35 AND E.`ANA Pattern` = 'P';"}, {"question_id": 1263, "answer_sql": "SELECT P.ID FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.HCT NOT BETWEEN 29 AND 52 ORDER BY L.`aCL IgA` DESC LIMIT 1;"}, {"question_id": 1264, "answer_sql": "SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE E.Diagnosis = 'Thrombosis' AND L.C4 > 10;"}, {"question_id": 1265, "answer_sql": "SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE E.`U-PRO` = '-' AND E.Admission = '+';"}, {"question_id": 1266, "answer_sql": "SELECT MIN(T2.Birthday) AS Min_Birthday, T2.ID, T2.Birthday FROM Examination AS T1 JOIN Patient AS T2 ON T1.ID = T2.ID JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T3.RNP NOT IN ('-', '+-') GROUP BY T2.ID, T2.Birthday ORDER BY T2.Birthday ASC LIMIT 1;"}, {"question_id": 1267, "answer_sql": "SELECT COUNT(DISTINCT P.ID) AS Num_Patients FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.SM = '-' AND E.Thrombosis = '1';"}, {"question_id": 1268, "answer_sql": "SELECT ID FROM Patient WHERE SM NOT IN ('-', '+-') GROUP BY ID ORDER BY Birthday ASC LIMIT 3;"}, {"question_id": 1269, "answer_sql": "```sql SELECT P.ID FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE E.`Examination Date` >= '1997-01-01' AND E.`aCL IgG` = '-' AND E.`aCL IgM` = '-' AND E.`aCL IgA` = '-' AND E.`ANA Pattern` = '-' AND E.`aCL IgG` = '-' AND E.`aCL IgM` = '-' AND E.`aCL IgA` = '-' AND E.`ANA Pattern` = '-' AND E.`aCL IgG` = '-' AND E.`aCL IgM` = '-' AND E.`aCL IgA` = '-' AND E.`ANA Pattern` = '-' AND E.`aCL IgG` = '-' AND E.`aCL IgM` = '-' AND E.`aCL IgA` = '-' AND E.`ANA Pattern` = '-' AND E.`aCL IgG` = '-' AND E.`aCL IgM` = '-' AND E.`aCL IgA` = '-' AND E.`ANA Pattern` = '-' AND E.`aCL IgG` = '-' AND E.`aCL IgM` = '-' AND E.`aCL IgA` = '-' AND E.`ANA Pattern` = '-' AND E.`aCL IgG` = '-' AND E.`aCL IgM` = '-' AND E.`aCL IgA` = '-' AND E.`ANA Pattern` = '-' AND E.`aCL IgG` = '-' AND E.`aCL IgM` = '-' AND E.`aCL IgA` = '-' AND E.`ANA Pattern` = '-' AND E.`aCL IgG` = '-' AND E.`aCL IgM` = '-' AND E.`aCL IgA` = '-' AND E.`ANA Pattern` = '-' AND E.`aCL IgG` = '-' AND E.`aCL IgM` = '-' AND E.`aCL IgA` = '-' AND E.`ANA Pattern` = '-' AND E.`aCL IgG` = '-' AND E.`aCL IgM` = '-' AND E.`aCL IgA` = '-' AND E.`ANA Pattern` = '-' AND E.`aCL IgG` ="}, {"question_id": 1270, "answer_sql": "SELECT COUNT(DISTINCT T1.ID) AS count FROM Examination AS T1 JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.`aCL IgG` IN ('-', '+-') AND T2.SEX = 'M' AND T1.Symptoms = 'vertigo';"}, {"question_id": 1271, "answer_sql": "SELECT COUNT(DISTINCT P.ID) AS NormalAntiSSANum FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE E.`First Date` < '1990-01-01' AND E.SSA IN ('-','+');"}, {"question_id": 1272, "answer_sql": "SELECT ID FROM Patient WHERE ID = (SELECT ID FROM Examination WHERE `Examination Date` = (SELECT MIN(`First Date`) FROM Examination)) AND SSA NOT IN ('-', '+-');"}, {"question_id": 1273, "answer_sql": "SELECT COUNT(DISTINCT P.ID) AS Normal_SSB_SLE_Patients FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.SSB = '-' AND E.Diagnosis = 'SLE';"}, {"question_id": 1274, "answer_sql": "SELECT COUNT(DISTINCT ID) AS count FROM Examination WHERE Symptoms IS NOT NULL AND SSB = '-'"}, {"question_id": 1275, "answer_sql": "SELECT COUNT(DISTINCT P.ID) AS MalePatients FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.CENTROMEA IN ('-', '+-') AND L.SSB IN ('-', '+-') AND P.SEX = 'M';"}, {"question_id": 1276, "answer_sql": "SELECT Diagnosis FROM Examination WHERE DNA >= 8 AND ID IN ( SELECT ID FROM Patient WHERE ID IN ( SELECT ID FROM Examination WHERE Diagnosis IS NOT NULL ) );"}, {"question_id": 1277, "answer_sql": "SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE E.DNA < 8 AND E.Description IS NULL;"}, {"question_id": 1278, "answer_sql": "SELECT COUNT(DISTINCT P.ID) AS Num_Admitted FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.`DNA-II` < 8 AND P.Admission = '+';"}, {"question_id": 1279, "answer_sql": "SELECT (COUNT(CASE WHEN GOT >= 60 AND Diagnosis = 'SLE' THEN 1 ELSE NULL END) * 100) / COUNT(CASE WHEN GOT >= 60 THEN 1 ELSE NULL END) FROM Laboratory JOIN Patient ON Laboratory.ID = Patient.ID JOIN Examination ON Patient.ID = Examination.ID WHERE Diagnosis = 'SLE';"}, {"question_id": 1280, "answer_sql": "SELECT COUNT(P.ID) AS MalePatientsWithNormalGOT FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE P.SEX = 'M' AND E.`GOT` < 60;"}, {"question_id": 1281, "answer_sql": "SELECT MAX(Birthday) AS Youngest_BirthDate FROM Patient WHERE ID IN ( SELECT ID FROM Laboratory WHERE Date IN ( SELECT Date FROM Laboratory WHERE GOT >= 60 ) );"}, {"question_id": 1282, "answer_sql": "SELECT P.Birthday FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON L.ID = E.ID WHERE L.Date BETWEEN '2020-01-01' AND '2020-12-31' GROUP BY P.Birthday ORDER BY AVG(L.GPT) DESC LIMIT 3;"}, {"question_id": 1283, "answer_sql": "SELECT COUNT(P.ID) AS MalePatients FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.GOT < 60 AND P.SEX = 'M';"}, {"question_id": 1284, "answer_sql": "SELECT MIN(T1.First_Date) AS First_Date, T1.ID AS Patient_ID FROM Laboratory AS T1 JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.Date BETWEEN '2020-01-01' AND '2020-12-31' AND T1.LDH < 500 GROUP BY T1.ID ORDER BY T1.LDH DESC LIMIT 1;"}, {"question_id": 1285, "answer_sql": "SELECT MAX(P.First_Date) AS Latest_Date FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE E.LDH >= 500;"}, {"question_id": 1286, "answer_sql": "SELECT COUNT(DISTINCT P.ID) AS AdmittedPatients FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.ALP > 300 AND P.Admission = '+';"}, {"question_id": 1287, "answer_sql": "SELECT COUNT(DISTINCT P.ID) AS NormalALPCount FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE E.Admission = '-' AND E.ALP < 300;"}, {"question_id": 1288, "answer_sql": "SELECT Diagnosis FROM Patient WHERE ID IN ( SELECT ID FROM Laboratory WHERE Date = (SELECT MAX(Date) FROM Laboratory) ) AND TP < 6.0;"}, {"question_id": 1289, "answer_sql": "SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE P.Diagnosis = 'SJS' AND L.TP > 6.0 AND L.TP < 8.5;"}, {"question_id": 1290, "answer_sql": "SELECT T1.`Examination Date` FROM Examination AS T1 JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.`aCL IgG` = (SELECT MAX(T2.`aCL IgG`) FROM Examination AS T2 WHERE T2.`aCL IgG` > 3.5 AND T2.`aCL IgG` < 5.5)"}, {"question_id": 1291, "answer_sql": "SELECT COUNT(P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.ALB > 3.5 AND L.ALB < 5.5 AND L.TP BETWEEN 6.0 AND 8.5;"}, {"question_id": 1292, "answer_sql": "SELECT Examination.`aCL IgG`, Examination.`aCL IgM`, Examination.`aCL IgA`, Examination.`aCL IgA` AS anti_cardiolipin_antiobody_concentration FROM Examination JOIN Patient ON Examination.ID = Patient.ID JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Patient.Sex = 'F' AND Examination.`aCL IgA` IN ( SELECT MAX(`aCL IgA`) FROM Examination WHERE Examination.`aCL IgA` > 6.50 ) ORDER BY Examination.`aCL IgA` DESC LIMIT 1;"}, {"question_id": 1293, "answer_sql": "SELECT MAX(`ANA`) AS highest_ana_concentration FROM Examination WHERE CRE < 1.5 AND `ANA Pattern` = 'Normal';"}, {"question_id": 1294, "answer_sql": "SELECT P.ID FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.CRE < 1.5 ORDER BY L.IGG DESC LIMIT 1;"}, {"question_id": 1295, "answer_sql": "SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON L.ID = E.ID WHERE L.`T-BIL` >= 2.0 AND E.`ANA Pattern` LIKE '%P%'"}, {"question_id": 1296, "answer_sql": "SELECT T2.`ANA Pattern`, T2.`aCL IgG`, T2.`aCL IgM`, T2.`aCL IgA`, T2.`aCL IgA` / T2.`aCL IgG` AS ANA_concentration FROM Examination AS T1 JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.`T-BIL` < 2.0 ORDER BY T1.`T-BIL` DESC LIMIT 1;"}, {"question_id": 1297, "answer_sql": "SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.`T-CHO` >= 250 AND L.KCT = '-'"}, {"question_id": 1298, "answer_sql": "SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE E.`ANA Pattern` = 'P' AND L.`T-CHO` < 250;"}, {"question_id": 1299, "answer_sql": "SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.TG < 200 AND E.Symptoms IS NOT NULL;"}, {"question_id": 1300, "answer_sql": "SELECT Diagnosis FROM Examination WHERE TG < 200 ORDER BY TG DESC LIMIT 1;"}, {"question_id": 1301, "answer_sql": "SELECT P.ID FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE E.Thrombosis = 0 AND L.CPK < 250;"}, {"question_id": 1302, "answer_sql": "SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.CPK < 250 AND (L.KCT = '+' OR L.RVVT = '+' OR L.LAC = '+');"}, {"question_id": 1303, "answer_sql": "SELECT MIN(P.Birthday) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.GLU > 180 GROUP BY P.Birthday ORDER BY P.Birthday DESC LIMIT 1;"}, {"question_id": 1304, "answer_sql": "SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.GLU < 180 AND E.Thrombosis = 0;"}, {"question_id": 1305, "answer_sql": "SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE E.Admission = '+' AND P.WBC BETWEEN 3.5 AND 9.0;"}, {"question_id": 1306, "answer_sql": "SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE P.Diagnosis = 'SLE' AND L.WBC BETWEEN 3.5 AND 9.0;"}, {"question_id": 1307, "answer_sql": "SELECT DISTINCT P.ID FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE E.Diagnosis = 'Outpatient' AND (L.RBC <= 3.5 OR L.RBC >= 6.0);"}, {"question_id": 1308, "answer_sql": "SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE P.Sex = 'Male' AND P.Birthday BETWEEN '1980-01-01' AND '1980-12-31' AND P.Description = 'Normal' AND P.FirstDate BETWEEN '1980-01-01' AND '1980-12-31' AND E.Thrombosis = 0 AND E.Symptoms IS NOT NULL AND L.GOT > 100 AND L.GOT < 400;"}, {"question_id": 1309, "answer_sql": "SELECT P.ID, P.First_Date, P.Diagnosis, L.PLT FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON E.ID = L.ID WHERE P.Diagnosis = 'MCTD' AND L.PLT BETWEEN 100 AND 400;"}, {"question_id": 1310, "answer_sql": "SELECT AVG(PT) AS Average_PT FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE SEX = 'M' AND PT < 14;"}, {"question_id": 1311, "answer_sql": "SELECT COUNT(DISTINCT P.ID) AS num_patients FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE E.Thrombosis IN (2, 1) AND L.PT < 14;"}, {"question_id": 1312, "answer_sql": "SELECT major_name FROM major WHERE major_id = (SELECT link_to_major FROM member WHERE first_name = 'Angela' AND last_name = 'Sanders');"}, {"question_id": 1313, "answer_sql": "SELECT COUNT(DISTINCT member_id) AS student_count FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'Engineering';"}, {"question_id": 1314, "answer_sql": "SELECT first_name, last_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'Art and Design';"}, {"question_id": 1315, "answer_sql": "SELECT COUNT(T1.member_id) AS attended_students FROM member AS T1 JOIN attendance AS T2 ON T1.member_id = T2.link_to_member JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'Women''s Soccer';"}, {"question_id": 1316, "answer_sql": "SELECT T1.phone FROM member AS T1 JOIN attendance AS T2 ON T1.member_id = T2.link_to_member JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'Women\\'s Soccer';"}, {"question_id": 1317, "answer_sql": "SELECT COUNT(T1.member_id) AS num_members FROM member AS T1 JOIN attendance AS T2 ON T1.member_id = T2.link_to_member JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'Women\\'s Soccer' AND T1.t_shirt_size = 'Medium';"}, {"question_id": 1318, "answer_sql": "SELECT event.event_name FROM event JOIN attendance ON event.event_id = attendance.link_to_event JOIN member ON attendance.link_to_member = member.member_id GROUP BY event.event_name ORDER BY COUNT(attendance.link_to_event) DESC LIMIT 1;"}, {"question_id": 1319, "answer_sql": "SELECT DISTINCT m.college FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE m.position = 'Vice President';"}, {"question_id": 1320, "answer_sql": "SELECT event_name FROM event JOIN attendance ON event.event_id = attendance.link_to_event JOIN member ON attendance.link_to_member = member.member_id WHERE member.first_name = 'MAYA' AND member.last_name = 'MCLEAN';"}, {"question_id": 1321, "answer_sql": "SELECT COUNT(DISTINCT T1.link_to_event) AS event_count FROM member AS T1 JOIN attendance AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Sacha' AND T1.last_name = 'Harrison' AND YEAR(T2.event_date) = 2019;"}, {"question_id": 1322, "answer_sql": "SELECT COUNT(DISTINCT e.event_id) AS meeting_count FROM event e JOIN attendance a ON e.event_id = a.link_to_event GROUP BY e.event_id HAVING COUNT(a.link_to_event) > 10;"}, {"question_id": 1323, "answer_sql": "SELECT event_name FROM event JOIN attendance ON event.event_id = attendance.link_to_event GROUP BY event_name HAVING COUNT(attendance.link_to_event) > 20;"}, {"question_id": 1324, "answer_sql": "SELECT AVG(COUNT(DISTINCT event_name)) AS average_attendance FROM event WHERE type = 'Meeting' AND YEAR(event_date) = 2020;"}, {"question_id": 1325, "answer_sql": "SELECT MAX(cost) AS most_expensive_item FROM expense WHERE expense_description LIKE '%club events%'"}, {"question_id": 1326, "answer_sql": "SELECT COUNT(DISTINCT m.member_id) AS member_count FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE ma.major_name = 'Environmental Engineering';"}, {"question_id": 1327, "answer_sql": "SELECT m.first_name, m.last_name FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE e.event_name = 'Laugh Out Loud';"}, {"question_id": 1328, "answer_sql": "SELECT DISTINCT m.last_name FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE ma.major_name = 'Law and Constitutional Studies';"}, {"question_id": 1329, "answer_sql": "SELECT T2.county FROM member AS T1 JOIN major AS T2 ON T1.link_to_major = T2.major_id JOIN zip_code AS T3 ON T1.zip = T3.zip_code WHERE T1.first_name = 'Sherri' AND T1.last_name = 'Ramsey';"}, {"question_id": 1330, "answer_sql": "SELECT DISTINCT m.college FROM member m JOIN major ma ON m.link_to_major = ma.major_id JOIN attendance a ON m.member_id = a.link_to_member WHERE m.first_name = 'Tyler' AND m.last_name = 'Hewitt';"}, {"question_id": 1331, "answer_sql": "SELECT SUM(amount) AS total_funds FROM income WHERE position = 'Vice President';"}, {"question_id": 1332, "answer_sql": "SELECT SUM(spent) AS total_spent FROM budget WHERE event_status = 'Completed' AND category = 'Food' AND event_name = 'September Meeting';"}, {"question_id": 1333, "answer_sql": "SELECT DISTINCT T2.city, T2.state FROM member AS T1 JOIN major AS T2 ON T1.link_to_major = T2.major_id JOIN event AS T3 ON T1.zip = T3.zip_code WHERE T1.position = 'President';"}, {"question_id": 1334, "answer_sql": "SELECT first_name, last_name FROM member WHERE zip IN ( SELECT zip FROM zip_code WHERE state = 'Illinois' );"}, {"question_id": 1335, "answer_sql": "SELECT SUM(spent) AS total_spent FROM budget WHERE event_status = 'Completed' AND category = 'Advertisement' AND event_name = 'September Meeting';"}, {"question_id": 1336, "answer_sql": "SELECT DISTINCT m.department FROM major m JOIN member mm ON m.major_id = mm.major_id WHERE mm.first_name = 'Pierce' AND mm.last_name = 'Guidi';"}, {"question_id": 1337, "answer_sql": "SELECT SUM(amount) AS total_budget FROM budget WHERE event_status = 'October Speaker';"}, {"question_id": 1338, "answer_sql": "SELECT e.event_name, e.event_date, e.event_id, e.type, e.notes, e.location, e.status, COUNT(e.event_id) AS expense_count, COUNT(CASE WHEN e.event_name = 'October Meeting' AND e.event_date = '2019-10-08' THEN e.event_id ELSE NULL END) AS approved_expense_count FROM event e JOIN expense es ON e.event_id = es.link_to_event WHERE e.event_name = 'October Meeting' AND e.event_date = '2019-10-08' GROUP BY e.event_name, e.event_date, e.event_id, e.type, e.notes, e.location, e.status HAVING COUNT(CASE WHEN e.event_name = 'October Meeting' AND e.event_date = '2019-10-08' THEN e.event_id ELSE NULL END) = COUNT(e.event_id);"}, {"question_id": 1339, "answer_sql": "SELECT AVG(expense.cost) AS average_cost FROM expense JOIN member ON expense.link_to_member = member.member_id JOIN event ON expense.link_to_event = event.event_id WHERE month(expense.expense_date) IN (9, 10) AND member.first_name = 'Elijah' AND member.last_name = 'Allen';"}, {"question_id": 1340, "answer_sql": "SELECT SUM(CASE WHEN YEAR(event_date) = 2019 THEN spent ELSE 0 END) - SUM(CASE WHEN YEAR(event_date) = 2020 THEN spent ELSE 0 END) AS difference FROM budget WHERE event_status = 'active';"}, {"question_id": 1341, "answer_sql": "SELECT location FROM event WHERE event_name = 'Spring Budget Review';"}, {"question_id": 1342, "answer_sql": "SELECT expense.cost FROM expense JOIN event ON expense.link_to_budget = event.event_id WHERE event.event_name = 'Posters' AND event.event_date = '2019-09-04';"}, {"question_id": 1343, "answer_sql": "SELECT MAX(budget.remaining) AS remaining FROM budget WHERE budget.category = 'Food';"}, {"question_id": 1344, "answer_sql": "SELECT notes FROM income WHERE source = 'Fundraising' AND date_received = '2019-09-14';"}, {"question_id": 1345, "answer_sql": "SELECT COUNT(DISTINCT major_id) AS major_count FROM major WHERE college = 'College of Humanities and Social Sciences';"}, {"question_id": 1346, "answer_sql": "SELECT phone FROM member WHERE first_name = 'Carlo' AND last_name = 'Jacobs';"}, {"question_id": 1347, "answer_sql": "SELECT T2.county FROM member AS T1 JOIN major AS T2 ON T1.link_to_major = T2.major_id JOIN zip_code AS T3 ON T1.zip = T3.zip_code WHERE T1.first_name = 'Adela' AND T1.last_name = 'O''Gallagher';"}, {"question_id": 1348, "answer_sql": "SELECT COUNT(budget_id) AS exceeded_budget_count FROM budget WHERE event_status = 'November Meeting' AND remaining < 0;"}, {"question_id": 1349, "answer_sql": "SELECT SUM(amount) AS total_budget_amount FROM budget WHERE event_status = 'September Speaker';"}, {"question_id": 1350, "answer_sql": "SELECT event_status FROM event JOIN expense ON event.event_id = expense.link_to_event WHERE expense.expense_description = 'Post Cards, Posters' AND expense.expense_date = '2019-08-20';"}, {"question_id": 1351, "answer_sql": "SELECT major_name FROM major WHERE major_id = (SELECT link_to_major FROM member WHERE first_name = 'Brent' AND last_name = 'Thomason');"}, {"question_id": 1352, "answer_sql": "SELECT COUNT(T1.member_id) AS large_t_shirt_count FROM member AS T1 JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Human Development and Family Studies' AND T1.t_shirt_size = 'Large';"}, {"question_id": 1353, "answer_sql": "SELECT DISTINCT T1.type FROM zip_code AS T1 JOIN member AS T2 ON T1.zip = T2.zip WHERE T2.first_name = 'Christof' AND T2.last_name = 'Nielson';"}, {"question_id": 1354, "answer_sql": "SELECT major_name FROM major WHERE position = 'Vice President';"}, {"question_id": 1355, "answer_sql": "SELECT DISTINCT T1.state FROM zip_code AS T1 JOIN member AS T2 ON T1.zip = T2.zip JOIN major AS T3 ON T2.link_to_major = T3.major_id WHERE T2.first_name = 'Sacha' AND T2.last_name = 'Harrison';"}, {"question_id": 1356, "answer_sql": "SELECT major.department FROM major JOIN member ON major.major_id = member.link_to_major JOIN event ON member.member_id = event.link_to_member WHERE member.position = 'President';"}, {"question_id": 1357, "answer_sql": "SELECT T1.date_received FROM income AS T1 JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.first_name = 'Connor' AND T2.last_name = 'Hilton' AND T1.source = 'Dues';"}, {"question_id": 1358, "answer_sql": "SELECT first_name, last_name FROM member WHERE received_date = (SELECT MIN(received_date) FROM income WHERE source = 'Dues') AND source = 'Dues';"}, {"question_id": 1359, "answer_sql": "SELECT SUM(CASE WHEN T1.event_name = 'Advertisement' AND T1.event_name = 'Yearly Kickoff' THEN T2.amount ELSE 0 END) / SUM(CASE WHEN T1.event_name = 'October Meeting' AND T1.event_name = 'Advertisement' THEN T2.amount ELSE 0 END) AS ratio FROM budget AS T1 JOIN event AS T2 ON T1.link_to_event = T2.event_id JOIN member AS T3 ON T2.link_to_member = T3.member_id"}, {"question_id": 1360, "answer_sql": "SELECT (SUM(CASE WHEN T1.category = 'Parking' THEN T1.amount ELSE 0 END) / COUNT(T1.event_name)) * 100 AS parking_percentage FROM budget AS T1 JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'November Speaker';"}, {"question_id": 1361, "answer_sql": "SELECT SUM(cost) AS total_cost FROM expense WHERE expense_description = 'Pizza';"}, {"question_id": 1362, "answer_sql": "SELECT COUNT(DISTINCT T1.city) AS city_count FROM zip_code AS T1 JOIN major AS T2 ON T1.zip_code = T2.zip_code WHERE T2.college = 'College of William & Mary' AND T2.state = 'Virginia' AND T1.county = 'Orange';"}, {"question_id": 1363, "answer_sql": "SELECT DISTINCT department FROM major WHERE college = 'College of Humanities and Social Sciences';"}, {"question_id": 1364, "answer_sql": "SELECT T1.city, T1.county, T1.state FROM zip_code AS T1 JOIN member AS T2 ON T1.zip = T2.zip JOIN major AS T3 ON T2.link_to_major = T3.major_id JOIN member AS T4 ON T3.link_to_major = T4.link_to_major WHERE T4.first_name = 'Amy' AND T4.last_name = 'Firth';"}, {"question_id": 1365, "answer_sql": "SELECT expense_description FROM expense WHERE link_to_budget = ( SELECT budget_id FROM budget WHERE remaining = ( SELECT MIN(remaining) FROM budget ) );"}, {"question_id": 1366, "answer_sql": "SELECT m.first_name, m.last_name FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE e.event_name = 'October Meeting';"}, {"question_id": 1367, "answer_sql": "SELECT m.college FROM member m JOIN major ma ON m.link_to_major = ma.major_id GROUP BY m.college ORDER BY COUNT(m.major_id) DESC LIMIT 1;"}, {"question_id": 1368, "answer_sql": "SELECT major_name FROM member WHERE phone = '809-555-3360' AND link_to_major IS NOT NULL;"}, {"question_id": 1369, "answer_sql": "SELECT event_name FROM event WHERE event_id = ( SELECT link_to_event FROM budget ORDER BY amount DESC LIMIT 1 );"}, {"question_id": 1370, "answer_sql": "SELECT expense_description FROM expense WHERE link_to_member = (SELECT member_id FROM member WHERE position = 'Vice President')"}, {"question_id": 1371, "answer_sql": "SELECT COUNT(DISTINCT T1.link_to_member) AS member_count FROM event AS T1 JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'Women\\'s Soccer';"}, {"question_id": 1372, "answer_sql": "SELECT T1.date_received FROM income AS T1 JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.first_name = 'Casey' AND T2.last_name = 'Mason';"}, {"question_id": 1373, "answer_sql": "SELECT COUNT(DISTINCT T1.zip) AS Maryland_Hometowns FROM member AS T1 JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.state = 'Maryland';"}, {"question_id": 1374, "answer_sql": "SELECT COUNT(T1.event_id) AS event_count FROM member AS T1 JOIN attendance AS T2 ON T1.member_id = T2.link_to_member WHERE T1.phone = '954-555-6240';"}, {"question_id": 1375, "answer_sql": "SELECT first_name, last_name FROM member WHERE link_to_major = (SELECT major_id FROM major WHERE major_name = 'School of Applied Sciences, Technology and Education');"}, {"question_id": 1376, "answer_sql": "SELECT event_name FROM event WHERE status = 'Closed' ORDER BY (SELECT spent FROM budget WHERE link_to_event = event.event_id) / amount DESC LIMIT 1;"}, {"question_id": 1377, "answer_sql": "SELECT COUNT(DISTINCT member_id) AS president_count FROM member WHERE position = 'President';"}, {"question_id": 1378, "answer_sql": "SELECT MAX(spent) AS highest_budget_spend FROM budget WHERE link_to_event IN ( SELECT event_id FROM event );"}, {"question_id": 1379, "answer_sql": "SELECT COUNT(*) FROM event WHERE type = 'Meeting' AND YEAR(event_date) = 2020;"}, {"question_id": 1380, "answer_sql": "SELECT SUM(spent) AS total_spent FROM budget WHERE category = 'Food';"}, {"question_id": 1381, "answer_sql": "SELECT first_name, last_name FROM member WHERE member_id IN ( SELECT link_to_member FROM attendance GROUP BY link_to_member HAVING COUNT(link_to_event) > 7 );"}, {"question_id": 1382, "answer_sql": "SELECT m.first_name, m.last_name FROM member m JOIN major ma ON m.link_to_major = ma.major_id JOIN event e ON m.zip = e.zip_code WHERE ma.major_name = 'Interior Design' AND e.event_name = 'Community Theater';"}, {"question_id": 1383, "answer_sql": "SELECT member_id, first_name, last_name FROM member WHERE zip IN ( SELECT zip FROM zip_code WHERE city = 'Georgetown' AND state = 'South Carolina' );"}, {"question_id": 1384, "answer_sql": "SELECT SUM(amount) AS total_income FROM income WHERE link_to_member = (SELECT member_id FROM member WHERE first_name = 'Grant' AND last_name = 'Gilmour');"}, {"question_id": 1385, "answer_sql": "SELECT member.first_name, member.last_name FROM member JOIN income ON member.member_id = income.link_to_member WHERE income.amount > 40;"}, {"question_id": 1386, "answer_sql": "SELECT SUM(cost) AS total_expense FROM expense WHERE event_name = 'Yearly Kickoff';"}, {"question_id": 1387, "answer_sql": "SELECT m.first_name, m.last_name FROM member m JOIN major ma ON m.link_to_major = ma.major_id JOIN event e ON ma.department = e.department WHERE e.event_name = 'Yearly Kickoff';"}, {"question_id": 1388, "answer_sql": "SELECT member.first_name, member.last_name, income.source FROM member JOIN income ON member.member_id = income.link_to_member WHERE member.zip IN ( SELECT zip_code.zip_code FROM zip_code WHERE zip_code.type = 'zip_code' GROUP BY zip_code.zip_code ORDER BY SUM(income.amount) DESC LIMIT 1 ) ORDER BY income.amount DESC;"}, {"question_id": 1389, "answer_sql": "SELECT event_name FROM event WHERE event_id = (SELECT event_id FROM (SELECT event_id, MIN(cost) AS min_cost FROM expense GROUP BY event_id) AS subquery)"}, {"question_id": 1390, "answer_sql": "SELECT (SUM(CASE WHEN e.event_name = 'Yearly Kickoff' THEN e.cost ELSE 0 END) / SUM(e.cost)) * 100 AS yearly_kickoff_percentage FROM event e"}, {"question_id": 1391, "answer_sql": "SELECT SUM(CASE WHEN major_name = 'Finance' THEN 1 ELSE 0 END) / SUM(CASE WHEN major_name = 'Physics' THEN 1 ELSE 0 END) AS finance_to_physics_ratio FROM major"}, {"question_id": 1392, "answer_sql": "SELECT source, MAX(amount) AS max_amount FROM income WHERE date_received BETWEEN '2019-09-01' AND '2019-09-30' GROUP BY source ORDER BY max_amount DESC LIMIT 1;"}, {"question_id": 1393, "answer_sql": "SELECT first_name, last_name, email FROM member WHERE position = 'Secretary';"}, {"question_id": 1394, "answer_sql": "SELECT COUNT(DISTINCT m.member_id) AS member_count FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE ma.major_name = 'Physics Teaching';"}, {"question_id": 1395, "answer_sql": "SELECT COUNT(DISTINCT T1.link_to_member) AS member_count FROM event AS T1 JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'Community Theater' AND YEAR(T1.event_date) = 2019;"}, {"question_id": 1396, "answer_sql": "SELECT COUNT(e.event_id) AS event_count, m.major_name FROM event e JOIN attendance a ON e.event_id = a.link_to_event JOIN member m ON a.link_to_member = m.member_id WHERE m.first_name = 'Luisa' AND m.last_name = 'Guidi';"}, {"question_id": 1397, "answer_sql": "SELECT AVG(budget.spent) AS average_spent FROM budget WHERE budget.event_status = 'Closed' AND budget.category = 'Food';"}, {"question_id": 1398, "answer_sql": "SELECT event_name FROM event WHERE event_id IN ( SELECT link_to_event FROM expense WHERE category = 'Advertisement' GROUP BY link_to_event ORDER BY SUM(cost) DESC LIMIT 1 )"}, {"question_id": 1399, "answer_sql": "SELECT link_to_event FROM attendance WHERE link_to_member = 'MAYA MCLAIN' AND link_to_event = 'Women\\'s Soccer';"}, {"question_id": 1400, "answer_sql": "SELECT CAST(SUM(CASE WHEN T1.type = 'Community Service' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.event_id) FROM event AS T1 JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T1.event_date BETWEEN '2019-01-01' AND '2019-12-31'"}, {"question_id": 1401, "answer_sql": "SELECT T2.cost FROM event AS T1 JOIN expense AS T2 ON T1.event_id = T2.link_to_budget JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'September Speaker' AND T2.expense_description = 'Posters'"}, {"question_id": 1402, "answer_sql": "SELECT MAX(COUNT(t_shirt_size)) AS most_popular_t_shirt_size, t_shirt_size FROM member JOIN major ON member.link_to_major = major.major_id JOIN event ON member.zip = zip_code.zip_code WHERE member.zip IN ( SELECT zip_code.zip_code FROM zip_code JOIN event ON zip_code.zip_code = event.location WHERE event.status = 'confirmed' ) GROUP BY t_shirt_size ORDER BY most_popular_t_shirt_size DESC LIMIT 1;"}, {"question_id": 1403, "answer_sql": "SELECT e.event_name FROM event e JOIN budget b ON e.event_id = b.link_to_event JOIN expense ex ON b.budget_id = ex.link_to_budget WHERE e.status = 'Closed' AND ex.cost > b.remaining ORDER BY b.remaining ASC LIMIT 1;"}, {"question_id": 1404, "answer_sql": "SELECT e.event_name AS event_name, SUM(e.expense_id) AS total_expense_id, SUM(e.cost) AS total_cost FROM event e JOIN expense e_expense ON e.event_id = e_expense.link_to_event WHERE e.event_name = 'October Meeting' GROUP BY e.event_name"}, {"question_id": 1405, "answer_sql": "SELECT category, spent FROM budget WHERE link_to_event = (SELECT event_id FROM event WHERE event_name = 'April Speaker') ORDER BY spent ASC;"}, {"question_id": 1406, "answer_sql": "SELECT MAX(budget.remaining) AS max_budget, budget.event_status FROM budget WHERE budget.category = 'Food' GROUP BY budget.event_status;"}, {"question_id": 1407, "answer_sql": "SELECT budget_id, category, amount FROM budget WHERE category = 'Advertisement' ORDER BY amount DESC LIMIT 3;"}, {"question_id": 1408, "answer_sql": "SELECT SUM(cost) AS total_cost_spent_parking FROM expense WHERE expense_description = 'Parking';"}, {"question_id": 1409, "answer_sql": "SELECT SUM(cost) AS total_expense FROM expense WHERE expense_date = '2019-08-20';"}, {"question_id": 1410, "answer_sql": "SELECT member.first_name, member.last_name, SUM(expense.cost) AS total_cost FROM member JOIN link_to_member ON member.member_id = link_to_member.link_to_member JOIN expense ON link_to_member.link_to_member = expense.link_to_member WHERE member.member_id = 'rec4BLdZHS2Blfp4v' GROUP BY member.first_name, member.last_name;"}, {"question_id": 1411, "answer_sql": "SELECT expense_description FROM expense WHERE link_to_member = 'Sacha Harrison';"}, {"question_id": 1412, "answer_sql": "SELECT expense_description FROM expense WHERE t_shirt_size = 'X-Large' AND link_to_member IN ( SELECT link_to_member FROM member WHERE link_to_major IN ( SELECT major_id FROM major WHERE t_shirt_size = 'X-Large' ) )"}, {"question_id": 1413, "answer_sql": "SELECT DISTINCT T1.zip FROM member AS T1 JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T2.cost < 50;"}, {"question_id": 1414, "answer_sql": "SELECT major_name FROM major WHERE member_id = (SELECT link_to_member FROM member WHERE first_name = 'Phillip' AND last_name = 'Cullen');"}, {"question_id": 1415, "answer_sql": "SELECT T1.position FROM member AS T1 JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Business';"}, {"question_id": 1416, "answer_sql": "SELECT COUNT(*) FROM member WHERE link_to_major = (SELECT major_id FROM major WHERE major_name = 'Business') AND t_shirt_size = 'Medium';"}, {"question_id": 1417, "answer_sql": "SELECT event_type FROM budget WHERE remaining > 30;"}, {"question_id": 1418, "answer_sql": "SELECT category FROM event WHERE location = 'MU 215';"}, {"question_id": 1419, "answer_sql": "SELECT category FROM budget WHERE event_status = 'taken place in 2020-03-24T12:00:00';"}, {"question_id": 1420, "answer_sql": "SELECT major_name FROM major WHERE position = 'Vice President';"}, {"question_id": 1421, "answer_sql": "SELECT (SUM(CASE WHEN T1.position = 'Member' AND T1.major_name = 'Mathematics' THEN 1 ELSE 0 END) * 100) / COUNT(T1.member_id) AS percentage FROM member AS T1 JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.zip = (SELECT zip_code FROM zip_code WHERE T2.college = 'Mathematics');"}, {"question_id": 1422, "answer_sql": "SELECT category FROM event WHERE location = 'MU 215';"}, {"question_id": 1423, "answer_sql": "SELECT COUNT(income_id) AS income_count FROM income WHERE amount = 50;"}, {"question_id": 1424, "answer_sql": "SELECT COUNT(*) AS member_count FROM member WHERE position = 'Member' AND t_shirt_size = 'X-Large';"}, {"question_id": 1425, "answer_sql": "SELECT COUNT(DISTINCT m.major_id) AS major_count FROM member m JOIN major ma ON m.link_to_major = ma.major_id JOIN zip_code z ON m.zip = z.zip_code WHERE z.city = 'Collegeville' AND z.state = 'PA' AND z.short_state = 'COAATS'"}, {"question_id": 1426, "answer_sql": "SELECT major.last_name, major.major_name, major.department, major.college FROM major JOIN member ON major.link_to_major = member.member_id WHERE major.major_name = 'Environmental Engineering';"}, {"question_id": 1427, "answer_sql": "SELECT T1.category FROM budget AS T1 JOIN event AS T2 ON T1.link_to_event = T2.event_id JOIN major AS T3 ON T2.location = 'MU 215' JOIN expense AS T4 ON T2.event_id = T4.link_to_event WHERE T4.spent = 0 AND T4.type = 'Guest Speaker';"}, {"question_id": 1428, "answer_sql": "SELECT DISTINCT T2.city, T2.state FROM member AS T1 JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'Electrical and Computer Engineering';"}, {"question_id": 1429, "answer_sql": "SELECT e.event_name FROM event e JOIN attendance a ON e.event_id = a.link_to_event JOIN member m ON a.link_to_member = m.member_id WHERE m.position = 'Vice President' AND m.zip = (SELECT zip FROM zip_code WHERE city = 'Washington' AND county = 'E' AND state = 'CA' AND short_state = 'CA')"}, {"question_id": 1430, "answer_sql": "SELECT m.last_name, m.position FROM member m JOIN expense e ON m.member_id = e.link_to_member WHERE e.expense_description = 'Pizza' AND e.expense_date = '2019-09-10';"}, {"question_id": 1431, "answer_sql": "SELECT DISTINCT m.last_name FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE e.event_name = 'Women\\'s Soccer';"}, {"question_id": 1432, "answer_sql": "SELECT CAST(COUNT(CASE WHEN amount = 50 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(member_id) AS percentage FROM member WHERE t_shirt_size = 'Medium' AND position = 'Member';"}, {"question_id": 1433, "answer_sql": "SELECT DISTINCT T2.state, T2.short_state FROM zip_code AS T1 JOIN major AS T2 ON T1.zip_code = T2.zip_code WHERE T1.type = 'PO Box';"}, {"question_id": 1434, "answer_sql": "SELECT DISTINCT T1.zip_code FROM zip_code AS T1 JOIN major AS T2 ON T1.zip_code = T2.zip_code JOIN event AS T3 ON T2.college = T3.college JOIN member AS T4 ON T2.college = T4.college WHERE T1.type = 'PO Box' AND T1.state = 'Puerto Rico' AND T3.city = 'San Juan Municipio';"}, {"question_id": 1435, "answer_sql": "SELECT event_name FROM event WHERE type = 'Game' AND status = 'Closed' AND event_date BETWEEN '2019-03-15' AND '2020-03-20';"}, {"question_id": 1436, "answer_sql": "```sql SELECT DISTINCT e.event_id FROM event e JOIN attendance a ON e.event_id = a.link_to_event JOIN member m ON a.link_to_member = m.member_id WHERE m.zip IN ( SELECT z.zip_code FROM zip_code z JOIN member m ON z.zip_code = m.zip WHERE m.zip IS NOT NULL ) AND m.zip IS NOT NULL AND m.zip IN ( SELECT z.zip_code FROM zip_code z JOIN member m ON z.zip_code = m.zip WHERE m.zip IS NOT NULL ) AND m.zip IS NOT NULL AND m.zip IN ( SELECT z.zip_code FROM zip_code z JOIN member m ON z.zip_code = m.zip WHERE m.zip IS NOT NULL ) AND m.zip IS NOT NULL AND m.zip IN ( SELECT z.zip_code FROM zip_code z JOIN member m ON z.zip_code = m.zip WHERE m.zip IS NOT NULL ) AND m.zip IS NOT NULL AND m.zip IN ( SELECT z.zip_code FROM zip_code z JOIN member m ON z.zip_code = m.zip WHERE m.zip IS NOT NULL ) AND m.zip IS NOT NULL AND m.zip IN ( SELECT z.zip_code FROM zip_code z JOIN member m ON z.zip_code = m.zip WHERE m.zip IS NOT NULL ) AND m.zip IS NOT NULL AND m.zip IN ( SELECT z.zip_code FROM zip_code z JOIN member m ON z.zip_code = m.zip WHERE m.zip IS NOT NULL ) AND m.zip IS NOT NULL AND m.zip IN ( SELECT z.zip_code FROM zip_code z JOIN member m ON z.zip_code = m.zip WHERE m.zip IS NOT NULL ) AND m.zip IS NOT NULL AND m.zip IN ( SELECT z.zip_code FROM zip_code z JOIN member m ON z.zip_code = m.zip WHERE m.zip IS NOT NULL ) AND m.zip IS NOT NULL AND m.zip IN ( SELECT z.zip_code FROM zip_code z JOIN member m ON z.zip_code = m.zip WHERE m.zip IS NOT NULL ) AND m.zip IS NOT NULL AND m.zip IN ( SELECT z.zip_code FROM zip_code z JOIN member m ON z"}, {"question_id": 1437, "answer_sql": "```sql SELECT m.first_name, m.last_name, e.event_name, e.event_date, e.event_id FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE m.zip = (SELECT zip FROM zip_code WHERE short_state = 'CA') AND m.zip = (SELECT zip FROM zip_code WHERE short_state = 'NY') AND m.zip = (SELECT zip FROM zip_code WHERE short_state = 'TX') AND m.zip = (SELECT zip FROM zip_code WHERE short_state = 'IL') AND m.zip = (SELECT zip FROM zip_code WHERE short_state = 'PA') AND m.zip = (SELECT zip FROM zip_code WHERE short_state = 'VA') AND m.zip = (SELECT zip FROM zip_code WHERE short_state = 'NC') AND m.zip = (SELECT zip FROM zip_code WHERE short_state = 'GA') AND m.zip = (SELECT zip FROM zip_code WHERE short_state = 'MN') AND m.zip = (SELECT zip FROM zip_code WHERE short_state = 'WI') AND m.zip = (SELECT zip FROM zip_code WHERE short_state = 'OH') AND m.zip = (SELECT zip FROM zip_code WHERE short_state = 'IN') AND m.zip = (SELECT zip FROM zip_code WHERE short_state = 'KY') AND m.zip = (SELECT zip FROM zip_code WHERE short_state = 'FL') AND m.zip = (SELECT zip FROM zip_code WHERE short_state = 'SC') AND m.zip = (SELECT zip FROM zip_code WHERE short_state = 'ME') AND m.zip = (SELECT zip FROM zip_code WHERE short_state = 'CT') AND m.zip = (SELECT zip FROM zip_code WHERE short_state = 'DE') AND m.zip = (SELECT zip FROM zip_code WHERE short_state = 'MD') AND m.zip = (SELECT zip FROM zip_code WHERE short_state = 'VT') AND m.zip = (SELECT zip FROM zip_code WHERE short_state = 'NH') AND m.zip = (SELECT zip FROM zip_code WHERE short_state = 'RI') AND m.zip = (SELECT zip FROM zip_code WHERE short_state = 'MA') AND m.zip"}, {"question_id": 1438, "answer_sql": "SELECT major.college FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Katy' AND member.link_to_major = 'rec1N0upiVLy5esTO';"}, {"question_id": 1439, "answer_sql": "SELECT phone FROM member WHERE link_to_major = (SELECT major_id FROM major WHERE major_name = 'Business' AND department = 'College of Agriculture and Applied Sciences');"}, {"question_id": 1440, "answer_sql": "SELECT DISTINCT e.email FROM expense e JOIN member m ON e.link_to_member = m.member_id WHERE e.cost > 20 AND e.expense_date BETWEEN '2019-09-10' AND '2019-11-19';"}, {"question_id": 1441, "answer_sql": "SELECT COUNT(DISTINCT m.member_id) AS member_count FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE ma.major_name = 'education' AND m.position = 'education';"}, {"question_id": 1442, "answer_sql": "SELECT CAST(COUNT(CASE WHEN remaining < 0 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(event_id) AS percentage FROM event WHERE event_id IN ( SELECT link_to_event FROM attendance GROUP BY link_to_event HAVING COUNT(link_to_event) > 1 );"}, {"question_id": 1443, "answer_sql": "SELECT event_id, location, status FROM event WHERE event_date BETWEEN '2019-11-01' AND '2020-03-31';"}, {"question_id": 1444, "answer_sql": "SELECT expense_id, expense_description, expense_date, cost, approved, link_to_member, link_to_budget FROM expense WHERE cost > 50 GROUP BY expense_id, expense_description, expense_date, cost, approved, link_to_member, link_to_budget HAVING COUNT(expense_id) > 1;"}, {"question_id": 1445, "answer_sql": "SELECT first_name, last_name FROM member WHERE t_shirt_size = 'X-Large';"}, {"question_id": 1446, "answer_sql": "SELECT (SUM(CASE WHEN type = 'PO Box' THEN 1 ELSE 0 END) * 100) / COUNT(zip_code) FROM zip_code;"}, {"question_id": 1447, "answer_sql": "SELECT event_name, location FROM event WHERE remaining > 0;"}, {"question_id": 1448, "answer_sql": "SELECT event_name, event_date FROM event JOIN expense ON event.event_id = expense.link_to_event WHERE expense_description = 'Pizza' AND cost > 50 AND cost < 100;"}, {"question_id": 1449, "answer_sql": "SELECT m.first_name, m.last_name, m.major_name FROM member m JOIN expense e ON m.member_id = e.link_to_member WHERE e.cost > 100;"}, {"question_id": 1450, "answer_sql": "SELECT DISTINCT T1.city, T1.country FROM zip_code AS T1 JOIN event AS T2 ON T1.zip_code = T2.location JOIN income AS T3 ON T3.link_to_member = T2.event_id GROUP BY T1.city, T1.country HAVING COUNT(T3.income_id) > 40;"}, {"question_id": 1451, "answer_sql": "SELECT m.first_name, m.last_name, SUM(e.cost) AS total_expense FROM member m JOIN expense e ON m.member_id = e.link_to_member GROUP BY m.member_id HAVING COUNT(e.event_id) > 1 ORDER BY total_expense DESC LIMIT 1;"}, {"question_id": 1452, "answer_sql": "SELECT AVG(T2.cost) AS average_amount FROM member AS T1 JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position != 'Member';"}, {"question_id": 1453, "answer_sql": "SELECT event_name FROM event WHERE cost < DIVIDE(SUM(cost), COUNT(event_id)) AND category = 'Parking' GROUP BY event_name HAVING COUNT(event_id) < AVG(COUNT(event_id))"}, {"question_id": 1454, "answer_sql": "SELECT CAST(SUM(CASE WHEN e.type = 'Game' THEN e.cost ELSE 0 END) AS REAL) / SUM(CASE WHEN e.type = 'Game' THEN 1 ELSE 0 END) * 100 AS percentage FROM event e"}, {"question_id": 1455, "answer_sql": "SELECT budget_id FROM expense WHERE expense_description = 'Water, chips, cookies' ORDER BY cost DESC LIMIT 1;"}, {"question_id": 1456, "answer_sql": "SELECT first_name, last_name FROM member WHERE member_id IN ( SELECT link_to_member FROM expense GROUP BY link_to_member ORDER BY cost DESC LIMIT 5 ) ORDER BY cost DESC;"}, {"question_id": 1457, "answer_sql": "SELECT m.first_name, m.last_name, m.phone FROM member m JOIN expense e ON m.member_id = e.link_to_member WHERE e.cost > (SELECT AVG(cost) FROM expense);"}, {"question_id": 1458, "answer_sql": "SELECT (SUM(CASE WHEN T1.state = 'Maine' THEN 1 ELSE 0 END) * 100 / COUNT(T1.position)) - (SUM(CASE WHEN T1.state = 'Vermont' THEN 1 ELSE 0 END) * 100 / COUNT(T1.position)) FROM member AS T1 JOIN major AS T2 ON T1.link_to_major = T2.major_id JOIN zip_code AS T3 ON T1.zip = T3.zip_code JOIN event AS T4 ON T1.link_to_event = T4.event_id JOIN attendance AS T5 ON T1.member_id = T5.link_to_member JOIN budget AS T6 ON T4.event_id = T6.link_to_event JOIN expense AS T7 ON T1.member_id = T7.link_to_member JOIN income AS T8 ON T1.member_id = T8.link_to_member WHERE T1.state IN ('Maine', 'Vermont')"}, {"question_id": 1459, "answer_sql": "SELECT major_name, department FROM major JOIN member ON major.link_to_major = member.member_id JOIN zip_code ON member.zip = zip_code.zip_code WHERE first_name = 'Garrett' AND last_name = 'Gerke';"}, {"question_id": 1460, "answer_sql": "SELECT m.first_name, m.last_name, SUM(e.cost) AS total_spent FROM member m JOIN expense e ON m.member_id = e.link_to_member WHERE e.expense_description IN ('Water', 'Veggie tray', 'supplies') GROUP BY m.first_name, m.last_name"}, {"question_id": 1461, "answer_sql": "SELECT major.last_name, member.phone FROM major JOIN member ON major.link_to_major = member.member_id WHERE major.major_name = 'Elementary Education' ORDER BY major.last_name;"}, {"question_id": 1462, "answer_sql": "SELECT category, amount FROM budget WHERE event_status = 'budgeted' AND event_id = (SELECT event_id FROM event WHERE event_name = 'January Speaker');"}, {"question_id": 1463, "answer_sql": "SELECT event_name FROM event JOIN budget ON event.event_id = budget.link_to_event WHERE budget.category = 'Food';"}, {"question_id": 1464, "answer_sql": "SELECT member.first_name, member.last_name, income.amount FROM income JOIN member ON income.link_to_member = member.member_id JOIN event ON income.link_to_event = event.event_id WHERE income.date_received = '9/9/2019';"}, {"question_id": 1465, "answer_sql": "SELECT category FROM expense WHERE expense_description = 'Posters';"}, {"question_id": 1466, "answer_sql": "SELECT first_name, last_name, college FROM member WHERE position = 'Secretary';"}, {"question_id": 1467, "answer_sql": "SELECT SUM(budget.spent) AS total_spent, event.event_name FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE budget.category = 'Speaker Gifts' GROUP BY event.event_name;"}, {"question_id": 1468, "answer_sql": "SELECT T1.city FROM zip_code AS T1 JOIN member AS T2 ON T1.zip = T2.zip JOIN major AS T3 ON T2.link_to_major = T3.major_id JOIN event AS T4 ON T2.member_id = T4.link_to_member WHERE T3.first_name = 'Garrett' AND T3.last_name = 'Girke';"}, {"question_id": 1469, "answer_sql": "SELECT member.first_name, member.last_name, member.position FROM member JOIN major ON member.link_to_major = major.major_id JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.city = 'Lincolnton' AND zip_code.state = 'North Carolina';"}, {"question_id": 1470, "answer_sql": "SELECT COUNT(T2.GasStationID) AS PremiumGasStations FROM customers AS T1 JOIN gasstations AS T2 ON T1.CustomerID = T2.CustomerID JOIN transactions_1k AS T3 ON T1.CustomerID = T3.CustomerID WHERE T2.Country = 'CZE' AND T3.ProductID = (SELECT ProductID FROM products WHERE Description = 'Premium')"}, {"question_id": 1471, "answer_sql": "SELECT COUNT(CASE WHEN Currency = 'EUR' THEN 1 ELSE NULL END) / COUNT(CASE WHEN Currency = 'CZK' THEN 1 ELSE NULL END) AS Ratio FROM customers"}, {"question_id": 1472, "answer_sql": "SELECT c.Segment, SUM(ym.Consumption) AS TotalConsumption FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID JOIN yearmonth ym ON ym.CustomerID = c.CustomerID AND ym.Date BETWEEN '201201' AND '201212' WHERE ym.Date BETWEEN '201201' AND '201212' GROUP BY c.Segment ORDER BY TotalConsumption ASC LIMIT 1;"}, {"question_id": 1473, "answer_sql": "SELECT AVG(T1.Consumption) / 12 AS AverageMonthlyConsumption FROM customers AS T1 JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'SME' AND T2.Date BETWEEN '201301' AND '201312'"}, {"question_id": 1474, "answer_sql": "SELECT c.CustomerID, c.Segment, c.Currency FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID JOIN yearmonth y ON c.CustomerID = y.CustomerID AND y.Date BETWEEN '201101' AND '201112' WHERE c.Currency = 'CZK' GROUP BY c.CustomerID, c.Segment, c.Currency ORDER BY SUM(t.Amount) DESC LIMIT 1;"}, {"question_id": 1475, "answer_sql": "SELECT COUNT(DISTINCT T1.CustomerID) AS NumberOfCustomers FROM customers AS T1 JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date BETWEEN '201201' AND '201212' AND T2.Consumption < 30000;"}, {"question_id": 1476, "answer_sql": "SELECT SUM(CASE WHEN T2.Currency = 'CZK' THEN T3.Consumption ELSE 0 END) - SUM(CASE WHEN T2.Currency = 'EUR' THEN T3.Consumption ELSE 0 END) AS DifferenceInConsumption FROM customers AS T1 JOIN transactions_1k AS T3 ON T1.CustomerID = T3.CustomerID JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID AND T2.Date BETWEEN '201201' AND '201212' WHERE T1.Currency IN ('CZK', 'EUR') GROUP BY T1.CustomerID"}, {"question_id": 1477, "answer_sql": "SELECT Date, SUM(Consumption) AS TotalConsumption FROM yearmonth JOIN customers ON yearmonth.CustomerID = customers.CustomerID WHERE customers.Currency = 'EUR' GROUP BY Date ORDER BY TotalConsumption DESC LIMIT 1;"}, {"question_id": 1478, "answer_sql": "SELECT Segment FROM customers WHERE CustomerID = ( SELECT CustomerID FROM yearmonth GROUP BY Date ORDER BY SUM(Consumption) ASC LIMIT 1 )"}, {"question_id": 1479, "answer_sql": "SELECT SUBSTR(Date, 1, 4) AS Year, SUM(Consumption) AS Total_Consumption FROM yearmonth WHERE Currency = 'CZK' GROUP BY Year ORDER BY Total_Consumption DESC LIMIT 1;"}, {"question_id": 1480, "answer_sql": "SELECT ym.Date, ym.Consumption FROM customers c JOIN yearmonth ym ON c.CustomerID = ym.CustomerID WHERE c.Segment = 'SME' AND ym.Date LIKE '2013%' AND ym.Date LIKE '2013%1' ORDER BY ym.Consumption DESC LIMIT 1;"}, {"question_id": 1481, "answer_sql": "SELECT CASE WHEN T1.Segment = 'SME' THEN 'LAM' WHEN T1.Segment = 'LAM' THEN 'KAM' WHEN T1.Segment = 'KAM' THEN 'SME' END AS Segment, SUM(CASE WHEN T1.Segment = 'SME' THEN T2.Consumption WHEN T1.Segment = 'LAM' THEN T3.Consumption WHEN T1.Segment = 'KAM' THEN T4.Consumption END) / COUNT(CASE WHEN T1.Segment = 'SME' THEN T2.CustomerID WHEN T1.Segment = 'LAM' THEN T3.CustomerID WHEN T1.Segment = 'KAM' THEN T4.CustomerID END) AS AnnualAverageConsumption FROM customers AS T1 JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID JOIN transactions_1k AS T3 ON T1.CustomerID = T3.CustomerID JOIN transactions_1k AS T4 ON T1.CustomerID = T4.CustomerID WHERE T1.Segment IN ('SME', 'LAM', 'KAM') AND T2.Date BETWEEN '201301' AND '201312' GROUP BY Segment ORDER BY Segment;"}, {"question_id": 1482, "answer_sql": "SELECT Segment, (SUM(CASE WHEN STRFTIME('%Y', Date) = '2013' THEN Consumption ELSE 0 END) - SUM(CASE WHEN STRFTIME('%Y', Date) = '2012' THEN Consumption ELSE 0 END)) / SUM(CASE WHEN STRFTIME('%Y', Date) = '2013' THEN Consumption ELSE 0 END) * 100 AS PercentageIncrease FROM customers AS T1 JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE STRFTIME('%Y', Date) IN ('201201', '201312') GROUP BY Segment ORDER BY PercentageIncrease DESC, Segment LIMIT 3;"}, {"question_id": 1483, "answer_sql": "SELECT SUM(T1.Amount) AS TotalConsumption FROM transactions_1k AS T1 JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.CustomerID = 6 AND T1.Date BETWEEN '201308' AND '201311';"}, {"question_id": 1484, "answer_sql": "SELECT SUM(CASE WHEN T2.Country = 'Czech Republic' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.Country = 'Slovakia' THEN 1 ELSE 0 END) AS MoreDiscountGasStations FROM customers AS T1 JOIN gasstations AS T2 ON T1.CustomerID = T2.CustomerID JOIN transactions_1k AS T3 ON T1.CustomerID = T3.CustomerID WHERE T2.Segment = 'Discount';"}, {"question_id": 1485, "answer_sql": "SELECT SUM(CASE WHEN T2.Date LIKE '201304' THEN T1.Consumption ELSE 0 END) - SUM(CASE WHEN T2.Date LIKE '201304' THEN T3.Consumption ELSE 0 END) AS Difference FROM customers AS T1 JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID JOIN transactions_1k AS T3 ON T1.CustomerID = T3.CustomerID WHERE T1.CustomerID = 7 AND T2.Date LIKE '201304'"}, {"question_id": 1486, "answer_sql": "SELECT SUM(CASE WHEN T2.Currency = 'CZK' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.Currency = 'EUR' THEN 1 ELSE 0 END) AS Difference FROM customers AS T1 JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID;"}, {"question_id": 1487, "answer_sql": "SELECT c.CustomerID, c.Segment, c.Currency, y.Date, y.Consumption FROM customers c JOIN yearmonth y ON c.CustomerID = y.CustomerID JOIN transactions_1k t ON c.CustomerID = t.CustomerID WHERE c.Currency = 'Euro' AND y.Date LIKE '201310' ORDER BY y.Consumption DESC LIMIT 1;"}, {"question_id": 1488, "answer_sql": "SELECT c.Segment, SUM(t.Amount) AS TotalConsumption FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID JOIN yearmonth ym ON c.CustomerID = ym.CustomerID AND ym.Date = t.Date WHERE c.Segment = 'KAM' GROUP BY c.Segment ORDER BY TotalConsumption DESC LIMIT 1;"}, {"question_id": 1489, "answer_sql": "SELECT SUM(T1.Amount) AS TotalConsumption FROM transactions_1k AS T1 JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Segment = 'KAM' AND T1.Date LIKE '201305%'"}, {"question_id": 1490, "answer_sql": "SELECT (SUM(CASE WHEN T1.Segment = 'LAM' AND T2.Consumption > 46.73 THEN 1 ELSE 0 END) * 100.0 / COUNT(T1.CustomerID)) AS Percentage FROM customers AS T1 JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM';"}, {"question_id": 1491, "answer_sql": "SELECT g.Country, COUNT(*) AS ValueForMoneyGasStations FROM gasstations g JOIN transactions_1k t ON g.GasStationID = t.GasStationID WHERE t.Price / t.Amount > 1 GROUP BY g.Country ORDER BY ValueForMoneyGasStations DESC;"}, {"question_id": 1492, "answer_sql": "SELECT (SUM(CASE WHEN T2.Currency = 'EUR' THEN T1.Amount ELSE 0 END) / SUM(T1.Amount)) * 100 AS Percentage FROM transactions_1k AS T1 JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Segment = 'KAM';"}, {"question_id": 1493, "answer_sql": "SELECT CAST(COUNT(CASE WHEN Consumption > 528.3 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(CASE WHEN Consumption > 528.3 THEN 1 ELSE NULL END) AS Percentage FROM yearmonth WHERE Date LIKE '201202%';"}, {"question_id": 1494, "answer_sql": "SELECT (SUM(CASE WHEN T2.Segment = 'Premium' THEN 1 ELSE 0 END) * 100.0 / COUNT(T2.GasStationID)) AS PremiumGasStationPercentage FROM customers AS T1 JOIN gasstations AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Country = 'Slovakia';"}, {"question_id": 1495, "answer_sql": "SELECT c.CustomerID FROM customers c JOIN yearmonth ym ON c.CustomerID = ym.CustomerID WHERE ym.Date = '201309' ORDER BY ym.Consumption DESC LIMIT 1;"}, {"question_id": 1496, "answer_sql": "SELECT c.Segment FROM customers c JOIN yearmonth ym ON c.CustomerID = ym.CustomerID JOIN transactions_1k t ON c.CustomerID = t.CustomerID WHERE ym.Date = '201309' GROUP BY c.Segment ORDER BY SUM(t.Amount) ASC LIMIT 1;"}, {"question_id": 1497, "answer_sql": "SELECT c.Segment, SUM(t.Amount) AS TotalConsumption FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID JOIN yearmonth ym ON c.CustomerID = ym.CustomerID AND ym.Date = '201206' GROUP BY c.Segment ORDER BY TotalConsumption ASC LIMIT 1;"}, {"question_id": 1498, "answer_sql": "SELECT MAX(T1.Consumption) AS HighestMonthlyConsumption FROM yearmonth AS T1 WHERE STRFTIME('%Y', T1.Date) = '2012';"}, {"question_id": 1499, "answer_sql": "SELECT SUM(T2.Consumption) / 12 AS BiggestMonthlyConsumption FROM customers AS T1 JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID JOIN sqlite_sequence AS T3 ON T1.CustomerID = T3.name WHERE T1.Currency = 'euro' GROUP BY T1.CustomerID ORDER BY BiggestMonthlyConsumption DESC LIMIT 1;"}, {"question_id": 1500, "answer_sql": "SELECT T2.Description FROM transactions_1k AS T1 JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID JOIN yearmonth AS T3 ON T2.CustomerID = T3.CustomerID AND T3.Date = '201309' WHERE T1.Date LIKE '201309%'"}, {"question_id": 1501, "answer_sql": "SELECT DISTINCT T2.Country FROM transactions_1k AS T1 JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID JOIN yearmonth AS T3 ON T2.CustomerID = T3.CustomerID AND T3.Date LIKE '201306%' WHERE T1.Date LIKE '201306%'"}, {"question_id": 1502, "answer_sql": "SELECT DISTINCT g.ChainID, g.Country FROM gasstations g JOIN transactions_1k t ON g.GasStationID = t.GasStationID JOIN customers c ON t.CustomerID = c.CustomerID WHERE t.Price = 'EUR';"}, {"question_id": 1503, "answer_sql": "SELECT T2.Description FROM transactions_1k AS T1 JOIN products AS T2 ON T1.ProductID = T2.ProductID JOIN customers AS T3 ON T1.CustomerID = T3.CustomerID JOIN yearmonth AS T4 ON T3.CustomerID = T4.CustomerID AND T4.Date = T1.Date WHERE T1.Price * T1.Amount = T1.Price * T1.Amount * 0.015625"}, {"question_id": 1504, "answer_sql": "SELECT AVG(T1.Price) AS AverageTotalPrice FROM transactions_1k AS T1 JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date LIKE '2012-01%' GROUP BY T1.Date;"}, {"question_id": 1505, "answer_sql": "SELECT COUNT(DISTINCT T1.CustomerID) AS NumberOfCustomers FROM customers AS T1 JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID JOIN yearmonth AS T3 ON T1.CustomerID = T3.CustomerID AND T3.Date = T2.Date WHERE T2.Price = 'EUR' AND T3.Consumption > 1000;"}, {"question_id": 1506, "answer_sql": "SELECT T2.Description FROM transactions_1k AS T1 JOIN customers AS T3 ON T1.CustomerID = T3.CustomerID JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE';"}, {"question_id": 1507, "answer_sql": "SELECT T1.Date, T1.Time FROM transactions_1k AS T1 JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.ChainID = 11"}, {"question_id": 1508, "answer_sql": "SELECT COUNT(T1.TransactionID) AS NumberOfTransactions FROM transactions_1k AS T1 JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID JOIN customers AS T3 ON T1.CustomerID = T3.CustomerID WHERE T2.Country = 'CZE' AND T1.Price > 1000;"}, {"question_id": 1509, "answer_sql": "SELECT COUNT(T1.TransactionID) AS NumberOfTransactions FROM transactions_1k AS T1 JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID JOIN customers AS T3 ON T1.CustomerID = T3.CustomerID WHERE T2.Country = 'CZE' AND T1.Date > '2012-01-01'"}, {"question_id": 1510, "answer_sql": "SELECT AVG(T1.Price) AS AverageTotalPrice FROM transactions_1k AS T1 JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID JOIN customers AS T3 ON T1.CustomerID = T3.CustomerID WHERE T2.Country = 'CZE';"}, {"question_id": 1511, "answer_sql": "SELECT AVG(T1.Price) AS AverageTotalPrice FROM transactions_1k AS T1 JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'euro';"}, {"question_id": 1512, "answer_sql": "SELECT c.CustomerID, c.Segment, c.Currency, MAX(t1.Amount) AS MaxAmount FROM customers c JOIN transactions_1k t1 ON c.CustomerID = t1.CustomerID WHERE t1.Date = '2012-08-25' GROUP BY c.CustomerID, c.Segment, c.Currency ORDER BY MaxAmount DESC LIMIT 1;"}, {"question_id": 1513, "answer_sql": "SELECT g.Country FROM customers c JOIN gasstations g ON c.CustomerID = g.CustomerID JOIN transactions_1k t ON c.CustomerID = t.CustomerID WHERE t.Date = '2012-08-25' AND t.Amount > 0 ORDER BY g.Country LIMIT 1;"}, {"question_id": 1514, "answer_sql": "SELECT T1.Currency FROM customers AS T1 JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '2012-08-24' AND T2.Time = '16:25:00';"}, {"question_id": 1515, "answer_sql": "SELECT Segment FROM customers AS T1 JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '2012-08-23' AND T2.time = '21:20:00';"}, {"question_id": 1516, "answer_sql": "SELECT COUNT(T1.TransactionID) AS NumberOfTransactions FROM transactions_1k AS T1 JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID JOIN yearmonth AS T3 ON T2.CustomerID = T3.CustomerID AND T3.Date = '2012-08-26' WHERE T1.Date LIKE '2012-08-26%' AND T1.Price = 0.01 AND T1.Time < '13:00:00';"}, {"question_id": 1517, "answer_sql": "SELECT Segment FROM customers WHERE CustomerID = ( SELECT CustomerID FROM ( SELECT CustomerID, MIN(Date) AS MinDate FROM transactions_1k GROUP BY CustomerID ) AS MinDateGroup )"}, {"question_id": 1518, "answer_sql": "SELECT T1.Country FROM transactions_1k AS T1 JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '2012-08-24' AND T1.time = '12:42:00';"}, {"question_id": 1519, "answer_sql": "SELECT ProductID FROM transactions_1k WHERE Date = '2012-08-23' AND Time = '21:20:00';"}, {"question_id": 1520, "answer_sql": "SELECT t1.CustomerID, t1.Date, t1.Amount FROM transactions_1k t1 JOIN customers t2 ON t1.CustomerID = t2.CustomerID WHERE t1.Date LIKE '2012-01-%' AND t1.Amount = 124.05;"}, {"question_id": 1521, "answer_sql": "SELECT COUNT(T1.TransactionID) AS TransactionCount FROM transactions_1k AS T1 JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date BETWEEN '2012-08-26' AND '2012-08-26' AND T2.Country = 'CZE';"}, {"question_id": 1522, "answer_sql": "SELECT c.Currency FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID JOIN yearmonth y ON c.CustomerID = y.CustomerID AND y.Date LIKE '201306%' WHERE t.Amount = 214582.17;"}, {"question_id": 1523, "answer_sql": "SELECT T1.Country FROM customers AS T1 JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.CardID = 667467;"}, {"question_id": 1524, "answer_sql": "SELECT T1.Country FROM customers AS T1 JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '2012-08-24' AND T2.Amount = 548.4"}, {"question_id": 1525, "answer_sql": "SELECT (COUNT(CASE WHEN T2.Currency = 'EUR' THEN 1 ELSE NULL END) * 100) / COUNT(T2.CustomerID) AS Percentage FROM transactions_1k AS T1 JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '2012-08-25';"}, {"question_id": 1526, "answer_sql": "SELECT c.CustomerID, (SELECT Consumption FROM yearmonth WHERE Date = '2012-08-24' AND CustomerID = c.CustomerID) - (SELECT Consumption FROM yearmonth WHERE Date = '2013-08-24' AND CustomerID = c.CustomerID) AS ConsumptionDecreaseRate FROM customers c WHERE c.CustomerID = ( SELECT t1.CustomerID FROM transactions_1k t1 WHERE t1.Date = '2012-08-24' AND t1.Amount = 634.8 );"}, {"question_id": 1527, "answer_sql": "SELECT g.GasStationID, g.Country, SUM(t.Amount) AS TotalRevenue FROM gasstations g JOIN transactions_1k t ON g.GasStationID = t.GasStationID GROUP BY g.GasStationID, g.Country ORDER BY TotalRevenue DESC LIMIT 1;"}, {"question_id": 1528, "answer_sql": "SELECT (SUM(CASE WHEN T2.Segment = 'premium' THEN T1.Amount ELSE 0 END) * 100.0 / SUM(T1.Amount)) AS PremiumPercentage FROM transactions_1k AS T1 JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Segment = 'SVK';"}, {"question_id": 1529, "answer_sql": "SELECT t1.Amount, t2.Consumption FROM transactions_1k t1 JOIN customers t2 ON t1.CustomerID = t2.CustomerID WHERE t2.CustomerID = 38508 AND t1.Date LIKE '201201%';"}, {"question_id": 1530, "answer_sql": "SELECT T2.Description FROM transactions_1k AS T1 JOIN products AS T2 ON T1.ProductID = T2.ProductID ORDER BY T1.Amount DESC LIMIT 5;"}, {"question_id": 1531, "answer_sql": "SELECT c.CustomerID, c.Segment, c.Currency, AVG(t.Price / t.Amount) AS AveragePricePerItem FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID WHERE c.CustomerID = ( SELECT CustomerID FROM transactions_1k GROUP BY CustomerID ORDER BY SUM(t.Amount) DESC LIMIT 1 ) GROUP BY c.CustomerID, c.Segment, c.Currency"}, {"question_id": 1532, "answer_sql": "SELECT g.Country FROM gasstations g JOIN transactions_1k t ON g.GasStationID = t.GasStationID WHERE t.ProductID = 2 ORDER BY t.Price DESC LIMIT 1;"}, {"question_id": 1533, "answer_sql": "SELECT ym.CustomerID, ym.Date, ym.Consumption FROM customers c JOIN customers ym ON c.CustomerID = ym.CustomerID JOIN yearmonth ym ON ym.Date = '201208' AND ym.CustomerID = c.CustomerID JOIN transactions_1k t ON c.CustomerID = t.CustomerID WHERE t.ProductID = 5 AND t.Price / t.Amount > 29.00;"}]