[{"question_id": 0, "answer_sql": "SELECT MAX(`Percent (%) Eligible Free (K-12)`) AS HighestEligibleFreeRate FROM frpm WHERE `County Code` = 'Alameda';"}, {"question_id": 1, "answer_sql": "SELECT frpm.CDSCode, (frpm.`Free Meal Count (Ages 5-17)` / frpm.`Enrollment (Ages 5-17)`) AS eligible_free_rate FROM frpm WHERE frpm.`School Type` LIKE '%continuation%' ORDER BY eligible_free_rate ASC LIMIT 3;"}, {"question_id": 2, "answer_sql": "SELECT DISTINCT Zip FROM schools WHERE County = 'Fresno' AND Charter = 1;"}, {"question_id": 3, "answer_sql": "SELECT s.Street, s.City, s.State, s.Zip FROM schools s JOIN ( SELECT CDSCode, MAX(FRPM_Count_K_12) AS MaxFRPM FROM frpm GROUP BY CDSCode ) AS max_frpm ON s.CDSCode = max_frpm.CDSCode WHERE s.CDSCode = max_frpm.CDSCode;"}, {"question_id": 4, "answer_sql": "SELECT s.Phone FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE f.`Charter School (Y/N)` = 1 AND s.OpenDate > '2000-01-01';"}, {"question_id": 5, "answer_sql": "SELECT COUNT(*) FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE satscores.AvgScrMath < 400 AND schools.Virtual = 'F';"}, {"question_id": 6, "answer_sql": "SELECT s.CDSCode, s.SchoolName FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds WHERE ss.NumTstTakr > 500 AND s.Magnet = 1;"}, {"question_id": 7, "answer_sql": "SELECT s.Phone FROM schools s JOIN ( SELECT cds, MAX(NumGE1500) AS MaxNumGE1500 FROM satscores GROUP BY cds ) AS satscores_max ON s.CDSCode = satscores_max.cds WHERE satscores_max.MaxNumGE1500 = satscores.NumGE1500;"}, {"question_id": 8, "answer_sql": "SELECT SUM(NumTstTakr) AS TotalTestTakers FROM satscores WHERE cds IN ( SELECT CDSCode FROM frpm WHERE `FRPM Count (K-12)` = ( SELECT MAX(`FRPM Count (K-12)`) FROM frpm ) );"}, {"question_id": 9, "answer_sql": "SELECT COUNT(*) FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds WHERE s.Charter = 1 AND ss.AvgScrMath > 560;"}, {"question_id": 10, "answer_sql": "SELECT s.CDSCode, s.SchoolName, f.FRPMCount FROM schools s JOIN ( SELECT cds, AVG(AvgScrRead) AS AvgRead FROM satscores GROUP BY cds ORDER BY AvgRead DESC LIMIT 1 ) AS sat_avg ON s.CDSCode = sat_avg.cds JOIN frpm f ON s.CDSCode = f.CDSCode WHERE f.`Low Grade` <= 5 AND f.`High Grade` >= 17;"}, {"question_id": 11, "answer_sql": "SELECT DISTINCT s.CDSCode FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE (f.`Enrollment (K-12)` + f.`Enrollment (Ages 5-17)`) > 500;"}, {"question_id": 12, "answer_sql": "SELECT MAX(`Percent (%) Eligible Free (Ages 5-17)`) AS HighestEligibleFreeRate FROM frpm WHERE `Percent (%) Eligible Free (Ages 5-17)` IS NOT NULL AND `Percent (%) Eligible Free (Ages 5-17)` > 0 AND `Percent (%) Eligible Free (Ages 5-17)` > 0.3;"}, {"question_id": 13, "answer_sql": "SELECT s.Phone FROM schools s JOIN ( SELECT cds, NumGE1500, NumTstTakr, ROW_NUMBER() OVER (ORDER BY (NumGE1500 / NumTstTakr) DESC) AS rank FROM satscores ) sub ON s.CDSCode = sub.cds WHERE sub.rank <= 3"}, {"question_id": 14, "answer_sql": "SELECT schools.CDSCode, schools.SchoolName, schools.NCESDist, schools.NCESSchool, schools.StatusType, schools.County, schools.District, schools.School FROM schools WHERE schools.CDSCode IN ( SELECT schools.CDSCode FROM schools ORDER BY schools.`Enrollment (Ages 5-17)` DESC LIMIT 5 )"}, {"question_id": 15, "answer_sql": "SELECT s.District, AVG(ss.AvgScrRead) AS AvgReadingScore FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds WHERE s.StatusType = 'Active' GROUP BY s.District ORDER BY AvgReadingScore DESC LIMIT 1;"}, {"question_id": 16, "answer_sql": "SELECT COUNT(*) FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds WHERE s.County = 'Alameda' AND ss.NumTstTakr < 100;"}, {"question_id": 17, "answer_sql": "SELECT s.CharterNum FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds WHERE ss.AvgScrWrite = 499;"}, {"question_id": 18, "answer_sql": "SELECT COUNT(*) FROM schools s JOIN schools_admins sa ON s.CDSCode = sa.CDSCode WHERE s.County = 'Contra Costa' AND s.FundingType = 'directly funded' AND (SELECT COUNT(*) FROM satscores WHERE cds = s.CDSCode) <= 250;"}, {"question_id": 19, "answer_sql": "SELECT s.Phone FROM schools s JOIN ( SELECT cds, AVG(AvgScrMath) AS avg_math_score FROM satscores GROUP BY cds ORDER BY avg_math_score DESC LIMIT 1 ) sub ON s.CDSCode = sub.cds;"}, {"question_id": 20, "answer_sql": "SELECT COUNT(*) FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE s.County = 'Amador' AND f.LowGrade = '9' AND f.HighGrade = '12';"}, {"question_id": 21, "answer_sql": "SELECT COUNT(*) FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE s.County = 'Los Angeles' AND f.`Free Meal Count (K-12)` > 500 AND f.`Free Meal Count (K-12)` < 700;"}, {"question_id": 22, "answer_sql": "SELECT s.SchoolName FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds WHERE s.County = 'Contra Costa' ORDER BY ss.NumTstTakr DESC LIMIT 1;"}, {"question_id": 23, "answer_sql": "SELECT s.SchoolName, s.Street FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE (f.`Enrollment (K-12)` - f.`Enrollment (Ages 5-17)`) > 30;"}, {"question_id": 24, "answer_sql": "SELECT s.SchoolName FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode JOIN satscores ss ON s.CDSCode = ss.cds WHERE f.`Percent (%) Eligible Free (K-12)` > 0.1 AND ss.NumGE1500 >= 1"}, {"question_id": 25, "answer_sql": "SELECT DISTINCT s.FundingType FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds WHERE s.County = 'Riverside' AND ss.AvgScrMath > 400;"}, {"question_id": 26, "answer_sql": "SELECT schools.School, schools.Street, schools.City, schools.State, schools.Zip FROM schools JOIN schools_admins ON schools.CDSCode = schools_admins.CDSCode WHERE schools.County = 'Monterey' AND schools.SchoolType = 'High School' AND ( SELECT COUNT(*) FROM frpm WHERE frpm.`Low Grade` = '15' AND frpm.`High Grade` = '17' AND frpm.`Free Meal Count (Ages 5-17)` > 800 AND frpm.CDSCode = schools.CDSCode ) > 0;"}, {"question_id": 27, "answer_sql": "SELECT s.School, ss.AvgScrWrite, s.Phone FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds WHERE (s.OpenDate > '1991-12-31' OR s.ClosedDate < '2000-01-01') ORDER BY ss.AvgScrWrite DESC;"}, {"question_id": 28, "answer_sql": "SELECT s.SchoolName, s.DOCType FROM schools s JOIN ( SELECT CDSCode, (Enrollment (K-12) - Enrollment (Ages 5-17)) AS diff FROM frpm WHERE FundingType = 'Locally Funded' ) f ON s.CDSCode = f.CDSCode WHERE f.diff > ( SELECT AVG(diff) FROM ( SELECT CDSCode, (Enrollment (K-12) - Enrollment (Ages 5-17)) AS diff FROM frpm WHERE FundingType = 'Locally Funded' ) AS subquery )"}, {"question_id": 29, "answer_sql": "SELECT MAX(OpenDate) AS FirstOpenDate FROM schools WHERE `Enrollment (K-12)` IS NOT NULL ORDER BY `Enrollment (K-12)` DESC LIMIT 1;"}, {"question_id": 30, "answer_sql": "SELECT County, MIN(Enrollment_K_12) AS Min_Enrollment FROM schools WHERE Enrollment_K_12 IS NOT NULL GROUP BY County ORDER BY Min_Enrollment LIMIT 5;"}, {"question_id": 31, "answer_sql": "SELECT frpm.`Percent (%) Eligible Free (K-12)` AS eligible_free_rate FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.Grade <= 12 AND schools.Grade >= 10 ORDER BY frpm.`Enrollment (K-12)` DESC LIMIT 2;"}, {"question_id": 32, "answer_sql": "SELECT frpm.CDSCode, (frpm.FRPM_Count_K_12 / frpm.Enrollment_K_12) AS Eligible_Free_Reduced_Price_Meal_Rate FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.Ownership_Code = 66 ORDER BY frpm.FRPM_Count_K_12 DESC LIMIT 5;"}, {"question_id": 33, "answer_sql": "SELECT schools.School, schools.Website FROM schools JOIN schools_admins ON schools.CDSCode = schools_admins.CDSCode WHERE schools.CDSCode IN ( SELECT DISTINCT schools.CDSCode FROM schools JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE frpm.`Free Meal Count (Ages 5-17)` BETWEEN 1900 AND 2000 )"}, {"question_id": 34, "answer_sql": "SELECT (frpm.`Free Meal Count (Ages 5-17)`) / (frpm.`Enrollment (Ages 5-17)`) AS FreeRate FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.School = 'Kacey Gibson';"}, {"question_id": 35, "answer_sql": "SELECT AdmEmail1 FROM schools_admins WHERE CDSCode IN ( SELECT CDSCode FROM frpm WHERE `Charter School (Y/N)` = 1 ) ORDER BY `Enrollment (K-12)` LIMIT 1;"}, {"question_id": 36, "answer_sql": "SELECT s.CDSCode, sa.AdmFName1 || ' ' || sa.AdmLName1 AS Administrator FROM schools s JOIN schools_admins sa ON s.CDSCode = sa.CDSCode JOIN satscores ss ON s.CDSCode = ss.cds WHERE ss.NumGE1500 = (SELECT MAX(NumGE1500) FROM satscores)"}, {"question_id": 37, "answer_sql": "SELECT s.Street, s.City, s.State, s.Zip FROM schools s JOIN ( SELECT CDSCode, MIN(NumGE1500 / NumTstTakr) AS ExcellenceRate FROM satscores GROUP BY CDSCode ) e ON s.CDSCode = e.CDSCode WHERE e.ExcellenceRate = ( SELECT MIN(NumGE1500 / NumTstTakr) FROM satscores )"}, {"question_id": 38, "answer_sql": "SELECT s.Website FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds WHERE s.County = 'Los Angeles' AND ss.enroll12 BETWEEN 2000 AND 3000;"}, {"question_id": 39, "answer_sql": "SELECT AVG(NumTstTakr) FROM satscores WHERE cds IN ( SELECT CDSCode FROM schools WHERE OpenDate BETWEEN '1980-01-01' AND '1980-12-31' ) AND cds IN ( SELECT CDSCode FROM frpm WHERE `School Type` = 'Fresno' );"}, {"question_id": 40, "answer_sql": "SELECT s.CDSCode, AVG(ss.AvgScrRead) AS avg_read FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds WHERE s.District = 'Fresno Unified' GROUP BY s.CDSCode ORDER BY avg_read ASC LIMIT 1 ), school_with_lowest_avg AS ( SELECT s.CDSCode, s.Phone FROM schools s JOIN avg_scores AS avg ON s.CDSCode = avg.CDSCode ) SELECT school_with_lowest_avg.Phone FROM school_with_lowest_avg;"}, {"question_id": 41, "answer_sql": "SELECT s.CDSCode, s.SchoolName, AVG(ss.AvgScrRead) AS AvgReadingScore FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds WHERE s.Virtual = 'F' GROUP BY s.CDSCode, s.SchoolName ORDER BY AvgReadingScore DESC LIMIT 5;"}, {"question_id": 42, "answer_sql": "SELECT s.`School Type` FROM schools s JOIN ( SELECT cds, AVG(AvgScrMath) AS avg_math FROM satscores GROUP BY cds ORDER BY avg_math DESC LIMIT 1 ) sub ON s.CDSCode = sub.cds;"}, {"question_id": 43, "answer_sql": "SELECT s.CDSCode, AVG(ss.AvgScrMath + ss.AvgScrRead + ss.AvgScrWrite) AS avg_score FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds GROUP BY s.CDSCode ), lowest_avg AS ( SELECT CDSCode, AVG(avg_score) AS lowest_avg FROM avg_scores GROUP BY CDSCode ORDER BY lowest_avg ASC LIMIT 1 ) SELECT s.CDSCode, s.County, ss.AvgScrMath AS avg_math_score FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds JOIN lowest_avg la ON s.CDSCode = la.CDSCode WHERE s.CDSCode = la.CDSCode;"}, {"question_id": 44, "answer_sql": "SELECT AVG(AvgScrWrite) AS avg_writing_score, schools.City FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE NumGE1500 >= 1 GROUP BY schools.City ORDER BY COUNT(*) DESC LIMIT 1;"}, {"question_id": 45, "answer_sql": "SELECT s.School, AVG(ss.AvgScrWrite) AS Avg_Writing_Score FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds WHERE s.School LIKE '%Ricci Ulrich%' GROUP BY s.School;"}, {"question_id": 46, "answer_sql": "SELECT schools.State, schools.School, SUM(frpm.Enrollment (K-12)) AS TotalEnrollment FROM schools JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE schools.DOC = '31' AND frpm.`Low Grade` = 'K' AND frpm.`High Grade` = '12' GROUP BY schools.State, schools.School ORDER BY TotalEnrollment DESC;"}, {"question_id": 47, "answer_sql": "SELECT CAST(COUNT(*) AS REAL) / 12 AS Monthly_Average FROM schools WHERE DOC = '52' AND OpenDate BETWEEN '1980-01-01' AND '1980-12-31';"}, {"question_id": 48, "answer_sql": "SELECT (COUNT(*) OVER (PARTITION BY CASE WHEN schools.DOC = '54' THEN 'Unified School District' ELSE 'Elementary School District' END) AS numerator, COUNT(*) OVER (PARTITION BY CASE WHEN schools.DOC = '52' THEN 'Elementary School District' ELSE 'Unified School District' END) AS denominator) FROM schools WHERE schools.County = 'Orange'"}, {"question_id": 49, "answer_sql": "SELECT s.County, s.School, s.ClosedDate FROM schools s WHERE s.StatusType = 'Closed' GROUP BY s.County, s.School, s.ClosedDate ORDER BY COUNT(*) DESC LIMIT 1;"}, {"question_id": 50, "answer_sql": "SELECT s.Street, s.School FROM schools s JOIN ( SELECT schools.CDSCode, AVG(AvgScrMath) AS Math_avg FROM satscores JOIN schools ON satscores.cds = schools.CDSCode GROUP BY schools.CDSCode ORDER BY Math_avg DESC LIMIT 6 ) AS subquery ON s.CDSCode = subquery.CDSCode ORDER BY Math_avg DESC LIMIT 1;"}, {"question_id": 51, "answer_sql": "SELECT s.Street, s.School FROM schools s JOIN ( SELECT CDSCode, AVG(AvgScrRead) AS AvgRead FROM satscores GROUP BY cds ORDER BY AvgRead ASC LIMIT 1 ) AS subquery ON s.CDSCode = subquery.CDSCode;"}, {"question_id": 52, "answer_sql": "SELECT COUNT(*) FROM satscores s JOIN schools sc ON s.cds = sc.CDSCode WHERE (s.AvgScrRead + s.AvgScrMath + s.AvgScrWrite) >= 1500 AND sc.City = 'Lakeport';"}, {"question_id": 53, "answer_sql": "SELECT SUM(NumTstTakr) FROM satscores WHERE cds IN (SELECT CDSCode FROM schools WHERE City = 'Fresno');"}, {"question_id": 54, "answer_sql": "SELECT schools.CDSCode, schools.Zip FROM schools JOIN schools_admins ON schools.CDSCode = schools_admins.CDSCode WHERE schools_admins.AdmFName1 = 'Avetik Atoian';"}, {"question_id": 55, "answer_sql": "SELECT (SELECT COUNT(*) FROM schools WHERE State = 'California' AND County = 'Colusa') / (SELECT COUNT(*) FROM schools WHERE State = 'California' AND County = 'Humboldt') AS ratio;"}, {"question_id": 56, "answer_sql": "SELECT COUNT(*) FROM schools WHERE State = 'California' AND StatusType = 'Active' AND County = 'San Joaquin';"}, {"question_id": 57, "answer_sql": "SELECT s.Phone, s.Ext FROM schools s JOIN ( SELECT CDSCode, AVG(AvgScrWrite) AS AvgWrite FROM satscores GROUP BY cds ORDER BY AvgWrite DESC LIMIT 1 OFFSET 332 ) AS subquery ON s.CDSCode = subquery.CDSCode;"}, {"question_id": 58, "answer_sql": "SELECT schools.Phone, schools.Ext, schools.School FROM schools WHERE schools.Zip = '95203-3704';"}, {"question_id": 59, "answer_sql": "SELECT s.Website FROM schools s JOIN schools_admins sa ON s.CDSCode = sa.CDSCode WHERE (sa.AdmFName1 = 'Mike Larson' OR sa.AdmFName1 = 'Dante Alvarez') OR (sa.AdmLName1 = 'Mike Larson' OR sa.AdmLName1 = 'Dante Alvarez');"}, {"question_id": 60, "answer_sql": "SELECT Website FROM schools WHERE Charter = 1 AND Virtual = 'P' AND County = 'San Joaquin';"}, {"question_id": 61, "answer_sql": "SELECT COUNT(*) FROM schools WHERE Charter = 1 AND County = 'Hickman' AND DOC = '52';"}, {"question_id": 62, "answer_sql": "SELECT COUNT(*) FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE s.Charter = 0 AND s.County = 'Los Angeles' AND (f.`Percent (%) Eligible Free (K-12)` * 100 / f.`Enrollment (K-12)`) < 0.18;"}, {"question_id": 63, "answer_sql": "SELECT s.School, s.City, sa.AdmFName1, sa.AdmLName1, sa.AdmFName2, sa.AdmLName2, sa.AdmFName3, sa.AdmLName3 FROM schools s JOIN schools_admins sa ON s.CDSCode = sa.CDSCode WHERE s.Charter = 1 AND s.CharterNum = '00D2';"}, {"question_id": 64, "answer_sql": "SELECT COUNT(*) FROM schools s JOIN schools_admins sa ON s.CDSCode = sa.CDSCode WHERE s.County = 'Hickman' AND s.CharterNum = '00D4';"}, {"question_id": 65, "answer_sql": "SELECT (COUNT(CASE WHEN s.FundingType = 'Locally Funded' THEN 1 END) * 100) / COUNT(DISTINCT s.CDSCode) FROM schools s WHERE s.County = 'Santa Clara'"}, {"question_id": 66, "answer_sql": "SELECT COUNT(*) FROM schools WHERE StatusType = 'Open' AND County = 'Stanislaus' AND FundingType = 'Directly Funded' AND OpenDate BETWEEN '2000-01-01' AND '2005-12-31';"}, {"question_id": 67, "answer_sql": "SELECT COUNT(*) FROM schools WHERE County = 'San Francisco' AND Year = 1989 AND StatusType = 'Closure';"}, {"question_id": 68, "answer_sql": "SELECT County, COUNT(*) as ClosureCount FROM schools WHERE SOC = '11' AND LastUpdate BETWEEN '1980-01-01' AND '1989-12-31' GROUP BY County ORDER BY ClosureCount DESC LIMIT 1;"}, {"question_id": 69, "answer_sql": "SELECT schools.CDSCode AS NCESDist FROM schools JOIN schools_admins ON schools.CDSCode = schools_admins.CDSCode WHERE schools.SOC = '31';"}, {"question_id": 70, "answer_sql": "SELECT COUNT(*) FROM schools WHERE County = 'Alpine' AND (StatusType = 'Active' OR StatusType = 'Closed');"}, {"question_id": 71, "answer_sql": "SELECT DistrictCode FROM schools WHERE Magnet = 0 AND City = 'Fresno';"}, {"question_id": 72, "answer_sql": "SELECT SUM(Enrollment (Ages 5-17)) FROM frpm WHERE Academic Year = '2014-2015' AND `School Name` = 'State Special School' AND `District Code` = (SELECT `District Code` FROM schools WHERE `School Name` = 'State Special School')"}, {"question_id": 73, "answer_sql": "SELECT `Free Meal Count (Ages 5-17)` FROM frpm WHERE `School Name` = 'Youth Authority' AND `Mail Street` = 'PO Box 1040';"}, {"question_id": 74, "answer_sql": "SELECT MIN(`Low Grade`) AS lowest_grade FROM frpm WHERE `District Code` IN ( SELECT `District Code` FROM schools WHERE `NCESDist` = '613360' AND `EdOpsCode` = 'SPECON' ) AND `Low Grade` IS NOT NULL;"}, {"question_id": 75, "answer_sql": "SELECT s.SchoolName FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE f.`NSLP Provision Status` = 'Breakfast Provision 2' AND s.County = '37';"}, {"question_id": 76, "answer_sql": "SELECT s.City FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE s.EILCode = 'HS' AND f.LowGrade = '9' AND f.HighGrade = '12' AND s.County = 'Merced';"}, {"question_id": 77, "answer_sql": "SELECT s.SchoolName, CAST((frpm.`Free Meal Count (Ages 5-17)` / frpm.`Enrollment (Ages 5-17)` * 100) AS REAL) AS `Percent (%) Eligible FRPM (Ages 5-17)` FROM schools s JOIN frpm ON s.CDSCode = frpm.CDSCode WHERE s.County = 'Los Angeles' AND frpm.`Low Grade` = 'K' AND frpm.`High Grade` = '9';"}, {"question_id": 78, "answer_sql": "SELECT `Low Grade`, `High Grade` FROM frpm WHERE `County Name` = 'Adelanto' GROUP BY `Low Grade`, `High Grade` ORDER BY COUNT(*) DESC LIMIT 1;"}, {"question_id": 79, "answer_sql": "SELECT County, COUNT(*) AS NumberOfSchools FROM schools WHERE County IN ('San Diego', 'Santa Barbara') AND Virtual = 'F' GROUP BY County ORDER BY NumberOfSchools DESC LIMIT 1;"}, {"question_id": 80, "answer_sql": "SELECT s.SchoolType, s.School, s.Latitude FROM schools s WHERE s.Latitude = (SELECT MAX(Latitude) FROM schools);"}, {"question_id": 81, "answer_sql": "SELECT s.School, s.Latitude, s.LowGrade FROM schools s JOIN ( SELECT County, MIN(Latitude) AS MinLat FROM schools WHERE State = 'CA' GROUP BY County ) AS min_lat ON s.County = min_lat.County AND s.Latitude = min_lat.MinLat ORDER BY s.Latitude ASC LIMIT 1;"}, {"question_id": 82, "answer_sql": "SELECT `Low Grade`, `High Grade` FROM schools WHERE Longitude = (SELECT MAX(Longitude) FROM schools);"}, {"question_id": 83, "answer_sql": "SELECT COUNT(DISTINCT s.City) AS NumberOfCities, s.City, COUNT(DISTINCT s.CDSCode) AS NumberOfSchools FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE s.Magnet = 1 AND s.`Low Grade` = 'K' AND s.`High Grade` = '8' GROUP BY s.City;"}, {"question_id": 84, "answer_sql": "SELECT s.CDSCode AS District, ss.AdmFName1 AS FirstName FROM schools_admins ss JOIN schools s ON ss.CDSCode = s.CDSCode GROUP BY s.CDSCode, ss.AdmFName1 ORDER BY COUNT(*) DESC LIMIT 2;"}, {"question_id": 85, "answer_sql": "SELECT s.DistrictCode, f.`Percent (%) Eligible Free (K-12)` FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE s.AdmFName1 = 'Alusine';"}, {"question_id": 86, "answer_sql": "SELECT s.District, s.County, s.School, sa.AdmFName1 || ' ' || sa.AdmLName1 AS AdministratorLastName FROM schools s JOIN schools_admins sa ON s.CDSCode = sa.CDSCode WHERE s.CharterNum = '40';"}, {"question_id": 87, "answer_sql": "SELECT AdmEmail1 FROM schools_admins WHERE CDSCode IN (SELECT CDSCode FROM schools WHERE County = 'San Bernardino' AND District = 'San Bernardino City Unified' AND (OpenDate BETWEEN '2009-01-01' AND '2010-12-31') AND (SOC = '62' OR DOC = '54'));"}, {"question_id": 88, "answer_sql": "SELECT s.CDSCode, s.SchoolName, COUNT(ss.NumTstTakr) AS total_test_takers FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds WHERE ss.NumGE1500 > 0 GROUP BY s.CDSCode, s.SchoolName ORDER BY total_test_takers DESC LIMIT 1 ), admins AS ( SELECT s.CDSCode, s.SchoolName, sa.AdmEmail1 FROM schools s JOIN schools_admins sa ON s.CDSCode = sa.CDSCode WHERE sa.SchoolCode = (SELECT SchoolCode FROM sat_scores) ) SELECT a.AdmEmail1, a.SchoolName FROM admins a JOIN sat_scores s ON a.CDSCode = s.CDSCode;"}, {"question_id": 89, "answer_sql": "SELECT COUNT(*) FROM account a JOIN client c ON a.district_id = c.district_id JOIN district d ON a.district_id = d.district_id WHERE d.A3 = 'POPLATEK PO OBRATU' AND a.date > (SELECT date FROM trans WHERE account_id = a.account_id ORDER BY date DESC LIMIT 1)"}, {"question_id": 90, "answer_sql": "SELECT COUNT(*) FROM account a JOIN district d ON a.district_id = d.district_id WHERE d.A3 LIKE '%Prague%' AND EXISTS ( SELECT 1 FROM loan l WHERE l.account_id = a.account_id );"}, {"question_id": 91, "answer_sql": "SELECT AVG(A12) - AVG(A13) FROM district;"}, {"question_id": 92, "answer_sql": "SELECT COUNT(*) FROM district d JOIN ( SELECT district_id, AVG(A11) as avg_salary FROM district WHERE gender = 'F' GROUP BY district_id ) sub ON d.district_id = sub.district_id WHERE sub.avg_salary BETWEEN 6000 AND 10000;"}, {"question_id": 93, "answer_sql": "SELECT COUNT(*) FROM client c JOIN district d ON c.district_id = d.district_id WHERE c.gender = 'M' AND d.A3 = 'North Bohemia' AND d.A11 > 8000;"}, {"question_id": 94, "answer_sql": "SELECT client_id, AVG(A11) AS avg_salary FROM client WHERE gender = 'F' GROUP BY client_id ), oldest_female_client AS ( SELECT client_id, AVG(A11) AS avg_salary FROM client WHERE gender = 'F' ORDER BY birth_date DESC LIMIT 1 ), highest_avg_salary AS ( SELECT MAX(avg_salary) AS max_avg_salary FROM female_clients ), lowest_avg_salary AS ( SELECT MIN(avg_salary) AS min_avg_salary FROM female_clients ) SELECT (SELECT max_avg_salary FROM highest_avg_salary) - (SELECT min_avg_salary FROM lowest_avg_salary) AS salary_gap;"}, {"question_id": 95, "answer_sql": "SELECT account_id FROM client c JOIN ( SELECT district_id, MIN(birth_date) AS min_birthdate, AVG(A11) AS avg_salary FROM client GROUP BY district_id ) t1 ON c.district_id = t1.district_id AND c.birth_date = t1.min_birthdate ORDER BY t1.avg_salary DESC LIMIT 1;"}, {"question_id": 96, "answer_sql": "SELECT COUNT(*) FROM client c JOIN account a ON c.client_id = a.client_id WHERE a.frequency = 'POPLATEK TYDNE' AND c.gender = 'Owner';"}, {"question_id": 97, "answer_sql": "SELECT client.client_id, client.gender, client.birth_date, client.district_id FROM client JOIN disp ON client.client_id = disp.client_id JOIN account ON disp.account_id = account.account_id WHERE disp.type = 'Disponent' AND trans.type = 'POPLATEK PO OBRATU';"}, {"question_id": 98, "answer_sql": "SELECT account_id, MIN(amount) AS min_approved_amount FROM account JOIN loan ON account.account_id = loan.account_id WHERE loan.date LIKE '%1997%' GROUP BY account_id ORDER BY min_approved_amount ASC LIMIT 1;"}, {"question_id": 99, "answer_sql": "SELECT account_id, MAX(amount) as max_approved_amount FROM account JOIN loan ON account.account_id = loan.account_id WHERE loan.duration > 12 AND account.date < '1993-01-01' GROUP BY account_id ORDER BY max_approved_amount DESC;"}, {"question_id": 100, "answer_sql": "SELECT COUNT(*) FROM client c JOIN account a ON c.client_id = a.district_id JOIN district d ON a.district_id = d.district_id WHERE c.gender = 'F' AND c.birth_date < '1950-01-01' AND d.A2 = 'Slokolov';"}, {"question_id": 101, "answer_sql": "SELECT account_id FROM account WHERE date = '1995-01-01' ORDER BY date LIMIT 1;"}, {"question_id": 102, "answer_sql": "SELECT DISTINCT account_id FROM account WHERE date < '1997-01-01' AND amount > 3000;"}, {"question_id": 103, "answer_sql": "SELECT client_id FROM client WHERE birth_date = '1994-03-03';"}, {"question_id": 104, "answer_sql": "SELECT date FROM account WHERE account_id = (SELECT account_id FROM trans WHERE trans_id = 1 AND amount = 840 AND date = '1998-10-14')"}, {"question_id": 105, "answer_sql": "SELECT DISTRICT_ID FROM account WHERE date = '1994-08-25' AND EXISTS (SELECT 1 FROM loan WHERE account_id = account.account_id AND date = '1994-08-25');"}, {"question_id": 106, "answer_sql": "SELECT MAX(t.amount) FROM trans t JOIN client c ON t.account_id = c.client_id JOIN card cr ON c.client_id = cr.client_id WHERE cr.issued = '1996-10-21'"}, {"question_id": 107, "answer_sql": "SELECT client.gender FROM client JOIN district ON client.district_id = district.district_id JOIN account ON client.district_id = account.district_id WHERE district.A11 = (SELECT MAX(A11) FROM district) ORDER BY client.birth_date ASC LIMIT 1;"}, {"question_id": 108, "answer_sql": "SELECT min(t.amount) FROM trans t JOIN account a ON t.account_id = a.account_id JOIN client c ON a.client_id = c.client_id WHERE a.account_id = (SELECT account_id FROM loan WHERE status = 'approved' ORDER BY amount DESC LIMIT 1) AND t.date > (SELECT date FROM account WHERE account_id = (SELECT account_id FROM loan WHERE status = 'approved' ORDER BY amount DESC LIMIT 1))"}, {"question_id": 109, "answer_sql": "SELECT COUNT(*) FROM client c JOIN account a ON c.client_id = a.client_id JOIN disp d ON a.account_id = d.account_id WHERE d.A2 LIKE '%Jesenik%' AND c.gender = 'F';"}, {"question_id": 110, "answer_sql": "SELECT DISTINCT d.disp_id FROM disp d JOIN client c ON d.client_id = c.client_id JOIN account a ON d.account_id = a.account_id JOIN trans t ON a.account_id = t.account_id WHERE t.amount = 5100 AND t.date = '1998-09-02';"}, {"question_id": 111, "answer_sql": "SELECT COUNT(*) FROM account WHERE district_id IN ( SELECT district_id FROM district WHERE A2 = 'Litomerice' ) AND date BETWEEN '1996-01-01' AND '1996-12-31';"}, {"question_id": 112, "answer_sql": "SELECT DISTRICT.A2 FROM CLIENT, DISTRICT WHERE CLIENT.gender = 'F' AND CLIENT.birth_date = '1976-01-29' AND CLIENT.district_id = DISTRICT.district_id;"}, {"question_id": 113, "answer_sql": "SELECT client.birth_date FROM client JOIN loan ON client.client_id = loan.client_id WHERE loan.amount = 98832 AND loan.date = '1996-01-03';"}, {"question_id": 114, "answer_sql": "SELECT account_id FROM account JOIN client ON account.district_id = client.district_id WHERE client.A3 = 'Prague' ORDER BY account_id LIMIT 1;"}, {"question_id": 115, "answer_sql": "SELECT DIVIDE(COUNT(CASE WHEN client.gender = 'M' THEN client.client_id ELSE NULL END), COUNT(client.client_id)) * 100 AS percentage_male_clients FROM client JOIN district ON client.district_id = district.district_id WHERE district.A3 LIKE '%south Bohemia%' AND district.A4 IS NOT NULL"}, {"question_id": 116, "answer_sql": "SELECT balance FROM trans WHERE account_id = ( SELECT account_id FROM client WHERE birth_date = '1993-07-05' ) AND date = '1993-03-22' ), final_balance AS ( SELECT balance FROM trans WHERE account_id = ( SELECT account_id FROM client WHERE birth_date = '1993-07-05' ) AND date = '1998-12-27' ) SELECT ( (final_balance.balance - initial_balance.balance) / final_balance.balance * 100 ) AS increase_rate;"}, {"question_id": 117, "answer_sql": "SELECT (SUM(CASE WHEN loan.status = 'A' THEN loan.amount ELSE 0 END) / SUM(loan.amount)) * 100 AS percentage_paid FROM loan;"}, {"question_id": 118, "answer_sql": "SELECT (SUM(CASE WHEN l.status = 'C' AND l.amount < 100000 THEN 1 ELSE 0 END) * 100.0) / COUNT(*) FROM account a LEFT JOIN loan l ON a.account_id = l.account_id WHERE l.amount < 100000;"}, {"question_id": 119, "answer_sql": "SELECT a.account_id, d.A2 AS district_name, d.A3 AS district_region FROM account a JOIN district d ON a.district_id = d.district_id JOIN trans t ON a.account_id = t.account_id WHERE a.date = '1993-01-01' AND t.date < a.date AND t.operation = 'POPLATEK PO OBRATU'"}, {"question_id": 120, "answer_sql": "SELECT a.account_id, frequency FROM account a JOIN client c ON a.district_id = c.district_id JOIN district d ON a.district_id = d.district_id WHERE c.gender = 'east Bohemia' AND a.date BETWEEN '1995-01-01' AND '2000-12-31' GROUP BY a.account_id, frequency;"}, {"question_id": 121, "answer_sql": "SELECT account.account_id, account.date FROM account JOIN district ON account.district_id = district.district_id WHERE district.A2 = 'Prachatice';"}, {"question_id": 122, "answer_sql": "SELECT d.A2 AS district, d.A3 AS region FROM district d JOIN account a ON a.district_id = d.district_id WHERE a.account_id IN (SELECT account_id FROM loan WHERE loan_id = 4990);"}, {"question_id": 123, "answer_sql": "SELECT account.account_id, district.A2, district.A3 FROM account JOIN loan ON account.account_id = loan.account_id JOIN district ON account.district_id = district.district_id WHERE loan.amount > 300000;"}, {"question_id": 124, "answer_sql": "SELECT l.loan_id, d.A3, d.A11 FROM loan l JOIN account a ON l.account_id = a.account_id JOIN district d ON a.district_id = d.district_id WHERE l.duration = 60;"}, {"question_id": 125, "answer_sql": "SELECT d.A2, d.A3, d.A4, d.A5, d.A6, d.A7, d.A8, d.A9, d.A10, d.A11, d.A12, d.A13, (d.A13 - d.A12) / d.A12 * 100 AS Unemployment_Increment_Rate FROM district d JOIN loan l ON d.district_id = l.district_id JOIN account a ON l.account_id = a.account_id WHERE l.status = 'D' AND a.date BETWEEN '1995-01-01' AND '1996-12-31';"}, {"question_id": 126, "answer_sql": "SELECT (COUNT(*) * 100.0) / (SELECT COUNT(*) FROM account) AS percentage FROM account WHERE date = '1993-01-01' AND district_id IN ( SELECT district_id FROM district WHERE A2 LIKE '%Decin%' );"}, {"question_id": 127, "answer_sql": "SELECT account_id FROM account WHERE date IN (SELECT date FROM trans WHERE type = 'POPLATEK MESICNE') GROUP BY account_id;"}, {"question_id": 128, "answer_sql": "SELECT district_id, COUNT(*) as female_account_holders FROM client WHERE gender = 'F' GROUP BY district_id ORDER BY female_account_holders DESC LIMIT 10;"}, {"question_id": 129, "answer_sql": "SELECT DISTINCT d.A2, SUM(t.amount) AS total_withdrawal FROM trans t JOIN account a ON t.account_id = a.account_id JOIN district d ON a.district_id = d.district_id WHERE t.type = 'VYDAJ' AND t.date LIKE '1996-01%' GROUP BY d.A2 ORDER BY total_withdrawal DESC LIMIT 10;"}, {"question_id": 130, "answer_sql": "SELECT COUNT(DISTINCT c.client_id) FROM client c JOIN account a ON c.client_id = a.client_id LEFT JOIN card k ON a.account_id = k.disp_id WHERE c.district_id IN ( SELECT district_id FROM district WHERE A3 LIKE '%South Bohemia%' ) AND k.card_id IS NULL;"}, {"question_id": 131, "answer_sql": "SELECT DISTRICT.A3, COUNT(*) as active_loans FROM loan JOIN account ON loan.account_id = account.account_id JOIN district ON account.district_id = district.district_id WHERE loan.status IN ('C', 'D') GROUP BY district.A3 ORDER BY active_loans DESC LIMIT 1;"}, {"question_id": 132, "answer_sql": "SELECT AVG(l.amount) FROM loan l JOIN client c ON l.account_id = c.account_id WHERE c.gender = 'M';"}, {"question_id": 133, "answer_sql": "SELECT d.A2 AS district_name, d.A13 AS unemployment_rate FROM district d WHERE d.A13 IS NOT NULL ORDER BY d.A13 DESC LIMIT 10;"}, {"question_id": 134, "answer_sql": "SELECT COUNT(account_id) FROM account WHERE district_id IN ( SELECT district_id FROM district WHERE A16 = ( SELECT MAX(A16) FROM district ) );"}, {"question_id": 135, "answer_sql": "SELECT COUNT(*) FROM trans t JOIN account a ON t.account_id = a.account_id WHERE t.operation = 'VYBER KARTOU' AND a.frequency = 'POPLATEK MESICNE' AND t.amount < 0;"}, {"question_id": 136, "answer_sql": "SELECT COUNT(*) FROM loan JOIN account ON loan.account_id = account.account_id JOIN disp ON account.account_id = disp.account_id JOIN client ON disp.client_id = client.client_id WHERE loan.amount >= 250000 AND account.frequency = 'POPLATEK MESICNE' AND loan.date BETWEEN '1995-01-01' AND '1997-12-31';"}, {"question_id": 137, "answer_sql": "SELECT COUNT(*) FROM account a JOIN disp d ON a.account_id = d.account_id JOIN client c ON d.client_id = c.client_id WHERE d.type = 'Branch' AND c.gender = 'Male' AND a.date >= '2022-01-01' AND a.date <= '2022-12-31' AND (a.frequency = 'Monthly' OR a.frequency = 'Quarterly') AND (a.status = 'C' OR a.status = 'D');"}, {"question_id": 138, "answer_sql": "SELECT COUNT(*) FROM client c JOIN district d ON c.district_id = d.district_id WHERE c.gender = 'M' AND d.A15 = (SELECT MAX(A15) FROM district);"}, {"question_id": 139, "answer_sql": "SELECT COUNT(*) FROM card JOIN disp ON card.card_id = disp.card_id WHERE card.type = 'gold' AND disp.type = 'disponent';"}, {"question_id": 140, "answer_sql": "SELECT COUNT(*) FROM account WHERE district_id IN (SELECT district_id FROM district WHERE A2 = 'Pisek');"}, {"question_id": 141, "answer_sql": "SELECT DISTINCT d.A2, d.A3, d.A4, d.A5, d.A6, d.A7, d.A8, d.A9, d.A10, d.A11, d.A12, d.A13, d.A14, d.A15, d.A16 FROM district d JOIN trans t ON d.district_id = t.account_id WHERE t.date = '1997-01-01' AND t.amount > 10000;"}, {"question_id": 142, "answer_sql": "SELECT DISTINCT a.account_id FROM account a JOIN order o ON a.account_id = o.account_id JOIN trans t ON a.account_id = t.account_id WHERE o.k_symbol = 'SIPO' AND t.bank = 'Pisek';"}, {"question_id": 143, "answer_sql": "SELECT DISTINCT a.account_id FROM account a JOIN card c1 ON a.account_id = c1.disp_id AND c1.type = 'junior' JOIN card c2 ON a.account_id = c2.disp_id AND c2.type = 'gold';"}, {"question_id": 144, "answer_sql": "SELECT AVG(t.amount) FROM trans t JOIN account a ON t.account_id = a.account_id JOIN card c ON a.account_id = c.disp_id WHERE t.type = 'VYBER KARTOU' AND strftime('%Y', t.date) = '2021' AND strftime('%m', t.date) BETWEEN '01' AND '12';"}, {"question_id": 145, "answer_sql": "SELECT account_id FROM trans WHERE type = 'VYBER KARTOU' AND date BETWEEN '1998-01-01' AND '1998-12-31' GROUP BY account_id HAVING SUM(amount) < (SELECT AVG(SUM(amount)) FROM trans WHERE type = 'VYBER KARTOU' AND date BETWEEN '1998-01-01' AND '1998-12-31' GROUP BY account_id)"}, {"question_id": 146, "answer_sql": "SELECT DISTINCT c.client_id, c.gender, c.birth_date, c.district_id FROM client c JOIN card cr ON c.client_id = cr.client_id JOIN account a ON c.client_id = a.district_id JOIN loan l ON a.account_id = l.account_id WHERE c.gender = 'F';"}, {"question_id": 147, "answer_sql": "SELECT COUNT(*) FROM client c JOIN district d ON c.district_id = d.district_id WHERE c.gender = 'F' AND d.A3 LIKE '%south Bohemia%';"}, {"question_id": 148, "answer_sql": "SELECT account_id FROM account JOIN district ON account.district_id = district.district_id WHERE district.A2 = 'Tabor' AND account.frequency = 'OWNER';"}, {"question_id": 149, "answer_sql": "SELECT DISTINCT a.type FROM account a JOIN district d ON a.district_id = d.district_id WHERE a.type != 'OWNER' AND d.A11 BETWEEN 8000 AND 9000;"}, {"question_id": 150, "answer_sql": "SELECT COUNT(*) FROM account a JOIN district d ON a.district_id = d.district_id JOIN trans t ON a.account_id = t.account_id WHERE d.A3 = 'North Bohemia' AND t.bank = 'AB';"}, {"question_id": 151, "answer_sql": "SELECT DISTINCT d.A2 FROM district d JOIN account a ON d.district_id = a.district_id JOIN trans t ON a.account_id = t.account_id WHERE t.type = 'VYDAJ';"}, {"question_id": 152, "answer_sql": "SELECT AVG(A15) FROM district WHERE A15 > 4000 AND A3 LIKE '%1995%';"}, {"question_id": 153, "answer_sql": "SELECT COUNT(*) FROM card c JOIN disp d ON c.card_id = d.disp_id JOIN account a ON d.account_id = a.account_id WHERE a.frequency = 'classic' AND a.type = 'OWNER';"}, {"question_id": 154, "answer_sql": "SELECT COUNT(*) FROM client c JOIN district d ON c.district_id = d.district_id WHERE d.A2 = 'Hl.m. Praha' AND c.gender = 'M';"}, {"question_id": 155, "answer_sql": "SELECT (COUNT(CASE WHEN card.type = 'Gold' AND card.issued < '1998' THEN 1 END) * 100) / COUNT(*) FROM card;"}, {"question_id": 156, "answer_sql": "SELECT client.client_id, client.gender, client.birth_date FROM client JOIN account ON client.client_id = account.client_id JOIN loan ON account.account_id = loan.account_id WHERE loan.amount = (SELECT MAX(amount) FROM loan);"}, {"question_id": 157, "answer_sql": "SELECT A15 FROM district WHERE district_id = (SELECT district_id FROM account WHERE account_id = 532);"}, {"question_id": 158, "answer_sql": "SELECT a.district_id FROM account a JOIN order o ON a.account_id = o.account_id WHERE o.order_id = 33333;"}, {"question_id": 159, "answer_sql": "SELECT * FROM trans WHERE account_id IN ( SELECT account_id FROM client WHERE client_id = 3356 ) AND type = 'CASH' AND operation = 'VYBER';"}, {"question_id": 160, "answer_sql": "SELECT COUNT(*) FROM account a JOIN loan l ON a.account_id = l.account_id WHERE a.frequency = 'POPLATEK TYDNE' AND l.amount < 200000;"}, {"question_id": 161, "answer_sql": "SELECT type FROM card WHERE card_id = (SELECT card_id FROM client WHERE client_id = 13539);"}, {"question_id": 162, "answer_sql": "SELECT A3 FROM district WHERE district_id = (SELECT district_id FROM client WHERE client_id = 3541);"}, {"question_id": 163, "answer_sql": "SELECT district_id, COUNT(*) as account_count FROM account JOIN loan ON account.account_id = loan.account_id WHERE loan.status = 'A' GROUP BY district_id ORDER BY account_count DESC LIMIT 1;"}, {"question_id": 164, "answer_sql": "SELECT client.client_id, client.gender, client.birth_date FROM client JOIN disp ON client.client_id = disp.client_id JOIN order ON disp.disp_id = order.disp_id WHERE order.order_id = 32423;"}, {"question_id": 165, "answer_sql": "SELECT t.trans_id, t.date, t.type, t.operation, t.amount, t.balance, t.k_symbol, t.bank, t.account FROM trans t JOIN account a ON t.account_id = a.account_id WHERE a.district_id = 5;"}, {"question_id": 166, "answer_sql": "SELECT COUNT(*) FROM account WHERE district_id IN (SELECT district_id FROM district WHERE A2 LIKE '%Jesenik%');"}, {"question_id": 167, "answer_sql": "SELECT DISTINCT c.client_id FROM client c JOIN disp d ON c.client_id = d.client_id JOIN card crd ON d.disp_id = crd.disp_id WHERE crd.type = 'junior' AND crd.issued >= '1997-01-01';"}, {"question_id": 168, "answer_sql": "SELECT COUNT(CASE WHEN gender = 'F' THEN 1 END) / COUNT(*) * 100 AS percentage_women FROM client WHERE district_id IN ( SELECT district_id FROM district WHERE A11 > 10000 );"}, {"question_id": 169, "answer_sql": "SELECT loan.account_id, SUM(loan.amount) AS amount_1996 FROM loan WHERE loan.date BETWEEN '1996-01-01' AND '1996-12-31' AND client.gender = 'M' GROUP BY loan.account_id ), amount_1997 AS ( SELECT loan.account_id, SUM(loan.amount) AS amount_1997 FROM loan WHERE loan.date BETWEEN '1997-01-01' AND '1997-12-31' AND client.gender = 'M' GROUP BY loan.account_id ) SELECT (SUM(amount_1997.amount_1997) - SUM(amount_1996.amount_1996)) / SUM(amount_1996.amount_1996) * 100 AS growth_rate FROM amount_1996, amount_1997;"}, {"question_id": 170, "answer_sql": "SELECT COUNT(*) FROM trans WHERE date > '1995-01-01' AND operation = 'VYBER KARTOU';"}, {"question_id": 171, "answer_sql": "SELECT (SELECT A16 FROM district WHERE A3 = 'North Bohemia') - (SELECT A16 FROM district WHERE A3 = 'East Bohemia') AS difference;"}, {"question_id": 172, "answer_sql": "SELECT COUNT(*) FROM disp WHERE account_id >= 1 AND account_id <= 10 AND (type = 'owner' OR type = 'disponent');"}, {"question_id": 173, "answer_sql": "SELECT COUNT(*) AS request_frequency, k_symbol AS debit_aim FROM trans WHERE account_id = 3 GROUP BY k_symbol;"}, {"question_id": 174, "answer_sql": "SELECT birth_date FROM client WHERE client_id = 130;"}, {"question_id": 175, "answer_sql": "SELECT COUNT(*) FROM account a JOIN disp d ON a.account_id = d.account_id WHERE d.type = 'disp_type' AND a.frequency = 'POPLATEK PO OBRATU';"}, {"question_id": 176, "answer_sql": "SELECT SUM(l.amount) AS total_debt, COUNT(l.amount) AS payment_frequency FROM loan l JOIN account a ON l.account_id = a.account_id WHERE a.client_id = 992;"}, {"question_id": 177, "answer_sql": "SELECT SUM(t.amount) AS total_amount, c.gender FROM trans t JOIN account a ON t.account_id = a.account_id JOIN client c ON a.client_id = c.client_id WHERE a.client_id = 4 AND t.trans_id = 851;"}, {"question_id": 178, "answer_sql": "SELECT type FROM card WHERE card_id = (SELECT card_id FROM client WHERE client_id = 9);"}, {"question_id": 179, "answer_sql": "SELECT SUM(t.amount) FROM trans t JOIN account a ON t.account_id = a.account_id JOIN client c ON a.district_id = c.district_id WHERE c.client_id = 617 AND strftime('%Y', t.date) = '1998';"}, {"question_id": 180, "answer_sql": "SELECT client_id FROM client WHERE birth_date BETWEEN '1983-01-01' AND '1987-12-31' AND district_id IN (SELECT district_id FROM district WHERE A2 LIKE '%East Bohemia%')"}, {"question_id": 181, "answer_sql": "SELECT client_id FROM client JOIN loan ON client.client_id = loan.client_id WHERE client.gender = 'F' ORDER BY loan.amount DESC LIMIT 3;"}, {"question_id": 182, "answer_sql": "SELECT COUNT(*) FROM client c JOIN disp d ON c.client_id = d.client_id JOIN account a ON d.account_id = a.account_id WHERE c.gender = 'M' AND c.birth_date BETWEEN '1974-01-01' AND '1976-12-31' AND a.account_id IN ( SELECT account_id FROM trans WHERE type = 'SIPO' AND amount > 4000 );"}, {"question_id": 183, "answer_sql": "SELECT COUNT(*) FROM account a JOIN district d ON a.district_id = d.district_id WHERE d.A2 LIKE '%Beroun%' AND a.date > '1996-01-01';"}, {"question_id": 184, "answer_sql": "SELECT COUNT(*) FROM client c JOIN disp d ON c.client_id = d.client_id JOIN card c1 ON d.disp_id = c1.disp_id WHERE c.gender = 'F' AND c1.type = 'junior';"}, {"question_id": 185, "answer_sql": "SELECT (COUNT(*) * 100) / SUM(CASE WHEN gender = 'F' THEN 1 ELSE 0 END) AS Proportion FROM client WHERE district_id IN ( SELECT district_id FROM district WHERE A3 LIKE '%Prague%' )"}, {"question_id": 186, "answer_sql": "SELECT (COUNT(CASE WHEN client.gender = 'M' AND disp.type = 'POPLATEK TYDNE' THEN 1 END) / COUNT(disp.type)) * 100 AS percentage FROM client LEFT JOIN disp ON client.client_id = disp.client_id WHERE disp.type = 'POPLATEK TYDNE';"}, {"question_id": 187, "answer_sql": "SELECT COUNT(*) FROM client JOIN account ON client.district_id = account.district_id WHERE account.frequency = 'POPLATEK TYDNE';"}, {"question_id": 188, "answer_sql": "SELECT account_id, MIN(amount) AS approved_amount FROM account JOIN loan ON account.account_id = loan.account_id WHERE loan.duration > 24 AND account.date < '1997-01-01' GROUP BY account_id ORDER BY approved_amount ASC LIMIT 1;"}, {"question_id": 189, "answer_sql": "SELECT account_id FROM client WHERE gender = 'F' AND A11 = (SELECT MIN(A11) FROM client WHERE gender = 'F') ORDER BY A11 LIMIT 1;"}, {"question_id": 190, "answer_sql": "SELECT COUNT(*) FROM client WHERE birth_date < '1920-01-01' AND district.A3 = 'East Bohemia';"}, {"question_id": 191, "answer_sql": "SELECT COUNT(*) FROM loan JOIN account ON loan.account_id = account.account_id WHERE loan.duration = 24 AND account.frequency = 'POPLATEK TYDNE';"}, {"question_id": 192, "answer_sql": "SELECT AVG(amount) FROM loan WHERE status IN ('C', 'D') AND loan.date = (SELECT date FROM trans WHERE trans.trans_id = loan.loan_id)"}, {"question_id": 193, "answer_sql": "SELECT client.client_id, district.A2 FROM client JOIN disp ON client.client_id = disp.client_id JOIN account ON disp.account_id = account.account_id WHERE account.account_id IN ( SELECT account_id FROM trans WHERE type = 'Permanent' UNION ALL SELECT account_id FROM loan )"}, {"question_id": 194, "answer_sql": "SELECT client.client_id, client.birth_date - 18 AS age FROM client JOIN disp ON client.client_id = disp.client_id JOIN card ON disp.disp_id = card.disp_id JOIN account ON disp.account_id = account.account_id WHERE card.type = 'gold' AND EXISTS ( SELECT 1 FROM loan WHERE loan.account_id = account.account_id );"}, {"question_id": 195, "answer_sql": "SELECT bond_type, COUNT(*) as count FROM bond GROUP BY bond_type ORDER BY count DESC LIMIT 1;"}, {"question_id": 196, "answer_sql": "SELECT COUNT(*) FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE a.element = 'cl' AND m.label = '-';"}, {"question_id": 197, "answer_sql": "SELECT AVG(CASE WHEN atom.element = 'o' THEN 1 ELSE 0 END) AS avg_oxygen_atoms FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '-';"}, {"question_id": 198, "answer_sql": "SELECT DIVIDE(SUM(CASE WHEN b.bond_type = '-' THEN 1 ELSE 0 END), COUNT(a.atom_id)) FROM molecule m LEFT JOIN atom a ON m.molecule_id = a.molecule_id LEFT JOIN bond b ON m.molecule_id = b.molecule_id WHERE m.label = '+'"}, {"question_id": 199, "answer_sql": "SELECT COUNT(*) FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE a.element = 'na' AND m.label = '-';"}, {"question_id": 200, "answer_sql": "SELECT m.molecule_id FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id JOIN connected c ON m.molecule_id = c.molecule_id WHERE b.bond_type = '#' AND m.label = '+';"}, {"question_id": 201, "answer_sql": "SELECT DIVIDE(SUM(CASE WHEN atom.element = 'c' THEN 1 ELSE 0 END), COUNT(atom.atom_id)) FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '=';"}, {"question_id": 202, "answer_sql": "SELECT COUNT(*) FROM bond WHERE bond_type = '#';"}, {"question_id": 203, "answer_sql": "SELECT COUNT(*) FROM atom WHERE element != 'br';"}, {"question_id": 204, "answer_sql": "SELECT COUNT(*) FROM molecule WHERE molecule_id BETWEEN 'TR000' AND 'TR099' AND label = '+';"}, {"question_id": 205, "answer_sql": "SELECT m.molecule_id FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.element = 'si';"}, {"question_id": 206, "answer_sql": "SELECT DISTINCT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR004_8_9';"}, {"question_id": 207, "answer_sql": "SELECT DISTINCT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '=';"}, {"question_id": 208, "answer_sql": "SELECT label, MAX(COUNT(label)) as max_count FROM atom WHERE element = 'h' GROUP BY label HAVING max_count = (SELECT MAX(max_count) FROM (SELECT label, MAX(COUNT(label)) as max_count FROM atom WHERE element = 'h' GROUP BY label) AS t)"}, {"question_id": 209, "answer_sql": "SELECT b.bond_type FROM atom a INNER JOIN connected c ON a.atom_id = c.atom_id INNER JOIN bond b ON c.bond_id = b.bond_id WHERE a.element = 'te'"}, {"question_id": 210, "answer_sql": "SELECT DISTINCT a.atom_id, a2.atom_id AS atom_id2 FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = '-'"}, {"question_id": 211, "answer_sql": "SELECT DISTINCT a.atom_id, a2.atom_id AS atom_id2 FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE a.molecule_id IN ( SELECT molecule_id FROM molecule WHERE label = '-' ) AND c.bond_id IS NOT NULL;"}, {"question_id": 212, "answer_sql": "SELECT element, COUNT(*) as count FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '-' GROUP BY element ORDER BY count ASC LIMIT 1;"}, {"question_id": 213, "answer_sql": "SELECT b.bond_type FROM `bond` b INNER JOIN `connected` c ON b.bond_id = c.bond_id WHERE c.atom_id = 'TR004_8' AND c.atom_id2 = 'TR004_20';"}, {"question_id": 214, "answer_sql": "SELECT DISTINCT m.label FROM molecule m LEFT JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.element = 'Sn' GROUP BY m.label HAVING COUNT(*) = (SELECT COUNT(*) FROM molecule);"}, {"question_id": 215, "answer_sql": "SELECT COUNT(*) FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id JOIN bond b ON m.molecule_id = b.molecule_id JOIN connected c ON a.atom_id = c.atom_id WHERE a.element IN ('i', 's') AND b.bond_type = '-';"}, {"question_id": 216, "answer_sql": "SELECT DISTINCT a.atom_id FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = '#';"}, {"question_id": 217, "answer_sql": "SELECT DISTINCT a.atom_id FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN molecule m ON m.molecule_id = c.molecule_id WHERE m.label = 'TR181';"}, {"question_id": 218, "answer_sql": "SELECT DIVIDE(SUM(CASE WHEN atom.element = 'f' THEN 1 ELSE 0 END), COUNT(molecule.molecule_id)) as percent FROM molecule LEFT JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+' AND atom.element != 'f';"}, {"question_id": 219, "answer_sql": "SELECT DIVIDE(SUM(CASE WHEN bond.bond_type = '#' THEN 1 ELSE 0 END), COUNT(bond.bond_id)) AS percent FROM molecule LEFT JOIN bond ON molecule.molecule_id = bond.molecule_id LEFT JOIN connected ON bond.bond_id = connected.bond_id WHERE molecule.label = '+'"}, {"question_id": 220, "answer_sql": "SELECT DISTINCT element FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR000' ORDER BY element ASC LIMIT 3;"}, {"question_id": 221, "answer_sql": "SELECT DISTINCT a.atom_id FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE a.molecule_id = 'TR001' AND b.bond_id = 'TR001_2_6';"}, {"question_id": 222, "answer_sql": "SELECT SUM(CASE WHEN m.label = '+' THEN 1 ELSE 0 END) - SUM(CASE WHEN m.label = '-' THEN 1 ELSE 0 END) AS difference FROM molecule m;"}, {"question_id": 223, "answer_sql": "SELECT atom_id FROM bond WHERE bond_id = 'TR_000_2_5';"}, {"question_id": 224, "answer_sql": "SELECT bond_id FROM connected WHERE atom_id2 = 'TR000_2';"}, {"question_id": 225, "answer_sql": "SELECT m.molecule_id, m.label FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = '=' ORDER BY m.label ASC LIMIT 5;"}, {"question_id": 226, "answer_sql": "SELECT DIVIDE(SUM(CASE WHEN bond.bond_type = '=' THEN 1 ELSE 0 END), COUNT(bond.bond_id)) AS percent FROM bond WHERE bond.molecule_id = 'TR008';"}, {"question_id": 227, "answer_sql": "SELECT DIVIDE(SUM(CASE WHEN molecule.label = '+' THEN 1 ELSE 0 END), COUNT(molecule.molecule_id)) AS percent FROM molecule;"}, {"question_id": 228, "answer_sql": "SELECT DIVIDE(SUM(CASE WHEN atom.element = 'h' THEN 1 ELSE 0 END), COUNT(atom.atom_id)) * 100 AS percent FROM atom WHERE atom.molecule_id = 'TR206';"}, {"question_id": 229, "answer_sql": "SELECT b.bond_type FROM bond b WHERE b.molecule_id = 'TR000';"}, {"question_id": 230, "answer_sql": "SELECT atom.element, molecule.label FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR060';"}, {"question_id": 231, "answer_sql": "SELECT b.bond_type, COUNT(b.bond_type) AS bond_count FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id JOIN connected c ON b.bond_id = c.bond_id WHERE m.molecule_id = 'TR018' GROUP BY b.bond_type ORDER BY bond_count DESC LIMIT 1;"}, {"question_id": 232, "answer_sql": "SELECT m.molecule_id, m.label FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id JOIN connected c ON b.bond_id = c.bond_id WHERE b.bond_type = '-' AND m.label = '-' ORDER BY m.molecule_id ASC LIMIT 3;"}, {"question_id": 233, "answer_sql": "SELECT b.bond_id, b.bond_type FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id JOIN connected c ON b.bond_id = c.bond_id WHERE m.label = 'TR006' ORDER BY b.bond_type ASC LIMIT 2;"}, {"question_id": 234, "answer_sql": "SELECT COUNT(*) FROM connected c JOIN bond b ON c.bond_id = b.bond_id WHERE (c.atom_id = 'TR009_12' OR c.atom_id2 = 'TR009_12') AND b.molecule_id = 'TR009';"}, {"question_id": 235, "answer_sql": "SELECT COUNT(*) FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE m.label = '+' AND a.element = 'br';"}, {"question_id": 236, "answer_sql": "SELECT b.bond_type, a.atom_id, a2.atom_id AS atom_id2 FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a ON c.atom_id = a.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE b.molecule_id = 'TR001_6_9';"}, {"question_id": 237, "answer_sql": "SELECT m.label FROM molecule m JOIN atom a ON a.molecule_id = m.molecule_id WHERE a.atom_id = 'TR001_10';"}, {"question_id": 238, "answer_sql": "SELECT COUNT(*) FROM bond WHERE bond_type = '#';"}, {"question_id": 239, "answer_sql": "SELECT COUNT(*) FROM connected c WHERE c.atom_id = 'TR%_19' OR c.atom_id2 = 'TR%_19';"}, {"question_id": 240, "answer_sql": "SELECT atom.element FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR004';"}, {"question_id": 241, "answer_sql": "SELECT COUNT(*) FROM molecule WHERE label = '-';"}, {"question_id": 242, "answer_sql": "SELECT DISTINCT m.molecule_id FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE SUBSTRING(a.atom_id, 7, 2) BETWEEN 21 AND 25 AND m.label = '+';"}, {"question_id": 243, "answer_sql": "SELECT b.bond_id FROM bond b JOIN atom a ON b.molecule_id = a.molecule_id AND (a.element = 'p' OR a.element = 'n');"}, {"question_id": 244, "answer_sql": "SELECT m.molecule_id, m.label FROM molecule m JOIN ( SELECT bond_id FROM bond WHERE bond_type = '=' ) b ON m.molecule_id = b.bond_id GROUP BY m.molecule_id, m.label HAVING COUNT(b.bond_id) > 0 AND m.label = '+';"}, {"question_id": 245, "answer_sql": "SELECT DIVIDE(COUNT(bond_id), COUNT(atom_id)) FROM atom WHERE element = 'i'"}, {"question_id": 246, "answer_sql": "SELECT b.bond_type, b.bond_id FROM bond b INNER JOIN connected c ON b.bond_id = c.bond_id WHERE c.atom_id = 'atom45' OR c.atom_id2 = 'atom45';"}, {"question_id": 247, "answer_sql": "SELECT DISTINCT a.element FROM atom a LEFT JOIN connected c ON a.atom_id = c.atom_id WHERE c.atom_id IS NULL;"}, {"question_id": 248, "answer_sql": "SELECT DISTINCT a.atom_id FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE a.molecule_id = 'TR447' AND b.bond_type = '#' AND c.atom_id2 = a.atom_id GROUP BY a.atom_id HAVING COUNT(c.atom_id2) = 2;"}, {"question_id": 249, "answer_sql": "SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR144_8_19';"}, {"question_id": 250, "answer_sql": "SELECT m.molecule_id, COUNT(DISTINCT CASE WHEN b.bond_type = '=' THEN b.bond_id END) AS double_bonds FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE m.label = '+' GROUP BY m.molecule_id ORDER BY double_bonds DESC LIMIT 1;"}, {"question_id": 251, "answer_sql": "SELECT a.element FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.label = '+' GROUP BY a.element HAVING COUNT(*) = (SELECT COUNT(*) FROM atom a WHERE a.molecule_id IN (SELECT m.molecule_id FROM molecule m WHERE m.label = '+'))"}, {"question_id": 252, "answer_sql": "SELECT DISTINCT a.atom_id FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE a.element = 'pb'"}, {"question_id": 253, "answer_sql": "SELECT DISTINCT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '#'"}, {"question_id": 254, "answer_sql": "WITH common_combination AS ( SELECT element1, element2 FROM ( SELECT a.element AS element1, b.element AS element2 FROM atom a JOIN atom b ON a.atom_id = b.atom_id WHERE a.element IS NOT NULL AND b.element IS NOT NULL ) GROUP BY element1, element2 HAVING COUNT(*) = ( SELECT COUNT(*) FROM ( SELECT a.element AS element1, b.element AS element2 FROM atom a JOIN atom b ON a.atom_id = b.atom_id WHERE a.element IS NOT NULL AND b.element IS NOT NULL ) GROUP BY element1, element2 ORDER BY COUNT(*) DESC LIMIT 1 ) ), total_bonds AS ( SELECT COUNT(bond_id) AS total_bonds FROM bond ), common_bonds AS ( SELECT COUNT(bond_id) AS common_bonds FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a ON c.atom_id = a.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE a.element IN (SELECT element1 FROM common_combination) AND a2.element IN (SELECT element2 FROM common_combination) ) SELECT DIVIDE(common_bonds, total_bonds) AS percentage"}, {"question_id": 255, "answer_sql": "SELECT DIVIDE(SUM(molecule.label = '+'), COUNT(bond.bond_id)) FROM bond JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '-'"}, {"question_id": 256, "answer_sql": "SELECT COUNT(*) FROM atom WHERE element IN ('c', 'h');"}, {"question_id": 257, "answer_sql": "SELECT DISTINCT T3.atom_id2 FROM `atom` AS T1 INNER JOIN `connected` AS T2 ON T1.atom_id = T2.atom_id INNER JOIN `atom` AS T3 ON T3.atom_id = T2.atom_id2 WHERE T1.element = 's';"}, {"question_id": 258, "answer_sql": "SELECT b.bond_type FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE a.element = 'sn';"}, {"question_id": 259, "answer_sql": "SELECT COUNT(DISTINCT a.element) FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = '-';"}, {"question_id": 260, "answer_sql": "SELECT COUNT(*) FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id JOIN bond b ON a.molecule_id = b.molecule_id JOIN connected c ON a.atom_id = c.atom_id WHERE b.bond_type = '#' AND (a.element = 'p' OR a.element = 'br');"}, {"question_id": 261, "answer_sql": "SELECT b.bond_id FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE m.label = '+';"}, {"question_id": 262, "answer_sql": "SELECT DISTINCT m.molecule_id FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id JOIN connected c ON m.molecule_id = c.molecule_id WHERE b.bond_type = '-' AND m.label = '-';"}, {"question_id": 263, "answer_sql": "SELECT DIVIDE(SUM(CASE WHEN atom.element = 'cl' THEN 1 ELSE 0 END), COUNT(atom.atom_id)) AS percent FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '-';"}, {"question_id": 264, "answer_sql": "SELECT label FROM molecule WHERE molecule_id IN ('TR000', 'TR001', 'TR002');"}, {"question_id": 265, "answer_sql": "SELECT m.molecule_id FROM molecule m WHERE m.label = '-';"}, {"question_id": 266, "answer_sql": "SELECT COUNT(*) AS total_carcinogenic_molecules FROM molecule WHERE label = '+' AND molecule_id BETWEEN 'TR000' AND 'TR030';"}, {"question_id": 267, "answer_sql": "SELECT b.bond_type FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE m.molecule_id BETWEEN 'TR000' AND 'TR050';"}, {"question_id": 268, "answer_sql": "SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR001_10_11';"}, {"question_id": 269, "answer_sql": "SELECT COUNT(T3.bond_id) FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T1.element = 'i';"}, {"question_id": 270, "answer_sql": "SELECT MAX(label) FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.element = 'ca';"}, {"question_id": 271, "answer_sql": "SELECT b.bond_id, a1.element, a2.element FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE b.bond_id = 'TR001_1_8' AND (a1.element = 'cl' OR a2.element = 'cl') AND (a1.element = 'c' OR a2.element = 'c');"}, {"question_id": 272, "answer_sql": "SELECT DISTINCT m.molecule_id FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id JOIN bond b ON m.molecule_id = b.molecule_id JOIN connected c ON a.atom_id = c.atom_id JOIN connected c2 ON a.atom_id = c2.atom_id2 WHERE a.element = 'c' AND b.bond_type = '#' AND m.label = '-' AND c.bond_id = c2.bond_id LIMIT 2;"}, {"question_id": 273, "answer_sql": "SELECT DIVIDE(SUM(CASE WHEN atom.element = 'Cl' THEN 1 ELSE 0 END), COUNT(molecule.molecule_id)) as percentage FROM molecule LEFT JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+';"}, {"question_id": 274, "answer_sql": "SELECT DISTINCT atom.element FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR001';"}, {"question_id": 275, "answer_sql": "SELECT m.molecule_id FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = '=';"}, {"question_id": 276, "answer_sql": "SELECT atom_id AS first_atom, atom_id2 AS second_atom FROM connected WHERE bond_id IN ( SELECT bond_id FROM bond WHERE molecule_id IN ( SELECT molecule_id FROM molecule WHERE label LIKE '%triple bond%' ) AND bond_type = '#' ) GROUP BY atom_id, atom_id2 HAVING COUNT(*) = 2;"}, {"question_id": 277, "answer_sql": "SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR005_16_26';"}, {"question_id": 278, "answer_sql": "SELECT COUNT(*) FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id JOIN atom a ON m.molecule_id = a.molecule_id JOIN connected c ON a.atom_id = c.atom_id WHERE m.label = '-' AND b.bond_type = '-';"}, {"question_id": 279, "answer_sql": "SELECT m.label FROM `bond` b JOIN `molecule` m ON b.molecule_id = m.molecule_id WHERE b.bond_id = 'TR001_10_11';"}, {"question_id": 280, "answer_sql": "SELECT b.bond_id FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id JOIN bond b ON m.molecule_id = b.molecule_id JOIN connected c ON a.atom_id = c.atom_id AND c.atom_id2 = c.atom_id2 WHERE b.bond_type = '#' AND (m.label = '+' OR m.label = '-');"}, {"question_id": 281, "answer_sql": "SELECT T1.element FROM atom AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id JOIN connected AS T3 ON T1.atom_id = T3.atom_id WHERE T2.label = '+' AND CAST(SUBSTR(T1.atom_id, 7, 1) AS INTEGER) = 4 AND T1.element = 'cl';"}, {"question_id": 282, "answer_sql": "SELECT DIVIDE(SUM(CASE WHEN atom.element = 'h' THEN 1 ELSE 0 END), COUNT(atom.element)) AS ratio, molecule.label FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR006'"}, {"question_id": 283, "answer_sql": "SELECT m.label FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id JOIN connected c ON a.atom_id = c.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE a.element = 'ca' AND a2.element = 'ca'"}, {"question_id": 284, "answer_sql": "SELECT b.bond_type FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a ON c.atom_id = a.atom_id WHERE a.element = 'te';"}, {"question_id": 285, "answer_sql": "SELECT DISTINCT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR001_10_11';"}, {"question_id": 286, "answer_sql": "SELECT (COUNT(*) * 1.0) / (SELECT COUNT(*) FROM `molecule`) AS percent_with_triple_bond FROM bond WHERE bond_type = '#';"}, {"question_id": 287, "answer_sql": "SELECT DIVIDE(SUM(CASE WHEN b.bond_type = '=' THEN 1 ELSE 0 END), COUNT(b.bond_id)) AS percent FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE m.molecule_id = 'TR047';"}, {"question_id": 288, "answer_sql": "SELECT m.label FROM molecule m INNER JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.atom_id = 'TR001_1';"}, {"question_id": 289, "answer_sql": "SELECT label FROM molecule WHERE molecule_id = 'TR151';"}, {"question_id": 290, "answer_sql": "SELECT atom.element FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = 'TR151';"}, {"question_id": 291, "answer_sql": "SELECT COUNT(*) FROM molecule WHERE label = '+';"}, {"question_id": 292, "answer_sql": "SELECT DISTINCT a.atom_id FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.molecule_id LIKE 'TR%' AND substr(m.molecule_id, 3, 3) BETWEEN 10 AND 50 AND a.element = 'c';"}, {"question_id": 293, "answer_sql": "SELECT COUNT(*) FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.label = '+';"}, {"question_id": 294, "answer_sql": "SELECT b.bond_id FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id JOIN atom a ON b.molecule_id = a.molecule_id JOIN connected c ON a.atom_id = c.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE m.label = '+' AND b.bond_type = '=' AND a.element = 'C' AND a2.element = 'C';"}, {"question_id": 295, "answer_sql": "SELECT COUNT(*) FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.label = '+' AND a.element = 'H';"}, {"question_id": 296, "answer_sql": "SELECT m.molecule_id FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id JOIN connected c ON b.bond_id = c.bond_id JOIN atom a ON c.atom_id = a.atom_id WHERE a.element = 'TR00_1' AND b.bond_type = 'TR00_1_2';"}, {"question_id": 297, "answer_sql": "SELECT DISTINCT a.atom_id FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE a.element = 'c' AND m.label != '-'"}, {"question_id": 298, "answer_sql": "SELECT DIVIDE(SUM(CASE WHEN atom.element = 'h' AND molecule.label = '+' THEN 1 ELSE 0 END), COUNT(molecule.molecule_id)) * 100.0 AS percentage FROM molecule LEFT JOIN atom ON molecule.molecule_id = atom.molecule_id"}, {"question_id": 299, "answer_sql": "SELECT label FROM molecule WHERE molecule_id = 'TR124' AND label = '+';"}, {"question_id": 300, "answer_sql": "SELECT DISTINCT a.atom_id FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.label = 'TR186';"}, {"question_id": 301, "answer_sql": "SELECT b.bond_type FROM bond b INNER JOIN molecule m ON b.molecule_id = m.molecule_id WHERE m.label = 'TR007_4_19';"}, {"question_id": 302, "answer_sql": "SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR001_2_4';"}, {"question_id": 303, "answer_sql": "SELECT COUNT(*) AS double_bonds, m.label AS is_carcinogenic FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id JOIN connected c ON b.bond_id = c.bond_id WHERE m.label IS NOT NULL AND b.bond_type = '=' AND m.molecule_id = 'TR006';"}, {"question_id": 304, "answer_sql": "SELECT m.molecule_id, a.element FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE m.label = '+' AND a.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca');"}, {"question_id": 305, "answer_sql": "SELECT b.bond_id, a.atom_id, a2.atom_id AS atom_id2 FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a ON c.atom_id = a.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE b.bond_type = '-'"}, {"question_id": 306, "answer_sql": "SELECT DISTINCT m.molecule_id, a.element FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id JOIN bond b ON m.molecule_id = b.molecule_id JOIN connected c ON a.atom_id = c.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE b.bond_type = '#' AND a.element != a2.element"}, {"question_id": 307, "answer_sql": "SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR000_2_3';"}, {"question_id": 308, "answer_sql": "SELECT COUNT(*) FROM bond b JOIN atom a ON b.molecule_id = a.molecule_id AND a.element = 'cl';"}, {"question_id": 309, "answer_sql": "SELECT a.atom_id, COUNT(DISTINCT b.bond_type) AS bond_count FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id JOIN bond b ON a.molecule_id = b.molecule_id WHERE m.label = 'TR346' GROUP BY a.atom_id;"}, {"question_id": 310, "answer_sql": "SELECT COUNT(*) FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id JOIN connected c ON m.molecule_id = c.molecule_id WHERE b.bond_type = '=' AND m.label = '+';"}, {"question_id": 311, "answer_sql": "SELECT COUNT(DISTINCT m.molecule_id) FROM molecule m LEFT JOIN atom a ON m.molecule_id = a.molecule_id LEFT JOIN bond b ON m.molecule_id = b.molecule_id LEFT JOIN connected c ON a.atom_id = c.atom_id WHERE a.element != 's' AND NOT EXISTS ( SELECT 1 FROM bond b WHERE b.bond_type = '=' )"}, {"question_id": 312, "answer_sql": "SELECT m.label FROM `molecule` m INNER JOIN `bond` b ON m.molecule_id = b.molecule_id INNER JOIN `connected` c ON b.bond_id = c.bond_id WHERE b.bond_id = 'TR001_2_4';"}, {"question_id": 313, "answer_sql": "SELECT COUNT(*) FROM atom WHERE molecule_id = 'TR005';"}, {"question_id": 314, "answer_sql": "SELECT COUNT(*) FROM bond WHERE bond_type = '-';"}, {"question_id": 315, "answer_sql": "SELECT m.molecule_id, m.label FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.element = 'cl' AND m.label = '+';"}, {"question_id": 316, "answer_sql": "SELECT m.molecule_id FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.element = 'c' AND m.label = '-';"}, {"question_id": 317, "answer_sql": "SELECT DIVIDE(SUM(CASE WHEN label = '+' AND element = 'cl' THEN 1 ELSE 0 END), COUNT(molecule_id)) as percentage FROM molecule;"}, {"question_id": 318, "answer_sql": "SELECT m.molecule_id FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE b.bond_id = 'TR001_1_7';"}, {"question_id": 319, "answer_sql": "SELECT COUNT(DISTINCT atom.element) FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR001_3_4';"}, {"question_id": 320, "answer_sql": "SELECT b.bond_type FROM bond b JOIN connected c ON b.bond_id = c.bond_id WHERE c.atom_id = 'TR000_1' AND c.atom_id2 = 'TR000_2';"}, {"question_id": 321, "answer_sql": "SELECT m.molecule_id FROM atom a1 INNER JOIN atom a2 ON a1.atom_id = 'TR000_2' AND a2.atom_id = 'TR000_4' INNER JOIN connected c ON (a1.atom_id = c.atom_id AND a2.atom_id = c.atom_id2) INNER JOIN molecule m ON c.bond_id IS NULL"}, {"question_id": 322, "answer_sql": "SELECT atom.element FROM atom WHERE atom.atom_id = 'TR000_1';"}, {"question_id": 323, "answer_sql": "SELECT label FROM molecule WHERE molecule_id = 'TR000';"}, {"question_id": 324, "answer_sql": "SELECT DIVIDE(SUM(CASE WHEN b.bond_type = '-' THEN 1 ELSE 0 END), COUNT(b.bond_id)) AS percentage FROM bond b;"}, {"question_id": 325, "answer_sql": "SELECT COUNT(*) FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE a.element = 'n' AND m.label = '+';"}, {"question_id": 326, "answer_sql": "SELECT m.molecule_id FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id JOIN bond b ON m.molecule_id = b.molecule_id JOIN connected c ON a.atom_id = c.atom_id JOIN connected c2 ON a.atom_id = c2.atom_id2 AND c.bond_id = c2.bond_id WHERE a.element = 's' AND b.bond_type = '=';"}, {"question_id": 327, "answer_sql": "SELECT m.molecule_id FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id GROUP BY m.molecule_id HAVING COUNT(a.atom_id) > 5 AND m.label = '-'"}, {"question_id": 328, "answer_sql": "SELECT DISTINCT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '=' AND atom.molecule_id = 'TR024'"}, {"question_id": 329, "answer_sql": "SELECT m.molecule_id, m.label, COUNT(a.atom_id) AS atom_count FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE m.label = '+' GROUP BY m.molecule_id, m.label ORDER BY atom_count DESC LIMIT 1;"}, {"question_id": 330, "answer_sql": "SELECT DIVIDE(SUM(CASE WHEN T1.element = 'h' AND T1.bond_type = '#' AND T2.label = '+' THEN 1 ELSE 0 END), COUNT(T2.molecule_id)) * 100.0 AS percentage FROM molecule T2 LEFT JOIN atom T1 ON T2.molecule_id = T1.molecule_id"}, {"question_id": 331, "answer_sql": "SELECT COUNT(*) FROM molecule WHERE label = '+';"}, {"question_id": 332, "answer_sql": "SELECT COUNT(*) FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE m.molecule_id BETWEEN 'TR004' AND 'TR010' AND b.bond_type = '-';"}, {"question_id": 333, "answer_sql": "SELECT COUNT(*) FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = 'TR008' AND atom.element = 'c';"}, {"question_id": 334, "answer_sql": "SELECT atom.element FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.atom_id = 'TR004_7' AND molecule.label = '-';"}, {"question_id": 335, "answer_sql": "SELECT COUNT(*) FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id JOIN connected c ON b.bond_id = c.bond_id WHERE c.atom_id IN ( SELECT atom_id FROM atom WHERE element = 'o' ) AND c.atom_id2 IN ( SELECT atom_id FROM atom WHERE element = 'o' ) AND b.bond_type = '='"}, {"question_id": 336, "answer_sql": "SELECT COUNT(*) FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id JOIN connected c ON m.molecule_id = c.molecule_id WHERE b.bond_type = '#' AND m.label = '-';"}, {"question_id": 337, "answer_sql": "SELECT atom.element, bond.bond_type FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id JOIN bond ON atom.molecule_id = bond.molecule_id WHERE molecule.molecule_id = 'TR016';"}, {"question_id": 338, "answer_sql": "SELECT atom_id FROM atom JOIN bond ON atom.atom_id = bond.molecule_id AND bond.bond_type = '=' JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON molecule.molecule_id = atom.molecule_id AND molecule.label = 'TR012' WHERE connected.atom_id2 = atom.atom_id;"}, {"question_id": 339, "answer_sql": "SELECT atom.atom_id FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id JOIN ( SELECT bond_id FROM bond WHERE molecule_id IN ( SELECT molecule_id FROM molecule WHERE label = '+' ) ) AS bond ON atom.molecule_id = bond.molecule_id AND atom.atom_id = connected.atom_id AND connected.bond_id = bond.bond_id JOIN ( SELECT atom_id2 FROM connected WHERE atom_id2 IN ( SELECT atom_id FROM atom WHERE element = 'o' ) ) AS oxygen ON connected.atom_id2 = oxygen.atom_id2;"}, {"question_id": 340, "answer_sql": "SELECT * FROM cards WHERE cardKingdomFoilId = cardKingdomId AND cardKingdomId IS NOT NULL;"}, {"question_id": 341, "answer_sql": "SELECT DISTINCT c.id, c.name, c.borderColor FROM cards c WHERE c.borderColor = 'borderless' AND c.cardKingdomFoilId IS NULL AND c.cardKingdomId IS NOT NULL;"}, {"question_id": 342, "answer_sql": "SELECT name FROM cards WHERE faceConvertedManaCost > (SELECT MAX(faceConvertedManaCost) FROM cards);"}, {"question_id": 343, "answer_sql": "SELECT name FROM cards WHERE frameVersion = 2015 AND edhrecRank < 100;"}, {"question_id": 344, "answer_sql": "SELECT c.name FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.rarity = 'mythic' AND l.status = 'Banned' AND l.format = 'gladiator';"}, {"question_id": 345, "answer_sql": "SELECT l.status FROM legalities l JOIN cards c ON l.uuid = c.uuid WHERE c.type = 'Artifact' AND c.side IS NULL AND l.format = 'vintage';"}, {"question_id": 346, "answer_sql": "SELECT id, artist FROM cards WHERE power IN ('*', NULL) AND id IN (SELECT uuid FROM legalities WHERE format = 'commander' AND status = 'Legal')"}, {"question_id": 347, "answer_sql": "SELECT c.name, r.text FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.artist = 'Stephen Daniele' AND c.hasContentWarning = 1;"}, {"question_id": 348, "answer_sql": "SELECT r.text FROM rulings r JOIN cards c ON r.uuid = c.uuid WHERE c.name = 'Sublime Epiphany' AND c.number = '74s';"}, {"question_id": 349, "answer_sql": "SELECT c.name, c.artist, c.isPromo FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.isPromo = 1 GROUP BY c.uuid ORDER BY COUNT(r.uuid) DESC LIMIT 1;"}, {"question_id": 350, "answer_sql": "SELECT DISTINCT language FROM foreign_data WHERE name = 'annul' AND number = '29';"}, {"question_id": 351, "answer_sql": "SELECT cards.name FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Japanese' AND cards.isAlternative = 1;"}, {"question_id": 352, "answer_sql": "SELECT (SUM(CASE WHEN language = 'Chinese Simplified' THEN 1 ELSE 0 END) * 100) / COUNT(*) FROM cards;"}, {"question_id": 353, "answer_sql": "SELECT s.code, s.totalSetSize FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.language = 'Italian';"}, {"question_id": 354, "answer_sql": "SELECT COUNT(DISTINCT t2.type) FROM cards AS t1 JOIN sets AS t2 ON t1.setCode = t2.code WHERE t2.artist = 'Aaron Boyd';"}, {"question_id": 355, "answer_sql": "SELECT keywords FROM cards WHERE name = 'Angel of Mercy';"}, {"question_id": 356, "answer_sql": "SELECT COUNT(*) FROM cards WHERE power = '*';"}, {"question_id": 357, "answer_sql": "SELECT promoTypes FROM cards WHERE name = 'Duress';"}, {"question_id": 358, "answer_sql": "SELECT borderColor FROM cards WHERE name = 'Ancestor\\'s Chosen';"}, {"question_id": 359, "answer_sql": "SELECT type FROM cards WHERE name = 'Ancestor''s Chosen';"}, {"question_id": 360, "answer_sql": "SELECT DISTINCT language FROM set_translations JOIN sets ON set_translations.setCode = sets.code WHERE sets.name = 'Angel of Mercy';"}, {"question_id": 361, "answer_sql": "SELECT COUNT(*) FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE l.status = 'restricted' AND c.isTextless = 0;"}, {"question_id": 362, "answer_sql": "SELECT r.text FROM rulings r JOIN cards c ON r.uuid = c.uuid WHERE c.name = 'Ancestor''s Chosen';"}, {"question_id": 363, "answer_sql": "SELECT COUNT(*) FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'restricted' AND cards.isStarter = 1;"}, {"question_id": 364, "answer_sql": "SELECT status FROM legalities WHERE uuid = (SELECT uuid FROM cards WHERE name = 'Cloudchaser Eagle');"}, {"question_id": 365, "answer_sql": "SELECT type FROM cards WHERE name = 'Benalish Knight';"}, {"question_id": 366, "answer_sql": "SELECT format FROM cards WHERE name = 'Benalish Knight';"}, {"question_id": 367, "answer_sql": "SELECT DISTINCT artist FROM cards WHERE setCode = 'Phyrexian';"}, {"question_id": 368, "answer_sql": "SELECT (COUNT(id) WHERE cards.borderColor = 'borderless') / COUNT(id) * 100 AS borderless_percentage FROM cards;"}, {"question_id": 369, "answer_sql": "SELECT COUNT(*) FROM cards WHERE language = 'German' AND isReprint = 1;"}, {"question_id": 370, "answer_sql": "SELECT COUNT(*) FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.borderColor = 'borderless' AND foreign_data.language = 'Russian';"}, {"question_id": 371, "answer_sql": "SELECT (COUNT(c.id) * 100.0 / SUM(CASE WHEN c.isStorySpotlight = 1 THEN 1 ELSE 0 END)) AS percentage FROM cards c WHERE c.language = 'French' AND c.isStorySpotlight = 1;"}, {"question_id": 372, "answer_sql": "SELECT COUNT(*) FROM cards WHERE toughness = '99';"}, {"question_id": 373, "answer_sql": "SELECT name FROM cards WHERE artist = 'Aaron Boyd';"}, {"question_id": 374, "answer_sql": "SELECT COUNT(*) FROM cards WHERE borderColor = 'black' AND availability = 'mtgo';"}, {"question_id": 375, "answer_sql": "SELECT id FROM cards WHERE convertedManaCost = 0;"}, {"question_id": 376, "answer_sql": "SELECT cards.layout FROM cards WHERE cards.keywords LIKE '%flying%';"}, {"question_id": 377, "answer_sql": "SELECT COUNT(*) FROM cards WHERE type = 'Summon - Angel' AND NOT subtype = 'Angel';"}, {"question_id": 378, "answer_sql": "SELECT id FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL;"}, {"question_id": 379, "answer_sql": "SELECT id FROM cards WHERE duelDeck = 'a';"}, {"question_id": 380, "answer_sql": "SELECT edhrecRank FROM cards WHERE frameVersion = '2015';"}, {"question_id": 381, "answer_sql": "SELECT DISTINCT artist FROM cards WHERE language = 'Chinese Simplified';"}, {"question_id": 382, "answer_sql": "SELECT * FROM cards WHERE availability = 'paper' AND language = 'Japanese';"}, {"question_id": 383, "answer_sql": "SELECT COUNT(*) FROM cards WHERE status = 'Banned' AND borderColor = 'white';"}, {"question_id": 384, "answer_sql": "SELECT cards.uuid, foreign_data.language FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.format = 'legacy';"}, {"question_id": 385, "answer_sql": "SELECT r.text FROM rulings r JOIN cards c ON r.uuid = c.uuid WHERE c.name = 'Beacon of Immortality';"}, {"question_id": 386, "answer_sql": "SELECT COUNT(*) AS num_cards, legalities.status FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.frameVersion = 'future' AND legalities.status = 'legal';"}, {"question_id": 387, "answer_sql": "SELECT cards.colors FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.format = 'MME' AND legalities.status = 'Legal' AND cards.setCode = 'OGW';"}, {"question_id": 388, "answer_sql": "SELECT cards.name, set_translations.translation, set_translations.language FROM cards JOIN set_translations ON cards.uuid = set_translations.uuid WHERE cards.convertedManaCost = 5 AND cards.setCode = '10E';"}, {"question_id": 389, "answer_sql": "SELECT c.name, r.date FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.type = 'Creature' AND c.originalType = 'Elf';"}, {"question_id": 390, "answer_sql": "SELECT colors, format FROM cards WHERE id BETWEEN 1 AND 20;"}, {"question_id": 391, "answer_sql": "SELECT cards.uuid, cards.name, cards.colors, foreign_data.language FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.originalType = 'Artifact' AND cards.colors = 'B';"}, {"question_id": 392, "answer_sql": "SELECT name FROM cards JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.rarity = 'uncommon' ORDER BY rulings.date ASC LIMIT 3;"}, {"question_id": 393, "answer_sql": "SELECT COUNT(*) FROM cards WHERE artist = 'John Avon' AND cardKingdomId IS NOT NULL AND cardKingdomFoilId IS NOT NULL AND cardKingdomFoilId != cardKingdomId;"}, {"question_id": 394, "answer_sql": "SELECT COUNT(*) FROM cards WHERE borderColor = 'white' AND (cardKingdomFoilId = cardKingdomId AND cardKingdomId IS NOT NULL);"}, {"question_id": 395, "answer_sql": "SELECT COUNT(*) FROM cards WHERE artist = 'UDON' AND availability = 'mtgo' AND hand = -1;"}, {"question_id": 396, "answer_sql": "SELECT COUNT(*) FROM cards WHERE frameVersion = '1993' AND availability = 'paper' AND hasContentWarning = 1;"}, {"question_id": 397, "answer_sql": "SELECT manaCost FROM cards WHERE layout = 'normal' AND frameVersion = 2003 AND borderColor = 'black' AND (availability = 'paper' OR availability LIKE '%mtgo%');"}, {"question_id": 398, "answer_sql": "SELECT SUM(convertedManaCost) AS total_unconverted_mana FROM cards WHERE artist = 'Rob Alexander';"}, {"question_id": 399, "answer_sql": "SELECT DISTINCT types FROM cards WHERE availability = 'arena';"}, {"question_id": 400, "answer_sql": "SELECT s.code FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.language = 'Spanish';"}, {"question_id": 401, "answer_sql": "SELECT DIVIDE(COUNT(CASE WHEN frameEffects = 'legendary' AND hand = '+3' THEN 1 END), COUNT(id)) FROM cards WHERE frameEffects = 'legendary';"}, {"question_id": 402, "answer_sql": "SELECT id, (COUNT(id) OVER()) / COUNT(id) * 100 AS percentage FROM cards WHERE isStorySpotlight = 1 AND isTextless = 1;"}, {"question_id": 403, "answer_sql": "SELECT cards.name, (SUM(CASE WHEN foreign_data.language = 'Spanish' THEN 1 ELSE 0 END) * 100.0 / COUNT(cards.id)) AS percentage FROM cards LEFT JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language IS NOT NULL GROUP BY cards.name ORDER BY percentage DESC;"}, {"question_id": 404, "answer_sql": "SELECT DISTINCT language FROM set_translations WHERE setCode = (SELECT code FROM sets WHERE baseSetSize = 309);"}, {"question_id": 405, "answer_sql": "SELECT COUNT(*) FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE sets.block = 'Commander' AND set_translations.language = 'Portuguese (Brasil)';"}, {"question_id": 406, "answer_sql": "SELECT c.id, c.name, l.status FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.types LIKE '%Creature%' AND l.status = 'legal';"}, {"question_id": 407, "answer_sql": "SELECT DISTINCT (CASE WHEN T1.subtypes IS NOT NULL THEN T1.subtypes ELSE '' END) || ' ' || (CASE WHEN T1.supertypes IS NOT NULL THEN T1.supertypes ELSE '' END) AS types FROM cards T1 WHERE T1.language = 'German'"}, {"question_id": 408, "answer_sql": "SELECT COUNT(*) FROM cards WHERE power IS NULL AND (power IS NULL OR power = '*') AND EXISTS ( SELECT 1 FROM cards c2 WHERE c2.uuid = cards.uuid AND c2.power IS NOT NULL AND c2.power != '*' );"}, {"question_id": 409, "answer_sql": "SELECT COUNT(*) FROM cards WHERE format = 'pre-modern' AND uuid IN (SELECT uuid FROM rulings WHERE text = 'This is a triggered mana ability') AND side IS NULL;"}, {"question_id": 410, "answer_sql": "SELECT id FROM cards WHERE artist = 'Erica Yang' AND availability = 'paper';"}, {"question_id": 411, "answer_sql": "SELECT artist FROM cards WHERE text = 'Das perfekte Gegenmittel zu einer dichten Formation';"}, {"question_id": 412, "answer_sql": "SELECT name FROM cards WHERE artist = 'Matthew D. Wilson' AND layout = 'normal' AND borderColor = 'black' AND type = 'Creature' AND language = 'French';"}, {"question_id": 413, "answer_sql": "SELECT COUNT(*) FROM cards JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.rarity = 'rare' AND rulings.date = '2009-01-10';"}, {"question_id": 414, "answer_sql": "SELECT s.language FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE s.baseSetSize = 180 AND s.block = 'Ravnica';"}, {"question_id": 415, "answer_sql": "SELECT DIVIDE(COUNT(CASE WHEN cards.hasContentWarning = 0 THEN 1 END), COUNT(cards.id)) * 100 FROM cards WHERE cards.format = 'commander' AND cards.status = 'legal';"}, {"question_id": 416, "answer_sql": "SELECT DIVIDE(COUNT(CASE WHEN language = 'French' AND (power IS NULL OR power = '*') THEN 1 END), COUNT(CASE WHEN power IS NULL OR power = '*' THEN 1 END)) * 100 FROM cards;"}, {"question_id": 417, "answer_sql": "SELECT DIVIDE(COUNT(CASE WHEN set_translations.language = 'Japanese' THEN 1 END), COUNT(set_translations.language)) * 100 AS percentage FROM set_translations WHERE set_translations.language = 'Japanese' AND set_translations.setCode IN (SELECT code FROM sets WHERE type = 'expansion');"}, {"question_id": 418, "answer_sql": "SELECT availability FROM cards WHERE artist = 'Daren Bader';"}, {"question_id": 419, "answer_sql": "SELECT COUNT(*) FROM cards WHERE borderColor = 'borderless' AND edhrecRank > 12000;"}, {"question_id": 420, "answer_sql": "SELECT COUNT(*) FROM cards WHERE isOversized = 1 AND isReprint = 1 AND isPromo = 1;"}, {"question_id": 421, "answer_sql": "SELECT name, power, promoTypes FROM cards WHERE power IS NULL OR power = '*' AND promoTypes = 'arenaleague' ORDER BY name ASC LIMIT 3;"}, {"question_id": 422, "answer_sql": "SELECT language FROM foreign_data WHERE multiverseid = 149934;"}, {"question_id": 423, "answer_sql": "SELECT cardKingdomFoilId, cardKingdomId FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL ORDER BY cardKingdomFoilId ASC LIMIT 6"}, {"question_id": 424, "answer_sql": "SELECT DIVIDE(COUNT(CASE WHEN cards.isTextless = 1 AND cards.layout = 'normal' THEN 1 END), COUNT(cards.id)) * 100 AS Proportion FROM cards;"}, {"question_id": 425, "answer_sql": "SELECT id FROM cards WHERE faceName IS NULL AND subtypes LIKE '%Angel%' AND subtypes LIKE '%Wizard%';"}, {"question_id": 426, "answer_sql": "SELECT s.name FROM sets s WHERE s.mtgoCode IS NULL OR s.mtgoCode = '' ORDER BY s.name ASC LIMIT 3;"}, {"question_id": 427, "answer_sql": "SELECT DISTINCT language FROM set_translations WHERE setCode = 'ARC';"}, {"question_id": 428, "answer_sql": "SELECT s.name, st.translation FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE s.id = 5;"}, {"question_id": 429, "answer_sql": "SELECT s.code, s.type FROM sets s WHERE s.id = 206;"}, {"question_id": 430, "answer_sql": "SELECT s.id, s.code, s.name FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.language = 'Italian' AND s.block = 'Shadowmoor' ORDER BY s.name ASC LIMIT 2;"}, {"question_id": 431, "answer_sql": "SELECT s.id FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE s.isForeignOnly = 1 AND s.isFoilOnly = 1 AND st.language = 'Japanese';"}, {"question_id": 432, "answer_sql": "SELECT s.code, s.name, s.baseSetSize FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.language = 'Russian' ORDER BY s.baseSetSize DESC LIMIT 1;"}, {"question_id": 433, "answer_sql": "SELECT DIVIDE(COUNT(CASE WHEN cards.isOnlineOnly = 1 AND cards.language = 'Chinese Simplified' THEN 1 END), COUNT(cards.isOnlineOnly)) * 100 AS percentage FROM cards;"}, {"question_id": 434, "answer_sql": "SELECT COUNT(*) FROM sets WHERE language = 'Japanese' AND (mtgoCode IS NULL OR mtgoCode = '');"}, {"question_id": 435, "answer_sql": "SELECT id FROM cards WHERE borderColor = 'black';"}, {"question_id": 436, "answer_sql": "SELECT id FROM cards WHERE frameEffects = 'extendedart';"}, {"question_id": 437, "answer_sql": "SELECT name FROM cards WHERE borderColor = 'black' AND isFullArt = 1;"}, {"question_id": 438, "answer_sql": "SELECT language FROM set_translations WHERE setCode = '174';"}, {"question_id": 439, "answer_sql": "SELECT name FROM sets WHERE code = 'ALL';"}, {"question_id": 440, "answer_sql": "SELECT language FROM foreign_data WHERE name = 'A Pedra Fellwar';"}, {"question_id": 441, "answer_sql": "SELECT code FROM sets WHERE releaseDate = '2007-07-13';"}, {"question_id": 442, "answer_sql": "SELECT s.baseSetSize, s.code FROM sets s WHERE s.block = 'Masques' AND s.code = 'Mirage';"}, {"question_id": 443, "answer_sql": "SELECT code FROM sets WHERE type = 'expansion';"}, {"question_id": 444, "answer_sql": "SELECT name, type FROM cards WHERE watermark = 'boros';"}, {"question_id": 445, "answer_sql": "SELECT c.colors, c.flavorText FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE fd.watermark = 'colorpie';"}, {"question_id": 446, "answer_sql": "SELECT DIVIDE(COUNT(CASE WHEN cards.convertedManaCost = 10 THEN 1 END), COUNT(*)) * 100 FROM cards WHERE cards.name = 'Abyssal Horror';"}, {"question_id": 447, "answer_sql": "SELECT code FROM sets WHERE type = 'Commander';"}, {"question_id": 448, "answer_sql": "SELECT name, type FROM cards WHERE watermark = 'abzan';"}, {"question_id": 449, "answer_sql": "SELECT cards.language, cards.type FROM cards JOIN schools_admins ON cards.uuid = schools_admins.uuid WHERE cards.watermark = 'azorius';"}, {"question_id": 450, "answer_sql": "SELECT COUNT(*) FROM cards WHERE artist = 'Aaron Miller' AND (cardKingdomFoilId = cardKingdomId AND cardKingdomId IS NOT NULL);"}, {"question_id": 451, "answer_sql": "SELECT COUNT(*) FROM cards WHERE availability LIKE '%paper%' AND hand LIKE '+%';"}, {"question_id": 452, "answer_sql": "SELECT name FROM cards WHERE isTextless = 0;"}, {"question_id": 453, "answer_sql": "SELECT convertedManaCost FROM cards WHERE name = 'Ancestor\\'s Chosen';"}, {"question_id": 454, "answer_sql": "SELECT COUNT(*) FROM cards WHERE borderColor = 'white' AND (power = '*' OR power IS NULL);"}, {"question_id": 455, "answer_sql": "SELECT name FROM cards WHERE isPromo = 1 AND side IS NOT NULL;"}, {"question_id": 456, "answer_sql": "SELECT DISTINCT types FROM cards WHERE name = 'Molimo, Maro-Sorcerer';"}, {"question_id": 457, "answer_sql": "SELECT DISTINCT purchaseUrls FROM cards WHERE promoTypes = 'bundle';"}, {"question_id": 458, "answer_sql": "SELECT COUNT(DISTINCT artist) FROM cards WHERE borderColor = 'black' AND availability LIKE '%arena,mtgo%';"}, {"question_id": 459, "answer_sql": "SELECT name, convertedManaCost FROM cards WHERE name = 'Serra Angel' OR name = 'Shrine Keeper' ORDER BY convertedManaCost DESC LIMIT 1;"}, {"question_id": 460, "answer_sql": "SELECT artist FROM cards WHERE flavorName = 'Battra, Dark Destroyer';"}, {"question_id": 461, "answer_sql": "SELECT name FROM cards WHERE frameVersion = '2003' ORDER BY convertedManaCost DESC LIMIT 3;"}, {"question_id": 462, "answer_sql": "SELECT s.name FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.language = 'Italian' AND st.translation LIKE '%Ancestor''s Chosen%';"}, {"question_id": 463, "answer_sql": "SELECT COUNT(*) FROM set_translations WHERE setCode IN ( SELECT code FROM sets WHERE name = 'Angel of Mercy' );"}, {"question_id": 464, "answer_sql": "SELECT name FROM cards WHERE setCode IN (SELECT code FROM sets WHERE translation = 'Hauptset Zehnte Edition')"}, {"question_id": 465, "answer_sql": "SELECT EXISTS ( SELECT 1 FROM cards c JOIN set_translations st ON c.setCode = st.setCode WHERE c.name = 'Ancestor''s Chosen' AND st.language = 'Korean' ) AS has_korean_version;"}, {"question_id": 466, "answer_sql": "SELECT COUNT(*) FROM cards WHERE setCode = (SELECT code FROM sets WHERE name = 'Hauptset Zehnte Edition') AND artist = 'Adam Rex';"}, {"question_id": 467, "answer_sql": "SELECT baseSetSize FROM sets WHERE code = 'Z19';"}, {"question_id": 468, "answer_sql": "SELECT translation FROM set_translations WHERE setCode = 'Eighth Edition' AND language = 'Simplified Chinese';"}, {"question_id": 469, "answer_sql": "SELECT EXISTS(SELECT 1 FROM cards WHERE name = 'Angel of Mercy' AND mtgoCode IS NOT NULL);"}, {"question_id": 470, "answer_sql": "SELECT s.releaseDate FROM sets s JOIN cards c ON s.code = c.setCode WHERE c.name = 'Ancestor''s Chosen';"}, {"question_id": 471, "answer_sql": "SELECT type FROM sets WHERE code = 'Z19';"}, {"question_id": 472, "answer_sql": "SELECT COUNT(*) FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE sets.block = 'Ice Age' AND set_translations.language = 'Italian';"}, {"question_id": 473, "answer_sql": "SELECT COUNT(*) > 0 FROM cards JOIN sets ON cards.setCode = sets.code WHERE cards.name = 'Adarkar Valkyrie' AND sets.isForeignOnly = 1;"}, {"question_id": 474, "answer_sql": "SELECT COUNT(*) FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.language = 'Italian' AND st.translation IS NOT NULL AND s.baseSetSize < 10;"}, {"question_id": 475, "answer_sql": "SELECT COUNT(*) FROM cards WHERE name = 'Coldsnap' AND borderColor = 'black';"}, {"question_id": 476, "answer_sql": "SELECT name FROM cards WHERE setCode = 'Coldsnap' ORDER BY convertedManaCost DESC LIMIT 1;"}, {"question_id": 477, "answer_sql": "SELECT artist FROM cards WHERE setCode = 'Coldsnap' AND artist IN ('Jeremy Jarvis', 'Aaron Miller', 'Chippy');"}, {"question_id": 478, "answer_sql": "SELECT number FROM cards WHERE name = 'Coldsnap' AND id = 4;"}, {"question_id": 479, "answer_sql": "SELECT COUNT(*) FROM cards JOIN sets ON cards.setCode = sets.code WHERE cards.convertedManaCost > 5 AND cards.power IN ('*', NULL) AND sets.name = 'Coldsnap';"}, {"question_id": 480, "answer_sql": "SELECT flavorText FROM cards WHERE name = 'Ancestor''s Chosen' AND language = 'Italian';"}, {"question_id": 481, "answer_sql": "SELECT DISTINCT language FROM foreign_data WHERE uuid IN (SELECT uuid FROM cards WHERE name = 'Ancestor''s Chosen' AND flavorText IS NOT NULL);"}, {"question_id": 482, "answer_sql": "SELECT type FROM cards WHERE name = 'Ancestor''s Chosen' AND language = 'German';"}, {"question_id": 483, "answer_sql": "SELECT r.text FROM rulings r JOIN cards c ON r.uuid = c.uuid JOIN set_translations st ON c.setCode = st.setCode WHERE c.name = 'Coldsnap' AND st.language = 'Italian';"}, {"question_id": 484, "answer_sql": "SELECT c.name, c.convertedManaCost FROM cards c JOIN set_translations st ON c.name = st.translation AND st.language = 'Italian' JOIN sets s ON c.setCode = s.code WHERE s.code = 'Coldsnap' ORDER BY c.convertedManaCost DESC LIMIT 1;"}, {"question_id": 485, "answer_sql": "SELECT date FROM rulings WHERE uuid IN (SELECT uuid FROM cards WHERE name = 'Reminisce');"}, {"question_id": 486, "answer_sql": "SELECT DIVIDE(SUM(CASE WHEN cards.convertedManaCost = 7 THEN 1 ELSE 0 END), SUM(1)) * 100 FROM cards WHERE cards.name = 'Coldsnap';"}, {"question_id": 487, "answer_sql": "SELECT DIVIDE(SUM(CASE WHEN cardKingdomFoilId = cardKingdomId AND cardKingdomId IS NOT NULL THEN 1 ELSE 0 END), COUNT(*)) * 100 FROM cards WHERE name = 'Coldsnap';"}, {"question_id": 488, "answer_sql": "SELECT code FROM sets WHERE releaseDate = '2017-07-14';"}, {"question_id": 489, "answer_sql": "SELECT keyruneCode FROM sets WHERE code = 'PKHC';"}, {"question_id": 490, "answer_sql": "SELECT mcmId FROM sets WHERE code = 'SS2';"}, {"question_id": 491, "answer_sql": "SELECT s.mcmName FROM sets s WHERE s.releaseDate = '2017-06-09';"}, {"question_id": 492, "answer_sql": "SELECT type FROM sets WHERE code = 'UFA-1';"}, {"question_id": 493, "answer_sql": "SELECT code FROM sets WHERE name = 'Commander 2014 Oversized';"}, {"question_id": 494, "answer_sql": "SELECT c.name, r.text, c.hasContentWarning FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.artist = 'Jim Pavelec' AND c.hasContentWarning = 1;"}, {"question_id": 495, "answer_sql": "SELECT s.releaseDate FROM sets s JOIN cards c ON s.code = c.setCode WHERE c.name = 'Evacuation';"}, {"question_id": 496, "answer_sql": "SELECT baseSetSize FROM sets WHERE code = (SELECT code FROM set_translations WHERE translation = 'Rinascita di Alara');"}, {"question_id": 497, "answer_sql": "SELECT type FROM sets WHERE code = (SELECT code FROM set_translations WHERE translation = 'Huiti\u00e8me \u00e9dition');"}, {"question_id": 498, "answer_sql": "SELECT s.name FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.language = 'French' AND st.translation = 'Tendo Ice Bridge';"}, {"question_id": 499, "answer_sql": "SELECT COUNT(*) FROM set_translations WHERE setCode = (SELECT code FROM sets WHERE name = 'Salvat 2011');"}, {"question_id": 500, "answer_sql": "SELECT s.name FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.language = 'Japanese' AND EXISTS (SELECT 1 FROM cards c WHERE c.name = 'Fellwar Stone' AND c.uuid = st.uuid);"}, {"question_id": 501, "answer_sql": "SELECT name, convertedManaCost FROM cards WHERE setCode = 'Journey into Nyx Hero''s Path' ORDER BY convertedManaCost DESC LIMIT 1;"}, {"question_id": 502, "answer_sql": "SELECT releaseDate FROM sets WHERE code = (SELECT code FROM set_translations WHERE translation = 'Ola de fr\u00edo');"}, {"question_id": 503, "answer_sql": "SELECT s.type FROM sets s JOIN cards c ON s.code = c.setCode WHERE c.name = 'Samite Pilgrim';"}, {"question_id": 504, "answer_sql": "SELECT COUNT(*) FROM cards JOIN sets ON cards.setCode = sets.code WHERE cards.convertedManaCost = 3 AND sets.name = 'World Championship Decks 2004';"}, {"question_id": 505, "answer_sql": "SELECT translation FROM set_translations WHERE language = 'Chinese Simplified' AND setCode = (SELECT code FROM sets WHERE name = 'Mirrodin');"}, {"question_id": 506, "answer_sql": "SELECT DIVIDE(SUM(CASE WHEN cards.language = 'Japanese' AND cards.isNonFoilOnly = 1 THEN 1 ELSE 0 END), SUM(CASE WHEN cards.language = 'Japanese' THEN 1 ELSE 0 END)) * 100 AS percentage FROM cards;"}, {"question_id": 507, "answer_sql": "SELECT DIVIDE(SUM(CASE WHEN cards.language = 'Portuguese (Brazil)' AND cards.isOnlineOnly = 1 THEN 1 ELSE 0 END), SUM(CASE WHEN cards.language = 'Portuguese (Brazil)' THEN 1 ELSE 0 END)) * 100 AS percentage_online_only FROM cards;"}, {"question_id": 508, "answer_sql": "SELECT DISTINCT availability FROM cards WHERE artist = 'Aleksi Briclot' AND isTextless = 1;"}, {"question_id": 509, "answer_sql": "SELECT id FROM sets WHERE baseSetSize = (SELECT MAX(baseSetSize) FROM sets);"}, {"question_id": 510, "answer_sql": "```sql SELECT artist FROM cards WHERE faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL OR faceName IS NULL"}, {"question_id": 511, "answer_sql": "SELECT MAX(frameEffects) FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL;"}, {"question_id": 512, "answer_sql": "SELECT COUNT(*) FROM cards WHERE power IS NULL OR power = '*' AND hasFoil = 0 AND duelDeck = 'a';"}, {"question_id": 513, "answer_sql": "SELECT s.id FROM sets s JOIN sets_translations st ON s.code = st.setCode WHERE s.type = 'commander' ORDER BY s.totalSetSize DESC LIMIT 1;"}, {"question_id": 514, "answer_sql": "SELECT cards.name, cards.manaCost FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.format = 'duel' ORDER BY CAST(cards.manaCost AS REAL) DESC LIMIT 10;"}, {"question_id": 515, "answer_sql": "SELECT l.format FROM legalities l JOIN cards c ON l.uuid = c.uuid WHERE c.rarity = 'mythic' AND l.status = 'legal' AND c.originalReleaseDate = (SELECT MIN(originalReleaseDate) FROM cards WHERE rarity = 'mythic');"}, {"question_id": 516, "answer_sql": "SELECT COUNT(*) FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.artist = 'Volkan Baga' AND foreign_data.language = 'French';"}, {"question_id": 517, "answer_sql": "SELECT COUNT(*) FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.rarity = 'rare' AND c.types = 'Enchantment' AND c.name = 'Abundance' AND l.status = 'Legal';"}, {"question_id": 518, "answer_sql": "SELECT l.format, c.name FROM legalities l JOIN cards c ON l.uuid = c.uuid WHERE l.status = 'banned' GROUP BY l.format, c.name ORDER BY COUNT(*) DESC LIMIT 1;"}, {"question_id": 519, "answer_sql": "SELECT s.language FROM sets s WHERE s.code = (SELECT code FROM sets WHERE name = 'Battlebond');"}, {"question_id": 520, "answer_sql": "SELECT artist, MIN(artist) AS least_illustrated, format FROM cards GROUP BY artist ORDER BY least_illustrated LIMIT 1;"}, {"question_id": 521, "answer_sql": "SELECT status FROM cards WHERE frameVersion = '1997' AND artist = 'D. Alexander Gregory' AND hasContentWarning = 1 AND format = 'legacy';"}, {"question_id": 522, "answer_sql": "SELECT cards.name, legalities.format FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.edhrecRank = 1 AND legalities.status = 'banned';"}, {"question_id": 523, "answer_sql": "SELECT AVG(id) AS avg_sets, MAX(COUNT(language)) AS common_language FROM sets WHERE releaseDate BETWEEN '2012-01-01' AND '2015-12-31';"}, {"question_id": 524, "answer_sql": "SELECT DISTINCT artist FROM cards WHERE BorderColor = 'black' AND availability = 'arena';"}, {"question_id": 525, "answer_sql": "SELECT uuid FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.format = 'oldschool' AND (legalities.status = 'banned' OR legalities.status = 'restricted');"}, {"question_id": 526, "answer_sql": "SELECT COUNT(*) FROM cards WHERE artist = 'Matthew D. Wilson' AND availability = 'paper';"}, {"question_id": 527, "answer_sql": "SELECT r.text, r.date FROM rulings r JOIN cards c ON r.uuid = c.uuid WHERE c.artist = 'Kev Walker' ORDER BY r.date DESC;"}, {"question_id": 528, "answer_sql": "SELECT DISTINCT l.format FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.name IN ( SELECT name FROM cards WHERE c.setCode = ( SELECT code FROM sets WHERE name = 'Hour of Devastation' ) ) AND l.status = 'legal';"}, {"question_id": 529, "answer_sql": "SELECT s.name FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.language NOT LIKE '%Japanese%' AND st.language = 'Korean';"}, {"question_id": 530, "answer_sql": "SELECT DISTINCT frameVersion, name FROM cards WHERE artist = 'Allen Williams' AND (status = 'banned' OR status IS NULL);"}, {"question_id": 531, "answer_sql": "SELECT DisplayName, MAX(Reputation) AS MaxReputation FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') GROUP BY DisplayName HAVING MAX(Reputation) > (SELECT MAX(Reputation) FROM users WHERE DisplayName = 'Harlan') OR MAX(Reputation) > (SELECT MAX(Reputation) FROM users WHERE DisplayName = 'Jarrod Dixon')"}, {"question_id": 532, "answer_sql": "SELECT DisplayName FROM users WHERE CreationDate >= '2014-01-01' AND CreationDate <= '2014-12-31';"}, {"question_id": 533, "answer_sql": "SELECT COUNT(*) FROM users WHERE LastAccessDate > '2014-09-01 00:00:00';"}, {"question_id": 534, "answer_sql": "SELECT DisplayName FROM users WHERE Id = (SELECT UserId FROM (SELECT UserId, COUNT(*) AS Views FROM posts GROUP BY UserId) AS temp WHERE Views = (SELECT MAX(Views) FROM posts));"}, {"question_id": 535, "answer_sql": "SELECT COUNT(*) FROM users WHERE UpVotes > 100 AND DownVotes > 1;"}, {"question_id": 536, "answer_sql": "SELECT COUNT(*) FROM users WHERE Views > 10 AND STRFTIME('%Y', CreationDate) > '2013';"}, {"question_id": 537, "answer_sql": "SELECT COUNT(*) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie');"}, {"question_id": 538, "answer_sql": "SELECT p.Title FROM posts p INNER JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'csgillespie';"}, {"question_id": 539, "answer_sql": "SELECT UserDisplayName FROM posts WHERE Title = 'Eliciting priors from experts';"}, {"question_id": 540, "answer_sql": "SELECT p.Title FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'csgillespie' ORDER BY p.ViewCount DESC LIMIT 1;"}, {"question_id": 541, "answer_sql": "SELECT u.DisplayName FROM users u INNER JOIN posts p ON u.Id = p.OwnerUserId WHERE p.FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts);"}, {"question_id": 542, "answer_sql": "SELECT SUM(c.CommentCount) FROM comments c JOIN posts p ON c.PostId = p.Id JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'csgillespie';"}, {"question_id": 543, "answer_sql": "SELECT MAX(posts.AnswerCount) FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'csgillespie';"}, {"question_id": 544, "answer_sql": "SELECT LastEditorDisplayName FROM posts WHERE Title = 'Examples for teaching: Correlation does not mean causation';"}, {"question_id": 545, "answer_sql": "SELECT COUNT(*) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie') AND ParentId IS NULL;"}, {"question_id": 546, "answer_sql": "SELECT DISTINCT u.DisplayName FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE p.ClosedDate IS NOT NULL;"}, {"question_id": 547, "answer_sql": "SELECT COUNT(*) FROM posts WHERE OwnerUserId IN (SELECT Id FROM users WHERE Age > 65) AND Score >= 20;"}, {"question_id": 548, "answer_sql": "SELECT u.Location FROM users u INNER JOIN posts p ON u.Id = p.OwnerUserId WHERE p.Title = 'Eliciting priors from experts';"}, {"question_id": 549, "answer_sql": "SELECT p.Body FROM posts p JOIN tags t ON p.Id = t.ExcerptPostId WHERE t.TagName = 'bayesian';"}, {"question_id": 550, "answer_sql": "SELECT p.Body FROM posts p JOIN tags t ON p.Id = t.ExcerptPostId WHERE t.Count = (SELECT MAX(Count) FROM tags);"}, {"question_id": 551, "answer_sql": "SELECT COUNT(*) FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie');"}, {"question_id": 552, "answer_sql": "SELECT Name FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie');"}, {"question_id": 553, "answer_sql": "SELECT COUNT(*) FROM badges WHERE UserId IN (SELECT Id FROM users WHERE DisplayName = 'csgillespie') AND YEAR(Date) = 2011;"}, {"question_id": 554, "answer_sql": "SELECT u.DisplayName FROM users u INNER JOIN ( SELECT UserId FROM badges GROUP BY UserId ORDER BY COUNT(Id) DESC LIMIT 1 ) b ON u.Id = b.UserId;"}, {"question_id": 555, "answer_sql": "SELECT AVG(posts.Score) FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'csgillespie';"}, {"question_id": 556, "answer_sql": "SELECT AVG(COUNT(badges.Id)) AS AverageBadges FROM users JOIN badges ON users.Id = badges.UserId WHERE users.Views > 200;"}, {"question_id": 557, "answer_sql": "SELECT (COUNT(DISTINCT CASE WHEN u.Age > 65 THEN p.Id END) * 100) / COUNT(DISTINCT p.Id) AS Percentage FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.Score > 20;"}, {"question_id": 558, "answer_sql": "SELECT COUNT(*) FROM votes WHERE UserId = 58 AND CreationDate = '2010-07-19';"}, {"question_id": 559, "answer_sql": "SELECT MAX(CreationDate) FROM votes;"}, {"question_id": 560, "answer_sql": "SELECT COUNT(*) FROM badges WHERE Name = 'Revival';"}, {"question_id": 561, "answer_sql": "SELECT p.Title FROM posts p JOIN ( SELECT PostId FROM comments WHERE Score = (SELECT MAX(Score) FROM comments) ) c ON p.Id = c.PostId;"}, {"question_id": 562, "answer_sql": "SELECT COUNT(comments.Id) FROM posts JOIN comments ON posts.Id = comments.PostId WHERE posts.ViewCount = 1910;"}, {"question_id": 563, "answer_sql": "SELECT p.FavoriteCount FROM posts p JOIN comments c ON p.Id = c.PostId WHERE c.UserId = 3025 AND c.CreationDate = '2014/4/23 20:29:39.0';"}, {"question_id": 564, "answer_sql": "SELECT c.Text FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.ParentId = 107829 AND c.CommentCount = 1;"}, {"question_id": 565, "answer_sql": "SELECT p.Title, p.LastEditDate, p.ClosedDate FROM posts p JOIN comments c ON p.Id = c.PostId WHERE c.UserId = 23853 AND c.CreationDate = '2013-07-12 09:08:18.0' LIMIT 1;"}, {"question_id": 566, "answer_sql": "SELECT users.Reputation FROM users INNER JOIN posts ON users.Id = posts.OwnerUserId WHERE posts.Id = 65041;"}, {"question_id": 567, "answer_sql": "SELECT COUNT(*) FROM posts WHERE OwnerUserId IN ( SELECT Id FROM users WHERE DisplayName = 'Tiago Pasqualini' );"}, {"question_id": 568, "answer_sql": "SELECT u.DisplayName FROM users u JOIN votes v ON u.Id = v.UserId WHERE v.Id = 6347;"}, {"question_id": 569, "answer_sql": "SELECT COUNT(*) FROM votes WHERE PostId IN (SELECT Id FROM posts WHERE Title LIKE '%data visualization%');"}, {"question_id": 570, "answer_sql": "SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'DatEpicCoderGuyWhoPrograms';"}, {"question_id": 571, "answer_sql": "SELECT CAST(COUNT(posts.Id) AS REAL) / COUNT(votes.Id) AS TimesPostsToVotes FROM posts JOIN users ON posts.OwnerUserId = users.Id JOIN votes ON posts.OwnerUserId = votes.UserId WHERE users.Id = 24;"}, {"question_id": 572, "answer_sql": "SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer';"}, {"question_id": 573, "answer_sql": "SELECT Text FROM comments WHERE Score = 17;"}, {"question_id": 574, "answer_sql": "SELECT DisplayName FROM users WHERE WebsiteUrl = 'http://stackoverflow.com';"}, {"question_id": 575, "answer_sql": "SELECT Name FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'SilentGhost');"}, {"question_id": 576, "answer_sql": "SELECT u.DisplayName FROM users u INNER JOIN comments c ON u.Id = c.UserId WHERE c.Text = 'thank you user93!';"}, {"question_id": 577, "answer_sql": "SELECT Text FROM comments WHERE UserId IN (SELECT Id FROM users WHERE DisplayName = 'A Lion.');"}, {"question_id": 578, "answer_sql": "SELECT u.DisplayName, u.Reputation FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.Title = 'Understanding what Dassault iSight is doing?';"}, {"question_id": 579, "answer_sql": "SELECT comments.Text FROM comments JOIN posts ON comments.PostId = posts.Id WHERE posts.Title = 'How does gentle boosting differ from AdaBoost?';"}, {"question_id": 580, "answer_sql": "SELECT users.DisplayName FROM users JOIN badges ON users.Id = badges.UserId WHERE badges.Name = 'Necromancer' LIMIT 10;"}, {"question_id": 581, "answer_sql": "SELECT LastEditorDisplayName FROM posts WHERE Title = 'Open source tools for visualizing multi-dimensional data';"}, {"question_id": 582, "answer_sql": "SELECT p.Title FROM posts p JOIN users u ON p.LastEditorUserId = u.Id WHERE u.DisplayName = 'Vebjorn Ljosa';"}, {"question_id": 583, "answer_sql": "SELECT SUM(p.Score) AS TotalScore, u.WebsiteUrl FROM posts p JOIN users u ON p.LastEditorUserId = u.Id WHERE u.DisplayName = 'Yevgeny';"}, {"question_id": 584, "answer_sql": "SELECT c.Text FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.Title = 'Why square the difference instead of taking the absolute value in standard deviation?' AND p.LastEditorUserId IN ( SELECT u.Id FROM users u JOIN postHistory ph ON u.Id = ph.UserId WHERE ph.PostId = p.Id );"}, {"question_id": 585, "answer_sql": "SELECT SUM(votes.BountyAmount) FROM votes JOIN posts ON votes.PostId = posts.Id WHERE posts.Title LIKE '%data%';"}, {"question_id": 586, "answer_sql": "SELECT users.DisplayName FROM users JOIN votes ON users.Id = votes.UserId JOIN posts ON votes.PostId = posts.Id WHERE posts.Title LIKE '%variance%' AND votes.BountyAmount = 50;"}, {"question_id": 587, "answer_sql": "SELECT p.Title, c.Text, c.Score, AVG(p.ViewCount) AS AvgViewCount FROM posts p JOIN tags t ON p.Id = t.ExcerptPostId JOIN comments c ON p.Id = c.PostId WHERE t.TagName = 'humor' GROUP BY p.Title, c.Text, c.Score;"}, {"question_id": 588, "answer_sql": "SELECT COUNT(*) FROM comments WHERE UserId = 13;"}, {"question_id": 589, "answer_sql": "SELECT Id FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users);"}, {"question_id": 590, "answer_sql": "SELECT Id FROM users WHERE Views = (SELECT MIN(Views) FROM users);"}, {"question_id": 591, "answer_sql": "SELECT COUNT(*) FROM badges WHERE Name = 'Supporter' AND Date BETWEEN '2011-01-01' AND '2011-12-31';"}, {"question_id": 592, "answer_sql": "SELECT COUNT(DISTINCT u.Id) FROM users u JOIN badges b ON u.Id = b.UserId GROUP BY u.Id HAVING COUNT(b.Name) > 5;"}, {"question_id": 593, "answer_sql": "SELECT COUNT(DISTINCT u.Id) FROM users u JOIN badges b1 ON u.Id = b1.UserId AND b1.Name = 'Supporter' JOIN badges b2 ON u.Id = b2.UserId AND b2.Name = 'Teacher' WHERE u.Location = 'New York';"}, {"question_id": 594, "answer_sql": "SELECT u.DisplayName, u.Reputation FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE p.Id = 1;"}, {"question_id": 595, "answer_sql": "SELECT DISTINCT u.UserId FROM users u JOIN posts p ON u.Id = p.OwnerUserId JOIN postHistory ph ON p.Id = ph.PostId GROUP BY ph.PostId, u.UserId HAVING COUNT(DISTINCT ph.Id) = 1 AND u.Views >= 1000;"}, {"question_id": 596, "answer_sql": "SELECT u.Id, u.DisplayName, b.Name AS BadgeName FROM users u JOIN ( SELECT UserId, COUNT(Id) AS CommentCount FROM comments GROUP BY UserId ORDER BY CommentCount DESC LIMIT 1 ) c ON u.Id = c.UserId JOIN badges b ON u.Id = b.UserId;"}, {"question_id": 597, "answer_sql": "SELECT COUNT(*) FROM users JOIN badges ON users.Id = badges.UserId WHERE users.Location = 'India' AND badges.Name = 'Teacher';"}, {"question_id": 598, "answer_sql": "SELECT COUNT(Name) AS count_2010 FROM badges WHERE Year(Date) = 2010 AND Name = 'Students' ), count_2011 AS ( SELECT COUNT(Name) AS count_2011 FROM badges WHERE Year(Date) = 2011 AND Name = 'Students' ), total_count AS ( SELECT COUNT(Name) AS total_count FROM badges WHERE Name = 'Students' ) SELECT (count_2010.count_2010 * 100 / total_count.total_count) - (count_2011.count_2011 * 100 / total_count.total_count) AS percentage_difference FROM count_2010, count_2011, total_count;"}, {"question_id": 599, "answer_sql": "SELECT ph.PostHistoryTypeId, COUNT(DISTINCT c.UserId) AS UniqueUsers FROM postHistory ph JOIN posts p ON ph.PostId = p.Id LEFT JOIN comments c ON p.Id = c.PostId WHERE p.Id = 3720 GROUP BY ph.PostHistoryTypeId;"}, {"question_id": 600, "answer_sql": "SELECT p.Id, p.ViewCount FROM posts p JOIN postLinks pl ON p.Id = pl.PostId WHERE pl.RelatedPostId = 61217;"}, {"question_id": 601, "answer_sql": "SELECT Score, LinkTypeId FROM posts WHERE Id = 395;"}, {"question_id": 602, "answer_sql": "SELECT p.Id AS PostId, u.Id AS UserId FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.Score > 60;"}, {"question_id": 603, "answer_sql": "SELECT SUM(favoriteCount) FROM posts WHERE UserId = 686 AND YEAR(CreationDate) = 2011;"}, {"question_id": 604, "answer_sql": "SELECT AVG(u.UpVotes) AS AvgUpvotes, AVG(u.Age) AS AvgAge FROM users u JOIN ( SELECT UserId FROM posts GROUP BY UserId HAVING COUNT(*) > 10 ) p ON u.Id = p.UserId;"}, {"question_id": 605, "answer_sql": "SELECT COUNT(DISTINCT u.Id) FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Name = 'Announcer';"}, {"question_id": 606, "answer_sql": "SELECT Name FROM badges WHERE Date = '2010-07-19 19:39:08';"}, {"question_id": 607, "answer_sql": "SELECT COUNT(*) FROM comments WHERE Score > 60;"}, {"question_id": 608, "answer_sql": "SELECT Text FROM comments WHERE CreationDate = '2010-07-19 19:16:14.0';"}, {"question_id": 609, "answer_sql": "SELECT COUNT(*) FROM posts WHERE Score = 10;"}, {"question_id": 610, "answer_sql": "SELECT DISTINCT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Reputation = (SELECT MAX(Reputation) FROM users);"}, {"question_id": 611, "answer_sql": "SELECT u.Reputation FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Date = '2010-07-19 19:39:08.0';"}, {"question_id": 612, "answer_sql": "SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'Pierre';"}, {"question_id": 613, "answer_sql": "SELECT b.Date FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Location = 'Rochester, NY';"}, {"question_id": 614, "answer_sql": "SELECT (COUNT(DISTINCT b.UserId) * 100) / COUNT(DISTINCT u.UserId) AS Percentage FROM badges b JOIN users u ON b.UserId = u.Id WHERE b.Name = 'Teacher';"}, {"question_id": 615, "answer_sql": "SELECT (COUNT(DISTINCT CASE WHEN u.Age BETWEEN 13 AND 18 THEN u.Id END) * 100) / COUNT(DISTINCT u.Id) AS percentage FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Name = 'Organizer';"}, {"question_id": 616, "answer_sql": "SELECT c.Score FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.CreationDate = '2010-07-19 19:19:56.0';"}, {"question_id": 617, "answer_sql": "SELECT Text FROM comments WHERE CreationDate = '2010-07-19 19:37:33.0' AND PostId IN (SELECT Id FROM posts WHERE CreationDate = '2010-07-19 19:37:33.0');"}, {"question_id": 618, "answer_sql": "SELECT users.Age FROM users JOIN badges ON users.Id = badges.UserId WHERE users.Location = 'Vienna, Austria';"}, {"question_id": 619, "answer_sql": "SELECT COUNT(*) FROM badges JOIN users ON badges.UserId = users.Id WHERE badges.Name = 'Supporter' AND users.Age BETWEEN 19 AND 65;"}, {"question_id": 620, "answer_sql": "SELECT SUM(u.Views) FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Date = '2010-07-19 19:39:08.0';"}, {"question_id": 621, "answer_sql": "SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Reputation = (SELECT MIN(Reputation) FROM users);"}, {"question_id": 622, "answer_sql": "SELECT b.Name FROM badges b INNER JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'Sharpie';"}, {"question_id": 623, "answer_sql": "SELECT COUNT(*) FROM badges JOIN users ON badges.UserId = users.Id WHERE badges.Name = 'Supporter' AND users.Age > 65;"}, {"question_id": 624, "answer_sql": "SELECT DisplayName FROM users WHERE Id = 30;"}, {"question_id": 625, "answer_sql": "SELECT COUNT(*) FROM users WHERE Location = 'New York';"}, {"question_id": 626, "answer_sql": "SELECT COUNT(*) FROM votes WHERE YEAR(CreationDate) = 2010;"}, {"question_id": 627, "answer_sql": "SELECT COUNT(*) FROM users WHERE Age BETWEEN 19 AND 65;"}, {"question_id": 628, "answer_sql": "SELECT DisplayName FROM users WHERE Views = (SELECT MAX(Views) FROM users);"}, {"question_id": 629, "answer_sql": "SELECT DIVIDE(COUNT(Id) WHERE YEAR(CreationDate) = 2010, COUNT(Id) WHERE YEAR(CreationDate) = 2011) FROM votes;"}, {"question_id": 630, "answer_sql": "SELECT t.TagName FROM tags t JOIN users u ON t.ExcerptPostId = u.Id WHERE u.DisplayName = 'John Stauffer';"}, {"question_id": 631, "answer_sql": "SELECT COUNT(*) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Daniel Vassallo');"}, {"question_id": 632, "answer_sql": "SELECT COUNT(*) FROM votes WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'Harlan');"}, {"question_id": 633, "answer_sql": "SELECT p.Id AS PostId FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'slashnick' AND p.AnswerCount = (SELECT MAX(AnswerCount) FROM posts WHERE OwnerUserId = u.Id);"}, {"question_id": 634, "answer_sql": "SELECT p.OwnerDisplayName, MAX(SUM(p.ViewCount)) AS TotalViewCount FROM posts p WHERE (p.OwnerDisplayName = 'Harvey Motulsky' OR p.OwnerDisplayName = 'Noah Snyder') GROUP BY p.OwnerDisplayName HAVING MAX(SUM(p.ViewCount)) > 0 ORDER BY TotalViewCount DESC LIMIT 1;"}, {"question_id": 635, "answer_sql": "SELECT COUNT(*) FROM posts WHERE DisplayName = 'Matt Parker' AND Id IN (SELECT PostId FROM votes WHERE VoteTypeId = 1 AND PostId IN (SELECT Id FROM posts WHERE DisplayName = 'Matt Parker') AND Vote > 4);"}, {"question_id": 636, "answer_sql": "SELECT COUNT(*) FROM comments c JOIN posts p ON c.PostId = p.Id JOIN users u ON c.UserId = u.Id WHERE u.DisplayName = 'Neil McGuigan' AND c.Score < 60;"}, {"question_id": 637, "answer_sql": "SELECT DISTINCT t.TagName FROM tags t JOIN posts p ON t.ExcerptPostId = p.Id JOIN users u ON p.OwnerUserId = u.Id JOIN comments c ON p.Id = c.PostId WHERE u.DisplayName = 'Mark Meckes' AND c.Id IS NULL;"}, {"question_id": 638, "answer_sql": "SELECT u.DisplayName FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Name = 'Organizer';"}, {"question_id": 639, "answer_sql": "SELECT DIVIDE(COUNT(posts.Id), (SELECT COUNT(posts.Id) FROM posts WHERE posts.OwnerDisplayName = 'Community'), 0) AS percentage FROM posts WHERE posts.OwnerDisplayName = 'Community' AND posts.Tags LIKE '%r%';"}, {"question_id": 640, "answer_sql": "SELECT SUM(p.ViewCount) AS MorningtonViewCount, SUM(p2.ViewCount) AS AmosViewCount FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'Mornington' UNION ALL SELECT SUM(p2.ViewCount) AS MorningtonViewCount, SUM(p.ViewCount) AS AmosViewCount FROM posts p2 JOIN users u2 ON p2.OwnerUserId = u2.Id WHERE u2.DisplayName = 'Amos'"}, {"question_id": 641, "answer_sql": "SELECT COUNT(*) FROM badges WHERE Name = 'commentator' AND Date BETWEEN '2014-01-01' AND '2014-12-31';"}, {"question_id": 642, "answer_sql": "SELECT COUNT(*) FROM posts WHERE CreationDate BETWEEN '2010-07-21 00:00:00' AND '2012-07-21 23:59:59';"}, {"question_id": 643, "answer_sql": "SELECT u.DisplayName, u.Age FROM users u WHERE u.Views = (SELECT MAX(Views) FROM users);"}, {"question_id": 644, "answer_sql": "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Detecting a given face in a database of facial images';"}, {"question_id": 645, "answer_sql": "SELECT COUNT(*) FROM comments WHERE UserId = 13 AND Score < 60;"}, {"question_id": 646, "answer_sql": "SELECT p.Title, u.DisplayName FROM posts p JOIN comments c ON p.Id = c.PostId WHERE c.Score > 60;"}, {"question_id": 647, "answer_sql": "SELECT Name FROM badges WHERE Date LIKE '2011-%' AND UserId IN (SELECT Id FROM users WHERE Location = 'North Pole');"}, {"question_id": 648, "answer_sql": "SELECT u.DisplayName, u.WebsiteUrl FROM users u JOIN posts p ON u.Id = p.OwnerUserId JOIN (SELECT PostId FROM posts WHERE FavoriteCount > 150) sub ON p.Id = sub.PostId;"}, {"question_id": 649, "answer_sql": "SELECT COUNT(*) AS post_history_count, MAX(LastEditDate) AS last_edit_date FROM postHistory WHERE PostId IN ( SELECT Id FROM posts WHERE Title = 'What is the best introductory Bayesian statistics textbook?' )"}, {"question_id": 650, "answer_sql": "SELECT u.LastAccessDate, u.Location FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Name = 'Outliers';"}, {"question_id": 651, "answer_sql": "SELECT p.Title FROM posts p JOIN postLinks pl ON p.Id = pl.PostId JOIN posts relatedPost ON pl.RelatedPostId = relatedPost.Id WHERE relatedPost.Title = 'How to tell if something happened in a data set which monitors a value over time';"}, {"question_id": 652, "answer_sql": "SELECT p.Id AS PostId, b.Name AS BadgeName FROM posts p JOIN badges b ON p.OwnerUserId = b.UserId WHERE p.OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Samuel') AND YEAR(p.CreaionDate) = 2013 AND YEAR(b.Date) = 2013;"}, {"question_id": 653, "answer_sql": "SELECT u.DisplayName FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.ViewCount = (SELECT MAX(ViewCount) FROM posts);"}, {"question_id": 654, "answer_sql": "SELECT u.DisplayName, u.Location FROM users u JOIN posts p ON u.Id = p.OwnerUserId JOIN tags t ON p.Id = t.ExcerptPostId WHERE t.TagName = 'hypothesis-testing';"}, {"question_id": 655, "answer_sql": "SELECT p.Title, pl.LinkTypeId FROM posts p JOIN postLinks pl ON p.Id = pl.PostId WHERE p.Title = 'What are principal component scores?';"}, {"question_id": 656, "answer_sql": "SELECT p.OwnerDisplayName AS ParentDisplayName FROM posts p WHERE p.Id IN ( SELECT PostId FROM posts WHERE ParentId IS NOT NULL ORDER BY Score DESC LIMIT 1 );"}, {"question_id": 657, "answer_sql": "SELECT u.DisplayName, u.WebsiteUrl FROM users u JOIN votes v ON u.Id = v.UserId WHERE v.VoteTypeId = 8 ORDER BY v.BountyAmount DESC LIMIT 1;"}, {"question_id": 658, "answer_sql": "SELECT Title FROM posts ORDER BY ViewCount DESC LIMIT 5;"}, {"question_id": 659, "answer_sql": "SELECT COUNT(*) FROM tags WHERE Count BETWEEN 5000 AND 7000;"}, {"question_id": 660, "answer_sql": "SELECT Post.OwnerUserId FROM posts JOIN ( SELECT PostId, MAX(FavoriteCount) AS MaxFavoriteCount FROM posts GROUP BY PostId ) AS PostFavorites ON Post.Id = PostFavorites.PostId WHERE PostFavorites.MaxFavoriteCount = ( SELECT MAX(FavoriteCount) FROM posts );"}, {"question_id": 661, "answer_sql": "SELECT users.Age FROM users WHERE users.Reputation = (SELECT MAX(Reputation) FROM users);"}, {"question_id": 662, "answer_sql": "SELECT COUNT(*) FROM posts JOIN votes ON posts.Id = votes.PostId WHERE posts.CreationDate BETWEEN '2011-01-01' AND '2011-12-31' AND votes.BountyAmount = 50;"}, {"question_id": 663, "answer_sql": "SELECT Id FROM users ORDER BY Age ASC LIMIT 1;"}, {"question_id": 664, "answer_sql": "SELECT MAX(p.Score) AS MostPopularTagScore FROM posts p JOIN tags t ON p.Id = t.ExcerptPostId WHERE t.Count = (SELECT MAX(Count) FROM tags);"}, {"question_id": 665, "answer_sql": "SELECT DIVIDE(COUNT(DISTINCT p.Id), 12) AS AvgMonthlyLinks FROM posts p JOIN postLinks pl ON p.Id = pl.PostId WHERE YEAR(p.CreaionDate) = 2010 AND p.AnswerCount <= 2;"}, {"question_id": 666, "answer_sql": "SELECT posts.Id FROM posts JOIN votes ON posts.Id = votes.PostId WHERE votes.UserId = 1465 GROUP BY posts.Id ORDER BY posts.FavoriteCount DESC LIMIT 1;"}, {"question_id": 667, "answer_sql": "SELECT p.Title FROM posts p JOIN postLinks pl ON p.Id = pl.PostId WHERE pl.CreationDate = (SELECT MIN(CreationDate) FROM postLinks);"}, {"question_id": 668, "answer_sql": "SELECT u.DisplayName FROM users u JOIN badges b ON u.Id = b.UserId GROUP BY u.Id, u.DisplayName HAVING COUNT(b.Name) = (SELECT MAX(c.count) FROM (SELECT COUNT(Name) AS count FROM badges GROUP BY UserId) c);"}, {"question_id": 669, "answer_sql": "SELECT MIN(v.CreationDate) FROM votes v JOIN users u ON v.UserId = u.Id WHERE u.DisplayName = 'chl';"}, {"question_id": 670, "answer_sql": "SELECT MIN(users.CreationDate) FROM users JOIN posts ON users.Id = posts.OwnerUserId WHERE posts.OwnerUserId IN (SELECT Id FROM users ORDER BY Age ASC LIMIT 1)"}, {"question_id": 671, "answer_sql": "SELECT u.DisplayName FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Name = 'Autobiographer' AND b.Date = (SELECT MIN(Date) FROM badges WHERE Name = 'Autobiographer');"}, {"question_id": 672, "answer_sql": "SELECT COUNT(*) FROM users JOIN posts ON users.Id = posts.OwnerUserId JOIN ( SELECT PostId, SUM(FavoriteCount) AS TotalFavorites FROM posts GROUP BY PostId HAVING SUM(FavoriteCount) >= 4 ) AS favorite_count ON posts.Id = favorite_count.PostId WHERE users.Location = 'United Kingdom';"}, {"question_id": 673, "answer_sql": "SELECT AVG(v.PostId) FROM users u JOIN votes v ON u.Id = v.UserId WHERE u.Age = (SELECT MIN(Age) FROM users);"}, {"question_id": 674, "answer_sql": "SELECT DisplayName FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users);"}, {"question_id": 675, "answer_sql": "SELECT COUNT(*) FROM users WHERE Reputation > 2000 AND Views > 1000;"}, {"question_id": 676, "answer_sql": "SELECT DisplayName FROM users WHERE Age BETWEEN 19 AND 65;"}, {"question_id": 677, "answer_sql": "SELECT COUNT(*) FROM posts WHERE CreationDate >= '2010-01-01' AND CreationDate <= '2010-12-31' AND EXISTS (SELECT 1 FROM users WHERE users.DisplayName = 'Jay Stevens' AND users.Id = posts.OwnerUserId);"}, {"question_id": 678, "answer_sql": "SELECT p.Id, p.Title FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'Harvey Motulsky' ORDER BY p.ViewCount DESC LIMIT 1;"}, {"question_id": 679, "answer_sql": "SELECT posts.Id, posts.Title, users.DisplayName FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE posts.Score = (SELECT MAX(Score) FROM posts);"}, {"question_id": 680, "answer_sql": "SELECT AVG(posts.Score) FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'Stephen Turner';"}, {"question_id": 681, "answer_sql": "SELECT DISTINCT u.DisplayName FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE p.ViewCount > 20000 AND YEAR(p.CreaionDate) = 2011;"}, {"question_id": 682, "answer_sql": "SELECT p.Id, u.DisplayName FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE YEAR(p.CreationDate) = 2010 ORDER BY p.FavoriteCount DESC LIMIT 1;"}, {"question_id": 683, "answer_sql": "SELECT DIVIDE(COUNT(DISTINCT posts.OwnerUserId), COUNT(posts.Id)) * 100 AS percentage FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.Reputation > 1000 AND posts.CreationDate BETWEEN '2011-01-01' AND '2011-12-31';"}, {"question_id": 684, "answer_sql": "SELECT DIVIDE(COUNT(Id) WHERE Age BETWEEN 13 AND 18, COUNT(Id)) AS percentage FROM users;"}, {"question_id": 685, "answer_sql": "SELECT posts.OwnerDisplayName, posts.ViewCount FROM posts WHERE posts.Title = 'Computer Game Datasets';"}, {"question_id": 686, "answer_sql": "SELECT COUNT(*) FROM posts WHERE ViewCount > (SELECT AVG(ViewCount) FROM posts);"}, {"question_id": 687, "answer_sql": "SELECT COUNT(*) FROM comments WHERE PostId = (SELECT PostId FROM posts ORDER BY Score DESC LIMIT 1);"}, {"question_id": 688, "answer_sql": "SELECT COUNT(*) FROM posts WHERE ViewCount > 35000 AND CommentCount = 0;"}, {"question_id": 689, "answer_sql": "SELECT u.DisplayName, u.Location FROM users u JOIN posts p ON u.Id = p.LastEditorUserId WHERE p.Id = 183 AND p.LastEditDate = (SELECT MAX(LastEditDate) FROM posts WHERE Id = 183);"}, {"question_id": 690, "answer_sql": "SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'Emmett' AND b.Date = (SELECT MAX(Date) FROM badges WHERE UserId = u.Id);"}, {"question_id": 691, "answer_sql": "SELECT COUNT(*) FROM users WHERE Age BETWEEN 19 AND 65 AND UpVotes > 5000;"}, {"question_id": 692, "answer_sql": "SELECT MAX(T1.Date) - MIN(users.CreationDate) AS TimeTaken FROM badges AS T1 JOIN users ON T1.UserId = users.Id WHERE users.DisplayName = 'Zolomon';"}, {"question_id": 693, "answer_sql": "SELECT COUNT(DISTINCT p.Id) AS post_count, COUNT(DISTINCT c.Id) AS comment_count FROM users u JOIN posts p ON u.Id = p.OwnerUserId LEFT JOIN comments c ON p.Id = c.PostId WHERE u.CreationDate = (SELECT MAX(CreationDate) FROM users);"}, {"question_id": 694, "answer_sql": "SELECT c.Text, u.DisplayName FROM comments c JOIN users u ON c.UserId = u.Id WHERE c.PostId IN ( SELECT p.Id FROM posts p WHERE p.Title = 'Analysing wind data with R' ) AND c.CreationDate = ( SELECT MAX(cc.CreationDate) FROM comments cc WHERE cc.PostId = c.PostId );"}, {"question_id": 695, "answer_sql": "SELECT COUNT(*) FROM badges WHERE Name = 'Citizen Patrol';"}, {"question_id": 696, "answer_sql": "SELECT COUNT(*) FROM posts p JOIN tags t ON p.Id = t.ExcerptPostId WHERE t.TagName = 'careers';"}, {"question_id": 697, "answer_sql": "SELECT users.Reputation, posts.ViewCount FROM users JOIN posts ON users.Id = posts.OwnerUserId WHERE users.DisplayName = 'Jarrod Dixon';"}, {"question_id": 698, "answer_sql": "SELECT COUNT(DISTINCT c.Id) AS CommentCount, COUNT(DISTINCT a.Id) AS AnswerCount FROM comments c JOIN posts p ON c.PostId = p.Id JOIN answers a ON a.PostId = p.Id WHERE p.Title = 'Clustering 1D data';"}, {"question_id": 699, "answer_sql": "SELECT CreationDate FROM users WHERE DisplayName = 'IrishStat';"}, {"question_id": 700, "answer_sql": "SELECT COUNT(*) FROM posts WHERE BountyAmount >= 30;"}, {"question_id": 701, "answer_sql": "SELECT DIVIDE(COUNT(DISTINCT posts.Id), COUNT(DISTINCT users.Id)) as percentage FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.Reputation = (SELECT MAX(Reputation) FROM users);"}, {"question_id": 702, "answer_sql": "SELECT COUNT(*) FROM posts WHERE Score < 20;"}, {"question_id": 703, "answer_sql": "SELECT COUNT(*) FROM tags WHERE Id < 15 AND Count <= 20;"}, {"question_id": 704, "answer_sql": "SELECT t.ExcerptPostId, t.WikiPostId FROM tags t WHERE t.TagName = 'sample';"}, {"question_id": 705, "answer_sql": "SELECT u.Reputation, COUNT(*) as UpVotes FROM users u JOIN comments c ON u.Id = c.UserId WHERE c.Text = 'fine, you win :)' GROUP BY u.Id;"}, {"question_id": 706, "answer_sql": "SELECT c.Text FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.Title = 'How can I adapt ANOVA for binary data?';"}, {"question_id": 707, "answer_sql": "SELECT c.Id, c.Score, c.Text FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.ViewCount BETWEEN 100 AND 150 ORDER BY c.Score DESC LIMIT 1;"}, {"question_id": 708, "answer_sql": "SELECT u.CreationDate, u.Age FROM users u JOIN comments c ON u.Id = c.UserId WHERE c.Text LIKE '%http%'"}, {"question_id": 709, "answer_sql": "SELECT COUNT(*) FROM comments c JOIN posts p ON c.PostId = p.Id WHERE c.Score = 0 AND p.ViewCount < 5;"}, {"question_id": 710, "answer_sql": "SELECT COUNT(*) FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.CommentCount = 1 AND c.Score = 0;"}, {"question_id": 711, "answer_sql": "SELECT COUNT(DISTINCT u.Id) FROM comments c JOIN users u ON c.UserId = u.Id WHERE c.Score = 0 AND u.Age = 40;"}, {"question_id": 712, "answer_sql": "SELECT p.Id AS PostId, c.Id AS CommentId FROM posts p JOIN comments c ON p.Id = c.PostId WHERE p.Title = 'Group differences on a five point Likert item';"}, {"question_id": 713, "answer_sql": "SELECT u.Reputation FROM users u JOIN comments c ON u.Id = c.UserId WHERE c.Text = 'R is also lazy evaluated.';"}, {"question_id": 714, "answer_sql": "SELECT c.Text FROM comments c JOIN users u ON c.UserId = u.Id WHERE u.DisplayName = 'Harvey Motulsky';"}, {"question_id": 715, "answer_sql": "SELECT u.DisplayName FROM users u JOIN comments c ON u.Id = c.UserId WHERE c.Score BETWEEN 1 AND 5 AND c.DownVotes = 0;"}, {"question_id": 716, "answer_sql": "SELECT DIVIDE(COUNT(DISTINCT c.UserId), COUNT(DISTINCT c.UserId WHERE c.Score BETWEEN 5 AND 10)) AS percentage FROM comments c WHERE c.Score BETWEEN 5 AND 10 AND c.Score IS NOT NULL AND c.UpVotes = 0;"}, {"question_id": 717, "answer_sql": "SELECT sp.power_name FROM superpower sp JOIN hero_power hp ON sp.id = hp.power_id JOIN superhero sh ON hp.hero_id = sh.id WHERE sh.superhero_name = '3-D Man';"}, {"question_id": 718, "answer_sql": "SELECT COUNT(*) FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Super Strength';"}, {"question_id": 719, "answer_sql": "SELECT COUNT(*) FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Super Strength' AND s.height_cm > 200;"}, {"question_id": 720, "answer_sql": "SELECT full_name FROM superhero WHERE (SELECT COUNT(*) FROM hero_power WHERE hero_power.hero_id = superhero.id) > 15;"}, {"question_id": 721, "answer_sql": "SELECT COUNT(*) FROM superhero s JOIN colour c ON s.eye_colour_id = c.id WHERE c.colour = 'Blue';"}, {"question_id": 722, "answer_sql": "SELECT c.colour FROM colour c JOIN superhero s ON s.skin_colour_id = c.id WHERE s.superhero_name = 'Apocalypse';"}, {"question_id": 723, "answer_sql": "SELECT COUNT(*) FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE s.eye_colour_id = (SELECT id FROM colour WHERE colour = 'Blue') AND sp.power_name = 'Agility' AND a.attribute_name = 'Agility';"}, {"question_id": 724, "answer_sql": "SELECT superhero_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE eye_colour_id IN (SELECT id FROM colour WHERE colour = 'Blue') AND hair_colour_id IN (SELECT id FROM colour WHERE colour = 'Blond') AND power_name = 'Agility';"}, {"question_id": 725, "answer_sql": "SELECT COUNT(*) FROM superhero s JOIN publisher p ON s.publisher_id = p.id WHERE p.publisher_name = 'Marvel Comics';"}, {"question_id": 726, "answer_sql": "SELECT full_name FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics') AND height_cm = (SELECT MAX(height_cm) FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics'));"}, {"question_id": 727, "answer_sql": "SELECT publisher_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = 'Sauron' LIMIT 1;"}, {"question_id": 728, "answer_sql": "SELECT COUNT(*) FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE s.publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics') AND s.eye_colour_id = (SELECT id FROM colour WHERE colour = 'Blue');"}, {"question_id": 729, "answer_sql": "SELECT AVG(height_cm) FROM superhero s INNER JOIN publisher p ON s.publisher_id = p.id WHERE p.publisher_name = 'Marvel Comics';"}, {"question_id": 730, "answer_sql": "SELECT (COUNT(s.id) * 100) / (SELECT COUNT(id) FROM superhero) AS percentage FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE s.publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics') AND sp.power_name = 'Super Strength';"}, {"question_id": 731, "answer_sql": "SELECT COUNT(*) FROM superhero s JOIN publisher p ON s.publisher_id = p.id WHERE p.publisher_name = 'DC Comics';"}, {"question_id": 732, "answer_sql": "SELECT publisher_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'Speed' AND ha.attribute_value = (SELECT MIN(attribute_value) FROM hero_attribute WHERE attribute_name = 'Speed') JOIN publisher p ON s.publisher_id = p.id;"}, {"question_id": 733, "answer_sql": "SELECT COUNT(*) FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'Eye Colour' AND sp.power_name = 'Gold' AND s.publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics');"}, {"question_id": 734, "answer_sql": "SELECT publisher_name FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero_name = 'Blue Beetle II';"}, {"question_id": 735, "answer_sql": "SELECT COUNT(*) FROM superhero s JOIN colour c ON s.hair_colour_id = c.id WHERE c.colour = 'Blond';"}, {"question_id": 736, "answer_sql": "SELECT superhero.superhero_name FROM superhero LEFT JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE hero_attribute.attribute_name = 'Intelligence' ORDER BY hero_attribute.attribute_value ASC LIMIT 1;"}, {"question_id": 737, "answer_sql": "SELECT race.race FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = 'Copycat';"}, {"question_id": 738, "answer_sql": "SELECT COUNT(*) FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id WHERE ha.attribute_name = 'Durability' AND ha.attribute_value < 50;"}, {"question_id": 739, "answer_sql": "SELECT superhero.superhero_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Death Touch';"}, {"question_id": 740, "answer_sql": "SELECT COUNT(*) FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE s.gender_id = (SELECT id FROM gender WHERE gender = 'Female') AND a.attribute_name = 'Strength' AND ha.attribute_value = 100;"}, {"question_id": 741, "answer_sql": "SELECT superhero_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id GROUP BY superhero.id ORDER BY COUNT(hero_power.power_id) DESC LIMIT 1;"}, {"question_id": 742, "answer_sql": "SELECT COUNT(*) FROM superhero s JOIN race r ON s.race_id = r.id WHERE r.race = 'Vampire';"}, {"question_id": 743, "answer_sql": "SELECT (SUM(CASE WHEN superhero.alignment_id IN (SELECT id FROM alignment WHERE alignment = 'Bad') THEN 1 ELSE 0 END) * 100) / COUNT(superhero.id) AS percentage, COUNT(superhero.id) AS count_superheroes FROM superhero WHERE superhero.publisher_id IN (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics');"}, {"question_id": 744, "answer_sql": "SELECT (SELECT COUNT(*) FROM superhero WHERE publisher_id IN (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics')) - (SELECT COUNT(*) FROM superhero WHERE publisher_id IN (SELECT id FROM publisher WHERE publisher_name = 'DC Comics')) AS difference;"}, {"question_id": 745, "answer_sql": "SELECT publisher_id FROM publisher WHERE publisher_name = 'Star Trek';"}, {"question_id": 746, "answer_sql": "SELECT AVG(hero_attribute.attribute_value) FROM hero_attribute JOIN superhero ON hero_attribute.hero_id = superhero.id;"}, {"question_id": 747, "answer_sql": "SELECT COUNT(*) FROM superhero WHERE full_name IS NULL;"}, {"question_id": 748, "answer_sql": "SELECT c.colour FROM colour c JOIN superhero s ON s.eye_colour_id = c.id WHERE s.id = 75;"}, {"question_id": 749, "answer_sql": "SELECT sp.power_name FROM superpower sp JOIN hero_power hp ON sp.id = hp.power_id JOIN superhero sh ON hp.hero_id = sh.id WHERE sh.superhero_name = 'Deathlok';"}, {"question_id": 750, "answer_sql": "SELECT AVG(weight_kg) FROM superhero WHERE gender_id = 2;"}, {"question_id": 751, "answer_sql": "SELECT sp.power_name FROM superpower sp JOIN hero_power hp ON sp.id = hp.power_id JOIN superhero sh ON hp.hero_id = sh.id JOIN gender g ON sh.gender_id = g.id WHERE g.gender = 'Male' LIMIT 5;"}, {"question_id": 752, "answer_sql": "SELECT superhero_name FROM superhero WHERE race_id IN (SELECT id FROM race WHERE race = 'Alien');"}, {"question_id": 753, "answer_sql": "SELECT superhero_name FROM superhero WHERE height_cm BETWEEN 170 AND 190 AND eye_colour_id IS NULL;"}, {"question_id": 754, "answer_sql": "SELECT sp.power_name FROM superpower sp JOIN hero_power hp ON sp.id = hp.power_id WHERE hp.hero_id = 56;"}, {"question_id": 755, "answer_sql": "SELECT full_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE race_id IN (SELECT id FROM race WHERE race = 'Demi-God') ORDER BY full_name LIMIT 5;"}, {"question_id": 756, "answer_sql": "SELECT COUNT(*) FROM superhero WHERE alignment_id = 1;"}, {"question_id": 757, "answer_sql": "SELECT race.race FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.weight_kg = 169;"}, {"question_id": 758, "answer_sql": "SELECT c.colour FROM colour c JOIN superhero s ON s.hair_colour_id = c.id WHERE s.height_cm = 185 AND s.race_id IN (SELECT r.id FROM race r WHERE r.race = 'human');"}, {"question_id": 759, "answer_sql": "SELECT c.colour FROM colour c JOIN (SELECT superhero.eye_colour_id FROM superhero WHERE superhero.weight_kg = (SELECT MAX(weight_kg) FROM superhero)) e ON c.id = e.superhero_eye_colour_id;"}, {"question_id": 760, "answer_sql": "SELECT (COUNT(*) * 100) / (SELECT COUNT(*) FROM superhero) AS percentage FROM superhero WHERE height_cm BETWEEN 150 AND 180 AND publisher_id = 13;"}, {"question_id": 761, "answer_sql": "SELECT superhero.full_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id WHERE superhero.gender_id IN (SELECT id FROM gender WHERE gender = 'Male') AND superhero.weight_kg > (SELECT AVG(weight_kg) * 0.79 FROM superhero)"}, {"question_id": 762, "answer_sql": "SELECT power_name, COUNT(*) as count FROM hero_power JOIN superpower ON hero_power.power_id = superpower.id GROUP BY power_name ORDER BY count DESC LIMIT 1;"}, {"question_id": 763, "answer_sql": "SELECT ha.attribute_value FROM hero_attribute ha JOIN superhero sh ON ha.hero_id = sh.id WHERE sh.superhero_name = 'Abomination';"}, {"question_id": 764, "answer_sql": "SELECT sp.power_name FROM hero_power hp JOIN superpower sp ON hp.power_id = sp.id WHERE hp.hero_id = 1;"}, {"question_id": 765, "answer_sql": "SELECT COUNT(*) FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'stealth';"}, {"question_id": 766, "answer_sql": "SELECT s.full_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id WHERE ha.attribute_name = 'strength' AND ha.attribute_value = (SELECT MAX(attribute_value) FROM hero_attribute WHERE attribute_name = 'strength');"}, {"question_id": 767, "answer_sql": "SELECT AVG(s.id) FROM superhero s LEFT JOIN colour c ON s.skin_colour_id = c.id WHERE c.id != 1;"}, {"question_id": 768, "answer_sql": "SELECT COUNT(*) FROM superhero s JOIN publisher p ON s.publisher_id = p.id WHERE p.publisher_name = 'Dark Horse Comics';"}, {"question_id": 769, "answer_sql": "SELECT superhero.superhero_name FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'durability' AND superhero.publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Dark Horse Comics') ORDER BY hero_attribute.attribute_value DESC LIMIT 1;"}, {"question_id": 770, "answer_sql": "SELECT c.colour FROM colour c JOIN superhero s ON s.eye_colour_id = c.id WHERE s.full_name = 'Abraham Sapien';"}, {"question_id": 771, "answer_sql": "SELECT superhero.superhero_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Flight';"}, {"question_id": 772, "answer_sql": "SELECT c1.colour, c2.colour, c3.colour FROM colour c1 JOIN hero_power hp ON c1.id = hp.hair_colour_id JOIN hero_power hp2 ON c2.id = hp2.eye_colour_id JOIN hero_power hp3 ON c3.id = hp3.skin_colour_id JOIN superhero s ON hp.hero_id = s.id AND hp2.hero_id = s.id AND hp3.hero_id = s.id JOIN gender g ON s.gender_id = g.id JOIN publisher p ON s.publisher_id = p.id WHERE g.gender = 'Female' AND p.publisher_name = 'Dark Horse Comics';"}, {"question_id": 773, "answer_sql": "SELECT superhero.superhero_name, publisher.publisher_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN colour AS hair_colour ON hair_colour.id = superhero.hair_colour_id JOIN colour AS eye_colour ON eye_colour.id = superhero.eye_colour_id JOIN colour AS skin_colour ON skin_colour.id = superhero.skin_colour_id JOIN publisher ON superhero.publisher_id = publisher.id WHERE hair_colour.id = skin_colour.id AND hair_colour.id = eye_colour.id;"}, {"question_id": 774, "answer_sql": "SELECT race.race FROM superhero JOIN race ON superhero.race_id = race.id WHERE superhero.superhero_name = 'A-Bomb';"}, {"question_id": 775, "answer_sql": "SELECT (SUM(CASE WHEN superhero.gender_id IN (SELECT id FROM gender WHERE gender = 'Female') AND superhero.skin_colour_id IN (SELECT id FROM colour WHERE colour = 'Blue') THEN 1 ELSE 0 END)) / (COUNT(CASE WHEN superhero.gender_id IN (SELECT id FROM gender WHERE gender = 'Female') THEN 1 ELSE NULL END)) * 100 AS percentage FROM superhero;"}, {"question_id": 776, "answer_sql": "SELECT superhero_name, race FROM superhero WHERE full_name = 'Charles Chandler';"}, {"question_id": 777, "answer_sql": "SELECT gender.gender FROM superhero JOIN gender ON superhero.gender_id = gender.id WHERE superhero.superhero_name = 'Agent 13';"}, {"question_id": 778, "answer_sql": "SELECT superhero.superhero_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Adaptation';"}, {"question_id": 779, "answer_sql": "SELECT COUNT(*) FROM hero_power WHERE hero_id = (SELECT id FROM superhero WHERE superhero_name = 'Amazo');"}, {"question_id": 780, "answer_sql": "SELECT sp.power_name FROM superpower sp JOIN hero_power hp ON sp.id = hp.power_id JOIN superhero sh ON hp.hero_id = sh.id WHERE sh.superhero_name = 'Hunter Zolomon';"}, {"question_id": 781, "answer_sql": "SELECT superhero.height_cm FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Amber';"}, {"question_id": 782, "answer_sql": "SELECT superhero_name FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id AND colour.colour = 'Black' JOIN colour ON superhero.hair_colour_id = colour.id AND colour.colour = 'Black';"}, {"question_id": 783, "answer_sql": "SELECT c.colour FROM colour c JOIN superhero s ON s.skin_colour_id = c.id WHERE c.colour = 'Gold';"}, {"question_id": 784, "answer_sql": "SELECT superhero.full_name FROM superhero JOIN race ON superhero.race_id = race.id WHERE race.race = 'Vampire';"}, {"question_id": 785, "answer_sql": "SELECT superhero_name FROM superhero JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.alignment = 'Neutral';"}, {"question_id": 786, "answer_sql": "SELECT COUNT(*) FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id WHERE ha.attribute_name = 'Strength' AND ha.attribute_value = (SELECT MAX(attribute_value) FROM hero_attribute WHERE attribute_name = 'Strength');"}, {"question_id": 787, "answer_sql": "SELECT race.race, alignment.alignment FROM superhero JOIN race ON superhero.race_id = race.id JOIN alignment ON superhero.alignment_id = alignment.id WHERE superhero.superhero_name = 'Cameron Hicks';"}, {"question_id": 788, "answer_sql": "SELECT (SUM(CASE WHEN superhero.gender_id IN (SELECT id FROM gender WHERE gender = 'Female') THEN 1 ELSE 0 END) * 100) / COUNT(DISTINCT superhero.publisher_id) FROM superhero WHERE superhero.publisher_id IN (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics');"}, {"question_id": 789, "answer_sql": "SELECT AVG(weight_kg) FROM superhero WHERE race_id IN (SELECT id FROM race WHERE race = 'Alien');"}, {"question_id": 790, "answer_sql": "SELECT SUM(weight_kg) AS weight_difference FROM superhero WHERE full_name = 'Emil Blonsky' - SELECT SUM(weight_kg) FROM superhero WHERE full_name = 'Charles Chandler';"}, {"question_id": 791, "answer_sql": "SELECT AVG(height_cm) AS average_height FROM superhero;"}, {"question_id": 792, "answer_sql": "SELECT sp.power_name FROM superhero sh JOIN hero_power hp ON sh.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sh.superhero_name = 'Abomination';"}, {"question_id": 793, "answer_sql": "SELECT COUNT(*) FROM superhero s JOIN gender g ON s.gender_id = g.id JOIN race r ON s.race_id = r.id WHERE r.race = 'god/eternal' AND g.gender = 'male';"}, {"question_id": 794, "answer_sql": "SELECT superhero_name FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE attribute_name = 'Speed' ORDER BY attribute_value DESC LIMIT 1;"}, {"question_id": 795, "answer_sql": "SELECT COUNT(*) FROM superhero WHERE alignment_id = 3;"}, {"question_id": 796, "answer_sql": "SELECT h.superhero_name, ha.attribute_name, ha.attribute_value FROM hero_attribute ha JOIN superhero h ON ha.hero_id = h.id WHERE h.superhero_name = '3-D Man';"}, {"question_id": 797, "answer_sql": "SELECT superhero.superhero_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE hero_power.hair_colour_id = 9 AND hero_power.eye_colour_id = 7;"}, {"question_id": 798, "answer_sql": "SELECT publisher_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE (superhero_name = 'Hawkman' OR superhero_name = 'Karate Kid' OR superhero_name = 'Speedy') AND superpower.power_name = 'Flying' AND hero_power.hero_id IN ( SELECT id FROM superhero WHERE superhero_name = 'Hawkman' OR superhero_name = 'Karate Kid' OR superhero_name = 'Speedy' )"}, {"question_id": 799, "answer_sql": "SELECT COUNT(*) FROM superhero WHERE publisher_id IS NULL;"}, {"question_id": 800, "answer_sql": "SELECT (COUNT(*) * 100.0) / NULLIF(SUM(CASE WHEN superhero.eye_colour_id = 7 THEN 1 ELSE 0 END), 0) AS percentage FROM superhero;"}, {"question_id": 801, "answer_sql": "SELECT SUM(CASE WHEN superhero.gender_id = 1 THEN 1 ELSE 0 END) / SUM(CASE WHEN superhero.gender_id = 2 THEN 1 ELSE 0 END) AS ratio;"}, {"question_id": 802, "answer_sql": "SELECT superhero_name FROM superhero ORDER BY height_cm DESC LIMIT 1;"}, {"question_id": 803, "answer_sql": "SELECT power_id FROM superpower WHERE power_name = 'cryokinesis';"}, {"question_id": 804, "answer_sql": "SELECT superhero_name FROM superhero WHERE id = 294;"}, {"question_id": 805, "answer_sql": "SELECT full_name FROM superhero WHERE weight_kg IN (0, NULL);"}, {"question_id": 806, "answer_sql": "SELECT c.colour FROM colour c JOIN superhero s ON s.eye_colour_id = c.id WHERE s.full_name = 'Karen Beecher-Duncan';"}, {"question_id": 807, "answer_sql": "SELECT sp.power_name FROM superpower sp JOIN hero_power hp ON sp.id = hp.power_id JOIN superhero sh ON hp.hero_id = sh.id WHERE sh.full_name = 'Helen Parr';"}, {"question_id": 808, "answer_sql": "SELECT race.race FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.weight_kg = 108 AND superhero.height_cm = 188;"}, {"question_id": 809, "answer_sql": "SELECT publisher.publisher_name FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.id = 38;"}, {"question_id": 810, "answer_sql": "SELECT race.race FROM race JOIN superhero ON race.id = superhero.race_id JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE hero_attribute.attribute_value = (SELECT MAX(attribute_value) FROM hero_attribute);"}, {"question_id": 811, "answer_sql": "SELECT alignment.alignment, superpower.power_name FROM superhero JOIN alignment ON superhero.alignment_id = alignment.id JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = 'Atom IV';"}, {"question_id": 812, "answer_sql": "SELECT superhero.full_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN colour ON hero_attribute.attribute_id = colour.id AND colour.colour = 'Blue' JOIN eye_colour_id ON superhero.eye_colour_id = eye_colour_id;"}, {"question_id": 813, "answer_sql": "SELECT AVG(ha.attribute_value) FROM hero_attribute ha JOIN superhero s ON ha.hero_id = s.id WHERE s.alignment_id = 3;"}, {"question_id": 814, "answer_sql": "SELECT c.colour FROM colour c JOIN superhero s ON s.skin_colour_id = c.id JOIN hero_attribute ha ON s.id = ha.hero_id WHERE ha.attribute_value = 100;"}, {"question_id": 815, "answer_sql": "SELECT COUNT(*) FROM superhero s JOIN gender g ON s.gender_id = g.id JOIN alignment a ON s.alignment_id = a.id WHERE g.gender = 'Female' AND a.alignment = 'Good';"}, {"question_id": 816, "answer_sql": "SELECT superhero_name FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE hero_attribute.attribute_value BETWEEN 75 AND 80;"}, {"question_id": 817, "answer_sql": "SELECT race.race FROM race JOIN superhero ON race.id = superhero.race_id JOIN hero_power ON superhero.id = hero_power.hero_id JOIN colour ON colour.id = superhero.hair_colour_id WHERE colour.colour = 'blue' AND gender.gender = 'male';"}, {"question_id": 818, "answer_sql": "SELECT (SUM(CASE WHEN superhero.gender_id = 2 THEN 1 ELSE 0 END) * 100.0) / COUNT(superhero.id) FROM superhero WHERE superhero.alignment_id = 2;"}, {"question_id": 819, "answer_sql": "SELECT (SELECT COUNT(*) FROM superhero WHERE weight_kg = 0 OR weight_kg IS NULL AND eye_colour_id = (SELECT id FROM colour WHERE colour = 'blue')) - (SELECT COUNT(*) FROM superhero WHERE weight_kg = 0 OR weight_kg IS NULL AND eye_colour_id = (SELECT id FROM colour WHERE colour = 'no eye color')) AS difference;"}, {"question_id": 820, "answer_sql": "SELECT ha.attribute_value FROM hero_attribute ha JOIN superhero sh ON ha.hero_id = sh.id WHERE sh.superhero_name = 'Hulk' AND ha.attribute_name = 'Strength';"}, {"question_id": 821, "answer_sql": "SELECT sp.power_name FROM superpower sp JOIN hero_power hp ON sp.id = hp.power_id JOIN superhero sh ON hp.hero_id = sh.id WHERE sh.superhero_name = 'Ajax';"}, {"question_id": 822, "answer_sql": "SELECT COUNT(*) FROM superhero s JOIN colour c ON s.skin_colour_id = c.id JOIN alignment a ON s.alignment_id = a.id WHERE c.colour = 'Green' AND a.alignment = 'Bad';"}, {"question_id": 823, "answer_sql": "SELECT COUNT(*) FROM superhero s JOIN gender g ON s.gender_id = g.id JOIN publisher p ON s.publisher_id = p.id WHERE g.gender = 'Female' AND p.publisher_name = 'Marvel Comics';"}, {"question_id": 824, "answer_sql": "SELECT superhero_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Wind Control' ORDER BY superhero_name ASC;"}, {"question_id": 825, "answer_sql": "SELECT s.gender_id FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN hero_attribute ha ON s.id = ha.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Phoenix Force';"}, {"question_id": 826, "answer_sql": "SELECT superhero_name FROM superhero WHERE publisher_name = 'DC Comics' ORDER BY weight_kg DESC LIMIT 1;"}, {"question_id": 827, "answer_sql": "SELECT AVG(height_cm) AS average_height FROM superhero WHERE race_id NOT IN (SELECT id FROM race WHERE race = 'Human') AND publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Dark Horse Comics');"}, {"question_id": 828, "answer_sql": "SELECT superhero.id, superhero.superhero_name FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE hero_attribute.attribute_name = 'Speed' AND hero_attribute.attribute_value = 100;"}, {"question_id": 829, "answer_sql": "SELECT (SELECT COUNT(*) FROM superhero WHERE publisher_id IN (SELECT id FROM publisher WHERE publisher_name = 'DC Comics')) - (SELECT COUNT(*) FROM superhero WHERE publisher_id IN (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics')) AS difference;"}, {"question_id": 830, "answer_sql": "SELECT ha.attribute_name, MIN(ha.attribute_value) AS min_value FROM hero_attribute ha JOIN superhero s ON ha.hero_id = s.id WHERE s.superhero_name = 'Black Panther' GROUP BY ha.attribute_name ORDER BY min_value LIMIT 1;"}, {"question_id": 831, "answer_sql": "SELECT c.colour FROM colour c JOIN superhero s ON s.eye_colour_id = c.id WHERE s.superhero_name = 'Abomination';"}, {"question_id": 832, "answer_sql": "SELECT superhero_name FROM superhero WHERE height_cm = (SELECT MAX(height_cm) FROM superhero);"}, {"question_id": 833, "answer_sql": "SELECT superhero_name FROM superhero WHERE full_name = 'Charles Chandler';"}, {"question_id": 834, "answer_sql": "SELECT (SUM(CASE WHEN superhero.gender_id IN (SELECT id FROM gender WHERE gender = 'Female') THEN 1 ELSE 0 END) * 100.0) / COUNT(*) FROM superhero WHERE superhero.publisher_id IN (SELECT id FROM publisher WHERE publisher_name = 'George Lucas');"}, {"question_id": 835, "answer_sql": "SELECT (SUM(CASE WHEN superhero.alignment_id IN (SELECT id FROM alignment WHERE alignment = 'Good') AND superhero.publisher_id IN (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics') THEN 1 ELSE 0 END) * 100.0) / COUNT(superhero.publisher_id) FROM superhero WHERE superhero.publisher_id IN (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics');"}, {"question_id": 836, "answer_sql": "SELECT COUNT(*) FROM superhero WHERE full_name LIKE 'John%';"}, {"question_id": 837, "answer_sql": "SELECT hero_id FROM hero_attribute WHERE attribute_value = (SELECT MIN(attribute_value) FROM hero_attribute);"}, {"question_id": 838, "answer_sql": "SELECT full_name FROM superhero WHERE superhero_name = 'Alien';"}, {"question_id": 839, "answer_sql": "SELECT superhero.full_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.weight_kg < 100 AND superpower.power_name = 'brown eyes';"}, {"question_id": 840, "answer_sql": "SELECT ha.attribute_value FROM hero_attribute ha JOIN superhero s ON ha.hero_id = s.id WHERE s.superhero_name = 'Aquababy';"}, {"question_id": 841, "answer_sql": "SELECT superhero.weight_kg, race.race FROM superhero JOIN race ON superhero.race_id = race.id WHERE superhero.id = 40;"}, {"question_id": 842, "answer_sql": "SELECT AVG(s.height_cm) FROM superhero s JOIN alignment a ON s.alignment_id = a.id WHERE a.alignment = 'neutral';"}, {"question_id": 843, "answer_sql": "SELECT h.id FROM superhero h JOIN hero_power hp ON h.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Intelligence';"}, {"question_id": 844, "answer_sql": "SELECT c.colour FROM colour c JOIN superhero s ON s.eye_colour_id = c.id WHERE s.superhero_name = 'Blackwulf';"}, {"question_id": 845, "answer_sql": "SELECT s.power_name FROM superpower s JOIN hero_power h ON s.id = h.power_id JOIN superhero su ON h.hero_id = su.id WHERE su.height_cm > AVG(su.height_cm) * 0.8;"}, {"question_id": 846, "answer_sql": "SELECT driverRef FROM drivers WHERE raceId = 18 AND driverId IN ( SELECT driverId FROM qualifying WHERE raceId = 18 AND q1 > ( SELECT MAX(q1) FROM qualifying WHERE raceId = 18 ) ORDER BY q1 DESC LIMIT 5 );"}, {"question_id": 847, "answer_sql": "SELECT DISTINCT d.surname FROM drivers d JOIN qualifying q ON d.driverId = q.driverId WHERE q.raceId = 19 AND q.q2 = (SELECT MIN(q2) FROM qualifying WHERE raceId = 19)"}, {"question_id": 848, "answer_sql": "SELECT DISTINCT year FROM races JOIN circuits ON circuits.circuitId = races.circuitId WHERE circuits.location = 'Shanghai';"}, {"question_id": 849, "answer_sql": "SELECT url FROM circuits WHERE name = 'Circuit de Barcelona-Catalunya';"}, {"question_id": 850, "answer_sql": "SELECT DISTINCT r.name FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.country = 'Germany';"}, {"question_id": 851, "answer_sql": "SELECT c.position FROM circuits c JOIN constructors co ON c.circuitRef = co.constructorRef WHERE co.name = 'Renault';"}, {"question_id": 852, "answer_sql": "SELECT COUNT(*) FROM races WHERE year = 2010 AND circuitId NOT IN ( SELECT circuitId FROM circuits WHERE location IN ('Asia', 'Europe') );"}, {"question_id": 853, "answer_sql": "SELECT DISTINCT r.name FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.country = 'Spain';"}, {"question_id": 854, "answer_sql": "SELECT lat, lng FROM circuits WHERE name = 'Australian Grand Prix';"}, {"question_id": 855, "answer_sql": "SELECT races.url FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.name = 'Sepang International Circuit';"}, {"question_id": 856, "answer_sql": "SELECT time FROM races WHERE circuitId IN (SELECT circuitId FROM circuits WHERE name = 'Sepang International Circuit')"}, {"question_id": 857, "answer_sql": "SELECT lat, lng FROM circuits WHERE name = 'Abu Dhabi Grand Prix';"}, {"question_id": 858, "answer_sql": "SELECT c.nationality FROM constructors c JOIN constructorResults cr ON c.constructorId = cr.constructorId JOIN races r ON r.raceId = cr.raceId WHERE r.raceId = 24 AND cr.points = 1;"}, {"question_id": 859, "answer_sql": "SELECT q1 FROM qualifying WHERE raceId = 354 AND driverId = (SELECT driverId FROM drivers WHERE forename = 'Bruno' AND surname = 'Senna');"}, {"question_id": 860, "answer_sql": "SELECT d.nationality FROM drivers d JOIN qualifying q ON d.driverId = q.driverId WHERE q.raceId = 355 AND q.q2 = '0:01:40';"}, {"question_id": 861, "answer_sql": "SELECT number FROM qualifying WHERE raceId = 903 AND position = 3 AND q3 = '0:01:54';"}, {"question_id": 862, "answer_sql": "SELECT COUNT(DISTINCT d.driverId) FROM drivers d LEFT JOIN results r ON d.driverId = r.driverId WHERE r.raceId IN ( SELECT raceId FROM races WHERE name = 'Bahrain Grand Prix' AND year = 2007 ) AND r.time IS NOT NULL;"}, {"question_id": 863, "answer_sql": "SELECT year, url FROM seasons WHERE year = (SELECT year FROM races WHERE raceId = 901);"}, {"question_id": 864, "answer_sql": "SELECT COUNT(DISTINCT drivers.driverId) FROM drivers JOIN results ON drivers.driverId = results.driverId WHERE results.raceId IN ( SELECT races.raceId FROM races WHERE races.date = '2015-11-29' ) AND results.time IS NOT NULL;"}, {"question_id": 865, "answer_sql": "SELECT drivers.forename, drivers.surname, drivers.dob FROM drivers JOIN results ON drivers.driverId = results.driverId WHERE results.raceId = 592 AND results.time IS NOT NULL ORDER BY drivers.dob ASC LIMIT 1;"}, {"question_id": 866, "answer_sql": "SELECT d.forename, d.surname, d.url FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN races ra ON r.raceId = ra.raceId WHERE ra.raceId = 161 AND r.time = '0:01:27';"}, {"question_id": 867, "answer_sql": "SELECT d.nationality FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN races ra ON r.raceId = ra.raceId WHERE ra.raceId = 933 AND r.fastestLapSpeed = (SELECT MAX(fastestLapSpeed) FROM results WHERE raceId = 933);"}, {"question_id": 868, "answer_sql": "SELECT location, lat, lng FROM circuits WHERE name = 'Malaysian Grand Prix';"}, {"question_id": 869, "answer_sql": "SELECT c.url FROM constructors c JOIN constructorResults cr ON c.constructorId = cr.constructorId JOIN races r ON r.raceId = cr.raceId WHERE r.raceId = 9 ORDER BY cr.points DESC LIMIT 1;"}, {"question_id": 870, "answer_sql": "SELECT q1 FROM qualifying WHERE raceId = 345 AND driverId = (SELECT driverId FROM drivers WHERE forename = 'Lucas' AND surname = 'di Grassi');"}, {"question_id": 871, "answer_sql": "SELECT d.nationality FROM drivers d JOIN qualifying q ON d.driverId = q.driverId WHERE q.raceId = (SELECT raceId FROM races WHERE name = 'Race No. 347') AND q.q2 = '0:01:15';"}, {"question_id": 872, "answer_sql": "SELECT d.code FROM drivers d JOIN qualifying q ON d.driverId = q.driverId WHERE q.raceId = 45 AND q.q3 = '0:01:33';"}, {"question_id": 873, "answer_sql": "SELECT time FROM results WHERE raceId = 743 AND driverId = (SELECT driverId FROM drivers WHERE forename = 'Bruce' AND surname = 'McLaren');"}, {"question_id": 874, "answer_sql": "SELECT d.forename, d.surname FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN races r1 ON r.raceId = r1.raceId JOIN circuits c ON r1.circuitId = c.circuitId JOIN seasons s ON r1.year = s.year WHERE c.name = 'San Marino' AND s.year = 2006 AND r.position = 2;"}, {"question_id": 875, "answer_sql": "SELECT year, url FROM seasons WHERE year = (SELECT year FROM races WHERE raceId = 901);"}, {"question_id": 876, "answer_sql": "SELECT COUNT(DISTINCT driverId) FROM results WHERE raceId IN ( SELECT raceId FROM races WHERE year = 2015 AND date = '2015-11-29' ) AND position > 0;"}, {"question_id": 877, "answer_sql": "SELECT d.forename, d.surname, d.dob FROM drivers d JOIN results r ON d.driverId = r.driverId WHERE r.raceId = 872 AND r.position IS NOT NULL ORDER BY d.dob LIMIT 1;"}, {"question_id": 878, "answer_sql": "SELECT d.forename, d.surname FROM drivers d JOIN lapTimes lt ON d.driverId = lt.driverId WHERE lt.raceId = 348 AND lt.time = (SELECT MIN(time) FROM lapTimes WHERE raceId = 348);"}, {"question_id": 879, "answer_sql": "SELECT d.nationality FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN races ra ON r.raceId = ra.raceId WHERE ra.raceId = 348 AND r.fastestLapSpeed = (SELECT MAX(fastestLapSpeed) FROM results WHERE raceId = 348);"}, {"question_id": 880, "answer_sql": "SELECT (SELECT MAX(fastestLapSpeed) FROM results WHERE raceId = 854) - (SELECT MAX(fastestLapSpeed) FROM results WHERE raceId = 853) AS difference, (SELECT MAX(fastestLapSpeed) FROM results WHERE raceId = 853) AS base_speed, ((SELECT MAX(fastestLapSpeed) FROM results WHERE raceId = 854) - (SELECT MAX(fastestLapSpeed) FROM results WHERE raceId = 853)) / (SELECT MAX(fastestLapSpeed) FROM results WHERE raceId = 853) * 100 AS percentage"}, {"question_id": 881, "answer_sql": "SELECT COUNT(DISTINCT r.driverId) AS drivers_in_race, COUNT(DISTINCT d.driverId) AS total_drivers FROM races r JOIN drivers d ON r.driverId = d.driverId WHERE r.date = '1983-07-16' GROUP BY r.driverId;"}, {"question_id": 882, "answer_sql": "SELECT MIN(year) FROM races WHERE name = 'Singapore Grand Prix';"}, {"question_id": 883, "answer_sql": "SELECT COUNT(*) AS race_count, name AS race_name FROM races WHERE year = 2005 GROUP BY race_name ORDER BY race_count DESC;"}, {"question_id": 884, "answer_sql": "SELECT min(date) AS first_race_date FROM races ), first_race_info AS ( SELECT r.* FROM races r JOIN first_race fr ON r.date = fr.first_race_date ) SELECT r.raceId, r.name, r.date FROM first_race_info r ORDER BY r.date LIMIT 10;"}, {"question_id": 885, "answer_sql": "SELECT name, date FROM races WHERE year = 1999 AND round = (SELECT MAX(round) FROM races WHERE year = 1999);"}, {"question_id": 886, "answer_sql": "SELECT year, COUNT(round) AS num_races FROM races GROUP BY year ORDER BY num_races DESC LIMIT 1;"}, {"question_id": 887, "answer_sql": "SELECT DISTINCT r.name FROM races r JOIN seasons s ON r.year = s.year WHERE r.year = 2017 AND s.year != 2000;"}, {"question_id": 888, "answer_sql": "SELECT c.name, c.location FROM circuits c JOIN races r ON c.circuitId = r.circuitId WHERE r.year = (SELECT min(year) FROM seasons) AND c.country = 'European' LIMIT 1;"}, {"question_id": 889, "answer_sql": "SELECT MAX(year) FROM seasons s JOIN races r ON s.year = r.year JOIN circuits c ON r.circuitId = c.circuitId WHERE c.name = 'Brands Hatch' AND r.name LIKE '%British Grand Prix%';"}, {"question_id": 890, "answer_sql": "SELECT COUNT(DISTINCT year) FROM races JOIN circuits ON circuits.circuitId = races.circuitId JOIN seasons ON races.year = seasons.year WHERE circuits.name = 'Silverstone' AND races.name = 'British Grand Prix';"}, {"question_id": 891, "answer_sql": "SELECT d.forename, d.surname, ds.position FROM drivers d JOIN driverStandings ds ON d.driverId = ds.driverId WHERE raceId IN ( SELECT raceId FROM races WHERE year = 2010 AND name = 'Singapore Grand Prix' ) ORDER BY ds.position;"}, {"question_id": 892, "answer_sql": "SELECT d.forename, d.surname, r.points FROM drivers d JOIN results r ON d.driverId = r.driverId WHERE r.points = (SELECT MAX(points) FROM results)"}, {"question_id": 893, "answer_sql": "SELECT d.forename, d.surname, r.points FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN races r1 ON r.raceId = r1.raceId JOIN seasons s ON r1.year = s.year WHERE s.year = 2017 AND r1.name = 'Chinese Grand Prix' ORDER BY r.points DESC LIMIT 3;"}, {"question_id": 894, "answer_sql": "SELECT r.driverId, r.raceId, l.time FROM results r JOIN lapTimes l ON r.resultId = l.resultId WHERE l.time = (SELECT MIN(time) FROM lapTimes);"}, {"question_id": 895, "answer_sql": "SELECT AVG(time) AS average_lap_time FROM lapTimes WHERE raceId IN ( SELECT raceId FROM races WHERE year = 2009 AND name = 'Chinese Grand Prix' ) AND driverId IN ( SELECT driverId FROM drivers WHERE forename = 'Sebastian' AND surname = 'Vettel' );"}, {"question_id": 896, "answer_sql": "SELECT DIVIDE( COUNT(DISTINCT r.raceId), (SELECT COUNT(DISTINCT r.raceId) FROM races r WHERE r.driverId = (SELECT driverId FROM drivers WHERE surname = 'Hamilton') AND year >= 2010) ) AS percentage FROM races r JOIN drivers d ON r.driverId = d.driverId WHERE d.surname = 'Hamilton' AND year >= 2010 AND r.position > 1;"}, {"question_id": 897, "answer_sql": "SELECT d.surname, d.forename, c.nationality, AVG(r.points) AS average_points FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN constructorResults cr ON r.constructorId = cr.constructorId JOIN constructors c ON cr.constructorId = c.constructorId WHERE r.wins = (SELECT MAX(wins) FROM results) GROUP BY d.surname, d.forename, c.nationality;"}, {"question_id": 898, "answer_sql": "WITH youngest_driver AS ( SELECT d.forename, d.surname, d.dob FROM drivers d WHERE d.nationality = 'Japanese' ORDER BY d.dob DESC LIMIT 1 ), current_year AS ( SELECT 2022 AS year ) SELECT youngest_driver.forename, youngest_driver.surname, EXTRACT(YEAR FROM AGE(youngest_driver.dob)) AS age FROM youngest_driver JOIN current_year ON TRUE"}, {"question_id": 899, "answer_sql": "SELECT c.circuitId, c.name FROM circuits c JOIN races r ON c.circuitId = r.circuitId JOIN seasons s ON r.year = s.year WHERE s.year BETWEEN 1990 AND 2000 GROUP BY c.circuitId, c.name HAVING COUNT(DISTINCT r.raceId) = 4;"}, {"question_id": 900, "answer_sql": "SELECT c.name, c.location, r.name FROM circuits c JOIN races r ON c.circuitId = r.circuitId WHERE c.country = 'USA' AND r.year = 2006;"}, {"question_id": 901, "answer_sql": "SELECT r.name AS race_name, c.name AS circuit_name, c.location FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE r.date >= '2005-09-01' AND r.date <= '2005-09-30';"}, {"question_id": 902, "answer_sql": "SELECT r.name FROM races r JOIN results r1 ON r.raceId = r1.raceId JOIN drivers d ON r1.driverId = d.driverId WHERE d.forename = 'Alex' AND d.surname = 'Yoong' AND r1.position < 10;"}, {"question_id": 903, "answer_sql": "SELECT MAX(points) FROM results WHERE driverId IN (SELECT driverId FROM drivers WHERE forename = 'Michael' AND surname = 'Schumacher') AND raceId IN (SELECT raceId FROM races WHERE circuitId IN (SELECT circuitId FROM circuits WHERE name = 'Sepang International Circuit'));"}, {"question_id": 904, "answer_sql": "SELECT r.name, s.year FROM races r JOIN results r1 ON r.raceId = r1.raceId JOIN drivers d ON r1.driverId = d.driverId JOIN status s ON r1.statusId = s.statusId WHERE d.forename = 'Michael' AND d.surname = 'Schumacher' AND r1.milliseconds = (SELECT MIN(milliseconds) FROM results WHERE raceId = r.raceId AND driverId = d.driverId);"}, {"question_id": 905, "answer_sql": "SELECT AVG(points) FROM results WHERE year = 2000 AND driverId IN (SELECT driverId FROM drivers WHERE forename = 'Eddie' AND surname = 'Irvine');"}, {"question_id": 906, "answer_sql": "SELECT r.raceId, r.points FROM races r JOIN results rs ON r.raceId = rs.raceId JOIN drivers d ON rs.driverId = d.driverId WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton' AND r.year = (SELECT min(year) FROM seasons) ORDER BY r.raceId ASC LIMIT 1;"}, {"question_id": 907, "answer_sql": "SELECT r.raceId, r.name, r.date, c.country FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE r.year = 2017 ORDER BY r.date;"}, {"question_id": 908, "answer_sql": "SELECT r.name, r.year, c.location FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE r.laps = (SELECT MAX(laps) FROM races)"}, {"question_id": 909, "answer_sql": "SELECT (COUNT(races.raceId) * 1.0 / COUNT(races.raceId) * 1.0 * 100) AS percentage FROM races WHERE races.country = 'Germany' AND races.name = 'European Grand Prix';"}, {"question_id": 910, "answer_sql": "SELECT lat, lng FROM circuits WHERE name = 'Silverstone';"}, {"question_id": 911, "answer_sql": "SELECT name FROM circuits WHERE lat = (SELECT MAX(lat) FROM circuits WHERE name IN ('Silverstone Circuit', 'Hockenheimring', 'Hungaroring'));"}, {"question_id": 912, "answer_sql": "SELECT circuitRef FROM circuits WHERE name = 'Marina Bay Street Circuit';"}, {"question_id": 913, "answer_sql": "SELECT country FROM circuits WHERE alt = (SELECT MAX(alt) FROM circuits);"}, {"question_id": 914, "answer_sql": "SELECT COUNT(*) FROM drivers WHERE code IS NULL;"}, {"question_id": 915, "answer_sql": "SELECT nationality FROM drivers WHERE dob = (SELECT MIN(dob) FROM drivers);"}, {"question_id": 916, "answer_sql": "SELECT surname FROM drivers WHERE nationality = 'italian';"}, {"question_id": 917, "answer_sql": "SELECT url FROM drivers WHERE forename = 'Anthony' AND surname = 'Davidson';"}, {"question_id": 918, "answer_sql": "SELECT driverRef FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton';"}, {"question_id": 919, "answer_sql": "SELECT c.name FROM circuits c JOIN races r ON r.circuitId = c.circuitId WHERE r.name = '2009 Spanish Grand Prix';"}, {"question_id": 920, "answer_sql": "SELECT DISTINCT year FROM races JOIN circuits ON circuits.circuitId = races.circuitId WHERE circuits.name = 'Silverstone'"}, {"question_id": 921, "answer_sql": "SELECT r.url FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.name = 'Silverstone'"}, {"question_id": 922, "answer_sql": "SELECT date FROM races WHERE year = 2010 AND circuitId IN (SELECT circuitId FROM circuits WHERE name = 'Abu Dhabi Circuit')"}, {"question_id": 923, "answer_sql": "SELECT COUNT(*) FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.country = 'Italy';"}, {"question_id": 924, "answer_sql": "SELECT DISTINCT raceDate FROM races JOIN circuits ON circuits.circuitId = races.circuitId WHERE circuits.name = 'Barcelona-Catalunya';"}, {"question_id": 925, "answer_sql": "SELECT c.url FROM circuits c JOIN races r ON c.circuitId = r.circuitId JOIN seasons s ON r.year = s.year WHERE s.year = 2009 AND c.country = 'Spain'"}, {"question_id": 926, "answer_sql": "SELECT MIN(r.fastestLapTime) AS fastest_lap_time FROM results r JOIN drivers d ON r.driverId = d.driverId WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton';"}, {"question_id": 927, "answer_sql": "SELECT d.forename, d.surname FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN laps l ON r.resultId = l.resultId WHERE l.time = (SELECT MIN(time) FROM laps);"}, {"question_id": 928, "answer_sql": "SELECT driverRef FROM drivers JOIN results ON drivers.driverId = results.driverId JOIN races ON results.raceId = races.raceId WHERE races.name = 'Australian Grand Prix' AND races.year = 2008 AND results.position = 1;"}, {"question_id": 929, "answer_sql": "SELECT r.name FROM races r JOIN driverResults dr ON r.raceId = dr.raceId JOIN drivers d ON dr.driverId = d.driverId WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton';"}, {"question_id": 930, "answer_sql": "SELECT raceId FROM results WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton') ORDER BY rank ASC LIMIT 1;"}, {"question_id": 931, "answer_sql": "SELECT MAX(fastestLapSpeed) FROM results WHERE raceId IN ( SELECT raceId FROM races WHERE year = 2009 AND country = 'Spain' )"}, {"question_id": 932, "answer_sql": "SELECT DISTINCT year FROM races r JOIN drivers d ON r.raceId = d.raceId WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton';"}, {"question_id": 933, "answer_sql": "SELECT positionOrder FROM results WHERE raceId = (SELECT raceId FROM races WHERE name = 'Australian Grand Prix 2008') AND driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton');"}, {"question_id": 934, "answer_sql": "SELECT forename, surname FROM drivers WHERE driverId = (SELECT driverId FROM results WHERE raceId = (SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix') AND grid = 4);"}, {"question_id": 935, "answer_sql": "SELECT COUNT(DISTINCT drivers.driverId) FROM results JOIN drivers ON results.driverId = drivers.driverId WHERE results.raceId IN ( SELECT races.raceId FROM races WHERE races.year = 2008 AND races.circuitId IN ( SELECT circuits.circuitId FROM circuits WHERE circuits.name = 'Australian Grand Prix' ) ) AND results.time IS NOT NULL;"}, {"question_id": 936, "answer_sql": "SELECT MAX(laps.time) AS fastest_lap FROM lapTimes AS laps JOIN races ON laps.raceId = races.raceId JOIN drivers ON laps.driverId = drivers.driverId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND races.name = 'Australian Grand Prix 2008';"}, {"question_id": 937, "answer_sql": "SELECT r.time FROM results r JOIN races r1 ON r.raceId = r1.raceId JOIN seasons s ON r1.year = s.year WHERE s.year = 2008 AND r1.name = 'Australian Grand Prix' AND r.position = 2;"}, {"question_id": 938, "answer_sql": "SELECT r.driverId, d.forename, d.surname, r.position, r.positionText, r.url FROM results r JOIN drivers d ON r.driverId = d.driverId WHERE r.raceId IN ( SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix' ) AND r.position = 1;"}, {"question_id": 939, "answer_sql": "SELECT COUNT(*) FROM drivers WHERE nationality = 'American' AND driverId IN ( SELECT driverId FROM results WHERE raceId IN ( SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix' ) );"}, {"question_id": 940, "answer_sql": "SELECT COUNT(DISTINCT drivers.driverId) FROM drivers JOIN results ON drivers.driverId = results.driverId JOIN races ON results.raceId = races.raceId WHERE races.name = '2008 Australian Grand Prix' AND results.time IS NOT NULL;"}, {"question_id": 941, "answer_sql": "SELECT SUM(points) FROM results WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton');"}, {"question_id": 942, "answer_sql": "SELECT AVG(fastestLapTime) AS average_fastest_lap_time FROM results WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton');"}, {"question_id": 943, "answer_sql": "SELECT COUNT(DISTINCT r.raceId) / COUNT(r.raceId) AS rate FROM races r JOIN lapTimes lt ON r.raceId = lt.raceId WHERE r.name = 'Australian Grand Prix 2008' AND r.year = 2008 AND lt.time IS NOT NULL;"}, {"question_id": 944, "answer_sql": "SELECT time FROM results WHERE raceId = ( SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix' ) AND driverId = ( SELECT driverId FROM drivers WHERE forename = 'Mika Hakkinen' AND surname = 'Hakkinen' ) AND time IS NOT NULL ), last_driver_time AS ( SELECT time FROM results WHERE raceId = ( SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix' ) AND driverId = ( SELECT driverId FROM drivers WHERE forename = 'David Coulthard' AND surname = 'Coulthard' ) AND time IS NOT NULL ) SELECT ( ( ( STRFTIME_DIFF(last_driver_time, champion_time) / STRFTIME_DIFF(champion_time, '00:00:00.000') * 100 ) / STRFTIME_DIFF(last_driver_time, champion_time) ) * 100 ) AS percentage_difference;"}, {"question_id": 945, "answer_sql": "SELECT COUNT(*) FROM circuits WHERE country = 'Australia' AND location = 'Melbourne';"}, {"question_id": 946, "answer_sql": "SELECT lat, lng FROM circuits WHERE country = 'USA';"}, {"question_id": 947, "answer_sql": "SELECT COUNT(*) FROM drivers WHERE nationality = 'British' AND dob > 1980;"}, {"question_id": 948, "answer_sql": "SELECT AVG(points) FROM constructors WHERE nationality = 'British';"}, {"question_id": 949, "answer_sql": "SELECT c.name AS constructor_name, MAX(cs.points) AS highest_points FROM constructors c JOIN constructorStandings cs ON c.constructorId = cs.constructorId GROUP BY c.constructorId ORDER BY highest_points DESC LIMIT 1;"}, {"question_id": 950, "answer_sql": "SELECT c.name FROM constructors c JOIN constructorResults cr ON c.constructorId = cr.constructorId JOIN races r ON r.raceId = cr.raceId WHERE r.raceId = 291 AND cr.points = 0;"}, {"question_id": 951, "answer_sql": "SELECT COUNT(DISTINCT c.constructorId) FROM constructors c JOIN constructorResults cr ON c.constructorId = cr.constructorId JOIN races r ON cr.raceId = r.raceId WHERE c.nationality = 'Japanese' AND cr.points = 0 AND r.raceId IN (SELECT raceId FROM races GROUP BY raceId HAVING COUNT(raceId) = 2);"}, {"question_id": 952, "answer_sql": "SELECT DISTINCT c.name FROM constructors c JOIN constructorStandings cs ON c.constructorId = cs.constructorId WHERE cs.position = 1;"}, {"question_id": 953, "answer_sql": "SELECT COUNT(*) FROM constructors WHERE nationality = 'French' AND EXISTS ( SELECT 1 FROM lapTimes WHERE lap > 50 AND lapTimes.driverId IN ( SELECT driverId FROM drivers WHERE drivers.nationality = 'French' ) );"}, {"question_id": 954, "answer_sql": "SELECT (COUNT(DISTINCT DRIVER_ID) WHERE RACE_ID IN (SELECT RACE_ID FROM RACES WHERE YEAR BETWEEN 2007 AND 2009 AND TIME IS NOT NULL) AND DRIVER_ID IN (SELECT DRIVER_ID FROM DRIVERS WHERE NATIONALITY = 'Japanese')) / COUNT(DISTINCT DRIVER_ID) WHERE YEAR BETWEEN 2007 AND 2009 * 100 AS race_completion_percentage"}, {"question_id": 955, "answer_sql": "SELECT year, AVG(CAST(REPLACE(time, ':', '.') AS REAL)) AS avg_time FROM results WHERE position = 1 GROUP BY year;"}, {"question_id": 956, "answer_sql": "SELECT forename, surname FROM drivers WHERE dob > 1975 AND position = 2;"}, {"question_id": 957, "answer_sql": "SELECT COUNT(DISTINCT drivers.driverId) FROM drivers JOIN results ON drivers.driverId = results.driverId WHERE drivers.nationality = 'Italian' AND results.time IS NULL;"}, {"question_id": 958, "answer_sql": "SELECT d.forename, d.surname FROM drivers d JOIN ( SELECT raceId, MIN(time) AS fastest_lap_time FROM lapTimes GROUP BY raceId ) lt ON lt.raceId = d.driverId AND lt.fastest_lap_time = ( SELECT MAX(time) FROM lapTimes WHERE raceId = d.driverId ) ORDER BY lt.fastest_lap_time ASC LIMIT 1;"}, {"question_id": 959, "answer_sql": "SELECT MAX(laps.lap) AS fastest_lap_number FROM results JOIN laps ON results.resultId = laps.resultId WHERE results.raceId IN ( SELECT raceId FROM races WHERE year = 2009 ) AND results.position = ( SELECT MAX(position) FROM results WHERE raceId IN ( SELECT raceId FROM races WHERE year = 2009 ) );"}, {"question_id": 960, "answer_sql": "SELECT AVG(fastestLapSpeed) FROM results WHERE raceId IN ( SELECT raceId FROM races WHERE name = 'Spanish Grand Prix' AND year = 2009 ) AND fastestLapSpeed IS NOT NULL;"}, {"question_id": 961, "answer_sql": "SELECT r.name, r.year FROM races r JOIN results rj ON r.raceId = rj.raceId WHERE rj.milliseconds = (SELECT MIN(milliseconds) FROM results WHERE milliseconds IS NOT NULL)"}, {"question_id": 962, "answer_sql": "SELECT (COUNT(DISTINCT dr.driverId) * 100) / COUNT(DISTINCT dr.driverId) FROM drivers dr JOIN results r ON dr.driverId = r.driverId WHERE r.raceId IN (SELECT raceId FROM races WHERE year BETWEEN 2000 AND 2005) AND dr.dob < 1985 AND r.laps > 50;"}, {"question_id": 963, "answer_sql": "SELECT COUNT(*) FROM drivers JOIN lapTimes ON drivers.driverId = lapTimes.driverId WHERE drivers.nationality = 'French' AND lapTimes.time < '02:00.00';"}, {"question_id": 964, "answer_sql": "SELECT driverRef, forename, surname, nationality FROM drivers WHERE nationality = 'America';"}, {"question_id": 965, "answer_sql": "SELECT raceId FROM races WHERE year = 2009;"}, {"question_id": 966, "answer_sql": "SELECT COUNT(DISTINCT driverId) FROM drivers WHERE EXISTS ( SELECT 1 FROM races WHERE races.raceId = 18 AND drivers.driverId IN ( SELECT driverId FROM results WHERE results.raceId = 18 ) );"}, {"question_id": 967, "answer_sql": "SELECT DISTINCT d.driverRef, d.nationality FROM drivers d JOIN ( SELECT raceId, MIN(dob) AS min_dob FROM drivers GROUP BY raceId ) AS min_dob_drivers ON d.driverId = min_dob_drivers.driverId WHERE d.nationality = 'Netherlands' ORDER BY d.dob LIMIT 3;"}, {"question_id": 968, "answer_sql": "SELECT driverRef FROM drivers WHERE forename = 'Robert' AND surname = 'Kubica';"}, {"question_id": 969, "answer_sql": "SELECT COUNT(*) FROM drivers WHERE nationality = 'Australian' AND dob LIKE '1980-%-%';"}, {"question_id": 970, "answer_sql": "SELECT d.forename, d.surname, MIN(l.time) AS earliest_lap_time FROM drivers d JOIN lapTimes l ON d.driverId = l.driverId WHERE d.nationality = 'Germany' AND d.dob BETWEEN '1980-01-01' AND '1990-12-31' GROUP BY d.driverId ORDER BY earliest_lap_time LIMIT 3;"}, {"question_id": 971, "answer_sql": "SELECT driverRef FROM drivers WHERE nationality = 'Germany' ORDER BY dob ASC LIMIT 1;"}, {"question_id": 972, "answer_sql": "SELECT drivers.driverId, drivers.code FROM drivers JOIN results ON drivers.driverId = results.driverId JOIN laps ON results.resultId = laps.resultId WHERE drivers.dob = '1971-01-01' AND laps.time = (SELECT MIN(laps2.time) FROM laps laps2 WHERE laps2.resultId = results.resultId);"}, {"question_id": 973, "answer_sql": "SELECT d.forename, d.surname, MAX(l.time) AS latest_lap_time FROM drivers d JOIN lapTimes l ON d.driverId = l.driverId WHERE d.nationality = 'Spanish' AND d.dob < 1982 GROUP BY d.driverId ORDER BY latest_lap_time DESC LIMIT 10;"}, {"question_id": 974, "answer_sql": "SELECT year FROM races JOIN results ON races.raceId = results.raceId WHERE results.fastestLapTime IS NOT NULL OR results.fastestLapTime != '' ORDER BY results.fastestLapTime ASC LIMIT 1;"}, {"question_id": 975, "answer_sql": "SELECT year, MAX(time) AS max_time FROM races JOIN lapTimes ON races.raceId = lapTimes.raceId GROUP BY year ORDER BY max_time ASC LIMIT 1;"}, {"question_id": 976, "answer_sql": "SELECT DISTINCT r.driverId FROM results r JOIN laps l ON r.raceId = l.raceId AND r.driverId = l.driverId AND l.lap = 1 WHERE l.time IS NOT NULL ORDER BY l.time LIMIT 5;"}, {"question_id": 977, "answer_sql": "SELECT COUNT(*) FROM results WHERE raceId > 50 AND raceId < 100 AND time IS NOT NULL AND statusId = 2;"}, {"question_id": 978, "answer_sql": "SELECT COUNT(*) AS count, location, lat, lng FROM circuits WHERE country = 'Austria' GROUP BY location, lat, lng;"}, {"question_id": 979, "answer_sql": "SELECT raceId, COUNT(*) as finishers FROM races r JOIN results rr ON r.raceId = rr.raceId WHERE rr.time IS NOT NULL GROUP BY raceId ORDER BY finishers DESC LIMIT 1;"}, {"question_id": 980, "answer_sql": "SELECT drivers.driverRef, drivers.nationality, drivers.dob FROM drivers JOIN qualifying ON drivers.driverId = qualifying.driverId WHERE raceId = 23 AND q2 IS NOT NULL;"}, {"question_id": 981, "answer_sql": "SELECT r.year, c.name, r.date, r.time FROM races r JOIN results rj ON r.raceId = rj.raceId JOIN drivers d ON rj.driverId = d.driverId JOIN qualifying q ON r.raceId = q.raceId AND d.driverId = q.driverId JOIN constructors c ON q.constructorId = c.constructorId WHERE d.forename = 'Max' AND q.position = 1 ORDER BY r.year LIMIT 1;"}, {"question_id": 982, "answer_sql": "SELECT COUNT(*) FROM drivers JOIN results ON drivers.driverId = results.driverId JOIN status ON results.statusId = status.statusId WHERE drivers.nationality = 'American' AND status.status = 'disqualified';"}, {"question_id": 983, "answer_sql": "SELECT c.name, c.url FROM constructors c JOIN ( SELECT constructorId, MAX(points) max_points FROM constructorResults GROUP BY constructorId ) cr ON c.constructorId = cr.constructorId WHERE c.nationality = 'Italian' AND cr.max_points = ( SELECT MAX(points) FROM constructorResults GROUP BY constructorId )"}, {"question_id": 984, "answer_sql": "SELECT c.url FROM constructors c JOIN ( SELECT constructorId, SUM(wins) as total_wins FROM constructorResults GROUP BY constructorId ORDER BY total_wins DESC LIMIT 1 ) subquery ON c.constructorId = subquery.constructorId;"}, {"question_id": 985, "answer_sql": "SELECT d.forename, d.surname, r.time FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN races r1 ON r.raceId = r1.raceId WHERE r1.name LIKE '%French%' AND r.lap = 3 ORDER BY r.time DESC LIMIT 1;"}, {"question_id": 986, "answer_sql": "SELECT raceId, MIN(time) AS fastest_time FROM lapTimes WHERE position = 1 GROUP BY raceId HAVING MAX(time) = MIN(time)"}, {"question_id": 987, "answer_sql": "SELECT AVG(fastestLapTime) FROM results WHERE raceId IN ( SELECT raceId FROM races WHERE year = 2006 AND name = 'United States Grand Prix' ) AND position < 11;"}, {"question_id": 988, "answer_sql": "SELECT d.forename, d.surname, AVG(p.duration) as avg_pitstop_duration FROM drivers d JOIN pitStops p ON d.driverId = p.driverId WHERE d.dob BETWEEN '1980-01-01' AND '1985-12-31' GROUP BY d.driverId ORDER BY avg_pitstop_duration ASC LIMIT 5;"}, {"question_id": 989, "answer_sql": "SELECT r.time FROM results r JOIN races r1 ON r.raceId = r1.raceId JOIN circuits c ON r1.circuitId = c.circuitId WHERE c.name = 'Canadian' AND r1.year = 2008 ORDER BY r.position ASC LIMIT 1;"}, {"question_id": 990, "answer_sql": "SELECT c.constructorRef, c.url FROM constructors c JOIN results r ON c.constructorId = r.constructorId JOIN races r1 ON r.raceId = r1.raceId WHERE r1.name = 'Singapore Grand Prix 2009' AND r.position = 1;"}, {"question_id": 991, "answer_sql": "SELECT forename || ' ' || surname AS full_name, dob FROM drivers WHERE nationality = 'Austrian' AND dob BETWEEN '1981-01-01' AND '1991-12-31';"}, {"question_id": 992, "answer_sql": "SELECT forename || ' ' || surname AS full_name, url AS wikipedia_link, dob AS date_of_birth FROM drivers WHERE nationality = 'German' AND dob BETWEEN '1971-01-01' AND '1985-12-31' ORDER BY dob DESC;"}, {"question_id": 993, "answer_sql": "SELECT location, country, lat, lng FROM circuits WHERE name = 'Hungaroring';"}, {"question_id": 994, "answer_sql": "SELECT c.name, c.nationality, SUM(cr.points) AS total_points FROM constructors c JOIN constructorResults cr ON c.constructorId = cr.constructorId JOIN races r ON cr.raceId = r.raceId WHERE r.name = 'Monaco Grand Prix' AND r.year BETWEEN 1980 AND 2010 GROUP BY c.constructorId ORDER BY total_points DESC LIMIT 1;"}, {"question_id": 995, "answer_sql": "SELECT AVG(r.points) AS average_score FROM results r JOIN drivers d ON r.driverId = d.driverId JOIN races r1 ON r.raceId = r1.raceId JOIN circuits c ON r1.circuitId = c.circuitId WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton' AND c.country = 'Turkey';"}, {"question_id": 996, "answer_sql": "SELECT AVG(COUNT(*)) AS avg_races_per_year FROM ( SELECT COUNT(*) FROM races WHERE raceDate BETWEEN '2000-01-01' AND '2010-12-31' ) AS subquery;"}, {"question_id": 997, "answer_sql": "SELECT MAX(nationality) FROM drivers;"}, {"question_id": 998, "answer_sql": "SELECT COUNT(*) AS victories FROM results WHERE position = 91 AND points = 1;"}, {"question_id": 999, "answer_sql": "SELECT r.name FROM races r JOIN results r1 ON r.raceId = r1.raceId WHERE r1.fastestLapTime = (SELECT MIN(fastestLapTime) FROM results);"}, {"question_id": 1000, "answer_sql": "SELECT c.location || ', ' || c.country AS full_location FROM circuits c JOIN races r ON r.circuitId = c.circuitId WHERE r.date = (SELECT MAX(date) FROM races) LIMIT 1;"}, {"question_id": 1001, "answer_sql": "SELECT forename || ' ' || surname AS full_name FROM drivers JOIN qualifying ON drivers.driverId = qualifying.driverId WHERE qualifying.raceId = ( SELECT raceId FROM races WHERE year = 2008 AND circuitId = ( SELECT circuitId FROM circuits WHERE name = 'Marina Bay Street Circuit' ) ) AND qualifying.position = 1 AND qualifying.q3 IS NOT NULL;"}, {"question_id": 1002, "answer_sql": "SELECT d.forename || ' ' || d.surname AS full_name, d.nationality, r.name AS race_name FROM drivers d JOIN races r ON d.driverId = r.driverId WHERE d.dob = (SELECT MAX(dob) FROM drivers) ORDER BY d.dob LIMIT 1;"}, {"question_id": 1003, "answer_sql": "SELECT COUNT(*) FROM pitStops WHERE raceId IN (SELECT raceId FROM races WHERE name = 'Canadian Grand Prix') AND statusId = 3;"}, {"question_id": 1004, "answer_sql": "SELECT d.forename, d.surname, COUNT(*) as wins FROM drivers d JOIN results r ON d.driverId = r.driverId WHERE r.rank = 1 GROUP BY d.driverId ORDER BY d.dob ASC LIMIT 1;"}, {"question_id": 1005, "answer_sql": "SELECT MAX(duration) FROM pitStops;"}, {"question_id": 1006, "answer_sql": "SELECT MIN(time) AS fastest_lap_time FROM lapTimes;"}, {"question_id": 1007, "answer_sql": "SELECT MAX(duration) AS longest_pit_stop_time FROM pitStops WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton');"}, {"question_id": 1008, "answer_sql": "SELECT laps.lap FROM lapTimes AS laps JOIN pitStops AS psts ON laps.raceId = psts.raceId AND laps.driverId = psts.driverId AND laps.lap = psts.lap WHERE laps.raceId = (SELECT raceId FROM races WHERE name = '2011 Australian Grand Prix') AND laps.driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton');"}, {"question_id": 1009, "answer_sql": "SELECT p.time, p.duration FROM pitStops p WHERE p.raceId = (SELECT raceId FROM races WHERE name = '2011 Australian Grand Prix') AND p.driverId IN (SELECT driverId FROM drivers WHERE forename = 'Fernando Alonso' OR forename = 'Jenson Button');"}, {"question_id": 1010, "answer_sql": "SELECT MAX(time) AS fastest_lap_time FROM lapTimes WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton');"}, {"question_id": 1011, "answer_sql": "SELECT d.forename, d.surname FROM drivers d JOIN lapTimes lt ON d.driverId = lt.driverId WHERE lt.time = (SELECT MIN(time) FROM lapTimes);"}, {"question_id": 1012, "answer_sql": "SELECT r.position FROM results r JOIN drivers d ON r.driverId = d.driverId WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton' AND r.fastestLap = 1;"}, {"question_id": 1013, "answer_sql": "SELECT MIN(time) AS fastest_lap_time FROM lapTimes WHERE raceId IN ( SELECT raceId FROM races WHERE circuitId IN ( SELECT circuitId FROM circuits WHERE name = 'Austrian Grand Prix Circuit' ) )"}, {"question_id": 1014, "answer_sql": "SELECT laps.raceId, laps.driverId, laps.lap, laps.position, laps.time, laps.milliseconds FROM laps JOIN circuits ON circuits.circuitId = laps.raceId WHERE circuits.country = 'Italy' ORDER BY laps.time;"}, {"question_id": 1015, "answer_sql": "SELECT raceId FROM races WHERE name = 'Austrian Grand Prix' AND time IS NOT NULL ORDER BY time LIMIT 1;"}, {"question_id": 1016, "answer_sql": "SELECT p.time, p.duration FROM pitStops p JOIN races r ON p.raceId = r.raceId JOIN circuits c ON r.circuitId = c.circuitId WHERE c.name = 'Austrian Grand Prix' AND p.stop = 1;"}, {"question_id": 1017, "answer_sql": "SELECT c.location, c.lat, c.lng FROM circuits c JOIN ( SELECT raceId, MIN(time) AS fastest_time FROM lapTimes WHERE time = '1:29.488' GROUP BY raceId ) lt ON c.circuitId = lt.raceId"}, {"question_id": 1018, "answer_sql": "SELECT AVG(milliseconds) AS average_pit_stop_time FROM pitStops WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton');"}, {"question_id": 1019, "answer_sql": "SELECT AVG(milliseconds) AS average_lap_time FROM lapTimes WHERE location LIKE '%Italy%';"}, {"question_id": 1020, "answer_sql": "SELECT player_api_id FROM Player_Attributes ORDER BY overall_rating DESC LIMIT 1;"}, {"question_id": 1021, "answer_sql": "SELECT `player_name`, `height` FROM `Player` ORDER BY `height` DESC LIMIT 1;"}, {"question_id": 1022, "answer_sql": "SELECT `preferred_foot` FROM `Player_Attributes` WHERE `potential` = (SELECT MIN(`potential`) FROM `Player_Attributes`);"}, {"question_id": 1023, "answer_sql": "SELECT COUNT(*) FROM Player_Attributes WHERE overall_rating >= 60 AND overall_rating < 65 AND defensive_work_rate = 'low';"}, {"question_id": 1024, "answer_sql": "SELECT player_api_id FROM Player_Attributes ORDER BY crossing DESC LIMIT 5;"}, {"question_id": 1025, "answer_sql": "SELECT League.name FROM League INNER JOIN Match ON League.id = Match.league_id WHERE Match.season = '2015/2016' GROUP BY League.name ORDER BY SUM(Match.home_team_goal + Match.away_team_goal) DESC LIMIT 1;"}, {"question_id": 1026, "answer_sql": "SELECT home_team_api_id, COUNT(*) as losses FROM Match WHERE season = '2015/2016' AND SUBTRACT(home_team_goal, away_team_goal) < 0 GROUP BY home_team_api_id ORDER BY losses ASC LIMIT 1;"}, {"question_id": 1027, "answer_sql": "SELECT player_name FROM Player WHERE player_api_id IN ( SELECT player_api_id FROM Player_Attributes GROUP BY player_api_id ORDER BY COUNT(penalties) DESC LIMIT 10 )"}, {"question_id": 1028, "answer_sql": "SELECT away_team_api_id, MAX(SUBTRACT(away_team_goal, home_team_goal)) AS away_team_score_difference FROM Match WHERE league_id IN ( SELECT id FROM League WHERE name = 'Scotland Premier League' ) AND season = '2009/2010' GROUP BY away_team_api_id HAVING MAX(SUBTRACT(away_team_goal, home_team_goal)) > 0 ORDER BY away_team_score_difference DESC LIMIT 1;"}, {"question_id": 1029, "answer_sql": "SELECT Team.team_long_name, Team_Attributes.buildUpPlaySpeed FROM Team JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id WHERE Team_Attributes.buildUpPlaySpeed = (SELECT MAX(buildUpPlaySpeed) FROM Team_Attributes) LIMIT 4;"}, {"question_id": 1030, "answer_sql": "SELECT League.name, SUM(CASE WHEN home_team_goal = away_team_goal THEN 1 ELSE 0 END) AS draws FROM League JOIN Match ON League.id = Match.league_id WHERE Match.season = '2015/2016' GROUP BY League.name ORDER BY draws DESC LIMIT 1;"}, {"question_id": 1031, "answer_sql": "SELECT player_name, (strftime('%Y', 'now') - strftime('%Y', birthday)) AS age FROM Player WHERE sprint_speed >= 97 AND date BETWEEN '2013-01-01 00:00:00' AND '2015-12-31 00:00:00';"}, {"question_id": 1032, "answer_sql": "SELECT League.name, COUNT(Match.id) as total_matches FROM League JOIN Match ON League.id = Match.league_id GROUP BY League.name ORDER BY total_matches DESC LIMIT 1;"}, {"question_id": 1033, "answer_sql": "SELECT DIVIDE(SUM(height), COUNT(id)) AS average_height FROM Player WHERE birthday >= '1990-01-01 00:00:00' AND birthday < '1996-01-01 00:00:00';"}, {"question_id": 1034, "answer_sql": "SELECT player_api_id FROM Player_Attributes WHERE date LIKE '%2010' GROUP BY player_api_id HAVING overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes WHERE date LIKE '%2010');"}, {"question_id": 1035, "answer_sql": "SELECT team_fifa_api_id FROM Team_Attributes WHERE buildUpPlaySpeed BETWEEN 51 AND 59;"}, {"question_id": 1036, "answer_sql": "SELECT T.team_long_name FROM Team T JOIN Team_Attributes TA ON T.team_api_id = TA.team_api_id WHERE TA.buildUpPlayPassing IS NOT NULL AND strftime('%Y', TA.date) = '2012' AND TA.buildUpPlayPassing > (SELECT AVG(buildUpPlayPassing) FROM Team_Attributes WHERE strftime('%Y', date) = '2012' AND buildUpPlayPassing IS NOT NULL)"}, {"question_id": 1037, "answer_sql": "SELECT DIVIDE(MULTIPLY(SUM(CASE WHEN preferred_foot = 'left' THEN 1 ELSE 0 END), 1.0), COUNT(player_fifa_api_id)) AS percentage_left_foot FROM Player_Attributes WHERE birthday BETWEEN '1987-01-01 00:00:00' AND '1992-12-31 00:00:00';"}, {"question_id": 1038, "answer_sql": "SELECT L.name, SUM(home_team_goal + away_team_goal) AS total_goals FROM League L JOIN Match M ON L.id = M.league_id GROUP BY L.id ORDER BY total_goals DESC LIMIT 5;"}, {"question_id": 1039, "answer_sql": "SELECT DIVIDE(SUM(long_shots), COUNT(player_fifa_api_id)) AS average_long_shots FROM Player_Attributes WHERE player_fifa_api_id = (SELECT player_fifa_api_id FROM Player WHERE player_name = 'Ahmed Samir Farag');"}, {"question_id": 1040, "answer_sql": "SELECT player_name, AVG(heading_accuracy) AS avg_heading_accuracy FROM Player_Attributes JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE height > 180 GROUP BY Player.player_name ORDER BY avg_heading_accuracy DESC LIMIT 10;"}, {"question_id": 1041, "answer_sql": "SELECT T.team_long_name FROM Team T JOIN Team_Attributes TA ON T.team_api_id = TA.team_api_id WHERE TA.buildUpPlayDribblingClass = 'Normal' AND TA.date >= '2014-01-01 00:00:00' AND TA.date <= '2014-01-31 00:00:00' AND TA.chanceCreationPassing < (SELECT AVG(chanceCreationPassing) FROM Team_Attributes) ORDER BY TA.chanceCreationPassing DESC;"}, {"question_id": 1042, "answer_sql": "SELECT League.name FROM League JOIN Match ON League.id = Match.league_id WHERE Match.season = '2009/2010' GROUP BY League.name HAVING AVG(home_team_goal) > AVG(away_team_goal);"}, {"question_id": 1043, "answer_sql": "SELECT team_short_name FROM Team WHERE team_long_name = 'Queens Park Rangers';"}, {"question_id": 1044, "answer_sql": "SELECT player_name FROM Player WHERE substr(birthday,1,4) = '1970' AND substr(birthday,6,2) = '10';"}, {"question_id": 1045, "answer_sql": "SELECT `attacking_work_rate` FROM `Player_Attributes` WHERE `player_api_id` = (SELECT `player_api_id` FROM `Player` WHERE `player_name` = 'Franco Zennaro');"}, {"question_id": 1046, "answer_sql": "SELECT buildUpPlayPositioningClass FROM Team WHERE team_long_name = 'ADO Den Haag';"}, {"question_id": 1047, "answer_sql": "SELECT finishing FROM Player_Attributes WHERE player_fifa_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Francois Affolter') AND date = '2014-09-18 00:00:00';"}, {"question_id": 1048, "answer_sql": "SELECT overall_rating FROM Player_Attributes WHERE player_name = 'Gabriel Tamas' AND strftime('%Y', date) = '2011';"}, {"question_id": 1049, "answer_sql": "SELECT COUNT(*) FROM Match WHERE season = '2015/2016' AND league_id IN ( SELECT id FROM League WHERE name = 'Scotland Premier League' );"}, {"question_id": 1050, "answer_sql": "SELECT `preferred_foot` FROM `Player_Attributes` WHERE `birthday` = (SELECT MIN(`birthday`) FROM `Player_Attributes`);"}, {"question_id": 1051, "answer_sql": "SELECT player_name, potential FROM Player_Attributes JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE potential = (SELECT MAX(potential) FROM Player_Attributes);"}, {"question_id": 1052, "answer_sql": "SELECT COUNT(*) FROM Player_Attributes WHERE weight < 130 AND preferred_foot = 'left';"}, {"question_id": 1053, "answer_sql": "SELECT team_short_name FROM Team JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id WHERE Team_Attributes.chanceCreationPassingClass = 'Risky';"}, {"question_id": 1054, "answer_sql": "SELECT defensive_work_rate FROM Player_Attributes WHERE player_name = 'David Wilson';"}, {"question_id": 1055, "answer_sql": "SELECT birthday FROM Player WHERE player_api_id IN (SELECT player_api_id FROM Player_Attributes WHERE overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes));"}, {"question_id": 1056, "answer_sql": "SELECT name FROM League WHERE country_id IN (SELECT id FROM Country WHERE name = 'Netherlands');"}, {"question_id": 1057, "answer_sql": "SELECT AVG(home_team_goal) FROM Match WHERE country_id IN (SELECT id FROM Country WHERE name = 'Poland') AND season = '2010/2011';"}, {"question_id": 1058, "answer_sql": "SELECT pa.player_api_id, pa.player_name, pa.finishing FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE pa.finishing = (SELECT MAX(finishing) FROM Player_Attributes) ORDER BY p.height ASC LIMIT 1;"}, {"question_id": 1059, "answer_sql": "SELECT player_name FROM Player WHERE height > 180;"}, {"question_id": 1060, "answer_sql": "SELECT COUNT(*) FROM Player WHERE strftime('%Y', birthday) > '1990';"}, {"question_id": 1061, "answer_sql": "SELECT COUNT(*) FROM Player WHERE player_name = 'Adam' AND weight > 170;"}, {"question_id": 1062, "answer_sql": "SELECT player_name FROM Player_Attributes JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE overall_rating > 80 AND strftime('%Y', date) BETWEEN '2008' AND '2010';"}, {"question_id": 1063, "answer_sql": "SELECT potential FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Doran');"}, {"question_id": 1064, "answer_sql": "SELECT player_name FROM Player_Attributes WHERE preferred_foot = 'left';"}, {"question_id": 1065, "answer_sql": "SELECT team_long_name FROM Team WHERE team_api_id IN (SELECT team_api_id FROM Team_Attributes WHERE buildUpPlaySpeedClass = 'Fast');"}, {"question_id": 1066, "answer_sql": "SELECT buildUpPlayPassingClass FROM Team WHERE team_short_name = 'CLB';"}, {"question_id": 1067, "answer_sql": "SELECT team_short_name FROM Team JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id WHERE Team_Attributes.buildUpPlayPassing > 70;"}, {"question_id": 1068, "answer_sql": "SELECT AVG(`overall_rating`) FROM `Player_Attributes` WHERE strftime('%Y', `date`) BETWEEN '2010' AND '2015' AND `height` > 170;"}, {"question_id": 1069, "answer_sql": "SELECT player_name FROM Player WHERE height = (SELECT MIN(height) FROM Player);"}, {"question_id": 1070, "answer_sql": "SELECT country_id FROM League WHERE name = 'Italy Serie A';"}, {"question_id": 1071, "answer_sql": "SELECT team_short_name FROM Team JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id WHERE Team_Attributes.buildUpPlaySpeed = 31 AND Team_Attributes.buildUpPlayDribbling = 53 AND Team_Attributes.buildUpPlayPassing = 32;"}, {"question_id": 1072, "answer_sql": "SELECT AVG(overall_rating) FROM Player_Attributes WHERE player_fifa_api_id = (SELECT player_fifa_api_id FROM Player WHERE player_name = 'Aaron Doran');"}, {"question_id": 1073, "answer_sql": "SELECT COUNT(*) FROM Match WHERE League.name = 'Germany 1. Bundesliga' AND strftime('%Y-%m', date) BETWEEN '2008-08' AND '2008-10';"}, {"question_id": 1074, "answer_sql": "SELECT team_short_name FROM Team WHERE team_api_id IN (SELECT DISTINCT team_api_id FROM Match WHERE home_team_goal = 10);"}, {"question_id": 1075, "answer_sql": "SELECT player_name FROM Player WHERE overall_rating = 61;"}, {"question_id": 1076, "answer_sql": "SELECT SUBTRACT(AVG(`ball_control`) WHERE `player_name` = 'Abdou Diallo', AVG(`ball_control`) WHERE `player_name` = 'Aaron Appindangoye') AS diff_avg_ball_control FROM `Player_Attributes`;"}, {"question_id": 1077, "answer_sql": "SELECT team_long_name FROM Team WHERE team_short_name = 'GEN';"}, {"question_id": 1078, "answer_sql": "SELECT CASE WHEN P1.birthday > P2.birthday THEN P1.player_name ELSE P2.player_name END AS older_player FROM Player P1, Player P2 WHERE (P1.player_name = 'Aaron Lennon' AND P2.player_name = 'Abdelaziz Barrada') OR (P1.player_name = 'Abdelaziz Barrada' AND P2.player_name = 'Aaron Lennon');"}, {"question_id": 1079, "answer_sql": "SELECT player_name FROM Player WHERE height = (SELECT MAX(height) FROM Player);"}, {"question_id": 1080, "answer_sql": "SELECT COUNT(*) FROM Player_Attributes WHERE preferred_foot = 'left' AND attacking_work_rate = 'low';"}, {"question_id": 1081, "answer_sql": "SELECT country_id FROM League WHERE name = 'Belgium Jupiler League';"}, {"question_id": 1082, "answer_sql": "SELECT name FROM League WHERE country_id IN (SELECT id FROM Country WHERE name = 'Germany');"}, {"question_id": 1083, "answer_sql": "SELECT player_name FROM Player WHERE player_api_id = (SELECT player_api_id FROM Player_Attributes WHERE overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes));"}, {"question_id": 1084, "answer_sql": "SELECT COUNT(*) FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE strftime('%Y', p.birthday) < '1986' AND pa.defensive_work_rate = 'high';"}, {"question_id": 1085, "answer_sql": "SELECT player_name, crossing FROM Player_Attributes WHERE player_name IN ('Alexis', 'Ariel Borysiuk', 'Arouna Kone') ORDER BY crossing DESC LIMIT 1;"}, {"question_id": 1086, "answer_sql": "SELECT heading_accuracy FROM Player_Attributes WHERE player_fifa_api_id = (SELECT player_fifa_api_id FROM Player WHERE player_name = 'Ariel Borysiuk');"}, {"question_id": 1087, "answer_sql": "SELECT COUNT(*) FROM Player_Attributes WHERE height > 180 AND volleys > 70;"}, {"question_id": 1088, "answer_sql": "SELECT player_name FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE volleys > 70 AND dribbling > 70;"}, {"question_id": 1089, "answer_sql": "SELECT COUNT(*) FROM Match WHERE country_id IN ( SELECT id FROM Country WHERE name = 'Belgium' ) AND season = '2008/2009';"}, {"question_id": 1090, "answer_sql": "SELECT long_passing FROM Player WHERE birthday = (SELECT MIN(birthday) FROM Player);"}, {"question_id": 1091, "answer_sql": "SELECT COUNT(*) FROM Match WHERE strftime('%Y', date) = '2009' AND strftime('%m', date) = '04' AND league_id IN ( SELECT id FROM League WHERE name = 'Belgium Jupiler League' );"}, {"question_id": 1092, "answer_sql": "SELECT league_id FROM Match WHERE season = '2008/2009' GROUP BY league_id ORDER BY COUNT(*) DESC LIMIT 1;"}, {"question_id": 1093, "answer_sql": "SELECT DIVIDE(SUM(overall_rating), COUNT(id)) FROM Player_Attributes WHERE strftime('%Y', birthday) < '1986';"}, {"question_id": 1094, "answer_sql": "SELECT (SELECT overall_rating FROM Player WHERE player_name = 'Ariel Borysiuk') - (SELECT overall_rating FROM Player WHERE player_name = 'Paulin Puel') * 100 AS percentage_difference"}, {"question_id": 1095, "answer_sql": "SELECT AVG(buildUpPlaySpeed) FROM Team_Attributes WHERE team_fifa_api_id IN ( SELECT team_api_id FROM Team WHERE team_long_name = 'Heart of Midlothian' );"}, {"question_id": 1096, "answer_sql": "SELECT AVG(T1.overall_rating) FROM Player_Attributes T1 INNER JOIN Player T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Pietro Marino';"}, {"question_id": 1097, "answer_sql": "SELECT SUM(crossing) FROM Player_Attributes WHERE player_api_id IN (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Lennox');"}, {"question_id": 1098, "answer_sql": "SELECT MAX(chanceCreationPassing), chanceCreationPassingClass FROM Team_Attributes WHERE team_long_name = 'Ajax';"}, {"question_id": 1099, "answer_sql": "SELECT preferred_foot FROM Player_Attributes WHERE player_api_id IN (SELECT player_api_id FROM Player WHERE player_name = 'Abdou Diallo');"}, {"question_id": 1100, "answer_sql": "SELECT MAX(overall_rating) FROM Player_Attributes WHERE player_name = 'Dorlan Pabon';"}, {"question_id": 1101, "answer_sql": "SELECT AVG(away_team_goal) FROM Match WHERE home_team_api_id IN ( SELECT team_api_id FROM Team WHERE team_long_name = 'Parma' ) AND country_id IN ( SELECT id FROM Country WHERE name = 'Italy' );"}, {"question_id": 1102, "answer_sql": "SELECT Player.player_name FROM Player, Player_Attributes WHERE Player.player_api_id = Player_Attributes.player_api_id AND Player_Attributes.overall_rating = 77 AND Player_Attributes.date = '2016-06-23' AND Player_Attributes.birthday = (SELECT MIN(birthday) FROM Player_Attributes WHERE overall_rating = 77 AND date = '2016-06-23');"}, {"question_id": 1103, "answer_sql": "SELECT overall_rating FROM Player_Attributes WHERE player_name = 'Aaron Mooy' AND date = '2016-02-04 00:00:00';"}, {"question_id": 1104, "answer_sql": "SELECT potential FROM Player_Attributes WHERE player_name = 'Francesco Parravicini' AND date = '2010-08-30 00:00:00';"}, {"question_id": 1105, "answer_sql": "SELECT `attacking_work_rate` FROM `Player_Attributes` WHERE `player_name` = 'Francesco Migliore' AND `date` = '2015-05-01 00:00:00';"}, {"question_id": 1106, "answer_sql": "SELECT defensive_work_rate FROM Player_Attributes WHERE player_name = 'Kevin Berigaud' AND date = '2013-02-22 00:00:00';"}, {"question_id": 1107, "answer_sql": "SELECT date FROM Player_Attributes WHERE player_name = 'Kevin Constant' AND crossing = (SELECT MAX(crossing) FROM Player_Attributes WHERE player_name = 'Kevin Constant');"}, {"question_id": 1108, "answer_sql": "SELECT buildUpPlaySpeedClass FROM Team_Attributes WHERE team_fifa_api_id IN ( SELECT team_api_id FROM Team WHERE team_long_name = 'Willem II' ) AND date = '2012-02-22 00:00:00'"}, {"question_id": 1109, "answer_sql": "SELECT buildUpPlayDribblingClass FROM Team_Attributes WHERE team_fifa_api_id IN (SELECT team_api_id FROM Team WHERE team_short_name = 'LEI') AND date = '2015-09-10 00:00:00';"}, {"question_id": 1110, "answer_sql": "SELECT buildUpPlayPassingClass FROM Team_Attributes WHERE team_fifa_api_id IN ( SELECT team_api_id FROM Team WHERE team_long_name = 'FC Lorient' ) AND date = '2010-02-22';"}, {"question_id": 1111, "answer_sql": "SELECT `chanceCreationPassingClass` FROM `Team_Attributes` WHERE `team_fifa_api_id` IN ( SELECT `team_api_id` FROM `Team` WHERE `team_long_name` = 'PEC Zwolle' ) AND `date` = '2013-09-20 00:00:00';"}, {"question_id": 1112, "answer_sql": "SELECT t.chanceCreationCrossingClass FROM Team t JOIN Team_Attributes ta ON t.team_api_id = ta.team_api_id WHERE t.team_long_name = 'Hull City' AND ta.date = '2010-02-22 00:00:00';"}, {"question_id": 1113, "answer_sql": "SELECT t.defence_aggression_class FROM Team t JOIN Team_Attributes ta ON t.team_api_id = ta.team_api_id WHERE t.team_long_name = 'Hannover 96' AND ta.date = '2015-09-10 00:00:00';"}, {"question_id": 1114, "answer_sql": "SELECT AVG(`overall_rating`) FROM `Player_Attributes` WHERE `player_name` = 'Marko Arnautovic' AND `date` BETWEEN '2007-02-22 00:00:00' AND '2016-04-21 00:00:00';"}, {"question_id": 1115, "answer_sql": "SELECT (SELECT overall_rating FROM Player WHERE player_name = 'Landon Donovan' AND date = '2013/7/12') - (SELECT overall_rating FROM Player WHERE player_name = 'Jordan Bowery' AND date = '2013/7/12') AS difference, (SELECT overall_rating FROM Player WHERE player_name = 'Landon Donovan' AND date = '2013/7/12') AS landon_rating, ((SELECT overall_rating FROM Player WHERE player_name = 'Landon Donovan' AND date = '2013/7/12') - (SELECT overall_rating FROM Player WHERE player_name = 'Jordan Bowery' AND date = '2013/7/12')) * 100 / (SELECT overall_rating FROM Player WHERE player_name = 'Landon Donovan' AND date = '2013/7/12') AS percentage"}, {"question_id": 1116, "answer_sql": "SELECT player_name FROM Player WHERE height = (SELECT MAX(height) FROM Player) LIMIT 5;"}, {"question_id": 1117, "answer_sql": "SELECT `player_api_id` FROM `Player` ORDER BY `weight` DESC LIMIT 10;"}, {"question_id": 1118, "answer_sql": "SELECT player_name FROM Player WHERE birthday <= datetime('now','localtime') - interval '34' year;"}, {"question_id": 1119, "answer_sql": "SELECT COUNT(*) FROM Match m JOIN home_player_1 hp1 ON m.home_player_1 = hp1.player_api_id JOIN Player p ON hp1.player_api_id = p.player_api_id WHERE p.player_name = 'Aaron Lennon';"}, {"question_id": 1120, "answer_sql": "SELECT SUM(away_team_goal) FROM Match JOIN Player AS P1 ON Match.away_player_1 = P1.player_api_id JOIN Player AS P2 ON Match.away_player_2 = P2.player_api_id WHERE (P1.player_name = 'Daan Smith' OR P2.player_name = 'Daan Smith') AND (P1.player_name = 'Filipe Ferreira' OR P2.player_name = 'Filipe Ferreira');"}, {"question_id": 1121, "answer_sql": "SELECT SUM(home_team_goal) FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE DATE(CURRENT_TIMESTAMP) - DATE(Player.birthday) <= INTERVAL '30' YEAR;"}, {"question_id": 1122, "answer_sql": "SELECT player_name FROM Player_Attributes AS PA JOIN Player AS P ON PA.player_api_id = P.player_api_id WHERE PA.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes) LIMIT 10;"}, {"question_id": 1123, "answer_sql": "SELECT player_name FROM Player_Attributes WHERE potential = (SELECT MAX(potential) FROM Player_Attributes);"}, {"question_id": 1124, "answer_sql": "SELECT player_name FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player_Attributes.attacking_work_rate = 'high';"}, {"question_id": 1125, "answer_sql": "SELECT player_name FROM Player WHERE finishing = 1 ORDER BY birthday ASC LIMIT 1;"}, {"question_id": 1126, "answer_sql": "SELECT DISTINCT pa.player_name FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id JOIN Country c ON p.birthday LIKE CONCAT('%', c.name, '%') WHERE c.name = 'Belgium';"}, {"question_id": 1127, "answer_sql": "SELECT DISTINCT Player.country_id, Country.name FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id JOIN Country ON Player.country_id = Country.id WHERE Player_Attributes.vision > 89;"}, {"question_id": 1128, "answer_sql": "SELECT country_id, AVG(weight) AS avg_weight FROM Player JOIN Country ON Player.country_id = Country.id GROUP BY country_id ORDER BY avg_weight DESC LIMIT 1;"}, {"question_id": 1129, "answer_sql": "SELECT T.team_long_name FROM Team T INNER JOIN Team_Attributes TA ON T.team_api_id = TA.team_api_id WHERE TA.buildUpPlaySpeedClass = 'Slow';"}, {"question_id": 1130, "answer_sql": "SELECT team_short_name FROM Team JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id WHERE Team_Attributes.chanceCreationPassingClass = 'Safe';"}, {"question_id": 1131, "answer_sql": "SELECT AVG(height) FROM Player WHERE birthday LIKE '%Italy%';"}, {"question_id": 1132, "answer_sql": "SELECT player_name FROM Player WHERE height > 180 ORDER BY player_name ASC LIMIT 3;"}, {"question_id": 1133, "answer_sql": "SELECT COUNT(*) FROM Player WHERE player_name LIKE 'Aaron%' AND birthday > '1990';"}, {"question_id": 1134, "answer_sql": "SELECT (SELECT `jumping` FROM `Player_Attributes` WHERE `id` = 6) - (SELECT `jumping` FROM `Player_Attributes` WHERE `id` = 23) AS difference;"}, {"question_id": 1135, "answer_sql": "SELECT id FROM Player_Attributes WHERE preferred_foot = 'right' AND potential = (SELECT MIN(potential) FROM Player_Attributes WHERE preferred_foot = 'right') LIMIT 3;"}, {"question_id": 1136, "answer_sql": "SELECT COUNT(*) FROM Player_Attributes WHERE crossing = (SELECT MAX(crossing) FROM Player_Attributes) AND preferred_foot = 'left';"}, {"question_id": 1137, "answer_sql": "SELECT COUNT(*) / (SELECT COUNT(*) FROM Player) * 100 AS percentage FROM Player_Attributes WHERE strength > 80 AND stamina > 80;"}, {"question_id": 1138, "answer_sql": "SELECT country_id FROM League WHERE name = 'Poland Ekstraklasa';"}, {"question_id": 1139, "answer_sql": "SELECT home_team_goal, away_team_goal FROM Match WHERE date LIKE '2008-09-24%';"}, {"question_id": 1140, "answer_sql": "SELECT sprint_speed, agility, acceleration FROM Player_Attributes WHERE player_name = 'Alexis Blin';"}, {"question_id": 1141, "answer_sql": "SELECT buildUpPlaySpeedClass FROM Team WHERE team_long_name = 'KSV Cercle Brugge';"}, {"question_id": 1142, "answer_sql": "SELECT COUNT(*) FROM Match WHERE season = '2015/2016' AND league_id IN ( SELECT id FROM League WHERE name = 'Serie A' );"}, {"question_id": 1143, "answer_sql": "SELECT MAX(home_team_goal) FROM Match WHERE league_id IN (SELECT id FROM League WHERE name = 'Netherlands Eredivisie');"}, {"question_id": 1144, "answer_sql": "SELECT finishing, curve FROM Player_Attributes WHERE weight = (SELECT MAX(weight) FROM Player);"}, {"question_id": 1145, "answer_sql": "SELECT T.team_long_name FROM Team T JOIN Match M ON T.team_api_id = M.home_team_api_id OR T.team_api_id = M.away_team_api_id WHERE M.season = '2015/2016' GROUP BY T.team_long_name HAVING COUNT(M.id) = (SELECT MAX(games) FROM (SELECT COUNT(id) AS games FROM Match WHERE season = '2015/2016') AS subquery);"}, {"question_id": 1146, "answer_sql": "SELECT Team.team_long_name FROM Team INNER JOIN Match ON Team.team_api_id = Match.away_team_api_id WHERE Match.away_team_goal = (SELECT MAX(away_team_goal) FROM Match);"}, {"question_id": 1147, "answer_sql": "SELECT player_name FROM Player WHERE player_api_id IN (SELECT player_api_id FROM Player_Attributes WHERE overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes));"}, {"question_id": 1148, "answer_sql": "SELECT DIVIDE(COUNT(CASE WHEN height < 180 AND overall_rating > 70 THEN 1 END), COUNT(id)) * 100 AS percentage FROM Player;"}, {"question_id": 1149, "answer_sql": "SELECT (COUNT(DISTINCT CASE WHEN SEX = 'M' AND Admission = '+' THEN ID END) * 100.0) / COUNT(DISTINCT CASE WHEN SEX = 'M' THEN ID END) AS InPatientPercentage, (COUNT(DISTINCT CASE WHEN SEX = 'M' AND Admission = '-' THEN ID END) * 100.0) / COUNT(DISTINCT CASE WHEN SEX = 'M' THEN ID END) AS OutPatientPercentage FROM Patient;"}, {"question_id": 1150, "answer_sql": "SELECT DIVIDE(COUNT(Patient.ID) WHERE year(Patient.Birthday) > 1930 AND Patient.SEX = 'F', COUNT(Patient.ID) WHERE Patient.SEX = 'F') AS percentage FROM Patient;"}, {"question_id": 1151, "answer_sql": "SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Patient WHERE Birthday BETWEEN '1930-01-01' AND '1940-12-31') AS percentage_inpatient FROM Patient WHERE Birthday BETWEEN '1930-01-01' AND '1940-12-31' AND Admission = '+';"}, {"question_id": 1152, "answer_sql": "SELECT DIVIDE(COUNT(DISTINCT Patient.ID), COUNT(DISTINCT Patient.ID)) FROM Examination INNER JOIN Patient ON Examination.ID = Patient.ID WHERE Examination.Diagnosis = 'SLE' AND (Patient.Admission = '+' OR Patient.Admission = '-');"}, {"question_id": 1153, "answer_sql": "SELECT D.Diagnosis, L.Date FROM Examination E JOIN Patient P ON E.ID = P.ID JOIN Laboratory L ON P.ID = L.ID WHERE P.ID = 30609;"}, {"question_id": 1154, "answer_sql": "SELECT Patient.SEX, Patient.Birthday, Examination.`Examination Date`, Examination.Symptoms FROM Examination JOIN Patient ON Examination.ID = Patient.ID WHERE Patient.ID = 163109;"}, {"question_id": 1155, "answer_sql": "SELECT Patient.ID, SEX, Birthday FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE LDH > 500;"}, {"question_id": 1156, "answer_sql": "SELECT Patient.ID, (strftime('%Y', 'now') - strftime('%Y', Patient.Birthday)) AS age FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.RVVT = '+';"}, {"question_id": 1157, "answer_sql": "SELECT Patient.ID, Patient.SEX, Examination.Diagnosis FROM Examination JOIN Patient ON Examination.ID = Patient.ID WHERE Examination.Thrombosis = 2;"}, {"question_id": 1158, "answer_sql": "SELECT p.ID, p.Birthday, p.Description, p.`First Date`, p.Admission, p.Diagnosis FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.Birthday = '1937-01-01' AND l.`T-CHO` >= 250;"}, {"question_id": 1159, "answer_sql": "SELECT Patient.ID, Patient.SEX, Examination.Diagnosis FROM Examination JOIN Patient ON Examination.ID = Patient.ID WHERE Examination.ALB < 3.5;"}, {"question_id": 1160, "answer_sql": "SELECT DIVIDE((SELECT COUNT(ID) FROM Laboratory WHERE SEX = 'F' AND TP < '6.0' OR TP > '8.5'), (SELECT COUNT(ID) FROM Laboratory)) * 100 AS percentage"}, {"question_id": 1161, "answer_sql": "SELECT AVG(Examination.`aCL IgG`) FROM Examination JOIN Patient ON Examination.ID = Patient.ID WHERE Patient.Admission = '+' AND YEAR(CURRENT_TIMESTAMP) - YEAR(Patient.Birthday) >= 50;"}, {"question_id": 1162, "answer_sql": "SELECT COUNT(*) FROM Patient WHERE SEX = 'F' AND Description = '1997' AND Admission = '-';"}, {"question_id": 1163, "answer_sql": "SELECT MIN(SUBTRACT(YEAR(Birthday), YEAR(`First Date`))) AS youngest_age FROM Patient;"}, {"question_id": 1164, "answer_sql": "SELECT COUNT(*) FROM Examination e JOIN Patient p ON e.ID = p.ID WHERE e.Thrombosis = 1 AND p.SEX = 'F' AND YEAR(e.`Examination Date`) = 1997;"}, {"question_id": 1165, "answer_sql": "SELECT MAX(YEAR(Birthday)) - MIN(YEAR(Birthday)) AS age_gap FROM Patient WHERE Tg >= 200;"}, {"question_id": 1166, "answer_sql": "SELECT Symptoms, Diagnosis FROM Examination e JOIN Patient p ON e.ID = p.ID WHERE p.Birthday = (SELECT MIN(Birthday) FROM Patient)"}, {"question_id": 1167, "answer_sql": "SELECT DIVIDE(COUNT(DISTINCT Patient.ID), 12) AS Average_Monthly_Tests FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.SEX = 'M' AND Laboratory.Date BETWEEN '1998-01-01' AND '1998-12-31';"}, {"question_id": 1168, "answer_sql": "SELECT MAX(Birthday) AS OldestPatientBirthday, YEAR(Birthday) AS OldestPatientAge, `First Date` AS InitialHospitalVisitDate FROM Patient WHERE Diagnosis = 'SJS';"}, {"question_id": 1169, "answer_sql": "SELECT DIVIDE(SUM(CASE WHEN SEX = 'M' AND UA <= '8.0' THEN 1 ELSE 0 END), SUM(CASE WHEN SEX = 'F' AND UA <= '6.5' THEN 1 ELSE 0 END)) AS ratio;"}, {"question_id": 1170, "answer_sql": "SELECT COUNT(*) FROM Patient p LEFT JOIN Examination e ON p.ID = e.ID WHERE e.`Examination Date` IS NULL OR (e.`Examination Date` < p.`First Date` AND DATE_PART('year', age(e.`Examination Date`, p.`First Date`)) < 1);"}, {"question_id": 1171, "answer_sql": "SELECT COUNT(*) FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE p.Birthday < 1993 AND p.Birthday > 1975 AND e.`Examination Date` BETWEEN '1990-01-01' AND '1993-12-31';"}, {"question_id": 1172, "answer_sql": "SELECT COUNT(*) FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE p.SEX = 'M' AND e.`T-BIL` > 2.0;"}, {"question_id": 1173, "answer_sql": "SELECT Diagnosis, COUNT(*) AS Frequency FROM Examination WHERE `Examination Date` BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY Diagnosis ORDER BY Frequency DESC LIMIT 1;"}, {"question_id": 1174, "answer_sql": "SELECT AVG(TIMESTAMPDIFF(YEAR, Birthday, CURRENT_DATE) - 1900) AS average_age FROM Patient WHERE ID IN ( SELECT Patient.ID FROM Examination WHERE Examination.Date BETWEEN '1991-10-01' AND '1991-10-30' );"}, {"question_id": 1175, "answer_sql": "SELECT SUBTRACT(year(`Examination Date`), year(Birthday)) AS age, Diagnosis FROM Examination WHERE HGB = (SELECT MAX(HGB) FROM Examination) LIMIT 1;"}, {"question_id": 1176, "answer_sql": "SELECT `ANA` FROM Examination WHERE ID = 3605340 AND `Examination Date` = '1996-12-02';"}, {"question_id": 1177, "answer_sql": "SELECT T.TP < 250 AS `normal_level` FROM Laboratory T WHERE T.ID = 2927464 AND T.Date = '1995-9-4';"}, {"question_id": 1178, "answer_sql": "SELECT SEX FROM Examination WHERE Diagnosis = 'AORTITIS' ORDER BY ID LIMIT 1;"}, {"question_id": 1179, "answer_sql": "SELECT aCL_IgM FROM Examination WHERE ID IN ( SELECT ID FROM Patient WHERE Diagnosis = 'SLE' AND Description = '1994-02-19' ) AND Description = '1993/11/12';"}, {"question_id": 1180, "answer_sql": "SELECT SEX FROM Laboratory WHERE Date = '1992-06-12' AND GPT = '9';"}, {"question_id": 1181, "answer_sql": "SELECT SUBTRACT('1992', year(Birthday)) AS age FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.Date = '1991-10-21' AND Laboratory.UA = 8.4;"}, {"question_id": 1182, "answer_sql": "SELECT COUNT(Laboratory.ID) FROM Examination JOIN Patient ON Examination.ID = Patient.ID JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Patient.`First Date` = '1991-06-13' AND Patient.Diagnosis = 'SJS' AND Laboratory.Date BETWEEN '1995-01-01' AND '1995-12-31';"}, {"question_id": 1183, "answer_sql": "SELECT p.Diagnosis FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE p.`First Date` = '1997-01-27' AND e.`Examination Date` = '1997-01-27' AND p.Diagnosis = 'SLE';"}, {"question_id": 1184, "answer_sql": "SELECT Symptoms FROM Examination WHERE `Examination Date` = '1993-09-27' AND ID IN ( SELECT ID FROM Patient WHERE Birthdate = '1959-03-01' );"}, {"question_id": 1185, "answer_sql": "SELECT (SUM(`T-CHO` WHERE `Birthday` = '1959-02-18' AND Date LIKE '1981-11-%') - SUM(`T-CHO` WHERE `Birthday` = '1959-02-18' AND Date LIKE '1981-12-%')) AS DecreaseRate FROM Laboratory;"}, {"question_id": 1186, "answer_sql": "SELECT p.ID FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE e.Diagnosis = 'Behcet' AND YEAR(e.`Examination Date`) BETWEEN 1997 AND 1997;"}, {"question_id": 1187, "answer_sql": "SELECT DISTINCT Patient.ID FROM Examination JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Examination.`Examination Date` BETWEEN '1987-07-06' AND '1996-01-31' AND Laboratory.GPT > 30 AND Laboratory.ALB < 4;"}, {"question_id": 1188, "answer_sql": "SELECT ID FROM Patient WHERE SEX = 'F' AND YEAR(Birthday) = 1964 AND Admission = '+';"}, {"question_id": 1189, "answer_sql": "SELECT COUNT(*) FROM Examination e JOIN Patient p ON e.ID = p.ID WHERE e.Thrombosis = 2 AND e.ANA = 'S' AND e.`aCL IgM` > (SELECT AVG(`aCL IgM`) FROM Examination) * 1.2;"}, {"question_id": 1190, "answer_sql": "SELECT (SUM(CASE WHEN T1.UA <= 6.5 AND T1.`U-PRO` > 0 AND T1.`U-PRO` < 30 THEN 1 ELSE 0 END) * 100.0) / COUNT(T1.`U-PRO`) AS Percentage FROM Laboratory T1 JOIN Patient T2 ON T1.ID = T2.ID;"}, {"question_id": 1191, "answer_sql": "SELECT DIVIDE(SUM(CASE WHEN T1.Diagnosis = 'BEHCET' THEN 1 ELSE 0 END), COUNT(T1.`First Date`), 100) AS Percentage FROM Patient T1 JOIN Examination T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND YEAR(T1.`First Date`) = 1981;"}, {"question_id": 1192, "answer_sql": "SELECT p.ID, p.SEX, p.Birthday, p.Description, p.`First Date`, p.Admission, p.Diagnosis FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.Admission = '-' AND l.Date LIKE '1991-10%' AND l.`T-BIL` < 2.0;"}, {"question_id": 1193, "answer_sql": "SELECT COUNT(*) FROM Examination e JOIN Patient p ON e.ID = p.ID WHERE e.`ANA Pattern` != 'p' AND p.SEX = 'F' AND p.Birthday BETWEEN '1980-01-01' AND '1989-12-31';"}, {"question_id": 1194, "answer_sql": "SELECT Patient.SEX FROM Examination JOIN Patient ON Examination.ID = Patient.ID WHERE Examination.Diagnosis = 'PSS' AND Laboratory.CRE = 1 AND Laboratory.LDH = 123 AND Laboratory.CRP > 2;"}, {"question_id": 1195, "answer_sql": "SELECT AVG(T.ALB) FROM Examination E JOIN Patient P ON E.ID = P.ID JOIN Laboratory T ON E.ID = T.ID WHERE P.SEX = 'F' AND E.Thrombosis = 'SLE' AND T.PLT > 400;"}, {"question_id": 1196, "answer_sql": "SELECT Symptoms FROM Examination WHERE Diagnosis = 'SLE' GROUP BY Symptoms ORDER BY COUNT(*) DESC LIMIT 1;"}, {"question_id": 1197, "answer_sql": "SELECT Description, Diagnosis FROM Patient WHERE ID = 48473;"}, {"question_id": 1198, "answer_sql": "SELECT COUNT(*) FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE p.SEX = 'F' AND e.Diagnosis = 'APS';"}, {"question_id": 1199, "answer_sql": "SELECT COUNT(*) FROM Examination e JOIN Laboratory l ON e.ID = l.ID WHERE YEAR(e.`Examination Date`) = 1997 AND l.TP NOT BETWEEN 6 AND 8.5;"}, {"question_id": 1200, "answer_sql": "SELECT SUM(CASE WHEN Diagnosis LIKE '%ITP%' THEN 1 ELSE 0 END) AS ITP_count, SUM(CASE WHEN Diagnosis LIKE '%SLE%' THEN 1 ELSE 0 END) AS SLE_count, (SUM(CASE WHEN Diagnosis LIKE '%ITP%' THEN 1 ELSE 0 END) / SUM(CASE WHEN Diagnosis LIKE '%SLE%' THEN 1 ELSE 0 END)) * 100 AS proportion FROM Examination;"}, {"question_id": 1201, "answer_sql": "SELECT DIVIDE((COUNT(CASE WHEN SEX = 'F' THEN 1 ELSE NULL END) WHERE YEAR(Birthday) = 1980 AND Diagnosis = 'RA'), COUNT(DISTINCT SEX) WHERE YEAR(Birthday) = 1980 AND Diagnosis = 'RA') * 100 AS percentage;"}, {"question_id": 1202, "answer_sql": "SELECT COUNT(*) FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE p.SEX = 'M' AND e.`Examination Date` BETWEEN '1995' AND '1997' AND p.Diagnosis = 'BEHCET' AND p.Admission = '-';"}, {"question_id": 1203, "answer_sql": "SELECT COUNT(*) FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE p.SEX = 'F' AND e.WBC < 3.5;"}, {"question_id": 1204, "answer_sql": "SELECT DATEDIFF(`Examination Date`, `First Date`) FROM Examination WHERE ID = (SELECT ID FROM Patient WHERE ID = 821298)"}, {"question_id": 1205, "answer_sql": "SELECT CASE WHEN UA > 8.0 AND SEX = 'M' OR (UA > 6.5 AND SEX = 'F') THEN 'Yes' ELSE 'No' END AS NormalRange FROM Laboratory WHERE ID = (SELECT ID FROM Patient WHERE ID = 57266);"}, {"question_id": 1206, "answer_sql": "SELECT Laboratory.Date FROM Laboratory JOIN Patient ON Laboratory.ID = Patient.ID WHERE Patient.ID = 48473 AND Laboratory.GOT >= 60;"}, {"question_id": 1207, "answer_sql": "SELECT Patient.ID, SEX, Birthday FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.Date = 1994 AND Laboratory.GOT < 60;"}, {"question_id": 1208, "answer_sql": "SELECT p.ID FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.SEX = 'M' AND l.GPT >= 60;"}, {"question_id": 1209, "answer_sql": "SELECT p.Birthday, p.Diagnosis FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE e.GPT > 60 ORDER BY p.Birthday ASC;"}, {"question_id": 1210, "answer_sql": "SELECT AVG(LDH) FROM Laboratory WHERE LDH < 500;"}, {"question_id": 1211, "answer_sql": "SELECT Patient.ID, YEAR(CURRENT_TIMESTAMP) - YEAR(Patient.Birthday) AS age FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.LDH BETWEEN 600 AND 800;"}, {"question_id": 1212, "answer_sql": "SELECT P.ID, P.SEX, P.Birthday, P.Description, P.`First Date`, P.Admission, E.Thrombosis FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE E.`aCL IgA` IS NOT NULL AND E.`aCL IgA` < 300 AND (P.Admission = '+' OR P.Admission = '-');"}, {"question_id": 1213, "answer_sql": "SELECT p.ID, l.ALP < 300 AS is_alp_normal FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.Birthday = '1982-04-01';"}, {"question_id": 1214, "answer_sql": "SELECT p.ID, p.SEX, p.Birthday FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.TP < 6.0;"}, {"question_id": 1215, "answer_sql": "SELECT SUBTRACT(TP, 8.5) AS Deviation FROM Laboratory JOIN Patient ON Laboratory.ID = Patient.ID WHERE Patient.SEX = 'F' AND TP > 8.5;"}, {"question_id": 1216, "answer_sql": "SELECT Patient.ID, Patient.Birthday FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Patient.SEX = 'M' AND (Examination.ALB <= 3.5 OR Examination.ALB >= 5.5) ORDER BY Patient.Birthday DESC;"}, {"question_id": 1217, "answer_sql": "SELECT p.ID, p.Birthday, p.Admission, p.Diagnosis, l.ALB FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE Year(p.Birthday) = 1982 AND l.ALB BETWEEN 3.5 AND 5.5;"}, {"question_id": 1218, "answer_sql": "SELECT (COUNT(*) * 1.0) / (SELECT COUNT(*) FROM Laboratory) * 100 AS percentage FROM Laboratory WHERE (UA > 8.0 AND SEX = 'M') OR (UA > 6.5 AND SEX = 'F');"}, {"question_id": 1219, "answer_sql": "SELECT AVG(UA) AS UA_Index FROM Laboratory WHERE UA < 8.0 AND SEX = 'M' OR (UA < 6.5 AND SEX = 'F') AND ID IN (SELECT DISTINCT ID FROM Examination WHERE Thrombosis IS NULL) ORDER BY Date DESC LIMIT 1;"}, {"question_id": 1220, "answer_sql": "SELECT Patient.ID, Patient.SEX, Patient.Birthday FROM Patient LEFT JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.UN = 29;"}, {"question_id": 1221, "answer_sql": "SELECT Patient.ID, SEX, Birthday FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Diagnosis = 'RA' AND UA < 30;"}, {"question_id": 1222, "answer_sql": "SELECT COUNT(*) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.SEX = 'M' AND l.CRE >= 1.5;"}, {"question_id": 1223, "answer_sql": "SELECT (SELECT COUNT(*) FROM Patient p WHERE p.SEX = 'M' AND EXISTS (SELECT 1 FROM Laboratory l WHERE l.ID = p.ID AND l.CRE >= 1.5)) > (SELECT COUNT(*) FROM Patient p WHERE p.SEX = 'F' AND EXISTS (SELECT 1 FROM Laboratory l WHERE l.ID = p.ID AND l.CRE >= 1.5))"}, {"question_id": 1224, "answer_sql": "SELECT p.ID, p.SEX, p.Birthday, l.T-BIL FROM Laboratory l JOIN Patient p ON l.ID = p.ID WHERE l.T-BIL = (SELECT MAX(T-BIL) FROM Laboratory)"}, {"question_id": 1225, "answer_sql": "SELECT SEX, COUNT(*) AS Total FROM Laboratory WHERE `T-BIL` >= 2.0 GROUP BY SEX;"}, {"question_id": 1226, "answer_sql": "SELECT p.ID, l.T-CHO FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.Birthday = (SELECT MIN(Birthday) FROM Patient) ORDER BY l.T-CHO DESC LIMIT 1;"}, {"question_id": 1227, "answer_sql": "SELECT DIVIDE(SUM(DATEDIFF(YEAR(NOW()), Birthday)), COUNT(ID)) AS average_age FROM Patient WHERE SEX = 'M' AND T_CHO >= 250;"}, {"question_id": 1228, "answer_sql": "SELECT Patient.ID, Patient.Diagnosis FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.TG > 300;"}, {"question_id": 1229, "answer_sql": "SELECT COUNT(*) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.TG >= 200 AND (current_date - Birthday) / 365.25 > 50;"}, {"question_id": 1230, "answer_sql": "SELECT DISTINCT Patient.ID FROM Patient LEFT JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Admission = '-' AND CPK < 250;"}, {"question_id": 1231, "answer_sql": "SELECT COUNT(*) FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE p.Birthday BETWEEN '1936-01-01' AND '1956-12-31' AND p.SEX = 'M' AND e.CPK >= 250;"}, {"question_id": 1232, "answer_sql": "SELECT p.ID, p.SEX, SUBTRACT(year(current_timestamp), year(p.Birthday)) AS age FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.GLU >= 180 AND l.T_CHO < 250;"}, {"question_id": 1233, "answer_sql": "SELECT Patient.ID, Laboratory.GLU FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.GLU < 180 AND Patient.Birthday >= '1991-01-01';"}, {"question_id": 1234, "answer_sql": "SELECT p.ID, p.SEX, p.Birthday, p.SEX, p.Birthday FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.WBC <= 3.5 OR l.WBC >= 9.0 GROUP BY p.SEX, p.Birthday ORDER BY CAST(EXTRACT(YEAR FROM AGE(p.Birthday)) AS INTEGER);"}, {"question_id": 1235, "answer_sql": "SELECT p.ID, year(current_timestamp) - year(p.Birthday) AS age, p.Diagnosis FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE p.RBC < 3.5;"}, {"question_id": 1236, "answer_sql": "SELECT P.ID, P.SEX, P.Birthday, P.Admission FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE P.SEX = 'F' AND (SUBTRACT(year(current_timestamp), year(P.Birthday)) >= 50) AND (P.RBC <= 3.5 OR P.RBC >= 6.0) AND P.Admission = '+'"}, {"question_id": 1237, "answer_sql": "SELECT Patient.ID, SEX FROM Patient WHERE HGB < 10 AND Admission = '-';"}, {"question_id": 1238, "answer_sql": "SELECT p.ID, p.SEX FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE e.Diagnosis = 'SLE' AND p.HGB BETWEEN 10 AND 17 AND p.Birthday = ( SELECT MIN(Birthday) FROM Patient WHERE HGB BETWEEN 10 AND 17 );"}, {"question_id": 1239, "answer_sql": "SELECT p.ID, YEAR(CURRENT_TIMESTAMP) - YEAR(p.Birthday) AS age FROM Patient p JOIN Laboratory l1 ON p.ID = l1.ID JOIN Laboratory l2 ON p.ID = l2.ID WHERE l1.HCT >= 52 AND l2.HCT >= 52 GROUP BY p.ID HAVING COUNT(*) > 2;"}, {"question_id": 1240, "answer_sql": "SELECT AVG(HCT) FROM Laboratory WHERE Date LIKE '1991%' AND HCT < 29;"}, {"question_id": 1241, "answer_sql": "SELECT SUM(CASE WHEN LABORATORY.PLT < 100 THEN 1 ELSE 0 END) AS below_normal, SUM(CASE WHEN LABORATORY.PLT > 400 THEN 1 ELSE 0 END) AS above_normal FROM LABORATORY JOIN Patient ON LABORATORY.ID = Patient.ID;"}, {"question_id": 1242, "answer_sql": "SELECT p.ID, p.SEX, p.Birthday, p.Description, p.`First Date`, p.Admission, p.Diagnosis FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.Date LIKE '1984%' AND SUBTRACT(year(current_timestamp), year(p.Birthday)) < 50 AND l.PLT BETWEEN 100 AND 400;"}, {"question_id": 1243, "answer_sql": "SELECT MULTIPLY(DIVIDE(SUM(CASE WHEN T.PT >= 14 AND T.SEX = 'F' THEN 1 ELSE 0 END), SUM(T.PT >= 14)), 1.0) AS percentage FROM Patient T WHERE SUBTRACT(year(current_timestamp), year(T.Birthday)) > 55;"}, {"question_id": 1244, "answer_sql": "SELECT p.ID, p.SEX, p.Birthday, p.`First Date`, p.Admission, p.Diagnosis FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE STRFTIME('%Y', p.`First Date`) > '1992' AND e.PT < 14;"}, {"question_id": 1245, "answer_sql": "SELECT COUNT(*) FROM Examination e WHERE e.`Examination Date` > '1997-01-01' AND e.APTT < 45;"}, {"question_id": 1246, "answer_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Examination T1 JOIN Patient T2 ON T1.ID = T2.ID WHERE T1.Thrombosis = 3 AND T1.APTT > 45;"}, {"question_id": 1247, "answer_sql": "SELECT COUNT(DISTINCT p.ID) FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE p.SEX = 'M' AND p.WBC BETWEEN 3.5 AND 9.0 AND (e.FG <= 150 OR e.FG >= 450);"}, {"question_id": 1248, "answer_sql": "SELECT COUNT(DISTINCT Patient.ID) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.Birthday > '1980-01-01' AND Laboratory.FG BETWEEN 150 AND 450;"}, {"question_id": 1249, "answer_sql": "SELECT DISTINCT Diagnosis FROM Examination WHERE `U-PRO` >= 30;"}, {"question_id": 1250, "answer_sql": "SELECT p.ID FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE e.Diagnosis = 'SLE' AND p.ID IN (SELECT l.ID FROM Laboratory l WHERE l.`U-PRO` BETWEEN 0 AND 30);"}, {"question_id": 1251, "answer_sql": "SELECT COUNT(*) FROM Examination e JOIN Patient p ON e.ID = p.ID WHERE e.`aCL IgG` < 900 AND p.Symptoms = 'abortion';"}, {"question_id": 1252, "answer_sql": "SELECT COUNT(*) FROM Examination e JOIN Patient p ON e.ID = p.ID WHERE e.`aCL IgG` BETWEEN 900 AND 2000 AND p.Symptoms IS NOT NULL;"}, {"question_id": 1253, "answer_sql": "SELECT p.Diagnosis FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE e.IGA BETWEEN 80 AND 500 ORDER BY e.IGA DESC LIMIT 1;"}, {"question_id": 1254, "answer_sql": "SELECT COUNT(*) FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE e.`aCL IgA` BETWEEN 80 AND 500 AND YEAR(p.`First Date`) >= 1990;"}, {"question_id": 1255, "answer_sql": "SELECT Diagnosis, COUNT(*) as Frequency FROM Examination WHERE `aCL IgM` NOT BETWEEN 40 AND 400 GROUP BY Diagnosis ORDER BY Frequency DESC LIMIT 1;"}, {"question_id": 1256, "answer_sql": "SELECT COUNT(*) FROM Patient WHERE (CRP LIKE '+' OR CRP LIKE '-' OR CRP < 1.0) AND Description IS NULL;"}, {"question_id": 1257, "answer_sql": "SELECT COUNT(DISTINCT p.ID) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.CRP NOT IN('+-', '-') AND l.CRP >= 1.0 AND l.CRP >= 1.0 AND YEAR(CURDATE()) - YEAR(p.Birthday) < 18;"}, {"question_id": 1258, "answer_sql": "SELECT COUNT(DISTINCT p.ID) FROM Patient p JOIN Examination e ON p.ID = e.ID JOIN Laboratory l ON p.ID = l.ID WHERE e.RA IN('-', '+-') AND l.KCT = '+';"}, {"question_id": 1259, "answer_sql": "SELECT DISTINCT T1.Diagnosis FROM Patient T1 JOIN Examination T2 ON T1.ID = T2.ID WHERE YEAR(T1.Birthday) >= 1995 AND T1.RA IN('-', '+-');"}, {"question_id": 1260, "answer_sql": "SELECT Patient.ID FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.RF < 20 AND (YEAR(CURDATE()) - YEAR(Patient.Birthday)) > 60;"}, {"question_id": 1261, "answer_sql": "SELECT COUNT(*) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.RF < 20 AND p.Thrombosis = '0';"}, {"question_id": 1262, "answer_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Examination T1 JOIN Laboratory T2 ON T1.ID = T2.ID WHERE T2.C3 > 35 AND T1.ANA Pattern = 'P';"}, {"question_id": 1263, "answer_sql": "SELECT p.ID FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE e.`aCL IgA` = (SELECT MAX(`aCL IgA`) FROM Examination) AND e.Thrombosis IS NOT NULL;"}, {"question_id": 1264, "answer_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Examination T1 JOIN Patient T2 ON T1.ID = T2.ID WHERE T2.Thrombosis = 1 AND T1.C4 > 10;"}, {"question_id": 1265, "answer_sql": "SELECT COUNT(DISTINCT Patient.ID) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.RNP IN ('-', '+-') AND Patient.Admission = '+';"}, {"question_id": 1266, "answer_sql": "SELECT P.Birthday AS `Date of Birth` FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.RNP NOT IN ('-', '+-') ORDER BY P.Birthday ASC LIMIT 1;"}, {"question_id": 1267, "answer_sql": "SELECT COUNT(*) FROM Examination e JOIN Patient p ON e.ID = p.ID WHERE p.SM IN ('-', '+-') AND e.Thrombosis = 1;"}, {"question_id": 1268, "answer_sql": "SELECT ID FROM Patient WHERE SMA NOT IN('-', '+-') ORDER BY Birthday ASC LIMIT 3;"}, {"question_id": 1269, "answer_sql": "SELECT ID FROM Examination WHERE `Examination Date` >= '1997-01-01' AND SC170 IN('-', '+-');"}, {"question_id": 1270, "answer_sql": "SELECT COUNT(DISTINCT p.ID) FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE e.SC170 IN('-', '+-') AND p.SEX = 'M' AND p.Symptoms LIKE '%vertigo%';"}, {"question_id": 1271, "answer_sql": "SELECT COUNT(DISTINCT Patient.ID) FROM Patient LEFT JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.`ANA Pattern` IN ('-', '+-') AND YEAR(Patient.`First Date`) < 1990;"}, {"question_id": 1272, "answer_sql": "SELECT p.ID FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE e.`ANA Pattern` LIKE '%SSA%' AND e.`ANA Pattern` NOT LIKE '%-%' AND e.`ANA Pattern` NOT LIKE '%+-%' AND p.`First Date` = (SELECT MIN(`First Date`) FROM Patient);"}, {"question_id": 1273, "answer_sql": "SELECT COUNT(DISTINCT p.ID) FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE e.`ANA Pattern` = '-' OR e.`ANA Pattern` = '+-' AND e.Diagnosis = 'SLE';"}, {"question_id": 1274, "answer_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Examination T1 JOIN Patient T2 ON T1.ID = T2.ID WHERE T1.`ANA Pattern` IN ('-', '+-') AND T1.Symptoms IS NOT NULL;"}, {"question_id": 1275, "answer_sql": "SELECT COUNT(*) FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE p.SEX = 'M' AND e.CENTROMEA IN('-', '+-') AND e.SSB IN('-', '+-');"}, {"question_id": 1276, "answer_sql": "SELECT DISTINCT T2.Diagnosis FROM Examination T1 INNER JOIN Laboratory T2 ON T1.ID = T2.ID WHERE T2.`DNA` >= 8;"}, {"question_id": 1277, "answer_sql": "SELECT COUNT(DISTINCT Patient.ID) FROM Patient LEFT JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.`DNA` IS NULL AND Patient.Description IS NULL;"}, {"question_id": 1278, "answer_sql": "SELECT COUNT(*) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.`DNA-II` > 8 AND p.Admission = '+';"}, {"question_id": 1279, "answer_sql": "SELECT (COUNT(DISTINCT T1.ID) * 1.0 / COUNT(DISTINCT T1.ID) * 1.0) AS percentage FROM Examination T1 JOIN Patient T2 ON T1.ID = T2.ID WHERE T1.GOT >= 60 AND T2.Diagnosis = 'SLE';"}, {"question_id": 1280, "answer_sql": "SELECT COUNT(*) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.SEX = 'M' AND l.GOT < 60;"}, {"question_id": 1281, "answer_sql": "SELECT MIN(Birthday) AS YoungestBirthday FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE e.`GOT` >= 60;"}, {"question_id": 1282, "answer_sql": "SELECT p.Birthday FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.GPT < 60 ORDER BY l.GPT DESC LIMIT 3;"}, {"question_id": 1283, "answer_sql": "SELECT COUNT(*) FROM Examination e JOIN Patient p ON e.ID = p.ID WHERE e.`GOT` < 60 AND p.SEX = 'M';"}, {"question_id": 1284, "answer_sql": "SELECT MIN(`First Date`) FROM Patient WHERE EXISTS ( SELECT 1 FROM Examination e WHERE e.ID = Patient.ID AND e.LDH < 500 )"}, {"question_id": 1285, "answer_sql": "SELECT Laboratory.Date FROM Laboratory JOIN Patient ON Laboratory.ID = Patient.ID WHERE Patient.ID = (SELECT ID FROM Patient ORDER BY `First Date` DESC LIMIT 1) AND Laboratory.LDH >= 500;"}, {"question_id": 1286, "answer_sql": "SELECT COUNT(*) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.ALP >= 300 AND p.Admission = '+';"}, {"question_id": 1287, "answer_sql": "SELECT COUNT(*) FROM Patient p LEFT JOIN Laboratory l ON p.ID = l.ID WHERE p.Admission = '-' AND l.ALP < 300;"}, {"question_id": 1288, "answer_sql": "SELECT DISTINCT T2.Diagnosis FROM Laboratory T1 JOIN Examination T2 ON T1.ID = T2.ID WHERE T1.TP < 6.0;"}, {"question_id": 1289, "answer_sql": "SELECT COUNT(*) FROM Examination e JOIN Patient p ON e.ID = p.ID WHERE e.Diagnosis = 'SJS' AND EXISTS ( SELECT 1 FROM Laboratory l WHERE l.ID = e.ID AND l.TP > 6.0 AND l.TP < 8.5 );"}, {"question_id": 1290, "answer_sql": "SELECT ExaminationDate FROM Examination WHERE ALB > 3.5 AND ALB < 5.5 ORDER BY ALB DESC LIMIT 1;"}, {"question_id": 1291, "answer_sql": "SELECT COUNT(*) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.SEX = 'M' AND l.ALB > 3.5 AND l.ALB < 5.5 AND l.TP BETWEEN 6.0 AND 8.5;"}, {"question_id": 1292, "answer_sql": "SELECT MAX(aCL_IgG) AS aCL_IgG, MAX(aCL_IgM) AS aCL_IgM, MAX(aCL_IgA) AS aCL_IgA FROM Examination WHERE Sex = 'F' AND UA > 6.50;"}, {"question_id": 1293, "answer_sql": "SELECT MAX(ANA) FROM Examination WHERE CRE < 1.5;"}, {"question_id": 1294, "answer_sql": "SELECT p.ID FROM Patient p JOIN Laboratory l ON p.ID = l.ID JOIN Examination e ON p.ID = e.ID WHERE l.CRE < 1.5 AND e.aCL IgA = (SELECT MAX(aCL IgA) FROM Examination);"}, {"question_id": 1295, "answer_sql": "SELECT COUNT(*) FROM Examination e JOIN Patient p ON e.ID = p.ID WHERE e.`T-BIL` >= 2.0 AND e.`ANA Pattern` LIKE '%P%';"}, {"question_id": 1296, "answer_sql": "SELECT ANA FROM Examination WHERE T-BIL < 2.0 ORDER BY T-BIL DESC LIMIT 1;"}, {"question_id": 1297, "answer_sql": "SELECT COUNT(*) FROM Examination e JOIN Patient p ON e.ID = p.ID WHERE e.T_CHO >= 250 AND e.KCT = '-';"}, {"question_id": 1298, "answer_sql": "SELECT COUNT(*) FROM Examination e JOIN Patient p ON e.ID = p.ID WHERE e.`T-CHO` < 250 AND e.`ANA Pattern` = 'P';"}, {"question_id": 1299, "answer_sql": "SELECT COUNT(*) FROM Examination e JOIN Patient p ON e.ID = p.ID WHERE e.`TG` < 200 AND p.Symptoms IS NOT NULL;"}, {"question_id": 1300, "answer_sql": "SELECT T.Diagnosis FROM Laboratory L JOIN Patient P ON L.ID = P.ID WHERE L.TG < 200 ORDER BY L.TG DESC LIMIT 1;"}, {"question_id": 1301, "answer_sql": "SELECT DISTINCT Patient.ID FROM Patient LEFT JOIN Examination ON Patient.ID = Examination.ID LEFT JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Examination.Thrombosis = 0 AND Laboratory.CPK < 250;"}, {"question_id": 1302, "answer_sql": "SELECT COUNT(*) FROM Examination e JOIN Laboratory l ON e.ID = l.ID WHERE e.Thrombosis IS NOT NULL AND l.CPK < 250 AND (e.KCT = '+' OR e.RVVT = '+' OR e.LAC = '+');"}, {"question_id": 1303, "answer_sql": "SELECT MIN(Patient.Birthday) FROM Patient INNER JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.GLU > 180;"}, {"question_id": 1304, "answer_sql": "SELECT COUNT(*) FROM Examination e JOIN Patient p ON e.ID = p.ID WHERE e.Thrombosis = 0 AND e.GLU < 180;"}, {"question_id": 1305, "answer_sql": "SELECT COUNT(*) FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE p.Admission = '+' AND e.WBC BETWEEN 3.5 AND 9.0;"}, {"question_id": 1306, "answer_sql": "SELECT COUNT(*) FROM Examination e JOIN Patient p ON e.ID = p.ID WHERE p.Diagnosis = 'SLE' AND e.WBC BETWEEN 3.5 AND 9.0;"}, {"question_id": 1307, "answer_sql": "SELECT p.ID FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE (l.RBC <= 3.5 OR l.RBC >= 6.0) AND p.Admission = '-';"}, {"question_id": 1308, "answer_sql": "SELECT COUNT(*) FROM Examination e JOIN Patient p ON e.ID = p.ID WHERE e.PLT > 100 AND e.PLT < 400 AND p.Diagnosis IS NOT NULL;"}, {"question_id": 1309, "answer_sql": "SELECT PLT FROM Laboratory WHERE ID IN (SELECT ID FROM Examination WHERE Diagnosis = 'MCTD') AND (PLT > 100 AND PLT < 400);"}, {"question_id": 1310, "answer_sql": "SELECT AVG(PT) FROM Laboratory WHERE SEX = 'M' AND PT < 14;"}, {"question_id": 1311, "answer_sql": "SELECT COUNT(*) FROM Examination e JOIN Patient p ON e.ID = p.ID WHERE e.Thrombosis IN (2, 1) AND e.PT < 14;"}, {"question_id": 1312, "answer_sql": "SELECT major_name FROM member WHERE member_id = 'Angela Sanders';"}, {"question_id": 1313, "answer_sql": "SELECT COUNT(*) FROM member WHERE link_to_major IN ( SELECT major_id FROM major WHERE department = 'Engineering' );"}, {"question_id": 1314, "answer_sql": "SELECT member.first_name || ' ' || member.last_name AS full_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'Art and Design';"}, {"question_id": 1315, "answer_sql": "SELECT COUNT(*) FROM member JOIN attendance ON member.member_id = attendance.link_to_member JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women\\'s Soccer';"}, {"question_id": 1316, "answer_sql": "SELECT member.phone FROM member JOIN attendance ON member.member_id = attendance.link_to_member JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women\\'s Soccer';"}, {"question_id": 1317, "answer_sql": "SELECT COUNT(*) FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE e.event_name = 'Women\\'s Soccer' AND m.t_shirt_size = 'Medium';"}, {"question_id": 1318, "answer_sql": "SELECT e.event_id, e.event_name, COUNT(a.link_to_event) AS total_attendance FROM event e JOIN attendance a ON e.event_id = a.link_to_event GROUP BY e.event_id, e.event_name ORDER BY total_attendance DESC LIMIT 1;"}, {"question_id": 1319, "answer_sql": "SELECT college FROM major WHERE major_id IN (SELECT link_to_major FROM member WHERE position = 'Vice President');"}, {"question_id": 1320, "answer_sql": "SELECT e.event_name FROM event e JOIN attendance a ON e.event_id = a.link_to_event JOIN member m ON a.link_to_member = m.member_id WHERE m.first_name = 'Maya' AND m.last_name = 'Mclean';"}, {"question_id": 1321, "answer_sql": "SELECT COUNT(*) FROM attendance a JOIN event e ON a.link_to_event = e.event_id JOIN member m ON a.link_to_member = m.member_id WHERE m.first_name = 'Sacha' AND m.last_name = 'Harrison' AND YEAR(e.event_date) = 2019;"}, {"question_id": 1322, "answer_sql": "SELECT COUNT(event_id) FROM event e JOIN attendance a ON e.event_id = a.link_to_event JOIN member m ON a.link_to_member = m.member_id WHERE e.type = 'Meeting' GROUP BY e.event_id HAVING COUNT(m.member_id) > 10;"}, {"question_id": 1323, "answer_sql": "SELECT e.event_name FROM event e JOIN attendance a ON e.event_id = a.link_to_event GROUP BY e.event_id HAVING COUNT(a.link_to_member) > 20;"}, {"question_id": 1324, "answer_sql": "SELECT AVG(COUNT(DISTINCT event_name)) AS average_attendance FROM event WHERE type = 'Meeting' AND YEAR(event_date) = 2020;"}, {"question_id": 1325, "answer_sql": "SELECT MAX(cost) AS most_expensive_item FROM expense WHERE link_to_budget IN ( SELECT budget_id FROM budget WHERE link_to_event IN ( SELECT event_id FROM event ) );"}, {"question_id": 1326, "answer_sql": "SELECT COUNT(*) FROM member WHERE link_to_major = (SELECT major_id FROM major WHERE major_name = 'Environmental Engineering');"}, {"question_id": 1327, "answer_sql": "SELECT member.first_name, member.last_name FROM member JOIN attendance ON member.member_id = attendance.link_to_member JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Laugh Out Loud';"}, {"question_id": 1328, "answer_sql": "SELECT last_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Law and Constitutional Studies';"}, {"question_id": 1329, "answer_sql": "SELECT zip_code.county FROM zip_code JOIN member ON member.zip = zip_code.zip_code WHERE member.first_name = 'Sherri' AND member.last_name = 'Ramsey';"}, {"question_id": 1330, "answer_sql": "SELECT college FROM major WHERE major_id IN (SELECT link_to_major FROM member WHERE member_id = 'Tyler Hewitt');"}, {"question_id": 1331, "answer_sql": "SELECT SUM(amount) FROM income WHERE link_to_member IN (SELECT member_id FROM member WHERE position = 'Vice President');"}, {"question_id": 1332, "answer_sql": "SELECT SUM(b.spent) FROM budget b JOIN event e ON b.link_to_event = e.event_id WHERE e.event_name = 'September Meeting' AND b.category = 'Food';"}, {"question_id": 1333, "answer_sql": "SELECT member.first_name, member.last_name, zip_code.city, zip_code.state FROM member JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.position = 'President';"}, {"question_id": 1334, "answer_sql": "SELECT member.first_name, member.last_name FROM member JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.state = 'Illinois';"}, {"question_id": 1335, "answer_sql": "SELECT SUM(b.spent) FROM budget b JOIN event e ON b.link_to_event = e.event_id WHERE e.event_name = 'September Meeting' AND b.category = 'Advertisement';"}, {"question_id": 1336, "answer_sql": "SELECT DISTINCT m.department FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE m.first_name = 'Pierce' OR m.first_name = 'Guidi';"}, {"question_id": 1337, "answer_sql": "SELECT SUM(budget.amount) FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'October Speaker';"}, {"question_id": 1338, "answer_sql": "SELECT e.expense_id, e.approved FROM expense e JOIN budget b ON e.link_to_budget = b.budget_id JOIN event ev ON b.link_to_event = ev.event_id WHERE ev.event_name = 'October Meeting' AND ev.event_date = '2019-10-08';"}, {"question_id": 1339, "answer_sql": "SELECT SUM(cost) / COUNT(cost) AS avg_cost FROM expense WHERE MONTH(expense_date) = 9 OR MONTH(expense_date) = 10;"}, {"question_id": 1340, "answer_sql": "SELECT SUM(CASE WHEN YEAR(event_date) = 2019 THEN budget.spent ELSE 0 END) - SUM(CASE WHEN YEAR(event_date) = 2020 THEN budget.spent ELSE 0 END) AS total_spent_difference FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE YEAR(event_date) IN (2019, 2020);"}, {"question_id": 1341, "answer_sql": "SELECT location FROM event WHERE event_name = 'Spring Budget Review';"}, {"question_id": 1342, "answer_sql": "SELECT SUM(cost) FROM expense WHERE expense_description = 'Poster' AND expense_date = '2019-09-04';"}, {"question_id": 1343, "answer_sql": "SELECT b.remaining FROM budget b JOIN event e ON b.link_to_event = e.event_id WHERE e.type = 'Food' AND b.remaining = (SELECT MAX(budget.remaining) FROM budget WHERE budget.category = 'Food');"}, {"question_id": 1344, "answer_sql": "SELECT notes FROM income WHERE source = 'Fundraising' AND date_received = '2019-09-14';"}, {"question_id": 1345, "answer_sql": "SELECT COUNT(*) FROM major WHERE department = 'College of Humanities and Social Sciences';"}, {"question_id": 1346, "answer_sql": "SELECT phone FROM member WHERE first_name = 'Carlo' AND last_name = 'Jacobs';"}, {"question_id": 1347, "answer_sql": "SELECT zip_code.county FROM member JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.first_name = 'Adela' AND member.last_name = 'O''Gallagher';"}, {"question_id": 1348, "answer_sql": "SELECT COUNT(*) FROM budget WHERE link_to_event = 'November Meeting' AND remaining < 0;"}, {"question_id": 1349, "answer_sql": "SELECT SUM(b.amount) FROM budget b JOIN event e ON b.link_to_event = e.event_id WHERE e.event_name = 'September Speaker';"}, {"question_id": 1350, "answer_sql": "SELECT e.event_status FROM event e JOIN expense e2 ON e.event_id = e2.link_to_event WHERE e2.expense_description = 'Post Cards, Posters' AND e2.expense_date = '2019-8-20';"}, {"question_id": 1351, "answer_sql": "SELECT major_name FROM member WHERE first_name = 'Brent' AND last_name = 'Thomason';"}, {"question_id": 1352, "answer_sql": "SELECT COUNT(*) FROM member WHERE link_to_major = (SELECT major_id FROM major WHERE major_name = 'Human Development and Family Studies') AND t_shirt_size = 'Large';"}, {"question_id": 1353, "answer_sql": "SELECT type FROM zip_code WHERE city = 'Aarhus' AND county = 'Aarhus Kommune' AND state = 'Kommunal' AND short_state = 'AR';"}, {"question_id": 1354, "answer_sql": "SELECT m.major_name FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE m.position = 'Vice President';"}, {"question_id": 1355, "answer_sql": "SELECT state FROM zip_code JOIN member ON member.zip = zip_code.zip_code WHERE member.first_name = 'Sacha' AND member.last_name = 'Harrison';"}, {"question_id": 1356, "answer_sql": "SELECT DISTINCT m.department FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE m.position = 'President';"}, {"question_id": 1357, "answer_sql": "SELECT date_received FROM income WHERE source = 'Dues' AND link_to_member = 'Connor Hilton';"}, {"question_id": 1358, "answer_sql": "SELECT first_name, last_name FROM member WHERE link_to_member IN (SELECT link_to_member FROM income WHERE source = 'Dues' ORDER BY date_received LIMIT 1);"}, {"question_id": 1359, "answer_sql": "SELECT DIVIDE(SUM(b.spent), (SELECT SUM(b.spent) FROM budget b WHERE b.category = 'Advertisement' AND b.link_to_event = (SELECT event_id FROM event WHERE event_name = 'October Meeting'))) AS ratio FROM budget b WHERE b.category = 'Advertisement' AND b.link_to_event = (SELECT event_id FROM event WHERE event_name = 'Yearly Kickoff');"}, {"question_id": 1360, "answer_sql": "SELECT (SUM(b.spent) / COUNT(e.event_name)) * 100 AS budget_percentage FROM budget b JOIN event e ON b.link_to_event = e.event_id WHERE e.event_name = 'November Speaker' AND b.category = 'Parking';"}, {"question_id": 1361, "answer_sql": "SELECT SUM(cost) FROM expense WHERE expense_description = 'Pizza';"}, {"question_id": 1362, "answer_sql": "SELECT COUNT(*) FROM zip_code WHERE state = 'Virginia' AND city = 'Orange County';"}, {"question_id": 1363, "answer_sql": "SELECT DISTINCT department FROM major WHERE college = 'College of Humanities and Social Sciences';"}, {"question_id": 1364, "answer_sql": "SELECT city, county, state FROM zip_code WHERE zip_code = (SELECT zip FROM member WHERE member_id = (SELECT link_to_member FROM member WHERE first_name = 'Amy' AND last_name = 'Firth'));"}, {"question_id": 1365, "answer_sql": "SELECT e.expense_description FROM expense e JOIN budget b ON e.link_to_budget = b.budget_id WHERE b.remaining = (SELECT MIN(remaining) FROM budget);"}, {"question_id": 1366, "answer_sql": "SELECT m.* FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE e.event_name = 'October Meeting';"}, {"question_id": 1367, "answer_sql": "SELECT major.college FROM major JOIN member ON member.link_to_major = major.major_id GROUP BY major.college ORDER BY COUNT(member.member_id) DESC LIMIT 1;"}, {"question_id": 1368, "answer_sql": "SELECT major_name FROM member WHERE phone = '809-555-3360';"}, {"question_id": 1369, "answer_sql": "SELECT e.event_name, b.amount FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE b.amount = (SELECT MAX(amount) FROM budget);"}, {"question_id": 1370, "answer_sql": "SELECT e.expense_description FROM expense e JOIN member m ON e.link_to_member = m.member_id WHERE m.position = 'Vice President';"}, {"question_id": 1371, "answer_sql": "SELECT COUNT(*) FROM attendance a JOIN event e ON a.link_to_event = e.event_id WHERE e.event_name = 'Women''s Soccer';"}, {"question_id": 1372, "answer_sql": "SELECT date_received FROM income WHERE link_to_member = (SELECT member_id FROM member WHERE first_name = 'Casey' AND last_name = 'Mason');"}, {"question_id": 1373, "answer_sql": "SELECT COUNT(*) FROM member WHERE zip IN ( SELECT zip_code FROM zip_code WHERE state = 'Maryland' );"}, {"question_id": 1374, "answer_sql": "SELECT COUNT(*) FROM attendance a JOIN event e ON a.link_to_event = e.event_id JOIN member m ON a.link_to_member = m.member_id WHERE m.phone = '954-555-6240';"}, {"question_id": 1375, "answer_sql": "SELECT member.first_name, member.last_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'School of Applied Sciences, Technology and Education';"}, {"question_id": 1376, "answer_sql": "SELECT e.event_id, MAX(DIVIDE(b.spent, b.amount)) AS spend_to_budget_ratio FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE e.status = 'Closed' GROUP BY e.event_id ORDER BY spend_to_budget_ratio DESC LIMIT 1;"}, {"question_id": 1377, "answer_sql": "SELECT COUNT(*) FROM member WHERE position = 'President';"}, {"question_id": 1378, "answer_sql": "SELECT MAX(budget.spent) AS highest_budget_spend FROM budget JOIN event ON budget.link_to_event = event.event_id;"}, {"question_id": 1379, "answer_sql": "SELECT COUNT(*) FROM event WHERE type = 'Meeting' AND YEAR(event_date) = 2020;"}, {"question_id": 1380, "answer_sql": "SELECT SUM(budget.spent) AS total_food_spent FROM budget WHERE budget.category = 'Food';"}, {"question_id": 1381, "answer_sql": "SELECT member.first_name, member.last_name FROM member JOIN attendance ON member.member_id = attendance.link_to_member GROUP BY member.member_id HAVING COUNT(attendance.link_to_event) > 7;"}, {"question_id": 1382, "answer_sql": "SELECT member.first_name, member.last_name FROM member JOIN attendance ON member.member_id = attendance.link_to_member JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Community Theater' AND member.link_to_major = (SELECT major_id FROM major WHERE major_name = 'Interior Design');"}, {"question_id": 1383, "answer_sql": "SELECT first_name || ' ' || last_name AS full_name FROM member WHERE zip = (SELECT zip_code FROM zip_code WHERE city = 'Georgetown' AND state = 'South Carolina');"}, {"question_id": 1384, "answer_sql": "SELECT SUM(income.amount) FROM income JOIN member ON income.link_to_member = member.member_id WHERE member.first_name = 'Grant' AND member.last_name = 'Gilmour';"}, {"question_id": 1385, "answer_sql": "SELECT member.first_name, member.last_name FROM member JOIN income ON member.member_id = income.link_to_member WHERE income.amount > 40;"}, {"question_id": 1386, "answer_sql": "SELECT SUM(cost) AS total_expense FROM expense WHERE link_to_event = ( SELECT event_id FROM event WHERE event_name = 'Baseball game' );"}, {"question_id": 1387, "answer_sql": "SELECT member.first_name, member.last_name FROM member JOIN budget ON member.member_id = budget.link_to_member JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'Yearly Kickoff' AND budget.event_status = 'managed';"}, {"question_id": 1388, "answer_sql": "SELECT member.first_name, member.last_name, income.source FROM member JOIN income ON member.member_id = income.link_to_member WHERE (member.first_name, member.last_name) IN ( SELECT member.first_name, member.last_name FROM member JOIN income ON member.member_id = income.link_to_member GROUP BY member.member_id HAVING SUM(income.amount) = ( SELECT MAX(SUM(expense.cost)) FROM ( SELECT expense.cost FROM expense WHERE expense.link_to_budget IN ( SELECT budget.budget_id FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE event.status = 'approved' ) ) AS total_expense ) );"}, {"question_id": 1389, "answer_sql": "SELECT event_name, MIN(cost) AS min_cost FROM event WHERE cost IS NOT NULL GROUP BY event_name ORDER BY min_cost ASC LIMIT 1;"}, {"question_id": 1390, "answer_sql": "SELECT DIVIDE(SUM(cost), (SELECT SUM(cost) FROM event)) * 100 AS percentage_cost FROM event WHERE event_name = 'Yearly Kickoff';"}, {"question_id": 1391, "answer_sql": "SELECT SUM(CASE WHEN major_name = 'Finance' THEN 1 ELSE 0 END) / SUM(CASE WHEN major_name = 'Physics' THEN 1 ELSE 0 END) AS ratio FROM major;"}, {"question_id": 1392, "answer_sql": "SELECT source, SUM(amount) AS total_amount FROM income WHERE date_received BETWEEN '2019-09-01' AND '2019-09-30' GROUP BY source ORDER BY total_amount DESC LIMIT 1;"}, {"question_id": 1393, "answer_sql": "SELECT first_name || ' ' || last_name AS full_name, email FROM member WHERE position = 'Secretary';"}, {"question_id": 1394, "answer_sql": "SELECT COUNT(*) FROM member WHERE link_to_major = (SELECT major_id FROM major WHERE major_name = 'Physics Teaching');"}, {"question_id": 1395, "answer_sql": "SELECT COUNT(DISTINCT a.link_to_member) FROM attendance a JOIN event e ON a.link_to_event = e.event_id WHERE e.event_name = 'Community Theater' AND YEAR(e.event_date) = 2019;"}, {"question_id": 1396, "answer_sql": "SELECT COUNT(*) AS num_events, m.major_name FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE m.first_name = 'Luisa' AND m.last_name = 'Guidi';"}, {"question_id": 1397, "answer_sql": "SELECT DIVIDE(SUM(budget.spent), COUNT(budget.spent)) AS avg_food_spent FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE event.event_status = 'Closed' AND budget.category = 'Food';"}, {"question_id": 1398, "answer_sql": "SELECT e.event_name FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE b.category = 'Advertisement' ORDER BY b.spent DESC LIMIT 1;"}, {"question_id": 1399, "answer_sql": "SELECT COUNT(*) > 0 FROM attendance a JOIN event e ON a.link_to_event = e.event_id WHERE e.event_name = 'Women\\'s Soccer' AND a.link_to_member = (SELECT member_id FROM member WHERE first_name = 'Maya' AND last_name = 'Mclean');"}, {"question_id": 1400, "answer_sql": "SELECT DIVIDE(SUM(CASE WHEN type = 'Community Service' THEN 1 ELSE 0 END), COUNT(event_id)) * 100 FROM event WHERE event_date BETWEEN '2019-01-01' AND '2019-12-31';"}, {"question_id": 1401, "answer_sql": "SELECT SUM(cost) AS total_cost FROM expense WHERE expense_description = 'Posters' AND link_to_event = ( SELECT event_id FROM event WHERE event_name = 'September Speaker' );"}, {"question_id": 1402, "answer_sql": "SELECT t_shirt_size, MAX(COUNT(t_shirt_size)) AS popularity FROM member GROUP BY t_shirt_size ORDER BY popularity DESC LIMIT 1;"}, {"question_id": 1403, "answer_sql": "SELECT e.event_name FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE e.status = 'Closed' AND b.remaining < 0 ORDER BY b.remaining LIMIT 1;"}, {"question_id": 1404, "answer_sql": "SELECT SUM(cost) AS total_value FROM expense WHERE link_to_event = ( SELECT event_id FROM event WHERE event_name = 'October Meeting' ) AND approved = 'approved';"}, {"question_id": 1405, "answer_sql": "SELECT b.category, b.spent FROM budget b JOIN event e ON b.link_to_event = e.event_id WHERE e.event_name = 'April Speaker' ORDER BY b.spent ASC;"}, {"question_id": 1406, "answer_sql": "SELECT MAX(amount) AS max_budgeted_amount FROM budget WHERE category = 'Food';"}, {"question_id": 1407, "answer_sql": "SELECT budget_id, amount FROM budget WHERE category = 'Advertisement' ORDER BY amount DESC LIMIT 3;"}, {"question_id": 1408, "answer_sql": "SELECT SUM(cost) FROM expense WHERE expense_description = 'Parking';"}, {"question_id": 1409, "answer_sql": "SELECT SUM(cost) AS total_expense FROM expense WHERE expense_date = '2019-08-20';"}, {"question_id": 1410, "answer_sql": "SELECT member.first_name, member.last_name, SUM(expense.cost) AS total_cost FROM member JOIN expense ON member.member_id = expense.link_to_member WHERE member.member_id = 'rec4BLdZHS2Blfp4v' GROUP BY member.first_name, member.last_name;"}, {"question_id": 1411, "answer_sql": "SELECT expense_description FROM expense WHERE link_to_member = 'Sacha Harrison';"}, {"question_id": 1412, "answer_sql": "SELECT expense_description FROM expense WHERE link_to_member IN (SELECT member_id FROM member WHERE t_shirt_size = 'X-Large');"}, {"question_id": 1413, "answer_sql": "SELECT zip FROM member JOIN expense ON member.member_id = expense.link_to_member WHERE expense.cost < 50;"}, {"question_id": 1414, "answer_sql": "SELECT major_name FROM member WHERE member_id = 'Phillip Cullen';"}, {"question_id": 1415, "answer_sql": "SELECT member.position FROM member JOIN link_to_major ON member.link_to_major = link_to_major.major_id WHERE link_to_major.major_name = 'Business';"}, {"question_id": 1416, "answer_sql": "SELECT COUNT(*) FROM member WHERE link_to_major = (SELECT major_id FROM major WHERE major_name = 'Business') AND t_shirt_size = 'Medium';"}, {"question_id": 1417, "answer_sql": "SELECT e.type FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE b.remaining > 30;"}, {"question_id": 1418, "answer_sql": "SELECT category FROM event WHERE location = 'MU 215';"}, {"question_id": 1419, "answer_sql": "SELECT category FROM event WHERE event_date = '2020-03-24T12:00:00';"}, {"question_id": 1420, "answer_sql": "SELECT major_name FROM member WHERE position = 'Vice President';"}, {"question_id": 1421, "answer_sql": "SELECT DIVIDE(SUM(CASE WHEN position = 'Member' AND major_name = 'Mathematics' THEN 1 ELSE 0 END), COUNT(member_id)) * 100 FROM member;"}, {"question_id": 1422, "answer_sql": "SELECT DISTINCT category FROM event WHERE location = 'MU 215';"}, {"question_id": 1423, "answer_sql": "SELECT COUNT(*) FROM income WHERE amount = 50;"}, {"question_id": 1424, "answer_sql": "SELECT COUNT(*) FROM member WHERE position = 'Member' AND t_shirt_size = 'X-Large';"}, {"question_id": 1425, "answer_sql": "SELECT COUNT(*) FROM major WHERE department = 'School of Applied Sciences, Technology and Education' AND college = 'College of Agriculture and Applied Sciences';"}, {"question_id": 1426, "answer_sql": "SELECT m.last_name, m.link_to_major, major.major_name, major.department, major.college FROM member m JOIN major ON m.link_to_major = major.major_id WHERE major.major_name = 'Environmental Engineering';"}, {"question_id": 1427, "answer_sql": "SELECT b.category FROM budget b JOIN event e ON b.link_to_event = e.event_id JOIN attendance a ON e.event_id = a.link_to_event WHERE e.location = 'MU 215' AND a.link_to_member IS NULL AND b.spent = 0 AND e.type = 'Guest Speaker';"}, {"question_id": 1428, "answer_sql": "SELECT zip_code.city, zip_code.state FROM member JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.position = 'Member' AND member.link_to_major IN ( SELECT major_id FROM major WHERE major_name = 'Electrical and Computer Engineering Department' );"}, {"question_id": 1429, "answer_sql": "SELECT e.event_name FROM event e JOIN attendance a ON e.event_id = a.link_to_event JOIN member m ON a.link_to_member = m.member_id JOIN major ma ON m.link_to_major = ma.major_id JOIN zip_code zc ON m.zip = zc.zip_code WHERE m.position = 'Vice President' AND zc.location = '900 E. Washington St.' AND e.type = 'Social';"}, {"question_id": 1430, "answer_sql": "SELECT last_name, position FROM member JOIN expense ON member.member_id = expense.link_to_member WHERE expense.expense_description = 'Pizza' AND expense.expense_date = '2019-09-10';"}, {"question_id": 1431, "answer_sql": "SELECT last_name FROM member JOIN attendance ON member.member_id = attendance.link_to_member JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer' AND member.position = 'Member';"}, {"question_id": 1432, "answer_sql": "SELECT DIVIDE(COUNT(CASE WHEN income.amount = 50 THEN 1 END), COUNT(member.member_id)) * 100 FROM member JOIN income ON member.member_id = income.link_to_member WHERE member.t_shirt_size = 'Medium' AND member.position = 'Member';"}, {"question_id": 1433, "answer_sql": "SELECT DISTINCT zip_code.state FROM zip_code WHERE zip_code.type = 'PO Box';"}, {"question_id": 1434, "answer_sql": "SELECT zip_code.zip_code FROM zip_code JOIN member ON zip_code.zip_code = member.zip WHERE member.position = 'Post Office Box' AND member.t_shirt_size IS NULL AND member.phone IS NULL;"}, {"question_id": 1435, "answer_sql": "SELECT event_name FROM event WHERE type = 'Game' AND status = 'Closed' AND event_date BETWEEN '2019-03-15' AND '2020-03-20';"}, {"question_id": 1436, "answer_sql": "SELECT e.event_id, e.event_name FROM event e JOIN expense ex ON e.event_id = ex.link_to_event JOIN member m ON ex.link_to_member = m.member_id WHERE ex.cost > 50;"}, {"question_id": 1437, "answer_sql": "SELECT m.first_name, m.last_name, e.event_id FROM member m JOIN expense e ON m.member_id = e.link_to_member WHERE e.approved = 'true' AND e.expense_date BETWEEN '2019-01-10' AND '2019-11-19';"}, {"question_id": 1438, "answer_sql": "SELECT college FROM member WHERE first_name = 'Katy' AND link_to_major = 'rec1N0upiVLy5esTO';"}, {"question_id": 1439, "answer_sql": "SELECT phone FROM member WHERE link_to_major = (SELECT major_id FROM major WHERE major_name = 'Business') AND zip = (SELECT zip_code FROM zip_code WHERE college = 'College of Agriculture and Applied Sciences');"}, {"question_id": 1440, "answer_sql": "SELECT email FROM member JOIN income ON member.member_id = income.link_to_member WHERE income.date_received BETWEEN '2019-09-10' AND '2019-11-19' AND income.amount > 20;"}, {"question_id": 1441, "answer_sql": "SELECT COUNT(*) FROM member WHERE link_to_major = (SELECT major_id FROM major WHERE major_name = 'education') AND position = 'Member';"}, {"question_id": 1442, "answer_sql": "SELECT DIVIDE(SUM(CASE WHEN budget.remaining < 0 THEN 1 ELSE 0 END), COUNT(budget.event_id)) * 100 AS percentage_over_budget FROM budget JOIN event ON budget.link_to_event = event.event_id;"}, {"question_id": 1443, "answer_sql": "SELECT event_id, location, status FROM event WHERE event_date BETWEEN '2019-11-01' AND '2020-03-31';"}, {"question_id": 1444, "answer_sql": "SELECT expense_description, SUM(cost) FROM expense GROUP BY expense_description HAVING SUM(cost) / COUNT(expense_id) > 50;"}, {"question_id": 1445, "answer_sql": "SELECT first_name || ' ' || last_name AS full_name FROM member WHERE t_shirt_size = 'X-Large';"}, {"question_id": 1446, "answer_sql": "SELECT DIVIDE(SUM(CASE WHEN zip_code.type = 'PO Box' THEN 1 ELSE 0 END), COUNT(zip_code.zip_code)) * 100 AS percentage_po_boxes FROM zip_code;"}, {"question_id": 1447, "answer_sql": "SELECT e.event_name, e.location FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE b.remaining > 0;"}, {"question_id": 1448, "answer_sql": "SELECT e.event_name, e.event_date FROM event e JOIN expense ej ON e.event_id = ej.link_to_event WHERE ej.expense_description = 'Pizza' AND ej.cost > 50 AND ej.cost < 100;"}, {"question_id": 1449, "answer_sql": "SELECT member.first_name, member.last_name, major.major_name FROM member JOIN expense ON member.member_id = expense.link_to_member WHERE expense.cost > 100 AND member.link_to_major = major.major_id;"}, {"question_id": 1450, "answer_sql": "SELECT zip_code.city, zip_code.state FROM event JOIN attendance ON event.event_id = attendance.link_to_event JOIN member ON attendance.link_to_member = member.member_id JOIN income ON member.member_id = income.link_to_member WHERE income.income_id IN (SELECT income_id FROM income GROUP BY income_id HAVING COUNT(income_id) > 40)"}, {"question_id": 1451, "answer_sql": "SELECT m.member_id, SUM(e.cost) as total_cost FROM member m JOIN expense e ON m.member_id = e.link_to_member WHERE e.event_id IN ( SELECT event_id FROM expense GROUP BY event_id HAVING COUNT(DISTINCT event_id) > 1 ) GROUP BY m.member_id ORDER BY total_cost DESC LIMIT 1;"}, {"question_id": 1452, "answer_sql": "SELECT DIVIDE(SUM(cost), COUNT(event_id)) AS average_amount_paid FROM income WHERE link_to_member NOT IN (SELECT link_to_member FROM member );"}, {"question_id": 1453, "answer_sql": "SELECT e.event_name FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE b.category = 'Parking' AND b.cost < (SELECT AVG(cost) FROM budget WHERE category = 'Parking');"}, {"question_id": 1454, "answer_sql": "SELECT DIVIDE(SUM(cost), COUNT(event_id)) * 100 AS percentage FROM event WHERE type = 'Game';"}, {"question_id": 1455, "answer_sql": "SELECT b.budget_id, b.spent FROM budget b JOIN expense e ON b.budget_id = e.link_to_budget WHERE e.expense_description = 'Water, chips, cookies' ORDER BY e.cost DESC LIMIT 1;"}, {"question_id": 1456, "answer_sql": "SELECT member.first_name, member.last_name, SUM(expense.cost) AS total_spent FROM member JOIN expense ON member.member_id = expense.link_to_member GROUP BY member.member_id ORDER BY total_spent DESC LIMIT 5;"}, {"question_id": 1457, "answer_sql": "SELECT m.first_name, m.last_name, m.phone FROM member m JOIN expense e ON m.member_id = e.link_to_member WHERE e.cost > (SELECT AVG(cost) FROM expense)"}, {"question_id": 1458, "answer_sql": "SELECT (SUM(CASE WHEN member.zip IN (SELECT zip_code FROM zip_code WHERE state = 'Maine') THEN 1 ELSE 0 END) / COUNT(member.position)) - (SUM(CASE WHEN member.zip IN (SELECT zip_code FROM zip_code WHERE state = 'Vermont') THEN 1 ELSE 0 END) / COUNT(member.position)) AS percentage_difference FROM member;"}, {"question_id": 1459, "answer_sql": "SELECT major_name, department FROM major WHERE major_id IN (SELECT link_to_major FROM member WHERE member_id = 'Garrett Gerke');"}, {"question_id": 1460, "answer_sql": "SELECT member.first_name, member.last_name, e.cost FROM member JOIN expense e ON member.member_id = e.link_to_member WHERE e.expense_description = 'Water, Veggie tray, supplies';"}, {"question_id": 1461, "answer_sql": "SELECT last_name, phone FROM member WHERE link_to_major = (SELECT major_id FROM major WHERE major_name = 'Elementary Education');"}, {"question_id": 1462, "answer_sql": "SELECT category, amount FROM budget WHERE link_to_event = (SELECT event_id FROM event WHERE event_name = 'January Speaker')"}, {"question_id": 1463, "answer_sql": "SELECT e.event_name FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE b.category = 'Food';"}, {"question_id": 1464, "answer_sql": "SELECT member.first_name, member.last_name, income.amount FROM member JOIN income ON member.member_id = income.link_to_member WHERE income.date_received = '2019-09-09'"}, {"question_id": 1465, "answer_sql": "SELECT category FROM budget WHERE link_to_event = (SELECT link_to_event FROM expense WHERE expense_description = 'Posters');"}, {"question_id": 1466, "answer_sql": "SELECT member.first_name, member.last_name, major.major_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Secretary';"}, {"question_id": 1467, "answer_sql": "SELECT e.event_name, SUM(b.spent) AS total_spent FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE b.category = 'Speaker Gifts' GROUP BY e.event_name;"}, {"question_id": 1468, "answer_sql": "SELECT city FROM zip_code WHERE zip_code = (SELECT zip FROM member WHERE member_id = 'Garrett Girke');"}, {"question_id": 1469, "answer_sql": "SELECT member.first_name, member.last_name, member.position FROM member JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.city = 'Lincolnton' AND zip_code.state = 'North Carolina' AND zip_code.zip_code = 28092;"}, {"question_id": 1470, "answer_sql": "SELECT COUNT(*) FROM gasstations WHERE Country = 'CZE' AND Segment = 'Premium';"}, {"question_id": 1471, "answer_sql": "SELECT (COUNT(CASE WHEN customers.Currency = 'EUR' THEN 1 END)) / (COUNT(CASE WHEN customers.Currency = 'CZK' THEN 1 END)) AS ratio FROM customers;"}, {"question_id": 1472, "answer_sql": "SELECT CustomerID FROM yearmonth WHERE Date BETWEEN '201201' AND '201212' ORDER BY Consumption ASC LIMIT 1;"}, {"question_id": 1473, "answer_sql": "SELECT AVG(Consumption) / 12 AS Average_Monthly_Consumption FROM yearmonth WHERE Date BETWEEN '20130101' AND '20131231' AND CustomerID IN ( SELECT CustomerID FROM customers WHERE Segment = 'SME' );"}, {"question_id": 1474, "answer_sql": "SELECT c.CustomerID, c.Segment, c.Currency, SUM(t.Amount) AS TotalConsumption FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID WHERE t.Date BETWEEN '201101' AND '201112' AND c.Currency = 'CZK' GROUP BY c.CustomerID, c.Segment, c.Currency ORDER BY TotalConsumption DESC;"}, {"question_id": 1475, "answer_sql": "SELECT COUNT(*) FROM yearmonth WHERE CustomerID IN ( SELECT CustomerID FROM customers WHERE Segment = 'KAM' ) AND Date BETWEEN '201201' AND '201212' AND Consumption < 30000;"}, {"question_id": 1476, "answer_sql": "SELECT (SELECT SUM(Consumption) FROM yearmonth WHERE Date BETWEEN '201201' AND '201212' AND CustomerID IN (SELECT CustomerID FROM customers WHERE Currency = 'CZK')) - (SELECT SUM(Consumption) FROM yearmonth WHERE Date BETWEEN '201201' AND '201212' AND CustomerID IN (SELECT CustomerID FROM customers WHERE Currency = 'EUR')) AS Difference;"}, {"question_id": 1477, "answer_sql": "SELECT YEAR(Date) AS Year, SUM(Consumption) AS TotalConsumption FROM yearmonth GROUP BY Year ORDER BY TotalConsumption DESC LIMIT 1;"}, {"question_id": 1478, "answer_sql": "SELECT c.Segment, SUM(r.Consumption) AS TotalConsumption FROM customers c JOIN yearmonth r ON c.CustomerID = r.CustomerID GROUP BY c.Segment ORDER BY TotalConsumption ASC LIMIT 1;"}, {"question_id": 1479, "answer_sql": "SELECT EXTRACT(YEAR FROM Date) AS Year, SUM(Consumption) AS TotalConsumption FROM yearmonth GROUP BY Year ORDER BY TotalConsumption DESC LIMIT 1;"}, {"question_id": 1480, "answer_sql": "SELECT month, MAX(Consumption) AS max_consumption FROM yearmonth WHERE SUBSTR(Date, 1, 4) = '2013' GROUP BY month ORDER BY max_consumption DESC LIMIT 1;"}, {"question_id": 1481, "answer_sql": "SELECT Segment, AVG(Consumption) AS avg_consumption FROM yearmonth WHERE Date BETWEEN '201301' AND '201312' GROUP BY Segment ORDER BY avg_consumption LIMIT 1 ), sme_avg AS ( SELECT avg_consumption FROM segment_averages WHERE Segment = 'SME' ), lam_avg AS ( SELECT avg_consumption FROM segment_averages WHERE Segment = 'LAM' ), kam_avg AS ( SELECT avg_consumption FROM segment_averages WHERE Segment = 'KAM' ) SELECT (sme_avg - lam_avg) AS sme_vs_lam, (lam_avg - kam_avg) AS lam_vs_kam, (kam_avg - sme_avg) AS kam_vs_sme FROM segment_averages, sme_avg, lam_avg, kam_avg;"}, {"question_id": 1482, "answer_sql": "SELECT c.CustomerID, y.Date, y.Consumption, y.Consumption - LAG(y.Consumption, 1, y.Consumption) OVER (PARTITION BY c.CustomerID ORDER BY y.Date) AS Consumption_Change FROM customers c JOIN yearmonth y ON c.CustomerID = y.CustomerID WHERE y.Date BETWEEN '201201' AND '201312' ), annual_data AS ( SELECT c.Segment, AVG(Consumption_Change) AS Average_Change FROM consumption_data cd JOIN customers c ON cd.CustomerID = c.CustomerID GROUP BY c.Segment ) SELECT Segment, Average_Change FROM annual_data ORDER BY Average_Change DESC, Average_Change ASC LIMIT 1;"}, {"question_id": 1483, "answer_sql": "SELECT SUM(Consumption) FROM yearmonth WHERE Date BETWEEN '201308' AND '201311' AND CustomerID = 6;"}, {"question_id": 1484, "answer_sql": "SELECT (SELECT COUNT(*) FROM gasstations WHERE Country = 'Czech Republic' AND Segment = 'discount') - (SELECT COUNT(*) FROM gasstations WHERE Country = 'Slovakia' AND Segment = 'discount') AS Difference;"}, {"question_id": 1485, "answer_sql": "SELECT (SELECT Consumption FROM yearmonth WHERE Date = '201304' AND CustomerID = 7) - (SELECT Consumption FROM yearmonth WHERE Date = '201304' AND CustomerID = 5) AS Difference;"}, {"question_id": 1486, "answer_sql": "SELECT (SELECT COUNT(*) FROM transactions_1k WHERE Currency = 'CZK') - (SELECT COUNT(*) FROM transactions_1k WHERE Currency = 'EUR') AS Difference;"}, {"question_id": 1487, "answer_sql": "SELECT c.CustomerID, c.Segment, c.Currency FROM customers c JOIN yearmonth ym ON c.CustomerID = ym.CustomerID WHERE c.Currency = 'Euro' AND ym.Date LIKE '201310%' ORDER BY ym.Consumption DESC LIMIT 1;"}, {"question_id": 1488, "answer_sql": "SELECT c.CustomerID, c.Segment, SUM(t.Amount) AS TotalConsumption FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID WHERE c.CustomerID = ( SELECT CustomerID FROM customers WHERE Segment = 'KAM' ) GROUP BY c.CustomerID, c.Segment ORDER BY TotalConsumption DESC LIMIT 1;"}, {"question_id": 1489, "answer_sql": "SELECT SUM(Consumption) FROM yearmonth WHERE Date = '201305' AND CustomerID IN (SELECT CustomerID FROM customers WHERE Segment = 'KAM');"}, {"question_id": 1490, "answer_sql": "SELECT (COUNT(DISTINCT CASE WHEN T.CustomerID IN (SELECT CustomerID FROM customers WHERE Segment = 'LAM') AND T.Amount > 46.73 THEN T.CustomerID END) * 100) / COUNT(DISTINCT CASE WHEN T.CustomerID IN (SELECT CustomerID FROM customers WHERE Segment = 'LAM') THEN T.CustomerID END) FROM transactions_1k T;"}, {"question_id": 1491, "answer_sql": "SELECT Country, COUNT(*) as Count FROM gasstations WHERE Price IS NOT NULL GROUP BY Country ORDER BY Count DESC;"}, {"question_id": 1492, "answer_sql": "SELECT (SUM(CASE WHEN T.Currency = 'EUR' THEN 1 ELSE 0 END) * 100) / COUNT(DISTINCT T.CustomerID) FROM transactions_1k T JOIN customers C ON T.CustomerID = C.CustomerID WHERE C.Segment = 'KAM';"}, {"question_id": 1493, "answer_sql": "SELECT (SUM(CASE WHEN Consumption > 528.3 THEN 1 ELSE 0 END) * 100.0) / COUNT(*) FROM yearmonth WHERE Date = '201202';"}, {"question_id": 1494, "answer_sql": "SELECT (COUNT(CASE WHEN gasstations.Country = 'Slovakia' AND gasstations.Segment = 'premium' THEN 1 END) * 100) / COUNT(gasstations.GasStationID) AS PercentageOfPremiumGasStations FROM gasstations;"}, {"question_id": 1495, "answer_sql": "SELECT CustomerID, SUM(Consumption) AS TotalConsumption FROM yearmonth WHERE Date = '201309' GROUP BY CustomerID ORDER BY TotalConsumption DESC LIMIT 1;"}, {"question_id": 1496, "answer_sql": "SELECT c.Segment FROM customers c JOIN yearmonth ym ON c.CustomerID = ym.CustomerID WHERE ym.Date = '201309' ORDER BY ym.Consumption ASC LIMIT 1;"}, {"question_id": 1497, "answer_sql": "SELECT c.CustomerID, c.Segment, c.Currency, m.Consumption FROM customers c JOIN yearmonth m ON c.CustomerID = m.CustomerID WHERE m.Date = '201206' ORDER BY m.Consumption ASC LIMIT 1;"}, {"question_id": 1498, "answer_sql": "SELECT MAX(Consumption) FROM yearmonth WHERE strftime('%Y', Date) = '2012';"}, {"question_id": 1499, "answer_sql": "SELECT MAX(Consumption) AS max_monthly_consumption FROM yearmonth WHERE Currency = 'euro';"}, {"question_id": 1500, "answer_sql": "SELECT Description FROM products JOIN transactions_1k ON products.ProductID = transactions_1k .ProductID JOIN yearmonth ON transactions_1k .CustomerID = yearmonth .CustomerID WHERE strftime('%Y%m', yearmonth .Date) = '201309';"}, {"question_id": 1501, "answer_sql": "SELECT DISTINCT Country FROM gasstations JOIN transactions_1k ON gasstations.GasStationID = transactions_1k.GasStationID WHERE Date LIKE '201306%'"}, {"question_id": 1502, "answer_sql": "SELECT DISTINCT gs.ChainID FROM gasstations gs JOIN transactions_1k t ON gs.GasStationID = t.GasStationID WHERE t.Price = 'EUR'"}, {"question_id": 1503, "answer_sql": "SELECT products.Description FROM transactions_1k JOIN products ON transactions_1k.ProductID = products.ProductID WHERE transactions_1k.Amount * transactions_1k.Price = 1;"}, {"question_id": 1504, "answer_sql": "SELECT AVG(Price) FROM transactions_1k WHERE Date LIKE '2012-01%';"}, {"question_id": 1505, "answer_sql": "SELECT COUNT(*) FROM yearmonth WHERE Consumption > 1000 AND CustomerID IN (SELECT CustomerID FROM customers WHERE Currency = 'EUR');"}, {"question_id": 1506, "answer_sql": "SELECT products.Description FROM transactions_1k JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID JOIN customers ON transactions_1k.CustomerID = customers.CustomerID WHERE gasstations.Country = 'CZE';"}, {"question_id": 1507, "answer_sql": "SELECT Time FROM transactions_1k WHERE GasStationID IN (SELECT GasStationID FROM gasstations WHERE ChainID = 11);"}, {"question_id": 1508, "answer_sql": "SELECT COUNT(*) FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE g.Country = 'CZE' AND t.Price > 1000;"}, {"question_id": 1509, "answer_sql": "SELECT COUNT(*) FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE g.Country = 'CZE' AND t.Date > '2012-01-01';"}, {"question_id": 1510, "answer_sql": "SELECT AVG(Price) FROM transactions_1k WHERE Country = 'CZE' AND GasStationID IN (SELECT GasStationID FROM gasstations WHERE Country = 'CZE');"}, {"question_id": 1511, "answer_sql": "SELECT AVG(t.Price) FROM transactions_1k t JOIN customers c ON t.CustomerID = c.CustomerID WHERE c.Currency = 'EUR';"}, {"question_id": 1512, "answer_sql": "SELECT CustomerID, SUM(Amount) AS TotalPaid FROM transactions_1k WHERE Date = '2012-08-25' GROUP BY CustomerID ORDER BY TotalPaid DESC LIMIT 1;"}, {"question_id": 1513, "answer_sql": "SELECT Country FROM gasstations AS g JOIN transactions_1k AS t ON g.GasStationID = t.GasStationID WHERE t.Date = '2012-08-25' ORDER BY t.Date ASC LIMIT 1;"}, {"question_id": 1514, "answer_sql": "SELECT C.Currency FROM customers C JOIN transactions_1k T ON C.CustomerID = T.CustomerID WHERE T.Date = '2012-08-24' AND T.Time = '16:25:00';"}, {"question_id": 1515, "answer_sql": "SELECT T2.Segment FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '2012-08-23' AND T1.Time = '21:20:00';"}, {"question_id": 1516, "answer_sql": "SELECT COUNT(*) FROM transactions_1k WHERE Date = '2012-08-26' AND Time < '13:00:00' AND Amount > 0;"}, {"question_id": 1517, "answer_sql": "SELECT Segment FROM customers ORDER BY CustomerID LIMIT 1;"}, {"question_id": 1518, "answer_sql": "SELECT Country FROM gasstations AS T1 WHERE T1.GasStationID = (SELECT GasStationID FROM transactions_1k WHERE Date = '2012-08-24' AND Time = '12:42:00');"}, {"question_id": 1519, "answer_sql": "SELECT T1.ProductID FROM transactions_1k AS T1 WHERE T1.Date = '2012-08-23' AND T1.Time = '21:20:00';"}, {"question_id": 1520, "answer_sql": "SELECT t.Date, t.Amount FROM transactions_1k t JOIN yearmonth y ON t.CustomerID = y.CustomerID AND strftime('%Y-%m', t.Date) = '2012-01' WHERE t.Date = '2012-08-24' AND t.Amount = 124.05;"}, {"question_id": 1521, "answer_sql": "SELECT COUNT(*) FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE t.Date = '2012-08-26' AND t.Time BETWEEN '08:00' AND '09:00' AND g.Country = 'CZE';"}, {"question_id": 1522, "answer_sql": "SELECT c.Currency FROM customers c JOIN yearmonth y ON c.CustomerID = y.CustomerID WHERE y.Date LIKE '201306' AND y.Consumption = 214582.17;"}, {"question_id": 1523, "answer_sql": "SELECT Country FROM gasstations WHERE GasStationID = (SELECT GasStationID FROM transactions_1k WHERE CardID = 667467);"}, {"question_id": 1524, "answer_sql": "SELECT c.Currency FROM customers c JOIN yearmonth y ON c.CustomerID = y.CustomerID JOIN transactions_1k t ON c.CustomerID = t.CustomerID WHERE t.Amount = 548.4 AND t.Date = '2012-08-24';"}, {"question_id": 1525, "answer_sql": "SELECT (COUNT(DISTINCT CASE WHEN C.Currency = 'EUR' THEN T.CustomerID END) / COUNT(T.CustomerID)) * 100 AS percentage FROM transactions_1k T JOIN customers C ON T.CustomerID = C.CustomerID WHERE T.Date = '2012-08-25';"}, {"question_id": 1526, "answer_sql": "SELECT CustomerID, Consumption FROM yearmonth WHERE Date < '2012-08-25' ), consumption_2013 AS ( SELECT CustomerID, Consumption FROM yearmonth WHERE Date >= '2012-08-25' AND Date < '2013-08-25' ) SELECT (c2.Consumption - c1.Consumption) / c1.Consumption AS DecreaseRate FROM consumption_2012 c1 JOIN consumption_2013 c2 ON c1.CustomerID = c2.CustomerID WHERE c1.CustomerID = ( SELECT CustomerID FROM transactions_1k WHERE Amount = 634.8 AND Date = '2012-08-25' );"}, {"question_id": 1527, "answer_sql": "SELECT GasStationID, SUM(Amount) AS TotalRevenue FROM transactions_1k GROUP BY GasStationID ORDER BY TotalRevenue DESC LIMIT 1;"}, {"question_id": 1528, "answer_sql": "SELECT (SUM(CASE WHEN t.Segment = 'premium' THEN 1 ELSE 0 END) * 100) / COUNT(DISTINCT t.Segment) FROM transactions_1k t JOIN customers c ON t.CustomerID = c.CustomerID WHERE c.Currency = 'SVK';"}, {"question_id": 1529, "answer_sql": "SELECT SUM(Amount) FROM transactions_1k WHERE CustomerID = 38508 AND Date = '201201';"}, {"question_id": 1530, "answer_sql": "SELECT products.Description AS ProductName FROM products JOIN transactions_1k ON transactions_1k.ProductID = products.ProductID GROUP BY products.Description ORDER BY COUNT(*) DESC LIMIT 5;"}, {"question_id": 1531, "answer_sql": "SELECT c.CustomerID, c.Currency, AVG(t.Price / t.Amount) AS AvgPricePerItem FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID GROUP BY c.CustomerID, c.Currency ORDER BY SUM(t.Amount) DESC LIMIT 1;"}, {"question_id": 1532, "answer_sql": "SELECT Country FROM gasstations gs JOIN transactions_1k t ON gs.GasStationID = t.GasStationID JOIN products p ON t.ProductID = p.ProductID WHERE p.ProductID = 2 AND t.Amount = 1 AND t.Price = (SELECT MAX(Price) FROM transactions_1k WHERE ProductID = 2 AND Amount = 1)"}, {"question_id": 1533, "answer_sql": "SELECT c.CustomerID, ym.Consumption FROM customers c JOIN yearmonth ym ON c.CustomerID = ym.CustomerID JOIN transactions_1k t ON c.CustomerID = t.CustomerID WHERE t.ProductID = 5 AND t.Price / t.Amount > 29.00 AND STREGIN(ym.Date, '201208', 1) = 1;"}]