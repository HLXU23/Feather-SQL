[{"question_id": 0, "answer_sql": "SELECT MAX(FreeMealCountK12 / EnrollmentK12) AS HighestEligibleFreeRateK12 FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.County = 'Alameda';"}, {"question_id": 1, "answer_sql": "SELECT s.SchoolName, (frpm.FreeMealCount / frpm.Enrollment) AS EligibleFreeRate FROM frpm JOIN schools s ON frpm.CDSCode = s.CDSCode WHERE s.SchoolType = 'Continuation School' AND frpm.Enrollment > 0 ORDER BY EligibleFreeRate ASC LIMIT 3;"}, {"question_id": 2, "answer_sql": "SELECT s.Zip FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE f.CharterSchoolNumber IS NOT NULL AND s.County = 'Fresno' AND s.District = 'Fresno County Office of Education';"}, {"question_id": 3, "answer_sql": "SELECT School, Street, City, State FROM schools JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE Enrollment (Ages 5-17) = (SELECT MAX(Enrollment (Ages 5-17)) FROM frpm)"}, {"question_id": 4, "answer_sql": "SELECT s.Phone FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE f.CharterSchool = 1 AND s.OpenDate > '2000-01-01';"}, {"question_id": 5, "answer_sql": "SELECT COUNT(*) FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE satscores.rtype = 'SAT' AND satscores.AvgScrMath < 400 AND schools.Virtual = 'F';"}, {"question_id": 6, "answer_sql": "SELECT s.CDSCode, s.SchoolName FROM schools s JOIN satscores sc ON s.CDSCode = sc.cds WHERE sc.NumTstTakr > 500 AND s.Magnet = 1;"}, {"question_id": 7, "answer_sql": "SELECT s.Phone FROM schools_admins sa JOIN schools s ON sa.CDSCode = s.CDSCode JOIN satscores sc ON sa.CDSCode = sc.cds WHERE sc.NumTstTakr > 1500 ORDER BY sc.NumTstTakr DESC LIMIT 1;"}, {"question_id": 8, "answer_sql": "SELECT s.Enroll12, COUNT(sat.NumTstTakr) AS SATTestTakers FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode JOIN satscores sat ON s.CDSCode = sat.cds WHERE f.FRPMCount (K-12) = (SELECT MAX(FRPMCount (K-12)) FROM frpm) GROUP BY s.Enroll12;"}, {"question_id": 9, "answer_sql": "SELECT COUNT(*) AS CharterSchoolsCount FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE satscores.AvgScrMath > 560 AND schools.Charter = 1;"}, {"question_id": 10, "answer_sql": "SELECT frpm.FRPMCount (Ages 5-17) FROM frpm JOIN satscores ON frpm.CDSCode = satscores.cds WHERE satscores.rtype = 'Reading' ORDER BY satscores.AvgScrRead DESC LIMIT 1;"}, {"question_id": 11, "answer_sql": "SELECT CDSCode FROM schools WHERE (Enrollment (K-12) + Enrollment (Ages 5-17)) > 500;"}, {"question_id": 12, "answer_sql": "SELECT MAX(`Percent (%) Eligible Free (Ages 5-17)`) AS HighestEligibleFreeRate FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE (NumGE1500 / NumTstTakr) > 0.3 AND `Enrollment (Ages 5-17)` > 0;"}, {"question_id": 13, "answer_sql": "SELECT s.Phone FROM schools s JOIN ( SELECT cds, (NumGE1500 * 1.0 / NumTstTakr) AS ExcellenceRate FROM satscores WHERE NumTstTakr > 0 ORDER BY ExcellenceRate DESC LIMIT 3 ) AS top_schools ON s.CDSCode = top_schools.cds;"}, {"question_id": 14, "answer_sql": "SELECT s.NCESDist, s.NCESSchool FROM schools s JOIN ( SELECT CDSCode FROM frpm ORDER BY Enrollment (Ages 5-17) DESC LIMIT 5 ) AS top_schools ON s.CDSCode = top_schools.CDSCode;"}, {"question_id": 15, "answer_sql": "SELECT District, AVG(AvgScrRead) as AverageReadingScore FROM schools_admins JOIN satscores ON schools_admins.CDSCode = satscores.cds WHERE satscores.rtype = 'Reading' AND schools_admins.StatusType = 'Active' GROUP BY District ORDER BY AverageReadingScore DESC LIMIT 1;"}, {"question_id": 16, "answer_sql": "SELECT COUNT(*) AS NumberOfSchools FROM schools WHERE County = 'Alameda' AND Enroll12 < 100;"}, {"question_id": 17, "answer_sql": "SELECT CharterNum FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE satscores.AvgScrWrite = 499 AND schools.Charter = 1;"}, {"question_id": 18, "answer_sql": "SELECT COUNT(*) AS NumberOfSchools FROM schools WHERE County = 'Contra Costa' AND Charter = 0 AND (SELECT COUNT(*) FROM satscores WHERE satscores.cds = schools.CDSCode) <= 250;"}, {"question_id": 19, "answer_sql": "SELECT Schools.Phone FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE satscores.rtype = 'Math' ORDER BY satscores.AvgScrMath DESC LIMIT 1;"}, {"question_id": 20, "answer_sql": "SELECT COUNT(*) AS NumberOfSchools FROM schools JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE frpm.CountyName = 'Amador' AND frpm.LowGrade = '9' AND frpm.HighGrade = '12';"}, {"question_id": 21, "answer_sql": "SELECT COUNT(*) AS NumberOfSchools FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.City = 'Los Angeles' AND frpm.FreeMealCount_K12 > 500 AND frpm.FreeMealCount_K12 < 700;"}, {"question_id": 22, "answer_sql": "SELECT s.SchoolName, s.City, s.State, MAX(sat.NumTstTakr) AS MaxTestTakers FROM schools s JOIN satscores sat ON s.CDSCode = sat.cds WHERE s.County = 'Contra Costa' AND sat.rtype = 'SAT' GROUP BY s.SchoolName, s.City, s.State ORDER BY MaxTestTakers DESC LIMIT 1;"}, {"question_id": 23, "answer_sql": "SELECT s.School, s.Street, s.City, s.State FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE ABS(f.`Enrollment (K-12)` - f.`Enrollment (Ages 5-17)`) > 30;"}, {"question_id": 24, "answer_sql": "SELECT s.SchoolName FROM schools s JOIN satscores sc ON s.CDSCode = sc.cds WHERE sc.PctGE1500 > 0.1 AND sc.NumGE1500 >= 1"}, {"question_id": 25, "answer_sql": "SELECT s.School, s.FundingType FROM schools s JOIN satscores sc ON s.CDSCode = sc.cds WHERE s.County = 'Riverside' AND sc.rtype = 'SAT' AND sc.AvgScrMath > 400 GROUP BY s.School, s.FundingType;"}, {"question_id": 26, "answer_sql": "SELECT s.School, s.Street, s.City, s.Zip, s.State FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE s.SchoolType = 'High School' AND s.County = 'Monterey' AND f.Enrollment (Ages 5-17) > 800 AND f.FreeMealCount (Ages 5-17) > 800;"}, {"question_id": 27, "answer_sql": "SELECT s.School, AVG(satscores.AvgScrWrite) AS AvgWritingScore, sa.CommunicationNumber FROM schools s JOIN satscores ON s.CDSCode = satscores.cds LEFT JOIN schools_admins sa ON s.CDSCode = sa.CDSCode WHERE s.OpenDate > '1991-01-01' OR s.ClosedDate < '2000-01-01' GROUP BY s.School, sa.CommunicationNumber ORDER BY AvgWritingScore DESC;"}, {"question_id": 28, "answer_sql": "SELECT s.School, s.DOCType FROM schools s JOIN satscores sc ON s.CDSCode = sc.cds WHERE s.Charter = 0 GROUP BY s.School, s.DOCType HAVING (MAX(sc.Enroll12) - MIN(sc.Enroll12)) > (SELECT AVG(MAX(Enrollment (K-12)) - MIN(Enrollment (Ages 5-17))) FROM schools_admins GROUP BY CDSCode);"}, {"question_id": 29, "answer_sql": "SELECT SchoolName, OpenDate FROM schools WHERE Enrollment12 = (SELECT MAX(Enrollment12) FROM schools) ORDER BY OpenDate ASC LIMIT 1;"}, {"question_id": 30, "answer_sql": "SELECT DISTINCT City FROM schools WHERE Enrollment12 IN ( SELECT Enrollment12 FROM schools ORDER BY Enrollment12 ASC LIMIT 5 ) ORDER BY City ASC;"}, {"question_id": 31, "answer_sql": "SELECT s.SchoolName, (IFNULL(f.FreeMealCountK12, 0) / IFNULL(f.EnrollmentK12, 1)) AS EligibleFreeRate FROM schools s JOIN ( SELECT CDSCode, EnrollmentK12, FreeMealCountK12 FROM frpm WHERE (EnrollmentK12 BETWEEN 1 AND 12) ORDER BY EnrollmentK12 DESC LIMIT 10, 11 ) f ON s.CDSCode = f.CDSCode ORDER BY EligibleFreeRate DESC;"}, {"question_id": 32, "answer_sql": "SELECT s.SchoolName, (frpm.FRPMCountK12 / frpm.EnrollmentK12) AS EligibleFreeMealRate FROM schools AS s JOIN frpm ON s.CDSCode = frpm.CDSCode WHERE s.Charter = 66 ORDER BY frpm.FRPMCountK12 DESC LIMIT 5;"}, {"question_id": 33, "answer_sql": "SELECT s.SchoolName, s.Website FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE f.`Free Meal Count (Ages 5-17)` BETWEEN 1900 AND 2000 AND s.Website IS NOT NULL;"}, {"question_id": 34, "answer_sql": "SELECT (FreeMealCountAges5to17 / EnrollmentAges5to17) AS FreeRate FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.AdmFName1 = 'Kacey' AND schools.AdmLName1 = 'Gibson';"}, {"question_id": 35, "answer_sql": "SELECT AdmEmail1 FROM schools_admins JOIN ( SELECT CDSCode FROM frpm WHERE Charter = 1 ORDER BY Enrollment (K-12) ASC LIMIT 1 ) AS CharteredSchool ON schools_admins.CDSCode = CharteredSchool.CDSCode;"}, {"question_id": 36, "answer_sql": "SELECT AdmFName1 || ' ' || AdmLName1 AS FullName FROM schools_admins WHERE CDSCode = ( SELECT schools.CDSCode FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE satscores.NumGE1500 >= 1500 GROUP BY schools.CDSCode ORDER BY SUM(satscores.NumTstTakr) DESC LIMIT 1 );"}, {"question_id": 37, "answer_sql": "SELECT s.Street, s.City, s.State, s.Zip FROM schools s JOIN ( SELECT cds, MIN(PctGE1500) AS MinExcellenceRate FROM satscores GROUP BY cds ) AS sc ON s.CDSCode = sc.cds JOIN schools_admins sa ON s.CDSCode = sa.CDSCode WHERE sa.SchoolCode = ( SELECT SchoolCode FROM schools_admins WHERE CDSCode = sc.cds ORDER BY PctGE1500 ASC LIMIT 1 )"}, {"question_id": 38, "answer_sql": "SELECT s.Website FROM schools s JOIN satscores sc ON s.CDSCode = sc.cds WHERE s.County = 'Los Angeles County' AND s.StatusType = 'Operating' AND sc.enroll12 BETWEEN 2000 AND 3000;"}, {"question_id": 39, "answer_sql": "SELECT AVG(NumTstTakr) AS AverageTestTakers FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE schools.State = 'California' AND schools.County = 'Fresno' AND schools.OpenDate BETWEEN '1980-01-01' AND '1980-12-31';"}, {"question_id": 40, "answer_sql": "SELECT Schools.Phone FROM schools AS Schools JOIN satscores AS Scores ON Schools.CDSCode = Scores.cds JOIN schools_admins AS Admins ON Schools.CDSCode = Admins.CDSCode WHERE Schools.District = 'Fresno Unified' AND Scores.rtype = 'Reading' ORDER BY Scores.AvgScrRead ASC LIMIT 1;"}, {"question_id": 41, "answer_sql": "SELECT s.CDSCode, s.SchoolName, AVG(sat.AvgScrRead) as AvgReadingScore FROM schools s JOIN satscores sat ON s.CDSCode = sat.cds WHERE s.Virtual = 'F' GROUP BY s.CDSCode, s.SchoolName ORDER BY AvgReadingScore DESC LIMIT 5;"}, {"question_id": 42, "answer_sql": "SELECT s.SchoolType FROM schools s JOIN satscores sc ON s.CDSCode = sc.cds WHERE sc.rtype = 'Math' ORDER BY sc.AvgScrMath DESC LIMIT 1;"}, {"question_id": 43, "answer_sql": "SELECT s.County, AVG(s.AvgScrMath + s.AvgScrRead + s.AvgScrWrite) AS AvgAllSubjectsScore FROM satscores s JOIN schools sc ON s.cds = sc.CDSCode GROUP BY sc.County ORDER BY AvgAllSubjectsScore ASC LIMIT 1;"}, {"question_id": 44, "answer_sql": "SELECT s.City, AVG(satscores.AvgScrWrite) AS AverageWritingScore FROM schools AS s JOIN satscores ON s.CDSCode = satscores.cds WHERE satscores.NumTstTakr >= ( SELECT MAX(NumTstTakr) FROM satscores WHERE NumTstTakr >= 1500 ) GROUP BY s.City ORDER BY AverageWritingScore DESC LIMIT 1;"}, {"question_id": 45, "answer_sql": "SELECT s.SchoolName, AVG(satscores.AvgScrWrite) as AverageWritingScore FROM schools_admins as sa JOIN schools as s ON sa.CDSCode = s.CDSCode JOIN satscores ON s.CDSCode = satscores.cds WHERE sa.AdmFName1 = 'Ricci' AND sa.AdmLName1 = 'Ulrich' GROUP BY s.SchoolName;"}, {"question_id": 46, "answer_sql": "SELECT s.State, SUM(frpm.Enrollment (K-12)) AS TotalEnrollment FROM schools AS s JOIN frpm ON s.CDSCode = frpm.CDSCode WHERE s.DOC = 31 GROUP BY s.State ORDER BY TotalEnrollment DESC;"}, {"question_id": 47, "answer_sql": "SELECT AVG(monthly_openings) FROM ( SELECT COUNT(*) / 12 AS monthly_openings FROM schools WHERE County = 'Alameda' AND DOC = 52 AND (OpenDate >= '1980-01-01' AND OpenDate < '1981-01-01') GROUP BY strftime('%Y-%m', OpenDate) ) AS monthly_averages;"}, {"question_id": 48, "answer_sql": "SELECT CAST(SUM(CASE WHEN schools.DOC = 54 THEN 1 ELSE 0 END) AS REAL) / CAST(SUM(CASE WHEN schools.DOC = 52 THEN 1 ELSE 0 END) AS REAL) AS ratio FROM schools JOIN schools_admins ON schools.CDSCode = schools_admins.CDSCode WHERE schools.County = 'Orange County';"}, {"question_id": 49, "answer_sql": "SELECT s.County, s.SchoolName, s.ClosedDate FROM schools s JOIN ( SELECT County, COUNT(*) as ClosedCount FROM schools WHERE StatusType = 'Closed' GROUP BY County ORDER BY ClosedCount DESC LIMIT 1 ) as c ON s.County = c.County WHERE s.StatusType = 'Closed' ORDER BY s.ClosedDate DESC;"}, {"question_id": 50, "answer_sql": "SELECT s.School, s.Street, s.MailStreet FROM schools s JOIN ( SELECT s.CDSCode FROM schools s JOIN satscores sc ON s.CDSCode = sc.cds WHERE rtype = 'Math' ORDER BY sc.AvgScrMath DESC LIMIT 5 OFFSET 5 ) AS top_schools ON s.CDSCode = top_schools.CDSCode;"}, {"question_id": 51, "answer_sql": "SELECT s.School, sa.MailStreet FROM schools s JOIN satscores sc ON s.CDSCode = sc.cds JOIN schools_admins sa ON s.CDSCode = sa.CDSCode WHERE sc.AvgScrRead = (SELECT MIN(AvgScrRead) FROM satscores) LIMIT 1;"}, {"question_id": 52, "answer_sql": "SELECT SUM(s.enroll12) AS TotalSchools FROM schools s JOIN satscores sc ON s.CDSCode = sc.cds WHERE sc.NumTstTakr >= 1500 AND s.City = 'Lakeport';"}, {"question_id": 53, "answer_sql": "SELECT COUNT(*) AS test_taker_count FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE schools.City = 'Fresno';"}, {"question_id": 54, "answer_sql": "SELECT s.CDSCode, s.Zip, s.City, s.State FROM schools s JOIN schools_admins sa ON s.CDSCode = sa.CDSCode WHERE sa.AdmFName1 = 'Avetik Atoian' AND sa.AdmEmail1 IS NOT NULL;"}, {"question_id": 55, "answer_sql": "SELECT (SELECT COUNT(*) FROM schools WHERE County = 'Colusa' AND State = 'CA') / (SELECT COUNT(*) FROM schools WHERE County = 'Humboldt' AND State = 'CA') AS ratio FROM dual;"}, {"question_id": 56, "answer_sql": "SELECT COUNT(*) AS active_schools_in_san_joaquin FROM schools WHERE State = 'CA' AND District = 'San Joaquin';"}, {"question_id": 57, "answer_sql": "SELECT s.Phone, sa.Ext FROM schools s JOIN satscores sc ON s.CDSCode = sc.cds JOIN schools_admins sa ON s.CDSCode = sa.CDSCode WHERE sc.NumTstTakr = ( SELECT NumTstTakr FROM satscores ORDER BY AvgScrWrite DESC LIMIT 1 OFFSET 332 ) LIMIT 1;"}, {"question_id": 58, "answer_sql": "SELECT s.School, sa.Phone, sa.Ext FROM schools s JOIN schools_admins sa ON s.CDSCode = sa.CDSCode WHERE s.Zip = '95203-3704';"}, {"question_id": 59, "answer_sql": "SELECT s.Website FROM schools s JOIN schools_admins sa ON s.CDSCode = sa.CDSCode WHERE sa.AdmFName1 = 'Mike' AND sa.AdmLName1 = 'Larson' OR sa.AdmFName2 = 'Dante' AND sa.AdmLName2 = 'Alvarez';"}, {"question_id": 60, "answer_sql": "SELECT s.Website FROM schools s JOIN schools_admins sa ON s.CDSCode = sa.CDSCode WHERE s.Charter = 1 AND s.Virtual = 'P' AND s.County = 'San Joaquin';"}, {"question_id": 61, "answer_sql": "SELECT COUNT(*) AS NumberOfCharteredSchools FROM schools WHERE Charter = 1 AND City = 'Hickman' AND DOC = 52;"}, {"question_id": 62, "answer_sql": "SELECT COUNT(*) AS TotalNonCharteredSchools FROM schools JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE frpm.Charter = 0 AND frpm.County = 'Los Angeles' AND (frpm.`Free Meal Count (K-12)` * 100.0 / frpm.Enrollment (K-12)) < 0.18;"}, {"question_id": 63, "answer_sql": "SELECT s.SchoolName, sa.AdmFName1 || ' ' || sa.AdmLName1 AS AdminName, sa.City FROM schools_admins sa JOIN schools s ON sa.CDSCode = s.CDSCode WHERE s.Charter = 1 AND s.CharterNum = '00D2';"}, {"question_id": 64, "answer_sql": "SELECT COUNT(*) AS TotalSchools FROM schools WHERE City = 'Hickman' AND Charter = 0;"}, {"question_id": 65, "answer_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM schools WHERE FundingType != 'Local')) AS ratio_percentage FROM schools WHERE County = 'Santa Clara' AND FundingType != 'Local';"}, {"question_id": 66, "answer_sql": "SELECT COUNT(*) AS NumberOfSchoolsOpened FROM schools WHERE FundingType = 'Directly Funded' AND OpenDate BETWEEN '2000-01-01' AND '2005-12-31' AND County = 'Stanislaus';"}, {"question_id": 67, "answer_sql": "SELECT SUM(ClosedDate) AS TotalClosureAmount FROM schools WHERE City = 'San Francisco' AND ClosedDate BETWEEN '1989-01-01' AND '1989-12-31';"}, {"question_id": 68, "answer_sql": "SELECT s.County, COUNT(*) AS Closures FROM schools AS s JOIN schools_admins AS sa ON s.CDSCode = sa.CDSCode WHERE sa.SOC = '11' AND s.ClosedDate BETWEEN '1980-01-01' AND '1989-12-31' GROUP BY s.County ORDER BY Closures DESC LIMIT 1;"}, {"question_id": 69, "answer_sql": "SELECT s.NCESDist, s.District FROM schools s JOIN schools_admins sa ON s.CDSCode = sa.CDSCode WHERE s.SOC = '31';"}, {"question_id": 70, "answer_sql": "SELECT COUNT(*) AS TotalSchools, SUM(CASE WHEN ClosedDate IS NOT NULL THEN 1 ELSE 0 END) AS ClosedSchools FROM schools WHERE County = 'Alpine' AND StatusType = 'District Community Day School' AND (ClosedDate IS NULL OR ClosedDate > CURRENT_DATE);"}, {"question_id": 71, "answer_sql": "SELECT DistrictCode FROM schools WHERE City = 'Fresno' AND Magnet = 0;"}, {"question_id": 72, "answer_sql": "SELECT COUNT(*) AS EnrollmentCount FROM schools JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE schools.SchoolName = 'State Special School' AND schools.City = 'Fremont' AND schools.State = 'California' AND schools.EdOpsCode = 'SSS' AND frpm.AcademicYear = '2014-2015';"}, {"question_id": 73, "answer_sql": "SELECT frpm.FreeMealCount FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode JOIN schools_admins ON schools.CDSCode = schools_admins.CDSCode WHERE schools.MailStreet = 'PO Box 1040' AND schools.SchoolName = 'Youth Authority School';"}, {"question_id": 74, "answer_sql": "SELECT MIN(LowGrade) AS LowestGrade FROM schools JOIN schools_admins ON schools.CDSCode = schools_admins.CDSCode WHERE schools.EdOpsCode = 'SPECON' AND schools.NCESDist = '613360';"}, {"question_id": 75, "answer_sql": "SELECT s.SchoolName, s.NCESDist FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE f.CountyCode = '37' AND f.NSLP Provision Status = '2';"}, {"question_id": 76, "answer_sql": "SELECT s.City FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE s.EILCode = 'HS' AND f.LowGrade = '9' AND f.HighGrade = '12' AND f.CountyCode = 'Merced' AND f.NSLPProvisionStatus = '2';"}, {"question_id": 77, "answer_sql": "SELECT s.SchoolName, (s.FreeMealCountAges5to17 / s.EnrollmentAges5to17) * 100 AS PercentEligibleFRPM FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE s.County = 'Los Angeles' AND s.StatusType = 'Operating' AND s.Magnet = 0 AND s.SchoolName LIKE '%Kindergarten%' AND s.SchoolName LIKE '%9th%'"}, {"question_id": 78, "answer_sql": "SELECT SchoolName, COUNT(*) as Frequency FROM schools WHERE City = 'Adelanto' GROUP BY SchoolName ORDER BY Frequency DESC LIMIT 1;"}, {"question_id": 79, "answer_sql": "SELECT County, COUNT(*) AS NumberOfVirtualSchools FROM schools WHERE Virtual = 'F' AND (State = 'CA' AND (County IN ('San Diego', 'Santa Barbara'))) GROUP BY County ORDER BY NumberOfVirtualSchools DESC LIMIT 1;"}, {"question_id": 80, "answer_sql": "SELECT SchoolName, Latitude FROM schools WHERE Latitude = (SELECT MAX(Latitude) FROM schools) LIMIT 1;"}, {"question_id": 81, "answer_sql": "SELECT s.SchoolName, s.City, s.Latitude FROM schools s JOIN ( SELECT SchoolCode, MIN(Latitude) AS MinLatitude FROM schools WHERE State = 'CA' GROUP BY SchoolCode ) AS min_lat_schools ON s.SchoolCode = min_lat_schools.SchoolCode WHERE s.State = 'CA' ORDER BY s.Latitude ASC LIMIT 1;"}, {"question_id": 82, "answer_sql": "SELECT MIN(HighGrade) AS MinGrade, MAX(LowGrade) AS MaxGrade FROM schools WHERE CDSCode = ( SELECT CDSCode FROM schools ORDER BY Longitude DESC LIMIT 1 );"}, {"question_id": 83, "answer_sql": "SELECT City, COUNT(DISTINCT s.CDSCode) AS SchoolsCount FROM schools s JOIN schools_admins sa ON s.CDSCode = sa.CDSCode WHERE s.Magnet = 1 AND s.GSoffered LIKE '%K-8%' GROUP BY City;"}, {"question_id": 84, "answer_sql": "SELECT AdmFName1, AdmLName1, DistrictCode FROM schools_admins GROUP BY AdmFName1, AdmLName1, DistrictCode ORDER BY COUNT(*) DESC LIMIT 2;"}, {"question_id": 85, "answer_sql": "SELECT s.DistrictCode, f.Percent (%) Eligible Free (K-12) FROM frpm f JOIN schools s ON f.CDSCode = s.CDSCode JOIN schools_admins sa ON s.CDSCode = sa.CDSCode WHERE sa.AdmFName1 = 'Alusine' ORDER BY s.DistrictCode;"}, {"question_id": 86, "answer_sql": "SELECT s.SchoolName, s.District, s.County FROM schools s JOIN schools_admins sa ON s.CDSCode = sa.CDSCode WHERE sa.CharterNum = '40' ORDER BY s.District, s.County, s.SchoolName LIMIT 1;"}, {"question_id": 87, "answer_sql": "SELECT AdmEmail1 FROM schools_admins JOIN schools ON schools_admins.CDSCode = schools.CDSCode WHERE schools.County = 'San Bernardino' AND schools.DistrictCode = (SELECT DistrictCode FROM schools WHERE County = 'San Bernardino' AND SchoolName = 'San Bernardino City Unified') AND schools.SOC = '62' AND schools.DOC = '54' AND schools.OpenDate BETWEEN '2009-01-01' AND '2010-12-31';"}, {"question_id": 88, "answer_sql": "SELECT s.SchoolName, sa.AdmEmail1 FROM schools s JOIN schools_admins sa ON s.CDSCode = sa.CDSCode JOIN satscores sc ON s.CDSCode = sc.cds WHERE sc.NumTstTakr >= 1500 ORDER BY sc.NumTstTakr DESC LIMIT 1;"}, {"question_id": 89, "answer_sql": "SELECT COUNT(DISTINCT account_id) FROM account JOIN trans ON account.account_id = trans.account_id WHERE trans.type = 'POPLATEK PO OBRATU' AND account.district_id IN ( SELECT district_id FROM district WHERE A3 = 'POPLATEK PO OBRATU' );"}, {"question_id": 90, "answer_sql": "SELECT COUNT(DISTINCT account.account_id) AS eligible_accounts FROM account JOIN district ON account.district_id = district.district_id JOIN loan ON account.account_id = loan.account_id WHERE district.A3 = 'Prague';"}, {"question_id": 91, "answer_sql": "SELECT '1995' AS Year, A12 AS UnemploymentRate FROM district WHERE A12 IS NOT NULL UNION ALL SELECT '1996' AS Year, A13 AS UnemploymentRate FROM district WHERE A13 IS NOT NULL ORDER BY UnemploymentRate DESC LIMIT 1;"}, {"question_id": 92, "answer_sql": "SELECT COUNT(DISTINCT district_id) AS district_count FROM district WHERE A11 > 6000 AND A11 < 10000;"}, {"question_id": 93, "answer_sql": "SELECT COUNT(DISTINCT client.client_id) AS num_customers FROM client JOIN district ON client.district_id = district.district_id WHERE client.gender = 'M' AND district.A3 = 'North Bohemia' AND district.A11 > 8000;"}, {"question_id": 94, "answer_sql": "SELECT a.account_id, MAX(a.avg_salary) - MIN(a.avg_salary) AS gap FROM ( SELECT c.client_id, a.account_id, AVG(l.amount) AS avg_salary FROM client c JOIN account a ON c.district_id = a.district_id JOIN loan l ON a.account_id = l.account_id WHERE c.gender = 'F' GROUP BY c.client_id, a.account_id ORDER BY c.birth_date ASC LIMIT 1 ) a;"}, {"question_id": 95, "answer_sql": "SELECT account.account_id FROM account JOIN client ON account.district_id = client.district_id GROUP BY account.account_id HAVING MIN(client.birth_date) = (SELECT MIN(birth_date) FROM client) AND AVG(client.client_id) = (SELECT AVG(client_id) FROM client);"}, {"question_id": 96, "answer_sql": "SELECT COUNT(*) AS owner_count FROM client JOIN disp ON client.client_id = disp.client_id JOIN account ON disp.account_id = account.account_id WHERE account.frequency = 'POPLATEK TYDNE' AND client.gender = 'Owner';"}, {"question_id": 97, "answer_sql": "SELECT DISTINCT client.client_id, client.gender, client.birth_date, client.district_id FROM client JOIN disp ON client.client_id = disp.client_id JOIN trans ON disp.account_id = trans.account_id WHERE trans.type = 'POPLATEK PO OBRATU' AND trans.operation = 'Disponent';"}, {"question_id": 98, "answer_sql": "SELECT account_id, MIN(amount) AS min_approved_amount FROM loan WHERE date BETWEEN '1997-01-01' AND '1997-12-31' GROUP BY account_id ORDER BY min_approved_amount ASC LIMIT 1;"}, {"question_id": 99, "answer_sql": "SELECT account_id, date, amount FROM loan WHERE duration > 12 AND account_id IN ( SELECT account_id FROM account WHERE strftime('%Y', date) = '1993' ) ORDER BY amount DESC LIMIT 1;"}, {"question_id": 100, "answer_sql": "SELECT COUNT(*) AS number_of_female_customers FROM client JOIN account ON client.client_id = account.district_id JOIN district ON account.district_id = district.district_id WHERE client.gender = 'F' AND district.A2 = 'Slokolov' AND client.birth_date < '1950-01-01';"}, {"question_id": 101, "answer_sql": "SELECT account_id FROM account WHERE date = ( SELECT MIN(date) FROM account WHERE strftime('%Y', date) = '1995' )"}, {"question_id": 102, "answer_sql": "SELECT DISTINCT account_id FROM account WHERE date < '1997-01-01' AND EXISTS ( SELECT 1 FROM loan WHERE account_id = account.account_id AND amount > 3000 );"}, {"question_id": 103, "answer_sql": "SELECT client.client_id FROM client JOIN card ON client.client_id = card.disp_id WHERE card.issued = '1994-03-03';"}, {"question_id": 104, "answer_sql": "SELECT date FROM account WHERE account_id IN ( SELECT account_id FROM trans WHERE amount = 840 AND date = '1998-10-14' );"}, {"question_id": 105, "answer_sql": "SELECT district.district_id FROM loan JOIN account ON loan.account_id = account.account_id JOIN disp ON account.account_id = disp.account_id JOIN client ON disp.client_id = client.client_id JOIN district ON client.district_id = district.district_id WHERE loan.date = '1994-08-25';"}, {"question_id": 106, "answer_sql": "SELECT MAX(trans.amount) AS biggest_transaction_amount FROM trans JOIN card ON trans.account_id = card.disp_id JOIN client ON card.client_id = client.client_id WHERE card.issued = '1996-10-21';"}, {"question_id": 107, "answer_sql": "SELECT client.gender FROM client JOIN account ON client.district_id = account.district_id JOIN ( SELECT disp.client_id FROM disp JOIN account ON disp.account_id = account.account_id JOIN district ON account.district_id = district.district_id GROUP BY district.district_id ORDER BY AVG(district.A11) DESC LIMIT 1 ) AS highest_salary_branch ON client.client_id = highest_salary_branch.client_id ORDER BY client.birth_date ASC LIMIT 1;"}, {"question_id": 108, "answer_sql": "SELECT t.amount FROM trans t JOIN ( SELECT account_id, MIN(date) as first_transaction_date FROM trans WHERE account_id IN ( SELECT account_id FROM loan ORDER BY amount DESC LIMIT 1 ) GROUP BY account_id ) as subquery ON t.account_id = subquery.account_id AND t.date = subquery.first_transaction_date;"}, {"question_id": 109, "answer_sql": "SELECT COUNT(*) AS number_of_female_clients FROM client JOIN account ON client.client_id = account.account_id JOIN district ON account.district_id = district.district_id WHERE district.A2 = 'Jesenik' AND client.gender = 'F';"}, {"question_id": 110, "answer_sql": "SELECT disp.disp_id FROM trans JOIN account ON trans.account_id = account.account_id JOIN disp ON account.account_id = disp.account_id WHERE trans.amount = 5100 AND strftime('%Y/%m/%d', trans.date) = '1998/9/2';"}, {"question_id": 111, "answer_sql": "SELECT COUNT(*) AS number_of_accounts FROM account JOIN district ON account.district_id = district.district_id WHERE A2 = 'Litomerice' AND strftime('%Y', date) = '1996';"}, {"question_id": 112, "answer_sql": "SELECT d.A2 FROM client c JOIN account a ON c.client_id = a.account_id JOIN district d ON a.district_id = d.district_id WHERE c.gender = 'F' AND c.birth_date = '1976-01-29';"}, {"question_id": 113, "answer_sql": "SELECT c.birth_date FROM client c JOIN loan l ON c.client_id = l.account_id WHERE l.amount = 98832 AND l.date = '1996-01-03';"}, {"question_id": 114, "answer_sql": "SELECT account_id FROM account JOIN client ON account.district_id = client.district_id WHERE A3 = 'Prague' ORDER BY date ASC LIMIT 1;"}, {"question_id": 115, "answer_sql": "SELECT ROUND(COUNT(*) FILTER (WHERE client.gender = 'M') * 100.0 / COUNT(*), 2) AS percentage_male_clients FROM client JOIN district ON client.district_id = district.district_id WHERE district.A3 = 'South Bohemia' AND district.A4 = ( SELECT MAX(A4) FROM district WHERE A3 = 'South Bohemia' );"}, {"question_id": 116, "answer_sql": "SELECT ((t2.balance - t1.balance) / t1.balance) * 100 AS increase_rate FROM trans t1 JOIN trans t2 ON t1.account_id = t2.account_id WHERE t1.date = '1993-03-22' AND t2.date = '1998-12-27' AND t1.account_id IN ( SELECT account_id FROM loan WHERE date = '1993-07-05' );"}, {"question_id": 117, "answer_sql": "SELECT (SUM(CASE WHEN status = 'A' THEN amount ELSE 0 END) / SUM(amount)) * 100 AS percentage_paid_no_issue FROM loan WHERE status = 'A';"}, {"question_id": 118, "answer_sql": "SELECT (SUM(CASE WHEN status = 'C' THEN amount ELSE 0 END) / SUM(amount)) * 100 AS percentage_of_accounts_with_no_issue FROM loan WHERE amount < 100000;"}, {"question_id": 119, "answer_sql": "SELECT a.account_id, d.A2 AS district_name, d.A3 AS district_region FROM account a JOIN district d ON a.district_id = d.district_id WHERE strftime('%Y', a.date) = '1993' AND EXISTS ( SELECT 1 FROM trans t JOIN card c ON t.account_id = c.disp_id WHERE t.date > c.issued AND t.type = 'POPLATEK PO OBRATU' AND t.account_id = a.account_id );"}, {"question_id": 120, "answer_sql": "SELECT account.account_id, COUNT(trans.trans_id) AS frequency FROM account JOIN client ON account.district_id = client.district_id JOIN trans ON account.account_id = trans.account_id WHERE client.district_id IN ( SELECT district_id FROM district WHERE A2 = 'east Bohemia' ) AND trans.date BETWEEN '1995-01-01' AND '2000-12-31' GROUP BY account.account_id ORDER BY frequency DESC;"}, {"question_id": 121, "answer_sql": "SELECT account.account_id, account.date FROM account JOIN district ON account.district_id = district.district_id WHERE district.A2 = 'Prachatice';"}, {"question_id": 122, "answer_sql": "SELECT d.A2, d.A3 FROM district d JOIN account a ON d.district_id = a.district_id JOIN loan l ON a.account_id = l.account_id WHERE l.loan_id = 4990;"}, {"question_id": 123, "answer_sql": "SELECT a.account_id, d.A2 AS district, d.A3 AS region FROM loan l JOIN account a ON l.account_id = a.account_id JOIN district d ON a.district_id = d.district_id WHERE l.amount > 300000;"}, {"question_id": 124, "answer_sql": "SELECT loan.loan_id, district.A3, AVG(district.A11) as average_salary FROM loan JOIN account ON loan.account_id = account.account_id JOIN disp ON account.account_id = disp.account_id JOIN client ON disp.client_id = client.client_id JOIN district ON client.district_id = district.district_id WHERE loan.duration = 60 GROUP BY loan.loan_id, district.A3;"}, {"question_id": 125, "answer_sql": "SELECT d.A12 AS UnemploymentRate1995 , d.A13 AS UnemploymentRate1996 , ((d.A13 - d.A12) / d.A12) * 100 AS UnemploymentRateIncrement FROM district d JOIN account a ON d.district_id = a.district_id JOIN loan l ON a.account_id = l.account_id WHERE l.status = 'D' AND l.date BETWEEN '1995-01-01' AND '1996-12-31' GROUP BY d.district_id;"}, {"question_id": 126, "answer_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM account)) AS percentage FROM account JOIN district ON account.district_id = district.district_id WHERE A2 = 'Decin' AND strftime('%Y', date) = '1993';"}, {"question_id": 127, "answer_sql": "SELECT DISTINCT account_id FROM trans WHERE type = 'POPLATEK MESICNE';"}, {"question_id": 128, "answer_sql": "SELECT d.A2, COUNT(*) AS female_account_holders FROM district d JOIN client c ON d.district_id = c.district_id JOIN account a ON c.client_id = a.account_id WHERE c.gender = 'F' GROUP BY d.district_id ORDER BY female_account_holders DESC LIMIT 10;"}, {"question_id": 129, "answer_sql": "SELECT d.A2 AS DistrictName, SUM(t.amount) AS TotalWithdrawal FROM trans t JOIN account a ON t.account_id = a.account_id JOIN district d ON a.district_id = d.district_id WHERE t.type = 'VYDAJ' AND t.date LIKE '1996-01%' AND t.operation = 'VYDAJ' GROUP BY d.A2 ORDER BY TotalWithdrawal DESC LIMIT 10;"}, {"question_id": 130, "answer_sql": "SELECT COUNT(*) FROM account a JOIN district d ON a.district_id = d.district_id WHERE d.A3 = 'South Bohemia' AND a.card_id IS NULL;"}, {"question_id": 131, "answer_sql": "SELECT d.A3 AS DistrictName, COUNT(l.loan_id) AS ActiveLoans FROM loan l JOIN account a ON l.account_id = a.account_id JOIN district d ON a.district_id = d.district_id WHERE l.status = 'C' GROUP BY d.district_id ORDER BY ActiveLoans DESC LIMIT 1;"}, {"question_id": 132, "answer_sql": "SELECT AVG(l.amount) AS average_loan_amount FROM loan l JOIN client c ON l.account_id = c.client_id WHERE c.gender = 'M';"}, {"question_id": 133, "answer_sql": "SELECT district.A2 AS DistrictName, disp.type AS BranchLocation FROM district JOIN trans ON district.district_id = trans.account_id WHERE trans.date BETWEEN '1996-01-01' AND '1996-12-31' AND trans.type = 'unemployment' GROUP BY district.A2, disp.type ORDER BY MAX(trans.amount) DESC LIMIT 10;"}, {"question_id": 134, "answer_sql": "SELECT COUNT(DISTINCT account.account_id) AS number_of_accounts FROM account JOIN district ON account.district_id = district.district_id WHERE district.A16 = ( SELECT MAX(A16) FROM district WHERE A16 IS NOT NULL );"}, {"question_id": 135, "answer_sql": "SELECT COUNT(DISTINCT a.account_id) AS accounts_with_negative_balance FROM account a JOIN trans t ON a.account_id = t.account_id JOIN card c ON a.account_id = c.account_id WHERE t.operation = 'VYBER KARTOU' AND t.balance < 0 AND c.type = 'POPLATEK MESICNE';"}, {"question_id": 136, "answer_sql": "SELECT COUNT(*) AS approved_loans FROM loan JOIN account ON loan.account_id = account.account_id WHERE loan.date BETWEEN '1995-01-01' AND '1997-12-31' AND loan.amount >= 250000 AND account.frequency = 'POPLATEK MESICNE' AND loan.status = 'APPROVED';"}, {"question_id": 137, "answer_sql": "SELECT COUNT(*) AS running_contracts FROM account JOIN loan ON account.account_id = loan.account_id WHERE loan.status IN ('C', 'D') AND account.district_id = (SELECT district_id FROM district WHERE A1 = '1');"}, {"question_id": 138, "answer_sql": "SELECT COUNT(*) FROM client JOIN disp ON client.client_id = disp.client_id JOIN account ON disp.account_id = account.account_id JOIN district ON account.district_id = district.district_id WHERE district.A15 = ( SELECT MAX(A15) FROM district WHERE A15 < ( SELECT MAX(A15) FROM district WHERE A15 = ( SELECT MAX(A15) FROM district WHERE YEAR(date) = 1995 ) ) ) AND client.gender = 'M';"}, {"question_id": 139, "answer_sql": "SELECT COUNT(*) FROM card WHERE type = 'gold';"}, {"question_id": 140, "answer_sql": "SELECT COUNT(*) FROM account WHERE district_id = (SELECT district_id FROM district WHERE A2 = 'Pisek');"}, {"question_id": 141, "answer_sql": "SELECT district.A2, district.A3, district.A4, district.A5, district.A6, district.A7, district.A8, district.A9, district.A10, district.A11, district.A12, district.A13, district.A14, district.A15, district.A16 FROM district JOIN account ON district.district_id = account.district_id JOIN trans ON account.account_id = trans.account_id WHERE trans.amount > 10000 AND strftime('%Y', trans.date) = '1997';"}, {"question_id": 142, "answer_sql": "SELECT DISTINCT account_id FROM `order` WHERE k_symbol = 'SIPO';"}, {"question_id": 143, "answer_sql": "SELECT DISTINCT a.account_id FROM account a JOIN disp d ON a.account_id = d.account_id JOIN card c ON d.disp_id = c.card_id WHERE c.type IN ('gold', 'junior');"}, {"question_id": 144, "answer_sql": "SELECT AVG(amount) AS average_credit_card_amount FROM `order` WHERE type = 'VYBER KARTOU' AND strftime('%Y', date) = '2021' AND account_to = (SELECT account_id FROM account WHERE frequency = 'monthly');"}, {"question_id": 145, "answer_sql": "SELECT client.client_id FROM client JOIN disp ON client.client_id = disp.client_id JOIN account ON disp.account_id = account.account_id JOIN trans ON account.account_id = trans.account_id WHERE trans.type = 'VYBER KARTOU' AND strftime('%Y', trans.date) = '1998' GROUP BY client.client_id HAVING SUM(trans.amount) < ( SELECT AVG(monthly_spent) FROM ( SELECT account.account_id, SUM(trans.amount) AS monthly_spent FROM trans JOIN account ON trans.account_id = account.account_id WHERE strftime('%Y', trans.date) = '1998' GROUP BY account.account_id, strftime('%m', trans.date) ) AS monthly_spends );"}, {"question_id": 146, "answer_sql": "SELECT DISTINCT client.client_id FROM client JOIN disp ON client.client_id = disp.client_id JOIN card ON disp.disp_id = card.card_id JOIN account ON disp.account_id = account.account_id JOIN loan ON account.account_id = loan.account_id WHERE client.gender = 'F';"}, {"question_id": 147, "answer_sql": "SELECT COUNT(DISTINCT client.client_id) AS female_clients_count FROM client JOIN account ON client.client_id = account.district_id JOIN district ON account.district_id = district.district_id WHERE client.gender = 'F' AND district.A3 = 'south Bohemia';"}, {"question_id": 148, "answer_sql": "SELECT a.account_id FROM account a JOIN disp d ON a.account_id = d.account_id JOIN client c ON d.client_id = c.client_id JOIN loan l ON a.account_id = l.account_id WHERE a.district_id = (SELECT district_id FROM district WHERE A2 = 'Tabor') AND d.type = 'OWNER';"}, {"question_id": 149, "answer_sql": "SELECT DISTINCT a.type, AVG(d.A11) as avg_income FROM account a JOIN district d ON a.district_id = d.district_id WHERE a.type != 'OWNER' AND d.A11 BETWEEN 8000 AND 9000 GROUP BY a.type;"}, {"question_id": 150, "answer_sql": "SELECT COUNT(DISTINCT account_id) AS account_count FROM trans JOIN account ON trans.account_id = account.account_id JOIN district ON account.district_id = district.district_id WHERE A3 = 'North Bohemia' AND k_symbol = 'AB';"}, {"question_id": 151, "answer_sql": "SELECT d.A2 AS DistrictName FROM district d JOIN account a ON d.district_id = a.district_id JOIN trans t ON a.account_id = t.account_id WHERE t.type = 'VYDAJ' GROUP BY d.A2;"}, {"question_id": 152, "answer_sql": "SELECT AVG(A15) AS average_crimes_1995 FROM district WHERE A3 IN ( SELECT A3 FROM account WHERE date >= '1997-01-01' GROUP BY district_id HAVING COUNT(account_id) > 4000 );"}, {"question_id": 153, "answer_sql": "SELECT COUNT(*) AS eligible_classic_cards FROM card c JOIN account a ON c.disp_id = a.account_id WHERE c.type = 'classic' AND a.frequency = 'OWNER';"}, {"question_id": 154, "answer_sql": "SELECT COUNT(*) AS male_clients_in_praha FROM client JOIN district ON client.district_id = district.district_id WHERE district.A2 = 'Hl.m. Praha' AND client.gender = 'M';"}, {"question_id": 155, "answer_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM card)) AS percent_of_gold_cards_issued_before_1998 FROM card WHERE type = 'gold' AND issued < '1998-01-01';"}, {"question_id": 156, "answer_sql": "SELECT client.client_id, client.gender, client.birth_date FROM client JOIN account ON client.district_id = account.district_id JOIN loan ON account.account_id = loan.account_id ORDER BY loan.amount DESC LIMIT 1;"}, {"question_id": 157, "answer_sql": "SELECT A15 AS committed_crimes_1995 FROM district WHERE A15 IS NOT NULL AND A2 = (SELECT district_id FROM account WHERE account_id = 532) AND A3 = '1995';"}, {"question_id": 158, "answer_sql": "SELECT district_id FROM account WHERE account_id = (SELECT account_id FROM `order` WHERE order_id = 33333);"}, {"question_id": 159, "answer_sql": "SELECT t.trans_id, t.date, t.amount, t.balance, t.k_symbol FROM trans t JOIN client c ON t.account_id = c.client_id WHERE c.client_id = 3356 AND t.type = 'VYBER';"}, {"question_id": 160, "answer_sql": "SELECT COUNT(*) FROM loan JOIN account ON loan.account_id = account.account_id WHERE account.frequency = 'POPLATEK TYDNE' AND loan.amount < 200000;"}, {"question_id": 161, "answer_sql": "SELECT type FROM card WHERE disp_id IN (SELECT account_id FROM disp WHERE client_id = 13539);"}, {"question_id": 162, "answer_sql": "SELECT A3 FROM district WHERE district_id = (SELECT district_id FROM client WHERE client_id = 3541);"}, {"question_id": 163, "answer_sql": "SELECT district.A2, COUNT(account.account_id) AS num_accounts FROM account JOIN district ON account.district_id = district.district_id JOIN loan ON account.account_id = loan.account_id WHERE loan.status = 'A' GROUP BY district.A2 ORDER BY num_accounts DESC LIMIT 1;"}, {"question_id": 164, "answer_sql": "SELECT client.client_id, client.gender, client.birth_date, client.district_id FROM client JOIN disp ON client.client_id = disp.client_id JOIN account ON disp.account_id = account.account_id WHERE order.order_id = 32423;"}, {"question_id": 165, "answer_sql": "SELECT * FROM trans WHERE account_id IN ( SELECT account_id FROM account WHERE district_id = 5 );"}, {"question_id": 166, "answer_sql": "SELECT COUNT(*) FROM account WHERE district_id = (SELECT district_id FROM district WHERE A2 = 'Jesenik');"}, {"question_id": 167, "answer_sql": "SELECT client.client_id FROM client JOIN card ON client.client_id = card.disp_id WHERE card.type = 'junior' AND card.issued >= '1997-01-01';"}, {"question_id": 168, "answer_sql": "SELECT (COUNT(DISTINCT client.client_id) * 100.0 / (SELECT COUNT(*) FROM client WHERE district_id = (SELECT district_id FROM district WHERE A11 > 10000))) AS percentage_female_clients FROM client JOIN account ON client.client_id = account.district_id WHERE client.gender = 'F' AND account.district_id = (SELECT district_id FROM district WHERE A11 > 10000);"}, {"question_id": 169, "answer_sql": "SELECT ((SUM(l.amount) FILTER (WHERE l.date = '1997-01-01') - SUM(l.amount) FILTER (WHERE l.date = '1996-01-01')) / SUM(l.amount) FILTER (WHERE l.date = '1996-01-01')) * 100 AS growth_rate FROM loan l JOIN account a ON l.account_id = a.account_id JOIN client c ON a.district_id = c.district_id WHERE c.gender = 'M';"}, {"question_id": 170, "answer_sql": "SELECT COUNT(*) AS withdrawal_count FROM trans WHERE type = 'VYBER KARTOU' AND date > '1995-12-31';"}, {"question_id": 171, "answer_sql": "SELECT (SELECT SUM(A16) FROM district WHERE A3 = 'North Bohemia') - (SELECT SUM(A16) FROM district WHERE A3 = 'East Bohemia') AS crime_difference;"}, {"question_id": 172, "answer_sql": "SELECT COUNT(*) AS num_dispositions FROM trans WHERE account_id BETWEEN 1 AND 10 AND (type = 'owner' OR type = 'disponent');"}, {"question_id": 173, "answer_sql": "SELECT COUNT(*) AS statement_requests, SUM(amount) AS total_debit FROM trans JOIN account ON trans.account_id = account.account_id WHERE account.account_id = 3 AND trans.type = 'statement_request' GROUP BY trans.k_symbol ORDER BY statement_requests DESC, total_debit DESC LIMIT 1;"}, {"question_id": 174, "answer_sql": "SELECT birth_date FROM client WHERE client_id = 130;"}, {"question_id": 175, "answer_sql": "SELECT COUNT(DISTINCT account_id) AS account_count FROM trans JOIN account ON trans.account_id = account.account_id WHERE trans.type = 'POPLATEK PO OBRATU';"}, {"question_id": 176, "answer_sql": "SELECT client.client_id, client.gender, client.birth_date, SUM(loan.amount) AS total_debt, AVG(loan.payments) AS average_payments FROM client JOIN loan ON client.client_id = loan.account_id WHERE client.client_id = 992 GROUP BY client.client_id;"}, {"question_id": 177, "answer_sql": "SELECT SUM(t.amount) AS total_amount, c.gender FROM trans t JOIN account a ON t.account_id = a.account_id JOIN client c ON a.district_id = c.district_id WHERE t.trans_id = 851 AND c.client_id = 4 GROUP BY c.gender;"}, {"question_id": 178, "answer_sql": "SELECT type FROM card WHERE disp_id IN (SELECT disp_id FROM disp WHERE client_id = 9);"}, {"question_id": 179, "answer_sql": "SELECT SUM(trans.amount) AS total_paid FROM trans JOIN client ON trans.account_id = client.account_id WHERE client.client_id = 617 AND YEAR(trans.date) = 1998 AND trans.type = 'payment';"}, {"question_id": 180, "answer_sql": "SELECT client.client_id FROM client JOIN account ON client.client_id = account.account_id JOIN district ON account.district_id = district.district_id WHERE client.birth_date BETWEEN '1983-01-01' AND '1987-12-31' AND district.A16 = 'East Bohemia';"}, {"question_id": 181, "answer_sql": "SELECT client_id FROM client WHERE gender = 'F' ORDER BY (SELECT amount FROM loan WHERE loan.account_id = client.account_id) DESC LIMIT 3;"}, {"question_id": 182, "answer_sql": "SELECT COUNT(*) FROM client JOIN trans ON client.client_id = trans.account_id WHERE client.gender = 'M' AND client.birth_date BETWEEN '1974-01-01' AND '1976-12-31' AND trans.type = 'SIPO' AND trans.amount > 4000;"}, {"question_id": 183, "answer_sql": "SELECT COUNT(*) FROM account WHERE district_id = (SELECT district_id FROM district WHERE A2 = 'Beroun') AND date > '1996-12-31';"}, {"question_id": 184, "answer_sql": "SELECT COUNT(*) FROM client WHERE gender = 'F' AND client_id IN (SELECT client_id FROM disp WHERE type = 'junior');"}, {"question_id": 185, "answer_sql": "SELECT (COUNT(DISTINCT client.client_id) * 100.0 / (SELECT COUNT(DISTINCT client.client_id) FROM client)) AS percentage_female_prague_branch FROM client JOIN account ON client.client_id = account.account_id JOIN district ON account.district_id = district.district_id WHERE client.gender = 'F' AND district.A3 LIKE '%Prague%';"}, {"question_id": 186, "answer_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM client WHERE frequency = 'POPLATEK TYDNE')) AS percentage_male_weekly FROM client JOIN disp ON client.client_id = disp.client_id JOIN account ON disp.account_id = account.account_id WHERE client.gender = 'M' AND account.frequency = 'POPLATEK TYDNE';"}, {"question_id": 187, "answer_sql": "SELECT COUNT(*) FROM client WHERE district_id IN (SELECT district_id FROM account WHERE frequency = 'POPLATEK TYDNE');"}, {"question_id": 188, "answer_sql": "SELECT account_id, MIN(amount) AS approved_amount FROM loan WHERE duration > 24 GROUP BY account_id HAVING MIN(date) < '1997-01-01';"}, {"question_id": 189, "answer_sql": "SELECT account_id FROM account JOIN client ON account.district_id = client.district_id WHERE client.gender = 'F' GROUP BY account_id ORDER BY birth_date ASC, A11 ASC LIMIT 1;"}, {"question_id": 190, "answer_sql": "SELECT COUNT(*) FROM client JOIN district ON client.district_id = district.district_id WHERE birth_date BETWEEN '1920-01-01' AND '1920-12-31' AND A3 = 'East Bohemia';"}, {"question_id": 191, "answer_sql": "SELECT COUNT(DISTINCT loan.account_id) AS prepaid_loan_accounts FROM loan JOIN account ON loan.account_id = account.account_id WHERE loan.duration = 24 AND account.frequency = 'POPLATEK TYDNE';"}, {"question_id": 192, "answer_sql": "SELECT AVG(l.amount) AS average_loan_amount FROM loan l JOIN trans t ON l.account_id = t.account_id WHERE l.status = 'C' AND t.operation = 'POPLATEK PO OBRATU';"}, {"question_id": 193, "answer_sql": "SELECT client.client_id, district.district_id FROM client JOIN account ON client.client_id = account.client_id JOIN district ON client.district_id = district.district_id WHERE account.type IN ('Permanent', 'Loan');"}, {"question_id": 194, "answer_sql": "SELECT client.client_id, (strftime('%Y', 'now') - strftime('%Y', birth_date)) AS age FROM client JOIN disp ON client.client_id = disp.client_id JOIN card ON disp.disp_id = card.card_id JOIN loan ON client.client_id = loan.account_id WHERE card.type = 'gold' AND loan.status = 'eligible';"}, {"question_id": 195, "answer_sql": "SELECT bond_type, COUNT(*) as frequency FROM bond GROUP BY bond_type ORDER BY frequency DESC LIMIT 1;"}, {"question_id": 196, "answer_sql": "SELECT COUNT(DISTINCT a.atom_id) AS chlorine_atoms_count FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.label = '-' AND a.element = 'cl';"}, {"question_id": 197, "answer_sql": "SELECT AVG(oxygen_count) FROM ( SELECT m.molecule_id, COUNT(*) as oxygen_count FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id JOIN bond b ON m.molecule_id = b.molecule_id JOIN connected c ON a.atom_id = c.atom_id2 OR a.atom_id = c.atom_id WHERE b.bond_type = '-' AND a.element = 'O' GROUP BY m.molecule_id ) as subquery;"}, {"question_id": 198, "answer_sql": "SELECT AVG(single_bonded_count) FROM ( SELECT COUNT(*) as single_bonded_count FROM connected AS c JOIN bond AS b ON c.bond_id = b.bond_id JOIN molecule AS m ON c.molecule_id = m.molecule_id WHERE m.label = '+' AND b.bond_type = '-' GROUP BY c.atom_id ) AS subquery;"}, {"question_id": 199, "answer_sql": "SELECT COUNT(*) FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '-' AND atom.element = 'na';"}, {"question_id": 200, "answer_sql": "SELECT m.molecule_id, m.label FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id JOIN connected c ON b.bond_id = c.bond_id WHERE b.bond_type = '#' AND m.label = '+';"}, {"question_id": 201, "answer_sql": "SELECT ROUND(SUM(CASE WHEN element = 'c' THEN 1 ELSE 0 END) * 100.0 / COUNT(atom_id), 2) AS percentage FROM atom JOIN bond ON atom.molecule_id = bond.molecule_id WHERE bond_type = ' = ';"}, {"question_id": 202, "answer_sql": "SELECT COUNT(*) FROM bond WHERE bond_type = '#';"}, {"question_id": 203, "answer_sql": "SELECT COUNT(*) FROM atom WHERE element != 'br';"}, {"question_id": 204, "answer_sql": "SELECT COUNT(*) AS carcinogenic_count FROM molecule WHERE molecule_id BETWEEN 'TR000' AND 'TR099' AND label = '+';"}, {"question_id": 205, "answer_sql": "SELECT m.molecule_id FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.element = 'si';"}, {"question_id": 206, "answer_sql": "SELECT DISTINCT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id2 JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_id = 'TR004_8_9' AND a.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca');"}, {"question_id": 207, "answer_sql": "SELECT DISTINCT a.element FROM atom a JOIN bond b ON a.molecule_id = b.molecule_id JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 WHERE b.bond_type = ' = ' AND a.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca');"}, {"question_id": 208, "answer_sql": "SELECT label, COUNT(*) as frequency FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE element = 'h' GROUP BY label ORDER BY frequency DESC LIMIT 1;"}, {"question_id": 209, "answer_sql": "SELECT bond_type FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON atom.atom_id = connected.atom_id OR atom.atom_id = connected.atom_id2 JOIN molecule ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'te' GROUP BY bond_type;"}, {"question_id": 210, "answer_sql": "SELECT a1.atom_id, a2.atom_id FROM connected AS c JOIN atom AS a1 ON c.atom_id = a1.atom_id JOIN atom AS a2 ON c.atom_id2 = a2.atom_id JOIN bond AS b ON c.bond_id = b.bond_id WHERE b.bond_type = '-';"}, {"question_id": 211, "answer_sql": "SELECT DISTINCT a1.atom_id, a2.atom_id FROM connected AS c JOIN atom AS a1 ON c.atom_id = a1.atom_id JOIN atom AS a2 ON c.atom_id2 = a2.atom_id JOIN molecule AS m ON c.molecule_id = m.molecule_id WHERE m.label = '-';"}, {"question_id": 212, "answer_sql": "SELECT element FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE label = '-' GROUP BY element ORDER BY COUNT(*) ASC LIMIT 1;"}, {"question_id": 213, "answer_sql": "SELECT b.bond_type FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a1 ON c.atom_id = a1.atom_id AND a1.atom_id = 'TR004_8' JOIN atom a2 ON c.atom_id2 = a2.atom_id AND a2.atom_id = 'TR004_20';"}, {"question_id": 214, "answer_sql": "SELECT m.label FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.element = 'sn' AND m.label <> '+';"}, {"question_id": 215, "answer_sql": "SELECT COUNT(DISTINCT a.atom_id) AS iodine_sulfur_single_bond_atoms FROM atom a JOIN bond b ON a.molecule_id = b.molecule_id JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 JOIN molecule m ON a.molecule_id = m.molecule_id WHERE a.element = 'i' AND a.element = 's' AND b.bond_type = '-';"}, {"question_id": 216, "answer_sql": "SELECT DISTINCT a1.atom_id, a2.atom_id FROM connected AS c JOIN atom AS a1 ON c.atom_id = a1.atom_id JOIN atom AS a2 ON c.atom_id2 = a2.atom_id JOIN bond AS b ON c.bond_id = b.bond_id WHERE b.bond_type = '#';"}, {"question_id": 217, "answer_sql": "SELECT DISTINCT a1.atom_id FROM atom a1 JOIN connected c ON a1.atom_id = c.atom_id2 JOIN atom a2 ON c.atom_id = a2.atom_id JOIN molecule m ON a2.molecule_id = m.molecule_id WHERE m.label = 'TR181';"}, {"question_id": 218, "answer_sql": "SELECT (COUNT(molecule_id) - COUNT(DISTINCT m.molecule_id)) / COUNT(molecule_id) * 100 AS percent FROM molecule m LEFT JOIN atom a ON m.molecule_id = a.molecule_id LEFT JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 WHERE m.label = '+' AND a.element != 'f';"}, {"question_id": 219, "answer_sql": "SELECT ROUND( (SUM(CASE WHEN bond_type = '#' THEN 1 ELSE 0 END) * 100.0 / COUNT(bond_id)) AS percent ) AS percentage_carcinogenic_molecules_with_triple_bonds FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN molecule ON molecule.molecule_id = connected.molecule_id WHERE label = '+';"}, {"question_id": 220, "answer_sql": "SELECT element FROM atom WHERE molecule_id = 'TR000' ORDER BY element ASC LIMIT 3;"}, {"question_id": 221, "answer_sql": "SELECT a1.atom_id, a2.atom_id FROM connected AS c JOIN atom AS a1 ON c.atom_id = a1.atom_id JOIN atom AS a2 ON c.atom_id2 = a2.atom_id JOIN bond AS b ON c.bond_id = b.bond_id WHERE b.molecule_id = 'TR001' AND b.bond_id = 'TR001_2_6';"}, {"question_id": 222, "answer_sql": "SELECT (SUM(CASE WHEN label = '+' THEN 1 ELSE 0 END) - SUM(CASE WHEN label = '-' THEN 1 ELSE 0 END)) AS difference FROM molecule;"}, {"question_id": 223, "answer_sql": "SELECT a.atom_id FROM connected c JOIN atom a ON c.atom_id = a.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_id = 'TR_000_2_5';"}, {"question_id": 224, "answer_sql": "SELECT bond_id FROM connected WHERE atom_id2 = 'TR000_2';"}, {"question_id": 225, "answer_sql": "SELECT m.label FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = ' = ' GROUP BY m.label ORDER BY m.label ASC LIMIT 5;"}, {"question_id": 226, "answer_sql": "SELECT ROUND((SUM(CASE WHEN bond_type = '=' THEN 1 ELSE 0 END) * 100.0 / COUNT(bond_id)), 2) AS percentage FROM bond WHERE molecule_id = 'TR008';"}, {"question_id": 227, "answer_sql": "SELECT (SUM(CASE WHEN m.label = '+' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) as percent FROM molecule m;"}, {"question_id": 228, "answer_sql": "SELECT ROUND((SUM(CASE WHEN element = 'h' THEN 1 ELSE 0 END) * 100.0) / COUNT(*), 2) AS percentage FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id JOIN molecule ON molecule.molecule_id = bond.molecule_id WHERE molecule.molecule_id = 'TR206';"}, {"question_id": 229, "answer_sql": "SELECT b.bond_type FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN molecule m ON c.molecule_id = m.molecule_id WHERE m.label = 'TR000';"}, {"question_id": 230, "answer_sql": "SELECT a.element, m.label FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.molecule_id = 'TR060';"}, {"question_id": 231, "answer_sql": "SELECT bond_type, CASE WHEN label = '+' THEN 'Carcinogenic' ELSE 'Non-Carcinogenic' END AS Carcinogenicity FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON atom.atom_id = connected.atom_id JOIN molecule ON molecule.molecule_id = atom.molecule_id WHERE molecule.molecule_id = 'TR018' GROUP BY bond_type ORDER BY COUNT(bond_type) DESC LIMIT 1;"}, {"question_id": 232, "answer_sql": "SELECT m.label FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id JOIN connected c ON b.bond_id = c.bond_id WHERE b.bond_type = '-' GROUP BY m.molecule_id ORDER BY m.label ASC LIMIT 3;"}, {"question_id": 233, "answer_sql": "SELECT bond_id FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON atom.atom_id = connected.atom_id OR atom.atom_id = connected.atom_id2 JOIN molecule ON molecule.molecule_id = atom.molecule_id WHERE molecule.molecule_id = 'TR006' ORDER BY bond_id ASC LIMIT 2;"}, {"question_id": 234, "answer_sql": "SELECT COUNT(DISTINCT bond_id) AS number_of_bonds FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON atom.atom_id = connected.atom_id OR atom.atom_id = connected.atom_id2 WHERE (atom.atom_id = 'TR009_12' OR atom.atom_id2 = 'TR009_12') AND bond.molecule_id = 'TR009';"}, {"question_id": 235, "answer_sql": "SELECT COUNT(DISTINCT m.molecule_id) AS carcinogenic_molecules_with_bromine FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE m.label LIKE '+' AND a.element = 'br';"}, {"question_id": 236, "answer_sql": "SELECT b.bond_type, a1.atom_id, a2.atom_id2 FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id JOIN molecule m ON b.molecule_id = m.molecule_id WHERE m.label = 'TR001_6_9' AND b.bond_type = ' = ';"}, {"question_id": 237, "answer_sql": "SELECT m.label, CASE WHEN m.label LIKE '+' THEN 'Yes' ELSE 'No' END AS carcinogenic FROM molecule m JOIN connected c ON m.molecule_id = c.atom_id2 JOIN atom a ON c.atom_id = a.atom_id WHERE a.atom_id = 'TR001_10';"}, {"question_id": 238, "answer_sql": "SELECT COUNT(DISTINCT m.molecule_id) AS molecule_count FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = '#';"}, {"question_id": 239, "answer_sql": "SELECT COUNT(DISTINCT bond_id) AS connections FROM connected WHERE atom_id = 'TR%_19' OR atom_id2 = 'TR%_19';"}, {"question_id": 240, "answer_sql": "SELECT DISTINCT a.element FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.label = 'TR004';"}, {"question_id": 241, "answer_sql": "SELECT COUNT(*) FROM molecule WHERE label = '-';"}, {"question_id": 242, "answer_sql": "SELECT DISTINCT m.molecule_id, m.label FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE SUBSTR(a.atom_id, 7, 2) BETWEEN '21' AND '25' AND m.label = '+';"}, {"question_id": 243, "answer_sql": "SELECT b.bond_id FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a ON c.atom_id = a.atom_id OR c.atom_id2 = a.atom_id WHERE a.element = 'p' AND a.element = 'n';"}, {"question_id": 244, "answer_sql": "SELECT m.label FROM molecule m JOIN ( SELECT b.molecule_id FROM bond b WHERE b.bond_type = ' = ' GROUP BY b.molecule_id ORDER BY COUNT(*) DESC LIMIT 1 ) AS most_double_bonds ON m.molecule_id = most_double_bonds.molecule_id WHERE m.label = '+';"}, {"question_id": 245, "answer_sql": "SELECT AVG(bond_count) FROM ( SELECT COUNT(b.bond_id) AS bond_count FROM atom a JOIN bond b ON a.molecule_id = b.molecule_id WHERE a.element = 'i' GROUP BY a.atom_id ) subquery;"}, {"question_id": 246, "answer_sql": "SELECT bond_id, bond_type FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON atom.atom_id = connected.atom_id2 WHERE atom.atom_id = '45';"}, {"question_id": 247, "answer_sql": "SELECT DISTINCT a.element FROM atom a LEFT JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 WHERE c.bond_id IS NULL AND a.element NOT IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca');"}, {"question_id": 248, "answer_sql": "SELECT a.atom_id, a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id2 JOIN bond b ON c.bond_id = b.bond_id JOIN molecule m ON m.molecule_id = c.molecule_id WHERE m.label = 'TR447' AND b.bond_type = '#';"}, {"question_id": 249, "answer_sql": "SELECT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id2 JOIN bond b ON c.bond_id = b.bond_id JOIN molecule m ON b.molecule_id = m.molecule_id WHERE m.label = 'TR144_8_19' AND a.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca');"}, {"question_id": 250, "answer_sql": "SELECT m.label, COUNT(*) as double_bond_count FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = ' = ' GROUP BY m.label ORDER BY double_bond_count DESC LIMIT 1;"}, {"question_id": 251, "answer_sql": "SELECT element FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label LIKE '+' GROUP BY element ORDER BY COUNT(*) ASC LIMIT 1;"}, {"question_id": 252, "answer_sql": "SELECT DISTINCT a1.atom_id FROM atom a1 JOIN connected c ON a1.atom_id = c.atom_id2 JOIN atom a2 ON c.atom_id = a2.atom_id WHERE a2.element = 'pb';"}, {"question_id": 253, "answer_sql": "SELECT DISTINCT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id2 JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = '#' AND a.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca');"}, {"question_id": 254, "answer_sql": "SELECT (COUNT(bond_id) * 100.0) / MAX(atom_count) AS percentage FROM (SELECT b.bond_id, COUNT(a.atom_id) AS atom_count FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a ON c.atom_id = a.atom_id OR c.atom_id2 = a.atom_id GROUP BY b.bond_id) AS bond_atom_counts WHERE atom_count = (SELECT MAX(atom_count) FROM (SELECT COUNT(a.atom_id) AS atom_count FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a ON c.atom_id = a.atom_id OR c.atom_id2 = a.atom_id GROUP BY b.bond_id) AS subquery);"}, {"question_id": 255, "answer_sql": "SELECT CAST(SUM(CASE WHEN b.bond_type = '-' THEN 1 ELSE 0 END) AS FLOAT) / COUNT(b.bond_id) AS proportion FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id JOIN molecule m ON b.molecule_id = m.molecule_id WHERE m.label = '+';"}, {"question_id": 256, "answer_sql": "SELECT COUNT(*) AS total_atoms FROM atom WHERE element IN ('c', 'h');"}, {"question_id": 257, "answer_sql": "SELECT DISTINCT connected.atom_id2 FROM atom JOIN connected ON atom.atom_id = connected.atom_id WHERE atom.element = 's';"}, {"question_id": 258, "answer_sql": "SELECT b.bond_type FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a ON c.atom_id = a.atom_id OR c.atom_id2 = a.atom_id JOIN molecule m ON a.molecule_id = m.molecule_id WHERE a.element = 'sn' AND b.bond_type IN ('-', '#');"}, {"question_id": 259, "answer_sql": "SELECT COUNT(DISTINCT element) AS element_count FROM atom JOIN bond ON atom.molecule_id = bond.molecule_id WHERE bond.bond_type = '-';"}, {"question_id": 260, "answer_sql": "SELECT COUNT(DISTINCT a.atom_id) AS total_atoms FROM atom a JOIN bond b ON a.molecule_id = b.molecule_id AND b.bond_type = '#' JOIN molecule m ON a.molecule_id = m.molecule_id WHERE a.element IN ('p', 'br');"}, {"question_id": 261, "answer_sql": "SELECT bond_id FROM connected JOIN atom ON connected.atom_id = atom.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+';"}, {"question_id": 262, "answer_sql": "SELECT m.molecule_id FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = '-' AND m.label = '-';"}, {"question_id": 263, "answer_sql": "SELECT ROUND(SUM(CASE WHEN element = 'cl' THEN 1 ELSE 0 END) * 100 / COUNT(atom_id), 2) AS percent FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '-';"}, {"question_id": 264, "answer_sql": "SELECT m.label FROM molecule m WHERE m.molecule_id IN ('TR000', 'TR001', 'TR002');"}, {"question_id": 265, "answer_sql": "SELECT m.molecule_id FROM molecule m WHERE m.label = '-';"}, {"question_id": 266, "answer_sql": "SELECT COUNT(*) AS total_carcinogenic_molecules FROM molecule WHERE molecule_id BETWEEN 'TR000' AND 'TR030' AND label LIKE '+';"}, {"question_id": 267, "answer_sql": "SELECT b.bond_type FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE m.molecule_id BETWEEN 'TR000' AND 'TR050' AND b.bond_type IN (' = ', '-', '#');"}, {"question_id": 268, "answer_sql": "SELECT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id2 JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_id = 'TR001_10_11' AND a.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca');"}, {"question_id": 269, "answer_sql": "SELECT COUNT(DISTINCT bond_id) FROM bond JOIN atom ON bond.molecule_id = atom.molecule_id WHERE atom.element = 'i';"}, {"question_id": 270, "answer_sql": "SELECT MAX(label) AS carcinogenic_status FROM molecule JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE element = 'ca';"}, {"question_id": 271, "answer_sql": "SELECT COUNT(DISTINCT a.atom_id) = 2 AS has_both_elements FROM atom a JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_id = 'TR001_1_8' AND a.element = 'cl' AND a.element = 'c';"}, {"question_id": 272, "answer_sql": "SELECT m.molecule_id FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id JOIN bond b ON a.molecule_id = b.molecule_id WHERE a.element = 'c' AND b.bond_type = '#' AND m.label LIKE '-%' GROUP BY m.molecule_id HAVING COUNT(DISTINCT a.atom_id) >= 3;"}, {"question_id": 273, "answer_sql": "SELECT ROUND(SUM(CASE WHEN element = 'Cl' THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2) AS percentage FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+';"}, {"question_id": 274, "answer_sql": "SELECT DISTINCT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id2 JOIN molecule m ON c.molecule_id = m.molecule_id WHERE m.molecule_id = 'TR001';"}, {"question_id": 275, "answer_sql": "SELECT m.molecule_id FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = ' = ';"}, {"question_id": 276, "answer_sql": "SELECT c1.atom_id, c2.atom_id2 FROM connected AS c1 JOIN bond AS b ON c1.bond_id = b.bond_id JOIN connected AS c2 ON c1.atom_id2 = c2.atom_id2 JOIN molecule AS m ON c1.molecule_id = m.molecule_id WHERE b.bond_type = '#' AND c1.atom_id < c2.atom_id2;"}, {"question_id": 277, "answer_sql": "SELECT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id2 JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_id = 'TR005_16_26' AND a.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca');"}, {"question_id": 278, "answer_sql": "SELECT COUNT(*) FROM molecule WHERE label = '-' AND molecule_id IN ( SELECT molecule_id FROM bond WHERE bond_type = '-' );"}, {"question_id": 279, "answer_sql": "SELECT m.label FROM molecule m JOIN connected c ON m.molecule_id = c.molecule_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_id = 'TR001_10_11' AND m.label = '+';"}, {"question_id": 280, "answer_sql": "SELECT connected.bond_id FROM connected JOIN bond ON connected.bond_id = bond.bond_id JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '#' AND molecule.label = '+';"}, {"question_id": 281, "answer_sql": "SELECT COUNT(*) AS toxicology_count FROM atom JOIN connected ON atom.atom_id = connected.atom_id2 JOIN molecule ON molecule.molecule_id = atom.molecule_id WHERE substr(atom.atom_id, 7, 1) = '4' AND atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca') AND molecule.label = '+'"}, {"question_id": 282, "answer_sql": "SELECT label, SUM(CASE WHEN element = 'h' THEN 1 ELSE 0 END) / COUNT(*) AS ratio FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule_id = 'TR006' GROUP BY label;"}, {"question_id": 283, "answer_sql": "SELECT m.molecule_id FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.element = 'ca' AND m.label = '+';"}, {"question_id": 284, "answer_sql": "SELECT b.bond_type FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id JOIN atom a ON b.molecule_id = a.molecule_id WHERE a.element = 'te' AND b.bond_type IN ('-', '#');"}, {"question_id": 285, "answer_sql": "SELECT DISTINCT a1.element FROM atom a1 JOIN connected c ON a1.atom_id = c.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id JOIN bond b ON b.bond_id = c.bond_id WHERE b.bond_type = 'TR001_10_11' AND SUBSTR(b.bond_id, 1, 5) = 'TR001' AND SUBSTR(b.bond_id, 7, 2) = '10' AND SUBSTR(b.bond_id, 10, 2) = '11';"}, {"question_id": 286, "answer_sql": "SELECT ROUND( (SELECT COUNT(DISTINCT m.molecule_id) FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = '#' GROUP BY m.molecule_id HAVING COUNT(b.bond_id) >= 3) * 100.0 / (SELECT COUNT(DISTINCT molecule_id) FROM molecule), 2) AS percent_triple_bonds"}, {"question_id": 287, "answer_sql": "SELECT (SUM(CASE WHEN bond_type = ' = ' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) as percent FROM bond WHERE molecule_id = 'TR047';"}, {"question_id": 288, "answer_sql": "SELECT m.label FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 WHERE a.element = 'TR001_1' AND m.label = '+';"}, {"question_id": 289, "answer_sql": "SELECT EXISTS( SELECT 1 FROM molecule JOIN connected ON molecule.molecule_id = connected.atom_id2 JOIN atom ON atom.atom_id = connected.atom_id WHERE molecule.label = '+' AND atom.molecule_id = 'TR151' ) AS is_carcinogenic;"}, {"question_id": 290, "answer_sql": "SELECT DISTINCT a.element FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.label = 'TR151' AND a.element LIKE 'cl%' OR a.element LIKE 'br%'"}, {"question_id": 291, "answer_sql": "SELECT COUNT(*) AS carcinogenic_compounds FROM molecule WHERE label LIKE '+%';"}, {"question_id": 292, "answer_sql": "SELECT a.atom_id FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.molecule_id BETWEEN 'TR010' AND 'TR050' AND a.element = 'c';"}, {"question_id": 293, "answer_sql": "SELECT COUNT(DISTINCT a.atom_id) AS carcinogenic_atoms_count FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.label LIKE '+';"}, {"question_id": 294, "answer_sql": "SELECT bond_id FROM bond JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond_type = ' = ' AND molecule.label = '+';"}, {"question_id": 295, "answer_sql": "SELECT COUNT(DISTINCT a.atom_id) AS number_of_atoms FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE a.element = 'h' AND m.label LIKE '+';"}, {"question_id": 296, "answer_sql": "SELECT m.molecule_id FROM molecule m JOIN connected c ON m.molecule_id = c.molecule_id JOIN atom a1 ON c.atom_id = a1.atom_id AND a1.element = 'TR00_1' JOIN atom a2 ON c.atom_id2 = a2.atom_id JOIN bond b ON c.bond_id = b.bond_id AND b.molecule_id = m.molecule_id WHERE b.bond_type = 'TR00_1_2';"}, {"question_id": 297, "answer_sql": "SELECT a.atom_id FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE a.element = 'c' AND m.label = '-';"}, {"question_id": 298, "answer_sql": "SELECT ROUND((SUM(CASE WHEN element = 'h' AND label = '+' THEN 1 ELSE 0 END) / COUNT(*)) * 100.0, 2) AS percentage FROM molecule JOIN atom ON molecule.molecule_id = atom.molecule_id JOIN connected ON atom.atom_id = connected.atom_id OR atom.atom_id = connected.atom_id2 WHERE connected.bond_id IS NOT NULL;"}, {"question_id": 299, "answer_sql": "SELECT EXISTS( SELECT 1 FROM molecule JOIN connected ON molecule.molecule_id = connected.atom_id2 JOIN atom ON atom.atom_id = connected.atom_id WHERE molecule.label = '+' AND atom.molecule_id = 'TR124' ) AS is_carcinogenic;"}, {"question_id": 300, "answer_sql": "SELECT a.atom_id, a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id JOIN molecule m ON b.molecule_id = m.molecule_id WHERE m.label = 'TR186';"}, {"question_id": 301, "answer_sql": "SELECT b.bond_type FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a ON c.atom_id = a.atom_id OR c.atom_id2 = a.atom_id JOIN molecule m ON m.molecule_id = a.molecule_id WHERE m.label = 'TR007_4_19' AND b.bond_type IN (' = ', '-', '#');"}, {"question_id": 302, "answer_sql": "SELECT element FROM atom JOIN connected ON atom.atom_id = connected.atom_id2 JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR001_2_4';"}, {"question_id": 303, "answer_sql": "SELECT COUNT(*) AS double_bond_count FROM bond WHERE molecule_id = 'TR006' AND bond_type = ' = ';"}, {"question_id": 304, "answer_sql": "SELECT m.label, a.element FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE m.label LIKE '+%' AND a.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca');"}, {"question_id": 305, "answer_sql": "SELECT b.bond_id, a1.atom_id, a2.atom_id FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE b.bond_type = '-';"}, {"question_id": 306, "answer_sql": "SELECT m.label, GROUP_CONCAT(DISTINCT a.element) AS elements FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id JOIN connected c ON b.bond_id = c.bond_id JOIN atom a ON c.atom_id = a.atom_id WHERE b.bond_type = '#' GROUP BY m.molecule_id;"}, {"question_id": 307, "answer_sql": "SELECT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id2 JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = 'TR000_2_3' AND a.atom_id IN ( SELECT a2.atom_id FROM atom a2 JOIN connected c2 ON a2.atom_id = c2.atom_id2 JOIN bond b2 ON c2.bond_id = b2.bond_id WHERE b2.bond_type = 'TR000_2_3' AND a2.atom_id != a.atom_id );"}, {"question_id": 308, "answer_sql": "SELECT COUNT(DISTINCT bond_id) AS NumberOfBonds FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON atom.atom_id = connected.atom_id OR atom.atom_id = connected.atom_id2 WHERE atom.element = 'cl';"}, {"question_id": 309, "answer_sql": "SELECT a.atom_id, COUNT(DISTINCT b.bond_id) AS bond_count FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.label = 'TR346' GROUP BY a.atom_id;"}, {"question_id": 310, "answer_sql": "SELECT COUNT(DISTINCT m.molecule_id) AS carcinogenic_molecules_with_double_bond FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = ' = ';"}, {"question_id": 311, "answer_sql": "SELECT COUNT(DISTINCT m.molecule_id) FROM molecule m LEFT JOIN atom a ON m.molecule_id = a.molecule_id LEFT JOIN bond b ON m.molecule_id = b.molecule_id WHERE a.element != 's' AND (b.bond_type != ' = ' OR b.bond_type IS NULL) GROUP BY m.molecule_id;"}, {"question_id": 312, "answer_sql": "SELECT m.label FROM molecule m JOIN connected c ON m.molecule_id = c.atom_id2 JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_id = 'TR001_2_4' AND m.label = '+';"}, {"question_id": 313, "answer_sql": "SELECT COUNT(DISTINCT a.atom_id) AS atom_count FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.molecule_id = 'TR005';"}, {"question_id": 314, "answer_sql": "SELECT COUNT(*) FROM bond WHERE bond_type = '-';"}, {"question_id": 315, "answer_sql": "SELECT m.molecule_id, m.label FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.element = 'cl' AND m.label LIKE '+%'"}, {"question_id": 316, "answer_sql": "SELECT m.molecule_id, m.label FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.element = 'c' AND m.label = '-';"}, {"question_id": 317, "answer_sql": "SELECT ROUND( (SUM(CASE WHEN label = '+' AND element = 'Cl' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) , 2) AS percentage FROM molecule JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'Cl';"}, {"question_id": 318, "answer_sql": "SELECT molecule_id FROM bond WHERE bond_id = 'TR001_1_7';"}, {"question_id": 319, "answer_sql": "SELECT COUNT(DISTINCT element) AS element_count FROM atom JOIN connected ON atom.atom_id = connected.atom_id2 JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR001_3_4';"}, {"question_id": 320, "answer_sql": "SELECT b.bond_type FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a1 ON c.atom_id = a1.atom_id AND a1.atom_id = 'TR000_1' JOIN atom a2 ON c.atom_id2 = a2.atom_id AND a2.atom_id = 'TR000_2';"}, {"question_id": 321, "answer_sql": "SELECT m.label FROM molecule m JOIN connected c ON m.molecule_id = c.atom_id2 JOIN atom a ON c.atom_id = a.atom_id WHERE a.atom_id = 'TR000_2' AND a.atom_id2 = 'TR000_4';"}, {"question_id": 322, "answer_sql": "SELECT element FROM atom WHERE atom_id = 'TR000_1';"}, {"question_id": 323, "answer_sql": "SELECT EXISTS( SELECT 1 FROM molecule WHERE molecule_id = 'TR000' AND label = '+' ) AS is_carcinogenic;"}, {"question_id": 324, "answer_sql": "SELECT ROUND( (SELECT COUNT(*) FROM bond WHERE bond_type = '-') / (SELECT COUNT(*) FROM bond) * 100, 2) AS percentage"}, {"question_id": 325, "answer_sql": "SELECT COUNT(DISTINCT m.molecule_id) AS carcinogenic_molecules_with_nitrogen FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.element = 'n' AND m.label LIKE '%+';"}, {"question_id": 326, "answer_sql": "SELECT m.label FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id JOIN bond b ON a.molecule_id = b.molecule_id WHERE a.element = 's' AND b.bond_type = ' = ';"}, {"question_id": 327, "answer_sql": "SELECT m.molecule_id FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id GROUP BY m.molecule_id HAVING COUNT(a.atom_id) > 5 AND m.label = '-';"}, {"question_id": 328, "answer_sql": "SELECT DISTINCT a.element FROM atom a JOIN bond b ON a.molecule_id = b.molecule_id JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.label = 'TR024' AND b.bond_type = '=' AND a.atom_id IN ( SELECT atom_id2 FROM connected WHERE atom_id = ( SELECT atom_id FROM atom WHERE molecule_id = ( SELECT molecule_id FROM molecule WHERE label = 'TR024' ) AND element = 'c' ) ) AND a.element IN ('cl', 'o', 's', 'f', 'i', 'te', 'ca');"}, {"question_id": 329, "answer_sql": "SELECT molecule.molecule_id, COUNT(atom.molecule_id) AS atom_count FROM molecule JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+' GROUP BY molecule.molecule_id ORDER BY atom_count DESC LIMIT 1;"}, {"question_id": 330, "answer_sql": "SELECT ROUND((SUM(CASE WHEN label = '+' THEN 1 ELSE 0 END) / COUNT(*)) * 100.0, 2) AS percentage FROM molecule WHERE molecule_id IN ( SELECT m.molecule_id FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id JOIN bond b ON a.molecule_id = b.molecule_id JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 WHERE a.element = 'h' AND b.bond_type = '#' GROUP BY m.molecule_id HAVING COUNT(DISTINCT a.atom_id) = 3 );"}, {"question_id": 331, "answer_sql": "SELECT COUNT(*) AS carcinogenic_molecules FROM molecule WHERE label = '+';"}, {"question_id": 332, "answer_sql": "SELECT COUNT(DISTINCT m.molecule_id) AS single_bond_count FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = '-' AND m.molecule_id BETWEEN 'TR004' AND 'TR010';"}, {"question_id": 333, "answer_sql": "SELECT COUNT(*) AS carbon_count FROM atom JOIN connected ON atom.atom_id = connected.atom_id2 JOIN molecule ON molecule.molecule_id = connected.atom_id2 WHERE atom.element = 'c' AND molecule.label = 'TR008';"}, {"question_id": 334, "answer_sql": "SELECT element FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom_id = 'TR004_7' AND label = '-'"}, {"question_id": 335, "answer_sql": "SELECT COUNT(DISTINCT m.molecule_id) FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id JOIN connected c ON b.bond_id = c.bond_id JOIN atom a ON c.atom_id = a.atom_id OR c.atom_id2 = a.atom_id WHERE a.element = 'o' AND b.bond_type = ' = ';"}, {"question_id": 336, "answer_sql": "SELECT COUNT(*) FROM molecule WHERE label = '-' AND molecule_id NOT IN ( SELECT molecule_id FROM bond WHERE bond_type = '#' );"}, {"question_id": 337, "answer_sql": "SELECT a.element, b.bond_type FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.molecule_id = 'TR016';"}, {"question_id": 338, "answer_sql": "SELECT atom_id FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE element = 'c' AND bond_type = ' = ' AND molecule.label = 'TR012';"}, {"question_id": 339, "answer_sql": "SELECT DISTINCT a.atom_id FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id JOIN connected c ON a.atom_id = c.atom_id2 OR a.atom_id = c.atom_id WHERE m.label = '+' AND a.element = 'o';"}, {"question_id": 340, "answer_sql": "SELECT name, artwork_url, mana_cost, converted_mana_cost, rarity, set_code, set_name FROM cards JOIN set_translations ON cards.set_code = set_translations.set_code WHERE cardKingdomFoilId = cardKingdomId AND cardKingdomId IS NOT NULL ORDER BY converted_mana_cost DESC;"}, {"question_id": 341, "answer_sql": "SELECT name, scryfallId FROM cards WHERE borderColor = '' AND cardKingdomFoilId IS NULL AND cardKingdomId IS NOT NULL;"}, {"question_id": 342, "answer_sql": "SELECT name FROM cards WHERE faceConvertedManaCost = (SELECT MAX(faceConvertedManaCost) FROM cards);"}, {"question_id": 343, "answer_sql": "SELECT name FROM cards JOIN set_translations ON cards.multiverseid = set_translations.uuid JOIN sets ON set_translations.setCode = sets.code JOIN legalities ON cards.uuid = legalities.uuid WHERE sets.releaseDate BETWEEN '2015-01-01' AND '2015-12-31' AND legalities.format = 'EDHRec' AND legalities.status = 'Active' AND legalities.edhrecRank < 100;"}, {"question_id": 344, "answer_sql": "SELECT name, text FROM cards JOIN legalities ON cards.uuid = legalities.uuid JOIN set_translations ON cards.uuid = set_translations.uuid WHERE rarity = 'mythic' AND status = 'Banned' AND format = 'gladiator';"}, {"question_id": 345, "answer_sql": "SELECT l.uuid, l.status FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.type = 'Artifact' AND c.side IS NULL AND l.format = 'vintage';"}, {"question_id": 346, "answer_sql": "SELECT cards.id, cards.artist FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE (cards.power = '*' OR cards.power IS NULL) AND legalities.format = 'commander' AND legalities.status = 'Legal';"}, {"question_id": 347, "answer_sql": "SELECT c.name, c.text, r.text AS ruling_text FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid JOIN rulings r ON c.uuid = r.uuid WHERE c.artist = 'Stephen Daniel' AND c.hasContentWarning = 1;"}, {"question_id": 348, "answer_sql": "SELECT r.text FROM rulings r JOIN cards c ON r.uuid = c.uuid WHERE c.name = 'Sublime Epiphany' AND c.number = '74s';"}, {"question_id": 349, "answer_sql": "SELECT cards.name, cards.artist, COUNT(rulings.uuid) AS ruling_count, cards.isPromo FROM cards JOIN rulings ON cards.uuid = rulings.uuid GROUP BY cards.uuid ORDER BY ruling_count DESC LIMIT 1;"}, {"question_id": 350, "answer_sql": "SELECT DISTINCT language FROM set_translations JOIN cards ON set_translations.setCode = cards.setCode WHERE cards.name = 'annul' AND cards.number = '29';"}, {"question_id": 351, "answer_sql": "SELECT c.* FROM cards c JOIN set_translations st ON c.multiverseid = st.multiverseid WHERE st.language = 'Japanese';"}, {"question_id": 352, "answer_sql": "SELECT (SUM(CASE WHEN language = 'Chinese Simplified' THEN 1 ELSE 0 END) / CAST(COUNT(*) AS REAL)) * 100 AS percentage_available_in_chinese_simplified FROM cards JOIN set_translations ON cards.uuid = set_translations.setCode WHERE set_translations.language = 'Chinese Simplified';"}, {"question_id": 353, "answer_sql": "SELECT s.code, s.name, s.totalSetSize FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.language = 'Italian';"}, {"question_id": 354, "answer_sql": "SELECT COUNT(DISTINCT type) AS types_count FROM cards WHERE artist = 'Aaron Boyd';"}, {"question_id": 355, "answer_sql": "SELECT keywords FROM cards WHERE name = 'Angel of Mercy';"}, {"question_id": 356, "answer_sql": "SELECT COUNT(*) FROM cards WHERE power = '*';"}, {"question_id": 357, "answer_sql": "SELECT promoTypes FROM cards WHERE name = 'Duress';"}, {"question_id": 358, "answer_sql": "SELECT colorIndicator FROM cards WHERE name = 'Ancestor''s Chosen';"}, {"question_id": 359, "answer_sql": "SELECT originalType FROM cards WHERE name = 'Ancestor''s Chosen';"}, {"question_id": 360, "answer_sql": "SELECT DISTINCT set_translations.language FROM cards JOIN sets ON cards.setCode = sets.code JOIN set_translations ON sets.code = set_translations.setCode WHERE cards.name = 'Angel of Mercy';"}, {"question_id": 361, "answer_sql": "SELECT COUNT(*) FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'restricted' AND cards.isTextless = 0;"}, {"question_id": 362, "answer_sql": "SELECT text FROM rulings WHERE uuid = (SELECT uuid FROM cards WHERE name = 'Ancestor''s Chosen');"}, {"question_id": 363, "answer_sql": "SELECT COUNT(*) AS restricted_starter_deck_cards FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'restricted' AND cards.isStarter = 1;"}, {"question_id": 364, "answer_sql": "SELECT l.status FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.name = 'Cloudchaser Eagle';"}, {"question_id": 365, "answer_sql": "SELECT type FROM cards WHERE name = 'Benalish Knight';"}, {"question_id": 366, "answer_sql": "SELECT text FROM rulings WHERE uuid = (SELECT uuid FROM cards WHERE name = 'Benalish Knight') LIMIT 1;"}, {"question_id": 367, "answer_sql": "SELECT DISTINCT c.artist FROM cards c JOIN set_translations st ON c.multiverseid = st.translation WHERE st.language = 'Phyrexian';"}, {"question_id": 368, "answer_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM cards)) AS percentage_borderless FROM cards WHERE borderColor = 'borderless';"}, {"question_id": 369, "answer_sql": "SELECT COUNT(*) AS ReprintedGermanCards FROM cards JOIN set_translations ON cards.uuid = set_translations.uuid JOIN foreign_data ON set_translations.uuid = foreign_data.uuid WHERE foreign_data.language = 'German' AND cards.isReprint = 1;"}, {"question_id": 370, "answer_sql": "SELECT COUNT(*) AS NumberOfBorderlessRussianIllustratedCards FROM cards JOIN set_translations ON cards.multiverseid = set_translations.multiverseid JOIN foreign_data ON set_translations.uuid = foreign_data.uuid WHERE cards.borderColor = 'borderless' AND set_translations.language = 'Russian';"}, {"question_id": 371, "answer_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM cards WHERE isStorySpotlight = 1)) AS percentage_french_story_spotlight_cards FROM cards WHERE language = 'French' AND isStorySpotlight = 1;"}, {"question_id": 372, "answer_sql": "SELECT COUNT(*) FROM cards WHERE toughness = '99';"}, {"question_id": 373, "answer_sql": "SELECT name FROM cards WHERE artist = 'Aaron Boyd';"}, {"question_id": 374, "answer_sql": "SELECT COUNT(*) AS black_mtgo_border_cards FROM cards WHERE borderColor = 'black' AND availability = 'mtgo';"}, {"question_id": 375, "answer_sql": "SELECT id FROM cards WHERE convertedManaCost = 0;"}, {"question_id": 376, "answer_sql": "SELECT layout FROM cards JOIN set_translations ON cards.multiverseid = set_translations.multiverseid WHERE cards.keywords LIKE '%flying%';"}, {"question_id": 377, "answer_sql": "SELECT COUNT(*) FROM cards WHERE originalType = 'Summon - Angel' AND subtypes NOT LIKE '%Angel%';"}, {"question_id": 378, "answer_sql": "SELECT id FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL;"}, {"question_id": 379, "answer_sql": "SELECT id FROM cards WHERE duelDeck = 'a';"}, {"question_id": 380, "answer_sql": "SELECT edhrecRank FROM cards WHERE frameVersion = '2015';"}, {"question_id": 381, "answer_sql": "SELECT c.name, f.text AS artist_name FROM cards c JOIN foreign_data f ON c.uuid = f.uuid WHERE f.language = 'zh-Hans';"}, {"question_id": 382, "answer_sql": "SELECT c.name, c.multiverseid FROM cards c JOIN set_translations st ON c.multiverseid = st.multiverseid WHERE st.language = 'Japanese' AND c.availability = 'paper';"}, {"question_id": 383, "answer_sql": "SELECT COUNT(*) AS banned_white_border_cards FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'Banned' AND cards.borderColor = 'white';"}, {"question_id": 384, "answer_sql": "SELECT cards.uuid, foreign_data.language FROM cards JOIN foreign_data ON cards.scryfallId = foreign_data.uuid WHERE cards.type = 'Legacy';"}, {"question_id": 385, "answer_sql": "SELECT text FROM rulings WHERE uuid = (SELECT uuid FROM cards WHERE name = 'Beacon of Immortality') LIMIT 1;"}, {"question_id": 386, "answer_sql": "SELECT COUNT(*), legalities.status FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.frameVersion = 'future' AND legalities.status = 'legal' GROUP BY legalities.status;"}, {"question_id": 387, "answer_sql": "SELECT DISTINCT cards.colorIdentity FROM cards JOIN sets ON cards.setCode = sets.code WHERE sets.code = 'OGW';"}, {"question_id": 388, "answer_sql": "SELECT c.name, st.language FROM cards c JOIN set_translations st ON c.multiverseid = st.multiverseid JOIN sets s ON c.multiverseid = s.code WHERE s.code = '10E' AND c.convertedManaCost = 5;"}, {"question_id": 389, "answer_sql": "SELECT c.name, r.date FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.originalType = 'Creature - Elf';"}, {"question_id": 390, "answer_sql": "SELECT colors, format FROM cards WHERE id BETWEEN 1 AND 20;"}, {"question_id": 391, "answer_sql": "SELECT c.name, f.text FROM cards c JOIN foreign_data f ON c.uuid = f.uuid WHERE c.originalType = 'Artifact' AND c.colors LIKE '%B%' AND f.language = 'Foreign';"}, {"question_id": 392, "answer_sql": "SELECT name FROM cards JOIN rulings ON cards.uuid = rulings.uuid WHERE rarity = 'uncommon' ORDER BY rulings.date ASC LIMIT 3;"}, {"question_id": 393, "answer_sql": "SELECT COUNT(*) AS non_powerful_foil_count FROM cards WHERE artist = 'John Avon' AND cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL;"}, {"question_id": 394, "answer_sql": "SELECT COUNT(*) AS powerful_white_bordered_cards FROM cards WHERE borderColor = 'white' AND cardKingdomFoilId = cardKingdomId AND cardKingdomId IS NOT NULL;"}, {"question_id": 395, "answer_sql": "SELECT COUNT(*) AS NumberOfCards FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.name = 'UDON' AND cards.availability = 'mtgo' AND cards.hand = -1;"}, {"question_id": 396, "answer_sql": "SELECT COUNT(*) AS NumberOfCards FROM cards WHERE frameVersion = '1993' AND availability = 'paper' AND hasContentWarning = 1;"}, {"question_id": 397, "answer_sql": "SELECT manaCost FROM cards WHERE layout = 'normal' AND frameVersion = '2003' AND borderColor = 'black' AND availability LIKE '%paper%' AND availability LIKE '%mtgo%';"}, {"question_id": 398, "answer_sql": "SELECT SUM(CAST(SUBSTR(manaCost, 2) AS REAL)) AS total_unconverted_mana FROM cards WHERE artist = 'Rob Alexander';"}, {"question_id": 399, "answer_sql": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE availability = 'arena';"}, {"question_id": 400, "answer_sql": "SELECT DISTINCT setCode FROM set_translations WHERE language = 'Spanish';"}, {"question_id": 401, "answer_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM cards WHERE frameEffects = 'legendary')) AS percentage FROM cards WHERE hand = '+3';"}, {"question_id": 402, "answer_sql": "SELECT id FROM cards WHERE isStorySpotlight = 1 AND isTextless = 0 ORDER BY id;"}, {"question_id": 403, "answer_sql": "SELECT name, (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM cards)) AS percentage FROM cards JOIN set_translations ON cards.uuid = set_translations.uuid WHERE set_translations.language = 'Spanish' GROUP BY name ORDER BY percentage DESC;"}, {"question_id": 404, "answer_sql": "SELECT DISTINCT language FROM set_translations JOIN sets ON set_translations.setCode = sets.code WHERE sets.baseSetSize = 309;"}, {"question_id": 405, "answer_sql": "SELECT COUNT(*) AS NumberOfTranslatedSets FROM set_translations JOIN sets ON set_translations.setCode = sets.code WHERE sets.block = 'Commander' AND set_translations.language = 'Portuguese (Brasil)';"}, {"question_id": 406, "answer_sql": "SELECT id, name, type, status FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE type LIKE '%Creature%' AND status = 'legal';"}, {"question_id": 407, "answer_sql": "SELECT DISTINCT t.type FROM cards c JOIN set_translations st ON c.multiverseid = st.multiverseid JOIN foreign_data fd ON st.uuid = fd.uuid WHERE fd.language = 'German' AND c.subtypes IS NOT NULL AND c.supertypes IS NOT NULL;"}, {"question_id": 408, "answer_sql": "SELECT COUNT(*) FROM cards WHERE power IS NULL OR power = '*' AND EXISTS ( SELECT 1 FROM rulings WHERE rulings.uuid = cards.uuid AND rulings.text LIKE '%triggered ability%' );"}, {"question_id": 409, "answer_sql": "SELECT COUNT(*) AS NumberOfCards FROM cards JOIN rulings ON cards.uuid = rulings.uuid WHERE rulings.text LIKE '%This is a triggered mana ability%' AND cards.side IS NULL;"}, {"question_id": 410, "answer_sql": "SELECT id FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE artist = 'Erica Yang' AND format = 'Pauper' AND availability = 'paper';"}, {"question_id": 411, "answer_sql": "SELECT artist FROM cards WHERE originalText = 'Das perfekte Gegenmittel zu einer dichten Formation';"}, {"question_id": 412, "answer_sql": "SELECT f.text AS foreign_name FROM cards c JOIN set_translations st ON c.multiverseid = st.setCode JOIN foreign_data f ON st.uuid = f.uuid WHERE c.type = 'Creature' AND f.language = 'French' AND c.borderColor = 'black' AND c.artist = 'Matthew D. Wilson';"}, {"question_id": 413, "answer_sql": "SELECT COUNT(*) FROM cards JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.rarity = 'rare' AND rulings.date = '2009-01-10';"}, {"question_id": 414, "answer_sql": "SELECT DISTINCT language FROM set_translations JOIN sets ON set_translations.setCode = sets.code WHERE sets.baseSetSize = 180 AND sets.block = 'Ravnica';"}, {"question_id": 415, "answer_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM cards WHERE format = 'commander' AND status = 'legal')) AS percentage_no_content_warning FROM cards WHERE format = 'commander' AND status = 'legal' AND hasContentWarning = 0;"}, {"question_id": 416, "answer_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM cards WHERE power IS NULL OR power = '*')) AS percentage_french_cards_without_power FROM cards JOIN set_translations ON cards.multiverseid = set_translations.setCode WHERE set_translations.language = 'French' AND (cards.power IS NULL OR cards.power = '*');"}, {"question_id": 417, "answer_sql": "SELECT (COUNT(DISTINCT s.code) / (SELECT COUNT(DISTINCT code) FROM sets WHERE type = 'expansion')) * 100 AS percentage FROM set_translations st JOIN sets s ON st.setCode = s.code WHERE st.language = 'Japanese';"}, {"question_id": 418, "answer_sql": "SELECT printings FROM cards WHERE artist = 'Daren Bader';"}, {"question_id": 419, "answer_sql": "SELECT COUNT(*) AS NumberOfColorCards FROM cards JOIN set_translations ON cards.uuid = set_translations.uuid JOIN sets ON set_translations.setCode = sets.code JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.colorIdentity != '' AND cards.borderColor = 'borderless' AND legalities.status = 'legal' AND legalities.format = 'EDHRec' AND legalities.uuid = set_translations.uuid AND cards.edhrecRank > 12000;"}, {"question_id": 420, "answer_sql": "SELECT COUNT(*) AS NumberOfCards FROM cards WHERE isOversized = 1 AND isReprint = 1 AND isPromo = 1;"}, {"question_id": 421, "answer_sql": "SELECT name FROM cards WHERE power IS NULL OR power = '*' AND promoTypes LIKE '%arenaleague%' ORDER BY name ASC LIMIT 3;"}, {"question_id": 422, "answer_sql": "SELECT language FROM set_translations JOIN cards ON cards.multiverseid = 149934 JOIN foreign_data ON foreign_data.uuid = cards.uuid WHERE cards.multiverseid = 149934;"}, {"question_id": 423, "answer_sql": "SELECT c.id AS card_id, f.id AS foil_id FROM cards c JOIN foreign_data f ON c.scryfallId = f.uuid WHERE c.cardKingdomFoilId IS NOT NULL AND c.cardKingdomId IS NOT NULL ORDER BY c.scryfallId ASC LIMIT 3;"}, {"question_id": 424, "answer_sql": "SELECT (COUNT(*) - COUNT(isTextless = 1 and layout = 'normal')) * 100.0 / COUNT(*) AS proportion_without_text_normal_layout FROM cards WHERE isTextless = 1;"}, {"question_id": 425, "answer_sql": "SELECT DISTINCT number FROM cards WHERE subtypes LIKE '%Angel%' AND subtypes LIKE '%Wizard%' AND otherFaceIds IS NULL;"}, {"question_id": 426, "answer_sql": "SELECT name FROM sets WHERE mtgoCode IS NULL OR mtgoCode = '' ORDER BY name ASC LIMIT 3;"}, {"question_id": 427, "answer_sql": "SELECT DISTINCT language FROM set_translations JOIN sets ON set_translations.setCode = sets.code WHERE sets.mcmName = 'Archenemy' AND sets.code = 'ARC';"}, {"question_id": 428, "answer_sql": "SELECT s.name AS set_name, st.translation AS translation FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE s.id = 5;"}, {"question_id": 429, "answer_sql": "SELECT set_translations.language, sets.type FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE sets.id = 206;"}, {"question_id": 430, "answer_sql": "SELECT s.id, s.name FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.language = 'Italian' AND s.block = 'Shadowmoor' ORDER BY s.name ASC LIMIT 2;"}, {"question_id": 431, "answer_sql": "SELECT s.id FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.language = 'Japanese' AND s.isForeignOnly = 1;"}, {"question_id": 432, "answer_sql": "SELECT sets.code, MAX(sets.totalSetSize) AS most_cards FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.language = 'Russian' GROUP BY sets.code ORDER BY most_cards DESC LIMIT 1;"}, {"question_id": 433, "answer_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM cards WHERE isOnlineOnly = 1)) AS percentage FROM cards WHERE language = 'Chinese Simplified';"}, {"question_id": 434, "answer_sql": "SELECT COUNT(*) AS NumberOfSets FROM sets WHERE mtgoCode IS NULL OR mtgoCode = '' AND EXISTS ( SELECT 1 FROM set_translations WHERE set_translations.setCode = sets.code AND set_translations.language = 'Japanese' );"}, {"question_id": 435, "answer_sql": "SELECT id FROM cards WHERE borderColor = 'black';"}, {"question_id": 436, "answer_sql": "SELECT id FROM cards WHERE frameEffects = 'extendedart';"}, {"question_id": 437, "answer_sql": "SELECT name FROM cards WHERE borderColor = 'black' AND isFullArt = 1;"}, {"question_id": 438, "answer_sql": "SELECT language FROM set_translations WHERE setCode = '174';"}, {"question_id": 439, "answer_sql": "SELECT name FROM sets WHERE code = 'ALL';"}, {"question_id": 440, "answer_sql": "SELECT text FROM set_translations JOIN cards ON set_translations.setCode = cards.scryfallId WHERE cards.name = 'A Pedra Fellwar' AND set_translations.language != 'en';"}, {"question_id": 441, "answer_sql": "SELECT code FROM sets WHERE releaseDate = '2007-07-13';"}, {"question_id": 442, "answer_sql": "SELECT sets.baseSetSize, sets.code FROM sets JOIN sets_blocks ON sets.code = sets_blocks.setCode WHERE sets_blocks.block IN ('Masques', 'Mirage');"}, {"question_id": 443, "answer_sql": "SELECT code FROM sets WHERE type = 'expansion';"}, {"question_id": 444, "answer_sql": "SELECT f.name AS foreignName, c.type AS cardType FROM cards c JOIN foreign_data f ON c.uuid = f.uuid WHERE c.watermark = 'boros';"}, {"question_id": 445, "answer_sql": "SELECT ft.language, ft.text AS flavorText, c.type FROM cards c JOIN foreign_data ft ON c.scryfallId = ft.uuid WHERE c.watermark = 'colorpie';"}, {"question_id": 446, "answer_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM cards WHERE setCode = 'Abyssal Horror')) AS percentage FROM cards WHERE convertedManaCost = 10 AND setCode = 'Abyssal Horror';"}, {"question_id": 447, "answer_sql": "SELECT code FROM sets WHERE type = 'Expansion Commander';"}, {"question_id": 448, "answer_sql": "SELECT f.name AS foreignName, c.type FROM cards c JOIN foreign_data f ON c.uuid = f.uuid WHERE c.watermark = 'abzan'"}, {"question_id": 449, "answer_sql": "SELECT ft.language, c.type FROM cards c JOIN foreign_data ft ON c.scryfallId = ft.uuid WHERE c.watermark = 'azorius'"}, {"question_id": 450, "answer_sql": "SELECT COUNT(*) AS powerful_cards_count FROM cards WHERE artist = 'Aaron Miller' AND cardKingdomFoilId = cardKingdomId AND cardKingdomId IS NOT NULL;"}, {"question_id": 451, "answer_sql": "SELECT COUNT(*) AS NumberOfCards FROM cards WHERE availability LIKE '%paper%' AND hand LIKE '+%';"}, {"question_id": 452, "answer_sql": "SELECT name FROM cards WHERE isTextless = 0;"}, {"question_id": 453, "answer_sql": "SELECT convertedManaCost FROM cards WHERE name = 'Ancestor`s Chosen';"}, {"question_id": 454, "answer_sql": "SELECT COUNT(*) AS UnknownPowerCount FROM cards WHERE colors LIKE '%white%' AND (power = '*' OR power IS NULL);"}, {"question_id": 455, "answer_sql": "SELECT name FROM cards WHERE isPromo = 1 AND side IS NOT NULL;"}, {"question_id": 456, "answer_sql": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer';"}, {"question_id": 457, "answer_sql": "SELECT DISTINCT purchaseUrls FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE promoTypes = 'bundle';"}, {"question_id": 458, "answer_sql": "SELECT COUNT(DISTINCT artist) AS num_artists FROM cards WHERE colors LIKE '%black%' AND printings LIKE '%arena%' AND printings LIKE '%mtgo%'"}, {"question_id": 459, "answer_sql": "SELECT name FROM cards WHERE name IN ('Serra Angel', 'Shrine Keeper') ORDER BY convertedManaCost DESC LIMIT 1;"}, {"question_id": 460, "answer_sql": "SELECT artist FROM cards WHERE flavorName = 'Battra, Dark Destroyer';"}, {"question_id": 461, "answer_sql": "SELECT name FROM cards WHERE frameVersion = '2003' ORDER BY convertedManaCost DESC LIMIT 3;"}, {"question_id": 462, "answer_sql": "SELECT set_translations.translation FROM set_translations JOIN sets ON set_translations.setCode = sets.code JOIN cards ON cards.multiverseid = set_translations.multiverseid WHERE cards.name = 'Ancestor''s Chosen' AND language = 'Italian';"}, {"question_id": 463, "answer_sql": "SELECT COUNT(*) AS NumberOfTranslations FROM set_translations JOIN cards ON set_translations.setCode = cards.setCode WHERE cards.name = 'Angel of Mercy';"}, {"question_id": 464, "answer_sql": "SELECT name FROM cards JOIN sets ON cards.multiverseid = sets.multiverseid WHERE sets.code = 'Hauptset Zehnte Edition';"}, {"question_id": 465, "answer_sql": "SELECT * FROM set_translations WHERE setCode = 'Ancestor''s Chosen' AND language = 'Korean';"}, {"question_id": 466, "answer_sql": "SELECT COUNT(*) AS NumberOfCards FROM cards JOIN set_translations ON cards.uuid = set_translations.uuid WHERE set_translations.translation = 'Hauptset Zehnte Edition' AND cards.artist = 'Adam Rex';"}, {"question_id": 467, "answer_sql": "SELECT baseSetSize FROM sets WHERE name = 'Hauptset Zehnte Edition';"}, {"question_id": 468, "answer_sql": "SELECT translation FROM set_translations WHERE setCode = 'Eighth Edition' AND language = 'Simplified Chinese';"}, {"question_id": 469, "answer_sql": "SELECT DISTINCT cards.name FROM cards JOIN sets ON cards.mtgoId = sets.mtgoCode WHERE cards.name = 'Angel of Mercy' AND sets.isOnlineOnly = 1;"}, {"question_id": 470, "answer_sql": "SELECT releaseDate FROM sets WHERE name = 'Ancestor''s Chosen';"}, {"question_id": 471, "answer_sql": "SELECT type FROM sets WHERE code = 'Hauptset Zehnte Edition';"}, {"question_id": 472, "answer_sql": "SELECT COUNT(*) AS ItalianTranslatedSets FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE sets.block = 'Ice Age' AND set_translations.language = 'Italian';"}, {"question_id": 473, "answer_sql": "SELECT DISTINCT s.name FROM cards c JOIN sets s ON c.setCode = s.code WHERE c.name = 'Adarkar Valkyrie' AND s.isForeignOnly = 1;"}, {"question_id": 474, "answer_sql": "SELECT COUNT(*) AS NumberOfSets FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.language = 'Italian' AND set_translations.translation IS NOT NULL AND sets.baseSetSize < 10;"}, {"question_id": 475, "answer_sql": "SELECT COUNT(*) AS NumberOfCards FROM cards JOIN sets ON cards.setCode = sets.code WHERE sets.name = 'Coldsnap' AND cards.borderColor = 'black';"}, {"question_id": 476, "answer_sql": "SELECT name FROM cards WHERE setCode = 'Coldsnap' ORDER BY convertedManaCost DESC LIMIT 1;"}, {"question_id": 477, "answer_sql": "SELECT DISTINCT c.name AS artist FROM cards c JOIN sets s ON c.multiverseid = s.multiverseid WHERE s.name = 'Coldsnap' AND c.artist IN ('Jeremy Jarvis', 'Aaron Miller', 'Chippy');"}, {"question_id": 478, "answer_sql": "SELECT name, number FROM cards WHERE setCode = 'Coldsnap' AND number = 4;"}, {"question_id": 479, "answer_sql": "SELECT COUNT(*) AS UnknownPowerCount FROM cards T1 JOIN sets S ON T1.setCode = S.code WHERE S.name = 'Coldsnap' AND T1.convertedManaCost > 5 AND (T1.power = '*' OR T1.power IS NULL);"}, {"question_id": 480, "answer_sql": "SELECT text FROM foreign_data WHERE language = 'Italian' AND name = 'Ancestor''s Chosen';"}, {"question_id": 481, "answer_sql": "SELECT DISTINCT language FROM set_translations JOIN cards ON set_translations.setCode = cards.scryfallId WHERE cards.name = 'Ancestor''s Chosen' AND cards.flavorText IS NOT NULL;"}, {"question_id": 482, "answer_sql": "SELECT type FROM cards JOIN set_translations ON cards.uuid = set_translations.uuid WHERE name = 'Ancestor''s Chosen' AND language = 'German';"}, {"question_id": 483, "answer_sql": "SELECT r.text FROM rulings r JOIN cards c ON c.uuid = r.uuid JOIN set_translations st ON st.setCode = c.setCode AND st.language = 'Italian' WHERE c.setCode = 'Coldsnap';"}, {"question_id": 484, "answer_sql": "SELECT c.name, c.convertedManaCost FROM cards c JOIN set_translations st ON c.multiverseid = st.multiverseid JOIN sets s ON st.setCode = s.code WHERE s.name = 'Coldsnap' AND st.language = 'Italian' ORDER BY c.convertedManaCost DESC LIMIT 1;"}, {"question_id": 485, "answer_sql": "SELECT date FROM rulings WHERE uuid = (SELECT uuid FROM cards WHERE name = 'Reminisce');"}, {"question_id": 486, "answer_sql": "SELECT (SUM(convertedManaCost = 7) * 100.0 / COUNT(*)) AS percentage FROM cards JOIN sets ON cards.setCode = sets.code WHERE sets.name = 'Coldsnap';"}, {"question_id": 487, "answer_sql": "SELECT ROUND( (SUM(CASE WHEN cardKingdomFoilId = cardKingdomId THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) , 2) AS percentage_of_incredibly_powerful_cards FROM cards JOIN sets ON cards.setCode = sets.code WHERE sets.name = 'Coldsnap';"}, {"question_id": 488, "answer_sql": "SELECT code FROM sets WHERE releaseDate = '2017-07-14';"}, {"question_id": 489, "answer_sql": "SELECT keyruneCode FROM sets WHERE code = 'PKHC';"}, {"question_id": 490, "answer_sql": "SELECT mcmId FROM sets WHERE code = 'SS2';"}, {"question_id": 491, "answer_sql": "SELECT mcmName FROM sets JOIN foreign_data ON sets.code = foreign_data.setCode WHERE releaseDate = '2017-06-09';"}, {"question_id": 492, "answer_sql": "SELECT type FROM sets WHERE name = 'From the Vault: Lore';"}, {"question_id": 493, "answer_sql": "SELECT parentCode FROM sets WHERE name = 'Commander 2014 Oversized';"}, {"question_id": 494, "answer_sql": "SELECT c.name, r.text FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid JOIN rulings r ON c.uuid = r.uuid WHERE c.artist = 'Jim Pavelec' AND fd.hasContentWarning = 1;"}, {"question_id": 495, "answer_sql": "SELECT sets.releaseDate FROM cards JOIN sets ON cards.setKingdomId = sets.code WHERE cards.name = 'Evacuation';"}, {"question_id": 496, "answer_sql": "SELECT baseSetSize FROM sets WHERE name = 'Rinascita di Alara';"}, {"question_id": 497, "answer_sql": "SELECT type FROM sets WHERE code = 'Huiti\u00e8me \u00e9dition';"}, {"question_id": 498, "answer_sql": "SELECT set_translations.translation FROM set_translations JOIN cards ON set_translations.setCode = cards.setCode JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'French' AND cards.name = 'Tendo Ice Bridge';"}, {"question_id": 499, "answer_sql": "SELECT COUNT(*) AS NumberOfTranslations FROM set_translations WHERE setCode = 'Salvat 2011';"}, {"question_id": 500, "answer_sql": "SELECT set_translations.translation FROM cards JOIN set_translations ON cards.multiverseid = set_translations.setCode WHERE cards.name = 'Fellwar Stone' AND set_translations.language = 'Japanese';"}, {"question_id": 501, "answer_sql": "SELECT name FROM cards JOIN sets ON cards.setCode = sets.code WHERE sets.name = 'Journey into Nyx Hero''s Path' ORDER BY faceConvertedManaCost DESC LIMIT 1;"}, {"question_id": 502, "answer_sql": "SELECT releaseDate FROM sets WHERE name = 'Ola de fr\u00edo';"}, {"question_id": 503, "answer_sql": "SELECT type FROM sets JOIN cards ON sets.code = cards.scryfallId WHERE cards.name = 'Samite Pilgrim';"}, {"question_id": 504, "answer_sql": "SELECT COUNT(*) AS NumberOfCards FROM cards JOIN sets ON cards.multiverseid = sets.multiverseid WHERE sets.name = 'World Championship Decks 2004' AND cards.convertedManaCost = '3';"}, {"question_id": 505, "answer_sql": "SELECT text FROM set_translations WHERE language = 'Chinese Simplified' AND setCode = 'Mirrodin';"}, {"question_id": 506, "answer_sql": "SELECT (SUM(CASE WHEN isNonFoilOnly = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS Percentage of Japanese Non-Foil Cards FROM cards JOIN set_translations ON cards.uuid = set_translations.uuid WHERE set_translations.language = 'Japanese' AND set_translations.isNonFoilOnly = 1;"}, {"question_id": 507, "answer_sql": "SELECT (SUM(CASE WHEN isOnlineOnly = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS percentage_online_only FROM cards JOIN set_translations ON cards.uuid = set_translations.setCode WHERE set_translations.language = 'Portuguese (Brazil)'"}, {"question_id": 508, "answer_sql": "SELECT DISTINCT availability FROM cards WHERE artist = 'Aleksi Briclot' AND isTextless = 1;"}, {"question_id": 509, "answer_sql": "SELECT id FROM sets ORDER BY baseSetSize DESC LIMIT 1;"}, {"question_id": 510, "answer_sql": "SELECT artist FROM cards WHERE side IS NULL ORDER BY convertedManaCost DESC LIMIT 1;"}, {"question_id": 511, "answer_sql": "SELECT MAX(frameEffects) AS MostCommonFrameEffects FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL;"}, {"question_id": 512, "answer_sql": "SELECT COUNT(*) AS UnknownPowerCardsInDuelDeckA FROM cards WHERE power IS NULL OR power = '*' AND hasFoil = 0 AND duelDeck = 'a';"}, {"question_id": 513, "answer_sql": "SELECT sets.id FROM sets JOIN set_translations ON set_translations.setCode = sets.code WHERE sets.type = 'commander' GROUP BY sets.id ORDER BY MAX(sets.totalSetSize) DESC LIMIT 1;"}, {"question_id": 514, "answer_sql": "SELECT name, manaCost FROM cards WHERE format = 'duel' ORDER BY CAST(SUBSTR(manaCost, 2) AS REAL) DESC LIMIT 10;"}, {"question_id": 515, "answer_sql": "SELECT originalReleaseDate, format FROM cards JOIN legalities ON cards.uuid = legalities.uuid JOIN sets ON cards.setCode = sets.code WHERE rarity = 'mythic' AND status = 'legal' ORDER BY originalReleaseDate ASC LIMIT 1;"}, {"question_id": 516, "answer_sql": "SELECT COUNT(*) AS NumberOfCards FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE artist = 'Volkan Baga' AND language = 'French';"}, {"question_id": 517, "answer_sql": "SELECT COUNT(*) AS rare_enchantment_count FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.rarity = 'rare' AND cards.types LIKE '%Enchantment%' AND cards.name = 'Abundance' AND legalities.status = 'Legal';"}, {"question_id": 518, "answer_sql": "SELECT format.text AS play_format, card.name AS card_name FROM legalities JOIN cards ON legalities.uuid = cards.uuid JOIN sets ON cards.setCode = sets.code WHERE legalities.status = 'banned' GROUP BY play_format ORDER BY COUNT(*) DESC LIMIT 1;"}, {"question_id": 519, "answer_sql": "SELECT language FROM set_translations WHERE setCode = 'Battlebond';"}, {"question_id": 520, "answer_sql": "SELECT format, COUNT(*) AS num_cards FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid GROUP BY format, foreign_data.uuid ORDER BY num_cards ASC LIMIT 1;"}, {"question_id": 521, "answer_sql": "SELECT status FROM cards c JOIN legalities l ON c.uuid = l.uuid JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.frameVersion = '1997' AND fd.artist = 'D. Alexander Gregory' AND l.format = 'legacy' AND l.status = 'sensitive content' AND l.status = 'Wizards of the Coast';"}, {"question_id": 522, "answer_sql": "SELECT name, legalities.status FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE edhrecRank = 1 AND status = 'banned';"}, {"question_id": 523, "answer_sql": "SELECT AVG(totalSetSize) AS average_annual_sets, language FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE releaseDate BETWEEN '2012-01-01' AND '2015-12-31' GROUP BY language ORDER BY COUNT(language) DESC LIMIT 1;"}, {"question_id": 524, "answer_sql": "SELECT DISTINCT artist FROM cards JOIN set_translations ON cards.uuid = set_translations.uuid WHERE cards.borderColor = 'black' AND set_translations.availability = 'arena';"}, {"question_id": 525, "answer_sql": "SELECT c.uuid FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE l.format = 'oldschool' AND (l.status = 'restricted' OR l.status = 'banned');"}, {"question_id": 526, "answer_sql": "SELECT COUNT(*) AS paper_only_count FROM cards WHERE artist = 'Matthew D. Wilson' AND availability = 'paper';"}, {"question_id": 527, "answer_sql": "SELECT r.text, r.date FROM rulings r JOIN cards c ON r.uuid = c.uuid WHERE c.artist = 'Kev Walker' ORDER BY r.date DESC;"}, {"question_id": 528, "answer_sql": "SELECT c.name, l.format FROM cards c JOIN sets s ON c.multiverseid = s.multiverseid JOIN set_translations st ON s.code = st.setCode JOIN legalities l ON c.multiverseid = l.multiverseid WHERE s.name = 'Hour of Devastation' AND l.status = 'legal';"}, {"question_id": 529, "answer_sql": "SELECT s.name FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.language NOT LIKE '%Japanese%' AND st.language = 'Korean' GROUP BY s.name;"}, {"question_id": 530, "answer_sql": "SELECT DISTINCT c.name, c.frameVersion FROM cards c JOIN schools_admins sa ON c.artist = 'Allen Williams' JOIN legalities l ON c.uuid = l.uuid WHERE l.status = 'banned';"}, {"question_id": 531, "answer_sql": "SELECT DisplayName, Reputation FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') ORDER BY Reputation DESC LIMIT 1;"}, {"question_id": 532, "answer_sql": "SELECT DisplayName FROM users WHERE strftime('%Y', CreationDate) = '2014';"}, {"question_id": 533, "answer_sql": "SELECT COUNT(*) AS NumberOfUsers FROM users WHERE LastAccessDate > '2014-09-01 00:00:00';"}, {"question_id": 534, "answer_sql": "SELECT DisplayName FROM users WHERE Id = (SELECT UserId FROM users ORDER BY Views DESC LIMIT 1);"}, {"question_id": 535, "answer_sql": "SELECT COUNT(*) AS UsersWithMoreThanOneDownvote FROM users WHERE UpVotes > 100 AND DownVotes > 1;"}, {"question_id": 536, "answer_sql": "SELECT COUNT(*) AS UserCount FROM users WHERE Views > 10 AND YEAR(CreationDate) > 2013;"}, {"question_id": 537, "answer_sql": "SELECT COUNT(*) AS OwnedPostsCount FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie');"}, {"question_id": 538, "answer_sql": "SELECT Title FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie');"}, {"question_id": 539, "answer_sql": "SELECT DisplayName FROM users WHERE Id = (SELECT OwnerUserId FROM posts WHERE Title = 'Eliciting priors from experts');"}, {"question_id": 540, "answer_sql": "SELECT Title FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie') ORDER BY ViewCount DESC LIMIT 1;"}, {"question_id": 541, "answer_sql": "SELECT DisplayName FROM users WHERE Id = ( SELECT OwnerUserId FROM posts ORDER BY FavoriteCount DESC LIMIT 1 );"}, {"question_id": 542, "answer_sql": "SELECT SUM(CommentCount) AS TotalComments FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'csgillespie';"}, {"question_id": 543, "answer_sql": "SELECT COUNT(*) AS AnswerCount FROM answers WHERE PostId = ( SELECT Id FROM posts WHERE OwnerUserId = ( SELECT Id FROM users WHERE DisplayName = 'csgillespie' ) ORDER BY AnswerCount DESC LIMIT 1 );"}, {"question_id": 544, "answer_sql": "SELECT DisplayName FROM users WHERE Id = (SELECT LastEditorUserId FROM posts WHERE Title = 'Examples for teaching: Correlation does not mean causation');"}, {"question_id": 545, "answer_sql": "SELECT COUNT(*) AS NumberOfRootPosts FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie') AND ParentId IS NULL;"}, {"question_id": 546, "answer_sql": "SELECT DISTINCT u.DisplayName FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE p.ClosedDate IS NOT NULL;"}, {"question_id": 547, "answer_sql": "SELECT COUNT(*) AS NumberOfPosts FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.Age > 65 AND posts.Score >= 20;"}, {"question_id": 548, "answer_sql": "SELECT Location FROM users WHERE Id = ( SELECT OwnerUserId FROM posts WHERE Title = 'Eliciting priors from experts' );"}, {"question_id": 549, "answer_sql": "SELECT Body FROM posts JOIN tags ON posts.Id = tags.ExcerptPostId WHERE tags.TagName = 'bayesian';"}, {"question_id": 550, "answer_sql": "SELECT p.Body FROM posts p JOIN tags t ON p.Id = t.ExcerptPostId WHERE t.Count = (SELECT MAX(Count) FROM tags);"}, {"question_id": 551, "answer_sql": "SELECT COUNT(*) AS BadgeCount FROM badges JOIN users ON badges.UserId = users.Id WHERE users.DisplayName = 'csgillespie';"}, {"question_id": 552, "answer_sql": "SELECT Name FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie');"}, {"question_id": 553, "answer_sql": "SELECT COUNT(*) AS BadgesCount FROM badges JOIN users ON badges.UserId = users.Id WHERE users.DisplayName = 'csgillespie' AND YEAR(badges.Date) = 2011;"}, {"question_id": 554, "answer_sql": "SELECT DisplayName FROM users WHERE Id = ( SELECT UserId FROM badges GROUP BY UserId ORDER BY COUNT(Id) DESC LIMIT 1 );"}, {"question_id": 555, "answer_sql": "SELECT AVG(p.Score) AS AverageScore FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'csgillespie';"}, {"question_id": 556, "answer_sql": "SELECT AVG(badge_count) AS average_badges FROM ( SELECT u.Id, COUNT(b.Id) AS badge_count FROM users u JOIN badges b ON u.Id = b.UserId WHERE u.Views > 200 GROUP BY u.Id ) AS subquery;"}, {"question_id": 557, "answer_sql": "SELECT (COUNT(DISTINCT p.Id) * 100.0 / COUNT(DISTINCT p.Id)) AS percentage FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.Score > 20 AND u.Age > 65;"}, {"question_id": 558, "answer_sql": "SELECT COUNT(*) AS vote_count FROM votes WHERE UserId = 58 AND CreationDate = '2010-07-19';"}, {"question_id": 559, "answer_sql": "SELECT CreationDate FROM votes GROUP BY CreationDate ORDER BY COUNT(Id) DESC LIMIT 1;"}, {"question_id": 560, "answer_sql": "SELECT COUNT(*) AS NumberOfRevivalBadges FROM badges WHERE Name = 'Revival';"}, {"question_id": 561, "answer_sql": "SELECT posts.Title FROM posts JOIN comments ON posts.Id = comments.PostId WHERE comments.Score = (SELECT MAX(Score) FROM comments)"}, {"question_id": 562, "answer_sql": "SELECT COUNT(*) AS CommentCount FROM comments WHERE PostId = ( SELECT Id FROM posts WHERE ViewCount = 1910 );"}, {"question_id": 563, "answer_sql": "SELECT COUNT(*) AS FavoriteCount FROM votes WHERE UserId = 3025 AND VoteTypeId = 'Favorite';"}, {"question_id": 564, "answer_sql": "SELECT Text FROM comments WHERE PostId = (SELECT Id FROM posts WHERE ParentId = 107829 AND CommentCount = '1') LIMIT 1;"}, {"question_id": 565, "answer_sql": "SELECT * FROM comments WHERE UserId = 23853 AND CreationDate = '2013-07-12 09:08:18.0';"}, {"question_id": 566, "answer_sql": "SELECT Reputation FROM users WHERE Id = (SELECT OwnerUserId FROM posts WHERE Id = 65041);"}, {"question_id": 567, "answer_sql": "SELECT COUNT(*) AS OwnedPostsCount FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'Tiago Pasqualini';"}, {"question_id": 568, "answer_sql": "SELECT DisplayName FROM users WHERE Id = (SELECT UserId FROM votes WHERE Id = 6347);"}, {"question_id": 569, "answer_sql": "SELECT COUNT(*) AS NumberOfVotes FROM votes JOIN posts ON votes.PostId = posts.Id WHERE posts.Title LIKE '%data visualization%';"}, {"question_id": 570, "answer_sql": "SELECT Name FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'DatEpicCoderGuyWhoPrograms');"}, {"question_id": 571, "answer_sql": "SELECT COUNT(*) / (SELECT COUNT(*) FROM votes WHERE UserId = 24) AS post_to_vote_ratio FROM posts WHERE OwnerUserId = 24;"}, {"question_id": 572, "answer_sql": "SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer';"}, {"question_id": 573, "answer_sql": "SELECT c.Id, c.Score, c.Text FROM comments c WHERE c.Score = 17;"}, {"question_id": 574, "answer_sql": "SELECT DisplayName FROM users WHERE WebsiteUrl = 'http://stackoverflow.com';"}, {"question_id": 575, "answer_sql": "SELECT Name FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'SilentGhost');"}, {"question_id": 576, "answer_sql": "SELECT u.DisplayName FROM comments c JOIN users u ON c.UserId = u.Id WHERE c.Text = 'thank you user93!'"}, {"question_id": 577, "answer_sql": "SELECT c.Id, c.Score, c.Text, c.CreationDate, u.DisplayName FROM comments c JOIN users u ON c.UserId = u.Id WHERE u.DisplayName = 'A Lion';"}, {"question_id": 578, "answer_sql": "SELECT u.DisplayName, u.Reputation FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.Title = 'Understanding what Dassault iSight is doing?';"}, {"question_id": 579, "answer_sql": "SELECT c.Id, c.Score, c.Text, c.CreationDate, u.DisplayName AS CommenterDisplayName FROM comments c JOIN posts p ON c.PostId = p.Id JOIN users u ON c.UserId = u.Id WHERE p.Title = 'How does gentle boosting differ from AdaBoost?' ORDER BY c.CreationDate DESC;"}, {"question_id": 580, "answer_sql": "SELECT DisplayName FROM users JOIN badges ON users.Id = badges.UserId WHERE badges.Name = 'Necromancer' LIMIT 10;"}, {"question_id": 581, "answer_sql": "SELECT u.DisplayName FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.Title = 'Open source tools for visualizing multi-dimensional data';"}, {"question_id": 582, "answer_sql": "SELECT Title FROM posts WHERE LastEditorUserId = (SELECT Id FROM users WHERE DisplayName = 'Vebjorn Ljosa');"}, {"question_id": 583, "answer_sql": "SELECT p.Score, u.WebsiteUrl FROM posts p JOIN users u ON p.LastEditorUserId = u.Id WHERE u.DisplayName = 'Yevgeny';"}, {"question_id": 584, "answer_sql": "SELECT c.Id, c.Score, c.Text, c.CreationDate, u.DisplayName FROM comments c JOIN posts p ON c.PostId = p.Id JOIN users u ON c.UserId = u.Id WHERE p.Title = 'Why square the difference instead of taking the absolute value in standard deviation?' AND p.Id IN ( SELECT DISTINCT ph.PostId FROM postHistory ph WHERE ph.UserId IN ( SELECT DISTINCT ph2.UserId FROM postHistory ph2 WHERE ph2.PostId = p.Id AND ph2.Text LIKE '%edited%' ) );"}, {"question_id": 585, "answer_sql": "SELECT SUM(BountyAmount) AS TotalBountyAmount FROM votes JOIN posts ON votes.PostId = posts.Id WHERE posts.Title LIKE '%data%'"}, {"question_id": 586, "answer_sql": "SELECT DisplayName FROM users JOIN votes ON users.Id = votes.UserId JOIN posts ON votes.PostId = posts.Id WHERE BountyAmount = 50 AND Title LIKE '%variance%';"}, {"question_id": 587, "answer_sql": "SELECT p.Title, p.Body AS Comments, p.Score FROM posts p JOIN tags t ON p.Id = t.ExcerptPostId WHERE t.TagName = 'humor' ORDER BY p.Score DESC;"}, {"question_id": 588, "answer_sql": "SELECT COUNT(*) AS TotalComments FROM comments WHERE UserId = 13;"}, {"question_id": 589, "answer_sql": "SELECT Id, DisplayName, Reputation FROM users ORDER BY Reputation DESC LIMIT 1;"}, {"question_id": 590, "answer_sql": "SELECT UserId, MIN(Views) AS LowestViews FROM users GROUP BY UserId ORDER BY LowestViews ASC LIMIT 1;"}, {"question_id": 591, "answer_sql": "SELECT COUNT(DISTINCT UserId) AS SupporterCount FROM badges WHERE Name = 'Supporter' AND YEAR(Date) = 2011;"}, {"question_id": 592, "answer_sql": "SELECT COUNT(DISTINCT UserId) AS NumberOfUsersWithMoreThan5Badges FROM badges GROUP BY UserId HAVING COUNT(Name) > 5;"}, {"question_id": 593, "answer_sql": "SELECT COUNT(DISTINCT u.Id) AS NumberOfUsers FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Name IN ('Supporter', 'Teachers') AND u.Location = 'New York';"}, {"question_id": 594, "answer_sql": "SELECT u.DisplayName, u.Reputation FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE p.Id = 1;"}, {"question_id": 595, "answer_sql": "SELECT u.Id, u.DisplayName FROM users u JOIN ( SELECT ph.UserId FROM postHistory ph GROUP BY ph.PostId HAVING COUNT(ph.Id) = 1 ) AS single_post_history ON u.Id = single_post_history.UserId JOIN ( SELECT p.Id FROM posts p WHERE p.Views >= 1000 ) AS popular_posts ON single_post_history.PostId = popular_posts.Id GROUP BY u.Id HAVING COUNT(u.Id) = 1;"}, {"question_id": 596, "answer_sql": "SELECT u.Id, u.DisplayName, b.Name AS Badge FROM users u JOIN ( SELECT UserId, COUNT(Id) AS CommentCount FROM comments GROUP BY UserId ORDER BY CommentCount DESC LIMIT 1 ) c ON u.Id = c.UserId JOIN badges b ON u.Id = b.UserId"}, {"question_id": 597, "answer_sql": "SELECT COUNT(DISTINCT u.Id) AS NumberOfUsers FROM users u JOIN badges b ON u.Id = b.UserId WHERE u.Location = 'India' AND b.Name = 'Teacher';"}, {"question_id": 598, "answer_sql": "SELECT ROUND(((COUNT(DISTINCT CASE WHEN YEAR(Date) = 2010 THEN Name END) - COUNT(DISTINCT CASE WHEN YEAR(Date) = 2011 THEN Name END)) * 100.0 / COUNT(DISTINCT Name), 2) AS PercentageDifference FROM badges;"}, {"question_id": 599, "answer_sql": "SELECT DISTINCT ph.PostHistoryTypeId, COUNT(DISTINCT ch.UserId) AS UniqueCommenters FROM postHistory ph JOIN comments ch ON ph.PostId = ch.PostId WHERE ph.PostId = 3720 GROUP BY ph.PostHistoryTypeId;"}, {"question_id": 600, "answer_sql": "SELECT p.Id, p.Title, p.ViewCount FROM posts p JOIN postLinks pl ON p.Id = pl.RelatedPostId WHERE pl.PostId = 61217;"}, {"question_id": 601, "answer_sql": "SELECT p.Score, pl.LinkTypeId FROM posts p JOIN postLinks pl ON p.Id = pl.PostId WHERE p.Id = 395;"}, {"question_id": 602, "answer_sql": "SELECT p.Id AS PostId, u.Id AS UserId FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.Score > 60;"}, {"question_id": 603, "answer_sql": "SELECT SUM(FavoriteCount) AS TotalFavorites FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.Id = 686 AND strftime('%Y', posts.CreationDate) = '2011';"}, {"question_id": 604, "answer_sql": "SELECT AVG(u.Age) AS average_age, AVG(v.UpVotes) AS average_up_votes FROM users u JOIN ( SELECT UserId, COUNT(*) AS post_count, AVG(UpVotes) AS avg_up_votes FROM posts GROUP BY UserId HAVING COUNT(*) > 10 ) p ON u.Id = p.UserId JOIN votes v ON u.Id = v.UserId GROUP BY u.Id;"}, {"question_id": 605, "answer_sql": "SELECT COUNT(*) AS AnnouncerBadgeCount FROM badges WHERE Name = 'Announcer';"}, {"question_id": 606, "answer_sql": "SELECT Name FROM badges WHERE Date = '2010-07-19 19:39:08'"}, {"question_id": 607, "answer_sql": "SELECT COUNT(*) AS PositiveCommentCount FROM comments WHERE Score > 60;"}, {"question_id": 608, "answer_sql": "SELECT Text FROM comments WHERE CreationDate = '2010-07-19 19:16:14.0';"}, {"question_id": 609, "answer_sql": "SELECT COUNT(*) AS NumberOfPostsWithScore10 FROM posts WHERE Score = 10;"}, {"question_id": 610, "answer_sql": "SELECT Name FROM badges JOIN users ON badges.UserId = users.Id WHERE Reputation = (SELECT MAX(Reputation) FROM users);"}, {"question_id": 611, "answer_sql": "SELECT u.Reputation FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Date = '2010-07-19 19:39:08.0';"}, {"question_id": 612, "answer_sql": "SELECT Name FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'Pierre');"}, {"question_id": 613, "answer_sql": "SELECT p.CreationDate, u.DisplayName FROM users u JOIN badges b ON u.Id = b.UserId JOIN posts p ON u.Id = p.OwnerUserId WHERE u.Location = 'Rochester, NY' GROUP BY u.Id, p.CreationDate ORDER BY p.CreationDate;"}, {"question_id": 614, "answer_sql": "SELECT (COUNT(DISTINCT u.Id) * 100.0 / (SELECT COUNT(*) FROM users)) AS TeacherBadgePercentage FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Name = 'Teacher';"}, {"question_id": 615, "answer_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Organizer')) AS percentage_teenagers FROM users WHERE Id IN (SELECT UserId FROM badges WHERE Name = 'Organizer') AND Age BETWEEN 13 AND 18;"}, {"question_id": 616, "answer_sql": "SELECT AVG(Score) AS AverageScore FROM comments WHERE PostId = ( SELECT Id FROM posts WHERE CreationDate = '2010-07-19 19:19:56.0' );"}, {"question_id": 617, "answer_sql": "SELECT c.Text FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.CreationDate = '2010-07-19 19:37:33.0' LIMIT 1;"}, {"question_id": 618, "answer_sql": "SELECT u.Age FROM users u JOIN badges b ON u.Id = b.UserId WHERE u.Location = 'Vienna, Austria';"}, {"question_id": 619, "answer_sql": "SELECT COUNT(*) AS NumberOfAdultSupporters FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Name = 'Supporter' AND u.Age BETWEEN 19 AND 65;"}, {"question_id": 620, "answer_sql": "SELECT COUNT(*) AS NumberOfViews FROM users JOIN badges ON users.Id = badges.UserId WHERE badges.Date = '2010-07-19 19:39:08.0';"}, {"question_id": 621, "answer_sql": "SELECT Name FROM badges JOIN users ON badges.UserId = users.Id WHERE Reputation = (SELECT MIN(Reputation) FROM users);"}, {"question_id": 622, "answer_sql": "SELECT Name FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'Sharpie');"}, {"question_id": 623, "answer_sql": "SELECT COUNT(*) AS ElderSupporters FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Name = 'Supporter' AND u.Age > 65;"}, {"question_id": 624, "answer_sql": "SELECT DisplayName FROM users WHERE Id = 30;"}, {"question_id": 625, "answer_sql": "SELECT COUNT(*) AS NumberOfUsersFromNewYork FROM users WHERE Location = 'New York';"}, {"question_id": 626, "answer_sql": "SELECT COUNT(*) AS TotalVotes2010 FROM votes WHERE YEAR(CreationDate) = 2010;"}, {"question_id": 627, "answer_sql": "SELECT COUNT(*) AS AdultUserCount FROM users WHERE Age BETWEEN 19 AND 65;"}, {"question_id": 628, "answer_sql": "SELECT DisplayName, Views FROM users WHERE Views = (SELECT MAX(Views) FROM users);"}, {"question_id": 629, "answer_sql": "SELECT CAST(COUNT(*) AS FLOAT) / NULLIF(COUNT(*), 0) AS ratio FROM votes WHERE YEAR(CreationDate) IN (2010, 2011);"}, {"question_id": 630, "answer_sql": "SELECT t.TagName FROM tags t JOIN posts p ON t.ExcerptPostId = p.Id JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'John Stauffer';"}, {"question_id": 631, "answer_sql": "SELECT COUNT(*) AS NumberOfPosts FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'Daniel Vassallo';"}, {"question_id": 632, "answer_sql": "SELECT COUNT(*) AS NumberOfVotes FROM votes JOIN users ON votes.UserId = users.Id WHERE users.DisplayName = 'Harlan';"}, {"question_id": 633, "answer_sql": "SELECT posts.Id FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'slashnick' ORDER BY posts.AnswerCount DESC LIMIT 1;"}, {"question_id": 634, "answer_sql": "SELECT DisplayName, MAX(ViewCount) AS HighestViewCount FROM posts WHERE (DisplayName = 'Harvey Motulsky' OR DisplayName = 'Noah Snyder') GROUP BY DisplayName ORDER BY HighestViewCount DESC LIMIT 1;"}, {"question_id": 635, "answer_sql": "SELECT COUNT(*) AS NumberOfPosts FROM posts JOIN votes ON posts.Id = votes.PostId JOIN users ON votes.UserId = users.Id WHERE users.DisplayName = 'Matt Parker' AND votes.PostId > 4;"}, {"question_id": 636, "answer_sql": "SELECT COUNT(*) AS NegativeCommentsCount FROM comments JOIN users ON comments.UserId = users.Id WHERE users.DisplayName = 'Neil McGuigan' AND comments.Score < 60;"}, {"question_id": 637, "answer_sql": "SELECT t.TagName FROM tags t JOIN posts p ON t.ExcerptPostId = p.Id JOIN comments c ON p.Id = c.PostId JOIN users u ON u.Id = p.OwnerUserId WHERE u.DisplayName = 'Mark Meckes' AND c.Id IS NULL;"}, {"question_id": 638, "answer_sql": "SELECT DisplayName FROM users JOIN badges ON users.Id = badges.UserId WHERE badges.Name = 'Organizer';"}, {"question_id": 639, "answer_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM posts WHERE DisplayName = 'Community')) AS percentage FROM posts JOIN tags ON posts.Id = tags.ExcerptPostId WHERE tags.TagName = 'r';"}, {"question_id": 640, "answer_sql": "SELECT (SELECT SUM(ViewCount) FROM posts WHERE OwnerDisplayName = 'Mornington') - (SELECT SUM(ViewCount) FROM posts WHERE OwnerDisplayName = 'Amos') AS ViewCountDifference;"}, {"question_id": 641, "answer_sql": "SELECT COUNT(DISTINCT UserId) AS NumberOfUsersWithCommentatorBadge FROM badges WHERE Name = 'commentator' AND YEAR(Date) = 2014;"}, {"question_id": 642, "answer_sql": "SELECT COUNT(*) AS NumberOfPosts FROM posts WHERE strftime('%Y-%m-%d', CreationDate) = '2010-07-21';"}, {"question_id": 643, "answer_sql": "SELECT DisplayName, Age FROM users WHERE Id = ( SELECT UserId FROM votes GROUP BY UserId ORDER BY SUM(Views) DESC LIMIT 1 );"}, {"question_id": 644, "answer_sql": "SELECT posts.LastEditDate, users.Id AS LastEditorUserId FROM posts JOIN users ON posts.LastEditorUserId = users.Id WHERE posts.Title = 'Detecting a given face in a database of facial images';"}, {"question_id": 645, "answer_sql": "SELECT COUNT(*) AS NegativeCommentCount FROM comments WHERE Score < 60 AND UserId = 13;"}, {"question_id": 646, "answer_sql": "SELECT p.Title, u.DisplayName FROM posts p JOIN comments c ON p.Id = c.PostId JOIN users u ON c.UserId = u.Id WHERE c.Score > 60 GROUP BY p.Id, u.UserId ORDER BY p.Score DESC, u.DisplayName;"}, {"question_id": 647, "answer_sql": "SELECT Name FROM badges WHERE YEAR(Date) = 2011 AND UserId IN ( SELECT Id FROM users WHERE Location = 'North Pole' );"}, {"question_id": 648, "answer_sql": "SELECT DisplayName, WebsiteUrl FROM users WHERE Id IN ( SELECT UserId FROM posts WHERE FavoriteCount > 150 );"}, {"question_id": 649, "answer_sql": "SELECT p.Title, COUNT(ph.Id) AS PostHistoryCount, MAX(ph.LastEditDate) AS LastEditDate FROM posts p JOIN postHistory ph ON p.Id = ph.PostId WHERE p.Title = 'What is the best introductory Bayesian statistics textbook?' GROUP BY p.Id;"}, {"question_id": 650, "answer_sql": "SELECT u.LastAccessDate, u.Location FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Name = 'Outliers';"}, {"question_id": 651, "answer_sql": "SELECT p.Title FROM posts p JOIN postLinks pl ON p.Id = pl.PostId JOIN posts pl2 ON pl2.Id = pl.RelatedPostId WHERE p.Title = 'How to tell if something happened in a data set which monitors a value over time';"}, {"question_id": 652, "answer_sql": "SELECT p.Id, b.Name FROM posts p JOIN users u ON p.OwnerUserId = u.Id JOIN badges b ON u.Id = b.UserId WHERE u.DisplayName = 'Samuel' AND YEAR(p.CreationDate) = 2013 AND YEAR(b.Date) = 2013;"}, {"question_id": 653, "answer_sql": "SELECT DisplayName FROM users WHERE Id = (SELECT OwnerUserId FROM posts WHERE ViewCount = (SELECT MAX(ViewCount) FROM posts));"}, {"question_id": 654, "answer_sql": "SELECT DisplayName, Location FROM users WHERE Id = ( SELECT OwnerUserId FROM posts JOIN tags ON posts.Id = tags.ExcerptPostId WHERE TagName = 'hypothesis-testing' );"}, {"question_id": 655, "answer_sql": "SELECT pl.RelatedPostId, pt.Title, pl.LinkTypeId FROM postLinks pl JOIN posts pt ON pl.RelatedPostId = pt.Id WHERE pt.Title = 'What are principal component scores?';"}, {"question_id": 656, "answer_sql": "SELECT u.DisplayName FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.ParentId IS NOT NULL AND p.Score = (SELECT MAX(Score) FROM posts WHERE ParentId = p.Id);"}, {"question_id": 657, "answer_sql": "SELECT u.DisplayName, u.WebsiteUrl FROM users u JOIN votes v ON u.Id = v.UserId WHERE v.VoteTypeId = 8 ORDER BY v.BountyAmount DESC LIMIT 1;"}, {"question_id": 658, "answer_sql": "SELECT p.Title FROM posts p ORDER BY p.ViewCount DESC LIMIT 5;"}, {"question_id": 659, "answer_sql": "SELECT COUNT(*) AS tag_count FROM tags WHERE Count BETWEEN 5000 AND 7000;"}, {"question_id": 660, "answer_sql": "SELECT UserId FROM posts WHERE FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts) LIMIT 1;"}, {"question_id": 661, "answer_sql": "SELECT Users.DisplayName, Users.Age FROM users AS Users WHERE Users.Id = ( SELECT Users.Id FROM users AS Users ORDER BY Users.Reputation DESC LIMIT 1 );"}, {"question_id": 662, "answer_sql": "SELECT COUNT(*) AS NumberOfPosts FROM posts JOIN votes ON posts.Id = votes.PostId WHERE YEAR(votes.CreationDate) = 2011 AND votes.BountyAmount = 50;"}, {"question_id": 663, "answer_sql": "SELECT Id FROM users ORDER BY Age ASC LIMIT 1;"}, {"question_id": 664, "answer_sql": "SELECT p.Score FROM posts p JOIN tags t ON p.Id = t.ExcerptPostId WHERE t.Count = (SELECT MAX(Count) FROM tags)"}, {"question_id": 665, "answer_sql": "SELECT AVG(LinkCount) AS AverageMonthlyLinks FROM ( SELECT MONTH(CreationDate) AS Month, COUNT(*) AS LinkCount FROM postLinks JOIN posts ON postLinks.PostId = posts.Id WHERE YEAR(CreationDate) = 2010 AND AnswerCount <= 2 GROUP BY MONTH(CreationDate) ) AS MonthlyLinks;"}, {"question_id": 666, "answer_sql": "SELECT p.Id FROM posts p JOIN votes v ON p.Id = v.PostId WHERE v.UserId = 1465 GROUP BY p.Id ORDER BY MAX(v.BountyAmount) DESC, p.Score DESC LIMIT 1;"}, {"question_id": 667, "answer_sql": "SELECT p.Title FROM posts p JOIN postLinks pl ON p.Id = pl.PostId WHERE pl.CreationDate = (SELECT MIN(pl2.CreationDate) FROM postLinks pl2 WHERE pl2.PostId = p.Id)"}, {"question_id": 668, "answer_sql": "SELECT DisplayName FROM users WHERE Id = ( SELECT UserId FROM badges GROUP BY UserId ORDER BY COUNT(Name) DESC LIMIT 1 );"}, {"question_id": 669, "answer_sql": "SELECT MIN(v.CreationDate) AS FirstVoteDate FROM votes v JOIN users u ON v.UserId = u.Id WHERE u.DisplayName = 'chl';"}, {"question_id": 670, "answer_sql": "SELECT CreationDate FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE Age = (SELECT MIN(Age) FROM users) GROUP BY posts.Id ORDER BY CreationDate ASC LIMIT 1;"}, {"question_id": 671, "answer_sql": "SELECT DisplayName FROM users WHERE Id = ( SELECT UserId FROM badges WHERE Name = 'Autobiographer' ORDER BY Date ASC LIMIT 1 );"}, {"question_id": 672, "answer_sql": "SELECT COUNT(*) AS NumberOfUsers FROM users JOIN posts ON users.Id = posts.OwnerUserId WHERE users.Location = 'United Kingdom' AND posts.FavoriteCount >= 4;"}, {"question_id": 673, "answer_sql": "SELECT AVG(v.PostId) AS AveragePostsVoted FROM votes v JOIN users u ON v.UserId = u.Id WHERE u.Age = (SELECT MAX(Age) FROM users);"}, {"question_id": 674, "answer_sql": "SELECT DisplayName FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users);"}, {"question_id": 675, "answer_sql": "SELECT COUNT(*) FROM users WHERE Reputation > 2000 AND Views > 1000;"}, {"question_id": 676, "answer_sql": "SELECT DisplayName FROM users WHERE Age BETWEEN 19 AND 65;"}, {"question_id": 677, "answer_sql": "SELECT COUNT(*) AS NumberOfPosts FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'Jay Stevens' AND YEAR(posts.CreationDate) = 2010;"}, {"question_id": 678, "answer_sql": "SELECT posts.Id, posts.Title FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'Harvey Motulsky' ORDER BY posts.ViewCount DESC LIMIT 1;"}, {"question_id": 679, "answer_sql": "SELECT posts.Id, posts.Title, users.DisplayName FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE posts.Score = (SELECT MAX(Score) FROM posts);"}, {"question_id": 680, "answer_sql": "SELECT AVG(Score) AS AverageScore FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'Stephen Turner';"}, {"question_id": 681, "answer_sql": "SELECT DISTINCT u.DisplayName FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE p.ViewCount > 20000 AND YEAR(p.CreationDate) = 2011;"}, {"question_id": 682, "answer_sql": "SELECT posts.Id, users.DisplayName FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE strftime('%Y', posts.CreationDate) = '2010' ORDER BY posts.FavoriteCount DESC LIMIT 1;"}, {"question_id": 683, "answer_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM posts)) AS percentage FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.Reputation > 1000 AND strftime('%Y', posts.CreationDate) = '2011';"}, {"question_id": 684, "answer_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM users WHERE Age BETWEEN 13 AND 18)) as percentage FROM users WHERE Age BETWEEN 13 AND 18;"}, {"question_id": 685, "answer_sql": "SELECT u.DisplayName, p.ViewCount FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.Title = 'Computer Game Datasets' ORDER BY p.ViewCount DESC LIMIT 1;"}, {"question_id": 686, "answer_sql": "SELECT COUNT(*) AS TotalPostsAboveAverageViews FROM posts WHERE ViewCount > (SELECT AVG(ViewCount) FROM posts);"}, {"question_id": 687, "answer_sql": "SELECT COUNT(*) AS NumberOfComments FROM comments WHERE PostId = (SELECT PostId FROM posts ORDER BY Score DESC LIMIT 1);"}, {"question_id": 688, "answer_sql": "SELECT COUNT(*) AS NumberOfPosts FROM posts WHERE ViewCount > 35000 AND CommentCount = 0;"}, {"question_id": 689, "answer_sql": "SELECT DisplayName, Location FROM users WHERE Id = ( SELECT LastEditorUserId FROM posts WHERE Id = 183 ORDER BY LastEditDate DESC LIMIT 1 );"}, {"question_id": 690, "answer_sql": "SELECT Name FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'Emmett') ORDER BY Date DESC LIMIT 1;"}, {"question_id": 691, "answer_sql": "SELECT COUNT(*) AS NumberOfAdultUsersWithOver5000Upvotes FROM users WHERE Age BETWEEN 19 AND 65 AND UpVotes > 5000;"}, {"question_id": 692, "answer_sql": "SELECT julianday(MIN(b.Date)) - julianday(u.CreationDate) AS days_to_badge FROM users u JOIN badges b ON u.Id = b.UserId WHERE u.DisplayName = 'Zolomon';"}, {"question_id": 693, "answer_sql": "SELECT COUNT(DISTINCT p.Id) AS NumberOfPosts, COUNT(DISTINCT c.Id) AS NumberOfComments FROM posts p JOIN users u ON p.OwnerUserId = u.Id LEFT JOIN comments c ON p.Id = c.PostId WHERE u.CreationDate = (SELECT MAX(CreationDate) FROM users);"}, {"question_id": 694, "answer_sql": "SELECT c.Text, u.DisplayName FROM comments c JOIN posts p ON c.PostId = p.Id JOIN users u ON c.UserId = u.Id WHERE p.Title = 'Analysing wind data with R' ORDER BY c.CreationDate DESC LIMIT 1;"}, {"question_id": 695, "answer_sql": "SELECT COUNT(DISTINCT u.Id) AS CitizenPatrolAwardedUsers FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Name = 'Citizen Patrol';"}, {"question_id": 696, "answer_sql": "SELECT COUNT(*) AS NumberOfPostsWithCareersTag FROM posts JOIN tags ON posts.Id = tags.ExcerptPostId WHERE tags.TagName = 'careers';"}, {"question_id": 697, "answer_sql": "SELECT reputation, Views FROM users WHERE DisplayName = 'Jarrod Dixon';"}, {"question_id": 698, "answer_sql": "SELECT COUNT(DISTINCT c.Id) AS CommentCount, COUNT(DISTINCT a.Id) AS AnswerCount FROM comments c JOIN posts p ON c.PostId = p.Id JOIN answers a ON p.Id = a.PostId WHERE p.Title = 'Clustering 1D data';"}, {"question_id": 699, "answer_sql": "SELECT CreationDate FROM users WHERE DisplayName = 'IrishStat';"}, {"question_id": 700, "answer_sql": "SELECT COUNT(*) AS NumberOfPostsWithBountyOver30 FROM votes WHERE BountyAmount >= 30;"}, {"question_id": 701, "answer_sql": "SELECT (COUNT(*) * 100.0 / (SELECT MAX(Reputation) FROM users)) as percentage FROM posts WHERE OwnerUserId = (SELECT Id FROM users ORDER BY Reputation DESC LIMIT 1);"}, {"question_id": 702, "answer_sql": "SELECT COUNT(*) FROM posts WHERE Score < 20;"}, {"question_id": 703, "answer_sql": "SELECT COUNT(*) FROM tags WHERE Id < 15 AND Count <= 20;"}, {"question_id": 704, "answer_sql": "SELECT t.ExcerptPostId, t.WikiPostId FROM tags t WHERE t.TagName = 'sample';"}, {"question_id": 705, "answer_sql": "SELECT u.Reputation, v.UpVotes FROM users u JOIN comments c ON u.Id = c.UserId JOIN votes v ON u.Id = v.UserId WHERE c.Text = 'fine, you win :)';"}, {"question_id": 706, "answer_sql": "SELECT c.Text FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.Title = 'How can I adapt ANOVA for binary data?' AND c.UserId IN (SELECT Id FROM users WHERE DisplayName LIKE '%linear regression%');"}, {"question_id": 707, "answer_sql": "SELECT Text, Score FROM comments WHERE PostId IN ( SELECT Id FROM posts WHERE ViewCount BETWEEN 100 AND 150 ) ORDER BY Score DESC LIMIT 1;"}, {"question_id": 708, "answer_sql": "SELECT CreationDate, Age FROM users WHERE DisplayName LIKE '%http://%'"}, {"question_id": 709, "answer_sql": "SELECT COUNT(*) AS LowViewCountPosts FROM posts WHERE ViewCount < 5 AND Id NOT IN ( SELECT PostId FROM comments WHERE Score = 0 );"}, {"question_id": 710, "answer_sql": "SELECT COUNT(*) AS NumberOfZeroScoreComments FROM comments WHERE PostId IN ( SELECT Id FROM posts WHERE CommentCount = 1 ) AND Score = 0;"}, {"question_id": 711, "answer_sql": "SELECT COUNT(DISTINCT u.Id) AS TotalUsersAge40 FROM users u JOIN comments c ON u.Id = c.UserId WHERE c.Score = 0 AND u.Age = 40;"}, {"question_id": 712, "answer_sql": "SELECT p.Id AS PostId, c.Text AS CommentText FROM posts p JOIN comments c ON p.Id = c.PostId WHERE p.Title = 'Group differences on a five point Likert item';"}, {"question_id": 713, "answer_sql": "SELECT upvotes.UpVotes FROM votes JOIN comments ON votes.PostId = comments.PostId JOIN users ON votes.UserId = users.Id WHERE comments.Text = 'R is also lazy evaluated.'"}, {"question_id": 714, "answer_sql": "SELECT c.* FROM comments c JOIN users u ON c.UserId = u.Id WHERE u.DisplayName = 'Harvey Motulsky';"}, {"question_id": 715, "answer_sql": "SELECT DISTINCT u.DisplayName FROM users u JOIN comments c ON u.Id = c.UserId WHERE c.Score BETWEEN 1 AND 5 AND c.DownVotes = 0;"}, {"question_id": 716, "answer_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM comments WHERE Score BETWEEN 5 AND 10)) AS percentage FROM comments WHERE Score BETWEEN 5 AND 10 AND UpVotes = 0;"}, {"question_id": 717, "answer_sql": "SELECT power_name FROM superpower JOIN hero_power ON superpower.id = hero_power.power_id JOIN superhero ON hero_power.hero_id = superhero.id WHERE superhero.superhero_name = '3-D Man';"}, {"question_id": 718, "answer_sql": "SELECT COUNT(*) AS NumberOfSuperheroesWithSuperStrength FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Super Strength';"}, {"question_id": 719, "answer_sql": "SELECT COUNT(*) FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Super Strength' AND superhero.height_cm > 200;"}, {"question_id": 720, "answer_sql": "SELECT superhero.full_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id GROUP BY superhero.id HAVING COUNT(hero_power.power_id) > 15;"}, {"question_id": 721, "answer_sql": "SELECT COUNT(*) FROM superhero WHERE eye_colour_id = (SELECT id FROM colour WHERE colour = 'Blue');"}, {"question_id": 722, "answer_sql": "SELECT colour.colour FROM superhero JOIN superhero_attribute ON superhero.id = superhero_attribute.hero_id JOIN attribute ON superhero_attribute.attribute_id = attribute.id JOIN colour ON superhero.skin_colour_id = colour.id WHERE superhero.superhero_name = 'Apocalypse';"}, {"question_id": 723, "answer_sql": "SELECT COUNT(*) FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Blue' AND superpower.power_name = 'Agility';"}, {"question_id": 724, "answer_sql": "SELECT superhero.superhero_name FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id AND superhero.hair_colour_id = colour.id WHERE colour.colour = 'Blue' AND colour.colour = 'Blond';"}, {"question_id": 725, "answer_sql": "SELECT COUNT(*) AS NumberOfMarvelComicsSuperheroes FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics';"}, {"question_id": 726, "answer_sql": "SELECT superhero.full_name FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' ORDER BY superhero.height_cm DESC LIMIT 1;"}, {"question_id": 727, "answer_sql": "SELECT publisher.publisher_name FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.superhero_name = 'Sauron';"}, {"question_id": 728, "answer_sql": "SELECT COUNT(*) FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' AND colour.colour = 'Blue';"}, {"question_id": 729, "answer_sql": "SELECT AVG(height_cm) AS average_height FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics';"}, {"question_id": 730, "answer_sql": "SELECT ROUND( (SELECT COUNT(*) FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' AND superpower.power_name = 'Super Strength') * 100.0 / (SELECT COUNT(*) FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics') ) AS percentage_with_super_strength;"}, {"question_id": 731, "answer_sql": "SELECT COUNT(*) FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'DC Comics');"}, {"question_id": 732, "answer_sql": "SELECT publisher.publisher_name FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id JOIN publisher ON superhero.publisher_id = publisher.id WHERE attribute.attribute_name = 'Speed' AND hero_attribute.attribute_value = ( SELECT MIN(attribute_value) FROM hero_attribute JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE superhero.id = hero_attribute.hero_id AND attribute.attribute_name = 'Speed' );"}, {"question_id": 733, "answer_sql": "SELECT COUNT(*) FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id JOIN publisher ON superhero.publisher_id = publisher.id WHERE colour.colour = 'Gold' AND publisher.publisher_name = 'Marvel Comics';"}, {"question_id": 734, "answer_sql": "SELECT publisher.publisher_name FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.superhero_name = 'Blue Beetle II';"}, {"question_id": 735, "answer_sql": "SELECT COUNT(*) FROM superhero WHERE hair_colour_id = (SELECT id FROM colour WHERE colour = 'Blond');"}, {"question_id": 736, "answer_sql": "SELECT superhero.superhero_name FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Intelligence' ORDER BY hero_attribute.attribute_value ASC LIMIT 1;"}, {"question_id": 737, "answer_sql": "SELECT race.race FROM superhero JOIN superhero_power ON superhero.id = superhero_power.hero_id JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id JOIN superpower ON hero_power.power_id = superpower.id JOIN colour ON superhero.skin_colour_id = colour.id JOIN race ON superhero.race_id = race.id WHERE superhero.superhero_name = 'Copycat';"}, {"question_id": 738, "answer_sql": "SELECT COUNT(*) FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE attribute_name = 'Durability' AND attribute_value < 50;"}, {"question_id": 739, "answer_sql": "SELECT superhero.superhero_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Death Touch';"}, {"question_id": 740, "answer_sql": "SELECT COUNT(*) FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE superhero.gender_id = (SELECT id FROM gender WHERE gender = 'Female') AND hero_attribute.attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Strength') AND hero_attribute.attribute_value = 100;"}, {"question_id": 741, "answer_sql": "SELECT superhero_name FROM superhero GROUP BY superhero_name ORDER BY COUNT(hero_power.power_id) DESC LIMIT 1;"}, {"question_id": 742, "answer_sql": "SELECT COUNT(*) AS vampire_superhero_count FROM superhero JOIN race ON superhero.race_id = race.id WHERE race.race = 'Vampire';"}, {"question_id": 743, "answer_sql": "SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM superhero) AS percentage_bad_alignment FROM superhero WHERE alignment = 'Bad' AND publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics');"}, {"question_id": 744, "answer_sql": "SELECT (SELECT COUNT(*) FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics')) - (SELECT COUNT(*) FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'DC Comics')) AS difference_in_superheroes"}, {"question_id": 745, "answer_sql": "SELECT publisher.id FROM publisher WHERE publisher.publisher_name = 'Star Trek';"}, {"question_id": 746, "answer_sql": "SELECT AVG(attribute_value) AS average_attribute_value FROM hero_attribute;"}, {"question_id": 747, "answer_sql": "SELECT COUNT(*) FROM superhero WHERE full_name IS NULL;"}, {"question_id": 748, "answer_sql": "SELECT colour.colour FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.id = 75;"}, {"question_id": 749, "answer_sql": "SELECT sp.power_name FROM superhero sh JOIN hero_power hp ON sh.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sh.superhero_name = 'Deathlok';"}, {"question_id": 750, "answer_sql": "SELECT AVG(weight_kg) AS average_weight FROM superhero JOIN gender ON superhero.gender_id = gender.id WHERE gender.id = 2;"}, {"question_id": 751, "answer_sql": "SELECT power_name FROM superpower JOIN hero_power ON superpower.id = hero_power.power_id JOIN superhero ON hero_power.hero_id = superhero.id JOIN gender ON superhero.gender_id = gender.id WHERE gender.gender = 'Male' GROUP BY power_name LIMIT 5;"}, {"question_id": 752, "answer_sql": "SELECT superhero_name FROM superhero JOIN race ON superhero.race_id = race.id WHERE race.race = 'Alien';"}, {"question_id": 753, "answer_sql": "SELECT superhero_name FROM superhero WHERE height_cm BETWEEN 170 AND 190 AND eye_colour_id IS NULL;"}, {"question_id": 754, "answer_sql": "SELECT power_name FROM superpower WHERE id = (SELECT power_id FROM hero_power WHERE hero_id = 56);"}, {"question_id": 755, "answer_sql": "SELECT superhero.full_name FROM superhero JOIN race ON superhero.race_id = race.id WHERE race.race = 'Demi-God';"}, {"question_id": 756, "answer_sql": "SELECT COUNT(*) AS NumberOfBadSuperheroes FROM superhero WHERE alignment_id = (SELECT id FROM alignment WHERE alignment = 'Bad');"}, {"question_id": 757, "answer_sql": "SELECT race.race FROM superhero JOIN race ON superhero.race_id = race.id WHERE superhero.weight_kg = 169;"}, {"question_id": 758, "answer_sql": "SELECT colour.colour FROM superhero JOIN colour ON superhero.hair_colour_id = colour.id WHERE superhero.height_cm = 185 AND superhero.race_id = (SELECT id FROM race WHERE race = 'human');"}, {"question_id": 759, "answer_sql": "SELECT colour.colour FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.weight_kg = (SELECT MAX(weight_kg) FROM superhero);"}, {"question_id": 760, "answer_sql": "SELECT (SUM(CASE WHEN publisher.id = 13 THEN 1 ELSE 0 END) / COUNT(DISTINCT superhero.id)) * 100 AS percentage FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.height_cm BETWEEN 150 AND 180;"}, {"question_id": 761, "answer_sql": "SELECT superhero.full_name FROM superhero JOIN gender ON superhero.gender_id = gender.id WHERE gender.gender = 'male' AND superhero.weight_kg > (SELECT AVG(weight_kg) * 0.79 FROM superhero);"}, {"question_id": 762, "answer_sql": "SELECT power_name FROM superpower JOIN hero_power ON superpower.id = hero_power.power_id GROUP BY power_name ORDER BY COUNT(*) DESC LIMIT 1;"}, {"question_id": 763, "answer_sql": "SELECT ha.attribute_value FROM hero_attribute ha JOIN superhero sh ON ha.hero_id = sh.id WHERE sh.superhero_name = 'Abomination';"}, {"question_id": 764, "answer_sql": "SELECT sp.power_name FROM superpower sp JOIN hero_power hp ON sp.id = hp.power_id WHERE hp.hero_id = 1;"}, {"question_id": 765, "answer_sql": "SELECT COUNT(*) AS number_of_heroes FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'stealth';"}, {"question_id": 766, "answer_sql": "SELECT superhero.full_name FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'strength' ORDER BY hero_attribute.attribute_value DESC LIMIT 1;"}, {"question_id": 767, "answer_sql": "SELECT AVG(height_cm) AS average_height FROM superhero WHERE skin_colour_id IS NULL;"}, {"question_id": 768, "answer_sql": "SELECT COUNT(*) AS NumberOfSuperheroes FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Dark Horse Comics';"}, {"question_id": 769, "answer_sql": "SELECT superhero.superhero_name FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id JOIN publisher ON superhero.publisher_id = publisher.id WHERE attribute.attribute_name = 'durability' AND publisher.publisher_name = 'Dark Horse Comics' ORDER BY hero_attribute.attribute_value DESC LIMIT 1;"}, {"question_id": 770, "answer_sql": "SELECT colour.colour FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.full_name = 'Abraham Sapien';"}, {"question_id": 771, "answer_sql": "SELECT superhero.superhero_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Flight';"}, {"question_id": 772, "answer_sql": "SELECT s.superhero_name, c.colour FROM superhero s JOIN colour c ON s.eye_colour_id = c.id JOIN colour c2 ON s.hair_colour_id = c2.id JOIN colour c3 ON s.skin_colour_id = c3.id JOIN gender g ON s.gender_id = g.id JOIN publisher p ON s.publisher_id = p.id WHERE g.gender = 'Female' AND p.publisher_name = 'Dark Horse Comics';"}, {"question_id": 773, "answer_sql": "SELECT superhero.superhero_name, superhero.publisher_name FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id AND superhero.hair_colour_id = colour.id AND superhero.skin_colour_id = colour.id JOIN publisher ON superhero.publisher_id = publisher.id"}, {"question_id": 774, "answer_sql": "SELECT race.race FROM superhero JOIN race ON superhero.race_id = race.id WHERE superhero.superhero_name = 'A-Bomb';"}, {"question_id": 775, "answer_sql": "SELECT (SUM(CASE WHEN s.colour_id = (SELECT id FROM colour WHERE colour = 'Blue') AND s.gender_id = (SELECT id FROM gender WHERE gender = 'Female') THEN 1 ELSE 0 END) / COUNT(CASE WHEN s.gender_id = (SELECT id FROM gender WHERE gender = 'Female') THEN 1 END)) * 100 AS percentage FROM superhero s JOIN colour c ON s.eye_colour_id = c.id OR s.hair_colour_id = c.id OR s.skin_colour_id = c.id;"}, {"question_id": 776, "answer_sql": "SELECT superhero.superhero_name, race.race FROM superhero JOIN superhero_attribute ON superhero.id = superhero_attribute.hero_id JOIN attribute ON superhero_attribute.attribute_id = attribute.id JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id JOIN race ON superhero.race_id = race.id WHERE superhero.full_name = 'Charles Chandler' AND attribute.attribute_name = 'Race';"}, {"question_id": 777, "answer_sql": "SELECT gender.gender FROM superhero JOIN gender ON superhero.gender_id = gender.id WHERE superhero.superhero_name = 'Agent 13';"}, {"question_id": 778, "answer_sql": "SELECT superhero.superhero_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Adaptation';"}, {"question_id": 779, "answer_sql": "SELECT COUNT(hp.power_id) AS number_of_powers FROM hero_power hp JOIN superhero sh ON hp.hero_id = sh.id WHERE sh.superhero_name = 'Amazo';"}, {"question_id": 780, "answer_sql": "SELECT sp.power_name FROM superhero sh JOIN hero_power hp ON sh.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sh.superhero_name = 'Hunter Zolomon';"}, {"question_id": 781, "answer_sql": "SELECT superhero.height_cm FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Amber';"}, {"question_id": 782, "answer_sql": "SELECT superhero.superhero_name FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id AND superhero.hair_colour_id = colour.id WHERE colour.colour = 'Black';"}, {"question_id": 783, "answer_sql": "SELECT colour.colour FROM superhero JOIN colour ON superhero.skin_colour_id = colour.id WHERE colour.colour = 'Gold';"}, {"question_id": 784, "answer_sql": "SELECT superhero.full_name FROM superhero JOIN race ON superhero.race_id = race.id WHERE race.race = 'Vampire';"}, {"question_id": 785, "answer_sql": "SELECT superhero_name FROM superhero JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.alignment = 'Neutral';"}, {"question_id": 786, "answer_sql": "SELECT COUNT(*) AS number_of_heroes FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE attribute_name = 'Strength' AND attribute_value = ( SELECT MAX(attribute_value) FROM hero_attribute WHERE attribute_name = 'Strength' );"}, {"question_id": 787, "answer_sql": "SELECT race.race, alignment.alignment FROM superhero JOIN race ON superhero.race_id = race.id JOIN alignment ON superhero.alignment_id = alignment.id WHERE superhero.superhero_name = 'Cameron Hicks';"}, {"question_id": 788, "answer_sql": "SELECT ROUND( (SUM(CASE WHEN s.gender = 'Female' AND s.publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics') THEN 1 ELSE 0 END) / (SELECT COUNT(*) FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics')) * 100), 2) AS percentage FROM superhero s;"}, {"question_id": 789, "answer_sql": "SELECT AVG(superhero.weight_kg) AS average_weight FROM superhero JOIN race ON superhero.race_id = race.id WHERE race.race = 'Alien';"}, {"question_id": 790, "answer_sql": "SELECT (SELECT weight_kg FROM superhero WHERE full_name = 'Emil Blonsky') - (SELECT weight_kg FROM superhero WHERE full_name = 'Charles Chandler') AS weight_difference;"}, {"question_id": 791, "answer_sql": "SELECT superhero.superhero_name, AVG(superhero.height_cm) as average_height FROM superhero GROUP BY superhero.superhero_name;"}, {"question_id": 792, "answer_sql": "SELECT sp.power_name FROM superhero sh JOIN hero_power hp ON sh.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sh.superhero_name = 'Abomination';"}, {"question_id": 793, "answer_sql": "SELECT COUNT(*) FROM superhero JOIN gender ON superhero.gender_id = gender.id WHERE superhero.race_id = 21 AND gender.id = 1;"}, {"question_id": 794, "answer_sql": "SELECT superhero.superhero_name FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Speed' ORDER BY hero_attribute.attribute_value DESC LIMIT 1;"}, {"question_id": 795, "answer_sql": "SELECT COUNT(*) FROM superhero WHERE alignment_id = 3;"}, {"question_id": 796, "answer_sql": "SELECT attribute.attribute_name, hero_attribute.attribute_value FROM attribute JOIN hero_attribute ON attribute.id = hero_attribute.attribute_id JOIN superhero ON hero_attribute.hero_id = superhero.id WHERE superhero.superhero_name = '3-D Man';"}, {"question_id": 797, "answer_sql": "SELECT superhero.superhero_name FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id JOIN colour ON superhero.hair_colour_id = colour.id WHERE colour.colour = 'blue' AND colour.colour = 'brown';"}, {"question_id": 798, "answer_sql": "SELECT publisher.publisher_name FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy');"}, {"question_id": 799, "answer_sql": "SELECT COUNT(*) FROM superhero WHERE publisher_id = 1;"}, {"question_id": 800, "answer_sql": "SELECT (SUM(CASE WHEN eye_colour_id = 7 THEN 1 ELSE 0 END) / COUNT(*)) * 100.0 AS percentage_with_blue_eyes FROM superhero;"}, {"question_id": 801, "answer_sql": "SELECT CAST(SUM(CASE WHEN gender_id = 1 THEN 1 ELSE 0 END) AS FLOAT) / CAST(SUM(CASE WHEN gender_id = 2 THEN 1 ELSE 0 END) AS FLOAT) AS ratio FROM superhero;"}, {"question_id": 802, "answer_sql": "SELECT superhero_name FROM superhero WHERE height_cm = (SELECT MAX(height_cm) FROM superhero);"}, {"question_id": 803, "answer_sql": "SELECT power_id FROM superpower WHERE power_name = 'cryokinesis';"}, {"question_id": 804, "answer_sql": "SELECT superhero_name FROM superhero WHERE id = 294;"}, {"question_id": 805, "answer_sql": "SELECT superhero.full_name FROM superhero WHERE superhero.weight_kg = 0 OR superhero.weight_kg IS NULL;"}, {"question_id": 806, "answer_sql": "SELECT colour.colour FROM superhero JOIN superhero_attribute ON superhero.id = superhero_attribute.hero_id JOIN attribute ON superhero_attribute.attribute_id = attribute.id JOIN colour ON superhero_attribute.attribute_value = colour.id WHERE superhero.full_name = 'Karen Beecher-Duncan' AND superhero_attribute.attribute_name = 'Eye Colour';"}, {"question_id": 807, "answer_sql": "SELECT sp.power_name FROM superhero sh JOIN hero_power hp ON sh.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sh.full_name = 'Helen Parr';"}, {"question_id": 808, "answer_sql": "SELECT race.race FROM superhero JOIN race ON superhero.race_id = race.id WHERE superhero.weight_kg = 108 AND superhero.height_cm = 188;"}, {"question_id": 809, "answer_sql": "SELECT publisher.publisher_name FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.id = 38;"}, {"question_id": 810, "answer_sql": "SELECT race.race FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id JOIN superpower ON superhero.id = hero_power.hero_id JOIN superpower.power_name = 'Strength' JOIN race ON superhero.race_id = race.id WHERE attribute.attribute_name = 'Strength' GROUP BY superhero.id ORDER BY MAX(hero_attribute.attribute_value) DESC LIMIT 1;"}, {"question_id": 811, "answer_sql": "SELECT alignment.alignment, GROUP_CONCAT(superpower.power_name) AS superpowers FROM superhero JOIN alignment ON superhero.alignment_id = alignment.id LEFT JOIN hero_power ON superhero.id = hero_power.hero_id LEFT JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = 'Atom IV' GROUP BY superhero.id;"}, {"question_id": 812, "answer_sql": "SELECT superhero.full_name FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Blue';"}, {"question_id": 813, "answer_sql": "SELECT AVG(attribute_value) AS average_attribute_value FROM hero_attribute JOIN superhero ON hero_attribute.hero_id = superhero.id JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.alignment = 'neutral';"}, {"question_id": 814, "answer_sql": "SELECT superhero.superhero_name, colour.colour FROM superhero JOIN colour ON superhero.skin_colour_id = colour.id JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE hero_attribute.attribute_value = 100;"}, {"question_id": 815, "answer_sql": "SELECT COUNT(*) FROM superhero JOIN alignment ON superhero.alignment_id = alignment.id JOIN gender ON superhero.gender_id = gender.id WHERE alignment.alignment = 'good' AND gender.gender = 'female';"}, {"question_id": 816, "answer_sql": "SELECT superhero.superhero_name FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE hero_attribute.attribute_value BETWEEN 75 AND 80;"}, {"question_id": 817, "answer_sql": "SELECT race.race FROM superhero JOIN gender ON superhero.gender_id = gender.id JOIN colour ON superhero.hair_colour_id = colour.id JOIN race ON superhero.race_id = race.id WHERE superhero.full_name LIKE '%blue%' AND gender.gender = 'male';"}, {"question_id": 818, "answer_sql": "SELECT (SUM(CASE WHEN gender.id = 2 THEN 1 ELSE 0 END) / COUNT(alignment.id)) * 100.0 AS percentage_female_bad_superheroes FROM alignment JOIN superhero ON superhero.alignment_id = alignment.id JOIN gender ON superhero.gender_id = gender.id WHERE alignment.id = 2;"}, {"question_id": 819, "answer_sql": "SELECT (SELECT COUNT(*) FROM superhero WHERE eye_colour_id = 7 AND weight_kg IS NULL OR weight_kg = 0) - (SELECT COUNT(*) FROM superhero WHERE eye_colour_id = 1 AND weight_kg IS NULL OR weight_kg = 0) AS difference"}, {"question_id": 820, "answer_sql": "SELECT superhero.superhero_name, attribute.attribute_name, attribute.attribute_value FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE superhero.superhero_name = 'Hulk' AND attribute.attribute_name = 'Strength';"}, {"question_id": 821, "answer_sql": "SELECT sp.power_name FROM superhero sh JOIN hero_power hp ON sh.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sh.superhero_name = 'Ajax';"}, {"question_id": 822, "answer_sql": "SELECT COUNT(*) AS NumberOfGreenVillains FROM superhero JOIN colour ON superhero.skin_colour_id = colour.id JOIN alignment ON superhero.alignment_id = alignment.id WHERE colour.colour = 'Green' AND alignment.alignment = 'Bad';"}, {"question_id": 823, "answer_sql": "SELECT COUNT(*) FROM superhero JOIN gender ON superhero.gender_id = gender.id JOIN publisher ON superhero.publisher_id = publisher.id WHERE gender.gender = 'Female' AND publisher.publisher_name = 'Marvel Comics';"}, {"question_id": 824, "answer_sql": "SELECT superhero.superhero_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Wind Control' ORDER BY superhero.superhero_name ASC;"}, {"question_id": 825, "answer_sql": "SELECT gender.gender FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id JOIN gender ON superhero.gender_id = gender.id WHERE superpower.power_name = 'Phoenix Force';"}, {"question_id": 826, "answer_sql": "SELECT superhero_name FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'DC Comics' ORDER BY weight_kg DESC LIMIT 1;"}, {"question_id": 827, "answer_sql": "SELECT AVG(height_cm) AS average_height FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id JOIN race ON superhero.race_id = race.id WHERE publisher.publisher_name = 'Dark Horse Comics' AND race.race = 'Human';"}, {"question_id": 828, "answer_sql": "SELECT COUNT(*) AS fastest_superheroes_count FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE attribute_name = 'Speed' AND attribute_value = 100;"}, {"question_id": 829, "answer_sql": "SELECT ABS(SUM(CASE WHEN publisher_name = 'DC Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END)) AS difference FROM superhero;"}, {"question_id": 830, "answer_sql": "SELECT attribute.attribute_name FROM attribute JOIN hero_attribute ON attribute.id = hero_attribute.attribute_id JOIN superhero ON hero_attribute.hero_id = superhero.id WHERE superhero.superhero_name = 'Black Panther' GROUP BY attribute.attribute_name ORDER BY MIN(hero_attribute.attribute_value) ASC LIMIT 1;"}, {"question_id": 831, "answer_sql": "SELECT colour.colour FROM superhero JOIN superhero_attribute ON superhero.id = superhero_attribute.hero_id JOIN attribute ON superhero_attribute.attribute_id = attribute.id JOIN colour ON superhero_attribute.attribute_value = colour.id WHERE superhero.superhero_name = 'Abomination' AND superhero_attribute.attribute_name = 'Eye Colour';"}, {"question_id": 832, "answer_sql": "SELECT superhero_name FROM superhero WHERE height_cm = (SELECT MAX(height_cm) FROM superhero);"}, {"question_id": 833, "answer_sql": "SELECT superhero_name FROM superhero WHERE full_name = 'Charles Chandler';"}, {"question_id": 834, "answer_sql": "SELECT ROUND( (SUM(CASE WHEN publisher_name = 'George Lucas' AND gender = 'Female' THEN 1 ELSE 0 END) * 100.0 / COUNT(DISTINCT CASE WHEN publisher_name = 'George Lucas' THEN id END)) AS percentage_female_heroes FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id;"}, {"question_id": 835, "answer_sql": "SELECT (SUM(CASE WHEN s.alignment = 'Good' THEN 1 ELSE 0 END) / COUNT(*)) * 100.0 AS percentage_good_superheroes FROM superhero s JOIN publisher p ON s.publisher_id = p.id WHERE p.publisher_name = 'Marvel Comics';"}, {"question_id": 836, "answer_sql": "SELECT COUNT(*) FROM superhero WHERE full_name LIKE 'John%';"}, {"question_id": 837, "answer_sql": "SELECT superhero.id FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id GROUP BY superhero.id ORDER BY MIN(hero_attribute.attribute_value) LIMIT 1;"}, {"question_id": 838, "answer_sql": "SELECT superhero.full_name FROM superhero JOIN superhero_attribute ON superhero.id = superhero_attribute.hero_id JOIN attribute ON superhero_attribute.attribute_id = attribute.id WHERE superhero.superhero_name = 'Alien' AND attribute.attribute_name = 'Full Name';"}, {"question_id": 839, "answer_sql": "SELECT superhero.full_name FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.weight_kg < 100 AND colour.colour = 'brown';"}, {"question_id": 840, "answer_sql": "SELECT ha.attribute_value FROM superhero sh JOIN hero_attribute ha ON sh.id = ha.hero_id WHERE sh.superhero_name = 'Aquababy';"}, {"question_id": 841, "answer_sql": "SELECT weight_kg, race.race FROM superhero JOIN race ON superhero.race_id = race.id WHERE superhero.id = 40;"}, {"question_id": 842, "answer_sql": "SELECT AVG(height_cm) AS average_height FROM superhero JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.alignment = 'neutral';"}, {"question_id": 843, "answer_sql": "SELECT superhero.id FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Intelligence';"}, {"question_id": 844, "answer_sql": "SELECT colour.colour FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.superhero_name = 'Blackwulf';"}, {"question_id": 845, "answer_sql": "SELECT sp.power_name FROM superhero sh JOIN hero_power hp ON sh.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sh.height_cm > (SELECT AVG(height_cm) * 0.8 FROM superhero);"}, {"question_id": 846, "answer_sql": "SELECT drivers.driverRef FROM drivers JOIN qualifying ON drivers.driverId = qualifying.driverId WHERE qualifying.raceId = 18 AND qualifying.position = 5"}, {"question_id": 847, "answer_sql": "SELECT d.surname FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN qualifying q ON r.raceId = q.raceId AND r.driverId = q.driverId WHERE r.raceId = 19 AND q.q2 = (SELECT MIN(q2) FROM qualifying WHERE raceId = 19) ORDER BY r.position ASC LIMIT 1;"}, {"question_id": 848, "answer_sql": "SELECT DISTINCT circuits.year FROM circuits JOIN races ON circuits.circuitId = races.circuitId WHERE circuits.location = 'Shanghai';"}, {"question_id": 849, "answer_sql": "SELECT url FROM circuits WHERE name = 'Circuit de Barcelona-Catalunya';"}, {"question_id": 850, "answer_sql": "SELECT name FROM circuits WHERE country = 'Germany';"}, {"question_id": 851, "answer_sql": "SELECT c.name, cs.positionText FROM circuits c JOIN constructorStandings cs ON c.circuitId = cs.raceId JOIN constructors con ON cs.constructorId = con.constructorId WHERE con.name = 'Renault' ORDER BY cs.position;"}, {"question_id": 852, "answer_sql": "SELECT COUNT(*) AS races_outside_asia_europe FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.year = 2010 AND circuits.country NOT IN ('Asia', 'Europe');"}, {"question_id": 853, "answer_sql": "SELECT DISTINCT r.name FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.country = 'Spain';"}, {"question_id": 854, "answer_sql": "SELECT circuits.lat, circuits.lng FROM circuits JOIN races ON circuits.circuitId = races.circuitId JOIN seasons ON races.year = seasons.year WHERE seasons.url = 'Australian Grand Prix';"}, {"question_id": 855, "answer_sql": "SELECT url FROM races WHERE circuitId = (SELECT circuitId FROM circuits WHERE name = 'Sepang International Circuit');"}, {"question_id": 856, "answer_sql": "SELECT r.date, r.time FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.name = 'Sepang International Circuit';"}, {"question_id": 857, "answer_sql": "SELECT lat, lng FROM circuits WHERE name = 'Abu Dhabi Grand Prix';"}, {"question_id": 858, "answer_sql": "SELECT c.country FROM constructors c JOIN constructorResults cr ON c.constructorId = cr.constructorId JOIN races r ON cr.raceId = r.raceId WHERE r.raceId = 24 AND cr.points = 1;"}, {"question_id": 859, "answer_sql": "SELECT q1 FROM qualifying WHERE raceId = 354 AND driverId = (SELECT driverId FROM drivers WHERE forename = 'Bruno' AND surname = 'Senna') AND constructorId = (SELECT constructorId FROM constructors WHERE constructorRef = 'BRSA');"}, {"question_id": 860, "answer_sql": "SELECT d.nationality FROM drivers d JOIN qualifying q ON d.driverId = q.driverId WHERE q.raceId = 355 AND q.position = 2 AND q.q2 = '0:01:40';"}, {"question_id": 861, "answer_sql": "SELECT number FROM results JOIN qualifying ON results.raceId = qualifying.raceId AND results.driverId = qualifying.driverId AND results.constructorId = qualifying.constructorId WHERE qualifying.position = 3 AND qualifying.time = '0:01:54' AND results.raceId = 903;"}, {"question_id": 862, "answer_sql": "SELECT COUNT(*) AS drivers_not_finished FROM drivers d WHERE d.driverId NOT IN ( SELECT DISTINCT r.driverId FROM races r JOIN results res ON r.raceId = res.raceId WHERE r.raceId = ( SELECT raceId FROM races WHERE name = 'Bahrain Grand Prix' AND year = 2007 ) )"}, {"question_id": 863, "answer_sql": "SELECT * FROM seasons WHERE year = (SELECT year FROM races WHERE raceId = 901);"}, {"question_id": 864, "answer_sql": "SELECT COUNT(DISTINCT driverId) AS finished_drivers FROM results WHERE raceId = (SELECT raceId FROM races WHERE date = '2015-11-29') AND statusId = (SELECT statusId FROM status WHERE status = 'finished');"}, {"question_id": 865, "answer_sql": "SELECT d.forename, d.surname, d.dob FROM drivers d JOIN results r ON d.driverId = r.driverId WHERE r.raceId = 592 AND r.time IS NOT NULL ORDER BY d.dob ASC LIMIT 1;"}, {"question_id": 866, "answer_sql": "SELECT drivers.forename, drivers.surname, drivers.url FROM drivers JOIN lapTimes ON drivers.driverId = lapTimes.driverId JOIN races ON lapTimes.raceId = races.raceId WHERE races.raceId = 161 AND lapTimes.time = '0:01:27' LIMIT 1;"}, {"question_id": 867, "answer_sql": "SELECT d.nationality FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN races ra ON r.raceId = ra.raceId WHERE ra.raceId = 933 AND r.rank = 1 ORDER BY r.fastestLapSpeed DESC LIMIT 1;"}, {"question_id": 868, "answer_sql": "SELECT circuits.name, circuits.lat, circuits.lng FROM circuits JOIN constructors ON constructors.constructorRef = 'Malaysia' WHERE constructors.nationality = 'Malaysia';"}, {"question_id": 869, "answer_sql": "SELECT c.url FROM constructors c JOIN constructorResults cr ON c.constructorId = cr.constructorId JOIN races r ON cr.raceId = r.raceId WHERE r.raceId = 9 ORDER BY cr.points DESC LIMIT 1;"}, {"question_id": 870, "answer_sql": "SELECT q1 FROM qualifying WHERE raceId = 345 AND driverId = (SELECT driverId FROM drivers WHERE forename = 'Lucas' AND surname = 'di Grassi') AND constructorId = (SELECT constructorId FROM constructors WHERE constructorRef = 'Di Grassi');"}, {"question_id": 871, "answer_sql": "SELECT d.nationality FROM drivers d JOIN qualifying q ON d.driverId = q.driverId WHERE q.raceId = 347 AND q.position = 2 AND q.q2 = '0:01:15';"}, {"question_id": 872, "answer_sql": "SELECT code FROM drivers WHERE driverId = ( SELECT driverId FROM qualifying WHERE raceId = 45 AND position = 3 AND q3 = '0:01:33' );"}, {"question_id": 873, "answer_sql": "SELECT time FROM results WHERE raceId = 743 AND driverId = (SELECT driverId FROM drivers WHERE forename = 'Bruce' AND surname = 'McLaren')"}, {"question_id": 874, "answer_sql": "SELECT d.forename, d.surname FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN races ra ON r.raceId = ra.raceId JOIN seasons se ON ra.year = se.year WHERE ra.name = 'San Marino Grand Prix' AND se.year = 2006 AND r.position = 2;"}, {"question_id": 875, "answer_sql": "SELECT * FROM seasons WHERE year = (SELECT year FROM races WHERE raceId = 901);"}, {"question_id": 876, "answer_sql": "SELECT COUNT(*) AS finished_drivers FROM results WHERE raceId = (SELECT raceId FROM races WHERE date = '2015-11-29') AND statusId = (SELECT statusId FROM status WHERE status = 'Finished');"}, {"question_id": 877, "answer_sql": "SELECT d.driverRef, d.forename, d.surname, d.dob FROM drivers d JOIN results r ON d.driverId = r.driverId WHERE r.raceId = 872 AND r.time IS NOT NULL ORDER BY d.dob DESC LIMIT 1;"}, {"question_id": 878, "answer_sql": "SELECT d.forename || ' ' || d.surname AS FullName FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN ( SELECT raceId, MIN(milliseconds) AS MinTime FROM lapTimes GROUP BY raceId ) AS min_lt ON r.raceId = min_lt.raceId AND r.milliseconds = min_lt.MinTime WHERE r.raceId = 348 ORDER BY r.milliseconds ASC LIMIT 1;"}, {"question_id": 879, "answer_sql": "SELECT d.nationality FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN ( SELECT raceId, MAX(fastestLapSpeed) AS maxSpeed FROM results GROUP BY raceId ) AS maxSpeeds ON r.raceId = maxSpeeds.raceId AND r.fastestLapSpeed = maxSpeeds.maxSpeed WHERE r.statusId = (SELECT statusId FROM status WHERE status = 'fastest lap');"}, {"question_id": 880, "answer_sql": "SELECT ROUND((fastestLapSpeed(raceId = 853) - fastestLapSpeed(raceId = 854)) / fastestLapSpeed(raceId = 853) * 100, 2) AS percentage_faster FROM results WHERE raceId = 853 AND statusId = (SELECT statusId FROM status WHERE status = 'Finished');"}, {"question_id": 881, "answer_sql": "SELECT ROUND( (COUNT(DISTINCT r.driverId) FILTER (WHERE r.time IS NOT NULL) * 100.0 / COUNT(DISTINCT r.driverId)) AS completion_rate ) AS completion_rate FROM races r JOIN drivers d ON r.driverId = d.driverId WHERE r.date = '1983-07-16';"}, {"question_id": 882, "answer_sql": "SELECT MIN(year) AS first_singapore_grand_prix_year FROM races WHERE circuitId = (SELECT circuitId FROM circuits WHERE circuitRef = 'Singapore');"}, {"question_id": 883, "answer_sql": "SELECT name FROM races WHERE year = 2005 ORDER BY name DESC;"}, {"question_id": 884, "answer_sql": "SELECT races.name, races.date FROM races WHERE strftime('%Y-%m', races.date) = strftime('%Y-%m', (SELECT MIN(date) FROM races));"}, {"question_id": 885, "answer_sql": "SELECT name, date FROM races WHERE year = 1999 ORDER BY round DESC LIMIT 1;"}, {"question_id": 886, "answer_sql": "SELECT year FROM races GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1;"}, {"question_id": 887, "answer_sql": "SELECT DISTINCT races.name FROM races LEFT JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.year = 2017 AND circuits.year != 2000;"}, {"question_id": 888, "answer_sql": "SELECT c.name, c.location FROM circuits c JOIN races r ON c.circuitId = r.circuitId JOIN seasons s ON r.year = s.year WHERE s.url LIKE '%European Grand Prix%' ORDER BY s.year ASC LIMIT 1;"}, {"question_id": 889, "answer_sql": "SELECT MAX(year) AS last_season_year FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.circuitRef = 'Brands Hatch' AND races.name = 'British Grand Prix';"}, {"question_id": 890, "answer_sql": "SELECT COUNT(DISTINCT races.year) AS number_of_seasons FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.name = 'Silverstone Circuit' AND races.name = 'British Grand Prix';"}, {"question_id": 891, "answer_sql": "SELECT d.forename, d.surname, rs.positionText FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN races ra ON r.raceId = ra.raceId JOIN constructorStandings cs ON r.raceId = cs.raceId AND d.driverId = cs.driverId WHERE ra.name = 'Singapore Grand Prix' AND ra.year = 2010 ORDER BY cs.position;"}, {"question_id": 892, "answer_sql": "SELECT drivers.forename || ' ' || drivers.surname AS fullName, MAX(results.points) AS maxPoints FROM drivers JOIN results ON drivers.driverId = results.driverId GROUP BY drivers.driverId ORDER BY maxPoints DESC LIMIT 1;"}, {"question_id": 893, "answer_sql": "SELECT d.forename, d.surname, r.points FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN races ra ON r.raceId = ra.raceId WHERE ra.name = '2017 Chinese Grand Prix' AND r.position <= 3 ORDER BY r.position ASC, r.points DESC;"}, {"question_id": 894, "answer_sql": "SELECT drivers.forename, drivers.surname, races.name, MIN(CAST(SUBSTR(lapTimes.time, 1, 10) AS REAL)) AS bestLapTime FROM lapTimes JOIN drivers ON lapTimes.driverId = drivers.driverId JOIN races ON lapTimes.raceId = races.raceId GROUP BY races.raceId, drivers.driverId ORDER BY bestLapTime ASC LIMIT 1;"}, {"question_id": 895, "answer_sql": "SELECT AVG(CAST(time AS REAL)) AS average_lap_time FROM lapTimes WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Sebastian' AND surname = 'Vettel') AND raceId = (SELECT raceId FROM races WHERE name = '2009 Chinese Grand Prix');"}, {"question_id": 896, "answer_sql": "SELECT (COUNT(r.raceId) FILTER (WHERE d.surname = 'Hamilton' AND r.year >= 2010 AND r.position > 1) * 100.0 / COUNT(r.raceId) FILTER (WHERE d.surname = 'Hamilton' AND r.year >= 2010)) AS percentage FROM races r JOIN drivers d ON r.driverId = d.driverId WHERE d.surname = 'Hamilton';"}, {"question_id": 897, "answer_sql": "SELECT d.forename, d.surname, d.nationality, AVG(rs.points) AS average_points FROM drivers d JOIN constructorStandings cs ON d.driverId = cs.driverId WHERE cs.wins = (SELECT MAX(wins) FROM constructorStandings) GROUP BY d.driverId;"}, {"question_id": 898, "answer_sql": "SELECT forename, surname, dob FROM drivers WHERE nationality = 'Japanese' ORDER BY dob ASC LIMIT 1;"}, {"question_id": 899, "answer_sql": "SELECT DISTINCT circuits.circuitId, circuits.name, circuits.location, circuits.country FROM circuits JOIN races ON circuits.circuitId = races.circuitId WHERE races.year BETWEEN 1990 AND 2000 GROUP BY circuits.circuitId HAVING COUNT(races.raceId) >= 4;"}, {"question_id": 900, "answer_sql": "SELECT c.name, c.location, r.name AS race_name FROM circuits c JOIN races r ON c.circuitId = r.circuitId JOIN seasons s ON r.year = s.year JOIN results res ON r.raceId = res.raceId WHERE c.country = 'USA' AND s.year = 2006;"}, {"question_id": 901, "answer_sql": "SELECT races.name, circuits.name, circuits.location FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE strftime('%m', races.date) = '09' AND strftime('%Y', races.date) = '2005';"}, {"question_id": 902, "answer_sql": "SELECT DISTINCT races.name FROM races JOIN results ON races.raceId = results.raceId JOIN drivers ON results.driverId = drivers.driverId WHERE drivers.forename = 'Alex' AND drivers.surname = 'Yoong' AND results.position < 10;"}, {"question_id": 903, "answer_sql": "SELECT COUNT(*) AS Number of Wins FROM constructorStandings cs JOIN races r ON cs.raceId = r.raceId JOIN constructors c ON cs.constructorId = c.constructorId JOIN drivers d ON r.driverId = d.driverId WHERE d.forename = 'Michael' AND d.surname = 'Schumacher' AND r.circuitRef = (SELECT circuitRef FROM circuits WHERE name = 'Sepang International Circuit') AND cs.wins > 0;"}, {"question_id": 904, "answer_sql": "SELECT races.name, races.date FROM races JOIN results ON races.raceId = results.raceId JOIN lapTimes ON races.raceId = lapTimes.raceId AND results.driverId = lapTimes.driverId JOIN drivers ON results.driverId = drivers.driverId WHERE drivers.forename = 'Michael' AND drivers.surname = 'Schumacher' AND lapTimes.milliseconds = ( SELECT MIN(milliseconds) FROM lapTimes WHERE lapTimes.raceId = races.raceId AND lapTimes.driverId = drivers.driverId ) GROUP BY races.raceId ORDER BY races.date DESC LIMIT 1;"}, {"question_id": 905, "answer_sql": "SELECT AVG(points) AS average_points FROM results JOIN drivers ON results.driverId = drivers.driverId WHERE drivers.forename = 'Eddie' AND drivers.surname = 'Irvine' AND results.year = 2000;"}, {"question_id": 906, "answer_sql": "SELECT drivers.forename, drivers.surname, races.name, races.date, constructorResults.points FROM races JOIN drivers ON races.driverId = drivers.driverId JOIN constructorResults ON races.raceId = constructorResults.raceId WHERE races.raceId = ( SELECT MIN(raceId) FROM races JOIN constructorResults ON races.raceId = constructorResults.raceId WHERE constructorResults.constructorId = ( SELECT constructorId FROM constructors WHERE constructorRef = 'Lewis Hamilton' ) ) AND constructorResults.constructorId = ( SELECT constructorId FROM constructors WHERE constructorRef = 'Lewis Hamilton' ) ORDER BY races.date ASC LIMIT 1;"}, {"question_id": 907, "answer_sql": "SELECT r.name, c.country FROM races r JOIN circuits c ON r.circuitId = c.circuitId JOIN seasons s ON r.year = s.year WHERE s.year = 2017 ORDER BY r.date;"}, {"question_id": 908, "answer_sql": "SELECT races.name, races.year, circuits.name AS circuit_location FROM races JOIN circuits ON races.circuitId = circuits.circuitId ORDER BY races.laps DESC LIMIT 1;"}, {"question_id": 909, "answer_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM races WHERE name = 'European Grand Prix')) AS percentage FROM races WHERE country = 'Germany' AND name = 'European Grand Prix';"}, {"question_id": 910, "answer_sql": "SELECT lat, lng FROM circuits WHERE circuitRef = 'Silverstone';"}, {"question_id": 911, "answer_sql": "SELECT name FROM circuits WHERE (lat, name) IN ( SELECT max(lat), name FROM circuits WHERE name IN ('Silverstone Circuit', 'Hockenheimring', 'Hungaroring') GROUP BY name );"}, {"question_id": 912, "answer_sql": "SELECT circuitRef FROM circuits WHERE circuitRef = 'Marina Bay Street Circuit';"}, {"question_id": 913, "answer_sql": "SELECT country FROM circuits ORDER BY alt DESC LIMIT 1;"}, {"question_id": 914, "answer_sql": "SELECT COUNT(*) FROM drivers WHERE code IS NULL;"}, {"question_id": 915, "answer_sql": "SELECT nationality FROM drivers WHERE dob = (SELECT MIN(dob) FROM drivers);"}, {"question_id": 916, "answer_sql": "SELECT DISTINCT surname FROM drivers WHERE nationality = 'italian';"}, {"question_id": 917, "answer_sql": "SELECT url FROM drivers WHERE surname = 'Davidson' AND forename = 'Anthony';"}, {"question_id": 918, "answer_sql": "SELECT driverRef FROM drivers WHERE surname = 'Hamilton';"}, {"question_id": 919, "answer_sql": "SELECT name FROM circuits WHERE year = (SELECT year FROM seasons WHERE url = '2009-Spanish-Grand-Prix')"}, {"question_id": 920, "answer_sql": "SELECT DISTINCT r.year FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.name = 'Silverstone Circuit';"}, {"question_id": 921, "answer_sql": "SELECT DISTINCT r.url FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.url = 'Silverstone Circuit';"}, {"question_id": 922, "answer_sql": "SELECT time FROM races WHERE year = (SELECT year FROM seasons WHERE url = '2010') AND circuitId = (SELECT circuitId FROM circuits WHERE circuitRef = 'Abu Dhabi Circuit');"}, {"question_id": 923, "answer_sql": "SELECT COUNT(*) AS number_of_races FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.country = 'Italy';"}, {"question_id": 924, "answer_sql": "SELECT DISTINCT races.date FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.circuitRef = 'Barcelona-Catalunya';"}, {"question_id": 925, "answer_sql": "SELECT url FROM circuits WHERE name = 'Spain' AND year = 2009;"}, {"question_id": 926, "answer_sql": "SELECT fastestLapTime FROM results WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton') ORDER BY fastestLapTime ASC LIMIT 1;"}, {"question_id": 927, "answer_sql": "SELECT d.forename, d.surname FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN lapTimes lt ON r.raceId = lt.raceId AND r.position = lt.position WHERE r.fastestLapSpeed = (SELECT MAX(fastestLapSpeed) FROM lapTimes) GROUP BY d.driverId;"}, {"question_id": 928, "answer_sql": "SELECT driverRef FROM drivers JOIN results ON drivers.driverId = results.driverId WHERE results.raceId = (SELECT raceId FROM races WHERE name = 'Australian Grand Prix' AND year = 2008) AND results.position = 1 ORDER BY results.positionOrder ASC LIMIT 1;"}, {"question_id": 929, "answer_sql": "SELECT DISTINCT races.name FROM races JOIN results ON races.raceId = results.raceId JOIN drivers ON results.driverId = drivers.driverId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';"}, {"question_id": 930, "answer_sql": "SELECT races.name, results.rank FROM races JOIN results ON races.raceId = results.raceId JOIN drivers ON results.driverId = drivers.driverId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' ORDER BY results.rank ASC LIMIT 1;"}, {"question_id": 931, "answer_sql": "SELECT MAX(fastestLapSpeed) AS fastest_lap_speed FROM results JOIN races ON results.raceId = races.raceId WHERE races.name = 'Spanish Grand Prix' AND races.year = 2009;"}, {"question_id": 932, "answer_sql": "SELECT DISTINCT races.year FROM races JOIN drivers ON races.driverId = drivers.driverId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';"}, {"question_id": 933, "answer_sql": "SELECT positionOrder FROM results WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton') AND raceId = (SELECT raceId FROM races WHERE name = '2008 Australian Grand Prix') ORDER BY position DESC LIMIT 1;"}, {"question_id": 934, "answer_sql": "SELECT d.forename, d.surname FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN races ra ON r.raceId = ra.raceId WHERE ra.year = 2008 AND r.grid = 4;"}, {"question_id": 935, "answer_sql": "SELECT COUNT(*) AS finished_drivers FROM results WHERE raceId = (SELECT raceId FROM races WHERE name = '2008 Australian Grand Prix') AND time IS NOT NULL;"}, {"question_id": 936, "answer_sql": "SELECT r.name, lh.fastestLapTime, lh.fastestLapSpeed FROM races r JOIN results lh ON r.raceId = lh.raceId WHERE lh.driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton') AND r.year = (SELECT year FROM seasons WHERE url = '2008-australian-grand-prix') ORDER BY lh.fastestLapTime ASC LIMIT 1;"}, {"question_id": 937, "answer_sql": "SELECT time FROM results WHERE raceId = (SELECT raceId FROM races WHERE name = 'Australian Grand Prix' AND year = 2008) AND position = 2 ORDER BY position DESC LIMIT 1;"}, {"question_id": 938, "answer_sql": "SELECT d.forename, d.surname, r.url FROM drivers d JOIN results res ON d.driverId = res.driverId JOIN races r ON res.raceId = r.raceId JOIN constructorResults cr ON res.raceId = cr.raceId JOIN constructors c ON cr.constructorId = c.constructorId WHERE r.year = (SELECT year FROM seasons WHERE url = '2008-grand-prix') AND r.name = 'Australian Grand Prix' AND res.points = (SELECT MAX(points) FROM results WHERE raceId = r.raceId) AND c.constructorRef = (SELECT constructorRef FROM constructors WHERE constructorRef = (SELECT constructorRef FROM constructorResults WHERE raceId = r.raceId ORDER BY points DESC LIMIT 1)) AND res.statusId = (SELECT statusId FROM status WHERE status = 'Champion') ORDER BY res.position ASC LIMIT 1;"}, {"question_id": 939, "answer_sql": "SELECT COUNT(DISTINCT d.driverId) AS num_drivers FROM drivers d JOIN races r ON d.driverId = r.driverId JOIN seasons s ON r.year = s.year WHERE d.nationality = 'American' AND s.year = 2008 AND r.name = 'Australian Grand Prix';"}, {"question_id": 940, "answer_sql": "SELECT COUNT(DISTINCT drivers.driverId) AS drivers_participated_in_formula_1 FROM drivers JOIN results ON drivers.driverId = results.driverId WHERE results.raceId = (SELECT raceId FROM races WHERE name = '2008 Australian Grand Prix') AND results.statusId = (SELECT statusId FROM status WHERE status = 'Finished');"}, {"question_id": 941, "answer_sql": "SELECT SUM(points) AS total_points FROM results JOIN drivers ON results.driverId = drivers.driverId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';"}, {"question_id": 942, "answer_sql": "SELECT AVG(CAST(SUBSTR(fastestLapTime, 1, 2) AS INTEGER) * 60 + CAST(SUBSTR(fastestLapTime, 4, 2) AS INTEGER) + CAST(SUBSTR(fastestLapTime, 7, 2) AS INTEGER) / 1000 AS average_fastest_lap_time_seconds FROM results JOIN drivers ON results.driverId = drivers.driverId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND results.statusId = (SELECT statusId FROM status WHERE status = 'Finished');"}, {"question_id": 943, "answer_sql": "SELECT COUNT(*) / (SELECT COUNT(*) FROM races WHERE year = 2008) AS rate FROM results WHERE time IS NOT NULL AND raceId IN (SELECT raceId FROM races WHERE year = 2008);"}, {"question_id": 944, "answer_sql": "SELECT ((fastestLapTime - (SELECT time FROM results WHERE position = (SELECT MAX(position) FROM results WHERE raceId = (SELECT raceId FROM races WHERE name = '2008 Australian Grand Prix')))) / (SELECT time FROM results WHERE position = (SELECT MAX(position) FROM results WHERE raceId = (SELECT raceId FROM races WHERE name = '2008 Australian Grand Prix')))) * 100 AS percentage_faster FROM results WHERE position = (SELECT MIN(position) FROM results WHERE raceId = (SELECT raceId FROM races WHERE name = '2008 Australian Grand Prix'));"}, {"question_id": 945, "answer_sql": "SELECT COUNT(*) AS circuit_count FROM circuits WHERE country = 'Australia' AND location = 'Melbourne';"}, {"question_id": 946, "answer_sql": "SELECT circuits.name, circuits.lat, circuits.lng FROM circuits WHERE circuits.country = 'USA';"}, {"question_id": 947, "answer_sql": "SELECT COUNT(*) AS BritishDriversAfter1980 FROM drivers WHERE nationality = 'British' AND dob > '1980-01-01';"}, {"question_id": 948, "answer_sql": "SELECT AVG(points) AS average_points FROM constructorResults JOIN constructors ON constructorResults.constructorId = constructors.constructorId WHERE constructors.nationality = 'British';"}, {"question_id": 949, "answer_sql": "SELECT c.constructorRef, c.name, MAX(rs.points) as highestPoints FROM constructors c JOIN constructorResults cr ON c.constructorId = cr.constructorId GROUP BY c.constructorId ORDER BY highestPoints DESC LIMIT 1;"}, {"question_id": 950, "answer_sql": "SELECT c.name FROM constructors c JOIN constructorResults cr ON c.constructorId = cr.constructorId JOIN races r ON cr.raceId = r.raceId WHERE r.raceId = 291 AND cr.points = 0;"}, {"question_id": 951, "answer_sql": "SELECT COUNT(*) AS num_constructors FROM constructors JOIN constructorResults ON constructors.constructorId = constructorResults.constructorId JOIN races ON races.raceId = constructorResults.raceId WHERE constructors.nationality = 'Japan' GROUP BY constructors.constructorId HAVING COUNT(DISTINCT races.raceId) = 2 AND SUM(constructorResults.points) = 0;"}, {"question_id": 952, "answer_sql": "SELECT c.constructorRef, c.name FROM constructors c JOIN constructorStandings cs ON c.constructorId = cs.constructorId WHERE cs.position = 1;"}, {"question_id": 953, "answer_sql": "SELECT COUNT(DISTINCT c.constructorId) AS FrenchConstructorsWithLapsOver50 FROM constructors c JOIN results r ON c.constructorId = r.constructorId WHERE c.nationality = 'France' AND r.laps > 50;"}, {"question_id": 954, "answer_sql": "SELECT (COUNT(DISTINCT d.driverId) FILTER (WHERE r.year BETWEEN 2007 AND 2009 AND r.time IS NOT NULL) * 100.0 / COUNT(DISTINCT d.driverId)) AS completion_percentage FROM drivers d JOIN results r ON d.driverId = r.driverId WHERE d.nationality = 'Japan' AND r.year BETWEEN 2007 AND 2009;"}, {"question_id": 955, "answer_sql": "SELECT r.year, AVG(CAST(SUBSTR(s.time, 1, 2) AS INTEGER) * 3600 + CAST(SUBSTR(s.time, 4, 2) AS INTEGER) * 60 + CAST(SUBSTR(s.time, 7, 2) AS INTEGER)) AS average_time_seconds FROM races r JOIN results s ON r.raceId = s.raceId JOIN constructorStandings cs ON r.raceId = cs.raceId WHERE cs.position = 1 AND s.statusId = (SELECT statusId FROM status WHERE status = 'Champion') GROUP BY r.year ORDER BY r.year;"}, {"question_id": 956, "answer_sql": "SELECT forename, surname FROM drivers WHERE year(dob) > 1975 AND driverId IN ( SELECT driverId FROM results WHERE rank = 2 )"}, {"question_id": 957, "answer_sql": "SELECT COUNT(*) AS ItalianDriversNotFinished FROM drivers d JOIN races r ON d.driverId = r.driverId JOIN status s ON r.statusId = s.statusId WHERE d.nationality = 'Italian' AND s.time IS NULL;"}, {"question_id": 958, "answer_sql": "SELECT drivers.forename, drivers.surname FROM results AS r JOIN drivers ON r.driverId = drivers.driverId WHERE r.fastestLap = (SELECT MAX(fastestLap) FROM results);"}, {"question_id": 959, "answer_sql": "SELECT fastestLap FROM results WHERE year = 2009 AND statusId = (SELECT statusId FROM status WHERE status = 'Champion') ORDER BY fastestLapTime ASC LIMIT 1;"}, {"question_id": 960, "answer_sql": "SELECT AVG(fastestLapSpeed) AS average_fastest_lap_speed FROM results JOIN races ON results.raceId = races.raceId WHERE races.name = 'Spanish Grand Prix' AND races.year = 2009;"}, {"question_id": 961, "answer_sql": "SELECT races.name, races.year FROM races JOIN results ON races.raceId = results.raceId WHERE results.milliseconds IS NOT NULL GROUP BY races.raceId ORDER BY MIN(results.milliseconds) ASC LIMIT 1;"}, {"question_id": 962, "answer_sql": "SELECT (COUNT(DISTINCT d.driverId) * 100.0 / COUNT(DISTINCT r.driverId)) AS percentage FROM drivers d JOIN results r ON d.driverId = r.driverId WHERE year(d.dob) < 1985 AND r.laps > 50 AND r.year BETWEEN 2000 AND 2005;"}, {"question_id": 963, "answer_sql": "SELECT COUNT(*) AS FrenchDriversWithFastestLap FROM drivers d JOIN lapTimes lt ON d.driverId = lt.driverId JOIN races r ON lt.raceId = r.raceId JOIN status s ON r.statusId = s.statusId WHERE d.nationality = 'France' AND lt.milliseconds < 120 * 60 * 1000 AND s.status = 'Finished';"}, {"question_id": 964, "answer_sql": "SELECT code, forename, surname FROM drivers WHERE nationality = 'America';"}, {"question_id": 965, "answer_sql": "SELECT raceId FROM races WHERE year = 2009;"}, {"question_id": 966, "answer_sql": "SELECT COUNT(DISTINCT driverId) AS participant_count FROM results WHERE raceId = 18;"}, {"question_id": 967, "answer_sql": "SELECT drivers.code, COUNT(*) as netherlandic_count FROM drivers JOIN results ON drivers.driverId = results.driverId JOIN constructors ON results.constructorId = constructors.constructorId WHERE drivers.nationality = 'Netherlands' AND drivers.code IN ( SELECT code FROM drivers ORDER BY year(dob) ASC LIMIT 3 ) GROUP BY drivers.code ORDER BY netherlandic_count DESC;"}, {"question_id": 968, "answer_sql": "SELECT driverRef FROM drivers WHERE surname = 'Kubica' AND forename = 'Robert';"}, {"question_id": 969, "answer_sql": "SELECT COUNT(*) AS AustralianDriversBornIn1980 FROM drivers WHERE nationality = 'Australia' AND strftime('%Y', dob) = '1980';"}, {"question_id": 970, "answer_sql": "SELECT d.forename, d.surname, MIN(lt.time) as earliestLapTime FROM drivers d JOIN lapTimes lt ON d.driverId = lt.driverId JOIN races r ON lt.raceId = r.raceId JOIN seasons s ON r.year = s.year WHERE d.nationality = 'Germany' AND year(d.dob) BETWEEN 1980 AND 1990 GROUP BY d.driverId ORDER BY earliestLapTime ASC LIMIT 3;"}, {"question_id": 971, "answer_sql": "SELECT drivers.driverRef FROM drivers JOIN results ON drivers.driverId = results.driverId JOIN constructors ON results.constructorId = constructors.constructorId WHERE drivers.nationality = 'German' ORDER BY year(dob) ASC LIMIT 1;"}, {"question_id": 972, "answer_sql": "SELECT drivers.driverId, drivers.code FROM drivers JOIN results ON drivers.driverId = results.driverId WHERE year(drivers.dob) = 1971 AND results.fastestLapTime IS NOT NULL ORDER BY results.fastestLapTime ASC LIMIT 1;"}, {"question_id": 973, "answer_sql": "SELECT d.forename, d.surname, r.time FROM drivers d JOIN results r ON d.driverId = r.driverId WHERE d.nationality = 'Spain' AND year(d.dob) < 1982 ORDER BY r.time DESC LIMIT 10;"}, {"question_id": 974, "answer_sql": "SELECT races.year FROM races JOIN results ON races.raceId = results.raceId WHERE results.fastestLapTime = ( SELECT MIN(fastestLapTime) FROM results WHERE races.year = results.year ) GROUP BY races.year;"}, {"question_id": 975, "answer_sql": "SELECT year FROM races JOIN lapTimes ON races.raceId = lapTimes.raceId GROUP BY year ORDER BY MAX(time) ASC LIMIT 1;"}, {"question_id": 976, "answer_sql": "SELECT driverId FROM results WHERE position = 1 AND laps = 1 ORDER BY milliseconds ASC LIMIT 5;"}, {"question_id": 977, "answer_sql": "SELECT COUNT(*) AS disqualified_finishers FROM results WHERE statusId = 2 AND raceId > 50 AND raceId < 100 AND time IS NULL;"}, {"question_id": 978, "answer_sql": "SELECT location, lat, lng FROM circuits WHERE country = 'Austria';"}, {"question_id": 979, "answer_sql": "SELECT raceId, COUNT(*) as finishers FROM results WHERE time IS NOT NULL GROUP BY raceId ORDER BY finishers DESC LIMIT 1;"}, {"question_id": 980, "answer_sql": "SELECT drivers.driverRef, drivers.nationality, drivers.dob FROM drivers JOIN qualifying ON drivers.driverId = qualifying.driverId WHERE qualifying.raceId = 23 AND qualifying.q2 IS NOT NULL;"}, {"question_id": 981, "answer_sql": "SELECT races.year, races.name, races.date, races.time FROM races JOIN drivers ON races.driverId = drivers.driverId WHERE drivers.dob = (SELECT MIN(dob) FROM drivers) AND drivers.driverRef = 'Max' AND drivers.driverRef IS NOT NULL AND races.raceId IN (SELECT qualifyId FROM qualifying WHERE constructorId IS NOT NULL) ORDER BY races.year ASC LIMIT 1;"}, {"question_id": 982, "answer_sql": "SELECT COUNT(*) AS disqualified_american_drivers FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN status s ON r.statusId = s.statusId WHERE d.nationality = 'American' AND s.status = 'disqualified';"}, {"question_id": 983, "answer_sql": "SELECT c.constructorRef, c.name, c.url FROM constructors c JOIN ( SELECT constructorId, MAX(points) as maxPoints FROM constructorResults GROUP BY constructorId ) cr ON c.constructorId = cr.constructorId JOIN results r ON c.constructorId = r.constructorId WHERE c.nationality = 'Italian' AND r.statusId = (SELECT statusId FROM status WHERE status = 'Finished') ORDER BY maxPoints DESC LIMIT 1;"}, {"question_id": 984, "answer_sql": "SELECT constructors.url FROM constructors JOIN constructorStandings ON constructors.constructorId = constructorStandings.constructorId GROUP BY constructors.constructorId ORDER BY SUM(constructorStandings.wins) DESC LIMIT 1;"}, {"question_id": 985, "answer_sql": "SELECT drivers.forename, drivers.surname, lapTimes.time FROM drivers JOIN lapTimes ON drivers.driverId = lapTimes.driverId JOIN races ON lapTimes.raceId = races.raceId WHERE races.name = 'French Grand Prix' AND lapTimes.lap = 3 ORDER BY lapTimes.milliseconds DESC LIMIT 1;"}, {"question_id": 986, "answer_sql": "SELECT time, milliseconds FROM results WHERE position = 1 ORDER BY milliseconds ASC LIMIT 1;"}, {"question_id": 987, "answer_sql": "SELECT AVG(fastestLapTime) AS averageFastestLapTime FROM results WHERE raceId = (SELECT raceId FROM races WHERE name = '2006 United States Grand Prix') AND rank < 11;"}, {"question_id": 988, "answer_sql": "SELECT d.forename, d.surname, AVG(CAST(ps.duration AS REAL)) AS avg_duration FROM drivers d JOIN pitStops ps ON d.driverId = ps.driverId JOIN races r ON ps.raceId = r.raceId JOIN seasons s ON r.year = s.year WHERE d.nationality = 'Germany' AND year(d.dob) BETWEEN 1980 AND 1985 GROUP BY d.driverId ORDER BY avg_duration ASC LIMIT 5;"}, {"question_id": 989, "answer_sql": "SELECT drivers.forename, drivers.surname, results.time FROM drivers JOIN results ON drivers.driverId = results.driverId JOIN races ON results.raceId = races.raceId JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.name = 'Canadian Grand Prix' AND races.year = 2008 AND results.position = 1;"}, {"question_id": 990, "answer_sql": "SELECT c.constructorRef, c.url FROM constructors c JOIN constructorResults cr ON c.constructorId = cr.constructorId JOIN races r ON cr.raceId = r.raceId JOIN results res ON r.raceId = res.raceId AND cr.constructorId = res.constructorId WHERE r.year = (SELECT year FROM races WHERE name = 'Singapore Grand Prix') AND res.position = 1 ORDER BY res.points DESC LIMIT 1;"}, {"question_id": 991, "answer_sql": "SELECT forename, surname, dob FROM drivers WHERE nationality = 'Austrian' AND dob BETWEEN '1981-01-01' AND '1991-12-31';"}, {"question_id": 992, "answer_sql": "SELECT d.forename || ' ' || d.surname AS full_name, 'https://en.wikipedia.org/wiki/' || d.driverRef AS wiki_page_link, d.dob FROM drivers d JOIN constructors c ON d.constructorId = c.constructorId WHERE d.nationality = 'German' AND d.dob BETWEEN '1971-01-01' AND '1985-12-31' ORDER BY d.dob DESC;"}, {"question_id": 993, "answer_sql": "SELECT name, location, country, lat, lng FROM circuits WHERE circuitRef = 'Hungaroring';"}, {"question_id": 994, "answer_sql": "SELECT c.constructorId, c.name, c.nationality, SUM(r.points) AS totalPoints FROM races r JOIN constructorResults cr ON r.raceId = cr.raceId JOIN constructors c ON cr.constructorId = c.constructorId WHERE r.name = 'Monaco Grand Prix' AND r.year BETWEEN 1980 AND 2010 GROUP BY c.constructorId ORDER BY totalPoints DESC LIMIT 1;"}, {"question_id": 995, "answer_sql": "SELECT AVG(points) AS average_score FROM results JOIN drivers ON results.driverId = drivers.driverId JOIN circuits ON results.raceId = races.raceId WHERE drivers.surname = 'Hamilton' AND circuits.country = 'Turkey';"}, {"question_id": 996, "answer_sql": "SELECT AVG(yearly_race_count) AS average_annual_races FROM ( SELECT COUNT(*) AS yearly_race_count FROM races WHERE date BETWEEN '2000-01-01' AND '2010-12-31' GROUP BY year ) AS yearly_counts;"}, {"question_id": 997, "answer_sql": "SELECT nationality FROM drivers GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1;"}, {"question_id": 998, "answer_sql": "SELECT COUNT(*) AS victories FROM constructorStandings WHERE position = 1 AND points = ( SELECT points FROM results WHERE driverId = ( SELECT driverId FROM driverStandings WHERE position = 1 AND points = ( SELECT points FROM results WHERE rank = 91 ) ) );"}, {"question_id": 999, "answer_sql": "SELECT races.name FROM races JOIN results ON races.raceId = results.raceId WHERE results.fastestLapTime = (SELECT MIN(fastestLapTime) FROM results)"}, {"question_id": 1000, "answer_sql": "SELECT circuits.name, circuits.location, circuits.country FROM circuits JOIN races ON circuits.circuitId = races.circuitId WHERE races.date = (SELECT MAX(date) FROM races);"}, {"question_id": 1001, "answer_sql": "SELECT d.forename, d.surname FROM drivers d JOIN qualifying q ON d.driverId = q.driverId JOIN races r ON q.raceId = r.raceId WHERE r.year = 2008 AND q.position = 1 AND r.circuitRef = 'Marina Bay Street Circuit' ORDER BY q.q3 ASC LIMIT 1;"}, {"question_id": 1002, "answer_sql": "SELECT d.forename || ' ' || d.surname AS fullName, d.nationality, r.name AS firstRace FROM drivers d JOIN races r ON d.driverId = ( SELECT driverId FROM races WHERE raceId = ( SELECT MIN(raceId) FROM races JOIN drivers ON races.driverId = drivers.driverId WHERE drivers.dob = ( SELECT MIN(dob) FROM drivers ) ) ) ORDER BY d.dob ASC LIMIT 1;"}, {"question_id": 1003, "answer_sql": "SELECT COUNT(*) AS number_of_accidents FROM results JOIN drivers ON results.driverId = drivers.driverId JOIN races ON results.raceId = races.circuitId WHERE races.name = 'Canadian Grand Prix' AND results.statusId = 3 GROUP BY results.driverId ORDER BY number_of_accidents DESC LIMIT 1;"}, {"question_id": 1004, "answer_sql": "SELECT drivers.forename || ' ' || drivers.surname AS fullName, COUNT(*) AS wins FROM drivers JOIN results ON drivers.driverId = results.driverId WHERE results.position = 1 GROUP BY drivers.driverId ORDER BY drivers.dob ASC LIMIT 1;"}, {"question_id": 1005, "answer_sql": "SELECT driverId, MAX(duration) AS longest_duration FROM pitStops GROUP BY driverId ORDER BY longest_duration DESC LIMIT 1;"}, {"question_id": 1006, "answer_sql": "SELECT MIN(milliseconds) AS fastestTimeMilliseconds, fastestLapTime FROM results GROUP BY fastestLap ORDER BY fastestTimeMilliseconds ASC LIMIT 1;"}, {"question_id": 1007, "answer_sql": "SELECT MAX(duration) AS longest_pit_stop_duration FROM pitStops;"}, {"question_id": 1008, "answer_sql": "SELECT p.lap FROM pitStops p JOIN races r ON p.raceId = r.raceId JOIN results res ON r.raceId = res.raceId AND p.driverId = res.driverId JOIN drivers d ON res.driverId = d.driverId WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton' AND r.name = 'Australian Grand Prix' AND r.year = 2011 AND p.stop = 1;"}, {"question_id": 1009, "answer_sql": "SELECT drivers.forename, drivers.surname, pitStops.duration FROM pitStops JOIN drivers ON pitStops.driverId = drivers.driverId JOIN races ON pitStops.raceId = races.raceId WHERE races.name = '2011 Australian Grand Prix' ORDER BY pitStops.lap;"}, {"question_id": 1010, "answer_sql": "SELECT r.name, lt.time, lt.milliseconds FROM races r JOIN lapTimes lt ON r.raceId = lt.raceId JOIN results res ON r.raceId = res.raceId AND lt.driverId = res.driverId WHERE res.driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton') AND res.statusId = (SELECT statusId FROM status WHERE status = 'Finished') ORDER BY lt.milliseconds ASC LIMIT 1;"}, {"question_id": 1011, "answer_sql": "SELECT d.forename || ' ' || d.surname AS FullName FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN lapTimes lt ON r.raceId = lt.raceId AND r.position = lt.position WHERE r.milliseconds = (SELECT MIN(milliseconds) FROM lapTimes) GROUP BY d.driverId LIMIT 1;"}, {"question_id": 1012, "answer_sql": "SELECT c.name, r.position FROM circuits c JOIN races r ON c.circuitId = r.circuitId JOIN ( SELECT raceId, driverId, MIN(milliseconds) AS minTime FROM lapTimes WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton') GROUP BY raceId ) AS lt ON r.raceId = lt.raceId JOIN lapTimes lt2 ON lt.raceId = lt2.raceId AND lt.minTime = lt2.milliseconds ORDER BY r.date;"}, {"question_id": 1013, "answer_sql": "SELECT r.name AS race_name, lt.time AS lap_record FROM races r JOIN lapTimes lt ON r.raceId = lt.raceId JOIN drivers d ON lt.driverId = d.driverId JOIN constructors c ON lt.constructorId = c.constructorId WHERE r.circuitRef = 'Austrian Grand Prix Circuit' ORDER BY lt.milliseconds ASC LIMIT 1;"}, {"question_id": 1014, "answer_sql": "SELECT r.name, lt.time, lt.milliseconds FROM races r JOIN lapTimes lt ON r.raceId = lt.raceId WHERE r.circuitId IN ( SELECT c.circuitId FROM circuits c WHERE c.country = 'Italy' ) ORDER BY lt.milliseconds ASC;"}, {"question_id": 1015, "answer_sql": "SELECT r.name, lt.time FROM races r JOIN lapTimes lt ON r.raceId = lt.raceId JOIN ( SELECT raceId, MIN(milliseconds) AS minTime FROM lapTimes WHERE raceId = (SELECT raceId FROM races WHERE name = 'Austrian Grand Prix') GROUP BY raceId ) AS minLaps ON lt.raceId = minLaps.raceId AND lt.milliseconds = minLaps.minTime WHERE r.name = 'Austrian Grand Prix';"}, {"question_id": 1016, "answer_sql": "SELECT p.duration FROM pitStops p JOIN ( SELECT r.raceId, MIN(l.milliseconds) AS minMilliseconds FROM races r JOIN lapTimes l ON r.raceId = l.raceId WHERE r.circuitId = (SELECT circuitId FROM circuits WHERE name = 'Austrian Grand Prix Circuit') GROUP BY r.raceId ) AS fastestLap ON p.raceId = fastestLap.raceId WHERE p.milliseconds = fastestLap.minMilliseconds;"}, {"question_id": 1017, "answer_sql": "SELECT circuits.name, circuits.lat, circuits.lng FROM circuits JOIN ( SELECT raceId, MIN(milliseconds) AS minTime FROM results GROUP BY raceId ) AS fastestRaces ON circuits.circuitId = fastestRaces.raceId JOIN ( SELECT raceId, lap, milliseconds FROM lapTimes WHERE milliseconds = ( SELECT minTime FROM ( SELECT raceId, MIN(milliseconds) AS minTime FROM lapTimes GROUP BY raceId ) AS minTimes WHERE minTimes.raceId = lapTimes.raceId ) ) AS fastestLaps ON fastestRaces.raceId = fastestLaps.raceId WHERE circuits.lat IS NOT NULL AND circuits.lng IS NOT NULL;"}, {"question_id": 1018, "answer_sql": "SELECT AVG(milliseconds) AS average_milliseconds_at_pit_stop FROM pitStops;"}, {"question_id": 1019, "answer_sql": "SELECT circuits.name, AVG(lapTimes.milliseconds) as average_lap_time FROM lapTimes JOIN races ON lapTimes.raceId = races.raceId JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.country = 'Italy' GROUP BY circuits.name;"}, {"question_id": 1020, "answer_sql": "SELECT player_api_id FROM Player_Attributes WHERE overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes);"}, {"question_id": 1021, "answer_sql": "SELECT player_name, height FROM Player WHERE height = (SELECT MAX(height) FROM Player);"}, {"question_id": 1022, "answer_sql": "SELECT preferred_foot FROM Player_Attributes WHERE overall_rating = (SELECT MIN(overall_rating) FROM Player_Attributes);"}, {"question_id": 1023, "answer_sql": "SELECT COUNT(*) AS number_of_attacking_players FROM Player_Attributes WHERE overall_rating BETWEEN 60 AND 65 AND defensive_work_rate = 'low';"}, {"question_id": 1024, "answer_sql": "SELECT home_player_X1 AS player_id FROM Match JOIN Team_Attributes ON Match.match_api_id = Team_Attributes.match_api_id WHERE Team_Attributes.chanceCreationCrossing = (SELECT MAX(chanceCreationCrossing) FROM Team_Attributes) LIMIT 5;"}, {"question_id": 1025, "answer_sql": "SELECT league_id, SUM(home_team_goal + away_team_goal) AS total_goals FROM Match WHERE season = '2015/2016' GROUP BY league_id ORDER BY total_goals DESC LIMIT 1;"}, {"question_id": 1026, "answer_sql": "SELECT team_api_id AS Home Team ID , COUNT(*) AS Lost Matches FROM Match JOIN Team ON Match.home_team_api_id = Team.team_api_id WHERE season = '2015/2016' AND (home_team_goal - away_team_goal) < 0 GROUP BY team_api_id ORDER BY Lost Matches ASC LIMIT 1;"}, {"question_id": 1027, "answer_sql": "SELECT player_name FROM Player ORDER BY penalties DESC LIMIT 10;"}, {"question_id": 1028, "answer_sql": "SELECT away_team_api_id, COUNT(*) as wins FROM Match WHERE league_id = (SELECT id FROM League WHERE name = 'Scotland Premier League') AND season = '2009/2010' AND home_team_goal < away_team_goal GROUP BY away_team_api_id ORDER BY wins DESC LIMIT 1;"}, {"question_id": 1029, "answer_sql": "SELECT team_api_id, MAX(buildUpPlaySpeed) AS highest_buildUpPlaySpeed FROM Team_Attributes GROUP BY team_api_id ORDER BY highest_buildUpPlaySpeed DESC LIMIT 4;"}, {"question_id": 1030, "answer_sql": "SELECT league_id, COUNT(*) AS draw_matches FROM Match WHERE season = '2015/2016' AND home_team_goal = away_team_goal GROUP BY league_id ORDER BY draw_matches DESC LIMIT 1;"}, {"question_id": 1031, "answer_sql": "SELECT (STRFTIME('%Y', 'now') - STRFTIME('%Y', birthday)) AS age FROM Player WHERE sprint_speed >= 97 AND STRFTIME('%Y', date) BETWEEN '2013' AND '2015';"}, {"question_id": 1032, "answer_sql": "SELECT name, MAX(match_count) AS max_matches FROM ( SELECT name, COUNT(*) AS match_count FROM Match JOIN League ON Match.league_id = League.id GROUP BY league_id ) AS league_match_counts GROUP BY name ORDER BY max_matches DESC LIMIT 1;"}, {"question_id": 1033, "answer_sql": "SELECT AVG(height) AS average_height FROM Player_Attributes pa JOIN Player p ON pa.id = p.id WHERE p.birthday >= '1990-01-01 00:00:00' AND p.birthday < '1996-01-01 00:00:00';"}, {"question_id": 1034, "answer_sql": "SELECT player_api_id FROM Player_Attributes WHERE overall_rating > ( SELECT AVG(overall_rating) FROM Player_Attributes WHERE substr(date,1,4) = '2010' ) AND substr(date,1,4) = '2010';"}, {"question_id": 1035, "answer_sql": "SELECT team_fifa_api_id FROM Team_Attributes WHERE buildUpPlaySpeed BETWEEN 51 AND 59 GROUP BY team_fifa_api_id HAVING COUNT(*) > 1;"}, {"question_id": 1036, "answer_sql": "SELECT team_long_name FROM Team_Attributes JOIN Team ON Team_Attributes.team_api_id = Team.team_api_id WHERE buildUpPlayPassing > ( SELECT AVG(buildUpPlayPassing) FROM Team_Attributes JOIN Team ON Team_Attributes.team_api_id = Team.team_api_id WHERE buildUpPlayPassing IS NOT NULL AND strftime('%Y', date) = '2012' ) AND strftime('%Y', date) = '2012';"}, {"question_id": 1037, "answer_sql": "SELECT (SUM(CASE WHEN preferred_foot = 'left' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS percentage_left_footed_born_1987_to_1992 FROM Player_Attributes WHERE birthday BETWEEN '1987-01-01 00:00:00' AND '1992-12-31 00:00:00';"}, {"question_id": 1038, "answer_sql": "SELECT l.name AS league_name, SUM(m.home_team_goal + m.away_team_goal) AS total_goals FROM League l JOIN Match m ON l.id = m.league_id GROUP BY l.id ORDER BY total_goals ASC LIMIT 5;"}, {"question_id": 1039, "answer_sql": "SELECT AVG(long_shots) AS average_long_shots FROM Player_Attributes WHERE player_fifa_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Ahmed Samir Farag');"}, {"question_id": 1040, "answer_sql": "SELECT player_name, AVG(heading_accuracy) AS avg_heading_accuracy FROM Player_Attributes JOIN Player ON Player_Attributes.id = Player.id WHERE height > 180 GROUP BY player_name ORDER BY avg_heading_accuracy DESC LIMIT 10;"}, {"question_id": 1041, "answer_sql": "SELECT team_long_name FROM Team JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id WHERE buildUpPlayDribblingClass = 'Normal' AND date >= '2014-01-01 00:00:00' AND date <= '2014-01-31 00:00:00' GROUP BY team_long_name HAVING AVG(chanceCreationPassing) < (SELECT AVG(chanceCreationPassing) FROM Team_Attributes WHERE buildUpPlayDribblingClass = 'Normal' AND date >= '2014-01-01 00:00:00' AND date <= '2014-01-31 00:00:00') ORDER BY AVG(chanceCreationPassing) DESC;"}, {"question_id": 1042, "answer_sql": "SELECT DISTINCT l.name FROM League l JOIN Match m ON l.id = m.league_id WHERE m.season = '2009/2010' GROUP BY l.id HAVING AVG(m.home_team_goal) > AVG(m.away_team_goal);"}, {"question_id": 1043, "answer_sql": "SELECT team_short_name FROM Team WHERE team_long_name = 'Queens Park Rangers';"}, {"question_id": 1044, "answer_sql": "SELECT player_name FROM Player WHERE substr(birthday,1,4) = '1970' AND substr(birthday,6,2) = '10';"}, {"question_id": 1045, "answer_sql": "SELECT pa.player_name, pa.player_api_id, pa.player_fifa_api_id, paa.attacking_work_rate FROM Player pa JOIN Player_Attributes paa ON pa.player_api_id = paa.player_api_id WHERE pa.player_name = 'Franco Zennaro';"}, {"question_id": 1046, "answer_sql": "SELECT buildUpPlayPositioningClass FROM Team_Attributes WHERE team_fifa_api_id = (SELECT team_fifa_api_id FROM Team WHERE team_long_name = 'ADO Den Haag');"}, {"question_id": 1047, "answer_sql": "SELECT heading_accuracy AS Heading Accuracy FROM Player_Attributes WHERE player_api_id IN ( SELECT player_api_id FROM Player WHERE player_name = 'Francois Affolter' ) AND date = '2014-09-18 00:00:00';"}, {"question_id": 1048, "answer_sql": "SELECT player_api_id, overall_rating FROM Player_Attributes WHERE date LIKE '2011%' AND player_api_id IN ( SELECT player_api_id FROM Player WHERE player_name = 'Gabriel Tamas' );"}, {"question_id": 1049, "answer_sql": "SELECT COUNT(*) AS NumberOfMatches FROM Match JOIN Team_Attributes ON Match.home_team_api_id = Team_Attributes.team_api_id WHERE Match.season = '2015/2016' AND Team_Attributes.league_id = ( SELECT id FROM League WHERE name = 'Scotland Premier League' );"}, {"question_id": 1050, "answer_sql": "SELECT preferred_foot FROM Player_Attributes pa JOIN Player p ON pa.id = p.id WHERE p.birthday = (SELECT MIN(birthday) FROM Player);"}, {"question_id": 1051, "answer_sql": "SELECT player_api_id, player_name, potential FROM Player WHERE potential = (SELECT MAX(potential) FROM Player);"}, {"question_id": 1052, "answer_sql": "SELECT COUNT(*) AS left_footed_under_130_weight_players FROM Player_Attributes pa JOIN Player p ON pa.id = p.id WHERE p.weight < 130 AND pa.preferred_foot = 'left';"}, {"question_id": 1053, "answer_sql": "SELECT team_short_name FROM Team_Attributes WHERE chanceCreationPassingClass = 'Risky';"}, {"question_id": 1054, "answer_sql": "SELECT p.player_name, pa.defensive_work_rate FROM Player p JOIN Player_Attributes pa ON p.id = pa.player_fifa_api_id WHERE p.player_name = 'David Wilson';"}, {"question_id": 1055, "answer_sql": "SELECT player_name, birthday FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes);"}, {"question_id": 1056, "answer_sql": "SELECT name FROM League WHERE country_id = (SELECT id FROM Country WHERE name = 'Netherlands');"}, {"question_id": 1057, "answer_sql": "SELECT AVG(home_team_goal) AS average_home_team_goal FROM Match JOIN Team ON Match.home_team_api_id = Team.team_api_id JOIN Country ON Team.country_id = Country.id WHERE Country.name = 'Poland' AND Match.season = '2010/2011';"}, {"question_id": 1058, "answer_sql": "SELECT player_name FROM Player WHERE height = (SELECT MAX(height) FROM Player) OR height = (SELECT MIN(height) FROM Player) ORDER BY finishing DESC LIMIT 1;"}, {"question_id": 1059, "answer_sql": "SELECT player_name FROM Player WHERE height > 180;"}, {"question_id": 1060, "answer_sql": "SELECT COUNT(*) FROM Player WHERE strftime('%Y', birthday) = '1990';"}, {"question_id": 1061, "answer_sql": "SELECT COUNT(*) AS NumberOfPlayers FROM Player_Attributes pa JOIN Player p ON pa.id = p.id WHERE p.player_name LIKE 'Adam%' AND pa.weight > 170;"}, {"question_id": 1062, "answer_sql": "SELECT DISTINCT Player_Attributes.player_name FROM Player_Attributes JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE Player_Attributes.overall_rating > 80 AND strftime('%Y', Player_Attributes.date) BETWEEN '2008' AND '2010';"}, {"question_id": 1063, "answer_sql": "SELECT potential FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Doran');"}, {"question_id": 1064, "answer_sql": "SELECT player_api_id, player_name FROM Player WHERE preferred_foot = 'left';"}, {"question_id": 1065, "answer_sql": "SELECT team_long_name FROM Team JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id WHERE buildUpPlaySpeedClass = 'Fast';"}, {"question_id": 1066, "answer_sql": "SELECT team_short_name, buildUpPlayPassingClass FROM Team_Attributes WHERE team_fifa_api_id = ( SELECT team_fifa_api_id FROM Team WHERE team_short_name = 'CLB' );"}, {"question_id": 1067, "answer_sql": "SELECT team_short_name FROM Team_Attributes WHERE buildUpPlayPassing > 70;"}, {"question_id": 1068, "answer_sql": "SELECT AVG(overall_rating) AS average_overall_rating FROM Player_Attributes WHERE strftime('%Y', date) BETWEEN '2010' AND '2015' AND overall_rating > 170;"}, {"question_id": 1069, "answer_sql": "SELECT player_name, height FROM Player ORDER BY height ASC LIMIT 1;"}, {"question_id": 1070, "answer_sql": "SELECT name FROM Country WHERE id IN (SELECT country_id FROM League WHERE name = 'Italy Serie A');"}, {"question_id": 1071, "answer_sql": "SELECT team_short_name FROM Team_Attributes WHERE buildUpPlaySpeed = 31 AND buildUpPlayDribbling = 53 AND buildUpPlayPassing = 32;"}, {"question_id": 1072, "answer_sql": "SELECT AVG(overall_rating) AS average_overall_rating FROM Player_Attributes WHERE player_api_id IN ( SELECT player_api_id FROM Player WHERE player_name = 'Aaron Doran' );"}, {"question_id": 1073, "answer_sql": "SELECT COUNT(*) AS NumberOfMatches FROM Match JOIN Team_Attributes ON Match.home_team_api_id = Team_Attributes.team_api_id WHERE League.name = 'Germany 1. Bundesliga' AND strftime('%Y-%m', Match.date) BETWEEN '2008-08' AND '2008-10';"}, {"question_id": 1074, "answer_sql": "SELECT team_short_name FROM Team JOIN Match ON Team.team_api_id = Match.home_team_api_id WHERE home_team_goal = 10;"}, {"question_id": 1075, "answer_sql": "SELECT Player.player_name, Player_Attributes.overall_rating AS balance_score, Player_Attributes.potential FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player_Attributes.potential = 61 ORDER BY Player_Attributes.balance DESC LIMIT 1;"}, {"question_id": 1076, "answer_sql": "SELECT (AVG(ball_control) - (SELECT AVG(ball_control) FROM Player_Attributes WHERE player_name = 'Aaron Appindangoye')) AS difference_of_average_ball_control FROM Player_Attributes WHERE player_name = 'Abdou Diallo';"}, {"question_id": 1077, "answer_sql": "SELECT team_long_name FROM Team WHERE team_short_name = 'GEN';"}, {"question_id": 1078, "answer_sql": "SELECT player_name FROM Player WHERE player_api_id IN ( SELECT home_player_1 FROM Match WHERE id = ( SELECT id FROM Match WHERE home_team_api_id = ( SELECT team_api_id FROM Team WHERE team_name = 'Chelsea' ) AND away_team_api_id = ( SELECT team_api_id FROM Team WHERE team_name = 'Real Betis' ) AND date = '2019-01-09' ) ) OR player_api_id IN ( SELECT away_player_1 FROM Match WHERE id = ( SELECT id FROM Match WHERE home_team_api_id = ( SELECT team_api_id FROM Team WHERE team_name = 'Chelsea' ) AND away_team_api_id = ( SELECT team_api_id FROM Team WHERE team_name = 'Real Betis' ) AND date = '2019-01-09' ) ) AND birthday < ( SELECT birthday FROM Player WHERE player_api_id = ( SELECT away_player_1 FROM Match WHERE id = ( SELECT id FROM Match WHERE home_team_api_id = ( SELECT team_api_id FROM Team WHERE team_name = 'Chelsea' ) AND away_team_api_id = ( SELECT team_api_id FROM Team WHERE team_name = 'Real Betis' ) AND date = '2019-01-09' ) ) ORDER BY birthday ASC LIMIT 1;"}, {"question_id": 1079, "answer_sql": "SELECT player_name FROM Player ORDER BY height DESC LIMIT 1;"}, {"question_id": 1080, "answer_sql": "SELECT COUNT(*) AS Number of Players FROM Player_Attributes WHERE preferred_foot = 'left' AND attacking_work_rate = 'low';"}, {"question_id": 1081, "answer_sql": "SELECT name FROM Country WHERE id IN (SELECT country_id FROM League WHERE name = 'Belgium Jupiler League');"}, {"question_id": 1082, "answer_sql": "SELECT DISTINCT l.name FROM League l JOIN Country c ON l.country_id = c.id WHERE c.name = 'Germany';"}, {"question_id": 1083, "answer_sql": "SELECT player_api_id FROM Player_Attributes WHERE overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes);"}, {"question_id": 1084, "answer_sql": "SELECT COUNT(*) AS num_players FROM Player_Attributes pa JOIN Player p ON pa.id = p.id WHERE strftime('%Y', p.birthday) < '1986' AND pa.defensive_work_rate = 'high';"}, {"question_id": 1085, "answer_sql": "SELECT player_api_id FROM Player_Attributes WHERE player_api_id IN ( SELECT player_api_id FROM Player_Attributes WHERE crossing = ( SELECT MAX(crossing) FROM Player_Attributes ) ) GROUP BY player_api_id HAVING COUNT(DISTINCT player_api_id) = 1;"}, {"question_id": 1086, "answer_sql": "SELECT heading_accuracy FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Ariel Borysiuk');"}, {"question_id": 1087, "answer_sql": "SELECT COUNT(*) AS players_count FROM Player_Attributes pa JOIN Player p ON pa.id = p.id WHERE p.height > 180 AND pa.volleys > 70;"}, {"question_id": 1088, "answer_sql": "SELECT player_name FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE volleys > 70 AND dribbling > 70;"}, {"question_id": 1089, "answer_sql": "SELECT COUNT(*) AS matches_in_belgium FROM Match JOIN Team ON Match.home_team_api_id = Team.team_api_id JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id JOIN Country ON Team.country_id = Country.id WHERE Country.name = 'Belgium' AND Match.season = '2008/2009';"}, {"question_id": 1090, "answer_sql": "SELECT long_passing FROM Player_Attributes pa JOIN Player p ON pa.id = p.id ORDER BY p.birthday ASC LIMIT 1;"}, {"question_id": 1091, "answer_sql": "SELECT COUNT(*) AS NumberOfMatches FROM Match JOIN Team_Attributes ON Match.home_team_api_id = Team_Attributes.team_api_id WHERE League.name = 'Belgium Jupiler League' AND strftime('%Y', Match.date) = '2009' AND strftime('%m', Match.date) = '04';"}, {"question_id": 1092, "answer_sql": "SELECT league_id, COUNT(*) as match_count FROM Match WHERE season = '2008/2009' GROUP BY league_id ORDER BY match_count DESC LIMIT 1;"}, {"question_id": 1093, "answer_sql": "SELECT AVG(overall_rating) AS average_overall_rating FROM Player_Attributes JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE strftime('%Y', Player.birthday) < '1986';"}, {"question_id": 1094, "answer_sql": "SELECT ( (SELECT overall_rating FROM Player_Attributes WHERE player_name = 'Ariel Borysiuk') - (SELECT overall_rating FROM Player_Attributes WHERE player_name = 'Paulin Puel') ) / (SELECT overall_rating FROM Player_Attributes WHERE player_name = 'Paulin Puel') * 100 AS percentage_difference"}, {"question_id": 1095, "answer_sql": "SELECT AVG(buildUpPlaySpeed) AS average_build_up_play_speed FROM Team_Attributes JOIN Team ON Team_Attributes.team_api_id = Team.team_api_id WHERE Team.team_long_name = 'Heart of Midlothian';"}, {"question_id": 1096, "answer_sql": "SELECT AVG(overall_rating) AS average_overall_rating FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Pietro Marino';"}, {"question_id": 1097, "answer_sql": "SELECT SUM(crossing) AS total_crossing_score FROM Match JOIN Team_Attributes ON Match.id = Team_Attributes.match_id JOIN Team ON Team_Attributes.team_api_id = Team.team_api_id JOIN Player ON Team.team_api_id = Player.player_api_id WHERE Player.player_name = 'Aaron Lennox';"}, {"question_id": 1098, "answer_sql": "SELECT MAX(chanceCreationPassing), chanceCreationPassingClass FROM Match_Attributes JOIN Team ON Match_Attributes.team_api_id = Team.team_api_id JOIN Player ON Team.team_api_id = Player.player_api_id WHERE Team.team_long_name = 'Ajax' GROUP BY chanceCreationPassingClass;"}, {"question_id": 1099, "answer_sql": "SELECT preferred_foot FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Abdou Diallo');"}, {"question_id": 1100, "answer_sql": "SELECT MAX(overall_rating) AS highest_overall_rating FROM Player_Attributes WHERE player_api_id = (SELECT id FROM Player WHERE player_name = 'Dorlan Pabon');"}, {"question_id": 1101, "answer_sql": "SELECT AVG(away_team_goal) AS average_goals FROM Match JOIN Team_Attributes ON Match.league_id = Team_Attributes.league_id JOIN Team ON Team_Attributes.team_api_id = Team.team_api_id WHERE Team.team_long_name = 'Parma' AND Team.country_id = (SELECT id FROM Country WHERE name = 'Italy');"}, {"question_id": 1102, "answer_sql": "SELECT player_name FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE overall_rating = 77 AND date = '2016-06-23' ORDER BY STRFTIME('%Y-%m-%d', birthday) ASC LIMIT 1;"}, {"question_id": 1103, "answer_sql": "SELECT overall_rating FROM Player_Attributes WHERE player_name = 'Aaron Mooy' AND date = '2016-02-04 00:00:00';"}, {"question_id": 1104, "answer_sql": "SELECT overall_rating, potential FROM Player_Attributes WHERE player_name = 'Francesco Parravicini' AND date = '2010-08-30 00:00:00';"}, {"question_id": 1105, "answer_sql": "SELECT attacking_work_rate FROM Player_Attributes WHERE player_name = 'Francesco Migliore' AND date = '2015-05-01 00:00:00';"}, {"question_id": 1106, "answer_sql": "SELECT dribbling FROM Player_Attributes WHERE player_api_id IN ( SELECT player_api_id FROM Player WHERE player_name = 'Kevin Berigaud' AND date = '2013-02-22 00:00:00' );"}, {"question_id": 1107, "answer_sql": "SELECT date FROM Match JOIN Team_Attributes ON Match.league_id = Team_Attributes.league_id JOIN Player ON Team_Attributes.team_api_id = Player.player_api_id WHERE Player.player_name = 'Kevin Constant' GROUP BY date ORDER BY MAX(crossing) DESC LIMIT 1;"}, {"question_id": 1108, "answer_sql": "SELECT buildUpPlaySpeedClass FROM Team_Attributes WHERE team_fifa_api_id = ( SELECT team_fifa_api_id FROM Team WHERE team_long_name = 'Willem II' ) AND date = '2012-02-22 00:00:00';"}, {"question_id": 1109, "answer_sql": "SELECT buildUpPlayDribblingClass FROM Team_Attributes WHERE team_fifa_api_id = (SELECT team_api_id FROM Team WHERE team_short_name = 'LEI') AND date = '2015-09-10 00:00:00';"}, {"question_id": 1110, "answer_sql": "SELECT buildUpPlayPassingClass FROM Team_Attributes WHERE team_fifa_api_id = (SELECT team_api_id FROM Team WHERE team_long_name = 'FC Lorient') AND date = '2010-02-22';"}, {"question_id": 1111, "answer_sql": "SELECT chance_creation_passing_class FROM Team_Attributes WHERE team_api_id = ( SELECT team_api_id FROM Team WHERE team_long_name = 'PEC Zwolle' ) AND date = '2013-09-20 00:00:00';"}, {"question_id": 1112, "answer_sql": "SELECT chance_creation_crossing_class FROM Team_Attributes JOIN Team ON Team_Attributes.team_api_id = Team.team_api_id WHERE Team.team_long_name = 'Hull City' AND Team_Attributes.date = '2010-02-22';"}, {"question_id": 1113, "answer_sql": "SELECT defenceAggressionClass FROM Team_Attributes WHERE team_api_id = ( SELECT team_api_id FROM Team WHERE team_long_name = 'Hannover 96' ) AND date = '2015-09-10 00:00:00';"}, {"question_id": 1114, "answer_sql": "SELECT AVG(overall_rating) AS average_overall_rating FROM european_football_2.Player_Attributes WHERE player_name = 'Marko Arnautovic' AND date BETWEEN '2007-02-22 00:00:00' AND '2016-04-21 00:00:00';"}, {"question_id": 1115, "answer_sql": "SELECT ROUND(((SELECT overall_rating FROM Player_Attributes WHERE player_name = 'Landon Donovan') - (SELECT overall_rating FROM Player_Attributes WHERE player_name = 'Jordan Bowery')) / (SELECT overall_rating FROM Player_Attributes WHERE player_name = 'Landon Donovan') * 100, 2) AS percentage_higher"}, {"question_id": 1116, "answer_sql": "SELECT player_name FROM Player ORDER BY height DESC LIMIT 5;"}, {"question_id": 1117, "answer_sql": "SELECT player_api_id FROM Player_Attributes ORDER BY weight DESC LIMIT 10;"}, {"question_id": 1118, "answer_sql": "SELECT player_name FROM Player WHERE datetime(CURRENT_TIMESTAMP,'localtime') - datetime(birthday) > 34;"}, {"question_id": 1119, "answer_sql": "SELECT COUNT(*) AS goals_scored_by_aaron_lennon FROM Match JOIN Team_Attributes ON Match.id = Team_Attributes.match_id JOIN Team ON Team_Attributes.home_team_api_id = Team.team_api_id JOIN Player ON Team.player_api_id = Player.id WHERE Player.player_name = 'Aaron Lennon' AND Team_Attributes.home_player_1 = Player.id;"}, {"question_id": 1120, "answer_sql": "SELECT SUM(away_player_11) AS total_goals FROM Match JOIN Player ON Match.away_player_11 = Player.id WHERE Player.player_name IN ('Daan Smith', 'Filipe Ferreira');"}, {"question_id": 1121, "answer_sql": "SELECT SUM(home_player_X1 + home_player_X2 + home_player_X3 + home_player_X4 + home_player_X5 + home_player_X6 + home_player_X7 + home_player_X8 + home_player_X9 + home_player_X10 + home_player_X11) AS total_home_goals FROM Match JOIN Player ON Match.home_player_X1 = Player.id JOIN Player ON Match.home_player_X2 = Player.id JOIN Player ON Match.home_player_X3 = Player.id JOIN Player ON Match.home_player_X4 = Player.id JOIN Player ON Match.home_player_X5 = Player.id JOIN Player ON Match.home_player_X6 = Player.id JOIN Player ON Match.home_player_X7 = Player.id JOIN Player ON Match.home_player_X8 = Player.id JOIN Player ON Match.home_player_X9 = Player.id JOIN Player ON Match.home_player_X10 = Player.id JOIN Player ON Match.home_player_X11 = Player.id WHERE SUBTRACT(datetime(CURRENT_TIMESTAMP,'localtime'), datetime(Player.birthday)) < 31;"}, {"question_id": 1122, "answer_sql": "SELECT player_name FROM Player_Attributes JOIN Player ON Player_Attributes.id = Player.id ORDER BY overall_rating DESC LIMIT 10;"}, {"question_id": 1123, "answer_sql": "SELECT player_name FROM Player WHERE potential = (SELECT MAX(potential) FROM Player);"}, {"question_id": 1124, "answer_sql": "SELECT DISTINCT pa.player_name FROM Player_Attributes pa JOIN Match m ON pa.id = m.id WHERE pa.attacking_work_rate = 'high' AND m.shoton = 'yes';"}, {"question_id": 1125, "answer_sql": "SELECT player_name FROM Player WHERE id IN ( SELECT player_api_id FROM Player_Attributes WHERE finishing = 1 ) ORDER BY birthday ASC LIMIT 1;"}, {"question_id": 1126, "answer_sql": "SELECT Player.player_name FROM Player JOIN Team ON Player.player_api_id = Team.team_api_id JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id JOIN League ON Team.league_id = League.id JOIN Country ON League.country_id = Country.id WHERE Country.name = 'Belgium';"}, {"question_id": 1127, "answer_sql": "SELECT DISTINCT p.player_name, c.name AS country_name FROM Player_Attributes pa JOIN Player p ON pa.id = p.id JOIN Country c ON p.country_id = c.id WHERE pa.vision > 89;"}, {"question_id": 1128, "answer_sql": "SELECT c.name AS country_name, AVG(pa.weight) AS average_weight FROM Country c JOIN Player pa ON c.id = pa.player_api_id GROUP BY c.id ORDER BY average_weight DESC LIMIT 1;"}, {"question_id": 1129, "answer_sql": "SELECT team_long_name FROM Team_Attributes WHERE buildUpPlaySpeedClass = 'Slow';"}, {"question_id": 1130, "answer_sql": "SELECT team_short_name FROM Team_Attributes JOIN Team ON Team_Attributes.team_api_id = Team.team_api_id WHERE chanceCreationPassingClass = 'Safe';"}, {"question_id": 1131, "answer_sql": "SELECT AVG(height) AS average_height FROM Player WHERE country_id = (SELECT id FROM Country WHERE name = 'Italy');"}, {"question_id": 1132, "answer_sql": "SELECT player_name FROM Player WHERE height > 180 ORDER BY player_name ASC LIMIT 3;"}, {"question_id": 1133, "answer_sql": "SELECT COUNT(*) AS NumberOfPlayers FROM Player_Attributes pa JOIN Player p ON pa.id = p.id WHERE p.player_name LIKE 'Aaron%' AND p.birthday > '1990';"}, {"question_id": 1134, "answer_sql": "SELECT (SELECT jumping FROM Player_Attributes WHERE id = 6) - (SELECT jumping FROM Player_Attributes WHERE id = 23) AS jumping_score_difference;"}, {"question_id": 1135, "answer_sql": "SELECT player_api_id FROM Player_Attributes WHERE potential IN ( SELECT MIN(potential) FROM Player_Attributes ) AND preferred_foot = 'right' LIMIT 3;"}, {"question_id": 1136, "answer_sql": "SELECT COUNT(*) AS highest_potential_left_footed_crossing_players FROM Player_Attributes WHERE preferred_foot = 'left' AND overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes WHERE preferred_foot = 'left');"}, {"question_id": 1137, "answer_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Player_Attributes)) AS percentage_above_80 FROM Player_Attributes WHERE stamina > 80 AND strength > 80;"}, {"question_id": 1138, "answer_sql": "SELECT DISTINCT country.name FROM Country JOIN League ON Country.id = League.country_id JOIN Team ON League.id = Team.league_id JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id WHERE Team_Attributes.league_id = (SELECT id FROM League WHERE name = 'Ekstraklasa');"}, {"question_id": 1139, "answer_sql": "SELECT home_team_goal AS Home Team Goals , away_team_goal AS Away Team Goals FROM Match WHERE date = '2008-09-24%';"}, {"question_id": 1140, "answer_sql": "SELECT sprint_speed, agility, acceleration FROM Player_Attributes WHERE player_name = 'Alexis Blin';"}, {"question_id": 1141, "answer_sql": "SELECT buildUpPlaySpeedClass FROM Team_Attributes WHERE team_fifa_api_id = ( SELECT team_fifa_api_id FROM Team WHERE team_long_name = 'KSV Cercle Brugge' );"}, {"question_id": 1142, "answer_sql": "SELECT COUNT(*) AS total_games_played FROM Match WHERE season = '2015/2016';"}, {"question_id": 1143, "answer_sql": "SELECT MAX(home_team_goal) AS highest_home_team_score FROM Match JOIN Team ON Match.home_team_api_id = Team.team_api_id JOIN League ON Team.league_id = League.id WHERE League.name = 'Eredivisie';"}, {"question_id": 1144, "answer_sql": "SELECT finishing, curve FROM Player_Attributes WHERE id = ( SELECT id FROM Player_Attributes ORDER BY weight DESC LIMIT 1 );"}, {"question_id": 1145, "answer_sql": "SELECT league_name, COUNT(*) AS games_count FROM Match JOIN Team ON Match.home_team_api_id = Team.team_api_id WHERE Match.season = '2015/2016' GROUP BY league_name ORDER BY games_count DESC LIMIT 1;"}, {"question_id": 1146, "answer_sql": "SELECT team_long_name FROM Team WHERE id = ( SELECT away_team_api_id FROM Match WHERE away_team_goal = ( SELECT MAX(away_team_goal) FROM Match ) );"}, {"question_id": 1147, "answer_sql": "SELECT player_api_id FROM Player_Attributes WHERE overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes);"}, {"question_id": 1148, "answer_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Player_Attributes)) AS percentage FROM Player_Attributes WHERE height < 180 AND overall_rating > 70;"}, {"question_id": 1149, "answer_sql": "SELECT (COUNT(CASE WHEN Admission = '+' THEN 1 END) - COUNT(CASE WHEN Admission = '-' THEN 1 END)) * 100.0 / COUNT(*) AS deviation_percentage FROM Patient WHERE SEX = 'M';"}, {"question_id": 1150, "answer_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Patient WHERE SEX = 'F')) AS percentage FROM Patient WHERE SEX = 'F' AND (strftime('%Y', Birthday) > '1930');"}, {"question_id": 1151, "answer_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Patient WHERE year(Birthday) BETWEEN 1930 AND 1940)) AS PercentageInpatient FROM Patient WHERE Admission = '+';"}, {"question_id": 1152, "answer_sql": "SELECT DIVIDE(COUNT(*), SUM(CASE WHEN Admission = '+' THEN 1 ELSE 0 END)) AS ratio FROM Examination JOIN Patient ON Examination.ID = Patient.ID WHERE Diagnosis = 'SLE';"}, {"question_id": 1153, "answer_sql": "SELECT Laboratory.Date, Examination.Diagnosis FROM Laboratory JOIN Examination ON Laboratory.ID = Examination.ID WHERE Examination.ID = 30609;"}, {"question_id": 1154, "answer_sql": "SELECT Patient.SEX, Patient.Birthday, Examination.Examination Date, Examination.Symptoms FROM Examination JOIN Patient ON Examination.ID = Patient.ID WHERE Examination.ID = '163109';"}, {"question_id": 1155, "answer_sql": "SELECT Patient.ID, Patient.SEX, Patient.Birthday FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.LDH > 500;"}, {"question_id": 1156, "answer_sql": "SELECT Patient.ID, (strftime('%Y', 'now') - strftime('%Y', Patient.Birthday)) AS Age FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.RVVT = '+';"}, {"question_id": 1157, "answer_sql": "SELECT Patient.ID, Patient.SEX, Patient.Diagnosis FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.Thrombosis = 2;"}, {"question_id": 1158, "answer_sql": "SELECT Patient.ID, Patient.SEX, Patient.Birthday FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE YEAR(Patient.Birthday) = 1937 AND Laboratory.`T-CHO` >= 250;"}, {"question_id": 1159, "answer_sql": "SELECT Patient.ID, Patient.SEX, Examination.Diagnosis FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.ALB < 3.5;"}, {"question_id": 1160, "answer_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Patient WHERE SEX = 'F')) AS percentage FROM Laboratory WHERE TP < 6.0 OR TP > 8.5 AND ID IN (SELECT ID FROM Patient WHERE SEX = 'F');"}, {"question_id": 1161, "answer_sql": "SELECT AVG(aCL_IgG) AS average_aCL_IgG FROM Examination JOIN Patient ON Examination.ID = Patient.ID WHERE Admission = '+';"}, {"question_id": 1162, "answer_sql": "SELECT COUNT(*) AS NumberOfFemalePatients FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE p.SEX = 'F' AND strftime('%Y', p.Description) = '1997' AND e.Admission = '-';"}, {"question_id": 1163, "answer_sql": "SELECT MIN(SUBTRACT(YEAR(Birthday), YEAR(`First Date`))) AS youngest_age FROM Patient;"}, {"question_id": 1164, "answer_sql": "SELECT COUNT(*) AS NumberOfWomenWithSeriousThrombosis FROM Examination JOIN Patient ON Examination.ID = Patient.ID WHERE Thrombosis = '1' AND SEX = 'F' AND strftime('%Y', `Examination Date`) = '1997';"}, {"question_id": 1165, "answer_sql": "SELECT MAX(year(Birthday)) - MIN(year(Birthday)) AS age_gap FROM Patient WHERE ID IN ( SELECT ID FROM Laboratory WHERE TG >= 200 )"}, {"question_id": 1166, "answer_sql": "SELECT Symptoms, Diagnosis FROM Examination JOIN Patient ON Examination.ID = Patient.ID WHERE Birthday = (SELECT MIN(Birthday) FROM Patient)"}, {"question_id": 1167, "answer_sql": "SELECT AVG(monthly_counts.count) AS average_monthly_tests FROM ( SELECT COUNT(Laboratory.ID) AS count FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.Date BETWEEN '1998-01-01' AND '1998-12-31' AND Patient.SEX = 'M' GROUP BY strftime('%Y-%m', Laboratory.Date) ) AS monthly_counts;"}, {"question_id": 1168, "answer_sql": "SELECT MAX(Laboratory.Date) AS Oldest SJS Lab Date , TIMESTAMPDIFF(YEAR, Patient.Birthday, Patient.`First Date`) AS Age at Initial Arrival FROM Examination JOIN Patient ON Examination.ID = Patient.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Examination.Diagnosis = 'SJS' GROUP BY Patient.ID ORDER BY Patient.Birthday ASC LIMIT 1;"}, {"question_id": 1169, "answer_sql": "SELECT CAST(SUM(CASE WHEN SEX = 'M' AND UA <= 8.0 THEN 1 ELSE 0 END) AS REAL) / CAST(SUM(CASE WHEN SEX = 'F' AND UA <= 6.5 THEN 1 ELSE 0 END) AS REAL) AS MaleToFemaleRatio FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE UA <= 8.0 AND UA <= 6.5;"}, {"question_id": 1170, "answer_sql": "SELECT COUNT(*) AS PatientsWithoutExamination FROM Patient p LEFT JOIN Examination e ON p.ID = e.ID WHERE (YEAR(e.`Examination Date`) - YEAR(p.`First Date`)) <= 1 OR e.`Examination Date` IS NULL;"}, {"question_id": 1171, "answer_sql": "SELECT COUNT(*) AS UnderagePatientsExamined FROM Examination e JOIN Patient p ON e.ID = p.ID WHERE p.Birthday < '1990-01-01' AND e.`Examination Date` BETWEEN '1990-01-01' AND '1993-12-31';"}, {"question_id": 1172, "answer_sql": "SELECT COUNT(*) AS NumberOfMalePatientsWithElevatedTbil FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE p.SEX = 'M' AND e.T-BIL > 2.0;"}, {"question_id": 1173, "answer_sql": "SELECT Diagnosis, COUNT(*) as frequency FROM Examination JOIN Patient ON Examination.ID = Patient.ID WHERE `Examination Date` BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY Diagnosis ORDER BY frequency DESC LIMIT 1;"}, {"question_id": 1174, "answer_sql": "SELECT AVG(strftime('%Y', '1991-10-01') - strftime('%Y', Birthday)) AS average_age FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.Date BETWEEN '1991-10-01' AND '1991-10-30';"}, {"question_id": 1175, "answer_sql": "SELECT Patient.ID, Patient.SEX, Patient.Birthday, (strftime('%Y', 'now') - strftime('%Y', Patient.Birthday)) AS Age, Examination.Diagnosis FROM Examination JOIN Patient ON Examination.ID = Patient.ID WHERE HGB = (SELECT MAX(HGB) FROM Examination) ORDER BY Age DESC LIMIT 1;"}, {"question_id": 1176, "answer_sql": "SELECT aCL IgG, aCL IgM, aCL IgA FROM Examination WHERE ID = 3605340 AND `Examination Date` = '1996-12-02';"}, {"question_id": 1177, "answer_sql": "SELECT CASE WHEN TG < 250 THEN 'Normal' ELSE 'High' END AS CholesterolStatus FROM Laboratory WHERE ID = 2927464 AND Date = '1995-09-04';"}, {"question_id": 1178, "answer_sql": "SELECT SEX FROM Patient WHERE ID IN (SELECT ID FROM Examination WHERE Diagnosis = 'AORTITIS' ORDER BY `Examination Date` ASC LIMIT 1);"}, {"question_id": 1179, "answer_sql": "SELECT aCL_IgM FROM Laboratory JOIN Examination ON Laboratory.ID = Examination.ID JOIN Patient ON Examination.ID = Patient.ID WHERE Patient.Description = '1994-02-19' AND Patient.Diagnosis = 'SLE' AND Laboratory.Date = '1993/11/12';"}, {"question_id": 1180, "answer_sql": "SELECT DISTINCT P.SEX FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.GPT = 9 AND L.Date = '1992-06-12';"}, {"question_id": 1181, "answer_sql": "SELECT TIMESTAMPDIFF(YEAR, Patient.Birthday, '1991-10-21') AS Age FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.UA = '8.4' AND Laboratory.Date = '1991-10-21';"}, {"question_id": 1182, "answer_sql": "SELECT COUNT(*) AS TotalLabTests FROM Laboratory JOIN Patient ON Laboratory.ID = Patient.ID WHERE Patient.FirstDate = '1991-06-13' AND Patient.Diagnosis = 'SJS' AND strftime('%Y', Laboratory.Date) = '1995';"}, {"question_id": 1183, "answer_sql": "SELECT p.Diagnosis FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE e.`Examination Date` = '1997-01-27' AND p.Diagnosis = 'SLE' AND p.`First Date` = (SELECT MIN(e2.`Examination Date`) FROM Examination e2 WHERE e2.ID = p.ID);"}, {"question_id": 1184, "answer_sql": "SELECT Symptoms FROM Examination JOIN Patient ON Examination.ID = Patient.ID WHERE Patient.Birthday = '1959-03-01' AND Examination.Examination_Date = '1993-09-27';"}, {"question_id": 1185, "answer_sql": "SELECT (SUM(CASE WHEN strftime('%Y-%m', Date) = '1981-11' THEN TG ELSE 0 END) - SUM(CASE WHEN strftime('%Y-%m', Date) = '1981-12' THEN TG ELSE 0 END)) AS DecreaseRate FROM Laboratory JOIN Patient ON Laboratory.ID = Patient.ID WHERE Patient.Birthday = '1959-02-18' AND strftime('%Y', Date) = '1981';"}, {"question_id": 1186, "answer_sql": "SELECT Patient.ID FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.Diagnosis = 'Behcet' AND YEAR(Examination.`Examination Date`) >= '1997-01-01' AND YEAR(Examination.`Examination Date`) <= '1997-12-31';"}, {"question_id": 1187, "answer_sql": "SELECT Patient.ID FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Examination.Date BETWEEN '1987-07-06' AND '1996-01-31' AND Laboratory.GPT > 30 AND Laboratory.ALB < 4 GROUP BY Patient.ID;"}, {"question_id": 1188, "answer_sql": "SELECT Patient.ID FROM Patient WHERE SEX = 'F' AND YEAR(Birthday) = 1964 AND Admission = '+';"}, {"question_id": 1189, "answer_sql": "SELECT COUNT(*) FROM Examination JOIN Patient ON Examination.ID = Patient.ID WHERE Thrombosis = 2 AND ANA = 'S' AND aCL_IgM > (SELECT AVG(aCL_IgM) * 1.2 FROM Examination);"}, {"question_id": 1190, "answer_sql": "SELECT (SUM(CASE WHEN UA <= 6.5 THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS percentage FROM Laboratory JOIN Examination ON Laboratory.ID = Examination.ID WHERE `U-PRO` > 0 AND `U-PRO` < 30;"}, {"question_id": 1191, "answer_sql": "SELECT ROUND( (SUM(CASE WHEN Diagnosis = 'BEHCET' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) , 2) AS Percentage of Male Patients Diagnosed with BEHCET in 1981 FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE SEX = 'M' AND YEAR(`FIRST DATE`) = '1981';"}, {"question_id": 1192, "answer_sql": "SELECT Patient.ID, Patient.SEX, Patient.Birthday, Patient.Description, Patient.`First Date`, Patient.Admission, Patient.Diagnosis FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.Admission = '-' AND Laboratory.Date LIKE '1991-10%' AND Laboratory.T-BIL < 2.0;"}, {"question_id": 1193, "answer_sql": "SELECT COUNT(*) FROM Examination e JOIN Patient p ON e.ID = p.ID WHERE p.SEX = 'F' AND p.Birthday BETWEEN '1980-01-01' AND '1989-12-31' AND e.ANA_Pattern != 'p';"}, {"question_id": 1194, "answer_sql": "SELECT DISTINCT p.SEX FROM Patient p JOIN Examination e ON p.ID = e.ID JOIN Laboratory l ON p.ID = l.ID WHERE e.Diagnosis = 'PSS' AND l.CRP > 2 AND l.CRE = 1 AND l.LDH = 123;"}, {"question_id": 1195, "answer_sql": "SELECT AVG(Laboratory.ALB) AS average_albumin FROM Laboratory JOIN Examination ON Laboratory.ID = Examination.ID JOIN Patient ON Laboratory.ID = Patient.ID WHERE Patient.SEX = 'F' AND Examination.Thrombosis = 1 AND Laboratory.PLT > 400 AND Examination.Diagnosis LIKE '%SLE%';"}, {"question_id": 1196, "answer_sql": "SELECT Symptoms FROM Examination WHERE Diagnosis = 'SLE' ORDER BY Symptoms DESC LIMIT 1;"}, {"question_id": 1197, "answer_sql": "SELECT Patient.Description, Examination.Diagnosis FROM Examination JOIN Patient ON Examination.ID = Patient.ID WHERE Patient.ID = 48473 ORDER BY Patient.FirstDate LIMIT 1;"}, {"question_id": 1198, "answer_sql": "SELECT COUNT(*) AS NumberOfFemaleAPSPatients FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Patient.SEX = 'F' AND Examination.Diagnosis = 'APS';"}, {"question_id": 1199, "answer_sql": "SELECT COUNT(DISTINCT Patient.ID) AS NumberOfPatients FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE YEAR(Laboratory.Date) = '1997' AND (Laboratory.TP < 6 OR Laboratory.TP > 8.5);"}, {"question_id": 1200, "answer_sql": "SELECT (SUM(CASE WHEN Diagnosis LIKE '%SLE%' THEN 1 ELSE 0 END) * 100.0 / NULLIF(SUM(CASE WHEN Symptoms LIKE '%thrombocytopenia%' THEN 1 ELSE 0 END), 0)) AS Proportion FROM Examination JOIN Patient ON Examination.ID = Patient.ID WHERE Symptoms LIKE '%thrombocytopenia%' AND Diagnosis LIKE '%SLE%';"}, {"question_id": 1201, "answer_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Patient WHERE YEAR(BIRTHDAY) = '1980')) AS percentage FROM Examination JOIN Patient ON Examination.ID = Patient.ID WHERE YEAR(BIRTHDAY) = '1980' AND Diagnosis = 'RA' AND SEX = 'F';"}, {"question_id": 1202, "answer_sql": "SELECT COUNT(*) AS NumberOfPatients FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE p.SEX = 'M' AND e.`Examination Date` BETWEEN '1995-01-01' AND '1997-12-31' AND e.Diagnosis = 'BEHCET' AND p.Admission = '-';"}, {"question_id": 1203, "answer_sql": "SELECT COUNT(*) AS NumberOfPatients FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE p.SEX = 'F' AND e.WBC < 3.5;"}, {"question_id": 1204, "answer_sql": "SELECT DATEDIFF(Examination.Examination Date, Patient.First Date) AS DaysToFirstEvaluation FROM Examination JOIN Patient ON Examination.ID = Patient.ID WHERE Patient.ID = 821298;"}, {"question_id": 1205, "answer_sql": "SELECT * FROM Laboratory WHERE ID = 57266 AND SEX = 'M' AND UA > 8.0;"}, {"question_id": 1206, "answer_sql": "SELECT `Examination Date` FROM Examination JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Laboratory.GOT >= 60 AND Laboratory.ID = (SELECT ID FROM Patient WHERE Patient.ID = 48473);"}, {"question_id": 1207, "answer_sql": "SELECT Patient.SEX, Patient.Birthday FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.Date BETWEEN '1994-01-01' AND '1994-12-31' AND Examination.GOT < 60;"}, {"question_id": 1208, "answer_sql": "SELECT DISTINCT Patient.ID FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.SEX = 'M' AND Laboratory.GPT >= 60;"}, {"question_id": 1209, "answer_sql": "SELECT Patient.Diagnosis FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.GPT > 60 ORDER BY Patient.Birthday DESC;"}, {"question_id": 1210, "answer_sql": "SELECT AVG(Laboratory.LDH) AS average_LDH FROM Laboratory JOIN Examination ON Laboratory.ID = Examination.ID WHERE Laboratory.LDH < 500;"}, {"question_id": 1211, "answer_sql": "SELECT Patient.ID, (strftime('%Y', 'now') - strftime('%Y', Patient.Birthday)) AS Age FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.LDH BETWEEN 600 AND 800;"}, {"question_id": 1212, "answer_sql": "SELECT Patient.Admission, COUNT(*) AS NumberOfPatients FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.ALP < 300 GROUP BY Patient.Admission;"}, {"question_id": 1213, "answer_sql": "SELECT Patient.ID FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.Birthday = '1982-04-01' AND Laboratory.ALP < 300;"}, {"question_id": 1214, "answer_sql": "SELECT Patient.ID, Patient.SEX, Patient.Birthday FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.TP < 6.0;"}, {"question_id": 1215, "answer_sql": "SELECT (TP - 8.5) AS TP_Deviation FROM Laboratory JOIN Patient ON Laboratory.ID = Patient.ID WHERE Patient.SEX = 'F' AND TP > 8.5;"}, {"question_id": 1216, "answer_sql": "SELECT * FROM Patient WHERE SEX = 'M' AND (ALB <= 3.5 OR ALB >= 5.5) ORDER BY Birthday DESC;"}, {"question_id": 1217, "answer_sql": "SELECT P.ID, P.Birthday, L.ALB FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE YEAR(P.Birthday) = 1982 AND L.ALB BETWEEN 3.5 AND 5.5;"}, {"question_id": 1218, "answer_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Patient WHERE SEX = 'F')) AS percentage_female_with_high_UA FROM Examination JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE (UA > 8.0 OR (UA > 6.5 AND SEX = 'F')) AND SEX = 'F';"}, {"question_id": 1219, "answer_sql": "SELECT AVG(Laboratory.UA) AS average_UA_index FROM Laboratory JOIN Examination ON Laboratory.ID = Examination.ID JOIN Patient ON Laboratory.ID = Patient.ID WHERE Laboratory.UA < 8.0 AND Patient.SEX = 'M' OR Laboratory.UA < 6.5 AND Patient.SEX = 'F' AND Laboratory.Date = ( SELECT MAX(Date) FROM Laboratory AS Lab WHERE Lab.ID = Laboratory.ID );"}, {"question_id": 1220, "answer_sql": "SELECT Patient.ID, Patient.SEX, Patient.Birthday FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.UN = 29;"}, {"question_id": 1221, "answer_sql": "SELECT Patient.ID, Patient.SEX, Patient.Birthday FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.Diagnosis = 'RA' AND Examination.UN < 30;"}, {"question_id": 1222, "answer_sql": "SELECT COUNT(*) AS NumberOfMalePatientsWithHighCreatinine FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.SEX = 'M' AND l.CRE >= 1.5;"}, {"question_id": 1223, "answer_sql": "SELECT (SUM(CASE WHEN Sex = 'M' THEN 1 ELSE 0 END) > SUM(CASE WHEN Sex = 'F' THEN 1 ELSE 0 END)) AS more_males_than_females FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.CRE >= 1.5;"}, {"question_id": 1224, "answer_sql": "SELECT Patient.ID, Patient.SEX, Patient.Birthday FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.T-BIL = (SELECT MAX(T-BIL) FROM Examination);"}, {"question_id": 1225, "answer_sql": "SELECT P.SEX, COUNT(*) as NumberOfPatients FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE E.`T-BIL` >= 2.0 GROUP BY P.SEX;"}, {"question_id": 1226, "answer_sql": "SELECT Patient.ID, MAX(Laboratory.T-CHO) AS T-CHO FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID GROUP BY Patient.ID ORDER BY Patient.Birthday ASC LIMIT 1;"}, {"question_id": 1227, "answer_sql": "SELECT AVG(SUBRACT(YEAR(NOW()), YEAR(birthday))) AS average_age FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.SEX = 'M' AND Laboratory.T-CHO >= 250;"}, {"question_id": 1228, "answer_sql": "SELECT Patient.ID, Patient.Diagnosis FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.TG > 300;"}, {"question_id": 1229, "answer_sql": "SELECT COUNT(*) AS NumberOfPatients FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.TG >= 200 AND (YEAR(CURRENT_TIMESTAMP) - YEAR(p.Birthday)) > 50;"}, {"question_id": 1230, "answer_sql": "SELECT DISTINCT Examination.ID FROM Examination JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Laboratory.CPK < 250 AND Examination.Admission = '-';"}, {"question_id": 1231, "answer_sql": "SELECT COUNT(*) AS NumberOfPatients FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE p.SEX = 'M' AND p.Birthday BETWEEN '1936' AND '1956' AND e.CPK >= 250;"}, {"question_id": 1232, "answer_sql": "SELECT Patient.ID, Patient.SEX, (YEAR(CURRENT_TIMESTAMP) - YEAR(Patient.Birthday)) AS age FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.GLU >= 180 AND Laboratory.T-CHO < 250;"}, {"question_id": 1233, "answer_sql": "SELECT Patient.ID, Laboratory.GLU AS GlucoseIndex FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.Date >= '1991-01-01' AND Laboratory.GLU < 180 ORDER BY Patient.ID;"}, {"question_id": 1234, "answer_sql": "SELECT Patient.ID, Patient.SEX, Patient.Birthday FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.WBC <= 3.5 OR Laboratory.WBC >= 9.0 GROUP BY Patient.SEX ORDER BY Patient.Birthday ASC;"}, {"question_id": 1235, "answer_sql": "SELECT Patient.ID, (YEAR(CURRENT_TIMESTAMP) - YEAR(Patient.Birthday)) AS Age FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.RBC < 3.5"}, {"question_id": 1236, "answer_sql": "SELECT Patient.ID, Patient.SEX, Patient.Birthday, Patient.Admission FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Patient.SEX = 'F' AND (YEAR(CURRENT_TIMESTAMP) - YEAR(Patient.Birthday)) >= 50 AND (Examination.RBC <= 3.5 OR Examination.RBC >= 6.0);"}, {"question_id": 1237, "answer_sql": "SELECT Patient.ID, Patient.SEX FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.Thrombosis = 0 AND Examination.HGB < 10;"}, {"question_id": 1238, "answer_sql": "SELECT Patient.ID, Patient.SEX FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Examination.Diagnosis = 'SLE' AND Laboratory.HGB BETWEEN 10 AND 17 ORDER BY Patient.Birthday ASC LIMIT 1;"}, {"question_id": 1239, "answer_sql": "SELECT Patient.ID, (YEAR(CURRENT_TIMESTAMP) - YEAR(Patient.Birthday)) AS age FROM Patient JOIN ( SELECT Examination.ID FROM Examination JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Laboratory.HCT >= 52 GROUP BY Examination.ID HAVING COUNT(Examination.ID) > 2 ) AS ExamCount ON Patient.ID = ExamCount.ID"}, {"question_id": 1240, "answer_sql": "SELECT AVG(HCT) AS AverageHematocrit FROM Laboratory WHERE Date LIKE '1991%' AND HCT < 29;"}, {"question_id": 1241, "answer_sql": "SELECT (SELECT COUNT(*) FROM Laboratory WHERE PLT < 100) AS Low_Platelet_Count, (SELECT COUNT(*) FROM Laboratory WHERE PLT > 400) AS High_Platelet_Count, (SELECT COUNT(*) FROM Laboratory WHERE PLT < 100) - (SELECT COUNT(*) FROM Laboratory WHERE PLT > 400) AS Difference"}, {"question_id": 1242, "answer_sql": "SELECT Patient.ID, Patient.SEX, Patient.Birthday FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.Date LIKE '1984%' AND (YEAR(CURRENT_TIMESTAMP) - YEAR(Patient.Birthday)) < 50 AND Laboratory.PLT BETWEEN 100 AND 400;"}, {"question_id": 1243, "answer_sql": "SELECT (SUM(CASE WHEN PT >= 14 AND SEX = 'F' THEN 1 ELSE 0 END) * 1.0 / SUM(CASE WHEN PT >= 14 THEN 1 ELSE 0 END)) * 100 AS percentage FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE (YEAR(CURRENT_TIMESTAMP) - YEAR(p.Birthday)) > 55;"}, {"question_id": 1244, "answer_sql": "SELECT Patient.ID, Patient.SEX, Patient.Birthday, Patient.`First Date` FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE YEAR(Patient.`First Date`) > 1992 AND Examination.PT < 14;"}, {"question_id": 1245, "answer_sql": "SELECT COUNT(*) FROM Examination WHERE `Examination Date` > '1997-01-01' AND APTT < 45;"}, {"question_id": 1246, "answer_sql": "SELECT COUNT(DISTINCT Examination.ID) AS MildThrombosisCount FROM Examination JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Laboratory.APTT > 45 AND Examination.Thrombosis = 3;"}, {"question_id": 1247, "answer_sql": "SELECT COUNT(DISTINCT Laboratory.ID) AS NumberOfPatients FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.SEX = 'M' AND Examination.WBC BETWEEN 3.5 AND 9.0 AND (Laboratory.FG <= 150 OR Laboratory.FG >= 450);"}, {"question_id": 1248, "answer_sql": "SELECT COUNT(DISTINCT Patient.ID) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.Birthday > '1980-01-01' AND Laboratory.FG BETWEEN 150 AND 450;"}, {"question_id": 1249, "answer_sql": "SELECT DISTINCT Patient.Diagnosis FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.`U-PRO` >= 30;"}, {"question_id": 1250, "answer_sql": "SELECT Patient.ID FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.U-PRO BETWEEN 0 AND 30 AND Examination.Diagnosis = 'SLE';"}, {"question_id": 1251, "answer_sql": "SELECT COUNT(*) AS NumberOfPatients FROM Examination JOIN Patient ON Examination.ID = Patient.ID WHERE IGG < 900 AND Symptoms LIKE '%abortion%';"}, {"question_id": 1252, "answer_sql": "SELECT COUNT(*) FROM Examination JOIN Patient ON Examination.ID = Patient.ID WHERE Examination.aCL_IgG BETWEEN 900 AND 2000 AND Examination.Symptoms IS NOT NULL;"}, {"question_id": 1253, "answer_sql": "SELECT Patient.Diagnosis FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.aCL IgA BETWEEN 80 AND 500 ORDER BY Examination.aCL IgA DESC LIMIT 1;"}, {"question_id": 1254, "answer_sql": "SELECT COUNT(*) AS NumberOfPatients FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.IGA BETWEEN 80 AND 500 AND YEAR(p.`First Date`) >= 1990;"}, {"question_id": 1255, "answer_sql": "SELECT Diagnosis, COUNT(*) as DiagnosisCount FROM Examination WHERE IGM NOT BETWEEN 40 AND 400 GROUP BY Diagnosis ORDER BY DiagnosisCount DESC LIMIT 1;"}, {"question_id": 1256, "answer_sql": "SELECT COUNT(*) FROM Patient p LEFT JOIN Laboratory l ON p.ID = l.ID WHERE (l.CRP LIKE '+' OR l.CRP LIKE '-' OR l.CRP < 1.0) AND p.Description IS NULL;"}, {"question_id": 1257, "answer_sql": "SELECT COUNT(DISTINCT Examination.ID) AS NumberOfPatients FROM Examination JOIN Patient ON Examination.ID = Patient.ID JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Laboratory.CRP NOT IN('+-', '-') AND Laboratory.CRP >= 1.0 AND (YEAR(CURDATE()) - YEAR(Patient.Birthday)) < 18;"}, {"question_id": 1258, "answer_sql": "SELECT COUNT(DISTINCT Patient.ID) AS NumberOfPatients FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.RA IN('-', '+-') AND Laboratory.KCT = '+';"}, {"question_id": 1259, "answer_sql": "SELECT DISTINCT Patient.Diagnosis FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE YEAR(Patient.Birthday) > 1995 AND Laboratory.RA IN ('-', '+-');"}, {"question_id": 1260, "answer_sql": "SELECT Patient.ID FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.RF < 20 AND (YEAR(CURDATE()) - YEAR(Patient.Birthday)) > 60;"}, {"question_id": 1261, "answer_sql": "SELECT COUNT(*) AS NumberOfPatients FROM Patient p JOIN Examination e ON p.ID = e.ID JOIN Laboratory l ON p.ID = l.ID WHERE l.RF < 20 AND e.Thrombosis = '0';"}, {"question_id": 1262, "answer_sql": "SELECT COUNT(DISTINCT Examination.ID) AS NumberOfPatients FROM Examination JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Laboratory.C3 > 35 AND Examination.ANA_Pattern = 'P';"}, {"question_id": 1263, "answer_sql": "SELECT Examination.ID FROM Examination JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Laboratory.ALP < 29 AND Laboratory.ALP > 52 AND Laboratory.aCL IgA = (SELECT MAX(aCL IgA) FROM Laboratory WHERE ID = Examination.ID);"}, {"question_id": 1264, "answer_sql": "SELECT COUNT(DISTINCT Patient.ID) AS NumberOfPatients FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Examination.Thrombosis = 1 AND Laboratory.C4 > 10;"}, {"question_id": 1265, "answer_sql": "SELECT COUNT(DISTINCT Patient.ID) AS NumberOfPatients FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.RNP = '-' OR Laboratory.RNP = '+-' AND Laboratory.Admission = '+';"}, {"question_id": 1266, "answer_sql": "SELECT Patient.Birthday FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.RNP NOT IN ('-', '+-') ORDER BY Patient.Birthday DESC LIMIT 1;"}, {"question_id": 1267, "answer_sql": "SELECT COUNT(*) FROM Examination WHERE SM IN('-', '+-') AND Thrombosis = 1;"}, {"question_id": 1268, "answer_sql": "SELECT Patient.ID FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.SM NOT IN('-', '+-') ORDER BY Patient.Birthday DESC LIMIT 3;"}, {"question_id": 1269, "answer_sql": "SELECT DISTINCT Examination.ID FROM Examination JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Examination.Examination_Date >= '1997-01-01' AND Laboratory.SC170 IN ('-', '+-');"}, {"question_id": 1270, "answer_sql": "SELECT COUNT(DISTINCT Examination.ID) AS NumberOfPatients FROM Examination JOIN Patient ON Examination.ID = Patient.ID WHERE SC170 IN('-', '+-') AND Sex = 'M' AND Symptoms = 'vertigo';"}, {"question_id": 1271, "answer_sql": "SELECT COUNT(DISTINCT Patient.ID) AS NumberOfPatients FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.SSA IN('-','+-') AND YEAR(Patient.`First Date`) < 1990;"}, {"question_id": 1272, "answer_sql": "SELECT Patient.ID FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Examination.SSA NOT IN('-', '+-') GROUP BY Patient.ID ORDER BY Examination.`First Date` ASC LIMIT 1;"}, {"question_id": 1273, "answer_sql": "SELECT COUNT(DISTINCT Examination.ID) AS NumberOfPatients FROM Examination JOIN Patient ON Examination.ID = Patient.ID WHERE Examination.SSB IN ('-', '+-') AND Examination.Diagnosis = 'SLE';"}, {"question_id": 1274, "answer_sql": "SELECT COUNT(DISTINCT Examination.ID) AS PatientsWithOtherSymptoms FROM Examination JOIN Patient ON Examination.ID = Patient.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.SSB IN('-', '+-') AND Examination.Symptoms IS NOT NULL;"}, {"question_id": 1275, "answer_sql": "SELECT COUNT(*) AS MalePatientsWithNormalLevels FROM Patient p JOIN Examination e ON p.ID = e.ID JOIN Laboratory l ON p.ID = l.ID WHERE l.CENTROMEA IN('-', '+-') AND l.SSB IN('-', '+-') AND p.SEX = 'M';"}, {"question_id": 1276, "answer_sql": "SELECT DISTINCT Examination.Diagnosis FROM Examination JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Laboratory.DNA >= 8;"}, {"question_id": 1277, "answer_sql": "SELECT COUNT(DISTINCT Patient.ID) AS UnrecordedPatientsWithNormalAntiDNA FROM Patient LEFT JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.DNA-II < 8 AND Patient.Description IS NULL;"}, {"question_id": 1278, "answer_sql": "SELECT COUNT(*) AS NumberOfPatientsAdmitted FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.DNA-II < 8 AND l.Admission = '+';"}, {"question_id": 1279, "answer_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Laboratory WHERE GOT >= 60)) AS percentage FROM Examination JOIN Patient ON Examination.ID = Patient.ID WHERE Diagnosis = 'SLE' AND GOT >= 60;"}, {"question_id": 1280, "answer_sql": "SELECT COUNT(*) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.SEX = 'M' AND l.GOT < 60;"}, {"question_id": 1281, "answer_sql": "SELECT MIN(Birthday) AS YoungestBirthday FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE GOT >= 60;"}, {"question_id": 1282, "answer_sql": "SELECT Patient.Birthday FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.GPT < 60 GROUP BY Patient.ID ORDER BY MAX(Laboratory.GPT) DESC LIMIT 3;"}, {"question_id": 1283, "answer_sql": "SELECT COUNT(*) AS MalePatientsWithNormalGOT FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.GOT < 60 AND p.SEX = 'M';"}, {"question_id": 1284, "answer_sql": "SELECT MIN(Laboratory.FirstDate) AS FirstRecordedDate FROM Laboratory JOIN Patient ON Laboratory.ID = Patient.ID WHERE LDH < 500 GROUP BY Patient.ID ORDER BY LDH DESC LIMIT 1;"}, {"question_id": 1285, "answer_sql": "SELECT MAX(`Examination Date`) AS LatestExaminationDate FROM Examination JOIN Patient ON Examination.ID = Patient.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.LDH >= 500;"}, {"question_id": 1286, "answer_sql": "SELECT COUNT(*) AS NumberOfPatientsAdmitted FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.ALP >= 300 AND l.Admission = '+';"}, {"question_id": 1287, "answer_sql": "SELECT COUNT(*) FROM Laboratory WHERE ALP < 300 AND Admission = '-';"}, {"question_id": 1288, "answer_sql": "SELECT Patient.Diagnosis FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.TP < 6.0;"}, {"question_id": 1289, "answer_sql": "SELECT COUNT(*) FROM Examination e JOIN Patient p ON e.ID = p.ID WHERE p.Diagnosis = 'SJS' AND e.TP BETWEEN 6.0 AND 8.5;"}, {"question_id": 1290, "answer_sql": "SELECT Examination.Examination_Date FROM Examination JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Laboratory.ALB BETWEEN 3.5 AND 5.5 ORDER BY Laboratory.ALB DESC LIMIT 1;"}, {"question_id": 1291, "answer_sql": "SELECT COUNT(*) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.SEX = 'M' AND l.ALB BETWEEN 3.5 AND 5.5 AND l.TP BETWEEN 6.0 AND 8.5;"}, {"question_id": 1292, "answer_sql": "SELECT MAX(Laboratory.UA) AS Highest_Normal_UA, Examination.aCL_IgG, Examination.aCL_IgM, Examination.aCL_IgA FROM Examination JOIN Patient ON Examination.ID = Patient.ID JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Patient.SEX = 'F' AND Laboratory.UA > 6.50 GROUP BY Examination.ID ORDER BY Highest_Normal_UA DESC LIMIT 1;"}, {"question_id": 1293, "answer_sql": "SELECT MAX(Examination.ANA) AS Highest_ANA_Concentration FROM Examination JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Laboratory.CRE < 1.5;"}, {"question_id": 1294, "answer_sql": "SELECT Patient.ID FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.CRE < 1.5 ORDER BY Laboratory.aCL IgA DESC LIMIT 1;"}, {"question_id": 1295, "answer_sql": "SELECT COUNT(*) FROM Examination JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Laboratory.T-BIL >= 2.0 AND Laboratory.ANA Pattern LIKE '%P%';"}, {"question_id": 1296, "answer_sql": "SELECT MAX(Laboratory.T-BIL) AS MaxTbill, Examination.aCL IgG, Examination.aCL IgM, Examination.aCL IgA FROM Examination JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Laboratory.T-BIL < 2.0 GROUP BY Examination.ID ORDER BY MaxTbill DESC LIMIT 1;"}, {"question_id": 1297, "answer_sql": "SELECT COUNT(*) FROM Examination e JOIN Laboratory l ON e.ID = l.ID WHERE l.`T-CHO` >= 250 AND e.KCT = '-';"}, {"question_id": 1298, "answer_sql": "SELECT COUNT(*) FROM Examination JOIN Patient ON Examination.ID = Patient.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.T-CHO < 250 AND Examination.ANA_Pattern = 'P';"}, {"question_id": 1299, "answer_sql": "SELECT COUNT(*) AS NumberOfPatientsWithOtherSymptoms FROM Examination e JOIN Laboratory l ON e.ID = l.ID WHERE l.TG < 200 AND e.Symptoms IS NOT NULL;"}, {"question_id": 1300, "answer_sql": "SELECT Patient.Diagnosis FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.TG < 200 ORDER BY Laboratory.TG DESC LIMIT 1;"}, {"question_id": 1301, "answer_sql": "SELECT DISTINCT Examination.ID FROM Examination JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Examination.Thrombosis = 0 AND Laboratory.CPK < 250;"}, {"question_id": 1302, "answer_sql": "SELECT COUNT(*) FROM Laboratory JOIN Examination ON Laboratory.ID = Examination.ID WHERE CPK < 250 AND (KCT = '+' OR RVVT = '+' OR LAC = '+');"}, {"question_id": 1303, "answer_sql": "SELECT Birthday FROM Patient WHERE ID IN ( SELECT ID FROM Laboratory WHERE GLU > 180 GROUP BY ID ORDER BY Birthday ASC LIMIT 1 );"}, {"question_id": 1304, "answer_sql": "SELECT COUNT(*) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.GLU < 180 AND p.Thrombosis = 0;"}, {"question_id": 1305, "answer_sql": "SELECT COUNT(*) AS NumberOfPatients FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.Admission = '+';"}, {"question_id": 1306, "answer_sql": "SELECT COUNT(*) AS NumberOfPatients FROM Examination JOIN Patient ON Examination.ID = Patient.ID WHERE Diagnosis = 'SLE' AND WBC BETWEEN 3.5 AND 9.0;"}, {"question_id": 1307, "answer_sql": "SELECT Patient.ID FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE (Examination.RBC <= 3.5 OR Examination.RBC >= 6.0) AND Examination.Admission = '-';"}, {"question_id": 1308, "answer_sql": "SELECT COUNT(*) AS NumberOfPatientsWithOtherSymptoms FROM Examination JOIN Patient ON Examination.ID = Patient.ID WHERE Examination.PLT > 100 AND Examination.PLT < 400 AND Examination.Diagnosis IS NOT NULL;"}, {"question_id": 1309, "answer_sql": "SELECT P.ID, P.SEX, P.Birthday, L.PLT FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.PLT BETWEEN 100 AND 400 AND E.Diagnosis = 'MCTD';"}, {"question_id": 1310, "answer_sql": "SELECT AVG(Laboratory.PT) AS AveragePT FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Patient.SEX = 'M' AND Laboratory.PT < 14;"}, {"question_id": 1311, "answer_sql": "SELECT COUNT(*) AS NumberOfPatients FROM Examination JOIN Patient ON Examination.ID = Patient.ID WHERE Thrombosis IN (2, 1) AND PT < 14;"}, {"question_id": 1312, "answer_sql": "SELECT major_name FROM major JOIN member ON member.major_id = major.major_id WHERE member.first_name = 'Angela' AND member.last_name = 'Sanders';"}, {"question_id": 1313, "answer_sql": "SELECT COUNT(*) AS NumberOfEngineeringStudents FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'Engineering';"}, {"question_id": 1314, "answer_sql": "SELECT first_name || ' ' || last_name AS full_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'Art and Design';"}, {"question_id": 1315, "answer_sql": "SELECT COUNT(DISTINCT m.member_id) AS num_students FROM attendance a JOIN member m ON a.link_to_member = m.member_id JOIN event e ON a.link_to_event = e.event_id WHERE e.event_name = 'Women''s Soccer';"}, {"question_id": 1316, "answer_sql": "SELECT member.phone FROM member JOIN attendance ON member.member_id = attendance.link_to_member JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer';"}, {"question_id": 1317, "answer_sql": "SELECT COUNT(*) FROM member JOIN attendance ON member.member_id = attendance.link_to_member JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer' AND member.t_shirt_size = 'Medium';"}, {"question_id": 1318, "answer_sql": "SELECT event_id, event_name FROM event JOIN ( SELECT link_to_event, COUNT(*) as attendance_count FROM attendance GROUP BY link_to_event ORDER BY attendance_count DESC LIMIT 1 ) as max_attendance ON event.event_id = max_attendance.link_to_event;"}, {"question_id": 1319, "answer_sql": "SELECT m.college FROM member m JOIN ( SELECT link_to_member FROM expense WHERE approved = 'Yes' ) e ON m.member_id = e.link_to_member WHERE m.position = 'Vice President';"}, {"question_id": 1320, "answer_sql": "SELECT event.event_name FROM event JOIN attendance ON event.event_id = attendance.link_to_event JOIN member ON attendance.link_to_member = member.member_id WHERE member.first_name = 'Maya' AND member.last_name = 'Mclean';"}, {"question_id": 1321, "answer_sql": "SELECT COUNT(*) AS events_attended FROM attendance JOIN member ON attendance.link_to_member = member.member_id JOIN event ON attendance.link_to_event = event.event_id WHERE member.first_name = 'Sacha' AND member.last_name = 'Harrison' AND YEAR(event.event_date) = 2019;"}, {"question_id": 1322, "answer_sql": "SELECT COUNT(*) FROM event WHERE type = 'Meeting' AND event_id IN ( SELECT link_to_event FROM attendance GROUP BY link_to_event HAVING COUNT(link_to_member) > 10 );"}, {"question_id": 1323, "answer_sql": "SELECT event.event_name FROM event JOIN ( SELECT link_to_event FROM attendance GROUP BY link_to_event HAVING COUNT(link_to_member) > 20 ) AS high_attendance_events ON event.event_id = high_attendance_events.link_to_event;"}, {"question_id": 1324, "answer_sql": "SELECT AVG(attendance_count) AS average_attendance FROM ( SELECT COUNT(event_id) AS attendance_count FROM attendance JOIN event ON attendance.link_to_event = event.event_id WHERE type = 'Meeting' AND strftime('%Y', event_date) = '2020' GROUP BY event_id ) AS subquery;"}, {"question_id": 1325, "answer_sql": "SELECT expense_description, MAX(cost) AS most_expensive FROM expense WHERE link_to_budget IN (SELECT budget_id FROM budget WHERE event_status = 'approved') GROUP BY expense_description ORDER BY most_expensive DESC LIMIT 1;"}, {"question_id": 1326, "answer_sql": "SELECT COUNT(*) AS number_of_members FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Environmental Engineering';"}, {"question_id": 1327, "answer_sql": "SELECT first_name, last_name FROM member WHERE link_to_major IN (SELECT major_id FROM major WHERE major_name = 'Student_Club') AND member_id IN (SELECT link_to_member FROM attendance WHERE link_to_event = 'Laugh Out Loud');"}, {"question_id": 1328, "answer_sql": "SELECT last_name FROM member WHERE link_to_major = (SELECT major_id FROM major WHERE major_name = 'Law and Constitutional Studies');"}, {"question_id": 1329, "answer_sql": "SELECT county FROM zip_code WHERE zip = (SELECT zip FROM member WHERE member_id = 'Sherri Ramsey');"}, {"question_id": 1330, "answer_sql": "SELECT college FROM major WHERE major_name = 'Computer Science';"}, {"question_id": 1331, "answer_sql": "SELECT i.amount FROM income i JOIN member m ON i.link_to_member = m.member_id JOIN event e ON i.link_to_member = e.link_to_member WHERE m.position = 'Vice President';"}, {"question_id": 1332, "answer_sql": "SELECT SUM(b.spent) AS total_spent_on_food FROM budget b JOIN expense e ON b.budget_id = e.link_to_budget WHERE b.category = 'Food' AND e.expense_date BETWEEN '2023-09-01' AND '2023-09-30';"}, {"question_id": 1333, "answer_sql": "SELECT m.first_name, m.last_name, z.city, z.state FROM member m JOIN zip_code z ON m.zip = z.zip_code JOIN ( SELECT link_to_member FROM expense WHERE approved = 'Yes' GROUP BY link_to_member ORDER BY COUNT(*) DESC LIMIT 1 ) top_member ON m.member_id = top_member.link_to_member;"}, {"question_id": 1334, "answer_sql": "SELECT first_name, last_name FROM member WHERE zip IN (SELECT zip_code.zip FROM zip_code WHERE state = 'Illinois');"}, {"question_id": 1335, "answer_sql": "SELECT SUM(b.spent) AS total_spent FROM budget b JOIN expense e ON b.budget_id = e.link_to_budget WHERE b.category = 'Advertisement' AND strftime('%Y-%m', e.expense_date) = '2023-09';"}, {"question_id": 1336, "answer_sql": "SELECT department FROM major JOIN member ON member.link_to_major = major.major_id WHERE member_id IN ('Pierce', 'Guidi');"}, {"question_id": 1337, "answer_sql": "SELECT SUM(amount) AS total_budgeted_amount FROM budget WHERE event_status = 'planned' AND link_to_event = ( SELECT event_id FROM event WHERE event_name = 'October Speaker' );"}, {"question_id": 1338, "answer_sql": "SELECT e.expense_id FROM expense e JOIN attendance a ON e.link_to_member = a.link_to_member JOIN event ev ON e.link_to_budget = ev.event_id WHERE ev.event_name = 'October Meeting' AND ev.event_date = '2019-10-08' AND e.approved = 'True';"}, {"question_id": 1339, "answer_sql": "SELECT AVG(cost) AS average_cost FROM expense JOIN member ON expense.link_to_member = member.member_id WHERE member.first_name = 'Elijah' AND (strftime('%m', expense.expense_date) = '09' OR strftime('%m', expense.expense_date) = '10');"}, {"question_id": 1340, "answer_sql": "SELECT (SELECT SUM(spent) FROM budget WHERE event_status = 'completed' AND YEAR(link_to_event) = 2019) - (SELECT SUM(spent) FROM budget WHERE event_status = 'completed' AND YEAR(link_to_event) = 2020);"}, {"question_id": 1341, "answer_sql": "SELECT location FROM event WHERE event_name = 'Spring Budget Review';"}, {"question_id": 1342, "answer_sql": "SELECT expense_description, cost FROM expense JOIN budget ON expense.link_to_budget = budget.budget_id WHERE expense_description = 'Posters' AND expense_date = '2019-09-04';"}, {"question_id": 1343, "answer_sql": "SELECT remaining FROM budget WHERE category = 'Food' ORDER BY amount DESC LIMIT 1;"}, {"question_id": 1344, "answer_sql": "SELECT notes FROM income WHERE source = 'Fundraising' AND date_received = '2019-09-14';"}, {"question_id": 1345, "answer_sql": "SELECT COUNT(*) AS number_of_majors FROM major WHERE department = 'College of Humanities and Social Sciences';"}, {"question_id": 1346, "answer_sql": "SELECT phone FROM member WHERE first_name = 'Carlo' AND last_name = 'Jacobs';"}, {"question_id": 1347, "answer_sql": "SELECT county FROM zip_code WHERE zip = (SELECT zip FROM member WHERE member_id = 'Adela O''Gallagher');"}, {"question_id": 1348, "answer_sql": "SELECT COUNT(*) AS exceeded_count FROM budget WHERE event_status = 'November Meeting' AND remaining < 0;"}, {"question_id": 1349, "answer_sql": "SELECT SUM(amount) AS total_budget_amount FROM budget WHERE event_status = 'September Speaker';"}, {"question_id": 1350, "answer_sql": "SELECT event_status FROM event JOIN budget ON event.event_id = budget.link_to_event WHERE event_date = '2019-08-20' AND category = 'Post Cards, Posters';"}, {"question_id": 1351, "answer_sql": "SELECT major_name FROM major JOIN member ON member.link_to_major = major.major_id WHERE member_id = 'Brent Thomason';"}, {"question_id": 1352, "answer_sql": "SELECT COUNT(*) FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Human Development and Family Studies' AND member.t_shirt_size = 'Large';"}, {"question_id": 1353, "answer_sql": "SELECT z.type FROM member m JOIN zip_code z ON m.zip = z.zip_code WHERE m.member_id = 'Christof Nielson';"}, {"question_id": 1354, "answer_sql": "SELECT major_name FROM major JOIN member ON member.link_to_major = major.major_id WHERE position = 'Vice President';"}, {"question_id": 1355, "answer_sql": "SELECT state FROM zip_code WHERE zip = (SELECT zip FROM member WHERE first_name = 'Sacha' AND last_name = 'Harrison');"}, {"question_id": 1356, "answer_sql": "SELECT department FROM major JOIN member ON major.major_id = member.link_to_major WHERE position = 'President';"}, {"question_id": 1357, "answer_sql": "SELECT date_received FROM income WHERE email = 'connor.hilton@example.com' AND source = 'Dues';"}, {"question_id": 1358, "answer_sql": "SELECT first_name || ' ' || last_name AS full_name FROM member WHERE email LIKE '%@%' ORDER BY date_received ASC LIMIT 1;"}, {"question_id": 1359, "answer_sql": "SELECT (SUM(CASE WHEN event_name = 'Yearly Kickoff' THEN amount ELSE 0 END) - SUM(CASE WHEN event_name = 'October Meeting' THEN amount ELSE 0 END)) AS difference FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE category = 'Advertisement';"}, {"question_id": 1360, "answer_sql": "SELECT ROUND( (SUM(CASE WHEN category = 'Parking' THEN amount ELSE 0 END) / SUM(CASE WHEN event_name = 'November Speaker' THEN amount ELSE 0 END)) * 100, 2 ) AS percentage FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'November Speaker';"}, {"question_id": 1361, "answer_sql": "SELECT SUM(cost) AS total_pizza_cost FROM expense WHERE expense_description = 'Pizza';"}, {"question_id": 1362, "answer_sql": "SELECT COUNT(DISTINCT city) AS number_of_cities FROM zip_code WHERE county = 'Orange County' AND state = 'Virginia';"}, {"question_id": 1363, "answer_sql": "SELECT department FROM major WHERE college = 'College of Humanities and Social Sciences';"}, {"question_id": 1364, "answer_sql": "SELECT city, county, state FROM zip_code WHERE member_id = 'Amy Firth's member_id';"}, {"question_id": 1365, "answer_sql": "SELECT expense_description FROM expense JOIN budget ON expense.link_to_budget = budget.budget_id WHERE budget.remaining = (SELECT MIN(remaining) FROM budget);"}, {"question_id": 1366, "answer_sql": "SELECT m.first_name, m.last_name FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE e.event_name = 'October Meeting';"}, {"question_id": 1367, "answer_sql": "SELECT major.college FROM member JOIN major ON member.link_to_major = major.major_id GROUP BY major.college ORDER BY COUNT(member.member_id) DESC LIMIT 1;"}, {"question_id": 1368, "answer_sql": "SELECT major_name FROM major JOIN member ON major.major_id = member.link_to_major WHERE member.phone = '809-555-3360';"}, {"question_id": 1369, "answer_sql": "SELECT event_name FROM event JOIN budget ON event.event_id = budget.link_to_event WHERE event_status = 'approved' ORDER BY amount DESC LIMIT 1;"}, {"question_id": 1370, "answer_sql": "SELECT expense_description FROM expense JOIN member ON expense.link_to_member = member.member_id WHERE position = 'Vice President';"}, {"question_id": 1371, "answer_sql": "SELECT COUNT(DISTINCT link_to_member) AS member_count FROM attendance JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer';"}, {"question_id": 1372, "answer_sql": "SELECT date_received FROM income WHERE link_to_member = 'Casey Mason';"}, {"question_id": 1373, "answer_sql": "SELECT COUNT(DISTINCT member.zip) AS Maryland_Count FROM member JOIN zip_code ON member.zip = zip_code.zip WHERE zip_code.state = 'Maryland';"}, {"question_id": 1374, "answer_sql": "SELECT COUNT(*) AS attended_events FROM attendance JOIN member ON attendance.link_to_member = member.member_id WHERE member.phone = '954-555-6240';"}, {"question_id": 1375, "answer_sql": "SELECT m.first_name, m.last_name FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE ma.department = 'School of Applied Sciences, Technology and Education';"}, {"question_id": 1376, "answer_sql": "SELECT event_id, event_name, spent, amount, (spent / amount) AS spend_to_budget_ratio FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE event.status = 'Closed' ORDER BY spend_to_budget_ratio DESC LIMIT 1;"}, {"question_id": 1377, "answer_sql": "SELECT COUNT(*) AS president_count FROM member WHERE position = 'President';"}, {"question_id": 1378, "answer_sql": "SELECT MAX(spent) AS highest_spent FROM budget;"}, {"question_id": 1379, "answer_sql": "SELECT COUNT(*) AS number_of_meetings FROM event WHERE type = 'Meeting' AND strftime('%Y', event_date) = '2020';"}, {"question_id": 1380, "answer_sql": "SELECT SUM(spent) AS total_spent_on_food FROM budget WHERE category = 'Food';"}, {"question_id": 1381, "answer_sql": "SELECT first_name || ' ' || last_name AS full_name FROM member JOIN attendance ON member.member_id = attendance.link_to_member GROUP BY member.member_id HAVING COUNT(attendance.link_to_event) > 7;"}, {"question_id": 1382, "answer_sql": "SELECT DISTINCT m.first_name, m.last_name FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id JOIN major ma ON m.link_to_major = ma.major_id WHERE ma.major_name = 'Interior Design' AND e.event_name = 'Community Theater';"}, {"question_id": 1383, "answer_sql": "SELECT first_name, last_name FROM member WHERE zip = (SELECT zip_code.zip_code FROM zip_code WHERE city = 'Georgetown' AND state = 'South Carolina');"}, {"question_id": 1384, "answer_sql": "SELECT COUNT(*) FROM income WHERE link_to_member = 'Grant Gilmour';"}, {"question_id": 1385, "answer_sql": "SELECT first_name, last_name FROM member WHERE income_id IN (SELECT income_id FROM income WHERE amount > 40);"}, {"question_id": 1386, "answer_sql": "SELECT SUM(cost) AS total_expense FROM expense JOIN attendance ON expense.link_to_member = attendance.link_to_member JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Baseball game' AND EXTRACT(YEAR FROM expense.expense_date) = EXTRACT(YEAR FROM CURRENT_DATE);"}, {"question_id": 1387, "answer_sql": "SELECT m.first_name, m.last_name FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE e.event_name = 'Yearly Kickoff' AND e.status = 'approved';"}, {"question_id": 1388, "answer_sql": "SELECT member.first_name || ' ' || member.last_name AS full_name, income.source AS income_source, MAX(income.amount) AS highest_income FROM member JOIN income ON member.member_id = income.link_to_member GROUP BY member.member_id ORDER BY highest_income DESC LIMIT 1;"}, {"question_id": 1389, "answer_sql": "SELECT event_name FROM event JOIN ( SELECT link_to_event, MIN(cost) AS min_cost FROM expense GROUP BY link_to_event ) AS min_expenses ON event.event_id = min_expenses.link_to_event;"}, {"question_id": 1390, "answer_sql": "SELECT (SUM(cost) / (SELECT SUM(cost) FROM expense WHERE event_name = 'Yearly Kickoff')) * 100 AS percentage FROM expense JOIN attendance ON expense.link_to_member = attendance.link_to_member JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Yearly Kickoff';"}, {"question_id": 1391, "answer_sql": "SELECT CAST(SUM(CASE WHEN major_name = 'Finance' THEN 1 ELSE 0 END) AS REAL) / CAST(SUM(CASE WHEN major_name = 'Physics' THEN 1 ELSE 0 END) AS REAL) AS finance_to_physics_ratio FROM member JOIN major ON member.link_to_major = major.major_id;"}, {"question_id": 1392, "answer_sql": "SELECT source, MAX(amount) as max_amount FROM income WHERE date_received BETWEEN '2019-09-01' AND '2019-09-30' GROUP BY source ORDER BY max_amount DESC LIMIT 1;"}, {"question_id": 1393, "answer_sql": "SELECT first_name || ' ' || last_name AS full_name, email FROM member WHERE position = 'Secretary';"}, {"question_id": 1394, "answer_sql": "SELECT COUNT(*) AS num_members FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Physics Teaching';"}, {"question_id": 1395, "answer_sql": "SELECT COUNT(DISTINCT link_to_member) AS member_count FROM attendance JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Community Theater' AND YEAR(event.event_date) = 2019;"}, {"question_id": 1396, "answer_sql": "SELECT COUNT(DISTINCT a.link_to_event) AS events_attended, m.major_name FROM attendance a JOIN member m ON a.link_to_member = m.member_id WHERE m.first_name = 'Luisa' AND m.last_name = 'Guidi';"}, {"question_id": 1397, "answer_sql": "SELECT AVG(spent) AS average_spent FROM budget WHERE category = 'Food' AND event_status = 'Closed';"}, {"question_id": 1398, "answer_sql": "SELECT event_name FROM event JOIN budget ON event.event_id = budget.link_to_event WHERE category = 'Advertisement' ORDER BY spent DESC LIMIT 1;"}, {"question_id": 1399, "answer_sql": "SELECT EXISTS( SELECT 1 FROM attendance JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer' AND attendance.link_to_member = ( SELECT member_id FROM member WHERE first_name = 'Maya' AND last_name = 'Mclean' ) ) AS attended;"}, {"question_id": 1400, "answer_sql": "SELECT (SUM(CASE WHEN type = 'Community Service' THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS percentage_community_service FROM event WHERE event_date BETWEEN '2019-01-01' AND '2019-12-31';"}, {"question_id": 1401, "answer_sql": "SELECT cost FROM expense WHERE expense_description = 'Posters' AND link_to_budget IN ( SELECT budget_id FROM budget WHERE event_status = 'September Speaker' );"}, {"question_id": 1402, "answer_sql": "SELECT t_shirt_size, COUNT(*) as order_count FROM member GROUP BY t_shirt_size ORDER BY order_count DESC LIMIT 1;"}, {"question_id": 1403, "answer_sql": "SELECT event_name FROM event WHERE status = 'Closed' ORDER BY (SELECT remaining FROM budget WHERE link_to_event = event_id) ASC LIMIT 1;"}, {"question_id": 1404, "answer_sql": "SELECT expense_description, SUM(cost) AS total_value FROM expense JOIN budget ON expense.link_to_budget = budget.budget_id WHERE expense.approved = 'yes' AND event_name = 'October Meeting' GROUP BY expense_description;"}, {"question_id": 1405, "answer_sql": "SELECT category, amount FROM budget WHERE event_status = 'planned' AND link_to_event = ( SELECT event_id FROM event WHERE event_name = 'April Speaker' ) ORDER BY amount ASC;"}, {"question_id": 1406, "answer_sql": "SELECT MAX(amount) AS highest_budgeted_amount FROM budget WHERE category = 'Food';"}, {"question_id": 1407, "answer_sql": "SELECT budget_id, category, amount FROM budget WHERE category = 'Advertisement' ORDER BY amount DESC LIMIT 3;"}, {"question_id": 1408, "answer_sql": "SELECT SUM(cost) AS total_parking_cost FROM expense WHERE expense_description = 'Parking';"}, {"question_id": 1409, "answer_sql": "SELECT SUM(cost) AS total_expense FROM expense WHERE expense_date = '2019-08-20';"}, {"question_id": 1410, "answer_sql": "SELECT m.first_name || ' ' || m.last_name AS full_name, SUM(e.cost) AS total_cost FROM member m JOIN expense e ON m.member_id = e.link_to_member WHERE m.member_id = 'rec4BLdZHS2Blfp4v' GROUP BY m.member_id;"}, {"question_id": 1411, "answer_sql": "SELECT expense_description FROM expense JOIN member ON expense.link_to_member = member.member_id WHERE member.first_name = 'Sacha' AND member.last_name = 'Harrison';"}, {"question_id": 1412, "answer_sql": "SELECT expense_description FROM expense JOIN member ON expense.link_to_member = member.member_id WHERE t_shirt_size = 'X-Large';"}, {"question_id": 1413, "answer_sql": "SELECT m.zip FROM member m JOIN expense e ON m.member_id = e.link_to_member WHERE e.cost < 50 GROUP BY m.zip;"}, {"question_id": 1414, "answer_sql": "SELECT major_name FROM major JOIN member ON member.major_id = major.major_id WHERE member_id = 'Phillip Cullen';"}, {"question_id": 1415, "answer_sql": "SELECT position FROM member WHERE link_to_major = (SELECT major_id FROM major WHERE major_name = 'Business');"}, {"question_id": 1416, "answer_sql": "SELECT COUNT(*) AS member_count FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Business' AND member.t_shirt_size = 'Medium';"}, {"question_id": 1417, "answer_sql": "SELECT event.event_name, event.type FROM event JOIN budget ON event.event_id = budget.link_to_event WHERE budget.remaining > 30"}, {"question_id": 1418, "answer_sql": "SELECT DISTINCT category FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE location = 'MU 215' AND event_status = 'completed';"}, {"question_id": 1419, "answer_sql": "SELECT category FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE event_date = '2020-03-24T12:00:00' AND event_status = 'completed';"}, {"question_id": 1420, "answer_sql": "SELECT major_name FROM major JOIN member ON member.link_to_major = major.major_id WHERE position = 'Vice President';"}, {"question_id": 1421, "answer_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM member)) AS percentage_mathematics_members FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Mathematics';"}, {"question_id": 1422, "answer_sql": "SELECT category FROM budget WHERE link_to_event = ( SELECT event_id FROM event WHERE location = 'MU 215' );"}, {"question_id": 1423, "answer_sql": "SELECT COUNT(*) FROM income WHERE amount = 50;"}, {"question_id": 1424, "answer_sql": "SELECT COUNT(*) FROM member WHERE position = 'Member' AND t_shirt_size = 'X-Large';"}, {"question_id": 1425, "answer_sql": "SELECT COUNT(*) AS num_majors FROM major WHERE department = 'School of Applied Sciences, Technology and Education';"}, {"question_id": 1426, "answer_sql": "SELECT m.last_name, m.department, m.college FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE ma.major_name = 'Environmental Engineering';"}, {"question_id": 1427, "answer_sql": "SELECT category FROM budget WHERE location = 'MU 215' AND type = 'Guest Speaker' AND spent = 0;"}, {"question_id": 1428, "answer_sql": "SELECT m.city, z.state FROM member m JOIN major ma ON m.link_to_major = ma.major_id JOIN zip_code z ON m.zip = z.zip_code WHERE ma.department = 'Electrical and Computer Engineering Department' AND m.position = 'Member';"}, {"question_id": 1429, "answer_sql": "SELECT event_name FROM event JOIN attendance ON event.event_id = attendance.link_to_event JOIN member ON attendance.link_to_member = member.member_id WHERE type = 'Social' AND position = 'Vice President' AND location = '900 E. Washington St.';"}, {"question_id": 1430, "answer_sql": "SELECT last_name, position FROM member JOIN expense ON member.member_id = expense.link_to_member WHERE expense_description = 'Pizza' AND expense_date = '2019-09-10';"}, {"question_id": 1431, "answer_sql": "SELECT last_name FROM member JOIN attendance ON member.member_id = attendance.link_to_member JOIN event ON attendance.link_to_event = event.event_id WHERE position = 'Member' AND event.event_name = 'Women''s Soccer' ORDER BY event.event_date DESC LIMIT 1;"}, {"question_id": 1432, "answer_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM member WHERE t_shirt_size = 'Medium')) AS percentage FROM income WHERE amount = 50;"}, {"question_id": 1433, "answer_sql": "SELECT DISTINCT state, short_state FROM zip_code WHERE type = 'PO Box';"}, {"question_id": 1434, "answer_sql": "SELECT DISTINCT zip_code.zip FROM zip_code JOIN event ON event.location = zip_code.city WHERE event.type = 'PO Box' AND event.state = 'Puerto Rico';"}, {"question_id": 1435, "answer_sql": "SELECT event_name FROM event WHERE type = 'Game' AND status = 'Closed' AND event_date BETWEEN '2019-03-15' AND '2020-03-20';"}, {"question_id": 1436, "answer_sql": "SELECT a.link_to_event FROM attendance a JOIN expense e ON a.link_to_event = e.link_to_event JOIN member m ON a.link_to_member = m.member_id WHERE e.cost > 50;"}, {"question_id": 1437, "answer_sql": "SELECT m.first_name, m.last_name, m.email, e.event_id FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id JOIN expense ex ON m.member_id = ex.link_to_member WHERE ex.approved = 'true' AND ex.expense_date BETWEEN '2019-01-10' AND '2019-11-19'"}, {"question_id": 1438, "answer_sql": "SELECT college FROM member WHERE first_name = 'Katy' AND link_to_major = 'rec1N0upiVLy5esTO';"}, {"question_id": 1439, "answer_sql": "SELECT member.phone FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Business' AND major.department = 'College of Agriculture and Applied Sciences';"}, {"question_id": 1440, "answer_sql": "SELECT DISTINCT member.email FROM expense JOIN member ON expense.link_to_member = member.member_id WHERE expense.expense_date BETWEEN '2019-09-10' AND '2019-11-19' AND expense.cost > 20;"}, {"question_id": 1441, "answer_sql": "SELECT COUNT(*) FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'education' AND member.position = 'Member' AND major.department = 'Education & Human Services';"}, {"question_id": 1442, "answer_sql": "SELECT (SUM(CASE WHEN b.remaining < 0 THEN 1 ELSE 0 END) / CAST(COUNT(e.event_id) AS FLOAT)) * 100 AS percentage_over_budget FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE e.status = 'Completed';"}, {"question_id": 1443, "answer_sql": "SELECT event_id, location, status FROM event WHERE event_date BETWEEN '2019-11-01' AND '2020-03-31';"}, {"question_id": 1444, "answer_sql": "SELECT expense_description FROM expense GROUP BY expense_description HAVING (SUM(cost) / COUNT(expense_id)) > 50;"}, {"question_id": 1445, "answer_sql": "SELECT first_name, last_name FROM member WHERE t_shirt_size = 'X-Large';"}, {"question_id": 1446, "answer_sql": "SELECT (SUM(CASE WHEN type = 'PO Box' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS Percentage of PO Boxes FROM zip_code;"}, {"question_id": 1447, "answer_sql": "SELECT event.event_name, event.location FROM event JOIN budget ON event.event_id = budget.link_to_event WHERE budget.remaining > 0;"}, {"question_id": 1448, "answer_sql": "SELECT e.event_name, e.event_date FROM event e JOIN expense ex ON e.event_id = ex.link_to_event WHERE ex.expense_description = 'Pizza' AND ex.cost > 50 AND ex.cost < 100;"}, {"question_id": 1449, "answer_sql": "SELECT m.first_name, m.last_name, m.major_name FROM member m JOIN expense e ON m.member_id = e.link_to_member JOIN budget b ON e.link_to_budget = b.budget_id WHERE e.cost > 100;"}, {"question_id": 1450, "answer_sql": "SELECT e.event_name, z.city, z.state FROM event e JOIN zip_code z ON e.location = z.city WHERE ( SELECT COUNT(*) FROM income i WHERE i.link_to_member = ( SELECT m.member_id FROM member m WHERE m.zip = z.zip ) ) > 40;"}, {"question_id": 1451, "answer_sql": "SELECT m.member_id, m.first_name, m.last_name, SUM(e.cost) AS total_spent FROM member m JOIN expense e ON m.member_id = e.link_to_member JOIN attendance a ON e.link_to_member = a.link_to_member GROUP BY m.member_id HAVING COUNT(DISTINCT a.link_to_event) > 1 ORDER BY total_spent DESC LIMIT 1;"}, {"question_id": 1452, "answer_sql": "SELECT AVG(cost) AS average_amount_paid FROM expense JOIN member ON expense.link_to_member = member.member_id WHERE member.position != 'Member';"}, {"question_id": 1453, "answer_sql": "SELECT event_name FROM event WHERE cost < (SELECT AVG(cost) FROM expense WHERE category = 'Parking');"}, {"question_id": 1454, "answer_sql": "SELECT (SUM(e.cost) / COUNT(ev.event_id)) * 100 AS percentage_of_cost FROM expense e JOIN event ev ON e.link_to_event = ev.event_id WHERE ev.type = 'Game';"}, {"question_id": 1455, "answer_sql": "SELECT budget.budget_id, MAX(expense.cost) AS max_cost FROM budget JOIN expense ON budget.budget_id = expense.link_to_budget WHERE expense.expense_description = 'Water, chips, cookies' GROUP BY budget.budget_id ORDER BY max_cost DESC LIMIT 1;"}, {"question_id": 1456, "answer_sql": "SELECT m.first_name || ' ' || m.last_name AS full_name FROM member m JOIN expense e ON m.member_id = e.link_to_member GROUP BY m.member_id ORDER BY SUM(e.cost) DESC LIMIT 5;"}, {"question_id": 1457, "answer_sql": "SELECT m.first_name || ' ' || m.last_name AS full_name, m.phone FROM member m JOIN expense e ON m.member_id = e.link_to_member GROUP BY m.member_id HAVING SUM(e.cost) > (SELECT AVG(cost) FROM expense);"}, {"question_id": 1458, "answer_sql": "SELECT (SUM(CASE WHEN state = 'Maine' THEN 1 ELSE 0 END) / COUNT(*)) * 100 - (SUM(CASE WHEN state = 'Vermont' THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS percentage_difference FROM member;"}, {"question_id": 1459, "answer_sql": "SELECT major.major_name, major.department FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Garrett' AND member.last_name = 'Gerke';"}, {"question_id": 1460, "answer_sql": "SELECT m.first_name, m.last_name, e.cost FROM member m JOIN expense e ON m.member_id = e.link_to_member WHERE e.expense_description = 'Water, Veggie tray, supplies'"}, {"question_id": 1461, "answer_sql": "SELECT m.last_name, m.phone FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE ma.major_name = 'Elementary Education';"}, {"question_id": 1462, "answer_sql": "SELECT category, amount FROM budget WHERE event_status = 'planned' AND event_name = 'January Speaker';"}, {"question_id": 1463, "answer_sql": "SELECT event.event_name FROM event JOIN budget ON event.event_id = budget.link_to_event WHERE budget.category = 'Food';"}, {"question_id": 1464, "answer_sql": "SELECT m.first_name, m.last_name, i.amount FROM member m JOIN income i ON m.member_id = i.link_to_member WHERE i.date_received = '2019-09-09';"}, {"question_id": 1465, "answer_sql": "SELECT b.category FROM expense e JOIN budget b ON e.link_to_budget = b.budget_id WHERE e.expense_description = 'Posters';"}, {"question_id": 1466, "answer_sql": "SELECT m.first_name, m.last_name, m.college FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE m.position = 'Secretary';"}, {"question_id": 1467, "answer_sql": "SELECT event_name, SUM(spent) AS total_spent FROM budget JOIN expense ON budget.link_to_event = expense.link_to_event WHERE category = 'Speaker Gifts' GROUP BY event_name;"}, {"question_id": 1468, "answer_sql": "SELECT city FROM zip_code WHERE zip = (SELECT zip FROM member WHERE member_id = 'Garrett Girke');"}, {"question_id": 1469, "answer_sql": "SELECT first_name, last_name, position FROM member JOIN zip_code ON member.zip = zip_code.zip_code WHERE city = 'Lincolnton' AND state = 'North Carolina';"}, {"question_id": 1470, "answer_sql": "SELECT COUNT(DISTINCT GasStationID) FROM transactions_1k JOIN products ON transactions_1k.ProductID = products.ProductID JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE products.Description LIKE '%Premium%' AND gasstations.Country = 'CZE';"}, {"question_id": 1471, "answer_sql": "SELECT (SELECT COUNT(*) FROM customers WHERE Currency = 'EUR')::REAL / (SELECT COUNT(*) FROM customers WHERE Currency = 'CZK')::REAL AS ratio"}, {"question_id": 1472, "answer_sql": "SELECT customers.CustomerID FROM customers JOIN yearmonth ON customers.CustomerID = yearmonth.CustomerID WHERE yearmonth.Date BETWEEN '201201' AND '201212' GROUP BY customers.CustomerID ORDER BY yearmonth.Consumption ASC LIMIT 1;"}, {"question_id": 1473, "answer_sql": "SELECT AVG(Consumption) / 12 AS AverageMonthlyConsumption FROM yearmonth WHERE Date BETWEEN '201301' AND '201312' AND CustomerID IN ( SELECT CustomerID FROM customers WHERE Segment = 'SME' );"}, {"question_id": 1474, "answer_sql": "SELECT c.CustomerID, SUM(y.Consumption) AS TotalConsumption FROM customers c JOIN yearmonth y ON c.CustomerID = y.CustomerID WHERE y.Date BETWEEN '20110101' AND '20111231' AND c.Currency = 'CZK' GROUP BY c.CustomerID ORDER BY TotalConsumption DESC LIMIT 10;"}, {"question_id": 1475, "answer_sql": "SELECT COUNT(*) FROM yearmonth WHERE Date BETWEEN '201201' AND '201212' AND CustomerID IN ( SELECT CustomerID FROM customers WHERE Segment = 'KAM' );"}, {"question_id": 1476, "answer_sql": "SELECT (SUM(czk.Consumption) - SUM(eur.Consumption)) AS Difference FROM yearmonth AS czk JOIN yearmonth AS eur ON czk.Date = eur.Date WHERE czk.Currency = 'CZK' AND eur.Currency = 'EUR' AND strftime('%Y', czk.Date) = '2012' AND strftime('%Y', eur.Date) = '2012';"}, {"question_id": 1477, "answer_sql": "SELECT strftime('%Y', Date) AS Year, SUM(Consumption) AS TotalConsumption FROM yearmonth WHERE Currency = 'EUR' GROUP BY Year ORDER BY TotalConsumption DESC LIMIT 1;"}, {"question_id": 1478, "answer_sql": "SELECT Segment, MIN(Consumption) as LeastConsumption FROM yearmonth GROUP BY Segment ORDER BY LeastConsumption ASC LIMIT 1;"}, {"question_id": 1479, "answer_sql": "SELECT SUBSTR(Date, 1, 4) AS Year, SUM(Consumption) AS TotalConsumption FROM yearmonth GROUP BY Year ORDER BY TotalConsumption DESC LIMIT 1;"}, {"question_id": 1480, "answer_sql": "SELECT Date, MAX(Consumption) as PeakConsumption FROM yearmonth WHERE CustomerID IN (SELECT CustomerID FROM customers WHERE Segment = 'SME') AND SUBSTR(Date, 1, 4) = '2013' GROUP BY SUBSTR(Date, 1, 7) ORDER BY PeakConsumption DESC LIMIT 1;"}, {"question_id": 1481, "answer_sql": "SELECT CustomerID, Segment, SUM(Consumption) AS TotalConsumption, RANK() OVER (PARTITION BY Segment ORDER BY SUM(Consumption)) AS Rank FROM yearmonth WHERE Date BETWEEN '201301' AND '201312' GROUP BY CustomerID, Segment ), LeastConsumption AS ( SELECT Segment, MIN(TotalConsumption) AS MinConsumption FROM RankedConsumption GROUP BY Segment ) SELECT (SELECT MinConsumption FROM LeastConsumption WHERE Segment = 'SME') - (SELECT MinConsumption FROM LeastConsumption WHERE Segment = 'LAM') AS SME_LAM_Diff, (SELECT MinConsumption FROM LeastConsumption WHERE Segment = 'LAM') - (SELECT MinConsumption FROM LeastConsumption WHERE Segment = 'KAM') AS LAM_KAM_Diff, (SELECT MinConsumption FROM LeastConsumption WHERE Segment = 'KAM') - (SELECT MinConsumption FROM LeastConsumption WHERE Segment = 'SME') AS KAM_SME_Diff;"}, {"question_id": 1482, "answer_sql": "SELECT CustomerID, SUM(Consumption) AS TotalConsumption2012 FROM yearmonth WHERE Date BETWEEN '201201' AND '201212' GROUP BY CustomerID ), Consumption_2013 AS ( SELECT CustomerID, SUM(Consumption) AS TotalConsumption2013 FROM yearmonth WHERE Date BETWEEN '201301' AND '201312' GROUP BY CustomerID ), Percentage_Change AS ( SELECT c2012.CustomerID, c2012.TotalConsumption2012, c2013.TotalConsumption2013, ((c2013.TotalConsumption2013 - c2012.TotalConsumption2012) / c2013.TotalConsumption2013) * 100 AS PercentageIncrease FROM Consumption_2012 c2012 JOIN Consumption_2013 c2013 ON c2012.CustomerID = c2013.CustomerID ) SELECT p.Segment, MAX(PercentageIncrease) AS MaxPercentageIncrease, MIN(PercentageIncrease) AS MinPercentageIncrease FROM Percentage_Change pc JOIN customers c ON pc.CustomerID = c.CustomerID JOIN products p ON pc.ProductID = p.ProductID WHERE p.Description LIKE '%SME%' OR p.Description LIKE '%LAM%' OR p.Description LIKE '%KAM%' GROUP BY p.Segment;"}, {"question_id": 1483, "answer_sql": "SELECT SUM(Consumption) AS TotalConsumption FROM yearmonth WHERE Date >= '201308' AND Date <= '201311' AND CustomerID = 6;"}, {"question_id": 1484, "answer_sql": "SELECT (SELECT COUNT(*) FROM gasstations WHERE Segment = 'discount' AND Country = 'Czech Republic') - (SELECT COUNT(*) FROM gasstations WHERE Segment = 'discount' AND Country = 'Slovakia') AS more_discount_stations"}, {"question_id": 1485, "answer_sql": "SELECT (MAX(y1.Consumption) - MAX(y2.Consumption)) AS ConsumptionDifference FROM yearmonth y1 JOIN yearmonth y2 ON y1.CustomerID = 7 AND y2.CustomerID = 5 WHERE y1.Date = '201304' AND y2.Date = '201304';"}, {"question_id": 1486, "answer_sql": "SELECT (SUM(CASE WHEN Segment = 'SME' THEN 1 ELSE 0 END) - SUM(CASE WHEN Segment = 'SME' AND Currency = 'EUR' THEN 1 ELSE 0 END)) AS More_SMEs_in_CZK FROM customers JOIN yearmonth ON customers.CustomerID = yearmonth.CustomerID WHERE yearmonth.Date BETWEEN '2022-01-01' AND '2022-12-31';"}, {"question_id": 1487, "answer_sql": "SELECT c.CustomerID FROM yearmonth ym JOIN customers c ON ym.CustomerID = c.CustomerID WHERE ym.Date LIKE '201310%' AND c.Currency = 'Euro' ORDER BY ym.Consumption DESC LIMIT 1;"}, {"question_id": 1488, "answer_sql": "SELECT customers.CustomerID, MAX(yearmonth.Consumption) AS MaxConsumption FROM customers JOIN yearmonth ON customers.CustomerID = yearmonth.CustomerID WHERE customers.Segment = 'KAM' GROUP BY customers.CustomerID ORDER BY MaxConsumption DESC LIMIT 1;"}, {"question_id": 1489, "answer_sql": "SELECT SUM(Consumption) AS TotalConsumption FROM yearmonth WHERE Date = '201305' AND CustomerID IN ( SELECT CustomerID FROM customers WHERE Segment = 'KAM' );"}, {"question_id": 1490, "answer_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM yearmonth WHERE Segment = 'LAM')) AS percentage FROM yearmonth WHERE Segment = 'LAM' AND Consumption > 46.73;"}, {"question_id": 1491, "answer_sql": "SELECT g.Country, COUNT(*) as ValueForMoneyGasStations FROM gasstations g JOIN transactions_1k t ON g.GasStationID = t.GasStationID WHERE t.Price / t.Amount < (SELECT AVG(Price / Amount) FROM transactions_1k) GROUP BY g.Country ORDER BY ValueForMoneyGasStations DESC;"}, {"question_id": 1492, "answer_sql": "SELECT (SUM(CASE WHEN Segment = 'KAM' AND Currency = 'EUR' THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS percentage_kam_euros FROM customers;"}, {"question_id": 1493, "answer_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(DISTINCT CustomerID) FROM yearmonth WHERE Date = '201202')) AS Percentage FROM yearmonth WHERE Date = '201202' AND Consumption > 528.3;"}, {"question_id": 1494, "answer_sql": "SELECT ( SELECT COUNT(*) FROM gasstations WHERE Country = 'Slovakia' AND ChainID IS NOT NULL ) * 100.0 / ( SELECT COUNT(*) FROM gasstations WHERE Country = 'Slovakia' ) AS percentage_premium_gas_stations"}, {"question_id": 1495, "answer_sql": "SELECT CustomerID FROM yearmonth WHERE Date = '201309' ORDER BY Consumption DESC LIMIT 1;"}, {"question_id": 1496, "answer_sql": "SELECT Segment FROM customers JOIN yearmonth ON customers.CustomerID = yearmonth.CustomerID WHERE yearmonth.Date = '201309' GROUP BY Segment ORDER BY SUM(yearmonth.Consumption) ASC LIMIT 1;"}, {"question_id": 1497, "answer_sql": "SELECT customers.CustomerID, MIN(yearmonth.Consumption) AS LeastConsumption FROM customers JOIN yearmonth ON customers.CustomerID = yearmonth.CustomerID WHERE yearmonth.Date = '201206' AND customers.Segment = 'SME' GROUP BY customers.CustomerID ORDER BY LeastConsumption ASC LIMIT 1;"}, {"question_id": 1498, "answer_sql": "SELECT Date, MAX(Consumption) AS HighestConsumption FROM yearmonth WHERE Date LIKE '2012%' GROUP BY strftime('%Y-%m', Date);"}, {"question_id": 1499, "answer_sql": "SELECT Date, MAX(Consumption) AS MaxConsumption FROM yearmonth WHERE CustomerID IN ( SELECT CustomerID FROM customers WHERE Currency = 'EUR' ) GROUP BY strftime('%Y-%m', Date) ORDER BY MaxConsumption DESC LIMIT 1;"}, {"question_id": 1500, "answer_sql": "SELECT p.Description FROM transactions_1k t JOIN products p ON t.ProductID = p.ProductID JOIN yearmonth ym ON t.CustomerID = ym.CustomerID WHERE ym.Date LIKE '201309%'"}, {"question_id": 1501, "answer_sql": "SELECT DISTINCT gs.Country FROM gasstations gs JOIN transactions_1k t ON gs.GasStationID = t.GasStationID WHERE strftime('%Y%m', t.Date) = '201306';"}, {"question_id": 1502, "answer_sql": "SELECT DISTINCT gs.ChainID FROM gasstations gs JOIN transactions_1k t ON gs.GasStationID = t.GasStationID JOIN products p ON t.ProductID = p.ProductID WHERE t.Currency = 'EUR';"}, {"question_id": 1503, "answer_sql": "SELECT p.Description FROM transactions_1k t JOIN products p ON t.ProductID = p.ProductID WHERE t.Price > 0"}, {"question_id": 1504, "answer_sql": "SELECT AVG(t.Price) AS AveragePrice FROM transactions_1k t JOIN yearmonth ym ON t.CustomerID = ym.CustomerID WHERE ym.Date LIKE '2012-01%'"}, {"question_id": 1505, "answer_sql": "SELECT COUNT(*) FROM yearmonth WHERE Currency = 'EUR' AND Consumption > 1000;"}, {"question_id": 1506, "answer_sql": "SELECT p.Description FROM transactions_1k t JOIN products p ON t.ProductID = p.ProductID JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE g.Country = 'CZE';"}, {"question_id": 1507, "answer_sql": "SELECT DISTINCT t.Time FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE g.ChainID = 11;"}, {"question_id": 1508, "answer_sql": "SELECT COUNT(*) FROM transactions_1k JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE gasstations.Country = 'CZE' AND transactions_1k.Price > 1000;"}, {"question_id": 1509, "answer_sql": "SELECT COUNT(*) FROM transactions_1k JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE gasstations.Country = 'CZE' AND transactions_1k.Date > '2012-01-01';"}, {"question_id": 1510, "answer_sql": "SELECT AVG(t.Price) AS AverageTotalPrice FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE g.Country = 'CZE';"}, {"question_id": 1511, "answer_sql": "SELECT AVG(t.Price) AS AverageTotalPrice FROM transactions_1k t JOIN customers c ON t.CustomerID = c.CustomerID WHERE c.Currency = 'EUR';"}, {"question_id": 1512, "answer_sql": "SELECT customers.CustomerID, SUM(transactions_1k.Amount) AS TotalSpent FROM customers JOIN transactions_1k ON customers.CustomerID = transactions_1k.CustomerID WHERE transactions_1k.Date = '2012-08-25' GROUP BY customers.CustomerID ORDER BY TotalSpent DESC LIMIT 1;"}, {"question_id": 1513, "answer_sql": "SELECT gs.Country FROM transactions_1k t JOIN gasstations gs ON t.GasStationID = gs.GasStationID JOIN customers c ON t.CustomerID = c.CustomerID WHERE t.Date = '2012-08-25' ORDER BY t.TransactionID ASC LIMIT 1;"}, {"question_id": 1514, "answer_sql": "SELECT c.Currency FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID WHERE t.Date = '2012-08-24' AND t.Time = '16:25:00';"}, {"question_id": 1515, "answer_sql": "SELECT Segment FROM customers WHERE CustomerID = ( SELECT CustomerID FROM transactions_1k WHERE Date = '2012-08-23' AND Time = '21:20:00' LIMIT 1 );"}, {"question_id": 1516, "answer_sql": "SELECT COUNT(*) FROM transactions_1k JOIN products ON transactions_1k.ProductID = products.ProductID JOIN yearmonth ON transactions_1k.CustomerID = yearmonth.CustomerID WHERE transactions_1k.Date = '2012-08-26' AND transactions_1k.Time < '13:00:00' AND transactions_1k.Price > 0 AND products.Description LIKE '%EUR%';"}, {"question_id": 1517, "answer_sql": "SELECT Segment FROM customers WHERE CustomerID = (SELECT CustomerID FROM yearmonth ORDER BY Date ASC LIMIT 1);"}, {"question_id": 1518, "answer_sql": "SELECT DISTINCT gs.Country FROM transactions_1k t1 JOIN gasstations gs ON t1.GasStationID = gs.GasStationID WHERE t1.Date = '2012-08-24' AND t1.Time = '12:42:00';"}, {"question_id": 1519, "answer_sql": "SELECT ProductID FROM transactions_1k AS T1 WHERE Date = '2012-08-23' AND Time = '21:20:00';"}, {"question_id": 1520, "answer_sql": "SELECT ym.Date, ym.Consumption FROM yearmonth ym JOIN customers c ON ym.CustomerID = c.CustomerID WHERE ym.Date >= '2012-01-01' AND ym.Date < '2012-02-01' AND c.CustomerID = ( SELECT t.CustomerID FROM transactions_1k t WHERE t.Date = '2012-08-24' AND t.Amount = 124.05 );"}, {"question_id": 1521, "answer_sql": "SELECT COUNT(*) FROM transactions_1k JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE gasstations.Country = 'CZE' AND CAST(transactions_1k.Time AS TIME) BETWEEN '08:00:00' AND '09:00:00' AND CAST(transactions_1k.Date AS DATE) = '2012-08-26';"}, {"question_id": 1522, "answer_sql": "SELECT c.Currency FROM customers c JOIN yearmonth ym ON c.CustomerID = ym.CustomerID WHERE ym.Date LIKE '201306%' AND ym.Consumption = 214582.17;"}, {"question_id": 1523, "answer_sql": "SELECT gs.Country FROM transactions_1k t JOIN customers c ON t.CustomerID = c.CustomerID JOIN gasstations gs ON t.GasStationID = gs.GasStationID WHERE t.CardID = 667467;"}, {"question_id": 1524, "answer_sql": "SELECT c.CustomerID, c.Currency FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID JOIN yearmonth ym ON c.CustomerID = ym.CustomerID WHERE ym.Date = '2012-08-24' AND t.Amount = 548.4;"}, {"question_id": 1525, "answer_sql": "SELECT (COUNT(DISTINCT t.CustomerID) * 100.0 / (SELECT COUNT(DISTINCT CustomerID) FROM customers)) AS percentage FROM transactions_1k t JOIN customers c ON t.CustomerID = c.CustomerID WHERE c.Currency = 'EUR' AND t.Date = '2012-08-25';"}, {"question_id": 1526, "answer_sql": "SELECT ((y2012.Consumption - y2013.Consumption) / y2012.Consumption) AS DecreaseRate FROM yearmonth y2012 JOIN yearmonth y2013 ON y2012.CustomerID = y2013.CustomerID WHERE y2012.Date = '2012-08-25' AND y2013.Date = '2013-08-25' AND y2012.Consumption > 0;"}, {"question_id": 1527, "answer_sql": "SELECT GasStationID, SUM(Amount * Price) AS Revenue FROM transactions_1k GROUP BY GasStationID ORDER BY Revenue DESC LIMIT 1;"}, {"question_id": 1528, "answer_sql": "SELECT (SELECT COUNT(*) FROM customers WHERE Segment = 'premium' AND Country = 'SVK') * 100.0 / (SELECT COUNT(*) FROM customers WHERE Country = 'SVK') AS percentage"}, {"question_id": 1529, "answer_sql": "SELECT SUM(t.Amount) AS TotalSpent FROM transactions_1k t JOIN customers c ON t.CustomerID = c.CustomerID WHERE c.CustomerID = 38508 AND t.Date LIKE '201201%';"}, {"question_id": 1530, "answer_sql": "SELECT p.Description FROM products p JOIN transactions_1k t ON p.ProductID = t.ProductID GROUP BY p.ProductID ORDER BY SUM(t.Amount) DESC LIMIT 5;"}, {"question_id": 1531, "answer_sql": "SELECT c.CustomerID, c.Currency, AVG(t.Price / t.Amount) AS AvgPricePerItem FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID GROUP BY c.CustomerID ORDER BY SUM(t.Amount) DESC LIMIT 1;"}, {"question_id": 1532, "answer_sql": "SELECT gs.Country FROM gasstations gs JOIN transactions_1k t ON gs.GasStationID = t.GasStationID JOIN products p ON t.ProductID = p.ProductID WHERE p.ProductID = 2 ORDER BY t.Price DESC LIMIT 1;"}, {"question_id": 1533, "answer_sql": "SELECT ym.CustomerID, ym.Consumption FROM yearmonth ym JOIN transactions_1k t ON ym.CustomerID = t.CustomerID JOIN products p ON t.ProductID = p.ProductID WHERE p.ProductID = 5 AND t.Price / t.Amount > 29.00 AND ym.Date LIKE '201208%' GROUP BY ym.CustomerID;"}]