[{"question_id": 0, "answer_sql": "SELECT MAX(`Percent (%) Eligible Free (K-12)`) as Highest_Eligible_Rate FROM schools WHERE County = 'Alameda County';"}, {"question_id": 1, "answer_sql": "SELECT `Percent (%) Eligible Free (Ages 5-17)` FROM satscores WHERE `2013-14 CALPADS Fall 1 Certification Status` = 1 ORDER BY `Percent (%) Eligible Free (Ages 5-17)` ASC LIMIT 3;"}, {"question_id": 2, "answer_sql": "SELECT Zip FROM frpm WHERE `Charter School (Y/N)` = 1;"}, {"question_id": 3, "answer_sql": "SELECT MailCity, MailStreet, MailZip, MailState FROM frpm WHERE `FRPM Count (K-12)` = ( SELECT `FRPM Count (K-12)` FROM frpm ORDER BY `FRPM Count (K-12)` DESC LIMIT 1 );"}, {"question_id": 4, "answer_sql": "SELECT Phone, Street, City, State, State as Zip, LastUpdate FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE `Charter School (Y/N)` = 1 AND OpenDate > '2000-01-01' AND `Charter Funding Type` = 'Direct' AND `Educational Option Type` = 'Charter';"}, {"question_id": 5, "answer_sql": "SELECT COUNT(*) FROM satscores WHERE AvgScrMath < 400 AND Virtual = 'F';"}, {"question_id": 6, "answer_sql": "SELECT S.CDSCode, S.SchoolName, S.Street, S.City, S.State FROM schools S JOIN schools_admins SA ON S.CDSCode = SA.CDSCode WHERE SA.Magnet = 1 AND S.Magnet = 1;"}, {"question_id": 7, "answer_sql": "SELECT Phone FROM schools WHERE CDSCode IN (SELECT cds FROM satscores WHERE NumTstTakr > 1500) ```"}, {"question_id": 8, "answer_sql": "SELECT satscores.NumTstTakr FROM satscores JOIN frpm ON satscores.cds = frpm.CDSCode WHERE frpm.`FRPM Count (K-12)` = ( SELECT MAX(`FRPM Count (K-12)`) FROM frpm )"}, {"question_id": 9, "answer_sql": "SELECT COUNT(*) FROM frpm JOIN satscores ON frpm.CDSCode = satscores.cds WHERE satscores.AvgScrMath > 560 AND frpm.Charter = 1;"}, {"question_id": 10, "answer_sql": "SELECT frpm.`FRPM Count (Ages 5-17)` FROM frpm JOIN satscores ON frpm.CDSCode = satscores.cds WHERE satscores.AvgScrRead = (SELECT MAX(AvgScrRead) FROM satscores)"}, {"question_id": 11, "answer_sql": "SELECT frpm.CDSCode FROM frpm WHERE (SELECT (frpm.`Enrollment (K-12)` + frpm.`Enrollment (Ages 5-17)`) FROM frpm WHERE frpm.CDSCode = 'XYZ') > 500;"}, {"question_id": 12, "answer_sql": "SELECT MAX(`Percent (%) Eligible Free (Ages 5-17)`) FROM schools WHERE `2013-14 CALPADS Fall 1 Certification Status` = 1 AND `Percent (%) Eligible Free (Ages 5-17)` IS NOT NULL;"}, {"question_id": 13, "answer_sql": "SELECT Phone FROM schools WHERE CDSCode IN (SELECT cds FROM satscores WHERE NumTstTakr=(SELECT MAX(NumTstTakr) FROM satscores)) ORDER BY Phone;"}, {"question_id": 14, "answer_sql": "SELECT s.NCESDist, s.NCESSchool FROM schools s JOIN ( SELECT cds, MAX(enroll12) as max_enroll FROM schools GROUP BY cds ORDER BY max_enroll DESC LIMIT 5 ) sub ON s.CDSCode = sub.cds"}, {"question_id": 15, "answer_sql": "SELECT s.District, AVG(satscores.AvgScrRead) as Average_Reading_Score FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE schools.StatusType = 'Active' GROUP BY s.District ORDER BY Average_Reading_Score DESC LIMIT 1;"}, {"question_id": 16, "answer_sql": "SELECT COUNT(*) FROM frpm WHERE `County Code` = 'Alameda' AND `School Code` IN (SELECT `School Code` FROM satscores WHERE `County Code` = 'Alameda') AND `NumTstTakr` < 100;"}, {"question_id": 17, "answer_sql": "SELECT `Charter School Number` FROM frpm WHERE `Academic Year` = '2013-14' AND `County Code` = '060' AND `District Code` = '001' AND `School Code` = '001' AND `Educational Option Type` = 'Charter' AND `Charter School (Y/N)` = '1' AND `2013-14 CALPADS Fall 1 Certification Status` = '1';"}, {"question_id": 18, "answer_sql": "SELECT COUNT(*) FROM frpm WHERE IRC = 1 AND NumTstTakr <= 250;"}, {"question_id": 19, "answer_sql": "SELECT Phone FROM schools WHERE CDSCode IN (SELECT cds FROM satscores ORDER BY AvgScrMath DESC LIMIT 1)"}, {"question_id": 20, "answer_sql": "SELECT COUNT(*) FROM frpm WHERE `Low Grade` = 9 AND `High Grade` = 12 AND `County Name` = 'Amador';"}, {"question_id": 21, "answer_sql": "SELECT COUNT(*) FROM frpm WHERE `Enrollment (K-12)` > 500 AND `Free Meal Count (K-12)` > 0 AND `Free Meal Count (K-12)` < 700;"}, {"question_id": 22, "answer_sql": "SELECT s.SchoolName, satscores.NumTstTakr FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE satscores.NumTstTakr = (SELECT MAX(NumTstTakr) FROM satscores)"}, {"question_id": 23, "answer_sql": "SELECT s.School, s.Street FROM schools AS s JOIN ( SELECT cds, SUM(enroll12 - Enrollment) AS diff FROM satscores GROUP BY cds HAVING diff > 30 ) AS d ON s.CDSCode = d.cds WHERE s.StatusType = 'In-School' AND s.Charter = 0 AND s.ClosedDate IS NULL;"}, {"question_id": 24, "answer_sql": "SELECT s.SchoolName FROM frpm f JOIN schools s ON f.CDSCode = s.CDSCode WHERE f.`Percent (%) Eligible Free (K-12)` > 0.1 AND satscores.NumTstTakr >= 1500 GROUP BY s.SchoolName;"}, {"question_id": 25, "answer_sql": "SELECT s.School, s.FundingType FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds WHERE ss.AvgScrMath > 400 AND s.Riverside = 1"}, {"question_id": 26, "answer_sql": "SELECT s.CDSCode, s.SchoolName, s.Street, s.City, s.State, s.Zip, s.MailStreet, s.MailCity, s.MailState, s.MailZip FROM schools s JOIN schools_admins sa ON s.CDSCode = sa.CDSCode WHERE s.SchoolName LIKE '%Monterey%' AND (s.Enrollment(Ages 5-17) + s.Free Meal Count (Ages 5-17)) > 800;"}, {"question_id": 27, "answer_sql": "SELECT s.SchoolName, satscores.AvgScrWrite FROM schools s JOIN satscores s1 ON s.CDSCode = s1.cds WHERE s.OpenDate > '1991-01-01' AND s.ClosedDate < '2000-01-01' ORDER BY s.SchoolName;"}, {"question_id": 28, "answer_sql": "SELECT s.School, s.DOCType FROM schools s JOIN schools_admins sa ON s.CDSCode = sa.CDSCode WHERE s.FundingType = 'Locally Funded' AND (s.Enroll12 - s.Enroll17) > (SELECT AVG(Enroll12 - Enroll17) FROM schools WHERE FundingType = 'Locally Funded') AND sa.LastUpdate > CURRENT_DATE - INTERVAL '1 year';"}, {"question_id": 29, "answer_sql": "SELECT `Academic Year`, `School Name` FROM frpm WHERE `Enrollment (K-12)` = ( SELECT MAX(`Enrollment (K-12)`) FROM frpm )"}, {"question_id": 30, "answer_sql": "SELECT City, MIN(Enrollment) as Lowest_Enrollment FROM frpm GROUP BY City ORDER BY Lowest_Enrollment ASC LIMIT 5;"}, {"question_id": 31, "answer_sql": "To answer the question, you can use the following SQL query: ```sql SELECT s.CDSCode, s.SchoolName, s.Enrollment(K-12) AS Enrollment_K12, s.FreeMealCount(K-12) AS FreeMealCount_K12, s.Percent(%)EligibleFree(K-12) AS Percent_EligibleFree_K12, s.FRPMCount(K-12) AS FRPMCount_K12, s.Percent(%)EligibleFRPM(K-12) AS Percent_EligibleFRPM_K12 FROM schools s JOIN (SELECT CDSCode, MAX(Enrollment(K-12)) AS Enrollment_K12, MAX(FreeMealCount(K-12)) AS FreeMealCount_K12, MAX(Percent(%)EligibleFree(K-12)) AS Percent_EligibleFree_K12, MAX(FRPMCount(K-12)) AS FRPMCount_K12, MAX(Percent(%)EligibleFRPM(K-12)) AS Percent_EligibleFRPM_K12 FROM schools WHERE `Enrollment (K-12)` > 0 GROUP BY CDSCode) t ON s.CDSCode = t.CDSCode WHERE s.`Enrollment (K-12)` = t.Enrollment_K12 AND s.`FreeMealCount (K-12)` = t.FreeMealCount_K12 AND s.`Percent (%) Eligible Free (K-12)` = t.Percent_EligibleFree_K12 AND s.`FRPMCount (K-12)` = t.FRPMCount_K12 AND s.`Percent (%) Eligible FRPM (K"}, {"question_id": 32, "answer_sql": "SELECT s.CDSCode, s.SchoolName, s.Enrollment(K-12), s.FRPM Count (K-12), s.FRPM Count (K-12) / s.Enrollment (K-12) as FRPM_Rate FROM frpm f JOIN schools s ON f.CDSCode = s.CDSCode WHERE s.CDSCode IN ( SELECT CDSCode FROM frpm ORDER BY FRPM Count (K-12) DESC LIMIT 5 )"}, {"question_id": 33, "answer_sql": "SELECT SchoolName, Website FROM schools WHERE `Enrollment (Ages 5-17)` BETWEEN 1900 AND 2000 AND `Free Meal Count (Ages 5-17)` = 1;"}, {"question_id": 34, "answer_sql": "SELECT `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` as FreeRate FROM satscores WHERE rtype = 'SAT' AND sname = 'Kacey Gibson' AND dname = 'California' AND cname = 'Los Angeles'"}, {"question_id": 35, "answer_sql": "SELECT `AdmEmail1`, `AdmEmail2`, `AdmEmail3` FROM frpm WHERE `Charter School (Y/N)` = 1 AND `Enrollment (K-12)` = (SELECT MIN(`Enrollment (K-12)`) FROM frpm WHERE `Charter School (Y/N)` = 1);"}, {"question_id": 36, "answer_sql": "SELECT AdmFName1, AdmLName1 FROM schools WHERE NumGE1500 = (SELECT MAX(NumGE1500) FROM satscores WHERE cds = (SELECT CDSCode FROM schools WHERE rtype = 'High'));"}, {"question_id": 37, "answer_sql": "SELECT Street, City, Zip, State FROM schools WHERE CDSCode IN (SELECT cds FROM satscores WHERE NumTstTakr = (SELECT MIN(NumTstTakr) FROM satscores)) This query will return the address of the school with the lowest number of test takers."}, {"question_id": 38, "answer_sql": "SELECT SchoolName, Street, City, State, Website FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE NumTstTakr BETWEEN 2000 AND 3000;"}, {"question_id": 39, "answer_sql": "SELECT AVG(NumTstTakr) FROM satscores WHERE cds IN (SELECT CDSCode FROM frpm WHERE `Academic Year` = '1980');"}, {"question_id": 40, "answer_sql": "SELECT Phone FROM frpm WHERE `2013-14 CALPADS Fall 1 Certification Status` = ( SELECT MIN(`2013-14 CALPADS Fall 1 Certification Status`) FROM satscores );"}, {"question_id": 41, "answer_sql": "SELECT s.School, s.Street, s.City, s.State, s.Zip, s.LastUpdate FROM schools AS s JOIN schools_admins AS sa ON s.CDSCode = sa.CDSCode WHERE s.Virtual = 'F' ORDER BY satscores.AvgScrRead DESC LIMIT 5;"}, {"question_id": 42, "answer_sql": "SELECT `School Type` FROM frpm WHERE `Academic Year` = (SELECT MAX(`Academic Year`) FROM satscores);"}, {"question_id": 43, "answer_sql": "SELECT s.County, AVG(satscores.AvgScrMath + satscores.AvgScrRead + satscores.AvgScrWrite) as AverageMathScore FROM satscores JOIN frpm f ON satscores.cds = f.CDSCode WHERE f.`Low Grade` = (SELECT MIN(`Low Grade`) FROM frpm) GROUP BY s.County ORDER BY AverageMathScore DESC LIMIT 1;"}, {"question_id": 44, "answer_sql": "SELECT s.City, AVG(satscores.AvgScrWrite) as AvgWriteScore FROM satscores JOIN frpm ON satscores.cds = frpm.CDSCode JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE satscores.NumTstTakr >= 1500 GROUP BY s.City ORDER BY AVG(satscores.AvgScrWrite) DESC LIMIT 1;"}, {"question_id": 45, "answer_sql": "SELECT s.SchoolName, satscores.AvgScrWrite FROM satscores JOIN s ON satscores.cds = s.CDSCode WHERE s.CDSCode IN (SELECT CDSCode FROM schools WHERE AdmFName1 = 'Ricci' AND AdmLName1 = 'Ulrich');"}, {"question_id": 46, "answer_sql": "SELECT s.State, s.School, SUM(ss.enroll12) as TotalEnrollment FROM satscores ss JOIN schools s ON ss.cds = s.CDSCode WHERE s.DOC = 31 AND s.SchoolType = 'State Special School' GROUP BY s.State, s.School ORDER BY TotalEnrollment DESC;"}, {"question_id": 47, "answer_sql": "SELECT COUNT(DISTINCT CDSCode) / 12 FROM schools WHERE DOC = 52 AND OpenDate <= '1980-12-31' AND OpenDate >= '1980-01-01';"}, {"question_id": 48, "answer_sql": "SELECT (SELECT COUNT(*) FROM schools WHERE DOC = 54) as Unified, (SELECT COUNT(*) FROM schools WHERE DOC = 52) as Elementary FROM dual;"}, {"question_id": 49, "answer_sql": "SELECT COUNT(DISTINCT schools.CDSCode) as TotalCount, schools.County, schools.School, schools.ClosedDate FROM schools WHERE schools.ClosedDate IS NOT NULL GROUP BY schools.County ORDER BY TotalCount DESC LIMIT 1;"}, {"question_id": 50, "answer_sql": "SELECT S.Street, S.City, S.State, S.Zip FROM schools AS S JOIN ( SELECT cds, MAX(AvgScrMath) AS MaxMath FROM satscores GROUP BY cds ) AS M ON S.CDSCode = M.cds WHERE S.CDSCode IN ( SELECT cds FROM satscores GROUP BY cds ORDER BY MAX(AvgScrMath) DESC LIMIT 1 )"}, {"question_id": 51, "answer_sql": "SELECT MailStreet, SchoolName FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE satscores.AvgScrRead = (SELECT MIN(AvgScrRead) FROM satscores)"}, {"question_id": 52, "answer_sql": "SELECT COUNT(*) FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE satscores.AvgScrRead + satscores.AvgScrMath + satscores.AvgScrWrite >= 1500 AND schools.City = 'Lakeport';"}, {"question_id": 53, "answer_sql": "SELECT satscores.NumTstTakr FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE schools.City = 'Fresno';"}, {"question_id": 54, "answer_sql": "SELECT s.CDSCode, s.Zip, m.Zip as MailingZip FROM schools s JOIN schools_admins sa ON s.CDSCode = sa.CDSCode JOIN frpm f ON s.CDSCode = f.CDSCode WHERE sa.AdmFName1 = 'Avetik Atoian' AND sa.AdmEmail1 = 'avetik.atoian@example.com';"}, {"question_id": 55, "answer_sql": "SELECT (COUNT(CDSCode) FROM schools WHERE MailState = 'California') / (SELECT COUNT(CDSCode) FROM schools WHERE County = 'Colusa') AS ratio;"}, {"question_id": 56, "answer_sql": "SELECT COUNT(*) FROM schools WHERE MailState = 'California' AND MailCity = 'San Joaquin';"}, {"question_id": 57, "answer_sql": "SELECT Phone, Ext FROM schools WHERE LastUpdate = (SELECT MAX(LastUpdate) FROM schools)"}, {"question_id": 58, "answer_sql": "SELECT Phone, Ext, SchoolName FROM schools WHERE Zip = '95203-3704';"}, {"question_id": 59, "answer_sql": "SELECT Website FROM schools WHERE AdmFName1 = 'Mike Larson' AND AdmLName1 = 'Alvarez' OR AdmFName2 = 'Mike Larson' AND AdmLName2 = 'Alvarez' OR AdmFName3 = 'Mike Larson' AND AdmLName3 = 'Alvarez';"}, {"question_id": 60, "answer_sql": "SELECT Website FROM schools WHERE Virtual = 'P' AND Charter = 1 AND City = 'San Joaquin' This query will return the website of all partially virtual chartered schools located in San Joaquin."}, {"question_id": 61, "answer_sql": "SELECT COUNT(*) FROM schools WHERE `Charter School (Y/N)` = 1 AND `Charter School Number` IS NOT NULL AND `County Name` = 'Hickman' AND DOC = 52;"}, {"question_id": 62, "answer_sql": "SELECT COUNT(*) FROM schools WHERE `Charter School (Y/N)` = 0 AND `Educational Option Type` = 'K-12' AND `Percent (%) Eligible Free (K-12)` < 0.18;"}, {"question_id": 63, "answer_sql": "SELECT s.School, s.City, sa.AdmFName1, sa.AdmLName1, sa.AdmEmail1 FROM schools s JOIN schools_admins sa ON s.CDSCode = sa.CDSCode WHERE s.Charter = 1 AND sa.CharterNum = '00D2';"}, {"question_id": 64, "answer_sql": "SELECT COUNT(*) FROM schools WHERE MailingCity = 'Hickman' AND Charter = 00D4;"}, {"question_id": 65, "answer_sql": "SELECT (COUNT(CDSCode) * 1.0 / (SELECT COUNT(*) FROM schools WHERE County = 'Santa Clara')) * 100 AS Percentage FROM frpm WHERE County = 'Santa Clara';"}, {"question_id": 66, "answer_sql": "SELECT COUNT(*) FROM schools WHERE FundingType = 'Directly Funded' AND OpenDate BETWEEN '2000-01-01' AND '2005-12-31';"}, {"question_id": 67, "answer_sql": "SELECT SUM(ClosedDate) as Total_Closures FROM frpm WHERE `County Name` = 'San Francisco' AND `County Code` = '061';"}, {"question_id": 68, "answer_sql": "SELECT s.County, SUM(f.FRPM Count (K-12)) as Total_FRPM_Count FROM schools s JOIN schools_admins sa ON s.CDSCode = sa.CDSCode JOIN frpm f ON s.CDSCode = f.CDSCode WHERE s.SOC = 11 AND s.DOCType = 'CEA' GROUP BY s.County ORDER BY Total_FRPM_Count DESC LIMIT 1;"}, {"question_id": 69, "answer_sql": "SELECT s.CDSCode FROM schools s WHERE s.SOC = 31;"}, {"question_id": 70, "answer_sql": "SELECT COUNT(*) FROM frpm WHERE `District Name` = 'Alpine' AND `Status Type` = 'Active' AND `Closed Date` IS NOT NULL;"}, {"question_id": 71, "answer_sql": "SELECT DistrictCode FROM schools WHERE Magnet = 0 AND City = 'Fresno';"}, {"question_id": 72, "answer_sql": "SELECT SUM(enroll12) FROM satscores WHERE rtype = 'SSS' AND `Academic Year` = '2014-2015';"}, {"question_id": 73, "answer_sql": "SELECT `Free Meal Count (Ages 5-17)` FROM schools WHERE `Street` = 'PO Box 1040' AND `City` = 'YOUTH AUTHORITY' AND `State` = 'CA';"}, {"question_id": 74, "answer_sql": "SELECT `Low Grade` FROM frpm WHERE `District Code` = 613360 AND `District Type` = 'SPECON';"}, {"question_id": 75, "answer_sql": "SELECT s.School, s.Street, s.City, s.State, s.Zip, s.Charter, s.CharterNum, s.FundingType, s.DOC, s.DOCType, s.SOC, s.SOCType, s.EdOpsCode, s.EdOpsName, s.EILCode, s.EILName, s.GSoffered, s.GSserved, s.Virtual, s.Magnet, s.Latitude, s.Longitude, s.AdmFName1, s.AdmLName1, s.AdmEmail1, s.LastUpdate FROM schools AS s JOIN frpm AS f ON s.CDSCode = f.CDSCode WHERE f.`County Code` = '37' AND f.`Educational Option Type` = 'Breakfast Provision 2'"}, {"question_id": 76, "answer_sql": "SELECT City, State FROM schools WHERE EILCode = 'HS' AND LowGrade = '9' AND HighGrade = '12' AND County = 'Merced' AND LunchProvision = 2;"}, {"question_id": 77, "answer_sql": "SELECT S.CDSCode, S.School, S.Street, S.City, S.State, S.Zip, S.Charter, S.CharterNum, S.FundingType, S.DOC, S.DOCType, S.SOC, S.SOCType, S.EdOpsCode, S.EdOpsName, S.EILCode, S.EILName, S.GSoffered, S.GSserved, S.Virtual, S.Magnet, S.Latitude, S.Longitude, S.AdmFName1, S.AdmLName1, S.AdmEmail1, S.LastUpdate, (F.FRPMCount(Ages 5-17) / S.Enrollment(Ages 5-17)) * 100 AS PercentEligibleFRPM FROM schools S LEFT JOIN ( SELECT cds, SUM(FRPMCount) AS FRPMCount(Ages 5-17) FROM satscores WHERE rtype = 'Ages 5-17' GROUP BY cds ) F ON S.CDSCode = F.cds WHERE S.County = 'Los Angeles' AND S.Charter = 1 AND S.DOC = 'FRPM'"}, {"question_id": 78, "answer_sql": "SELECT edops_name FROM schools WHERE city = 'Adelanto' GROUP BY edops_name ORDER BY COUNT(*) DESC LIMIT 1;"}, {"question_id": 79, "answer_sql": "SELECT COUNT(*) FROM schools WHERE County IN ( SELECT County FROM schools WHERE Virtual = 'F' GROUP BY County ORDER BY COUNT(*) DESC LIMIT 1 ) AND County NOT IN ( SELECT County FROM schools WHERE Virtual = 'F' GROUP BY County ORDER BY COUNT(*) DESC LIMIT 1 ) AND County BETWEEN 'San Diego' AND 'Santa Barbara'"}, {"question_id": 80, "answer_sql": "SELECT SchoolType, SchoolName, Latitude FROM schools WHERE Latitude = (SELECT MAX(Latitude) FROM schools);"}, {"question_id": 81, "answer_sql": "SELECT SchoolName, City FROM schools WHERE State = 'CA' AND Latitude = (SELECT MIN(Latitude) FROM schools WHERE State = 'CA') AND `Low Grade` = (SELECT MIN(`Low Grade`) FROM frpm WHERE CDSCode IN (SELECT CDSCode FROM schools WHERE State = 'CA'));"}, {"question_id": 82, "answer_sql": "SELECT `High Grade` FROM schools WHERE Longitude = (SELECT MAX(Longitude) FROM schools);"}, {"question_id": 83, "answer_sql": "SELECT COUNT(*), City, COUNT(DISTINCT CDSCode) as NumSchools FROM schools WHERE Magnet = 1 AND (EdOpsCode = 'M' OR EdOpsCode = 'MP') GROUP BY City"}, {"question_id": 84, "answer_sql": "SELECT AdmFName1, AdmFName2, AdmFName3, COUNT(DISTINCT CDSCode) as District FROM schools_admins WHERE LastUpdate >= '2022-01-01' GROUP BY District ORDER BY District, COUNT(DISTINCT CDSCode) DESC, AdmFName1, AdmFName2, AdmFName3 LIMIT 2;"}, {"question_id": 85, "answer_sql": "SELECT `Percent (%) Eligible Free (K-12)` FROM frpm WHERE `AdmFName1` = 'Alusine' The SQL query will return the Percent (%) Eligible Free (K-12) for the school administered by an administrator whose first name is Alusine."}, {"question_id": 86, "answer_sql": "SELECT AdmLName1, District, County, School FROM schools WHERE Charter = 40;"}, {"question_id": 87, "answer_sql": "SELECT `AdmEmail1`, `AdmEmail2`, `AdmEmail3` FROM schools WHERE `SOC` = 62 AND `DOC` = 54 AND `OpenDate` BETWEEN '2009-01-01' AND '2010-12-31';"}, {"question_id": 88, "answer_sql": "SELECT adm.AdmEmail1, adm.AdmFName1, adm.AdmLName1, adm.SchoolName FROM schools_admins AS adm JOIN satscores AS s ON s.cds = adm.CDSCode WHERE s.NumTstTakr >= 1500 ORDER BY s.NumTstTakr DESC LIMIT 1;"}, {"question_id": 89, "answer_sql": "SELECT COUNT(*) FROM account JOIN client ON account.client_id = client.client_id JOIN disp ON account.account_id = disp.account_id JOIN card ON client.client_id = card.disp_id WHERE disp.type = 'POPLATEK PO OBRATU' AND client.gender = 'M' AND client.district_id = 1;"}, {"question_id": 90, "answer_sql": "SELECT COUNT(*) FROM account WHERE district_id IN (SELECT district_id FROM district WHERE A3 = 'Prague');"}, {"question_id": 91, "answer_sql": "SELECT A12 AS 'Unemployment Rate 1995', A13 AS 'Unemployment Rate 1996' FROM district"}, {"question_id": 92, "answer_sql": "SELECT COUNT(*) FROM district WHERE A11 > 6000 AND A11 < 10000 AND gender = 'F';"}, {"question_id": 93, "answer_sql": "SELECT COUNT(*) FROM client JOIN district ON client.district_id = district.district_id WHERE client.gender = 'M' AND district.A3 = 'North Bohemia' AND district.A11 > 8000;"}, {"question_id": 94, "answer_sql": "SELECT account_id, AVG(A11) as average_salary FROM client WHERE gender = 'F' GROUP BY account_id ORDER BY average_salary ASC LIMIT 1;"}, {"question_id": 95, "answer_sql": "SELECT account.account_id FROM account JOIN client ON account.client_id = client.client_id WHERE client.gender = 'female' AND client.birth_date = ( SELECT MIN(birth_date) FROM client WHERE gender = 'female' ) AND ( SELECT AVG(client.A11) FROM client WHERE client.client_id = account.client_id ) = ( SELECT AVG(client.A11) FROM client WHERE client.gender = 'female' );"}, {"question_id": 96, "answer_sql": "SELECT COUNT(*) FROM client JOIN disp ON client.client_id = disp.client_id JOIN account ON disp.account_id = account.account_id WHERE client.gender = 'Owner' AND disp.type = 'POPLATK TYDNE';"}, {"question_id": 97, "answer_sql": "SELECT client.client_id, client.gender, client.birth_date, district.A2, district.A3, district.A4, district.A5, district.A6, district.A7, district.A8, district.A9, district.A10, district.A11, district.A12, district.A13, district.A14, district.A15, district.A16 FROM client JOIN disp ON client.client_id = disp.client_id JOIN loan ON client.client_id = loan.account_id JOIN district ON client.district_id = district.district_id WHERE disp.type = 'POPLATK PO OBRATU'"}, {"question_id": 98, "answer_sql": "SELECT account.account_id, account.frequency, account.date, account.amount FROM account JOIN loan ON account.account_id = loan.account_id WHERE loan.date = '1997-01-01' AND loan.status = 'approved' ORDER BY account.amount ASC LIMIT 1;"}, {"question_id": 99, "answer_sql": "SELECT account.account_id, account.date, account.frequency, loan.amount FROM account JOIN loan ON account.account_id = loan.account_id WHERE loan.duration > 12 AND account.date >= '1993-01-01' ORDER BY loan.amount DESC LIMIT 1;"}, {"question_id": 100, "answer_sql": "SELECT COUNT(*) FROM client JOIN district ON client.district_id = district.district_id WHERE client.gender = 'F' AND client.birth_date < '1950' AND district.A2 = 'Slokolov';"}, {"question_id": 101, "answer_sql": "SELECT account.account_id, account.date FROM account WHERE account.date = (SELECT MIN(date) FROM account WHERE date >= '1995-01-01' AND date <= '1995-12-31');"}, {"question_id": 102, "answer_sql": "SELECT account.account_id, account.date, account.frequency FROM account WHERE account.date < '1997-01-01' AND account.frequency = 'USD' AND account.amount > 3000;"}, {"question_id": 103, "answer_sql": "SELECT client.client_id FROM client JOIN disp ON client.client_id = disp.client_id JOIN card ON disp.disp_id = card.disp_id WHERE card.issued = '1994-03-03';"}, {"question_id": 104, "answer_sql": "SELECT account.date FROM account WHERE account.account_id = ( SELECT account_id FROM loan WHERE loan.loan_id = ( SELECT loan_id FROM `order` WHERE `order`.order_id = ( SELECT order_id FROM trans WHERE trans.trans_id = 840 ) ) );"}, {"question_id": 105, "answer_sql": "SELECT account.district_id FROM account JOIN loan ON account.account_id = loan.account_id WHERE loan.date = '1994-08-25'"}, {"question_id": 106, "answer_sql": "SELECT MAX(amount) as Biggest_Amount FROM disp WHERE issued = '1996-10-21';"}, {"question_id": 107, "answer_sql": "SELECT client.gender FROM client WHERE client.birth_date = ( SELECT MIN(client.birth_date) FROM client WHERE client.district_id = ( SELECT district.A11 FROM district WHERE district.A8 = ( SELECT account.district_id FROM account WHERE account.date = ( SELECT MAX(date) FROM account ) ) ) );"}, {"question_id": 108, "answer_sql": "SELECT trans.amount FROM trans JOIN account ON trans.account_id = account.account_id JOIN client ON account.client_id = client.client_id WHERE client.client_id = ( SELECT client_id FROM loan ORDER BY amount DESC LIMIT 1 ) ORDER BY trans.date LIMIT 1;"}, {"question_id": 109, "answer_sql": "SELECT COUNT(*) FROM client WHERE district_id = (SELECT district_id FROM district WHERE A2 = 'Jesenik' AND A16 = 'F');"}, {"question_id": 110, "answer_sql": "SELECT disp.disp_id FROM disp JOIN client ON disp.client_id = client.client_id JOIN account ON disp.account_id = account.account_id JOIN trans ON account.account_id = trans.account_id WHERE trans.type = 'transaction' AND trans.amount = 5100 AND trans.date = '1998-09-02';"}, {"question_id": 111, "answer_sql": "SELECT COUNT(*) FROM account WHERE district_id = (SELECT district_id FROM district WHERE A2 = 'Litomerice' AND A11 = 1996);"}, {"question_id": 112, "answer_sql": "SELECT DISTINCT A2 FROM district WHERE gender = 'F' AND birth_date = '1976-01-29';"}, {"question_id": 113, "answer_sql": "SELECT birth_date FROM client WHERE client_id = (SELECT client_id FROM loan WHERE loan_id = (SELECT loan_id FROM trans WHERE date = '1996-01-03' AND type = 'loan'));"}, {"question_id": 114, "answer_sql": "SELECT account_id FROM account WHERE district_id = (SELECT district_id FROM district WHERE A3 = 'Prague')"}, {"question_id": 115, "answer_sql": "SELECT A3, (COUNT(CASE WHEN gender = 'M' THEN 1 END)) * 100 / (SELECT COUNT(*) FROM client WHERE district_id = (SELECT district_id FROM district WHERE A4 = 'South Bohemia')) AS percentage FROM client WHERE district_id = (SELECT district_id FROM district WHERE A4 = 'South Bohemia') GROUP BY A3 ORDER BY percentage DESC;"}, {"question_id": 116, "answer_sql": "SELECT (balance('1998-12-27') - balance('1993-03-22')) / balance('1993-03-22') * 100 as increase_rate FROM client JOIN disp ON client.client_id = disp.client_id JOIN account ON disp.account_id = account.account_id WHERE date = '1993-07-05'"}, {"question_id": 117, "answer_sql": "SELECT (SUM(CASE WHEN status = 'A' AND amount = payments THEN 1 ELSE 0 END)) * 100 / SUM(amount) AS percentage_fully_paid FROM loan JOIN account ON loan.account_id = account.account_id"}, {"question_id": 118, "answer_sql": "SELECT (SUM(loan.amount) * 100) / (SELECT SUM(loan.amount) FROM loan WHERE loan.status = 'C' AND loan.amount < 100000) AS percentage_running FROM loan WHERE loan.status = 'C';"}, {"question_id": 119, "answer_sql": "SELECT account.account_id, district.A2, district.A3 FROM account JOIN district ON account.district_id = district.district_id WHERE account.date >= '1993-01-01' AND account.statement = 'POPLATEK PO OBRATU'"}, {"question_id": 120, "answer_sql": "SELECT account.account_id, COUNT(distinct account.date) as frequency FROM account JOIN client ON account.district_id = client.district_id WHERE client.gender = 'east Bohemia' AND account.date BETWEEN '1995-01-01' AND '2000-12-31' GROUP BY account.account_id;"}, {"question_id": 121, "answer_sql": "SELECT account.account_id, account.date FROM account WHERE district_id IN (SELECT district_id FROM district WHERE A2 = 'Practice')"}, {"question_id": 122, "answer_sql": "SELECT A2, A3 FROM loan WHERE loan_id = 4990;"}, {"question_id": 123, "answer_sql": "SELECT account_id, A2 as district, A3 as region FROM account JOIN district ON account.district_id = district.district_id WHERE account.frequency = 'loan' AND account.amount > 300000"}, {"question_id": 124, "answer_sql": "SELECT loan.loan_id, district.A3, AVG(client.A11) as average_salary FROM loan JOIN account ON loan.account_id = account.account_id JOIN client ON account.client_id = client.client_id JOIN district ON client.district_id = district.district_id WHERE loan.duration = 60 GROUP BY loan.loan_id, district.A3;"}, {"question_id": 125, "answer_sql": "SELECT DISTINCT A12, A13 FROM loan JOIN client ON loan.account_id = client.client_id JOIN district ON client.district_id = district.district_id WHERE status = 'D' AND date BETWEEN '1995-01-01' AND '1996-12-31';"}, {"question_id": 126, "answer_sql": "SELECT account.account_id, account.frequency, account.date, district.A2 FROM account JOIN district ON account.district_id = district.district_id WHERE district.A2 = 'Decin' AND account.date = '1993-01-01';"}, {"question_id": 127, "answer_sql": "SELECT account_id FROM account WHERE frequency = 'POPLATK MESICNE';"}, {"question_id": 128, "answer_sql": "SELECT DISTINCT A2, COUNT(*) as female_count FROM client JOIN account ON client.client_id = account.client_id WHERE gender = 'F' GROUP BY A2 ORDER BY female_count DESC LIMIT 10;"}, {"question_id": 129, "answer_sql": "SELECT d.A2, SUM(t.amount) as total_withdrawals FROM trans t JOIN account a ON t.account_id = a.account_id JOIN client c ON a.client_id = c.client_id JOIN disp d ON a.account_id = d.account_id WHERE t.type = 'VYDAJ' AND t.date LIKE '1996-01%' AND d.A2 IS NOT NULL GROUP BY d.A2 ORDER BY total_withdrawals DESC LIMIT 10;"}, {"question_id": 130, "answer_sql": "SELECT COUNT(*) FROM client WHERE district_id IN (SELECT district_id FROM district WHERE A3 = 'South Bohemia');"}, {"question_id": 131, "answer_sql": "SELECT A3 FROM district WHERE A16 = (SELECT MAX(A16) FROM district WHERE A14 = 'C')"}, {"question_id": 132, "answer_sql": "SELECT AVG(loan.amount) FROM loan JOIN client ON loan.account_id = client.client_id WHERE client.gender = 'M';"}, {"question_id": 133, "answer_sql": "SELECT A2 AS District, A13 AS Unemployment_Rate FROM district WHERE A13 = (SELECT MAX(A13) FROM district);"}, {"question_id": 134, "answer_sql": "SELECT COUNT(*) FROM account WHERE district_id IN (SELECT district_id FROM district WHERE A16 = (SELECT MAX(A16) FROM district));"}, {"question_id": 135, "answer_sql": "SELECT COUNT(*) FROM account WHERE frequency = 'POPLATEK MESICNE' AND date >= CURRENT_DATE - INTERVAL '1 month' AND balance < 0;"}, {"question_id": 136, "answer_sql": "SELECT COUNT(*) FROM loan WHERE date BETWEEN '1995-01-01' AND '1997-12-31' AND amount >= 250000 AND frequency = 'POPLATEK MESICNE';"}, {"question_id": 137, "answer_sql": "SELECT COUNT(*) FROM account WHERE status = 'C' AND district_id = 1;"}, {"question_id": 138, "answer_sql": "SELECT COUNT(*) FROM client WHERE gender = 'M' AND A15 = (SELECT MAX(A15) FROM client WHERE A15 < (SELECT A15 FROM district WHERE A2 = '1995'));"}, {"question_id": 139, "answer_sql": "SELECT COUNT(*) FROM card WHERE type = 'High-level';"}, {"question_id": 140, "answer_sql": "SELECT COUNT(*) FROM account WHERE district_id IN (SELECT district_id FROM district WHERE A2 = 'Pisek');"}, {"question_id": 141, "answer_sql": "SELECT DISTINCT district.A2, district.A3, district.A4, district.A5, district.A6, district.A7, district.A8, district.A9, district.A10, district.A11, district.A12, district.A13, district.A14, district.A15, district.A16 FROM district JOIN trans ON district.district_id = trans.account_id WHERE trans.amount > 10000 AND trans.date = '1997-01-01'"}, {"question_id": 142, "answer_sql": "SELECT account.account_id, account.frequency, account.date, client.gender, district.A2, district.A3, district.A4, district.A5, district.A6, district.A7, district.A8, district.A9, district.A10, district.A11, district.A12, district.A13, district.A14, district.A15, district.A16 FROM account JOIN client ON account.client_id = client.client_id JOIN district ON client.district_id = district.district_id JOIN `order` ON account.account_id = `order`.account_id WHERE `order`.k_symbol = 'SIPO'"}, {"question_id": 143, "answer_sql": "SELECT account.account_id, account.frequency, account.date, account.district_id FROM account JOIN disp ON account.account_id = disp.account_id JOIN card ON disp.disp_id = card.disp_id WHERE card.type = 'gold' AND card.type = 'junior'"}, {"question_id": 144, "answer_sql": "SELECT AVG(amount) FROM disp JOIN card ON disp.disp_id = card.disp_id JOIN client ON disp.client_id = client.client_id WHERE date = '2021-01-01' AND type = 'VYBER KARTOU'"}, {"question_id": 145, "answer_sql": "SELECT account.account_id FROM account JOIN disp ON account.account_id = disp.account_id JOIN card ON disp.disp_id = card.disp_id WHERE card.type = 'VYBER KARTOU' AND disp.date = '1998-01-01' GROUP BY account.account_id HAVING AVG(disp.amount) > SUM(disp.amount)"}, {"question_id": 146, "answer_sql": "SELECT client.client_id, client.gender FROM client JOIN disp ON client.client_id = disp.client_id JOIN card ON disp.disp_id = card.disp_id WHERE client.gender = 'F'"}, {"question_id": 147, "answer_sql": "SELECT COUNT(*) FROM client JOIN account ON client.client_id = account.client_id JOIN district ON client.district_id = district.district_id WHERE client.gender = 'F' AND district.A3 = 'south Bohemia';"}, {"question_id": 148, "answer_sql": "SELECT account.account_id, account.frequency, account.date, loan.amount, loan.duration, loan.payments, loan.status FROM account JOIN loan ON account.account_id = loan.account_id WHERE account.district_id = 'Tabor' AND loan.status = 'ELIGIBLE';"}, {"question_id": 149, "answer_sql": "SELECT DISTINCT account.type FROM account JOIN client ON account.client_id = client.client_id JOIN district ON client.district_id = district.district_id WHERE (account.type != 'OWNER' AND district.A11 > 8000 AND district.A11 <= 9000)"}, {"question_id": 150, "answer_sql": "SELECT COUNT(*) FROM account JOIN trans ON account.account_id = trans.account_id JOIN client ON account.client_id = client.client_id JOIN district ON client.district_id = district.district_id WHERE district.A3 = 'North Bohemia' AND trans.bank = 'AB';"}, {"question_id": 151, "answer_sql": "SELECT DISTINCT D.A2 FROM account A JOIN disp D ON A.account_id = D.account_id WHERE D.type = 'VYDAJ';"}, {"question_id": 152, "answer_sql": "SELECT AVG(A15) FROM district WHERE A8 > 4000 AND A10 >= 1997;"}, {"question_id": 153, "answer_sql": "SELECT COUNT(*) FROM card WHERE type = 'classic' AND issued <= CURRENT_DATE;"}, {"question_id": 154, "answer_sql": "SELECT COUNT(*) FROM client WHERE district_id IN (SELECT district_id FROM district WHERE A2 = 'Hl.m. Praha' AND gender = 'M')"}, {"question_id": 155, "answer_sql": "SELECT (COUNT(*) * 100) / (SELECT COUNT(*) FROM card WHERE type = 'gold' AND issued < '1998') AS percent_gold_cards_before_1998 FROM card;"}, {"question_id": 156, "answer_sql": "SELECT client.gender, client.birth_date FROM client JOIN account ON client.district_id = account.district_id JOIN loan ON account.account_id = loan.account_id WHERE loan.amount = (SELECT MAX(loan.amount) FROM loan);"}, {"question_id": 157, "answer_sql": "SELECT A15 FROM account WHERE account_id = 532 AND date = '1995-01-01';"}, {"question_id": 158, "answer_sql": "SELECT account.district_id FROM account JOIN `order` ON account.account_id = `order`.account_id WHERE `order`.order_id = 33333;"}, {"question_id": 159, "answer_sql": "SELECT * FROM trans JOIN account ON trans.account_id = account.account_id JOIN client ON account.client_id = client.client_id WHERE client.client_id = 3356 AND trans.type = 'VYBER'"}, {"question_id": 160, "answer_sql": "SELECT COUNT(*) FROM account WHERE frequency = 'POPLATEK TYDNE' AND loan_id IS NOT NULL AND loan.amount < 200000;"}, {"question_id": 161, "answer_sql": "SELECT card.type FROM card JOIN disp ON card.disp_id = disp.disp_id JOIN client ON disp.client_id = client.client_id WHERE client.client_id = 13539;"}, {"question_id": 162, "answer_sql": "SELECT A3 FROM client WHERE client_id = 3541;"}, {"question_id": 163, "answer_sql": "SELECT A.district_id, A.A2, A.A3, A.A4, A.A5, A.A6, A.A7, A.A8, A.A9, A.A10, A.A11, A.A12, A.A13, A.A14, A.A15, A.A16 FROM district A JOIN ( SELECT account_id, district_id FROM account WHERE status = 'A' GROUP BY district_id HAVING COUNT(*) = ( SELECT COUNT(*) FROM account WHERE status = 'A' ) ) B ON A.district_id = B.district_id ORDER BY A.A16 DESC LIMIT 1;"}, {"question_id": 164, "answer_sql": "SELECT client.gender, client.birth_date FROM client JOIN `order` ON client.client_id = `order`.account_id WHERE `order`.order_id = 32423;"}, {"question_id": 165, "answer_sql": "SELECT * FROM trans WHERE account_id IN (SELECT account_id FROM account WHERE district_id = 5);"}, {"question_id": 166, "answer_sql": "SELECT COUNT(*) FROM account WHERE district_id = (SELECT district_id FROM district WHERE A2 = 'Jesenik');"}, {"question_id": 167, "answer_sql": "SELECT client.client_id FROM client JOIN disp ON client.client_id = disp.client_id JOIN card ON disp.disp_id = card.disp_id WHERE card.issued > '1996-01-01'"}, {"question_id": 168, "answer_sql": "SELECT COUNT(*) as percentage FROM client c JOIN disp d ON c.client_id = d.client_id JOIN account a ON d.account_id = a.account_id WHERE a.frequency = 'F' AND a.date BETWEEN '1990-01-01' AND '2000-12-31' AND a.date BETWEEN c.birth_date AND '2000-12-31' AND c.gender = 'F' AND c.gender = 'Woman';"}, {"question_id": 169, "answer_sql": "SELECT (SUM(loan.amount) - (SELECT SUM(loan.amount) FROM loan WHERE YEAR(loan.date) = 1996 AND client.gender = 'M')) / ((SELECT SUM(loan.amount) FROM loan WHERE YEAR(loan.date) = 1996) * 100) AS growth_rate FROM loan JOIN client ON loan.account_id = client.client_id WHERE YEAR(loan.date) BETWEEN 1996 AND 1997 AND client.gender = 'M';"}, {"question_id": 170, "answer_sql": "SELECT COUNT(*) FROM disp WHERE type = 'VYBER KARTOU' AND issued > '1995-01-01';"}, {"question_id": 171, "answer_sql": "SELECT SUM(A16) as total_east, SUM(A16) as total_north FROM district WHERE A3 = 'East Bohemia' AND A2 = '1996';"}, {"question_id": 172, "answer_sql": "SELECT COUNT(*) FROM disp d JOIN disponent d1 ON d.disp_id = d1.disp_id JOIN account a ON d.account_id = a.account_id JOIN client c ON a.client_id = c.client_id WHERE a.account_id = 1 AND c.client_id = 10;"}, {"question_id": 173, "answer_sql": "SELECT frequency, SUM(amount) as total_amount FROM disp WHERE k_symbol = 'Debit' GROUP BY frequency;"}, {"question_id": 174, "answer_sql": "SELECT birth_date FROM client WHERE client_id = 130;"}, {"question_id": 175, "answer_sql": "SELECT COUNT(*) FROM disp JOIN client ON disp.client_id = client.client_id JOIN account ON disp.account_id = account.account_id JOIN loan ON account.account_id = loan.account_id WHERE disp.type = 'POPLATEK PO OBRATU'"}, {"question_id": 176, "answer_sql": "SELECT loan.amount, loan.status FROM loan JOIN account ON loan.account_id = account.account_id JOIN client ON account.client_id = client.client_id WHERE client.client_id = 992;"}, {"question_id": 177, "answer_sql": "SELECT SUM(trans.amount) AS total_amount, client.gender FROM trans JOIN client ON trans.account_id = client.client_id WHERE client.client_id = 4 AND trans.trans_id = 851;"}, {"question_id": 178, "answer_sql": "SELECT type FROM card WHERE disp_id = (SELECT disp_id FROM client WHERE client_id = 9);"}, {"question_id": 179, "answer_sql": "SELECT SUM(amount) as total_amount FROM trans JOIN account ON trans.account_id = account.account_id JOIN client ON account.client_id = client.client_id WHERE client.client_id = 617 AND date = '1998-01-01';"}, {"question_id": 180, "answer_sql": "SELECT client.client_id, client.gender, client.birth_date, district.A2, district.A3, district.A4, district.A5, district.A6, district.A7, district.A8, district.A9, district.A10, district.A11, district.A12, district.A13, district.A14, district.A15, district.A16 FROM client JOIN district ON client.district_id = district.district_id WHERE client.birth_date BETWEEN '1983-01-01' AND '1987-12-31' AND district.A2 LIKE '%East Bohemia%';"}, {"question_id": 181, "answer_sql": "SELECT client.client_id, client.gender, loan.amount FROM client JOIN loan ON client.client_id = loan.account_id WHERE client.gender = 'F' ORDER BY loan.amount DESC LIMIT 3;"}, {"question_id": 182, "answer_sql": "SELECT COUNT(*) FROM client JOIN disp ON client.client_id = disp.client_id JOIN account ON disp.account_id = account.account_id WHERE client.gender = 'M' AND client.birth_date BETWEEN '1974-01-01' AND '1976-12-31' AND account.frequency = 'SIPO' AND account.date BETWEEN '1974-01-01' AND '1976-12-31' AND account.amount > 4000;"}, {"question_id": 183, "answer_sql": "SELECT COUNT(*) FROM account WHERE district_id = (SELECT district_id FROM district WHERE A2 = 'Beroun') AND date > '1996-12-31';"}, {"question_id": 184, "answer_sql": "SELECT COUNT(*) FROM client JOIN disp ON client.client_id = disp.client_id JOIN card ON disp.disp_id = card.disp_id WHERE client.gender = 'F' AND card.type = 'junior'"}, {"question_id": 185, "answer_sql": "SELECT COUNT(*) / COUNT(district_id) * 100 FROM client WHERE district_id = (SELECT district_id FROM district WHERE A3 = 'Prague') AND gender = 'F';"}, {"question_id": 186, "answer_sql": "SELECT (COUNT(client_id) * 1.0 * (SELECT COUNT(*) FROM client WHERE gender = 'M') * 1.0 / (SELECT COUNT(*) FROM client WHERE frequency = 'POPLATEK TYDNE')) * 100.0 as percentage_of_male_clients_requesting_weekly_statements FROM client"}, {"question_id": 187, "answer_sql": "SELECT COUNT(*) FROM client WHERE frequency = 'POPLATEK TYDNE';"}, {"question_id": 188, "answer_sql": "SELECT account.account_id, account.date, account.frequency, account.amount FROM account JOIN loan ON account.account_id = loan.account_id WHERE loan.duration > 24 AND account.date < '1997-01-01' ORDER BY account.amount ASC LIMIT 1;"}, {"question_id": 189, "answer_sql": "SELECT account.account_id FROM account JOIN client ON account.district_id = client.district_id WHERE client.gender = 'F' AND client.birth_date = ( SELECT MIN(birth_date) FROM client WHERE gender = 'F' ) AND ( SELECT AVG(client.A11) FROM client WHERE client.gender = 'F' ) = ( SELECT AVG(client.A11) FROM client WHERE client.gender = 'F' AND client.birth_date = ( SELECT MIN(client.birth_date) FROM client WHERE client.gender = 'F' ) );"}, {"question_id": 190, "answer_sql": "SELECT COUNT(*) FROM client WHERE birth_date BETWEEN '1920-01-01' AND '1920-12-31' AND district_id IN (SELECT district_id FROM district WHERE A3 = 'East Bohemia');"}, {"question_id": 191, "answer_sql": "SELECT COUNT(*) FROM account WHERE frequency = 'POPLATEK TYDNE' AND type = 'LOAN';"}, {"question_id": 192, "answer_sql": "SELECT AVG(loan.amount) as average_amount FROM loan JOIN trans ON loan.account_id = trans.account_id WHERE trans.type = 'POPLATEK PO OBRATU' AND loan.status = 'C';"}, {"question_id": 193, "answer_sql": "SELECT client.client_id, client.district_id FROM client JOIN account ON client.district_id = account.district_id JOIN disp ON account.account_id = disp.account_id WHERE disp.type IN ('permanent orders', 'loans')"}, {"question_id": 194, "answer_sql": "SELECT client.client_id, client.gender, client.birth_date, district.A12 FROM client JOIN disp ON client.client_id = disp.client_id JOIN card ON disp.disp_id = card.disp_id JOIN loan ON client.client_id = loan.account_id JOIN district ON client.district_id = district.district_id WHERE card.type = 'gold' AND loan.status = 'approved' ORDER BY district.A12 DESC;"}, {"question_id": 195, "answer_sql": "SELECT bond_type, COUNT(*) as frequency FROM bond GROUP BY bond_type ORDER BY frequency DESC LIMIT 1;"}, {"question_id": 196, "answer_sql": "SELECT COUNT(*) FROM atom JOIN connected ON atom.atom_id = connected.atom_id2 JOIN bond ON connected.bond_id = bond.bond_id WHERE atom.element = 'cl' AND atom.molecule_id NOT IN (SELECT molecule_id FROM molecule WHERE label = '-');"}, {"question_id": 197, "answer_sql": "SELECT AVG(atom.element = 'o') as avg_oxygen_atoms FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '-';"}, {"question_id": 198, "answer_sql": "SELECT DIVIDE(SUM(bond_type = '-'), COUNT(atom_id)) AS average_single_bonded_carcinogenics FROM connected JOIN atom ON connected.atom_id = atom.atom_id JOIN bond ON atom.atom_id = bond.molecule_id WHERE bond_type = '-' AND atom.element = 'C';"}, {"question_id": 199, "answer_sql": "SELECT COUNT(*) FROM atom JOIN connected ON atom.atom_id = connected.atom_id2 JOIN bond ON connected.bond_id = bond.bond_id WHERE atom.element = 'na' AND bond.bond_type != '-';"}, {"question_id": 200, "answer_sql": "SELECT m.molecule_id, m.label FROM molecule AS m JOIN bond AS b ON m.molecule_id = b.molecule_id JOIN atom AS a1 ON b.atom_id = a1.atom_id JOIN atom AS a2 ON b.atom_id2 = a2.atom_id WHERE b.bond_type = '#' AND a1.element = 'C' AND a2.element = 'C' AND a1.atom_id < a2.atom_id"}, {"question_id": 201, "answer_sql": "SELECT DIVIDE(SUM(atom.element = 'c'), COUNT(atom.atom_id)) * 100 AS percentage FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON bond.bond_id = connected.bond_id WHERE bond.bond_type = ' = ' GROUP BY atom.atom_id HAVING COUNT(atom.atom_id) = ( SELECT COUNT(molecule.molecule_id) FROM molecule JOIN connected ON molecule.molecule_id = connected.molecule_id WHERE bond.bond_type = ' = ' );"}, {"question_id": 202, "answer_sql": "SELECT COUNT(*) FROM bond WHERE bond_type = '#';"}, {"question_id": 203, "answer_sql": "SELECT COUNT(*) FROM atom WHERE element != 'br';"}, {"question_id": 204, "answer_sql": "SELECT COUNT(*) FROM molecule WHERE label = '+' AND molecule_id BETWEEN 'TR000' AND 'TR099' AND molecule_id NOT IN ( SELECT DISTINCT molecule_id FROM atom WHERE element = 'C' );"}, {"question_id": 205, "answer_sql": "SELECT m.molecule_id, m.label FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE a.element = 'si' AND b.bond_type = 'single';"}, {"question_id": 206, "answer_sql": "SELECT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_id = 'TR004_8_9'"}, {"question_id": 207, "answer_sql": "SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON bond.bond_id = connected.bond_id WHERE bond.bond_type = ' = ';"}, {"question_id": 208, "answer_sql": "SELECT label FROM atom WHERE element = 'h' GROUP BY label ORDER BY COUNT(*) DESC LIMIT 1;"}, {"question_id": 209, "answer_sql": "SELECT b.bond_type FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE a.element = 'te';"}, {"question_id": 210, "answer_sql": "SELECT a.atom_id, a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = '-';"}, {"question_id": 211, "answer_sql": "SELECT a.atom_id, a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type != 'carcinogenic' AND a.molecule_id IN (SELECT molecule_id FROM molecule WHERE label != '-');"}, {"question_id": 212, "answer_sql": "SELECT MIN(COUNT(atom.element)) AS least_common_element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '-' GROUP BY atom.element ORDER BY least_common_element ASC LIMIT 1;"}, {"question_id": 213, "answer_sql": "SELECT bond_type FROM connected WHERE atom_id = 'TR004_8' AND atom_id2 = 'TR004_20';"}, {"question_id": 214, "answer_sql": "SELECT m.label FROM molecule m JOIN connected c ON m.molecule_id = c.atom_id JOIN atom a ON c.atom_id = a.atom_id WHERE a.element <> 'sn' AND m.label = '+'"}, {"question_id": 215, "answer_sql": "SELECT COUNT(*) FROM atom JOIN connected ON atom.atom_id = connected.atom_id2 JOIN bond ON connected.bond_id = bond.bond_id JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE atom.element = 'i' AND bond.bond_type = '-';"}, {"question_id": 216, "answer_sql": "SELECT a.atom_id, a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = '#';"}, {"question_id": 217, "answer_sql": "SELECT a.atom_id, a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.molecule_id = 'TR181' GROUP BY a.atom_id, a.element;"}, {"question_id": 218, "answer_sql": "SELECT DIVIDE(SUM(CASE WHEN element = 'f' THEN 1 ELSE 0 END), COUNT(molecule_id)) as percent FROM connected JOIN atom ON connected.atom_id = atom.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE label = '+' AND element = 'f';"}, {"question_id": 219, "answer_sql": "SELECT DIVIDE(SUM(bond_type = '#'), COUNT(bond_id)) as percent FROM connected JOIN atom ON connected.atom_id = atom.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+'"}, {"question_id": 220, "answer_sql": "SELECT DISTINCT element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE molecule_id = 'TR000' ORDER BY element ASC LIMIT 3;"}, {"question_id": 221, "answer_sql": "SELECT a.atom_id, a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_id = 'TR001_2_6' AND c.atom_id2 = 'TR001';"}, {"question_id": 222, "answer_sql": "SELECT SUM(label = '+') - SUM(label = '-') as difference FROM molecule;"}, {"question_id": 223, "answer_sql": "SELECT atom_id FROM connected WHERE bond_id = 'TR_000_2_5';"}, {"question_id": 224, "answer_sql": "SELECT bond_id FROM connected WHERE atom_id2 = 'TR000_2';"}, {"question_id": 225, "answer_sql": "SELECT m.molecule_id, m.label FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = ' = ' ORDER BY m.label LIMIT 5;"}, {"question_id": 226, "answer_sql": "SELECT (SUM(bond_type = ' = ')) / COUNT(bond_id) * 100 as percent FROM bond WHERE molecule_id = 'TR008';"}, {"question_id": 227, "answer_sql": "SELECT DIVIDE(SUM(label = '+'), COUNT(molecule_id)) as percent FROM connected JOIN atom ON connected.atom_id = atom.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id"}, {"question_id": 228, "answer_sql": "SELECT (SUM(atom.element = 'h') * 100.0) / COUNT(atom.atom_id) as percent FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON molecule.molecule_id = connected.atom_id2 WHERE molecule.molecule_id = 'TR206';"}, {"question_id": 229, "answer_sql": "SELECT b.bond_type FROM molecule m JOIN connected c ON m.molecule_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE m.molecule_id = 'TR000';"}, {"question_id": 230, "answer_sql": "SELECT atom.element, molecule.label FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON molecule.molecule_id = connected.atom_id WHERE molecule.molecule_id = 'TR060'"}, {"question_id": 231, "answer_sql": "SELECT b.bond_type, m.label FROM (SELECT bond_type, COUNT(*) as bond_count FROM connected WHERE atom_id IN (SELECT atom_id FROM atom WHERE molecule_id = 'TR018') GROUP BY bond_type) as c JOIN bond as b ON c.bond_type = b.bond_id JOIN molecule as m ON b.molecule_id = m.molecule_id WHERE m.label IN ('+', '-') GROUP BY b.bond_type, m.label ORDER BY c.bond_count DESC LIMIT 1;"}, {"question_id": 232, "answer_sql": "SELECT m.molecule_id, m.label FROM molecule m JOIN connected c ON m.molecule_id = c.atom_id JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id JOIN bond b ON a1.atom_id = b.atom_id OR a2.atom_id = b.atom_id WHERE b.bond_type = '-' AND a1.element <> 'C' AND a2.element <> 'C' GROUP BY m.molecule_id, m.label ORDER BY m.label ASC LIMIT 3;"}, {"question_id": 233, "answer_sql": "SELECT b.bond_type FROM bond b JOIN connected c ON b.bond_id = c.bond_id WHERE c.atom_id IN (SELECT atom_id FROM atom WHERE molecule_id = 'TR006') ORDER BY b.bond_type ASC LIMIT 2;"}, {"question_id": 234, "answer_sql": "SELECT COUNT(*) FROM bond JOIN connected ON bond.bond_id = connected.bond_id WHERE connected.atom_id = 'TR009_12' OR connected.atom_id2 = 'TR009_12';"}, {"question_id": 235, "answer_sql": "SELECT COUNT(*) FROM `molecule` JOIN `atom` ON `molecule`.`molecule_id` = `atom`.`molecule_id` JOIN `connected` ON `atom`.`atom_id` = `connected`.`atom_id` WHERE `element` = 'br' AND `label` = '+'"}, {"question_id": 236, "answer_sql": "SELECT bond_type, atom_id, atom_id2 FROM bond JOIN connected ON bond.bond_id = connected.bond_id WHERE connected.bond_id = 'TR001_6_9';"}, {"question_id": 237, "answer_sql": "SELECT m.label FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN molecule m ON c.molecule_id = m.molecule_id WHERE a.atom_id = 'TR001_10'"}, {"question_id": 238, "answer_sql": "SELECT COUNT(*) FROM `bond` WHERE `bond_type` = '#';"}, {"question_id": 239, "answer_sql": "SELECT COUNT(*) FROM connected WHERE atom_id = 'TR%_19';"}, {"question_id": 240, "answer_sql": "SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.molecule_id = 'TR004' GROUP BY atom.element ORDER BY atom.element;"}, {"question_id": 241, "answer_sql": "SELECT COUNT(*) FROM `molecule` WHERE `label` != '-';"}, {"question_id": 242, "answer_sql": "SELECT DISTINCT m.molecule_id FROM atom a INNER JOIN connected c ON a.atom_id = c.atom_id INNER JOIN molecule m ON c.atom_id2 = m.molecule_id WHERE SUBSTRING(a.atom_id, 7, 2) BETWEEN 21 AND 25 AND a.element = 'C' AND m.label = '+'"}, {"question_id": 243, "answer_sql": "SELECT b.bond_type FROM bond b JOIN atom a1 ON b.molecule_id = a1.molecule_id JOIN atom a2 ON b.molecule_id = a2.molecule_id WHERE a1.element = 'p' AND a2.element = 'n';"}, {"question_id": 244, "answer_sql": "SELECT m.label FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = ' = ' GROUP BY m.molecule_id HAVING COUNT(*) = ( SELECT COUNT(*) FROM bond WHERE bond_type = ' = ' ) ORDER BY COUNT(*) DESC LIMIT 1;"}, {"question_id": 245, "answer_sql": "SELECT DIVIDE(COUNT(bond_id), COUNT(atom_id)) AS average_bonds FROM atom WHERE element = 'i';"}, {"question_id": 246, "answer_sql": "SELECT bond_type, bond_id FROM connected WHERE atom_id = 'atom45' AND atom_id2 = 'atom45';"}, {"question_id": 247, "answer_sql": "SELECT atom.element FROM atom LEFT JOIN connected ON atom.atom_id = connected.atom_id2 WHERE connected.atom_id IS NULL;"}, {"question_id": 248, "answer_sql": "SELECT atom.atom_id, atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON bond.bond_id = connected.bond_id WHERE bond.bond_type = '#' AND atom.molecule_id = 'TR447';"}, {"question_id": 249, "answer_sql": "SELECT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id WHERE c.bond_id = 'TR144_8_19';"}, {"question_id": 250, "answer_sql": "SELECT m.label, COUNT(b.bond_id) as 'double_bonds' FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE m.label = '+' AND b.bond_type = ' = ' GROUP BY m.label ORDER BY 'double_bonds' DESC LIMIT 1;"}, {"question_id": 251, "answer_sql": "SELECT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id WHERE c.bond_id IN (SELECT bond_id FROM bond WHERE bond_type = '+' GROUP BY molecule_id HAVING COUNT(molecule_id) = 1) ORDER BY a.element;"}, {"question_id": 252, "answer_sql": "SELECT atom.atom_id, atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id2 JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = 'single' AND atom.element = 'pb';"}, {"question_id": 253, "answer_sql": "SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON bond.bond_id = connected.bond_id WHERE bond.bond_type = '#'"}, {"question_id": 254, "answer_sql": "SELECT (COUNT(bond_id) * 100.0) / (COUNT(atom_id) * COUNT(atom_id where MAX(COUNT(atom_id)))) as percentage FROM connected"}, {"question_id": 255, "answer_sql": "SELECT DIVIDE(SUM(label = '+'), COUNT(bond_id)) FROM connected JOIN atom ON connected.atom_id = atom.atom_id JOIN bond ON atom.bond_id = bond.bond_id WHERE bond_type = '-';"}, {"question_id": 256, "answer_sql": "SELECT COUNT(*) FROM atom WHERE element IN ('c', 'h');"}, {"question_id": 257, "answer_sql": "SELECT `atom_id2` FROM `connected` JOIN `atom` ON `connected`.`atom_id2` = `atom`.`atom_id` WHERE `atom`.`element` = 's';"}, {"question_id": 258, "answer_sql": "SELECT bond_type FROM atom WHERE element = 'sn';"}, {"question_id": 259, "answer_sql": "SELECT COUNT(*) FROM atom WHERE element IS NOT NULL AND atom_id IN (SELECT atom_id FROM connected WHERE bond_id IN (SELECT bond_id FROM bond WHERE bond_type = '-'));"}, {"question_id": 260, "answer_sql": "SELECT COUNT(*) FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE atom.element = 'p' OR atom.element = 'br' AND bond.bond_type = '#';"}, {"question_id": 261, "answer_sql": "SELECT b.bond_id FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE m.label = '+'"}, {"question_id": 262, "answer_sql": "SELECT m.label FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id JOIN connected c ON c.atom_id = b.molecule_id WHERE b.bond_type = '-' GROUP BY m.molecule_id HAVING COUNT(DISTINCT atom_id) = 1;"}, {"question_id": 263, "answer_sql": "SELECT DIVIDE(SUM(atom.element = 'cl'), COUNT(atom.atom_id)) * 100 as percent FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '-';"}, {"question_id": 264, "answer_sql": "SELECT m.label FROM molecule m JOIN connected c ON m.molecule_id = c.atom_id JOIN atom a ON c.atom_id = a.atom_id WHERE a.atom_id IN ('TR000', 'TR001', 'TR002')"}, {"question_id": 265, "answer_sql": "SELECT DISTINCT m.molecule_id FROM molecule m JOIN atom a ON a.molecule_id = m.molecule_id JOIN bond b ON b.molecule_id = a.atom_id JOIN connected c ON c.atom_id = a.atom_id AND c.atom_id2 = a.atom_id WHERE m.label = '-' AND c.bond_id IS NULL;"}, {"question_id": 266, "answer_sql": "SELECT COUNT(*) FROM `molecule` JOIN `connected` ON `molecule`.`molecule_id` = `connected`.`atom_id` JOIN `atom` ON `connected`.`atom_id` = `atom`.`atom_id` WHERE `atom`.`molecule_id` = 'TR000' AND `atom`.`element` = 'C' AND `molecule`.`label` = '+'"}, {"question_id": 267, "answer_sql": "SELECT bond_type FROM connected JOIN atom ON connected.atom_id = atom.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id BETWEEN 'TR000' AND 'TR050'"}, {"question_id": 268, "answer_sql": "SELECT element FROM bond WHERE bond_id = 'TR001_10_11';"}, {"question_id": 269, "answer_sql": "SELECT COUNT(*) FROM bond WHERE element = 'i';"}, {"question_id": 270, "answer_sql": "SELECT MAX(label) as Carcinogenicity FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON connected.molecule_id = molecule.molecule_id WHERE element = 'ca' AND label IS NOT NULL;"}, {"question_id": 271, "answer_sql": "SELECT atom.atom_id, atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON bond.bond_id = connected.bond_id WHERE bond.bond_type = 'TR001_1_8' AND atom.element IN ('cl', 'c');"}, {"question_id": 272, "answer_sql": "SELECT DISTINCT m.molecule_id, m.label FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id JOIN atom a1 ON b.bond_id = a1.bond_id JOIN atom a2 ON a1.atom_id = a2.atom_id WHERE a2.element = 'c' AND b.bond_type = '#' AND m.label != '-' ORDER BY m.label;"}, {"question_id": 273, "answer_sql": "SELECT (SUM(atom.element = 'cl') * 100.0) / COUNT(molecule.molecule_id) AS percentage FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON connected.molecule_id = molecule.molecule_id WHERE molecule.label = '+' ```"}, {"question_id": 274, "answer_sql": "SELECT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.molecule_id = 'TR001';"}, {"question_id": 275, "answer_sql": "SELECT m.molecule_id FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = ' = ';"}, {"question_id": 276, "answer_sql": "SELECT atom_id, atom_id2 FROM connected JOIN bond ON connected.bond_id = bond.bond_id WHERE bond_type = '#' LIMIT 2;"}, {"question_id": 277, "answer_sql": "SELECT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_id = 'TR005_16_26';"}, {"question_id": 278, "answer_sql": "SELECT COUNT(*) FROM `molecule` JOIN `connected` ON `molecule`.`molecule_id` = `connected`.`atom_id2` JOIN `atom` ON `connected`.`atom_id` = `atom`.`atom_id` WHERE `atom`.`element` = 'C' AND `connected`.`bond_id` IS NULL;"}, {"question_id": 279, "answer_sql": "SELECT m.label FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id JOIN molecule m ON b.molecule_id = m.molecule_id WHERE b.bond_id = 'TR001_10_11'"}, {"question_id": 280, "answer_sql": "SELECT b.bond_id, m.label FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE b.bond_type = '#' AND m.label IN ('+', '-')"}, {"question_id": 281, "answer_sql": "SELECT atom.element, COUNT(*) as count FROM atom JOIN connected ON atom.atom_id = connected.atom_id2 JOIN molecule ON molecule.molecule_id = atom.molecule_id WHERE atom.atom_id = 'atom_id_4' AND molecule.label = 'carcinogenic' GROUP BY atom.element ORDER BY count DESC;"}, {"question_id": 282, "answer_sql": "SELECT label FROM molecule JOIN atom ON molecule.molecule_id = atom.molecule_id JOIN connected ON atom.atom_id = connected.atom_id WHERE atom.element = 'h' AND molecule.molecule_id = 'TR006' GROUP BY molecule.molecule_id, label HAVING SUM(atom.element = 'h') / COUNT(atom.atom_id) = 1;"}, {"question_id": 283, "answer_sql": "SELECT label FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE atom.element = 'ca'"}, {"question_id": 284, "answer_sql": "SELECT bond_type FROM connected JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.element = 'te';"}, {"question_id": 285, "answer_sql": "SELECT element FROM connected JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = 'TR001_10_11'"}, {"question_id": 286, "answer_sql": "SELECT (SELECT COUNT(*) FROM connected WHERE bond_id IS NOT NULL) * 100.0 / (SELECT COUNT(*) FROM connected) AS percentage_triple_bonds;"}, {"question_id": 287, "answer_sql": "SELECT percent FROM (SELECT molecule_id, label, (SELECT COUNT(*) FROM bond WHERE molecule_id = m.molecule_id AND bond_type = ' = ') as bond_count, (SELECT COUNT(*) FROM bond WHERE molecule_id = m.molecule_id) as total_bonds FROM molecule m WHERE m.molecule_id = 'TR047' ) as t WHERE total_bonds > 0 AND bond_count / total_bonds * 100 > 0"}, {"question_id": 288, "answer_sql": "SELECT label FROM molecule JOIN connected ON molecule.molecule_id = connected.molecule_id JOIN atom ON atom.atom_id = connected.atom_id WHERE atom.atom_id = 'TR001_1'"}, {"question_id": 289, "answer_sql": "SELECT label FROM molecule JOIN atom ON atom.molecule_id = molecule.molecule_id JOIN bond ON bond.molecule_id = molecule.molecule_id WHERE atom.atom_id = 'TR151'"}, {"question_id": 290, "answer_sql": "SELECT a1.element FROM atom a1 JOIN connected c ON a1.atom_id = c.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE a1.molecule_id = 'TR151' AND a2.element = 'cl';"}, {"question_id": 291, "answer_sql": "SELECT COUNT(*) FROM `molecule` WHERE `label` = '+'"}, {"question_id": 292, "answer_sql": "SELECT atom.atom_id, atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE atom.element = 'c' AND substr(molecule_id, 3, 3) BETWEEN 10 AND 50;"}, {"question_id": 293, "answer_sql": "SELECT COUNT(atom.atom_id) FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+'"}, {"question_id": 294, "answer_sql": "SELECT b.bond_id FROM bond b JOIN connected c ON b.bond_id = c.bond_id WHERE b.bond_type = ' = ' AND c.atom_id2 IN ( SELECT a.atom_id FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.label = '+' );"}, {"question_id": 295, "answer_sql": "SELECT COUNT(*) FROM atom JOIN connected ON atom.atom_id = connected.atom_id2 JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+' AND atom.element = 'h';"}, {"question_id": 296, "answer_sql": "SELECT m.molecule_id FROM molecule m JOIN connected c ON m.molecule_id = c.atom_id JOIN atom a ON a.atom_id = c.atom_id2 WHERE a.atom_id = 'TR00_1' AND c.bond_id IN ( SELECT bond_id FROM bond WHERE bond_type = 'TR00_1_2' );"}, {"question_id": 297, "answer_sql": "SELECT a.atom_id FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE a.element = 'c' AND b.bond_type = '-'"}, {"question_id": 298, "answer_sql": "SELECT (SUM(m.label = '+' AND a.element = 'h') / COUNT(m.molecule_id)) * 100.0 AS percentage FROM molecule AS m JOIN atom AS a ON m.molecule_id = a.molecule_id WHERE a.element = 'h';"}, {"question_id": 299, "answer_sql": "SELECT label FROM molecule JOIN atom ON atom.molecule_id = molecule.molecule_id JOIN bond ON bond.molecule_id = molecule.molecule_id WHERE atom.atom_id = 'TR124'"}, {"question_id": 300, "answer_sql": "SELECT a.atom_id, a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id WHERE c.atom_id2 = 'TR186'"}, {"question_id": 301, "answer_sql": "SELECT bond_type FROM bond WHERE bond_id = 'TR007_4_19';"}, {"question_id": 302, "answer_sql": "SELECT a.element AS atom_element, b.element AS bond_element FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_id = 'TR001_2_4';"}, {"question_id": 303, "answer_sql": "SELECT COUNT(*), label FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.molecule_id = 'TR006' AND bond.bond_type = ' = ' GROUP BY label"}, {"question_id": 304, "answer_sql": "SELECT m.molecule_id, m.label, a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id JOIN molecule m ON b.molecule_id = m.molecule_id WHERE a.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca') AND m.label = '+' ORDER BY m.molecule_id;"}, {"question_id": 305, "answer_sql": "SELECT a.atom_id, m.molecule_id, m.label FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id JOIN molecule m ON b.molecule_id = m.molecule_id WHERE b.bond_type = '-';"}, {"question_id": 306, "answer_sql": "SELECT m.molecule_id, m.label, a.element FROM molecule m JOIN connected c ON m.molecule_id = c.atom_id JOIN atom a ON c.atom_id = a.atom_id JOIN bond b ON a.atom_id = b.atom_id WHERE b.bond_type = '#' AND a.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca');"}, {"question_id": 307, "answer_sql": "SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = 'TR000_2_3';"}, {"question_id": 308, "answer_sql": "SELECT COUNT(*) FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.element = 'cl';"}, {"question_id": 309, "answer_sql": "SELECT atom.atom_id, COUNT(bond.bond_id) as bond_count FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE atom.molecule_id = 'TR346' GROUP BY atom.atom_id;"}, {"question_id": 310, "answer_sql": "SELECT COUNT(*) FROM `molecule` JOIN `bond` ON `molecule`.`molecule_id` = `bond`.`molecule_id` JOIN `connected` ON `connected`.`atom_id` = `atom`.`atom_id` WHERE `bond`.`bond_type` = ' = ' AND `molecule`.`label` = '+'"}, {"question_id": 311, "answer_sql": "SELECT COUNT(*) FROM `molecule` WHERE `molecule_id` NOT IN ( SELECT `molecule_id` FROM `bond` WHERE `bond_type` != ' = ' ) AND `molecule_id` NOT IN ( SELECT `atom_id` FROM `connected` WHERE `bond_id` IN ( SELECT `bond_id` FROM `bond` WHERE `bond_type` = ' = ' ) ) AND `molecule_id` NOT IN ( SELECT `atom_id2` FROM `connected` WHERE `bond_id` IN ( SELECT `bond_id` FROM `bond` WHERE `bond_type` = ' = ' ) );"}, {"question_id": 312, "answer_sql": "SELECT label FROM bond WHERE bond_id = 'TR001_2_4';"}, {"question_id": 313, "answer_sql": "SELECT COUNT(*) FROM atom WHERE molecule_id = 'TR005';"}, {"question_id": 314, "answer_sql": "SELECT COUNT(*) FROM `bond` WHERE `bond_type` = '-';"}, {"question_id": 315, "answer_sql": "SELECT m.molecule_id, m.label FROM molecule AS m JOIN atom AS a ON m.molecule_id = a.molecule_id JOIN connected AS c ON a.atom_id = c.atom_id WHERE a.element = 'cl' AND m.label = '+'"}, {"question_id": 316, "answer_sql": "SELECT m.molecule_id, m.label FROM molecule AS m JOIN atom AS a ON m.molecule_id = a.molecule_id JOIN connected AS c ON a.atom_id = c.atom_id WHERE a.element = 'c' AND m.label != '-' GROUP BY m.molecule_id, m.label HAVING COUNT(DISTINCT c.atom_id2) = 0;"}, {"question_id": 317, "answer_sql": "SELECT percentage FROM ( SELECT DIVIDE(SUM(atom.element = 'cl'), COUNT(atom.atom_id)) as percentage FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE atom.element = 'cl' AND bond.bond_type = 'c' ) as t"}, {"question_id": 318, "answer_sql": "SELECT m.molecule_id FROM bond b JOIN connected c ON b.bond_id = c.bond_id WHERE c.atom_id = 'TR001_1_7'"}, {"question_id": 319, "answer_sql": "SELECT COUNT(*) FROM connected WHERE bond_id = 'TR001_3_4'"}, {"question_id": 320, "answer_sql": "SELECT bond_type FROM connected WHERE atom_id = 'TR000_1' AND atom_id2 = 'TR000_2';"}, {"question_id": 321, "answer_sql": "SELECT m.label AS Molecule FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN molecule m ON c.molecule_id = m.molecule_id WHERE a.atom_id = 'TR000_2' AND c.atom_id2 = 'TR000_4';"}, {"question_id": 322, "answer_sql": "SELECT element FROM atom WHERE atom_id = 'TR000_1';"}, {"question_id": 323, "answer_sql": "SELECT label FROM molecule JOIN connected ON molecule.molecule_id = connected.atom_id WHERE connected.atom_id2 = 'TR000'"}, {"question_id": 324, "answer_sql": "SELECT (SUM(bond_type = '-') * 100.0) / COUNT(bond_id) as percentage FROM connected JOIN atom ON connected.atom_id = atom.atom_id JOIN bond ON atom.bond_id = bond.bond_id WHERE bond_type = '-' GROUP BY atom.atom_id;"}, {"question_id": 325, "answer_sql": "SELECT COUNT(*) FROM `molecule` JOIN `atom` ON `molecule`.`molecule_id` = `atom`.`molecule_id` JOIN `connected` ON `atom`.`atom_id` = `connected`.`atom_id` WHERE `atom`.`element` = 'n' AND `molecule`.`label` = '+'"}, {"question_id": 326, "answer_sql": "SELECT m.molecule_id, m.label FROM molecule m JOIN connected c ON m.molecule_id = c.atom_id JOIN atom a ON a.atom_id = c.atom_id2 WHERE a.element = 's' AND c.bond_id IS NOT NULL GROUP BY m.molecule_id, m.label HAVING COUNT(DISTINCT a.atom_id) = 2 AND COUNT(DISTINCT c.bond_id) = 1;"}, {"question_id": 327, "answer_sql": "SELECT m.molecule_id, m.label FROM molecule m WHERE m.label != '-' GROUP BY m.molecule_id HAVING COUNT(atom.atom_id) > 5"}, {"question_id": 328, "answer_sql": "SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON bond.bond_id = connected.bond_id WHERE bond.bond_type = '=' AND atom.molecule_id = 'TR024'"}, {"question_id": 329, "answer_sql": "SELECT m.molecule_id, m.label FROM molecule AS m JOIN atom AS a ON m.molecule_id = a.molecule_id GROUP BY m.molecule_id, m.label ORDER BY COUNT(a.atom_id) DESC LIMIT 1;"}, {"question_id": 330, "answer_sql": "SELECT (SUM(m.label = '+') * 100.0) / (COUNT(m.molecule_id) * 100.0) AS percentage FROM molecule AS m JOIN connected AS c ON m.molecule_id = c.atom_id JOIN atom AS a ON c.atom_id2 = a.atom_id JOIN bond AS b ON a.atom_id = b.atom_id WHERE a.element = 'h' AND b.bond_type = '#';"}, {"question_id": 331, "answer_sql": "SELECT COUNT(*) FROM `molecule` WHERE `label` = '+'"}, {"question_id": 332, "answer_sql": "SELECT COUNT(*) FROM `molecule` WHERE `molecule_id` BETWEEN 'TR004' AND 'TR010' AND `molecule_id` NOT IN ( SELECT `molecule_id` FROM `bond` WHERE `bond_type` = '-' );"}, {"question_id": 333, "answer_sql": "SELECT COUNT(*) FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR008' AND atom.element = 'c';"}, {"question_id": 334, "answer_sql": "SELECT element FROM atom WHERE atom_id = 'TR004_7' AND molecule_id NOT IN ( SELECT molecule_id FROM molecule WHERE label = '-' )"}, {"question_id": 335, "answer_sql": "SELECT COUNT(*) FROM `molecule` JOIN `connected` ON `molecule`.`molecule_id` = `connected`.`atom_id2` JOIN `atom` ON `connected`.`atom_id` = `atom`.`atom_id` WHERE `atom`.`element` = 'o' AND `connected`.`bond_id` IN (SELECT `bond_id` FROM `bond` WHERE `bond_type` = ' = ');"}, {"question_id": 336, "answer_sql": "SELECT COUNT(*) FROM molecule JOIN bond ON molecule.molecule_id = bond.molecule_id JOIN connected ON connected.atom_id = atom.atom_id JOIN connected ON connected.atom_id2 = atom.atom_id WHERE bond_type = '#' AND label = '-'"}, {"question_id": 337, "answer_sql": "SELECT atom.element, bond.bond_type FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR016'"}, {"question_id": 338, "answer_sql": "SELECT atom_id FROM connected WHERE atom_id2 = 'TR012' AND bond_id IN (SELECT bond_id FROM bond WHERE bond_type = ' = ');"}, {"question_id": 339, "answer_sql": "SELECT atom_id FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON bond.bond_id = connected.bond_id WHERE bond.bond_type = 'single' AND atom.element = 'o';"}, {"question_id": 340, "answer_sql": "SELECT cards.asciiName, cards.cardKingdomFoilId, cards.cardKingdomId FROM cards WHERE cards.cardKingdomFoilId = cards.cardKingdomId AND cards.cardKingdomId is not null;"}, {"question_id": 341, "answer_sql": "SELECT c.asciiName, c.availability, c.colors, c.convertedManaCost, c.hand, c.keywords, c.layout, c.life, c.manaCost, c.name, c.number, c.rarity, c.text, c.type, c.types, c.uuid FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.borderColor = 'borderless' AND c.cardKingdomFoilId IS NOT NULL AND c.cardKingdomId IS NOT NULL AND c.cardKingdomId != '';"}, {"question_id": 342, "answer_sql": "SELECT name FROM cards WHERE faceConvertedManaCost = (SELECT MAX(faceConvertedManaCost) FROM cards);"}, {"question_id": 343, "answer_sql": "SELECT c.name FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE r.text LIKE '%EDHRec%' AND r.text LIKE '%2015%' AND c.frameVersion = '2015' AND c.edhrecRank < 100;"}, {"question_id": 344, "answer_sql": "SELECT c.name FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.rarity = 'mythic' AND fd.text LIKE '%banned%' AND c.types LIKE '%mythic rarity print cards%' AND c.format = 'gladiator' AND c.status = 'Banned';"}, {"question_id": 345, "answer_sql": "SELECT l.status FROM legalities l JOIN cards c ON l.uuid = c.uuid WHERE c.type = 'Artifact' AND c.side IS NULL AND c.setCode IN ( SELECT code FROM sets WHERE format = 'vintage' )"}, {"question_id": 346, "answer_sql": "SELECT id, artist FROM cards WHERE power = '*' OR power IS NULL AND format = 'commander' AND status = 'Legal' AND uuid IN (SELECT uuid FROM legalities WHERE format = 'commander');"}, {"question_id": 347, "answer_sql": "SELECT c.*, f.text as ruling_text, c.hasContentWarning as has_missing_or_degraded_properties FROM cards c JOIN foreign_data f ON c.uuid = f.uuid WHERE c.artist = 'Stephen Daniel' AND c.hasContentWarning = 1;"}, {"question_id": 348, "answer_sql": "SELECT r.text FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.name = 'Sublime Epiphany' AND c.number = '74s';"}, {"question_id": 349, "answer_sql": "SELECT name, artist, isPromo FROM cards WHERE isPromo = 1 ORDER BY (SELECT COUNT(*) FROM rulings WHERE uuid = cards.uuid) DESC, isPromo DESC LIMIT 1;"}, {"question_id": 350, "answer_sql": "SELECT foreign_data.flavorText FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.name = 'annul' AND cards.number = '29';"}, {"question_id": 351, "answer_sql": "SELECT c.name FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE fd.language = 'Japanese' AND c.isAlternative = 1;"}, {"question_id": 352, "answer_sql": "SELECT (SUM(CASE WHEN flavorText LIKE '%\u4e2d\u6587%' THEN 1 ELSE 0 END)) * 100 / (SELECT COUNT(*) FROM cards WHERE flavorText LIKE '%\u4e2d\u6587%') AS 'Percentage' FROM cards;"}, {"question_id": 353, "answer_sql": "SELECT s.code, s.name, s.totalSetSize FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.language = 'Italian';"}, {"question_id": 354, "answer_sql": "SELECT COUNT(DISTINCT type) as NumberOfTypes FROM cards WHERE artist = 'Aaron Boyd';"}, {"question_id": 355, "answer_sql": "SELECT keywords FROM cards WHERE asciiName = 'Angel of Mercy';"}, {"question_id": 356, "answer_sql": "SELECT COUNT(*) FROM cards WHERE power = '*';"}, {"question_id": 357, "answer_sql": "SELECT DISTINCT promoTypes FROM cards WHERE asciiName = 'Duress';"}, {"question_id": 358, "answer_sql": "SELECT borderColor FROM cards WHERE asciiName = 'Ancestor\\'s Chosen';"}, {"question_id": 359, "answer_sql": "SELECT originalType FROM cards WHERE name = 'Ancestor\\'s Chosen';"}, {"question_id": 360, "answer_sql": "SELECT DISTINCT set.code, set.name FROM cards JOIN set_translations ON cards.uuid = set_translations.setCode WHERE cards.asciiName = 'Angel of Mercy'"}, {"question_id": 361, "answer_sql": "SELECT COUNT(*) FROM cards WHERE legalities.status = 'restricted' AND cards.isTextless = 0;"}, {"question_id": 362, "answer_sql": "SELECT text FROM rulings WHERE uuid = (SELECT uuid FROM cards WHERE name = 'Condemn');"}, {"question_id": 363, "answer_sql": "SELECT COUNT(*) FROM cards WHERE isStarter = 1 AND status = 'restricted';"}, {"question_id": 364, "answer_sql": "SELECT status FROM legalities WHERE uuid = (SELECT uuid FROM cards WHERE name = 'Cloudchaser Eagle');"}, {"question_id": 365, "answer_sql": "SELECT type FROM cards WHERE asciiName = 'Benalish Knight';"}, {"question_id": 366, "answer_sql": "SELECT format, text as rule_of_playing FROM cards WHERE asciiName = 'Benalish Knight';"}, {"question_id": 367, "answer_sql": "SELECT DISTINCT artist FROM cards WHERE asciiName = 'Phyrexian' AND availability = 'in_print';"}, {"question_id": 368, "answer_sql": "SELECT (COUNT(*) where borderColor = 'borderless') / COUNT(*) * 100 as percentage FROM cards WHERE borderColor = 'borderless';"}, {"question_id": 369, "answer_sql": "SELECT COUNT(*) FROM cards WHERE scryfallIllustrationId = '001' AND isReprint = 1 AND language = 'German';"}, {"question_id": 370, "answer_sql": "SELECT COUNT(*) FROM cards WHERE borderColor = 'borderless' AND language = 'Russian';"}, {"question_id": 371, "answer_sql": "SELECT (COUNT(id) where language = 'French' and isStorySpotlight = 1) / (COUNT(id) where isStorySpotlight = 1) * 100 as percentage_french_story_spotlight_cards FROM cards WHERE isStorySpotlight = 1;"}, {"question_id": 372, "answer_sql": "SELECT COUNT(*) FROM cards WHERE toughness = '99';"}, {"question_id": 373, "answer_sql": "SELECT asciiName, mcmId, mcmName, multiverseId FROM cards WHERE artist = 'Aaron Boyd' AND availability = 'in_print';"}, {"question_id": 374, "answer_sql": "SELECT COUNT(*) FROM cards WHERE borderColor = 'black' AND availability = 'mtgo';"}, {"question_id": 375, "answer_sql": "SELECT id FROM cards WHERE convertedManaCost = 0;"}, {"question_id": 376, "answer_sql": "SELECT layout FROM cards WHERE keywords LIKE '%flying%';"}, {"question_id": 377, "answer_sql": "SELECT COUNT(*) FROM cards WHERE subtypes NOT LIKE '%Angel%' AND originalType = 'Summon - Angel';"}, {"question_id": 378, "answer_sql": "SELECT c1.cardKingdomFoilId, c1.cardKingdomId FROM cards c1 JOIN cards c2 ON c1.cardKingdomId = c2.cardKingdomId WHERE c1.hasFoil = 1 AND c2.hasNonFoil = 1 AND c1.cardKingdomFoilId IS NOT NULL AND c2.cardKingdomId IS NOT NULL GROUP BY c1.cardKingdomFoilId, c1.cardKingdomId HAVING COUNT(*) > 1;"}, {"question_id": 379, "answer_sql": "SELECT id FROM cards WHERE duelDeck = 'a';"}, {"question_id": 380, "answer_sql": "SELECT edhrecRank FROM cards WHERE frameVersion = '2015';"}, {"question_id": 381, "answer_sql": "SELECT artist FROM cards WHERE language = 'Chinese Simplified';"}, {"question_id": 382, "answer_sql": "SELECT c.* FROM cards c JOIN sets s ON c.setCode = s.code JOIN set_translations st ON s.code = st.setCode WHERE c.availability = 'paper' AND st.language = 'Japanese' ```"}, {"question_id": 383, "answer_sql": "SELECT COUNT(*) FROM cards WHERE status = 'Banned' AND borderColor = 'white';"}, {"question_id": 384, "answer_sql": "SELECT uuid, flavorText FROM cards WHERE format = 'legacy';"}, {"question_id": 385, "answer_sql": "SELECT text FROM rulings WHERE uuid = (SELECT uuid FROM cards WHERE name = 'Beacon of Immortality');"}, {"question_id": 386, "answer_sql": "SELECT COUNT(*), status FROM cards WHERE frameVersion = 'future' AND status = 'legal';"}, {"question_id": 387, "answer_sql": "SELECT name, colors, cardKingdomId, cardKingdomFoilId FROM cards WHERE setCode = 'OGW' AND isFullArt = 1 AND isOversized = 0 AND isPromo = 0 AND isStarter = 0 AND isReprint = 0 AND isReserved = 0 AND isOnlineOnly = 0 AND isTextless = 0 AND isTimeshifted = 0 AND isAlternative = 0 AND isFoil = 0 AND isNonFoil = 1 AND hasFoil = 1 AND hasNonFoil = 0 AND hasFoilOnly = 0 AND hasNonFoilOnly = 0 AND hasContentWarning = 0 AND hasAlternativeDeckLimit = 0 AND isStorySpotlight = 0 AND isOnlineOnly = 0 AND isTextless = 0 AND isTimeshifted = 0 AND isAlternative = 0 AND isFoil = 0 AND isNonFoil = 1 AND hasFoil = 1 AND hasNonFoil = 0 AND hasFoilOnly = 0 AND hasNonFoilOnly = 0 AND hasContentWarning = 0 AND hasAlternativeDeckLimit = 0 AND isStorySpotlight = 0 AND isOnlineOnly = 0 AND isTextless = 0 AND isTimeshifted = 0 AND isAlternative = 0 AND isFoil = 0 AND isNonFoil = 1 AND hasFoil = 1 AND hasNonFoil = 0 AND hasFoilOnly = 0 AND hasNonFoilOnly = 0 AND hasContentWarning = 0 AND hasAlternativeDeckLimit = 0 AND isStorySpotlight = 0 AND isOnlineOnly = 0 AND isTextless = 0 AND isTimeshifted = 0 AND isAlternative = 0 AND isFoil = 0 AND isNonFoil = 1 AND hasFoil = 1 AND hasNonFoil = 0 AND hasFoilOnly = 0 AND hasNonFoilOnly = 0 AND hasContentWarning ="}, {"question_id": 388, "answer_sql": "SELECT c.name, st.translation, st.language FROM cards c JOIN set_translations st ON c.uuid = st.setCode WHERE c.convertedManaCost = 5 AND c.setCode = '10E';"}, {"question_id": 389, "answer_sql": "SELECT name, originalType, date, text FROM cards JOIN rulings ON cards.uuid = rulings.uuid WHERE originalType = 'Creature - Elf' ORDER BY date;"}, {"question_id": 390, "answer_sql": "SELECT colors, format FROM cards WHERE id BETWEEN 1 AND 20;"}, {"question_id": 391, "answer_sql": "SELECT uuid FROM cards WHERE originalType = 'Artifact' AND colors = 'B' AND foreign_data.language IS NOT NULL;"}, {"question_id": 392, "answer_sql": "SELECT c.name, r.date FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.rarity = 'uncommon' ORDER BY r.date ASC;"}, {"question_id": 393, "answer_sql": "SELECT COUNT(*) FROM cards WHERE artist = 'John Avon' AND hasFoil = 1 AND cardKingdomId = cardKingdomFoilId IS NOT NULL;"}, {"question_id": 394, "answer_sql": "SELECT COUNT(*) FROM cards WHERE borderColor = 'white' AND (cardKingdomFoilId = cardKingdomId AND cardKingdomId IS NOT NULL);"}, {"question_id": 395, "answer_sql": "SELECT COUNT(*) FROM cards WHERE artist = 'UDON' AND availability = 'mtgo' AND hand = -1;"}, {"question_id": 396, "answer_sql": "SELECT COUNT(*) FROM cards WHERE frameVersion = '1993' AND availability = 'paper' AND hasContentWarning = 1;"}, {"question_id": 397, "answer_sql": "SELECT manaCost FROM cards WHERE layout = 'normal' AND frameVersion = 2003 AND borderColor = 'black' AND availability IN ('paper', 'mtgo');"}, {"question_id": 398, "answer_sql": "SELECT SUM(convertedManaCost) as total_unconverted_mana_cost FROM cards WHERE artist = 'Rob Alexander';"}, {"question_id": 399, "answer_sql": "SELECT types FROM cards WHERE availability = 'arena';"}, {"question_id": 400, "answer_sql": "SELECT setCode FROM sets WHERE language = 'Spanish';"}, {"question_id": 401, "answer_sql": "SELECT DIVIDE(COUNT(hand = '+3'), COUNT(id)) * 100 as percentage FROM cards WHERE frameEffects = 'legendary';"}, {"question_id": 402, "answer_sql": "SELECT c.id, c.name, (SUM(CASE WHEN f.flavorText IS NOT NULL THEN 1 ELSE 0 END) / (SELECT COUNT(*) FROM cards WHERE isStorySpotlight = 1 AND isTextless = 1)) * 100 as percentage FROM cards c LEFT JOIN foreign_data f ON c.id = f.uuid WHERE c.isStorySpotlight = 1 AND c.isTextless = 1 GROUP BY c.id, c.name ORDER BY c.id;"}, {"question_id": 403, "answer_sql": "SELECT name, COUNT(*) as count FROM cards WHERE language = 'Spanish' GROUP BY name ORDER BY count DESC;"}, {"question_id": 404, "answer_sql": "SELECT translation FROM set_translations WHERE setCode = '309';"}, {"question_id": 405, "answer_sql": "SELECT COUNT(*) FROM sets WHERE code = 'Commander' AND language = 'Portuguese (Brasil)';"}, {"question_id": 406, "answer_sql": "SELECT c.* FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.type = 'Creature' AND l.status = 'legal';"}, {"question_id": 407, "answer_sql": "SELECT types FROM cards WHERE subtypes IS NOT NULL AND supertypes IS NOT NULL AND language = 'German' This query will return all types of cards in German."}, {"question_id": 408, "answer_sql": "SELECT COUNT(*) FROM cards WHERE power IS NULL;"}, {"question_id": 409, "answer_sql": "SELECT COUNT(*) FROM cards WHERE type = 'Premodern' AND rulings LIKE '%This is a triggered mana ability%' AND variations IS NULL AND side IS NULL;"}, {"question_id": 410, "answer_sql": "SELECT cards.id FROM cards JOIN printings ON cards.uuid = printings.uuid JOIN sets ON printings.setcode = sets.code WHERE cards.artist = 'Erica Yang' AND printings.format = 'pauper' AND sets.availability = 'paper';"}, {"question_id": 411, "answer_sql": "SELECT artist FROM cards WHERE text = 'Das perfekte Gegenmittel zu einer dichten Formation';"}, {"question_id": 412, "answer_sql": "SELECT name FROM cards WHERE type = 'Creature' AND layout = 'normal' AND borderColor = 'black' AND language = 'French';"}, {"question_id": 413, "answer_sql": "SELECT COUNT(*) FROM cards WHERE rarity = 'rare' AND date = '2009-01-10';"}, {"question_id": 414, "answer_sql": "SELECT translation FROM set_translations WHERE setCode = 'Ravnica' AND language = 'English';"}, {"question_id": 415, "answer_sql": "SELECT DIVIDE(COUNT(hasContentWarning = 0),COUNT(ID))*100 FROM cards WHERE format = 'commander' AND status = 'legal';"}, {"question_id": 416, "answer_sql": "SELECT DIVIDE(COUNT(language = 'French' and power is NULL or power = '*'), COUNT( power is NULL or power = '*'))*100 as percentage FROM cards WHERE language = 'French' OR power IS NULL OR power = '*';"}, {"question_id": 417, "answer_sql": "SELECT DIVIDE(COUNT(language = 'Japanese'),COUNT(language))*100 as percentage FROM cards WHERE type = 'expansion';"}, {"question_id": 418, "answer_sql": "SELECT format FROM cards WHERE artist = 'Daren Bader';"}, {"question_id": 419, "answer_sql": "SELECT COUNT(*) FROM cards WHERE borderColor = 'borderless' AND edhrecRank > 12000;"}, {"question_id": 420, "answer_sql": "SELECT COUNT(*) FROM cards WHERE isOversized = 1 AND isReprint = 1 AND isPromo = 1;"}, {"question_id": 421, "answer_sql": "SELECT name FROM cards WHERE power = '*' AND types LIKE '%unknown%' AND isPromo = 1 AND promoTypes LIKE '%arenaleague%' ORDER BY name ASC LIMIT 3;"}, {"question_id": 422, "answer_sql": "SELECT language FROM foreign_data WHERE multiverseid = 149934;"}, {"question_id": 423, "answer_sql": "SELECT cardKingdomFoilId, cardKingdomId FROM cards WHERE cardKingdomFoilId is not null AND cardKingdomId is not null ORDER BY cardKingdomFoilId ASC LIMIT 3;"}, {"question_id": 424, "answer_sql": "SELECT DIVIDE(COUNT(Textless = 1 and layout = 'normal'),COUNT(Textless))*100 as proportion FROM cards;"}, {"question_id": 425, "answer_sql": "SELECT uuid FROM cards WHERE subtypes LIKE '%Angel%' AND subtypes LIKE '%Wizard%' AND otherFaceIds IS NULL;"}, {"question_id": 426, "answer_sql": "SELECT s.name FROM sets s WHERE s.mtgoCode IS NULL OR s.mtgoCode = '' ORDER BY s.name ASC LIMIT 3;"}, {"question_id": 427, "answer_sql": "SELECT DISTINCT flavorText, language FROM foreign_data WHERE multiverseid = ( SELECT id FROM sets WHERE mcmName = 'Archenemy' AND setCode = 'ARC' )"}, {"question_id": 428, "answer_sql": "SELECT sets.name, set_translations.translation FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE sets.id = 5;"}, {"question_id": 429, "answer_sql": "SELECT language, type FROM sets WHERE code = '206';"}, {"question_id": 430, "answer_sql": "SELECT s.code, s.name, s.releaseDate FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.language = 'Italian' AND s.block = 'Shadowmoor' ORDER BY s.name ASC LIMIT 2;"}, {"question_id": 431, "answer_sql": "SELECT code FROM sets WHERE isForeignOnly = 1 AND isFoilOnly = 1 AND language = 'Japanese' This query will return the set code of the set that is not available outside of the United States and has foil cards with Japanese writing on them."}, {"question_id": 432, "answer_sql": "SELECT MAX(baseSetSize) as Most_Cards_Overall FROM sets WHERE language = 'Russian';"}, {"question_id": 433, "answer_sql": "SELECT DIVIDE(COUNT(isOnlineOnly = 1),COUNT(isOnlineOnly))*100 as percentage FROM cards;"}, {"question_id": 434, "answer_sql": "SELECT COUNT(*) FROM sets WHERE code NOT IN (SELECT DISTINCT scryfallId FROM foreign_data WHERE language = 'Japanese') AND mtgoCode IS NULL;"}, {"question_id": 435, "answer_sql": "SELECT id, name FROM cards WHERE borderColor = 'black';"}, {"question_id": 436, "answer_sql": "SELECT id FROM cards WHERE frameEffects = 'extendedart';"}, {"question_id": 437, "answer_sql": "SELECT cards.name FROM cards WHERE cards.borderColor = 'black' AND cards.isFullArt = 1;"}, {"question_id": 438, "answer_sql": "SELECT translation FROM set_translations WHERE setCode = '174';"}, {"question_id": 439, "answer_sql": "SELECT setCode FROM sets WHERE code = 'ALL';"}, {"question_id": 440, "answer_sql": "SELECT foreign_data.text FROM foreign_data JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.asciiName = 'A Pedra Fellwar';"}, {"question_id": 441, "answer_sql": "SELECT code FROM sets WHERE releaseDate = '07/13/2007';"}, {"question_id": 442, "answer_sql": "SELECT baseSetSize, code FROM sets WHERE name IN ('Masques', 'Mirage');"}, {"question_id": 443, "answer_sql": "SELECT code FROM sets WHERE type = 'expansion';"}, {"question_id": 444, "answer_sql": "SELECT fd.name, c.type FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.watermark = 'boros'"}, {"question_id": 445, "answer_sql": "SELECT fd.language, fd.flavorText FROM foreign_data fd JOIN cards c ON c.uuid = fd.uuid WHERE c.watermark = 'colorpie'"}, {"question_id": 446, "answer_sql": "SELECT DIVIDE(COUNT(convertedManaCost = 16),COUNT(convertedManaCost))*100 FROM cards WHERE setCode = 'Abyssal Horror';"}, {"question_id": 447, "answer_sql": "SELECT code FROM sets WHERE type = 'Commander';"}, {"question_id": 448, "answer_sql": "SELECT foreign_data.name, foreign_data.text FROM foreign_data JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.watermark = 'abzan';"}, {"question_id": 449, "answer_sql": "SELECT language, type FROM cards WHERE watermark = 'azorius'"}, {"question_id": 450, "answer_sql": "SELECT COUNT(*) FROM cards WHERE artist = 'Aaron Miller' AND cardKingdomFoilId = cardKingdomId AND cardKingdomId is not null;"}, {"question_id": 451, "answer_sql": "SELECT COUNT(*) FROM cards WHERE availability LIKE '%paper%' AND hand = '+%';"}, {"question_id": 452, "answer_sql": "SELECT name FROM cards WHERE isTextless = 0;"}, {"question_id": 453, "answer_sql": "SELECT convertedManaCost FROM cards WHERE asciiName = 'Ancestor`s Chosen';"}, {"question_id": 454, "answer_sql": "SELECT COUNT(*) FROM cards WHERE borderColor = 'white' AND power = '*' OR power IS NULL;"}, {"question_id": 455, "answer_sql": "SELECT DISTINCT cards.name FROM cards WHERE cards.isPromo = 1 AND cards.side IS NOT NULL;"}, {"question_id": 456, "answer_sql": "SELECT subtypes, supertypes FROM cards WHERE asciiName = 'Molimo, Maro-Sorcerer';"}, {"question_id": 457, "answer_sql": "SELECT purchaseUrls FROM sets WHERE code = 'bundle';"}, {"question_id": 458, "answer_sql": "SELECT COUNT(*) FROM cards WHERE borderColor = 'black' AND availability LIKE '%arena,mtgo%';"}, {"question_id": 459, "answer_sql": "SELECT name, convertedManaCost FROM cards WHERE name IN ('Serra Angel', 'Shrine Keeper') ORDER BY convertedManaCost DESC LIMIT 1;"}, {"question_id": 460, "answer_sql": "SELECT artist FROM cards WHERE flavorName = 'Battra, Dark Destroyer';"}, {"question_id": 461, "answer_sql": "SELECT name, convertedManaCost, frameVersion FROM cards WHERE frameVersion = '2003' ORDER BY convertedManaCost DESC LIMIT 3;"}, {"question_id": 462, "answer_sql": "SELECT sets.name FROM sets JOIN printings ON sets.code = printings.setcode JOIN cards ON printings.card_id = cards.id WHERE cards.name = 'Ancestor\\'s Chosen';"}, {"question_id": 463, "answer_sql": "SELECT COUNT(*) FROM sets WHERE name = 'Angel of Mercy';"}, {"question_id": 464, "answer_sql": "SELECT name FROM cards WHERE setCode = 'H2E';"}, {"question_id": 465, "answer_sql": "SELECT translation FROM set_translations WHERE setCode = 'Ancestor's Chosen' AND language = 'Korean';"}, {"question_id": 466, "answer_sql": "SELECT COUNT(*) FROM cards WHERE setCode = 'Hauptset Zehnte Edition' AND artist = 'Adam Rex';"}, {"question_id": 467, "answer_sql": "SELECT baseSetSize FROM sets WHERE code = 'Hauptset Zehnte Edition';"}, {"question_id": 468, "answer_sql": "SELECT translation FROM set_translations WHERE setCode = 'Eighth Edition' AND language = '\u4e2d\u6587';"}, {"question_id": 469, "answer_sql": "SELECT mtgoId FROM cards WHERE name = 'Angel of Mercy';"}, {"question_id": 470, "answer_sql": "SELECT releaseDate FROM sets WHERE code = 'Ancestor''s Chosen';"}, {"question_id": 471, "answer_sql": "SELECT type FROM sets WHERE code = 'Hauptset Zehnte Edition';"}, {"question_id": 472, "answer_sql": "SELECT COUNT(*) FROM sets WHERE code = 'Ice Age' AND language = 'Italian';"}, {"question_id": 473, "answer_sql": "SELECT name FROM sets WHERE code = 'Adarkar Valkyrie' AND isForeignOnly = 1;"}, {"question_id": 474, "answer_sql": "SELECT COUNT(*) FROM sets WHERE code IN (SELECT setCode FROM set_translations WHERE language = 'Italian' AND translation IS NOT NULL) AND baseSetSize < 10;"}, {"question_id": 475, "answer_sql": "SELECT COUNT(*) FROM cards WHERE setCode = 'Coldsnap' AND borderColor = 'black';"}, {"question_id": 476, "answer_sql": "SELECT name, convertedManaCost FROM cards WHERE setCode = 'Coldsnap' ORDER BY convertedManaCost DESC LIMIT 1;"}, {"question_id": 477, "answer_sql": "SELECT artist FROM cards WHERE cardKingdomId = 'Coldsnap' AND artist IN ('Jeremy Jarvis', 'Aaron Miller','Chippy');"}, {"question_id": 478, "answer_sql": "SELECT name, number, setCode FROM cards WHERE setCode = 'Coldsnap' AND number = 4;"}, {"question_id": 479, "answer_sql": "SELECT COUNT(*) FROM cards WHERE setCode = 'Coldsnap' AND convertedManaCost > 5 AND (power = '*' OR power IS NULL);"}, {"question_id": 480, "answer_sql": "SELECT foreign_data.flavorText FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.name = 'Ancestor''s Chosen' AND foreign_data.language = 'Italian';"}, {"question_id": 481, "answer_sql": "SELECT DISTINCT flavorText.language FROM foreign_data JOIN flavorText ON flavorText.multiverseid = cards.id WHERE cards.asciiName = 'Ancestor''s Chosen' AND flavorText.text IS NOT NULL;"}, {"question_id": 482, "answer_sql": "SELECT type FROM cards WHERE asciiName = 'Ancestor''s Chosen' AND language = 'German' This query will return the type of the card Ancestor's Chosen in German."}, {"question_id": 483, "answer_sql": "SELECT cards.name, foreign_data.text as Italian_text_ruling FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.setCode = 'Coldsnap' AND foreign_data.language = 'Italian';"}, {"question_id": 484, "answer_sql": "SELECT name, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtggoFoilId, mtggoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark FROM cards WHERE setCode = 'Coldsnap' AND language = 'Italian' AND name IN (SELECT name FROM cards WHERE setCode = 'Coldsnap' AND convertedManaCost = (SELECT MAX(convertedManaCost) FROM cards WHERE setCode = 'Coldsnap'));"}, {"question_id": 485, "answer_sql": "SELECT date FROM rulings WHERE uuid = (SELECT uuid FROM cards WHERE name = 'Reminisce');"}, {"question_id": 486, "answer_sql": "SELECT DIVIDE(SUM(convertedManaCost = 7), SUM(convertedManaCost))*100 as percentage FROM cards WHERE name = 'Coldsnap';"}, {"question_id": 487, "answer_sql": "SELECT DIVIDE(SUM(cardKingdomId IS NOT NULL), SUM(name = 'Coldsnap')) * 100 as percentage_of_incredibly_powerful_cards FROM cards WHERE setCode = 'Coldsnap' AND isFoilOnly = 1;"}, {"question_id": 488, "answer_sql": "SELECT code FROM sets WHERE releaseDate = '2017-07-14';"}, {"question_id": 489, "answer_sql": "SELECT keyruneCode FROM sets WHERE code = 'PKHC';"}, {"question_id": 490, "answer_sql": "SELECT mcmId FROM sets WHERE code = 'SS2';"}, {"question_id": 491, "answer_sql": "SELECT mcmName FROM sets WHERE releaseDate = '2017-06-09';"}, {"question_id": 492, "answer_sql": "SELECT type FROM sets WHERE code = 'From the Vault: Lore';"}, {"question_id": 493, "answer_sql": "SELECT parentCode FROM sets WHERE code = 'Commander 2014 Oversized';"}, {"question_id": 494, "answer_sql": "SELECT c.text, c.hasContentWarning FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.artist = 'Jim Pavelec' AND c.hasContentWarning = 1;"}, {"question_id": 495, "answer_sql": "SELECT releaseDate FROM sets WHERE code = '2019-07-15';"}, {"question_id": 496, "answer_sql": "SELECT COUNT(*) FROM cards WHERE setCode = 'Rinascita di Alara';"}, {"question_id": 497, "answer_sql": "SELECT type FROM sets WHERE code = 'Huiti\u00e8me \u00e9dition';"}, {"question_id": 498, "answer_sql": "SELECT sets.name FROM sets JOIN printings ON sets.code = printings.setcode JOIN cards ON printings.card_id = cards.id WHERE cards.asciiName = 'Tendo Ice Bridge' AND printings.language = 'French';"}, {"question_id": 499, "answer_sql": "SELECT COUNT(*) FROM set_translations WHERE setCode = 'Salvat 2011';"}, {"question_id": 500, "answer_sql": "SELECT sets.name FROM sets JOIN printings ON sets.code = printings.setcode JOIN cards ON printings.card_id = cards.id WHERE cards.name = 'Fellwar Stone' AND printings.language = 'Japanese';"}, {"question_id": 501, "answer_sql": "SELECT MAX(convertedManaCost) as Highest_CMC FROM cards WHERE setCode = 'Journey into Nyx Hero''s Path';"}, {"question_id": 502, "answer_sql": "SELECT releaseDate FROM sets WHERE code = 'Ola de fr\u00edo';"}, {"question_id": 503, "answer_sql": "SELECT type FROM sets WHERE code = '2019_01_01';"}, {"question_id": 504, "answer_sql": "SELECT COUNT(*) FROM cards WHERE setCode = 'World Championship Decks 2004' AND convertedManaCost = 3;"}, {"question_id": 505, "answer_sql": "SELECT translation FROM set_translations WHERE setCode = 'Mirrodin' AND language = 'Chinese Simplified';"}, {"question_id": 506, "answer_sql": "SELECT (SUM(isNonFoilOnly = 1) * 1.0 / SUM(isNonFoilOnly = 1 OR language = 'Japanese')) * 100 AS percentage_of_japanese_non_foil_in_japanese_cards FROM cards WHERE language = 'Japanese';"}, {"question_id": 507, "answer_sql": "SELECT DIVIDE(SUM(isOnlineOnly = 1), SUM(language = 'Portuguese (Brazil)')) * 100 as percentage_of_online_only_brazil_pt_cards FROM cards;"}, {"question_id": 508, "answer_sql": "SELECT DISTINCT format FROM cards WHERE artist = 'Aleksi Briclot' AND isTextless = 1 AND availability != 'None'"}, {"question_id": 509, "answer_sql": "SELECT MAX(baseSetSize) as Highest_Number_Of_Cards, code as Unique_Id FROM sets ```"}, {"question_id": 510, "answer_sql": "SELECT artist, MAX(convertedManaCost) as max_cmc FROM cards WHERE side IS NULL GROUP BY artist ORDER BY max_cmc DESC LIMIT 1;"}, {"question_id": 511, "answer_sql": "SELECT frameEffects FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL GROUP BY frameEffects ORDER BY COUNT(*) DESC LIMIT 1;"}, {"question_id": 512, "answer_sql": "SELECT COUNT(*) FROM cards WHERE power IS NULL OR power = '*' AND hasFoil = 0 AND duelDeck = 'a';"}, {"question_id": 513, "answer_sql": "SELECT s.code FROM sets s WHERE s.type = 'commander' AND s.totalSetSize = ( SELECT MAX(totalSetSize) FROM sets WHERE type = 'commander' );"}, {"question_id": 514, "answer_sql": "SELECT * FROM cards WHERE availability = 'in-play' ORDER BY convertedManaCost DESC LIMIT 10;"}, {"question_id": 515, "answer_sql": "SELECT format FROM cards WHERE rarity = 'mythic' AND status = 'legal' ORDER BY originalReleaseDate ASC LIMIT 1;"}, {"question_id": 516, "answer_sql": "SELECT COUNT(*) FROM cards WHERE artist = 'Volkan Baga' AND language = 'French';"}, {"question_id": 517, "answer_sql": "SELECT COUNT(*) FROM cards WHERE rarity = 'rare' AND types = 'Enchantment' AND name = 'Abundance' AND status = 'Legal';"}, {"question_id": 518, "answer_sql": "SELECT s.name, MAX(b.status) as highest_banned_status FROM sets s JOIN legalities b ON s.code = b.uuid WHERE b.status = 'banned' GROUP BY s.name ORDER BY highest_banned_status DESC LIMIT 1;"}, {"question_id": 519, "answer_sql": "SELECT language FROM sets WHERE code = 'Battlebond';"}, {"question_id": 520, "answer_sql": "SELECT MIN(artist) as illustrator, GROUP_CONCAT(DISTINCT format) as play_formats FROM cards WHERE artist IN (SELECT DISTINCT artist FROM cards) GROUP BY artist ORDER BY MIN(artist) LIMIT 1;"}, {"question_id": 521, "answer_sql": "SELECT status FROM cards WHERE frameVersion = '1997' AND artist = 'D. Alexander Gregory' AND hasContentWarning = 1 AND format = 'legacy';"}, {"question_id": 522, "answer_sql": "SELECT name, format FROM cards WHERE edhrecRank = 1 AND status = 'banned' ORDER BY name;"}, {"question_id": 523, "answer_sql": "SELECT AVG(id), MAX(COUNT(language)) FROM sets WHERE releaseDate BETWEEN '2012-01-01' AND '2015-12-31' GROUP BY language;"}, {"question_id": 524, "answer_sql": "SELECT DISTINCT artist FROM cards WHERE BorderColor = 'black' AND availability = 'arena';"}, {"question_id": 525, "answer_sql": "SELECT uuid FROM cards WHERE format = 'oldschool' AND (status = 'banned' OR status = 'restricted');"}, {"question_id": 526, "answer_sql": "SELECT COUNT(*) FROM cards WHERE artist = 'Matthew D. Wilson' AND availability = 'paper';"}, {"question_id": 527, "answer_sql": "SELECT text, date FROM rulings WHERE uuid IN (SELECT uuid FROM cards WHERE artist = 'Kev Walker') ORDER BY date DESC;"}, {"question_id": 528, "answer_sql": "SELECT sets.name AS set_name, sets.code AS set_code, legalities.status AS status FROM sets JOIN legalities ON sets.code = legalities.uuid WHERE sets.name = 'Hour of Devastation' AND legalities.status = 'legal'"}, {"question_id": 529, "answer_sql": "SELECT s.name FROM sets s WHERE s.code NOT LIKE '%Japanese%' AND s.language = 'Korean';"}, {"question_id": 530, "answer_sql": "SELECT DISTINCT frameVersion, cards.name FROM cards WHERE artist = 'Allen Williams' AND status = 'banned';"}, {"question_id": 531, "answer_sql": "SELECT MAX(Reputation) as Highest_Reputation FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon');"}, {"question_id": 532, "answer_sql": "SELECT DisplayName FROM users WHERE YEAR(CreationDate) = 2014;"}, {"question_id": 533, "answer_sql": "SELECT COUNT(*) FROM users WHERE LastAccessDate > '2014-09-01 00:00:00';"}, {"question_id": 534, "answer_sql": "SELECT MAX(Views) as Most_Number_Of_Views, DisplayName FROM users WHERE Id = (SELECT UserId FROM posts WHERE LastActivityDate = (SELECT MAX(LastActivityDate) FROM posts));"}, {"question_id": 535, "answer_sql": "SELECT COUNT(*) FROM users WHERE UpVotes > 100 AND DownVotes > 1;"}, {"question_id": 536, "answer_sql": "SELECT COUNT(*) FROM users WHERE Views > 10 AND CreationDate > '2013-01-01';"}, {"question_id": 537, "answer_sql": "SELECT COUNT(*) FROM posts WHERE OwnerDisplayName = 'csgillespie';"}, {"question_id": 538, "answer_sql": "SELECT Title FROM posts WHERE OwnerDisplayName = 'csgillespie';"}, {"question_id": 539, "answer_sql": "SELECT OwnerDisplayName FROM posts WHERE Title = 'Eliciting priors from experts';"}, {"question_id": 540, "answer_sql": "SELECT TOP 1 p.Title FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'csgillespie' ORDER BY p.ViewCount DESC LIMIT 1;"}, {"question_id": 541, "answer_sql": "SELECT OwnerDisplayName FROM posts WHERE FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts);"}, {"question_id": 542, "answer_sql": "SELECT SUM(CommentCount) FROM posts WHERE OwnerDisplayName = 'csgillespie';"}, {"question_id": 543, "answer_sql": "SELECT MAX(AnswerCount) FROM posts WHERE OwnerDisplayName = 'csgillespie';"}, {"question_id": 544, "answer_sql": "SELECT LastEditorDisplayName FROM posts WHERE Title = 'Examples for teaching: Correlation does not mean causation';"}, {"question_id": 545, "answer_sql": "SELECT COUNT(*) FROM posts WHERE OwnerDisplayName = 'csgillespie' AND ParentId IS NULL;"}, {"question_id": 546, "answer_sql": "SELECT OwnerDisplayName FROM posts WHERE ClosedDate IS NOT NULL;"}, {"question_id": 547, "answer_sql": "SELECT COUNT(*) FROM posts WHERE OwnerUserId IN (SELECT Id FROM users WHERE Age > 65) AND Score >= 20;"}, {"question_id": 548, "answer_sql": "SELECT Location FROM users WHERE Id=(SELECT OwnerUserId FROM posts WHERE Title='Eliciting priors from experts');"}, {"question_id": 549, "answer_sql": "SELECT Body FROM posts WHERE Tags LIKE '%bayesian%' AND ExcerptPostId IS NOT NULL AND WikiPostId IS NULL;"}, {"question_id": 550, "answer_sql": "SELECT Body FROM posts WHERE Tags LIKE '%tagname%' ORDER BY AnswerCount DESC LIMIT 1;"}, {"question_id": 551, "answer_sql": "SELECT COUNT(*) FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie');"}, {"question_id": 552, "answer_sql": "SELECT Name FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie');"}, {"question_id": 553, "answer_sql": "SELECT COUNT(*) FROM badges WHERE YEAR(Date) = 2011 AND UserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie');"}, {"question_id": 554, "answer_sql": "SELECT DisplayName FROM users WHERE Id = (SELECT UserId FROM badges ORDER BY COUNT(Id) DESC LIMIT 1);"}, {"question_id": 555, "answer_sql": "SELECT AVG(Score) FROM posts WHERE OwnerDisplayName = 'csgillespie';"}, {"question_id": 556, "answer_sql": "SELECT AVG(badges.Count) FROM badges JOIN users ON badges.UserId = users.Id WHERE users.Views > 200;"}, {"question_id": 557, "answer_sql": "SELECT (COUNT(posts.Id) * 1.0) * (COUNT(users.Id) * 1.0) / (SELECT COUNT(Id) FROM users WHERE Age > 65) AS percentage FROM posts INNER JOIN users ON posts.OwnerUserId = users.Id WHERE posts.Score > 20 AND users.Age > 65"}, {"question_id": 558, "answer_sql": "SELECT COUNT(*) FROM votes WHERE UserId = 58 AND CreationDate = '2010-07-19';"}, {"question_id": 559, "answer_sql": "SELECT CreationDate FROM votes WHERE Count(Id) = (SELECT MAX(Count(Id)) FROM votes);"}, {"question_id": 560, "answer_sql": "SELECT COUNT(*) FROM badges WHERE Name = 'Revival';"}, {"question_id": 561, "answer_sql": "SELECT TOP 1 posts.Title FROM posts INNER JOIN comments ON posts.Id = comments.PostId WHERE comments.Score = (SELECT MAX(comments.Score) FROM comments)"}, {"question_id": 562, "answer_sql": "SELECT COUNT(*) FROM comments WHERE PostId = (SELECT Id FROM posts WHERE ViewCount = 1910);"}, {"question_id": 563, "answer_sql": "SELECT F.FavoriteCount FROM posts P JOIN postLinks PL ON PL.PostId = P.Id JOIN posts F ON F.Id = PL.RelatedPostId WHERE P.OwnerUserId = 3025 AND P.CreationDate = '2014-04-23 20:29:39.0';"}, {"question_id": 564, "answer_sql": "SELECT Text FROM comments WHERE PostId = 107829;"}, {"question_id": 565, "answer_sql": "SELECT p.Title FROM posts p JOIN comments c ON p.Id = c.PostId WHERE c.UserId = 23853 AND c.CreationDate = '2013-07-12 09:08:18.0' AND p.ClosedDate IS NULL;"}, {"question_id": 566, "answer_sql": "SELECT Reputation FROM users WHERE Id = '65041';"}, {"question_id": 567, "answer_sql": "SELECT COUNT(*) FROM posts WHERE OwnerDisplayName = 'Tiago Pasqualini';"}, {"question_id": 568, "answer_sql": "SELECT DisplayName FROM users WHERE Id = 6347;"}, {"question_id": 569, "answer_sql": "SELECT COUNT(*) FROM posts WHERE Title LIKE '%data visualization%';"}, {"question_id": 570, "answer_sql": "SELECT Name FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'DatEpicCoderGuyWhoPrograms');"}, {"question_id": 571, "answer_sql": "SELECT (SELECT COUNT(*) FROM posts WHERE OwnerUserId = 24) / (SELECT COUNT(*) FROM votes WHERE UserId = 24) as 'Times of posts than votes';"}, {"question_id": 572, "answer_sql": "SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer';"}, {"question_id": 573, "answer_sql": "SELECT Text FROM comments WHERE Score = 17;"}, {"question_id": 574, "answer_sql": "SELECT DisplayName FROM users WHERE WebsiteUrl = 'http://stackoverflow.com';"}, {"question_id": 575, "answer_sql": "SELECT Name FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'SilentGhost');"}, {"question_id": 576, "answer_sql": "SELECT DisplayName FROM comments WHERE Text = 'thank you user93!' AND UserId = (SELECT Id FROM users WHERE DisplayName = 'user93');"}, {"question_id": 577, "answer_sql": "SELECT comments.Text FROM comments JOIN users ON comments.UserId = users.Id WHERE users.DisplayName = 'A Lion';"}, {"question_id": 578, "answer_sql": "SELECT DisplayName, Reputation FROM users WHERE Title = 'Understanding what Dassault iSight is doing?';"}, {"question_id": 579, "answer_sql": "SELECT comments.Text FROM comments JOIN posts ON comments.PostId = posts.Id WHERE posts.Title = 'How does gentle boosting differ from AdaBoost?';"}, {"question_id": 580, "answer_sql": "SELECT users.DisplayName FROM badges JOIN users ON badges.UserId = users.Id WHERE badges.Name = 'Necromancer' LIMIT 10;"}, {"question_id": 581, "answer_sql": "SELECT LastEditorDisplayName FROM posts WHERE Title = 'Open source tools for visualizing multi-dimensional data?';"}, {"question_id": 582, "answer_sql": "SELECT Title FROM posts WHERE LastEditorUserId = (SELECT Id FROM users WHERE DisplayName = 'Vebjorn Ljosa')"}, {"question_id": 583, "answer_sql": "SELECT SUM(posts.Score) as TotalScore FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'Yevgeny' AND users.WebsiteUrl IS NOT NULL;"}, {"question_id": 584, "answer_sql": "SELECT comments.* FROM comments JOIN users ON comments.UserId = users.Id WHERE comments.Text LIKE '%Why square the difference instead of taking the absolute value in standard deviation?%' AND users.DisplayName = 'Edited by User';"}, {"question_id": 585, "answer_sql": "SELECT SUM(BountyAmount) FROM votes WHERE PostId IN (SELECT Id FROM posts WHERE Title LIKE '%data%')"}, {"question_id": 586, "answer_sql": "SELECT DisplayName FROM users WHERE BountyAmount = 50 AND WikiPostId IS NOT NULL;"}, {"question_id": 587, "answer_sql": "The SQL query to solve this problem would be: ```sql SELECT Title, Comments, Score FROM posts WHERE Tags LIKE '%humor%' AND PostTypeId = 1 AND LastEditorDisplayName IS NOT NULL AND LastEditorDisplayName != '' AND LastEditorDisplayName != ' ' AND LastEditorDisplayName != 'null' AND LastEditorDisplayName != 'None' AND LastEditorDisplayName != 'Unknown' AND LastEditorDisplayName != 'Not provided' AND LastEditorDisplayName != 'Not Specified' AND LastEditorDisplayName != 'N/A' AND LastEditorDisplayName != 'N/A' AND LastEditorDisplayName != 'N/A' AND LastEditorDisplayName != 'N/A' AND LastEditorDisplayName != 'N/A' AND LastEditorDisplayName != 'N/A' AND LastEditorDisplayName != 'N/A' AND LastEditorDisplayName != 'N/A' AND LastEditorDisplayName != 'N/A' AND LastEditorDisplayName != 'N/A' AND LastEditorDisplayName != 'N/A' AND LastEditorDisplayName != 'N/A' AND LastEditorDisplayName != 'N/A' AND LastEditorDisplayName != 'N/A' AND LastEditorDisplayName != 'N/A' AND LastEditorDisplayName != 'N/A' AND LastEditorDisplayName != 'N/A' AND LastEditorDisplayName != 'N/A' AND LastEditorDisplayName != 'N/A' AND LastEditorDisplayName != 'N/A' AND LastEditorDisplayName != 'N/A' AND LastEditorDisplayName != 'N/A' AND LastEditorDisplayName != 'N/A' AND LastEditorDisplayName !"}, {"question_id": 588, "answer_sql": "SELECT COUNT(*) FROM comments WHERE UserId = 13;"}, {"question_id": 589, "answer_sql": "SELECT MAX(Reputation) FROM users;"}, {"question_id": 590, "answer_sql": "SELECT MIN(Users.Id) as LowestUserId FROM Users ```"}, {"question_id": 591, "answer_sql": "SELECT COUNT(*) FROM badges WHERE Name = 'Supporter' AND Date LIKE '2011%';"}, {"question_id": 592, "answer_sql": "SELECT COUNT(*) FROM users WHERE Id IN ( SELECT UserId FROM badges GROUP BY UserId HAVING COUNT(Id) > 5 );"}, {"question_id": 593, "answer_sql": "SELECT COUNT(*) FROM users u JOIN badges b1 ON u.Id = b1.UserId JOIN badges b2 ON u.Id = b2.UserId WHERE b1.Name = 'Supporter' AND b2.Name = 'Teachers' AND u.Location = 'New York';"}, {"question_id": 594, "answer_sql": "SELECT DisplayName, Reputation FROM users WHERE Id = 1;"}, {"question_id": 595, "answer_sql": "SELECT users.DisplayName FROM users JOIN postHistory ON users.Id = postHistory.UserId WHERE postHistory.PostId IN ( SELECT postLinks.PostId FROM postLinks WHERE postLinks.PostId IN ( SELECT posts.Id FROM posts WHERE posts.Views >= 1000 ) ) GROUP BY users.Id HAVING COUNT(postHistory.PostId) = 1;"}, {"question_id": 596, "answer_sql": "SELECT users.DisplayName, badges.Name FROM users JOIN comments ON users.Id = comments.UserId JOIN badges ON users.Id = badges.UserId WHERE comments.PostId IN ( SELECT postId FROM posts WHERE PostTypeId = 1 ) GROUP BY users.Id, badges.Name ORDER BY COUNT(*) DESC, users.Id ASC LIMIT 1;"}, {"question_id": 597, "answer_sql": "SELECT COUNT(*) FROM badges JOIN users ON badges.UserId = users.Id WHERE users.Location = 'India' AND badges.Name = 'Teacher';"}, {"question_id": 598, "answer_sql": "SELECT (SUM(CASE WHEN Year(Date) = 2010 THEN 1 ELSE 0 END) - SUM(CASE WHEN Year(Date) = 2011 THEN 1 ELSE 0 END)) / SUM(1) * 100 as percentage_difference FROM badges WHERE Name = 'Students'"}, {"question_id": 599, "answer_sql": "SELECT PostHistoryTypeId, COUNT(DISTINCT UserId) as UniqueUsers FROM postHistory WHERE PostId = 3720 GROUP BY PostHistoryTypeId;"}, {"question_id": 600, "answer_sql": "SELECT Title, ViewCount FROM posts WHERE ParentId = 61217;"}, {"question_id": 601, "answer_sql": "SELECT Score, postLinks.PostId, postLinks.RelatedPostId, postLinks.LinkTypeId FROM postLinks WHERE postLinks.PostId = 395;"}, {"question_id": 602, "answer_sql": "SELECT posts.Id, users.UserId FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE posts.Score > 60;"}, {"question_id": 603, "answer_sql": "SELECT SUM(FavoriteCount) FROM posts WHERE OwnerUserId = 686 AND CreationDate LIKE '2011%';"}, {"question_id": 604, "answer_sql": "SELECT AVG(UpVotes) as AverageUpVotes, AVG(Age) as AverageUserAge FROM users WHERE Count (UserId) > 10;"}, {"question_id": 605, "answer_sql": "SELECT COUNT(*) FROM badges WHERE Name = 'Announcer';"}, {"question_id": 606, "answer_sql": "SELECT Name FROM badges WHERE Date = '2010-07-19 19:39:08';"}, {"question_id": 607, "answer_sql": "SELECT COUNT(*) FROM comments WHERE Score > 60;"}, {"question_id": 608, "answer_sql": "SELECT Text FROM comments WHERE CreationDate = '2010-07-19 19:16:14.0';"}, {"question_id": 609, "answer_sql": "SELECT COUNT(*) FROM posts WHERE Score = 10;"}, {"question_id": 610, "answer_sql": "SELECT Name FROM badges WHERE UserId = (SELECT Id FROM users ORDER BY Reputation DESC LIMIT 1);"}, {"question_id": 611, "answer_sql": "SELECT Users.Reputation FROM Users JOIN badges ON Users.Id = badges.UserId WHERE badges.Date = '2010-07-19 19:39:08.0';"}, {"question_id": 612, "answer_sql": "SELECT Name FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'Pierre');"}, {"question_id": 613, "answer_sql": "SELECT badges.Date FROM badges JOIN users ON badges.UserId = users.Id WHERE users.Location = 'Rochester, NY';"}, {"question_id": 614, "answer_sql": "SELECT (COUNT(UserId) - COUNT(badges.UserId)) * 100 / COUNT(UserId) as percentage FROM users LEFT JOIN badges ON users.Id = badges.UserId WHERE badges.Name = 'Teacher'"}, {"question_id": 615, "answer_sql": "SELECT (COUNT(UserId) * 1.0 / (SELECT COUNT(Id) FROM users WHERE Age BETWEEN 13 AND 18)) * 100 AS Percentage FROM badges WHERE Name = 'Organizer'"}, {"question_id": 616, "answer_sql": "SELECT Score FROM comments WHERE CreationDate = '2010-07-19 19:19:56.0';"}, {"question_id": 617, "answer_sql": "SELECT Text, CreationDate FROM comments WHERE CreationDate = '2010-07-19 19:37:33.0';"}, {"question_id": 618, "answer_sql": "SELECT users.Age FROM users JOIN badges ON users.Id = badges.UserId WHERE users.Location = 'Vienna, Austria';"}, {"question_id": 619, "answer_sql": "SELECT COUNT(*) FROM badges WHERE Name = 'Supporter' AND UserId IN (SELECT Id FROM users WHERE Age BETWEEN 19 AND 65);"}, {"question_id": 620, "answer_sql": "SELECT COUNT(*) FROM users WHERE LastAccessDate = '2010-07-19 19:39:08.0';"}, {"question_id": 621, "answer_sql": "SELECT Name FROM badges WHERE UserId = (SELECT Id FROM users ORDER BY Reputation ASC LIMIT 1);"}, {"question_id": 622, "answer_sql": "SELECT Name FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'Sharpie');"}, {"question_id": 623, "answer_sql": "SELECT COUNT(*) FROM badges WHERE Name = 'Supporter' AND UserId IN (SELECT Id FROM users WHERE Age > 65);"}, {"question_id": 624, "answer_sql": "SELECT DisplayName FROM users WHERE Id = 30;"}, {"question_id": 625, "answer_sql": "SELECT COUNT(*) FROM users WHERE Location = 'New York';"}, {"question_id": 626, "answer_sql": "SELECT COUNT(*) FROM votes WHERE YEAR(CreationDate) = 2010;"}, {"question_id": 627, "answer_sql": "SELECT COUNT(*) FROM users WHERE Age BETWEEN 19 AND 65;"}, {"question_id": 628, "answer_sql": "SELECT DisplayName FROM users WHERE Views = (SELECT MAX(Views) FROM users);"}, {"question_id": 629, "answer_sql": "SELECT DIVIDE(COUNT(Id), DATEDIFF(DAY, MIN(CreationDate), MAX(CreationDate))) FROM votes WHERE YEAR(CreationDate) IN (2010, 2011);"}, {"question_id": 630, "answer_sql": "SELECT t.TagName FROM tags t JOIN posts p ON t.WikiPostId = p.Id JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'John Stauffer';"}, {"question_id": 631, "answer_sql": "SELECT COUNT(*) FROM posts WHERE OwnerDisplayName = 'Daniel Vassallo';"}, {"question_id": 632, "answer_sql": "SELECT COUNT(*) FROM votes WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'Harlan');"}, {"question_id": 633, "answer_sql": "SELECT posts.Id FROM posts WHERE posts.OwnerDisplayName = 'slashnick' AND posts.AnswerCount = ( SELECT MAX(AnswerCount) FROM posts WHERE posts.OwnerDisplayName = 'slashnick' );"}, {"question_id": 634, "answer_sql": "SELECT MAX(SUM(ViewCount)) as TotalPopularity FROM posts WHERE OwnerDisplayName = 'Harvey Motulsky' OR OwnerDisplayName = 'Noah Snyder';"}, {"question_id": 635, "answer_sql": "SELECT COUNT(*) FROM posts WHERE OwnerDisplayName = 'Matt Parker' AND UpVotes > 4;"}, {"question_id": 636, "answer_sql": "SELECT COUNT(*) FROM comments WHERE UserDisplayName = 'Neil McGuigan' AND Score < 60;"}, {"question_id": 637, "answer_sql": "SELECT tags.TagName FROM tags JOIN posts ON tags.WikiPostId = posts.Id JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'Mark Meckes' AND posts.CommentCount = 0;"}, {"question_id": 638, "answer_sql": "SELECT DisplayName FROM users INNER JOIN badges ON users.Id = badges.UserId WHERE badges.Name = 'Organizer';"}, {"question_id": 639, "answer_sql": "SELECT DIVIDE(COUNT(PostId), COUNT(PostId WHERE TagName = 'R language')) * 100 as percentage FROM posts;"}, {"question_id": 640, "answer_sql": "SELECT SUBTRACT(SUM(ViewCount where DisplayName = 'Mornington'), SUM(ViewCount where DisplayName = 'Amos')) FROM posts;"}, {"question_id": 641, "answer_sql": "SELECT COUNT(*) FROM badges WHERE UserId IN (SELECT Id FROM users WHERE DisplayName LIKE '%commentator%' AND CreationDate LIKE '%2014%') AND Date LIKE '%2014%';"}, {"question_id": 642, "answer_sql": "SELECT COUNT(*) FROM posts WHERE CreationDate BETWEEN '2010-07-21 00:00:00' and '2010-07-21 23:59:59';"}, {"question_id": 643, "answer_sql": "SELECT DisplayName, Age FROM users WHERE Id = (SELECT UserId FROM posts WHERE ViewCount = (SELECT MAX(ViewCount) FROM posts));"}, {"question_id": 644, "answer_sql": "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Detecting a given face in a database of facial images';"}, {"question_id": 645, "answer_sql": "SELECT COUNT(*) FROM comments WHERE UserId = 13 AND Score < 60;"}, {"question_id": 646, "answer_sql": "SELECT P.Title, GROUP_CONCAT(DISTINCT C.UserDisplayName) AS CommentUsers FROM posts P JOIN comments C ON P.Id = C.PostId WHERE C.Score > 60 GROUP BY P.Id"}, {"question_id": 647, "answer_sql": "SELECT Name FROM badges WHERE UserId IN ( SELECT Id FROM users WHERE Location = 'North Pole' ) AND Date LIKE '2011%';"}, {"question_id": 648, "answer_sql": "SELECT OwnerDisplayName, WebsiteUrl FROM posts WHERE FavoriteCount > 150;"}, {"question_id": 649, "answer_sql": "SELECT postHistory.Text, COUNT(*) as PostHistoryCount, postHistory.LastEditDate FROM postHistory WHERE postHistory.Text = 'What is the best introductory Bayesian statistics textbook?' GROUP BY postHistory.Text, postHistory.LastEditDate ORDER BY postHistory.LastEditDate DESC;"}, {"question_id": 650, "answer_sql": "SELECT LastAccessDate, Location FROM users WHERE badges.UserId = users.Id AND badges.Name = 'Outliers' ORDER BY LastAccessDate DESC, Location ASC;"}, {"question_id": 651, "answer_sql": "SELECT Title FROM posts WHERE Id = ( SELECT ParentId FROM posts WHERE Body LIKE '%How to tell if something happened in a data set which monitors a value over time%' )"}, {"question_id": 652, "answer_sql": "SELECT PostId, Name FROM badges JOIN users ON badges.UserId = users.Id WHERE users.DisplayName = 'Samuel' AND YEAR(CreationDate) = 2013;"}, {"question_id": 653, "answer_sql": "SELECT OwnerDisplayName FROM posts WHERE ViewCount = (SELECT MAX(ViewCount) FROM posts);"}, {"question_id": 654, "answer_sql": "SELECT OwnerDisplayName, Location FROM users WHERE Id = (SELECT OwnerUserId FROM posts WHERE Tags LIKE '%hypothesis-testing%');"}, {"question_id": 655, "answer_sql": "SELECT PostId, LinkTypeId FROM postLinks WHERE PostId = (SELECT Id FROM posts WHERE Title = 'What are principal component scores?') AND LinkTypeId = 1;"}, {"question_id": 656, "answer_sql": "SELECT ParentId, OwnerDisplayName FROM posts WHERE ParentId IS NOT NULL ORDER BY Score DESC LIMIT 1;"}, {"question_id": 657, "answer_sql": "SELECT u.DisplayName, u.WebsiteUrl FROM users u JOIN votes v ON u.Id = v.UserId WHERE v.VoteTypeId = 8 AND v.BountyAmount = ( SELECT MAX(BountyAmount) FROM votes WHERE VoteTypeId = 8 ) This SQL query will return the display name and website URL of the user who has the highest bounty amount for the vote type 8."}, {"question_id": 658, "answer_sql": "SELECT TOP 5 Title FROM posts ORDER BY ViewCount DESC;"}, {"question_id": 659, "answer_sql": "SELECT COUNT(*) FROM tags WHERE Count BETWEEN 5000 AND 7000;"}, {"question_id": 660, "answer_sql": "SELECT OwnerUserId FROM posts WHERE FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts);"}, {"question_id": 661, "answer_sql": "SELECT MAX(users.Age) as MostInfluentialUserAge FROM users;"}, {"question_id": 662, "answer_sql": "SELECT COUNT(*) FROM posts WHERE YEAR(CreationDate) = 2011 AND BountyAmount = 50;"}, {"question_id": 663, "answer_sql": "SELECT MIN(Age) FROM users;"}, {"question_id": 664, "answer_sql": "SELECT MAX(Count) as MostPopularTag FROM tags"}, {"question_id": 665, "answer_sql": "SELECT DIVIDE(COUNT(Id), 12) as AverageMonthlyLinks FROM posts WHERE YEAR(CreationDate) = 2010 AND AnswerCount <= 2;"}, {"question_id": 666, "answer_sql": "SELECT posts.Id FROM posts JOIN votes ON posts.Id = votes.PostId WHERE users.Id = 1465 GROUP BY posts.Id ORDER BY MAX(votes.BountyAmount) DESC LIMIT 1;"}, {"question_id": 667, "answer_sql": "SELECT Title FROM posts WHERE Id = (SELECT MIN(PostId) FROM postLinks);"}, {"question_id": 668, "answer_sql": "SELECT MAX(COUNT(Name)) as HighestBadgeCount FROM badges JOIN users ON badges.UserId = users.Id;"}, {"question_id": 669, "answer_sql": "SELECT MIN(CreationDate) FROM votes WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'chl');"}, {"question_id": 670, "answer_sql": "SELECT MIN(CreaionDate) FROM posts WHERE OwnerUserId = (SELECT Id FROM users ORDER BY LastAccessDate ASC LIMIT 1);"}, {"question_id": 671, "answer_sql": "SELECT DisplayName FROM users WHERE Id = (SELECT UserId FROM badges ORDER BY Date ASC LIMIT 1);"}, {"question_id": 672, "answer_sql": "SELECT COUNT(*) FROM users WHERE Location = 'United Kingdom' AND FavoriteCount >= 4;"}, {"question_id": 673, "answer_sql": "SELECT AVG(PostId) FROM votes WHERE UserId = (SELECT Id FROM users ORDER BY LastAccessDate ASC LIMIT 1);"}, {"question_id": 674, "answer_sql": "SELECT DisplayName FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users);"}, {"question_id": 675, "answer_sql": "SELECT COUNT(*) FROM users WHERE Reputation > 2000 AND Views > 1000;"}, {"question_id": 676, "answer_sql": "SELECT DISTINCT DisplayName FROM users WHERE Age BETWEEN 19 AND 65;"}, {"question_id": 677, "answer_sql": "SELECT COUNT(*) FROM posts WHERE OwnerDisplayName = 'Jay Stevens' AND YEAR(CreaionDate) = 2010;"}, {"question_id": 678, "answer_sql": "SELECT Id, Title FROM posts WHERE OwnerDisplayName = 'Harvey Motulsky' ORDER BY ViewCount DESC LIMIT 1;"}, {"question_id": 679, "answer_sql": "SELECT Id, Title FROM posts WHERE Score = (SELECT MAX(Score) FROM posts) AND OwnerDisplayName = (SELECT DisplayName FROM users WHERE Id = (SELECT UserId FROM posts WHERE Id = (SELECT AcceptedAnswerId FROM posts WHERE Id = (SELECT PostId FROM postHistory WHERE PostHistoryTypeId = 1))));"}, {"question_id": 680, "answer_sql": "SELECT AVG(Score) as AverageScore FROM posts WHERE OwnerDisplayName = 'Stephen Turner';"}, {"question_id": 681, "answer_sql": "SELECT DISTINCT OwnerDisplayName FROM posts WHERE YEAR(CreationDate) = 2011 AND ViewCount > 20000;"}, {"question_id": 682, "answer_sql": "SELECT posts.Id, posts.OwnerDisplayName FROM posts WHERE YEAR(posts.CreationDate) = 2010 AND posts.FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts WHERE YEAR(posts.CreationDate) = 2010);"}, {"question_id": 683, "answer_sql": "SELECT DIVIDE(COUNT(Id where CreationDate = '2011' and Reputation > 1000), COUNT(Id)) * 100 as percentage FROM posts;"}, {"question_id": 684, "answer_sql": "SELECT DIVIDE(COUNT(Id where Age BETWEEN 13 and 18), COUNT(Id)) as percentage FROM users;"}, {"question_id": 685, "answer_sql": "SELECT posts.ViewCount, users.DisplayName FROM posts INNER JOIN users ON posts.OwnerUserId = users.Id WHERE posts.Title = 'Computer Game Datasets';"}, {"question_id": 686, "answer_sql": "SELECT COUNT(*) FROM posts WHERE ViewCount > (SELECT AVG(ViewCount) FROM posts);"}, {"question_id": 687, "answer_sql": "SELECT COUNT(*) FROM comments WHERE PostId = (SELECT Id FROM posts ORDER BY Score DESC LIMIT 1);"}, {"question_id": 688, "answer_sql": "SELECT COUNT(*) FROM posts WHERE ViewCount > 35000 AND CommentCount = 0;"}, {"question_id": 689, "answer_sql": "SELECT users.DisplayName, users.Location FROM users INNER JOIN postHistory ON users.Id = postHistory.UserId WHERE postHistory.PostId = 183 ORDER BY postHistory.LastEditDate DESC LIMIT 1;"}, {"question_id": 690, "answer_sql": "SELECT Name FROM badges WHERE UserId IN (SELECT Id FROM users WHERE DisplayName = 'Emmett') ORDER BY Date DESC LIMIT 1;"}, {"question_id": 691, "answer_sql": "SELECT COUNT(*) FROM users WHERE Age BETWEEN 19 AND 65 AND UpVotes > 5000;"}, {"question_id": 692, "answer_sql": "SELECT DATEDIFF(Date, CreationDate) as Time_Taken FROM badges WHERE UserDisplayName = 'Zolomon';"}, {"question_id": 693, "answer_sql": "SELECT COUNT(*) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE LastAccessDate = (SELECT MAX(LastAccessDate) FROM users));"}, {"question_id": 694, "answer_sql": "SELECT c.Text, u.DisplayName FROM comments c JOIN users u ON c.UserId = u.Id WHERE c.PostId = (SELECT p.Id FROM posts p WHERE p.Title = 'Analysing wind data with R') ORDER BY c.CreationDate DESC LIMIT 1;"}, {"question_id": 695, "answer_sql": "SELECT COUNT(*) FROM badges WHERE Name = 'Citizen Patrol';"}, {"question_id": 696, "answer_sql": "SELECT COUNT(*) FROM posts WHERE Tags LIKE '%careers%';"}, {"question_id": 697, "answer_sql": "SELECT reputation, view_count FROM users WHERE display_name = 'Jarrod Dixon';"}, {"question_id": 698, "answer_sql": "SELECT COUNT(*) as TotalComments FROM comments WHERE PostId IN (SELECT Id FROM posts WHERE Title = 'Clustering 1D data');"}, {"question_id": 699, "answer_sql": "SELECT CreationDate FROM users WHERE DisplayName = 'IrishStat';"}, {"question_id": 700, "answer_sql": "SELECT COUNT(*) FROM posts WHERE BountyAmount >= 30;"}, {"question_id": 701, "answer_sql": "SELECT (COUNT(posts.Id) * 100.0) / (SELECT COUNT(stats_users.Id) FROM stats_users WHERE stats_users.Reputation = (SELECT MAX(stats_users.Reputation) FROM stats_users)) as percentage FROM posts WHERE posts.OwnerUserId = (SELECT users.Id FROM users WHERE users.Reputation = (SELECT MAX(stats_users.Reputation) FROM stats_users)) AND posts.Score > 50"}, {"question_id": 702, "answer_sql": "SELECT COUNT(*) FROM posts WHERE Score < 20;"}, {"question_id": 703, "answer_sql": "SELECT COUNT(*) FROM tags WHERE Id < 15 AND Count <= 20;"}, {"question_id": 704, "answer_sql": "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'sample';"}, {"question_id": 705, "answer_sql": "SELECT Users.Reputation, Users.UpVotes FROM Users WHERE Users.Id = ( SELECT comments.UserId FROM comments WHERE comments.Text = 'fine, you win :)' );"}, {"question_id": 706, "answer_sql": "SELECT comments.Text FROM comments JOIN posts ON comments.PostId = posts.Id WHERE posts.Title = 'How can I adapt ANOVA for binary data?';"}, {"question_id": 707, "answer_sql": "SELECT TOP 1 c.Text, c.Score FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.ViewCount BETWEEN 100 AND 150 ORDER BY c.Score DESC;"}, {"question_id": 708, "answer_sql": "SELECT comments.CreationDate, users.Age FROM comments JOIN users ON comments.UserId = users.Id WHERE comments.Text LIKE '%http://%' ```"}, {"question_id": 709, "answer_sql": "SELECT COUNT(*) FROM comments WHERE Score = 0 AND ViewCount < 5;"}, {"question_id": 710, "answer_sql": "SELECT COUNT(*) FROM comments WHERE PostId IN (SELECT Id FROM posts WHERE CommentCount = 1);"}, {"question_id": 711, "answer_sql": "SELECT COUNT(*) FROM comments WHERE Score = 0 AND UserId IN (SELECT Id FROM users WHERE Age = 40);"}, {"question_id": 712, "answer_sql": "SELECT posts.Id AS PostId, comments.Text AS Comment FROM posts INNER JOIN postHistory ON posts.Id = postHistory.PostId INNER JOIN comments ON postHistory.Id = comments.PostId WHERE posts.Title = 'Group differences on a five point Likert item';"}, {"question_id": 713, "answer_sql": "SELECT upVotes FROM users WHERE DisplayName = 'R';"}, {"question_id": 714, "answer_sql": "SELECT c.* FROM comments c JOIN users u ON c.UserId = u.Id WHERE u.DisplayName = 'Harvey Motulsky';"}, {"question_id": 715, "answer_sql": "SELECT UserDisplayName FROM comments WHERE Score BETWEEN 1 AND 5 AND DownVotes = 0;"}, {"question_id": 716, "answer_sql": "SELECT (DIVIDE(COUNT(UserId where UpVotes = 0 and Score BETWEEN 5 and 10), (COUNT(UserId where Score BETWEEN 5 and 10)))) * 100 as percentage FROM comments;"}, {"question_id": 717, "answer_sql": "SELECT power_name FROM hero_power JOIN superhero ON hero_power.hero_id = superhero.id WHERE superhero.superhero_name = '3-D Man';"}, {"question_id": 718, "answer_sql": "SELECT COUNT(*) FROM hero_power WHERE power_id = (SELECT id FROM superpower WHERE power_name = 'Super Strength');"}, {"question_id": 719, "answer_sql": "SELECT COUNT(*) FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Super Strength' AND superhero.height_cm > 200;"}, {"question_id": 720, "answer_sql": "SELECT s.superhero_name, s.full_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id GROUP BY s.id, s.superhero_name, s.full_name HAVING COUNT(sp.power_name) > 15;"}, {"question_id": 721, "answer_sql": "SELECT COUNT(*) FROM superhero WHERE eye_colour_id = (SELECT id FROM colour WHERE colour = 'Blue');"}, {"question_id": 722, "answer_sql": "SELECT colour.colour FROM superhero JOIN skin_colour ON superhero.skin_colour_id = skin_colour.id JOIN colour ON skin_colour.id = colour.id WHERE superhero.superhero_name = 'Apocalypse';"}, {"question_id": 723, "answer_sql": "SELECT COUNT(*) FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE eye_colour_id = (SELECT id FROM colour WHERE colour = 'Blue') AND power_name = 'Agility';"}, {"question_id": 724, "answer_sql": "SELECT s.superhero_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'Eye Color' AND s.eye_colour_id = c.id AND a.attribute_name = 'Hair Color' AND s.hair_colour_id = c.id AND s.superhero_name IN ( SELECT sp.superhero_name FROM hero_power hp JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Agility' );"}, {"question_id": 725, "answer_sql": "SELECT COUNT(*) FROM superhero WHERE publisher_name = 'Marvel Comics';"}, {"question_id": 726, "answer_sql": "SELECT full_name FROM superhero WHERE publisher_name = 'Marvel Comics' AND height_cm = (SELECT MAX(height_cm) FROM superhero WHERE publisher_name = 'Marvel Comics');"}, {"question_id": 727, "answer_sql": "SELECT publisher_name FROM superhero WHERE superhero_name = 'Sauron';"}, {"question_id": 728, "answer_sql": "SELECT COUNT(*) FROM superhero WHERE eye_colour_id = (SELECT id FROM colour WHERE colour = 'Blue') AND publisher_name = 'Marvel Comics';"}, {"question_id": 729, "answer_sql": "SELECT AVG(height_cm) FROM superhero WHERE publisher_name = 'Marvel Comics';"}, {"question_id": 730, "answer_sql": "SELECT MULTIPLY(DIVIDE(SUM(hero_power.power_id = 'Super Strength'), COUNT(superhero.id)), 100) as percentage_super_strength FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id WHERE publisher.publisher_name = 'Marvel Comics';"}, {"question_id": 731, "answer_sql": "SELECT COUNT(*) FROM superhero WHERE publisher_name = 'DC Comics';"}, {"question_id": 732, "answer_sql": "SELECT publisher_name FROM publisher WHERE id = (SELECT publisher_id FROM superhero WHERE attribute_value = (SELECT MIN(attribute_value) FROM hero_attribute WHERE attribute_name = 'Speed'));"}, {"question_id": 733, "answer_sql": "SELECT COUNT(*) FROM superhero WHERE eye_colour_id = (SELECT id FROM colour WHERE colour = 'Gold') AND publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics');"}, {"question_id": 734, "answer_sql": "SELECT publisher_name FROM superhero WHERE superhero_name = 'Blue Beetle II';"}, {"question_id": 735, "answer_sql": "SELECT COUNT(*) FROM superhero WHERE hair_colour_id = (SELECT id FROM colour WHERE colour = 'Blond')"}, {"question_id": 736, "answer_sql": "SELECT s.superhero_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'Intelligence' ORDER BY a.attribute_value DESC LIMIT 1;"}, {"question_id": 737, "answer_sql": "SELECT race.race FROM superhero WHERE superhero.superhero_name = 'Copycat';"}, {"question_id": 738, "answer_sql": "SELECT COUNT(*) FROM superhero WHERE attribute_name = 'Durability' AND attribute_value < 50;"}, {"question_id": 739, "answer_sql": "SELECT superhero_name FROM superhero WHERE hero_power.power_id = (SELECT id FROM superpower WHERE power_name = 'Death Touch')"}, {"question_id": 740, "answer_sql": "SELECT COUNT(*) FROM superhero WHERE gender_id = (SELECT id FROM gender WHERE gender = 'Female') AND hero_attribute.attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Strength') AND hero_attribute.attribute_value = 100;"}, {"question_id": 741, "answer_sql": "SELECT MAX(COUNT(superhero_name)) as max_powers FROM superhero;"}, {"question_id": 742, "answer_sql": "SELECT COUNT(*) FROM superhero WHERE race = 'Vampire';"}, {"question_id": 743, "answer_sql": "SELECT MULTIPLY(DIVIDE(SUM(superhero.alignment_id = 'Bad'), COUNT(superhero.id)), 100) as percentage_bad_alignment, COUNT(superhero.id) as total_bad_alignment, SUM(superhero.publisher_id = 'Marvel Comics') as marvel_count FROM superhero WHERE superhero.publisher_name = 'Marvel Comics';"}, {"question_id": 744, "answer_sql": "SELECT SUBTRACT(SUM(publisher_name = 'Marvel Comics'), SUM(publisher_name = 'DC Comics')) as difference FROM superhero;"}, {"question_id": 745, "answer_sql": "SELECT publisher_id FROM publisher WHERE publisher_name = 'Star Trek';"}, {"question_id": 746, "answer_sql": "SELECT AVG(attribute_value) FROM hero_attribute;"}, {"question_id": 747, "answer_sql": "SELECT COUNT(*) FROM superhero WHERE full_name IS NULL;"}, {"question_id": 748, "answer_sql": "SELECT c.colour FROM colour c JOIN hero_attribute ha ON c.id = ha.attribute_id JOIN hero_power hp ON ha.hero_id = hp.hero_id JOIN superhero su ON hp.hero_id = su.id WHERE su.id = 75 AND ha.attribute_name = 'eye_colour';"}, {"question_id": 749, "answer_sql": "SELECT power_name FROM hero_power JOIN superhero ON hero_power.hero_id = superhero.id WHERE superhero.superhero_name = 'Deathlok';"}, {"question_id": 750, "answer_sql": "SELECT AVG(weight_kg) FROM superhero WHERE gender_id = 2;"}, {"question_id": 751, "answer_sql": "SELECT superpower.power_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.gender_id = (SELECT id FROM gender WHERE gender = 'Male') GROUP BY superpower.power_name LIMIT 5;"}, {"question_id": 752, "answer_sql": "SELECT superhero_name FROM superhero WHERE race = 'Alien';"}, {"question_id": 753, "answer_sql": "SELECT s.superhero_name FROM superhero s WHERE s.height_cm BETWEEN 170 AND 190 AND s.eye_colour_id = 1 This SQL query will return the names of the superheroes who are between 170 and 190 cm tall and have no eye color."}, {"question_id": 754, "answer_sql": "SELECT superpower.power_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.id = 56;"}, {"question_id": 755, "answer_sql": "SELECT super.superhero_name FROM superhero AS super JOIN race AS race ON super.race_id = race.id WHERE race.race = 'Demi-God' LIMIT 5;"}, {"question_id": 756, "answer_sql": "SELECT COUNT(*) FROM superhero WHERE alignment_id = 'Bad';"}, {"question_id": 757, "answer_sql": "SELECT race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE weight_kg = 169;"}, {"question_id": 758, "answer_sql": "SELECT c.colour FROM colour c JOIN hero_attribute ha ON c.id = ha.attribute_id JOIN hero_power hp ON ha.hero_id = hp.hero_id JOIN superhero su ON hp.hero_id = su.id WHERE su.race = 'human' AND su.height_cm = 185;"}, {"question_id": 759, "answer_sql": "SELECT c.colour FROM colour c JOIN hero_attribute ha ON c.id = ha.attribute_id JOIN attribute a ON a.id = ha.attribute_id JOIN superhero s ON s.id = a.hero_id WHERE a.attribute_name = 'Eye Colour' AND s.weight_kg = (SELECT MAX(weight_kg) FROM superhero);"}, {"question_id": 760, "answer_sql": "SELECT (SUM(publisher_id = 13) * 100) / COUNT(*) AS percentage FROM superhero WHERE height_cm BETWEEN 150 AND 180;"}, {"question_id": 761, "answer_sql": "SELECT full_name FROM superhero WHERE gender_id = 1 AND weight_kg > (SELECT AVG(weight_kg) FROM superhero) ```"}, {"question_id": 762, "answer_sql": "SELECT superpower.power_name FROM hero_power JOIN superpower ON hero_power.power_id = superpower.id GROUP BY superpower.power_name ORDER BY COUNT(superpower.power_name) DESC LIMIT 1;"}, {"question_id": 763, "answer_sql": "SELECT hero_attribute.attribute_value FROM hero_attribute JOIN superhero ON hero_attribute.hero_id = superhero.id WHERE superhero.superhero_name = 'Abomination';"}, {"question_id": 764, "answer_sql": "SELECT power_name FROM hero_power WHERE hero_id = 1;"}, {"question_id": 765, "answer_sql": "SELECT COUNT(*) FROM hero_power INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'stealth';"}, {"question_id": 766, "answer_sql": "SELECT s.superhero_name, MAX(ha.attribute_value) as strength FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'strength' GROUP BY s.superhero_name ORDER BY strength DESC LIMIT 1;"}, {"question_id": 767, "answer_sql": "SELECT AVG(superhero.id) FROM superhero WHERE skin_colour_id = 1;"}, {"question_id": 768, "answer_sql": "SELECT COUNT(*) FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Dark Horse Comics');"}, {"question_id": 769, "answer_sql": "SELECT s.superhero_name FROM superhero s JOIN publisher p ON s.publisher_id = p.id WHERE p.publisher_name = 'Dark Horse Comics' ORDER BY s.superhero_name DESC LIMIT 1;"}, {"question_id": 770, "answer_sql": "SELECT c.colour FROM colour c JOIN hero_attribute ha ON c.id = ha.attribute_id JOIN hero_power hp ON ha.hero_id = hp.hero_id JOIN superhero s ON hp.power_id = s.id WHERE s.superhero_name = 'Abraham Sapien' AND s.alignment_id = 1;"}, {"question_id": 771, "answer_sql": "SELECT superhero.superhero_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Flight';"}, {"question_id": 772, "answer_sql": "SELECT gender.gender, colour.colour AS eyes, colour.colour AS hair, colour.colour AS skin FROM superhero JOIN gender ON superhero.gender_id = gender.id JOIN colour ON superhero.eye_colour_id = colour.id JOIN colour ON superhero.hair_colour_id = colour.id JOIN colour ON superhero.skin_colour_id = colour.id WHERE gender.gender = 'Female' AND superhero.publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Dark Horse Comics') ```"}, {"question_id": 773, "answer_sql": "SELECT publisher_name FROM superhero WHERE eye_colour_id = skin_colour_id = hair_colour_id AND publisher_id = ( SELECT publisher_id FROM hero_attribute WHERE attribute_id = ( SELECT id FROM attribute WHERE attribute_name = 'publisher' ) AND attribute_value = ( SELECT publisher_name FROM publisher WHERE publisher_name = 'DC' ) );"}, {"question_id": 774, "answer_sql": "SELECT r.race FROM race r JOIN superhero s ON s.race_id = r.id WHERE s.superhero_name = 'A-Bomb';"}, {"question_id": 775, "answer_sql": "SELECT (SUM(CASE WHEN colour = 'Blue' THEN 1 ELSE 0 END) * 100.0) / (SUM(CASE WHEN gender = 'Female' THEN 1 ELSE 0 END) * 100.0) AS percentage FROM superhero WHERE gender = 'Female';"}, {"question_id": 776, "answer_sql": "SELECT superhero.superhero_name, race.race FROM superhero JOIN race ON superhero.race_id = race.id WHERE superhero.superhero_name = 'Charles Chandler';"}, {"question_id": 777, "answer_sql": "SELECT gender.gender FROM superhero JOIN gender ON superhero.gender_id = gender.id WHERE superhero.superhero_name = 'Agent 13';"}, {"question_id": 778, "answer_sql": "SELECT s.superhero_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Adaptation';"}, {"question_id": 779, "answer_sql": "SELECT COUNT(*) FROM hero_power WHERE hero_id IN (SELECT id FROM superhero WHERE superhero_name = 'Amazo');"}, {"question_id": 780, "answer_sql": "SELECT power_name FROM hero_power WHERE hero_id IN (SELECT id FROM superhero WHERE full_name = 'Hunter Zolomon');"}, {"question_id": 781, "answer_sql": "SELECT height_cm FROM superhero WHERE eye_colour_id = (SELECT id FROM colour WHERE colour = 'Amber');"}, {"question_id": 782, "answer_sql": "SELECT superhero_name FROM superhero WHERE eye_colour_id = (SELECT id FROM colour WHERE colour = 'Black') AND hair_colour_id = (SELECT id FROM colour WHERE colour = 'Black');"}, {"question_id": 783, "answer_sql": "SELECT c.colour FROM colour c JOIN skin_colour_id sc ON c.id = sc.skin_colour_id JOIN superhero s ON sc.id = s.skin_colour_id WHERE c.colour = 'Gold';"}, {"question_id": 784, "answer_sql": "SELECT full_name FROM superhero WHERE race = 'Vampire';"}, {"question_id": 785, "answer_sql": "SELECT superhero_name FROM superhero WHERE alignment_id = (SELECT id FROM alignment WHERE alignment = 'Neutral') This SQL query will return the names of all the neutral alignment superheroes."}, {"question_id": 786, "answer_sql": "SELECT COUNT(*) FROM superhero WHERE attribute_value = (SELECT MAX(attribute_value) FROM hero_attribute WHERE attribute_name = 'Strength');"}, {"question_id": 787, "answer_sql": "SELECT race.race, alignment.alignment FROM superhero JOIN race ON superhero.race_id = race.id JOIN alignment ON superhero.alignment_id = alignment.id WHERE superhero.superhero_name = 'Cameron Hicks';"}, {"question_id": 788, "answer_sql": "SELECT (SUM(CASE WHEN gender = 'Female' THEN 1 ELSE 0 END) * 100) / (SELECT COUNT(*) FROM superhero WHERE publisher_name = 'Marvel Comics') AS percentage FROM superhero WHERE publisher_name = 'Marvel Comics';"}, {"question_id": 789, "answer_sql": "SELECT AVG(weight_kg) FROM superhero WHERE race = 'Alien';"}, {"question_id": 790, "answer_sql": "SELECT SUBTRACT(SUM(weight_kg WHERE full_name = 'Emil Blonsky'), SUM(weight_kg WHERE full_name = 'Charles Chandler')) as difference FROM superhero;"}, {"question_id": 791, "answer_sql": "SELECT superhero_name, AVG(height_cm) as average_height FROM superhero GROUP BY superhero_name;"}, {"question_id": 792, "answer_sql": "SELECT superpower.power_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = 'Abomination';"}, {"question_id": 793, "answer_sql": "SELECT COUNT(*) FROM superhero WHERE race_id = 21 AND gender_id = 1;"}, {"question_id": 794, "answer_sql": "SELECT s.superhero_name FROM superhero s WHERE s.superhero_name = ( SELECT MAX(h.attribute_value) FROM hero_attribute ha JOIN attribute a ON ha.attribute_id = a.id JOIN hero h ON ha.hero_id = h.id WHERE a.attribute_name = 'Speed' );"}, {"question_id": 795, "answer_sql": "SELECT COUNT(*) FROM superhero WHERE alignment_id = 3;"}, {"question_id": 796, "answer_sql": "SELECT attribute.attribute_name, hero_attribute.attribute_value FROM attribute JOIN hero_attribute ON attribute.id = hero_attribute.attribute_id WHERE attribute.attribute_name = '3-D Man' AND hero_attribute.hero_id = (SELECT id FROM superhero WHERE superhero_name = '3-D Man');"}, {"question_id": 797, "answer_sql": "SELECT s.superhero_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'eye_colour' AND s.eye_colour_id = 7 AND a.attribute_name = 'hair_colour' AND s.hair_colour_id = 9;"}, {"question_id": 798, "answer_sql": "SELECT publisher_name FROM superhero WHERE superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy');"}, {"question_id": 799, "answer_sql": "SELECT COUNT(*) FROM superhero WHERE publisher_id IS NULL;"}, {"question_id": 800, "answer_sql": "SELECT (SUM(CASE WHEN eye_colour_id = 7 THEN 1 ELSE 0 END)) * 100.0 / COUNT(*) AS percentage FROM superhero WHERE eye_colour_id = 7;"}, {"question_id": 801, "answer_sql": "SELECT SUM(gender_id = 1) as male_count, SUM(gender_id = 2) as female_count, (SUM(gender_id = 1) / SUM(gender_id = 2)) as ratio FROM superhero;"}, {"question_id": 802, "answer_sql": "SELECT MAX(height_cm), superhero_name FROM superhero GROUP BY superhero_name;"}, {"question_id": 803, "answer_sql": "SELECT hero_power.power_id FROM hero_power JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'cryokinesis';"}, {"question_id": 804, "answer_sql": "SELECT superhero.superhero_name FROM superhero WHERE superhero.id = 294;"}, {"question_id": 805, "answer_sql": "SELECT full_name FROM superhero WHERE weight_kg = 0 OR weight_kg = NULL;"}, {"question_id": 806, "answer_sql": "SELECT c.colour FROM colour c JOIN hero_attribute ha ON c.id = ha.attribute_id JOIN hero_power hp ON ha.hero_id = hp.hero_id JOIN superhero su ON hp.hero_id = su.id WHERE su.full_name = 'Karen Beecher-Duncan';"}, {"question_id": 807, "answer_sql": "SELECT hero_power.power_id, superpower.power_name FROM hero_power JOIN superhero ON hero_power.hero_id = superhero.id JOIN hero_attribute ON hero_power.hero_id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'full_name' AND hero_power.hero_id IN ( SELECT hero_id FROM superhero WHERE full_name = 'Helen Parr' );"}, {"question_id": 808, "answer_sql": "SELECT race.race FROM superhero JOIN race ON superhero.race_id = race.id WHERE superhero.weight_kg = 108 AND superhero.height_cm = 188;"}, {"question_id": 809, "answer_sql": "SELECT publisher_name FROM superhero WHERE id = 38;"}, {"question_id": 810, "answer_sql": "SELECT race.race FROM superhero JOIN hero_attribute ON hero_attribute.hero_id = superhero.id JOIN attribute ON attribute.id = hero_attribute.attribute_id WHERE attribute.attribute_name = ( SELECT attribute_name FROM hero_attribute JOIN ( SELECT MAX(attribute_value) as max_attr_value FROM hero_attribute ) as max_attr_table ON hero_attribute.attribute_value = max_attr_table.max_attr_value AND hero_attribute.attribute_id = ( SELECT attribute.id FROM attribute WHERE attribute.attribute_name = 'strength' ) ) AND hero_attribute.attribute_id = ( SELECT attribute.id FROM attribute WHERE attribute.attribute_name = 'strength' );"}, {"question_id": 811, "answer_sql": "SELECT alignment.alignment, hero_power.power_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = 'Atom IV' AND alignment.alignment IS NOT NULL;"}, {"question_id": 812, "answer_sql": "SELECT super.superhero_name, super.full_name FROM superhero super JOIN colour eye ON super.eye_colour_id = eye.id WHERE eye.colour = 'Blue';"}, {"question_id": 813, "answer_sql": "SELECT AVG(attribute_value) FROM hero_attribute JOIN superhero ON hero_attribute.hero_id = superhero.id WHERE alignment_id = 3;"}, {"question_id": 814, "answer_sql": "SELECT c.colour FROM colour c JOIN hero_attribute ha ON c.id = ha.attribute_value JOIN attribute a ON a.id = ha.attribute_id WHERE a.attribute_name = 'skin_colour' AND ha.attribute_value = 100;"}, {"question_id": 815, "answer_sql": "SELECT COUNT(*) FROM superhero WHERE alignment_id = 1 AND gender_id = 2;"}, {"question_id": 816, "answer_sql": "SELECT s.superhero_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'names' AND s.superhero_name IS NOT NULL AND ha.attribute_value BETWEEN 75 AND 80;"}, {"question_id": 817, "answer_sql": "SELECT race.race FROM race INNER JOIN hero_attribute ON race.id = hero_attribute.attribute_id INNER JOIN hero_power ON hero_attribute.hero_id = hero_power.hero_id INNER JOIN superhero ON hero_power.hero_id = superhero.id WHERE gender.gender = 'male' AND hero_attribute.attribute_name = 'race' AND hero_attribute.attribute_value = (SELECT id FROM race WHERE race.race = 'blue-haired');"}, {"question_id": 818, "answer_sql": "SELECT MULTIPLY(DIVIDE(SUM(gender_id = 2), COUNT(gender_id)), 100.0) as percentage_female_superheroes FROM superhero WHERE alignment_id = 2;"}, {"question_id": 819, "answer_sql": "SELECT SUBTRACT(SUM(superhero_table.eye_colour_id = 7), SUM(superhero_table.eye_colour_id = 1)) AS difference FROM superhero_table WHERE superhero_table.weight_kg = 0 OR superhero_table.weight_kg IS NULL;"}, {"question_id": 820, "answer_sql": "SELECT hero_attribute.attribute_value FROM hero_attribute JOIN superhero ON hero_attribute.hero_id = superhero.id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Strength' AND superhero.superhero_name = 'Hulk';"}, {"question_id": 821, "answer_sql": "SELECT power_name FROM hero_power WHERE hero_id = (SELECT id FROM superhero WHERE superhero_name = 'Ajax');"}, {"question_id": 822, "answer_sql": "SELECT COUNT(*) FROM superhero WHERE skin_colour_id = (SELECT id FROM colour WHERE colour = 'Green') AND alignment_id = (SELECT id FROM alignment WHERE alignment = 'Bad');"}, {"question_id": 823, "answer_sql": "SELECT COUNT(*) FROM superhero WHERE gender_id = 2 AND publisher_id = 1;"}, {"question_id": 824, "answer_sql": "SELECT s.superhero_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Wind Control' ORDER BY s.superhero_name;"}, {"question_id": 825, "answer_sql": "SELECT gender.gender FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Phoenix Force';"}, {"question_id": 826, "answer_sql": "SELECT MAX(weight_kg) as heaviest_dc_comics_superhero FROM superhero WHERE publisher_name = 'DC Comics';"}, {"question_id": 827, "answer_sql": "SELECT AVG(height_cm) FROM superhero WHERE race <> 'Human' AND publisher_name = 'Dark Horse Comics';"}, {"question_id": 828, "answer_sql": "SELECT COUNT(*) FROM superhero WHERE hero_attribute.attribute_value = 100 AND hero_attribute.attribute_name = 'Speed';"}, {"question_id": 829, "answer_sql": "SELECT publisher_name, SUBTRACT(SUM(publisher_name = 'DC Comics'), SUM(publisher_name = 'Marvel Comics')) as difference FROM publisher"}, {"question_id": 830, "answer_sql": "SELECT attribute.attribute_name FROM attribute JOIN hero_attribute ON attribute.id = hero_attribute.attribute_id JOIN superhero ON hero_attribute.hero_id = superhero.id WHERE superhero.superhero_name = 'Black Panther' ORDER BY hero_attribute.attribute_value ASC LIMIT 1;"}, {"question_id": 831, "answer_sql": "SELECT c.colour FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id JOIN colour c ON a.attribute_value = c.id WHERE s.superhero_name = 'Abomination' AND a.attribute_name = 'eye colour';"}, {"question_id": 832, "answer_sql": "SELECT MAX(height_cm) FROM superhero;"}, {"question_id": 833, "answer_sql": "SELECT super.superhero_name FROM superhero AS super WHERE super.full_name = 'Charles Chandler';"}, {"question_id": 834, "answer_sql": "SELECT MULTIPLY(DIVIDE(SUM(gender = 'Female' WHERE publisher_name = 'George Lucas'), COUNT(publisher_name = 'George Lucas')), 100.0) as percentage FROM superhero"}, {"question_id": 835, "answer_sql": "SELECT MULTIPLY(DIVIDE(SUM(alignment = 'Good' WHERE publisher_name = 'Marvel Comics'), COUNT(publisher_name = 'Marvel Comics')), 100.0) as percentage_good_superheroes FROM superhero WHERE publisher_name = 'Marvel Comics';"}, {"question_id": 836, "answer_sql": "SELECT COUNT(*) FROM superhero WHERE full_name LIKE 'John%';"}, {"question_id": 837, "answer_sql": "SELECT hero_id FROM hero_attribute WHERE attribute_id IN (SELECT id FROM attribute ORDER BY attribute_value LIMIT 1);"}, {"question_id": 838, "answer_sql": "SELECT full_name FROM superhero WHERE superhero_name = 'Alien';"}, {"question_id": 839, "answer_sql": "SELECT full_name FROM superhero WHERE weight_kg < 100 AND eye_colour_id = (SELECT id FROM colour WHERE colour = 'brown')"}, {"question_id": 840, "answer_sql": "SELECT hero_attribute.attribute_value FROM hero_attribute JOIN superhero ON hero_attribute.hero_id = superhero.id WHERE superhero.superhero_name = 'Aquababy';"}, {"question_id": 841, "answer_sql": "SELECT superhero.race, superhero.weight_kg FROM superhero WHERE superhero.id = 40;"}, {"question_id": 842, "answer_sql": "SELECT AVG(height_cm) FROM superhero WHERE alignment_id IS NULL;"}, {"question_id": 843, "answer_sql": "SELECT superhero.id FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Intelligence';"}, {"question_id": 844, "answer_sql": "SELECT colour.colour FROM colour JOIN hero_attribute ON colour.id = hero_attribute.attribute_id JOIN hero_power ON hero_attribute.hero_id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.superhero_name = 'Blackwulf';"}, {"question_id": 845, "answer_sql": "SELECT power_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE height_cm > MULTIPLY(AVG(height_cm), 0.8);"}, {"question_id": 846, "answer_sql": "SELECT DISTINCT drivers.driverRef FROM drivers JOIN qualifying ON drivers.driverId = qualifying.driverId WHERE qualifying.raceId = 18 AND qualifying.q1 != '' ORDER BY drivers.driverRef;"}, {"question_id": 847, "answer_sql": "SELECT surname FROM drivers WHERE driverId = ( SELECT driverId FROM lapTimes WHERE time = ( SELECT MIN(time) FROM qualifying WHERE raceId = 19 AND q2 ) );"}, {"question_id": 848, "answer_sql": "SELECT races.year FROM races WHERE races.circuitRef = 'Shanghai' AND races.name = 'Grand Prix';"}, {"question_id": 849, "answer_sql": "SELECT url FROM circuits WHERE name = 'Circuit de Barcelona-Catalunya';"}, {"question_id": 850, "answer_sql": "SELECT name FROM races WHERE country = 'Germany';"}, {"question_id": 851, "answer_sql": "SELECT c.name, cr.position, cr.positionText FROM circuits c JOIN constructorResults cr ON c.circuitId = cr.raceId JOIN constructors con ON cr.constructorId = con.constructorId WHERE con.constructorRef = 'renault';"}, {"question_id": 852, "answer_sql": "SELECT COUNT(*) FROM races WHERE year = 2010 AND circuitId IN (SELECT circuitId FROM circuits WHERE country NOT IN ('Asia', 'Europe'));"}, {"question_id": 853, "answer_sql": "SELECT circuits.name FROM circuits WHERE circuits.country = 'Spain';"}, {"question_id": 854, "answer_sql": "The location coordinates of the circuits for the Australian grand prix are ((-33.8646, 151.2099))."}, {"question_id": 855, "answer_sql": "The information about the races held on Sepang International Circuit can be found in the `circuits` table. The URL for the race can be found in the `url` column of the `circuits` table."}, {"question_id": 856, "answer_sql": "SELECT races.name, races.date FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.name = 'Sepang International';"}, {"question_id": 857, "answer_sql": "SELECT lat, lng FROM circuits WHERE circuitRef = 'Abu Dhabi Grand Prix';"}, {"question_id": 858, "answer_sql": "SELECT constructors.name FROM constructors JOIN constructorStandings ON constructors.constructorId = constructorStandings.constructorId JOIN races ON races.raceId = constructorStandings.raceId WHERE races.round = 24 AND constructorStandings.points = 1;"}, {"question_id": 859, "answer_sql": "SELECT q1.qualifyId, q1.position, q1.time, q1.milliseconds FROM qualifying q1 JOIN drivers d ON q1.driverId = d.driverId WHERE q1.raceId = 354 AND d.surname = 'Senna';"}, {"question_id": 860, "answer_sql": "SELECT drivers.nationality FROM drivers JOIN qualifying ON drivers.driverId = qualifying.driverId WHERE qualifying.qualifyId = 355 AND qualifying.q2 = '0:01:40';"}, {"question_id": 861, "answer_sql": "SELECT drivers.number FROM drivers JOIN qualifying ON drivers.driverId = qualifying.driverId WHERE qualifying.raceId = 903 AND qualifying.q3 = '0:01:54';"}, {"question_id": 862, "answer_sql": "SELECT COUNT(*) FROM drivers WHERE driverId NOT IN ( SELECT driverId FROM results WHERE raceId IN ( SELECT raceId FROM races WHERE year = 2007 AND round = 1 AND circuitId = 1 ) );"}, {"question_id": 863, "answer_sql": "SELECT seasons.year FROM races JOIN seasons ON races.year = seasons.year WHERE races.raceId = 901;"}, {"question_id": 864, "answer_sql": "SELECT COUNT(*) FROM results WHERE raceId = (SELECT raceId FROM races WHERE year = 2015 AND round = 1);"}, {"question_id": 865, "answer_sql": "SELECT drivers.forename, drivers.surname, drivers.dob FROM drivers INNER JOIN results ON drivers.driverId = results.driverId WHERE results.raceId = 592 AND results.statusId = (SELECT statusId FROM status WHERE status.status = 'Finished') ORDER BY drivers.dob ASC;"}, {"question_id": 866, "answer_sql": "SELECT drivers.url FROM drivers JOIN lapTimes ON drivers.driverId = lapTimes.driverId JOIN races ON lapTimes.raceId = races.raceId WHERE laps = 1 AND time = '00:01:27';"}, {"question_id": 867, "answer_sql": "SELECT drivers.forename, drivers.surname FROM drivers JOIN lapTimes ON drivers.driverId = lapTimes.driverId WHERE lapTimes.milliseconds = ( SELECT MAX(milliseconds) FROM lapTimes WHERE raceId = 933 ) AND races.raceId = 933;"}, {"question_id": 868, "answer_sql": "SELECT circuits.circuitRef, circuits.name, circuits.location, circuits.lat, circuits.lng FROM circuits WHERE circuits.circuitRef = 'circuit_of_the_americas';"}, {"question_id": 869, "answer_sql": "SELECT constructors.name, constructors.url FROM constructors JOIN constructorStandings ON constructors.constructorId = constructorStandings.constructorId WHERE constructorStandings.raceId = (SELECT raceId FROM races WHERE round = 9) ORDER BY constructorStandings.points DESC LIMIT 1;"}, {"question_id": 870, "answer_sql": "SELECT r.name, q.q1, q.q2, q.q3 FROM qualifying q JOIN races r ON q.raceId = r.raceId WHERE q.driverId = (SELECT driverId FROM drivers WHERE driverRef = 'Lucas di Grassi') AND q.qualifyId = (SELECT MAX(qualifyId) FROM qualifying WHERE driverId = (SELECT driverId FROM drivers WHERE driverRef = 'Lucas di Grassi'));"}, {"question_id": 871, "answer_sql": "SELECT drivers.name FROM drivers JOIN qualifying ON drivers.driverId = qualifying.driverId WHERE qualifying.qualifyId = 347 AND qualifying.q2 = '0:01:15';"}, {"question_id": 872, "answer_sql": "SELECT drivers.code FROM qualifying JOIN drivers ON qualifying.driverId = drivers.driverId WHERE qualifying.qualifyId = 45 AND qualifying.q3 = '0:01:33';"}, {"question_id": 873, "answer_sql": "SELECT time FROM results WHERE driverId = (SELECT driverId FROM drivers WHERE surname = 'McLaren') AND raceId = (SELECT raceId FROM races WHERE name = 'No.743');"}, {"question_id": 874, "answer_sql": "SELECT drivers.surname FROM drivers JOIN results ON drivers.driverId = results.driverId WHERE results.raceId IN ( SELECT races.raceId FROM races WHERE races.name = 'San Marino Grand Prix' AND races.year = 2006 ) AND results.position = 2;"}, {"question_id": 875, "answer_sql": "SELECT seasons.year FROM races JOIN seasons ON races.year = seasons.year WHERE races.raceId = 901;"}, {"question_id": 876, "answer_sql": "SELECT COUNT(*) FROM races WHERE year = 2015 AND round = 1;"}, {"question_id": 877, "answer_sql": "SELECT drivers.forename, drivers.surname, drivers.dob FROM drivers JOIN results ON drivers.driverId = results.driverId WHERE results.raceId = 872 ORDER BY drivers.dob ASC LIMIT 1;"}, {"question_id": 878, "answer_sql": "SELECT drivers.forename, drivers.surname FROM drivers JOIN lapTimes ON drivers.driverId = lapTimes.driverId WHERE lapTimes.time = (SELECT MIN(time) FROM lapTimes WHERE raceId = 348) AND lapTimes.raceId = 348;"}, {"question_id": 879, "answer_sql": "SELECT drivers.nationality FROM drivers JOIN lapTimes ON drivers.driverId = lapTimes.driverId WHERE lapTimes.raceId = 348 AND lapTimes.milliseconds = ( SELECT MIN(milliseconds) FROM lapTimes WHERE raceId = 348 );"}, {"question_id": 880, "answer_sql": "SELECT (SUBTRACT(fastestLapSpeed(raceId = 853), fastestLapSpeed(raceId = 854)) / fastestLapSpeed(raceId = 853)) * 100 as percentage FROM results WHERE statusId = 1 AND raceId = 853 AND driverId = (SELECT driverId FROM drivers WHERE driverRef = 'di Resta');"}, {"question_id": 881, "answer_sql": "SELECT COUNT(distinct drivers.driverId) as total_drivers, (COUNT(distinct drivers.driverId) * 100.0) / (SELECT COUNT(*) FROM races WHERE date = '1983-07-16') as race_completion_rate FROM drivers WHERE date = '1983-07-16'"}, {"question_id": 882, "answer_sql": "SELECT MIN(year) as first_singapore_gp FROM races WHERE name = 'Singapore Grand Prix';"}, {"question_id": 883, "answer_sql": "SELECT COUNT(*) as total_races, name FROM races WHERE year = 2005 ORDER BY name DESC;"}, {"question_id": 884, "answer_sql": "SELECT MIN(year) as first_race_year, MIN(month(date)) as first_race_month FROM seasons WHERE year = (SELECT MIN(year) FROM races);"}, {"question_id": 885, "answer_sql": "SELECT name, date FROM seasons WHERE year = 1999 AND url = (SELECT MAX(url) FROM seasons);"}, {"question_id": 886, "answer_sql": "SELECT MAX(year) as Max_Year FROM seasons ```"}, {"question_id": 887, "answer_sql": "SELECT r.name FROM races r WHERE r.year != 2017 AND NOT EXISTS ( SELECT 1 FROM seasons s WHERE r.year = s.year AND s.year = 2000 );"}, {"question_id": 888, "answer_sql": "SELECT circuits.name, circuits.location FROM circuits WHERE circuits.circuitId = (SELECT MIN(circuits.circuitId) FROM circuits WHERE circuits.name LIKE '%Grand Prix%');"}, {"question_id": 889, "answer_sql": "SELECT MAX(year) as last_f1_season FROM seasons WHERE url LIKE '%British Grand Prix%';"}, {"question_id": 890, "answer_sql": "SELECT COUNT(*) FROM seasons WHERE url = 'british_grand_prix';"}, {"question_id": 891, "answer_sql": "SELECT drivers.forename, drivers.surname, drivers.dob FROM drivers JOIN driverStandings ON drivers.driverId = driverStandings.driverId WHERE seasons.year = 2010 ORDER BY driverStandings.position;"}, {"question_id": 892, "answer_sql": "SELECT forename, surname FROM drivers WHERE driverId = (SELECT driverId FROM results WHERE points = (SELECT MAX(points) FROM results));"}, {"question_id": 893, "answer_sql": "SELECT drivers.forename, drivers.surname, MAX(constructorResults.points) as points FROM drivers JOIN constructorResults ON drivers.driverId = constructorResults.driverId JOIN races ON constructorResults.raceId = races.raceId WHERE races.name = 'Chinese Grand Prix' AND races.year = 2017 GROUP BY drivers.driverId ORDER BY points DESC LIMIT 3;"}, {"question_id": 894, "answer_sql": "SELECT MIN(time) as best_lap_time, races.raceId, drivers.driverId FROM lapTimes JOIN races ON lapTimes.raceId = races.raceId JOIN drivers ON lapTimes.driverId = drivers.driverId GROUP BY races.raceId, drivers.driverId ORDER BY best_lap_time ASC LIMIT 1;"}, {"question_id": 895, "answer_sql": "SELECT AVG(time) as average_lap_time FROM lapTimes WHERE driverId = (SELECT driverId FROM drivers WHERE surname = 'Vettel' AND constructorId = (SELECT constructorId FROM constructors WHERE name = 'Sebastian Vettel'));"}, {"question_id": 896, "answer_sql": "SELECT (DIVIDE(COUNT(raceId) where surname = 'Hamilton', year >= 2010 and position>1), (COUNT(raceId) where surname = 'Hamilton', year >= 2010)) as percentage FROM races;"}, {"question_id": 897, "answer_sql": "SELECT drivers.forename, drivers.surname, drivers.nationality, AVG(constructorStandings.points) as average_points FROM drivers JOIN constructorStandings ON drivers.driverId = constructorStandings.driverId WHERE constructorStandings.wins = ( SELECT MAX(constructorStandings.wins) FROM constructorStandings ) GROUP BY drivers.forename, drivers.surname, drivers.nationality;"}, {"question_id": 898, "answer_sql": "SELECT forename, surname FROM drivers WHERE nationality = 'Japanese' AND dob = (SELECT MIN(dob) FROM drivers WHERE nationality = 'Japanese');"}, {"question_id": 899, "answer_sql": "SELECT circuits.circuitId, circuits.name, circuits.country, circuits.lat, circuits.lng, circuits.alt, circuits.url FROM circuits JOIN races ON circuits.circuitId = races.circuitId WHERE races.year BETWEEN 1990 AND 2000 GROUP BY circuits.circuitId HAVING COUNT(races.raceId) = 4"}, {"question_id": 900, "answer_sql": "SELECT circuits.name, circuits.location, races.name FROM circuits JOIN races ON circuits.circuitId = races.circuitId WHERE circuits.country = 'USA' AND races.year = 2006;"}, {"question_id": 901, "answer_sql": "SELECT circuits.name, races.name, circuits.location, circuits.country, circuits.lat, circuits.lng, circuits.alt FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.year = 2005 AND MONTH(races.date) = 9;"}, {"question_id": 902, "answer_sql": "SELECT r.raceId, r.name FROM races r JOIN drivers d ON r.raceId = d.raceId WHERE d.forename = 'Alex' AND d.surname = 'Yoong' AND d.number < 10;"}, {"question_id": 903, "answer_sql": "SELECT COUNT(*) as total_wins FROM constructorStandings WHERE constructorId = (SELECT constructorId FROM constructors WHERE name = 'Michael Schumacher') AND position = 1;"}, {"question_id": 904, "answer_sql": "SELECT races.name, seasons.year FROM races JOIN seasons ON races.year = seasons.year JOIN drivers ON races.circuitId = drivers.driverId WHERE drivers.forename = 'Michael' AND drivers.surname = 'Schumacher' ORDER BY races.name ASC, seasons.year ASC LIMIT 1;"}, {"question_id": 905, "answer_sql": "SELECT AVG(points) FROM constructorStandings WHERE raceId = (SELECT raceId FROM seasons WHERE year = 2000) AND constructorId = (SELECT constructorId FROM constructors WHERE name = 'Eddie Irvine');"}, {"question_id": 906, "answer_sql": "SELECT name, points FROM races JOIN constructorStandings ON races.raceId = constructorStandings.raceId JOIN constructors ON constructorStandings.constructorId = constructors.constructorId WHERE drivers.driverId = (SELECT driverId FROM drivers WHERE surname = 'Hamilton') AND races.year = (SELECT MIN(year) FROM races);"}, {"question_id": 907, "answer_sql": "SELECT r.name, c.country FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE r.year = 2017 ORDER BY r.date;"}, {"question_id": 908, "answer_sql": "SELECT MAX(laps) as Most_Laps, races.name as Race_Name, seasons.year as Year, circuits.location as Circuit_Location FROM results JOIN races ON results.raceId = races.raceId JOIN seasons ON races.year = seasons.year JOIN circuits ON races.circuitId = circuits.circuitId GROUP BY races.name, seasons.year, circuits.location ORDER BY Most_Laps DESC LIMIT 1;"}, {"question_id": 909, "answer_sql": "SELECT COUNT(races where country = 'Germany' and name = 'Europearn Grand Prix') / COUNT(races where name = 'Europearn Grand Prix') * 100 as percentage"}, {"question_id": 910, "answer_sql": "SELECT lat, lng FROM circuits WHERE circuitRef = 'Silverstone';"}, {"question_id": 911, "answer_sql": "SELECT name FROM circuits WHERE lat = (SELECT MAX(lat) FROM circuits);"}, {"question_id": 912, "answer_sql": "SELECT circuits.circuitRef FROM circuits WHERE circuits.name = 'Marina Bay Street Circuit';"}, {"question_id": 913, "answer_sql": "SELECT name, country, alt FROM circuits WHERE alt = (SELECT MAX(alt) FROM circuits);"}, {"question_id": 914, "answer_sql": "SELECT COUNT(*) FROM drivers WHERE code IS NULL;"}, {"question_id": 915, "answer_sql": "SELECT nationality FROM drivers WHERE dob = (SELECT MIN(dob) FROM drivers);"}, {"question_id": 916, "answer_sql": "SELECT surname FROM drivers WHERE nationality = 'italian';"}, {"question_id": 917, "answer_sql": "SELECT url FROM drivers WHERE driverRef = 'Anthony Davidson';"}, {"question_id": 918, "answer_sql": "SELECT drivers.driverRef FROM drivers WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';"}, {"question_id": 919, "answer_sql": "SELECT circuits.circuitRef FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.year = 2009 AND races.round = 1;"}, {"question_id": 920, "answer_sql": "SELECT DISTINCT year FROM races WHERE circuitId = (SELECT circuitId FROM circuits WHERE name = 'Silverstone');"}, {"question_id": 921, "answer_sql": "SELECT * FROM circuits WHERE url = 'more information';"}, {"question_id": 922, "answer_sql": "SELECT date FROM races WHERE year = 2010 AND circuitId = (SELECT circuitId FROM circuits WHERE name = 'Abu Dhabi')"}, {"question_id": 923, "answer_sql": "SELECT COUNT(*) FROM races WHERE circuits.country = 'Italy';"}, {"question_id": 924, "answer_sql": "SELECT DISTINCT races.date FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.name = 'Barcelona-Catalunya';"}, {"question_id": 925, "answer_sql": "SELECT url FROM circuits WHERE circuitRef = 'spanish_grand_prix_2009' AND name = 'Spanish Grand Prix' AND year = 2009;"}, {"question_id": 926, "answer_sql": "SELECT MIN(fastestLapTime) as fastest_lap_time FROM results WHERE driverId = (SELECT driverId FROM drivers WHERE surname = 'Hamilton') AND statusId = (SELECT statusId FROM status WHERE status = 'Complete')"}, {"question_id": 927, "answer_sql": "SELECT drivers.forename, drivers.surname FROM drivers JOIN (SELECT raceId, driverId, MIN(milliseconds) as fastest_lap_time FROM lapTimes GROUP BY raceId, driverId) as fastest_lap_times ON drivers.driverId = fastest_lap_times.driverId WHERE fastest_lap_times.fastest_lap_time = (SELECT MIN(milliseconds) FROM lapTimes) This query will return the fastest lap time in the race and the driver's name."}, {"question_id": 928, "answer_sql": "SELECT drivers.surname FROM drivers JOIN results ON drivers.driverId = results.driverId WHERE results.raceId IN ( SELECT races.raceId FROM races WHERE races.name = 'Australian Grand Prix' AND seasons.year = 2008 ) AND results.statusId = ( SELECT status.statusId FROM status WHERE status.status = 'Finished' ) ORDER BY results.position LIMIT 1;"}, {"question_id": 929, "answer_sql": "SELECT * FROM races WHERE drivers.surname = 'Hamilton';"}, {"question_id": 930, "answer_sql": "SELECT MIN(position) as highest_position FROM results WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton');"}, {"question_id": 931, "answer_sql": "SELECT MAX(fastestLapSpeed) as fastest_lap_speed FROM results WHERE raceId = (SELECT raceId FROM races WHERE name = 'Spanish Grand Prix' AND year = 2009);"}, {"question_id": 932, "answer_sql": "SELECT DISTINCT year FROM races WHERE drivers.driverRef = 'Lewis Hamilton';"}, {"question_id": 933, "answer_sql": "SELECT positionOrder FROM results WHERE driverId = (SELECT driverId FROM drivers WHERE surname = 'Hamilton' AND forename = 'Lewis') AND raceId = (SELECT MAX(raceId) FROM races WHERE year = 2008);"}, {"question_id": 934, "answer_sql": "SELECT forename, surname FROM drivers WHERE number = 4 AND year = 2008 AND url = 'Australian Grand Prix';"}, {"question_id": 935, "answer_sql": "SELECT COUNT(*) FROM results WHERE time IS NOT NULL;"}, {"question_id": 936, "answer_sql": "SELECT fastestLapTime FROM results WHERE driverId = (SELECT driverId FROM drivers WHERE surname = 'Hamilton') AND raceId = (SELECT raceId FROM races WHERE name = 'Australian Grand Prix' AND year = 2008);"}, {"question_id": 937, "answer_sql": "SELECT time FROM results WHERE raceId = (SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix') AND driverId = (SELECT driverId FROM drivers WHERE surname = 'second');"}, {"question_id": 938, "answer_sql": "SELECT constructors.name, constructors.url FROM constructors JOIN constructorStandings ON constructors.constructorId = constructorStandings.constructorId WHERE constructorStandings.raceId = (SELECT MAX(raceId) FROM races WHERE year = 2008) AND constructorStandings.position = 1;"}, {"question_id": 939, "answer_sql": "SELECT COUNT(*) FROM drivers WHERE nationality = 'American';"}, {"question_id": 940, "answer_sql": "SELECT COUNT(*) FROM drivers WHERE driverId IN (SELECT driverId FROM results WHERE raceId IN (SELECT raceId FROM races WHERE year = 2008 AND round = 1 AND circuitId IN (SELECT circuitId FROM circuits WHERE name = 'Australian Grand Prix')));"}, {"question_id": 941, "answer_sql": "SELECT SUM(points) as total_points FROM constructorStandings WHERE constructorId = (SELECT constructorId FROM drivers WHERE driverRef = 'Lewis Hamilton');"}, {"question_id": 942, "answer_sql": "SELECT AVG(CAST(fastestLapTime AS REAL)) FROM results WHERE driverId = (SELECT drivers.driverId FROM drivers WHERE drivers.surname = 'Hamilton') AND statusId = (SELECT status.statusId FROM status WHERE status.status = 'Finished') AND raceId IN (SELECT races.raceId FROM races WHERE races.name LIKE '%Lewis%')"}, {"question_id": 943, "answer_sql": "SELECT COUNT(raceId) FROM races WHERE time IS NOT NULL;"}, {"question_id": 944, "answer_sql": "SELECT (SUBSTR(results.time, 1, 8) - SUBSTR(champion_results.time, 1, 8)) * 100 / SUBSTR(champion_results.time, 1, 8) AS percentage_faster_than_champion FROM (SELECT time FROM results WHERE raceId = (SELECT MAX(raceId) FROM races WHERE year = 2008) AND constructorId = (SELECT MAX(constructorId) FROM constructors WHERE name = 'Champion') ) AS last_driver JOIN (SELECT time FROM results WHERE raceId = (SELECT MAX(raceId) FROM races WHERE year = 2008) AND constructorId = (SELECT MAX(constructorId) FROM constructors WHERE name = 'Champion') ) AS champion_results ON 1;"}, {"question_id": 945, "answer_sql": "SELECT COUNT(*) FROM circuits WHERE location = 'Melbourne' AND country = 'Australia';"}, {"question_id": 946, "answer_sql": "SELECT circuits.location, circuits.lat, circuits.lng FROM circuits WHERE circuits.country = 'USA';"}, {"question_id": 947, "answer_sql": "SELECT COUNT(*) FROM drivers WHERE dob > '1980-01-01';"}, {"question_id": 948, "answer_sql": "SELECT AVG(points) FROM constructors WHERE nationality = 'British';"}, {"question_id": 949, "answer_sql": "SELECT MAX(points), constructorRef FROM constructorStandings GROUP BY constructorRef ORDER BY MAX(points) DESC LIMIT 1;"}, {"question_id": 950, "answer_sql": "SELECT constructors.name FROM constructors JOIN constructorStandings ON constructors.constructorId = constructorStandings.constructorId WHERE constructorStandings.raceId = 181 AND constructorStandings.points = 0;"}, {"question_id": 951, "answer_sql": "SELECT COUNT(constructorId) FROM constructors WHERE constructorId IN ( SELECT constructorId FROM constructorStandings WHERE raceId IN ( SELECT raceId FROM races WHERE year = 2019 ) AND points = 0 )"}, {"question_id": 952, "answer_sql": "SELECT constructors.name FROM constructors JOIN constructorStandings ON constructors.constructorId = constructorStandings.constructorId WHERE constructorStandings.position = 1;"}, {"question_id": 953, "answer_sql": "SELECT COUNT(*) FROM constructors WHERE constructorId IN (SELECT constructorId FROM qualifying WHERE number > 50);"}, {"question_id": 954, "answer_sql": "SELECT COUNT(DISTINCT drivers.driverId) as total_drivers, COUNT(DISTINCT drivers.driverId) * 1.0 / (SELECT COUNT(*) FROM seasons WHERE year BETWEEN 2007 AND 2009) * 100 as completion_percentage FROM drivers WHERE year BETWEEN 2007 AND 2009 AND drivers.nationality = 'Japan';"}, {"question_id": 955, "answer_sql": "SELECT seasons.year, AVG(TIMESTAMP('0000-00-00', '+00 hours '||lapTimes.time||' +00 minutes') - TIMESTAMP('0000-00-00', '+00 hours '||lapTimes.time||' +00 minutes')) as average_time_seconds FROM races JOIN lapTimes ON races.raceId = lapTimes.raceId JOIN drivers ON lapTimes.driverId = drivers.driverId JOIN status ON results.statusId = status.statusId WHERE status.status = 'Champion' GROUP BY seasons.year ORDER BY seasons.year;"}, {"question_id": 956, "answer_sql": "SELECT forename, surname FROM drivers WHERE dob > '1975-12-31' AND position = 2 AND statusId = (SELECT statusId FROM status WHERE status = 'R')"}, {"question_id": 957, "answer_sql": "SELECT COUNT(*) FROM drivers WHERE nationality = 'Italian' AND time IS NULL;"}, {"question_id": 958, "answer_sql": "SELECT drivers.forename, drivers.surname FROM drivers JOIN (SELECT raceId, driverId, MIN(milliseconds) as fastest_lap_time FROM lapTimes GROUP BY raceId, driverId) as fastest_lap_times ON drivers.driverId = fastest_lap_times.driverId WHERE fastest_lap_times.fastest_lap_time = (SELECT MIN(milliseconds) FROM lapTimes) This query will return the fastest lap time and the forenames and surnames of the drivers who have this time."}, {"question_id": 959, "answer_sql": "SELECT fastestLap FROM results WHERE raceId = (SELECT raceId FROM races WHERE year = 2009) AND constructorId = (SELECT constructorId FROM constructors WHERE name = 'Champion')"}, {"question_id": 960, "answer_sql": "SELECT avg(fastestLapSpeed) FROM qualifying WHERE raceId = (SELECT raceId FROM races WHERE name = 'Spanish Grand Prix');"}, {"question_id": 961, "answer_sql": "SELECT name, year FROM races WHERE time = (SELECT MIN(time) FROM races WHERE milliseconds IS NOT NULL) AND milliseconds IS NOT NULL;"}, {"question_id": 962, "answer_sql": "SELECT (COUNT(driverId where year (dob) <1985 and laps >50) * 100) / (COUNT(DriverID where year between 2000 and 2005) *100) as percentage FROM drivers WHERE year between 2000 and 2005;"}, {"question_id": 963, "answer_sql": "SELECT COUNT(*) FROM drivers JOIN lapTimes ON drivers.driverId = lapTimes.driverId WHERE lapTimes.time < '02:00.00' AND drivers.nationality = 'France';"}, {"question_id": 964, "answer_sql": "SELECT drivers.driverRef, drivers.forename, drivers.surname FROM drivers WHERE drivers.nationality = 'America';"}, {"question_id": 965, "answer_sql": "SELECT raceId FROM races WHERE year = 2009;"}, {"question_id": 966, "answer_sql": "SELECT COUNT(*) FROM races WHERE raceId = 18;"}, {"question_id": 967, "answer_sql": "SELECT constructors.name, COUNT(*) as Netherlandic drivers FROM drivers JOIN constructors ON drivers.constructorId = constructors.constructorId WHERE YEAR(CURRENT_DATE) - YEAR(drivers.dob) = 1 AND constructors.nationality = 'Netherland' GROUP BY constructors.name ORDER BY COUNT(*) DESC LIMIT 3;"}, {"question_id": 968, "answer_sql": "SELECT drivers.driverRef FROM drivers WHERE drivers.surname = 'Kubica';"}, {"question_id": 969, "answer_sql": "SELECT COUNT(*) FROM drivers WHERE YEAR(dob) = 1980 AND nationality = 'Australia';"}, {"question_id": 970, "answer_sql": "SELECT drivers.forename, drivers.surname, MIN(lapTimes.time) as earliest_lap_time FROM drivers JOIN lapTimes ON drivers.driverId = lapTimes.driverId WHERE EXTRACT(YEAR FROM drivers.dob) BETWEEN 1980 AND 1990 AND drivers.nationality = 'German' GROUP BY drivers.forename, drivers.surname ORDER BY earliest_lap_time ASC LIMIT 3;"}, {"question_id": 971, "answer_sql": "SELECT drivers.name FROM drivers WHERE drivers.nationality = 'Germany' AND drivers.dob = (SELECT MIN(dob) FROM drivers WHERE drivers.nationality = 'Germany');"}, {"question_id": 972, "answer_sql": "SELECT drivers.driverId, drivers.driverRef, drivers.code FROM drivers JOIN lapTimes ON drivers.driverId = lapTimes.driverId WHERE drivers.dob = '1971-01-01' AND lapTimes.fastestLapTime = ( SELECT MIN(fastestLapTime) FROM lapTimes WHERE drivers.dob = '1971-01-01' ) This query will return the drivers who were born in 1971 and have the fastest lap time on the race. The result is a list of driver IDs and codes."}, {"question_id": 973, "answer_sql": "SELECT drivers.driverId, drivers.forename, drivers.surname, MAX(lapTimes.time) as fastest_lap_time FROM drivers JOIN lapTimes ON drivers.driverId = lapTimes.driverId WHERE EXTRACT(YEAR FROM drivers.dob) < 1982 AND drivers.nationality = 'Spanish' GROUP BY drivers.driverId, drivers.forename, drivers.surname ORDER BY fastest_lap_time ASC LIMIT 10;"}, {"question_id": 974, "answer_sql": "SELECT races.year FROM races WHERE fastestLap IS NOT NULL ORDER BY fastestLapTime ASC LIMIT 1;"}, {"question_id": 975, "answer_sql": "SELECT MIN(MIN(time)) AS Lowest_Speed_of_Lap_Time FROM lapTimes;"}, {"question_id": 976, "answer_sql": "SELECT drivers.driverId FROM drivers JOIN lapTimes ON drivers.driverId = lapTimes.driverId WHERE lapTimes.time = ( SELECT MIN(time) FROM lapTimes WHERE lapTimes.raceId = races.raceId AND lapTimes.lap = 1 ) ORDER BY drivers.driverId ASC LIMIT 5;"}, {"question_id": 977, "answer_sql": "SELECT COUNT(*) FROM results WHERE statusId = 2 AND raceId > 50 AND raceId < 100;"}, {"question_id": 978, "answer_sql": "SELECT COUNT(*), circuits.location, circuits.lat, circuits.lng FROM circuits WHERE circuits.country = 'Austria' GROUP BY circuits.circuitId;"}, {"question_id": 979, "answer_sql": "SELECT MAX(laps) as max_laps FROM results WHERE time IS NOT NULL;"}, {"question_id": 980, "answer_sql": "SELECT drivers.driverRef, drivers.name, drivers.nationality, drivers.dob FROM drivers JOIN qualifying ON drivers.driverId = qualifying.driverId WHERE qualifying.q2 IS NOT NULL AND qualifying.raceId = 23;"}, {"question_id": 981, "answer_sql": "SELECT races.year, races.name, races.date, races.time FROM seasons JOIN races ON seasons.year = races.year JOIN drivers ON races.driverId = drivers.driverId WHERE drivers.dob = (SELECT MIN(dob) FROM drivers) AND races.round = 1;"}, {"question_id": 982, "answer_sql": "SELECT COUNT(*) FROM results WHERE statusId = 2;"}, {"question_id": 983, "answer_sql": "SELECT constructors.name, constructors.url FROM constructors WHERE constructors.nationality = 'Italian' AND constructorResults.points = ( SELECT MAX(constructorResults.points) FROM constructorResults WHERE constructorResults.raceId = ( SELECT MAX(races.raceId) FROM races WHERE races.circuitId = ( SELECT circuits.circuitId FROM circuits WHERE circuits.name = 'Monaco' ) ) ) AND constructorResults.status = 'Finished' ORDER BY constructorResults.points DESC LIMIT 1;"}, {"question_id": 984, "answer_sql": "SELECT url FROM constructors WHERE constructorId = (SELECT constructorId FROM constructorStandings ORDER BY wins DESC LIMIT 1);"}, {"question_id": 985, "answer_sql": "SELECT drivers.forename, drivers.surname, drivers.dob, MAX(lapTimes.time) as slowest_time FROM drivers JOIN lapTimes ON drivers.driverId = lapTimes.driverId WHERE races.name = 'French Grand Prix' AND drivers.nationality = 'French' GROUP BY drivers.driverId ORDER BY slowest_time ASC LIMIT 1;"}, {"question_id": 986, "answer_sql": "SELECT MIN(time) * 1000 as fastest_lap_time FROM lapTimes WHERE position = 1;"}, {"question_id": 987, "answer_sql": "SELECT AVG(fastestLapTime) FROM ( SELECT fastestLapTime, driverId, raceId FROM results WHERE statusId = (SELECT statusId FROM status WHERE status = 'Finished') AND positionOrder < 11 AND year = 2006 AND driverId IN ( SELECT driverId FROM drivers WHERE nationality = 'United States' ) ) AS Top10Drivers;"}, {"question_id": 988, "answer_sql": "SELECT drivers.forename, drivers.surname, AVG(pitStops.duration) as average_duration FROM drivers JOIN (SELECT raceId, driverId, AVG(time) as duration FROM pitStops GROUP BY raceId, driverId) as pitStops ON drivers.driverId = pitStops.driverId WHERE drivers.dob BETWEEN '1980-01-01' AND '1985-12-31' AND drivers.nationality = 'Germany' GROUP BY drivers.forename, drivers.surname ORDER BY average_duration ASC LIMIT 5;"}, {"question_id": 989, "answer_sql": "SELECT drivers.surname, results.time FROM drivers JOIN results ON drivers.driverId = results.driverId WHERE results.raceId IN (SELECT raceId FROM races WHERE circuits.country = 'Canada' AND seasons.year = 2008) AND results.statusId = (SELECT statusId FROM status WHERE status.status = 'Champion') ORDER BY results.time ASC;"}, {"question_id": 990, "answer_sql": "SELECT constructors.constructorRef, constructors.url FROM constructors JOIN constructorStandings ON constructors.constructorId = constructorStandings.constructorId WHERE constructorStandings.raceId = (SELECT MAX(raceId) FROM races WHERE year = 2009) AND constructorStandings.position = 1;"}, {"question_id": 991, "answer_sql": "SELECT drivers.forename, drivers.surname, drivers.dob FROM drivers WHERE drivers.nationality = 'Austrian' AND drivers.dob BETWEEN '1981-01-01' AND '1991-12-31';"}, {"question_id": 992, "answer_sql": "SELECT CONCAT(forename, ' ', surname) AS fullName, url AS wikiPediaPageLink, dob AS dateOfBirth FROM drivers WHERE nationality = 'German' AND dob BETWEEN '1971-01-01' AND '1985-12-31' ORDER BY dob DESC;"}, {"question_id": 993, "answer_sql": "SELECT location, country, lat, lng FROM circuits WHERE circuitRef = 'Hungaroring';"}, {"question_id": 994, "answer_sql": "SELECT constructors.name, MAX(constructorResults.points) as max_points, constructors.nationality FROM constructors JOIN constructorResults ON constructors.constructorId = constructorResults.constructorId JOIN races ON races.raceId = constructorResults.raceId WHERE races.name LIKE '%Monaco%' AND races.year BETWEEN 1980 AND 2010 GROUP BY constructors.constructorId, constructors.name, constructors.nationality ORDER BY max_points DESC;"}, {"question_id": 995, "answer_sql": "SELECT AVG(points) FROM drivers WHERE nationality = 'Turkey' AND driverRef = 'hamilton';"}, {"question_id": 996, "answer_sql": "SELECT AVG(year) FROM seasons WHERE year BETWEEN 2000 AND 2010;"}, {"question_id": 997, "answer_sql": "SELECT MAX(nationality) as Most_Citizenship FROM drivers;"}, {"question_id": 998, "answer_sql": "SELECT constructors.name, COUNT(constructorStandings.wins) as victories FROM constructors JOIN constructorStandings ON constructors.constructorId = constructorStandings.constructorId WHERE constructorStandings.position = 91 GROUP BY constructors.name;"}, {"question_id": 999, "answer_sql": "SELECT name FROM races WHERE fastestLapSpeed = (SELECT MIN(fastestLapSpeed) FROM results);"}, {"question_id": 1000, "answer_sql": "SELECT name, location, country FROM circuits WHERE circuitId = (SELECT MAX(circuitId) FROM races);"}, {"question_id": 1001, "answer_sql": "SELECT CONCAT(forename, ' ', surname) as fullName FROM drivers WHERE driverId = (SELECT driverId FROM qualifying WHERE raceId = (SELECT raceId FROM races WHERE year = 2008 AND round = 3 AND circuitId = (SELECT circuitId FROM circuits WHERE name = 'Marina Bay Street Circuit')) ORDER BY q3 ASC LIMIT 1);"}, {"question_id": 1002, "answer_sql": "SELECT d.forename, d.surname, d.nationality, r.name as race_name FROM drivers d JOIN races r ON d.driverId = r.raceId WHERE d.dob = (SELECT MIN(dob) FROM drivers) AND r.year = (SELECT MIN(year) FROM races);"}, {"question_id": 1003, "answer_sql": "SELECT COUNT(*) FROM drivers JOIN (SELECT driverId FROM driverStandings WHERE position = 1) as highest_accidents ON drivers.driverId = highest_accidents.driverId WHERE drivers.nationality = 'Canadian' AND races.name = 'Grand Prix';"}, {"question_id": 1004, "answer_sql": "SELECT forename, surname, COUNT(wins) as wins FROM drivers WHERE dob = (SELECT MIN(dob) FROM drivers) GROUP BY forename, surname LIMIT 1;"}, {"question_id": 1005, "answer_sql": "SELECT MAX(duration) as longest_time_at_pit_stop FROM pitStops;"}, {"question_id": 1006, "answer_sql": "SELECT fastestLapTime FROM races WHERE raceId = (SELECT MAX(raceId) FROM races);"}, {"question_id": 1007, "answer_sql": "SELECT MAX(duration) as longest_time FROM pitStops WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton');"}, {"question_id": 1008, "answer_sql": "SELECT lapTimes.time FROM lapTimes JOIN drivers ON lapTimes.driverId = drivers.driverId WHERE drivers.surname = 'Hamilton' AND lapTimes.raceId = (SELECT raceId FROM races WHERE name = 'Australian Grand Prix' AND year = 2011);"}, {"question_id": 1009, "answer_sql": "SELECT drivers.forename, drivers.surname, pitStops.time, pitStops.duration FROM drivers JOIN pitStops ON drivers.driverId = pitStops.driverId WHERE pitStops.raceId = (SELECT raceId FROM races WHERE name = 'Australian Grand Prix' AND year = 2011) AND pitStops.stop = (SELECT MIN(stop) FROM pitStops WHERE raceId = (SELECT raceId FROM races WHERE name = 'Australian Grand Prix' AND year = 2011));"}, {"question_id": 1010, "answer_sql": "SELECT lapTimes.time, lapTimes.milliseconds FROM lapTimes JOIN drivers ON lapTimes.driverId = drivers.driverId JOIN drivers ON drivers.driverId = results.driverId JOIN constructors ON drivers.constructorId = constructors.constructorId JOIN results ON results.driverId = drivers.driverId WHERE drivers.surname = 'Hamilton' AND results.constructorId = 4;"}, {"question_id": 1011, "answer_sql": "SELECT drivers.forename, drivers.surname FROM drivers JOIN lapTimes ON drivers.driverId = lapTimes.driverId WHERE lapTimes.time = (SELECT MIN(time) FROM lapTimes) ORDER BY lapTimes.time ASC LIMIT 1;"}, {"question_id": 1012, "answer_sql": "SELECT positionText FROM lapTimes WHERE time = (SELECT MIN(time) FROM lapTimes) AND driverId = (SELECT drivers.driverId FROM drivers WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton') AND raceId = (SELECT races.raceId FROM races WHERE races.url = 'https://en.wikipedia.org/wiki/2022_F1_Grand_Prix_at_Circuit_of_the_Ring_at_Sandown')"}, {"question_id": 1013, "answer_sql": "SELECT lapTimes.time, drivers.surname FROM lapTimes JOIN drivers ON lapTimes.driverId = drivers.driverId WHERE lapTimes.raceId = (SELECT MAX(raceId) FROM races WHERE circuits.circuitId = (SELECT circuitId FROM circuits WHERE circuits.name = 'Austrian Grand Prix'));"}, {"question_id": 1014, "answer_sql": "SELECT lapTimes.raceId, lapTimes.driverId, lapTimes.lap, lapTimes.time, lapTimes.milliseconds FROM lapTimes JOIN drivers ON lapTimes.driverId = drivers.driverId JOIN races ON lapTimes.raceId = races.raceId JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.country = 'Italy';"}, {"question_id": 1015, "answer_sql": "SELECT name, date FROM races WHERE url = 'http://ergast.com/api/f1/Austrian%20Grand%20Prix/2021.json';"}, {"question_id": 1016, "answer_sql": "SELECT duration FROM lapTimes WHERE raceId = 1 AND driverId = 1;"}, {"question_id": 1017, "answer_sql": "SELECT circuits.location, circuits.lat, circuits.lng FROM circuits WHERE lap = 1:29.488;"}, {"question_id": 1018, "answer_sql": "SELECT AVG(milliseconds) FROM pitStops WHERE driverId = (SELECT driverId FROM drivers WHERE surname = 'Hamilton');"}, {"question_id": 1019, "answer_sql": "SELECT AVG(milliseconds) as average_lap_time FROM lapTimes WHERE circuits.country = 'Italy';"}, {"question_id": 1020, "answer_sql": "SELECT player_api_id, overall_rating FROM Player_Attributes ORDER BY overall_rating DESC LIMIT 1;"}, {"question_id": 1021, "answer_sql": "SELECT MAX(height), player_name FROM Player;"}, {"question_id": 1022, "answer_sql": "SELECT `preferred_foot` FROM `Player` WHERE `potential` = (SELECT MIN(`potential`) FROM `Player`);"}, {"question_id": 1023, "answer_sql": "SELECT COUNT(*) FROM Player_Attributes WHERE attacking_work_rate = 'low' AND overall_rating >= 60 AND overall_rating < 65;"}, {"question_id": 1024, "answer_sql": "SELECT player_api_id FROM Player_Attributes WHERE `crossing` = (SELECT MAX(`crossing`) FROM Player_Attributes) ORDER BY `crossing` DESC LIMIT 5;"}, {"question_id": 1025, "answer_sql": "SELECT `league_id`, COUNT(`id`) as `total_goals` FROM `Match` WHERE `season` = '2016' GROUP BY `league_id` ORDER BY `total_goals` DESC LIMIT 1;"}, {"question_id": 1026, "answer_sql": "SELECT team_short_name, COUNT(*) as matches_lost FROM Team, Team_Attributes, Match WHERE Match.away_team_api_id = Team.team_api_id AND Team.team_api_id = Team_Attributes.team_api_id AND Match.away_team_goal > Match.home_team_goal AND season = '2016' GROUP BY team_short_name ORDER BY matches_lost ASC LIMIT 1;"}, {"question_id": 1027, "answer_sql": "SELECT player_name FROM Player_Attributes WHERE penalties = (SELECT MAX(penalties) FROM Player_Attributes) ORDER BY penalties DESC LIMIT 10;"}, {"question_id": 1028, "answer_sql": "SELECT Team.team_long_name FROM Team JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id JOIN League ON Team.team_fifa_api_id = League.id WHERE League.name = 'Scotland Premier League' AND Team_Attributes.date = '2010-01-01' AND (SUBSTR(away_team_goal, 1, 1) - SUBSTR(home_team_goal, 1, 1)) > 0 ORDER BY (SUBSTR(away_team_goal, 1, 1) - SUBSTR(home_team_goal, 1, 1)) DESC LIMIT 1;"}, {"question_id": 1029, "answer_sql": "SELECT MAX(buildUpPlaySpeed) FROM Team_Attributes;"}, {"question_id": 1030, "answer_sql": "SELECT `league_id`, `name` FROM `League` WHERE `name` = ( SELECT `name` FROM `Match` WHERE `season` = '2016' AND `home_team_goal` = `away_team_goal` GROUP BY `league_id` ORDER BY COUNT(*) DESC LIMIT 1 );"}, {"question_id": 1031, "answer_sql": "SELECT player_name, age FROM Player JOIN ( SELECT player_api_id, SUBSTR(SUBSTR(birthday, 1, 4), 3) AS age FROM Player WHERE sprint_speed >= 97 AND date >= '2013-01-01 00:00:00' AND date <= '2015-12-31 00:00:00' ) AS Player_Age ON Player.player_api_id = Player_Age.player_api_id;"}, {"question_id": 1032, "answer_sql": "SELECT L.name, COUNT(*) as matches_played FROM League L JOIN Match M ON L.id = M.league_id GROUP BY L.name ORDER BY matches_played DESC LIMIT 1;"}, {"question_id": 1033, "answer_sql": "SELECT AVG(height) FROM Player WHERE birthday >= '1990-01-01 00:00:00' AND birthday < '1996-01-01 00:00:00';"}, {"question_id": 1034, "answer_sql": "SELECT player_api_id FROM Player_Attributes WHERE overall_rating > ( SELECT AVG(overall_rating) FROM Player_Attributes WHERE substr(date,1,4) = '2010' ) AND substr(date,1,4) = '2010' ORDER BY overall_rating DESC LIMIT 1;"}, {"question_id": 1035, "answer_sql": "SELECT team_fifa_api_id FROM Team_Attributes WHERE buildUpPlaySpeed BETWEEN 51 AND 59;"}, {"question_id": 1036, "answer_sql": "SELECT team_long_name FROM Team WHERE buildUpPlayPassing > (SELECT AVG(buildUpPlayPassing) FROM Team WHERE strftime('%Y', date) = '2012') AND strftime('%Y', date) = '2012';"}, {"question_id": 1037, "answer_sql": "SELECT (SUM(CASE WHEN preferred_foot = 'left' THEN 1 ELSE 0 END)) / (COUNT(player_fifa_api_id)) * 100 AS percentage_left_foot FROM Player WHERE birthday BETWEEN '1987-01-01 00:00:00'AND '1992-12-31 00:00:00';"}, {"question_id": 1038, "answer_sql": "SELECT `league_id`, SUM(`home_team_goal` + `away_team_goal`) as total_goals FROM `Match` GROUP BY `league_id` ORDER BY total_goals ASC LIMIT 5;"}, {"question_id": 1039, "answer_sql": "SELECT AVG(long_shots) FROM Team_Attributes WHERE team_api_id = (SELECT team_api_id FROM Team WHERE team_fifa_api_id = 1000000);"}, {"question_id": 1040, "answer_sql": "SELECT player_name, AVG(heading_accuracy) as average_heading_accuracy FROM Player_Attributes WHERE height > 180 GROUP BY player_name ORDER BY average_heading_accuracy DESC LIMIT 10;"}, {"question_id": 1041, "answer_sql": "SELECT team_long_name, chanceCreationPassing FROM Team_Attributes JOIN Team ON Team_Attributes.team_fifa_api_id = Team.team_fifa_api_id WHERE buildUpPlayDribblingClass = 'Normal' AND date > '2014-01-01 00:00:00' AND date < '2014-01-31 00:00:00' GROUP BY team_long_name HAVING chanceCreationPassing < ( SELECT AVG(chanceCreationPassing) FROM Team_Attributes JOIN Team ON Team_Attributes.team_fifa_api_id = Team.team_fifa_api_id WHERE buildUpPlayDribblingClass = 'Normal' AND date > '2014-01-01 00:00:00' AND date < '2014-01-31 00:00:00' ) ORDER BY chanceCreationPassing DESC;"}, {"question_id": 1042, "answer_sql": "SELECT L.name FROM League L WHERE L.name IN ( SELECT L.name FROM League L JOIN Match M ON L.id = M.league_id JOIN Team T1 ON M.home_team_api_id = T1.team_api_id JOIN Team_Attributes TA1 ON T1.team_api_id = TA1.team_api_id JOIN Player P1 ON TA1.player_api_id = P1.player_api_id JOIN Player_Attributes PA1 ON P1.player_api_id = PA1.player_api_id WHERE M.season = '2009/2010' AND M.date = '2009/08/10' AND M.home_team_goal > M.away_team_goal GROUP BY L.name HAVING AVG(P1.potential) > AVG(P2.potential) )"}, {"question_id": 1043, "answer_sql": "SELECT team_short_name FROM Team WHERE team_long_name = 'Queens Park Rangers';"}, {"question_id": 1044, "answer_sql": "SELECT `player_api_id` FROM `Player` WHERE substr(birthday,1,4) AS year, substr(birthday,6,2) AS month WHERE year = '1970' AND month = '10';"}, {"question_id": 1045, "answer_sql": "SELECT `attacking_work_rate` FROM `Player_Attributes` WHERE `player_api_id` = 1;"}, {"question_id": 1046, "answer_sql": "SELECT buildUpPlayPositioningClass FROM Team WHERE team_long_name = 'ADO Den Haag' AND date >= '2016-01-01' AND date <= '2016-12-31';"}, {"question_id": 1047, "answer_sql": "SELECT finishing FROM Player_Attributes WHERE player_api_id = (SELECT id FROM Player WHERE player_name = 'Francois Affolter') AND date = '2014-09-18 00:00:00';"}, {"question_id": 1048, "answer_sql": "SELECT `overall_rating` FROM `Player_Attributes` WHERE `player_api_id` = (SELECT `player_api_id` FROM `Player` WHERE `player_name` = 'Gabriel Tamas' AND `birthday` LIKE '2011%');"}, {"question_id": 1049, "answer_sql": "SELECT COUNT(*) FROM Match WHERE season = '2015/2016' AND country_id = (SELECT id FROM Country WHERE name = 'Scotland');"}, {"question_id": 1050, "answer_sql": "SELECT `attacking_work_rate` FROM `Player_Attributes` WHERE `date` = (SELECT MAX(`date`) FROM `Player_Attributes`);"}, {"question_id": 1051, "answer_sql": "SELECT player_name, potential FROM Player WHERE potential = (SELECT MAX(potential) FROM Player);"}, {"question_id": 1052, "answer_sql": "SELECT COUNT(*) FROM Player WHERE weight < 130 AND preferred_foot = 'left';"}, {"question_id": 1053, "answer_sql": "SELECT team_short_name FROM Team WHERE chanceCreationPassingClass = 'Risky';"}, {"question_id": 1054, "answer_sql": "SELECT `defensive_work_rate` FROM `Player_Attributes` WHERE `player_api_id` = (SELECT `player_api_id` FROM `Player` WHERE `player_name` = 'David Wilson');"}, {"question_id": 1055, "answer_sql": "SELECT player_name, birthday FROM Player WHERE overall_rating = (SELECT MAX(overall_rating) FROM Player);"}, {"question_id": 1056, "answer_sql": "SELECT `name` FROM `League` WHERE `country_id` = (SELECT `id` FROM `Country` WHERE `name` = 'Netherlands');"}, {"question_id": 1057, "answer_sql": "SELECT AVG(home_team_goal) FROM Match WHERE name = 'Poland' and season = '2010/2011';"}, {"question_id": 1058, "answer_sql": "SELECT player_name FROM Player WHERE player_api_id IN ( SELECT home_player_11 FROM Match WHERE home_team_goal > away_team_goal UNION ALL SELECT away_player_11 FROM Match WHERE home_team_goal < away_team_goal ) ORDER BY overall_rating DESC LIMIT 1;"}, {"question_id": 1059, "answer_sql": "SELECT player_name FROM Player WHERE height > 180;"}, {"question_id": 1060, "answer_sql": "SELECT COUNT(*) FROM Player WHERE strftime('%Y', birthday) = '1990';"}, {"question_id": 1061, "answer_sql": "SELECT COUNT(*) FROM Player WHERE player_name = 'Adam' AND weight > 170 AND team_long_name = 'Team_name';"}, {"question_id": 1062, "answer_sql": "SELECT Player.player_name FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player_Attributes.overall_rating > 80 AND strftime('%Y', Player_Attributes.date) BETWEEN '2008' AND '2010';"}, {"question_id": 1063, "answer_sql": "SELECT potential FROM Player WHERE player_api_id = 1;"}, {"question_id": 1064, "answer_sql": "SELECT Player.player_name FROM Player WHERE Player.preferred_foot = 'left';"}, {"question_id": 1065, "answer_sql": "SELECT team_long_name FROM Team_Attributes WHERE buildUpPlaySpeedClass = 'Fast';"}, {"question_id": 1066, "answer_sql": "SELECT `buildUpPlayPassingClass` FROM `Team_Attributes` WHERE `team_short_name` = 'CLB';"}, {"question_id": 1067, "answer_sql": "SELECT t1.team_short_name FROM Team t1 JOIN Team_Attributes ta1 ON t1.team_api_id = ta1.team_api_id WHERE ta1.buildUpPlayPassing > 70;"}, {"question_id": 1068, "answer_sql": "SELECT AVG(overall_rating) as average_overall_rating FROM Player WHERE overall_rating > 170 AND strftime('%Y', birthday) BETWEEN '2010' AND '2015';"}, {"question_id": 1069, "answer_sql": "SELECT player_name, height FROM Player WHERE height = (SELECT MIN(height) FROM Player);"}, {"question_id": 1070, "answer_sql": "SELECT `country_id` FROM `League` WHERE `name` = 'Italy Serie A';"}, {"question_id": 1071, "answer_sql": "SELECT team_short_name FROM Team WHERE buildUpPlaySpeed = 31 AND buildUpPlayDribbling = 53 AND buildUpPlayPassing = 32;"}, {"question_id": 1072, "answer_sql": "SELECT AVG(overall_rating) FROM Player WHERE player_name = 'Aaron Doran';"}, {"question_id": 1073, "answer_sql": "SELECT COUNT(*) FROM Match WHERE `league_id` = (SELECT `id` FROM `League` WHERE `name` = 'Germany 1. Bundesliga') AND strftime('%Y-%m', `date`) BETWEEN '2008-08' AND '2008-10';"}, {"question_id": 1074, "answer_sql": "SELECT team_short_name FROM Team WHERE home_team_goal = 10;"}, {"question_id": 1075, "answer_sql": "SELECT Player.player_name FROM Player WHERE Player.balance = ( SELECT MAX(Player_Attributes.balance) FROM Player_Attributes WHERE Player_Attributes.potential = 61 )"}, {"question_id": 1076, "answer_sql": "SELECT SUBTRACT(AVG(ball_control WHERE player_name = 'Abdou Diallo'), AVG(ball_control WHERE player_name = 'Aaron Appindangoye')) as difference_of_average_ball_control FROM Match;"}, {"question_id": 1077, "answer_sql": "SELECT team_long_name FROM Team WHERE team_short_name = 'GEN';"}, {"question_id": 1078, "answer_sql": "SELECT `player_name` FROM `Player` WHERE `birthday` = ( SELECT MIN(`birthday`) FROM `Player` ) AND `player_name` IN ('Aaron Lennon', 'Abdelaziz Barrada') This SQL query will return the player with the oldest birthday and the names of the players in the list ['Aaron Lennon', 'Abdelaziz Barrada']."}, {"question_id": 1079, "answer_sql": "SELECT player_name, height FROM Player WHERE height = (SELECT MAX(height) FROM Player);"}, {"question_id": 1080, "answer_sql": "SELECT COUNT(*) FROM Player_Attributes WHERE preferred_foot = 'left' AND attacking_work_rate = 'low';"}, {"question_id": 1081, "answer_sql": "SELECT `name` FROM `League` WHERE `name` = 'Belgium Jupiler League';"}, {"question_id": 1082, "answer_sql": "SELECT DISTINCT League.name FROM League JOIN Country ON League.country_id = Country.id WHERE Country.name = 'Germany';"}, {"question_id": 1083, "answer_sql": "SELECT player_name, overall_rating FROM Player_Attributes ORDER BY overall_rating DESC LIMIT 1;"}, {"question_id": 1084, "answer_sql": "SELECT COUNT(*) FROM Player WHERE strftime('%Y', birthday) < '1986' AND defensive_work_rate = 'high';"}, {"question_id": 1085, "answer_sql": "SELECT player_name, overall_rating, potential FROM Player_Attributes WHERE crossing = (SELECT MAX(crossing) FROM Player_Attributes);"}, {"question_id": 1086, "answer_sql": "SELECT `heading_accuracy` FROM `Player_Attributes` WHERE `player_api_id` = 1;"}, {"question_id": 1087, "answer_sql": "SELECT COUNT(*) FROM Player WHERE height > 180 AND volleys > 70;"}, {"question_id": 1088, "answer_sql": "SELECT Player.player_name FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player_Attributes.volleys > 70 AND Player_Attributes.dribbling > 70;"}, {"question_id": 1089, "answer_sql": "SELECT COUNT(*) FROM Match WHERE country_id = (SELECT id FROM Country WHERE name = 'Belgium') AND season = '2008/2009';"}, {"question_id": 1090, "answer_sql": "SELECT `long_passing` FROM `Player` WHERE `birthday` = (SELECT MIN(`birthday`) FROM `Player`);"}, {"question_id": 1091, "answer_sql": "SELECT COUNT(*) FROM Match WHERE `league_id` = (SELECT `id` FROM League WHERE `name` = 'Belgium Jupiler League') AND `date` >= '2009-04-01' AND `date` <= '2009-04-30';"}, {"question_id": 1092, "answer_sql": "SELECT `name` FROM `League` WHERE `id` = (SELECT `league_id` FROM `Match` WHERE `season` = '2008/2009' ORDER BY `id` DESC LIMIT 1);"}, {"question_id": 1093, "answer_sql": "SELECT AVG(overall_rating) FROM Player WHERE strftime('%Y', birthday) < '1986';"}, {"question_id": 1094, "answer_sql": "SELECT MULTIPLY(DIVIDE(SUBTRACT(overall_rating WHERE player_name = 'Ariel Borysiuk', overall_rating WHERE player_name = 'Paulin Puel'), overall_rating WHERE player_name = 'Paulin Puel'), 100) AS percentage_higher FROM Player_Attributes WHERE player_name = 'Ariel Borysiuk';"}, {"question_id": 1095, "answer_sql": "SELECT AVG(buildUpPlaySpeed) FROM Team_Attributes WHERE team_long_name = 'Heart of Midlothian';"}, {"question_id": 1096, "answer_sql": "SELECT AVG(T1.overall_rating) FROM Player_Attributes T1 WHERE T1.player_name = 'Pietro Marino';"}, {"question_id": 1097, "answer_sql": "SELECT SUM(crossing) as total_crossing_score FROM Player WHERE player_name = 'Aaron Lennox';"}, {"question_id": 1098, "answer_sql": "SELECT MAX(chanceCreationPassing), chanceCreationPassingClass FROM Team WHERE team_long_name = 'Ajax';"}, {"question_id": 1099, "answer_sql": "SELECT preferred_foot FROM Player WHERE player_name = 'Abdou Diallo';"}, {"question_id": 1100, "answer_sql": "SELECT MAX(overall_rating) FROM Player WHERE player_name = 'Dorlan Pabon';"}, {"question_id": 1101, "answer_sql": "SELECT AVG(away_team_goal) FROM Match WHERE away_team_api_id = (SELECT team_api_id FROM Team WHERE team_long_name = 'Parma') AND country_id = (SELECT id FROM Country WHERE name = 'Italy');"}, {"question_id": 1102, "answer_sql": "SELECT player_name FROM Player WHERE overall_rating = 77 AND date = '2016/6/23' ORDER BY birthday ASC LIMIT 1;"}, {"question_id": 1103, "answer_sql": "SELECT `overall_rating` FROM `Player_Attributes` WHERE `player_api_id` = (SELECT `player_api_id` FROM `Player` WHERE `player_name` = 'Aaron Mooy') AND `date` = '2016-02-04 00:00:00';"}, {"question_id": 1104, "answer_sql": "SELECT potential FROM Player_Attributes WHERE player_name = 'Francesco Parravicini' AND date = '2010-08-30 00:00:00';"}, {"question_id": 1105, "answer_sql": "SELECT attacking_work_rate FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Francesco Migliore') AND date = '2015-05-01 00:00:00';"}, {"question_id": 1106, "answer_sql": "SELECT `defensive_work_rate` FROM `Player_Attributes` WHERE `player_name` = 'Kevin Berigaud' AND `date` = '2013-02-22 00:00:00';"}, {"question_id": 1107, "answer_sql": "SELECT date, MAX(crossing) as highest_crossing_score FROM Player_Attributes WHERE player_name = 'Kevin Constant' GROUP BY date;"}, {"question_id": 1108, "answer_sql": "SELECT `buildUpPlaySpeedClass` FROM `Team_Attributes` WHERE `team_long_name` = 'Willem II' AND `date` = '2011-02-22 00:00:00';"}, {"question_id": 1109, "answer_sql": "SELECT `buildUpPlayDribblingClass` FROM `Team_Attributes` WHERE `team_short_name` = 'LEI' AND `date` = '2015-09-10 00:00:00';"}, {"question_id": 1110, "answer_sql": "SELECT `buildUpPlayPassingClass` FROM `Team_Attributes` WHERE `team_long_name` = 'FC Lorient' AND `date` = '2010-02-22';"}, {"question_id": 1111, "answer_sql": "SELECT `buildUpPlayPassingClass` FROM `Team_Attributes` WHERE `team_long_name` = 'PEC Zwolle' AND `date` = '2013-09-20 00:00:00';"}, {"question_id": 1112, "answer_sql": "SELECT `chanceCreationCrossingClass` FROM `Team_Attributes` WHERE `team_long_name` = 'Hull City' AND `date` = '2010-02-22 00:00:00';"}, {"question_id": 1113, "answer_sql": "SELECT `defenceAggressionClass` FROM `Team_Attributes` WHERE `team_long_name` = 'Hannover 96' AND `date` = '2015-09-10 00:00:00';"}, {"question_id": 1114, "answer_sql": "SELECT AVG(overall_rating) FROM Player_Attributes WHERE player_name = 'Marko Arnautovic' AND date BETWEEN '2007-02-22 00:00:00' and '2016-04-21 00:00:00';"}, {"question_id": 1115, "answer_sql": "SELECT DIVIDE(SUBTRACT(Player_Attributes WHERE date = '2013/7/12' AND player_name = 'Landon Donovan' overall_rating;"}, {"question_id": 1116, "answer_sql": "SELECT player_name FROM Player WHERE id IN (SELECT id FROM Player WHERE height = (SELECT MAX(height) FROM Player));"}, {"question_id": 1117, "answer_sql": "SELECT `player_api_id` FROM `Player_Attributes` ORDER BY `weight` DESC LIMIT 10;"}, {"question_id": 1118, "answer_sql": "SELECT player_name FROM Player WHERE DATE_PART('year', AGE(CURRENT_TIMESTAMP, birthday)) >= 35;"}, {"question_id": 1119, "answer_sql": "SELECT home_team_goal FROM Match WHERE home_player_X1 = 1000000 AND away_player_X1 = 1000000 AND player_name = 'Aaron Lennon';"}, {"question_id": 1120, "answer_sql": "SELECT SUM(away_team_goal) FROM Match WHERE home_player_X1 = (SELECT id FROM Player WHERE player_name = 'Daan Smith') AND away_player_X1 = (SELECT id FROM Player WHERE player_name = 'Filipe Ferreira');"}, {"question_id": 1121, "answer_sql": "SELECT SUM(home_team_goal) as total_home_team_goal FROM Match WHERE SUBSTR(SUBSTR(CURRENT_TIMESTAMP, 1, 10), 1, 4) = SUBSTR(birthday, 1, 4) AND SUBSTR(SUBSTR(CURRENT_TIMESTAMP, 1, 10), 6, 2) >= SUBSTR(birthday, 6, 2) AND SUBSTR(SUBSTR(CURRENT_TIMESTAMP, 1, 10), 9, 2) <= SUBSTR(birthday, 9, 2) AND age <= 30;"}, {"question_id": 1122, "answer_sql": "SELECT `player_name` FROM `Player_Attributes` WHERE `overall_rating` = (SELECT MAX(`overall_rating`) FROM `Player_Attributes`);"}, {"question_id": 1123, "answer_sql": "SELECT player_name FROM Player WHERE player_api_id IN (SELECT player_api_id FROM Player_Attributes WHERE potential = (SELECT MAX(potential) FROM Player_Attributes));"}, {"question_id": 1124, "answer_sql": "SELECT `attacking_work_rate`, `player_name` FROM `Player_Attributes` WHERE `attacking_work_rate` = 'high';"}, {"question_id": 1125, "answer_sql": "SELECT player_name FROM Player WHERE id IN (SELECT player_api_id FROM Player WHERE `finishing` = 1) ORDER BY `birthday` DESC LIMIT 1;"}, {"question_id": 1126, "answer_sql": "SELECT Player.player_name FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id JOIN Team ON Player_Attributes.team_api_id = Team.team_api_id JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id JOIN League ON Team.team_api_id = League.team_api_id JOIN Country ON League.country_id = Country.id WHERE Country.name = 'Belgium';"}, {"question_id": 1127, "answer_sql": "SELECT Player.player_name, Country.name FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id JOIN Team ON Player_Attributes.team_api_id = Team.team_api_id JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id JOIN League ON Team.team_api_id = League.team_api_id JOIN Country ON League.country_id = Country.id WHERE Player_Attributes.vision > 89;"}, {"question_id": 1128, "answer_sql": "SELECT `Country`.`name` FROM `Player_Attributes` JOIN `Player` ON `Player`.`player_api_id` = `Player_Attributes`.`player_api_id` JOIN `Team_Attributes` ON `Team_Attributes`.`team_api_id` = `Player`.`team_api_id` JOIN `Team` ON `Team`.`team_api_id` = `Team_Attributes`.`team_api_id` JOIN `Country` ON `Country`.`id` = `Team`.`country_id` WHERE `Player_Attributes`.`weight` = ( SELECT MAX(`weight`) FROM `Player_Attributes` WHERE `Player_Attributes`.`team_api_id` = `Team_Attributes`.`team_api_id` ) GROUP BY `Country`.`name` ORDER BY `Country`.`name`;"}, {"question_id": 1129, "answer_sql": "SELECT team_long_name FROM Team WHERE buildUpPlaySpeedClass = 'Slow';"}, {"question_id": 1130, "answer_sql": "SELECT team_short_name FROM Team WHERE chanceCreationPassingClass = 'Safe';"}, {"question_id": 1131, "answer_sql": "SELECT AVG(height) FROM Player WHERE country_id = (SELECT id FROM Country WHERE name = 'Italy');"}, {"question_id": 1132, "answer_sql": "SELECT player_name FROM Player WHERE height > 180 ORDER BY player_name ASC LIMIT 3;"}, {"question_id": 1133, "answer_sql": "SELECT COUNT(*) FROM Player WHERE player_name LIKE 'Aaron%' AND birthday > '1990';"}, {"question_id": 1134, "answer_sql}, {"question_id": 1135, "answer_sql": "SELECT `player_api_id` FROM `Player_Attributes` WHERE `potential` = (SELECT MIN(`potential`) FROM `Player_Attributes`) AND `preferred_foot` = 'right' LIMIT 3;"}, {"question_id": 1136, "answer_sql": "SELECT COUNT(*) as Number of Players FROM Player WHERE `crossing` = (SELECT MAX(`crossing`)) AND `preferred_foot` = 'left';"}, {"question_id": 1137, "answer_sql": "SELECT COUNT(*) FROM Player WHERE strength > 80 AND stamina > 80;"}, {"question_id": 1138, "answer_sql": "SELECT `Country`.`name` FROM `League` JOIN `Country` ON `League`.`country_id` = `Country`.`id` WHERE `League`.`name` = 'Poland Ekstraklasa' This SQL query will return the name of the country where the Poland Ekstraklasa took place."}, {"question_id": 1139, "answer_sql": "SELECT home_team_goal, away_team_goal FROM Match WHERE date = '2008-09-24' AND home_team_api_id = 1 AND away_team_api_id = 2;"}, {"question_id": 1140, "answer_sql": "SELECT sprint_speed, agility, acceleration FROM Player WHERE player_name = 'Alexis Blin';"}, {"question_id": 1141, "answer_sql": "SELECT buildUpPlaySpeedClass FROM Team WHERE team_long_name = 'KSV Cercle Brugge';"}, {"question_id": 1142, "answer_sql": "SELECT COUNT(*) FROM Match WHERE season = '2015/2016';"}, {"question_id": 1143, "answer_sql": "SELECT MAX(home_team_goal) as Highest_Score FROM Match WHERE home_team_api_id IN (SELECT team_api_id FROM Team WHERE team_short_name = 'Netherlands') AND league_id IN (SELECT id FROM League WHERE name = 'Eredivisie');"}, {"question_id": 1144, "answer_sql": "SELECT player_name, overall_rating, finishing, curve FROM Player WHERE weight = (SELECT MAX(weight) FROM Player);"}, {"question_id": 1145, "answer_sql": "SELECT L.name AS League , COUNT(M.id) AS Games FROM League L JOIN Match M ON L.id = M.league_id WHERE M.season = '2015/2016' GROUP BY L.name ORDER BY Games DESC LIMIT 1;"}, {"question_id": 1146, "answer_sql": "SELECT team_long_name FROM Team WHERE team_api_id = (SELECT away_team_api_id FROM Match WHERE home_team_goal < MAX(away_team_goal));"}, {"question_id": 1147, "answer_sql": "SELECT player_name FROM Player WHERE player_api_id = (SELECT MAX(player_api_id) FROM Player);"}, {"question_id": 1148, "answer_sql": "SELECT COUNT(id) / (SELECT COUNT(*) FROM Player WHERE height < 180) * 100 AS percentage FROM Player WHERE overall_rating > 70;"}, {"question_id": 1149, "answer_sql": "SELECT SUBTRACT(COUNT(ID) where SEX = 'M' and Admission = '+'), SUBTRACT(COUNT(ID) where SEX = 'M' and Admission = '-'), (SUBTRACT(COUNT(ID) where SEX = 'M' and Admission = '+') / (SUBTRACT(COUNT(ID) where SEX = 'M' and Admission = '+') + SUBTRACT(COUNT(ID) where SEX = 'M' and Admission = '-'))) * 100 FROM Patient WHERE SEX = 'M';"}, {"question_id": 1150, "answer_sql": "SELECT (COUNT(ID) where SEX = 'F' and year(Birthday) > '1930') / (COUNT(ID) where SEX = 'F') * 100 as percentage"}, {"question_id": 1151, "answer_sql": "SELECT (SELECT COUNT(*) FROM Patient WHERE Birthday BETWEEN '1930-01-01' AND '1940-12-31') * 100.0 / (SELECT COUNT(*) FROM Patient) AS Percentage_Inpatient FROM Patient;"}, {"question_id": 1152, "answer_sql": "SELECT DIVIDE(COUNT(Patient.ID) where Patient.Diagnosis = 'SLE' and Patient.Admission = '+'), COUNT(Patient.ID) where Patient.Diagnosis = 'SLE' and Patient.Admission = '-' FROM Patient ```"}, {"question_id": 1153, "answer_sql": "SELECT Patient.Diagnosis, Laboratory.Date FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.ID = 30609 ORDER BY Laboratory.Date;"}, {"question_id": 1154, "answer_sql": "SELECT `SEX`, `Birthday` FROM Patient WHERE ID = 163109;"}, {"question_id": 1155, "answer_sql": "SELECT Patient.ID, Patient.SEX, Patient.Birthday FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.LDH > 500;"}, {"question_id": 1156, "answer_sql": "SELECT Patient.ID, (SUBTRACT(year(current_timestamp), year(Patient.Birthday))) as Age FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.RVVT = '+'"}, {"question_id": 1157, "answer_sql": "SELECT Patient.ID, Patient.SEX, Patient.Diagnosis FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.Thrombosis = 2;"}, {"question_id": 1158, "answer_sql": "SELECT P.ID, P.SEX, P.Birthday, P.Description, P.`First Date`, P.Admission, P.Diagnosis FROM Patient P WHERE P.Birthday = '1937' AND P.`T-CHO` >= '250';"}, {"question_id": 1159, "answer_sql": "SELECT Patient.ID, Patient.SEX, Patient.Diagnosis FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.ALB < 3.5;"}, {"question_id": 1160, "answer_sql": "SELECT DIVIDE(COUNT(Patient.ID), (SELECT COUNT(ID) FROM Patient WHERE Sex = 'F')) * 100 FROM Patient WHERE Sex = 'F' AND TP < '6.0' OR TP > '8.5';"}, {"question_id": 1161, "answer_sql": "SELECT AVG(aCL IgG) FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE SUBTRACT(year(current_timestamp), year(Birthday)) >= '50';"}, {"question_id": 1162, "answer_sql": "SELECT COUNT(*) FROM Patient WHERE SEX = 'F' AND YEAR(Description) = '1997' AND Admission = '-';"}, {"question_id": 1163, "answer_sql": "SELECT SUBSTR(SUBSTR(`First Date`, 1, 4), 3, 2) as Age FROM Patient ORDER BY `First Date` ASC LIMIT 1;"}, {"question_id": 1164, "answer_sql": "SELECT COUNT(*) FROM Patient WHERE `First Date` = '1997-01-01' AND Symptoms = 'Thrombosis = 1' AND SEX = 'F';"}, {"question_id": 1165, "answer_sql": "SELECT MIN(year(Birthday)) - MAX(year(Birthday)) as Age_Gap FROM Patient WHERE `T-CHO` >= 200 AND `T-CHO` IS NOT NULL;"}, {"question_id": 1166, "answer_sql": "SELECT Patient.ID, Patient.SEX, Patient.Birthday, Patient.Description, Patient.`First Date`, Patient.Admission, Patient.Diagnosis FROM Patient WHERE Patient.Birthday = (SELECT MIN(Examination.Examination Date) FROM Examination);"}, {"question_id": 1167, "answer_sql": "SELECT DATE_FORMAT(Date, '%Y-%m') AS MonthYear, COUNT(ID) AS TotalPatients FROM Laboratory WHERE SEX = 'M' AND Date BETWEEN '1998-01-01' AND '1998-12-31' GROUP BY MonthYear ORDER BY MonthYear;"}, {"question_id": 1168, "answer_sql": "SELECT `First Date`, year(`First Date`) - year(Birthday) as Age FROM Patient WHERE Diagnosis = 'SJS' ORDER BY `First Date` ASC LIMIT 1;"}, {"question_id": 1169, "answer_sql": "SELECT DIVIDE(SUM(UA <= '8.0' and SEX = 'M'), SUM(UA <= '6.5' and SEX = 'F')) as Ratio FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID;"}, {"question_id": 1170, "answer_sql": "SELECT COUNT(*) FROM Patient WHERE ID NOT IN (SELECT Patient.ID FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.`Examination Date` > `First Date` + INTERVAL 1 YEAR)"}, {"question_id": 1171, "answer_sql": "SELECT COUNT(*) FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Patient.Birthday < '1990-01-01' AND Examination.`Examination Date` BETWEEN '1990-01-01' AND '1993-12-31';"}, {"question_id": 1172, "answer_sql": "SELECT COUNT(*) FROM Patient WHERE SEX = 'M' AND `T-BIL` > '2.0';"}, {"question_id": 1173, "answer_sql": "SELECT Diagnosis FROM Examination WHERE `Examination Date` BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY Diagnosis ORDER BY COUNT(Diagnosis) DESC LIMIT 1;"}, {"question_id": 1174, "answer_sql": "SELECT AVG(SUBSTR(YEAR(Birthday), 3, 2)) as Average_Age FROM Patient WHERE `First Date` BETWEEN '1991-10-01' AND '1991-10-30';"}, {"question_id": 1175, "answer_sql": "SELECT P.ID, P.Birthday, P.Description, P.`First Date`, P.Admission, P.Diagnosis FROM Patient P WHERE P.ID = (SELECT Patient.ID FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.HGB = (SELECT MAX(Laboratory.HGB) FROM Laboratory WHERE Laboratory.Date = (SELECT MAX(`Examination Date`) FROM Examination WHERE Examination.ID = Patient.ID)));"}, {"question_id": 1176, "answer_sql": "SELECT `aCL IgG` FROM Examination WHERE ID = 3605340 AND `Examination Date` = '1996-12-02';"}, {"question_id": 1177, "answer_sql": "SELECT L.TP, L.ALB, L.UA, L.UN, L.CRE, L.`T-BIL`, L.`T-CHO`, L.TG, L.CPK, L.GLU, L.WBC, L.RBC, L.HGB, L.HCT, L.PLT, L.PT, L.APTT, L.FG, L.PIC, L.TAT, L.TAT2, L.`U-PRO`, L.IGG, L.IGA, L.IGM, L.CRP, L.RA, L.RF, L.C3, L.C4, L.RNP, L.SM, L.SSA, L.SSB, L.CENTROMEA, L.DNA, L.`DNA-II` FROM Laboratory L JOIN Examination E ON L.ID = E.ID WHERE E.ID = 2927464 AND E.`Examination Date` = '1995-09-04' AND L.TP < 250;"}, {"question_id": 1178, "answer_sql": "SELECT SEX FROM Patient WHERE Diagnosis = 'AORTITIS';"}, {"question_id": 1179, "answer_sql": "SELECT aCL IgM FROM Examination WHERE Diagnosis = 'SLE' AND `Description` = '1994-02-19'"}, {"question_id": 1180, "answer_sql": "SELECT P.SEX FROM Patient P WHERE P.ID IN (SELECT Examination.ID FROM Examination WHERE Examination.`Examination Date` = '1992-06-12' AND Examination.GPT = '9') AND P.SEX IN ('M', 'F');"}, {"question_id": 1181, "answer_sql": "SELECT SUBTRACT('1992', year(Patient.Birthday)) as Age FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.UA = '8.4' AND Laboratory.Date = '1991-10-21';"}, {"question_id": 1182, "answer_sql": "SELECT COUNT(*) FROM Laboratory WHERE `First Date` = '1991-06-13' AND Diagnosis = 'SJS' AND Date = '1995-01-01';"}, {"question_id": 1183, "answer_sql": "SELECT Patient.Diagnosis FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.`Examination Date` = '1997-01-27' AND Examination.Diagnosis = 'SLE';"}, {"question_id": 1184, "answer_sql": "SELECT Symptoms FROM Examination WHERE `Examination Date` = '1993-09-02' AND `First Date` = '1959-03-01';"}, {"question_id": 1185, "answer_sql": "SELECT `T-CHO` FROM Laboratory WHERE `T-CHO` > ( SELECT `T-CHO` FROM Laboratory WHERE `T-CHO` < ( SELECT `T-CHO` FROM Laboratory WHERE Date BETWEEN '1981-11-01' AND '1981-12-31' AND Patient.Birthday = '1959-02-18' ) AND Date BETWEEN '1981-11-01' AND '1981-12-31' AND Patient.Birthday = '1959-02-18' ) AND Date BETWEEN '1981-11-01' AND '1981-12-31' AND Patient.Birthday = '1959-02-18';"}, {"question_id": 1186, "answer_sql": "SELECT P.ID FROM Patient P WHERE P.Diagnosis = 'Behcet' AND P.`First Date` > '197-1-1' AND P.`First Date` < '1998-1-1' AND P.ID IN ( SELECT Examination.ID FROM Examination WHERE Examination.`Examination Date` > '197-1-1' AND Examination.`Examination Date` < '1998-1-1' );"}, {"question_id": 1187, "answer_sql": "SELECT Patient.ID FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.`Examination Date` BETWEEN '1987-07-06' AND '1996-01-31' AND Examination.GPT > 30 AND Examination.ALB < 4;"}, {"question_id": 1188, "answer_sql": "SELECT P.ID, P.SEX, P.Birthday, P.Description, P.`First Date`, P.Admission, P.Diagnosis FROM Patient P WHERE P.SEX = 'F' AND YEAR(P.Birthday) = 1964 AND P.Admission = '+' ORDER BY P.ID;"}, {"question_id": 1189, "answer_sql": "SELECT COUNT(*) FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.Thrombosis = 2 AND Examination.`ANA Pattern` = 'S' AND Examination.`aCL IgM` > AVG(`aCL IgM`) * 1.2;"}, {"question_id": 1190, "answer_sql": "SELECT (SUM(IF(`U-PRO` > 0 AND `U-PRO` < 30, 1, 0)) * 100) / SUM(IF(`U-PRO` > 0 AND `U-PRO` < 30, 1, 0)) FROM Laboratory WHERE UA < 6.5;"}, {"question_id": 1191, "answer_sql": "SELECT (SUM(Diagnosis = 'BEHCET') / (COUNT(YEAR(`FIRST DATE`) = '1981')) * 100) as percentage FROM Patient WHERE SEX = 'M' AND YEAR(`FIRST DATE`) = '1981';"}, {"question_id": 1192, "answer_sql": "SELECT Patient.ID, Patient.SEX, Patient.Birthday, Patient.Description, Patient.`First Date`, Patient.Admission, Patient.Diagnosis FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.Date LIKE '1991-10%' AND Laboratory.`T-BIL` < 2.0;"}, {"question_id": 1193, "answer_sql": "SELECT COUNT(*) FROM Patient P WHERE P.SEX = 'F' AND P.Birthday BETWEEN '1980-01-01' AND '1989-12-31' AND P.`ANA Pattern` != 'p';"}, {"question_id": 1194, "answer_sql": "SELECT Patient.SEX FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Examination.Diagnosis = 'PSS' AND Laboratory.CRP > 2 AND Laboratory.CRE = 1 AND Laboratory.LDH = 123;"}, {"question_id": 1195, "answer_sql": "SELECT AVG(ALB) FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE SEX = 'F' AND PLT > 400 AND Diagnosis = 'SLE';"}, {"question_id": 1196, "answer_sql": "SELECT MAX(Symptoms) as Most_Common_Symptom FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Diagnosis = 'SLE';"}, {"question_id": 1197, "answer_sql": "SELECT `Description`, Diagnosis FROM Patient WHERE ID = 48473"}, {"question_id": 1198, "answer_sql": "SELECT COUNT(*) FROM Patient WHERE SEX = 'F' AND Diagnosis = 'APS';"}, {"question_id": 1199, "answer_sql": "SELECT COUNT(*) FROM Patient WHERE `First Date` >= '1997-01-01' AND `First Date` <= '1997-12-31' AND `TP` > 8.5 AND `TP` < 6;"}, {"question_id": 1200, "answer_sql": "SELECT (SUM(Examination.Thrombosis = 1)) / (SUM(Examination.Thrombosis = 1) + SUM(Examination.Thrombosis = 0)) * 100 AS Thrombosis_Proportion FROM Examination JOIN Patient ON Examination.ID = Patient.ID WHERE Patient.Diagnosis LIKE '%ITP%' AND Patient.Diagnosis LIKE '%SLE%';"}, {"question_id": 1201, "answer_sql": "SELECT (SELECT COUNT(*) FROM Patient WHERE YEAR(BIRTHDAY) = '1980' AND diagnosis = 'RA') * 1.0 / (SELECT COUNT(*) FROM Patient WHERE YEAR(BIRTHDAY) = '1980' AND SEX = 'F' AND diagnosis = 'RA') * 100 AS percentage FROM Patient;"}, {"question_id": 1202, "answer_sql": "SELECT COUNT(*) FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.SEX = 'M' AND Examination.`Examination Date` BETWEEN '1995-01-01' AND '1995-12-31' AND Laboratory.Date BETWEEN '1995-01-01' AND '1995-12-31' AND Examination.Diagnosis = 'BEHCET' AND Patient.Admission != '-' AND Patient.`First Date` BETWEEN '1995-01-01' AND '1995-12-31';"}, {"question_id": 1203, "answer_sql": "SELECT COUNT(*) FROM Patient WHERE SEX = 'F' AND WBC < 3.5;"}, {"question_id": 1204, "answer_sql": "SELECT DATEDIFF(`Examination Date`, `First Date`) FROM Patient WHERE ID = 821298;"}, {"question_id": 1205, "answer_sql": "SELECT UA FROM Laboratory WHERE ID = 57266 AND `T-CHO` = 0 AND UA > 6.5 AND SEX = 'F';"}, {"question_id": 1206, "answer_sql": "SELECT Laboratory.Date FROM Laboratory JOIN Patient ON Laboratory.ID = Patient.ID WHERE Patient.ID = 48473 AND Laboratory.GOT >= 60;"}, {"question_id": 1207, "answer_sql": "SELECT Patient.ID, Patient.SEX, Patient.Birthday FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.Date = '1994-01-01' AND Laboratory.GOT < 60;"}, {"question_id": 1208, "answer_sql": "The SQL query to answer the question would be: ```sql SELECT Patient.ID FROM Patient WHERE Patient.SEX = 'M' AND Patient.`First Date` IS NOT NULL AND Patient.Diagnosis = 'ALT glutamic pylvic transaminase (GPT)' AND Patient.`First Date` <= '2022-01-01' AND Patient.`First Date` >= '2022-01-01' AND Patient.`First Date` >= '2022-01-01' AND Patient.`First Date` <= '2022-01-01' AND Patient.`First Date` >= '2022-01-01' AND Patient.`First Date` >= '2022-01-01' AND Patient.`First Date` <= '2022-01-01' AND Patient.`First Date` >= '2022-01-01' AND Patient.`First Date` <= '2022-01-01' AND Patient.`First Date` >= '2022-01-01' AND Patient.`First Date` <= '2022-01-01' AND Patient.`First Date` >= '2022-01-01' AND Patient.`First Date` <= '2022-01-01' AND Patient.`First Date` >= '2022-01-01' AND Patient.`First Date` <= '2022-01-01' AND Patient.`First Date` >= '2022-01-01' AND Patient.`First Date` <= '2022-01-01' AND Patient.`First Date` >= '2022-01-01' AND Patient.`First Date` <= '2022-01-01' AND Patient.`First Date` >= '2022-01-01' AND Patient.`First Date` <= '2022-01-01' AND Patient.`First Date"}, {"question_id": 1209, "answer_sql": "SELECT Patient.ID, Patient.SEX, Patient.Birthday, Patient.Description, Patient.`First Date`, Patient.Admission, Patient.Diagnosis FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.`aCL IgG` > 60 ORDER BY Patient.Birthday ASC;"}, {"question_id": 1210, "answer_sql": "SELECT AVG(LDH) FROM Laboratory WHERE LDH < 500;"}, {"question_id": 1211, "answer_sql": "SELECT Patient.ID, (SUBTRACT(year(current_timestamp), year(Patient.Birthday))) as Age FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.LDH BETWEEN 600 AND 800 AND Patient.ID = ( SELECT Patient.ID FROM Patient WHERE (SUBTRACT(year(current_timestamp), year(Patient.Birthday))) BETWEEN 20 AND 40 );"}, {"question_id": 1212, "answer_sql": "SELECT Patient.Admission FROM Patient WHERE ALP BETWEEN 200 AND 300;"}, {"question_id": 1213, "answer_sql": "SELECT Patient.ID FROM Patient WHERE Patient.Birthday = '1982-04-01' AND Patient.ALP < 300;"}, {"question_id": 1214, "answer_sql": "SELECT Patient.ID, Patient.SEX, Patient.Birthday FROM Patient WHERE Laboratory.TP < 6.0;"}, {"question_id": 1215, "answer_sql": "SELECT SUBSTR(TP, 1, 10) AS 'TP Index', SUBSTR(TP, 11, 10) AS 'Deviation' FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE SEX = 'F' AND TP > 8.5;"}, {"question_id": 1216, "answer_sql": "SELECT * FROM Patient WHERE SEX = 'M' AND ALB < 3.5 OR ALB > 5.5 ORDER BY Birthday DESC;"}, {"question_id": 1217, "answer_sql": "SELECT Patient.ID, Patient.SEX, Patient.Birthday, Patient.Description, Patient.`First Date`, Patient.Admission, Patient.Diagnosis, Laboratory.ALB FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE YEAR(Patient.Birthday) = 1982 AND Laboratory.ALB BETWEEN 3.5 AND 5.5 ORDER BY Patient.ID;"}, {"question_id": 1218, "answer_sql": "SELECT COUNT(*) as 'Female_Patients_Above_8_UA' FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE SEX = 'F' AND UA > 8.0;"}, {"question_id": 1219, "answer_sql": "SELECT AVG(Laboratory.UA) FROM Laboratory JOIN Patient ON Laboratory.ID = Patient.ID WHERE Patient.SEX = 'M' AND Laboratory.UA < 8.0 OR Patient.SEX = 'F' AND Laboratory.UA < 6.5;"}, {"question_id": 1220, "answer_sql": "The SQL query to answer the question would be: ```sql SELECT Patient.ID, Patient.SEX, Patient.Birthday FROM Patient WHERE Patient.`First Date` IS NOT NULL AND Patient.Diagnosis = 'No Thrombosis' AND Patient.`First Date` <= '2022-01-01' AND Patient.`First Date` >= '2022-01-01' AND Patient.`First Date` >= '2022-01-01' AND Patient.`First Date` <= '2022-01-01' AND Patient.`First Date` >= '2022-01-01' AND Patient.`First Date` <= '2022-01-01' AND Patient.`First Date` >= '2022-01-01' AND Patient.`First Date` <= '2022-01-01' AND Patient.`First Date` >= '2022-01-01' AND Patient.`First Date` <= '2022-01-01' AND Patient.`First Date` >= '2022-01-01' AND Patient.`First Date` <= '2022-01-01' AND Patient.`First Date` >= '2022-01-01' AND Patient.`First Date` <= '2022-01-01' AND Patient.`First Date` >= '2022-01-01' AND Patient.`First Date` <= '2022-01-01' AND Patient.`First Date` >= '2022-01-01' AND Patient.`First Date` <= '2022-01-01' AND Patient.`First Date` >= '2022-01-01' AND Patient.`First Date` <= '2022-01-01' AND Patient.`First Date` >= '2022-01-01' AND Patient.`First Date` <= '2022-01-01' AND Patient.`First Date` >= '2022-"}, {"question_id": 1221, "answer_sql": "SELECT Patient.ID, Patient.SEX, Patient.Birthday FROM Patient WHERE Patient.Diagnosis = 'RA' AND Patient.UN < 30;"}, {"question_id": 1222, "answer_sql": "SELECT COUNT(*) FROM Patient WHERE Sex = 'M' AND CRE >= 1.5;"}, {"question_id": 1223, "answer_sql": "SELECT (SUM(Sex = 'M' AND CRE >= 1.5) > SUM(Sex = 'F' AND CRE >= 1.5)) as Result FROM Patient WHERE Sex in ('M', 'F');"}, {"question_id": 1224, "answer_sql": "SELECT ID, SEX, Birthday FROM Patient WHERE ID IN ( SELECT Patient.ID FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.`T-BIL` = ( SELECT MAX(`T-BIL`) FROM Laboratory ) );"}, {"question_id": 1225, "answer_sql": "SELECT P.SEX, COUNT(*) FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.`T-BIL` >= 2.0 GROUP BY P.SEX;"}, {"question_id": 1226, "answer_sql": "SELECT P.ID, MAX(L.TAT) as TAT_Index FROM Patient P JOIN Laboratory L ON P.ID = L.ID GROUP BY P.ID ORDER BY MIN(P.Birthday) ASC LIMIT 1;"}, {"question_id": 1227, "answer_sql": "SELECT AVG(YEAR(CURRENT_DATE) - YEAR(birthday)) as Average_Age FROM Patient WHERE gender = 'M' AND `T-CHO` >= 250;"}, {"question_id": 1228, "answer_sql": "SELECT P.ID, P.Diagnosis FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.TG > 300;"}, {"question_id": 1229, "answer_sql": "SELECT COUNT(*) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE TG >= 200 AND SUBTRACT(year(current_timestamp), year(Birthday)) > 50;"}, {"question_id": 1230, "answer_sql": "SELECT DISTINCT Patient.ID FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.CPK < 250 AND Laboratory.Admission = '-';"}, {"question_id": 1231, "answer_sql": "SELECT COUNT(*) FROM Patient WHERE Birthday BETWEEN '1936-01-01' AND '1956-12-31' AND sex = 'M' AND CPK >= 250;"}, {"question_id": 1232, "answer_sql": "SELECT Patient.ID, Patient.SEX, Patient.Birthday FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.GLU >= 180 AND Laboratory.`T-CHO` < 250;"}, {"question_id": 1233, "answer_sql": "SELECT Patient.ID, Laboratory.GLU FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.Date >= '1991-01-01' AND Laboratory.GLU < 180;"}, {"question_id": 1234, "answer_sql": "SELECT Patient.ID, Patient.SEX, Patient.Birthday FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.WBC <= 3.5 OR Laboratory.WBC >= 9.0 GROUP BY Patient.SEX ORDER BY Patient.Birthday ASC;"}, {"question_id": 1235, "answer_sql": "SELECT Patient.ID, (SUBTRACT(year(current_timestamp), year(Patient.Birthday))) as Age FROM Patient WHERE RBC < 3.5 AND Patient.Diagnosis = '[Diagnosis]';"}, {"question_id": 1236, "answer_sql": "SELECT Patient.ID, Patient.Admission FROM Patient WHERE Patient.Sex = 'F' AND SUBTRACT(year(current_timestamp), year(Patient.Birthday)) >= 50 AND (Laboratory.RBC < 3.5 OR Laboratory.RBC > 6.0);"}, {"question_id": 1237, "answer_sql": "SELECT Patient.ID, Patient.SEX FROM Patient WHERE Patient.Admission = '-';"}, {"question_id": 1238, "answer_sql": "SELECT Patient.ID, Patient.SEX FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.Diagnosis = 'SLE' AND Patient.Birthday = ( SELECT MIN(Birthday) FROM Patient WHERE HGB BETWEEN 10 AND 17 )"}, {"question_id": 1239, "answer_sql": "SELECT Patient.ID, (SUBSTR(CURRENT_TIMESTAMP, 1, 4) - SUBSTR(Birthday, 1, 4)) as age FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE COUNT(Laboratory.ID) > 2 AND HCT >= 52;"}, {"question_id": 1240, "answer_sql": "SELECT AVG(HCT) FROM Laboratory WHERE Date LIKE '1991%' AND HCT < 29;"}, {"question_id": 1241, "answer_sql": "SELECT SUBTRACT(SUM(PLT < 100), SUM(PLT > 400)) as 'Number of patients with lower than normal range', SUBTRACT(SUM(PLT > 400), SUM(PLT < 100)) as 'Number of patients with higher than normal range' FROM Patient JOIN Laboratory on Patient.ID = Laboratory.ID WHERE PLT is not null;"}, {"question_id": 1242, "answer_sql": "SELECT Patient.ID, Patient.SEX, Patient.Birthday, Patient.Description, Patient.`First Date`, Patient.Admission, Patient.Diagnosis FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.Date LIKE '1984%' AND SUBTRACT(year(current_timestamp), year(Patient.Birthday)) < 50 AND Laboratory.PLT BETWEEN 100 AND 400;"}, {"question_id": 1243, "answer_sql": "SELECT MULTIPLY(DIVIDE(SUM(PT >= 14 AND SEX = 'F'), SUM(PT >= 14)), 1.0) as 'Percentage' FROM Patient WHERE SUBTRACT(year(current_timestamp), year(Birthday)) > 55;"}, {"question_id": 1244, "answer_sql": "SELECT P.ID, P.SEX, P.Birthday, P.Description, P.`First Date`, P.Admission, P.Diagnosis FROM Patient P WHERE P.`First Date` > '1992-01-01' AND P.Thrombosis = 0;"}, {"question_id": 1245, "answer_sql": "SELECT COUNT(*) FROM Examination WHERE `Examination Date` > '1997-01-01' AND APTT < 45;"}, {"question_id": 1246, "answer_sql": "SELECT COUNT(DISTINCT Patient.ID) FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.APTT > 45 AND Examination.Thrombosis = 3;"}, {"question_id": 1247, "answer_sql": "SELECT COUNT(DISTINCT Patient.ID) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.Sex = 'M' AND Patient.WBC BETWEEN 3.5 AND 9.0 AND Laboratory.FG BETWEEN 150 AND 450;"}, {"question_id": 1248, "answer_sql": "SELECT COUNT(DISTINCT Patient.ID) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.Birthday > '1980-01-01' AND Laboratory.FG BETWEEN 150 AND 450;"}, {"question_id": 1249, "answer_sql": "SELECT Diagnosis FROM Patient WHERE `U-PRO` >= 30;"}, {"question_id": 1250, "answer_sql": "SELECT Patient.ID FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE `U-PRO` BETWEEN 0 AND 30 AND Diagnosis = 'SLE';"}, {"question_id": 1251, "answer_sql": "SELECT COUNT(*) FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Laboratory.GOT < 900 AND Examination.Symptoms = 'abortion';"}, {"question_id": 1252, "answer_sql": "SELECT COUNT(*) FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE `aCL IgG` BETWEEN 900 AND 2000 AND Symptoms IS NOT NULL;"}, {"question_id": 1253, "answer_sql": "SELECT Patient.Diagnosis FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.`aCL IgA` = ( SELECT MAX(`aCL IgA`) FROM Examination WHERE `aCL IgA` BETWEEN 80 AND 500 );"}, {"question_id": 1254, "answer_sql": "SELECT COUNT(*) FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.`aCL IgA` BETWEEN 80 AND 500 AND strftime('%Y', Examination.`First Date`) >= 1990;"}, {"question_id": 1255, "answer_sql": "SELECT Diagnosis FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.`aCL IgM` BETWEEN 40 AND 400 GROUP BY Diagnosis ORDER BY COUNT(Examination.ID) DESC LIMIT 1;"}, {"question_id": 1256, "answer_sql": "SELECT COUNT(*) FROM Patient WHERE Description IS NULL AND CRP NOT IN ('+', '-', '< 1.0');"}, {"question_id": 1257, "answer_sql": "SELECT COUNT(DISTINCT Patient.ID) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.CRP NOT IN('+-', '-') AND Laboratory.CRP >= 1.0 AND SUBSTR(YEAR(CURDATE()) - YEAR(Patient.Birthday), 1, 1) < 18;"}, {"question_id": 1258, "answer_sql": "SELECT COUNT(*) FROM Patient WHERE `Rhuematoid Factor` IN ('-', '+-') AND KCT = '+'"}, {"question_id": 1259, "answer_sql": "SELECT DISTINCT Patient.Diagnosis FROM Patient WHERE YEAR(Patient.Birthday) >= 1995 AND RA IN ('-', '+-');"}, {"question_id": 1260, "answer_sql": "SELECT Patient.ID FROM Patient WHERE RF = 'normal' AND SUBSTR(SUBSTR(CURDATE(), 1, 4), 1, 4) - SUBSTR(Birthday, 1, 4) > 60;"}, {"question_id": 1261, "answer_sql": "SELECT COUNT(*) FROM Patient WHERE RF < 20 AND Thrombosis = '0';"}, {"question_id": 1262, "answer_sql": "SELECT COUNT(DISTINCT Patient.ID) FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.`ANA Pattern` = 'P' AND Examination.C3 > 35;"}, {"question_id": 1263, "answer_sql": "SELECT Patient.ID FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.`aCL IgA` IS NOT NULL AND Examination.`aCL IgA` NOT BETWEEN 29 AND 52 AND Examination.`aCL IgA` = ( SELECT MAX(`aCL IgA`) FROM Examination WHERE Examination.`aCL IgA` NOT BETWEEN 29 AND 52 );"}, {"question_id": 1264, "answer_sql": "SELECT COUNT(*) FROM Patient WHERE C4 > 10;"}, {"question_id": 1265, "answer_sql": "SELECT COUNT(DISTINCT Patient.ID) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.RNP = '-+-' AND Laboratory.Admission = '+';"}, {"question_id": 1266, "answer_sql": "SELECT P.Birthday FROM Patient P WHERE P.Birthday = (SELECT MAX(Birthday) FROM Patient WHERE NOT (RNP IN ('-', '+-')));"}, {"question_id": 1267, "answer_sql": "SELECT COUNT(*) FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE SM = 'normal' AND antiSM = 'normal' AND Thrombosis = '1';"}, {"question_id": 1268, "answer_sql": "SELECT Patient.ID FROM Patient WHERE SM NOT IN ('-', '+-') AND Patient.Birthday = (SELECT MIN(Birthday) FROM Patient);"}, {"question_id": 1269, "answer_sql": "SELECT Examination.ID FROM Examination JOIN Patient ON Examination.ID = Patient.ID WHERE Examination.`Examination Date` >= '1997-01-01' AND Patient.SC170 IN ('-', '+-') This SQL query will return the IDs of the patients who had the examination done after 1997/1/1 and had a normal anti-scl70."}, {"question_id": 1270, "answer_sql": "SELECT COUNT(DISTINCT Patient.ID) FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE SC170 IN ('-', '+-') AND Sex = 'M' AND Symptoms = 'vertigo';"}, {"question_id": 1271, "answer_sql": "SELECT COUNT(DISTINCT Patient.ID) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.`First Date` < '1990-01-01' AND Laboratory.SSA IN('-','+');"}, {"question_id": 1272, "answer_sql": "SELECT Patient.ID FROM Patient WHERE `First Date` = ( SELECT MIN(`First Date`) FROM Patient WHERE SSA NOT IN('-', '+-') )"}, {"question_id": 1273, "answer_sql": "SELECT COUNT(*) FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Diagnosis = 'SLE' AND SM IN ('normal', '+-')"}, {"question_id": 1274, "answer_sql": "SELECT COUNT(DISTINCT Patient.ID) FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.Symptoms IS NOT NULL AND Examination.SSB IN ('-', '+-');"}, {"question_id": 1275, "answer_sql": "SELECT COUNT(*) FROM Patient WHERE CENTROMEA IN ('-', '+-') AND SSB IN ('-', '+-') AND Sex = 'M';"}, {"question_id": 1276, "answer_sql": "SELECT P.Diagnosis FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.`DNA-II` >= 8;"}, {"question_id": 1277, "answer_sql": "SELECT COUNT(*) FROM Patient WHERE Description IS NULL AND `DNA-II` < 8;"}, {"question_id": 1278, "answer_sql": "SELECT COUNT(*) FROM Patient WHERE `First Date` IS NOT NULL AND `First Date` <= CURRENT_DATE AND Symptoms LIKE '%abnormal level of anti-DNA-II%' AND Admission = '+';"}, {"question_id": 1279, "answer_sql": "SELECT MULTIPLY(DIVIDE(COUNT(ID WHERE GOT > = 60 AND Diagnosis = 'SLE'), COUNT(ID WHERE GOT > = 60)), 1.0) as 'Percentage' FROM Laboratory"}, {"question_id": 1280, "answer_sql": "SELECT COUNT(*) FROM Patient WHERE Sex = 'M' AND GOT < 60;"}, {"question_id": 1281, "answer_sql": "SELECT P.Birthday FROM Patient P WHERE P.ID IN ( SELECT P.ID FROM Patient P INNER JOIN Laboratory L ON P.ID = L.ID WHERE L.GOT >= 60 ) ORDER BY P.Birthday ASC LIMIT 1;"}, {"question_id": 1282, "answer_sql": "SELECT P.Birthday FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.GPT < 60 ORDER BY L.GPT DESC LIMIT 3;"}, {"question_id": 1283, "answer_sql": "SELECT COUNT(*) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.GOT < 60 AND Patient.Sex = 'M';"}, {"question_id": 1284, "answer_sql": "SELECT MIN(`First Date`) FROM Patient WHERE `LDH` < 500;"}, {"question_id": 1285, "answer_sql": "SELECT `First Date` FROM Patient WHERE ID=(SELECT MAX(ID) FROM Patient WHERE LDH >= 500);"}, {"question_id": 1286, "answer_sql": "SELECT COUNT(*) FROM Patient WHERE ALP >= 300 AND Admission = '+';"}, {"question_id": 1287, "answer_sql": "SELECT COUNT(*) FROM Patient WHERE `First Date` = '-';"}, {"question_id": 1288, "answer_sql": "SELECT Patient.Diagnosis FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.TP < 6.0;"}, {"question_id": 1289, "answer_sql": "SELECT COUNT(*) FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Diagnosis = 'SJS' AND TP BETWEEN 6.0 AND 8.5;"}, {"question_id": 1290, "answer_sql": "SELECT `Examination Date` FROM Examination WHERE `ALB` = (SELECT MAX(`ALB`) FROM Laboratory WHERE `ALB` > 3.5 AND `ALB` < 5.5);"}, {"question_id": 1291, "answer_sql": "SELECT COUNT(*) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Sex = 'M' AND ALB > 3.5 AND ALB < 5.5 AND TP BETWEEN 6.0 AND 8.5;"}, {"question_id": 1292, "answer_sql": "SELECT `aCL IgG` FROM Patient WHERE Sex = 'F' AND UA > 6.50 ORDER BY UA DESC LIMIT 1;"}, {"question_id": 1293, "answer_sql": "SELECT MAX(ANA) as Highest_Anti_Nucleus_Ab_Conc_Level FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE CRE < 1.5;"}, {"question_id": 1294, "answer_sql": "SELECT Patient.ID FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.CRE < 1.5 AND Laboratory.aCL IgA = (SELECT MAX(aCL IgA) FROM Laboratory)"}, {"question_id": 1295, "answer_sql": "SELECT COUNT(*) FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE P.ID IN ( SELECT P.ID FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.`T-BIL` >= 2.0 ) AND E.`ANA Pattern` LIKE '%P%';"}, {"question_id": 1296, "answer_sql": "SELECT `aCL IgG` FROM Examination WHERE `T-BIL` < 2.0;"}, {"question_id": 1297, "answer_sql": "SELECT COUNT(*) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.`T-CHO` >= 250 AND Laboratory.KCT = '-' ;"}, {"question_id": 1298, "answer_sql": "SELECT COUNT(*) FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE T-CHO < 250 AND ANA Pattern = 'P';"}, {"question_id": 1299, "answer_sql": "SELECT COUNT(*) FROM Patient WHERE TG < 200 AND Symptoms IS NOT NULL;"}, {"question_id": 1300, "answer_sql": "SELECT Diagnosis FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE TG < 200 ORDER BY TG DESC LIMIT 1;"}, {"question_id": 1301, "answer_sql": "SELECT Patient.ID FROM Patient LEFT JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.CPK < 250 AND Thrombosis = 0;"}, {"question_id": 1302, "answer_sql": "SELECT COUNT(*) FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Creatinine_Phosphokinase < 250 AND (KCT = '+' OR RVVT = '+' OR LAC = '+')"}, {"question_id": 1303, "answer_sql": "SELECT MIN(Birthday) FROM Patient WHERE GLU > 180;"}, {"question_id": 1304, "answer_sql": "SELECT COUNT(*) FROM Patient WHERE GLU < 180 AND Thrombosis = 0;"}, {"question_id": 1305, "answer_sql": "SELECT COUNT(*) FROM Patient WHERE Admission = '+';"}, {"question_id": 1306, "answer_sql": "SELECT COUNT(*) FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Diagnosis = 'SLE' AND WBC BETWEEN 3.5 AND 9.0;"}, {"question_id": 1307, "answer_sql": "SELECT Patient.ID FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.RBC >= 3.5 AND Laboratory.RBC <= 6.0 AND Patient.Admission = '-';"}, {"question_id": 1308, "answer_sql": "SELECT COUNT(*) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE PLT > 100 AND PLT < 400 AND Diagnosis IS NOT NULL;"}, {"question_id": 1309, "answer_sql": "SELECT PLT FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Diagnosis = 'MCTD' AND PLT > 100 AND PLT < 400;"}, {"question_id": 1310, "answer_sql": "SELECT AVG(PT) FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Sex = 'M' AND PT < 14;"}, {"question_id": 1311, "answer_sql": "SELECT COUNT(*) FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Thrombosis = 2 AND `PT < 14`;"}, {"question_id": 1312, "answer_sql": "SELECT major_name FROM member WHERE first_name = 'Angela' AND last_name = 'Sanders';"}, {"question_id": 1313, "answer_sql": "SELECT COUNT(*) FROM member WHERE link_to_major = 'Engineering';"}, {"question_id": 1314, "answer_sql": "SELECT first_name || ' ' || last_name AS full_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'Art and Design';"}, {"question_id": 1315, "answer_sql": "SELECT COUNT(*) FROM attendance JOIN member ON attendance.link_to_member = member.member_id JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer';"}, {"question_id": 1316, "answer_sql": "SELECT phone FROM member WHERE link_to_major = '1' AND link_to_event = '1';"}, {"question_id": 1317, "answer_sql": "SELECT COUNT(*) FROM member JOIN attendance ON member.member_id = attendance.link_to_member JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer' AND member.t_shirt_size = 'Medium';"}, {"question_id": 1318, "answer_sql": "SELECT event_name FROM event JOIN attendance ON event.event_id = attendance.link_to_event GROUP BY event.event_name ORDER BY COUNT(attendance.link_to_event) DESC LIMIT 1;"}, {"question_id": 1319, "answer_sql": "SELECT college FROM member WHERE position = 'Vice President' AND link_to_major = (SELECT major_id FROM major WHERE major_name = 'Student_Club');"}, {"question_id": 1320, "answer_sql": "SELECT event_name FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id WHERE member.first_name = 'Maya' AND member.last_name = 'Mclean';"}, {"question_id": 1321, "answer_sql": "SELECT COUNT(*) FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN event ON attendance.link_to_event = event.event_id WHERE member.first_name = 'Sacha' AND member.last_name = 'Harrison' AND YEAR(event.event_date) = 2019;"}, {"question_id": 1322, "answer_sql": "SELECT COUNT(*) FROM event WHERE type = 'Meeting' AND (SELECT COUNT(*) FROM attendance WHERE link_to_event = event.event_id) > 10;"}, {"question_id": 1323, "answer_sql": "SELECT event_name FROM event WHERE COUNT(event_id) > 20 This SQL query will return the names of all the events that had an attendance of over 20 students."}, {"question_id": 1324, "answer_sql": "SELECT AVG(attendance) FROM (SELECT COUNT(DISTINCT event_name) as attendance FROM event WHERE YEAR(event_date) = 2020 AND type = 'Meeting') as meeting_attendance;"}, {"question_id": 1325, "answer_sql": "SELECT MAX(cost) FROM expense WHERE expense_description LIKE '%support of club events%';"}, {"question_id": 1326, "answer_sql": "SELECT COUNT(*) FROM member WHERE link_to_major = 'Environmental Engineering';"}, {"question_id": 1327, "answer_sql": "SELECT first_name || ' ' || last_name AS full_name FROM member JOIN attendance ON member.member_id = attendance.link_to_member WHERE event_name = 'Laugh Out Loud';"}, {"question_id": 1328, "answer_sql": "SELECT last_name FROM member WHERE link_to_major = (SELECT major_id FROM major WHERE major_name = 'Law and Constitutional Studies');"}, {"question_id": 1329, "answer_sql": "SELECT county FROM zip_code WHERE short_state = 'TN' AND city = 'Sherri Ramsey';"}, {"question_id": 1330, "answer_sql": "SELECT college FROM major WHERE major_id = (SELECT link_to_major FROM member WHERE first_name = 'Tyler' AND last_name = 'Hewitt');"}, {"question_id": 1331, "answer_sql": "SELECT amount FROM income WHERE source = 'Vice President';"}, {"question_id": 1332, "answer_sql": "SELECT SUM(amount) FROM budget WHERE category = 'Food' AND event_name = 'September Meeting';"}, {"question_id": 1333, "answer_sql": "SELECT zip_code.city, zip_code.state FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'President'"}, {"question_id": 1334, "answer_sql": "SELECT first_name || ' ' || last_name AS full_name FROM member JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.state = 'IL';"}, {"question_id": 1335, "answer_sql": "SELECT SUM(amount) FROM budget WHERE category = 'Advertisement' AND event_name = 'September Meeting';"}, {"question_id": 1336, "answer_sql": "SELECT major.department FROM major JOIN member ON major.major_id = member.link_to_major JOIN student_club.attendance ON member.member_id = attendance.link_to_member JOIN attendance ON attendance.link_to_event = 'Pierce' WHERE member.first_name = 'Pierce' OR member.last_name = 'Guidi'"}, {"question_id": 1337, "answer_sql": "SELECT SUM(amount) as total_budgeted_amount FROM budget WHERE event_status = 'October Speaker';"}, {"question_id": 1338, "answer_sql": "SELECT COUNT(*) FROM expense WHERE link_to_budget IN (SELECT budget_id FROM budget WHERE event_status = 'approved' AND event_date = '2019-10-08' AND event_name = 'October Meeting') AND approved = True;"}, {"question_id": 1339, "answer_sql": "SELECT AVG(cost) as average_cost FROM expense WHERE MONTH(expense_date) IN (9, 10) AND link_to_member = 'Elijah Allen';"}, {"question_id": 1340, "answer_sql": "SELECT SUBSTR(event_id, 1, 1) AS event_type, SUM(spent) AS total_spent FROM (SELECT event_id, SUM(spent) AS spent FROM (SELECT event_id, SUM(spent) AS spent FROM budget WHERE event_status = 'approved' AND YEAR(expense_date) IN (2019, 2020) GROUP BY event_id) AS subquery GROUP BY event_id) AS subquery2 GROUP BY event_type HAVING total_spent > 0;"}, {"question_id": 1341, "answer_sql": "SELECT location FROM event WHERE event_name = 'Spring Budget Review';"}, {"question_id": 1342, "answer_sql": "SELECT cost FROM budget WHERE category = 'Poster' AND event_date = '2019-09-04';"}, {"question_id": 1343, "answer_sql": "SELECT remaining FROM budget WHERE category = 'Food';"}, {"question_id": 1344, "answer_sql": "SELECT notes FROM income WHERE date_received = '2019-09-14' AND source = 'Fundraising';"}, {"question_id": 1345, "answer_sql": "SELECT COUNT(*) FROM major WHERE college = 'College of Humanities and Social Sciences';"}, {"question_id": 1346, "answer_sql": "SELECT phone FROM member WHERE first_name = 'Carlo' AND last_name = 'Jacobs';"}, {"question_id": 1347, "answer_sql": "SELECT county FROM zip_code WHERE city = 'Adela O''Gallagher';"}, {"question_id": 1348, "answer_sql": "SELECT COUNT(*) FROM budget WHERE event_status = 'exceeded' AND link_to_event = 'November Meeting';"}, {"question_id": 1349, "answer_sql": "SELECT SUM(amount) FROM budget WHERE event_name = 'September Speaker';"}, {"question_id": 1350, "answer_sql": "SELECT event_status FROM event WHERE event_name = 'Post Cards, Posters' AND event_date = '2019-8-20';"}, {"question_id": 1351, "answer_sql": "SELECT major_name FROM member WHERE member_id = (SELECT link_to_member FROM member WHERE first_name = 'Brent' AND last_name = 'Thomason');"}, {"question_id": 1352, "answer_sql": "SELECT COUNT(*) FROM member WHERE link_to_major = 'Human Development and Family Studies' AND t_shirt_size = 'Large';"}, {"question_id": 1353, "answer_sql": "SELECT zip_code.type FROM member JOIN major ON member.link_to_major = major.major_id JOIN student_club.zip_code ON member.zip = zip_code.zip_code WHERE member.first_name = 'Christof' AND member.last_name = 'Nielson';"}, {"question_id": 1354, "answer_sql": "SELECT major_name FROM major WHERE position = 'Vice President' AND link_to_major = (SELECT major_id FROM member WHERE member_id = (SELECT link_to_member FROM attendance WHERE link_to_event = 'event_id_here'));"}, {"question_id": 1355, "answer_sql": "SELECT state FROM member WHERE first_name = 'Sacha Harrison';"}, {"question_id": 1356, "answer_sql": "SELECT major.department FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'President';"}, {"question_id": 1357, "answer_sql": "SELECT date_received FROM income JOIN member ON income.link_to_member = member.member_id WHERE source = 'Dues' AND member.last_name = 'Hilton';"}, {"question_id": 1358, "answer_sql": "SELECT first_name, last_name FROM member WHERE source = 'Dues' ORDER BY date_received LIMIT 1;"}, {"question_id": 1359, "answer_sql": "SELECT DIVIDE(SUM(amount where category = 'Advertisement' and event_name = 'Yearly Kickoff'), SUM(amount event_name = 'October Meeting' and category = 'Advertisement')) as ratio FROM budget WHERE event_name = 'Yearly Kickoff';"}, {"question_id": 1360, "answer_sql": "SELECT (SUM(amount where category = 'Parking' and event_name = 'November Speaker') / COUNT(event_name = 'November Speaker')) * 100 as percentage FROM budget WHERE event_name = 'November Speaker';"}, {"question_id": 1361, "answer_sql": "SELECT SUM(cost) FROM expense WHERE expense_description = 'Pizza';"}, {"question_id": 1362, "answer_sql": "SELECT COUNT(DISTINCT city) FROM zip_code WHERE state = 'Virginia' AND county = 'Orange';"}, {"question_id": 1363, "answer_sql": "SELECT DISTINCT department FROM major WHERE college='College of Humanities and Social Sciences';"}, {"question_id": 1364, "answer_sql": "SELECT county, city, state FROM zip_code WHERE short_state = 'TX' AND zip_code = '75001';"}, {"question_id": 1365, "answer_sql": "SELECT expense_description FROM budget WHERE remaining = ( SELECT MIN(remaining) FROM budget );"}, {"question_id": 1366, "answer_sql": "SELECT member.member_id, member.first_name, member.last_name FROM member JOIN attendance ON member.member_id = attendance.link_to_member JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'October Meeting';"}, {"question_id": 1367, "answer_sql": "SELECT college FROM member m JOIN major j ON m.link_to_major = j.major_id GROUP BY college ORDER BY MAX(COUNT(major.college)) DESC LIMIT 1;"}, {"question_id": 1368, "answer_sql": "SELECT major.major_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.phone = '809-555-3360';"}, {"question_id": 1369, "answer_sql": "SELECT event_name, MAX(amount) FROM budget JOIN event ON budget.link_to_event = event.event_id GROUP BY event_name ORDER BY MAX(amount) DESC LIMIT 1;"}, {"question_id": 1370, "answer_sql": "SELECT e.expense_description FROM expense e JOIN member m ON e.link_to_member = m.member_id JOIN position p ON m.link_to_major = p.major_id WHERE p.position = 'Vice President';"}, {"question_id": 1371, "answer_sql": "SELECT COUNT(*) FROM attendance INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer';"}, {"question_id": 1372, "answer_sql": "SELECT date_received FROM income WHERE link_to_member = (SELECT member_id FROM member WHERE first_name = 'Casey' AND last_name = 'Mason');"}, {"question_id": 1373, "answer_sql": "SELECT COUNT(*) FROM member WHERE state = 'Maryland';"}, {"question_id": 1374, "answer_sql": "SELECT COUNT(*) FROM attendance WHERE link_to_member IN (SELECT member_id FROM member WHERE phone = '954-555-6240');"}, {"question_id": 1375, "answer_sql": "SELECT first_name, last_name FROM member WHERE link_to_major = 'School of Applied Sciences, Technology and Education';"}, {"question_id": 1376, "answer_sql": "SELECT event_name, MAX(DIVIDE(spent, amount)) as Spend_to_Budget_Ratio FROM event WHERE status = 'Closed' GROUP BY event_name ORDER BY Spend_to_Budget_Ratio DESC LIMIT 1;"}, {"question_id": 1377, "answer_sql": "SELECT COUNT(*) FROM member WHERE position = 'President';"}, {"question_id": 1378, "answer_sql": "SELECT MAX(spent) FROM budget;"}, {"question_id": 1379, "answer_sql": "SELECT COUNT(*) FROM event WHERE type = 'Meeting' AND YEAR(event_date) = 2020;"}, {"question_id": 1380, "answer_sql": "SELECT SUM(spent) FROM budget WHERE category = 'Food';"}, {"question_id": 1381, "answer_sql": "SELECT first_name, last_name FROM member WHERE member_id IN (SELECT link_to_member FROM attendance GROUP BY link_to_member HAVING COUNT(link_to_event) > 7)"}, {"question_id": 1382, "answer_sql": "SELECT member.first_name, member.last_name FROM member JOIN attendance ON member.member_id = attendance.link_to_member JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Community Theater' AND member.major_name = 'Interior Design';"}, {"question_id": 1383, "answer_sql": "SELECT first_name, last_name FROM member WHERE zip = (SELECT zip_code FROM zip_code WHERE state = 'South Carolina' AND city = 'Georgetown');"}, {"question_id": 1384, "answer_sql": "SELECT SUM(amount) FROM income WHERE link_to_member = (SELECT member_id FROM member WHERE first_name = 'Grant' AND last_name = 'Gilmour');"}, {"question_id": 1385, "answer_sql": "SELECT first_name, last_name FROM member WHERE income.amount > 40;"}, {"question_id": 1386, "answer_sql": "SELECT SUM(expense.cost) FROM expense JOIN event ON expense.link_to_event = event.event_id WHERE event.event_name = 'Yearly Kickoff';"}, {"question_id": 1387, "answer_sql": "SELECT member.first_name, member.last_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Yearly Kickoff';"}, {"question_id": 1388, "answer_sql": "SELECT first_name, last_name, source FROM member JOIN income ON member.member_id = income.link_to_member WHERE income.amount = (SELECT MAX(amount) FROM income)"}, {"question_id": 1389, "answer_sql": "SELECT event_name FROM event WHERE cost = (SELECT MIN(cost) FROM event);"}, {"question_id": 1390, "answer_sql": "SELECT (SUM(cost) WHERE event_name = 'Yearly Kickoff') / SUM(cost) * 100 AS percentage_cost FROM event;"}, {"question_id": 1391, "answer_sql": "SELECT SUM(major_name = 'Finance') AS finance_students, SUM(major_name = 'Physics') AS physics_students, (SUM(major_name = 'Finance') / SUM(major_name = 'Physics')) AS ratio FROM member"}, {"question_id": 1392, "answer_sql": "SELECT source FROM income WHERE date_received BETWEEN '2019-09-01' AND '2019-09-30' GROUP BY source ORDER BY SUM(amount) DESC LIMIT 1;"}, {"question_id": 1393, "answer_sql": "SELECT first_name || ' ' || last_name AS full_name, email FROM member WHERE position = 'Secretary' AND link_to_major = (SELECT major_id FROM major WHERE major_name = 'Student Club');"}, {"question_id": 1394, "answer_sql": "SELECT COUNT(*) FROM member JOIN major ON member.link_to_major = major.major_id WHERE major_name = 'Physics Teaching';"}, {"question_id": 1395, "answer_sql": "SELECT COUNT(DISTINCT link_to_member) FROM attendance JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Community Theater' AND YEAR(event.event_date) = 2019;"}, {"question_id": 1396, "answer_sql": "SELECT COUNT(*), major_name FROM attendance JOIN member ON attendance.link_to_member = member.member_id WHERE member.first_name = 'Luisa' AND member.last_name = 'Guidi';"}, {"question_id": 1397, "answer_sql": "SELECT DIVIDE(SUM(budget.spent), COUNT(budget.spent)) as average_food_spend FROM budget WHERE budget.category = 'Food' AND budget.event_status = 'Closed';"}, {"question_id": 1398, "answer_sql": "SELECT event_name FROM event WHERE category = 'Advertisement' AND spent = (SELECT MAX(spent) FROM event WHERE category = 'Advertisement');"}, {"question_id": 1399, "answer_sql": "SELECT event_name FROM event WHERE event_name = 'Women's Soccer' AND link_to_member IN ( SELECT member_id FROM member WHERE first_name = 'Maya' AND last_name = 'Mclean' );"}, {"question_id": 1400, "answer_sql": "SELECT DIVIDE(SUM(type = 'Community Service'), COUNT(event_id)) * 100 as percentage_share FROM event WHERE event_date BETWEEN '2019-01-01' and '2019-12-31';"}, {"question_id": 1401, "answer_sql": "SELECT cost FROM expense WHERE expense_description = 'Posters' AND event_name = 'September Speaker';"}, {"question_id": 1402, "answer_sql": "SELECT t_shirt_size, COUNT(t_shirt_size) as count FROM member GROUP BY t_shirt_size ORDER BY count DESC LIMIT 1;"}, {"question_id": 1403, "answer_sql": "SELECT event_name FROM event WHERE status = 'Closed' GROUP BY event_name ORDER BY MIN(remaining) DESC LIMIT 1;"}, {"question_id": 1404, "answer_sql": "SELECT SUM(expense.cost) as total_approved_expenses FROM expense JOIN budget ON expense.link_to_budget = budget.budget_id JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'October Meeting';"}, {"question_id": 1405, "answer_sql": "SELECT budget.category, budget.amount FROM budget WHERE budget.event_status = 'April Speaker' ORDER BY budget.amount ASC;"}, {"question_id": 1406, "answer_sql": "SELECT MAX(amount) FROM budget WHERE category = 'Food';"}, {"question_id": 1407, "answer_sql": "SELECT category, MAX(amount) as max_amount FROM budget WHERE category = 'Advertising' GROUP BY category ORDER BY max_amount DESC LIMIT 3;"}, {"question_id": 1408, "answer_sql": "SELECT SUM(cost) as total_cost_spent_for_parking FROM expense WHERE expense_description = 'Parking';"}, {"question_id": 1409, "answer_sql": "SELECT SUM(cost) FROM expense WHERE expense_date = '2019-08-20';"}, {"question_id": 1410, "answer_sql": "SELECT m.first_name || ' ' || m.last_name AS full_name, SUM(i.amount) AS total_cost FROM income i JOIN member m ON m.member_id = i.link_to_member WHERE m.member_id = 'rec4BLdZHS2Blfp4v' GROUP BY m.first_name, m.last_name;"}, {"question_id": 1411, "answer_sql": "SELECT expense_description FROM expense WHERE link_to_member = 'Sacha Harrison';"}, {"question_id": 1412, "answer_sql": "SELECT expense_description FROM expense WHERE t_shirt_size = 'X-Large' AND approved = 'Yes';"}, {"question_id": 1413, "answer_sql": "SELECT zip_code.zip_code FROM zip_code JOIN member ON member.zip = zip_code.zip_code WHERE member.income.amount < 50;"}, {"question_id": 1414, "answer_sql": "SELECT major_name FROM member WHERE first_name = 'Phillip' AND last_name = 'Cullen';"}, {"question_id": 1415, "answer_sql": "SELECT position FROM member WHERE link_to_major = 'Business';"}, {"question_id": 1416, "answer_sql": "SELECT COUNT(*) FROM member WHERE link_to_major = 'Business' AND t_shirt_size = 'Medium';"}, {"question_id": 1417, "answer_sql": "SELECT e.event_name FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE b.remaining > 30;"}, {"question_id": 1418, "answer_sql": "SELECT event_name FROM event WHERE location = 'MU 215';"}, {"question_id": 1419, "answer_sql": "SELECT event.event_name FROM event WHERE event.event_date = '2020-03-24T12:00:00';"}, {"question_id": 1420, "answer_sql": "SELECT major_name FROM member WHERE position = 'Vice President' AND link_to_major IS NOT NULL;"}, {"question_id": 1421, "answer_sql": "SELECT (SUM(position = 'Member' and major_name = 'Mathematics') / COUNT(member_id)) * 100 as percentage FROM member"}, {"question_id": 1422, "answer_sql": "SELECT event_name FROM event WHERE location = 'MU 215';"}, {"question_id": 1423, "answer_sql": "SELECT COUNT(*) FROM income WHERE amount = 50;"}, {"question_id": 1424, "answer_sql": "SELECT COUNT(*) FROM member WHERE t_shirt_size = 'X-Large';"}, {"question_id": 1425, "answer_sql": "SELECT COUNT(*) FROM major WHERE department = 'School of Applied Sciences' AND college = 'The College of Agriculture and Applied Sciences';"}, {"question_id": 1426, "answer_sql": "SELECT last_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE major_name = 'Environmental Engineering';"}, {"question_id": 1427, "answer_sql": "SELECT b.category FROM budget b JOIN event e ON b.link_to_event = e.event_id WHERE e.location = 'MU 215' AND e.type = 'Guest Speaker' AND b.spent = 0;"}, {"question_id": 1428, "answer_sql": "SELECT city, state FROM member JOIN major ON member.link_to_major = major.major_id WHERE department = 'Electrical and Computer Engineering' AND position = 'Member';"}, {"question_id": 1429, "answer_sql": "SELECT event_name FROM event WHERE type = 'Social' AND location = '900 E. Washington St.' AND status = 'Attended' AND link_to_member IN (SELECT member_id FROM member WHERE position = 'Vice President');"}, {"question_id": 1430, "answer_sql": "SELECT last_name, position FROM member JOIN attendance ON member.member_id = attendance.link_to_member JOIN expense ON attendance.link_to_expense = expense.expense_id WHERE expense.expense_description = 'Pizza' AND expense.expense_date = '2019-09-10';"}, {"question_id": 1431, "answer_sql": "SELECT last_name FROM member JOIN attendance ON member.member_id = attendance.link_to_member WHERE event_name = 'Women's Soccer' AND position = 'Member';"}, {"question_id": 1432, "answer_sql": "SELECT DIVIDE(COUNT(amount = 50), COUNT(member_id)) * 100 as percentage FROM member WHERE t_shirt_size = 'Medium';"}, {"question_id": 1433, "answer_sql": "SELECT DISTINCT state FROM zip_code WHERE short_state = 'PO Box';"}, {"question_id": 1434, "answer_sql": "SELECT zip_code.zip_code FROM zip_code WHERE zip_code.type = 'PO Box' AND zip_code.state = 'Puerto Rico';"}, {"question_id": 1435, "answer_sql": "SELECT event_name FROM event WHERE type = 'Game' AND status = 'Closed' AND event_date BETWEEN '2019-03-15' AND '2020-03-20';"}, {"question_id": 1436, "answer_sql": "SELECT e.event_id, e.event_name, e.event_date, e.type, e.notes, e.location, e.status FROM event e JOIN attendance a ON e.event_id = a.link_to_event JOIN member m ON a.link_to_member = m.member_id WHERE m.email IN ( SELECT member_id FROM income WHERE amount > 50 ) AND e.status = 'approved';"}, {"question_id": 1437, "answer_sql": "SELECT member.member_id, member.first_name, member.last_name, event.event_id, event.event_name FROM member JOIN attendance ON member.member_id = attendance.link_to_member JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_date BETWEEN '2019-01-10' AND '2019-11-19' AND event.approved = 'true';"}, {"question_id": 1438, "answer_sql": "SELECT college FROM member WHERE first_name = 'Katy' AND link_to_major = 'rec1N0upiVLy5esTO';"}, {"question_id": 1439, "answer_sql": "SELECT phone FROM member WHERE link_to_major = 'major_id' AND major_name = 'Business';"}, {"question_id": 1440, "answer_sql": "SELECT email FROM member WHERE link_to_member IN (SELECT member_id FROM income WHERE date_received BETWEEN '2019-09-10' and '2019-11-19' AND amount > 20)"}, {"question_id": 1441, "answer_sql": "SELECT COUNT(*) FROM member WHERE position = 'Member' AND link_to_major = (SELECT major_id FROM major WHERE major_name = 'education' AND college = 'Human Services');"}, {"question_id": 1442, "answer_sql": "SELECT (SUM(CASE WHEN remaining < 0 THEN 1 ELSE 0 END)) / COUNT(event_id) * 100 AS percentage_over_budget FROM budget WHERE event_status = 'over budget';"}, {"question_id": 1443, "answer_sql": "SELECT event_id, location, status FROM event WHERE event_date BETWEEN '2019-11-01' and '2020-03-31';"}, {"question_id": 1444, "answer_sql": "SELECT e.expense_description FROM expense e JOIN ( SELECT b.budget_id, AVG(b.spent) as avg_spent FROM budget b GROUP BY b.budget_id HAVING AVG(b.spent) > 50 ) b ON e.link_to_budget = b.budget_id ORDER BY e.expense_description;"}, {"question_id": 1445, "answer_sql": "SELECT first_name || ' ' || last_name AS full_name FROM member WHERE t_shirt_size = 'X-Large';"}, {"question_id": 1446, "answer_sql": "SELECT (SUM(CASE WHEN type = 'PO Box' THEN 1 ELSE 0 END)) * 100 as percentage_po_boxes FROM zip_code;"}, {"question_id": 1447, "answer_sql": "SELECT event_name, location FROM event WHERE remaining > 0;"}, {"question_id": 1448, "answer_sql": "SELECT event_name, event_date FROM event JOIN budget ON event.event_id = budget.link_to_event JOIN expense ON budget.link_to_expense = expense.expense_id WHERE expense.expense_description = 'Pizza' AND budget.cost > 50 AND budget.cost < 100;"}, {"question_id": 1449, "answer_sql": "SELECT first_name || ' ' || last_name AS full_name, major_name FROM member JOIN ( SELECT link_to_member, SUM(cost) AS total_cost FROM expense GROUP BY link_to_member HAVING SUM(cost) > 100 ) AS expense_info ON member.member_id = expense_info.link_to_member;"}, {"question_id": 1450, "answer_sql": "SELECT e.event_name, z.city, z.state FROM event e JOIN member m ON e.location = m.zip JOIN income i ON m.member_id = i.link_to_member WHERE i.amount > 40 GROUP BY e.event_name, z.city, z.state HAVING COUNT(i.amount) > 50;"}, {"question_id": 1451, "answer_sql": "SELECT m.first_name || ' ' || m.last_name AS Member, MAX(e.cost) AS Expense_Cost FROM member m JOIN (SELECT link_to_member FROM attendance GROUP BY link_to_member HAVING COUNT(link_to_event) > 1) a ON m.member_id = a.link_to_member JOIN expense e ON m.member_id = e.link_to_member GROUP BY m.member_id ORDER BY Expense_Cost DESC LIMIT 1;"}, {"question_id": 1452, "answer_sql": "SELECT AVG(cost) FROM budget WHERE category != 'Member';"}, {"question_id": 1453, "answer_sql": "SELECT event_name FROM event WHERE cost < (SELECT AVG(cost) FROM event WHERE category = 'Parking') This SQL query will return the names of all events where the cost is less than the average cost of parking in the event table."}, {"question_id": 1454, "answer_sql": "SELECT DIVIDE(SUM(cost), COUNT(event_id)) * 100 AS percentage_cost_game_events FROM event WHERE type = 'Game';"}, {"question_id": 1455, "answer_sql": "SELECT MAX(cost) FROM budget WHERE category = 'Water, chips, cookies';"}, {"question_id": 1456, "answer_sql": "SELECT CONCAT(first_name, ' ', last_name) AS full_name, SUM(expense.cost) AS total_spent FROM member JOIN income ON member.member_id = income .link_to_member JOIN expense ON income .income_id = expense .link_to_income GROUP BY member.member_id ORDER BY total_spent DESC LIMIT 5;"}, {"question_id": 1457, "answer_sql": "SELECT m.first_name || ' ' || m.last_name AS full_name, m.phone AS contact_number FROM member m JOIN (SELECT link_to_member, AVG(cost) AS average_cost FROM expense GROUP BY link_to_member) e ON m.member_id = e.link_to_member WHERE e.cost > e.average_cost"}, {"question_id": 1458, "answer_sql": "SELECT SUBTRACT( DIVIDE( SUM(CASE WHEN state = 'Maine' THEN 1 ELSE 0 END), COUNT(position = 'Member')), DIVIDE( SUM(CASE WHEN state = 'Vermont' THEN 1 ELSE 0 END), COUNT(position = 'Member')) ) AS Percentage Difference FROM member JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.state IN ('Maine', 'Vermont') ```"}, {"question_id": 1459, "answer_sql": "SELECT major_name FROM member WHERE first_name = 'Garrett' AND last_name = 'Gerke' AND link_to_major IS NOT NULL;"}, {"question_id": 1460, "answer_sql": "SELECT m.first_name, m.last_name, e.expense_description, e.cost FROM member m JOIN expense e ON m.member_id = e.link_to_member WHERE e.expense_description = 'Water, Veggie tray, supplies'"}, {"question_id": 1461, "answer_sql": "SELECT last_name, phone FROM member JOIN major ON member.link_to_major = major.major_id WHERE major_name = 'Elementary Education';"}, {"question_id": 1462, "answer_sql": "SELECT budget.category, budget.amount FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'January Speaker';"}, {"question_id": 1463, "answer_sql": "SELECT event_name FROM event WHERE type = 'Food';"}, {"question_id": 1464, "answer_sql": "SELECT first_name, last_name, amount FROM member JOIN income ON member.member_id = income .link_to_member WHERE date_received = '09/09/2019' This SQL query will return the full names of students who received funds on the date of September 9, 2019."}, {"question_id": 1465, "answer_sql": "SELECT category FROM budget WHERE expense_description = 'Posters';"}, {"question_id": 1466, "answer_sql": "SELECT first_name || ' ' || last_name AS full_name, college FROM member WHERE position = 'Secretary' AND link_to_major IS NOT NULL;"}, {"question_id": 1467, "answer_sql": "SELECT e.event_name, SUM(b.spent) as total_spent FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE b.category = 'Speaker Gifts' GROUP BY e.event_name;"}, {"question_id": 1468, "answer_sql": "SELECT zip_code.city FROM member INNER JOIN major ON member.link_to_major = major.major_id INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.first_name = 'Garrett' AND member.last_name = 'Girke';"}, {"question_id": 1469, "answer_sql": "SELECT first_name, last_name, position FROM member WHERE city = 'Lincolnton' AND state = 'North Carolina' AND zip = 28092;"}, {"question_id": 1470, "answer_sql": "SELECT COUNT(*) FROM gasstations JOIN customers ON gasstations.ChainID = customers.CustomerID WHERE customers.Segment = 'CZE' AND customers.Currency = 'Premium';"}, {"question_id": 1471, "answer_sql": "SELECT (COUNT(CASE WHEN customers.Currency = 'EUR' THEN 1 END)) / (COUNT(CASE WHEN customers.Currency = 'CZK' THEN 1 END)) FROM customers JOIN transactions_1k ON customers.CustomerID = transactions_1k.CustomerID;"}, {"question_id": 1472, "answer_sql": "SELECT c.CustomerID, SUM(t.Amount) as TotalConsumption FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID WHERE strftime('%Y', t.Date) = '2012' GROUP BY c.CustomerID ORDER BY TotalConsumption ASC LIMIT 1;"}, {"question_id": 1473, "answer_sql": "SELECT AVG(Consumption) / 12 FROM ( SELECT CustomerID, AVG(Consumption) as Consumption FROM yearmonth WHERE Date BETWEEN '2013-01-01' AND '2013-12-31' GROUP BY CustomerID ) as Consumption_Per_Customer;"}, {"question_id": 1474, "answer_sql": "SELECT c.CustomerID, SUM(t.Amount) as TotalConsumed FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID JOIN gasstations g ON t.GasStationID = g.GasStationID JOIN products p ON t.ProductID = p.ProductID WHERE strftime('%Y', t.Date) = '2011' AND c.Currency = 'CZK' GROUP BY c.CustomerID ORDER BY TotalConsumed DESC LIMIT 1;"}, {"question_id": 1475, "answer_sql": "SELECT c.CustomerID, COUNT(*) as ConsumptionCount FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID JOIN yearmonth y ON c.CustomerID = y.CustomerID WHERE t.Date BETWEEN '201201' AND '201212' AND t.Amount < 30000 GROUP BY c.CustomerID, y.Date HAVING COUNT(DISTINCT t.ProductID) = 1;"}, {"question_id": 1476, "answer_sql": "SELECT c.CustomerID, SUM(t.Consumption) as TotalConsumption FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID JOIN yearmonth y ON c.CustomerID = y.CustomerID AND t.Date = y.Date WHERE t.Date BETWEEN '201201' AND '201212' AND t.Amount > 0 AND t.Currency = 'CZK' AND y.Consumption IS NOT NULL AND t.Currency <> 'EUR' GROUP BY c.CustomerID, y.Date HAVING SUM(t.Consumption) - SUM(y.Consumption) <> 0"}, {"question_id": 1477, "answer_sql": "SELECT YEAR(Date) as Year, SUM(Amount) as TotalConsumption FROM transactions_1k WHERE Currency = 'EUR' GROUP BY Year ORDER BY TotalConsumption DESC LIMIT 1;"}, {"question_id": 1478, "answer_sql": "SELECT customers.Segment, COUNT(*) as Consumption FROM customers JOIN yearmonth ON customers.CustomerID = yearmonth .CustomerID GROUP BY customers.Segment ORDER BY Consumption ASC LIMIT 1;"}, {"question_id": 1479, "answer_sql": "SELECT yearmonth.Date, SUM(yearmonth.Consumption) as TotalConsumption FROM yearmonth WHERE yearmonth.CustomerID IN (SELECT CustomerID FROM customers WHERE Segment = 'CZK') GROUP BY yearmonth.Date ORDER BY TotalConsumption DESC LIMIT 1;"}, {"question_id": 1480, "answer_sql": "SELECT Date, MAX(Consumption) as Consumption FROM ( SELECT y.Date, y.CustomerID, y.Consumption FROM yearmonth y JOIN transactions_1k t ON y.CustomerID = t.CustomerID AND y.Date = t.Date WHERE y.Date LIKE '2013-__-__' GROUP BY y.Date, y.CustomerID ) GROUP BY Date ORDER BY Consumption DESC LIMIT 1;"}, {"question_id": 1481, "answer_sql": "SELECT Segment, AVG(Consumption) AS AnnualAverageConsumption FROM (SELECT CustomerID, AVG(Consumption) AS Consumption FROM (SELECT CustomerID, AVG(Consumption) AS Consumption, ROW_NUMBER() OVER (PARTITION BY CustomerID ORDER BY Consumption ASC) AS Rank FROM yearmonth WHERE Date BETWEEN '201301' AND '201312' GROUP BY CustomerID) AS LowestConsumption WHERE Rank = 1 GROUP BY CustomerID) AS LowestConsumptionPerSegment JOIN customers ON LowestConsumption.CustomerID = customers.CustomerID WHERE customers.Segment IN ('SME', 'LAM', 'KAM') GROUP BY customers.Segment HAVING Segment IN ('SME', 'LAM', 'KAM')"}, {"question_id": 1482, "answer_sql": "SELECT Segment, MAX(PercentageIncrease) AS HighestPercentage, MIN(PercentageIncrease) AS LowestPercentage FROM ( SELECT c.Segment, (t.Consumption - l.Consumption) / l.Consumption * 100 AS PercentageIncrease FROM customers c JOIN ( SELECT CustomerID, MAX(Amount) AS Consumption FROM transactions_1k WHERE Date BETWEEN '201201' AND '201312' AND Currency = 'EUR' GROUP BY CustomerID ) t ON c.CustomerID = t.CustomerID JOIN ( SELECT CustomerID, MIN(Amount) AS Consumption FROM transactions_1k WHERE Date BETWEEN '201201' AND '201312' AND Currency = 'EUR' GROUP BY CustomerID ) l ON c.CustomerID = l.CustomerID ) AS ConsumptionIncrease GROUP BY Segment ORDER BY HighestPercentage DESC, LowestPercentage ASC;"}, {"question_id": 1483, "answer_sql": "SELECT SUM(Consumption) FROM yearmonth WHERE Date BETWEEN '20130801' AND '20131131' AND CustomerID = 6;"}, {"question_id": 1484, "answer_sql": "SELECT COUNT(*) FROM gasstations g JOIN customers c ON g.CustomerID = c.CustomerID WHERE c.Country = 'Czech Republic' GROUP BY c.Country;"}, {"question_id": 1485, "answer_sql": "SELECT c.CustomerID, SUM(t.Amount) as TotalAmount FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID JOIN yearmonth y ON t.CustomerID = y.CustomerID AND strftime('%Y%m', t.Date) = '201304' WHERE t.Date = '2013-04-01' GROUP BY c.CustomerID ORDER BY TotalAmount DESC LIMIT 1;"}, {"question_id": 1486, "answer_sql": "SELECT (SELECT SUM(Amount) FROM transactions_1k WHERE GasStationID IN (SELECT GasStationID FROM gasstations WHERE Country = 'Czech Republic' AND Segment = 'SME') AND Currency = 'Euro') - (SELECT SUM(Amount) FROM transactions_1k WHERE GasStationID IN (SELECT GasStationID FROM gasstations WHERE Country = 'Czech Republic' AND Segment = 'SME') AND Currency = 'Koruna')"}, {"question_id": 1487, "answer_sql": "SELECT t.CustomerID, SUM(t.Amount) as TotalAmount FROM transactions_1k as t JOIN yearmonth as y ON t.CustomerID = y.CustomerID AND y.Date = '201310' GROUP BY t.CustomerID ORDER BY TotalAmount DESC LIMIT 1;"}, {"question_id": 1488, "answer_sql": "SELECT c.CustomerID, SUM(t.Amount) as TotalConsumed FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID WHERE c.Segment = 'KAM' GROUP BY c.CustomerID ORDER BY TotalConsumed DESC LIMIT 1;"}, {"question_id": 1489, "answer_sql": "SELECT SUM(transactions_1k.Amount) FROM transactions_1k JOIN yearmonth ON transactions_1k.CustomerID = yearmonth.CustomerID AND yearmonth.Date = '2013-05' WHERE customers.Segment = 'KAM';"}, {"question_id": 1490, "answer_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM transactions_1k WHERE customers.Segment = 'LAM' AND yearmonth.Consumption > 46.73)) AS Percentage FROM transactions_1k JOIN customers ON transactions_1k.CustomerID = customers.CustomerID JOIN yearmonth ON transactions_1k.CustomerID = yearmonth.CustomerID AND transactions_1k.Date = yearmonth.Date WHERE customers.Segment = 'LAM'"}, {"question_id": 1491, "answer_sql": "SELECT g.Country, COUNT(*) as Value for Money Gas Stations FROM gasstations g JOIN (SELECT t.GasStationID, SUM(t.Amount) as Total Amount , SUM(t.Price) as Total Price FROM transactions_1k t GROUP BY t.GasStationID) t ON g.GasStationID = t.GasStationID WHERE t.TotalPrice/t.TotalAmount > 1 GROUP BY g.Country ORDER BY COUNT(*) DESC;"}, {"question_id": 1492, "answer_sql": "SELECT t.Date, COUNT(t.CustomerID) AS KAM_Customers, SUM(t.Amount) AS Total_Amount, (SUM(t.Amount) * 100.0 / (SELECT SUM(Amount) FROM transactions_1k WHERE customers.Segment = 'KAM') ) AS Percentage_KAM_Euros FROM transactions_1k t JOIN customers ON t.CustomerID = customers.CustomerID WHERE customers.Segment = 'KAM' AND t.Currency = 'EUR' GROUP BY t.Date;"}, {"question_id": 1493, "answer_sql": "SELECT (COUNT(*) * 100.0) / (SELECT COUNT(*) FROM yearmonth WHERE Date = '201202') as Percentage FROM transactions_1k WHERE CustomerID IN (SELECT CustomerID FROM yearmonth WHERE Date = '201202' AND Consumption > 528.3)"}, {"question_id": 1494, "answer_sql": "SELECT c.Segment, COUNT(*) as 'Premium Gas Stations' FROM gasstations g JOIN customers c ON g.ChainID = c.CustomerID WHERE c.Segment = 'Premium' AND c.Country = 'Slovakia' GROUP BY c.Segment;"}, {"question_id": 1495, "answer_sql": "SELECT t.CustomerID, SUM(t.Amount) as Consumption FROM transactions_1k as t JOIN yearmonth as y ON t.CustomerID = y.CustomerID AND y.Date = '201309' GROUP BY t.CustomerID ORDER BY Consumption DESC LIMIT 1;"}, {"question_id": 1496, "answer_sql": "SELECT customers.Segment FROM customers JOIN ( SELECT CustomerID, MIN(Consumption) as Consumption FROM yearmonth WHERE Date = '201309' GROUP BY CustomerID ) as MinConsumption ON customers.CustomerID = MinConsumption.CustomerID WHERE MinConsumption.Consumption = customers.Consumption ORDER BY customers.Segment;"}, {"question_id": 1497, "answer_sql": "SELECT customers.CustomerID, customers.Segment, customers.Currency FROM customers JOIN yearmonth ON customers.CustomerID = yearmonth .CustomerID WHERE yearmonth .Date = '201206' ORDER BY Consumption ASC LIMIT 1;"}, {"question_id": 1498, "answer_sql": "SELECT MAX(Consumption) FROM yearmonth WHERE Date LIKE '2012%';"}, {"question_id": 1499, "answer_sql": "SELECT c.CustomerID, c.Segment, c.Currency, y.Date, SUM(t.Amount) / 12 AS MonthlyConsumption FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID JOIN gasstations g ON t.GasStationID = g.GasStationID JOIN products p ON t.ProductID = p.ProductID JOIN yearmonth y ON c.CustomerID = y.CustomerID AND y.Date = '2022-01' WHERE c.Currency = 'EUR' GROUP BY c.CustomerID, c.Segment, c.Currency, y.Date ORDER BY MonthlyConsumption DESC LIMIT 1;"}, {"question_id": 1500, "answer_sql": "SELECT p.Description FROM transactions_1k t JOIN products p ON t.ProductID = p.ProductID WHERE strftime('%Y', t.Date) = '2013' AND strftime('%m', t.Date) = '09' AND t.ProductID IN (SELECT ProductID FROM products WHERE Description LIKE '%product description%');"}, {"question_id": 1501, "answer_sql": "SELECT gasstations.Country FROM gasstations JOIN transactions_1k ON gasstations.GasStationID = transactions_1k.GasStationID WHERE strftime('%Y%m', transactions_1k.Date) = '201306' GROUP BY gasstations.Country;"}, {"question_id": 1502, "answer_sql": "SELECT gasstations.ChainID, gasstations.Country FROM gasstations JOIN transactions_1k ON gasstations.GasStationID = transactions_1k.GasStationID WHERE transactions_1k.Currency = 'EUR' GROUP BY gasstations.ChainID, gasstations.Country;"}, {"question_id": 1503, "answer_sql": "SELECT p.Description FROM transactions_1k t JOIN products p ON t.ProductID = p.ProductID JOIN customers c ON t.CustomerID = c.CustomerID JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE c.Currency = 'EUR' AND p.Description IS NOT NULL;"}, {"question_id": 1504, "answer_sql": "SELECT AVG(Price * Amount) as AverageTotalPrice FROM transactions_1k WHERE strftime('%Y-%m', Date) = '2012-01';"}, {"question_id": 1505, "answer_sql": "SELECT COUNT(*) FROM customers JOIN transactions_1k ON customers.CustomerID = transactions_1k.CustomerID JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE customers.Currency = 'EUR' AND transactions_1k.Amount > 0 AND gasstations.Segment = 'special' GROUP BY customers.CustomerID, gasstations.Segment HAVING SUM(transactions_1k.Amount) > 1000;"}, {"question_id": 1506, "answer_sql": "SELECT p.Description FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID JOIN products p ON t.ProductID = p.ProductID WHERE g.Country = 'CZE'"}, {"question_id": 1507, "answer_sql": "SELECT t1.Time FROM transactions_1k t1 JOIN gasstations g1 ON t1.GasStationID = g1.GasStationID JOIN customers c1 ON t1.CustomerID = c1.CustomerID WHERE g1.ChainID = 11 ORDER BY t1.Time;"}, {"question_id": 1508, "answer_sql": "SELECT COUNT(*) FROM transactions_1k WHERE GasStationID IN ( SELECT GasStationID FROM gasstations WHERE Country = 'CZE' ) AND Price > 1000;"}, {"question_id": 1509, "answer_sql": "SELECT COUNT(*) FROM transactions_1k WHERE Date > '2012-01-01' AND Country = 'CZE';"}, {"question_id": 1510, "answer_sql": "SELECT AVG(Price * Amount) as AverageTotalPrice FROM transactions_1k JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE gasstations.Country = 'CZE';"}, {"question_id": 1511, "answer_sql": "SELECT AVG(Price * Amount) as AverageTotalPrice FROM transactions_1k WHERE Currency = 'EUR';"}, {"question_id": 1512, "answer_sql": "SELECT customers.CustomerID, customers.Segment, customers.Currency FROM customers JOIN transactions_1k ON customers.CustomerID = transactions_1k.CustomerID JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE transactions_1k.Date = '2012-08-25' GROUP BY customers.CustomerID, customers.Segment, customers.Currency ORDER BY SUM(transactions_1k.Amount) DESC LIMIT 1;"}, {"question_id": 1513, "answer_sql": "SELECT gasstations.Country FROM gasstations JOIN ( SELECT CustomerID, MIN(Date) as FirstDate FROM transactions_1k WHERE strftime('%Y', Date) = '2012' AND strftime('%m', Date) = '08' GROUP BY CustomerID ) AS FirstCustomers ON gasstations.GasStationID = FirstCustomers.CustomerID WHERE gasstations.Segment = '2012-08-25'"}, {"question_id": 1514, "answer_sql": "SELECT p.Description FROM transactions_1k t JOIN products p ON t.ProductID = p.ProductID WHERE t.Time = '16:25:00' AND t.Date = '2012-08-24' AND t.CustomerID = ( SELECT CustomerID FROM customers WHERE Currency = '[HINT]' );"}, {"question_id": 1515, "answer_sql": "SELECT T1.Segment FROM transactions_1k T1 JOIN customers T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '2012-08-23' AND T1.Time = '21:20:00';"}, {"question_id": 1516, "answer_sql": "SELECT COUNT(*) FROM transactions_1k WHERE Date = '2012-08-26' AND Time < '13:00:00' AND Currency = 'EUR';"}, {"question_id": 1517, "answer_sql": "SELECT customers.Segment FROM customers JOIN transactions_1k ON customers.CustomerID = transactions_1k.CustomerID WHERE transactions_1k.Date = (SELECT MIN(Date) FROM transactions_1k)"}, {"question_id": 1518, "answer_sql": "SELECT T1.Country FROM transactions_1k T1 JOIN gasstations T2 ON T1.GasStationID = T2.GasStationID WHERE strftime('%Y-%m-%d %H:%M:%S', T1.Time) = '2012-08-24 12:42:00';"}, {"question_id": 1519, "answer_sql": "SELECT ProductID FROM transactions_1k WHERE Date = '2012-08-23' AND Time = '21:20:00';"}, {"question_id": 1520, "answer_sql": "SELECT t.Date, t.Amount as Expense, y.Consumption FROM transactions_1k t JOIN yearmonth y ON t.CustomerID = y.CustomerID AND y.Date = '2012-01-01' WHERE t.Date = '2012-08-24' AND t.Amount = 124.05;"}, {"question_id": 1521, "answer_sql": "SELECT COUNT(*) FROM transactions_1k WHERE Time BETWEEN '08:00:00' AND '09:00:00' AND Date = '2012-08-26' AND gasstations.Country = 'CZE';"}, {"question_id": 1522, "answer_sql": "SELECT Currency FROM transactions_1k WHERE Date LIKE '201306%' AND Amount = 214582.17;"}, {"question_id": 1523, "answer_sql": "SELECT gasstations.Country FROM transactions_1k JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE transactions_1k.CardID = 667467"}, {"question_id": 1524, "answer_sql": "SELECT gasstations.Country FROM transactions_1k JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE transactions_1k.Date = '2012-08-24' AND transactions_1k.Amount = 548.4 AND customers.CustomerID = (SELECT CustomerID FROM transactions_1k WHERE Date = '2012-08-24' AND Amount = 548.4);"}, {"question_id": 1525, "answer_sql": "SELECT c.CustomerID, COUNT(*) as TotalCustomers, (SELECT COUNT(*) FROM transactions_1k WHERE CustomerID = c.CustomerID AND Date = '2012-08-25' AND Currency = 'EUR') as EURCustomers FROM customers c WHERE c.Currency = 'EUR' GROUP BY c.CustomerID ORDER BY TotalCustomers DESC;"}, {"question_id": 1526, "answer_sql": "SELECT (SUM(t1.Amount) - (SELECT SUM(t2.Amount) FROM transactions_1k t2 WHERE strftime('%Y-%m-%d', t2.Date) BETWEEN '2012-08-24' AND '2013-08-23' AND t2.CustomerID = t1.CustomerID)) / (SELECT SUM(t3.Amount) FROM transactions_1k t3 WHERE strftime('%Y-%m-%d', t3.Date) BETWEEN '2012-08-24' AND '2013-08-23' AND t3.CustomerID = t1.CustomerID) as Consumption_Decrease_Rate FROM transactions_1k t1 WHERE strftime('%Y-%m-%d', t1.Date) BETWEEN '2012-08-24' AND '2013-08-23' AND t1.CustomerID = (SELECT CustomerID FROM customers WHERE Segment = '2012/8/25')"}, {"question_id": 1527, "answer_sql": "SELECT gasstations.GasStationID, gasstations.ChainID, gasstations.Country, gasstations.Segment, SUM(transactions_1k.Amount * transactions_1k.Price) as TotalRevenue FROM gasstations JOIN transactions_1k ON gasstations.GasStationID = transactions_1k.GasStationID GROUP BY gasstations.GasStationID, gasstations.ChainID, gasstations.Country, gasstations.Segment ORDER BY TotalRevenue DESC LIMIT 1;"}, {"question_id": 1528, "answer_sql": "SELECT c.Segment, (SELECT COUNT(*) FROM transactions_1k WHERE GasStationID IN (SELECT GasStationID FROM gasstations WHERE Segment = 'SVK') AND ProductID = 1) / (SELECT COUNT(*) FROM transactions_1k WHERE GasStationID IN (SELECT GasStationID FROM gasstations WHERE Segment = 'SVK')) * 100 AS 'Premium_percentage' FROM customers c WHERE c.Segment = 'SVK';"}, {"question_id": 1529, "answer_sql": "SELECT SUM(transactions_1k.Amount) as TotalAmount FROM transactions_1k JOIN customers ON transactions_1k.CustomerID = customers.CustomerID WHERE customers.CustomerID = 38508 AND transactions_1k.Time LIKE '201201%';"}, {"question_id": 1530, "answer_sql": "SELECT p.Description FROM products p JOIN transactions_1k t ON p.ProductID = t.ProductID GROUP BY p.ProductID ORDER BY SUM(t.Amount) DESC LIMIT 5;"}, {"question_id": 1531, "answer_sql": "SELECT c.CustomerID, AVG(t.Price / t.Amount) as AveragePricePerItem, g.Country as Currency FROM transactions_1k as t JOIN customers as c ON t.CustomerID = c.CustomerID JOIN gasstations as g ON t.GasStationID = g.GasStationID WHERE t.ProductID = ( SELECT ProductID FROM products ORDER BY Price DESC LIMIT 1 ) GROUP BY c.CustomerID, g.Country ORDER BY AveragePricePerItem DESC, c.CustomerID;"}, {"question_id": 1532, "answer_sql": "SELECT gasstations.Country FROM gasstations JOIN transactions_1k ON gasstations.GasStationID = transactions_1k.GasStationID JOIN products ON transactions_1k.ProductID = products.ProductID WHERE products.ProductID = 2 ORDER BY transactions_1k.Price DESC LIMIT 1;"}, {"question_id": 1533, "answer_sql": "SELECT c.CustomerID, c.Segment, c.Currency, t.Date, t.Consumption FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID JOIN products p ON t.ProductID = p.ProductID WHERE p.Description = 'Product id No.5' AND t.Price / t.Amount > 29.00 AND t.Date LIKE '201208%';"}]