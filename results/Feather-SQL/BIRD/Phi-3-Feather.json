[
    {
        "question_id": 0,
        "answer_sql": ""
    },
    {
        "question_id": 1,
        "answer_sql": ""
    },
    {
        "question_id": 2,
        "answer_sql": ""
    },
    {
        "question_id": 3,
        "answer_sql": "SELECT School, Street, City, State FROM schools WHERE CDSCode = ( SELECT CDSCode FROM frpm WHERE `FRPM Count (K-12)` = ( SELECT MAX(`FRPM Count (K-12)`) FROM frpm ) );"
    },
    {
        "question_id": 4,
        "answer_sql": "SELECT s.Phone FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE s.Charter = 1 AND s.OpenDate > '2000-01-01';"
    },
    {
        "question_id": 5,
        "answer_sql": "SELECT COUNT(*) FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE satscores.rtype = 'SAT' AND satscores.NumTstTakr > 0 AND satscores.AvgScrMath < 400 AND schools.Virtual = 'F';"
    },
    {
        "question_id": 6,
        "answer_sql": ""
    },
    {
        "question_id": 7,
        "answer_sql": "SELECT schools.Phone FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE satscores.NumTstTakr > 1500 ORDER BY satscores.NumTstTakr DESC LIMIT 1;"
    },
    {
        "question_id": 8,
        "answer_sql": ""
    },
    {
        "question_id": 9,
        "answer_sql": "SELECT COUNT(*) AS CharterSchoolsCount FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE satscores.AvgScrMath > 560 AND schools.Charter = 1;"
    },
    {
        "question_id": 10,
        "answer_sql": ""
    },
    {
        "question_id": 11,
        "answer_sql": ""
    },
    {
        "question_id": 12,
        "answer_sql": "SELECT MAX(`Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)`) AS `Highest Eligible Free Rate` FROM frpm JOIN satscores ON frpm.`CDSCode` = satscores.`cds` WHERE (satscores.`NumGE1500` / satscores.`NumTstTakr`) > 0.3;"
    },
    {
        "question_id": 13,
        "answer_sql": "SELECT Phone FROM schools WHERE CDSCode IN ( SELECT cds FROM satscores ORDER BY (NumGE1500 * 1.0 / NumTstTakr) DESC LIMIT 3 )"
    },
    {
        "question_id": 14,
        "answer_sql": "SELECT schools.NCESDist, satscores.enroll12 FROM schools JOIN satscores ON schools.CDSCode = satscores.cds ORDER BY satscores.enroll12 DESC LIMIT 5;"
    },
    {
        "question_id": 15,
        "answer_sql": "SELECT schools.District, AVG(satscores.AvgScrRead) as AverageReadingScore FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE schools.StatusType = 'Active' GROUP BY schools.District ORDER BY AverageReadingScore DESC LIMIT 1;"
    },
    {
        "question_id": 16,
        "answer_sql": "SELECT COUNT(*) AS NumberOfSchools FROM schools JOIN schools_admins ON schools.CDSCode = schools_admins.CDSCode WHERE schools.StatusType = 'Merged' AND schools.County = 'Alameda' AND (SELECT NumTstTakr FROM satscores WHERE satscores.cds = schools.CDSCode) < 100;"
    },
    {
        "question_id": 17,
        "answer_sql": "SELECT schools.CharterNum FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE satscores.AvgScrWrite = 499;"
    },
    {
        "question_id": 18,
        "answer_sql": "SELECT COUNT(*) AS NumberOfSchools FROM schools WHERE County = 'Contra Costa' AND Charter = 0 AND (SELECT COUNT(*) FROM satscores WHERE satscores.cds = schools.CDSCode) <= 250;"
    },
    {
        "question_id": 19,
        "answer_sql": ""
    },
    {
        "question_id": 20,
        "answer_sql": ""
    },
    {
        "question_id": 21,
        "answer_sql": "SELECT COUNT(*) FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.City = 'Los Angeles' AND frpm.`Free Meal Count (K-12)` > 500 AND frpm.`Free Meal Count (K-12)` < 700;"
    },
    {
        "question_id": 22,
        "answer_sql": ""
    },
    {
        "question_id": 23,
        "answer_sql": ""
    },
    {
        "question_id": 24,
        "answer_sql": "SELECT s.School, s.County, s.District, s.StatusType FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE f.`Percent (%) Eligible Free (K-12)` > 0.1 AND f.`FRPM Count (K-12)` > 0 AND EXISTS ( SELECT 1 FROM satscores WHERE s.CDSCode = satscores.cds AND satscores.`NumTstTakr` >= 1500 );"
    },
    {
        "question_id": 25,
        "answer_sql": ""
    },
    {
        "question_id": 26,
        "answer_sql": ""
    },
    {
        "question_id": 27,
        "answer_sql": ""
    },
    {
        "question_id": 28,
        "answer_sql": ""
    },
    {
        "question_id": 29,
        "answer_sql": ""
    },
    {
        "question_id": 30,
        "answer_sql": ""
    },
    {
        "question_id": 31,
        "answer_sql": ""
    },
    {
        "question_id": 32,
        "answer_sql": ""
    },
    {
        "question_id": 33,
        "answer_sql": ""
    },
    {
        "question_id": 34,
        "answer_sql": ""
    },
    {
        "question_id": 35,
        "answer_sql": ""
    },
    {
        "question_id": 36,
        "answer_sql": ""
    },
    {
        "question_id": 37,
        "answer_sql": "SELECT schools.Street, schools.City, schools.State, schools.Zip FROM schools JOIN satscores ON schools.CDSCode = satscores.cds ORDER BY (satscores.NumGE1500 / satscores.NumTstTakr) ASC LIMIT 1;"
    },
    {
        "question_id": 38,
        "answer_sql": ""
    },
    {
        "question_id": 39,
        "answer_sql": "SELECT AVG(NumTstTakr) AS AverageTestTakers FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE schools.OpenDate BETWEEN '1980-01-01' AND '1980-12-31' AND schools.County = 'Fresno';"
    },
    {
        "question_id": 40,
        "answer_sql": "SELECT Phone FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE District = 'Fresno Unified' AND AvgScrRead IS NOT NULL ORDER BY AvgScrRead ASC LIMIT 1;"
    },
    {
        "question_id": 41,
        "answer_sql": "SELECT s.School, s.District, s.OpenDate, AVG(sat.AvgScrRead) as AvgReadingScore FROM schools s JOIN satscores sat ON s.CDSCode = sat.cds WHERE s.Virtual = 'F' GROUP BY s.School, s.District, s.OpenDate ORDER BY AvgReadingScore DESC LIMIT 5;"
    },
    {
        "question_id": 42,
        "answer_sql": ""
    },
    {
        "question_id": 43,
        "answer_sql": "SELECT s.NCESDist, s.School, AVG(sat.AvgScrMath + sat.AvgScrRead + sat.AvgScrWrite) AS AvgAllSubjectsScore FROM schools AS s JOIN satscores AS sat ON s.CDSCode = sat.cds GROUP BY s.CDSCode ORDER BY AvgAllSubjectsScore ASC LIMIT 1;"
    },
    {
        "question_id": 44,
        "answer_sql": " SELECT schools.City, AVG(satscores.AvgScrWrite) AS AverageWritingScore\nFROM schools\nJOIN satscores ON schools.CDSCode = satscores.cds\nJOIN (\n    SELECT cdss.CDSCode\n    FROM frpm AS cdss\n    JOIN satscores AS sc ON cdss.CDSCode = sc.cds\n    WHERE sc.NumGE1500 >= 1\n    GROUP BY cdss.CDSCode\n    ORDER BY SUM(sc.NumTstTakr) DESC\n    LIMIT 1\n) AS top_school ON schools.CDSCode = top_school.CDSCode\nGROUP BY schools.City;\n"
    },
    {
        "question_id": 45,
        "answer_sql": ""
    },
    {
        "question_id": 46,
        "answer_sql": ""
    },
    {
        "question_id": 47,
        "answer_sql": "SELECT COUNT(*) / 12 AS MonthlyAverageOpened FROM schools WHERE County = 'Alameda' AND DOC = 52 AND (OpenDate >= '1980-01-01' AND OpenDate < '1981-01-01');"
    },
    {
        "question_id": 48,
        "answer_sql": "SELECT (SELECT COUNT(*) FROM schools WHERE County = 'Orange County' AND DOC = 54) AS UnifiedSchoolCount, (SELECT COUNT(*) FROM schools WHERE County = 'Orange County' AND DOC = 52) AS ElementarySchoolCount, (SELECT COUNT(*) FROM schools WHERE County = 'Orange County' AND DOC = 54) / (SELECT COUNT(*) FROM schools WHERE County = 'Orange County' AND DOC = 52) AS Ratio"
    },
    {
        "question_id": 49,
        "answer_sql": " SELECT schools.County, schools.School, schools.ClosedDate FROM schools JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE schools.StatusType = 'Closed' GROUP BY schools.County ORDER BY COUNT(*) DESC, schools.County ASC;"
    },
    {
        "question_id": 50,
        "answer_sql": ""
    },
    {
        "question_id": 51,
        "answer_sql": ""
    },
    {
        "question_id": 52,
        "answer_sql": "SELECT SUM(enroll12) AS TotalSchools FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE (AvgScrRead + AvgScrMath + AvgScrWrite) >= 1500 AND City = 'Lakeport';"
    },
    {
        "question_id": 53,
        "answer_sql": "SELECT COUNT(DISTINCT s.NumTstTakr) FROM satscores s JOIN schools sc ON s.cds = sc.CDSCode WHERE sc.City = 'Fresno';"
    },
    {
        "question_id": 54,
        "answer_sql": ""
    },
    {
        "question_id": 55,
        "answer_sql": "SELECT (SELECT COUNT(*) FROM schools WHERE County = 'Colusa' AND State = 'California') / (SELECT COUNT(*) FROM schools WHERE County = 'Humboldt' AND State = 'California') AS ratio"
    },
    {
        "question_id": 56,
        "answer_sql": "SELECT COUNT(*) AS active_schools_in_san_joaquin FROM schools WHERE State = 'CA' AND StatusType = 'Active' AND County = 'San Joaquin';"
    },
    {
        "question_id": 57,
        "answer_sql": "SELECT Schools.Phone, Schools.Ext FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE satscores.NumTstTakr = ( SELECT NumTstTakr FROM satscores ORDER BY AvgScrWrite DESC LIMIT 1 OFFSET 332 ) LIMIT 1;"
    },
    {
        "question_id": 58,
        "answer_sql": "SELECT School, Phone, Ext FROM schools WHERE Zip = '95203-3704';"
    },
    {
        "question_id": 59,
        "answer_sql": ""
    },
    {
        "question_id": 60,
        "answer_sql": ""
    },
    {
        "question_id": 61,
        "answer_sql": "SELECT COUNT(*) AS NumberOfCharteredSchools FROM schools WHERE Charter = 1 AND City = 'Hickman' AND DOC = 52;"
    },
    {
        "question_id": 62,
        "answer_sql": ""
    },
    {
        "question_id": 63,
        "answer_sql": ""
    },
    {
        "question_id": 64,
        "answer_sql": "SELECT COUNT(*) AS TotalSchools FROM schools WHERE City = 'Hickman' AND Charter = 1 AND CharterNum = '00D4';"
    },
    {
        "question_id": 65,
        "answer_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM schools WHERE FundingType != 'Local')) AS ratio_percentage FROM schools WHERE County = 'Santa Clara' AND FundingType != 'Local';"
    },
    {
        "question_id": 66,
        "answer_sql": "SELECT COUNT(*) AS NumberOfSchools FROM schools WHERE FundingType = 'Directly Funded' AND County = 'Stanislaus' AND OpenDate BETWEEN '2000-01-01' AND '2005-12-31';"
    },
    {
        "question_id": 67,
        "answer_sql": "SELECT SUM(ClosedDate) AS TotalClosureAmount FROM schools WHERE City = 'San Francisco' AND ClosedDate LIKE '1989%' AND ClosedDate IS NOT NULL;"
    },
    {
        "question_id": 68,
        "answer_sql": "SELECT County, COUNT(*) AS Closures FROM schools WHERE SOC = '11' AND ClosedDate BETWEEN '1980-01-01' AND '1989-12-31' GROUP BY County ORDER BY Closures DESC LIMIT 1;"
    },
    {
        "question_id": 69,
        "answer_sql": ""
    },
    {
        "question_id": 70,
        "answer_sql": "SELECT COUNT(*) AS NumberOfSchools, 'Active' AS Status FROM schools WHERE County = 'Alpine' AND StatusType = 'District Community Day School' AND (ClosedDate IS NULL OR ClosedDate > CURRENT_DATE) UNION ALL SELECT COUNT(*) AS NumberOfSchools, 'Closed' AS Status FROM schools WHERE County = 'Alpine' AND StatusType = 'District Community Day School' AND ClosedDate IS NOT NULL AND ClosedDate <= CURRENT_DATE;"
    },
    {
        "question_id": 71,
        "answer_sql": ""
    },
    {
        "question_id": 72,
        "answer_sql": "SELECT COUNT(*) AS EnrollmentCount FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.EdOpsCode = 'SSS' AND schools.School = 'State Special School' AND schools.City = 'Fremont' AND schools.State = 'California' AND schools.OpenDate <= '2014-12-31' AND (schools.ClosedDate IS NULL OR schools.ClosedDate >= '2014-01-01');"
    },
    {
        "question_id": 73,
        "answer_sql": ""
    },
    {
        "question_id": 74,
        "answer_sql": ""
    },
    {
        "question_id": 75,
        "answer_sql": ""
    },
    {
        "question_id": 76,
        "answer_sql": ""
    },
    {
        "question_id": 77,
        "answer_sql": ""
    },
    {
        "question_id": 78,
        "answer_sql": "SELECT schools.District, schools.School, schools.County, COUNT(*) AS span_count FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE schools.City = 'Adelanto' GROUP BY schools.District, schools.School, schools.County ORDER BY span_count DESC LIMIT 1;"
    },
    {
        "question_id": 79,
        "answer_sql": "SELECT County, COUNT(*) AS NumberOfVirtualSchools FROM schools WHERE Virtual = 'F' AND (County LIKE 'San Diego%' OR County LIKE 'Santa Barbara%') GROUP BY County ORDER BY NumberOfVirtualSchools DESC LIMIT 1;"
    },
    {
        "question_id": 80,
        "answer_sql": "SELECT School, Latitude FROM schools ORDER BY Latitude DESC LIMIT 1;"
    },
    {
        "question_id": 81,
        "answer_sql": ""
    },
    {
        "question_id": 82,
        "answer_sql": "SELECT schools.GSoffered FROM schools JOIN frpm ON schools.CDSCode = frpm.CDSCode ORDER BY schools.Longitude DESC LIMIT 1;"
    },
    {
        "question_id": 83,
        "answer_sql": ""
    },
    {
        "question_id": 84,
        "answer_sql": ""
    },
    {
        "question_id": 85,
        "answer_sql": ""
    },
    {
        "question_id": 86,
        "answer_sql": ""
    },
    {
        "question_id": 87,
        "answer_sql": ""
    },
    {
        "question_id": 88,
        "answer_sql": ""
    },
    {
        "question_id": 89,
        "answer_sql": " SELECT COUNT(DISTINCT account.account_id) FROM account JOIN trans ON account.account_id = trans.account_id JOIN district ON account.district_id = district.district_id WHERE trans.type = 'POPLATEK PO OBRATU' AND district.A3 = 'East Bohemia region';"
    },
    {
        "question_id": 90,
        "answer_sql": "SELECT COUNT(DISTINCT account.account_id) AS eligible_accounts FROM account JOIN district ON account.district_id = district.district_id JOIN loan ON account.account_id = loan.account_id WHERE district.A3 = 'Prague';"
    },
    {
        "question_id": 91,
        "answer_sql": "SELECT '1995' AS Year, A12 AS UnemploymentRate FROM district WHERE A12 IS NOT NULL UNION ALL SELECT '1996' AS Year, A13 AS UnemploymentRate FROM district WHERE A13 IS NOT NULL ORDER BY UnemploymentRate DESC LIMIT 1;"
    },
    {
        "question_id": 92,
        "answer_sql": " SELECT COUNT(DISTINCT district.district_id) AS districts_count FROM district JOIN account ON district.district_id = account.district_id JOIN client ON account.account_id = client.client_id WHERE client.gender = 'F' AND district.A11 BETWEEN 6000 AND 10000;"
    },
    {
        "question_id": 93,
        "answer_sql": "SELECT COUNT(DISTINCT client.client_id) AS num_customers FROM client JOIN district ON client.district_id = district.district_id WHERE client.gender = 'M' AND district.A3 = 'North Bohemia' AND district.A11 > 8000;"
    },
    {
        "question_id": 94,
        "answer_sql": "SELECT a.account_id, (SELECT MAX(avg_salary) FROM (SELECT AVG(amount) AS avg_salary FROM trans GROUP BY account_id) AS highest_avg) - (SELECT MIN(avg_salary) FROM (SELECT AVG(amount) AS avg_salary FROM trans GROUP BY account_id) AS lowest_avg) AS salary_gap FROM account a JOIN client c ON a.district_id = c.district_id WHERE c.gender = 'F' ORDER BY c.birth_date ASC LIMIT 1;"
    },
    {
        "question_id": 95,
        "answer_sql": ""
    },
    {
        "question_id": 96,
        "answer_sql": "SELECT COUNT(*) AS owner_count FROM client JOIN account ON client.client_id = account.district_id JOIN card ON account.account_id = card.disp_id WHERE card.type = 'POPLATEK TYDNE' AND client.gender = 'Owner';"
    },
    {
        "question_id": 97,
        "answer_sql": ""
    },
    {
        "question_id": 98,
        "answer_sql": "SELECT account_id, MIN(amount) AS min_approved_amount FROM loan WHERE date BETWEEN '1997-01-01' AND '1997-12-31' GROUP BY account_id ORDER BY min_approved_amount ASC LIMIT 1;"
    },
    {
        "question_id": 99,
        "answer_sql": "SELECT account.account_id, MAX(loan.amount) as max_approved_amount FROM account JOIN loan ON account.account_id = loan.account_id WHERE loan.duration > 12 AND strftime('%Y', account.date) = '1993' GROUP BY account.account_id ORDER BY max_approved_amount DESC LIMIT 1;"
    },
    {
        "question_id": 100,
        "answer_sql": "SELECT COUNT(*) AS female_customers_before_1950 FROM client JOIN account ON client.client_id = account.district_id WHERE client.gender = 'F' AND client.birth_date < '1950-01-01' AND account.date IS NOT NULL AND account.district_id = (SELECT district_id FROM district WHERE A2 = 'Slokolov');"
    },
    {
        "question_id": 101,
        "answer_sql": "SELECT account_id FROM account WHERE date = ( SELECT MIN(date) FROM account WHERE strftime('%Y', date) = '1995' )"
    },
    {
        "question_id": 102,
        "answer_sql": "SELECT DISTINCT account.account_id FROM account JOIN loan ON account.account_id = loan.account_id WHERE account.date < '1997-01-01' AND loan.amount > 3000;"
    },
    {
        "question_id": 103,
        "answer_sql": "SELECT client.client_id FROM client JOIN card ON client.client_id = card.disp_id WHERE card.issued = '1994-03-03';"
    },
    {
        "question_id": 104,
        "answer_sql": "SELECT account_id, date FROM account WHERE account_id IN ( SELECT account_id FROM trans WHERE amount = 840 AND date = '1998-10-14' );"
    },
    {
        "question_id": 105,
        "answer_sql": ""
    },
    {
        "question_id": 106,
        "answer_sql": ""
    },
    {
        "question_id": 107,
        "answer_sql": "SELECT client.gender FROM client JOIN account ON client.client_id = account.account_id JOIN district ON account.district_id = district.district_id JOIN ( SELECT district_id FROM district ORDER BY A11 DESC LIMIT 1 ) AS highest_salary_district ON district.district_id = highest_salary_district.district_id JOIN ( SELECT client.client_id, MIN(client.birth_date) AS oldest_birth_date FROM client JOIN account ON client.client_id = account.account_id JOIN district ON account.district_id = district.district_id JOIN ( SELECT district_id FROM district ORDER BY A11 DESC LIMIT 1 ) AS highest_salary_district ON district.district_id = highest_salary_district.district_id GROUP BY client.client_id ) AS oldest_clients ON client.client_id = oldest_clients.client_id WHERE client.birth_date = oldest_clients.oldest_birth_date;"
    },
    {
        "question_id": 108,
        "answer_sql": "SELECT t.amount FROM trans t JOIN ( SELECT account_id, MIN(date) as first_transaction_date FROM trans WHERE account_id IN ( SELECT account_id FROM loan ORDER BY amount DESC LIMIT 1 ) GROUP BY account_id ) as subquery ON t.account_id = subquery.account_id AND t.date = subquery.first_transaction_date ORDER BY t.date ASC LIMIT 1;"
    },
    {
        "question_id": 109,
        "answer_sql": "SELECT COUNT(*) AS number_of_female_clients FROM client JOIN account ON client.client_id = account.account_id JOIN district ON account.district_id = district.district_id WHERE district.A2 = 'Jesenik' AND client.gender = 'F';"
    },
    {
        "question_id": 110,
        "answer_sql": ""
    },
    {
        "question_id": 111,
        "answer_sql": "SELECT COUNT(*) AS number_of_accounts FROM account JOIN district ON account.district_id = district.district_id WHERE district.A2 = 'Litomerice' AND strftime('%Y', account.date) = '1996';"
    },
    {
        "question_id": 112,
        "answer_sql": "SELECT d.A2 FROM client c JOIN account a ON c.client_id = a.account_id JOIN district d ON a.district_id = d.district_id WHERE c.gender = 'F' AND c.birth_date = '1976-01-29';"
    },
    {
        "question_id": 113,
        "answer_sql": "SELECT birth_date FROM client JOIN loan ON client.client_id = loan.account_id WHERE loan.amount = 98832 AND loan.date = '1996-01-03';"
    },
    {
        "question_id": 114,
        "answer_sql": "SELECT account_id FROM account WHERE district_id = ( SELECT district_id FROM district WHERE A3 = 'Prague' );"
    },
    {
        "question_id": 115,
        "answer_sql": "SELECT ROUND(COUNT(DISTINCT client.client_id) FILTER (WHERE client.gender = 'M') * 100.0 / COUNT(DISTINCT client.client_id), 2) AS percentage_male_clients FROM client JOIN district ON client.district_id = district.district_id WHERE district.A3 = 'south Bohemia' AND district.A4 = ( SELECT MAX(A4) FROM district WHERE A3 = 'south Bohemia' );"
    },
    {
        "question_id": 116,
        "answer_sql": "SELECT ((MAX(t.balance) - MIN(t.balance)) / MIN(t.balance)) * 100 AS increase_rate FROM trans t JOIN account a ON t.account_id = a.account_id JOIN client c ON a.district_id = c.district_id WHERE c.birth_date <= '1993-07-05' AND a.date BETWEEN '1993-03-22' AND '1998-12-27' GROUP BY c.client_id ORDER BY increase_rate DESC LIMIT 1;"
    },
    {
        "question_id": 117,
        "answer_sql": "SELECT (SUM(CASE WHEN status = 'A' THEN amount ELSE 0 END) / SUM(amount)) * 100 AS percentage_paid_no_issue FROM loan WHERE status = 'A';"
    },
    {
        "question_id": 118,
        "answer_sql": "SELECT (SUM(CASE WHEN status = 'C' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS percentage_of_accounts_with_no_issue FROM loan WHERE amount < 100000;"
    },
    {
        "question_id": 119,
        "answer_sql": ""
    },
    {
        "question_id": 120,
        "answer_sql": ""
    },
    {
        "question_id": 121,
        "answer_sql": "SELECT account.account_id, account.date FROM account JOIN district ON account.district_id = district.district_id WHERE district.A2 = 'Prachatice';"
    },
    {
        "question_id": 122,
        "answer_sql": "SELECT d.A2, d.A3 FROM district d JOIN account a ON d.district_id = a.district_id JOIN loan l ON a.account_id = l.account_id WHERE l.loan_id = 4990;"
    },
    {
        "question_id": 123,
        "answer_sql": "SELECT account.account_id, district.A2 AS district, district.A3 AS region FROM account JOIN loan ON account.account_id = loan.account_id JOIN district ON account.district_id = district.district_id WHERE loan.amount > 300000;"
    },
    {
        "question_id": 124,
        "answer_sql": "SELECT loan.loan_id, district.A11, AVG(district.A10) as average_salary FROM loan JOIN account ON loan.account_id = account.account_id JOIN district ON account.district_id = district.district_id WHERE loan.duration = 60 GROUP BY loan.loan_id, district.A11;"
    },
    {
        "question_id": 125,
        "answer_sql": "SELECT d.district_id, (d.A13 - d.A12) / d.A12 * 100 AS unemployment_rate_increment FROM district d JOIN account a ON d.district_id = a.district_id JOIN loan l ON a.account_id = l.account_id WHERE l.status = 'D' AND l.date BETWEEN '1995-01-01' AND '1996-12-31' GROUP BY d.district_id;"
    },
    {
        "question_id": 126,
        "answer_sql": " SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM account)) AS percentage \nFROM account \nWHERE district_id IN (SELECT district_id FROM district WHERE A2 = 'Decin') \nAND strftime('%Y', date) = '1993';"
    },
    {
        "question_id": 127,
        "answer_sql": "SELECT account_id FROM account WHERE frequency = 'POPLATEK MESICNE';"
    },
    {
        "question_id": 128,
        "answer_sql": "SELECT d.A2, COUNT(DISTINCT c.client_id) AS female_account_holders FROM district d JOIN client c ON d.district_id = c.district_id WHERE c.gender = 'F' GROUP BY d.district_id ORDER BY female_account_holders DESC LIMIT 10;"
    },
    {
        "question_id": 129,
        "answer_sql": "SELECT district.A2 AS DistrictName, SUM(trans.amount) AS TotalWithdrawal FROM trans JOIN account ON trans.account_id = account.account_id JOIN district ON account.district_id = district.district_id WHERE trans.type = 'VYDAJ' AND account.date LIKE '1996-01%' GROUP BY district.A2 ORDER BY TotalWithdrawal DESC LIMIT 10;"
    },
    {
        "question_id": 130,
        "answer_sql": "SELECT COUNT(*) FROM account WHERE district_id IN (SELECT district_id FROM district WHERE A3 = 'South Bohemia') AND account_id NOT IN (SELECT account_id FROM card);"
    },
    {
        "question_id": 131,
        "answer_sql": "SELECT district.A3, SUM(loan.amount) AS total_active_loan_amount FROM district JOIN account ON district.district_id = account.district_id JOIN loan ON account.account_id = loan.account_id WHERE loan.status = 'C' GROUP BY district.A3 ORDER BY total_active_loan_amount DESC LIMIT 1;"
    },
    {
        "question_id": 132,
        "answer_sql": "SELECT AVG(loan.amount) AS average_loan_amount FROM loan JOIN account ON loan.account_id = account.account_id JOIN client ON account.district_id = client.district_id WHERE client.gender = 'M';"
    },
    {
        "question_id": 133,
        "answer_sql": "SELECT district.A2 AS DistrictName, district.A6 AS UnemploymentRate FROM district WHERE district.A13 = (SELECT MAX(district.A13) FROM district)"
    },
    {
        "question_id": 134,
        "answer_sql": "SELECT COUNT(DISTINCT account_id) AS number_of_accounts FROM account JOIN district ON account.district_id = district.district_id WHERE district.A16 = ( SELECT MAX(A16) FROM district WHERE A16 IS NOT NULL );"
    },
    {
        "question_id": 135,
        "answer_sql": "SELECT COUNT(DISTINCT account.account_id) AS NegativeBalanceAccounts FROM account JOIN trans ON account.account_id = trans.account_id WHERE trans.operation = 'VYBER KARTOU' AND trans.balance < 0 AND account.frequency = 'POPLATEK MESICNE';"
    },
    {
        "question_id": 136,
        "answer_sql": "SELECT COUNT(*) AS approved_loans_count FROM loan JOIN account ON loan.account_id = account.account_id WHERE loan.amount >= 250000 AND account.frequency = 'POPLATEK MESICNE' AND loan.date BETWEEN '1995-01-01' AND '1997-12-31' AND loan.status = 'APPROVED';"
    },
    {
        "question_id": 137,
        "answer_sql": "SELECT COUNT(*) AS running_contracts FROM account JOIN loan ON account.account_id = loan.account_id JOIN trans ON account.account_id = trans.account_id WHERE loan.status = 'C' AND trans.type = 'C' AND account.district_id = (SELECT district_id FROM district WHERE A16 = '1');"
    },
    {
        "question_id": 138,
        "answer_sql": "SELECT COUNT(DISTINCT client.client_id) AS male_clients FROM client JOIN district ON client.district_id = district.district_id WHERE district.A15 = ( SELECT MAX(d2.A15) FROM district d2 WHERE d2.A15 < ( SELECT MAX(d3.A15) FROM district d3 ) ) AND client.gender = 'M';"
    },
    {
        "question_id": 139,
        "answer_sql": "SELECT COUNT(*) FROM card JOIN disp ON card.disp_id = disp.disp_id WHERE card.type = 'gold' AND disp.type = 'disponent';"
    },
    {
        "question_id": 140,
        "answer_sql": "SELECT COUNT(*) FROM account WHERE district_id IN (SELECT district_id FROM district WHERE A2 = 'Pisek');"
    },
    {
        "question_id": 141,
        "answer_sql": "SELECT DISTINCT district.A16 AS district_code FROM trans JOIN account ON trans.account_id = account.account_id JOIN district ON account.district_id = district.district_id WHERE trans.amount > 10000 AND strftime('%Y', trans.date) = '1997';"
    },
    {
        "question_id": 142,
        "answer_sql": " SELECT DISTINCT account_id FROM `order` WHERE k_symbol = 'SIPO';"
    },
    {
        "question_id": 143,
        "answer_sql": "SELECT DISTINCT a.account_id FROM account a JOIN disp d ON a.account_id = d.account_id JOIN card c ON d.disp_id = c.card_id WHERE c.type IN ('gold', 'junior');"
    },
    {
        "question_id": 144,
        "answer_sql": " SELECT AVG(loan.amount) AS average_credit_card_amount \nFROM loan \nJOIN account ON loan.account_id = account.account_id \nJOIN card ON account.account_id = card.disp_id \nWHERE card.type = 'credit card' \nAND loan.date BETWEEN '2021-01-01' AND '2021-12-31' \nAND EXISTS (\n    SELECT 1 \n    FROM trans \n    WHERE trans.account_id = account.account_id \n    AND trans.date = loan.date \n    AND trans.type = 'VYBER KARTOU'\n);"
    },
    {
        "question_id": 145,
        "answer_sql": "SELECT account.account_id FROM account JOIN trans ON account.account_id = trans.account_id WHERE trans.operation = 'VYBER KARTOU' AND strftime('%Y', trans.date) = '1998' GROUP BY account.account_id HAVING SUM(trans.amount) < ( SELECT AVG(monthly_spent) FROM ( SELECT account_id, SUM(amount) AS monthly_spent FROM trans WHERE operation = 'VYBER KARTOU' AND strftime('%Y', date) = '1998' GROUP BY account_id, strftime('%m', date) ) AS subquery );"
    },
    {
        "question_id": 146,
        "answer_sql": "SELECT DISTINCT client.client_id FROM client JOIN disp ON client.client_id = disp.client_id JOIN card ON disp.disp_id = card.card_id JOIN account ON disp.account_id = account.account_id JOIN loan ON account.account_id = loan.account_id WHERE client.gender = 'F';"
    },
    {
        "question_id": 147,
        "answer_sql": "SELECT COUNT(DISTINCT client.client_id) AS female_clients_count FROM client JOIN account ON client.client_id = account.account_id JOIN district ON account.district_id = district.district_id WHERE client.gender = 'F' AND district.A3 = 'south Bohemia';"
    },
    {
        "question_id": 148,
        "answer_sql": "SELECT a.account_id FROM account a JOIN loan l ON a.account_id = l.account_id JOIN disp d ON a.account_id = d.account_id JOIN client c ON d.client_id = c.client_id JOIN district dd ON c.district_id = dd.district_id WHERE dd.A2 = 'Tabor' AND d.type = 'OWNER';"
    },
    {
        "question_id": 149,
        "answer_sql": "SELECT DISTINCT card.type FROM card JOIN account ON card.disp_id = account.account_id JOIN district ON account.district_id = district.district_id WHERE card.type != 'OWNER' AND district.A11 BETWEEN 8000 AND 9000;"
    },
    {
        "question_id": 150,
        "answer_sql": " SELECT COUNT(DISTINCT account.account_id) AS account_count FROM trans \nJOIN account ON trans.account_id = account.account_id \nJOIN district ON account.district_id = district.district_id \nWHERE A3 = 'North Bohemia' AND k_symbol = 'AB';"
    },
    {
        "question_id": 151,
        "answer_sql": " SELECT DISTINCT district.A2 FROM account JOIN trans ON account.account_id = trans.account_id JOIN district ON account.district_id = district.district_id WHERE trans.type = 'VYDAJ';"
    },
    {
        "question_id": 152,
        "answer_sql": "SELECT AVG(A15) AS average_crimes FROM district WHERE A3 IN ( SELECT A3 FROM account WHERE date >= '1997-01-01' GROUP BY district_id HAVING COUNT(account_id) >= 1 ) AND A15 > 4000;"
    },
    {
        "question_id": 153,
        "answer_sql": "SELECT COUNT(*) FROM card JOIN disp ON card.disp_id = disp.disp_id WHERE card.type = 'classic' AND disp.type = 'OWNER';"
    },
    {
        "question_id": 154,
        "answer_sql": "SELECT COUNT(*) FROM client WHERE gender = 'M' AND district_id IN (SELECT district_id FROM district WHERE A2 = 'Hl.m. Praha');"
    },
    {
        "question_id": 155,
        "answer_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM card)) AS percent_of_gold_cards_issued_before_1998 FROM card WHERE type = 'gold' AND issued < '1998-01-01';"
    },
    {
        "question_id": 156,
        "answer_sql": "SELECT client.client_id, client.gender, account.account_id, account.date, loan.amount FROM client JOIN account ON client.client_id = account.account_id JOIN loan ON account.account_id = loan.account_id ORDER BY loan.amount DESC LIMIT 1;"
    },
    {
        "question_id": 157,
        "answer_sql": "SELECT A15 FROM district WHERE district_id = (SELECT district_id FROM account WHERE account_id = 532);"
    },
    {
        "question_id": 158,
        "answer_sql": "SELECT district_id FROM account WHERE account_id = (SELECT account_id FROM `order` WHERE order_id = 33333);"
    },
    {
        "question_id": 159,
        "answer_sql": ""
    },
    {
        "question_id": 160,
        "answer_sql": "SELECT COUNT(*) FROM loan JOIN account ON loan.account_id = account.account_id WHERE account.frequency = 'POPLATEK TYDNE' AND loan.amount < 200000;"
    },
    {
        "question_id": 161,
        "answer_sql": "SELECT type FROM card WHERE disp_id IN (SELECT disp_id FROM disp WHERE client_id = 13539);"
    },
    {
        "question_id": 162,
        "answer_sql": "SELECT district.A3 FROM client JOIN account ON client.client_id = account.account_id JOIN district ON account.district_id = district.district_id WHERE client.client_id = 3541;"
    },
    {
        "question_id": 163,
        "answer_sql": "SELECT district.A16 AS district_name, COUNT(account.account_id) AS finished_loans_count FROM account JOIN loan ON account.account_id = loan.account_id JOIN district ON account.district_id = district.district_id WHERE loan.status = 'A' GROUP BY district.A16 ORDER BY finished_loans_count DESC LIMIT 1;"
    },
    {
        "question_id": 164,
        "answer_sql": " SELECT client.client_id, client.gender, client.birth_date, client.district_id FROM client JOIN disp ON client.client_id = disp.client_id JOIN account ON disp.account_id = account.account_id JOIN `order` ON account.account_id = `order`.account_id WHERE `order`.order_id = 32423;"
    },
    {
        "question_id": 165,
        "answer_sql": ""
    },
    {
        "question_id": 166,
        "answer_sql": "SELECT COUNT(*) FROM account WHERE district_id = (SELECT district_id FROM district WHERE A2 = 'Jesenik');"
    },
    {
        "question_id": 167,
        "answer_sql": "SELECT client.client_id FROM client JOIN disp ON client.client_id = disp.client_id JOIN account ON disp.account_id = account.account_id JOIN card ON disp.disp_id = card.disp_id WHERE card.type = 'junior' AND card.issued >= '1997-01-01';"
    },
    {
        "question_id": 168,
        "answer_sql": "SELECT (COUNT(DISTINCT client.client_id) * 100.0 / (SELECT COUNT(*) FROM client WHERE district_id = (SELECT district_id FROM district WHERE A11 > 10000))) AS percentage_women FROM client JOIN account ON client.client_id = account.district_id WHERE client.gender = 'F' AND account.district_id = (SELECT district_id FROM district WHERE A11 > 10000);"
    },
    {
        "question_id": 169,
        "answer_sql": "SELECT ((SUM(l2.amount) - SUM(l1.amount)) / SUM(l1.amount)) * 100 AS growth_rate FROM loan l1 JOIN loan l2 ON l1.account_id = l2.account_id JOIN client c ON l1.account_id = c.client_id JOIN account a ON l1.account_id = a.account_id WHERE c.gender = 'M' AND a.date BETWEEN '1996-01-01' AND '1997-12-31' GROUP BY l1.account_id;"
    },
    {
        "question_id": 170,
        "answer_sql": "SELECT COUNT(*) FROM trans WHERE operation = 'VYBER KARTOU' AND date > '1995-12-31';"
    },
    {
        "question_id": 171,
        "answer_sql": "SELECT (SELECT SUM(A16) FROM district WHERE A3 = 'North Bohemia') - (SELECT SUM(A16) FROM district WHERE A3 = 'East Bohemia') AS crime_difference;"
    },
    {
        "question_id": 172,
        "answer_sql": "SELECT COUNT(*) AS dispositions_count FROM trans WHERE trans.account_id BETWEEN 1 AND 10 AND trans.type IN ('owner', 'disponent');"
    },
    {
        "question_id": 173,
        "answer_sql": ""
    },
    {
        "question_id": 174,
        "answer_sql": "SELECT strftime('%Y', birth_date) AS birth_year FROM client WHERE client_id = 130;"
    },
    {
        "question_id": 175,
        "answer_sql": "SELECT COUNT(*) FROM account WHERE frequency = 'POPLATEK PO OBRATU';"
    },
    {
        "question_id": 176,
        "answer_sql": ""
    },
    {
        "question_id": 177,
        "answer_sql": "SELECT SUM(t.amount) AS total_amount, c.gender FROM trans t JOIN account a ON t.account_id = a.account_id JOIN client c ON a.district_id = c.district_id WHERE t.trans_id = 851 AND c.client_id = 4 GROUP BY c.gender;"
    },
    {
        "question_id": 178,
        "answer_sql": "SELECT type FROM card WHERE disp_id IN (SELECT disp_id FROM disp JOIN client ON client.client_id = disp.client_id WHERE client.client_id = 9);"
    },
    {
        "question_id": 179,
        "answer_sql": " SELECT SUM(t.amount) AS total_paid FROM trans AS t JOIN client AS c ON t.account_id = c.client_id JOIN loan AS l ON t.account_id = l.account_id WHERE c.client_id = 617 AND strftime('%Y', t.date) = '1998' AND l.status = 'Paid';"
    },
    {
        "question_id": 180,
        "answer_sql": ""
    },
    {
        "question_id": 181,
        "answer_sql": "SELECT client_id FROM client JOIN loan ON client.client_id = loan.account_id WHERE gender = 'F' ORDER BY amount DESC LIMIT 3;"
    },
    {
        "question_id": 182,
        "answer_sql": "SELECT COUNT(DISTINCT client.client_id) AS male_customers_with_high_payments FROM client JOIN account ON client.client_id = account.account_id JOIN loan ON account.account_id = loan.account_id WHERE client.gender = 'M' AND client.birth_date BETWEEN '1974-01-01' AND '1976-12-31' AND loan.payments > 4000;"
    },
    {
        "question_id": 183,
        "answer_sql": "SELECT COUNT(*) AS number_of_accounts FROM account JOIN district ON account.district_id = district.district_id WHERE district.A2 = 'Beroun' AND account.date > '1996-12-31';"
    },
    {
        "question_id": 184,
        "answer_sql": "SELECT COUNT(*) FROM client JOIN disp ON client.client_id = disp.client_id JOIN card ON disp.disp_id = card.disp_id WHERE client.gender = 'F' AND card.type = 'junior';"
    },
    {
        "question_id": 185,
        "answer_sql": "SELECT (COUNT(DISTINCT client.client_id) FILTER (WHERE client.gender = 'F') / COUNT(DISTINCT client.client_id)) * 100.0 AS percentage_female_clients_prague FROM client JOIN account ON client.client_id = account.district_id JOIN district ON account.district_id = district.district_id WHERE district.A3 = 'Prague';"
    },
    {
        "question_id": 186,
        "answer_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM client WHERE frequency = 'POPLATEK TYDNE')) AS percentage_male_weekly FROM client JOIN disp ON client.client_id = disp.client_id JOIN account ON disp.account_id = account.account_id WHERE client.gender = 'M' AND account.frequency = 'POPLATEK TYDNE';"
    },
    {
        "question_id": 187,
        "answer_sql": "SELECT COUNT(DISTINCT client.client_id) AS number_of_users FROM client JOIN disp ON client.client_id = disp.client_id JOIN account ON disp.account_id = account.account_id WHERE account.frequency = 'POPLATEK TYDNE';"
    },
    {
        "question_id": 188,
        "answer_sql": "SELECT account.account_id, MIN(loan.amount) as min_loan_amount FROM account JOIN loan ON account.account_id = loan.account_id WHERE loan.duration > 24 AND account.date < '1997-01-01' GROUP BY account.account_id ORDER BY min_loan_amount ASC LIMIT 1;"
    },
    {
        "question_id": 189,
        "answer_sql": " SELECT account.account_id \nFROM account \nJOIN client ON account.district_id = client.district_id \nJOIN district ON client.district_id = district.district_id \nWHERE client.gender = 'F' \nGROUP BY account.account_id \nHAVING AVG(district.A11) = (SELECT MIN(A11) FROM district) \nORDER BY client.birth_date ASC \nLIMIT 1;"
    },
    {
        "question_id": 190,
        "answer_sql": " SELECT COUNT(DISTINCT client.client_id) AS num_clients FROM client JOIN account ON client.client_id = account.district_id JOIN district ON account.district_id = district.district_id WHERE district.A3 = 'East Bohemia' AND client.birth_date BETWEEN '1920-01-01' AND '1920-12-31';"
    },
    {
        "question_id": 191,
        "answer_sql": " SELECT COUNT(*) FROM loan l\nJOIN account a ON l.account_id = a.account_id\nWHERE l.duration = 24 AND a.frequency = 'POPLATEK TYDNE';"
    },
    {
        "question_id": 192,
        "answer_sql": "SELECT AVG(loan.amount) AS average_loan_amount FROM loan JOIN trans ON loan.account_id = trans.account_id WHERE loan.status = 'C' AND trans.type = 'POPLATEK PO OBRATU';"
    },
    {
        "question_id": 193,
        "answer_sql": ""
    },
    {
        "question_id": 194,
        "answer_sql": "SELECT client.client_id, (strftime('%Y', 'now') - strftime('%Y', client.birth_date)) AS age FROM client JOIN card ON client.client_id = card.disp_id JOIN account ON card.disp_id = account.account_id JOIN district ON account.district_id = district.district_id WHERE card.type = 'gold' AND district.A10 > 7"
    },
    {
        "question_id": 195,
        "answer_sql": "SELECT bond_type, COUNT(*) as frequency FROM bond GROUP BY bond_type ORDER BY frequency DESC LIMIT 1;"
    },
    {
        "question_id": 196,
        "answer_sql": "SELECT COUNT(DISTINCT a.atom_id) AS chlorine_atoms_count FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.label = '-' AND a.element = 'cl';"
    },
    {
        "question_id": 197,
        "answer_sql": "SELECT AVG(oxygen_count) FROM ( SELECT m.molecule_id, COUNT(*) as oxygen_count FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id JOIN bond b ON m.molecule_id = b.molecule_id JOIN connected c ON a.atom_id = c.atom_id2 AND b.bond_id = c.bond_id WHERE b.bond_type = '-' AND a.element = 'O' GROUP BY m.molecule_id ) as subquery;"
    },
    {
        "question_id": 198,
        "answer_sql": "SELECT AVG(single_bonded_count) AS average_single_bonded_molecules FROM ( SELECT m.molecule_id, COUNT(a.atom_id) AS single_bonded_count FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id JOIN bond b ON a.molecule_id = b.molecule_id WHERE m.label = '+' AND b.bond_type = '-' GROUP BY m.molecule_id ) AS subquery;"
    },
    {
        "question_id": 199,
        "answer_sql": "SELECT COUNT(*) FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '-' AND atom.element = 'na';"
    },
    {
        "question_id": 200,
        "answer_sql": "SELECT DISTINCT m.molecule_id FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id JOIN connected c ON b.bond_id = c.bond_id WHERE b.bond_type = '#' AND m.label = '+';"
    },
    {
        "question_id": 201,
        "answer_sql": " SELECT ROUND(SUM(CASE WHEN a.element = 'c' THEN 1 ELSE 0 END) * 100.0 / COUNT(DISTINCT a.atom_id), 2) AS percentage FROM atom a JOIN connected c ON a.atom_id = c.atom_id2 JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = ' = ';"
    },
    {
        "question_id": 202,
        "answer_sql": "SELECT COUNT(*) AS triple_bond_count FROM bond WHERE bond_type = '#';"
    },
    {
        "question_id": 203,
        "answer_sql": "SELECT COUNT(*) FROM atom WHERE element != 'br';"
    },
    {
        "question_id": 204,
        "answer_sql": "SELECT COUNT(*) AS carcinogenic_count FROM molecule WHERE molecule_id BETWEEN 'TR000' AND 'TR099' AND label = '+';"
    },
    {
        "question_id": 205,
        "answer_sql": ""
    },
    {
        "question_id": 206,
        "answer_sql": "SELECT DISTINCT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_id = 'TR004_8_9';"
    },
    {
        "question_id": 207,
        "answer_sql": ""
    },
    {
        "question_id": 208,
        "answer_sql": "SELECT label, COUNT(*) as frequency FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE element = 'h' GROUP BY label ORDER BY frequency DESC LIMIT 1;"
    },
    {
        "question_id": 209,
        "answer_sql": "SELECT bond.bond_type FROM bond JOIN atom ON bond.molecule_id = atom.molecule_id WHERE atom.element = 'te' GROUP BY bond.bond_type;"
    },
    {
        "question_id": 210,
        "answer_sql": ""
    },
    {
        "question_id": 211,
        "answer_sql": ""
    },
    {
        "question_id": 212,
        "answer_sql": "SELECT element, COUNT(*) as count FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE label = '-' GROUP BY element ORDER BY count ASC LIMIT 1;"
    },
    {
        "question_id": 213,
        "answer_sql": "SELECT b.bond_type FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a1 ON c.atom_id = a1.atom_id AND a1.atom_id = 'TR004_8' JOIN atom a2 ON c.atom_id2 = a2.atom_id AND a2.atom_id = 'TR004_20';"
    },
    {
        "question_id": 214,
        "answer_sql": "SELECT label FROM molecule WHERE molecule_id IN ( SELECT molecule_id FROM atom WHERE element = 'sn' ) AND label <> '+';"
    },
    {
        "question_id": 215,
        "answer_sql": "SELECT COUNT(DISTINCT connected.atom_id2) AS iodine_sulfur_single_bond_atoms FROM atom JOIN connected ON atom.atom_id = connected.atom_id2 JOIN bond ON connected.bond_id = bond.bond_id WHERE atom.element = 'i' AND bond.bond_type = '-' AND atom.molecule_id IN ( SELECT molecule_id FROM molecule WHERE EXISTS ( SELECT 1 FROM atom WHERE atom.molecule_id = molecule.molecule_id AND atom.element = 's' ) );"
    },
    {
        "question_id": 216,
        "answer_sql": "SELECT DISTINCT a1.atom_id, a2.atom_id FROM connected AS c JOIN atom AS a1 ON c.atom_id = a1.atom_id JOIN atom AS a2 ON c.atom_id2 = a2.atom_id JOIN bond AS b ON c.bond_id = b.bond_id WHERE b.bond_type = '#';"
    },
    {
        "question_id": 217,
        "answer_sql": ""
    },
    {
        "question_id": 218,
        "answer_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM molecule WHERE label = '+')) as percent FROM molecule WHERE molecule_id NOT IN ( SELECT atom.molecule_id FROM atom WHERE element = 'f' ) AND label = '+';"
    },
    {
        "question_id": 219,
        "answer_sql": "SELECT ROUND( (SUM(CASE WHEN b.bond_type = '#' THEN 1 ELSE 0 END) * 100.0) / COUNT(b.bond_id), 2 ) AS percentage FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE m.label = '+';"
    },
    {
        "question_id": 220,
        "answer_sql": "SELECT element FROM atom WHERE molecule_id = 'TR000' ORDER BY element ASC LIMIT 3;"
    },
    {
        "question_id": 221,
        "answer_sql": "SELECT DISTINCT a1.atom_id, a2.atom_id FROM connected AS c JOIN atom AS a1 ON c.atom_id = a1.atom_id JOIN atom AS a2 ON c.atom_id2 = a2.atom_id JOIN bond AS b ON c.bond_id = b.bond_id WHERE b.molecule_id = 'TR001' AND b.bond_id = 'TR001_2_6';"
    },
    {
        "question_id": 222,
        "answer_sql": "SELECT (SUM(CASE WHEN m.label = '+' THEN 1 ELSE 0 END) - SUM(CASE WHEN m.label = '-' THEN 1 ELSE 0 END)) AS difference FROM molecule m;"
    },
    {
        "question_id": 223,
        "answer_sql": ""
    },
    {
        "question_id": 224,
        "answer_sql": "SELECT bond_id FROM connected WHERE atom_id2 = 'TR000_2'"
    },
    {
        "question_id": 225,
        "answer_sql": ""
    },
    {
        "question_id": 226,
        "answer_sql": " SELECT ROUND((SUM(CASE WHEN bond_type = '=' THEN 1 ELSE 0 END) * 100.0 / COUNT(bond.bond_id)), 2) AS percentage FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON atom.atom_id = connected.atom_id2 WHERE atom.molecule_id = 'TR008';"
    },
    {
        "question_id": 227,
        "answer_sql": "SELECT (SUM(CASE WHEN m.label = '+' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) as percent FROM molecule m;"
    },
    {
        "question_id": 228,
        "answer_sql": "SELECT ROUND((SUM(CASE WHEN element = 'h' THEN 1 ELSE 0 END) * 100.0) / COUNT(*), 2) as percentage FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR206';"
    },
    {
        "question_id": 229,
        "answer_sql": "SELECT bond_type FROM bond WHERE molecule_id = 'TR000';"
    },
    {
        "question_id": 230,
        "answer_sql": "SELECT a.element, m.label FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE a.molecule_id = 'TR060'"
    },
    {
        "question_id": 231,
        "answer_sql": ""
    },
    {
        "question_id": 232,
        "answer_sql": "SELECT m.label FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id JOIN connected c ON b.bond_id = c.bond_id JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE b.bond_type = '-' AND m.label <> '-' GROUP BY m.label ORDER BY m.label ASC LIMIT 3;"
    },
    {
        "question_id": 233,
        "answer_sql": ""
    },
    {
        "question_id": 234,
        "answer_sql": " SELECT COUNT(*) AS bond_count FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON atom.atom_id IN (connected.atom_id, connected.atom_id2) WHERE bond.molecule_id = 'TR009' AND atom.atom_id IN ('TR009_12', 'TR009_12');"
    },
    {
        "question_id": 235,
        "answer_sql": "SELECT COUNT(DISTINCT m.molecule_id) AS carcinogenic_molecules_with_bromine FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.element = 'br' AND m.label = '+';"
    },
    {
        "question_id": 236,
        "answer_sql": "SELECT b.bond_type, a1.atom_id AS atom1, a2.atom_id AS atom2 FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE b.bond_id = 'TR001_6_9';"
    },
    {
        "question_id": 237,
        "answer_sql": "SELECT m.label, CASE WHEN m.label LIKE '+' THEN 'Carcinogenic' ELSE 'Non-Carcinogenic' END AS Carcinogenicity FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.atom_id = 'TR001_10';"
    },
    {
        "question_id": 238,
        "answer_sql": "SELECT COUNT(DISTINCT m.molecule_id) AS molecule_count FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = '#';"
    },
    {
        "question_id": 239,
        "answer_sql": "SELECT COUNT(bond_id) AS connections FROM connected WHERE atom_id = 'TR%_19' OR atom_id2 = 'TR%_19';"
    },
    {
        "question_id": 240,
        "answer_sql": ""
    },
    {
        "question_id": 241,
        "answer_sql": "SELECT COUNT(*) FROM molecule WHERE label = '-';"
    },
    {
        "question_id": 242,
        "answer_sql": "SELECT DISTINCT m.label FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id JOIN connected c ON a.atom_id = c.atom_id2 JOIN bond b ON c.bond_id = b.bond_id WHERE SUBSTR(a.atom_id, 7, 2) BETWEEN '21' AND '25' AND m.label = '+'"
    },
    {
        "question_id": 243,
        "answer_sql": "SELECT b.bond_id FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a1 ON c.atom_id = a1.atom_id AND a1.element = 'p' JOIN atom a2 ON c.atom_id2 = a2.atom_id AND a2.element = 'n';"
    },
    {
        "question_id": 244,
        "answer_sql": ""
    },
    {
        "question_id": 245,
        "answer_sql": " SELECT AVG(bond_count) FROM (SELECT COUNT(bond.bond_id) AS bond_count FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON atom.atom_id = connected.atom_id OR atom.atom_id = connected.atom_id2 WHERE atom.element = 'i' GROUP BY atom.atom_id) AS subquery;"
    },
    {
        "question_id": 246,
        "answer_sql": ""
    },
    {
        "question_id": 247,
        "answer_sql": "SELECT DISTINCT a.element FROM atom a LEFT JOIN connected c ON a.atom_id = c.atom_id2 WHERE c.atom_id2 IS NULL AND a.element NOT IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca');"
    },
    {
        "question_id": 248,
        "answer_sql": "SELECT a.atom_id, a.element FROM atom a JOIN bond b ON a.molecule_id = b.molecule_id JOIN connected c ON a.atom_id = c.atom_id2 OR a.atom_id = c.atom_id WHERE b.bond_type = '#' AND a.molecule_id = 'TR447' AND c.bond_id IS NOT NULL GROUP BY a.atom_id;"
    },
    {
        "question_id": 249,
        "answer_sql": ""
    },
    {
        "question_id": 250,
        "answer_sql": ""
    },
    {
        "question_id": 251,
        "answer_sql": "SELECT element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON molecule.molecule_id = atom.molecule_id WHERE molecule.label LIKE '+' GROUP BY element ORDER BY COUNT(*) ASC LIMIT 1;"
    },
    {
        "question_id": 252,
        "answer_sql": "SELECT DISTINCT c2.atom_id FROM connected AS c1 JOIN atom AS a1 ON c1.atom_id = a1.atom_id JOIN atom AS c2 ON c1.atom_id2 = c2.atom_id WHERE a1.element = 'pb';"
    },
    {
        "question_id": 253,
        "answer_sql": "SELECT DISTINCT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id2 JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = '#' AND a.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca');"
    },
    {
        "question_id": 254,
        "answer_sql": " SELECT ROUND( (COUNT(DISTINCT b.bond_id) * 100.0) / (SELECT COUNT(DISTINCT a.atom_id) FROM atom a WHERE a.element = (SELECT element FROM atom GROUP BY element ORDER BY COUNT(*) DESC LIMIT 1)) , 2) AS percentage\nFROM bond b\nJOIN connected c ON b.bond_id = c.bond_id\nJOIN atom a ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2\nWHERE a.element = (SELECT element FROM atom GROUP BY element ORDER BY COUNT(*) DESC LIMIT 1);"
    },
    {
        "question_id": 255,
        "answer_sql": "SELECT ROUND( (SELECT COUNT(*) FROM bond WHERE bond_type = '-' AND molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '+')), 0) / (SELECT COUNT(*) FROM bond WHERE bond_type = '-') AS proportion"
    },
    {
        "question_id": 256,
        "answer_sql": "SELECT COUNT(*) AS total_carbon_hydrogen_atoms FROM atom WHERE atom.element IN ('c', 'h') AND atom.molecule_id IN ( SELECT molecule_id FROM molecule );"
    },
    {
        "question_id": 257,
        "answer_sql": "SELECT atom_id2 FROM connected JOIN atom ON atom.atom_id = connected.atom_id2 WHERE atom.element = 's';"
    },
    {
        "question_id": 258,
        "answer_sql": "SELECT b.bond_type FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a ON c.atom_id = a.atom_id OR c.atom_id2 = a.atom_id JOIN molecule m ON a.molecule_id = m.molecule_id WHERE a.element = 'sn' AND (b.bond_type = '#' OR b.bond_type = ' = ' OR b.bond_type = '-');"
    },
    {
        "question_id": 259,
        "answer_sql": "SELECT COUNT(DISTINCT element) AS element_count FROM atom JOIN bond ON atom.molecule_id = bond.molecule_id WHERE bond.bond_type = '-';"
    },
    {
        "question_id": 260,
        "answer_sql": "SELECT COUNT(DISTINCT a.atom_id) AS total_atoms FROM atom a JOIN bond b ON a.molecule_id = b.molecule_id JOIN molecule m ON a.molecule_id = m.molecule_id WHERE b.bond_type = '#' AND (a.element = 'p' OR a.element = 'br');"
    },
    {
        "question_id": 261,
        "answer_sql": "SELECT bond.bond_id FROM bond JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.label = '+';"
    },
    {
        "question_id": 262,
        "answer_sql": "SELECT m.molecule_id FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = '-' AND m.label = '-';"
    },
    {
        "question_id": 263,
        "answer_sql": "SELECT ROUND(SUM(CASE WHEN element = 'cl' THEN 1 ELSE 0 END) * 100 / COUNT(atom_id), 2) AS percentage FROM atom JOIN bond ON atom.molecule_id = bond.molecule_id WHERE bond_type = '-' AND atom.molecule_id IN (SELECT molecule_id FROM molecule WHERE label LIKE '%chlorine%');"
    },
    {
        "question_id": 264,
        "answer_sql": "SELECT m.label FROM molecule m WHERE m.molecule_id IN ('TR000', 'TR001', 'TR002');"
    },
    {
        "question_id": 265,
        "answer_sql": "SELECT molecule_id FROM molecule WHERE label = '-';"
    },
    {
        "question_id": 266,
        "answer_sql": "SELECT COUNT(*) AS total_carcinogenic_molecules FROM molecule WHERE molecule_id BETWEEN 'TR000' AND 'TR030' AND label LIKE '+%'"
    },
    {
        "question_id": 267,
        "answer_sql": "SELECT b.bond_type FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE m.molecule_id BETWEEN 'TR000' AND 'TR050' AND b.bond_type IN (' = ', '-', '#');"
    },
    {
        "question_id": 268,
        "answer_sql": "SELECT DISTINCT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id2 JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_id = 'TR001_10_11';"
    },
    {
        "question_id": 269,
        "answer_sql": "SELECT COUNT(DISTINCT bond_id) FROM connected JOIN atom ON connected.atom_id = atom.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'i';"
    },
    {
        "question_id": 270,
        "answer_sql": "SELECT MAX(label) AS Carcinogenicity FROM molecule JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'ca';"
    },
    {
        "question_id": 271,
        "answer_sql": "SELECT COUNT(DISTINCT a.atom_id) = 2 AS has_both_elements FROM atom a JOIN bond b ON a.molecule_id = b.molecule_id WHERE b.bond_id = 'TR001_1_8' AND a.element = 'cl' AND a.element = 'c';"
    },
    {
        "question_id": 272,
        "answer_sql": "SELECT DISTINCT m1.molecule_id FROM molecule m1 JOIN atom a1 ON m1.molecule_id = a1.molecule_id AND a1.element = 'c' JOIN atom a2 ON a1.molecule_id = a2.molecule_id AND a2.atom_id != a1.atom_id JOIN connected c ON a1.atom_id = c.atom_id2 AND a2.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id AND b.bond_type = '#' JOIN molecule m2 ON b.molecule_id = m2.molecule_id WHERE m1.label LIKE '-' AND m2.label LIKE '-'"
    },
    {
        "question_id": 273,
        "answer_sql": "SELECT ROUND(SUM(CASE WHEN element = 'cl' THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2) as percentage FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+';"
    },
    {
        "question_id": 274,
        "answer_sql": "SELECT DISTINCT atom.element FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR001';"
    },
    {
        "question_id": 275,
        "answer_sql": ""
    },
    {
        "question_id": 276,
        "answer_sql": "SELECT c1.atom_id, c2.atom_id2 FROM connected AS c1 JOIN bond AS b ON c1.bond_id = b.bond_id JOIN connected AS c2 ON c2.bond_id = b.bond_id JOIN molecule AS m ON m.molecule_id = b.molecule_id WHERE b.bond_type = '#' AND c1.atom_id < c2.atom_id2;"
    },
    {
        "question_id": 277,
        "answer_sql": "SELECT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id2 JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_id = 'TR005_16_26' AND a.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca');"
    },
    {
        "question_id": 278,
        "answer_sql": "SELECT COUNT(*) AS non_carcinogenic_single_bond_molecules FROM molecule JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '-' AND molecule.label = '-';"
    },
    {
        "question_id": 279,
        "answer_sql": "SELECT m.label FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id JOIN connected c ON b.bond_id = c.bond_id WHERE c.atom_id IN ( SELECT atom_id2 FROM connected WHERE atom_id = ( SELECT atom_id FROM connected WHERE bond_id = 'TR001_10_11' ) ) AND b.bond_id = 'TR001_10_11';"
    },
    {
        "question_id": 280,
        "answer_sql": "SELECT bond.bond_id FROM bond JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '#' AND molecule.label = '+';"
    },
    {
        "question_id": 281,
        "answer_sql": "SELECT COUNT(*) AS toxic_elements_count FROM atom JOIN connected ON atom.atom_id = connected.atom_id2 JOIN bond ON bond.bond_id = connected.bond_id JOIN molecule ON molecule.molecule_id = atom.molecule_id WHERE substr(atom.atom_id, 7, 1) = '4' AND atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca') AND molecule.label = '+' GROUP BY atom.molecule_id;"
    },
    {
        "question_id": 282,
        "answer_sql": "SELECT molecule.label, CAST(SUM(CASE WHEN atom.element = 'h' THEN 1 ELSE 0 END) AS REAL) / COUNT(atom.atom_id) AS ratio FROM molecule JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.molecule_id = 'TR006' GROUP BY molecule.label;"
    },
    {
        "question_id": 283,
        "answer_sql": "SELECT m.label FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.element = 'ca' AND m.label IN ('+', '-');"
    },
    {
        "question_id": 284,
        "answer_sql": "SELECT bond.bond_type FROM bond JOIN atom ON bond.molecule_id = atom.molecule_id WHERE atom.element = 'te' AND (bond.bond_type = '=' OR bond.bond_type = '-' OR bond.bond_type = '#');"
    },
    {
        "question_id": 285,
        "answer_sql": "SELECT DISTINCT a1.element, a2.element FROM atom a1 JOIN connected c ON a1.atom_id = c.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id JOIN bond b ON b.bond_id = c.bond_id WHERE b.bond_id = 'TR001_10_11' AND SUBSTR(b.bond_id, 7, 2) = '10' AND SUBSTR(b.bond_id, 10, 2) = '11';"
    },
    {
        "question_id": 286,
        "answer_sql": "SELECT ROUND( (SELECT COUNT(DISTINCT m.molecule_id) FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = '#') * 100.0 / (SELECT COUNT(DISTINCT m.molecule_id) FROM molecule m), 2) AS percent_triple_bonds"
    },
    {
        "question_id": 287,
        "answer_sql": "SELECT ROUND( (SUM(CASE WHEN bond.bond_type = ' = ' THEN 1 ELSE 0 END) * 100.0) / COUNT(bond.bond_id), 2) AS percent FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.molecule_id = 'TR047' GROUP BY atom.molecule_id;"
    },
    {
        "question_id": 288,
        "answer_sql": "SELECT EXISTS( SELECT 1 FROM molecule JOIN atom ON atom.molecule_id = molecule.molecule_id WHERE atom.atom_id = 'TR001_1' AND molecule.label = '+' ) AS is_carcinogenic;"
    },
    {
        "question_id": 289,
        "answer_sql": "SELECT EXISTS( SELECT 1 FROM molecule JOIN connected ON molecule.molecule_id = connected.atom_id2 JOIN atom ON atom.atom_id = connected.atom_id WHERE molecule.label = '+' AND molecule.molecule_id = 'TR151' ) AS is_carcinogenic;"
    },
    {
        "question_id": 290,
        "answer_sql": "SELECT DISTINCT a.element FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.label = 'TR151' AND a.element LIKE 'cl%' OR a.element LIKE 'br%' OR a.element LIKE 'i%';"
    },
    {
        "question_id": 291,
        "answer_sql": "SELECT COUNT(DISTINCT m.molecule_id) FROM molecule m WHERE m.label LIKE '+';"
    },
    {
        "question_id": 292,
        "answer_sql": "SELECT a.atom_id FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.molecule_id BETWEEN 'TR010' AND 'TR050' AND a.element = 'c';"
    },
    {
        "question_id": 293,
        "answer_sql": "SELECT COUNT(DISTINCT a.atom_id) AS carcinogenic_atom_count FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.label LIKE '+';"
    },
    {
        "question_id": 294,
        "answer_sql": ""
    },
    {
        "question_id": 295,
        "answer_sql": "SELECT COUNT(DISTINCT a.atom_id) AS number_of_atoms FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE a.element = 'h' AND m.label LIKE '+';"
    },
    {
        "question_id": 296,
        "answer_sql": ""
    },
    {
        "question_id": 297,
        "answer_sql": "SELECT atom.atom_id FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'c' AND molecule.label = '-';"
    },
    {
        "question_id": 298,
        "answer_sql": "SELECT (SUM(CASE WHEN m.label = '+' AND a.element = 'h' THEN 1 ELSE 0 END) / COUNT(*)) * 100.0 AS percentage FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.element = 'h';"
    },
    {
        "question_id": 299,
        "answer_sql": "SELECT EXISTS( SELECT 1 FROM molecule JOIN connected ON molecule.molecule_id = connected.atom_id2 WHERE molecule.label = '+' AND connected.atom_id = 'TR124' ) AS is_carcinogenic;"
    },
    {
        "question_id": 300,
        "answer_sql": "SELECT a.atom_id, a.element FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.molecule_id = 'TR186';"
    },
    {
        "question_id": 301,
        "answer_sql": ""
    },
    {
        "question_id": 302,
        "answer_sql": "SELECT DISTINCT element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR001_2_4';"
    },
    {
        "question_id": 303,
        "answer_sql": "SELECT COUNT(*) AS double_bond_count FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON atom.atom_id = connected.atom_id2 JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE bond.bond_type = ' = ' AND molecule.label = '+';"
    },
    {
        "question_id": 304,
        "answer_sql": "SELECT m.label, a.element FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE m.label LIKE '+%' AND a.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca');"
    },
    {
        "question_id": 305,
        "answer_sql": ""
    },
    {
        "question_id": 306,
        "answer_sql": "SELECT m.label, GROUP_CONCAT(DISTINCT a.element) AS elements FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id JOIN bond b ON a.molecule_id = b.molecule_id WHERE b.bond_type = '#' GROUP BY m.molecule_id;"
    },
    {
        "question_id": 307,
        "answer_sql": "SELECT DISTINCT a1.element FROM atom a1 JOIN connected c ON a1.atom_id = c.atom_id2 JOIN atom a2 ON c.atom_id2 = a2.atom_id JOIN bond b ON b.bond_id = c.bond_id WHERE b.bond_id = 'TR000_2_3' AND a1.element = 'cl' OR a1.element = 'br';"
    },
    {
        "question_id": 308,
        "answer_sql": "SELECT COUNT(DISTINCT bond.bond_id) AS NumberOfBonds FROM bond JOIN atom ON bond.molecule_id = atom.molecule_id WHERE atom.element = 'cl';"
    },
    {
        "question_id": 309,
        "answer_sql": ""
    },
    {
        "question_id": 310,
        "answer_sql": "SELECT COUNT(DISTINCT m.molecule_id) AS carcinogenic_molecules_with_double_bonds FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id JOIN connected c ON b.bond_id = c.bond_id WHERE b.bond_type = ' = ' AND m.label LIKE '+';"
    },
    {
        "question_id": 311,
        "answer_sql": "SELECT COUNT(DISTINCT m.molecule_id) FROM molecule m LEFT JOIN atom a ON m.molecule_id = a.molecule_id LEFT JOIN bond b ON m.molecule_id = b.molecule_id WHERE a.element != 's' AND (b.bond_type != ' = ' OR b.bond_type IS NULL) GROUP BY m.molecule_id;"
    },
    {
        "question_id": 312,
        "answer_sql": "SELECT m.label FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE b.bond_id = 'TR001_2_4' AND m.label = '+';"
    },
    {
        "question_id": 313,
        "answer_sql": "SELECT COUNT(*) FROM atom WHERE molecule_id = 'TR005';"
    },
    {
        "question_id": 314,
        "answer_sql": "SELECT COUNT(*) FROM bond WHERE bond_type = '-';"
    },
    {
        "question_id": 315,
        "answer_sql": "SELECT m.molecule_id, m.label FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.element = 'cl' AND m.label LIKE '+%'"
    },
    {
        "question_id": 316,
        "answer_sql": "SELECT DISTINCT m.molecule_id, m.label FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.element = 'c' AND m.label = '-';"
    },
    {
        "question_id": 317,
        "answer_sql": "SELECT ROUND( (SUM(CASE WHEN label = '+' AND element = 'Cl' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) , 2) AS percentage FROM molecule JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'Cl';"
    },
    {
        "question_id": 318,
        "answer_sql": "SELECT molecule_id FROM bond WHERE bond_id = 'TR001_1_7';"
    },
    {
        "question_id": 319,
        "answer_sql": "SELECT COUNT(DISTINCT element) AS element_count FROM atom JOIN connected ON atom.atom_id = connected.atom_id2 JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR001_3_4' AND element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca');"
    },
    {
        "question_id": 320,
        "answer_sql": "SELECT b.bond_type FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a1 ON c.atom_id = a1.atom_id AND a1.atom_id = 'TR000_1' JOIN atom a2 ON c.atom_id2 = a2.atom_id AND a2.atom_id = 'TR000_2'"
    },
    {
        "question_id": 321,
        "answer_sql": "SELECT m.label FROM molecule m JOIN atom a1 ON m.molecule_id = a1.molecule_id JOIN atom a2 ON m.molecule_id = a2.molecule_id WHERE a1.atom_id = 'TR000_2' AND a2.atom_id = 'TR000_4';"
    },
    {
        "question_id": 322,
        "answer_sql": "SELECT element FROM atom WHERE atom_id = 'TR000_1';"
    },
    {
        "question_id": 323,
        "answer_sql": "SELECT EXISTS( SELECT 1 FROM molecule WHERE molecule_id = 'TR000' AND label = '+' ) AS is_carcinogenic;"
    },
    {
        "question_id": 324,
        "answer_sql": "SELECT ROUND((SUM(CASE WHEN b.bond_type = '-' THEN 1 ELSE 0 END) * 100.0) / COUNT(b.bond_id), 2) AS percentage FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a ON c.atom_id = a.atom_id OR c.atom_id2 = a.atom_id WHERE a.molecule_id = (SELECT molecule_id FROM molecule WHERE label = 'desired_molecule_label');"
    },
    {
        "question_id": 325,
        "answer_sql": "SELECT COUNT(DISTINCT m.molecule_id) AS carcinogenic_molecules_count FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id JOIN bond b ON a.molecule_id = b.molecule_id JOIN connected c ON a.atom_id = c.atom_id2 OR a.atom_id = c.atom_id WHERE a.element = 'n' AND m.label LIKE '+'"
    },
    {
        "question_id": 326,
        "answer_sql": ""
    },
    {
        "question_id": 327,
        "answer_sql": "SELECT m.molecule_id, COUNT(a.atom_id) AS atom_count FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE m.label = '-' GROUP BY m.molecule_id HAVING COUNT(a.atom_id) > 5;"
    },
    {
        "question_id": 328,
        "answer_sql": ""
    },
    {
        "question_id": 329,
        "answer_sql": "SELECT molecule.molecule_id, COUNT(atom.atom_id) AS atom_count FROM molecule JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+' GROUP BY molecule.molecule_id ORDER BY atom_count DESC LIMIT 1;"
    },
    {
        "question_id": 330,
        "answer_sql": "SELECT (SUM(CASE WHEN b.bond_type = '#' THEN 1 ELSE 0 END) / COUNT(DISTINCT m.molecule_id)) * 100.0 AS percentage FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id JOIN connected c ON b.bond_id = c.bond_id JOIN atom a ON c.atom_id = a.atom_id WHERE a.element = 'h' AND b.bond_type = '#' AND m.label = '+';"
    },
    {
        "question_id": 331,
        "answer_sql": "SELECT COUNT(*) AS carcinogenic_molecules_count FROM molecule WHERE label = '+';"
    },
    {
        "question_id": 332,
        "answer_sql": "SELECT COUNT(DISTINCT bond.molecule_id) AS single_bond_count FROM bond JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '-' AND molecule.molecule_id BETWEEN 'TR004' AND 'TR010';"
    },
    {
        "question_id": 333,
        "answer_sql": "SELECT COUNT(*) FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = 'TR008' AND atom.element = 'c';"
    },
    {
        "question_id": 334,
        "answer_sql": "SELECT element FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom_id = 'TR004_7' AND label = '-'"
    },
    {
        "question_id": 335,
        "answer_sql": "SELECT COUNT(DISTINCT m.molecule_id) FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id JOIN connected c ON b.bond_id = c.bond_id JOIN atom a ON c.atom_id = a.atom_id WHERE a.element = 'o' AND b.bond_type = '=';"
    },
    {
        "question_id": 336,
        "answer_sql": "SELECT COUNT(*) FROM molecule WHERE label = '-' AND molecule_id NOT IN ( SELECT DISTINCT m.molecule_id FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id JOIN connected c ON c.atom_id = b.bond_id OR c.atom_id2 = b.bond_id WHERE b.bond_type = '#' );"
    },
    {
        "question_id": 337,
        "answer_sql": "SELECT atom.element, bond.bond_type FROM atom JOIN bond ON atom.molecule_id = bond.molecule_id WHERE atom.molecule_id = 'TR016' AND atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca');"
    },
    {
        "question_id": 338,
        "answer_sql": ""
    },
    {
        "question_id": 339,
        "answer_sql": "SELECT atom_id FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE element = 'o' AND molecule.label = '+';"
    },
    {
        "question_id": 340,
        "answer_sql": ""
    },
    {
        "question_id": 341,
        "answer_sql": ""
    },
    {
        "question_id": 342,
        "answer_sql": "SELECT name FROM cards WHERE faceConvertedManaCost = (SELECT MAX(faceConvertedManaCost) FROM cards);"
    },
    {
        "question_id": 343,
        "answer_sql": ""
    },
    {
        "question_id": 344,
        "answer_sql": "SELECT c.* FROM cards c JOIN legalities l ON c.uuid = l.uuid JOIN sets s ON c.setCode = s.code WHERE l.status = 'Banned' AND l.format = 'gladiator' AND c.rarity = 'mythic';"
    },
    {
        "question_id": 345,
        "answer_sql": "SELECT l.format, l.status FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.type = 'Artifact' AND c.side IS NULL AND l.format = 'vintage';"
    },
    {
        "question_id": 346,
        "answer_sql": ""
    },
    {
        "question_id": 347,
        "answer_sql": ""
    },
    {
        "question_id": 348,
        "answer_sql": "SELECT text FROM rulings WHERE uuid = (SELECT uuid FROM cards WHERE name = 'Sublime Epiphany' AND number = '74s');"
    },
    {
        "question_id": 349,
        "answer_sql": "SELECT cards.name, cards.artist, cards.isPromo FROM cards JOIN rulings ON cards.uuid = rulings.uuid GROUP BY cards.uuid ORDER BY COUNT(rulings.uuid) DESC LIMIT 1;"
    },
    {
        "question_id": 350,
        "answer_sql": ""
    },
    {
        "question_id": 351,
        "answer_sql": ""
    },
    {
        "question_id": 352,
        "answer_sql": "SELECT (SUM(CASE WHEN fd.language = 'Chinese Simplified' THEN 1 ELSE 0 END) / CAST(COUNT(c.id) AS REAL)) * 100 AS percentage_available_in_chinese_simplified FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid;"
    },
    {
        "question_id": 353,
        "answer_sql": "SELECT s.name AS set_name, s.totalSetSize AS total_cards_per_set FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.language = 'Italian';"
    },
    {
        "question_id": 354,
        "answer_sql": "SELECT COUNT(DISTINCT type) AS types_count FROM cards WHERE artist = 'Aaron Boyd';"
    },
    {
        "question_id": 355,
        "answer_sql": "SELECT keywords FROM cards WHERE name = 'Angel of Mercy';"
    },
    {
        "question_id": 356,
        "answer_sql": "SELECT COUNT(*) FROM cards WHERE power = '*';"
    },
    {
        "question_id": 357,
        "answer_sql": "SELECT l.format FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.name = 'Duress' AND c.promoTypes IS NOT NULL;"
    },
    {
        "question_id": 358,
        "answer_sql": " SELECT borderColor FROM cards WHERE name = 'Ancestor''s Chosen';"
    },
    {
        "question_id": 359,
        "answer_sql": "SELECT c.originalType FROM cards c JOIN sets s ON c.setCode = s.code WHERE c.name = 'Ancestor''s Chosen' LIMIT 1;"
    },
    {
        "question_id": 360,
        "answer_sql": "SELECT DISTINCT set_translations.language FROM cards JOIN sets ON cards.setCode = sets.code JOIN set_translations ON sets.code = set_translations.setCode WHERE cards.name = 'Angel of Mercy';"
    },
    {
        "question_id": 361,
        "answer_sql": "SELECT COUNT(*) FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'restricted' AND cards.isTextless = 0;"
    },
    {
        "question_id": 362,
        "answer_sql": "SELECT r.text FROM rulings r JOIN cards c ON r.uuid = c.uuid WHERE c.name = 'Condemn'"
    },
    {
        "question_id": 363,
        "answer_sql": "SELECT COUNT(*) FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'restricted' AND cards.isStarter = 1;"
    },
    {
        "question_id": 364,
        "answer_sql": "SELECT status FROM legalities WHERE uuid = (SELECT uuid FROM cards WHERE name = 'Cloudchaser Eagle')"
    },
    {
        "question_id": 365,
        "answer_sql": "SELECT type FROM cards WHERE name = 'Benalish Knight';"
    },
    {
        "question_id": 366,
        "answer_sql": " SELECT legalities.format FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.name = 'Benalish Knight' ORDER BY cards.id DESC LIMIT 1;"
    },
    {
        "question_id": 367,
        "answer_sql": "SELECT fd.name AS artist FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE fd.language = 'Phyrexian';"
    },
    {
        "question_id": 368,
        "answer_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM cards WHERE borderColor = 'borderless')) AS percentage FROM cards WHERE borderColor = 'borderless';"
    },
    {
        "question_id": 369,
        "answer_sql": "SELECT COUNT(*) AS reprinted_cards_in_german FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'German' AND cards.isReprint = 1;"
    },
    {
        "question_id": 370,
        "answer_sql": "SELECT COUNT(*) AS NumberOfBorderlessRussianIllustratedCards FROM cards JOIN foreign_data ON cards.scryfallId = foreign_data.uuid WHERE cards.borderColor = 'borderless' AND foreign_data.language = 'Russian';"
    },
    {
        "question_id": 371,
        "answer_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM cards WHERE isStorySpotlight = 1)) AS percentage_french_story_spotlight_cards FROM cards JOIN set_translations ON cards.id = set_translations.setCode JOIN foreign_data ON set_translations.translation = foreign_data.text WHERE foreign_data.language = 'French' AND cards.isStorySpotlight = 1;"
    },
    {
        "question_id": 372,
        "answer_sql": "SELECT COUNT(*) FROM cards WHERE toughness = '99';"
    },
    {
        "question_id": 373,
        "answer_sql": "SELECT name FROM cards WHERE artist = 'Aaron Boyd';"
    },
    {
        "question_id": 374,
        "answer_sql": "SELECT COUNT(*) FROM cards JOIN sets ON cards.mtgoId = sets.code WHERE cards.borderColor = 'black' AND cards.availability = 'mtgo';"
    },
    {
        "question_id": 375,
        "answer_sql": "SELECT id FROM cards WHERE convertedManaCost = 0;"
    },
    {
        "question_id": 376,
        "answer_sql": "SELECT layout FROM cards WHERE keywords LIKE '%flying%';"
    },
    {
        "question_id": 377,
        "answer_sql": "SELECT COUNT(*) FROM cards WHERE originalType = 'Summon - Angel' AND subtypes NOT LIKE '%Angel%';"
    },
    {
        "question_id": 378,
        "answer_sql": " SELECT c.id FROM cards c WHERE EXISTS (SELECT 1 FROM cards c2 WHERE c.cardKingdomFoilId = c2.id AND c2.cardKingdomId IS NOT NULL) AND c.cardKingdomId IS NOT NULL;"
    },
    {
        "question_id": 379,
        "answer_sql": "SELECT id FROM cards WHERE duelDeck = 'a';"
    },
    {
        "question_id": 380,
        "answer_sql": ""
    },
    {
        "question_id": 381,
        "answer_sql": ""
    },
    {
        "question_id": 382,
        "answer_sql": ""
    },
    {
        "question_id": 383,
        "answer_sql": "SELECT COUNT(*) FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'Banned' AND cards.borderColor = 'white';"
    },
    {
        "question_id": 384,
        "answer_sql": ""
    },
    {
        "question_id": 385,
        "answer_sql": "SELECT rulings.text FROM rulings JOIN cards ON cards.uuid = rulings.uuid WHERE cards.name = 'Beacon of Immortality';"
    },
    {
        "question_id": 386,
        "answer_sql": "SELECT COUNT(*), legalities.status FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.frameVersion = 'future' GROUP BY legalities.status;"
    },
    {
        "question_id": 387,
        "answer_sql": "SELECT cards.colorIdentity, cards.name FROM cards JOIN sets ON cards.setCode = sets.code WHERE sets.code = 'OGW' GROUP BY cards.colorIdentity;"
    },
    {
        "question_id": 388,
        "answer_sql": "SELECT c.name, st.translation, st.language FROM cards c JOIN set_translations st ON c.setCode = st.setCode WHERE c.setCode = '10E' AND c.convertedManaCost = 5;"
    },
    {
        "question_id": 389,
        "answer_sql": "SELECT c.name, r.date FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.originalType = 'Creature - Elf' ORDER BY r.date;"
    },
    {
        "question_id": 390,
        "answer_sql": "SELECT cards.colors, legalities.format FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.id BETWEEN 1 AND 20;"
    },
    {
        "question_id": 391,
        "answer_sql": " SELECT c.name, fd.flavorText, fd.language FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.originalType = 'Artifact' AND fd.language != 'en' AND c.colors LIKE '%B%';"
    },
    {
        "question_id": 392,
        "answer_sql": "SELECT c.name, r.date FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.rarity = 'uncommon' ORDER BY r.date ASC LIMIT 3;"
    },
    {
        "question_id": 393,
        "answer_sql": "SELECT COUNT(*) AS non_powerful_foil_count FROM cards WHERE artist = 'John Avon' AND cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL;"
    },
    {
        "question_id": 394,
        "answer_sql": "SELECT COUNT(*) AS powerful_white_bordered_cards FROM cards WHERE borderColor = 'white' AND cardKingdomFoilId = cardKingdomId AND cardKingdomId IS NOT NULL;"
    },
    {
        "question_id": 395,
        "answer_sql": "SELECT COUNT(*) FROM cards JOIN sets ON cards.setCode = sets.code WHERE cards.artist = 'UDON' AND cards.availability = 'mtgo' AND cards.hand = -1;"
    },
    {
        "question_id": 396,
        "answer_sql": "SELECT COUNT(*) AS NumberOfCards FROM cards WHERE hasContentWarning = 1 AND availability = 'paper' AND frameVersion = '1993';"
    },
    {
        "question_id": 397,
        "answer_sql": "SELECT DISTINCT manaCost FROM cards WHERE layout = 'normal' AND frameVersion = '2003' AND borderColor = 'black' AND availability LIKE '%paper%' AND availability LIKE '%mtgo%';"
    },
    {
        "question_id": 398,
        "answer_sql": "SELECT SUM(CAST(SUBSTR(manaCost, 2) AS REAL)) AS total_unconverted_mana_cost FROM cards WHERE artist = 'Rob Alexander';"
    },
    {
        "question_id": 399,
        "answer_sql": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE availability = 'arena';"
    },
    {
        "question_id": 400,
        "answer_sql": " SELECT DISTINCT c.setCode FROM cards c JOIN set_translations st ON c.setCode = st.setCode WHERE st.language = 'Spanish';"
    },
    {
        "question_id": 401,
        "answer_sql": "SELECT (COUNT(*) FILTER (WHERE hand = '+3') * 100.0 / COUNT(*)) AS percentage FROM cards WHERE frameEffects = 'legendary';"
    },
    {
        "question_id": 402,
        "answer_sql": "SELECT cards.id, (COUNT(cards.id) * 100.0 / (SELECT COUNT(*) FROM cards WHERE isStorySpotlight = 1)) AS percentage FROM cards WHERE cards.isStorySpotlight = 1 AND cards.isTextless = 0 GROUP BY cards.id ORDER BY percentage DESC;"
    },
    {
        "question_id": 403,
        "answer_sql": ""
    },
    {
        "question_id": 404,
        "answer_sql": "SELECT DISTINCT language FROM set_translations JOIN sets ON sets.code = set_translations.setCode WHERE sets.baseSetSize = 309;"
    },
    {
        "question_id": 405,
        "answer_sql": "SELECT COUNT(*) FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE sets.block = 'Commander' AND set_translations.language = 'Portuguese (Brasil)';"
    },
    {
        "question_id": 406,
        "answer_sql": ""
    },
    {
        "question_id": 407,
        "answer_sql": " SELECT DISTINCT c.type FROM cards c JOIN set_translations st ON c.setCode = st.setCode WHERE st.language = 'German' AND c.subtypes IS NOT NULL AND c.supertypes IS NOT NULL;"
    },
    {
        "question_id": 408,
        "answer_sql": " SELECT COUNT(*) FROM cards WHERE power IS NULL OR power = '*' AND EXISTS (SELECT 1 FROM rulings WHERE rulings.uuid = cards.uuid AND rulings.text LIKE '%triggered ability%');"
    },
    {
        "question_id": 409,
        "answer_sql": "SELECT COUNT(*) FROM cards WHERE originalType = 'Instant' AND text LIKE '%This is a triggered mana ability%' AND side IS NULL;"
    },
    {
        "question_id": 410,
        "answer_sql": " SELECT cards.id FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE artist = 'Erica Yang' AND availability = 'paper' AND format = 'pauper';"
    },
    {
        "question_id": 411,
        "answer_sql": ""
    },
    {
        "question_id": 412,
        "answer_sql": ""
    },
    {
        "question_id": 413,
        "answer_sql": "SELECT COUNT(*) FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.rarity = 'rare' AND r.date = '2009-01-10';"
    },
    {
        "question_id": 414,
        "answer_sql": "SELECT language FROM set_translations JOIN sets ON sets.code = set_translations.setCode WHERE sets.baseSetSize = 180 AND sets.block = 'Ravnica';"
    },
    {
        "question_id": 415,
        "answer_sql": "SELECT (COUNT(CASE WHEN cards.hasContentWarning = 0 THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.format = 'commander' AND legalities.status = 'legal';"
    },
    {
        "question_id": 416,
        "answer_sql": " SELECT (COUNT(*) FILTER (WHERE language = 'French' AND (power IS NULL OR power = '*')) / CAST(COUNT(*) FILTER (WHERE (power IS NULL OR power = '*')) AS REAL)) * 100 AS percentage FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE (cards.power IS NULL OR cards.power = '*') AND foreign_data.language = 'French';"
    },
    {
        "question_id": 417,
        "answer_sql": " SELECT (COUNT(DISTINCT st.setCode) / (SELECT COUNT(DISTINCT setCode) FROM sets)) * 100 AS percentage \nFROM set_translations st \nJOIN sets s ON st.setCode = s.code \nWHERE st.language = 'Japanese' AND s.type = 'expansion';"
    },
    {
        "question_id": 418,
        "answer_sql": "SELECT cards.availability FROM cards JOIN sets ON cards.setCode = sets.code JOIN set_translations ON sets.code = set_translations.setCode WHERE cards.artist = 'Daren Bader'"
    },
    {
        "question_id": 419,
        "answer_sql": "SELECT COUNT(*) AS NumberOfColorCards FROM cards WHERE colorIdentity != '' AND borderColor = 'borderless' AND edhrecRank > 12000;"
    },
    {
        "question_id": 420,
        "answer_sql": "SELECT COUNT(*) AS NumberOfCards FROM cards WHERE isOversized = 1 AND isReprint = 1 AND isPromo = 1;"
    },
    {
        "question_id": 421,
        "answer_sql": "SELECT name, power, text, scryfallId, type, uuid FROM cards WHERE power IS NULL OR power = '*' AND promoTypes LIKE '%arenaleague%' ORDER BY name ASC LIMIT 3;"
    },
    {
        "question_id": 422,
        "answer_sql": ""
    },
    {
        "question_id": 423,
        "answer_sql": "SELECT c1.id AS foil_id, c2.id AS card_id FROM cards c1 JOIN cards c2 ON c1.cardKingdomId = c2.cardKingdomId WHERE c1.cardKingdomFoilId IS NOT NULL AND c2.cardKingdomId IS NOT NULL ORDER BY c1.cardKingdomFoilId ASC LIMIT 3;"
    },
    {
        "question_id": 424,
        "answer_sql": "SELECT (COUNT(*) FILTER (WHERE isTextless = 1 AND layout = 'normal') * 100.0 / COUNT(*)) AS proportion_without_text_normal_layout FROM cards;"
    },
    {
        "question_id": 425,
        "answer_sql": "SELECT DISTINCT c.number FROM cards c LEFT JOIN cards f ON c.id = f.id AND f.side IS NOT NULL WHERE c.subtypes LIKE '%Angel%' AND c.subtypes LIKE '%Wizard%' AND f.id IS NULL;"
    },
    {
        "question_id": 426,
        "answer_sql": "SELECT name FROM sets WHERE mtgoCode IS NULL OR mtgoCode = '' ORDER BY name ASC LIMIT 3;"
    },
    {
        "question_id": 427,
        "answer_sql": "SELECT DISTINCT language FROM set_translations WHERE setCode = 'ARC'"
    },
    {
        "question_id": 428,
        "answer_sql": " SELECT st.translation FROM cards AS c JOIN set_translations AS st ON c.setCode = st.setCode WHERE c.number = 5;"
    },
    {
        "question_id": 429,
        "answer_sql": ""
    },
    {
        "question_id": 430,
        "answer_sql": "SELECT s.id, s.code FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.language = 'Italian' AND s.block = 'Shadowmoor' ORDER BY s.name ASC LIMIT 2;"
    },
    {
        "question_id": 431,
        "answer_sql": "SELECT id FROM sets WHERE isForeignOnly = 1 AND isFoilOnly = 1 AND NOT isOnlineOnly = 1;"
    },
    {
        "question_id": 432,
        "answer_sql": " SELECT sets.name, MAX(totalSetSize) AS most_cards FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.language = 'Russian' GROUP BY sets.name ORDER BY most_cards DESC LIMIT 1;"
    },
    {
        "question_id": 433,
        "answer_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM cards WHERE isOnlineOnly = 1)) AS percentage FROM cards JOIN sets ON cards.setCode = sets.code JOIN set_translations ON sets.code = set_translations.setCode JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Chinese Simplified';"
    },
    {
        "question_id": 434,
        "answer_sql": "SELECT COUNT(*) AS NumberOfSets FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.language = 'Japanese' AND (sets.mtgoCode IS NULL OR sets.mtgoCode = '');"
    },
    {
        "question_id": 435,
        "answer_sql": " SELECT id FROM cards WHERE borderColor = 'black' LIMIT 10;"
    },
    {
        "question_id": 436,
        "answer_sql": "SELECT id FROM cards WHERE frameEffects = 'extendedart';"
    },
    {
        "question_id": 437,
        "answer_sql": " SELECT name FROM cards WHERE borderColor = 'black' AND isFullArt = 1;"
    },
    {
        "question_id": 438,
        "answer_sql": ""
    },
    {
        "question_id": 439,
        "answer_sql": "SELECT name FROM sets WHERE code = 'ALL';"
    },
    {
        "question_id": 440,
        "answer_sql": "SELECT flavorText FROM foreign_data WHERE name = 'A Pedra Fellwar' AND language != 'en';"
    },
    {
        "question_id": 441,
        "answer_sql": "SELECT code FROM sets WHERE releaseDate = '2007-07-13';"
    },
    {
        "question_id": 442,
        "answer_sql": ""
    },
    {
        "question_id": 443,
        "answer_sql": "SELECT code FROM sets WHERE type = 'expansion';"
    },
    {
        "question_id": 444,
        "answer_sql": "SELECT f.name AS foreignName, c.type AS cardType FROM cards c JOIN foreign_data f ON c.uuid = f.uuid WHERE c.watermark = 'boros';"
    },
    {
        "question_id": 445,
        "answer_sql": "SELECT ft.language, ft.text, c.type FROM cards c JOIN foreign_data ft ON c.uuid = ft.uuid WHERE c.watermark = 'colorpie';"
    },
    {
        "question_id": 446,
        "answer_sql": "SELECT (COUNT(*) FILTER (WHERE convertedManaCost = 10) * 100.0 / COUNT(*)) AS percentage FROM cards JOIN sets ON sets.id = cards.setCode WHERE sets.name = 'Abyssal Horror';"
    },
    {
        "question_id": 447,
        "answer_sql": ""
    },
    {
        "question_id": 448,
        "answer_sql": "SELECT f.name AS foreignName, c.type AS cardType FROM cards c JOIN foreign_data f ON c.uuid = f.uuid WHERE c.watermark = 'abzan'"
    },
    {
        "question_id": 449,
        "answer_sql": "SELECT fd.language, c.type FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.watermark = 'azorius';"
    },
    {
        "question_id": 450,
        "answer_sql": "SELECT COUNT(*) AS powerful_cards_count FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.artist = 'Aaron Miller' AND foreign_data.name = 'Incredibly Powerful';"
    },
    {
        "question_id": 451,
        "answer_sql": "SELECT COUNT(*) FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.availability LIKE '%paper%' AND cards.hand LIKE '+%';"
    },
    {
        "question_id": 452,
        "answer_sql": ""
    },
    {
        "question_id": 453,
        "answer_sql": ""
    },
    {
        "question_id": 454,
        "answer_sql": "SELECT COUNT(*) AS unknown_power_count FROM cards WHERE borderColor = 'white' AND (power = '*' OR power IS NULL);"
    },
    {
        "question_id": 455,
        "answer_sql": "SELECT cards.name FROM cards JOIN cards AS card_faces ON cards.id = card_faces.id WHERE cards.isPromo = 1 AND cards.side IS NOT NULL AND cards.id = card_faces.id;"
    },
    {
        "question_id": 456,
        "answer_sql": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer';"
    },
    {
        "question_id": 457,
        "answer_sql": "SELECT DISTINCT purchaseUrls FROM cards WHERE promoTypes = 'bundle';"
    },
    {
        "question_id": 458,
        "answer_sql": "SELECT COUNT(DISTINCT artist) FROM cards WHERE colors LIKE '%black%' AND (printings LIKE '%arena%' AND printings LIKE '%mtgo%') AND availability LIKE '%arena,mtgo%';"
    },
    {
        "question_id": 459,
        "answer_sql": "SELECT name, convertedManaCost FROM cards WHERE name IN ('Serra Angel', 'Shrine Keeper') ORDER BY convertedManaCost DESC LIMIT 1;"
    },
    {
        "question_id": 460,
        "answer_sql": "SELECT artist FROM cards WHERE flavorName = 'Battra, Dark Destroyer';"
    },
    {
        "question_id": 461,
        "answer_sql": "SELECT name FROM cards WHERE frameVersion = '2003' ORDER BY convertedManaCost DESC LIMIT 3;"
    },
    {
        "question_id": 462,
        "answer_sql": "SELECT setCode, translation FROM set_translations WHERE language = 'Italian' AND setCode = ( SELECT setCode FROM cards WHERE name = 'Ancestor''s Chosen' );"
    },
    {
        "question_id": 463,
        "answer_sql": "SELECT COUNT(*) AS translation_count FROM set_translations JOIN cards ON set_translations.setCode = cards.setCode WHERE cards.name = 'Angel of Mercy';"
    },
    {
        "question_id": 464,
        "answer_sql": "SELECT c.name FROM cards c JOIN sets s ON c.setCode = s.code JOIN set_translations st ON s.code = st.setCode AND st.translation = 'Hauptset Zehnte Edition'"
    },
    {
        "question_id": 465,
        "answer_sql": "SELECT * FROM set_translations WHERE setCode = (SELECT setCode FROM cards WHERE name = 'Ancestor''s Chosen') AND language = 'Korean';"
    },
    {
        "question_id": 466,
        "answer_sql": "SELECT COUNT(*) AS NumberOfCards FROM cards JOIN sets ON cards.setCode = sets.code JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.translation = 'Hauptset Zehnte Edition' AND cards.artist = 'Adam Rex';"
    },
    {
        "question_id": 467,
        "answer_sql": "SELECT COUNT(*) AS NumberOfCards FROM cards JOIN sets ON cards.setCode = sets.code WHERE sets.code = 'Hauptset Zehnte Edition';"
    },
    {
        "question_id": 468,
        "answer_sql": ""
    },
    {
        "question_id": 469,
        "answer_sql": "SELECT DISTINCT cards.id FROM cards JOIN sets ON cards.setCode = sets.code JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.name = 'Angel of Mercy' AND (sets.mtgoCode IS NOT NULL OR sets.tcgplayerGroupId IS NOT NULL);"
    },
    {
        "question_id": 470,
        "answer_sql": "SELECT sets.releaseDate FROM sets JOIN cards ON sets.code = cards.setCode WHERE cards.name = 'Ancestor''s Chosen';"
    },
    {
        "question_id": 471,
        "answer_sql": ""
    },
    {
        "question_id": 472,
        "answer_sql": "SELECT COUNT(*) AS ItalianTranslatedSets FROM set_translations JOIN sets ON set_translations.setCode = sets.code WHERE sets.block = 'Ice Age' AND set_translations.language = 'Italian';"
    },
    {
        "question_id": 473,
        "answer_sql": "SELECT COUNT(*) AS count FROM cards JOIN sets ON cards.setCode = sets.code WHERE sets.isForeignOnly = 1 AND cards.id = (SELECT id FROM cards WHERE name = 'Adarkar Valkyrie');"
    },
    {
        "question_id": 474,
        "answer_sql": "SELECT COUNT(*) AS number_of_sets FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.language = 'Italian' AND set_translations.translation IS NOT NULL AND sets.baseSetSize < 10;"
    },
    {
        "question_id": 475,
        "answer_sql": "SELECT COUNT(*) AS NumberOfCards FROM cards JOIN sets ON cards.setCode = sets.code WHERE sets.name = 'Coldsnap' AND cards.borderColor = 'black';"
    },
    {
        "question_id": 476,
        "answer_sql": " SELECT cards.name FROM cards JOIN sets ON cards.setCode = sets.code WHERE sets.name = 'Coldsnap' ORDER BY cards.convertedManaCost DESC LIMIT 1;"
    },
    {
        "question_id": 477,
        "answer_sql": "SELECT DISTINCT c.artist FROM cards c JOIN sets s ON c.setCode = s.code WHERE s.name = 'Coldsnap' AND c.artist IN ('Jeremy Jarvis', 'Aaron Miller', 'Chippy');"
    },
    {
        "question_id": 478,
        "answer_sql": "SELECT cards.number, cards.uuid FROM cards JOIN sets ON cards.setCode = sets.code WHERE sets.name = 'Coldsnap' AND cards.number = 4;"
    },
    {
        "question_id": 479,
        "answer_sql": "SELECT COUNT(*) AS UnknownPowerCount FROM cards AS T1 JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Coldsnap' AND T1.convertedManaCost > 5 AND (T1.power = '*' OR T1.power IS NULL);"
    },
    {
        "question_id": 480,
        "answer_sql": ""
    },
    {
        "question_id": 481,
        "answer_sql": "SELECT DISTINCT language FROM foreign_data JOIN cards ON cards.uuid = foreign_data.uuid WHERE cards.name = 'Ancestor''s Chosen' AND cards.flavorText IS NOT NULL;"
    },
    {
        "question_id": 482,
        "answer_sql": ""
    },
    {
        "question_id": 483,
        "answer_sql": "SELECT r.text FROM rulings r JOIN cards c ON r.uuid = c.uuid JOIN set_translations st ON c.setCode = st.setCode AND st.language = 'Italian' JOIN sets s ON c.setCode = s.code WHERE s.name = 'Coldsnap';"
    },
    {
        "question_id": 484,
        "answer_sql": ""
    },
    {
        "question_id": 485,
        "answer_sql": "SELECT date FROM rulings WHERE uuid = (SELECT uuid FROM cards WHERE name = 'Reminisce');"
    },
    {
        "question_id": 486,
        "answer_sql": "SELECT (SUM(convertedManaCost = 7) * 100.0 / COUNT(*)) AS percentage FROM cards JOIN sets ON cards.setCode = sets.code WHERE sets.name = 'Coldsnap';"
    },
    {
        "question_id": 487,
        "answer_sql": "SELECT ROUND( (SUM(CASE WHEN cardKingdomFoilId = cardKingdomId THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) , 2) AS percentage_of_incredibly_powerful_cards FROM cards JOIN sets ON cards.setCode = sets.code WHERE sets.name = 'Coldsnap';"
    },
    {
        "question_id": 488,
        "answer_sql": "SELECT code FROM sets WHERE releaseDate = '2017-07-14';"
    },
    {
        "question_id": 489,
        "answer_sql": "SELECT keyruneCode FROM sets WHERE code = 'PKHC';"
    },
    {
        "question_id": 490,
        "answer_sql": "SELECT sets.mcmId FROM sets WHERE sets.code = 'SS2';"
    },
    {
        "question_id": 491,
        "answer_sql": "SELECT mcmName FROM sets WHERE releaseDate = '2017-06-09';"
    },
    {
        "question_id": 492,
        "answer_sql": "SELECT type FROM sets WHERE name = 'From the Vault: Lore';"
    },
    {
        "question_id": 493,
        "answer_sql": "SELECT parentCode FROM sets WHERE name = 'Commander 2014 Oversized';"
    },
    {
        "question_id": 494,
        "answer_sql": ""
    },
    {
        "question_id": 495,
        "answer_sql": " SELECT sets.releaseDate FROM cards JOIN sets ON cards.setCode = sets.code WHERE cards.name = 'Evacuation';"
    },
    {
        "question_id": 496,
        "answer_sql": "SELECT s.baseSetSize FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.translation = 'Rinascita di Alara';"
    },
    {
        "question_id": 497,
        "answer_sql": "SELECT type FROM sets WHERE code = (SELECT setCode FROM set_translations WHERE translation = 'Huiti\u00e8me \u00e9dition');"
    },
    {
        "question_id": 498,
        "answer_sql": "SELECT set_translations.translation FROM set_translations JOIN cards ON set_translations.setCode = cards.setCode JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'French' AND cards.name = 'Tendo Ice Bridge';"
    },
    {
        "question_id": 499,
        "answer_sql": "SELECT COUNT(*) AS NumberOfTranslations FROM set_translations WHERE setCode = 'Salvat 2011';"
    },
    {
        "question_id": 500,
        "answer_sql": "SELECT set_translations.translation FROM cards JOIN set_translations ON cards.setCode = set_translations.setCode WHERE cards.name = 'Fellwar Stone' AND set_translations.language = 'Japanese';"
    },
    {
        "question_id": 501,
        "answer_sql": "SELECT cards.name, cards.convertedManaCost FROM cards JOIN sets ON cards.setCode = sets.code WHERE sets.name = 'Journey into Nyx Hero''s Path' ORDER BY cards.convertedManaCost DESC LIMIT 1;"
    },
    {
        "question_id": 502,
        "answer_sql": "SELECT sets.releaseDate FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.translation = 'Ola de fr\u00edo';"
    },
    {
        "question_id": 503,
        "answer_sql": "SELECT type FROM sets WHERE code = (SELECT setCode FROM cards WHERE name = 'Samite Pilgrim');"
    },
    {
        "question_id": 504,
        "answer_sql": "SELECT COUNT(*) AS NumberOfCards FROM cards JOIN sets ON cards.setCode = sets.code WHERE sets.name = 'World Championship Decks 2004' AND cards.convertedManaCost = '3';"
    },
    {
        "question_id": 505,
        "answer_sql": ""
    },
    {
        "question_id": 506,
        "answer_sql": " SELECT ROUND((SUM(CASE WHEN s.isNonFoilOnly = 1 THEN 1 ELSE 0 END) / COUNT(DISTINCT st.setCode)) * 100.0, 2) AS percentage_non_foil_japanese FROM cards c JOIN set_translations st ON c.setCode = st.setCode JOIN sets s ON st.setCode = s.code WHERE st.language = 'Japanese';\n"
    },
    {
        "question_id": 507,
        "answer_sql": "SELECT ROUND( (SUM(CASE WHEN isOnlineOnly = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) , 2) AS online_only_percentage FROM cards JOIN set_translations ON cards.setCode = set_translations.setCode WHERE set_translations.language = 'Portuguese (Brazil)';"
    },
    {
        "question_id": 508,
        "answer_sql": "SELECT DISTINCT availability FROM cards WHERE artist = 'Aleksi Briclot' AND isTextless = 1;"
    },
    {
        "question_id": 509,
        "answer_sql": " SELECT sets.id \nFROM sets \nJOIN cards ON cards.setCode = sets.code \nGROUP BY sets.id \nORDER BY MAX(sets.baseSetSize) DESC \nLIMIT 1;"
    },
    {
        "question_id": 510,
        "answer_sql": "SELECT artist FROM cards WHERE side IS NULL ORDER BY convertedManaCost DESC LIMIT 1;"
    },
    {
        "question_id": 511,
        "answer_sql": "SELECT MAX(frameEffects) AS MostCommonFrameEffects FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL;"
    },
    {
        "question_id": 512,
        "answer_sql": "SELECT COUNT(*) AS NumberOfCards FROM cards WHERE power = '*' AND hasFoil = 0 AND duelDeck = 'a';"
    },
    {
        "question_id": 513,
        "answer_sql": "SELECT sets.id FROM sets JOIN set_translations ON set_translations.setCode = sets.code WHERE sets.type = 'commander' GROUP BY sets.id ORDER BY MAX(sets.totalSetSize) DESC LIMIT 1;"
    },
    {
        "question_id": 514,
        "answer_sql": "SELECT name, MAX(convertedManaCost) as highest_uncoverted_mana_cost FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.format = 'duel' GROUP BY cards.id ORDER BY highest_uncoverted_mana_cost DESC LIMIT 10;"
    },
    {
        "question_id": 515,
        "answer_sql": "SELECT legalities.format, legalities.status FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.rarity = 'mythic' AND cards.originalReleaseDate = (SELECT MIN(originalReleaseDate) FROM cards WHERE rarity = 'mythic');"
    },
    {
        "question_id": 516,
        "answer_sql": "SELECT COUNT(*) AS NumberOfCards FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE artist = 'Volkan Baga' AND language = 'French';"
    },
    {
        "question_id": 517,
        "answer_sql": "SELECT COUNT(*) AS rare_enchantment_count FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.rarity = 'rare' AND cards.type = 'Enchantment' AND cards.name = 'Abundance' AND legalities.status = 'Legal';"
    },
    {
        "question_id": 518,
        "answer_sql": ""
    },
    {
        "question_id": 519,
        "answer_sql": ""
    },
    {
        "question_id": 520,
        "answer_sql": " SELECT artist, COUNT(*) as least_cards_count FROM cards GROUP BY artist ORDER BY least_cards_count ASC LIMIT 1;"
    },
    {
        "question_id": 521,
        "answer_sql": ""
    },
    {
        "question_id": 522,
        "answer_sql": ""
    },
    {
        "question_id": 523,
        "answer_sql": " SELECT AVG(totalSetSize) AS average_annual_sets, (SELECT translation FROM set_translations WHERE language = (SELECT language FROM set_translations GROUP BY language ORDER BY COUNT(*) DESC LIMIT 1) AND setCode = (SELECT code FROM sets WHERE releaseDate BETWEEN '2012-01-01' AND '2015-12-31' LIMIT 1)) AS common_language FROM sets WHERE releaseDate BETWEEN '2012-01-01' AND '2015-12-31';\n"
    },
    {
        "question_id": 524,
        "answer_sql": "SELECT DISTINCT artist FROM cards WHERE BorderColor = 'black' AND availability = 'arena';"
    },
    {
        "question_id": 525,
        "answer_sql": ""
    },
    {
        "question_id": 526,
        "answer_sql": "SELECT COUNT(*) AS paper_only_count FROM cards WHERE artist = 'Matthew D. Wilson' AND availability = 'paper';"
    },
    {
        "question_id": 527,
        "answer_sql": ""
    },
    {
        "question_id": 528,
        "answer_sql": ""
    },
    {
        "question_id": 529,
        "answer_sql": "SELECT s.name FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.language NOT LIKE '%Japanese%' AND st.language = 'Korean' GROUP BY s.name;"
    },
    {
        "question_id": 530,
        "answer_sql": ""
    },
    {
        "question_id": 531,
        "answer_sql": "SELECT DisplayName, Reputation FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') ORDER BY Reputation DESC LIMIT 1;"
    },
    {
        "question_id": 532,
        "answer_sql": ""
    },
    {
        "question_id": 533,
        "answer_sql": "SELECT COUNT(*) AS NumberOfUsers FROM users WHERE LastAccessDate > '2014-09-01';"
    },
    {
        "question_id": 534,
        "answer_sql": "SELECT DisplayName FROM users WHERE Views = (SELECT MAX(Views) FROM users);"
    },
    {
        "question_id": 535,
        "answer_sql": "SELECT COUNT(*) AS UsersWithMoreThan1Downvote FROM users WHERE UpVotes > 100 AND DownVotes > 1;"
    },
    {
        "question_id": 536,
        "answer_sql": "SELECT COUNT(*) AS UsersWithMoreThan10Views FROM users WHERE Views > 10 AND CreationDate > '2013-01-01';"
    },
    {
        "question_id": 537,
        "answer_sql": "SELECT COUNT(*) AS NumberOfPosts FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'csgillespie';"
    },
    {
        "question_id": 538,
        "answer_sql": "SELECT Title FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie');"
    },
    {
        "question_id": 539,
        "answer_sql": "SELECT DisplayName FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE Title = 'Eliciting priors from experts';"
    },
    {
        "question_id": 540,
        "answer_sql": "SELECT posts.Title FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'csgillespie' ORDER BY posts.ViewCount DESC LIMIT 1;"
    },
    {
        "question_id": 541,
        "answer_sql": "SELECT users.DisplayName FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE posts.FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts)"
    },
    {
        "question_id": 542,
        "answer_sql": "SELECT SUM(CommentCount) AS TotalComments FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'csgillespie';"
    },
    {
        "question_id": 543,
        "answer_sql": "SELECT posts.Id, posts.Title, MAX(answerCount) AS MaxAnswers FROM posts JOIN comments ON posts.Id = comments.PostId JOIN users ON comments.UserId = users.Id WHERE users.DisplayName = 'csgillespie' GROUP BY posts.Id ORDER BY MaxAnswers DESC LIMIT 1;"
    },
    {
        "question_id": 544,
        "answer_sql": "SELECT users.DisplayName FROM posts JOIN users ON posts.LastEditorUserId = users.Id WHERE posts.Title = 'Examples for teaching: Correlation does not mean causation';"
    },
    {
        "question_id": 545,
        "answer_sql": "SELECT COUNT(*) AS NumberOfRootPosts FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'csgillespie' AND posts.ParentId IS NULL;"
    },
    {
        "question_id": 546,
        "answer_sql": "SELECT DISTINCT u.DisplayName FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.ClosedDate IS NOT NULL;"
    },
    {
        "question_id": 547,
        "answer_sql": "SELECT COUNT(*) AS NumberOfHighScoredPosts FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.Age > 65 AND posts.Score >= 20;"
    },
    {
        "question_id": 548,
        "answer_sql": "SELECT Location FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE Title = 'Eliciting priors from experts';"
    },
    {
        "question_id": 549,
        "answer_sql": "SELECT Body FROM posts WHERE Id = (SELECT ExcerptPostId FROM tags WHERE TagName = 'bayesian');"
    },
    {
        "question_id": 550,
        "answer_sql": "SELECT posts.Body FROM posts JOIN tags ON posts.Id = tags.ExcerptPostId WHERE tags.Count = (SELECT MAX(Count) FROM tags)"
    },
    {
        "question_id": 551,
        "answer_sql": "SELECT COUNT(*) AS badge_count FROM badges JOIN users ON badges.UserId = users.Id WHERE users.DisplayName = 'csgillespie';"
    },
    {
        "question_id": 552,
        "answer_sql": "SELECT Name FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie');"
    },
    {
        "question_id": 553,
        "answer_sql": "SELECT COUNT(*) AS BadgeCount FROM badges JOIN users ON badges.UserId = users.Id WHERE users.DisplayName = 'csgillespie' AND strftime('%Y', badges.Date) = '2011';"
    },
    {
        "question_id": 554,
        "answer_sql": "SELECT DisplayName FROM users WHERE Id = (SELECT UserId FROM badges GROUP BY UserId ORDER BY COUNT(Id) DESC LIMIT 1);"
    },
    {
        "question_id": 555,
        "answer_sql": "SELECT AVG(posts.Score) AS average_score FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'csgillespie';"
    },
    {
        "question_id": 556,
        "answer_sql": "SELECT AVG(badge_count) FROM ( SELECT u.DisplayName, COUNT(b.Id) AS badge_count FROM users u JOIN badges b ON u.Id = b.UserId WHERE u.Views > 200 GROUP BY u.DisplayName ) AS subquery;"
    },
    {
        "question_id": 557,
        "answer_sql": "SELECT (SELECT COUNT(*) FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE posts.Score > 20 AND users.Age > 65) * 100.0 / (SELECT COUNT(*) FROM posts WHERE posts.Score > 20) AS percentage"
    },
    {
        "question_id": 558,
        "answer_sql": "SELECT COUNT(*) AS TotalVotes FROM votes WHERE UserId = 58 AND CreationDate = '2010-07-19';"
    },
    {
        "question_id": 559,
        "answer_sql": "SELECT CreationDate FROM votes GROUP BY CreationDate ORDER BY COUNT(Id) DESC LIMIT 1;"
    },
    {
        "question_id": 560,
        "answer_sql": "SELECT COUNT(*) AS NumberOfRevivalBadges FROM badges WHERE Name = 'Revival';"
    },
    {
        "question_id": 561,
        "answer_sql": "SELECT p.Title FROM posts p JOIN ( SELECT PostId FROM comments ORDER BY Score DESC LIMIT 1 ) AS highest_score_comment ON p.Id = highest_score_comment.PostId;"
    },
    {
        "question_id": 562,
        "answer_sql": "SELECT COUNT(*) AS CommentCount FROM comments WHERE PostId = ( SELECT Id FROM posts WHERE ViewCount = 1910 );"
    },
    {
        "question_id": 563,
        "answer_sql": "SELECT posts.FavoriteCount FROM posts JOIN comments ON posts.Id = comments.PostId JOIN users ON comments.UserId = users.Id WHERE users.Id = 3025 AND comments.CreationDate = '2014-04-23 20:29:39.0'"
    },
    {
        "question_id": 564,
        "answer_sql": "SELECT Text FROM comments WHERE PostId = (SELECT Id FROM posts WHERE ParentId = 107829 AND CommentCount = 1 LIMIT 1);"
    },
    {
        "question_id": 565,
        "answer_sql": "SELECT * FROM comments WHERE UserId = 23853 AND CreationDate = '2013-07-12 09:08:18.0';"
    },
    {
        "question_id": 566,
        "answer_sql": "SELECT Reputation FROM users WHERE Id = (SELECT OwnerUserId FROM posts WHERE Id = 65041);"
    },
    {
        "question_id": 567,
        "answer_sql": "SELECT COUNT(*) AS owned_posts_count FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'Tiago Pasqualini';"
    },
    {
        "question_id": 568,
        "answer_sql": "SELECT DisplayName FROM users WHERE Id = (SELECT UserId FROM votes WHERE Id = 6347);"
    },
    {
        "question_id": 569,
        "answer_sql": "SELECT COUNT(*) AS NumberOfVotes FROM votes JOIN posts ON votes.PostId = posts.Id WHERE posts.Title LIKE '%data visualization%';"
    },
    {
        "question_id": 570,
        "answer_sql": "SELECT badges.Name FROM badges JOIN users ON badges.UserId = users.Id WHERE users.DisplayName = 'DatEpicCoderGuyWhoPrograms';"
    },
    {
        "question_id": 571,
        "answer_sql": "SELECT COUNT(*) / (SELECT COUNT(*) FROM votes WHERE UserId = 24) AS post_to_vote_ratio FROM posts WHERE OwnerUserId = 24;"
    },
    {
        "question_id": 572,
        "answer_sql": "SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer';"
    },
    {
        "question_id": 573,
        "answer_sql": "SELECT c.Text FROM comments c JOIN posts p ON c.PostId = p.Id WHERE c.Score = 17;"
    },
    {
        "question_id": 574,
        "answer_sql": "SELECT DisplayName FROM users WHERE WebsiteUrl = 'http://stackoverflow.com';"
    },
    {
        "question_id": 575,
        "answer_sql": "SELECT Name FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'SilentGhost');"
    },
    {
        "question_id": 576,
        "answer_sql": " SELECT users.DisplayName FROM comments JOIN users ON users.Id = comments.UserId WHERE comments.Text = 'thank you user93!'"
    },
    {
        "question_id": 577,
        "answer_sql": "SELECT c.Id, c.Score, c.Text, c.CreationDate, u.DisplayName FROM comments c JOIN users u ON c.UserId = u.Id WHERE u.DisplayName = 'A Lion';"
    },
    {
        "question_id": 578,
        "answer_sql": "SELECT u.DisplayName, u.Reputation FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.Title = 'Understanding what Dassault iSight is doing?';"
    },
    {
        "question_id": 579,
        "answer_sql": " SELECT c.Id, c.Score, c.Text, c.CreationDate, u.DisplayName AS UserDisplayName FROM comments c JOIN posts p ON c.PostId = p.Id JOIN users u ON c.UserId = u.Id WHERE p.Title = 'How does gentle boosting differ from AdaBoost?' ORDER BY c.CreationDate DESC;"
    },
    {
        "question_id": 580,
        "answer_sql": "SELECT users.DisplayName FROM users JOIN badges ON users.Id = badges.UserId WHERE badges.Name = 'Necromancer' LIMIT 10;"
    },
    {
        "question_id": 581,
        "answer_sql": ""
    },
    {
        "question_id": 582,
        "answer_sql": "SELECT Title FROM posts WHERE LastEditorUserId = (SELECT Id FROM users WHERE DisplayName = 'Vebjorn Ljosa');"
    },
    {
        "question_id": 583,
        "answer_sql": "SELECT p.Score, u.WebsiteUrl FROM posts p JOIN users u ON p.LastEditorUserId = u.Id WHERE u.DisplayName = 'Yevgeny';"
    },
    {
        "question_id": 584,
        "answer_sql": "SELECT c.Text, c.CreationDate, u.DisplayName FROM comments c JOIN posts p ON c.PostId = p.Id JOIN users u ON c.UserId = u.Id WHERE p.Title = 'Why square the difference instead of taking the absolute value in standard deviation?' ORDER BY c.CreationDate DESC;"
    },
    {
        "question_id": 585,
        "answer_sql": "SELECT SUM(BountyAmount) AS TotalBountyAmount FROM votes JOIN posts ON votes.PostId = posts.Id WHERE posts.Title LIKE '%data%';"
    },
    {
        "question_id": 586,
        "answer_sql": "SELECT users.DisplayName FROM votes JOIN posts ON votes.PostId = posts.Id JOIN users ON votes.UserId = users.Id WHERE votes.BountyAmount = 50 AND posts.Title LIKE '%variance%';"
    },
    {
        "question_id": 587,
        "answer_sql": ""
    },
    {
        "question_id": 588,
        "answer_sql": "SELECT COUNT(*) AS TotalComments FROM comments WHERE UserId = 13;"
    },
    {
        "question_id": 589,
        "answer_sql": " SELECT Id FROM users ORDER BY Reputation DESC LIMIT 1;"
    },
    {
        "question_id": 590,
        "answer_sql": " SELECT users.Id, MIN(users.Views) AS LowestViews\nFROM users\nGROUP BY users.Id\nORDER BY LowestViews ASC\nLIMIT 1;"
    },
    {
        "question_id": 591,
        "answer_sql": "SELECT COUNT(DISTINCT UserId) AS SupporterCount FROM badges WHERE Name = 'Supporter' AND strftime('%Y', Date) = '2011';"
    },
    {
        "question_id": 592,
        "answer_sql": "SELECT COUNT(DISTINCT UserId) AS UsersWithMoreThan5Badges FROM badges GROUP BY UserId HAVING COUNT(Name) > 5;"
    },
    {
        "question_id": 593,
        "answer_sql": "SELECT COUNT(DISTINCT users.Id) AS NumberOfUsers FROM users JOIN badges ON users.Id = badges.UserId WHERE badges.Name IN ('Supporter', 'Teacher') AND users.Location = 'New York';"
    },
    {
        "question_id": 594,
        "answer_sql": "SELECT users.DisplayName, users.Reputation FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE posts.Id = 1;"
    },
    {
        "question_id": 595,
        "answer_sql": " SELECT u.Id, u.DisplayName \nFROM users u \nJOIN (\n    SELECT ph.UserId \n    FROM postHistory ph \n    GROUP BY ph.PostId \n    HAVING COUNT(ph.Id) = 1\n) AS single_post_history ON u.Id = single_post_history.UserId \nJOIN (\n    SELECT p.Id \n    FROM posts p \n    GROUP BY p.Id \n    HAVING SUM(p.ViewCount) >= 1000\n) AS popular_posts ON single_post_history.UserId = popular_posts.Id;"
    },
    {
        "question_id": 596,
        "answer_sql": "SELECT u.Id, u.DisplayName, b.Name AS BadgeName FROM users u JOIN ( SELECT UserId, COUNT(Id) AS CommentCount FROM comments GROUP BY UserId ORDER BY CommentCount DESC LIMIT 1 ) AS top_commenter ON u.Id = top_commenter.UserId JOIN badges b ON u.Id = b.UserId;"
    },
    {
        "question_id": 597,
        "answer_sql": "SELECT COUNT(DISTINCT u.Id) AS NumberOfUsers FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Name = 'Teacher' AND u.Location = 'India';"
    },
    {
        "question_id": 598,
        "answer_sql": "SELECT ROUND(((COUNT(CASE WHEN strftime('%Y', Date) = '2010' THEN Name END) / COUNT(Name)) * 100 - (COUNT(CASE WHEN strftime('%Y', Date) = '2011' THEN Name END) / COUNT(Name)) * 100), 2) AS percentage_difference FROM badges WHERE Name = 'Students';"
    },
    {
        "question_id": 599,
        "answer_sql": "SELECT DISTINCT ph.PostHistoryTypeId, COUNT(DISTINCT ch.UserId) AS UniqueCommenters FROM postHistory ph JOIN comments ch ON ph.PostId = ch.PostId WHERE ph.PostId = 3720 GROUP BY ph.PostHistoryTypeId;"
    },
    {
        "question_id": 600,
        "answer_sql": "SELECT p.Id, p.Title, p.ViewCount FROM posts p JOIN postLinks pl ON p.Id = pl.PostId OR p.Id = pl.RelatedPostId WHERE pl.RelatedPostId = 61217 OR pl.PostId = 61217"
    },
    {
        "question_id": 601,
        "answer_sql": "SELECT p.Score, pl.LinkTypeId FROM posts p JOIN postLinks pl ON p.Id = pl.PostId WHERE p.Id = 395;"
    },
    {
        "question_id": 602,
        "answer_sql": "SELECT posts.Id AS PostId, users.Id AS UserId FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE posts.Score > 60;"
    },
    {
        "question_id": 603,
        "answer_sql": " SELECT SUM(p.FavoriteCount) AS TotalFavorites FROM posts p JOIN users u ON p.OwnerUserId = u.Id JOIN badges b ON u.Id = b.UserId WHERE b.Date BETWEEN '2011-01-01' AND '2011-12-31' AND u.Id = 686;"
    },
    {
        "question_id": 604,
        "answer_sql": ""
    },
    {
        "question_id": 605,
        "answer_sql": "SELECT COUNT(DISTINCT UserId) AS AnnouncerBadgeCount FROM badges WHERE Name = 'Announcer';"
    },
    {
        "question_id": 606,
        "answer_sql": ""
    },
    {
        "question_id": 607,
        "answer_sql": "SELECT COUNT(*) FROM comments WHERE Score > 60;"
    },
    {
        "question_id": 608,
        "answer_sql": "SELECT Text FROM comments WHERE CreationDate = '2010-07-19 19:16:14.0';"
    },
    {
        "question_id": 609,
        "answer_sql": "SELECT COUNT(*) AS NumberOfPosts FROM posts WHERE Score = 10;"
    },
    {
        "question_id": 610,
        "answer_sql": "SELECT b.Name FROM badges b JOIN ( SELECT u.Id FROM users u ORDER BY u.Reputation DESC LIMIT 1 ) top_user ON b.UserId = top_user.Id;"
    },
    {
        "question_id": 611,
        "answer_sql": "SELECT u.Reputation FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Date = '2010-07-19 19:39:08.0';"
    },
    {
        "question_id": 612,
        "answer_sql": "SELECT Name FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'Pierre');"
    },
    {
        "question_id": 613,
        "answer_sql": " SELECT DISTINCT b.Date AS BadgeObtainedDate\nFROM badges b\nJOIN users u ON b.UserId = u.Id\nWHERE u.Location = 'Rochester, NY';"
    },
    {
        "question_id": 614,
        "answer_sql": "SELECT (COUNT(DISTINCT u.Id) * 100.0 / (SELECT COUNT(DISTINCT Id) FROM users)) AS percentage FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Name = 'Teacher';"
    },
    {
        "question_id": 615,
        "answer_sql": "SELECT (COUNT(DISTINCT CASE WHEN u.Age BETWEEN 13 AND 18 THEN u.Id END) * 100.0 / COUNT(DISTINCT b.UserId)) AS PercentageOfTeenagers FROM badges b JOIN users u ON b.UserId = u.Id WHERE b.Name = 'Organizer';"
    },
    {
        "question_id": 616,
        "answer_sql": "SELECT AVG(Score) AS AverageScore FROM comments WHERE PostId = ( SELECT Id FROM posts WHERE CreationDate = '2010-07-19 19:19:56.0' );"
    },
    {
        "question_id": 617,
        "answer_sql": ""
    },
    {
        "question_id": 618,
        "answer_sql": "SELECT users.Age FROM users JOIN badges ON users.Id = badges.UserId WHERE users.Location = 'Vienna, Austria'"
    },
    {
        "question_id": 619,
        "answer_sql": "SELECT COUNT(*) AS adult_supporters FROM badges JOIN users ON badges.UserId = users.Id WHERE badges.Name = 'Supporter' AND users.Age BETWEEN 19 AND 65;"
    },
    {
        "question_id": 620,
        "answer_sql": "SELECT COUNT(u.Views) FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Date = '2010-07-19 19:39:08.0';"
    },
    {
        "question_id": 621,
        "answer_sql": "SELECT Name FROM badges JOIN users ON badges.UserId = users.Id WHERE Reputation = (SELECT MIN(Reputation) FROM users);"
    },
    {
        "question_id": 622,
        "answer_sql": "SELECT Name FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'Sharpie');"
    },
    {
        "question_id": 623,
        "answer_sql": "SELECT COUNT(*) AS elders_with_supporter_badge FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Name = 'Supporter' AND u.Age > 65;"
    },
    {
        "question_id": 624,
        "answer_sql": "SELECT DisplayName FROM users WHERE Id = 30;"
    },
    {
        "question_id": 625,
        "answer_sql": "SELECT COUNT(*) AS users_from_new_york FROM users WHERE Location = 'New York';"
    },
    {
        "question_id": 626,
        "answer_sql": " SELECT COUNT(*) AS NumberOfVotes FROM votes WHERE strftime('%Y', CreationDate) = '2010';"
    },
    {
        "question_id": 627,
        "answer_sql": "SELECT COUNT(*) AS AdultUserCount FROM users WHERE Age BETWEEN 19 AND 65;"
    },
    {
        "question_id": 628,
        "answer_sql": "SELECT DisplayName, MAX(Views) as HighestViews FROM users GROUP BY DisplayName ORDER BY HighestViews DESC LIMIT 10;"
    },
    {
        "question_id": 629,
        "answer_sql": ""
    },
    {
        "question_id": 630,
        "answer_sql": ""
    },
    {
        "question_id": 631,
        "answer_sql": "SELECT COUNT(*) AS NumberOfPosts FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'Daniel Vassallo';"
    },
    {
        "question_id": 632,
        "answer_sql": "SELECT COUNT(*) AS TotalVotes FROM votes JOIN users ON votes.UserId = users.Id WHERE users.DisplayName = 'Harlan';"
    },
    {
        "question_id": 633,
        "answer_sql": "SELECT Id FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'slashnick') ORDER BY AnswerCount DESC LIMIT 1;"
    },
    {
        "question_id": 634,
        "answer_sql": "SELECT DisplayName, SUM(ViewCount) AS TotalViews FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE DisplayName IN ('Harvey Motulsky', 'Noah Snyder') GROUP BY DisplayName ORDER BY TotalViews DESC LIMIT 1;"
    },
    {
        "question_id": 635,
        "answer_sql": "SELECT COUNT(*) AS NumberOfPosts FROM posts JOIN votes ON posts.Id = votes.PostId JOIN users ON votes.UserId = users.Id WHERE users.DisplayName = 'Matt Parker' AND votes.PostId > 4;"
    },
    {
        "question_id": 636,
        "answer_sql": "SELECT COUNT(*) AS NegativeCommentsCount FROM comments JOIN posts ON comments.PostId = posts.Id JOIN users ON comments.UserId = users.Id WHERE comments.Score < 60 AND users.DisplayName = 'Neil McGuigan';"
    },
    {
        "question_id": 637,
        "answer_sql": ""
    },
    {
        "question_id": 638,
        "answer_sql": "SELECT users.DisplayName FROM users JOIN badges ON users.Id = badges.UserId WHERE badges.Name = 'Organizer';"
    },
    {
        "question_id": 639,
        "answer_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Community'))) AS percentage FROM posts JOIN tags ON posts.Id = tags.ExcerptPostId WHERE tags.TagName = 'r';"
    },
    {
        "question_id": 640,
        "answer_sql": "SELECT (SELECT SUM(ViewCount) FROM posts WHERE OwnerDisplayName = 'Mornington') - (SELECT SUM(ViewCount) FROM posts WHERE OwnerDisplayName = 'Amos') AS ViewCountDifference;"
    },
    {
        "question_id": 641,
        "answer_sql": "SELECT COUNT(DISTINCT users.Id) AS NumberOfUsers FROM users JOIN badges ON users.Id = badges.UserId WHERE badges.Name = 'commentator' AND strftime('%Y', badges.Date) = '2014';"
    },
    {
        "question_id": 642,
        "answer_sql": ""
    },
    {
        "question_id": 643,
        "answer_sql": "SELECT DisplayName, Age FROM users WHERE Views = (SELECT MAX(Views) FROM users);"
    },
    {
        "question_id": 644,
        "answer_sql": "SELECT posts.LastEditDate, users.DisplayName FROM posts JOIN users ON posts.LastEditorUserId = users.Id WHERE posts.Title = 'Detecting a given face in a database of facial images';"
    },
    {
        "question_id": 645,
        "answer_sql": "SELECT COUNT(*) AS NegativeCommentsCount FROM comments WHERE Score < 60 AND UserId = 13;"
    },
    {
        "question_id": 646,
        "answer_sql": "SELECT p.Title, c.UserDisplayName FROM posts p JOIN comments c ON p.Id = c.PostId WHERE c.Score > 60 ORDER BY p.Title;"
    },
    {
        "question_id": 647,
        "answer_sql": "SELECT badges.Name FROM badges JOIN users ON badges.UserId = users.Id WHERE users.Location = 'North Pole' AND strftime('%Y', badges.Date) = '2011';"
    },
    {
        "question_id": 648,
        "answer_sql": "SELECT users.DisplayName, users.WebsiteUrl FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE posts.FavoriteCount > 150;"
    },
    {
        "question_id": 649,
        "answer_sql": " SELECT p.Title, COUNT(ph.Id) AS PostHistoryCount, MAX(ph.CreationDate) AS LastEditDate FROM posts p LEFT JOIN postHistory ph ON p.Id = ph.PostId WHERE p.Title = 'What is the best introductory Bayesian statistics textbook?' GROUP BY p.Id;"
    },
    {
        "question_id": 650,
        "answer_sql": ""
    },
    {
        "question_id": 651,
        "answer_sql": "SELECT p.Title FROM posts p JOIN postLinks pl ON p.Id = pl.PostId JOIN posts pl2 ON pl2.Id = pl.RelatedPostId WHERE p.Title = 'How to tell if something happened in a data set which monitors a value over time';"
    },
    {
        "question_id": 652,
        "answer_sql": ""
    },
    {
        "question_id": 653,
        "answer_sql": "SELECT users.DisplayName FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE posts.ViewCount = (SELECT MAX(ViewCount) FROM posts);"
    },
    {
        "question_id": 654,
        "answer_sql": "SELECT DisplayName, Location FROM users WHERE Id = ( SELECT OwnerUserId FROM posts JOIN tags ON posts.Id = tags.ExcerptPostId WHERE TagName = 'hypothesis-testing' );"
    },
    {
        "question_id": 655,
        "answer_sql": "SELECT pl.RelatedPostId, pt.Title, pl.LinkTypeId FROM postLinks pl JOIN posts pt ON pl.RelatedPostId = pt.Id WHERE pt.Title = 'What are principal component scores?';"
    },
    {
        "question_id": 656,
        "answer_sql": "SELECT u.DisplayName FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.ParentId IS NOT NULL ORDER BY p.Score DESC LIMIT 1;"
    },
    {
        "question_id": 657,
        "answer_sql": "SELECT u.DisplayName, u.WebsiteUrl FROM users u JOIN votes v ON u.Id = v.UserId WHERE v.VoteTypeId = 8 ORDER BY v.BountyAmount DESC LIMIT 1;"
    },
    {
        "question_id": 658,
        "answer_sql": "SELECT posts.Title FROM posts ORDER BY posts.ViewCount DESC LIMIT 5;"
    },
    {
        "question_id": 659,
        "answer_sql": "SELECT COUNT(*) AS tag_count FROM tags WHERE Count BETWEEN 5000 AND 7000;"
    },
    {
        "question_id": 660,
        "answer_sql": " SELECT posts.OwnerUserId\nFROM posts\nJOIN (SELECT MAX(FavoriteCount) AS MaxFavoriteCount FROM posts) AS MaxFavorite\nON posts.FavoriteCount = MaxFavorite.MaxFavoriteCount;"
    },
    {
        "question_id": 661,
        "answer_sql": "SELECT Users.DisplayName, Users.Age FROM users AS Users WHERE Users.Id = ( SELECT Users.Id FROM users AS Users ORDER BY Users.Reputation DESC LIMIT 1 );"
    },
    {
        "question_id": 662,
        "answer_sql": ""
    },
    {
        "question_id": 663,
        "answer_sql": "SELECT Id FROM users WHERE Age = (SELECT MIN(Age) FROM users);"
    },
    {
        "question_id": 664,
        "answer_sql": "SELECT p.Score FROM posts p JOIN tags t ON p.Id = t.ExcerptPostId WHERE t.Count = (SELECT MAX(Count) FROM tags)"
    },
    {
        "question_id": 665,
        "answer_sql": ""
    },
    {
        "question_id": 666,
        "answer_sql": "SELECT p.Id FROM posts p JOIN votes v ON p.Id = v.PostId WHERE v.UserId = 1465 GROUP BY p.Id ORDER BY MAX(v.BountyAmount) DESC, p.FavoriteCount DESC LIMIT 1;"
    },
    {
        "question_id": 667,
        "answer_sql": " SELECT p.Title FROM posts p JOIN postLinks pl ON p.Id = pl.PostId WHERE pl.CreationDate = (SELECT MIN(pl2.CreationDate) FROM postLinks pl2 WHERE pl2.PostId = p.Id) ORDER BY pl.CreationDate ASC LIMIT 1;"
    },
    {
        "question_id": 668,
        "answer_sql": "SELECT users.DisplayName FROM users JOIN badges ON users.Id = badges.UserId GROUP BY users.Id ORDER BY COUNT(badges.Name) DESC LIMIT 1;"
    },
    {
        "question_id": 669,
        "answer_sql": "SELECT MIN(v.CreationDate) AS FirstVoteDate FROM votes v JOIN users u ON v.UserId = u.Id WHERE u.DisplayName = 'chl'"
    },
    {
        "question_id": 670,
        "answer_sql": "SELECT CreationDate FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE Age = (SELECT MIN(Age) FROM users) GROUP BY posts.Id ORDER BY CreationDate ASC LIMIT 1;"
    },
    {
        "question_id": 671,
        "answer_sql": "SELECT DisplayName FROM users JOIN badges ON users.Id = badges.UserId WHERE badges.Name = 'Autobiographer' ORDER BY badges.Date ASC LIMIT 1;"
    },
    {
        "question_id": 672,
        "answer_sql": "SELECT COUNT(DISTINCT u.Id) AS UKUsersWithFavorites4OrMore FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE u.Location = 'United Kingdom' AND p.FavoriteCount >= 4;"
    },
    {
        "question_id": 673,
        "answer_sql": "SELECT AVG(v.PostId) AS AveragePostsVoted FROM votes v JOIN users u ON v.UserId = u.Id WHERE u.Age = (SELECT MAX(Age) FROM users);"
    },
    {
        "question_id": 674,
        "answer_sql": "SELECT DisplayName FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users);"
    },
    {
        "question_id": 675,
        "answer_sql": "SELECT COUNT(*) AS user_count FROM users WHERE Reputation > 2000 AND Views > 1000;"
    },
    {
        "question_id": 676,
        "answer_sql": ""
    },
    {
        "question_id": 677,
        "answer_sql": ""
    },
    {
        "question_id": 678,
        "answer_sql": "SELECT posts.Id, posts.Title FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'Harvey Motulsky' ORDER BY posts.ViewCount DESC LIMIT 1;"
    },
    {
        "question_id": 679,
        "answer_sql": "SELECT posts.Id, posts.Title, users.DisplayName FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE posts.Score = (SELECT MAX(Score) FROM posts);"
    },
    {
        "question_id": 680,
        "answer_sql": "SELECT AVG(p.Score) AS AverageScore FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'Stephen Turner';"
    },
    {
        "question_id": 681,
        "answer_sql": " SELECT DisplayName FROM users JOIN posts ON users.Id = posts.OwnerUserId WHERE ViewCount > 20000 AND strftime('%Y', CreationDate) = '2011';"
    },
    {
        "question_id": 682,
        "answer_sql": "SELECT posts.Id, users.DisplayName FROM posts JOIN users ON posts.OwnerUserId = users.Id JOIN badges ON users.Id = badges.UserId WHERE strftime('%Y', posts.CreaionDate) = '2010' ORDER BY posts.FavoriteCount DESC LIMIT 1;"
    },
    {
        "question_id": 683,
        "answer_sql": ""
    },
    {
        "question_id": 684,
        "answer_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM users)) as percentage FROM users WHERE Age BETWEEN 13 AND 18;"
    },
    {
        "question_id": 685,
        "answer_sql": ""
    },
    {
        "question_id": 686,
        "answer_sql": "SELECT COUNT(*) AS TotalPostsAboveAverageViews FROM posts WHERE ViewCount > (SELECT AVG(ViewCount) FROM posts);"
    },
    {
        "question_id": 687,
        "answer_sql": " SELECT COUNT(*) AS NumberOfComments FROM comments WHERE PostId = (SELECT Id FROM posts ORDER BY Score DESC LIMIT 1);"
    },
    {
        "question_id": 688,
        "answer_sql": "SELECT COUNT(*) AS NumberOfPosts FROM posts WHERE ViewCount > 35000 AND CommentCount = 0;"
    },
    {
        "question_id": 689,
        "answer_sql": ""
    },
    {
        "question_id": 690,
        "answer_sql": "SELECT Name, Date FROM badges JOIN users ON badges.UserId = users.Id WHERE users.DisplayName = 'Emmett' ORDER BY badges.Date DESC LIMIT 1;"
    },
    {
        "question_id": 691,
        "answer_sql": "SELECT COUNT(*) AS NumberOfAdultUsersWithOver5000Upvotes FROM users WHERE Age BETWEEN 19 AND 65 AND UpVotes > 5000;"
    },
    {
        "question_id": 692,
        "answer_sql": "SELECT julianday(b.Date) - julianday(u.CreationDate) AS days_to_badge FROM users u JOIN badges b ON u.Id = b.UserId WHERE u.DisplayName = 'Zolomon';"
    },
    {
        "question_id": 693,
        "answer_sql": "SELECT COUNT(DISTINCT posts.Id) AS NumberOfPosts, COUNT(DISTINCT comments.Id) AS NumberOfComments FROM posts JOIN users ON posts.OwnerUserId = users.Id JOIN comments ON posts.Id = comments.PostId WHERE users.CreationDate = (SELECT MAX(CreationDate) FROM users);"
    },
    {
        "question_id": 694,
        "answer_sql": "SELECT comments.Text, users.DisplayName FROM comments JOIN posts ON comments.PostId = posts.Id JOIN users ON comments.UserId = users.Id WHERE posts.Title = 'Analysing wind data with R' ORDER BY comments.CreationDate DESC LIMIT 1;"
    },
    {
        "question_id": 695,
        "answer_sql": "SELECT COUNT(DISTINCT u.Id) AS CitizenPatrolAwardCount FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Name = 'Citizen Patrol';"
    },
    {
        "question_id": 696,
        "answer_sql": "SELECT COUNT(*) AS NumberOfCareerPosts FROM posts JOIN tags ON posts.Id = tags.ExcerptPostId WHERE tags.TagName = 'careers';"
    },
    {
        "question_id": 697,
        "answer_sql": "SELECT reputation, views FROM users WHERE DisplayName = 'Jarrod Dixon';"
    },
    {
        "question_id": 698,
        "answer_sql": "SELECT COUNT(*) AS CommentCount, COUNT(DISTINCT p.Id) AS AnswerCount FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.Title = 'Clustering 1D data' AND c.Score > 0 AND p.PostTypeId = 1;"
    },
    {
        "question_id": 699,
        "answer_sql": "SELECT CreationDate FROM users WHERE DisplayName = 'IrishStat';"
    },
    {
        "question_id": 700,
        "answer_sql": "SELECT COUNT(*) AS NumberOfPostsWithBountyOver30 FROM votes JOIN posts ON votes.PostId = posts.Id WHERE votes.BountyAmount >= 30;"
    },
    {
        "question_id": 701,
        "answer_sql": "SELECT (COUNT(p.Id) FILTER (WHERE p.Score >= 50) * 100.0 / COUNT(p.Id)) AS percentage FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.Reputation = (SELECT MAX(Reputation) FROM users);"
    },
    {
        "question_id": 702,
        "answer_sql": "SELECT COUNT(*) AS NumberOfPostsWithLowScore FROM posts WHERE Score < 20;"
    },
    {
        "question_id": 703,
        "answer_sql": "SELECT COUNT(*) FROM tags WHERE Id < 15 AND Count <= 20;"
    },
    {
        "question_id": 704,
        "answer_sql": "SELECT t.ExcerptPostId, t.WikiPostId FROM tags t JOIN posts p ON t.ExcerptPostId = p.Id WHERE t.TagName = 'sample';"
    },
    {
        "question_id": 705,
        "answer_sql": "SELECT users.Reputation, users.UpVotes FROM users JOIN comments ON users.Id = comments.UserId WHERE comments.Text = 'fine, you win :)'"
    },
    {
        "question_id": 706,
        "answer_sql": ""
    },
    {
        "question_id": 707,
        "answer_sql": "SELECT Text, Score FROM comments WHERE PostId IN ( SELECT Id FROM posts WHERE ViewCount BETWEEN 100 AND 150 ) ORDER BY Score DESC LIMIT 1;"
    },
    {
        "question_id": 708,
        "answer_sql": ""
    },
    {
        "question_id": 709,
        "answer_sql": "SELECT COUNT(*) AS LowViewCountPosts FROM posts WHERE ViewCount < 5 AND Id NOT IN ( SELECT PostId FROM comments WHERE Score = 0 );"
    },
    {
        "question_id": 710,
        "answer_sql": "SELECT COUNT(*) AS ZeroScoreComments FROM comments WHERE PostId IN ( SELECT Id FROM posts WHERE CommentCount = 1 ) AND Score = 0;"
    },
    {
        "question_id": 711,
        "answer_sql": "SELECT COUNT(DISTINCT u.Id) AS TotalUsers FROM users u JOIN comments c ON u.Id = c.UserId JOIN posts p ON c.PostId = p.Id WHERE c.Score = 0 AND u.Age = 40;"
    },
    {
        "question_id": 712,
        "answer_sql": "SELECT p.Id AS PostId, c.Text AS CommentText FROM posts p JOIN comments c ON p.Id = c.PostId WHERE p.Title = 'Group differences on a five point Likert item';"
    },
    {
        "question_id": 713,
        "answer_sql": "SELECT COUNT(*) AS UpVotes FROM votes WHERE UserId = ( SELECT UserId FROM comments WHERE Text = 'R is also lazy evaluated.' )"
    },
    {
        "question_id": 714,
        "answer_sql": "SELECT c.* FROM comments c JOIN users u ON c.UserId = u.Id WHERE u.DisplayName = 'Harvey Motulsky';"
    },
    {
        "question_id": 715,
        "answer_sql": "SELECT DISTINCT users.DisplayName FROM comments JOIN users ON comments.UserId = users.Id WHERE comments.Score BETWEEN 1 AND 5 AND users.DownVotes = 0;"
    },
    {
        "question_id": 716,
        "answer_sql": "SELECT (COUNT(DISTINCT u.Id) FILTER (WHERE u.UpVotes = 0) * 100.0 / COUNT(DISTINCT c.UserId)) AS percentage FROM comments c JOIN users u ON c.UserId = u.Id WHERE c.Score BETWEEN 5 AND 10;"
    },
    {
        "question_id": 717,
        "answer_sql": "SELECT superpower.power_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = '3-D Man';"
    },
    {
        "question_id": 718,
        "answer_sql": "SELECT COUNT(*) AS NumberOfSuperheroesWithSuperStrength FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Super Strength';"
    },
    {
        "question_id": 719,
        "answer_sql": "SELECT COUNT(*) FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Super Strength' AND superhero.height_cm > 200;"
    },
    {
        "question_id": 720,
        "answer_sql": "SELECT superhero.full_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id GROUP BY superhero.id HAVING COUNT(hero_power.power_id) > 15;"
    },
    {
        "question_id": 721,
        "answer_sql": "SELECT COUNT(*) AS number_of_superheroes_with_blue_eyes FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Blue';"
    },
    {
        "question_id": 722,
        "answer_sql": "SELECT colour.colour FROM superhero JOIN colour ON superhero.skin_colour_id = colour.id WHERE superhero.superhero_name = 'Apocalypse';"
    },
    {
        "question_id": 723,
        "answer_sql": "SELECT COUNT(*) FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Blue' AND superpower.power_name = 'Agility';"
    },
    {
        "question_id": 724,
        "answer_sql": " SELECT superhero.superhero_name FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id AND superhero.hair_colour_id = colour.id JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE colour.colour = 'Blue' AND superhero.hair_colour_id = colour.id AND superpower.power_name = 'Agility';"
    },
    {
        "question_id": 725,
        "answer_sql": "SELECT COUNT(*) FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics');"
    },
    {
        "question_id": 726,
        "answer_sql": "SELECT superhero.full_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' ORDER BY superhero.height_cm DESC LIMIT 1;"
    },
    {
        "question_id": 727,
        "answer_sql": "SELECT publisher_name FROM publisher JOIN superhero ON publisher.id = superhero.publisher_id WHERE superhero_name = 'Sauron';"
    },
    {
        "question_id": 728,
        "answer_sql": "SELECT COUNT(*) AS NumberOfBlueEyedMarvelHeroes FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' AND colour.colour = 'Blue';"
    },
    {
        "question_id": 729,
        "answer_sql": "SELECT AVG(superhero.height_cm) AS average_height FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics';"
    },
    {
        "question_id": 730,
        "answer_sql": "SELECT ROUND( (SELECT COUNT(*) FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' AND superpower.power_name = 'Super Strength') * 100.0 / (SELECT COUNT(*) FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics') ) AS percentage_with_super_strength;"
    },
    {
        "question_id": 731,
        "answer_sql": "SELECT COUNT(*) FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'DC Comics';"
    },
    {
        "question_id": 732,
        "answer_sql": "SELECT publisher.publisher_name FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id JOIN publisher ON superhero.publisher_id = publisher.id WHERE attribute.attribute_name = 'Speed' AND hero_attribute.attribute_value = ( SELECT MIN(attribute_value) FROM hero_attribute JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE superhero.id = hero_attribute.hero_id AND attribute.attribute_name = 'Speed' )"
    },
    {
        "question_id": 733,
        "answer_sql": "SELECT COUNT(*) FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id JOIN colour ON superhero.eye_colour_id = colour.id WHERE publisher.publisher_name = 'Marvel Comics' AND colour.colour = 'Gold';"
    },
    {
        "question_id": 734,
        "answer_sql": "SELECT publisher.publisher_name FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.superhero_name = 'Blue Beetle II';"
    },
    {
        "question_id": 735,
        "answer_sql": "SELECT COUNT(*) FROM superhero WHERE hair_colour_id = (SELECT id FROM colour WHERE colour = 'Blond');"
    },
    {
        "question_id": 736,
        "answer_sql": "SELECT superhero.superhero_name FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Intelligence' ORDER BY hero_attribute.attribute_value ASC LIMIT 1;"
    },
    {
        "question_id": 737,
        "answer_sql": "SELECT race.race FROM superhero JOIN race ON superhero.race_id = race.id WHERE superhero.superhero_name = 'Copycat';"
    },
    {
        "question_id": 738,
        "answer_sql": "SELECT COUNT(*) AS superhero_count FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Durability' AND hero_attribute.attribute_value < 50;"
    },
    {
        "question_id": 739,
        "answer_sql": "SELECT superhero.superhero_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Death Touch';"
    },
    {
        "question_id": 740,
        "answer_sql": "SELECT COUNT(*) FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE superhero.gender_id = (SELECT id FROM gender WHERE gender = 'Female') AND hero_attribute.attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Strength') AND hero_attribute.attribute_value = 100;"
    },
    {
        "question_id": 741,
        "answer_sql": "SELECT superhero_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id GROUP BY superhero_name ORDER BY COUNT(hero_power.power_id) DESC LIMIT 1;"
    },
    {
        "question_id": 742,
        "answer_sql": "SELECT COUNT(*) AS vampire_superhero_count FROM superhero JOIN race ON superhero.race_id = race.id WHERE race.race = 'Vampire';"
    },
    {
        "question_id": 743,
        "answer_sql": "SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM superhero) AS percentage_bad_alignment FROM superhero JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.alignment = 'Bad' AND superhero.publisher_id IN (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics');"
    },
    {
        "question_id": 744,
        "answer_sql": "SELECT (SELECT COUNT(*) FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics')) - (SELECT COUNT(*) FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'DC Comics')) AS difference"
    },
    {
        "question_id": 745,
        "answer_sql": " SELECT id FROM publisher WHERE publisher_name = 'Star Trek';"
    },
    {
        "question_id": 746,
        "answer_sql": "SELECT AVG(ha.attribute_value) AS average_attribute_value FROM hero_attribute ha JOIN superhero sh ON ha.hero_id = sh.id;"
    },
    {
        "question_id": 747,
        "answer_sql": "SELECT COUNT(*) FROM superhero WHERE full_name IS NULL;"
    },
    {
        "question_id": 748,
        "answer_sql": "SELECT colour.colour FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.id = 75;"
    },
    {
        "question_id": 749,
        "answer_sql": "SELECT superpower.power_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = 'Deathlok';"
    },
    {
        "question_id": 750,
        "answer_sql": "SELECT AVG(weight_kg) AS average_weight FROM superhero JOIN gender ON superhero.gender_id = gender.id WHERE gender.gender = 'Female';"
    },
    {
        "question_id": 751,
        "answer_sql": "SELECT power_name FROM superpower JOIN hero_power ON superpower.id = hero_power.power_id JOIN superhero ON hero_power.hero_id = superhero.id JOIN gender ON superhero.gender_id = gender.id WHERE gender.gender = 'Male' GROUP BY power_name LIMIT 5;"
    },
    {
        "question_id": 752,
        "answer_sql": "SELECT superhero_name FROM superhero JOIN race ON superhero.race_id = race.id WHERE race.race = 'Alien';"
    },
    {
        "question_id": 753,
        "answer_sql": "SELECT superhero.superhero_name FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id JOIN colour ON hero_attribute.attribute_id = colour.id WHERE superhero.height_cm BETWEEN 170 AND 190 AND colour.id = 1;"
    },
    {
        "question_id": 754,
        "answer_sql": "SELECT power_name FROM superpower WHERE id = (SELECT power_id FROM hero_power WHERE hero_id = 56);"
    },
    {
        "question_id": 755,
        "answer_sql": "SELECT superhero.full_name FROM superhero JOIN race ON superhero.race_id = race.id WHERE race.race = 'Demi-God';"
    },
    {
        "question_id": 756,
        "answer_sql": "SELECT COUNT(*) AS bad_superheroes_count FROM superhero WHERE alignment_id = (SELECT id FROM alignment WHERE alignment = 'Bad');"
    },
    {
        "question_id": 757,
        "answer_sql": "SELECT race.race FROM superhero JOIN race ON superhero.race_id = race.id WHERE superhero.weight_kg = 169;"
    },
    {
        "question_id": 758,
        "answer_sql": ""
    },
    {
        "question_id": 759,
        "answer_sql": "SELECT colour.colour FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.weight_kg = (SELECT MAX(weight_kg) FROM superhero);"
    },
    {
        "question_id": 760,
        "answer_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM superhero WHERE publisher_id = 13)) AS percentage FROM superhero WHERE publisher_id = 13 AND height_cm BETWEEN 150 AND 180;"
    },
    {
        "question_id": 761,
        "answer_sql": ""
    },
    {
        "question_id": 762,
        "answer_sql": "SELECT power_name FROM superpower JOIN hero_power ON superpower.id = hero_power.power_id GROUP BY power_name ORDER BY COUNT(hero_power.power_id) DESC LIMIT 1;"
    },
    {
        "question_id": 763,
        "answer_sql": "SELECT ha.attribute_value FROM hero_attribute ha JOIN superhero sh ON ha.hero_id = sh.id WHERE sh.superhero_name = 'Abomination';"
    },
    {
        "question_id": 764,
        "answer_sql": "SELECT superpower.power_name FROM superpower JOIN hero_power ON superpower.id = hero_power.power_id JOIN superhero ON superhero.id = hero_power.hero_id WHERE superhero.id = 1;"
    },
    {
        "question_id": 765,
        "answer_sql": "SELECT COUNT(DISTINCT superhero.id) AS number_of_heroes FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'stealth';"
    },
    {
        "question_id": 766,
        "answer_sql": ""
    },
    {
        "question_id": 767,
        "answer_sql": "SELECT AVG(height_cm) FROM superhero WHERE skin_colour_id IS NULL;"
    },
    {
        "question_id": 768,
        "answer_sql": "SELECT COUNT(*) AS NumberOfSuperheroes FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Dark Horse Comics';"
    },
    {
        "question_id": 769,
        "answer_sql": ""
    },
    {
        "question_id": 770,
        "answer_sql": "SELECT colour.colour FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.full_name = 'Abraham Sapien';"
    },
    {
        "question_id": 771,
        "answer_sql": "SELECT superhero.superhero_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Flight';"
    },
    {
        "question_id": 772,
        "answer_sql": "SELECT s.superhero_name, c.colour FROM superhero s JOIN colour c ON s.eye_colour_id = c.id JOIN colour c2 ON s.hair_colour_id = c2.id JOIN colour c3 ON s.skin_colour_id = c3.id JOIN gender g ON s.gender_id = g.id JOIN publisher p ON s.publisher_id = p.id WHERE g.gender = 'Female' AND p.publisher_name = 'Dark Horse Comics';"
    },
    {
        "question_id": 773,
        "answer_sql": " SELECT superhero.superhero_name, publisher.publisher_name \nFROM superhero \nJOIN colour ON superhero.eye_colour_id = colour.id AND superhero.hair_colour_id = colour.id AND superhero.skin_colour_id = colour.id \nJOIN publisher ON superhero.publisher_id = publisher.id;"
    },
    {
        "question_id": 774,
        "answer_sql": " SELECT race.race FROM superhero JOIN race ON superhero.race_id = race.id WHERE superhero.superhero_name = 'A-Bomb';"
    },
    {
        "question_id": 775,
        "answer_sql": "SELECT (SUM(CASE WHEN s.skin_colour_id IS NOT NULL AND s.gender_id = (SELECT id FROM gender WHERE gender = 'Female') AND c.colour = 'Blue' THEN 1 ELSE 0 END) * 100.0 / COUNT(s.gender_id = (SELECT id FROM gender WHERE gender = 'Female'))) AS percentage FROM superhero s JOIN colour c ON s.skin_colour_id = c.id WHERE s.gender_id = (SELECT id FROM gender WHERE gender = 'Female');"
    },
    {
        "question_id": 776,
        "answer_sql": " SELECT superhero.superhero_name, race.race FROM superhero JOIN race ON superhero.race_id = race.id WHERE superhero.full_name = 'Charles Chandler';"
    },
    {
        "question_id": 777,
        "answer_sql": "SELECT gender.gender FROM superhero JOIN gender ON superhero.gender_id = gender.id WHERE superhero.superhero_name = 'Agent 13';"
    },
    {
        "question_id": 778,
        "answer_sql": "SELECT superhero.superhero_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Adaptation';"
    },
    {
        "question_id": 779,
        "answer_sql": "SELECT COUNT(hp.power_id) AS number_of_powers FROM hero_power hp JOIN superhero sh ON hp.hero_id = sh.id WHERE sh.superhero_name = 'Amazo';"
    },
    {
        "question_id": 780,
        "answer_sql": "SELECT superpower.power_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.full_name = 'Hunter Zolomon';"
    },
    {
        "question_id": 781,
        "answer_sql": "SELECT height_cm FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Amber';"
    },
    {
        "question_id": 782,
        "answer_sql": "SELECT superhero.superhero_name FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id AND superhero.hair_colour_id = colour.id WHERE colour.colour = 'Black';"
    },
    {
        "question_id": 783,
        "answer_sql": "SELECT colour.colour FROM superhero JOIN colour ON superhero.skin_colour_id = colour.id WHERE colour.colour = 'Gold';"
    },
    {
        "question_id": 784,
        "answer_sql": "SELECT superhero.full_name FROM superhero JOIN race ON superhero.race_id = race.id WHERE race.race = 'Vampire';"
    },
    {
        "question_id": 785,
        "answer_sql": "SELECT superhero_name FROM superhero JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment = 'Neutral';"
    },
    {
        "question_id": 786,
        "answer_sql": "SELECT COUNT(DISTINCT superhero.id) AS strongest_hero_count FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Strength' AND hero_attribute.attribute_value = ( SELECT MAX(attribute_value) FROM hero_attribute JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Strength' );"
    },
    {
        "question_id": 787,
        "answer_sql": "SELECT race.race, alignment.alignment FROM superhero JOIN race ON superhero.race_id = race.id JOIN alignment ON superhero.alignment_id = alignment.id WHERE superhero.superhero_name = 'Cameron Hicks';"
    },
    {
        "question_id": 788,
        "answer_sql": " SELECT ROUND( (SUM(CASE WHEN superhero.gender_id = gender.id THEN 1 ELSE 0 END) / COUNT(*)) * 100, 2) AS percentage \nFROM superhero \nJOIN gender ON superhero.gender_id = gender.id \nJOIN publisher ON superhero.publisher_id = publisher.id \nWHERE publisher.publisher_name = 'Marvel Comics';"
    },
    {
        "question_id": 789,
        "answer_sql": "SELECT AVG(superhero.weight_kg) AS average_weight FROM superhero JOIN race ON superhero.race_id = race.id WHERE race.race = 'Alien';"
    },
    {
        "question_id": 790,
        "answer_sql": "SELECT (SELECT SUM(weight_kg) FROM superhero WHERE full_name = 'Emil Blonsky') - (SELECT SUM(weight_kg) FROM superhero WHERE full_name = 'Charles Chandler') AS weight_difference;"
    },
    {
        "question_id": 791,
        "answer_sql": "SELECT superhero.superhero_name, AVG(superhero.height_cm) as average_height FROM superhero GROUP BY superhero.superhero_name;"
    },
    {
        "question_id": 792,
        "answer_sql": "SELECT superpower.power_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = 'Abomination';"
    },
    {
        "question_id": 793,
        "answer_sql": "SELECT COUNT(*) FROM superhero WHERE race_id = 21 AND gender_id = 1;"
    },
    {
        "question_id": 794,
        "answer_sql": "SELECT superhero.superhero_name FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Speed' ORDER BY hero_attribute.attribute_value DESC LIMIT 1;"
    },
    {
        "question_id": 795,
        "answer_sql": "SELECT COUNT(*) FROM superhero WHERE alignment_id = 3;"
    },
    {
        "question_id": 796,
        "answer_sql": "SELECT superhero.superhero_name, attribute.attribute_name, hero_attribute.attribute_value FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE superhero.superhero_name = '3-D Man';"
    },
    {
        "question_id": 797,
        "answer_sql": ""
    },
    {
        "question_id": 798,
        "answer_sql": "SELECT publisher.publisher_name FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy');"
    },
    {
        "question_id": 799,
        "answer_sql": "SELECT COUNT(*) FROM superhero WHERE publisher_id IS NULL OR publisher_id = 1;"
    },
    {
        "question_id": 800,
        "answer_sql": "SELECT ROUND( (SELECT COUNT(*) FROM superhero WHERE eye_colour_id = 7) * 100.0 / COUNT(*), 2 ) AS percentage_with_blue_eyes FROM superhero;"
    },
    {
        "question_id": 801,
        "answer_sql": "SELECT ROUND(SUM(CASE WHEN gender_id = 1 THEN 1 ELSE 0 END) * 1.0 / SUM(CASE WHEN gender_id = 2 THEN 1 ELSE 0 END), 2) AS ratio FROM superhero;"
    },
    {
        "question_id": 802,
        "answer_sql": "SELECT superhero.superhero_name FROM superhero JOIN alignment ON superhero.alignment_id = alignment.id ORDER BY superhero.height_cm DESC LIMIT 1;"
    },
    {
        "question_id": 803,
        "answer_sql": ""
    },
    {
        "question_id": 804,
        "answer_sql": "SELECT superhero_name FROM superhero WHERE id = 294;"
    },
    {
        "question_id": 805,
        "answer_sql": "SELECT superhero.full_name FROM superhero WHERE superhero.weight_kg = 0 OR superhero.weight_kg IS NULL;"
    },
    {
        "question_id": 806,
        "answer_sql": "SELECT colour.colour FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.full_name = 'Karen Beecher-Duncan';"
    },
    {
        "question_id": 807,
        "answer_sql": "SELECT sp.power_name FROM superhero sh JOIN hero_power hp ON sh.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sh.full_name = 'Helen Parr';"
    },
    {
        "question_id": 808,
        "answer_sql": "SELECT race.race FROM superhero JOIN race ON superhero.race_id = race.id WHERE superhero.weight_kg = 108 AND superhero.height_cm = 188;"
    },
    {
        "question_id": 809,
        "answer_sql": "SELECT publisher.publisher_name FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.id = 38;"
    },
    {
        "question_id": 810,
        "answer_sql": "SELECT race.race FROM race JOIN superhero ON superhero.race_id = race.id JOIN hero_attribute ON hero_attribute.hero_id = superhero.id GROUP BY superhero.id ORDER BY MAX(hero_attribute.attribute_value) DESC LIMIT 1;"
    },
    {
        "question_id": 811,
        "answer_sql": "SELECT superhero.superhero_name, alignment.alignment, superpower.power_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id JOIN alignment ON superhero.alignment_id = alignment.id WHERE superhero.superhero_name = 'Atom IV';"
    },
    {
        "question_id": 812,
        "answer_sql": "SELECT superhero.full_name FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Blue' LIMIT 5;"
    },
    {
        "question_id": 813,
        "answer_sql": "SELECT AVG(ha.attribute_value) AS average_attribute_value FROM hero_attribute ha JOIN superhero sh ON ha.hero_id = sh.id JOIN alignment a ON sh.alignment_id = a.id WHERE a.alignment = 'neutral' AND a.id = 3;"
    },
    {
        "question_id": 814,
        "answer_sql": "SELECT colour.colour FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id JOIN colour ON superhero.skin_colour_id = colour.id WHERE hero_attribute.attribute_value = 100;"
    },
    {
        "question_id": 815,
        "answer_sql": "SELECT COUNT(*) FROM superhero JOIN gender ON superhero.gender_id = gender.id JOIN alignment ON superhero.alignment_id = alignment.id WHERE gender.gender = 'Female' AND alignment.alignment = 'Good';"
    },
    {
        "question_id": 816,
        "answer_sql": "SELECT superhero.superhero_name FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE hero_attribute.attribute_value BETWEEN 75 AND 80;"
    },
    {
        "question_id": 817,
        "answer_sql": ""
    },
    {
        "question_id": 818,
        "answer_sql": "SELECT ROUND( (SELECT COUNT(*) FROM superhero WHERE alignment_id = 2 AND gender_id = 2) * 100.0 / (SELECT COUNT(*) FROM superhero WHERE alignment_id = 2), 2) AS percentage_female_bad_superheroes"
    },
    {
        "question_id": 819,
        "answer_sql": "SELECT (SELECT COUNT(*) FROM superhero WHERE eye_colour_id = 7 AND weight_kg IS NULL OR weight_kg = 0) - (SELECT COUNT(*) FROM superhero WHERE eye_colour_id IS NULL AND weight_kg IS NULL OR weight_kg = 0) AS difference;"
    },
    {
        "question_id": 820,
        "answer_sql": " SELECT superhero.superhero_name, hero_attribute.attribute_value AS strength \nFROM superhero \nJOIN hero_attribute ON superhero.id = hero_attribute.hero_id \nJOIN attribute ON hero_attribute.attribute_id = attribute.id \nWHERE superhero.superhero_name = 'Hulk' AND attribute.attribute_name = 'Strength';"
    },
    {
        "question_id": 821,
        "answer_sql": "SELECT sp.power_name FROM superhero sh JOIN hero_power hp ON sh.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sh.superhero_name = 'Ajax';"
    },
    {
        "question_id": 822,
        "answer_sql": "SELECT COUNT(*) AS NumberOfVillains FROM superhero JOIN colour ON superhero.skin_colour_id = colour.id JOIN alignment ON superhero.alignment_id = alignment.id WHERE colour.colour = 'Green' AND alignment.alignment = 'Bad';"
    },
    {
        "question_id": 823,
        "answer_sql": "SELECT COUNT(*) AS NumberOfFemaleMarvelComicsHeroes FROM superhero JOIN gender ON superhero.gender_id = gender.id JOIN publisher ON superhero.publisher_id = publisher.id WHERE gender.gender = 'Female' AND publisher.publisher_name = 'Marvel Comics';"
    },
    {
        "question_id": 824,
        "answer_sql": "SELECT superhero_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Wind Control' ORDER BY superhero_name ASC;"
    },
    {
        "question_id": 825,
        "answer_sql": "SELECT gender.gender FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id JOIN gender ON superhero.gender_id = gender.id WHERE superpower.power_name = 'Phoenix Force';"
    },
    {
        "question_id": 826,
        "answer_sql": "SELECT superhero_name FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'DC Comics' ORDER BY superhero.weight_kg DESC LIMIT 1;"
    },
    {
        "question_id": 827,
        "answer_sql": "SELECT AVG(superhero.height_cm) AS average_height FROM superhero JOIN race ON superhero.race_id = race.id JOIN publisher ON superhero.publisher_id = publisher.id WHERE race.race != 'Human' AND publisher.publisher_name = 'Dark Horse Comics';"
    },
    {
        "question_id": 828,
        "answer_sql": "SELECT COUNT(*) AS fastest_superheroes_count FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute_value = 100 AND attribute_name = 'Speed';"
    },
    {
        "question_id": 829,
        "answer_sql": "SELECT publisher_name, COUNT(*) AS number_of_heroes FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id GROUP BY publisher_name HAVING publisher_name IN ('DC Comics', 'Marvel Comics') ORDER BY number_of_heroes DESC;"
    },
    {
        "question_id": 830,
        "answer_sql": "SELECT attribute.attribute_name FROM attribute JOIN hero_attribute ON attribute.id = hero_attribute.attribute_id JOIN superhero ON hero_attribute.hero_id = superhero.id WHERE superhero.superhero_name = 'Black Panther' GROUP BY attribute.attribute_name ORDER BY MIN(hero_attribute.attribute_value) ASC LIMIT 1;"
    },
    {
        "question_id": 831,
        "answer_sql": " SELECT colour.colour FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.superhero_name = 'Abomination' AND superhero.eye_colour_id IS NOT NULL;"
    },
    {
        "question_id": 832,
        "answer_sql": "SELECT superhero.superhero_name, MAX(superhero.height_cm) AS tallest_height FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id GROUP BY superhero.id ORDER BY tallest_height DESC LIMIT 1;"
    },
    {
        "question_id": 833,
        "answer_sql": " SELECT superhero.superhero_name FROM superhero WHERE superhero.full_name = 'Charles Chandler';"
    },
    {
        "question_id": 834,
        "answer_sql": "SELECT ROUND( (SUM(CASE WHEN gender_id = (SELECT id FROM gender WHERE gender = 'Female') THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) , 2) AS percentage_female_superheroes FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'George Lucas');"
    },
    {
        "question_id": 835,
        "answer_sql": "SELECT ROUND( (SELECT COUNT(*) FROM superhero JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.alignment = 'Good' AND superhero.publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics')) * 100.0 / (SELECT COUNT(*) FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics')), 2) AS percentage_good_heroes"
    },
    {
        "question_id": 836,
        "answer_sql": "SELECT COUNT(*) FROM superhero WHERE full_name LIKE 'John%';"
    },
    {
        "question_id": 837,
        "answer_sql": "SELECT superhero.id FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id GROUP BY superhero.id ORDER BY MIN(hero_attribute.attribute_value) ASC LIMIT 1;"
    },
    {
        "question_id": 838,
        "answer_sql": "SELECT superhero.full_name FROM superhero WHERE superhero.superhero_name = 'Alien';"
    },
    {
        "question_id": 839,
        "answer_sql": ""
    },
    {
        "question_id": 840,
        "answer_sql": "SELECT ha.attribute_value FROM hero_attribute ha JOIN superhero sh ON ha.hero_id = sh.id WHERE sh.superhero_name = 'Aquababy';"
    },
    {
        "question_id": 841,
        "answer_sql": "SELECT superhero.weight_kg, race.race FROM superhero JOIN race ON superhero.race_id = race.id WHERE superhero.id = 40;"
    },
    {
        "question_id": 842,
        "answer_sql": "SELECT AVG(height_cm) AS average_height FROM superhero JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.alignment = 'neutral';"
    },
    {
        "question_id": 843,
        "answer_sql": "SELECT superhero.id FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Intelligence';"
    },
    {
        "question_id": 844,
        "answer_sql": "SELECT colour.colour FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.superhero_name = 'Blackwulf';"
    },
    {
        "question_id": 845,
        "answer_sql": "SELECT sp.power_name FROM superpower sp JOIN hero_power hp ON hp.power_id = sp.id JOIN superhero sh ON sh.id = hp.hero_id WHERE sh.height_cm > (SELECT AVG(height_cm) * 0.8 FROM superhero);"
    },
    {
        "question_id": 846,
        "answer_sql": "SELECT drivers.driverRef FROM drivers JOIN qualifying ON drivers.driverId = qualifying.driverId WHERE qualifying.raceId = 18 AND qualifying.q1 = ( SELECT MAX(q1) FROM qualifying WHERE raceId = 18 )"
    },
    {
        "question_id": 847,
        "answer_sql": "SELECT d.surname FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN races ra ON r.raceId = ra.raceId JOIN qualifying q ON r.raceId = q.raceId AND r.driverId = q.driverId WHERE ra.raceId = 19 AND ra.round = 2 AND q.q2 = (SELECT MIN(q2) FROM qualifying WHERE raceId = 19 AND round = 2) ORDER BY q.q2 ASC LIMIT 1;"
    },
    {
        "question_id": 848,
        "answer_sql": "SELECT DISTINCT s.year FROM races r JOIN circuits c ON r.circuitId = c.circuitId JOIN seasons s ON r.year = s.year WHERE c.location = 'Shanghai';"
    },
    {
        "question_id": 849,
        "answer_sql": "SELECT circuits.url FROM circuits WHERE circuits.name = 'Circuit de Barcelona-Catalunya';"
    },
    {
        "question_id": 850,
        "answer_sql": "SELECT races.name FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.country = 'Germany';"
    },
    {
        "question_id": 851,
        "answer_sql": " SELECT cs.positionText FROM races r JOIN constructorStandings cs ON r.raceId = cs.raceId JOIN constructors c ON cs.constructorId = c.constructorId WHERE c.name = 'Renault' ORDER BY r.raceId, cs.position;"
    },
    {
        "question_id": 852,
        "answer_sql": "SELECT COUNT(*) AS races_outside_asia_europe FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.year = 2010 AND circuits.location NOT IN ('Asia', 'Europe');"
    },
    {
        "question_id": 853,
        "answer_sql": "SELECT DISTINCT races.name FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.country = 'Spain';"
    },
    {
        "question_id": 854,
        "answer_sql": "SELECT circuits.lat, circuits.lng FROM circuits JOIN races ON circuits.circuitId = races.circuitId WHERE races.name = 'Australian Grand Prix';"
    },
    {
        "question_id": 855,
        "answer_sql": "SELECT url FROM races WHERE circuitId = (SELECT circuitId FROM circuits WHERE name = 'Sepang International Circuit');"
    },
    {
        "question_id": 856,
        "answer_sql": "SELECT r.date, r.time FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.name = 'Sepang International Circuit';"
    },
    {
        "question_id": 857,
        "answer_sql": ""
    },
    {
        "question_id": 858,
        "answer_sql": "SELECT constructors.nationality FROM constructors JOIN constructorResults ON constructors.constructorId = constructorResults.constructorId JOIN races ON constructorResults.raceId = races.raceId WHERE constructorResults.points = 1 AND races.raceId = 24;"
    },
    {
        "question_id": 859,
        "answer_sql": "SELECT q1 FROM qualifying WHERE raceId = 354 AND driverId = (SELECT driverId FROM drivers WHERE forename = 'Bruno' AND surname = 'Senna');"
    },
    {
        "question_id": 860,
        "answer_sql": ""
    },
    {
        "question_id": 861,
        "answer_sql": ""
    },
    {
        "question_id": 862,
        "answer_sql": "SELECT COUNT(*) AS drivers_not_finished FROM drivers d LEFT JOIN results r ON d.driverId = r.driverId AND r.raceId = (SELECT raceId FROM races WHERE name = 'Bahrain Grand Prix' AND year = 2007) WHERE r.raceId IS NULL AND d.number IS NOT NULL;"
    },
    {
        "question_id": 863,
        "answer_sql": "SELECT * FROM seasons WHERE year = (SELECT year FROM races WHERE raceId = 901);"
    },
    {
        "question_id": 864,
        "answer_sql": "SELECT COUNT(DISTINCT results.driverId) AS finished_drivers FROM results JOIN races ON results.raceId = races.raceId WHERE races.date = '2015-11-29' AND results.time IS NOT NULL;"
    },
    {
        "question_id": 865,
        "answer_sql": "SELECT drivers.forename, drivers.surname, drivers.dob FROM drivers JOIN results ON drivers.driverId = results.driverId JOIN races ON results.raceId = races.raceId WHERE races.raceId = 592 AND results.time IS NOT NULL ORDER BY drivers.dob ASC LIMIT 1;"
    },
    {
        "question_id": 866,
        "answer_sql": ""
    },
    {
        "question_id": 867,
        "answer_sql": "SELECT constructors.name, constructors.nationality FROM constructors JOIN results ON constructors.constructorId = results.constructorId JOIN lapTimes ON results.raceId = lapTimes.raceId AND results.fastestLap = lapTimes.lap WHERE results.raceId = 933 ORDER BY results.fastestLapSpeed DESC LIMIT 1;"
    },
    {
        "question_id": 868,
        "answer_sql": "SELECT location, lat, lng FROM circuits WHERE country = 'Malaysia';"
    },
    {
        "question_id": 869,
        "answer_sql": "SELECT c.constructorRef, c.url FROM constructors c JOIN constructorResults cr ON c.constructorId = cr.constructorId JOIN races r ON cr.raceId = r.raceId WHERE r.raceId = 9 ORDER BY cr.points DESC LIMIT 1;"
    },
    {
        "question_id": 870,
        "answer_sql": " SELECT q1 FROM qualifying WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lucas' AND surname = 'di Grassi') AND raceId = 345;"
    },
    {
        "question_id": 871,
        "answer_sql": ""
    },
    {
        "question_id": 872,
        "answer_sql": ""
    },
    {
        "question_id": 873,
        "answer_sql": "SELECT results.time FROM results JOIN drivers ON results.driverId = drivers.driverId WHERE drivers.forename = 'Bruce' AND drivers.surname = 'McLaren' AND results.raceId = 743;"
    },
    {
        "question_id": 874,
        "answer_sql": "SELECT drivers.forename, drivers.surname FROM results JOIN drivers ON results.driverId = drivers.driverId JOIN races ON results.raceId = races.raceId JOIN seasons ON races.year = seasons.year WHERE races.name = 'San Marino Grand Prix' AND seasons.year = 2006 AND results.position = 2"
    },
    {
        "question_id": 875,
        "answer_sql": "SELECT s.url FROM seasons s JOIN races r ON s.year = r.year WHERE r.raceId = 901;"
    },
    {
        "question_id": 876,
        "answer_sql": "SELECT COUNT(DISTINCT driverId) AS finished_drivers FROM results JOIN races ON results.raceId = races.raceId WHERE races.date = '2015-11-29' AND results.statusId = (SELECT statusId FROM status WHERE status = 'Finished');"
    },
    {
        "question_id": 877,
        "answer_sql": "SELECT drivers.forename, drivers.surname, drivers.dob FROM drivers JOIN results ON drivers.driverId = results.driverId JOIN races ON results.raceId = races.raceId WHERE races.raceId = 872 AND results.time IS NOT NULL ORDER BY drivers.dob DESC LIMIT 1;"
    },
    {
        "question_id": 878,
        "answer_sql": "SELECT drivers.forename || ' ' || drivers.surname AS FullName FROM lapTimes JOIN races ON lapTimes.raceId = races.raceId JOIN drivers ON lapTimes.driverId = drivers.driverId WHERE races.raceId = 348 ORDER BY lapTimes.milliseconds ASC LIMIT 1;"
    },
    {
        "question_id": 879,
        "answer_sql": "SELECT d.nationality FROM drivers d JOIN results r ON d.driverId = r.driverId WHERE r.fastestLapSpeed = (SELECT MAX(fastestLapSpeed) FROM results);"
    },
    {
        "question_id": 880,
        "answer_sql": " SELECT ROUND(((SELECT fastestLapSpeed FROM results WHERE raceId = 853) - (SELECT fastestLapSpeed FROM results WHERE raceId = 854)) / (SELECT fastestLapSpeed FROM results WHERE raceId = 853) * 100, 2) AS percentage_faster FROM results WHERE raceId = 853;"
    },
    {
        "question_id": 881,
        "answer_sql": " SELECT (COUNT(DISTINCT results.driverId) * 1.0 / COUNT(DISTINCT drivers.driverId)) AS completion_rate FROM results JOIN drivers ON results.driverId = drivers.driverId JOIN races ON results.raceId = races.raceId WHERE races.date = '1983-07-16';"
    },
    {
        "question_id": 882,
        "answer_sql": " SELECT MIN(year) AS first_singapore_grand_prix_year FROM races WHERE circuitId = (SELECT circuitId FROM circuits WHERE name = 'Singapore Grand Prix');"
    },
    {
        "question_id": 883,
        "answer_sql": "SELECT name FROM races WHERE year = 2005 ORDER BY name DESC;"
    },
    {
        "question_id": 884,
        "answer_sql": "SELECT races.name, races.date FROM races WHERE strftime('%Y-%m', races.date) = strftime('%Y-%m', (SELECT MIN(date) FROM races));"
    },
    {
        "question_id": 885,
        "answer_sql": "SELECT name, date FROM races WHERE year = 1999 ORDER BY round DESC LIMIT 1;"
    },
    {
        "question_id": 886,
        "answer_sql": "SELECT seasons.year FROM seasons JOIN races ON seasons.year = races.year GROUP BY seasons.year ORDER BY COUNT(races.round) DESC LIMIT 1;"
    },
    {
        "question_id": 887,
        "answer_sql": "SELECT races.name FROM races JOIN seasons ON races.year = seasons.year WHERE races.year = 2017 AND races.year != 2000;"
    },
    {
        "question_id": 888,
        "answer_sql": "SELECT c.name, c.location FROM circuits c JOIN races r ON c.circuitId = r.circuitId JOIN seasons s ON r.year = s.year WHERE s.year = (SELECT MIN(year) FROM seasons) AND c.country = (SELECT country FROM circuits WHERE circuitId = (SELECT circuitId FROM races WHERE year = (SELECT MIN(year) FROM seasons) AND round = 1)) LIMIT 1;"
    },
    {
        "question_id": 889,
        "answer_sql": "SELECT year FROM races WHERE circuitId = (SELECT circuitId FROM circuits WHERE name = 'Brands Hatch') AND name = 'British Grand Prix' ORDER BY year DESC LIMIT 1;"
    },
    {
        "question_id": 890,
        "answer_sql": "SELECT COUNT(DISTINCT seasons.year) AS number_of_seasons FROM races JOIN circuits ON races.circuitId = circuits.circuitId JOIN seasons ON races.year = seasons.year WHERE circuits.name = 'Silverstone Circuit' AND races.name = 'British Grand Prix';"
    },
    {
        "question_id": 891,
        "answer_sql": "SELECT drivers.driverId, drivers.forename, drivers.surname, races.name AS race_name, races.date, results.position FROM drivers JOIN results ON drivers.driverId = results.driverId JOIN races ON results.raceId = races.raceId JOIN seasons ON races.year = seasons.year WHERE seasons.year = 2010 AND races.name = 'Singapore Grand Prix' ORDER BY results.position;"
    },
    {
        "question_id": 892,
        "answer_sql": "SELECT drivers.forename || ' ' || drivers.surname AS fullName, MAX(results.points) AS maxPoints FROM drivers JOIN results ON drivers.driverId = results.driverId GROUP BY drivers.driverId ORDER BY maxPoints DESC LIMIT 1;"
    },
    {
        "question_id": 893,
        "answer_sql": "SELECT d.forename, d.surname, r.points FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN races ra ON r.raceId = ra.raceId WHERE ra.year = 2017 AND ra.name = 'Chinese Grand Prix' ORDER BY r.points DESC LIMIT 3;"
    },
    {
        "question_id": 894,
        "answer_sql": "SELECT drivers.forename, drivers.surname, races.name, MIN(CAST(SUBSTR(lapTimes.time, 1, 10) AS REAL)) AS bestLapTime FROM lapTimes JOIN drivers ON lapTimes.driverId = drivers.driverId JOIN races ON lapTimes.raceId = races.raceId GROUP BY races.raceId, drivers.driverId ORDER BY bestLapTime ASC LIMIT 1;"
    },
    {
        "question_id": 895,
        "answer_sql": " SELECT AVG(CAST(SUBSTR(lapTimes.time, 6, 2) AS INTEGER)) AS average_lap_time FROM lapTimes JOIN drivers ON lapTimes.driverId = drivers.driverId JOIN races ON lapTimes.raceId = races.raceId JOIN circuits ON races.circuitId = circuits.circuitId WHERE drivers.forename = 'Sebastian' AND drivers.surname = 'Vettel' AND races.year = 2009 AND races.name = 'Chinese Grand Prix' AND races.circuitId = (SELECT circuitId FROM circuits WHERE name = 'Shanghai International Circuit');"
    },
    {
        "question_id": 896,
        "answer_sql": " SELECT (COUNT(*) - COUNT(CASE WHEN races.circuitId = (SELECT circuitId FROM circuits WHERE circuitRef = '1st Track') THEN 1 END)) * 100.0 / COUNT(*) AS percentage FROM results JOIN drivers ON results.driverId = drivers.driverId JOIN races ON results.raceId = races.raceId WHERE drivers.surname = 'Hamilton' AND races.year >= 2010;"
    },
    {
        "question_id": 897,
        "answer_sql": " SELECT d.forename || ' ' || d.surname AS DriverName, d.nationality, AVG(r.points) AS AveragePoints\nFROM drivers d\nJOIN results r ON d.driverId = r.driverId\nJOIN constructorStandings cs ON r.raceId = cs.raceId AND r.constructorId = cs.constructorId\nWHERE cs.wins = (SELECT MAX(wins) FROM constructorStandings)\nGROUP BY d.driverId\nORDER BY AveragePoints DESC\nLIMIT 1;"
    },
    {
        "question_id": 898,
        "answer_sql": "SELECT forename, surname, dob FROM drivers WHERE nationality = 'Japanese' ORDER BY dob ASC LIMIT 1;"
    },
    {
        "question_id": 899,
        "answer_sql": "SELECT DISTINCT circuits.circuitId, circuits.name FROM circuits JOIN races ON circuits.circuitId = races.circuitId JOIN seasons ON races.year = seasons.year WHERE seasons.year BETWEEN 1990 AND 2000 GROUP BY circuits.circuitId HAVING COUNT(races.raceId) >= 4;"
    },
    {
        "question_id": 900,
        "answer_sql": "SELECT circuits.name, circuits.location, races.name FROM circuits JOIN races ON circuits.circuitId = races.circuitId JOIN seasons ON races.year = seasons.year WHERE circuits.country = 'USA' AND races.year = 2006;"
    },
    {
        "question_id": 901,
        "answer_sql": " SELECT races.name, circuits.name AS circuit_name, circuits.location \nFROM races \nJOIN circuits ON races.circuitId = circuits.circuitId \nWHERE circuits.lat IS NOT NULL \nAND circuits.lng IS NOT NULL \nAND races.date BETWEEN '2005-09-01' AND '2005-09-30';"
    },
    {
        "question_id": 902,
        "answer_sql": "SELECT races.name, races.date FROM results JOIN drivers ON results.driverId = drivers.driverId JOIN races ON results.raceId = races.raceId WHERE drivers.forename = 'Alex' AND drivers.surname = 'Yoong' AND results.position < 10;"
    },
    {
        "question_id": 903,
        "answer_sql": "SELECT COUNT(*) AS total_wins FROM constructorStandings cs JOIN races r ON cs.raceId = r.raceId JOIN circuits c ON r.circuitId = c.circuitId WHERE cs.wins > 0 AND c.name = 'Sepang International Circuit';"
    },
    {
        "question_id": 904,
        "answer_sql": "SELECT races.name, races.date FROM races JOIN results ON races.raceId = results.raceId JOIN lapTimes ON races.raceId = lapTimes.raceId AND results.driverId = lapTimes.driverId JOIN drivers ON results.driverId = drivers.driverId WHERE drivers.forename = 'Michael' AND drivers.surname = 'Schumacher' AND lapTimes.milliseconds = ( SELECT MIN(milliseconds) FROM lapTimes WHERE lapTimes.raceId = races.raceId AND lapTimes.driverId = drivers.driverId )"
    },
    {
        "question_id": 905,
        "answer_sql": " SELECT AVG(constructorResults.points) AS average_points\nFROM constructorResults\nJOIN results ON constructorResults.constructorId = results.constructorId\nJOIN drivers ON results.driverId = drivers.driverId\nWHERE drivers.driverRef = 'Eddie Irvine' AND drivers.nationality = 'British' AND results.raceId IN (SELECT raceId FROM races WHERE year = 2000);"
    },
    {
        "question_id": 906,
        "answer_sql": ""
    },
    {
        "question_id": 907,
        "answer_sql": "SELECT races.name, races.date, circuits.country FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.year = 2017 ORDER BY races.date;"
    },
    {
        "question_id": 908,
        "answer_sql": " SELECT races.name, races.year, circuits.name AS circuit_location, MAX(results.laps) AS most_laps FROM races JOIN circuits ON races.circuitId = circuits.circuitId JOIN results ON races.raceId = results.raceId GROUP BY races.raceId ORDER BY most_laps DESC LIMIT 1;"
    },
    {
        "question_id": 909,
        "answer_sql": " SELECT (COUNT(*) FILTER (WHERE circuits.country = 'Germany') * 100.0 / COUNT(*)) AS percentage FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.name = 'European Grand Prix';"
    },
    {
        "question_id": 910,
        "answer_sql": ""
    },
    {
        "question_id": 911,
        "answer_sql": "SELECT name FROM circuits WHERE (lat, name) IN ( SELECT max(lat), name FROM circuits WHERE name IN ('Silverstone Circuit', 'Hockenheimring', 'Hungaroring') );"
    },
    {
        "question_id": 912,
        "answer_sql": "SELECT circuitRef FROM circuits WHERE name = 'Marina Bay Street Circuit';"
    },
    {
        "question_id": 913,
        "answer_sql": "SELECT country FROM circuits ORDER BY alt DESC LIMIT 1;"
    },
    {
        "question_id": 914,
        "answer_sql": "SELECT COUNT(*) FROM drivers WHERE code IS NULL;"
    },
    {
        "question_id": 915,
        "answer_sql": " SELECT drivers.nationality \nFROM drivers \nJOIN results ON drivers.driverId = results.driverId \nWHERE drivers.dob = (SELECT MIN(dob) FROM drivers) \nGROUP BY drivers.nationality;"
    },
    {
        "question_id": 916,
        "answer_sql": ""
    },
    {
        "question_id": 917,
        "answer_sql": "SELECT url FROM drivers WHERE surname = 'Davidson' AND forename = 'Anthony';"
    },
    {
        "question_id": 918,
        "answer_sql": "SELECT driverRef FROM drivers WHERE surname = 'Hamilton' AND forename = 'Lewis';"
    },
    {
        "question_id": 919,
        "answer_sql": "SELECT circuits.name FROM circuits JOIN races ON circuits.circuitId = races.circuitId WHERE races.year = 2009 AND races.name = 'Spanish Grand Prix';"
    },
    {
        "question_id": 920,
        "answer_sql": "SELECT DISTINCT r.year FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.name = 'Silverstone Circuit';"
    },
    {
        "question_id": 921,
        "answer_sql": ""
    },
    {
        "question_id": 922,
        "answer_sql": ""
    },
    {
        "question_id": 923,
        "answer_sql": "SELECT COUNT(*) AS NumberOfRacesInItaly FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.country = 'Italy';"
    },
    {
        "question_id": 924,
        "answer_sql": ""
    },
    {
        "question_id": 925,
        "answer_sql": ""
    },
    {
        "question_id": 926,
        "answer_sql": "SELECT MIN(results.fastestLapTime) AS fastestLapTime FROM results JOIN drivers ON results.driverId = drivers.driverId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';"
    },
    {
        "question_id": 927,
        "answer_sql": "SELECT drivers.forename, drivers.surname FROM drivers JOIN results ON drivers.driverId = results.driverId JOIN lapTimes ON drivers.driverId = lapTimes.driverId AND results.fastestLap = lapTimes.lap WHERE results.fastestLapSpeed = (SELECT MAX(fastestLapSpeed) FROM results);"
    },
    {
        "question_id": 928,
        "answer_sql": "SELECT driverRef FROM drivers JOIN results ON drivers.driverId = results.driverId WHERE results.raceId = (SELECT raceId FROM races WHERE name = 'Australian Grand Prix' AND year = 2008) AND results.position = 1 ORDER BY results.rank ASC LIMIT 1;"
    },
    {
        "question_id": 929,
        "answer_sql": "SELECT DISTINCT races.name FROM races JOIN results ON races.raceId = results.raceId JOIN drivers ON results.driverId = drivers.driverId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';"
    },
    {
        "question_id": 930,
        "answer_sql": "SELECT races.name, MIN(results.rank) as highest_rank FROM races JOIN results ON races.raceId = results.raceId JOIN drivers ON results.driverId = drivers.driverId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' GROUP BY races.name ORDER BY highest_rank ASC LIMIT 1;"
    },
    {
        "question_id": 931,
        "answer_sql": "SELECT MAX(fastestLapSpeed) AS fastest_lap_speed FROM results JOIN drivers ON results.driverId = drivers.driverId JOIN races ON results.raceId = races.raceId WHERE races.name = 'Spanish Grand Prix' AND races.year = 2009;"
    },
    {
        "question_id": 932,
        "answer_sql": ""
    },
    {
        "question_id": 933,
        "answer_sql": "SELECT positionOrder FROM results WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton') AND raceId = (SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix');"
    },
    {
        "question_id": 934,
        "answer_sql": "SELECT forename, surname FROM drivers JOIN results ON drivers.driverId = results.driverId JOIN races ON results.raceId = races.raceId WHERE races.year = 2008 AND races.name = 'Australian Grand Prix' AND results.grid = 4;"
    },
    {
        "question_id": 935,
        "answer_sql": "SELECT COUNT(*) AS finished_drivers FROM results r JOIN drivers d ON r.driverId = d.driverId JOIN races ra ON r.raceId = ra.raceId WHERE ra.year = 2008 AND ra.name = 'Australian Grand Prix' AND r.time IS NOT NULL;"
    },
    {
        "question_id": 936,
        "answer_sql": "SELECT r.name, res.fastestLapTime, res.fastestLapSpeed FROM results res JOIN drivers d ON res.driverId = d.driverId JOIN races r ON res.raceId = r.raceId WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton' AND r.year = 2008 AND r.name = 'Australian Grand Prix' ORDER BY res.fastestLap DESC LIMIT 1;"
    },
    {
        "question_id": 937,
        "answer_sql": " SELECT results.time FROM results JOIN races ON results.raceId = races.raceId JOIN driverStandings ON results.raceId = driverStandings.raceId AND results.driverId = driverStandings.driverId WHERE races.year = 2008 AND races.name = 'Australian Grand Prix' AND driverStandings.position = 2;"
    },
    {
        "question_id": 938,
        "answer_sql": "SELECT c.name, r.url FROM constructors c JOIN results res ON c.constructorId = res.constructorId JOIN drivers d ON res.driverId = d.driverId JOIN races r ON res.raceId = r.raceId WHERE r.year = 2008 AND r.name = 'Australian Grand Prix' AND res.position = 1 ORDER BY res.time ASC LIMIT 1;"
    },
    {
        "question_id": 939,
        "answer_sql": "SELECT COUNT(DISTINCT drivers.driverId) FROM drivers JOIN results ON drivers.driverId = results.driverId JOIN races ON results.raceId = races.raceId WHERE drivers.nationality = 'American' AND races.year = 2008 AND races.name = 'Australian Grand Prix';"
    },
    {
        "question_id": 940,
        "answer_sql": "SELECT COUNT(DISTINCT drivers.driverId) FROM drivers JOIN results ON drivers.driverId = results.driverId JOIN races ON results.raceId = races.raceId WHERE races.year = 2008 AND races.name = 'Australian Grand Prix' AND results.position > 0;"
    },
    {
        "question_id": 941,
        "answer_sql": "SELECT SUM(points) AS total_points FROM results JOIN drivers ON results.driverId = drivers.driverId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';"
    },
    {
        "question_id": 942,
        "answer_sql": "SELECT AVG(CAST(SUBSTR(fastestLapTime, 6, 2) AS INTEGER) + CAST(SUBSTR(fastestLapTime, 4, 2) AS INTEGER) / 60) AS average_fastest_lap_time_seconds FROM results JOIN drivers ON results.driverId = drivers.driverId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';"
    },
    {
        "question_id": 943,
        "answer_sql": " SELECT COUNT(DISTINCT results.raceId) / COUNT(DISTINCT races.raceId) AS rate FROM results JOIN races ON results.raceId = races.raceId WHERE races.year = 2008 AND races.name = 'Australian Grand Prix' AND results.time IS NOT NULL;"
    },
    {
        "question_id": 944,
        "answer_sql": "SELECT ROUND(((SELECT milliseconds FROM results WHERE raceId = (SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix') AND rank = 1) - (SELECT milliseconds FROM results WHERE raceId = (SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix') AND rank = (SELECT MAX(rank) FROM results WHERE raceId = (SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix')))) / (SELECT milliseconds FROM results WHERE raceId = (SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix') AND rank = (SELECT MAX(rank) FROM results WHERE raceId = (SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix'))) * 100) AS faster_percentage"
    },
    {
        "question_id": 945,
        "answer_sql": "SELECT COUNT(*) AS number_of_circuits FROM circuits WHERE country = 'Australia' AND location = 'Melbourne';"
    },
    {
        "question_id": 946,
        "answer_sql": "SELECT lat, lng FROM circuits WHERE country = 'USA';"
    },
    {
        "question_id": 947,
        "answer_sql": "SELECT COUNT(*) AS BritishDriversAfter1980 FROM drivers JOIN seasons ON drivers.dob >= seasons.year WHERE drivers.nationality = 'British' AND drivers.dob > 1980;"
    },
    {
        "question_id": 948,
        "answer_sql": "SELECT AVG(constructorResults.points) AS average_points FROM constructorResults JOIN constructors ON constructorResults.constructorId = constructors.constructorId WHERE constructors.nationality = 'British';"
    },
    {
        "question_id": 949,
        "answer_sql": "SELECT c.constructorRef, c.name, MAX(cs.points) AS highestPoints FROM constructors c JOIN constructorStandings cs ON c.constructorId = cs.constructorId GROUP BY c.constructorRef, c.name ORDER BY highestPoints DESC LIMIT 1;"
    },
    {
        "question_id": 950,
        "answer_sql": "SELECT c.name FROM constructors c JOIN constructorResults cr ON c.constructorId = cr.constructorId JOIN races r ON cr.raceId = r.raceId WHERE r.raceId = 291 AND cr.points = 0;"
    },
    {
        "question_id": 951,
        "answer_sql": "SELECT COUNT(*) FROM constructorResults cr JOIN constructors c ON cr.constructorId = c.constructorId WHERE c.nationality = 'Japanese' GROUP BY cr.constructorId HAVING COUNT(cr.raceId) = 2 AND SUM(cr.points) = 0;"
    },
    {
        "question_id": 952,
        "answer_sql": "SELECT c.constructorId, c.name, rs.positionText FROM constructorStandings cs JOIN constructors c ON cs.constructorId = c.constructorId JOIN races r ON cs.raceId = r.raceId JOIN results rs ON r.raceId = rs.raceId AND cs.constructorId = rs.constructorId WHERE rs.rank = 1 ORDER BY c.constructorId;"
    },
    {
        "question_id": 953,
        "answer_sql": " SELECT COUNT(DISTINCT c.constructorId) AS FrenchConstructorsOver50Laps FROM constructors c JOIN lapTimes lt ON c.constructorId = lt.driverId WHERE c.nationality = 'French' AND lt.lap > 50;"
    },
    {
        "question_id": 954,
        "answer_sql": ""
    },
    {
        "question_id": 955,
        "answer_sql": "SELECT seasons.year, AVG(CAST(SUBSTR(results.time, 6, 2) AS INTEGER) * 3600 + CAST(SUBSTR(results.time, 9, 2) AS INTEGER) * 60 + CAST(SUBSTR(results.time, 12, 2) AS INTEGER)) AS average_time_seconds FROM races JOIN results ON races.raceId = results.raceId JOIN drivers ON results.driverId = drivers.driverId JOIN constructors ON results.constructorId = constructors.constructorId JOIN seasons ON races.year = seasons.year JOIN circuits ON races.circuitId = circuits.circuitId JOIN status ON results.statusId = status.statusId WHERE status.statusId = 1 AND results.position = 1 GROUP BY seasons.year;"
    },
    {
        "question_id": 956,
        "answer_sql": "SELECT drivers.forename, drivers.surname FROM drivers JOIN results ON drivers.driverId = results.driverId WHERE drivers.dob > '1975-01-01' AND results.rank = 2;"
    },
    {
        "question_id": 957,
        "answer_sql": "SELECT COUNT(*) AS ItalianDriversNotFinished FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN constructors c ON r.constructorId = c.constructorId JOIN circuits cs ON r.raceId = cs.circuitId WHERE d.nationality = 'Italy' AND r.time IS NULL;"
    },
    {
        "question_id": 958,
        "answer_sql": "SELECT drivers.forename, drivers.surname FROM drivers JOIN results ON drivers.driverId = results.driverId WHERE results.fastestLapTime = (SELECT MIN(fastestLapTime) FROM results);"
    },
    {
        "question_id": 959,
        "answer_sql": "SELECT results.number FROM results JOIN constructorStandings ON results.constructorId = constructorStandings.constructorId JOIN races ON constructorStandings.raceId = races.raceId JOIN drivers ON results.driverId = drivers.driverId JOIN seasons ON races.year = seasons.year JOIN circuits ON races.circuitId = circuits.circuitId JOIN status ON results.statusId = status.statusId WHERE races.year = 2009 AND constructorStandings.position = 1 ORDER BY results.fastestLap ASC LIMIT 1;"
    },
    {
        "question_id": 960,
        "answer_sql": "SELECT AVG(fastestLapSpeed) AS average_fastest_lap_speed FROM results JOIN races ON results.raceId = races.raceId WHERE races.name = 'Spanish Grand Prix' AND races.year = 2009;"
    },
    {
        "question_id": 961,
        "answer_sql": "SELECT races.name, races.year FROM results JOIN races ON results.raceId = races.raceId WHERE milliseconds IS NOT NULL GROUP BY races.raceId ORDER BY MIN(results.milliseconds) ASC LIMIT 1;"
    },
    {
        "question_id": 962,
        "answer_sql": " SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM results WHERE raceId IN (SELECT raceId FROM races WHERE year BETWEEN 2000 AND 2005))) AS percentage \nFROM results \nJOIN drivers ON results.driverId = drivers.driverId \nWHERE drivers.dob < '1985-01-01' AND results.laps > 50;"
    },
    {
        "question_id": 963,
        "answer_sql": "SELECT COUNT(*) FROM drivers JOIN lapTimes ON drivers.driverId = lapTimes.driverId WHERE drivers.nationality = 'French' AND lapTimes.milliseconds < 72000;"
    },
    {
        "question_id": 964,
        "answer_sql": ""
    },
    {
        "question_id": 965,
        "answer_sql": "SELECT raceId FROM races WHERE year = 2009;"
    },
    {
        "question_id": 966,
        "answer_sql": "SELECT COUNT(DISTINCT drivers.driverId) AS participant_count FROM drivers JOIN races ON drivers.driverId = races.raceId WHERE races.raceId = 18;"
    },
    {
        "question_id": 967,
        "answer_sql": ""
    },
    {
        "question_id": 968,
        "answer_sql": "SELECT drivers.driverRef FROM drivers WHERE forename = 'Robert' AND surname = 'Kubica';"
    },
    {
        "question_id": 969,
        "answer_sql": "SELECT COUNT(*) AS AustralianDriversBornIn1980 FROM drivers WHERE nationality = 'Australia' AND strftime('%Y', dob) = '1980';"
    },
    {
        "question_id": 970,
        "answer_sql": "SELECT drivers.forename, drivers.surname, races.date, MIN(lapTimes.milliseconds) as earliestLapTime FROM drivers JOIN lapTimes ON drivers.driverId = lapTimes.driverId JOIN races ON lapTimes.raceId = races.raceId WHERE drivers.nationality = 'German' AND drivers.dob BETWEEN '1980-01-01' AND '1990-12-31' GROUP BY drivers.driverId ORDER BY earliestLapTime ASC LIMIT 3;"
    },
    {
        "question_id": 971,
        "answer_sql": " SELECT drivers.driverRef FROM drivers JOIN results ON drivers.driverId = results.driverId JOIN constructors ON results.constructorId = constructors.constructorId JOIN races ON results.raceId = races.raceId WHERE drivers.nationality = 'German' ORDER BY strftime('%Y', drivers.dob) ASC LIMIT 1;"
    },
    {
        "question_id": 972,
        "answer_sql": ""
    },
    {
        "question_id": 973,
        "answer_sql": ""
    },
    {
        "question_id": 974,
        "answer_sql": "SELECT races.year FROM races JOIN results ON races.raceId = results.raceId WHERE results.fastestLapTime = ( SELECT MAX(fastestLapTime) FROM results )"
    },
    {
        "question_id": 975,
        "answer_sql": "SELECT races.year FROM races JOIN ( SELECT raceId, MAX(time) AS maxTime FROM lapTimes GROUP BY raceId ) AS maxLapTimes ON races.raceId = maxLapTimes.raceId ORDER BY maxLapTimes.maxTime ASC LIMIT 1;"
    },
    {
        "question_id": 976,
        "answer_sql": "SELECT drivers.driverId FROM drivers JOIN lapTimes ON drivers.driverId = lapTimes.driverId JOIN races ON lapTimes.raceId = races.raceId JOIN results ON drivers.driverId = results.driverId AND races.raceId = results.raceId JOIN constructorResults ON results.raceId = constructorResults.raceId AND drivers.driverId = constructorResults.constructorId JOIN constructorStandings ON results.raceId = constructorStandings.raceId AND drivers.driverId = constructorStandings.constructorId JOIN status ON results.statusId = status.statusId WHERE lapTimes.lap = 1 GROUP BY drivers.driverId ORDER BY results.time ASC LIMIT 5;"
    },
    {
        "question_id": 977,
        "answer_sql": "SELECT COUNT(*) AS disqualified_finishers FROM races r JOIN results res ON r.raceId = res.raceId WHERE res.time IS NULL AND r.raceId BETWEEN 50 AND 100 AND res.statusId = 2;"
    },
    {
        "question_id": 978,
        "answer_sql": "SELECT circuits.name, circuits.lat, circuits.lng, circuits.location FROM circuits JOIN races ON circuits.circuitId = races.circuitId WHERE circuits.country = 'Austria' GROUP BY circuits.circuitId"
    },
    {
        "question_id": 979,
        "answer_sql": "SELECT raceId, COUNT(*) as finishers FROM results WHERE time IS NOT NULL GROUP BY raceId ORDER BY finishers DESC LIMIT 1;"
    },
    {
        "question_id": 980,
        "answer_sql": "SELECT drivers.driverRef, drivers.nationality, drivers.dob FROM drivers JOIN qualifying ON drivers.driverId = qualifying.driverId JOIN races ON qualifying.raceId = races.raceId WHERE races.raceId = 23 AND qualifying.q2 IS NOT NULL;"
    },
    {
        "question_id": 981,
        "answer_sql": ""
    },
    {
        "question_id": 982,
        "answer_sql": "SELECT COUNT(*) AS disqualified_american_drivers FROM drivers JOIN results ON drivers.driverId = results.driverId JOIN status ON results.statusId = status.statusId WHERE drivers.nationality = 'American' AND status.statusId = 2 AND results.raceId IS NOT NULL;"
    },
    {
        "question_id": 983,
        "answer_sql": "SELECT c.name, c.url FROM constructors c JOIN ( SELECT rs.constructorId, SUM(rs.points) as totalPoints FROM results rs GROUP BY rs.constructorId ORDER BY totalPoints DESC LIMIT 1 ) as highestPoints ON c.constructorId = highestPoints.constructorId WHERE c.nationality = 'Italian';"
    },
    {
        "question_id": 984,
        "answer_sql": "SELECT c.constructorId, c.url FROM constructors c JOIN ( SELECT constructorId FROM constructorStandings GROUP BY constructorId ORDER BY SUM(wins) DESC LIMIT 1 ) AS topWins ON c.constructorId = topWins.constructorId;"
    },
    {
        "question_id": 985,
        "answer_sql": "SELECT drivers.forename, drivers.surname, MAX(CAST(SUBSTR(lapTimes.time, 1, 8) AS INTEGER)) AS slowest_time FROM drivers JOIN lapTimes ON drivers.driverId = lapTimes.driverId JOIN races ON lapTimes.raceId = races.raceId WHERE races.name = 'French Grand Prix' AND lapTimes.lap = 3 GROUP BY drivers.driverId ORDER BY slowest_time DESC LIMIT 1;"
    },
    {
        "question_id": 986,
        "answer_sql": "SELECT races.raceId, MIN(lapTimes.milliseconds) AS fastestLapTimeMilliseconds FROM races JOIN lapTimes ON races.raceId = lapTimes.raceId WHERE lapTimes.position = 1 GROUP BY races.raceId ORDER BY fastestLapTimeMilliseconds ASC LIMIT 1;"
    },
    {
        "question_id": 987,
        "answer_sql": "SELECT AVG(CAST(fastestLapTime AS REAL)) AS averageFastestLapTime FROM results JOIN lapTimes ON results.driverId = lapTimes.driverId AND results.raceId = lapTimes.raceId JOIN races ON results.raceId = races.raceId WHERE races.name = '2006 United States Grand Prix' AND results.rank < 11;"
    },
    {
        "question_id": 988,
        "answer_sql": ""
    },
    {
        "question_id": 989,
        "answer_sql": "SELECT drivers.forename, drivers.surname, results.time FROM results JOIN drivers ON results.driverId = drivers.driverId JOIN races ON results.raceId = races.raceId JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.name = 'Canadian Grand Prix' AND races.year = 2008 AND results.position = 1;"
    },
    {
        "question_id": 990,
        "answer_sql": "SELECT constructors.constructorRef, constructors.url FROM constructorResults JOIN races ON constructorResults.raceId = races.raceId JOIN constructors ON constructorResults.constructorId = constructors.constructorId WHERE races.year = 2009 AND races.name = 'Singapore Grand Prix' AND constructorResults.points = ( SELECT MAX(points) FROM constructorResults AS cr JOIN races AS r ON cr.raceId = r.raceId WHERE r.year = 2009 AND r.name = 'Singapore Grand Prix' )"
    },
    {
        "question_id": 991,
        "answer_sql": "SELECT forename, surname, dob FROM drivers WHERE nationality = 'Austrian' AND dob BETWEEN '1981-01-01' AND '1991-12-31';"
    },
    {
        "question_id": 992,
        "answer_sql": "SELECT drivers.forename || ' ' || drivers.surname AS full_name, drivers.url AS wiki_page_link, drivers.dob FROM drivers WHERE drivers.nationality = 'German' AND strftime('%Y', drivers.dob) BETWEEN '1971' AND '1985' ORDER BY drivers.dob DESC;"
    },
    {
        "question_id": 993,
        "answer_sql": ""
    },
    {
        "question_id": 994,
        "answer_sql": " SELECT c.constructorId, c.name, c.nationality, SUM(cr.points) AS totalPoints FROM constructors c JOIN constructorResults cr ON c.constructorId = cr.constructorId JOIN races r ON cr.raceId = r.raceId WHERE r.name = 'Monaco Grand Prix' AND r.year BETWEEN 1980 AND 2010 GROUP BY c.constructorId ORDER BY totalPoints DESC LIMIT 1;"
    },
    {
        "question_id": 995,
        "answer_sql": " SELECT AVG(results.points) AS average_score \nFROM results \nJOIN constructorResults ON results.constructorId = constructorResults.constructorId \nJOIN drivers ON results.driverId = drivers.driverId \nJOIN races ON results.raceId = races.raceId \nJOIN constructors ON constructorResults.constructorId = constructors.constructorId \nJOIN circuits ON races.circuitId = circuits.circuitId \nJOIN seasons ON races.year = seasons.year \nWHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' \nAND circuits.country = 'Turkey' \nAND races.name = 'Turkish Grand Prix';"
    },
    {
        "question_id": 996,
        "answer_sql": "SELECT AVG(yearly_race_count) FROM ( SELECT year, COUNT(*) as yearly_race_count FROM races WHERE date BETWEEN '2000-01-01' AND '2010-12-31' GROUP BY year ) AS yearly_counts;"
    },
    {
        "question_id": 997,
        "answer_sql": "SELECT nationality FROM drivers GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1;"
    },
    {
        "question_id": 998,
        "answer_sql": "SELECT COUNT(*) AS victories FROM constructorStandings WHERE position = 1 AND points = ( SELECT points FROM results WHERE driverId = ( SELECT driverId FROM driverStandings WHERE position = 91 ) AND raceId = ( SELECT raceId FROM driverStandings WHERE position = 91 ) );"
    },
    {
        "question_id": 999,
        "answer_sql": " SELECT races.name \nFROM races \nJOIN results ON races.raceId = results.raceId \nWHERE results.fastestLapTime = (SELECT MIN(fastestLapTime) FROM results);\n"
    },
    {
        "question_id": 1000,
        "answer_sql": "SELECT circuits.name || ' (' || circuits.location || ', ' || circuits.country || ')' AS full_location FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.date = (SELECT MAX(date) FROM races) LIMIT 1;"
    },
    {
        "question_id": 1001,
        "answer_sql": "SELECT drivers.forename, drivers.surname FROM drivers JOIN qualifying ON drivers.driverId = qualifying.driverId JOIN races ON qualifying.raceId = races.raceId JOIN seasons ON races.year = seasons.year WHERE qualifying.q3 = ( SELECT MIN(q3) FROM qualifying AS q JOIN races AS r ON q.raceId = r.raceId JOIN seasons AS s ON r.year = s.year WHERE s.year = 2008 AND r.circuitId = ( SELECT circuitId FROM circuits WHERE circuits.name = 'Marina Bay Street Circuit' ) AND q.raceId = races.raceId ) AND races.year = 2008 AND races.circuitId = ( SELECT circuitId FROM circuits WHERE circuits.name = 'Marina Bay Street Circuit' ) GROUP BY drivers.driverId ORDER BY races.raceId ASC LIMIT 1;"
    },
    {
        "question_id": 1002,
        "answer_sql": "SELECT drivers.forename || ' ' || drivers.surname AS fullName, constructors.nationality, races.name FROM drivers JOIN results ON drivers.driverId = results.driverId JOIN races ON results.raceId = races.raceId JOIN constructors ON results.constructorId = constructors.constructorId WHERE drivers.dob = (SELECT MAX(dob) FROM drivers) ORDER BY races.date ASC LIMIT 1;"
    },
    {
        "question_id": 1003,
        "answer_sql": "SELECT COUNT(*) AS accident_count FROM results JOIN drivers ON results.driverId = drivers.driverId JOIN races ON results.raceId = races.raceId WHERE races.name = 'Canadian Grand Prix' AND results.statusId = 3 GROUP BY results.driverId ORDER BY accident_count DESC LIMIT 1;"
    },
    {
        "question_id": 1004,
        "answer_sql": "SELECT drivers.forename, drivers.surname, COUNT(constructorStandings.wins) AS wins FROM drivers JOIN results ON drivers.driverId = results.driverId JOIN constructorStandings ON results.constructorId = constructorStandings.constructorId WHERE drivers.dob = (SELECT MIN(dob) FROM drivers) GROUP BY drivers.driverId ORDER BY wins DESC LIMIT 1;"
    },
    {
        "question_id": 1005,
        "answer_sql": "SELECT pitStops.stop, MAX(LENGTH(pitStops.duration) - LENGTH(REPLACE(pitStops.duration, ' ', '')) + 1) AS longestDuration FROM pitStops GROUP BY pitStops.stop ORDER BY longestDuration DESC LIMIT 1;"
    },
    {
        "question_id": 1006,
        "answer_sql": "SELECT MIN(CAST(SUBSTR(time, 6) AS INTEGER)) AS fastest_time FROM lapTimes;"
    },
    {
        "question_id": 1007,
        "answer_sql": " SELECT MAX(duration) AS longest_pit_stop_time FROM pitStops WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton');"
    },
    {
        "question_id": 1008,
        "answer_sql": "SELECT p.lap FROM pitStops p JOIN races r ON p.raceId = r.raceId JOIN results res ON r.raceId = res.raceId AND p.driverId = res.driverId JOIN drivers d ON res.driverId = d.driverId WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton' AND r.name = 'Australian Grand Prix' AND r.year = 2011 AND p.stop = 1;"
    },
    {
        "question_id": 1009,
        "answer_sql": "SELECT driverId, stop, duration FROM pitStops WHERE raceId = (SELECT raceId FROM races WHERE year = 2011 AND name = 'Australian Grand Prix')"
    },
    {
        "question_id": 1010,
        "answer_sql": "SELECT r.time AS fastestLapTime FROM results r JOIN lapTimes lt ON r.raceId = lt.raceId AND r.driverId = lt.driverId WHERE r.driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton') ORDER BY lt.lap ASC LIMIT 1;"
    },
    {
        "question_id": 1011,
        "answer_sql": "SELECT drivers.forename || ' ' || drivers.surname AS FullName FROM drivers JOIN results ON drivers.driverId = results.driverId JOIN lapTimes ON results.raceId = lapTimes.raceId AND results.position = lapTimes.position WHERE lapTimes.milliseconds = (SELECT MIN(milliseconds) FROM lapTimes) GROUP BY drivers.driverId;"
    },
    {
        "question_id": 1012,
        "answer_sql": "SELECT circuits.circuitId, circuits.lat, drivers.driverId, results.fastestLap, races.raceId FROM results JOIN drivers ON results.driverId = drivers.driverId JOIN races ON results.raceId = races.raceId JOIN lapTimes ON races.raceId = lapTimes.raceId AND drivers.driverId = lapTimes.driverId JOIN circuits ON races.circuitId = circuits.circuitId WHERE drivers.driverId = ( SELECT driverId FROM results WHERE raceId = races.raceId ORDER BY time ASC LIMIT 1 ) AND lapTimes.lap = ( SELECT MIN(lap) FROM lapTimes WHERE raceId = races.raceId AND driverId = drivers.driverId ) ORDER BY races.raceId, drivers.driverId;"
    },
    {
        "question_id": 1013,
        "answer_sql": " SELECT fastestLapTime FROM results JOIN lapTimes ON results.raceId = lapTimes.raceId AND results.driverId = lapTimes.driverId JOIN circuits ON lapTimes.raceId = circuits.circuitId WHERE circuits.country = 'Austria' ORDER BY lapTimes.milliseconds ASC LIMIT 1;"
    },
    {
        "question_id": 1014,
        "answer_sql": "SELECT lt.lap, lt.time, lt.milliseconds FROM lapTimes lt JOIN circuits c ON lt.raceId = (SELECT r.raceId FROM races r WHERE r.circuitId = c.circuitId AND c.country = 'Italy') ORDER BY lt.milliseconds ASC;"
    },
    {
        "question_id": 1015,
        "answer_sql": "SELECT races.name, results.fastestLapTime FROM races JOIN results ON races.raceId = results.raceId JOIN lapTimes ON races.raceId = lapTimes.raceId AND results.fastestLap = lapTimes.lap JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.country = 'Austria' ORDER BY results.fastestLapTime ASC LIMIT 1;"
    },
    {
        "question_id": 1016,
        "answer_sql": ""
    },
    {
        "question_id": 1017,
        "answer_sql": "SELECT circuits.name, circuits.lat, circuits.lng FROM circuits JOIN ( SELECT raceId, MIN(milliseconds) AS minTime FROM results GROUP BY raceId ) AS fastestRaces ON circuits.circuitId = fastestRaces.raceId JOIN ( SELECT raceId, lap, milliseconds FROM lapTimes WHERE milliseconds = ( SELECT minTime FROM ( SELECT raceId, MIN(milliseconds) AS minTime FROM lapTimes GROUP BY raceId ) AS minTimes WHERE minTimes.raceId = lapTimes.raceId ) ) AS fastestLaps ON fastestRaces.raceId = fastestLaps.raceId WHERE circuits.lat IS NOT NULL AND circuits.lng IS NOT NULL;"
    },
    {
        "question_id": 1018,
        "answer_sql": "SELECT AVG(milliseconds) AS average_milliseconds_at_pit_stop FROM pitStops;"
    },
    {
        "question_id": 1019,
        "answer_sql": "SELECT circuits.name, AVG(lapTimes.milliseconds) as averageLapTime FROM lapTimes JOIN races ON lapTimes.raceId = races.raceId JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.country = 'Italy' GROUP BY circuits.name;"
    },
    {
        "question_id": 1020,
        "answer_sql": "SELECT player_api_id FROM Player_Attributes ORDER BY overall_rating DESC LIMIT 1;"
    },
    {
        "question_id": 1021,
        "answer_sql": "SELECT Player.player_name, Player.height FROM Player JOIN Player_Attributes ON Player.player_fifa_api_id = Player_Attributes.player_fifa_api_id ORDER BY Player.height DESC LIMIT 1;"
    },
    {
        "question_id": 1022,
        "answer_sql": "SELECT preferred_foot FROM Player_Attributes WHERE potential = (SELECT MIN(potential) FROM Player_Attributes)"
    },
    {
        "question_id": 1023,
        "answer_sql": "SELECT COUNT(*) AS NumberOfPlayers FROM Player_Attributes WHERE overall_rating BETWEEN 60 AND 65 AND defensive_work_rate = 'low';"
    },
    {
        "question_id": 1024,
        "answer_sql": "SELECT pa.player_api_id FROM Player_Attributes pa JOIN ( SELECT player_api_id, MAX(crossing) AS max_crossing FROM Player_Attributes GROUP BY player_api_id ) AS max_crossings ON pa.player_api_id = max_crossings.player_api_id AND pa.crossing = max_crossings.max_crossing ORDER BY max_crossings.max_crossing DESC LIMIT 5;"
    },
    {
        "question_id": 1025,
        "answer_sql": " SELECT League.name, SUM(home_team_goal + away_team_goal) AS total_goals FROM Match JOIN League ON Match.league_id = League.id WHERE Match.season = '2015/2016' GROUP BY League.name ORDER BY total_goals DESC LIMIT 1;"
    },
    {
        "question_id": 1026,
        "answer_sql": "SELECT Team.team_short_name, COUNT(*) AS losses FROM Match JOIN Team ON Match.home_team_api_id = Team.team_api_id WHERE Match.season = '2015/2016' AND (Match.home_team_goal - Match.away_team_goal) < 0 GROUP BY Team.team_short_name ORDER BY losses ASC LIMIT 1;"
    },
    {
        "question_id": 1027,
        "answer_sql": "SELECT Player.player_name FROM Player JOIN Player_Attributes ON Player.player_fifa_api_id = Player_Attributes.player_fifa_api_id GROUP BY Player.player_name ORDER BY MAX(Player_Attributes.penalties) DESC LIMIT 10;"
    },
    {
        "question_id": 1028,
        "answer_sql": "SELECT away_team_api_id, COUNT(*) AS wins FROM Match JOIN Team ON Match.away_team_api_id = Team.team_api_id JOIN League ON Match.league_id = League.id WHERE League.name = 'Scotland Premier League' AND Match.season = '2009/2010' AND away_team_goal > home_team_goal GROUP BY away_team_api_id ORDER BY wins DESC LIMIT 1;"
    },
    {
        "question_id": 1029,
        "answer_sql": "SELECT Team.team_api_id, MAX(Team_Attributes.buildUpPlaySpeed) AS HighestBuildUpPlaySpeed FROM Team JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id GROUP BY Team.team_api_id ORDER BY HighestBuildUpPlaySpeed DESC LIMIT 4;"
    },
    {
        "question_id": 1030,
        "answer_sql": " SELECT league_id, COUNT(*) AS draw_matches FROM Match JOIN Team_Attributes ON Match.home_team_api_id = Team_Attributes.team_api_id WHERE Match.season = '2015/2016' AND Match.home_team_goal = Match.away_team_goal GROUP BY league_id ORDER BY draw_matches DESC LIMIT 1;"
    },
    {
        "question_id": 1031,
        "answer_sql": "SELECT (strftime('%Y', 'now') - strftime('%Y', birthday)) AS age, Player_Attributes.player_api_id, Player_Attributes.sprint_speed FROM Player_Attributes JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE Player_Attributes.sprint_speed >= 97 AND Player_Attributes.date >= '2013-01-01 00:00:00' AND Player_Attributes.date <= '2015-12-31 00:00:00' ORDER BY age DESC;"
    },
    {
        "question_id": 1032,
        "answer_sql": "SELECT name, MAX(match_count) AS highest_match_count FROM ( SELECT name, COUNT(league_id) AS match_count FROM Match JOIN League ON Match.league_id = League.id GROUP BY League.id ) AS league_match_counts;"
    },
    {
        "question_id": 1033,
        "answer_sql": "SELECT AVG(height) AS average_height FROM Player_Attributes pa JOIN Player p ON pa.id = p.id WHERE p.birthday >= '1990-01-01 00:00:00' AND p.birthday < '1996-01-01 00:00:00';"
    },
    {
        "question_id": 1034,
        "answer_sql": "SELECT player_api_id FROM Player_Attributes WHERE overall_rating = ( SELECT MAX(overall_rating) FROM Player_Attributes WHERE substr(date,1,4) = '2010' ) AND substr(date,1,4) = '2010';"
    },
    {
        "question_id": 1035,
        "answer_sql": "SELECT team_fifa_api_id FROM Team_Attributes WHERE buildUpPlaySpeed BETWEEN 51 AND 59;"
    },
    {
        "question_id": 1036,
        "answer_sql": "SELECT Team.team_long_name FROM Team JOIN Team_Attributes ON Team.team_fifa_api_id = Team_Attributes.team_fifa_api_id WHERE strftime('%Y', Team_Attributes.date) = '2012' GROUP BY Team.team_long_name HAVING AVG(Team_Attributes.buildUpPlayPassing) > ( SELECT AVG(buildUpPlayPassing) FROM Team_Attributes WHERE strftime('%Y', date) = '2012' AND buildUpPlayPassing IS NOT NULL );"
    },
    {
        "question_id": 1037,
        "answer_sql": "SELECT (SUM(CASE WHEN preferred_foot = 'left' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS percentage_left_footed_born_1987_1992 FROM Player_Attributes JOIN Player ON Player_Attributes.id = Player.id WHERE birthday BETWEEN '1987-01-01 00:00:00' AND '1992-12-31 00:00:00';"
    },
    {
        "question_id": 1038,
        "answer_sql": "SELECT l.name AS league_name, SUM(m.home_team_goal + m.away_team_goal) AS total_goals FROM League l JOIN Match m ON l.id = m.league_id GROUP BY l.id ORDER BY total_goals ASC LIMIT 5;"
    },
    {
        "question_id": 1039,
        "answer_sql": "SELECT AVG(long_shots) AS average_long_shots FROM Player_Attributes WHERE player_fifa_api_id = (SELECT player_fifa_api_id FROM Player WHERE player_name = 'Ahmed Samir Farag');"
    },
    {
        "question_id": 1040,
        "answer_sql": "SELECT player_name, AVG(heading_accuracy) AS avg_heading_accuracy FROM Player_Attributes JOIN Player ON Player_Attributes.id = Player.id WHERE height > 180 GROUP BY player_name ORDER BY avg_heading_accuracy DESC LIMIT 10;"
    },
    {
        "question_id": 1041,
        "answer_sql": ""
    },
    {
        "question_id": 1042,
        "answer_sql": "SELECT DISTINCT l.name FROM League l JOIN Match m ON l.id = m.league_id WHERE m.season = '2009/2010' GROUP BY l.name HAVING AVG(m.home_team_goal) > AVG(m.away_team_goal);"
    },
    {
        "question_id": 1043,
        "answer_sql": "SELECT team_short_name FROM Team WHERE team_long_name = 'Queens Park Rangers';"
    },
    {
        "question_id": 1044,
        "answer_sql": "SELECT Player.player_name, substr(Player.birthday, 1, 4) AS birthyear, substr(Player.birthday, 6, 2) AS birthmonth FROM Player WHERE substr(Player.birthday, 1, 4) = '1970' AND substr(Player.birthday, 6, 2) = '10';"
    },
    {
        "question_id": 1045,
        "answer_sql": "SELECT pa.attacking_work_rate FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE p.player_name = 'Franco Zennaro';"
    },
    {
        "question_id": 1046,
        "answer_sql": "SELECT team_long_name, buildUpPlayPositioningClass FROM Team JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id WHERE team_long_name = 'ADO Den Haag' AND buildUpPlayPositioningClass IS NOT NULL;"
    },
    {
        "question_id": 1047,
        "answer_sql": "SELECT finishing FROM Player_Attributes WHERE heading_accuracy IS NOT NULL AND date = '2014-09-18 00:00:00' AND player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Francois Affolter');"
    },
    {
        "question_id": 1048,
        "answer_sql": "SELECT pa.overall_rating FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE p.player_name = 'Gabriel Tamas' AND strftime('%Y', pa.date) = '2011';"
    },
    {
        "question_id": 1049,
        "answer_sql": "SELECT COUNT(*) AS total_matches FROM Match JOIN League ON Match.league_id = League.id WHERE League.name = 'Scotland Premier League' AND Match.season = '2015/2016';"
    },
    {
        "question_id": 1050,
        "answer_sql": "SELECT preferred_foot FROM Player_Attributes pa JOIN Player p ON pa.id = p.id WHERE p.birthday = (SELECT MIN(birthday) FROM Player);"
    },
    {
        "question_id": 1051,
        "answer_sql": "SELECT Player.player_name, MAX(Player_Attributes.potential) AS highest_potential FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id GROUP BY Player.player_name ORDER BY highest_potential DESC LIMIT 1;"
    },
    {
        "question_id": 1052,
        "answer_sql": "SELECT COUNT(*) AS left_footed_under_130_weight_players FROM Player_Attributes pa JOIN Player p ON pa.id = p.id WHERE p.weight < 130 AND pa.preferred_foot = 'left';"
    },
    {
        "question_id": 1053,
        "answer_sql": "SELECT Team.team_short_name FROM Team JOIN Team_Attributes ON Team.team_fifa_api_id = Team_Attributes.team_fifa_api_id WHERE Team_Attributes.chanceCreationPassingClass = 'Risky';"
    },
    {
        "question_id": 1054,
        "answer_sql": " SELECT pa.defensive_work_rate FROM Player_Attributes pa JOIN Player p ON pa.id = p.id WHERE p.player_name = 'David Wilson';"
    },
    {
        "question_id": 1055,
        "answer_sql": "SELECT Player.birthday FROM Player JOIN Player_Attributes ON Player.player_fifa_api_id = Player_Attributes.player_fifa_api_id WHERE Player_Attributes.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes);"
    },
    {
        "question_id": 1056,
        "answer_sql": "SELECT League.name FROM League JOIN Country ON League.country_id = Country.id WHERE Country.name = 'Netherlands';"
    },
    {
        "question_id": 1057,
        "answer_sql": "SELECT AVG(home_team_goal) AS average_home_team_goal FROM Match JOIN League ON Match.league_id = League.id JOIN Country ON League.country_id = Country.id WHERE Country.name = 'Poland' AND Match.season = '2010/2011';"
    },
    {
        "question_id": 1058,
        "answer_sql": "SELECT Player.player_name, AVG(Player_Attributes.finishing) AS avg_finishing FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player.height = (SELECT MAX(height) FROM Player) OR Player.height = (SELECT MIN(height) FROM Player) GROUP BY Player.player_name ORDER BY avg_finishing DESC LIMIT 1;"
    },
    {
        "question_id": 1059,
        "answer_sql": ""
    },
    {
        "question_id": 1060,
        "answer_sql": "SELECT COUNT(*) FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE strftime('%Y', p.birthday) > '1990';"
    },
    {
        "question_id": 1061,
        "answer_sql": "SELECT COUNT(*) AS NumberOfPlayers FROM Player WHERE player_name LIKE 'Adam%' AND weight > 170;"
    },
    {
        "question_id": 1062,
        "answer_sql": " SELECT DISTINCT Player.player_name FROM Player_Attributes JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE Player_Attributes.overall_rating > 80 AND strftime('%Y', Player_Attributes.date) BETWEEN '2008' AND '2010';"
    },
    {
        "question_id": 1063,
        "answer_sql": "SELECT potential FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Doran');"
    },
    {
        "question_id": 1064,
        "answer_sql": ""
    },
    {
        "question_id": 1065,
        "answer_sql": "SELECT Team.team_long_name FROM Team JOIN Team_Attributes ON Team.team_fifa_api_id = Team_Attributes.team_fifa_api_id WHERE Team_Attributes.buildUpPlaySpeedClass = 'Fast';"
    },
    {
        "question_id": 1066,
        "answer_sql": "SELECT team_attributes.buildUpPlayPassingClass FROM Team JOIN Team_Attributes ON Team.team_fifa_api_id = Team_Attributes.team_fifa_api_id WHERE Team.team_short_name = 'CLB';"
    },
    {
        "question_id": 1067,
        "answer_sql": "SELECT Team.team_short_name FROM Team_Attributes JOIN Team ON Team_Attributes.team_api_id = Team.team_api_id WHERE Team_Attributes.buildUpPlayPassing > 70;"
    },
    {
        "question_id": 1068,
        "answer_sql": "SELECT AVG(overall_rating) AS average_overall_rating FROM Player_Attributes JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE strftime('%Y', date) BETWEEN '2010' AND '2015' AND height > 170;"
    },
    {
        "question_id": 1069,
        "answer_sql": "SELECT player_name, height FROM Player ORDER BY height ASC LIMIT 1;"
    },
    {
        "question_id": 1070,
        "answer_sql": "SELECT Country.name FROM League JOIN Country ON League.country_id = Country.id WHERE League.name = 'Italy Serie A';"
    },
    {
        "question_id": 1071,
        "answer_sql": "SELECT Team.team_short_name FROM Team JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id WHERE Team_Attributes.buildUpPlaySpeed = 31 AND Team_Attributes.buildUpPlayDribbling = 53 AND Team_Attributes.buildUpPlayPassing = 32;"
    },
    {
        "question_id": 1072,
        "answer_sql": "SELECT AVG(overall_rating) AS average_overall_rating FROM Player_Attributes JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE Player.player_name = 'Aaron Doran';"
    },
    {
        "question_id": 1073,
        "answer_sql": "SELECT COUNT(*) AS match_count FROM Match JOIN League ON Match.league_id = League.id JOIN sqlite_sequence ON strftime('%Y-%m', Match.date) BETWEEN '2008-08' AND '2008-10' WHERE League.name = 'Germany 1. Bundesliga';"
    },
    {
        "question_id": 1074,
        "answer_sql": " SELECT Team.team_short_name FROM Match JOIN Team ON Match.home_team_api_id = Team.team_api_id WHERE Match.home_team_goal = 10;"
    },
    {
        "question_id": 1075,
        "answer_sql": "SELECT Player.player_name, Player_Attributes.overall_rating, Player_Attributes.potential, Player_Attributes.balance FROM Player JOIN Player_Attributes ON Player.player_fifa_api_id = Player_Attributes.player_fifa_api_id WHERE Player_Attributes.potential = 61 ORDER BY Player_Attributes.balance DESC LIMIT 1;"
    },
    {
        "question_id": 1076,
        "answer_sql": "SELECT (AVG(ball_control) - (SELECT AVG(ball_control) FROM Player_Attributes WHERE player_api_id IN (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Appindangoye'))) AS difference_of_average_ball_control FROM Player_Attributes WHERE player_api_id IN (SELECT player_api_id FROM Player WHERE player_name = 'Abdou Diallo');"
    },
    {
        "question_id": 1077,
        "answer_sql": "SELECT team_long_name FROM Team WHERE team_short_name = 'GEN';"
    },
    {
        "question_id": 1078,
        "answer_sql": "SELECT Player.player_name FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player.player_name IN ('Aaron Lennon', 'Abdelaziz Barrada') ORDER BY Player.birthday ASC LIMIT 1;"
    },
    {
        "question_id": 1079,
        "answer_sql": "SELECT Player.player_name, Player.height FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id ORDER BY Player.height DESC LIMIT 1;"
    },
    {
        "question_id": 1080,
        "answer_sql": "SELECT COUNT(*) FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE pa.preferred_foot = 'left' AND pa.attacking_work_rate = 'low';"
    },
    {
        "question_id": 1081,
        "answer_sql": "SELECT name FROM Country WHERE id IN (SELECT country_id FROM League WHERE name = 'Belgium Jupiler League');"
    },
    {
        "question_id": 1082,
        "answer_sql": "SELECT League.name FROM League JOIN Country ON League.country_id = Country.id WHERE Country.name = 'Germany';"
    },
    {
        "question_id": 1083,
        "answer_sql": "SELECT player_api_id, overall_rating FROM Player_Attributes ORDER BY overall_rating DESC LIMIT 1;"
    },
    {
        "question_id": 1084,
        "answer_sql": "SELECT COUNT(*) AS NumberOfPlayers FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.id WHERE strftime('%Y', p.birthday) < '1986' AND pa.defensive_work_rate = 'high';"
    },
    {
        "question_id": 1085,
        "answer_sql": "SELECT Player.player_name FROM Player JOIN Player_Attributes ON Player.player_fifa_api_id = Player_Attributes.player_fifa_api_id WHERE Player.player_name IN ('Alexis', 'Ariel Borysiuk', 'Arouna Kone') GROUP BY Player.player_name ORDER BY MAX(Player_Attributes.crossing) DESC LIMIT 1;"
    },
    {
        "question_id": 1086,
        "answer_sql": "SELECT heading_accuracy FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Ariel Borysiuk');"
    },
    {
        "question_id": 1087,
        "answer_sql": "SELECT COUNT(*) AS players_count FROM Player_Attributes pa JOIN Player p ON pa.id = p.id WHERE p.height > 180 AND pa.volleys > 70;"
    },
    {
        "question_id": 1088,
        "answer_sql": "SELECT Player.player_name FROM Player JOIN Player_Attributes ON Player.id = Player_Attributes.player_api_id WHERE Player_Attributes.volleys > 70 AND Player_Attributes.dribbling > 70;"
    },
    {
        "question_id": 1089,
        "answer_sql": "SELECT COUNT(*) AS MatchesInBelgium FROM Match JOIN Country ON Match.country_id = Country.id WHERE Country.name = 'Belgium' AND Match.season = '2008/2009';"
    },
    {
        "question_id": 1090,
        "answer_sql": "SELECT Player_Attributes.long_passing FROM Player_Attributes JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id ORDER BY strftime('%Y-%m-%d', Player.birthday) ASC LIMIT 1;"
    },
    {
        "question_id": 1091,
        "answer_sql": " SELECT COUNT(*) AS MatchesCount FROM Match JOIN League ON Match.league_id = League.id WHERE League.name = 'Belgium Jupiler League' AND strftime('%Y', Match.date) = '2009' AND strftime('%m', Match.date) = '04';"
    },
    {
        "question_id": 1092,
        "answer_sql": "SELECT League.name, COUNT(*) AS match_count FROM Match JOIN League ON Match.league_id = League.id WHERE Match.season = '2008/2009' GROUP BY League.id ORDER BY match_count DESC LIMIT 1;"
    },
    {
        "question_id": 1093,
        "answer_sql": "SELECT AVG(overall_rating) AS average_overall_rating FROM Player_Attributes JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE strftime('%Y', Player.birthday) < '1986';"
    },
    {
        "question_id": 1094,
        "answer_sql": ""
    },
    {
        "question_id": 1095,
        "answer_sql": "SELECT AVG(Team_Attributes.buildUpPlaySpeed) AS AverageBuildUpPlaySpeed FROM Team_Attributes JOIN Team ON Team_Attributes.team_fifa_api_id = Team.team_fifa_api_id WHERE Team.team_long_name = 'Heart of Midlothian';"
    },
    {
        "question_id": 1096,
        "answer_sql": "SELECT AVG(overall_rating) AS average_overall_rating FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Pietro Marino';"
    },
    {
        "question_id": 1097,
        "answer_sql": "SELECT SUM(crossing) AS total_crossing_score FROM Player_Attributes WHERE player_fifa_api_id IN ( SELECT player_fifa_api_id FROM Player WHERE player_name = 'Aaron Lennox' );"
    },
    {
        "question_id": 1098,
        "answer_sql": "SELECT Team_Attributes.chanceCreationPassingClass, MAX(Team_Attributes.chanceCreationPassing) AS highest_passing_score FROM Team_Attributes JOIN Team ON Team_Attributes.team_fifa_api_id = Team.team_fifa_api_id WHERE Team.team_long_name = 'Ajax' GROUP BY Team_Attributes.chanceCreationPassingClass;"
    },
    {
        "question_id": 1099,
        "answer_sql": "SELECT preferred_foot FROM Player_Attributes JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE player_name = 'Abdou Diallo';"
    },
    {
        "question_id": 1100,
        "answer_sql": "SELECT Player.player_name, MAX(Player_Attributes.overall_rating) AS highest_overall_rating FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player.player_name = 'Dorlan Pabon' GROUP BY Player.player_name;"
    },
    {
        "question_id": 1101,
        "answer_sql": "SELECT AVG(away_team_goal) AS average_goals FROM Match JOIN Team ON Match.away_team_api_id = Team.id WHERE Team.team_long_name = 'Parma' AND Match.league_id = (SELECT id FROM League WHERE country_id = (SELECT id FROM Country WHERE name = 'Italy'));"
    },
    {
        "question_id": 1102,
        "answer_sql": ""
    },
    {
        "question_id": 1103,
        "answer_sql": "SELECT overall_rating FROM Player_Attributes WHERE player_fifa_api_id = ( SELECT player_fifa_api_id FROM Player WHERE player_name = 'Aaron Mooy' AND strftime('%Y-%m-%d %H:%M:%S', date) = '2016-02-04 00:00:00' )"
    },
    {
        "question_id": 1104,
        "answer_sql": "SELECT Player_Attributes.potential FROM Player_Attributes JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE Player.player_name = 'Francesco Parravicini' AND Player_Attributes.date = '2010-08-30 00:00:00';"
    },
    {
        "question_id": 1105,
        "answer_sql": "SELECT attacking_work_rate FROM Player_Attributes WHERE player_fifa_api_id = ( SELECT player_fifa_api_id FROM Player WHERE player_name = 'Francesco Migliore' ) AND date = '2015-05-01 00:00:00';"
    },
    {
        "question_id": 1106,
        "answer_sql": "SELECT pa.defensive_work_rate FROM Player p JOIN Player_Attributes pa ON p.player_fifa_api_id = pa.player_fifa_api_id WHERE p.player_name = 'Kevin Berigaud' AND pa.date = '2013-02-22 00:00:00';"
    },
    {
        "question_id": 1107,
        "answer_sql": ""
    },
    {
        "question_id": 1108,
        "answer_sql": ""
    },
    {
        "question_id": 1109,
        "answer_sql": "SELECT Team_Attributes.buildUpPlayDribblingClass FROM Match JOIN Team ON Match.home_team_api_id = Team.team_api_id JOIN Team_Attributes ON Team.team_fifa_api_id = Team_Attributes.team_fifa_api_id WHERE Team.team_short_name = 'LEI' AND Team_Attributes.date = '2015-09-10 00:00:00';"
    },
    {
        "question_id": 1110,
        "answer_sql": ""
    },
    {
        "question_id": 1111,
        "answer_sql": "SELECT Team_Attributes.chanceCreationPassingClass FROM Team_Attributes JOIN Team ON Team_Attributes.team_api_id = Team.team_api_id WHERE Team.team_long_name = 'PEC Zwolle' AND Team_Attributes.date = '2013-09-20 00:00:00';"
    },
    {
        "question_id": 1112,
        "answer_sql": "SELECT chanceCreationCrossingClass FROM Team_Attributes JOIN Team ON Team_Attributes.team_api_id = Team.team_api_id WHERE Team.team_long_name = 'Hull City' AND Team_Attributes.date = '2010-02-22 00:00:00';"
    },
    {
        "question_id": 1113,
        "answer_sql": "SELECT team_attributes.defenceAggressionClass FROM Team JOIN Team_Attributes ON Team.team_fifa_api_id = Team_Attributes.team_fifa_api_id WHERE Team.team_long_name = 'Hannover 96' AND Team_Attributes.date = '2015-09-10 00:00:00';"
    },
    {
        "question_id": 1114,
        "answer_sql": "SELECT AVG(overall_rating) AS average_overall_rating FROM Player_Attributes JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE Player.player_name = 'Marko Arnautovic' AND date BETWEEN '2007-02-22 00:00:00' AND '2016-04-21 00:00:00';"
    },
    {
        "question_id": 1115,
        "answer_sql": " SELECT ((SELECT overall_rating FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Landon Donovan') AND date = '2013/7/12') - (SELECT overall_rating FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Jordan Bowery') AND date = '2013/7/12')) / (SELECT overall_rating FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Landon Donovan') AND date = '2013/7/12') * 100 AS percentage_difference;"
    },
    {
        "question_id": 1116,
        "answer_sql": "SELECT Player.player_name FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id GROUP BY Player.player_name ORDER BY MAX(Player.height) DESC LIMIT 5;"
    },
    {
        "question_id": 1117,
        "answer_sql": "SELECT Player.player_api_id FROM Player JOIN Player_Attributes ON Player.player_fifa_api_id = Player_Attributes.player_fifa_api_id GROUP BY Player.player_api_id ORDER BY MAX(Player.weight) DESC LIMIT 10;"
    },
    {
        "question_id": 1118,
        "answer_sql": "SELECT DISTINCT Player.player_name FROM Player JOIN Player_Attributes ON Player.id = Player_Attributes.player_api_id WHERE datetime(CURRENT_TIMESTAMP,'localtime') - datetime(Player.birthday) > 34;"
    },
    {
        "question_id": 1119,
        "answer_sql": " SELECT COUNT(*) AS GoalsByAaronLennon FROM Match JOIN Player ON Match.home_player_X1 = Player.id WHERE Player.player_name = 'Aaron Lennon';"
    },
    {
        "question_id": 1120,
        "answer_sql": "SELECT SUM(away_player_11) AS total_goals FROM Match JOIN Player ON Match.away_player_11 = Player.id WHERE Player.player_name IN ('Daan Smith', 'Filipe Ferreira');"
    },
    {
        "question_id": 1121,
        "answer_sql": " SELECT SUM(home_team_goal) AS total_goals FROM Match JOIN Player ON Match.home_player_1 = Player.player_api_id WHERE (strftime('%Y', 'now') - strftime('%Y', Player.birthday)) <= 30;"
    },
    {
        "question_id": 1122,
        "answer_sql": "SELECT player_name FROM Player JOIN Player_Attributes ON Player.player_fifa_api_id = Player_Attributes.player_fifa_api_id GROUP BY Player.player_api_id ORDER BY MAX(overall_rating) DESC LIMIT 10;"
    },
    {
        "question_id": 1123,
        "answer_sql": "SELECT Player.player_name FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player_Attributes.potential = (SELECT MAX(potential) FROM Player_Attributes);"
    },
    {
        "question_id": 1124,
        "answer_sql": "SELECT DISTINCT p1.player_name FROM Player_Attributes pa1 JOIN Player_Attributes pa2 ON pa1.player_fifa_api_id = pa2.player_fifa_api_id JOIN Player p1 ON pa1.player_fifa_api_id = p1.player_fifa_api_id JOIN Player p2 ON pa2.player_fifa_api_id = p2.player_fifa_api_id WHERE pa1.attacking_work_rate = 'high' AND pa2.attacking_work_rate = 'high';"
    },
    {
        "question_id": 1125,
        "answer_sql": " SELECT Player.player_name FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player_Attributes.finishing = 1 ORDER BY (strftime('%s', 'now') - strftime('%s', Player.birthday)) DESC LIMIT 1;"
    },
    {
        "question_id": 1126,
        "answer_sql": ""
    },
    {
        "question_id": 1127,
        "answer_sql": ""
    },
    {
        "question_id": 1128,
        "answer_sql": ""
    },
    {
        "question_id": 1129,
        "answer_sql": "SELECT team_long_name FROM Team JOIN Team_Attributes ON Team.team_fifa_api_id = Team_Attributes.team_fifa_api_id WHERE buildUpPlaySpeedClass = 'Slow';"
    },
    {
        "question_id": 1130,
        "answer_sql": "SELECT team_short_name FROM Team_Attributes JOIN Team ON Team_Attributes.team_api_id = Team.team_api_id WHERE chanceCreationPassingClass = 'Safe';"
    },
    {
        "question_id": 1131,
        "answer_sql": " SELECT AVG(Player.height) AS average_height FROM Player JOIN Match ON Player.player_api_id = Match.home_player_1 OR Player.player_api_id = Match.away_player_1 JOIN Country ON Match.league_id = Country.id WHERE Country.name = 'Italy';"
    },
    {
        "question_id": 1132,
        "answer_sql": "SELECT player_name FROM Player WHERE height > 180 ORDER BY player_name ASC LIMIT 3;"
    },
    {
        "question_id": 1133,
        "answer_sql": "SELECT COUNT(*) AS NumberOfPlayers FROM Player WHERE player_name LIKE 'Aaron%' AND strftime('%Y', birthday) > '1990';"
    },
    {
        "question_id": 1134,
        "answer_sql": "SELECT (SELECT jumping FROM Player_Attributes WHERE id = 6) - (SELECT jumping FROM Player_Attributes WHERE id = 23) AS jumping_difference;"
    },
    {
        "question_id": 1135,
        "answer_sql": "SELECT Player_Attributes.id FROM Player_Attributes JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE Player_Attributes.preferred_foot = 'right' ORDER BY Player_Attributes.potential ASC LIMIT 3;"
    },
    {
        "question_id": 1136,
        "answer_sql": "SELECT COUNT(*) AS number_of_players FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE pa.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes WHERE preferred_foot = 'left') AND pa.preferred_foot = 'left';"
    },
    {
        "question_id": 1137,
        "answer_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Player_Attributes)) AS percentage_above_80 FROM Player_Attributes WHERE stamina > 80 AND strength > 80;"
    },
    {
        "question_id": 1138,
        "answer_sql": ""
    },
    {
        "question_id": 1139,
        "answer_sql": ""
    },
    {
        "question_id": 1140,
        "answer_sql": "SELECT pa.acceleration, pa.agility, pa.sprint_speed FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE p.player_name = 'Alexis Blin';"
    },
    {
        "question_id": 1141,
        "answer_sql": "SELECT buildUpPlaySpeedClass FROM Team_Attributes JOIN Team ON Team_Attributes.team_fifa_api_id = Team.team_fifa_api_id WHERE Team.team_long_name = 'KSV Cercle Brugge';"
    },
    {
        "question_id": 1142,
        "answer_sql": "SELECT COUNT(*) AS total_games FROM Match WHERE season = '2015/2016' AND league_id = (SELECT id FROM League WHERE name = 'Italian Serie A');"
    },
    {
        "question_id": 1143,
        "answer_sql": "SELECT MAX(home_team_goal) AS highest_home_team_score FROM Match JOIN League ON Match.league_id = League.id WHERE League.name = 'Eredivisie';"
    },
    {
        "question_id": 1144,
        "answer_sql": "SELECT finishing, curve FROM Player_Attributes WHERE id = ( SELECT id FROM Player WHERE weight = ( SELECT MAX(weight) FROM Player ) );"
    },
    {
        "question_id": 1145,
        "answer_sql": "SELECT League.name, COUNT(*) as games_count FROM Match JOIN League ON Match.league_id = League.id JOIN Team ON Match.home_team_api_id = Team.team_api_id OR Match.away_team_api_id = Team.team_api_id WHERE Match.season = '2015/2016' GROUP BY League.id ORDER BY games_count DESC LIMIT 1;"
    },
    {
        "question_id": 1146,
        "answer_sql": "SELECT team_long_name FROM Team WHERE team_api_id = ( SELECT away_team_api_id FROM Match GROUP BY away_team_api_id ORDER BY MAX(away_team_goal) DESC LIMIT 1 );"
    },
    {
        "question_id": 1147,
        "answer_sql": "SELECT player_name FROM Player JOIN Player_Attributes ON Player.player_fifa_api_id = Player_Attributes.player_fifa_api_id ORDER BY overall_rating DESC LIMIT 1;"
    },
    {
        "question_id": 1148,
        "answer_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Player_Attributes)) AS percentage FROM Player_Attributes JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE Player.height < 180 AND Player_Attributes.overall_rating > 70;"
    },
    {
        "question_id": 1149,
        "answer_sql": "SELECT (COUNT(CASE WHEN Patient.SEX = 'M' AND Patient.Admission = '+' THEN 1 END) - COUNT(CASE WHEN Patient.SEX = 'M' AND Patient.Admission = '-' THEN 1 END)) * 100.0 / COUNT(CASE WHEN Patient.SEX = 'M' THEN 1 END) AS deviation_percentage FROM Patient JOIN Examination ON Patient.ID = Examination.ID"
    },
    {
        "question_id": 1150,
        "answer_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Patient WHERE SEX = 'F')) AS percentage FROM Patient WHERE SEX = 'F' AND (strftime('%Y', Birthday) > '1930');"
    },
    {
        "question_id": 1151,
        "answer_sql": " SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Patient WHERE Birthday BETWEEN '1930-01-01' AND '1940-12-31')) AS PercentageInpatient FROM Patient WHERE Birthday BETWEEN '1930-01-01' AND '1940-12-31' AND Admission = '+';"
    },
    {
        "question_id": 1152,
        "answer_sql": " SELECT CAST(COUNT(DISTINCT CASE WHEN Patient.Admission = '+' THEN Examination.ID END) AS FLOAT) / CAST(COUNT(DISTINCT CASE WHEN Patient.Admission = '-' THEN Examination.ID END) AS FLOAT) AS ratio FROM Examination JOIN Patient ON Examination.ID = Patient.ID WHERE Examination.Diagnosis = 'SLE';"
    },
    {
        "question_id": 1153,
        "answer_sql": "SELECT Laboratory.Date, Patient.Diagnosis FROM Laboratory JOIN Patient ON Laboratory.ID = Patient.ID WHERE Patient.ID = 30609;"
    },
    {
        "question_id": 1154,
        "answer_sql": " SELECT Patient.SEX, Patient.Birthday, Examination.`Examination Date`, Examination.Symptoms FROM Examination JOIN Patient ON Examination.ID = Patient.ID WHERE Examination.ID = '163109';"
    },
    {
        "question_id": 1155,
        "answer_sql": "SELECT Patient.ID, Patient.SEX, Patient.Birthday FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.LDH > 500;"
    },
    {
        "question_id": 1156,
        "answer_sql": "SELECT Patient.ID, (strftime('%Y', 'now') - strftime('%Y', Patient.Birthday)) AS Age FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.RVVT = '+';"
    },
    {
        "question_id": 1157,
        "answer_sql": "SELECT Patient.ID, Patient.SEX, Patient.Diagnosis FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.Thrombosis = 2;"
    },
    {
        "question_id": 1158,
        "answer_sql": " SELECT Patient.ID, Patient.SEX, Patient.Birthday FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.Birthday BETWEEN '1937-01-01' AND '1937-12-31' AND Laboratory.`T-CHO` >= 250;"
    },
    {
        "question_id": 1159,
        "answer_sql": "SELECT Patient.ID, Patient.SEX, Patient.Diagnosis FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.ALB < 3.5;"
    },
    {
        "question_id": 1160,
        "answer_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Patient WHERE SEX = 'F')) AS Percentage FROM Laboratory WHERE TP < 6.0 OR TP > 8.5 AND ID IN (SELECT ID FROM Patient WHERE SEX = 'F');"
    },
    {
        "question_id": 1161,
        "answer_sql": ""
    },
    {
        "question_id": 1162,
        "answer_sql": ""
    },
    {
        "question_id": 1163,
        "answer_sql": ""
    },
    {
        "question_id": 1164,
        "answer_sql": "SELECT COUNT(*) FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.Thrombosis = 1 AND Patient.SEX = 'F' AND strftime('%Y', Examination.`Examination Date`) = '1997';"
    },
    {
        "question_id": 1165,
        "answer_sql": ""
    },
    {
        "question_id": 1166,
        "answer_sql": ""
    },
    {
        "question_id": 1167,
        "answer_sql": "SELECT AVG(monthly_count) AS average_monthly_male_patients FROM ( SELECT COUNT(L.ID) AS monthly_count FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.Date BETWEEN '1998-01-01' AND '1998-12-31' GROUP BY strftime('%Y-%m', L.Date) ) AS subquery;"
    },
    {
        "question_id": 1168,
        "answer_sql": ""
    },
    {
        "question_id": 1169,
        "answer_sql": "SELECT ROUND( CAST(SUM(CASE WHEN SEX = 'M' AND UA <= 8.0 THEN 1 ELSE 0 END) AS REAL) / CAST(SUM(CASE WHEN SEX = 'F' AND UA <= 6.5 THEN 1 ELSE 0 END) AS REAL), 2 ) AS Male_to_Female_Ratio FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE UA <= 8.0 AND UA <= 6.5;"
    },
    {
        "question_id": 1170,
        "answer_sql": "SELECT COUNT(*) FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE (strftime('%Y', e.`Examination Date`) - strftime('%Y', p.`First Date`)) >= 1;"
    },
    {
        "question_id": 1171,
        "answer_sql": "SELECT COUNT(*) AS UnderagePatientsExamined FROM Examination e JOIN Patient p ON e.ID = p.ID WHERE p.Birthday < '1992-01-01' AND e.`Examination Date` BETWEEN '1990-01-01' AND '1993-12-31';"
    },
    {
        "question_id": 1172,
        "answer_sql": ""
    },
    {
        "question_id": 1173,
        "answer_sql": "SELECT Diagnosis, COUNT(*) as frequency FROM Examination JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Laboratory.Date BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY Diagnosis ORDER BY frequency DESC LIMIT 1;"
    },
    {
        "question_id": 1174,
        "answer_sql": "SELECT AVG(strftime('%Y', '1991-10-30') - strftime('%Y', Patient.Birthday)) AS AverageAge FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.Date BETWEEN '1991-10-01' AND '1991-10-30' AND Laboratory.RA IS NOT NULL;"
    },
    {
        "question_id": 1175,
        "answer_sql": "SELECT Patient.ID, (strftime('%Y', `Examination Date`) - strftime('%Y', Patient.Birthday)) AS Age, Examination.Diagnosis FROM Examination JOIN Patient ON Examination.ID = Patient.ID JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Laboratory.HGB = (SELECT MAX(HGB) FROM Laboratory WHERE Laboratory.ID = Examination.ID) ORDER BY Age DESC LIMIT 1;"
    },
    {
        "question_id": 1176,
        "answer_sql": " SELECT `aCL IgG`, `aCL IgM`, `aCL IgA` FROM Examination WHERE ID = 3605340 AND `Examination Date` = '1996-12-02';"
    },
    {
        "question_id": 1177,
        "answer_sql": "SELECT CASE WHEN L.TG < 250 THEN 'Normal' ELSE 'High' END AS CholesterolStatus FROM Laboratory L JOIN Patient P ON L.ID = P.ID WHERE P.ID = 2927464 AND L.Date = '1995-09-04';"
    },
    {
        "question_id": 1178,
        "answer_sql": ""
    },
    {
        "question_id": 1179,
        "answer_sql": ""
    },
    {
        "question_id": 1180,
        "answer_sql": "SELECT Patient.SEX FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.GPT = 9 AND Laboratory.Date = '1992-06-12';"
    },
    {
        "question_id": 1181,
        "answer_sql": "SELECT Patient.Birthday, strftime('%Y', '1992-10-21') - strftime('%Y', Patient.Birthday) AS Age FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.UA = '8.4' AND Laboratory.Date = '1991-10-21';"
    },
    {
        "question_id": 1182,
        "answer_sql": ""
    },
    {
        "question_id": 1183,
        "answer_sql": " SELECT Patient.Diagnosis FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.Diagnosis = 'SLE' AND Examination.`Examination Date` = '1997-01-27' ORDER BY Patient.`First Date` LIMIT 1;"
    },
    {
        "question_id": 1184,
        "answer_sql": ""
    },
    {
        "question_id": 1185,
        "answer_sql": "SELECT (SUM(`T-CHO`) FILTER (WHERE Date LIKE '1981-11-%') - SUM(`T-CHO`) FILTER (WHERE Date LIKE '1981-12-%')) AS DecreaseRate FROM Laboratory JOIN Patient ON Laboratory.ID = Patient.ID WHERE Patient.Birthday = '1959-02-18';"
    },
    {
        "question_id": 1186,
        "answer_sql": " SELECT Patient.ID, Patient.Description FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.Diagnosis = 'Behcet' AND CAST(strftime('%Y', Patient.Description) AS INTEGER) >= 1997 AND CAST(strftime('%Y', Patient.Description) AS INTEGER) < 1998;"
    },
    {
        "question_id": 1187,
        "answer_sql": "SELECT Patient.ID FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.Date BETWEEN '1987-07-06' AND '1996-01-31' AND Laboratory.GPT > 30 AND Laboratory.ALB < 4 GROUP BY Patient.ID;"
    },
    {
        "question_id": 1188,
        "answer_sql": " SELECT Patient.ID FROM Patient WHERE SEX = 'F' AND strftime('%Y', Birthday) = '1964' AND Admission = '+';"
    },
    {
        "question_id": 1189,
        "answer_sql": ""
    },
    {
        "question_id": 1190,
        "answer_sql": "SELECT (COUNT(*) * 100.0 / SUM(CASE WHEN `U-PRO` > 0 AND `U-PRO` < 30 THEN 1 ELSE 0 END)) AS percentage FROM Laboratory JOIN Examination ON Laboratory.ID = Examination.ID WHERE `UA` <= 6.5 AND `U-PRO` > 0 AND `U-PRO` < 30;"
    },
    {
        "question_id": 1191,
        "answer_sql": ""
    },
    {
        "question_id": 1192,
        "answer_sql": ""
    },
    {
        "question_id": 1193,
        "answer_sql": " SELECT COUNT(*) FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE e.ANA = 1 AND p.SEX = 'F' AND p.Birthday BETWEEN '1980-01-01' AND '1989-12-31';"
    },
    {
        "question_id": 1194,
        "answer_sql": "SELECT DISTINCT p.SEX FROM Patient p JOIN Examination e ON p.ID = e.ID JOIN Laboratory l ON p.ID = l.ID WHERE e.Diagnosis = 'PSS' AND l.CRP > 2 AND l.CRE = 1 AND l.LDH = 123;"
    },
    {
        "question_id": 1195,
        "answer_sql": "SELECT AVG(Laboratory.ALB) AS average_albumin FROM Laboratory JOIN Examination ON Laboratory.ID = Examination.ID JOIN Patient ON Laboratory.ID = Patient.ID WHERE Patient.SEX = 'F' AND Laboratory.PLT > 400 AND Examination.Diagnosis = 'SLE';"
    },
    {
        "question_id": 1196,
        "answer_sql": " SELECT Symptoms\nFROM Examination\nWHERE Diagnosis = 'SLE'\nGROUP BY Symptoms\nORDER BY COUNT(Symptoms) DESC\nLIMIT 1;"
    },
    {
        "question_id": 1197,
        "answer_sql": " SELECT Patient.Description, Patient.Diagnosis FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Patient.ID = 48473 AND Patient.Description IS NOT NULL ORDER BY Examination.`Examination Date` ASC LIMIT 1;"
    },
    {
        "question_id": 1198,
        "answer_sql": "SELECT COUNT(*) AS NumberOfFemaleAPSPatients FROM Examination JOIN Patient ON Examination.ID = Patient.ID WHERE Patient.SEX = 'F' AND Examination.Diagnosis = 'APS';"
    },
    {
        "question_id": 1199,
        "answer_sql": ""
    },
    {
        "question_id": 1200,
        "answer_sql": " SELECT (SUM(CASE WHEN Examination.Diagnosis LIKE '%SLE%' THEN 1 ELSE 0 END) * 100.0 / NULLIF(SUM(CASE WHEN Examination.Symptoms LIKE '%thrombocytopenia%' THEN 1 ELSE 0 END), 0)) AS Proportion FROM Examination JOIN Patient ON Examination.ID = Patient.ID WHERE Examination.Symptoms LIKE '%thrombocytopenia%' AND Examination.Diagnosis LIKE '%SLE%';"
    },
    {
        "question_id": 1201,
        "answer_sql": ""
    },
    {
        "question_id": 1202,
        "answer_sql": "SELECT COUNT(*) AS NumberOfPatients FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE p.SEX = 'M' AND e.`Examination Date` BETWEEN '1995-01-01' AND '1997-12-31' AND e.Diagnosis = 'BEHCET' AND p.Admission = '-';"
    },
    {
        "question_id": 1203,
        "answer_sql": "SELECT COUNT(*) FROM Patient p JOIN Examination e ON p.ID = e.ID JOIN Laboratory l ON e.ID = l.ID WHERE p.SEX = 'F' AND l.WBC < 3.5;"
    },
    {
        "question_id": 1204,
        "answer_sql": ""
    },
    {
        "question_id": 1205,
        "answer_sql": "SELECT EXISTS( SELECT 1 FROM Examination JOIN Patient ON Examination.ID = Patient.ID JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Patient.SEX = 'M' AND Laboratory.UA > 8.0 AND Examination.ID = 57266 ) AS IsUricAcidNormal;"
    },
    {
        "question_id": 1206,
        "answer_sql": "SELECT Laboratory.Date FROM Laboratory JOIN Examination ON Laboratory.ID = Examination.ID WHERE Laboratory.GOT >= 60 AND Examination.ID = 48473;"
    },
    {
        "question_id": 1207,
        "answer_sql": ""
    },
    {
        "question_id": 1208,
        "answer_sql": "SELECT DISTINCT Examination.ID FROM Examination JOIN Patient ON Examination.ID = Patient.ID JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Patient.SEX = 'M' AND Laboratory.GPT >= 60;"
    },
    {
        "question_id": 1209,
        "answer_sql": "SELECT Patient.Birthday, Examination.Diagnosis FROM Examination JOIN Patient ON Examination.ID = Patient.ID JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Laboratory.GPT > 60 ORDER BY Patient.Birthday DESC;"
    },
    {
        "question_id": 1210,
        "answer_sql": "SELECT AVG(Laboratory.LDH) AS Average_LDH FROM Laboratory JOIN Examination ON Laboratory.ID = Examination.ID WHERE Laboratory.LDH < 500;"
    },
    {
        "question_id": 1211,
        "answer_sql": "SELECT Patient.ID, (strftime('%Y', 'now') - strftime('%Y', Patient.Birthday)) AS Age FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.LDH BETWEEN 600 AND 800"
    },
    {
        "question_id": 1212,
        "answer_sql": "SELECT Patient.Admission, COUNT(*) AS NumberOfPatients FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.ALP < 300 AND Patient.Admission = '+' GROUP BY Patient.Admission;"
    },
    {
        "question_id": 1213,
        "answer_sql": "SELECT Patient.ID FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.Birthday = '1982-04-01' AND Laboratory.ALP < 300;"
    },
    {
        "question_id": 1214,
        "answer_sql": "SELECT Patient.ID, Patient.SEX, Patient.Birthday FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.TP < 6.0;"
    },
    {
        "question_id": 1215,
        "answer_sql": "SELECT Patient.SEX, (Laboratory.TP - 8.5) AS TP_Deviation FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.SEX = 'F' AND Laboratory.TP > 8.5;"
    },
    {
        "question_id": 1216,
        "answer_sql": "SELECT Patient.Birthday FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.SEX = 'M' AND (Laboratory.ALB <= 3.5 OR Laboratory.ALB >= 5.5) ORDER BY Patient.Birthday DESC;"
    },
    {
        "question_id": 1217,
        "answer_sql": " SELECT Patient.ID, Laboratory.ALB FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE strftime('%Y', Patient.Birthday) = '1982' AND Laboratory.ALB BETWEEN 3.5 AND 5.5;"
    },
    {
        "question_id": 1218,
        "answer_sql": " SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Patient WHERE SEX = 'F')) AS percentage_female_with_high_UA FROM Laboratory JOIN Patient ON Laboratory.ID = Patient.ID WHERE (Laboratory.UA > 8.0 OR (Patient.SEX = 'F' AND Laboratory.UA > 6.5));"
    },
    {
        "question_id": 1219,
        "answer_sql": "SELECT AVG(Laboratory.UA) AS AverageUAIndex FROM Laboratory JOIN Examination ON Laboratory.ID = Examination.ID JOIN Patient ON Patient.ID = Examination.ID WHERE (Laboratory.UA < 8.0 AND Patient.SEX = 'M') OR (Laboratory.UA < 6.5 AND Patient.SEX = 'F') AND Laboratory.Date = (SELECT MAX(Date) FROM Laboratory AS Lab WHERE Lab.ID = Laboratory.ID);"
    },
    {
        "question_id": 1220,
        "answer_sql": "SELECT Patient.ID, Patient.SEX, Patient.Birthday FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.UN = 29;"
    },
    {
        "question_id": 1221,
        "answer_sql": " SELECT Patient.ID, Patient.SEX, Patient.Birthday FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.Diagnosis = 'RA' AND Examination.Thrombosis < 30;"
    },
    {
        "question_id": 1222,
        "answer_sql": "SELECT COUNT(*) AS NumberOfMalePatientsWithHighCreatinine FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.SEX = 'M' AND l.CRE >= 1.5;"
    },
    {
        "question_id": 1223,
        "answer_sql": "SELECT (SUM(CASE WHEN Sex = 'M' THEN 1 ELSE 0 END) > SUM(CASE WHEN Sex = 'F' THEN 1 ELSE 0 END)) AS more_males_than_females FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.CRE >= 1.5;"
    },
    {
        "question_id": 1224,
        "answer_sql": ""
    },
    {
        "question_id": 1225,
        "answer_sql": ""
    },
    {
        "question_id": 1226,
        "answer_sql": ""
    },
    {
        "question_id": 1227,
        "answer_sql": ""
    },
    {
        "question_id": 1228,
        "answer_sql": "SELECT Patient.ID, Patient.Diagnosis FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.TG > 300;"
    },
    {
        "question_id": 1229,
        "answer_sql": ""
    },
    {
        "question_id": 1230,
        "answer_sql": " SELECT DISTINCT Examination.ID FROM Examination JOIN Laboratory ON Examination.ID = Laboratory.ID JOIN Patient ON Examination.ID = Patient.ID WHERE Laboratory.CPK < 250 AND Patient.Admission = '-';"
    },
    {
        "question_id": 1231,
        "answer_sql": "SELECT COUNT(*) AS NumberOfPatients FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.SEX = 'M' AND p.Birthday BETWEEN '1936' AND '1956' AND l.CPK >= 250;"
    },
    {
        "question_id": 1232,
        "answer_sql": ""
    },
    {
        "question_id": 1233,
        "answer_sql": "SELECT Patient.ID, Laboratory.GLU FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.GLU < 180 AND strftime('%Y', Patient.Description) > '1991';"
    },
    {
        "question_id": 1234,
        "answer_sql": "SELECT Patient.ID, Patient.SEX, Patient.Birthday FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE (Laboratory.WBC <= 3.5 OR Laboratory.WBC >= 9.0) GROUP BY Patient.SEX ORDER BY Patient.Birthday ASC;"
    },
    {
        "question_id": 1235,
        "answer_sql": ""
    },
    {
        "question_id": 1236,
        "answer_sql": ""
    },
    {
        "question_id": 1237,
        "answer_sql": "SELECT Patient.ID, Patient.SEX FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.Admission = '-' AND Laboratory.HGB < 10;"
    },
    {
        "question_id": 1238,
        "answer_sql": "SELECT Patient.ID, Patient.SEX FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Examination.Diagnosis = 'SLE' AND Laboratory.HGB BETWEEN 10 AND 17 ORDER BY Patient.Birthday ASC LIMIT 1;"
    },
    {
        "question_id": 1239,
        "answer_sql": ""
    },
    {
        "question_id": 1240,
        "answer_sql": "SELECT AVG(HCT) AS AverageHematocrit FROM Laboratory WHERE Date LIKE '1991%' AND HCT < 29;"
    },
    {
        "question_id": 1241,
        "answer_sql": "SELECT (SELECT COUNT(*) FROM Laboratory WHERE PLT < 100) AS LowerThanNormal, (SELECT COUNT(*) FROM Laboratory WHERE PLT > 400) AS HigherThanNormal, (SELECT COUNT(*) FROM Laboratory WHERE PLT < 100) - (SELECT COUNT(*) FROM Laboratory WHERE PLT > 400) AS Difference"
    },
    {
        "question_id": 1242,
        "answer_sql": ""
    },
    {
        "question_id": 1243,
        "answer_sql": "SELECT (SUM(CASE WHEN PT >= 14 AND SEX = 'F' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS percentage_female_abnormal_pt FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE (strftime('%Y', 'now') - strftime('%Y', p.Birthday)) > 55;"
    },
    {
        "question_id": 1244,
        "answer_sql": ""
    },
    {
        "question_id": 1245,
        "answer_sql": " SELECT COUNT(*) AS NumberOfExaminations FROM Examination e\nJOIN Laboratory l ON e.ID = l.ID\nWHERE e.`Examination Date` > '1997-01-01' AND l.APTT < 45;"
    },
    {
        "question_id": 1246,
        "answer_sql": "SELECT COUNT(DISTINCT Examination.ID) AS MildThrombosisCount FROM Examination JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Laboratory.APTT > 45 AND Examination.Thrombosis = 3;"
    },
    {
        "question_id": 1247,
        "answer_sql": "SELECT COUNT(DISTINCT Laboratory.ID) AS NumberOfPatients FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.SEX = 'M' AND Laboratory.WBC BETWEEN 3.5 AND 9.0 AND (Laboratory.FG <= 150 OR Laboratory.FG >= 450);"
    },
    {
        "question_id": 1248,
        "answer_sql": "SELECT COUNT(DISTINCT Patient.ID) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.Birthday > '1980-01-01' AND Laboratory.FG BETWEEN 150 AND 450;"
    },
    {
        "question_id": 1249,
        "answer_sql": "SELECT DISTINCT Patient.Diagnosis FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.`U-PRO` >= 30;"
    },
    {
        "question_id": 1250,
        "answer_sql": ""
    },
    {
        "question_id": 1251,
        "answer_sql": "SELECT COUNT(*) FROM Examination e JOIN Laboratory l ON e.ID = l.ID WHERE l.IGG < 900 AND e.Symptoms = 'abortion';"
    },
    {
        "question_id": 1252,
        "answer_sql": "SELECT COUNT(*) AS NumberOfPatientsWithSymptoms FROM Examination JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Laboratory.IGG BETWEEN 900 AND 2000 AND Examination.Symptoms IS NOT NULL;"
    },
    {
        "question_id": 1253,
        "answer_sql": "SELECT Patient.Diagnosis FROM Patient JOIN ( SELECT ID, MAX(IGA) AS MaxIgA FROM Laboratory WHERE IGA BETWEEN 80 AND 500 GROUP BY ID ) AS MaxIgAResults ON Patient.ID = MaxIgAResults.ID WHERE Patient.Diagnosis IS NOT NULL;"
    },
    {
        "question_id": 1254,
        "answer_sql": ""
    },
    {
        "question_id": 1255,
        "answer_sql": "SELECT Diagnosis, COUNT(*) as frequency FROM Examination JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE IGM NOT BETWEEN 40 AND 400 GROUP BY Diagnosis ORDER BY frequency DESC LIMIT 1;"
    },
    {
        "question_id": 1256,
        "answer_sql": "SELECT COUNT(*) AS NumberOfPatients FROM Patient WHERE Description IS NULL AND ID NOT IN ( SELECT DISTINCT Patient.ID FROM Laboratory WHERE (CRP LIKE '+' OR CRP LIKE '-' OR CRP < 1.0) );"
    },
    {
        "question_id": 1257,
        "answer_sql": ""
    },
    {
        "question_id": 1258,
        "answer_sql": ""
    },
    {
        "question_id": 1259,
        "answer_sql": ""
    },
    {
        "question_id": 1260,
        "answer_sql": ""
    },
    {
        "question_id": 1261,
        "answer_sql": "SELECT COUNT(*) AS NumberOfPatients FROM Patient p JOIN Examination e ON p.ID = e.ID JOIN Laboratory l ON p.ID = l.ID WHERE l.RF < 20 AND e.Thrombosis = '0';"
    },
    {
        "question_id": 1262,
        "answer_sql": ""
    },
    {
        "question_id": 1263,
        "answer_sql": ""
    },
    {
        "question_id": 1264,
        "answer_sql": "SELECT COUNT(DISTINCT Patient.ID) FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Examination.Thrombosis = 1 AND Laboratory.C4 > 10;"
    },
    {
        "question_id": 1265,
        "answer_sql": "SELECT COUNT(DISTINCT Patient.ID) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.RNP = '-' OR Laboratory.RNP = '+-' AND Patient.Admission = '+';"
    },
    {
        "question_id": 1266,
        "answer_sql": "SELECT Patient.Birthday FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.RNP NOT IN ('-', '+-') GROUP BY Patient.ID ORDER BY Patient.Birthday ASC LIMIT 1;"
    },
    {
        "question_id": 1267,
        "answer_sql": " SELECT COUNT(*) FROM Examination e\nJOIN Laboratory l ON e.ID = l.ID\nWHERE l.SM IN('-', '+-') AND e.Thrombosis = 1\nORDER BY e.Thrombosis DESC LIMIT 1;"
    },
    {
        "question_id": 1268,
        "answer_sql": "SELECT Patient.ID FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.SM NOT IN('-', '+-') GROUP BY Patient.ID ORDER BY Patient.Birthday DESC LIMIT 3;"
    },
    {
        "question_id": 1269,
        "answer_sql": ""
    },
    {
        "question_id": 1270,
        "answer_sql": "SELECT COUNT(DISTINCT Examination.ID) AS NumberOfPatients FROM Examination JOIN Patient ON Examination.ID = Patient.ID JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Laboratory.SC170 IN ('-', '+-') AND Patient.SEX = 'M' AND Examination.Symptoms LIKE '%vertigo%';"
    },
    {
        "question_id": 1271,
        "answer_sql": ""
    },
    {
        "question_id": 1272,
        "answer_sql": " SELECT Patient.ID\nFROM Patient\nJOIN Examination ON Patient.ID = Examination.ID\nJOIN Laboratory ON Patient.ID = Laboratory.ID\nWHERE Laboratory.SSA NOT IN('-', '+-')\nGROUP BY Patient.ID\nORDER BY MIN(Examination.`Examination Date`)\nLIMIT 1;"
    },
    {
        "question_id": 1273,
        "answer_sql": "SELECT COUNT(DISTINCT Examination.ID) AS NumberOfPatients FROM Examination JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Laboratory.SSB IN ('-', '+-') AND Examination.Diagnosis = 'SLE';"
    },
    {
        "question_id": 1274,
        "answer_sql": "SELECT COUNT(DISTINCT Examination.ID) AS PatientsWithOtherSymptoms FROM Examination JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Laboratory.SSB IN ('-', '+-') AND Examination.Symptoms IS NOT NULL;"
    },
    {
        "question_id": 1275,
        "answer_sql": "SELECT COUNT(*) AS MalePatientsWithNormalLevels FROM Patient p JOIN Examination e ON p.ID = e.ID JOIN Laboratory l ON p.ID = l.ID WHERE l.CENTROMEA IN ('-', '+-') AND l.SSB IN ('-', '+-') AND p.SEX = 'M';"
    },
    {
        "question_id": 1276,
        "answer_sql": ""
    },
    {
        "question_id": 1277,
        "answer_sql": " SELECT COUNT(DISTINCT Patient.ID) AS UnrecordedPatientsWithNormalAntiDNA FROM Patient LEFT JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.DNA < 8 AND Patient.Description IS NULL;"
    },
    {
        "question_id": 1278,
        "answer_sql": ""
    },
    {
        "question_id": 1279,
        "answer_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Laboratory WHERE GOT >= 60)) AS percentage FROM Laboratory JOIN Examination ON Laboratory.ID = Examination.ID WHERE Examination.Diagnosis = 'SLE' AND Laboratory.GOT >= 60;"
    },
    {
        "question_id": 1280,
        "answer_sql": "SELECT COUNT(*) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.SEX = 'M' AND l.GOT < 60;"
    },
    {
        "question_id": 1281,
        "answer_sql": "SELECT MIN(Birthday) AS YoungestBirthday FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE GOT >= 60;"
    },
    {
        "question_id": 1282,
        "answer_sql": "SELECT Patient.Birthday FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.GPT < 60 ORDER BY Laboratory.GPT DESC LIMIT 3;"
    },
    {
        "question_id": 1283,
        "answer_sql": "SELECT COUNT(*) AS MalePatientsWithNormalGOT FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.GOT < 60 AND p.SEX = 'M';"
    },
    {
        "question_id": 1284,
        "answer_sql": " SELECT Patient.ID, MIN(Laboratory.Date) AS FirstRecordedDate\nFROM Patient\nJOIN Laboratory ON Patient.ID = Laboratory.ID\nWHERE Laboratory.LDH < 500\nGROUP BY Patient.ID\nORDER BY Laboratory.LDH DESC\nLIMIT 1;"
    },
    {
        "question_id": 1285,
        "answer_sql": "SELECT MAX(`Examination Date`) AS LatestExaminationDate FROM Examination JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Laboratory.LDH >= 500;"
    },
    {
        "question_id": 1286,
        "answer_sql": "SELECT COUNT(*) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE ALP >= 300 AND Admission = '+';"
    },
    {
        "question_id": 1287,
        "answer_sql": "SELECT COUNT(*) AS NumberOfPatientsWithNormalALP FROM Laboratory JOIN Patient ON Laboratory.ID = Patient.ID WHERE Patient.Admission = '-' AND Laboratory.ALP < 300;"
    },
    {
        "question_id": 1288,
        "answer_sql": "SELECT DISTINCT Patient.Diagnosis FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.TP < 6.0;"
    },
    {
        "question_id": 1289,
        "answer_sql": "SELECT COUNT(*) FROM Examination e JOIN Patient p ON e.ID = p.ID JOIN Laboratory l ON e.ID = l.ID WHERE p.Diagnosis = 'SJS' AND l.TP BETWEEN 6.0 AND 8.5;"
    },
    {
        "question_id": 1290,
        "answer_sql": ""
    },
    {
        "question_id": 1291,
        "answer_sql": "SELECT COUNT(*) AS NumberOfMalePatients FROM Patient p JOIN Examination e ON p.ID = e.ID JOIN Laboratory l ON p.ID = l.ID WHERE p.SEX = 'M' AND l.ALB > 3.5 AND l.ALB < 5.5 AND l.TP BETWEEN 6.0 AND 8.5;"
    },
    {
        "question_id": 1292,
        "answer_sql": ""
    },
    {
        "question_id": 1293,
        "answer_sql": "SELECT MAX(Examination.ANA) AS Highest_ANA_Level FROM Examination JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Laboratory.CRE < 1.5;"
    },
    {
        "question_id": 1294,
        "answer_sql": ""
    },
    {
        "question_id": 1295,
        "answer_sql": ""
    },
    {
        "question_id": 1296,
        "answer_sql": ""
    },
    {
        "question_id": 1297,
        "answer_sql": "SELECT COUNT(*) FROM Examination e JOIN Laboratory l ON e.ID = l.ID WHERE l.`T-CHO` >= 250 AND e.KCT = '-';"
    },
    {
        "question_id": 1298,
        "answer_sql": ""
    },
    {
        "question_id": 1299,
        "answer_sql": "SELECT COUNT(*) AS NumberOfPatientsWithNormalTGAndOtherSymptoms FROM Examination e JOIN Laboratory l ON e.ID = l.ID WHERE l.TG < 200 AND e.Symptoms IS NOT NULL;"
    },
    {
        "question_id": 1300,
        "answer_sql": "SELECT Patient.Diagnosis FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.TG < 200 ORDER BY Laboratory.TG DESC LIMIT 1;"
    },
    {
        "question_id": 1301,
        "answer_sql": "SELECT DISTINCT Examination.ID FROM Examination JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Examination.Thrombosis = 0 AND Laboratory.CPK < 250;"
    },
    {
        "question_id": 1302,
        "answer_sql": "SELECT COUNT(*) FROM Laboratory JOIN Examination ON Laboratory.ID = Examination.ID WHERE CPK < 250 AND (KCT = '+' OR RVVT = '+' OR LAC = '+');"
    },
    {
        "question_id": 1303,
        "answer_sql": "SELECT MIN(Patient.Birthday) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.GLU > 180;"
    },
    {
        "question_id": 1304,
        "answer_sql": "SELECT COUNT(*) FROM Examination e JOIN Laboratory l ON e.ID = l.ID WHERE l.GLU < 180 AND e.Thrombosis = 0;"
    },
    {
        "question_id": 1305,
        "answer_sql": "SELECT COUNT(*) AS NumberOfPatients FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID JOIN Examination ON Patient.ID = Examination.ID WHERE Patient.Admission = '+';"
    },
    {
        "question_id": 1306,
        "answer_sql": "SELECT COUNT(*) AS NumberOfPatients FROM Examination JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Examination.Diagnosis = 'SLE' AND Laboratory.WBC BETWEEN 3.5 AND 9.0;"
    },
    {
        "question_id": 1307,
        "answer_sql": "SELECT DISTINCT Patient.ID FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE (Laboratory.RBC <= 3.5 OR Laboratory.RBC >= 6.0) AND Patient.Admission = '-';"
    },
    {
        "question_id": 1308,
        "answer_sql": "SELECT COUNT(*) AS NumberOfPatientsWithOtherSymptoms FROM Examination e JOIN Laboratory l ON e.ID = l.ID WHERE l.PLT > 100 AND l.PLT < 400 AND e.Diagnosis IS NOT NULL;"
    },
    {
        "question_id": 1309,
        "answer_sql": "SELECT Patient.ID, Laboratory.PLT FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.PLT BETWEEN 100 AND 400 AND Patient.Diagnosis = 'MCTD';"
    },
    {
        "question_id": 1310,
        "answer_sql": "SELECT AVG(Laboratory.PT) AS AveragePT FROM Laboratory JOIN Examination ON Laboratory.ID = Examination.ID JOIN Patient ON Examination.ID = Patient.ID WHERE Patient.SEX = 'M' AND Laboratory.PT < 14;"
    },
    {
        "question_id": 1311,
        "answer_sql": "SELECT COUNT(*) AS NumberOfPatients FROM Examination JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Examination.Thrombosis IN (2, 1) AND Laboratory.PT < 14;"
    },
    {
        "question_id": 1312,
        "answer_sql": "SELECT major_name FROM major WHERE major_id = ( SELECT link_to_major FROM member WHERE first_name = 'Angela' AND last_name = 'Sanders' );"
    },
    {
        "question_id": 1313,
        "answer_sql": "SELECT COUNT(DISTINCT member.member_id) FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'Engineering' AND major.college = 'College of Engineering';"
    },
    {
        "question_id": 1314,
        "answer_sql": ""
    },
    {
        "question_id": 1315,
        "answer_sql": "SELECT COUNT(DISTINCT attendance.link_to_member) AS num_students_attended FROM attendance JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer';"
    },
    {
        "question_id": 1316,
        "answer_sql": "SELECT member.phone FROM member JOIN attendance ON member.member_id = attendance.link_to_member JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer';"
    },
    {
        "question_id": 1317,
        "answer_sql": "SELECT COUNT(*) FROM member JOIN attendance ON member.member_id = attendance.link_to_member JOIN event ON attendance.link_to_event = event.event_id JOIN income ON member.member_id = income.link_to_member WHERE event.event_name = 'Women''s Soccer' AND member.t_shirt_size = 'Medium';"
    },
    {
        "question_id": 1318,
        "answer_sql": "SELECT event.event_name FROM event JOIN attendance ON event.event_id = attendance.link_to_event JOIN member ON attendance.link_to_member = member.member_id JOIN major ON member.link_to_major = major.major_id GROUP BY event.event_id ORDER BY COUNT(attendance.link_to_event) DESC LIMIT 1;"
    },
    {
        "question_id": 1319,
        "answer_sql": " SELECT ma.college FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE m.position = 'Vice President';"
    },
    {
        "question_id": 1320,
        "answer_sql": "SELECT event.event_name FROM event JOIN attendance ON event.event_id = attendance.link_to_event JOIN member ON attendance.link_to_member = member.member_id WHERE member.first_name = 'Maya' AND member.last_name = 'Mclean';"
    },
    {
        "question_id": 1321,
        "answer_sql": " SELECT COUNT(*) AS events_attended FROM attendance JOIN member ON attendance.link_to_member = member.member_id JOIN event ON attendance.link_to_event = event.event_id WHERE member.first_name = 'Sacha' AND member.last_name = 'Harrison' AND event.event_date LIKE '2019%';"
    },
    {
        "question_id": 1322,
        "answer_sql": "SELECT COUNT(*) AS num_meetings FROM event JOIN ( SELECT link_to_event FROM attendance GROUP BY link_to_event HAVING COUNT(link_to_member) > 10 ) AS attended_events ON event.event_id = attended_events.link_to_event WHERE event.type = 'Meeting';"
    },
    {
        "question_id": 1323,
        "answer_sql": "SELECT event.event_name FROM event JOIN ( SELECT link_to_event, COUNT(*) as attendance_count FROM attendance GROUP BY link_to_event HAVING COUNT(*) > 20 ) AS subquery ON event.event_id = subquery.link_to_event;"
    },
    {
        "question_id": 1324,
        "answer_sql": "SELECT AVG(attendance_count) AS average_attendance FROM ( SELECT COUNT(event_id) AS attendance_count FROM attendance JOIN event ON attendance.link_to_event = event.event_id WHERE type = 'Meeting' AND strftime('%Y', event_date) = '2020' GROUP BY event_id ) AS subquery;"
    },
    {
        "question_id": 1325,
        "answer_sql": ""
    },
    {
        "question_id": 1326,
        "answer_sql": "SELECT COUNT(*) FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Environmental Engineering';"
    },
    {
        "question_id": 1327,
        "answer_sql": "SELECT member.first_name, member.last_name FROM member JOIN attendance ON member.member_id = attendance.link_to_member JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Laugh Out Loud';"
    },
    {
        "question_id": 1328,
        "answer_sql": "SELECT last_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Law and Constitutional Studies';"
    },
    {
        "question_id": 1329,
        "answer_sql": "SELECT m.zip, z.county FROM member m JOIN zip_code z ON m.zip = z.zip_code WHERE m.first_name = 'Sherri' AND m.last_name = 'Ramsey';"
    },
    {
        "question_id": 1330,
        "answer_sql": "SELECT major.college FROM major JOIN member ON member.link_to_major = major.major_id WHERE member.first_name = 'Tyler' AND member.last_name = 'Hewitt';"
    },
    {
        "question_id": 1331,
        "answer_sql": "SELECT amount FROM income JOIN member ON income.link_to_member = member.member_id WHERE position = 'Vice President';"
    },
    {
        "question_id": 1332,
        "answer_sql": "SELECT SUM(b.spent) AS total_spent_on_food FROM budget b JOIN expense e ON b.budget_id = e.link_to_budget WHERE b.category = 'Food' AND e.expense_date BETWEEN '2023-09-01' AND '2023-09-30';"
    },
    {
        "question_id": 1333,
        "answer_sql": "SELECT m.first_name, m.last_name, z.city, z.state FROM member m JOIN zip_code z ON m.zip = z.zip_code JOIN ( SELECT member_id FROM member WHERE position = 'President' ) p ON m.member_id = p.member_id;"
    },
    {
        "question_id": 1334,
        "answer_sql": "SELECT first_name || ' ' || last_name AS full_name FROM member WHERE zip IN (SELECT zip_code FROM zip_code WHERE state = 'Illinois');"
    },
    {
        "question_id": 1335,
        "answer_sql": "SELECT SUM(b.spent) AS total_spent FROM budget b JOIN event e ON b.link_to_event = e.event_id WHERE b.category = 'Advertisement' AND e.event_name = 'September Meeting';"
    },
    {
        "question_id": 1336,
        "answer_sql": ""
    },
    {
        "question_id": 1337,
        "answer_sql": "SELECT SUM(budget.amount) AS total_budgeted_amount FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'October Speaker';"
    },
    {
        "question_id": 1338,
        "answer_sql": "SELECT COUNT(*) FROM expense JOIN event ON expense.link_to_budget = event.event_id WHERE expense.approved = 'True' AND event.event_name = 'October Meeting' AND event.event_date = '2019-10-08';"
    },
    {
        "question_id": 1339,
        "answer_sql": "SELECT AVG(cost) AS average_cost FROM expense JOIN member ON expense.link_to_member = member.member_id WHERE member.first_name = 'Elijah' AND (strftime('%m', expense_date) = '09' OR strftime('%m', expense_date) = '10');"
    },
    {
        "question_id": 1340,
        "answer_sql": " SELECT (SELECT SUM(spent) FROM budget WHERE link_to_event IN (SELECT event_id FROM event WHERE strftime('%Y', event_date) = '2019')) - (SELECT SUM(spent) FROM budget WHERE link_to_event IN (SELECT event_id FROM event WHERE strftime('%Y', event_date) = '2020')) AS difference;"
    },
    {
        "question_id": 1341,
        "answer_sql": "SELECT location FROM event WHERE event_name = 'Spring Budget Review';"
    },
    {
        "question_id": 1342,
        "answer_sql": "SELECT cost FROM expense WHERE expense_description = 'Posters' AND expense_date = '2019-09-04';"
    },
    {
        "question_id": 1343,
        "answer_sql": "SELECT MAX(remaining) AS largest_remaining FROM budget WHERE category = 'Food';"
    },
    {
        "question_id": 1344,
        "answer_sql": "SELECT notes FROM income WHERE source = 'Fundraising' AND date_received = '2019-09-14';"
    },
    {
        "question_id": 1345,
        "answer_sql": "SELECT COUNT(*) AS number_of_majors FROM major WHERE college = 'College of Humanities and Social Sciences';"
    },
    {
        "question_id": 1346,
        "answer_sql": "SELECT phone FROM member WHERE first_name = 'Carlo' AND last_name = 'Jacobs';"
    },
    {
        "question_id": 1347,
        "answer_sql": "SELECT county FROM zip_code JOIN member ON member.zip = zip_code.zip_code WHERE first_name = 'Adela' AND last_name = 'O''Gallagher';"
    },
    {
        "question_id": 1348,
        "answer_sql": "SELECT COUNT(*) AS exceeded_budgets FROM budget WHERE link_to_event = (SELECT event_id FROM event WHERE event_name = 'November Meeting') AND remaining < 0;"
    },
    {
        "question_id": 1349,
        "answer_sql": "SELECT SUM(budget.amount) AS total_budget_amount FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'September Speaker';"
    },
    {
        "question_id": 1350,
        "answer_sql": ""
    },
    {
        "question_id": 1351,
        "answer_sql": "SELECT major_name FROM major WHERE major_id = ( SELECT link_to_major FROM member WHERE first_name = 'Brent' AND last_name = 'Thomason' );"
    },
    {
        "question_id": 1352,
        "answer_sql": "SELECT COUNT(*) AS num_members FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Human Development and Family Studies' AND member.t_shirt_size = 'Large';"
    },
    {
        "question_id": 1353,
        "answer_sql": ""
    },
    {
        "question_id": 1354,
        "answer_sql": "SELECT major_name FROM major JOIN member ON major.major_id = member.link_to_major WHERE position = 'Vice President';"
    },
    {
        "question_id": 1355,
        "answer_sql": "SELECT m.zip, z.state FROM member m JOIN zip_code z ON m.zip = z.zip_code WHERE m.first_name = 'Sacha' AND m.last_name = 'Harrison';"
    },
    {
        "question_id": 1356,
        "answer_sql": "SELECT department FROM major JOIN member ON major.major_id = member.link_to_major WHERE member.position = 'President';"
    },
    {
        "question_id": 1357,
        "answer_sql": "SELECT date_received FROM income WHERE source = 'Dues' AND link_to_member = (SELECT member_id FROM member WHERE first_name = 'Connor' AND last_name = 'Hilton');"
    },
    {
        "question_id": 1358,
        "answer_sql": "SELECT member.first_name || ' ' || member.last_name AS full_name FROM member JOIN income ON member.member_id = income.link_to_member WHERE income.source = 'Dues' ORDER BY income.date_received ASC LIMIT 1;"
    },
    {
        "question_id": 1359,
        "answer_sql": "SELECT (SUM(CASE WHEN b.category = 'Advertisement' AND e.event_name = 'Yearly Kickoff' THEN b.amount ELSE 0 END) / SUM(CASE WHEN e.event_name = 'October Meeting' AND b.category = 'Advertisement' THEN b.amount ELSE 0 END)) AS ratio FROM budget b JOIN event e ON b.link_to_event = e.event_id WHERE b.category = 'Advertisement';"
    },
    {
        "question_id": 1360,
        "answer_sql": "SELECT ROUND( (SUM(CASE WHEN category = 'Parking' THEN amount ELSE 0 END) / SUM(CASE WHEN event_name = 'November Speaker' THEN amount ELSE 0 END)) * 100, 2 ) AS percentage FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'November Speaker';"
    },
    {
        "question_id": 1361,
        "answer_sql": "SELECT SUM(e.cost) AS total_pizza_cost FROM expense e JOIN budget b ON e.link_to_budget = b.budget_id WHERE e.expense_description = 'Pizza';"
    },
    {
        "question_id": 1362,
        "answer_sql": "SELECT COUNT(DISTINCT city) FROM zip_code WHERE county = 'Orange County' AND state = 'Virginia';"
    },
    {
        "question_id": 1363,
        "answer_sql": "SELECT department FROM major WHERE college = 'College of Humanities and Social Sciences';"
    },
    {
        "question_id": 1364,
        "answer_sql": "SELECT city, county, state FROM zip_code JOIN member ON member.zip = zip_code.zip_code WHERE member.first_name = 'Amy' AND member.last_name = 'Firth';"
    },
    {
        "question_id": 1365,
        "answer_sql": "SELECT expense_description FROM expense JOIN budget ON expense.link_to_budget = budget.budget_id WHERE budget.remaining = (SELECT MIN(remaining) FROM budget);"
    },
    {
        "question_id": 1366,
        "answer_sql": "SELECT m.first_name, m.last_name FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE e.event_name = 'October Meeting';"
    },
    {
        "question_id": 1367,
        "answer_sql": "SELECT major.college FROM member JOIN major ON member.link_to_major = major.major_id GROUP BY major.college ORDER BY COUNT(*) DESC LIMIT 1;"
    },
    {
        "question_id": 1368,
        "answer_sql": "SELECT major.major_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.phone = '809-555-3360';"
    },
    {
        "question_id": 1369,
        "answer_sql": "SELECT event.event_name, MAX(budget.amount) AS highest_budget_amount FROM event JOIN budget ON event.event_id = budget.link_to_event GROUP BY event.event_name ORDER BY highest_budget_amount DESC LIMIT 1;"
    },
    {
        "question_id": 1370,
        "answer_sql": "SELECT expense_description FROM expense JOIN member ON expense.link_to_member = member.member_id WHERE position = 'Vice President';"
    },
    {
        "question_id": 1371,
        "answer_sql": "SELECT COUNT(DISTINCT attendance.link_to_member) AS member_count FROM attendance JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer';"
    },
    {
        "question_id": 1372,
        "answer_sql": "SELECT income.date_received FROM income JOIN member ON member.member_id = income.link_to_member WHERE member.first_name = 'Casey' AND member.last_name = 'Mason';"
    },
    {
        "question_id": 1373,
        "answer_sql": " SELECT COUNT(*) AS num_members_from_maryland FROM member JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.state = 'Maryland';"
    },
    {
        "question_id": 1374,
        "answer_sql": "SELECT COUNT(*) AS attended_events_count FROM attendance JOIN member ON attendance.link_to_member = member.member_id WHERE member.phone = '954-555-6240';"
    },
    {
        "question_id": 1375,
        "answer_sql": "SELECT first_name, last_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'School of Applied Sciences, Technology and Education';"
    },
    {
        "question_id": 1376,
        "answer_sql": "SELECT event.event_name, MAX(spent / amount) AS highest_spend_to_budget_ratio FROM event JOIN budget ON event.event_id = budget.link_to_event WHERE event.status = 'Closed' GROUP BY event.event_id ORDER BY highest_spend_to_budget_ratio DESC LIMIT 1;"
    },
    {
        "question_id": 1377,
        "answer_sql": "SELECT COUNT(*) FROM member WHERE position = 'President';"
    },
    {
        "question_id": 1378,
        "answer_sql": "SELECT MAX(spent) AS highest_spent FROM budget;"
    },
    {
        "question_id": 1379,
        "answer_sql": "SELECT COUNT(*) AS NumberOfMeetings FROM event WHERE type = 'Meeting' AND strftime('%Y', event_date) = '2020';"
    },
    {
        "question_id": 1380,
        "answer_sql": "SELECT SUM(spent) AS total_spent_on_food FROM budget WHERE category = 'Food';"
    },
    {
        "question_id": 1381,
        "answer_sql": "SELECT first_name || ' ' || last_name AS full_name FROM member JOIN attendance ON member.member_id = attendance.link_to_member GROUP BY member.member_id HAVING COUNT(attendance.link_to_event) > 7;"
    },
    {
        "question_id": 1382,
        "answer_sql": "SELECT DISTINCT m.first_name, m.last_name FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id JOIN major ma ON m.link_to_major = ma.major_id WHERE ma.major_name = 'Interior Design' AND e.event_name = 'Community Theater';"
    },
    {
        "question_id": 1383,
        "answer_sql": "SELECT first_name, last_name FROM member JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.state = 'South Carolina' AND zip_code.city = 'Georgetown';"
    },
    {
        "question_id": 1384,
        "answer_sql": "SELECT COUNT(*) FROM income JOIN member ON income.link_to_member = member.member_id WHERE member.first_name = 'Grant' AND member.last_name = 'Gilmour';"
    },
    {
        "question_id": 1385,
        "answer_sql": " SELECT first_name, last_name FROM member WHERE member_id IN (SELECT member_id FROM income WHERE amount > 40);"
    },
    {
        "question_id": 1386,
        "answer_sql": "SELECT SUM(e.cost) AS total_expense FROM expense e JOIN attendance a ON e.link_to_member = a.link_to_event JOIN event ev ON a.link_to_event = ev.event_id WHERE ev.event_name = 'Yearly Kickoff';"
    },
    {
        "question_id": 1387,
        "answer_sql": "SELECT member.first_name, member.last_name FROM member JOIN attendance ON member.member_id = attendance.link_to_member JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Yearly Kickoff' AND attendance.link_to_event = ( SELECT event_id FROM event WHERE event_name = 'Yearly Kickoff' LIMIT 1 );"
    },
    {
        "question_id": 1388,
        "answer_sql": "SELECT member.first_name || ' ' || member.last_name AS full_name, income.source, MAX(income.amount) AS highest_income FROM income JOIN member ON income.link_to_member = member.member_id GROUP BY member.member_id ORDER BY highest_income DESC LIMIT 1;"
    },
    {
        "question_id": 1389,
        "answer_sql": ""
    },
    {
        "question_id": 1390,
        "answer_sql": "SELECT (SUM(cost) / (SELECT SUM(cost) FROM expense WHERE event_name = 'Yearly Kickoff')) * 100 AS percentage FROM expense JOIN attendance ON expense.link_to_member = attendance.link_to_member JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Yearly Kickoff';"
    },
    {
        "question_id": 1391,
        "answer_sql": "SELECT CAST(SUM(CASE WHEN major_name = 'Finance' THEN 1 ELSE 0 END) AS REAL) / CAST(SUM(CASE WHEN major_name = 'Physics' THEN 1 ELSE 0 END) AS REAL) AS finance_to_physics_ratio FROM member JOIN major ON member.link_to_major = major.major_id;"
    },
    {
        "question_id": 1392,
        "answer_sql": "SELECT source, MAX(amount) as max_amount FROM income WHERE date_received BETWEEN '2019-09-01' AND '2019-09-30' GROUP BY source ORDER BY max_amount DESC LIMIT 1;"
    },
    {
        "question_id": 1393,
        "answer_sql": "SELECT first_name || ' ' || last_name AS full_name, email FROM member WHERE position = 'Secretary';"
    },
    {
        "question_id": 1394,
        "answer_sql": "SELECT COUNT(*) AS number_of_members FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Physics Teaching';"
    },
    {
        "question_id": 1395,
        "answer_sql": " SELECT COUNT(DISTINCT attendance.link_to_member) AS member_count FROM attendance JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Community Theater' AND strftime('%Y', event.event_date) = '2019';"
    },
    {
        "question_id": 1396,
        "answer_sql": "SELECT major.major_name, COUNT(attendance.link_to_event) AS events_attended FROM major JOIN member ON major.major_id = member.link_to_major JOIN attendance ON member.member_id = attendance.link_to_member WHERE member.first_name = 'Luisa' AND member.last_name = 'Guidi' GROUP BY major.major_id;"
    },
    {
        "question_id": 1397,
        "answer_sql": "SELECT AVG(spent) AS average_spent_on_food FROM budget WHERE category = 'Food' AND event_status = 'Closed';"
    },
    {
        "question_id": 1398,
        "answer_sql": "SELECT event.event_name FROM event JOIN budget ON event.event_id = budget.link_to_event WHERE budget.category = 'Advertisement' ORDER BY budget.spent DESC LIMIT 1;"
    },
    {
        "question_id": 1399,
        "answer_sql": "SELECT EXISTS( SELECT 1 FROM attendance JOIN member ON attendance.link_to_member = member.member_id JOIN event ON attendance.link_to_event = event.event_id WHERE member.first_name = 'Maya' AND member.last_name = 'Mclean' AND event.event_name = 'Women''s Soccer' ) AS attended;"
    },
    {
        "question_id": 1400,
        "answer_sql": "SELECT (SUM(CASE WHEN type = 'Community Service' THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS percentage_community_service_events FROM event WHERE event_date BETWEEN '2019-01-01' AND '2019-12-31';"
    },
    {
        "question_id": 1401,
        "answer_sql": " SELECT e.event_id, e.event_name, b.amount\nFROM event e\nJOIN budget b ON e.event_id = b.link_to_event\nJOIN expense ex ON b.budget_id = ex.link_to_budget\nWHERE ex.expense_description = 'Posters' AND e.event_name = 'September Speaker';"
    },
    {
        "question_id": 1402,
        "answer_sql": "SELECT t_shirt_size, COUNT(*) as order_count FROM member GROUP BY t_shirt_size ORDER BY order_count DESC LIMIT 1;"
    },
    {
        "question_id": 1403,
        "answer_sql": "SELECT event.event_name FROM event JOIN ( SELECT link_to_event, MIN(remaining) AS min_remaining FROM budget WHERE remaining < 0 GROUP BY link_to_event ) AS budget_exceeded ON event.event_id = budget_exceeded.link_to_event WHERE event.status = 'Closed' ORDER BY budget_exceeded.min_remaining ASC LIMIT 1;"
    },
    {
        "question_id": 1404,
        "answer_sql": ""
    },
    {
        "question_id": 1405,
        "answer_sql": "SELECT category, amount FROM budget WHERE link_to_event = ( SELECT event_id FROM event WHERE event_name = 'April Speaker' ) ORDER BY amount ASC;"
    },
    {
        "question_id": 1406,
        "answer_sql": " SELECT MAX(budget.amount) AS highest_food_budget FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE budget.category = 'Food';"
    },
    {
        "question_id": 1407,
        "answer_sql": "SELECT budget_id, category, amount FROM budget WHERE category = 'Advertisement' ORDER BY amount DESC LIMIT 3;"
    },
    {
        "question_id": 1408,
        "answer_sql": "SELECT SUM(e.cost) AS total_parking_cost FROM expense e JOIN budget b ON e.link_to_budget = b.budget_id WHERE e.expense_description = 'Parking' AND b.category = 'Parking';"
    },
    {
        "question_id": 1409,
        "answer_sql": "SELECT SUM(cost) AS total_expense FROM expense WHERE expense_date = '2019-08-20';"
    },
    {
        "question_id": 1410,
        "answer_sql": "SELECT m.first_name || ' ' || m.last_name AS full_name, SUM(e.cost) AS total_cost FROM member m JOIN expense e ON m.member_id = e.link_to_member WHERE m.member_id = 'rec4BLdZHS2Blfp4v' GROUP BY m.member_id;"
    },
    {
        "question_id": 1411,
        "answer_sql": "SELECT expense_description FROM expense JOIN member ON expense.link_to_member = member.member_id WHERE member.first_name = 'Sacha' AND member.last_name = 'Harrison';"
    },
    {
        "question_id": 1412,
        "answer_sql": "SELECT expense.expense_description FROM expense JOIN member ON expense.link_to_member = member.member_id WHERE member.t_shirt_size = 'X-Large';"
    },
    {
        "question_id": 1413,
        "answer_sql": "SELECT member.zip FROM member JOIN expense ON member.member_id = expense.link_to_member WHERE expense.cost < 50 GROUP BY member.zip;"
    },
    {
        "question_id": 1414,
        "answer_sql": "SELECT major.major_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Phillip' AND member.last_name = 'Cullen';"
    },
    {
        "question_id": 1415,
        "answer_sql": "SELECT position FROM member WHERE link_to_major = (SELECT major_id FROM major WHERE major_name = 'Business');"
    },
    {
        "question_id": 1416,
        "answer_sql": "SELECT COUNT(*) AS NumberOfMembers FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Business' AND member.t_shirt_size = 'Medium';"
    },
    {
        "question_id": 1417,
        "answer_sql": "SELECT event.event_name, event.type, budget.remaining FROM event JOIN budget ON event.event_id = budget.link_to_event WHERE budget.remaining > 30;"
    },
    {
        "question_id": 1418,
        "answer_sql": "SELECT DISTINCT type FROM event WHERE location = 'MU 215';"
    },
    {
        "question_id": 1419,
        "answer_sql": "SELECT category FROM budget WHERE link_to_event = ( SELECT event_id FROM event WHERE event_date = '2020-03-24T12:00:00' );"
    },
    {
        "question_id": 1420,
        "answer_sql": "SELECT major_name FROM major JOIN member ON member.link_to_major = major.major_id WHERE position = 'Vice President';"
    },
    {
        "question_id": 1421,
        "answer_sql": "SELECT (SUM(CASE WHEN position = 'Member' AND link_to_major = (SELECT major_id FROM major WHERE major_name = 'Mathematics') THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS percentage_mathematics_members FROM member;"
    },
    {
        "question_id": 1422,
        "answer_sql": "SELECT category FROM budget WHERE link_to_event = ( SELECT event_id FROM event WHERE location = 'MU 215' );"
    },
    {
        "question_id": 1423,
        "answer_sql": "SELECT COUNT(*) FROM income WHERE amount = 50;"
    },
    {
        "question_id": 1424,
        "answer_sql": "SELECT COUNT(*) FROM member WHERE position = 'Member' AND t_shirt_size = 'X-Large';"
    },
    {
        "question_id": 1425,
        "answer_sql": "SELECT COUNT(*) AS num_majors FROM major WHERE department = 'School of Applied Sciences, Technology and Education' AND college = 'College of Agriculture and Applied Sciences';"
    },
    {
        "question_id": 1426,
        "answer_sql": "SELECT m.last_name, m.link_to_major, md.major_name, md.department, md.college FROM member m JOIN major md ON m.link_to_major = md.major_id WHERE md.major_name = 'Environmental Engineering';"
    },
    {
        "question_id": 1427,
        "answer_sql": "SELECT DISTINCT b.category FROM budget b JOIN event e ON b.link_to_event = e.event_id WHERE e.location = 'MU 215' AND e.type = 'Guest Speaker' AND b.spent = 0;"
    },
    {
        "question_id": 1428,
        "answer_sql": "SELECT m.zip, z.state, z.city FROM member m JOIN zip_code z ON m.zip = z.zip_code JOIN major ma ON m.link_to_major = ma.major_id WHERE ma.department = 'Electrical and Computer Engineering Department' AND m.position = 'Member';"
    },
    {
        "question_id": 1429,
        "answer_sql": " SELECT event_name FROM event JOIN attendance ON event.event_id = attendance.link_to_event JOIN member ON attendance.link_to_member = member.member_id JOIN major ON member.link_to_major = major.major_id JOIN zip_code ON member.zip = zip_code.zip_code WHERE event.type = 'Social' AND member.position = 'Vice President' AND location = '900 E. Washington St.';"
    },
    {
        "question_id": 1430,
        "answer_sql": "SELECT m.last_name, m.position FROM member m JOIN expense e ON m.member_id = e.link_to_member WHERE e.expense_description = 'Pizza' AND e.expense_date = '2019-09-10';"
    },
    {
        "question_id": 1431,
        "answer_sql": "SELECT m.last_name FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE m.position = 'Member' AND e.event_name = 'Women''s Soccer';"
    },
    {
        "question_id": 1432,
        "answer_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM member WHERE t_shirt_size = 'Medium')) AS percentage FROM income WHERE amount = 50 AND link_to_member IN (SELECT member_id FROM member WHERE t_shirt_size = 'Medium');"
    },
    {
        "question_id": 1433,
        "answer_sql": "SELECT DISTINCT state, short_state FROM zip_code WHERE type = 'PO Box';"
    },
    {
        "question_id": 1434,
        "answer_sql": ""
    },
    {
        "question_id": 1435,
        "answer_sql": "SELECT event.event_name FROM event WHERE event.type = 'Game' AND event.status = 'Closed' AND event.event_date BETWEEN '2019-03-15' AND '2020-03-20';"
    },
    {
        "question_id": 1436,
        "answer_sql": " SELECT e.event_id, e.event_name\nFROM event e\nJOIN attendance a ON e.event_id = a.link_to_event\nJOIN member m ON a.link_to_member = m.member_id\nJOIN budget b ON e.event_id = b.link_to_event\nWHERE b.amount > 50;"
    },
    {
        "question_id": 1437,
        "answer_sql": "SELECT m.first_name, m.last_name, e.event_id FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id JOIN expense ex ON m.member_id = ex.link_to_member WHERE ex.approved = 'true' AND ex.expense_date BETWEEN '2019-01-10' AND '2019-11-19'"
    },
    {
        "question_id": 1438,
        "answer_sql": " SELECT college FROM member JOIN major ON member.link_to_major = major.major_id WHERE first_name = 'Katy' AND major.major_id = 'rec1N0upiVLy5esTO';"
    },
    {
        "question_id": 1439,
        "answer_sql": "SELECT member.phone FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Business' AND major.college = 'College of Agriculture and Applied Sciences';"
    },
    {
        "question_id": 1440,
        "answer_sql": "SELECT DISTINCT member.email FROM expense JOIN member ON expense.link_to_member = member.member_id WHERE expense.expense_date BETWEEN '2019-09-10' AND '2019-11-19' AND expense.cost > 20;"
    },
    {
        "question_id": 1441,
        "answer_sql": " SELECT COUNT(*) FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'education' AND member.position = 'Member' AND major.department = 'Education & Human Services';"
    },
    {
        "question_id": 1442,
        "answer_sql": "SELECT (SUM(CASE WHEN b.remaining < 0 THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS percentage_over_budget FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE e.status = 'completed';"
    },
    {
        "question_id": 1443,
        "answer_sql": "SELECT event_id, location, status FROM event WHERE event_date BETWEEN '2019-11-01' AND '2020-03-31';"
    },
    {
        "question_id": 1444,
        "answer_sql": "SELECT expense_description FROM expense GROUP BY expense_id HAVING (SUM(cost) / COUNT(expense_id)) > 50;"
    },
    {
        "question_id": 1445,
        "answer_sql": "SELECT first_name, last_name FROM member WHERE t_shirt_size = 'X-Large';"
    },
    {
        "question_id": 1446,
        "answer_sql": "SELECT (SUM(CASE WHEN type = 'PO Box' THEN 1 ELSE 0 END) / CAST(COUNT(*) AS FLOAT)) * 100 AS percentage_po_boxes FROM zip_code;"
    },
    {
        "question_id": 1447,
        "answer_sql": "SELECT event.event_name, event.location FROM event JOIN budget ON event.event_id = budget.link_to_event WHERE budget.remaining > 0;"
    },
    {
        "question_id": 1448,
        "answer_sql": "SELECT event.event_name, event.event_date FROM event JOIN attendance ON event.event_id = attendance.link_to_event JOIN expense ON attendance.link_to_member = expense.link_to_member WHERE expense.expense_description = 'Pizza' AND expense.cost > 50 AND expense.cost < 100;"
    },
    {
        "question_id": 1449,
        "answer_sql": "SELECT m.first_name, m.last_name, ma.major_name FROM member m JOIN expense e ON m.member_id = e.link_to_member JOIN major ma ON m.link_to_major = ma.major_id WHERE e.cost > 100;"
    },
    {
        "question_id": 1450,
        "answer_sql": ""
    },
    {
        "question_id": 1451,
        "answer_sql": " SELECT member.member_id, MAX(expense.cost) AS max_cost\nFROM expense\nJOIN attendance ON expense.link_to_member = attendance.link_to_member\nJOIN member ON expense.link_to_member = member.member_id\nGROUP BY member.member_id\nHAVING COUNT(DISTINCT attendance.link_to_event) > 1\nORDER BY max_cost DESC\nLIMIT 1;"
    },
    {
        "question_id": 1452,
        "answer_sql": "SELECT AVG(e.cost) AS average_amount_paid FROM expense e JOIN member m ON e.link_to_member = m.member_id WHERE m.position != 'Member';"
    },
    {
        "question_id": 1453,
        "answer_sql": " SELECT event_name FROM event WHERE event_id IN (SELECT link_to_event FROM budget WHERE category = 'Parking' GROUP BY link_to_event HAVING spent < (SELECT AVG(spent) FROM budget WHERE category = 'Parking'));"
    },
    {
        "question_id": 1454,
        "answer_sql": "SELECT (SUM(e.cost) / COUNT(ev.event_id)) * 100 AS percentage_of_cost FROM expense e JOIN attendance a ON e.link_to_member = a.link_to_member JOIN event ev ON a.link_to_event = ev.event_id WHERE ev.type = 'Game';"
    },
    {
        "question_id": 1455,
        "answer_sql": "SELECT budget.budget_id, MAX(expense.cost) AS max_cost FROM budget JOIN expense ON budget.budget_id = expense.link_to_budget WHERE expense.expense_description = 'Water, chips, cookies' GROUP BY budget.budget_id ORDER BY max_cost DESC LIMIT 1;"
    },
    {
        "question_id": 1456,
        "answer_sql": "SELECT member.first_name || ' ' || member.last_name AS full_name FROM member JOIN expense ON member.member_id = expense.link_to_member GROUP BY member.member_id ORDER BY SUM(expense.cost) DESC LIMIT 5;"
    },
    {
        "question_id": 1457,
        "answer_sql": "SELECT m.first_name || ' ' || m.last_name AS full_name, m.phone FROM member m JOIN expense e ON m.member_id = e.link_to_member GROUP BY m.member_id HAVING SUM(e.cost) > (SELECT AVG(cost) FROM expense);"
    },
    {
        "question_id": 1458,
        "answer_sql": " SELECT ( (SELECT COUNT(*) FROM member WHERE zip = (SELECT zip_code.zip_code FROM zip_code WHERE zip_code.state = 'Maine')) / (SELECT COUNT(*) FROM member WHERE position = 'Member') - (SELECT COUNT(*) FROM member WHERE zip = (SELECT zip_code.zip_code FROM zip_code WHERE zip_code.state = 'Vermont')) / (SELECT COUNT(*) FROM member WHERE position = 'Member') ) * 100 AS difference_percentage FROM member;"
    },
    {
        "question_id": 1459,
        "answer_sql": "SELECT major.major_name, major.department FROM major JOIN member ON member.link_to_major = major.major_id WHERE member.first_name = 'Garrett' AND member.last_name = 'Gerke';"
    },
    {
        "question_id": 1460,
        "answer_sql": "SELECT m.first_name || ' ' || m.last_name AS full_name, e.cost FROM member m JOIN expense e ON m.member_id = e.link_to_member WHERE e.expense_description = 'Water, Veggie tray, supplies'"
    },
    {
        "question_id": 1461,
        "answer_sql": "SELECT last_name, phone FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Elementary Education';"
    },
    {
        "question_id": 1462,
        "answer_sql": "SELECT budget.category, budget.amount FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'January Speaker';"
    },
    {
        "question_id": 1463,
        "answer_sql": "SELECT event.event_name FROM event JOIN budget ON event.event_id = budget.link_to_event WHERE budget.category = 'Food';"
    },
    {
        "question_id": 1464,
        "answer_sql": "SELECT member.first_name || ' ' || member.last_name AS full_name, income.amount FROM income JOIN member ON member.member_id = income.link_to_member WHERE income.date_received = '2019-09-09' AND income.amount IS NOT NULL;"
    },
    {
        "question_id": 1465,
        "answer_sql": "SELECT budget.category FROM expense JOIN budget ON expense.link_to_budget = budget.budget_id WHERE expense.expense_description = 'Posters';"
    },
    {
        "question_id": 1466,
        "answer_sql": "SELECT first_name || ' ' || last_name AS full_name, college FROM member JOIN major ON member.link_to_major = major.major_id WHERE position = 'Secretary';"
    },
    {
        "question_id": 1467,
        "answer_sql": "SELECT event.event_name, SUM(budget.amount) AS total_spent FROM budget JOIN attendance ON budget.link_to_event = attendance.link_to_event JOIN event ON attendance.link_to_event = event.event_id WHERE budget.category = 'Speaker Gifts' GROUP BY event.event_id;"
    },
    {
        "question_id": 1468,
        "answer_sql": ""
    },
    {
        "question_id": 1469,
        "answer_sql": "SELECT m.first_name, m.last_name, m.position FROM member m JOIN zip_code z ON m.zip = z.zip_code WHERE z.city = 'Lincolnton' AND z.state = 'North Carolina';"
    },
    {
        "question_id": 1470,
        "answer_sql": " SELECT COUNT(DISTINCT gasstations.GasStationID) AS NumberOfPremiumGasStations\nFROM transactions_1k\nJOIN products ON transactions_1k.ProductID = products.ProductID\nJOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID\nWHERE products.Description LIKE '%Premium%' AND gasstations.Country = 'CZE';"
    },
    {
        "question_id": 1471,
        "answer_sql": " SELECT (SELECT COUNT(*) FROM transactions_1k JOIN customers ON transactions_1k.CustomerID = customers.CustomerID WHERE customers.Currency = 'EUR') / (SELECT COUNT(*) FROM customers WHERE customers.Currency = 'CZK') AS ratio;\n"
    },
    {
        "question_id": 1472,
        "answer_sql": "SELECT customers.CustomerID, customers.Segment, MIN(yearmonth.Consumption) AS LeastConsumption FROM customers JOIN yearmonth ON customers.CustomerID = yearmonth.CustomerID WHERE yearmonth.Date BETWEEN '201201' AND '201212' AND customers.Segment = 'LAM' GROUP BY customers.CustomerID ORDER BY LeastConsumption ASC LIMIT 1;"
    },
    {
        "question_id": 1473,
        "answer_sql": "SELECT AVG(Consumption) / 12 AS AverageMonthlyConsumption FROM yearmonth WHERE Date BETWEEN '201301' AND '201312' AND CustomerID IN ( SELECT CustomerID FROM customers WHERE Segment = 'SME' );"
    },
    {
        "question_id": 1474,
        "answer_sql": "SELECT c.CustomerID, SUM(y.Consumption) AS TotalConsumption FROM customers c JOIN yearmonth y ON c.CustomerID = y.CustomerID WHERE y.Date BETWEEN '201101' AND '201112' AND c.Currency = 'CZK' GROUP BY c.CustomerID ORDER BY TotalConsumption DESC LIMIT 10;"
    },
    {
        "question_id": 1475,
        "answer_sql": "SELECT COUNT(*) FROM customers JOIN yearmonth ON customers.CustomerID = yearmonth.CustomerID WHERE customers.Segment = 'KAM' AND yearmonth.Date BETWEEN '201201' AND '201212' AND yearmonth.Consumption < 30000;"
    },
    {
        "question_id": 1476,
        "answer_sql": " SELECT (SUM(CASE WHEN c.Currency = 'CZK' THEN ym.Consumption ELSE 0 END) - SUM(CASE WHEN c.Currency = 'EUR' THEN ym.Consumption ELSE 0 END)) AS difference_in_consumption FROM yearmonth ym JOIN customers c ON ym.CustomerID = c.CustomerID WHERE ym.Date BETWEEN '201201' AND '201212';"
    },
    {
        "question_id": 1477,
        "answer_sql": " SELECT strftime('%Y', YearMonth.Date) AS Year, MAX(Consumption) AS MaxConsumption FROM yearmonth JOIN customers ON YearMonth.CustomerID = customers.CustomerID WHERE customers.Currency = 'EUR' GROUP BY Year ORDER BY MaxConsumption DESC LIMIT 1;"
    },
    {
        "question_id": 1478,
        "answer_sql": "SELECT Segment, MIN(Consumption) AS LeastConsumption FROM yearmonth JOIN customers ON yearmonth.CustomerID = customers.CustomerID GROUP BY Segment ORDER BY LeastConsumption ASC LIMIT 1;"
    },
    {
        "question_id": 1479,
        "answer_sql": "SELECT SUBSTR(Date, 1, 4) AS Year, SUM(Consumption) AS TotalConsumption FROM yearmonth GROUP BY Year ORDER BY TotalConsumption DESC LIMIT 1;"
    },
    {
        "question_id": 1480,
        "answer_sql": "SELECT Date, MAX(Consumption) AS PeakConsumption FROM yearmonth WHERE CustomerID IN (SELECT CustomerID FROM customers WHERE Segment = 'SME') AND SUBSTR(Date, 1, 4) = '2013' GROUP BY SUBSTR(Date, 1, 7) ORDER BY PeakConsumption DESC LIMIT 1;"
    },
    {
        "question_id": 1481,
        "answer_sql": ""
    },
    {
        "question_id": 1482,
        "answer_sql": " SELECT Segment, AVG(Percentage_Increase) AS Avg_Percentage_Increase\nFROM (\n    SELECT c.Segment, (SUM(y2.Consumption) - SUM(y1.Consumption)) / SUM(y2.Consumption) * 100 AS Percentage_Increase\n    FROM yearmonth y1\n    JOIN yearmonth y2 ON y1.CustomerID = y2.CustomerID AND y2.Date BETWEEN '201301' AND '201312'\n    JOIN customers c ON y1.CustomerID = c.CustomerID\n    WHERE y1.Date BETWEEN '201201' AND '201212'\n    GROUP BY y1.CustomerID, c.Segment\n) AS Percentage_Change\nGROUP BY Segment\nORDER BY Avg_Percentage_Increase DESC\nLIMIT 1;"
    },
    {
        "question_id": 1483,
        "answer_sql": "SELECT SUM(Consumption) AS TotalConsumption FROM yearmonth WHERE Date >= '20130801' AND Date <= '20131130' AND CustomerID = 6;"
    },
    {
        "question_id": 1484,
        "answer_sql": "SELECT (SELECT COUNT(*) FROM gasstations WHERE Segment = 'discount' AND Country = 'Czech Republic') - (SELECT COUNT(*) FROM gasstations WHERE Segment = 'discount' AND Country = 'Slovakia') AS more_discount_stations"
    },
    {
        "question_id": 1485,
        "answer_sql": "SELECT (MAX(y1.Consumption) - MAX(y2.Consumption)) AS ConsumptionDifference FROM yearmonth y1 JOIN yearmonth y2 ON y1.CustomerID = 7 AND y2.CustomerID = 5 WHERE y1.Date = '201304' AND y2.Date = '201304';"
    },
    {
        "question_id": 1486,
        "answer_sql": "SELECT (SUM(CASE WHEN currency = 'CZK' THEN 1 ELSE 0 END) - SUM(CASE WHEN currency = 'EUR' THEN 1 ELSE 0 END)) AS more_SMEs_in_CZK FROM customers;"
    },
    {
        "question_id": 1487,
        "answer_sql": ""
    },
    {
        "question_id": 1488,
        "answer_sql": "SELECT customers.CustomerID, MAX(yearmonth.Consumption) AS MaxConsumption FROM customers JOIN yearmonth ON customers.CustomerID = yearmonth.CustomerID WHERE customers.Segment = 'KAM' GROUP BY customers.CustomerID ORDER BY MaxConsumption DESC LIMIT 1;"
    },
    {
        "question_id": 1489,
        "answer_sql": "SELECT SUM(Consumption) AS TotalConsumption FROM yearmonth WHERE Date = '201305' AND CustomerID IN (SELECT CustomerID FROM customers WHERE Segment = 'KAM');"
    },
    {
        "question_id": 1490,
        "answer_sql": "SELECT (COUNT(DISTINCT ym.CustomerID) FILTER (WHERE ym.Consumption > 46.73) * 100.0 / COUNT(DISTINCT ym.CustomerID)) AS percentage FROM yearmonth ym JOIN customers c ON ym.CustomerID = c.CustomerID WHERE c.Segment = 'LAM';"
    },
    {
        "question_id": 1491,
        "answer_sql": "SELECT g.Country, COUNT(*) AS ValueForMoneyGasStations FROM gasstations g JOIN transactions_1k t ON g.GasStationID = t.GasStationID JOIN products p ON t.ProductID = p.ProductID WHERE t.Price / t.Amount < (SELECT AVG(Price / Amount) FROM transactions_1k) GROUP BY g.Country ORDER BY ValueForMoneyGasStations DESC;"
    },
    {
        "question_id": 1492,
        "answer_sql": "SELECT (SUM(CASE WHEN Segment = 'KAM' AND Currency = 'EUR' THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS percentage_kam_euros FROM customers;"
    },
    {
        "question_id": 1493,
        "answer_sql": "SELECT ROUND((COUNT(*) * 100.0 / (SELECT COUNT(DISTINCT CustomerID) FROM yearmonth WHERE Date LIKE '201202%'))) AS Percentage FROM yearmonth WHERE Date LIKE '201202%' AND Consumption > 528.3;"
    },
    {
        "question_id": 1494,
        "answer_sql": "SELECT (COUNT(DISTINCT gs.GasStationID) FILTER (WHERE gs.Country = 'Slovakia') * 100.0 / COUNT(DISTINCT gs.GasStationID)) AS percentage_premium_gas_stations FROM gasstations gs;"
    },
    {
        "question_id": 1495,
        "answer_sql": "SELECT CustomerID FROM yearmonth WHERE Date = '201309' ORDER BY Consumption DESC LIMIT 1;"
    },
    {
        "question_id": 1496,
        "answer_sql": "SELECT customers.Segment, MIN(yearmonth.Consumption) AS MinConsumption FROM customers JOIN yearmonth ON customers.CustomerID = yearmonth.CustomerID WHERE yearmonth.Date = '201309' GROUP BY customers.Segment ORDER BY MinConsumption ASC LIMIT 1;"
    },
    {
        "question_id": 1497,
        "answer_sql": "SELECT customers.CustomerID FROM customers JOIN yearmonth ON customers.CustomerID = yearmonth.CustomerID WHERE yearmonth.Date = '201206' ORDER BY yearmonth.Consumption ASC LIMIT 1;"
    },
    {
        "question_id": 1498,
        "answer_sql": "SELECT MAX(Consumption) AS HighestConsumption FROM yearmonth WHERE Date LIKE '2012%'"
    },
    {
        "question_id": 1499,
        "answer_sql": "SELECT strftime('%Y-%m', Date) AS Month, MAX(Consumption) AS MaxConsumption FROM yearmonth JOIN customers ON yearmonth.CustomerID = customers.CustomerID WHERE customers.Currency = 'EUR' GROUP BY Month ORDER BY MaxConsumption DESC LIMIT 1;"
    },
    {
        "question_id": 1500,
        "answer_sql": "SELECT p.Description FROM transactions_1k t JOIN products p ON t.ProductID = p.ProductID JOIN yearmonth ym ON t.CustomerID = ym.CustomerID WHERE ym.Date LIKE '201309%'"
    },
    {
        "question_id": 1501,
        "answer_sql": ""
    },
    {
        "question_id": 1502,
        "answer_sql": "SELECT DISTINCT gs.ChainID FROM gasstations gs JOIN transactions_1k t ON gs.GasStationID = t.GasStationID WHERE t.Price > 0 AND t.Price < 1000"
    },
    {
        "question_id": 1503,
        "answer_sql": "SELECT products.Description FROM transactions_1k JOIN products ON transactions_1k.ProductID = products.ProductID WHERE transactions_1k.Price > 0"
    },
    {
        "question_id": 1504,
        "answer_sql": "SELECT AVG(t.Price) AS average_price FROM transactions_1k t JOIN yearmonth ym ON t.CustomerID = ym.CustomerID WHERE ym.Date LIKE '2012-01%'"
    },
    {
        "question_id": 1505,
        "answer_sql": "SELECT COUNT(*) FROM yearmonth JOIN customers ON yearmonth.CustomerID = customers.CustomerID WHERE customers.Currency = 'EUR' AND yearmonth.Consumption > 1000;"
    },
    {
        "question_id": 1506,
        "answer_sql": "SELECT p.Description FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID JOIN products p ON t.ProductID = p.ProductID WHERE g.Country = 'CZE';"
    },
    {
        "question_id": 1507,
        "answer_sql": "SELECT DISTINCT t.Date FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE g.ChainID = 11 ORDER BY t.Date;"
    },
    {
        "question_id": 1508,
        "answer_sql": "SELECT COUNT(*) FROM transactions_1k JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE gasstations.Country = 'CZE' AND transactions_1k.Price > 1000;"
    },
    {
        "question_id": 1509,
        "answer_sql": "SELECT COUNT(*) AS NumberOfTransactions FROM transactions_1k JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE gasstations.Country = 'CZE' AND transactions_1k.Date > '2012-01-01';"
    },
    {
        "question_id": 1510,
        "answer_sql": "SELECT AVG(t.Price) AS AverageTotalPrice FROM transactions_1k t JOIN gasstations gs ON t.GasStationID = gs.GasStationID WHERE gs.Country = 'CZE';"
    },
    {
        "question_id": 1511,
        "answer_sql": "SELECT AVG(t.Price) AS average_price FROM transactions_1k t JOIN customers c ON t.CustomerID = c.CustomerID WHERE c.Currency = 'EUR';"
    },
    {
        "question_id": 1512,
        "answer_sql": "SELECT customers.CustomerID, SUM(transactions_1k.Amount) AS TotalSpent FROM customers JOIN transactions_1k ON customers.CustomerID = transactions_1k.CustomerID WHERE transactions_1k.Date = '2012-08-25' GROUP BY customers.CustomerID ORDER BY TotalSpent DESC LIMIT 1;"
    },
    {
        "question_id": 1513,
        "answer_sql": "SELECT DISTINCT g.Country FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID JOIN customers c ON t.CustomerID = c.CustomerID WHERE t.Date = '2012-08-25' AND t.Amount > 0 AND c.CustomerID = ( SELECT MIN(CustomerID) FROM transactions_1k WHERE Date = '2012-08-25' AND Amount > 0 ) LIMIT 1;"
    },
    {
        "question_id": 1514,
        "answer_sql": "SELECT c.Currency FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID WHERE t.Time = '16:25:00' AND t.Date = '2012-08-24'"
    },
    {
        "question_id": 1515,
        "answer_sql": "SELECT Segment FROM customers JOIN transactions_1k T1 ON customers.CustomerID = T1.CustomerID WHERE T1.Date = '2012-08-23' AND T1.Time = '21:20:00';"
    },
    {
        "question_id": 1516,
        "answer_sql": "SELECT COUNT(*) FROM transactions_1k JOIN products ON transactions_1k.ProductID = products.ProductID JOIN customers ON transactions_1k.CustomerID = customers.CustomerID WHERE transactions_1k.Date = '2012-08-26' AND transactions_1k.Time < '13:00:00' AND transactions_1k.Price > 0 AND customers.Currency = 'EUR';"
    },
    {
        "question_id": 1517,
        "answer_sql": " SELECT Segment FROM customers WHERE CustomerID = (SELECT CustomerID FROM (SELECT CustomerID, MIN(Date) AS EarliestDate FROM yearmonth GROUP BY CustomerID) AS SubQuery WHERE SubQuery.EarliestDate IS NOT NULL);"
    },
    {
        "question_id": 1518,
        "answer_sql": "SELECT DISTINCT g.Country FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE t.Date = '2012-08-24' AND t.Time = '12:42:00';"
    },
    {
        "question_id": 1519,
        "answer_sql": " SELECT T1.ProductID FROM transactions_1k AS T1 JOIN products ON T1.ProductID = products.ProductID WHERE T1.Date = '2012-08-23' AND T1.Time = '21:20:00';"
    },
    {
        "question_id": 1520,
        "answer_sql": ""
    },
    {
        "question_id": 1521,
        "answer_sql": "SELECT COUNT(*) FROM transactions_1k JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE gasstations.Country = 'CZE' AND CAST(transactions_1k.Date AS TEXT) = '2012-08-26' AND CAST(transactions_1k.Time AS TEXT) BETWEEN '08:00:00' AND '09:00:00';"
    },
    {
        "question_id": 1522,
        "answer_sql": "SELECT c.Currency FROM customers c JOIN yearmonth ym ON c.CustomerID = ym.CustomerID WHERE ym.Date LIKE '201306%' AND ym.Consumption = 214582.17;"
    },
    {
        "question_id": 1523,
        "answer_sql": "SELECT gs.Country FROM transactions_1k t JOIN customers c ON t.CustomerID = c.CustomerID JOIN gasstations gs ON t.GasStationID = gs.GasStationID WHERE t.CardID = 667467;"
    },
    {
        "question_id": 1524,
        "answer_sql": ""
    },
    {
        "question_id": 1525,
        "answer_sql": "SELECT (COUNT(DISTINCT t.CustomerID) * 100.0 / (SELECT COUNT(*) FROM customers WHERE Currency = 'EUR')) AS percentage FROM transactions_1k t JOIN customers c ON t.CustomerID = c.CustomerID WHERE c.Currency = 'EUR' AND t.Date = '2012-08-25';"
    },
    {
        "question_id": 1526,
        "answer_sql": ""
    },
    {
        "question_id": 1527,
        "answer_sql": "SELECT GasStationID, SUM(Amount * Price) AS Revenue FROM transactions_1k GROUP BY GasStationID ORDER BY Revenue DESC LIMIT 1;"
    },
    {
        "question_id": 1528,
        "answer_sql": ""
    },
    {
        "question_id": 1529,
        "answer_sql": "SELECT SUM(t.Amount) AS TotalSpent FROM transactions_1k t JOIN customers c ON t.CustomerID = c.CustomerID WHERE c.CustomerID = 38508 AND t.Date LIKE '201201%';"
    },
    {
        "question_id": 1530,
        "answer_sql": "SELECT products.Description FROM transactions_1k JOIN products ON transactions_1k.ProductID = products.ProductID GROUP BY products.ProductID ORDER BY SUM(transactions_1k.Amount) DESC LIMIT 5;"
    },
    {
        "question_id": 1531,
        "answer_sql": "SELECT c.CustomerID, c.Currency, SUM(t.Amount) AS TotalSpent, AVG(t.Price / t.Amount) AS AvgPricePerItem FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID GROUP BY c.CustomerID ORDER BY TotalSpent DESC LIMIT 1;"
    },
    {
        "question_id": 1532,
        "answer_sql": "SELECT gs.Country FROM gasstations gs JOIN transactions_1k t ON gs.GasStationID = t.GasStationID JOIN products p ON t.ProductID = p.ProductID WHERE p.ProductID = 2 ORDER BY t.Price DESC LIMIT 1;"
    },
    {
        "question_id": 1533,
        "answer_sql": "SELECT ym.CustomerID, ym.Consumption FROM yearmonth ym JOIN transactions_1k t ON ym.CustomerID = t.CustomerID JOIN products p ON t.ProductID = p.ProductID WHERE p.ProductID = 5 AND ym.Date LIKE '201208%' AND (t.Price / t.Amount) > 29.00 GROUP BY ym.CustomerID;"
    }
]