[
    {
        "question_id": 0,
        "answer_sql": ""
    },
    {
        "question_id": 1,
        "answer_sql": ""
    },
    {
        "question_id": 2,
        "answer_sql": "SELECT DISTINCT Zip FROM schools WHERE County = 'Fresno' AND Charter = 1"
    },
    {
        "question_id": 3,
        "answer_sql": ""
    },
    {
        "question_id": 4,
        "answer_sql": "SELECT Phone FROM schools WHERE OpenDate > '2000-01-01' AND Charter = 1"
    },
    {
        "question_id": 5,
        "answer_sql": "SELECT count(schools.CDSCode) FROM schools INNER JOIN satscores ON schools.CDSCode = satscores.cds WHERE satscores.AvgScrMath < 400 AND schools.Virtual = 'F'"
    },
    {
        "question_id": 6,
        "answer_sql": "SELECT DISTINCT schools.School FROM schools INNER JOIN satscores ON schools.CDSCode = satscores.cds WHERE satscores.NumTstTakr > 500 AND schools.Magnet = 1"
    },
    {
        "question_id": 7,
        "answer_sql": "SELECT schools.Phone FROM schools INNER JOIN satscores ON schools.CDSCode = satscores.cds WHERE satscores.NumGE1500 = ( SELECT max(NumGE1500) FROM satscores )"
    },
    {
        "question_id": 8,
        "answer_sql": "SELECT sum(NumTstTakr) FROM satscores WHERE cds IN ( SELECT CDSCode FROM frpm WHERE `FRPM Count (K-12)` = ( SELECT max(`FRPM Count (K-12)`) FROM frpm ) )"
    },
    {
        "question_id": 9,
        "answer_sql": "SELECT count(schools.CDSCode) FROM schools INNER JOIN satscores ON schools.CDSCode = satscores.cds WHERE satscores.AvgScrMath > 560 AND schools.Charter = 1"
    },
    {
        "question_id": 10,
        "answer_sql": ""
    },
    {
        "question_id": 11,
        "answer_sql": ""
    },
    {
        "question_id": 12,
        "answer_sql": ""
    },
    {
        "question_id": 13,
        "answer_sql": "SELECT schools.Phone FROM schools INNER JOIN satscores ON schools.CDSCode = satscores.cds ORDER BY satscores.NumGE1500 / satscores.NumTstTakr DESC LIMIT 3"
    },
    {
        "question_id": 14,
        "answer_sql": "SELECT schools.NCESSchool FROM schools INNER JOIN satscores ON schools.CDSCode = satscores.cds ORDER BY satscores.enroll12 DESC LIMIT 5"
    },
    {
        "question_id": 15,
        "answer_sql": ""
    },
    {
        "question_id": 16,
        "answer_sql": "SELECT count(schools.CDSCode) FROM schools INNER JOIN satscores ON schools.CDSCode = satscores.cds WHERE satscores.NumTstTakr < 100"
    },
    {
        "question_id": 17,
        "answer_sql": "SELECT DISTINCT schools.CharterNum FROM schools INNER JOIN satscores ON schools.CDSCode = satscores.cds WHERE satscores.AvgScrWrite = 499"
    },
    {
        "question_id": 18,
        "answer_sql": "SELECT count(CDSCode) FROM schools WHERE CDSCode IN ( SELECT CDSCode FROM satscores WHERE NumTstTakr <= 250 )"
    },
    {
        "question_id": 19,
        "answer_sql": "SELECT schools.Phone FROM schools INNER JOIN satscores ON schools.CDSCode = satscores.cds ORDER BY satscores.AvgScrMath DESC LIMIT 1"
    },
    {
        "question_id": 20,
        "answer_sql": "SELECT count(DISTINCT CDSCode) FROM frpm WHERE `Low Grade` = 9 AND `High Grade` = 12 AND `District Name` = 'Amador'"
    },
    {
        "question_id": 21,
        "answer_sql": ""
    },
    {
        "question_id": 22,
        "answer_sql": "SELECT sname FROM satscores WHERE cname = 'Contra Costa' ORDER BY NumTstTakr DESC LIMIT 1"
    },
    {
        "question_id": 23,
        "answer_sql": ""
    },
    {
        "question_id": 24,
        "answer_sql": "SELECT DISTINCT schools.School FROM schools INNER JOIN satscores ON schools.CDSCode = satscores.cds WHERE satscores.AvgScrRead > 0.1 AND satscores.NumTstTakr >= 1500"
    },
    {
        "question_id": 25,
        "answer_sql": "SELECT DISTINCT schools.School, schools.FundingType FROM schools INNER JOIN satscores ON schools.CDSCode = satscores.cds WHERE satscores.AvgScrMath > 400"
    },
    {
        "question_id": 26,
        "answer_sql": ""
    },
    {
        "question_id": 27,
        "answer_sql": "SELECT cast(sum(CASE WHEN schools.OpenDate > '1991' THEN 1 ELSE 0 END) AS REAL) / sum(CASE WHEN schools.OpenDate > '1991' THEN 1 ELSE 0 END + CASE WHEN schools.ClosedDate < '2000' THEN 1 ELSE 0 END) FROM schools INNER JOIN satscores ON schools.CDSCode = satscores.cds"
    },
    {
        "question_id": 28,
        "answer_sql": ""
    },
    {
        "question_id": 29,
        "answer_sql": ""
    },
    {
        "question_id": 30,
        "answer_sql": "SELECT City FROM schools WHERE City IS NOT NULL GROUP BY City ORDER BY count(CDSCode) LIMIT 5"
    },
    {
        "question_id": 31,
        "answer_sql": " SELECT cast(sum(CASE WHEN School = '10th' THEN 1 ELSE 0 END) AS REAL) * 100 / count(CDSCode) FROM schools WHERE School IN ('10th', '11th')"
    },
    {
        "question_id": 32,
        "answer_sql": ""
    },
    {
        "question_id": 33,
        "answer_sql": ""
    },
    {
        "question_id": 34,
        "answer_sql": ""
    },
    {
        "question_id": 35,
        "answer_sql": ""
    },
    {
        "question_id": 36,
        "answer_sql": "SELECT schools.AdmLName1, schools.AdmLName3 FROM schools INNER JOIN satscores ON schools.CDSCode = satscores.cds WHERE satscores.NumGE1500 = ( SELECT max(NumGE1500) FROM satscores )"
    },
    {
        "question_id": 37,
        "answer_sql": "SELECT schools.Street, schools.City, schools.State, schools.Zip FROM schools INNER JOIN satscores ON schools.CDSCode = satscores.cds WHERE satscores.NumGE1500 = ( SELECT min(NumGE1500) FROM satscores )"
    },
    {
        "question_id": 38,
        "answer_sql": "SELECT DISTINCT schools.Website FROM schools INNER JOIN satscores ON schools.CDSCode = satscores.cds WHERE satscores.NumTstTakr BETWEEN 2000 AND 3000"
    },
    {
        "question_id": 39,
        "answer_sql": "SELECT cast(sum(CASE WHEN strftime('%Y', OpenDate) = '1980' THEN 1 ELSE 0 END) AS REAL) / count(CDSCode) FROM schools"
    },
    {
        "question_id": 40,
        "answer_sql": "SELECT schools.Phone FROM schools INNER JOIN satscores ON schools.CDSCode = satscores.cds WHERE schools.District = 'Fresno Unified' ORDER BY satscores.AvgScrRead ASC LIMIT 1"
    },
    {
        "question_id": 41,
        "answer_sql": "SELECT DISTINCT schools.School FROM schools INNER JOIN satscores ON schools.CDSCode = satscores.cds WHERE schools.Virtual = 'F' ORDER BY satscores.AvgScrRead DESC LIMIT 5"
    },
    {
        "question_id": 42,
        "answer_sql": "SELECT DISTINCT satscores.rtype FROM satscores INNER JOIN schools ON satscores.cds = schools.CDSCode WHERE satscores.AvgScrMath = ( SELECT max(satscores.AvgScrMath) FROM satscores INNER JOIN schools ON satscores.cds = schools.CDSCode )"
    },
    {
        "question_id": 43,
        "answer_sql": "SELECT avg(satscores.AvgScrMath), schools.County FROM schools INNER JOIN satscores ON schools.CDSCode = satscores.cds GROUP BY schools.County ORDER BY avg(satscores.AvgScrMath) LIMIT 1"
    },
    {
        "question_id": 44,
        "answer_sql": "SELECT cast(sum(CASE WHEN satscores.AvgScrWrite IS NOT NULL THEN satscores.AvgScrWrite ELSE 0 END) AS REAL) / count(schools.CDSCode) FROM schools INNER JOIN satscores ON schools.CDSCode = satscores.cds WHERE satscores.NumGE1500 = ( SELECT max(NumGE1500) FROM satscores )"
    },
    {
        "question_id": 45,
        "answer_sql": "SELECT schools.School, avg(satscores.AvgScrWrite) FROM schools INNER JOIN satscores ON schools.CDSCode = satscores.cds WHERE schools.AdmLName1 = 'Ricci'"
    },
    {
        "question_id": 46,
        "answer_sql": "SELECT schools.State FROM schools INNER JOIN satscores ON schools.CDSCode = satscores.cds WHERE schools.DOC = 31 GROUP BY schools.State ORDER BY sum(satscores.enroll12) DESC LIMIT 1"
    },
    {
        "question_id": 47,
        "answer_sql": "SELECT cast(sum(CASE WHEN strftime('%Y', OpenDate) = '1980' THEN 1 ELSE 0 END) AS REAL) / 12 FROM schools WHERE DOC = 52"
    },
    {
        "question_id": 48,
        "answer_sql": "SELECT cast(sum(CASE WHEN schools.DOC = 54 THEN 1 ELSE 0 END) AS REAL) / sum(CASE WHEN schools.DOC = 52 THEN 1 ELSE 0 END) FROM schools INNER JOIN schools_admins ON schools.CDSCode = schools_admins.CDSCode"
    },
    {
        "question_id": 49,
        "answer_sql": " SELECT county, school, closeddate FROM schools WHERE statustype = 'Closed' GROUP BY county, school, closeddate ORDER BY count(county) DESC LIMIT 1"
    },
    {
        "question_id": 50,
        "answer_sql": "SELECT schools.Street, schools.School FROM schools INNER JOIN satscores ON schools.CDSCode = satscores.cds ORDER BY satscores.AvgScrMath DESC LIMIT 5"
    },
    {
        "question_id": 51,
        "answer_sql": "SELECT DISTINCT schools.Street FROM schools INNER JOIN satscores ON schools.CDSCode = satscores.cds WHERE schools.Street IS NOT NULL ORDER BY satscores.AvgScrRead ASC LIMIT 1"
    },
    {
        "question_id": 52,
        "answer_sql": "SELECT count(schools.CDSCode) FROM schools INNER JOIN satscores ON schools.CDSCode = satscores.cds WHERE satscores.AvgScrRead + satscores.AvgScrMath + satscores.AvgScrWrite >= 1500 AND schools.MailCity = 'Lakeport'"
    },
    {
        "question_id": 53,
        "answer_sql": "SELECT count(DISTINCT schools.CDSCode) FROM schools INNER JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE schools.MailCity = 'Fresno'"
    },
    {
        "question_id": 54,
        "answer_sql": ""
    },
    {
        "question_id": 55,
        "answer_sql": "SELECT cast(sum(CASE WHEN schools.County = 'Colusa' THEN 1 ELSE 0 END) AS REAL) / sum(CASE WHEN schools.County = 'Humboldt' THEN 1 ELSE 0 END) FROM schools INNER JOIN ( SELECT DISTINCT County FROM schools WHERE County IS NOT NULL ) AS t2 ON schools.County = t2.County"
    },
    {
        "question_id": 56,
        "answer_sql": "SELECT count(schools.CDSCode) FROM schools INNER JOIN schools_admins ON schools.CDSCode = schools_admins.CDSCode WHERE schools.State = 'CA' AND schools_admins.SchoolCode = '0000000000'"
    },
    {
        "question_id": 57,
        "answer_sql": "SELECT Phone, Ext FROM schools WHERE CDSCode = ( SELECT cds FROM satscores ORDER BY AvgScrWrite DESC LIMIT 329, 1 )"
    },
    {
        "question_id": 58,
        "answer_sql": "SELECT Phone, Ext, School FROM schools WHERE Zip = '95203-3704'"
    },
    {
        "question_id": 59,
        "answer_sql": ""
    },
    {
        "question_id": 60,
        "answer_sql": "SELECT Website FROM schools WHERE Virtual = 'P' AND Charter = 1"
    },
    {
        "question_id": 61,
        "answer_sql": "SELECT count(schools.CDSCode) FROM schools INNER JOIN schools_admins ON schools.CDSCode = schools_admins.CDSCode WHERE schools.DOC = 52 AND schools.Charter = 1 AND schools_admins.City = 'Hickman'"
    },
    {
        "question_id": 62,
        "answer_sql": "SELECT cast(sum(CASE WHEN Charter = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / count(CDSCode) FROM schools WHERE County = 'Los Angeles'"
    },
    {
        "question_id": 63,
        "answer_sql": "SELECT AdmLName1, AdmFName1, City FROM schools WHERE Charter = 1 AND CharterNum = '00D2'"
    },
    {
        "question_id": 64,
        "answer_sql": "SELECT count(CDSCode) FROM schools WHERE CharterNum = '00D4' AND MailCity = 'Hickman'"
    },
    {
        "question_id": 65,
        "answer_sql": "SELECT cast(sum(CASE WHEN FundingType = 'Local' THEN 1 ELSE 0 END) AS REAL) * 100 / count(CDSCode) FROM schools WHERE County = 'Santa Clara'"
    },
    {
        "question_id": 66,
        "answer_sql": "SELECT count(DISTINCT CDSCode) FROM schools WHERE County = 'Stanislaus' AND FundingType = 'Directly Funded' AND OpenDate BETWEEN '2000-01-01' AND '2005-12-31'"
    },
    {
        "question_id": 67,
        "answer_sql": "SELECT sum(CASE WHEN City = 'San Francisco' THEN 1 ELSE 0 END) FROM schools WHERE ClosedDate LIKE '1989%'"
    },
    {
        "question_id": 68,
        "answer_sql": "SELECT county FROM schools WHERE strftime('%Y', ClosedDate) BETWEEN '1980' AND '1989' AND SOC = '11' GROUP BY county ORDER BY count(county) DESC LIMIT 1"
    },
    {
        "question_id": 69,
        "answer_sql": "SELECT DISTINCT schools.NCESDist FROM schools INNER JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE schools.SOC = 31"
    },
    {
        "question_id": 70,
        "answer_sql": "SELECT count(DISTINCT schools.CDSCode) FROM schools INNER JOIN schools_admins ON schools.CDSCode = schools_admins.CDSCode WHERE schools.StatusType = 'Active' OR schools.StatusType = 'Closed' AND schools.County = 'Alpine'"
    },
    {
        "question_id": 71,
        "answer_sql": ""
    },
    {
        "question_id": 72,
        "answer_sql": ""
    },
    {
        "question_id": 73,
        "answer_sql": ""
    },
    {
        "question_id": 74,
        "answer_sql": ""
    },
    {
        "question_id": 75,
        "answer_sql": ""
    },
    {
        "question_id": 76,
        "answer_sql": "SELECT schools.City FROM schools INNER JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE frpm.`Low Grade` = 9 AND frpm.`High Grade` = 12 AND schools.County = 'Merced' AND schools.EILCode = 'HS'"
    },
    {
        "question_id": 77,
        "answer_sql": " SELECT cast(sum(CASE WHEN rtype = 'Kindergarten to 9th grade' THEN 1 ELSE 0 END) AS REAL) * 100 / count(schools.CDSCode) FROM satscores INNER JOIN schools ON schools.CDSCode = satscores.cds WHERE schools.county = 'Los Angeles'"
    },
    {
        "question_id": 78,
        "answer_sql": "SELECT DISTINCT schools.City FROM schools INNER JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE schools.City = 'Adelanto'"
    },
    {
        "question_id": 79,
        "answer_sql": "SELECT county, count(county) FROM schools WHERE County IN ('San Diego', 'Santa Barbara') AND Virtual = 'F' GROUP BY county"
    },
    {
        "question_id": 80,
        "answer_sql": "SELECT DISTINCT schools.School, schools.Latitude FROM schools INNER JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE schools.Latitude IS NOT NULL ORDER BY schools.Latitude DESC LIMIT 1"
    },
    {
        "question_id": 81,
        "answer_sql": "SELECT schools.City, frpm.`Low Grade`, schools.School FROM schools INNER JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE schools.State = 'CA' ORDER BY schools.Latitude ASC LIMIT 1"
    },
    {
        "question_id": 82,
        "answer_sql": "SELECT DISTINCT schools.Longitude FROM schools INNER JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE schools.Longitude IS NOT NULL ORDER BY schools.Longitude DESC LIMIT 1"
    },
    {
        "question_id": 83,
        "answer_sql": "SELECT count(DISTINCT schools.City), count(DISTINCT CASE WHEN schools.Magnet = 1 THEN schools.CDSCode ELSE NULL END) FROM schools INNER JOIN satscores ON schools.CDSCode = satscores.cds WHERE satscores.cname = 'Kindergarten to 8th grade' AND satscores.rtype = 'Magnet'"
    },
    {
        "question_id": 84,
        "answer_sql": ""
    },
    {
        "question_id": 85,
        "answer_sql": "SELECT cast(sum(CASE WHEN schools.AdmFName1 = 'Alusine' THEN schools.Charter ELSE 0 END) AS REAL) * 100 / count(schools.AdmFName1) FROM schools INNER JOIN schools_admins ON schools.CDSCode = schools_admins.CDSCode"
    },
    {
        "question_id": 86,
        "answer_sql": ""
    },
    {
        "question_id": 87,
        "answer_sql": "SELECT AdmEmail1 FROM schools WHERE County = 'San Bernardino' AND District = 'San Bernardino City Unified' AND OpenDate BETWEEN '2009-01-01' AND '2010-12-31' AND (SOC = 62 OR DOC = 54)"
    },
    {
        "question_id": 88,
        "answer_sql": "SELECT schools.AdmEmail1, schools.School FROM schools INNER JOIN satscores ON schools.CDSCode = satscores.cds WHERE satscores.NumGE1500 = ( SELECT max(NumGE1500) FROM satscores )"
    },
    {
        "question_id": 89,
        "answer_sql": "SELECT count(DISTINCT client.client_id) FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id WHERE account.district_id = ( SELECT district_id FROM district WHERE A3 = 'POPLATEK PO OBRATU' )"
    },
    {
        "question_id": 90,
        "answer_sql": "SELECT count(account.account_id) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.A3 = 'Prague'"
    },
    {
        "question_id": 91,
        "answer_sql": "SELECT CASE WHEN A12 > A13 THEN '1995' ELSE '1996' END FROM district WHERE A12 IS NOT NULL AND A13 IS NOT NULL"
    },
    {
        "question_id": 92,
        "answer_sql": ""
    },
    {
        "question_id": 93,
        "answer_sql": "SELECT count(client.client_id) FROM client INNER JOIN district ON client.district_id = district.district_id WHERE district.A3 = 'North Bohemia' AND client.gender = 'M' AND district.A11 > 8000"
    },
    {
        "question_id": 94,
        "answer_sql": "SELECT account.account_id FROM client INNER JOIN account ON client.district_id = account.district_id WHERE client.gender = 'F' ORDER BY client.birth_date ASC LIMIT 1"
    },
    {
        "question_id": 95,
        "answer_sql": "SELECT client.client_id FROM client INNER JOIN district ON client.district_id = district.district_id GROUP BY client.client_id ORDER BY sum(district.A11) / count(district.district_id) DESC LIMIT 1"
    },
    {
        "question_id": 96,
        "answer_sql": "SELECT count(DISTINCT client.client_id) FROM client INNER JOIN disp ON client.client_id = disp.client_id WHERE disp.type = 'POPLATEK TYDNE' AND client.gender = 'Owner'"
    },
    {
        "question_id": 97,
        "answer_sql": ""
    },
    {
        "question_id": 98,
        "answer_sql": "SELECT account.account_id FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE account.date LIKE '1997%' AND account.frequency = 'POPLATEK TYDNE' ORDER BY loan.amount ASC LIMIT 1"
    },
    {
        "question_id": 99,
        "answer_sql": "SELECT account.account_id FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE loan.duration > 12 AND account.date LIKE '1993%' ORDER BY loan.amount DESC LIMIT 1"
    },
    {
        "question_id": 100,
        "answer_sql": "SELECT count(client.client_id) FROM client INNER JOIN district ON client.district_id = district.district_id WHERE district.A2 = 'Slokolov' AND client.gender = 'F' AND client.birth_date < '1950-01-01'"
    },
    {
        "question_id": 101,
        "answer_sql": "SELECT account_id FROM account WHERE strftime('%Y', `date`) = '1995'"
    },
    {
        "question_id": 102,
        "answer_sql": " SELECT client.client_id FROM client INNER JOIN loan ON client.district_id = loan.account_id WHERE loan.date < '1997-01-01' AND loan.amount > 3000"
    },
    {
        "question_id": 103,
        "answer_sql": "SELECT client.client_id FROM client INNER JOIN card ON client.client_id = card.disp_id WHERE card.issued = '1994-03-03'"
    },
    {
        "question_id": 104,
        "answer_sql": "SELECT account.date FROM account INNER JOIN trans ON account.account_id = trans.account_id WHERE trans.date = '1998-10-14' AND trans.amount = 840"
    },
    {
        "question_id": 105,
        "answer_sql": ""
    },
    {
        "question_id": 106,
        "answer_sql": "SELECT max(trans.amount) FROM account INNER JOIN trans ON account.account_id = trans.account WHERE strftime('%Y', account.date) = '1996' AND account.frequency = 'MONTHLY'"
    },
    {
        "question_id": 107,
        "answer_sql": "SELECT client.gender FROM client INNER JOIN ( SELECT district_id, avg(A11) FROM district GROUP BY district_id ) AS t2 ON client.district_id = t2.district_id"
    },
    {
        "question_id": 108,
        "answer_sql": "SELECT trans.amount FROM account INNER JOIN loan ON account.account_id = loan.account_id INNER JOIN client ON client.client_id = loan.account_id INNER JOIN trans ON trans.account_id = loan.account_id ORDER BY loan.amount DESC LIMIT 1"
    },
    {
        "question_id": 109,
        "answer_sql": "SELECT count(client_id) FROM client WHERE district_id = 1 AND gender = 'F'"
    },
    {
        "question_id": 110,
        "answer_sql": ""
    },
    {
        "question_id": 111,
        "answer_sql": "SELECT count(account_id) FROM account WHERE district_id IN ( SELECT district_id FROM district WHERE A2 = 'Litomerice' AND strftime('%Y', date) = '1996' )"
    },
    {
        "question_id": 112,
        "answer_sql": "SELECT district.A2 FROM district INNER JOIN client ON district.district_id = client.district_id WHERE client.gender = 'F' AND client.birth_date = '1976-01-29'"
    },
    {
        "question_id": 113,
        "answer_sql": "SELECT client.birth_date FROM client INNER JOIN loan ON client.client_id = loan.account_id WHERE loan.amount = 98832 AND strftime('%Y', loan.date) = '1996' AND strftime('%m', loan.date) = '01' AND strftime('%d', loan.date) = '03'"
    },
    {
        "question_id": 114,
        "answer_sql": ""
    },
    {
        "question_id": 115,
        "answer_sql": "SELECT cast(sum(CASE WHEN gender = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / count(gender) FROM client WHERE district_id = ( SELECT district_id FROM district WHERE A3 = 'South Bohemia' ORDER BY A10 DESC LIMIT 1 )"
    },
    {
        "question_id": 116,
        "answer_sql": "SELECT cast((sum(trans.balance) - sum(trans.balance)) AS REAL) * 100 / sum(trans.balance) FROM account INNER JOIN ( SELECT account_id, sum(amount) AS balance FROM loan WHERE date BETWEEN '1993-07-05' AND '1998-12-27' GROUP BY account_id ) AS trans ON account.account_id = trans.account_id"
    },
    {
        "question_id": 117,
        "answer_sql": "SELECT cast(sum(CASE WHEN status = 'A' THEN amount ELSE 0 END) AS REAL) * 100 / sum(amount) FROM loan"
    },
    {
        "question_id": 118,
        "answer_sql": "SELECT cast(sum(CASE WHEN loan.status = 'C' THEN loan.amount ELSE 0 END) AS REAL) * 100 / sum(loan.amount) FROM loan WHERE loan.amount < 100000"
    },
    {
        "question_id": 119,
        "answer_sql": "SELECT account.account_id, district.A2, district.A3 FROM district INNER JOIN account ON district.district_id = account.district_id WHERE account.date > '1993-01-01' AND account.date < '1994-01-01' AND account.frequency = 'POPLATEK PO OBRATU'"
    },
    {
        "question_id": 120,
        "answer_sql": "SELECT account_id, frequency FROM account WHERE strftime('%Y', date) BETWEEN '1995' AND '2000' AND district_id IN ( SELECT district_id FROM district WHERE A3 = 'east Bohemia' )"
    },
    {
        "question_id": 121,
        "answer_sql": "SELECT account_id, date FROM account WHERE district_id = ( SELECT district_id FROM district WHERE A2 = 'Prachatice' )"
    },
    {
        "question_id": 122,
        "answer_sql": "SELECT district.A2, district.A3 FROM district INNER JOIN account ON district.district_id = account.district_id INNER JOIN loan ON account.account_id = loan.account_id WHERE loan.loan_id = 4990"
    },
    {
        "question_id": 123,
        "answer_sql": "SELECT account.account_id, district.A2, district.A3 FROM account INNER JOIN loan ON account.account_id = loan.account_id INNER JOIN district ON district.district_id = account.district_id WHERE loan.amount > 300000"
    },
    {
        "question_id": 124,
        "answer_sql": "SELECT loan.loan_id, district.A3, avg(district.A11) FROM loan INNER JOIN district ON loan.duration = district.A14 WHERE loan.duration = 60"
    },
    {
        "question_id": 125,
        "answer_sql": "SELECT district.A3, district.A12, district.A13 FROM district INNER JOIN loan ON district.district_id = loan.account_id WHERE loan.status = 'D'"
    },
    {
        "question_id": 126,
        "answer_sql": "SELECT cast(sum(CASE WHEN district.A2 = 'Decin' THEN 1 ELSE 0 END) AS REAL) * 100 / count(account.account_id) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE strftime('%Y', account.date) = '1993'"
    },
    {
        "question_id": 127,
        "answer_sql": "SELECT account_id FROM account WHERE frequency = 'POPLATEK MESICNE'"
    },
    {
        "question_id": 128,
        "answer_sql": "SELECT A2 FROM district ORDER BY A10 DESC LIMIT 10"
    },
    {
        "question_id": 129,
        "answer_sql": "SELECT district.A2 FROM district INNER JOIN trans ON district.district_id = trans.account_id WHERE trans.date LIKE '1996-01%' AND trans.type = 'VYDAJ' GROUP BY district.A2 ORDER BY count(district.A2) DESC LIMIT 10"
    },
    {
        "question_id": 130,
        "answer_sql": " SELECT count(client_id) FROM client WHERE gender = 'female'"
    },
    {
        "question_id": 131,
        "answer_sql": "SELECT district.A3 FROM district INNER JOIN loan ON district.district_id = loan.account_id WHERE loan.status = 'C'"
    },
    {
        "question_id": 132,
        "answer_sql": "SELECT avg(loan.amount) FROM client INNER JOIN loan ON client.client_id = loan.account_id WHERE client.gender = 'M'"
    },
    {
        "question_id": 133,
        "answer_sql": "SELECT A2, A3 FROM district WHERE A13 = ( SELECT max(A13) FROM district )"
    },
    {
        "question_id": 134,
        "answer_sql": "SELECT count(account_id) FROM account WHERE strftime('%Y', date) = '1996' GROUP BY district_id ORDER BY count(account_id) DESC LIMIT 1"
    },
    {
        "question_id": 135,
        "answer_sql": "SELECT count(account.account_id) FROM account INNER JOIN card ON account.district_id = card.disp_id INNER JOIN trans ON account.account_id = trans.account WHERE card.type = 'VYBER KARTOU' AND account.frequency = 'POPLATEK MESICNE' AND trans.balance < 0"
    },
    {
        "question_id": 136,
        "answer_sql": "SELECT count(loan_id) FROM loan WHERE account_id IN ( SELECT account_id FROM account WHERE date BETWEEN '1995-01-01' AND '1997-12-31' AND frequency = 'POPLATEK MESICNE' AND amount >= 250000 )"
    },
    {
        "question_id": 137,
        "answer_sql": "SELECT count(account_id) FROM account WHERE district_id = 1 AND frequency = 'C'"
    },
    {
        "question_id": 138,
        "answer_sql": "SELECT count(client.client_id) FROM client INNER JOIN district ON client.district_id = district.district_id WHERE district.A15 = ( SELECT max(A15) FROM district ) AND client.gender = 'M'"
    },
    {
        "question_id": 139,
        "answer_sql": "SELECT count(card_id) FROM card WHERE TYPE = 'disp'"
    },
    {
        "question_id": 140,
        "answer_sql": "SELECT count(account_id) FROM account WHERE district_id = ( SELECT district_id FROM district WHERE A2 = 'Pisek' )"
    },
    {
        "question_id": 141,
        "answer_sql": ""
    },
    {
        "question_id": 142,
        "answer_sql": "SELECT DISTINCT account_id FROM `order` WHERE k_symbol = 'SIPO'"
    },
    {
        "question_id": 143,
        "answer_sql": "SELECT account.account_id FROM account INNER JOIN card ON account.account_id = card.disp_id WHERE card.type IN ('gold', 'junior')"
    },
    {
        "question_id": 144,
        "answer_sql": " SELECT avg(loan.amount) FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE account.date LIKE '2021%'"
    },
    {
        "question_id": 145,
        "answer_sql": ""
    },
    {
        "question_id": 146,
        "answer_sql": "SELECT client.client_id FROM client INNER JOIN card ON client.client_id = card.disp_id INNER JOIN loan ON card.card_id = loan.account_id WHERE client.gender = 'F'"
    },
    {
        "question_id": 147,
        "answer_sql": "SELECT count(client_id) FROM client WHERE district_id IN ( SELECT district_id FROM district WHERE A3 = 'south Bohemia' ) AND gender = 'F'"
    },
    {
        "question_id": 148,
        "answer_sql": ""
    },
    {
        "question_id": 149,
        "answer_sql": "SELECT DISTINCT frequency FROM account WHERE district_id IN ( SELECT district_id FROM district WHERE A11 BETWEEN 8000 AND 9000 ) AND frequency != 'OWNER'"
    },
    {
        "question_id": 150,
        "answer_sql": "SELECT count(DISTINCT account.account_id) FROM account INNER JOIN trans ON account.account_id = trans.account WHERE trans.bank = 'AB'"
    },
    {
        "question_id": 151,
        "answer_sql": ""
    },
    {
        "question_id": 152,
        "answer_sql": "SELECT cast(sum(CASE WHEN district.A15 > 4000 THEN 1 ELSE 0 END) AS REAL) / count(district.A15) FROM district INNER JOIN account ON district.district_id = account.district_id WHERE substr(account.date, 1, 4) = '1997'"
    },
    {
        "question_id": 153,
        "answer_sql": "SELECT count(card_id) FROM card WHERE TYPE = 'classic' AND TYPE = 'OWNER'"
    },
    {
        "question_id": 154,
        "answer_sql": "SELECT count(client_id) FROM client WHERE district_id = ( SELECT district_id FROM district WHERE A2 = 'Hl.m. Praha' ) AND gender = 'M'"
    },
    {
        "question_id": 155,
        "answer_sql": "SELECT cast(sum(CASE WHEN card.type = 'Gold' THEN 1 ELSE 0 END) AS REAL) * 100 / count(card.card_id) FROM card INNER JOIN disp ON card.disp_id = disp.disp_id WHERE strftime('%Y', card.issued) < '1998'"
    },
    {
        "question_id": 156,
        "answer_sql": "SELECT client.gender FROM client INNER JOIN loan ON client.client_id = loan.account_id ORDER BY loan.amount DESC LIMIT 1"
    },
    {
        "question_id": 157,
        "answer_sql": "SELECT district.A15 FROM account INNER JOIN district ON account.district_id = district.district_id WHERE account.account_id = 532"
    },
    {
        "question_id": 158,
        "answer_sql": ""
    },
    {
        "question_id": 159,
        "answer_sql": ""
    },
    {
        "question_id": 160,
        "answer_sql": "SELECT count(account_id) FROM loan WHERE amount < 200000"
    },
    {
        "question_id": 161,
        "answer_sql": "SELECT card.type FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN card ON disp.disp_id = card.disp_id WHERE client.client_id = 13539"
    },
    {
        "question_id": 162,
        "answer_sql": "SELECT district.A3 FROM client INNER JOIN district ON client.district_id = district.district_id WHERE client.client_id = 3541"
    },
    {
        "question_id": 163,
        "answer_sql": " SELECT district.A3 FROM district INNER JOIN loan ON district.district_id = loan.account_id WHERE loan.status = 'A' GROUP BY district.A3 ORDER BY count(district.A3) DESC LIMIT 1"
    },
    {
        "question_id": 164,
        "answer_sql": "SELECT k_symbol FROM `order` WHERE order_id = 32423"
    },
    {
        "question_id": 165,
        "answer_sql": "SELECT DISTINCT trans.type FROM account INNER JOIN trans ON account.account_id = trans.account_id WHERE account.district_id = 5"
    },
    {
        "question_id": 166,
        "answer_sql": "SELECT count(account_id) FROM account WHERE district_id = ( SELECT district_id FROM district WHERE A3 = 'Jesenik' )"
    },
    {
        "question_id": 167,
        "answer_sql": ""
    },
    {
        "question_id": 168,
        "answer_sql": "SELECT cast(sum(CASE WHEN client.gender = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / count(client.gender) FROM client INNER JOIN district ON client.district_id = district.district_id"
    },
    {
        "question_id": 169,
        "answer_sql": "SELECT cast((sum(CASE WHEN substr(cast(date AS TEXT), -4) = '1997' THEN amount ELSE 0 END) - sum(CASE WHEN substr(cast(date AS TEXT), -4) = '1996' THEN amount ELSE 0 END)) AS REAL) * 100 / sum(CASE WHEN substr(cast(date AS TEXT), -4) = '1996' THEN amount ELSE 0 END) FROM client INNER JOIN loan ON client.client_id = loan.account_id WHERE client.gender = 'M'"
    },
    {
        "question_id": 170,
        "answer_sql": "SELECT count(account_id) FROM trans WHERE TYPE = 'VYBER KARTOU' AND date > '1995-01-01'"
    },
    {
        "question_id": 171,
        "answer_sql": "SELECT sum(CASE WHEN district.A3 = 'East Bohemia' THEN 1 ELSE 0 END) - sum(CASE WHEN district.A3 = 'North Bohemia' THEN 1 ELSE 0 END) FROM district INNER JOIN account ON district.district_id = account.district_id WHERE strftime('%Y', account.date) = '1996'"
    },
    {
        "question_id": 172,
        "answer_sql": "SELECT count(disp_id) FROM disp WHERE account_id BETWEEN 1 AND 10"
    },
    {
        "question_id": 173,
        "answer_sql": "SELECT account.frequency, sum(trans.amount) FROM account INNER JOIN trans ON account.account_id = trans.account_id WHERE account.account_id = 3 AND trans.type = 'debit'"
    },
    {
        "question_id": 174,
        "answer_sql": "SELECT district.A13 FROM district INNER JOIN account ON district.district_id = account.district_id WHERE account.account_id = 130"
    },
    {
        "question_id": 175,
        "answer_sql": "SELECT count(account_id) FROM account WHERE frequency = 'POPLATEK PO OBRATU'"
    },
    {
        "question_id": 176,
        "answer_sql": "SELECT sum(loan.amount), CASE WHEN sum(loan.amount) > 0 THEN 'Good' ELSE 'Bad' END FROM client INNER JOIN loan ON client.client_id = loan.account_id WHERE client.client_id = 992"
    },
    {
        "question_id": 177,
        "answer_sql": "SELECT sum(CASE WHEN client.gender = 'male' THEN 1 ELSE 0 END) FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id WHERE client.client_id = 4"
    },
    {
        "question_id": 178,
        "answer_sql": "SELECT card.type FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN card ON disp.disp_id = card.disp_id WHERE client.client_id = 9"
    },
    {
        "question_id": 179,
        "answer_sql": "SELECT sum(trans.amount) FROM client INNER JOIN loan ON client.client_id = loan.account_id INNER JOIN account ON loan.account_id = account.account_id INNER JOIN trans ON account.account_id = trans.account_id WHERE client.client_id = 617 AND account.date LIKE '1998%'"
    },
    {
        "question_id": 180,
        "answer_sql": ""
    },
    {
        "question_id": 181,
        "answer_sql": "SELECT client.client_id FROM client INNER JOIN loan ON client.client_id = loan.account_id WHERE client.gender = 'F' ORDER BY loan.amount DESC LIMIT 3"
    },
    {
        "question_id": 182,
        "answer_sql": "SELECT count(client.client_id) FROM client INNER JOIN loan ON client.client_id = loan.account_id WHERE client.gender = 'M' AND client.birth_date BETWEEN '1974-01-01' AND '1976-12-31' AND loan.amount > 4000"
    },
    {
        "question_id": 183,
        "answer_sql": "SELECT count(account_id) FROM account WHERE strftime('%Y', date) > '1996'"
    },
    {
        "question_id": 184,
        "answer_sql": " SELECT count(client_id) FROM client WHERE gender = 'F' AND district_id IN ( SELECT district_id FROM card WHERE TYPE = 'junior' )"
    },
    {
        "question_id": 185,
        "answer_sql": "SELECT cast(sum(CASE WHEN client.gender = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / count(account.district_id) FROM client INNER JOIN account ON client.district_id = account.district_id WHERE account.district_id = 1"
    },
    {
        "question_id": 186,
        "answer_sql": "SELECT cast(sum(CASE WHEN gender = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / count(gender) FROM client"
    },
    {
        "question_id": 187,
        "answer_sql": "SELECT count(DISTINCT client.client_id) FROM client INNER JOIN account ON client.district_id = account.district_id WHERE account.frequency = 'POPLATEK TYDNE' AND client.gender = 'U\u017cytkownik'"
    },
    {
        "question_id": 188,
        "answer_sql": "SELECT account.account_id FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE loan.duration > 24 AND account.date < '1997-01-01' ORDER BY loan.amount ASC LIMIT 1"
    },
    {
        "question_id": 189,
        "answer_sql": "SELECT account.account_id FROM client INNER JOIN account ON client.district_id = account.district_id WHERE client.gender = 'F' ORDER BY client.birth_date ASC, account.frequency ASC LIMIT 1"
    },
    {
        "question_id": 190,
        "answer_sql": "SELECT count(client_id) FROM client WHERE district_id IN ( SELECT district_id FROM district WHERE A3 = 'east Bohemia' AND substr(birth_date, 1, 4) = '1920' )"
    },
    {
        "question_id": 191,
        "answer_sql": "SELECT count(account_id) FROM account WHERE frequency = 'POPLATEK TYDNE'"
    },
    {
        "question_id": 192,
        "answer_sql": "SELECT cast(sum(CASE WHEN loan.status = 'C' THEN loan.amount ELSE 0 END) AS REAL) / count(loan.status) FROM loan INNER JOIN trans ON loan.account_id = trans.account_id WHERE trans.type = 'issuance'"
    },
    {
        "question_id": 193,
        "answer_sql": " SELECT district_id FROM client WHERE district_id IS NOT NULL"
    },
    {
        "question_id": 194,
        "answer_sql": "SELECT client.client_id, client.birth_date FROM client INNER JOIN card ON client.client_id = card.disp_id WHERE card.type = 'gold'"
    },
    {
        "question_id": 195,
        "answer_sql": "SELECT bond_type FROM bond GROUP BY bond_type ORDER BY count(bond_type) DESC LIMIT 1"
    },
    {
        "question_id": 196,
        "answer_sql": "SELECT count(molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '-' AND atom.element = 'cl'"
    },
    {
        "question_id": 197,
        "answer_sql": "SELECT cast(count(CASE WHEN element = 'o' THEN 1 ELSE NULL END) AS REAL) / count(atom_id) FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id WHERE bond_type = '-'"
    },
    {
        "question_id": 198,
        "answer_sql": "SELECT cast(sum(CASE WHEN bond.bond_type = '-' THEN 1 ELSE 0 END) AS REAL) / count(atom.atom_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN bond ON bond.molecule_id = atom.molecule_id WHERE molecule.label = '+'"
    },
    {
        "question_id": 199,
        "answer_sql": "SELECT count(atom.atom_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '-' AND atom.element = 'na'"
    },
    {
        "question_id": 200,
        "answer_sql": "SELECT molecule.label FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '#' AND molecule.label = '+'"
    },
    {
        "question_id": 201,
        "answer_sql": "SELECT cast(sum(CASE WHEN element = 'c' THEN 1 ELSE 0 END) AS REAL) * 100 / count(atom_id) FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id WHERE bond_type = ' = '"
    },
    {
        "question_id": 202,
        "answer_sql": "SELECT count(bond_id) FROM bond WHERE bond_type = '#'"
    },
    {
        "question_id": 203,
        "answer_sql": "SELECT count(atom_id) FROM atom WHERE element != 'br'"
    },
    {
        "question_id": 204,
        "answer_sql": "SELECT count(molecule_id) FROM molecule WHERE label = '+'"
    },
    {
        "question_id": 205,
        "answer_sql": "SELECT molecule_id FROM atom WHERE element = 'si'"
    },
    {
        "question_id": 206,
        "answer_sql": "SELECT DISTINCT CASE WHEN element = 'cl' THEN 'Chlorine' WHEN element = 'c' THEN 'Carbon' WHEN element = 'h' THEN 'Hydrogen' WHEN element = 'o' THEN 'Oxygen' WHEN element = 's' THEN 'Sulfur' WHEN element = 'n' THEN 'Nitrogen' WHEN element = 'p' THEN 'Phosphorus' WHEN element = 'na' THEN 'Sodium' WHEN element = 'br' THEN 'Bromine' WHEN element = 'f' THEN 'Fluorine' WHEN element = 'i' THEN 'Iodine' WHEN element = 'sn' THEN 'Tin' WHEN element = 'pb' THEN 'Lead' WHEN element = 'te' THEN 'Tellurium' WHEN element = 'ca' THEN 'Calcium' END FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id WHERE bond_id = 'TR004_8_9'"
    },
    {
        "question_id": 207,
        "answer_sql": ""
    },
    {
        "question_id": 208,
        "answer_sql": "SELECT label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE element = 'h' GROUP BY label ORDER BY count(label) DESC LIMIT 1"
    },
    {
        "question_id": 209,
        "answer_sql": " SELECT bond_type FROM bond WHERE molecule_id = ( SELECT molecule_id FROM atom WHERE element = 'te' )"
    },
    {
        "question_id": 210,
        "answer_sql": ""
    },
    {
        "question_id": 211,
        "answer_sql": ""
    },
    {
        "question_id": 212,
        "answer_sql": " SELECT element FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '-' GROUP BY atom.element ORDER BY count(atom.element) ASC LIMIT 1"
    },
    {
        "question_id": 213,
        "answer_sql": ""
    },
    {
        "question_id": 214,
        "answer_sql": "SELECT DISTINCT CASE WHEN label = '+' THEN 'carcinogenic' WHEN label = '-' THEN 'non-carcinogenic' END FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE element != 'sn'"
    },
    {
        "question_id": 215,
        "answer_sql": "SELECT count(atom.atom_id) FROM `atom` INNER JOIN `bond` ON atom.molecule_id = bond.molecule_id WHERE bond.bond_type = '-' AND atom.element IN ('i', 's')"
    },
    {
        "question_id": 216,
        "answer_sql": "SELECT DISTINCT atom.atom_id FROM `bond` INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE bond.bond_type = '#'"
    },
    {
        "question_id": 217,
        "answer_sql": "SELECT atom_id FROM atom WHERE molecule_id = 'TR181'"
    },
    {
        "question_id": 218,
        "answer_sql": "SELECT cast(sum(CASE WHEN atom.element = 'f' THEN 1 ELSE 0 END) AS REAL) * 100 / count(atom.molecule_id) FROM `atom` INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+'"
    },
    {
        "question_id": 219,
        "answer_sql": "SELECT cast(sum(CASE WHEN bond.bond_type = '#' THEN 1 ELSE 0 END) AS REAL) * 100 / count(bond.bond_id) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE molecule.label = '+'"
    },
    {
        "question_id": 220,
        "answer_sql": "SELECT element FROM atom WHERE molecule_id = 'TR000' ORDER BY element LIMIT 3"
    },
    {
        "question_id": 221,
        "answer_sql": "SELECT atom_id FROM connected WHERE bond_id = 'TR001_2_6'"
    },
    {
        "question_id": 222,
        "answer_sql": "SELECT sum(iif(label = '+', 1, 0)) - sum(iif(label = '-', 1, 0)) AS diff FROM molecule"
    },
    {
        "question_id": 223,
        "answer_sql": ""
    },
    {
        "question_id": 224,
        "answer_sql": "SELECT bond_id FROM connected WHERE atom_id = 'TR000_2'"
    },
    {
        "question_id": 225,
        "answer_sql": "SELECT label FROM molecule ORDER BY label LIMIT 5"
    },
    {
        "question_id": 226,
        "answer_sql": "SELECT cast(sum(CASE WHEN bond_type = ' = ' THEN 1 ELSE 0 END) AS REAL) * 100 / count(bond_id) FROM bond WHERE molecule_id = 'TR008'"
    },
    {
        "question_id": 227,
        "answer_sql": "SELECT cast(sum(CASE WHEN label = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / count(molecule_id) FROM molecule"
    },
    {
        "question_id": 228,
        "answer_sql": "SELECT cast(sum(CASE WHEN element = 'h' THEN 1 ELSE 0 END) AS REAL) * 100 / count(atom_id) FROM atom WHERE molecule_id = 'TR206'"
    },
    {
        "question_id": 229,
        "answer_sql": "SELECT bond_type FROM bond WHERE molecule_id = 'TR000'"
    },
    {
        "question_id": 230,
        "answer_sql": "SELECT DISTINCT CASE WHEN label = '+' THEN 'carcinogenic' ELSE 'non-carcinogenic' END FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.molecule_id = 'TR060'"
    },
    {
        "question_id": 231,
        "answer_sql": "SELECT CASE WHEN sum(CASE WHEN bond_type = 'positive' THEN 1 ELSE 0 END) > sum(CASE WHEN bond_type = 'negative' THEN 1 ELSE 0 END) THEN 'carcinogenic' ELSE 'non-carcinogenic' END FROM bond WHERE molecule_id = 'TR018'"
    },
    {
        "question_id": 232,
        "answer_sql": "SELECT molecule.label FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '-' GROUP BY molecule.label ORDER BY count(bond.bond_type) LIMIT 3"
    },
    {
        "question_id": 233,
        "answer_sql": "SELECT bond_id FROM bond WHERE molecule_id = 'TR006' ORDER BY bond_id LIMIT 2"
    },
    {
        "question_id": 234,
        "answer_sql": "SELECT count(bond_id) FROM connected WHERE atom_id = 'TR009_12' OR atom_id2 = 'TR009_12'"
    },
    {
        "question_id": 235,
        "answer_sql": "SELECT count(molecule_id) FROM atom WHERE element = 'br' AND molecule_id IN ( SELECT molecule_id FROM molecule WHERE label = '+' )"
    },
    {
        "question_id": 236,
        "answer_sql": ""
    },
    {
        "question_id": 237,
        "answer_sql": "SELECT CASE WHEN label = '+' THEN 'Yes' ELSE 'No' END FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.atom_id = 'TR001_10'"
    },
    {
        "question_id": 238,
        "answer_sql": "SELECT count(DISTINCT molecule_id) FROM bond WHERE bond_type = '#'"
    },
    {
        "question_id": 239,
        "answer_sql": "SELECT count(bond_id) FROM connected WHERE atom_id = 'TR_19'"
    },
    {
        "question_id": 240,
        "answer_sql": "SELECT DISTINCT CASE WHEN element = 'cl' THEN 'Chlorine' WHEN element = 'c' THEN 'Carbon' WHEN element = 'h' THEN 'Hydrogen' WHEN element = 'o' THEN 'Oxygen' WHEN element = 's' THEN 'Sulfur' WHEN element = 'n' THEN 'Nitrogen' WHEN element = 'p' THEN 'Phosphorus' WHEN element = 'na' THEN 'Sodium' WHEN element = 'br' THEN 'Bromine' WHEN element = 'f' THEN 'Fluorine' WHEN element = 'i' THEN 'Iodine' WHEN element = 'sn' THEN 'Tin' WHEN element = 'pb' THEN 'Lead' WHEN element = 'te' THEN 'Tellurium' WHEN element = 'ca' THEN 'Calcium' END FROM atom WHERE molecule_id = 'TR004'"
    },
    {
        "question_id": 241,
        "answer_sql": "SELECT count(molecule_id) FROM molecule WHERE label = '-'"
    },
    {
        "question_id": 242,
        "answer_sql": ""
    },
    {
        "question_id": 243,
        "answer_sql": ""
    },
    {
        "question_id": 244,
        "answer_sql": "SELECT label FROM molecule WHERE label = ( SELECT label FROM molecule GROUP BY label ORDER BY count(label) DESC LIMIT 1 )"
    },
    {
        "question_id": 245,
        "answer_sql": "SELECT cast(count(atom_id) AS REAL) / count(DISTINCT molecule_id) FROM `atom` WHERE element = 'i'"
    },
    {
        "question_id": 246,
        "answer_sql": ""
    },
    {
        "question_id": 247,
        "answer_sql": "SELECT DISTINCT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')"
    },
    {
        "question_id": 248,
        "answer_sql": "SELECT bond_id FROM bond WHERE molecule_id = 'TR447' AND bond_type = '#'"
    },
    {
        "question_id": 249,
        "answer_sql": "SELECT DISTINCT CASE WHEN atom.element = 'cl' THEN 'Chlorine' WHEN atom.element = 'c' THEN 'Carbon' WHEN atom.element = 'h' THEN 'Hydrogen' WHEN atom.element = 'o' THEN 'Oxygen' WHEN atom.element = 's' THEN 'Sulfur' WHEN atom.element = 'n' THEN 'Nitrogen' WHEN atom.element = 'p' THEN 'Phosphorus' WHEN atom.element = 'na' THEN 'Sodium' WHEN atom.element = 'br' THEN 'Bromine' WHEN atom.element = 'f' THEN 'Fluorine' WHEN atom.element = 'i' THEN 'Iodine' WHEN atom.element = 'sn' THEN 'Tin' WHEN atom.element = 'pb' THEN 'Lead' WHEN atom.element = 'te' THEN 'Tellurium' WHEN atom.element = 'ca' THEN 'Calcium' END FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_id = 'TR144_8_19'"
    },
    {
        "question_id": 250,
        "answer_sql": " SELECT label FROM molecule WHERE label = '+' GROUP BY label ORDER BY count(molecule_id) DESC LIMIT 1"
    },
    {
        "question_id": 251,
        "answer_sql": "SELECT label FROM molecule WHERE label = '+'"
    },
    {
        "question_id": 252,
        "answer_sql": "SELECT atom_id FROM atom WHERE element = 'pb'"
    },
    {
        "question_id": 253,
        "answer_sql": "SELECT DISTINCT atom.element FROM bond INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE bond.bond_type = '#' AND atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')"
    },
    {
        "question_id": 254,
        "answer_sql": "SELECT cast(count(bond.bond_id) AS REAL) * 100 / count(DISTINCT atom.atom_id) FROM bond INNER JOIN atom ON bond.molecule_id = atom.molecule_id GROUP BY bond.bond_type ORDER BY count(bond.bond_id) DESC LIMIT 1"
    },
    {
        "question_id": 255,
        "answer_sql": ""
    },
    {
        "question_id": 256,
        "answer_sql": "SELECT sum(CASE WHEN element IN ('c', 'h') THEN 1 ELSE 0 END) FROM `atom`"
    },
    {
        "question_id": 257,
        "answer_sql": "SELECT atom_id FROM atom WHERE element = 's'"
    },
    {
        "question_id": 258,
        "answer_sql": ""
    },
    {
        "question_id": 259,
        "answer_sql": "SELECT count(DISTINCT element) FROM atom WHERE molecule_id IN ( SELECT molecule_id FROM bond WHERE bond_type = '-' )"
    },
    {
        "question_id": 260,
        "answer_sql": "SELECT count(atom_id) FROM atom WHERE element IN ('p', 'br')"
    },
    {
        "question_id": 261,
        "answer_sql": "SELECT bond.bond_id FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE molecule.label = '+'"
    },
    {
        "question_id": 262,
        "answer_sql": "SELECT molecule_id FROM molecule WHERE label = '-'"
    },
    {
        "question_id": 263,
        "answer_sql": "SELECT cast(sum(CASE WHEN element = 'cl' THEN 1 ELSE 0 END) AS REAL) * 100 / count(atom_id) FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id WHERE bond_type = '-'"
    },
    {
        "question_id": 264,
        "answer_sql": "SELECT label FROM molecule WHERE molecule_id IN ('TR000', 'TR001', 'TR002')"
    },
    {
        "question_id": 265,
        "answer_sql": "SELECT molecule_id FROM molecule WHERE label = '-'"
    },
    {
        "question_id": 266,
        "answer_sql": "SELECT sum(CASE WHEN label = '+' THEN 1 ELSE 0 END) FROM molecule WHERE molecule_id BETWEEN 'TR000' AND 'TR030'"
    },
    {
        "question_id": 267,
        "answer_sql": "SELECT DISTINCT bond_type FROM bond WHERE molecule_id BETWEEN 'TR000' AND 'TR050'"
    },
    {
        "question_id": 268,
        "answer_sql": "SELECT DISTINCT CASE WHEN element = 'cl' THEN 'Chlorine' WHEN element = 'c' THEN 'Carbon' WHEN element = 'h' THEN 'Hydrogen' WHEN element = 'o' THEN 'Oxygen' WHEN element = 's' THEN 'Sulfur' WHEN element = 'n' THEN 'Nitrogen' WHEN element = 'p' THEN 'Phosphorus' WHEN element = 'na' THEN 'Sodium' WHEN element = 'br' THEN 'Bromine' WHEN element = 'f' THEN 'Fluorine' WHEN element = 'i' THEN 'Iodine' WHEN element = 'sn' THEN 'Tin' WHEN element = 'pb' THEN 'Lead' WHEN element = 'te' THEN 'Tellurium' WHEN element = 'ca' THEN 'Calcium' END FROM `atom` INNER JOIN `bond` ON atom.molecule_id = bond.molecule_id WHERE bond_id = 'TR001_10_11'"
    },
    {
        "question_id": 269,
        "answer_sql": " SELECT count(bond_id) FROM bond WHERE bond_type = 'SINGLE'"
    },
    {
        "question_id": 270,
        "answer_sql": "SELECT CASE WHEN sum(CASE WHEN label = '+' THEN 1 ELSE 0 END) > sum(CASE WHEN label = '-' THEN 1 ELSE 0 END) THEN 'carcinogenic' ELSE 'non-carcinogenic' END FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'ca'"
    },
    {
        "question_id": 271,
        "answer_sql": "SELECT DISTINCT CASE WHEN atom.element = 'cl' AND atom.element = 'c' THEN 'SELECT bond_id FROM bond WHERE bond_id = ' || bond_id END FROM bond INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE bond_id = 'TR001_1_8'"
    },
    {
        "question_id": 272,
        "answer_sql": ""
    },
    {
        "question_id": 273,
        "answer_sql": "SELECT cast(sum(CASE WHEN atom.element = 'pb' THEN 1 ELSE 0 END) AS REAL) * 100 / count(molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+'"
    },
    {
        "question_id": 274,
        "answer_sql": "SELECT DISTINCT element FROM atom WHERE molecule_id = 'TR001'"
    },
    {
        "question_id": 275,
        "answer_sql": ""
    },
    {
        "question_id": 276,
        "answer_sql": "SELECT atom.atom_id FROM `bond` INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE bond.bond_type = '#' LIMIT 1"
    },
    {
        "question_id": 277,
        "answer_sql": "SELECT DISTINCT atom.element FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id WHERE bond.bond_id = 'TR005_16_26'"
    },
    {
        "question_id": 278,
        "answer_sql": "SELECT count(DISTINCT molecule_id) FROM bond WHERE bond_type = '-'"
    },
    {
        "question_id": 279,
        "answer_sql": "SELECT molecule.label FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_id = 'TR001_10_11'"
    },
    {
        "question_id": 280,
        "answer_sql": "SELECT bond.bond_id, CASE WHEN molecule.label = '+' THEN 'carcinogenic' ELSE 'non-carcinogenic' END AS label FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '#'"
    },
    {
        "question_id": 281,
        "answer_sql": ""
    },
    {
        "question_id": 282,
        "answer_sql": "SELECT cast(sum(CASE WHEN element = 'h' THEN 1 ELSE 0 END) AS REAL) / count(element) FROM atom WHERE molecule_id = 'TR006'"
    },
    {
        "question_id": 283,
        "answer_sql": "SELECT CASE WHEN label = '+' THEN 'carcinogenic' ELSE 'non-carcinogenic' END FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE element = 'ca'"
    },
    {
        "question_id": 284,
        "answer_sql": "SELECT bond_type FROM bond WHERE molecule_id IN ( SELECT molecule_id FROM atom WHERE element = 'te' )"
    },
    {
        "question_id": 285,
        "answer_sql": "SELECT DISTINCT atom.element FROM bond INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE bond.bond_id = 'TR001_10_11'"
    },
    {
        "question_id": 286,
        "answer_sql": "SELECT cast(count(CASE WHEN bond_type = '#' THEN molecule_id ELSE NULL END) AS REAL) * 100 / count(molecule_id) FROM bond"
    },
    {
        "question_id": 287,
        "answer_sql": "SELECT cast(sum(CASE WHEN bond_type = ' = ' THEN 1 ELSE 0 END) AS REAL) * 100 / count(bond_id) FROM bond WHERE molecule_id = 'TR047'"
    },
    {
        "question_id": 288,
        "answer_sql": "SELECT CASE WHEN label = '+' THEN 'Yes' ELSE 'No' END FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.atom_id = 'TR001_1'"
    },
    {
        "question_id": 289,
        "answer_sql": "SELECT CASE WHEN label = '+' THEN 'Yes' ELSE 'No' END AS RESULT FROM molecule WHERE molecule_id = 'TR151'"
    },
    {
        "question_id": 290,
        "answer_sql": "SELECT DISTINCT CASE WHEN element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca') THEN element ELSE NULL END FROM atom WHERE molecule_id = 'TR151'"
    },
    {
        "question_id": 291,
        "answer_sql": "SELECT count(molecule_id) FROM molecule WHERE label = '+'"
    },
    {
        "question_id": 292,
        "answer_sql": "SELECT atom.atom_id FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id BETWEEN 'TR010' AND 'TR050' AND atom.element = 'c'"
    },
    {
        "question_id": 293,
        "answer_sql": "SELECT count(atom_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE label = '+'"
    },
    {
        "question_id": 294,
        "answer_sql": ""
    },
    {
        "question_id": 295,
        "answer_sql": "SELECT count(atom_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+' AND atom.element = 'h'"
    },
    {
        "question_id": 296,
        "answer_sql": ""
    },
    {
        "question_id": 297,
        "answer_sql": "SELECT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'c' AND molecule.label != '-'"
    },
    {
        "question_id": 298,
        "answer_sql": "SELECT cast(sum(CASE WHEN atom.element = 'h' THEN 1 ELSE 0 END) AS REAL) * 100 / count(molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+'"
    },
    {
        "question_id": 299,
        "answer_sql": "SELECT label FROM molecule WHERE label = '+'"
    },
    {
        "question_id": 300,
        "answer_sql": "SELECT atom_id FROM atom WHERE molecule_id = 'TR186'"
    },
    {
        "question_id": 301,
        "answer_sql": ""
    },
    {
        "question_id": 302,
        "answer_sql": "SELECT DISTINCT element FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id WHERE bond_id = 'TR001_2_4'"
    },
    {
        "question_id": 303,
        "answer_sql": "SELECT count(DISTINCT bond_id) FROM bond WHERE molecule_id = 'TR006' AND bond_type = ' = '"
    },
    {
        "question_id": 304,
        "answer_sql": "SELECT DISTINCT molecule_id, element FROM atom WHERE element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')"
    },
    {
        "question_id": 305,
        "answer_sql": ""
    },
    {
        "question_id": 306,
        "answer_sql": "SELECT molecule_id FROM bond WHERE bond_type = '#' GROUP BY molecule_id"
    },
    {
        "question_id": 307,
        "answer_sql": "SELECT atom.element FROM bond INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE bond.bond_id = 'TR000_2_3'"
    },
    {
        "question_id": 308,
        "answer_sql": "SELECT count(bond_id) FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id WHERE atom.element = 'cl'"
    },
    {
        "question_id": 309,
        "answer_sql": "SELECT atom.atom_id, count(bond.bond_type) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN bond ON bond.molecule_id = molecule.molecule_id WHERE molecule.label = 'TR346'"
    },
    {
        "question_id": 310,
        "answer_sql": "SELECT count(DISTINCT molecule.molecule_id) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = ' = ' AND molecule.label = '+'"
    },
    {
        "question_id": 311,
        "answer_sql": "SELECT count(molecule_id) FROM atom WHERE element = 's' AND molecule_id IN ( SELECT molecule_id FROM bond WHERE bond_type = ' = ' OR bond_type = ' = ')"
    },
    {
        "question_id": 312,
        "answer_sql": "SELECT label FROM molecule WHERE molecule_id = ( SELECT molecule_id FROM bond WHERE bond_id = 'TR001_2_4' )"
    },
    {
        "question_id": 313,
        "answer_sql": "SELECT count(atom_id) FROM atom WHERE molecule_id = 'TR005'"
    },
    {
        "question_id": 314,
        "answer_sql": "SELECT count(DISTINCT bond_id) FROM bond WHERE bond_type = '-'"
    },
    {
        "question_id": 315,
        "answer_sql": "SELECT molecule_id FROM molecule WHERE label = '+'"
    },
    {
        "question_id": 316,
        "answer_sql": "SELECT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'c' AND molecule.label != '-'"
    },
    {
        "question_id": 317,
        "answer_sql": "SELECT cast(sum(CASE WHEN atom.element = 'cl' THEN 1 ELSE 0 END) AS REAL) * 100 / count(molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+'"
    },
    {
        "question_id": 318,
        "answer_sql": "SELECT molecule_id FROM bond WHERE bond_id = 'TR001_1_7'"
    },
    {
        "question_id": 319,
        "answer_sql": "SELECT count(DISTINCT atom.element) FROM `atom` INNER JOIN `bond` ON atom.atom_id = bond.molecule_id WHERE bond.bond_id = 'TR001_3_4'"
    },
    {
        "question_id": 320,
        "answer_sql": ""
    },
    {
        "question_id": 321,
        "answer_sql": "SELECT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE atom.atom_id = 'TR000_2' AND connected.atom_id2 = 'TR000_4'"
    },
    {
        "question_id": 322,
        "answer_sql": "SELECT atom.element FROM atom INNER JOIN molecule ON molecule.molecule_id = atom.molecule_id WHERE atom.atom_id = 'TR000_1'"
    },
    {
        "question_id": 323,
        "answer_sql": "SELECT CASE WHEN label = '+' THEN 'Yes' ELSE 'No' END AS RESULT FROM molecule WHERE molecule_id = 'TR000'"
    },
    {
        "question_id": 324,
        "answer_sql": "SELECT cast(sum(CASE WHEN bond_type = '-' THEN 1 ELSE 0 END) AS REAL) * 100 / count(bond_id) FROM bond"
    },
    {
        "question_id": 325,
        "answer_sql": "SELECT count(molecule_id) FROM molecule WHERE label = '+'"
    },
    {
        "question_id": 326,
        "answer_sql": ""
    },
    {
        "question_id": 327,
        "answer_sql": "SELECT label FROM molecule WHERE label = '-' GROUP BY label HAVING count(molecule_id) > 5"
    },
    {
        "question_id": 328,
        "answer_sql": ""
    },
    {
        "question_id": 329,
        "answer_sql": "SELECT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+' GROUP BY molecule.label ORDER BY count(atom.atom_id) DESC LIMIT 1"
    },
    {
        "question_id": 330,
        "answer_sql": "SELECT cast(sum(CASE WHEN molecule.label = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / count(molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN bond ON bond.molecule_id = atom.molecule_id WHERE bond.bond_type = '#' AND atom.element = 'h'"
    },
    {
        "question_id": 331,
        "answer_sql": "SELECT count(molecule_id) FROM molecule WHERE label = '+'"
    },
    {
        "question_id": 332,
        "answer_sql": "SELECT count(DISTINCT molecule_id) FROM bond WHERE bond_type = '-' AND molecule_id BETWEEN 'TR004' AND 'TR010'"
    },
    {
        "question_id": 333,
        "answer_sql": "SELECT count(atom_id) FROM atom WHERE element = 'c'"
    },
    {
        "question_id": 334,
        "answer_sql": " SELECT label FROM molecule WHERE molecule_id = ( SELECT molecule_id FROM atom WHERE atom_id = 'TR004_7' )"
    },
    {
        "question_id": 335,
        "answer_sql": "SELECT count(atom.molecule_id) FROM `atom` INNER JOIN `bond` ON atom.atom_id = bond.molecule_id WHERE bond.bond_type = ' = ' AND atom.element = 'o'"
    },
    {
        "question_id": 336,
        "answer_sql": "SELECT count(molecule_id) FROM molecule WHERE label = '-'"
    },
    {
        "question_id": 337,
        "answer_sql": ""
    },
    {
        "question_id": 338,
        "answer_sql": ""
    },
    {
        "question_id": 339,
        "answer_sql": "SELECT atom_id FROM `atom` WHERE molecule_id IN ( SELECT molecule_id FROM molecule WHERE label = '+' ) AND element = 'o'"
    },
    {
        "question_id": 340,
        "answer_sql": ""
    },
    {
        "question_id": 341,
        "answer_sql": " SELECT DISTINCT borderColor FROM cards WHERE cardKingdomFoilId IS NULL AND cardKingdomId IS NULL"
    },
    {
        "question_id": 342,
        "answer_sql": "SELECT name FROM cards WHERE faceConvertedManaCost = ( SELECT max(faceConvertedManaCost) FROM cards )"
    },
    {
        "question_id": 343,
        "answer_sql": "SELECT name FROM cards WHERE frameVersion = 2015 AND edhrecRank < 100"
    },
    {
        "question_id": 344,
        "answer_sql": "SELECT t.name FROM cards AS t INNER JOIN legalities AS s ON t.uuid = s.uuid WHERE s.status = 'Banned' AND s.format = 'gladiator' AND t.rarity = 'mythic'"
    },
    {
        "question_id": 345,
        "answer_sql": "SELECT DISTINCT legalities.status FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.types = 'Artifact' AND cards.side IS NULL AND legalities.format = 'vintage'"
    },
    {
        "question_id": 346,
        "answer_sql": ""
    },
    {
        "question_id": 347,
        "answer_sql": ""
    },
    {
        "question_id": 348,
        "answer_sql": "SELECT text FROM rulings WHERE uuid = ( SELECT uuid FROM cards WHERE name = 'Sublime Epiphany' AND number = '74s' )"
    },
    {
        "question_id": 349,
        "answer_sql": "SELECT cards.name, cards.artist, count(rulings.uuid) FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.isPromo = 1 GROUP BY cards.name, cards.artist ORDER BY count(rulings.uuid) DESC LIMIT 1"
    },
    {
        "question_id": 350,
        "answer_sql": ""
    },
    {
        "question_id": 351,
        "answer_sql": "SELECT name FROM cards WHERE name IN ( SELECT name FROM foreign_data WHERE LANGUAGE = 'Japanese' )"
    },
    {
        "question_id": 352,
        "answer_sql": "SELECT cast(sum(CASE WHEN LANGUAGE = 'Chinese Simplified' THEN 1 ELSE 0 END) AS REAL) * 100 / count(id) FROM foreign_data"
    },
    {
        "question_id": 353,
        "answer_sql": "SELECT sets.name, sets.totalSetSize FROM sets INNER JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.language = 'Italian'"
    },
    {
        "question_id": 354,
        "answer_sql": "SELECT count(DISTINCT TYPE) FROM cards WHERE artist = 'Aaron Boyd'"
    },
    {
        "question_id": 355,
        "answer_sql": "SELECT keywords FROM cards WHERE name = 'Angel of Mercy'"
    },
    {
        "question_id": 356,
        "answer_sql": "SELECT count(id) FROM cards WHERE power = '*'"
    },
    {
        "question_id": 357,
        "answer_sql": "SELECT promoTypes FROM cards WHERE name = 'Duress'"
    },
    {
        "question_id": 358,
        "answer_sql": "SELECT borderColor FROM cards WHERE name = 'Ancestor''s Chosen'"
    },
    {
        "question_id": 359,
        "answer_sql": "SELECT DISTINCT originalType FROM cards WHERE name = 'Ancestor''s Chosen'"
    },
    {
        "question_id": 360,
        "answer_sql": ""
    },
    {
        "question_id": 361,
        "answer_sql": "SELECT count(cards.id) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'restricted' AND cards.isTextless = 0"
    },
    {
        "question_id": 362,
        "answer_sql": ""
    },
    {
        "question_id": 363,
        "answer_sql": "SELECT count(cards.id) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'restricted' AND cards.isStarter = 1"
    },
    {
        "question_id": 364,
        "answer_sql": "SELECT legalities.status FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.name = 'Cloudchaser Eagle'"
    },
    {
        "question_id": 365,
        "answer_sql": "SELECT TYPE FROM cards WHERE name = 'Benalish Knight'"
    },
    {
        "question_id": 366,
        "answer_sql": "SELECT DISTINCT legalities.format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.name = 'Benalish Knight'"
    },
    {
        "question_id": 367,
        "answer_sql": ""
    },
    {
        "question_id": 368,
        "answer_sql": "SELECT cast(sum(CASE WHEN borderColor = 'borderless' THEN 1 ELSE 0 END) AS REAL) * 100 / count(id) FROM cards"
    },
    {
        "question_id": 369,
        "answer_sql": "SELECT count(cards.id) FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'German' AND cards.isReprint = 1"
    },
    {
        "question_id": 370,
        "answer_sql": ""
    },
    {
        "question_id": 371,
        "answer_sql": " SELECT cast(sum(CASE WHEN foreign_data.language = 'French' THEN 1 ELSE 0 END) AS REAL) * 100 / count(foreign_data.uuid) FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.isStorySpotlight = 1"
    },
    {
        "question_id": 372,
        "answer_sql": "SELECT count(id) FROM cards WHERE toughness = 99"
    },
    {
        "question_id": 373,
        "answer_sql": "SELECT name FROM cards WHERE artist = 'Aaron Boyd'"
    },
    {
        "question_id": 374,
        "answer_sql": "SELECT count(id) FROM cards WHERE borderColor = 'black' AND availability = 'mtgo'"
    },
    {
        "question_id": 375,
        "answer_sql": "SELECT id FROM cards WHERE convertedManaCost = 0"
    },
    {
        "question_id": 376,
        "answer_sql": "SELECT DISTINCT layout FROM cards WHERE keywords LIKE '%flying%'"
    },
    {
        "question_id": 377,
        "answer_sql": "SELECT count(uuid) FROM cards WHERE originalType = 'Summon - Angel' AND (subtypes NOT LIKE '%Angel%' OR subtypes IS NULL)"
    },
    {
        "question_id": 378,
        "answer_sql": "SELECT t.id FROM ( SELECT cards.id FROM cards INNER JOIN ( SELECT cardKingdomId, cardKingdomFoilId FROM cards WHERE cardKingdomId IS NOT NULL OR cardKingdomFoilId IS NOT NULL ) AS t2 ON cards.id = t2.cardKingdomId OR cards.id = t2.cardKingdomFoilId ) AS t"
    },
    {
        "question_id": 379,
        "answer_sql": "SELECT id FROM cards WHERE duelDeck = 'a'"
    },
    {
        "question_id": 380,
        "answer_sql": "SELECT DISTINCT edhrecRank FROM cards WHERE frameVersion = '2015'"
    },
    {
        "question_id": 381,
        "answer_sql": ""
    },
    {
        "question_id": 382,
        "answer_sql": ""
    },
    {
        "question_id": 383,
        "answer_sql": ""
    },
    {
        "question_id": 384,
        "answer_sql": ""
    },
    {
        "question_id": 385,
        "answer_sql": "SELECT text FROM rulings WHERE uuid = ( SELECT uuid FROM cards WHERE name = 'Beacon of Immortality' )"
    },
    {
        "question_id": 386,
        "answer_sql": " SELECT count(id) FROM cards WHERE frameVersion = 'future' AND ( SELECT status FROM legalities WHERE uuid = cards.uuid ) = 'legal'"
    },
    {
        "question_id": 387,
        "answer_sql": "SELECT name, colors FROM cards WHERE setCode = 'OGW'"
    },
    {
        "question_id": 388,
        "answer_sql": ""
    },
    {
        "question_id": 389,
        "answer_sql": "SELECT cards.name, rulings.date FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.originalType = 'Creature - Elf'"
    },
    {
        "question_id": 390,
        "answer_sql": "SELECT cards.colors, legalities.format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.id BETWEEN 1 AND 20"
    },
    {
        "question_id": 391,
        "answer_sql": "SELECT t.name FROM cards AS t INNER JOIN foreign_data AS f ON t.uuid = f.uuid WHERE t.originalType = 'Artifact' AND t.colors = 'B' AND f.language IS NOT NULL"
    },
    {
        "question_id": 392,
        "answer_sql": "SELECT t.name FROM ( SELECT cards.name, rulings.date FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.rarity = 'uncommon' ORDER BY rulings.date ASC LIMIT 3 ) t"
    },
    {
        "question_id": 393,
        "answer_sql": "SELECT count(id) FROM cards WHERE artist = 'John Avon' AND cardKingdomId IS NULL AND cardKingdomFoilId IS NOT NULL"
    },
    {
        "question_id": 394,
        "answer_sql": "SELECT count(id) FROM cards WHERE borderColor = 'white' AND (cardKingdomId IS NULL OR cardKingdomId = cardKingdomFoilId)"
    },
    {
        "question_id": 395,
        "answer_sql": "SELECT count(id) FROM cards WHERE artist = 'UDON' AND availability = 'mtgo' AND hand = -1"
    },
    {
        "question_id": 396,
        "answer_sql": "SELECT count(id) FROM cards WHERE hasContentWarning = 1 AND availability = 'paper' AND frameVersion = '1993'"
    },
    {
        "question_id": 397,
        "answer_sql": "SELECT DISTINCT 'SELECT manaCost FROM cards WHERE layout = ' || 'normal' || ' AND frameVersion = ' || '2003' || ' AND borderColor = ' || 'black' || ' AND availability = ' || 'paper'"
    },
    {
        "question_id": 398,
        "answer_sql": "SELECT sum(convertedManaCost) FROM cards WHERE artist = 'Rob Alexander'"
    },
    {
        "question_id": 399,
        "answer_sql": "SELECT DISTINCT types FROM cards WHERE availability = 'arena'"
    },
    {
        "question_id": 400,
        "answer_sql": "SELECT DISTINCT setCode FROM set_translations WHERE LANGUAGE = 'Spanish'"
    },
    {
        "question_id": 401,
        "answer_sql": "SELECT cast(sum(CASE WHEN hand = '+3' THEN 1 ELSE 0 END) AS REAL) * 100 / count(id) FROM cards WHERE frameEffects = 'legendary'"
    },
    {
        "question_id": 402,
        "answer_sql": "SELECT cast(sum(CASE WHEN isStorySpotlight = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / count(id) FROM cards WHERE isTextless = 1"
    },
    {
        "question_id": 403,
        "answer_sql": " SELECT cast(sum(CASE WHEN foreign_data.language = 'Spanish' THEN 1 ELSE 0 END) AS REAL) * 100 / count(foreign_data.id) FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid"
    },
    {
        "question_id": 404,
        "answer_sql": "SELECT DISTINCT name FROM sets WHERE baseSetSize = 309"
    },
    {
        "question_id": 405,
        "answer_sql": "SELECT count(id) FROM sets WHERE block = 'Commander' AND name LIKE '%Portuguese (Brasil)%'"
    },
    {
        "question_id": 406,
        "answer_sql": ""
    },
    {
        "question_id": 407,
        "answer_sql": "SELECT DISTINCT TYPE FROM cards WHERE TYPE IS NOT NULL AND supertypes IS NOT NULL AND subtypes IS NOT NULL"
    },
    {
        "question_id": 408,
        "answer_sql": "SELECT count(id) FROM cards WHERE power IS NULL"
    },
    {
        "question_id": 409,
        "answer_sql": "SELECT count(t.uuid) FROM ( SELECT cards.uuid FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE rulings.text = 'This is a triggered mana ability' AND cards.side IS NULL GROUP BY cards.uuid ) t"
    },
    {
        "question_id": 410,
        "answer_sql": "SELECT id FROM cards WHERE artist = 'Erica Yang' AND availability = 'paper'"
    },
    {
        "question_id": 411,
        "answer_sql": ""
    },
    {
        "question_id": 412,
        "answer_sql": "SELECT foreign_data.name FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'French' AND cards.artist = 'Matthew D. Wilson' AND cards.borderColor = 'black' AND cards.layout = 'normal'"
    },
    {
        "question_id": 413,
        "answer_sql": "SELECT count(cards.id) FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE rulings.date = '2009-01-10' AND cards.rarity = 'rare'"
    },
    {
        "question_id": 414,
        "answer_sql": "SELECT DISTINCT foreign_data.language FROM sets INNER JOIN set_translations ON sets.code = set_translations.setCode INNER JOIN foreign_data ON set_translations.language = foreign_data.language WHERE sets.baseSetSize = 180"
    },
    {
        "question_id": 415,
        "answer_sql": ""
    },
    {
        "question_id": 416,
        "answer_sql": ""
    },
    {
        "question_id": 417,
        "answer_sql": "SELECT cast(sum(CASE WHEN LANGUAGE = 'Japanese' THEN 1 ELSE 0 END) AS REAL) * 100 / count(LANGUAGE) FROM set_translations WHERE LANGUAGE = 'Japanese'"
    },
    {
        "question_id": 418,
        "answer_sql": "SELECT DISTINCT availability FROM cards WHERE artist = 'Daren Bader'"
    },
    {
        "question_id": 419,
        "answer_sql": "SELECT count(id) FROM cards WHERE edhrecRank > 12000 AND borderColor = 'borderless'"
    },
    {
        "question_id": 420,
        "answer_sql": "SELECT count(id) FROM cards WHERE isOversized = 1 AND isReprint = 1 AND isPromo = 1"
    },
    {
        "question_id": 421,
        "answer_sql": "SELECT cards.name FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.power IS NULL OR cards.power = '*' AND cards.promoTypes = 'arenaleague' ORDER BY cards.name LIMIT 3"
    },
    {
        "question_id": 422,
        "answer_sql": "SELECT DISTINCT language FROM foreign_data WHERE multiverseid = 149934"
    },
    {
        "question_id": 423,
        "answer_sql": "SELECT cardKingdomId, cardKingdomFoilId FROM cards WHERE cardKingdomId IS NOT NULL AND cardKingdomFoilId IS NOT NULL ORDER BY cardKingdomFoilId LIMIT 3"
    },
    {
        "question_id": 424,
        "answer_sql": "SELECT cast(sum(CASE WHEN isTextless = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / count(id) FROM cards WHERE layout = 'normal'"
    },
    {
        "question_id": 425,
        "answer_sql": "SELECT DISTINCT number FROM cards WHERE side IS NULL AND (subtypes LIKE '%Angel%' OR subtypes LIKE '%Wizard%')"
    },
    {
        "question_id": 426,
        "answer_sql": "SELECT name FROM sets WHERE mtgoCode IS NULL OR mtgoCode = '' LIMIT 3"
    },
    {
        "question_id": 427,
        "answer_sql": "SELECT DISTINCT t.language FROM sets INNER JOIN set_translations AS t ON sets.code = t.setCode WHERE sets.mcmName = 'Archenemy' AND sets.code = 'ARC'"
    },
    {
        "question_id": 428,
        "answer_sql": ""
    },
    {
        "question_id": 429,
        "answer_sql": ""
    },
    {
        "question_id": 430,
        "answer_sql": ""
    },
    {
        "question_id": 431,
        "answer_sql": ""
    },
    {
        "question_id": 432,
        "answer_sql": ""
    },
    {
        "question_id": 433,
        "answer_sql": "SELECT cast(sum(CASE WHEN isOnlineOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / count(isOnlineOnly) FROM cards"
    },
    {
        "question_id": 434,
        "answer_sql": "SELECT count(code) FROM sets WHERE mtgoCode IS NULL OR mtgoCode = ''"
    },
    {
        "question_id": 435,
        "answer_sql": "SELECT count(id) FROM cards WHERE borderColor = 'black'"
    },
    {
        "question_id": 436,
        "answer_sql": "SELECT id FROM cards WHERE frameEffects = 'extendedart'"
    },
    {
        "question_id": 437,
        "answer_sql": "SELECT DISTINCT CASE WHEN isFullArt = 1 THEN name ELSE NULL END FROM cards WHERE borderColor = 'black'"
    },
    {
        "question_id": 438,
        "answer_sql": "SELECT DISTINCT 'SELECT DISTINCT `language` FROM `set_translations` WHERE `setCode` = 174'"
    },
    {
        "question_id": 439,
        "answer_sql": "SELECT name FROM sets WHERE code = 'ALL'"
    },
    {
        "question_id": 440,
        "answer_sql": ""
    },
    {
        "question_id": 441,
        "answer_sql": "SELECT code FROM sets WHERE releaseDate = '2007-07-13'"
    },
    {
        "question_id": 442,
        "answer_sql": "SELECT baseSetSize, code FROM sets WHERE block IN ('Masques', 'Mirage')"
    },
    {
        "question_id": 443,
        "answer_sql": "SELECT code FROM sets WHERE TYPE = 'expansion'"
    },
    {
        "question_id": 444,
        "answer_sql": "SELECT name, TYPE FROM cards WHERE watermark = 'boros'"
    },
    {
        "question_id": 445,
        "answer_sql": "SELECT DISTINCT foreign_data.language, foreign_data.flavorText, cards.type FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.watermark = 'colorpie'"
    },
    {
        "question_id": 446,
        "answer_sql": "SELECT cast(sum(CASE WHEN cards.convertedManaCost = 10 THEN 1 ELSE 0 END) AS REAL) * 100 / count(cards.convertedManaCost) FROM cards INNER JOIN sets ON cards.setCode = sets.code WHERE sets.name = 'Abyssal Horror'"
    },
    {
        "question_id": 447,
        "answer_sql": "SELECT code FROM sets WHERE TYPE = 'expansion'"
    },
    {
        "question_id": 448,
        "answer_sql": "SELECT cards.name, foreign_data.type FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.watermark = 'abzan'"
    },
    {
        "question_id": 449,
        "answer_sql": " SELECT DISTINCT foreign_data.language, foreign_data.type FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.watermark = 'azorius'"
    },
    {
        "question_id": 450,
        "answer_sql": "SELECT count(id) FROM cards WHERE artist = 'Aaron Miller' AND cardKingdomId IS NOT NULL AND cardKingdomFoilId IS NOT NULL"
    },
    {
        "question_id": 451,
        "answer_sql": "SELECT count(id) FROM cards WHERE availability LIKE '%paper%' AND hand LIKE '+%'"
    },
    {
        "question_id": 452,
        "answer_sql": ""
    },
    {
        "question_id": 453,
        "answer_sql": ""
    },
    {
        "question_id": 454,
        "answer_sql": "SELECT count(id) FROM cards WHERE borderColor = 'White' AND (power = '*' OR power IS NULL)"
    },
    {
        "question_id": 455,
        "answer_sql": "SELECT name FROM cards WHERE isPromo = 1 AND side IS NOT NULL"
    },
    {
        "question_id": 456,
        "answer_sql": "SELECT DISTINCT types FROM cards WHERE name = 'Molimo, Maro-Sorcerer'"
    },
    {
        "question_id": 457,
        "answer_sql": "SELECT DISTINCT purchaseUrls FROM cards WHERE promoTypes = 'bundle'"
    },
    {
        "question_id": 458,
        "answer_sql": "SELECT count(DISTINCT artist) FROM cards WHERE borderColor = 'black' AND availability LIKE '%arena,mtgo%'"
    },
    {
        "question_id": 459,
        "answer_sql": "SELECT CASE WHEN name = 'Serra Angel' THEN 'Serra Angel' WHEN name = 'Shrine Keeper' THEN 'Shrine Keeper' END AS RESULT FROM cards ORDER BY cast(convertedManaCost AS REAL) DESC LIMIT 1"
    },
    {
        "question_id": 460,
        "answer_sql": "SELECT artist FROM cards WHERE flavorName = 'Battra, Dark Destroyer'"
    },
    {
        "question_id": 461,
        "answer_sql": "SELECT name FROM cards WHERE frameVersion = '2003' ORDER BY convertedManaCost DESC LIMIT 3"
    },
    {
        "question_id": 462,
        "answer_sql": ""
    },
    {
        "question_id": 463,
        "answer_sql": "SELECT count(t.id) FROM sets INNER JOIN set_translations AS t ON sets.code = t.setcode WHERE t.language = 'en' AND sets.name = 'Angel of Mercy'"
    },
    {
        "question_id": 464,
        "answer_sql": "SELECT name FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE translation = 'Hauptset Zehnte Edition'"
    },
    {
        "question_id": 465,
        "answer_sql": "SELECT CASE WHEN count(t.name) > 0 THEN 'SELECT name FROM cards WHERE name = ''Ancestor''s Chosen'' AND LANGUAGE = ''Korean'' LIMIT 1' ELSE 'SELECT name FROM cards WHERE name = ''Ancestor''s Chosen'' LIMIT 1' END AS t FROM ( SELECT name FROM cards WHERE name = 'Ancestor''s Chosen' ) t"
    },
    {
        "question_id": 466,
        "answer_sql": "SELECT count(id) FROM cards WHERE artist = 'Adam Rex' AND setCode = 'Hauptset Zehnte Edition'"
    },
    {
        "question_id": 467,
        "answer_sql": "SELECT count(code) FROM sets WHERE name = 'Hauptset Zehnte Edition'"
    },
    {
        "question_id": 468,
        "answer_sql": "SELECT DISTINCT 'SELECT translation FROM set_translations WHERE name = ''Eighth Edition'' AND language = ''Chinese'''"
    },
    {
        "question_id": 469,
        "answer_sql": "SELECT CASE WHEN count(CASE WHEN mtgoCode IS NOT NULL THEN 1 ELSE NULL END) > 0 THEN 'YES' ELSE 'NO' END FROM sets WHERE name = 'Angel of Mercy'"
    },
    {
        "question_id": 470,
        "answer_sql": ""
    },
    {
        "question_id": 471,
        "answer_sql": "SELECT DISTINCT t.translation FROM set_translations t WHERE t.translation = 'Hauptset Zehnte Edition'"
    },
    {
        "question_id": 472,
        "answer_sql": "SELECT count(sets.code) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setCode WHERE sets.block = 'Ice Age' AND set_translations.language = 'Italian'"
    },
    {
        "question_id": 473,
        "answer_sql": " SELECT name FROM sets WHERE isForeignOnly = 1"
    },
    {
        "question_id": 474,
        "answer_sql": "SELECT count(sets.code) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.language = 'Italian' AND sets.baseSetSize < 10"
    },
    {
        "question_id": 475,
        "answer_sql": "SELECT count(id) FROM cards WHERE name = 'Coldsnap' AND borderColor = 'black'"
    },
    {
        "question_id": 476,
        "answer_sql": "SELECT cards.name FROM cards INNER JOIN sets ON cards.setCode = sets.code WHERE sets.name = 'Coldsnap' ORDER BY cards.convertedManaCost DESC LIMIT 1"
    },
    {
        "question_id": 477,
        "answer_sql": "SELECT artist FROM cards WHERE artist IN ('Jeremy Jarvis', 'Aaron Miller', 'Chippy')"
    },
    {
        "question_id": 478,
        "answer_sql": ""
    },
    {
        "question_id": 479,
        "answer_sql": "SELECT count(cards.id) FROM cards INNER JOIN sets ON cards.setCode = sets.code WHERE sets.name = 'Coldsnap' AND cards.convertedManaCost > 5 AND (cards.power = '*' OR ( SELECT t1.power FROM cards AS t1 WHERE t1.id = cards.id ) IS NULL)"
    },
    {
        "question_id": 480,
        "answer_sql": " SELECT flavorText FROM cards WHERE name = 'Ancestor''s Chosen'"
    },
    {
        "question_id": 481,
        "answer_sql": "SELECT foreign_data.language FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.name = 'Ancestor''s Chosen' AND cards.flavorText IS NOT NULL"
    },
    {
        "question_id": 482,
        "answer_sql": " SELECT TYPE FROM cards WHERE name = 'Ancestor''s Chosen'"
    },
    {
        "question_id": 483,
        "answer_sql": "SELECT rulings.text FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid INNER JOIN sets ON cards.setCode = sets.code INNER JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.language = 'Italian' AND sets.name = 'Coldsnap'"
    },
    {
        "question_id": 484,
        "answer_sql": "SELECT foreign_data.name FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid INNER JOIN sets ON cards.setCode = sets.code WHERE sets.name = 'Coldsnap' AND foreign_data.language = 'Italian' ORDER BY cards.convertedManaCost DESC LIMIT 1"
    },
    {
        "question_id": 485,
        "answer_sql": "SELECT date FROM rulings WHERE uuid = ( SELECT uuid FROM cards WHERE name = 'Reminisce' )"
    },
    {
        "question_id": 486,
        "answer_sql": "SELECT cast(sum(CASE WHEN convertedManaCost = 7 THEN 1 ELSE 0 END) AS REAL) * 100 / count(id) FROM cards WHERE name = 'Coldsnap'"
    },
    {
        "question_id": 487,
        "answer_sql": "SELECT cast(sum(CASE WHEN cardKingdomId IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / count(name) FROM cards WHERE name = 'Coldsnap'"
    },
    {
        "question_id": 488,
        "answer_sql": "SELECT code FROM sets WHERE releaseDate = '2017-07-14'"
    },
    {
        "question_id": 489,
        "answer_sql": "SELECT keyruneCode FROM sets WHERE code = 'PKHC'"
    },
    {
        "question_id": 490,
        "answer_sql": "SELECT mcmId FROM sets WHERE code = 'SS2'"
    },
    {
        "question_id": 491,
        "answer_sql": "SELECT mcmName FROM sets WHERE releaseDate = '2017-06-09'"
    },
    {
        "question_id": 492,
        "answer_sql": "SELECT t.expansiontype FROM ( SELECT DISTINCT CASE WHEN name LIKE '%From the Vault: Lore%' THEN TYPE ELSE NULL END AS expansiontype FROM sets ) t"
    },
    {
        "question_id": 493,
        "answer_sql": "SELECT parentCode FROM sets WHERE name = 'Commander 2014 Oversized'"
    },
    {
        "question_id": 494,
        "answer_sql": "SELECT DISTINCT CASE WHEN cards.hasContentWarning = 1 THEN 'YES' ELSE 'NO' END AS hasContentWarning, rulings.text FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.artist = 'Jim Pavelec'"
    },
    {
        "question_id": 495,
        "answer_sql": "SELECT DISTINCT t.releaseDate FROM sets AS t INNER JOIN cards AS s ON t.code = s.setCode WHERE s.name = 'Evacuation'"
    },
    {
        "question_id": 496,
        "answer_sql": "SELECT cast(sum(CASE WHEN set_translations.translation = 'Rinascita di Alara' THEN sets.baseSetSize ELSE 0 END) AS REAL) / sum(CASE WHEN set_translations.translation = 'Rinascita di Alara' THEN 1 ELSE 0 END) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setCode"
    },
    {
        "question_id": 497,
        "answer_sql": " SELECT DISTINCT t.type FROM sets AS t INNER JOIN set_translations AS tt ON t.code = tt.setCode WHERE tt.translation = 'Huiti\u00e8me \u00e9dition'"
    },
    {
        "question_id": 498,
        "answer_sql": "SELECT DISTINCT 'SELECT name FROM sets WHERE name = ''Tendo Ice Bridge'' AND TYPE = ''expansion'' AND language = ''French'''"
    },
    {
        "question_id": 499,
        "answer_sql": "SELECT count(t.name) FROM sets AS t WHERE t.name = 'Salvat 2011'"
    },
    {
        "question_id": 500,
        "answer_sql": "SELECT DISTINCT set_translations.translation FROM cards INNER JOIN set_translations ON cards.setCode = set_translations.setCode WHERE cards.name = 'Fellwar Stone' AND set_translations.language = 'Japanese'"
    },
    {
        "question_id": 501,
        "answer_sql": ""
    },
    {
        "question_id": 502,
        "answer_sql": "SELECT DISTINCT 'SELECT DISTINCT t.releaseDate FROM sets AS t INNER JOIN set_translations AS u ON t.code = u.setCode WHERE u.translation = ''Ola de fr\u00edo'''"
    },
    {
        "question_id": 503,
        "answer_sql": "SELECT DISTINCT sets.type FROM sets INNER JOIN cards ON sets.code = cards.setcode WHERE cards.name = 'Samite Pilgrim'"
    },
    {
        "question_id": 504,
        "answer_sql": "SELECT count(id) FROM sets WHERE name = 'World Championship Decks 2004' AND mcmName = '3'"
    },
    {
        "question_id": 505,
        "answer_sql": "SELECT set_translations.translation FROM sets INNER JOIN set_translations ON sets.code = set_translations.setCode WHERE sets.name = 'Mirrodin' AND set_translations.language = 'Chinese Simplified'"
    },
    {
        "question_id": 506,
        "answer_sql": ""
    },
    {
        "question_id": 507,
        "answer_sql": "SELECT cast(sum(CASE WHEN isOnlineOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / count(name) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.language = 'Portuguese (Brazil)'"
    },
    {
        "question_id": 508,
        "answer_sql": "SELECT DISTINCT availability FROM cards WHERE artist = 'Aleksi Briclot' AND isTextless = 1"
    },
    {
        "question_id": 509,
        "answer_sql": "SELECT id FROM sets ORDER BY baseSetSize DESC LIMIT 1"
    },
    {
        "question_id": 510,
        "answer_sql": "SELECT DISTINCT cards.artist FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.side IS NULL ORDER BY cards.faceConvertedManaCost DESC LIMIT 1"
    },
    {
        "question_id": 511,
        "answer_sql": "SELECT frameEffects FROM cards WHERE cardKingdomId IS NULL OR cardKingdomFoilId IS NULL GROUP BY frameEffects ORDER BY count(frameEffects) DESC LIMIT 1"
    },
    {
        "question_id": 512,
        "answer_sql": "SELECT count(id) FROM cards WHERE duelDeck = 'a' AND hasFoil = 0 AND (power IS NULL OR power = '*')"
    },
    {
        "question_id": 513,
        "answer_sql": "SELECT code FROM sets WHERE TYPE = 'commander' ORDER BY totalSetSize DESC LIMIT 1"
    },
    {
        "question_id": 514,
        "answer_sql": " SELECT name FROM cards WHERE manaCost = ( SELECT max(manaCost) FROM cards )"
    },
    {
        "question_id": 515,
        "answer_sql": ""
    },
    {
        "question_id": 516,
        "answer_sql": "SELECT count(cards.id) FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'French' AND cards.artist = 'Volkan Baga'"
    },
    {
        "question_id": 517,
        "answer_sql": "SELECT count(t.uuid) FROM cards AS t INNER JOIN legalities AS s ON t.uuid = s.uuid WHERE t.name = 'Abundance' AND s.status = 'Legal' AND t.types = 'Enchantment' AND t.rarity = 'rare'"
    },
    {
        "question_id": 518,
        "answer_sql": "SELECT DISTINCT t.play_format, t.card_name FROM ( SELECT DISTINCT CASE WHEN legalities.status = 'banned' THEN cards.name ELSE NULL END AS card_name, cards.uuid AS card_uuid, legalities.format AS play_format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid ) AS t ORDER BY t.play_format DESC LIMIT 1"
    },
    {
        "question_id": 519,
        "answer_sql": ""
    },
    {
        "question_id": 520,
        "answer_sql": "SELECT DISTINCT cards.artist, legalities.format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid ORDER BY cards.artist LIMIT 1"
    },
    {
        "question_id": 521,
        "answer_sql": "SELECT DISTINCT CASE WHEN status = 'restricted' THEN 'RESTRICTED' ELSE status END AS status FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE frameVersion = '1997' AND artist = 'D. Alexander Gregory' AND hasContentWarning = 1 AND format = 'legacy'"
    },
    {
        "question_id": 522,
        "answer_sql": "SELECT name, format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE edhrecRank = 1"
    },
    {
        "question_id": 523,
        "answer_sql": ""
    },
    {
        "question_id": 524,
        "answer_sql": "SELECT artist FROM cards WHERE borderColor = 'black' AND availability = 'arena'"
    },
    {
        "question_id": 525,
        "answer_sql": ""
    },
    {
        "question_id": 526,
        "answer_sql": "SELECT count(id) FROM cards WHERE artist = 'Matthew D. Wilson' AND availability = 'paper'"
    },
    {
        "question_id": 527,
        "answer_sql": ""
    },
    {
        "question_id": 528,
        "answer_sql": ""
    },
    {
        "question_id": 529,
        "answer_sql": ""
    },
    {
        "question_id": 530,
        "answer_sql": "SELECT DISTINCT frameVersion, artist FROM cards WHERE artist = 'Allen Williams' AND frameVersion IS NOT NULL AND frameVersion <> ''"
    },
    {
        "question_id": 531,
        "answer_sql": "SELECT DisplayName FROM users WHERE DisplayName = 'Harlan' OR DisplayName = 'Jarrod Dixon' ORDER BY Reputation DESC LIMIT 1"
    },
    {
        "question_id": 532,
        "answer_sql": ""
    },
    {
        "question_id": 533,
        "answer_sql": "SELECT count(Id) FROM users WHERE LastAccessDate > '2014-09-01 00:00:00'"
    },
    {
        "question_id": 534,
        "answer_sql": "SELECT OwnerDisplayName FROM posts ORDER BY ViewCount DESC LIMIT 1"
    },
    {
        "question_id": 535,
        "answer_sql": "SELECT count(DISTINCT users.Id) FROM users INNER JOIN votes ON users.Id = votes.UserId WHERE users.UpVotes > 100 AND users.DownVotes > 1"
    },
    {
        "question_id": 536,
        "answer_sql": "SELECT count(users.Id) FROM users INNER JOIN badges ON users.Id = badges.UserId WHERE strftime('%Y', users.CreationDate) > '2013' AND users.Views > 10"
    },
    {
        "question_id": 537,
        "answer_sql": "SELECT count(Id) FROM posts WHERE OwnerDisplayName = 'csgillespie'"
    },
    {
        "question_id": 538,
        "answer_sql": ""
    },
    {
        "question_id": 539,
        "answer_sql": "SELECT OwnerDisplayName FROM posts WHERE Title = 'Eliciting priors from experts'"
    },
    {
        "question_id": 540,
        "answer_sql": "SELECT posts.Title FROM users INNER JOIN posts ON users.Id = posts.OwnerUserId WHERE users.DisplayName = 'csgillespie' ORDER BY posts.ViewCount DESC LIMIT 1"
    },
    {
        "question_id": 541,
        "answer_sql": "SELECT OwnerDisplayName FROM posts ORDER BY FavoriteCount DESC LIMIT 1"
    },
    {
        "question_id": 542,
        "answer_sql": "SELECT sum(CommentCount) FROM posts WHERE OwnerDisplayName = 'csgillespie'"
    },
    {
        "question_id": 543,
        "answer_sql": "SELECT posts.AnswerCount FROM users INNER JOIN posts ON users.Id = posts.OwnerUserId WHERE users.DisplayName = 'csgillespie' ORDER BY posts.AnswerCount DESC LIMIT 1"
    },
    {
        "question_id": 544,
        "answer_sql": "SELECT LastEditorDisplayName FROM posts WHERE Title = 'Examples for teaching: Correlation does not mean causation'"
    },
    {
        "question_id": 545,
        "answer_sql": "SELECT count(Id) FROM posts WHERE OwnerDisplayName = 'csgillespie' AND ParentId IS NULL"
    },
    {
        "question_id": 546,
        "answer_sql": "SELECT OwnerDisplayName FROM posts WHERE ClosedDate IS NOT NULL"
    },
    {
        "question_id": 547,
        "answer_sql": "SELECT count(posts.Id) FROM users INNER JOIN posts ON users.Id = posts.OwnerUserId WHERE users.Age > 65 AND posts.Score >= 20"
    },
    {
        "question_id": 548,
        "answer_sql": "SELECT users.Location FROM posts INNER JOIN users ON posts.OwnerUserId = users.Id WHERE posts.Title = 'Eliciting priors from experts'"
    },
    {
        "question_id": 549,
        "answer_sql": "SELECT posts.Body FROM posts INNER JOIN tags ON posts.Id = tags.ExcerptPostId WHERE tags.TagName = 'bayesian'"
    },
    {
        "question_id": 550,
        "answer_sql": "SELECT posts.Body FROM posts INNER JOIN tags ON posts.Id = tags.ExcerptPostId ORDER BY tags.Count DESC LIMIT 1"
    },
    {
        "question_id": 551,
        "answer_sql": "SELECT count(badges.Name) FROM users INNER JOIN badges ON users.Id = badges.UserId WHERE users.DisplayName = 'csgillespie'"
    },
    {
        "question_id": 552,
        "answer_sql": "SELECT badges.Name FROM users INNER JOIN badges ON users.Id = badges.UserId WHERE users.DisplayName = 'csgillespie'"
    },
    {
        "question_id": 553,
        "answer_sql": "SELECT count(DISTINCT badges.Name) FROM users INNER JOIN badges ON users.Id = badges.UserId WHERE users.DisplayName = 'csgillespie' AND strftime('%Y', badges.Date) = '2011'"
    },
    {
        "question_id": 554,
        "answer_sql": "SELECT DisplayName FROM users WHERE Id = ( SELECT UserId FROM badges GROUP BY UserId ORDER BY count(Id) DESC LIMIT 1 )"
    },
    {
        "question_id": 555,
        "answer_sql": "SELECT cast(sum(score) AS REAL) / count(score) FROM posts WHERE OwnerDisplayName = 'csgillespie'"
    },
    {
        "question_id": 556,
        "answer_sql": "SELECT cast(count(badges.Id) AS REAL) / count(DISTINCT users.DisplayName) FROM users INNER JOIN badges ON users.Id = badges.UserId WHERE users.Views > 200"
    },
    {
        "question_id": 557,
        "answer_sql": "SELECT cast(sum(CASE WHEN users.Age > 65 THEN 1 ELSE 0 END) AS REAL) * 100 / count(users.Id) FROM posts INNER JOIN users ON posts.OwnerUserId = users.Id WHERE posts.Score > 20"
    },
    {
        "question_id": 558,
        "answer_sql": "SELECT count(Id) FROM votes WHERE CreationDate = '2010-07-19' AND UserId = 58"
    },
    {
        "question_id": 559,
        "answer_sql": "SELECT CreationDate FROM votes GROUP BY CreationDate ORDER BY count(Id) DESC LIMIT 1"
    },
    {
        "question_id": 560,
        "answer_sql": "SELECT count(badges.Id) FROM badges INNER JOIN users ON badges.UserId = users.Id WHERE badges.Name = 'Revival'"
    },
    {
        "question_id": 561,
        "answer_sql": "SELECT posts.Title FROM comments INNER JOIN posts ON comments.PostId = posts.Id ORDER BY comments.Score DESC LIMIT 1"
    },
    {
        "question_id": 562,
        "answer_sql": "SELECT count(comments.PostId) FROM posts INNER JOIN comments ON posts.Id = comments.PostId WHERE posts.ViewCount = 1910"
    },
    {
        "question_id": 563,
        "answer_sql": " SELECT FavoriteCount FROM posts WHERE OwnerUserId = '3025'"
    },
    {
        "question_id": 564,
        "answer_sql": " SELECT Body FROM posts WHERE ParentId = 107829 AND CommentCount = 1"
    },
    {
        "question_id": 565,
        "answer_sql": ""
    },
    {
        "question_id": 566,
        "answer_sql": "SELECT users.Reputation FROM users INNER JOIN posts ON users.Id = posts.OwnerUserId WHERE posts.Id = 65041"
    },
    {
        "question_id": 567,
        "answer_sql": "SELECT count(posts.Id) FROM users INNER JOIN posts ON users.Id = posts.OwnerUserId WHERE users.DisplayName = 'Tiago Pasqualini'"
    },
    {
        "question_id": 568,
        "answer_sql": "SELECT OwnerDisplayName FROM posts WHERE Id = 6347"
    },
    {
        "question_id": 569,
        "answer_sql": "SELECT sum(CASE WHEN PostTypeId = 1 THEN 1 ELSE 0 END) FROM posts WHERE Title LIKE '%data visualization%'"
    },
    {
        "question_id": 570,
        "answer_sql": "SELECT badges.Name FROM users INNER JOIN badges ON users.Id = badges.UserId WHERE users.DisplayName = 'DatEpicCoderGuyWhoPrograms'"
    },
    {
        "question_id": 571,
        "answer_sql": "SELECT cast(count(posts.Id) AS REAL) / count(votes.Id) FROM users INNER JOIN posts ON users.Id = posts.OwnerUserId INNER JOIN votes ON users.Id = votes.UserId WHERE users.Id = 24"
    },
    {
        "question_id": 572,
        "answer_sql": "SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'"
    },
    {
        "question_id": 573,
        "answer_sql": "SELECT Text FROM comments WHERE Score = 17"
    },
    {
        "question_id": 574,
        "answer_sql": "SELECT DisplayName FROM users WHERE WebsiteUrl = 'http://stackoverflow.com'"
    },
    {
        "question_id": 575,
        "answer_sql": "SELECT Name FROM badges WHERE UserId = ( SELECT Id FROM users WHERE DisplayName = 'SilentGhost' )"
    },
    {
        "question_id": 576,
        "answer_sql": "SELECT UserDisplayName FROM comments WHERE Text = 'thank you user93!'"
    },
    {
        "question_id": 577,
        "answer_sql": "SELECT comments.Text FROM users INNER JOIN comments ON users.Id = comments.UserId WHERE users.DisplayName = 'A Lion'"
    },
    {
        "question_id": 578,
        "answer_sql": "SELECT users.DisplayName, users.Reputation FROM users INNER JOIN posts ON users.Id = posts.OwnerUserId WHERE posts.Title = 'Understanding what Dassault iSight is doing?'"
    },
    {
        "question_id": 579,
        "answer_sql": "SELECT comments.Text FROM posts INNER JOIN comments ON posts.Id = comments.PostId WHERE posts.Title = 'How does gentle boosting differ from AdaBoost?'"
    },
    {
        "question_id": 580,
        "answer_sql": "SELECT users.DisplayName FROM users INNER JOIN badges ON users.Id = badges.UserId WHERE badges.Name = 'Necromancer'"
    },
    {
        "question_id": 581,
        "answer_sql": "SELECT LastEditorDisplayName FROM posts WHERE Title = 'Open source tools for visualizing multi-dimensional data?'"
    },
    {
        "question_id": 582,
        "answer_sql": "SELECT DISTINCT posts.Title FROM users INNER JOIN posts ON users.Id = posts.OwnerUserId WHERE users.DisplayName = 'Vebjorn Ljosa'"
    },
    {
        "question_id": 583,
        "answer_sql": "SELECT sum(UpVotes + DownVotes), WebsiteUrl FROM users INNER JOIN postHistory ON users.Id = postHistory.UserId WHERE DisplayName = 'Yevgeny'"
    },
    {
        "question_id": 584,
        "answer_sql": "SELECT comments.Text FROM posts INNER JOIN comments ON posts.Id = comments.PostId WHERE posts.Title = 'Why square the difference instead of taking the absolute value in standard deviation?'"
    },
    {
        "question_id": 585,
        "answer_sql": "SELECT sum(Votes.BountyAmount) FROM posts INNER JOIN votes ON posts.Id = votes.PostId WHERE posts.Title LIKE '%data%'"
    },
    {
        "question_id": 586,
        "answer_sql": "SELECT users.DisplayName FROM users INNER JOIN votes ON users.Id = votes.UserId WHERE votes.BountyAmount = 50"
    },
    {
        "question_id": 587,
        "answer_sql": "SELECT cast(sum(Score) AS REAL) / count(Id) FROM posts WHERE Tags LIKE '%humor%'"
    },
    {
        "question_id": 588,
        "answer_sql": "SELECT count(comments.Id) FROM comments INNER JOIN users ON comments.UserId = users.Id WHERE users.Id = 13"
    },
    {
        "question_id": 589,
        "answer_sql": "SELECT Id FROM users ORDER BY Reputation DESC LIMIT 1"
    },
    {
        "question_id": 590,
        "answer_sql": "SELECT OwnerUserId FROM posts ORDER BY ViewCount ASC LIMIT 1"
    },
    {
        "question_id": 591,
        "answer_sql": "SELECT count(DISTINCT users.Id) FROM users INNER JOIN badges ON users.Id = badges.UserId WHERE strftime('%Y', badges.Date) = '2011' AND badges.Name = 'Supporter'"
    },
    {
        "question_id": 592,
        "answer_sql": "SELECT count(DISTINCT UserId) FROM badges WHERE Name > 5"
    },
    {
        "question_id": 593,
        "answer_sql": "SELECT count(DISTINCT users.Id) FROM users INNER JOIN badges ON users.Id = badges.UserId WHERE badges.Name = 'Teachers' AND badges.Name = 'Supporter' AND users.Location = 'New York'"
    },
    {
        "question_id": 594,
        "answer_sql": "SELECT users.DisplayName, users.Reputation FROM users INNER JOIN posts ON users.Id = posts.OwnerUserId WHERE posts.Id = 1"
    },
    {
        "question_id": 595,
        "answer_sql": ""
    },
    {
        "question_id": 596,
        "answer_sql": "SELECT users.DisplayName, users.ProfileImageUrl FROM users INNER JOIN comments ON users.Id = comments.UserId GROUP BY users.DisplayName, users.ProfileImageUrl ORDER BY count(comments.UserId) DESC LIMIT 1"
    },
    {
        "question_id": 597,
        "answer_sql": "SELECT count(DISTINCT users.Id) FROM users INNER JOIN badges ON users.Id = badges.UserId WHERE badges.Name = 'Teacher' AND users.Location = 'India'"
    },
    {
        "question_id": 598,
        "answer_sql": "SELECT cast(sum(CASE WHEN strftime('%Y', badges.Date) = '2010' THEN 1 ELSE 0 END) AS REAL) * 100 / count(badges.Name) - cast(sum(CASE WHEN strftime('%Y', badges.Date) = '2011' THEN 1 ELSE 0 END) AS REAL) * 100 / count(badges.Name) FROM badges"
    },
    {
        "question_id": 599,
        "answer_sql": "SELECT DISTINCT PostHistoryTypeId, count(DISTINCT UserId) FROM postHistory WHERE PostId = 3720"
    },
    {
        "question_id": 600,
        "answer_sql": " SELECT Title, ViewCount FROM posts WHERE Id = 61217"
    },
    {
        "question_id": 601,
        "answer_sql": "SELECT comments.Score, postLinks.LinkTypeId FROM comments INNER JOIN postLinks ON comments.PostId = postLinks.PostId WHERE comments.PostId = 395"
    },
    {
        "question_id": 602,
        "answer_sql": "SELECT Id, OwnerUserId FROM posts WHERE Score > 60"
    },
    {
        "question_id": 603,
        "answer_sql": ""
    },
    {
        "question_id": 604,
        "answer_sql": "SELECT cast(sum(users.UpVotes) AS REAL) / count(users.Id), avg(users.Age) FROM users INNER JOIN votes ON users.Id = votes.UserId WHERE votes.PostId IS NOT NULL GROUP BY users.Id HAVING count(users.Id) > 10"
    },
    {
        "question_id": 605,
        "answer_sql": "SELECT count(DISTINCT users.Id) FROM users INNER JOIN badges ON users.Id = badges.UserId WHERE badges.Name = 'Announcer'"
    },
    {
        "question_id": 606,
        "answer_sql": ""
    },
    {
        "question_id": 607,
        "answer_sql": "SELECT count(comments.Score) FROM comments INNER JOIN users ON comments.UserId = users.Id WHERE comments.Score > 60"
    },
    {
        "question_id": 608,
        "answer_sql": "SELECT Text FROM comments WHERE CreationDate = '2010-07-19 19:16:14.0'"
    },
    {
        "question_id": 609,
        "answer_sql": "SELECT count(Id) FROM posts WHERE Score = 10"
    },
    {
        "question_id": 610,
        "answer_sql": "SELECT badges.Name FROM users INNER JOIN badges ON users.Id = badges.UserId ORDER BY users.Reputation DESC LIMIT 1"
    },
    {
        "question_id": 611,
        "answer_sql": "SELECT users.reputation FROM users INNER JOIN badges ON users.Id = badges.UserId WHERE badges.Date = '2010-07-19 19:39:08.0'"
    },
    {
        "question_id": 612,
        "answer_sql": "SELECT Name FROM badges WHERE UserId = ( SELECT Id FROM users WHERE DisplayName = 'Pierre' )"
    },
    {
        "question_id": 613,
        "answer_sql": "SELECT badges.Date FROM users INNER JOIN badges ON users.Id = badges.UserId WHERE users.Location = 'Rochester, NY'"
    },
    {
        "question_id": 614,
        "answer_sql": "SELECT cast(sum(CASE WHEN badges.Name = 'Teacher' THEN 1 ELSE 0 END) AS REAL) * 100 / count(badges.UserId) FROM badges"
    },
    {
        "question_id": 615,
        "answer_sql": "SELECT cast(sum(CASE WHEN users.Age BETWEEN 13 AND 18 THEN 1 ELSE 0 END) AS REAL) * 100 / count(users.Id) FROM users INNER JOIN badges ON users.Id = badges.UserId WHERE badges.Name = 'Organizer'"
    },
    {
        "question_id": 616,
        "answer_sql": "SELECT Score FROM comments WHERE CreationDate = '2010-07-19 19:19:56.0'"
    },
    {
        "question_id": 617,
        "answer_sql": ""
    },
    {
        "question_id": 618,
        "answer_sql": "SELECT users.Age FROM users INNER JOIN badges ON users.Id = badges.UserId WHERE users.Location = 'Vienna, Austria'"
    },
    {
        "question_id": 619,
        "answer_sql": "SELECT count(users.Id) FROM users INNER JOIN badges ON users.Id = badges.UserId WHERE badges.Name = 'Supporter' AND users.Age BETWEEN 19 AND 65"
    },
    {
        "question_id": 620,
        "answer_sql": "SELECT count(DISTINCT users.Id) FROM users INNER JOIN badges ON users.Id = badges.UserId WHERE badges.Date = '2010-07-19 19:39:08'"
    },
    {
        "question_id": 621,
        "answer_sql": "SELECT badges.Name FROM users INNER JOIN badges ON users.Id = badges.UserId ORDER BY users.Reputation ASC LIMIT 1"
    },
    {
        "question_id": 622,
        "answer_sql": "SELECT Name FROM badges WHERE UserId = ( SELECT Id FROM users WHERE DisplayName = 'Sharpie' )"
    },
    {
        "question_id": 623,
        "answer_sql": "SELECT count(users.Id) FROM users INNER JOIN badges ON users.Id = badges.UserId WHERE badges.Name = 'Supporter' AND users.Age > 65"
    },
    {
        "question_id": 624,
        "answer_sql": "SELECT DisplayName FROM users WHERE Id = 30"
    },
    {
        "question_id": 625,
        "answer_sql": "SELECT count(users.Id) FROM users INNER JOIN badges ON users.Id = badges.UserId WHERE users.Location = 'New York'"
    },
    {
        "question_id": 626,
        "answer_sql": "SELECT count(Id) FROM votes WHERE strftime('%Y', CreationDate) = '2010'"
    },
    {
        "question_id": 627,
        "answer_sql": "SELECT count(Id) FROM users WHERE Age BETWEEN 19 AND 65"
    },
    {
        "question_id": 628,
        "answer_sql": "SELECT DisplayName FROM users ORDER BY Views DESC LIMIT 1"
    },
    {
        "question_id": 629,
        "answer_sql": "SELECT cast(sum(CASE WHEN strftime('%Y', CreationDate) = '2010' THEN 1 ELSE 0 END) AS REAL) / sum(CASE WHEN strftime('%Y', CreationDate) = '2011' THEN 1 ELSE 0 END) FROM votes"
    },
    {
        "question_id": 630,
        "answer_sql": ""
    },
    {
        "question_id": 631,
        "answer_sql": "SELECT count(posts.Id) FROM users INNER JOIN posts ON users.Id = posts.OwnerUserId WHERE users.DisplayName = 'Daniel Vassallo'"
    },
    {
        "question_id": 632,
        "answer_sql": "SELECT count(Id) FROM votes WHERE UserId = ( SELECT Id FROM users WHERE DisplayName = 'Harlan' )"
    },
    {
        "question_id": 633,
        "answer_sql": "SELECT posts.Id FROM users INNER JOIN posts ON users.Id = posts.OwnerUserId WHERE users.DisplayName = 'slashnick' ORDER BY posts.AnswerCount DESC LIMIT 1"
    },
    {
        "question_id": 634,
        "answer_sql": "SELECT CASE WHEN DisplayName = 'Harvey Motulsky' THEN 'SELECT Title FROM posts ORDER BY ViewCount DESC LIMIT 1' ELSE 'SELECT Title FROM posts ORDER BY ViewCount DESC LIMIT 1' END FROM users WHERE DisplayName IN ('Harvey Motulsky', 'Noah Snyder')"
    },
    {
        "question_id": 635,
        "answer_sql": "SELECT count(DISTINCT votes.PostId) FROM users INNER JOIN votes ON users.Id = votes.UserId WHERE users.DisplayName = 'Matt Parker' AND votes.PostId > 4"
    },
    {
        "question_id": 636,
        "answer_sql": "SELECT count(comments.Id) FROM users INNER JOIN comments ON users.Id = comments.UserId WHERE users.DisplayName = 'Neil McGuigan' AND comments.Score < 60"
    },
    {
        "question_id": 637,
        "answer_sql": ""
    },
    {
        "question_id": 638,
        "answer_sql": "SELECT DisplayName FROM users INNER JOIN badges ON users.Id = badges.UserId WHERE Name = 'Organizer'"
    },
    {
        "question_id": 639,
        "answer_sql": "SELECT cast(sum(CASE WHEN tags.TagName = 'r' THEN 1 ELSE 0 END) AS REAL) * 100 / count(posts.Id) FROM posts INNER JOIN tags ON posts.Id = tags.ExcerptPostId"
    },
    {
        "question_id": 640,
        "answer_sql": "SELECT sum(CASE WHEN OwnerDisplayName = 'Mornington' THEN ViewCount ELSE 0 END) - sum(CASE WHEN OwnerDisplayName = 'Amos' THEN ViewCount ELSE 0 END) AS RESULT FROM posts"
    },
    {
        "question_id": 641,
        "answer_sql": "SELECT count(DISTINCT badges.UserId) FROM badges INNER JOIN users ON badges.UserId = users.Id WHERE strftime('%Y', badges.Date) = '2014' AND badges.Name = 'commentator'"
    },
    {
        "question_id": 642,
        "answer_sql": ""
    },
    {
        "question_id": 643,
        "answer_sql": "SELECT DisplayName, Age FROM users ORDER BY Views DESC LIMIT 1"
    },
    {
        "question_id": 644,
        "answer_sql": "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Detecting a given face in a database of facial images'"
    },
    {
        "question_id": 645,
        "answer_sql": "SELECT count(comments.Id) FROM comments INNER JOIN users ON comments.UserId = users.Id WHERE users.Id = 13 AND comments.Score < 60"
    },
    {
        "question_id": 646,
        "answer_sql": "SELECT Title, OwnerDisplayName FROM posts WHERE Score > 60"
    },
    {
        "question_id": 647,
        "answer_sql": "SELECT badges.Name FROM users INNER JOIN badges ON users.Id = badges.UserId WHERE users.Location = 'North Pole' AND strftime('%Y', badges.Date) = '2011'"
    },
    {
        "question_id": 648,
        "answer_sql": "SELECT users.DisplayName, users.WebsiteUrl FROM users INNER JOIN posts ON users.Id = posts.OwnerUserId WHERE posts.FavoriteCount > 150"
    },
    {
        "question_id": 649,
        "answer_sql": "SELECT count(DISTINCT PostHistory.PostId), posts.LastEditDate FROM posts INNER JOIN postHistory ON posts.Id = postHistory.PostId WHERE posts.Title = 'What is the best introductory Bayesian statistics textbook?'"
    },
    {
        "question_id": 650,
        "answer_sql": ""
    },
    {
        "question_id": 651,
        "answer_sql": "SELECT DISTINCT Title FROM posts WHERE Title LIKE 'How to tell if something happened in a data set which monitors a value over time'"
    },
    {
        "question_id": 652,
        "answer_sql": "SELECT badges.Name, posts.Id FROM users INNER JOIN badges ON users.Id = badges.UserId INNER JOIN posts ON users.Id = posts.OwnerUserId WHERE users.DisplayName = 'Samuel' AND strftime('%Y', users.CreationDate) = '2013'"
    },
    {
        "question_id": 653,
        "answer_sql": "SELECT OwnerDisplayName FROM posts ORDER BY ViewCount DESC LIMIT 1"
    },
    {
        "question_id": 654,
        "answer_sql": "SELECT users.DisplayName, users.Location FROM users INNER JOIN posts ON users.Id = posts.OwnerUserId INNER JOIN tags ON posts.Id = tags.ExcerptPostId WHERE tags.TagName = 'hypothesis-testing'"
    },
    {
        "question_id": 655,
        "answer_sql": "SELECT RelatedPostId, LinkTypeId FROM postLinks WHERE PostId = ( SELECT Id FROM posts WHERE Title = 'What are principal component scores?' )"
    },
    {
        "question_id": 656,
        "answer_sql": " SELECT OwnerDisplayName FROM posts WHERE ParentId IS NOT NULL ORDER BY Score DESC LIMIT 1"
    },
    {
        "question_id": 657,
        "answer_sql": " SELECT users.DisplayName, users.WebsiteUrl FROM users INNER JOIN votes ON users.Id = votes.UserId WHERE votes.VoteTypeId = 8 ORDER BY votes.BountyAmount DESC LIMIT 1"
    },
    {
        "question_id": 658,
        "answer_sql": "SELECT Title FROM posts ORDER BY ViewCount DESC LIMIT 5"
    },
    {
        "question_id": 659,
        "answer_sql": "SELECT count(TagName) FROM tags WHERE count BETWEEN 5000 AND 7000"
    },
    {
        "question_id": 660,
        "answer_sql": "SELECT OwnerUserId FROM posts ORDER BY FavoriteCount DESC LIMIT 1"
    },
    {
        "question_id": 661,
        "answer_sql": "SELECT Age FROM users ORDER BY Reputation DESC LIMIT 1"
    },
    {
        "question_id": 662,
        "answer_sql": "SELECT count(DISTINCT PostId) FROM votes WHERE strftime('%Y', CreationDate) = '2011' AND BountyAmount = 50"
    },
    {
        "question_id": 663,
        "answer_sql": "SELECT Id FROM users ORDER BY Age ASC LIMIT 1"
    },
    {
        "question_id": 664,
        "answer_sql": "SELECT posts.Score FROM tags INNER JOIN posts ON tags.Id = posts.Id ORDER BY tags.Count DESC LIMIT 1"
    },
    {
        "question_id": 665,
        "answer_sql": ""
    },
    {
        "question_id": 666,
        "answer_sql": "SELECT posts.Id FROM posts INNER JOIN votes ON posts.Id = votes.PostId WHERE votes.UserId = 1465 ORDER BY posts.FavoriteCount DESC LIMIT 1"
    },
    {
        "question_id": 667,
        "answer_sql": "SELECT posts.Title FROM posts INNER JOIN postLinks ON posts.Id = postLinks.PostId ORDER BY postLinks.CreationDate ASC LIMIT 1"
    },
    {
        "question_id": 668,
        "answer_sql": "SELECT DisplayName FROM users WHERE Reputation = ( SELECT max(Reputation) FROM users )"
    },
    {
        "question_id": 669,
        "answer_sql": "SELECT votes.CreationDate FROM users INNER JOIN votes ON users.Id = votes.UserId WHERE users.DisplayName = 'chl' ORDER BY votes.CreationDate ASC LIMIT 1"
    },
    {
        "question_id": 670,
        "answer_sql": "SELECT min(CreationDate) FROM users"
    },
    {
        "question_id": 671,
        "answer_sql": "SELECT users.DisplayName FROM users INNER JOIN badges ON users.Id = badges.UserId WHERE badges.Name = 'Autobiographer' ORDER BY badges.Date ASC LIMIT 1"
    },
    {
        "question_id": 672,
        "answer_sql": "SELECT count(users.Id) FROM users INNER JOIN posts ON users.Id = posts.OwnerUserId WHERE posts.FavoriteCount >= 4 AND users.Location = 'United Kingdom'"
    },
    {
        "question_id": 673,
        "answer_sql": "SELECT cast(count(DISTINCT PostId) AS REAL) / count(DISTINCT UserId) FROM votes WHERE UserId IN ( SELECT Id FROM users ORDER BY Age LIMIT 1 )"
    },
    {
        "question_id": 674,
        "answer_sql": "SELECT DisplayName FROM users ORDER BY Reputation DESC LIMIT 1"
    },
    {
        "question_id": 675,
        "answer_sql": "SELECT count(Id) FROM users WHERE Reputation > 2000 AND Views > 1000"
    },
    {
        "question_id": 676,
        "answer_sql": ""
    },
    {
        "question_id": 677,
        "answer_sql": ""
    },
    {
        "question_id": 678,
        "answer_sql": "SELECT posts.Id, posts.Title FROM users INNER JOIN posts ON users.Id = posts.OwnerUserId WHERE users.DisplayName = 'Harvey Motulsky' ORDER BY posts.ViewCount DESC LIMIT 1"
    },
    {
        "question_id": 679,
        "answer_sql": "SELECT Title, Score FROM posts ORDER BY Score DESC LIMIT 1"
    },
    {
        "question_id": 680,
        "answer_sql": "SELECT cast(sum(Score) AS REAL) / count(Id) FROM posts WHERE OwnerDisplayName = 'Stephen Turner'"
    },
    {
        "question_id": 681,
        "answer_sql": ""
    },
    {
        "question_id": 682,
        "answer_sql": ""
    },
    {
        "question_id": 683,
        "answer_sql": "SELECT cast(sum(CASE WHEN strftime('%Y', users.CreationDate) = '2011' THEN 1 ELSE 0 END) AS REAL) * 100 / count(users.Id) FROM users INNER JOIN comments ON users.Id = comments.UserId WHERE users.Reputation > 1000"
    },
    {
        "question_id": 684,
        "answer_sql": "SELECT cast(sum(CASE WHEN Age BETWEEN 13 AND 18 THEN 1 ELSE 0 END) AS REAL) * 100 / count(Id) FROM users"
    },
    {
        "question_id": 685,
        "answer_sql": "SELECT sum(ViewCount), OwnerDisplayName FROM posts WHERE Title = 'Computer Game Datasets'"
    },
    {
        "question_id": 686,
        "answer_sql": "SELECT count(Id) FROM posts WHERE ViewCount > ( SELECT avg(ViewCount) FROM posts )"
    },
    {
        "question_id": 687,
        "answer_sql": "SELECT count(Id) FROM comments WHERE Score = ( SELECT max(Score) FROM comments )"
    },
    {
        "question_id": 688,
        "answer_sql": "SELECT count(Id) FROM posts WHERE ViewCount > 35000 AND CommentCount = 0"
    },
    {
        "question_id": 689,
        "answer_sql": "SELECT users.DisplayName, users.Location FROM users INNER JOIN posts ON users.Id = posts.OwnerUserId WHERE posts.Id = 183 ORDER BY posts.LastEditDate DESC LIMIT 1"
    },
    {
        "question_id": 690,
        "answer_sql": "SELECT badges.Name FROM users INNER JOIN badges ON users.Id = badges.UserId WHERE users.DisplayName = 'Emmett' ORDER BY badges.Date DESC LIMIT 1"
    },
    {
        "question_id": 691,
        "answer_sql": "SELECT count(Id) FROM users WHERE Age BETWEEN 19 AND 65 AND UpVotes > 5000"
    },
    {
        "question_id": 692,
        "answer_sql": "SELECT strftime('%J', Date) - strftime('%J', CreationDate) FROM users INNER JOIN badges ON users.Id = badges.UserId WHERE DisplayName = 'Zolomon'"
    },
    {
        "question_id": 693,
        "answer_sql": "SELECT count(DISTINCT OwnerUserId) FROM posts WHERE OwnerUserId = ( SELECT Id FROM users ORDER BY CreationDate DESC LIMIT 1 )"
    },
    {
        "question_id": 694,
        "answer_sql": "SELECT comments.Text, users.DisplayName FROM users INNER JOIN comments ON users.Id = comments.UserId INNER JOIN posts ON posts.Id = comments.PostId WHERE posts.Title = 'Analysing wind data with R' ORDER BY comments.CreationDate DESC LIMIT 1"
    },
    {
        "question_id": 695,
        "answer_sql": "SELECT count(DISTINCT users.Id) FROM badges INNER JOIN users ON badges.UserId = users.Id WHERE badges.Name = 'Citizen Patrol'"
    },
    {
        "question_id": 696,
        "answer_sql": "SELECT count(DISTINCT posts.Id) FROM tags INNER JOIN posts ON tags.Id = posts.Id WHERE tags.TagName = 'careers'"
    },
    {
        "question_id": 697,
        "answer_sql": "SELECT Reputation, Views FROM users WHERE DisplayName = 'Jarrod Dixon'"
    },
    {
        "question_id": 698,
        "answer_sql": "SELECT count(comments.Id), count(posts.Id) FROM posts INNER JOIN comments ON posts.Id = comments.PostId WHERE posts.Title = 'Clustering 1D data'"
    },
    {
        "question_id": 699,
        "answer_sql": "SELECT CreationDate FROM users WHERE DisplayName = 'IrishStat'"
    },
    {
        "question_id": 700,
        "answer_sql": "SELECT count(PostId) FROM votes WHERE BountyAmount > 30"
    },
    {
        "question_id": 701,
        "answer_sql": "SELECT cast(sum(CASE WHEN Score > 50 THEN 1 ELSE 0 END) AS REAL) * 100 / count(Id) FROM posts WHERE OwnerUserId = ( SELECT Id FROM users ORDER BY Reputation DESC LIMIT 1 )"
    },
    {
        "question_id": 702,
        "answer_sql": "SELECT count(Id) FROM posts WHERE Score < 20"
    },
    {
        "question_id": 703,
        "answer_sql": "SELECT count(TagName) FROM tags WHERE Id < 15 AND Count <= 20"
    },
    {
        "question_id": 704,
        "answer_sql": "SELECT tags.ExcerptPostId, tags.WikiPostId FROM tags WHERE TagName = 'sample'"
    },
    {
        "question_id": 705,
        "answer_sql": "SELECT users.Reputation, users.UpVotes FROM users INNER JOIN comments ON users.Id = comments.UserId WHERE comments.Text = 'fine, you win :)'"
    },
    {
        "question_id": 706,
        "answer_sql": "SELECT Body FROM posts WHERE Title = 'How can I adapt ANOVA for binary data?'"
    },
    {
        "question_id": 707,
        "answer_sql": "SELECT Body FROM posts WHERE ViewCount BETWEEN 100 AND 150 ORDER BY Score DESC LIMIT 1"
    },
    {
        "question_id": 708,
        "answer_sql": ""
    },
    {
        "question_id": 709,
        "answer_sql": "SELECT count(DISTINCT posts.Id) FROM posts INNER JOIN comments ON posts.Id = comments.PostId WHERE comments.Score = 0 AND posts.ViewCount < 5"
    },
    {
        "question_id": 710,
        "answer_sql": "SELECT count(DISTINCT CASE WHEN Score = 0 THEN Id END) FROM comments WHERE PostId IN ( SELECT Id FROM posts WHERE CommentCount = 1 )"
    },
    {
        "question_id": 711,
        "answer_sql": "SELECT count(DISTINCT users.Id) FROM users INNER JOIN comments ON users.Id = comments.UserId WHERE comments.Score = 0 AND users.Age = 40"
    },
    {
        "question_id": 712,
        "answer_sql": "SELECT comments.PostId, comments.Text FROM comments INNER JOIN posts ON comments.PostId = posts.Id WHERE posts.Title = 'Group differences on a five point Likert item'"
    },
    {
        "question_id": 713,
        "answer_sql": "SELECT sum(Score) FROM comments WHERE Text = 'R is also lazy evaluated.'"
    },
    {
        "question_id": 714,
        "answer_sql": "SELECT comments.Text FROM users INNER JOIN comments ON users.Id = comments.UserId WHERE users.DisplayName = 'Harvey Motulsky'"
    },
    {
        "question_id": 715,
        "answer_sql": ""
    },
    {
        "question_id": 716,
        "answer_sql": "SELECT cast(sum(CASE WHEN Score BETWEEN 5 AND 10 THEN 1 ELSE 0 END) AS REAL) * 100 / count(UserId) FROM comments WHERE Score BETWEEN 5 AND 10"
    },
    {
        "question_id": 717,
        "answer_sql": "SELECT DISTINCT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = '3-D Man'"
    },
    {
        "question_id": 718,
        "answer_sql": " SELECT count(superhero.id) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Super Strength'"
    },
    {
        "question_id": 719,
        "answer_sql": "SELECT count(superhero.id) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Super Strength' AND superhero.height_cm > 200"
    },
    {
        "question_id": 720,
        "answer_sql": "SELECT superhero.full_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id GROUP BY superhero.full_name HAVING count(superhero.full_name) > 15"
    },
    {
        "question_id": 721,
        "answer_sql": "SELECT count(superhero.id) FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Blue'"
    },
    {
        "question_id": 722,
        "answer_sql": "SELECT colour.colour FROM superhero INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE superhero.superhero_name = 'Apocalypse'"
    },
    {
        "question_id": 723,
        "answer_sql": "SELECT count(superhero.id) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.eye_colour_id = ( SELECT id FROM colour WHERE colour = 'Blue' ) AND superpower.power_name = 'Agility'"
    },
    {
        "question_id": 724,
        "answer_sql": "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.eye_colour_id = 2 AND superhero.hair_colour_id = 4 AND superpower.power_name = 'Agility'"
    },
    {
        "question_id": 725,
        "answer_sql": "SELECT count(id) FROM publisher WHERE publisher_name = 'Marvel Comics'"
    },
    {
        "question_id": 726,
        "answer_sql": "SELECT superhero.superhero_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' ORDER BY superhero.height_cm DESC LIMIT 1"
    },
    {
        "question_id": 727,
        "answer_sql": "SELECT publisher.publisher_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.superhero_name = 'Sauron'"
    },
    {
        "question_id": 728,
        "answer_sql": " SELECT count(superhero.superhero_name) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics'"
    },
    {
        "question_id": 729,
        "answer_sql": "SELECT avg(height_cm) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics'"
    },
    {
        "question_id": 730,
        "answer_sql": "SELECT cast(sum(iif(power_name = 'Super Strength', 1, 0)) AS REAL) * 100 / count(id) FROM superpower"
    },
    {
        "question_id": 731,
        "answer_sql": "SELECT count(superhero.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'DC Comics'"
    },
    {
        "question_id": 732,
        "answer_sql": "SELECT publisher.publisher_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE attribute.attribute_name = 'Speed' GROUP BY publisher.publisher_name ORDER BY sum(hero_attribute.attribute_value) ASC LIMIT 1"
    },
    {
        "question_id": 733,
        "answer_sql": "SELECT count(superhero.id) FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Gold' AND superhero.publisher_id = ( SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics' )"
    },
    {
        "question_id": 734,
        "answer_sql": "SELECT publisher.publisher_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.superhero_name = 'Blue Beetle II'"
    },
    {
        "question_id": 735,
        "answer_sql": "SELECT count(superhero.id) FROM superhero INNER JOIN colour ON superhero.hair_colour_id = colour.id WHERE colour.colour = 'Blond'"
    },
    {
        "question_id": 736,
        "answer_sql": "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Intelligence' ORDER BY hero_attribute.attribute_value LIMIT 1"
    },
    {
        "question_id": 737,
        "answer_sql": "SELECT race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.superhero_name = 'Copycat'"
    },
    {
        "question_id": 738,
        "answer_sql": "SELECT count(superhero.id) FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Durability' AND hero_attribute.attribute_value < 50"
    },
    {
        "question_id": 739,
        "answer_sql": "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Death Touch'"
    },
    {
        "question_id": 740,
        "answer_sql": "SELECT count(superhero.id) FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE attribute.attribute_name = 'Strength' AND hero_attribute.attribute_value = 100 AND gender.gender = 'Female'"
    },
    {
        "question_id": 741,
        "answer_sql": "SELECT superhero_name FROM superhero GROUP BY superhero_name ORDER BY count(superhero_name) DESC LIMIT 1"
    },
    {
        "question_id": 742,
        "answer_sql": "SELECT count(superhero.id) FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE race.race = 'Vampire'"
    },
    {
        "question_id": 743,
        "answer_sql": "SELECT cast(sum(CASE WHEN alignment.alignment = 'Good' THEN 1 ELSE 0 END) AS REAL) * 100 / count(superhero.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE publisher.publisher_name = 'Marvel Comics'"
    },
    {
        "question_id": 744,
        "answer_sql": "SELECT CASE WHEN publisher.publisher_name = 'Marvel Comics' THEN sum(CASE WHEN publisher.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) - sum(CASE WHEN publisher.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) END AS diff FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id"
    },
    {
        "question_id": 745,
        "answer_sql": "SELECT id FROM publisher WHERE publisher_name = 'Star Trek'"
    },
    {
        "question_id": 746,
        "answer_sql": "SELECT avg(attribute_value) FROM hero_attribute"
    },
    {
        "question_id": 747,
        "answer_sql": "SELECT count(id) FROM superhero WHERE full_name IS NULL"
    },
    {
        "question_id": 748,
        "answer_sql": "SELECT DISTINCT colour.colour FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.id = 75"
    },
    {
        "question_id": 749,
        "answer_sql": "SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = 'Deathlok'"
    },
    {
        "question_id": 750,
        "answer_sql": "SELECT avg(weight_kg) FROM superhero WHERE gender_id = 2"
    },
    {
        "question_id": 751,
        "answer_sql": "SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.gender_id = 1 LIMIT 5"
    },
    {
        "question_id": 752,
        "answer_sql": "SELECT superhero_name FROM superhero WHERE race_id = 1"
    },
    {
        "question_id": 753,
        "answer_sql": "SELECT superhero_name FROM superhero WHERE height_cm BETWEEN 170 AND 190 AND eye_colour_id = 1"
    },
    {
        "question_id": 754,
        "answer_sql": "SELECT power_name FROM superpower WHERE id IN ( SELECT power_id FROM hero_power WHERE hero_id = 56 )"
    },
    {
        "question_id": 755,
        "answer_sql": "SELECT superhero_name FROM superhero WHERE race_id = 1 LIMIT 5"
    },
    {
        "question_id": 756,
        "answer_sql": "SELECT count(superhero.id) FROM superhero INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.alignment = 'bad'"
    },
    {
        "question_id": 757,
        "answer_sql": "SELECT race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.weight_kg = 169"
    },
    {
        "question_id": 758,
        "answer_sql": ""
    },
    {
        "question_id": 759,
        "answer_sql": "SELECT colour.colour FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id ORDER BY superhero.weight_kg DESC LIMIT 1"
    },
    {
        "question_id": 760,
        "answer_sql": "SELECT cast(sum(CASE WHEN publisher.id = 13 THEN 1 ELSE 0 END) AS REAL) * 100 / count(publisher.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.height_cm BETWEEN 150 AND 180"
    },
    {
        "question_id": 761,
        "answer_sql": "SELECT superhero.full_name FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id WHERE gender.gender = 'Male' AND superhero.weight_kg > ( SELECT avg(weight_kg) FROM superhero ) * 0.79"
    },
    {
        "question_id": 762,
        "answer_sql": "SELECT power_name FROM superpower GROUP BY power_name ORDER BY count(power_name) DESC LIMIT 1"
    },
    {
        "question_id": 763,
        "answer_sql": "SELECT hero_attribute.attribute_value FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE superhero.superhero_name = 'Abomination'"
    },
    {
        "question_id": 764,
        "answer_sql": "SELECT power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE hero_id = 1"
    },
    {
        "question_id": 765,
        "answer_sql": "SELECT count(hero_id) FROM hero_power INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'stealth'"
    },
    {
        "question_id": 766,
        "answer_sql": ""
    },
    {
        "question_id": 767,
        "answer_sql": "SELECT cast(count(superhero.id) AS REAL) / count(CASE WHEN skin_colour_id = 1 THEN superhero.id ELSE NULL END) FROM superhero INNER JOIN colour ON superhero.skin_colour_id = colour.id"
    },
    {
        "question_id": 768,
        "answer_sql": "SELECT count(id) FROM publisher WHERE publisher_name = 'Dark Horse Comics'"
    },
    {
        "question_id": 769,
        "answer_sql": ""
    },
    {
        "question_id": 770,
        "answer_sql": "SELECT DISTINCT colour.colour FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.full_name = 'Abraham Sapien'"
    },
    {
        "question_id": 771,
        "answer_sql": "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Flight'"
    },
    {
        "question_id": 772,
        "answer_sql": "SELECT DISTINCT colour.colour FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN gender ON superhero.gender_id = gender.id INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE publisher.publisher_name = 'Dark Horse Comics' AND gender.gender = 'Female'"
    },
    {
        "question_id": 773,
        "answer_sql": "SELECT superhero.superhero_name, publisher.publisher_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.hair_colour_id = superhero.skin_colour_id AND superhero.hair_colour_id = superhero.eye_colour_id"
    },
    {
        "question_id": 774,
        "answer_sql": "SELECT race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.superhero_name = 'A-Bomb'"
    },
    {
        "question_id": 775,
        "answer_sql": "SELECT cast(sum(CASE WHEN colour.colour = 'Blue' THEN 1 ELSE 0 END) AS REAL) * 100 / count(gender.gender) FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id INNER JOIN colour ON superhero.skin_colour_id = colour.id"
    },
    {
        "question_id": 776,
        "answer_sql": "SELECT superhero.superhero_name, race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.full_name = 'Charles Chandler'"
    },
    {
        "question_id": 777,
        "answer_sql": "SELECT gender.gender FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id WHERE superhero.superhero_name = 'Agent 13'"
    },
    {
        "question_id": 778,
        "answer_sql": "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Adaptation'"
    },
    {
        "question_id": 779,
        "answer_sql": "SELECT count(power_id) FROM hero_power WHERE hero_id IN ( SELECT id FROM superhero WHERE superhero_name = 'Amazo' )"
    },
    {
        "question_id": 780,
        "answer_sql": "SELECT DISTINCT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.full_name = 'Hunter Zolomon'"
    },
    {
        "question_id": 781,
        "answer_sql": "SELECT superhero.height_cm FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Amber'"
    },
    {
        "question_id": 782,
        "answer_sql": ""
    },
    {
        "question_id": 783,
        "answer_sql": "SELECT DISTINCT colour.colour FROM superhero INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE colour.colour = 'Gold'"
    },
    {
        "question_id": 784,
        "answer_sql": "SELECT superhero_name FROM superhero WHERE race_id = ( SELECT id FROM race WHERE race = 'Vampire' )"
    },
    {
        "question_id": 785,
        "answer_sql": "SELECT superhero_name FROM superhero WHERE alignment_id = ( SELECT id FROM alignment WHERE alignment = 'Neutral' )"
    },
    {
        "question_id": 786,
        "answer_sql": "SELECT count(hero_attribute.hero_id) FROM hero_attribute INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Strength'"
    },
    {
        "question_id": 787,
        "answer_sql": "SELECT race.race, alignment.alignment FROM superhero INNER JOIN race ON superhero.race_id = race.id INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE superhero.superhero_name = 'Cameron Hicks'"
    },
    {
        "question_id": 788,
        "answer_sql": "SELECT cast(sum(CASE WHEN publisher.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) AS REAL) * 100 / count(superhero.publisher_id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.gender_id = 2"
    },
    {
        "question_id": 789,
        "answer_sql": "SELECT avg(weight_kg) FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE race.race = 'Alien'"
    },
    {
        "question_id": 790,
        "answer_sql": "SELECT sum(CASE WHEN full_name = 'Emil Blonsky' THEN weight_kg ELSE 0 END) - sum(CASE WHEN full_name = 'Charles Chandler' THEN weight_kg ELSE 0 END) AS RESULT FROM superhero"
    },
    {
        "question_id": 791,
        "answer_sql": "SELECT avg(height_cm) FROM superhero"
    },
    {
        "question_id": 792,
        "answer_sql": "SELECT power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = 'Abomination'"
    },
    {
        "question_id": 793,
        "answer_sql": "SELECT count(superhero.id) FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE race.race = 'god/eternal' AND superhero.gender_id = 1"
    },
    {
        "question_id": 794,
        "answer_sql": "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Speed' ORDER BY hero_attribute.attribute_value DESC LIMIT 1"
    },
    {
        "question_id": 795,
        "answer_sql": "SELECT count(superhero.id) FROM superhero INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.alignment = 'neutral'"
    },
    {
        "question_id": 796,
        "answer_sql": "SELECT attribute.attribute_name, hero_attribute.attribute_value FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE superhero.superhero_name = '3-D Man'"
    },
    {
        "question_id": 797,
        "answer_sql": "SELECT superhero_name FROM superhero WHERE eye_colour_id = 7 AND hair_colour_id = 9"
    },
    {
        "question_id": 798,
        "answer_sql": "SELECT publisher.publisher_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy')"
    },
    {
        "question_id": 799,
        "answer_sql": "SELECT count(id) FROM superhero WHERE publisher_id = 1"
    },
    {
        "question_id": 800,
        "answer_sql": "SELECT cast(sum(CASE WHEN eye_colour_id = 7 THEN 1 ELSE 0 END) AS REAL) * 100 / count(superhero_name) FROM superhero"
    },
    {
        "question_id": 801,
        "answer_sql": "SELECT cast(sum(iif(gender_id = 1, 1, 0)) AS REAL) / sum(iif(gender_id = 2, 1, 0)) FROM superhero"
    },
    {
        "question_id": 802,
        "answer_sql": "SELECT superhero_name FROM superhero ORDER BY height_cm DESC LIMIT 1"
    },
    {
        "question_id": 803,
        "answer_sql": ""
    },
    {
        "question_id": 804,
        "answer_sql": "SELECT superhero_name FROM superhero WHERE id = 294"
    },
    {
        "question_id": 805,
        "answer_sql": "SELECT superhero_name FROM superhero WHERE weight_kg = 0 OR weight_kg IS NULL"
    },
    {
        "question_id": 806,
        "answer_sql": "SELECT colour.colour FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.full_name = 'Karen Beecher-Duncan'"
    },
    {
        "question_id": 807,
        "answer_sql": "SELECT power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.full_name = 'Helen Parr'"
    },
    {
        "question_id": 808,
        "answer_sql": "SELECT race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.weight_kg = 108 AND superhero.height_cm = 188"
    },
    {
        "question_id": 809,
        "answer_sql": "SELECT publisher.publisher_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.id = 38"
    },
    {
        "question_id": 810,
        "answer_sql": "SELECT race.race FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN race ON superhero.race_id = race.id ORDER BY hero_attribute.attribute_value DESC LIMIT 1"
    },
    {
        "question_id": 811,
        "answer_sql": "SELECT alignment.alignment, GROUP_CONCAT(superpower.power_name) FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN superpower ON hero_attribute.attribute_id = superpower.id INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE superhero.superhero_name = 'Atom IV'"
    },
    {
        "question_id": 812,
        "answer_sql": "SELECT superhero.full_name FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Blue' LIMIT 5"
    },
    {
        "question_id": 813,
        "answer_sql": "SELECT avg(attribute_value) FROM hero_attribute INNER JOIN superhero ON hero_attribute.hero_id = superhero.id WHERE superhero.alignment_id = 3"
    },
    {
        "question_id": 814,
        "answer_sql": "SELECT DISTINCT colour.colour FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE hero_attribute.attribute_value = 100"
    },
    {
        "question_id": 815,
        "answer_sql": "SELECT count(superhero.id) FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.id = 1 AND gender.id = 2"
    },
    {
        "question_id": 816,
        "answer_sql": "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE hero_attribute.attribute_value BETWEEN 75 AND 80"
    },
    {
        "question_id": 817,
        "answer_sql": ""
    },
    {
        "question_id": 818,
        "answer_sql": "SELECT cast(sum(iif(alignment.id = 2, 1, 0)) AS REAL) * 100 / count(alignment.id) FROM superhero INNER JOIN alignment ON superhero.alignment_id = alignment.id INNER JOIN gender ON superhero.gender_id = gender.id"
    },
    {
        "question_id": 819,
        "answer_sql": "SELECT sum(CASE WHEN eye_colour_id = 7 THEN 1 ELSE 0 END) - sum(CASE WHEN eye_colour_id = 1 THEN 1 ELSE 0 END) AS diff FROM superhero WHERE weight_kg = 0 OR weight_kg IS NULL"
    },
    {
        "question_id": 820,
        "answer_sql": "SELECT hero_attribute.attribute_value FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Strength' AND superhero.superhero_name = 'Hulk'"
    },
    {
        "question_id": 821,
        "answer_sql": "SELECT DISTINCT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = 'Ajax'"
    },
    {
        "question_id": 822,
        "answer_sql": "SELECT count(superhero.id) FROM superhero INNER JOIN alignment ON superhero.alignment_id = alignment.id INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE alignment.alignment = 'Good' AND colour.colour = 'Green'"
    },
    {
        "question_id": 823,
        "answer_sql": "SELECT count(superhero.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' AND superhero.gender_id = 2"
    },
    {
        "question_id": 824,
        "answer_sql": "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Wind Control' GROUP BY superhero.superhero_name"
    },
    {
        "question_id": 825,
        "answer_sql": "SELECT gender.gender FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON superpower.id = hero_power.power_id INNER JOIN gender ON gender.id = superhero.gender_id WHERE superpower.power_name = 'Phoenix Force'"
    },
    {
        "question_id": 826,
        "answer_sql": "SELECT superhero_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'DC Comics' ORDER BY weight_kg DESC LIMIT 1"
    },
    {
        "question_id": 827,
        "answer_sql": "SELECT cast(sum(height_cm) AS REAL) / count(id) FROM superhero WHERE race_id != 1 AND publisher_id = ( SELECT id FROM publisher WHERE publisher_name = 'Dark Horse Comics' )"
    },
    {
        "question_id": 828,
        "answer_sql": "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Speed' AND hero_attribute.attribute_value = 100"
    },
    {
        "question_id": 829,
        "answer_sql": "SELECT CASE WHEN sum(CASE WHEN publisher.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) - sum(CASE WHEN publisher.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) > 0 THEN 'DC Comics' ELSE 'Marvel Comics' END AS RESULT FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id"
    },
    {
        "question_id": 830,
        "answer_sql": "SELECT attribute.attribute_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE superhero.superhero_name = 'Black Panther' ORDER BY hero_attribute.attribute_value ASC LIMIT 1"
    },
    {
        "question_id": 831,
        "answer_sql": "SELECT colour.colour FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.superhero_name = 'Abomination'"
    },
    {
        "question_id": 832,
        "answer_sql": "SELECT superhero_name FROM superhero ORDER BY height_cm DESC LIMIT 1"
    },
    {
        "question_id": 833,
        "answer_sql": "SELECT superhero_name FROM superhero WHERE full_name = 'Charles Chandler'"
    },
    {
        "question_id": 834,
        "answer_sql": "SELECT cast(sum(CASE WHEN gender.gender = 'Female' THEN 1 ELSE 0 END) AS REAL) * 100 / count(publisher.publisher_name) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE publisher.publisher_name = 'George Lucas'"
    },
    {
        "question_id": 835,
        "answer_sql": "SELECT cast(sum(CASE WHEN alignment.alignment = 'Good' THEN 1 ELSE 0 END) AS REAL) * 100 / count(publisher.publisher_name) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN alignment ON superhero.alignment_id = alignment.id"
    },
    {
        "question_id": 836,
        "answer_sql": "SELECT count(superhero.id) FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE superhero.full_name LIKE 'John%'"
    },
    {
        "question_id": 837,
        "answer_sql": "SELECT hero_id FROM hero_attribute ORDER BY attribute_value ASC LIMIT 1"
    },
    {
        "question_id": 838,
        "answer_sql": "SELECT full_name FROM superhero WHERE superhero_name = 'Alien'"
    },
    {
        "question_id": 839,
        "answer_sql": "SELECT superhero.full_name FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.weight_kg < 100"
    },
    {
        "question_id": 840,
        "answer_sql": "SELECT hero_attribute.attribute_value FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE superhero.superhero_name = 'Aquababy'"
    },
    {
        "question_id": 841,
        "answer_sql": "SELECT weight_kg, race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.id = 40"
    },
    {
        "question_id": 842,
        "answer_sql": "SELECT avg(height_cm) FROM superhero WHERE gender_id = 2"
    },
    {
        "question_id": 843,
        "answer_sql": "SELECT hero_power.hero_id FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Intelligence'"
    },
    {
        "question_id": 844,
        "answer_sql": "SELECT colour.colour FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.superhero_name = 'Blackwulf'"
    },
    {
        "question_id": 845,
        "answer_sql": "SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.height_cm > ( SELECT avg(height_cm) FROM superhero ) * 0.8"
    },
    {
        "question_id": 846,
        "answer_sql": "SELECT drivers.driverRef FROM qualifying INNER JOIN drivers ON qualifying.driverId = drivers.driverId WHERE qualifying.raceId = 18 AND qualifying.q1 = ( SELECT max(q1) FROM qualifying WHERE raceId = 18 )"
    },
    {
        "question_id": 847,
        "answer_sql": " SELECT drivers.surname FROM drivers INNER JOIN qualifying ON drivers.driverId = qualifying.driverId WHERE qualifying.raceId = 19 AND qualifying.q2 = ( SELECT min(q2) FROM qualifying WHERE raceId = 19 )"
    },
    {
        "question_id": 848,
        "answer_sql": " SELECT DISTINCT YEAR FROM races WHERE YEAR IS NOT NULL AND YEAR <> 0"
    },
    {
        "question_id": 849,
        "answer_sql": "SELECT DISTINCT url FROM circuits WHERE name = 'Circuit de Barcelona-Catalunya'"
    },
    {
        "question_id": 850,
        "answer_sql": "SELECT DISTINCT races.name FROM circuits INNER JOIN races ON circuits.circuitId = races.circuitId WHERE circuits.country = 'Germany'"
    },
    {
        "question_id": 851,
        "answer_sql": "SELECT DISTINCT POSITION FROM results WHERE constructorId = ( SELECT constructorId FROM constructors WHERE name = 'Renault' )"
    },
    {
        "question_id": 852,
        "answer_sql": "SELECT count(raceId) FROM races WHERE YEAR = 2010 AND name NOT LIKE '%Asia%' AND name NOT LIKE '%Europe%'"
    },
    {
        "question_id": 853,
        "answer_sql": "SELECT name FROM circuits WHERE country = 'Spain'"
    },
    {
        "question_id": 854,
        "answer_sql": "SELECT DISTINCT location FROM circuits WHERE country = 'Australia'"
    },
    {
        "question_id": 855,
        "answer_sql": ""
    },
    {
        "question_id": 856,
        "answer_sql": "SELECT DISTINCT races.time FROM circuits INNER JOIN races ON circuits.circuitId = races.circuitId WHERE circuits.name = 'Sepang International Circuit'"
    },
    {
        "question_id": 857,
        "answer_sql": ""
    },
    {
        "question_id": 858,
        "answer_sql": "SELECT constructors.nationality FROM constructors INNER JOIN constructorResults ON constructors.constructorId = constructorResults.constructorId WHERE constructorResults.raceId = 24 GROUP BY constructors.nationality"
    },
    {
        "question_id": 859,
        "answer_sql": "SELECT qualifying.q1 FROM qualifying INNER JOIN races ON qualifying.raceId = races.raceId WHERE races.raceId = 354 AND qualifying.q1 IS NOT NULL"
    },
    {
        "question_id": 860,
        "answer_sql": ""
    },
    {
        "question_id": 861,
        "answer_sql": ""
    },
    {
        "question_id": 862,
        "answer_sql": "SELECT count(DISTINCT driverId) FROM results WHERE statusId = 1"
    },
    {
        "question_id": 863,
        "answer_sql": "SELECT DISTINCT seasons.url FROM races INNER JOIN seasons ON races.year = seasons.year WHERE races.raceId = 901"
    },
    {
        "question_id": 864,
        "answer_sql": "SELECT count(results.driverId) FROM results INNER JOIN races ON results.raceId = races.raceId WHERE races.date = '2015-11-29'"
    },
    {
        "question_id": 865,
        "answer_sql": "SELECT drivers.driverId FROM drivers INNER JOIN results ON drivers.driverId = results.driverId WHERE results.raceId = 592 AND drivers.dob IS NOT NULL ORDER BY drivers.dob ASC LIMIT 1"
    },
    {
        "question_id": 866,
        "answer_sql": ""
    },
    {
        "question_id": 867,
        "answer_sql": "SELECT drivers.forename, drivers.surname FROM results INNER JOIN drivers ON results.driverId = drivers.driverId WHERE raceId = 933 ORDER BY fastestLapSpeed DESC LIMIT 1"
    },
    {
        "question_id": 868,
        "answer_sql": "SELECT LOCATION FROM circuits WHERE country = 'Malaysia'"
    },
    {
        "question_id": 869,
        "answer_sql": "SELECT constructors.url FROM constructors INNER JOIN constructorResults ON constructors.constructorId = constructorResults.constructorId WHERE constructorResults.raceId = 9 ORDER BY constructorResults.points DESC LIMIT 1"
    },
    {
        "question_id": 870,
        "answer_sql": "SELECT qualifying.q1 FROM qualifying INNER JOIN races ON qualifying.raceId = races.raceId WHERE races.raceId = 345"
    },
    {
        "question_id": 871,
        "answer_sql": ""
    },
    {
        "question_id": 872,
        "answer_sql": ""
    },
    {
        "question_id": 873,
        "answer_sql": " SELECT results.time FROM results INNER JOIN races ON results.raceId = races.raceId INNER JOIN drivers ON results.driverId = drivers.driverId WHERE drivers.forename = 'Bruce' AND drivers.surname = 'McLaren'"
    },
    {
        "question_id": 874,
        "answer_sql": "SELECT drivers.forename, drivers.surname FROM races INNER JOIN results ON races.raceId = results.raceId INNER JOIN drivers ON results.driverId = drivers.driverId WHERE races.year = 2006 AND results.position = 2"
    },
    {
        "question_id": 875,
        "answer_sql": "SELECT DISTINCT seasons.url FROM races INNER JOIN seasons ON races.year = seasons.year WHERE races.raceId = 901"
    },
    {
        "question_id": 876,
        "answer_sql": "SELECT count(results.driverId) FROM results INNER JOIN races ON results.raceId = races.raceId WHERE strftime('%Y-%m-%d', races.date) = '2015-11-29'"
    },
    {
        "question_id": 877,
        "answer_sql": "SELECT drivers.driverId FROM drivers INNER JOIN results ON drivers.driverId = results.driverId WHERE results.raceId = 872 ORDER BY drivers.dob DESC LIMIT 1"
    },
    {
        "question_id": 878,
        "answer_sql": "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN lapTimes ON drivers.driverId = lapTimes.driverId WHERE raceId = 348 ORDER BY lapTimes.milliseconds LIMIT 1"
    },
    {
        "question_id": 879,
        "answer_sql": "SELECT DISTINCT constructors.nationality FROM results INNER JOIN constructors ON results.constructorId = constructors.constructorId WHERE results.fastestLapSpeed = ( SELECT max(fastestLapSpeed) FROM results )"
    },
    {
        "question_id": 880,
        "answer_sql": "SELECT cast((fastestLapSpeed - ( SELECT fastestLapSpeed FROM results WHERE raceId = 854 )) AS REAL) * 100 / fastestLapSpeed FROM results WHERE raceId = 853"
    },
    {
        "question_id": 881,
        "answer_sql": "SELECT cast(sum(CASE WHEN RESULTS.time IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / count(RESULTS.time) FROM RESULTS INNER JOIN races ON RESULTS.raceId = races.raceId WHERE races.year = 1983 AND races.date = '1983-07-16'"
    },
    {
        "question_id": 882,
        "answer_sql": "SELECT DISTINCT YEAR FROM races WHERE YEAR IS NOT NULL ORDER BY YEAR ASC LIMIT 1"
    },
    {
        "question_id": 883,
        "answer_sql": "SELECT count(raceId) FROM races WHERE YEAR = 2005 ORDER BY name DESC"
    },
    {
        "question_id": 884,
        "answer_sql": "SELECT name FROM races WHERE strftime('%Y-%m', date) = ( SELECT strftime('%Y-%m', min(date)) FROM races )"
    },
    {
        "question_id": 885,
        "answer_sql": "SELECT name, date FROM races WHERE YEAR = 1999 ORDER BY round DESC LIMIT 1"
    },
    {
        "question_id": 886,
        "answer_sql": "SELECT DISTINCT YEAR FROM races ORDER BY round DESC LIMIT 1"
    },
    {
        "question_id": 887,
        "answer_sql": "SELECT name FROM races WHERE YEAR = 2017 AND YEAR NOT IN (2000)"
    },
    {
        "question_id": 888,
        "answer_sql": "SELECT circuits.name, circuits.location FROM circuits INNER JOIN races ON circuits.circuitId = races.circuitId WHERE races.year = ( SELECT min(YEAR) FROM races )"
    },
    {
        "question_id": 889,
        "answer_sql": "SELECT DISTINCT 'SELECT DISTINCT YEAR FROM seasons WHERE name = ''Brands Hatch'' ORDER BY YEAR DESC LIMIT 1'"
    },
    {
        "question_id": 890,
        "answer_sql": "SELECT count(DISTINCT YEAR) FROM races WHERE name = 'Silverstone Circuit' AND YEAR = 2014"
    },
    {
        "question_id": 891,
        "answer_sql": "SELECT driverId FROM driverStandings WHERE raceId IN ( SELECT raceId FROM races WHERE YEAR = 2010 ) ORDER BY position"
    },
    {
        "question_id": 892,
        "answer_sql": " SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN results ON drivers.driverId = results.driverId ORDER BY results.points DESC LIMIT 1"
    },
    {
        "question_id": 893,
        "answer_sql": "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN driverStandings ON drivers.driverId = driverStandings.driverId WHERE driverStandings.raceId IN ( SELECT raceId FROM races WHERE YEAR = 2017 AND name = 'Chinese Grand Prix' ) ORDER BY driverStandings.points DESC LIMIT 3"
    },
    {
        "question_id": 894,
        "answer_sql": "SELECT driverId, raceId FROM lapTimes ORDER BY time ASC LIMIT 1"
    },
    {
        "question_id": 895,
        "answer_sql": "SELECT avg(milliseconds) FROM pitStops WHERE driverId = ( SELECT driverId FROM drivers WHERE forename = 'Sebastian' AND surname = 'Vettel' ) AND raceId IN ( SELECT raceId FROM races WHERE YEAR = 2009 )"
    },
    {
        "question_id": 896,
        "answer_sql": "SELECT cast(sum(CASE WHEN drivers.surname = 'Hamilton' THEN 1 ELSE 0 END) AS REAL) * 100 / count(races.raceId) FROM drivers INNER JOIN results ON drivers.driverId = results.driverId INNER JOIN races ON results.raceId = races.raceId WHERE races.year >= 2010 AND results.position = 1"
    },
    {
        "question_id": 897,
        "answer_sql": "SELECT drivers.forename, drivers.surname, drivers.nationality, avg(driverStandings.points) FROM drivers INNER JOIN driverStandings ON drivers.driverId = driverStandings.driverId GROUP BY drivers.forename, drivers.surname, drivers.nationality ORDER BY sum(driverStandings.wins) DESC LIMIT 1"
    },
    {
        "question_id": 898,
        "answer_sql": "SELECT forename, surname FROM drivers WHERE nationality = 'Japanese' ORDER BY dob DESC LIMIT 1"
    },
    {
        "question_id": 899,
        "answer_sql": "SELECT DISTINCT circuits.name FROM circuits INNER JOIN races ON circuits.circuitId = races.circuitId WHERE races.year BETWEEN 1990 AND 2000 GROUP BY circuits.name HAVING count(races.year) = 4"
    },
    {
        "question_id": 900,
        "answer_sql": "SELECT circuits.name, circuits.location, races.name FROM circuits INNER JOIN races ON circuits.circuitId = races.circuitId WHERE circuits.country = 'USA' AND races.year = 2006"
    },
    {
        "question_id": 901,
        "answer_sql": "SELECT DISTINCT races.name, circuits.name, circuits.location FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE strftime('%Y-%m', races.date) = '2005-09'"
    },
    {
        "question_id": 902,
        "answer_sql": "SELECT raceId FROM results WHERE driverId = ( SELECT driverId FROM drivers WHERE forename = 'Alex' AND surname = 'Yoong' ) AND POSITION < 10"
    },
    {
        "question_id": 903,
        "answer_sql": " SELECT count(results.points) FROM results INNER JOIN races ON results.raceId = races.raceId INNER JOIN drivers ON results.driverId = drivers.driverId WHERE drivers.forename = 'Michael' AND drivers.surname = 'Schumacher'"
    },
    {
        "question_id": 904,
        "answer_sql": "SELECT races.name, races.year FROM drivers INNER JOIN lapTimes ON drivers.driverId = lapTimes.driverId INNER JOIN races ON lapTimes.raceId = races.raceId WHERE drivers.forename = 'Michael' AND drivers.surname = 'Schumacher' ORDER BY lapTimes.milliseconds ASC LIMIT 1"
    },
    {
        "question_id": 905,
        "answer_sql": ""
    },
    {
        "question_id": 906,
        "answer_sql": "SELECT name FROM races WHERE name = ( SELECT name FROM races ORDER BY YEAR ASC LIMIT 1 )"
    },
    {
        "question_id": 907,
        "answer_sql": ""
    },
    {
        "question_id": 908,
        "answer_sql": ""
    },
    {
        "question_id": 909,
        "answer_sql": "SELECT cast(sum(CASE WHEN circuits.country = 'Germany' THEN 1 ELSE 0 END) AS REAL) * 100 / count(races.raceId) FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId"
    },
    {
        "question_id": 910,
        "answer_sql": "SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit'"
    },
    {
        "question_id": 911,
        "answer_sql": "SELECT name FROM circuits WHERE name IN ('Silverstone Circuit', 'Hockenheimring', 'Hungaroring') ORDER BY lat DESC LIMIT 1"
    },
    {
        "question_id": 912,
        "answer_sql": "SELECT circuitRef FROM circuits WHERE name = 'Marina Bay Street Circuit'"
    },
    {
        "question_id": 913,
        "answer_sql": "SELECT country FROM circuits ORDER BY alt DESC LIMIT 1"
    },
    {
        "question_id": 914,
        "answer_sql": "SELECT count(driverId) FROM drivers WHERE code IS NULL"
    },
    {
        "question_id": 915,
        "answer_sql": "SELECT nationality FROM drivers ORDER BY dob ASC LIMIT 1"
    },
    {
        "question_id": 916,
        "answer_sql": ""
    },
    {
        "question_id": 917,
        "answer_sql": "SELECT url FROM drivers WHERE forename = 'Anthony' AND surname = 'Davidson'"
    },
    {
        "question_id": 918,
        "answer_sql": "SELECT driverRef FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton'"
    },
    {
        "question_id": 919,
        "answer_sql": "SELECT DISTINCT circuits.name FROM circuits INNER JOIN races ON circuits.circuitId = races.circuitId WHERE races.year = 2009"
    },
    {
        "question_id": 920,
        "answer_sql": "SELECT DISTINCT YEAR FROM races WHERE circuitId = ( SELECT circuitId FROM circuits WHERE name = 'Silverstone Circuit' )"
    },
    {
        "question_id": 921,
        "answer_sql": "SELECT DISTINCT url FROM races WHERE circuitId = ( SELECT circuitId FROM circuits WHERE name = 'Silverstone Circuit' )"
    },
    {
        "question_id": 922,
        "answer_sql": "SELECT DISTINCT races.time FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId INNER JOIN seasons ON races.year = seasons.year WHERE seasons.year = 2010"
    },
    {
        "question_id": 923,
        "answer_sql": "SELECT count(raceId) FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.country = 'Italy'"
    },
    {
        "question_id": 924,
        "answer_sql": ""
    },
    {
        "question_id": 925,
        "answer_sql": ""
    },
    {
        "question_id": 926,
        "answer_sql": "SELECT min(fastestLapTime) FROM results WHERE driverId = ( SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton' )"
    },
    {
        "question_id": 927,
        "answer_sql": "SELECT drivers.forename, drivers.surname FROM results INNER JOIN drivers ON results.driverId = drivers.driverId ORDER BY results.fastestLapSpeed DESC LIMIT 1"
    },
    {
        "question_id": 928,
        "answer_sql": ""
    },
    {
        "question_id": 929,
        "answer_sql": "SELECT raceId FROM results WHERE driverId = ( SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton' )"
    },
    {
        "question_id": 930,
        "answer_sql": "SELECT raceId FROM results WHERE driverId = ( SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton' ) ORDER BY rank ASC LIMIT 1"
    },
    {
        "question_id": 931,
        "answer_sql": ""
    },
    {
        "question_id": 932,
        "answer_sql": ""
    },
    {
        "question_id": 933,
        "answer_sql": ""
    },
    {
        "question_id": 934,
        "answer_sql": ""
    },
    {
        "question_id": 935,
        "answer_sql": "SELECT count(results.driverId) FROM results INNER JOIN races ON results.raceId = races.raceId WHERE substr(races.date, 1, 4) = '2008' AND results.time IS NOT NULL"
    },
    {
        "question_id": 936,
        "answer_sql": "SELECT fastestLap FROM results WHERE driverId = ( SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton' ) AND statusId = 1 AND raceId = ( SELECT raceId FROM races WHERE year = 2008 )"
    },
    {
        "question_id": 937,
        "answer_sql": "SELECT races.time FROM results INNER JOIN races ON results.raceId = races.raceId WHERE races.year = 2008 AND results.rank = 2"
    },
    {
        "question_id": 938,
        "answer_sql": "SELECT drivers.forename, drivers.surname, drivers.url FROM results INNER JOIN drivers ON results.driverId = drivers.driverId WHERE results.raceId = ( SELECT raceId FROM races WHERE YEAR = 2008 ) AND results.statusId = 1 ORDER BY results.milliseconds DESC LIMIT 1"
    },
    {
        "question_id": 939,
        "answer_sql": " SELECT count(driverId) FROM drivers WHERE nationality = 'American'"
    },
    {
        "question_id": 940,
        "answer_sql": "SELECT count(DISTINCT drivers.driverId) FROM drivers INNER JOIN results ON drivers.driverId = results.driverId WHERE results.raceId IN ( SELECT raceId FROM races WHERE YEAR = 2008 )"
    },
    {
        "question_id": 941,
        "answer_sql": "SELECT sum(constructorResults.points) FROM drivers INNER JOIN results ON drivers.driverId = results.driverId INNER JOIN constructorResults ON results.constructorId = constructorResults.constructorId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'"
    },
    {
        "question_id": 942,
        "answer_sql": "SELECT cast(sum(cast(replace(substr(fastestLapTime, instr(fastestLapTime, ':') + 1), ',', '') AS REAL)) AS REAL) / count(fastestLapTime) FROM results WHERE driverId = ( SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton' )"
    },
    {
        "question_id": 943,
        "answer_sql": "SELECT cast(count(CASE WHEN time IS NOT NULL THEN raceId ELSE NULL END) AS REAL) * 100 / count(raceId) FROM results"
    },
    {
        "question_id": 944,
        "answer_sql": "SELECT cast((cast(replace(substr(results.time, instr(results.time, ':') + 1), ',', '') AS REAL) - cast(replace(substr(pitStops.time, instr(pitStops.time, ':') + 1), ',', '') AS REAL)) AS REAL) * 100 / (cast(replace(substr(results.time, instr(results.time, ':') + 1), ',', '') AS REAL) - cast(replace(substr(pitStops.time, instr(pitStops.time, ':') + 1), ',', '') AS REAL)) FROM results INNER JOIN pitStops ON results.raceId = pitStops.raceId AND results.driverId = pitStops.driverId WHERE results.statusId = 1 AND results.time IS NOT NULL AND results.driverId = ( SELECT driverId FROM results WHERE statusId = 1 ORDER BY cast(replace(substr(time, instr(time, ':') + 1), ',', '') AS REAL) DESC LIMIT 1 )"
    },
    {
        "question_id": 945,
        "answer_sql": "SELECT count(circuitId) FROM circuits WHERE country = 'Australia' AND LOCATION = 'Melbourne'"
    },
    {
        "question_id": 946,
        "answer_sql": "SELECT lat, lng FROM circuits WHERE country = 'USA'"
    },
    {
        "question_id": 947,
        "answer_sql": "SELECT count(driverId) FROM drivers WHERE dob > 1980"
    },
    {
        "question_id": 948,
        "answer_sql": "SELECT cast(sum(constructorResults.points) AS REAL) / count(constructorResults.points) FROM constructors INNER JOIN constructorResults ON constructors.constructorId = constructorResults.constructorId WHERE constructors.nationality = 'British'"
    },
    {
        "question_id": 949,
        "answer_sql": "SELECT constructorId FROM constructorResults ORDER BY points DESC LIMIT 1"
    },
    {
        "question_id": 950,
        "answer_sql": "SELECT name FROM constructors WHERE constructorId IN ( SELECT constructorId FROM constructorResults WHERE raceId = 18 AND points = 0 )"
    },
    {
        "question_id": 951,
        "answer_sql": "SELECT count(constructorId) FROM constructorResults WHERE constructorId IN ( SELECT constructorId FROM constructors WHERE nationality = 'Japanese' ) AND points = 0"
    },
    {
        "question_id": 952,
        "answer_sql": ""
    },
    {
        "question_id": 953,
        "answer_sql": "SELECT count(DISTINCT constructors.constructorId) FROM lapTimes INNER JOIN results ON lapTimes.raceId = results.raceId INNER JOIN constructors ON results.constructorId = constructors.constructorId WHERE lapTimes.lap > 50 AND constructors.nationality = 'FRANCE'"
    },
    {
        "question_id": 954,
        "answer_sql": "SELECT cast(count(CASE WHEN races.time IS NOT NULL AND races.year BETWEEN 2007 AND 2009 THEN drivers.driverId ELSE NULL END) AS REAL) * 100 / count(drivers.driverId) FROM drivers INNER JOIN results ON drivers.driverId = results.driverId INNER JOIN races ON results.raceId = races.raceId WHERE drivers.nationality = 'Japanese'"
    },
    {
        "question_id": 955,
        "answer_sql": "SELECT cast(sum(cast(replace(substr(time, instr(time, ':') + 1), ':', '') AS REAL)) AS REAL) / count(raceId) FROM results WHERE statusId = 1"
    },
    {
        "question_id": 956,
        "answer_sql": ""
    },
    {
        "question_id": 957,
        "answer_sql": "SELECT count(driverId) FROM results WHERE driverId IS NOT NULL AND statusId = 1 AND time IS NULL"
    },
    {
        "question_id": 958,
        "answer_sql": "SELECT drivers.forename, drivers.surname FROM results INNER JOIN drivers ON results.driverId = drivers.driverId ORDER BY results.fastestLapTime LIMIT 1"
    },
    {
        "question_id": 959,
        "answer_sql": "SELECT results.fastestLap FROM results INNER JOIN races ON results.raceId = races.raceId WHERE races.year = 2009 ORDER BY results.fastestLap DESC LIMIT 1"
    },
    {
        "question_id": 960,
        "answer_sql": "SELECT avg(fastestLapSpeed) FROM results INNER JOIN races ON results.raceId = races.raceId WHERE races.name = 'Spanish Grand Prix'"
    },
    {
        "question_id": 961,
        "answer_sql": "SELECT name, YEAR FROM races WHERE time IS NOT NULL ORDER BY cast(replace(substr(time, instr(time, ':') + 1), ',', '') AS REAL) ASC LIMIT 1"
    },
    {
        "question_id": 962,
        "answer_sql": "SELECT cast(sum(CASE WHEN strftime('%Y', drivers.dob) < '1985' THEN 1 ELSE 0 END) AS REAL) * 100 / count(drivers.driverId) FROM lapTimes INNER JOIN drivers ON lapTimes.driverId = drivers.driverId WHERE strftime('%Y', lapTimes.time) BETWEEN '2000' AND '2005' AND lapTimes.lap > 50"
    },
    {
        "question_id": 963,
        "answer_sql": "SELECT count(drivers.driverId) FROM drivers INNER JOIN lapTimes ON drivers.driverId = lapTimes.driverId WHERE drivers.nationality = 'FRANCE' AND substr(lapTimes.time, 1, 2) < '02'"
    },
    {
        "question_id": 964,
        "answer_sql": ""
    },
    {
        "question_id": 965,
        "answer_sql": "SELECT raceId FROM races WHERE YEAR = 2009"
    },
    {
        "question_id": 966,
        "answer_sql": "SELECT count(driverId) FROM results WHERE raceId = 18"
    },
    {
        "question_id": 967,
        "answer_sql": ""
    },
    {
        "question_id": 968,
        "answer_sql": "SELECT driverRef FROM drivers WHERE forename = 'Robert' AND surname = 'Kubica'"
    },
    {
        "question_id": 969,
        "answer_sql": "SELECT count(driverId) FROM drivers WHERE dob LIKE '1980%' AND nationality = 'Australia'"
    },
    {
        "question_id": 970,
        "answer_sql": "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN lapTimes ON drivers.driverId = lapTimes.driverId WHERE drivers.dob BETWEEN '1980-01-01' AND '1990-12-31' ORDER BY lapTimes.time ASC LIMIT 3"
    },
    {
        "question_id": 971,
        "answer_sql": ""
    },
    {
        "question_id": 972,
        "answer_sql": "SELECT DISTINCT drivers.driverId, drivers.code FROM drivers INNER JOIN lapTimes ON drivers.driverId = lapTimes.driverId WHERE strftime('%Y', drivers.dob) = '1971' ORDER BY lapTimes.milliseconds DESC LIMIT 1"
    },
    {
        "question_id": 973,
        "answer_sql": ""
    },
    {
        "question_id": 974,
        "answer_sql": "SELECT DISTINCT races.year FROM results INNER JOIN races ON results.raceId = races.raceId WHERE results.fastestLapTime IS NOT NULL"
    },
    {
        "question_id": 975,
        "answer_sql": "SELECT DISTINCT substr(fastestLapTime, 1, 4) FROM results WHERE substr(fastestLapTime, 6, 2) = '00' ORDER BY cast(substr(fastestLapTime, 1, 2) AS REAL) DESC LIMIT 1"
    },
    {
        "question_id": 976,
        "answer_sql": "SELECT driverId FROM pitStops ORDER BY milliseconds ASC LIMIT 5"
    },
    {
        "question_id": 977,
        "answer_sql": "SELECT count(results.resultId) FROM results INNER JOIN races ON results.raceId = races.raceId INNER JOIN status ON results.statusId = status.statusId WHERE races.raceId BETWEEN 50 AND 100 AND status.status = 'Disqualified'"
    },
    {
        "question_id": 978,
        "answer_sql": "SELECT count(name) FROM circuits WHERE country = 'Austria'"
    },
    {
        "question_id": 979,
        "answer_sql": "SELECT raceId FROM results WHERE time IS NOT NULL GROUP BY raceId ORDER BY count(raceId) DESC LIMIT 1"
    },
    {
        "question_id": 980,
        "answer_sql": "SELECT drivers.driverRef, drivers.nationality, drivers.dob FROM drivers INNER JOIN qualifying ON drivers.driverId = qualifying.driverId INNER JOIN races ON qualifying.raceId = races.raceId WHERE qualifying.q2 IS NOT NULL AND races.raceId = 23"
    },
    {
        "question_id": 981,
        "answer_sql": "SELECT DISTINCT results.raceId, results.time FROM results INNER JOIN drivers ON results.driverId = drivers.driverId ORDER BY drivers.dob DESC LIMIT 1"
    },
    {
        "question_id": 982,
        "answer_sql": "SELECT count(driverId) FROM results INNER JOIN status ON results.statusId = status.statusId WHERE status.status = 'Disqualified' AND status.statusId = 2"
    },
    {
        "question_id": 983,
        "answer_sql": ""
    },
    {
        "question_id": 984,
        "answer_sql": "SELECT constructors.url FROM constructors INNER JOIN constructorResults ON constructors.constructorId = constructorResults.constructorId GROUP BY constructors.url ORDER BY count(constructorResults.status) DESC LIMIT 1"
    },
    {
        "question_id": 985,
        "answer_sql": " SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN lapTimes ON drivers.driverId = lapTimes.driverId INNER JOIN circuits ON circuits.circuitId = lapTimes.raceId WHERE circuits.country = 'France' AND lapTimes.lap = 3 ORDER BY lapTimes.time DESC LIMIT 1"
    },
    {
        "question_id": 986,
        "answer_sql": "SELECT DISTINCT races.raceId, cast(replace(substr(milliseconds, 1, instr(milliseconds, ',') - 1), 'ms', '') AS REAL) FROM results INNER JOIN races ON results.raceId = races.raceId ORDER BY cast(replace(substr(milliseconds, 1, instr(milliseconds, ',') - 1), 'ms', '') AS REAL) ASC LIMIT 1"
    },
    {
        "question_id": 987,
        "answer_sql": ""
    },
    {
        "question_id": 988,
        "answer_sql": ""
    },
    {
        "question_id": 989,
        "answer_sql": "SELECT races.time FROM races INNER JOIN driverStandings ON races.raceId = driverStandings.raceId WHERE driverStandings.position = 1 AND races.year = 2008"
    },
    {
        "question_id": 990,
        "answer_sql": "SELECT constructors.name, constructors.url FROM constructors INNER JOIN constructorResults ON constructors.constructorId = constructorResults.constructorId INNER JOIN races ON constructorResults.raceId = races.raceId WHERE races.year = 2009 ORDER BY constructorResults.points DESC LIMIT 1"
    },
    {
        "question_id": 991,
        "answer_sql": "SELECT forename, surname, dob FROM drivers WHERE nationality = 'Austrian' AND dob BETWEEN '1981-01-01' AND '1991-12-31'"
    },
    {
        "question_id": 992,
        "answer_sql": ""
    },
    {
        "question_id": 993,
        "answer_sql": "SELECT DISTINCT circuits.location, circuits.country, circuits.lat, circuits.lng FROM circuits INNER JOIN races ON circuits.circuitId = races.circuitId WHERE circuits.name = 'Hungaroring'"
    },
    {
        "question_id": 994,
        "answer_sql": "SELECT constructorResults.points, constructors.name, constructors.nationality FROM constructors INNER JOIN constructorResults ON constructors.constructorId = constructorResults.constructorId WHERE constructorResults.raceId IN ( SELECT raceId FROM races WHERE YEAR BETWEEN 1980 AND 2010 ) ORDER BY constructorResults.points DESC LIMIT 1"
    },
    {
        "question_id": 995,
        "answer_sql": "SELECT cast(sum(results.points) AS REAL) / count(results.points) FROM results INNER JOIN constructors ON results.constructorId = constructors.constructorId WHERE constructors.name = 'Lewis Hamilton'"
    },
    {
        "question_id": 996,
        "answer_sql": "SELECT cast(count(raceId) AS REAL) / 10 FROM races WHERE substr(date, 1, 4) BETWEEN '2000' AND '2010'"
    },
    {
        "question_id": 997,
        "answer_sql": "SELECT nationality FROM constructors GROUP BY nationality ORDER BY count(nationality) DESC LIMIT 1"
    },
    {
        "question_id": 998,
        "answer_sql": "SELECT count(results.points) FROM results INNER JOIN driverStandings ON results.raceId = driverStandings.raceId WHERE driverStandings.position = 91"
    },
    {
        "question_id": 999,
        "answer_sql": "SELECT raceId FROM results ORDER BY fastestLapTime ASC LIMIT 1"
    },
    {
        "question_id": 1000,
        "answer_sql": "SELECT LOCATION, country FROM circuits INNER JOIN races ON circuits.circuitId = races.circuitId WHERE date = ( SELECT max(date) FROM races )"
    },
    {
        "question_id": 1001,
        "answer_sql": "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN qualifying ON drivers.driverId = qualifying.driverId WHERE qualifying.q3 = ( SELECT min(q3) FROM qualifying ) AND qualifying.raceId = ( SELECT raceId FROM qualifying WHERE q3 = ( SELECT min(q3) FROM qualifying ) )"
    },
    {
        "question_id": 1002,
        "answer_sql": "SELECT drivers.forename, drivers.surname, constructors.nationality, races.name FROM drivers INNER JOIN results ON drivers.driverId = results.driverId INNER JOIN constructors ON constructors.constructorId = results.constructorId INNER JOIN races ON races.raceId = results.raceId WHERE drivers.dob IS NOT NULL ORDER BY drivers.dob ASC LIMIT 1"
    },
    {
        "question_id": 1003,
        "answer_sql": "SELECT count(raceId) FROM results WHERE driverId = ( SELECT driverId FROM results WHERE statusId = 3 ORDER BY number DESC LIMIT 1 )"
    },
    {
        "question_id": 1004,
        "answer_sql": "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN results ON drivers.driverId = results.driverId ORDER BY drivers.dob ASC LIMIT 1"
    },
    {
        "question_id": 1005,
        "answer_sql": "SELECT time FROM pitStops ORDER BY milliseconds DESC LIMIT 1"
    },
    {
        "question_id": 1006,
        "answer_sql": "SELECT DISTINCT lapTimes.time FROM lapTimes INNER JOIN races ON lapTimes.raceId = races.raceId ORDER BY lapTimes.milliseconds DESC LIMIT 1"
    },
    {
        "question_id": 1007,
        "answer_sql": "SELECT time FROM pitStops WHERE driverId = ( SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton' ) ORDER BY milliseconds DESC LIMIT 1"
    },
    {
        "question_id": 1008,
        "answer_sql": "SELECT DISTINCT lap FROM pitStops WHERE driverId = ( SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton' ) AND raceId IN ( SELECT raceId FROM races WHERE YEAR = 2011 )"
    },
    {
        "question_id": 1009,
        "answer_sql": "SELECT DISTINCT pitStops.time FROM drivers INNER JOIN pitStops ON drivers.driverId = pitStops.driverId INNER JOIN races ON pitStops.raceId = races.raceId WHERE races.year = 2011"
    },
    {
        "question_id": 1010,
        "answer_sql": "SELECT DISTINCT lap FROM lapTimes WHERE driverId = ( SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton' )"
    },
    {
        "question_id": 1011,
        "answer_sql": " SELECT driverRef.forename, driverRef.surname FROM ( SELECT driverId, min(milliseconds) AS min FROM lapTimes GROUP BY driverId ) AS t2 INNER JOIN drivers AS driverRef ON t2.driverId = driverRef.driverId"
    },
    {
        "question_id": 1012,
        "answer_sql": "SELECT position FROM results WHERE driverId = ( SELECT driverId FROM results WHERE driverId = 1 ORDER BY milliseconds ASC LIMIT 1 )"
    },
    {
        "question_id": 1013,
        "answer_sql": "SELECT lap FROM lapTimes WHERE raceId IN ( SELECT raceId FROM races WHERE circuitId IN ( SELECT circuitId FROM circuits WHERE country = 'Austria' ) ) ORDER BY milliseconds DESC LIMIT 1"
    },
    {
        "question_id": 1014,
        "answer_sql": "SELECT DISTINCT lapTimes.time FROM circuits INNER JOIN lapTimes ON circuits.circuitId = lapTimes.raceId WHERE circuits.country = 'Italy'"
    },
    {
        "question_id": 1015,
        "answer_sql": "SELECT DISTINCT results.raceId FROM results INNER JOIN lapTimes ON results.raceId = lapTimes.raceId WHERE lapTimes.milliseconds = ( SELECT min(milliseconds) FROM lapTimes )"
    },
    {
        "question_id": 1016,
        "answer_sql": "SELECT pitStops.duration FROM races INNER JOIN pitStops ON races.raceId = pitStops.raceId WHERE races.circuitId = 1"
    },
    {
        "question_id": 1017,
        "answer_sql": "SELECT DISTINCT circuits.lat, circuits.lng FROM circuits INNER JOIN lapTimes ON circuits.circuitId = lapTimes.raceId WHERE lapTimes.time = '1:29.488'"
    },
    {
        "question_id": 1018,
        "answer_sql": "SELECT avg(milliseconds) FROM pitStops WHERE driverId = ( SELECT driverId FROM drivers WHERE driverRef = 'lewis-hamilton' )"
    },
    {
        "question_id": 1019,
        "answer_sql": "SELECT avg(milliseconds) FROM lapTimes INNER JOIN races ON lapTimes.raceId = races.raceId WHERE races.year = 2018 AND races.circuitId IN ( SELECT circuitId FROM circuits WHERE country = 'Italy' )"
    },
    {
        "question_id": 1020,
        "answer_sql": "SELECT player_api_id FROM Player_Attributes ORDER BY overall_rating DESC LIMIT 1"
    },
    {
        "question_id": 1021,
        "answer_sql": "SELECT player_name FROM Player ORDER BY height DESC LIMIT 1"
    },
    {
        "question_id": 1022,
        "answer_sql": "SELECT preferred_foot FROM Player_Attributes ORDER BY potential ASC LIMIT 1"
    },
    {
        "question_id": 1023,
        "answer_sql": "SELECT count(Player_Attributes.player_fifa_api_id) FROM `Player_Attributes` INNER JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE Player_Attributes.overall_rating BETWEEN 60 AND 65 AND Player_Attributes.defensive_work_rate = 'low'"
    },
    {
        "question_id": 1024,
        "answer_sql": "SELECT player_api_id FROM Player_Attributes ORDER BY crossing DESC LIMIT 5"
    },
    {
        "question_id": 1025,
        "answer_sql": ""
    },
    {
        "question_id": 1026,
        "answer_sql": ""
    },
    {
        "question_id": 1027,
        "answer_sql": "SELECT player_name FROM Player ORDER BY player_name DESC LIMIT 10"
    },
    {
        "question_id": 1028,
        "answer_sql": "SELECT away_team_api_id FROM `Match` WHERE season = '2010/2011' GROUP BY away_team_api_id ORDER BY sum(CASE WHEN away_team_goal - home_team_goal > 0 THEN 1 ELSE 0 END) DESC LIMIT 1"
    },
    {
        "question_id": 1029,
        "answer_sql": ""
    },
    {
        "question_id": 1030,
        "answer_sql": ""
    },
    {
        "question_id": 1031,
        "answer_sql": "SELECT player_name FROM Player WHERE player_api_id IN ( SELECT player_api_id FROM Player_Attributes WHERE sprint_speed >= 97 AND strftime('%Y', `date`) BETWEEN '2013' AND '2015' )"
    },
    {
        "question_id": 1032,
        "answer_sql": "SELECT name, count(country_id) FROM `League` GROUP BY name ORDER BY count(country_id) DESC LIMIT 1"
    },
    {
        "question_id": 1033,
        "answer_sql": "SELECT avg(height) FROM `Player` WHERE birthday BETWEEN '1990-01-01 00:00:00' AND '1995-12-31 23:59:59'"
    },
    {
        "question_id": 1034,
        "answer_sql": "SELECT player_api_id FROM Player_Attributes WHERE substr(date, 1, 4) = '2010' GROUP BY player_api_id ORDER BY avg(overall_rating) DESC LIMIT 1"
    },
    {
        "question_id": 1035,
        "answer_sql": "SELECT team_fifa_api_id FROM Team_Attributes WHERE buildUpPlaySpeed BETWEEN 51 AND 59"
    },
    {
        "question_id": 1036,
        "answer_sql": "SELECT DISTINCT Team.team_long_name FROM `Team_Attributes` INNER JOIN `Team` ON Team_Attributes.team_fifa_api_id = Team.team_fifa_api_id WHERE strftime('%Y', Team_Attributes.`date`) = '2012' AND Team_Attributes.buildUpPlayPassing IS NOT NULL"
    },
    {
        "question_id": 1037,
        "answer_sql": ""
    },
    {
        "question_id": 1038,
        "answer_sql": "SELECT DISTINCT league_id FROM `Match` GROUP BY league_id ORDER BY sum(home_team_goal + away_team_goal) DESC LIMIT 5"
    },
    {
        "question_id": 1039,
        "answer_sql": ""
    },
    {
        "question_id": 1040,
        "answer_sql": ""
    },
    {
        "question_id": 1041,
        "answer_sql": "SELECT DISTINCT Team.team_long_name FROM `Team_Attributes` INNER JOIN `Team` ON Team_Attributes.team_fifa_api_id = Team.team_fifa_api_id WHERE Team_Attributes.date LIKE '2014%' AND Team_Attributes.buildUpPlayDribblingClass = 'Normal' AND Team_Attributes.chanceCreationPassing < ( SELECT avg(chanceCreationPassing) FROM `Team_Attributes` )"
    },
    {
        "question_id": 1042,
        "answer_sql": "SELECT League.name FROM `Match` INNER JOIN League ON Match.country_id = League.country_id WHERE season = '2009/2010' GROUP BY League.name HAVING avg(home_team_goal) > avg(away_team_goal)"
    },
    {
        "question_id": 1043,
        "answer_sql": "SELECT team_short_name FROM Team WHERE team_long_name = 'Queens Park Rangers'"
    },
    {
        "question_id": 1044,
        "answer_sql": "SELECT player_name FROM Player WHERE substr(birthday, 1, 4) = '1970' AND substr(birthday, 6, 2) = '10'"
    },
    {
        "question_id": 1045,
        "answer_sql": ""
    },
    {
        "question_id": 1046,
        "answer_sql": ""
    },
    {
        "question_id": 1047,
        "answer_sql": "SELECT heading_accuracy FROM Player_Attributes WHERE `date` = '2014-09-18 00:00:00'"
    },
    {
        "question_id": 1048,
        "answer_sql": ""
    },
    {
        "question_id": 1049,
        "answer_sql": "SELECT count(id) FROM `Match` WHERE season = '2015/2016' AND league_id = ( SELECT id FROM League WHERE name = 'Scotland Premier League' )"
    },
    {
        "question_id": 1050,
        "answer_sql": "SELECT preferred_foot FROM Player_Attributes WHERE player_api_id = ( SELECT player_api_id FROM Player ORDER BY birthday DESC LIMIT 1 )"
    },
    {
        "question_id": 1051,
        "answer_sql": ""
    },
    {
        "question_id": 1052,
        "answer_sql": "SELECT count(Player_Attributes.player_api_id) FROM `Player_Attributes` INNER JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE Player.weight < 130 AND Player_Attributes.preferred_foot = 'left'"
    },
    {
        "question_id": 1053,
        "answer_sql": "SELECT DISTINCT Team.team_short_name FROM `Team_Attributes` INNER JOIN Team ON Team_Attributes.team_api_id = Team.team_api_id WHERE Team_Attributes.chanceCreationPassingClass = 'Risky'"
    },
    {
        "question_id": 1054,
        "answer_sql": ""
    },
    {
        "question_id": 1055,
        "answer_sql": ""
    },
    {
        "question_id": 1056,
        "answer_sql": "SELECT name FROM LEAGUE WHERE country_id = ( SELECT id FROM country WHERE name = 'Netherlands' )"
    },
    {
        "question_id": 1057,
        "answer_sql": "SELECT avg(home_team_goal) FROM `Match` WHERE season = '2010/2011' AND country_id = ( SELECT id FROM Country WHERE name = 'Poland' )"
    },
    {
        "question_id": 1058,
        "answer_sql": "SELECT player_name FROM Player WHERE player_name IN ( SELECT player_name FROM Player ORDER BY height DESC LIMIT 1 )"
    },
    {
        "question_id": 1059,
        "answer_sql": ""
    },
    {
        "question_id": 1060,
        "answer_sql": "SELECT count(player_name) FROM `Player` WHERE strftime('%Y', birthday) > '1990'"
    },
    {
        "question_id": 1061,
        "answer_sql": "SELECT count(player_name) FROM `Player` WHERE player_name LIKE 'Adam%' AND weight > 170"
    },
    {
        "question_id": 1062,
        "answer_sql": "SELECT Player.player_name FROM `Player_Attributes` INNER JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE strftime('%Y', Player_Attributes.date) BETWEEN '2008' AND '2010' AND Player_Attributes.overall_rating > 80"
    },
    {
        "question_id": 1063,
        "answer_sql": ""
    },
    {
        "question_id": 1064,
        "answer_sql": ""
    },
    {
        "question_id": 1065,
        "answer_sql": "SELECT DISTINCT Team.team_long_name FROM Team INNER JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id WHERE Team_Attributes.buildUpPlaySpeedClass = 'Fast'"
    },
    {
        "question_id": 1066,
        "answer_sql": ""
    },
    {
        "question_id": 1067,
        "answer_sql": ""
    },
    {
        "question_id": 1068,
        "answer_sql": "SELECT avg(overall_rating) FROM Player_Attributes WHERE strftime('%Y', `date`) BETWEEN '2010' AND '2015' AND overall_rating > 170"
    },
    {
        "question_id": 1069,
        "answer_sql": "SELECT player_name FROM Player ORDER BY height ASC LIMIT 1"
    },
    {
        "question_id": 1070,
        "answer_sql": "SELECT country.name FROM League INNER JOIN `country` ON League.country_id = country.id WHERE League.name = 'Italy Serie A'"
    },
    {
        "question_id": 1071,
        "answer_sql": "SELECT Team.team_short_name FROM Team INNER JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id WHERE Team_Attributes.buildUpPlaySpeed = 31 AND Team_Attributes.buildUpPlayDribbling = 53 AND Team_Attributes.buildUpPlayPassing = 32"
    },
    {
        "question_id": 1072,
        "answer_sql": ""
    },
    {
        "question_id": 1073,
        "answer_sql": "SELECT count(id) FROM `Match` WHERE league_id = ( SELECT id FROM League WHERE name = 'Germany 1. Bundesliga' ) AND `date` BETWEEN '2008-08' AND '2008-10'"
    },
    {
        "question_id": 1074,
        "answer_sql": "SELECT Team.team_short_name FROM `Match` INNER JOIN Team ON Match.home_team_api_id = Team.team_api_id WHERE Match.home_team_goal = 10"
    },
    {
        "question_id": 1075,
        "answer_sql": "SELECT player_name FROM Player WHERE player_api_id IN ( SELECT player_api_id FROM Player_Attributes WHERE balance = 61 AND potential = 61 )"
    },
    {
        "question_id": 1076,
        "answer_sql": ""
    },
    {
        "question_id": 1077,
        "answer_sql": "SELECT team_long_name FROM `Team` WHERE team_short_name = 'GEN'"
    },
    {
        "question_id": 1078,
        "answer_sql": "SELECT player_name FROM Player WHERE birthday = ( SELECT min(birthday) FROM Player )"
    },
    {
        "question_id": 1079,
        "answer_sql": "SELECT player_name FROM Player ORDER BY height DESC LIMIT 1"
    },
    {
        "question_id": 1080,
        "answer_sql": "SELECT count(Player_Attributes.player_api_id) FROM `Player_Attributes` INNER JOIN `Player` ON Player_Attributes.player_api_id = Player.player_api_id WHERE Player_Attributes.preferred_foot = 'Left' AND Player_Attributes.attacking_work_rate = 'low'"
    },
    {
        "question_id": 1081,
        "answer_sql": "SELECT DISTINCT name FROM League WHERE name = 'Belgium Jupiler League'"
    },
    {
        "question_id": 1082,
        "answer_sql": "SELECT name FROM `league` WHERE country_id IN ( SELECT id FROM `country` WHERE name = 'Germany' )"
    },
    {
        "question_id": 1083,
        "answer_sql": ""
    },
    {
        "question_id": 1084,
        "answer_sql": "SELECT count(Player_Attributes.player_fifa_api_id) FROM `Player_Attributes` INNER JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE strftime('%Y', Player.birthday) < '1986' AND Player_Attributes.defensive_work_rate = 'high'"
    },
    {
        "question_id": 1085,
        "answer_sql": "SELECT player_name FROM Player WHERE player_name IN ('Alexis', 'Ariel Borysiuk', 'Arouna Kone') ORDER BY cast(replace(substr(player_name, instr(player_name, ' ') + 1), ',', '') AS REAL) / cast(substr(player_name, 1, instr(player_name, ' ')) AS REAL) DESC LIMIT 1"
    },
    {
        "question_id": 1086,
        "answer_sql": ""
    },
    {
        "question_id": 1087,
        "answer_sql": "SELECT count(Player.player_name) FROM `Player` INNER JOIN `Player_Attributes` ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player_Attributes.volleys > 70 AND Player.height > 180"
    },
    {
        "question_id": 1088,
        "answer_sql": "SELECT DISTINCT Player.player_name FROM `Player_Attributes` INNER JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE Player_Attributes.volleys > 70 AND Player_Attributes.dribbling > 70"
    },
    {
        "question_id": 1089,
        "answer_sql": "SELECT count(id) FROM `Match` WHERE season = '2008/2009' AND country_id IN ( SELECT id FROM Country WHERE name = 'Belgium' )"
    },
    {
        "question_id": 1090,
        "answer_sql": "SELECT Player_Attributes.long_passing FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id ORDER BY birthday ASC LIMIT 1"
    },
    {
        "question_id": 1091,
        "answer_sql": "SELECT count(id) FROM `Match` WHERE league_id = ( SELECT id FROM League WHERE name = 'Belgium Jupiler League' ) AND season = '2009-2010'"
    },
    {
        "question_id": 1092,
        "answer_sql": "SELECT League.name FROM `Match` INNER JOIN League ON League.id = Match.league_id WHERE MATCH.season = '2008/2009' GROUP BY League.name ORDER BY count(MATCH.league_id) DESC LIMIT 1"
    },
    {
        "question_id": 1093,
        "answer_sql": ""
    },
    {
        "question_id": 1094,
        "answer_sql": ""
    },
    {
        "question_id": 1095,
        "answer_sql": "SELECT avg(buildUpPlaySpeed) FROM `Team_Attributes` INNER JOIN `Team` ON Team_Attributes.team_api_id = Team.team_api_id WHERE Team.team_long_name = 'Heart of Midlothian'"
    },
    {
        "question_id": 1096,
        "answer_sql": ""
    },
    {
        "question_id": 1097,
        "answer_sql": "SELECT sum(Player_Attributes.crossing) FROM `Player` INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player.player_name = 'Aaron Lennox'"
    },
    {
        "question_id": 1098,
        "answer_sql": ""
    },
    {
        "question_id": 1099,
        "answer_sql": ""
    },
    {
        "question_id": 1100,
        "answer_sql": ""
    },
    {
        "question_id": 1101,
        "answer_sql": "SELECT avg(away_team_goal) FROM `Match` INNER JOIN Team ON Match.away_team_api_id = Team.team_api_id WHERE Team.team_long_name = 'Parma'"
    },
    {
        "question_id": 1102,
        "answer_sql": "SELECT Player.player_name FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE strftime('%Y-%m-%d', Player_Attributes.`date`) = '2016-06-23' AND Player_Attributes.overall_rating = 77 ORDER BY Player.birthday ASC LIMIT 1"
    },
    {
        "question_id": 1103,
        "answer_sql": ""
    },
    {
        "question_id": 1104,
        "answer_sql": "SELECT Player_Attributes.potential FROM `Player_Attributes` INNER JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE Player.player_name = 'Francesco Parravicini' AND Player_Attributes.date = '2010-08-30 00:00:00'"
    },
    {
        "question_id": 1105,
        "answer_sql": ""
    },
    {
        "question_id": 1106,
        "answer_sql": "SELECT Player_Attributes.defensive_work_rate FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player.player_name = 'Kevin Berigaud' AND Player_Attributes.date = '2013-02-22 00:00:00'"
    },
    {
        "question_id": 1107,
        "answer_sql": ""
    },
    {
        "question_id": 1108,
        "answer_sql": "SELECT DISTINCT CASE WHEN Team_Attributes.date = '2011-02-22' THEN Team_Attributes.buildUpPlaySpeedClass ELSE NULL END FROM `Team_Attributes` INNER JOIN `Team` ON Team_Attributes.team_fifa_api_id = Team.team_fifa_api_id WHERE Team.team_long_name = 'Willem II'"
    },
    {
        "question_id": 1109,
        "answer_sql": "SELECT Team_Attributes.buildUpPlayDribblingClass FROM `Team` INNER JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id WHERE Team.team_short_name = 'LEI' AND Team_Attributes.date = '2015-09-10 00:00:00'"
    },
    {
        "question_id": 1110,
        "answer_sql": "SELECT DISTINCT CASE WHEN Team.team_long_name = 'FC Lorient' AND Player_Attributes.date = '2010-02-22' THEN 'buildUpPlayPassingClass' ELSE NULL END FROM `Team` INNER JOIN `Team_Attributes` ON Team.team_api_id = Team_Attributes.team_api_id INNER JOIN `Player_Attributes` ON Team_Attributes.team_fifa_api_id = Player_Attributes.player_fifa_api_id"
    },
    {
        "question_id": 1111,
        "answer_sql": ""
    },
    {
        "question_id": 1112,
        "answer_sql": "SELECT DISTINCT CASE WHEN Team.team_long_name = 'Hull City' THEN 'chanceCreationCrossingClass' ELSE NULL END FROM `Team_Attributes` INNER JOIN `Team` ON Team.team_api_id = Team_Attributes.team_api_id WHERE Team_Attributes.date = '2010-02-22 00:00:00'"
    },
    {
        "question_id": 1113,
        "answer_sql": "SELECT Team_Attributes.defenceAggressionClass FROM `Team_Attributes` INNER JOIN `Team` ON Team_Attributes.team_api_id = Team.team_api_id WHERE Team.team_long_name = 'Hannover 96' AND Team_Attributes.`date` = '2015-09-10 00:00:00'"
    },
    {
        "question_id": 1114,
        "answer_sql": ""
    },
    {
        "question_id": 1115,
        "answer_sql": "SELECT cast((sum(CASE WHEN Player.player_name = 'Landon Donovan' THEN Player_Attributes.overall_rating ELSE 0 END) - sum(CASE WHEN Player.player_name = 'Jordan Bowery' THEN Player_Attributes.overall_rating ELSE 0 END)) AS REAL) * 100 / sum(CASE WHEN Player.player_name = 'Landon Donovan' THEN 1 ELSE 0 END) FROM `Player` INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE strftime('%Y-%m-%d', Player_Attributes.date) = '2013-07-12'"
    },
    {
        "question_id": 1116,
        "answer_sql": "SELECT player_name FROM `Player` ORDER BY height DESC LIMIT 5"
    },
    {
        "question_id": 1117,
        "answer_sql": "SELECT player_api_id FROM Player ORDER BY weight DESC LIMIT 10"
    },
    {
        "question_id": 1118,
        "answer_sql": ""
    },
    {
        "question_id": 1119,
        "answer_sql": "SELECT sum(home_team_goal) FROM `Match` WHERE home_player_1 = ( SELECT player_api_id FROM Player WHERE player_name = 'Aaron Lennon' )"
    },
    {
        "question_id": 1120,
        "answer_sql": "SELECT sum(away_team_goal) FROM `Match` WHERE home_player_1 = ( SELECT player_api_id FROM Player WHERE player_name = 'Daan Smith' ) AND home_player_2 = ( SELECT player_api_id FROM Player WHERE player_name = 'Filipe Ferreira' )"
    },
    {
        "question_id": 1121,
        "answer_sql": "SELECT sum(CASE WHEN strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', birthday) < 30 THEN 1 ELSE 0 END) FROM `Player`"
    },
    {
        "question_id": 1122,
        "answer_sql": ""
    },
    {
        "question_id": 1123,
        "answer_sql": ""
    },
    {
        "question_id": 1124,
        "answer_sql": "SELECT DISTINCT Player.player_name FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player_Attributes.attacking_work_rate = 'high'"
    },
    {
        "question_id": 1125,
        "answer_sql": ""
    },
    {
        "question_id": 1126,
        "answer_sql": ""
    },
    {
        "question_id": 1127,
        "answer_sql": ""
    },
    {
        "question_id": 1128,
        "answer_sql": "SELECT player_name FROM Player WHERE weight = ( SELECT max(weight) FROM Player )"
    },
    {
        "question_id": 1129,
        "answer_sql": ""
    },
    {
        "question_id": 1130,
        "answer_sql": "SELECT DISTINCT Team.team_short_name FROM `Team_Attributes` INNER JOIN `Team` ON Team_Attributes.team_api_id = Team.team_api_id WHERE Team_Attributes.chanceCreationPassingClass = 'Safe'"
    },
    {
        "question_id": 1131,
        "answer_sql": "SELECT avg(height) FROM `Player` INNER JOIN `Player_Attributes` ON Player.player_api_id = Player_Attributes.player_api_id INNER JOIN `League` ON League.id = League.country_id WHERE League.name = 'Italy'"
    },
    {
        "question_id": 1132,
        "answer_sql": "SELECT player_name FROM Player WHERE height > 180 ORDER BY player_name ASC LIMIT 3"
    },
    {
        "question_id": 1133,
        "answer_sql": "SELECT count(player_name) FROM Player WHERE player_name LIKE 'Aaron%' AND birthday > '1990'"
    },
    {
        "question_id": 1134,
        "answer_sql": "SELECT sum(CASE WHEN id = 6 THEN 1 ELSE 0 END) - sum(CASE WHEN id = 23 THEN 1 ELSE 0 END) AS difference FROM Player_Attributes"
    },
    {
        "question_id": 1135,
        "answer_sql": "SELECT player_api_id FROM Player_Attributes WHERE preferred_foot = 'right' ORDER BY potential ASC LIMIT 3"
    },
    {
        "question_id": 1136,
        "answer_sql": "SELECT count(player_api_id) FROM Player_Attributes WHERE preferred_foot = 'left' AND crossing = ( SELECT max(crossing) FROM Player_Attributes )"
    },
    {
        "question_id": 1137,
        "answer_sql": "SELECT cast(sum(CASE WHEN strength > 80 AND stamina > 80 THEN 1 ELSE 0 END) AS REAL) * 100 / count(id) FROM Player_Attributes"
    },
    {
        "question_id": 1138,
        "answer_sql": "SELECT DISTINCT Country.name FROM `Match` INNER JOIN League ON Match.country_id = League.country_id INNER JOIN Country ON League.country_id = Country.id WHERE League.name = 'Poland Ekstraklasa'"
    },
    {
        "question_id": 1139,
        "answer_sql": "SELECT home_team_goal, away_team_goal FROM `Match` WHERE Date LIKE '2008-09-24%'"
    },
    {
        "question_id": 1140,
        "answer_sql": " SELECT sprint_speed, agility, acceleration FROM Player_Attributes WHERE player_api_id = ( SELECT player_api_id FROM Player WHERE player_name = 'Alexis Blin' )"
    },
    {
        "question_id": 1141,
        "answer_sql": "SELECT DISTINCT CASE WHEN buildUpPlaySpeedClass = 'Slow' THEN 'Slow' WHEN buildUpPlaySpeedClass = 'Balanced' THEN 'Balanced' ELSE 'Fast' END FROM `Team_Attributes` INNER JOIN Team ON Team_Attributes.team_fifa_api_id = Team.team_fifa_api_id WHERE team_long_name = 'KSV Cercle Brugge'"
    },
    {
        "question_id": 1142,
        "answer_sql": "SELECT count(id) FROM `Match` WHERE season = '2015/2016'"
    },
    {
        "question_id": 1143,
        "answer_sql": "SELECT home_team_goal FROM `Match` WHERE country_id = ( SELECT country_id FROM League WHERE country_id = ( SELECT country_id FROM Country WHERE name = 'Netherlands' ) ) ORDER BY home_team_goal DESC LIMIT 1"
    },
    {
        "question_id": 1144,
        "answer_sql": "SELECT Player_Attributes.finishing, Player_Attributes.curve FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id ORDER BY Player.weight DESC LIMIT 1"
    },
    {
        "question_id": 1145,
        "answer_sql": "SELECT League.name FROM `Match` INNER JOIN League ON Match.league_id = League.id WHERE season = '2015/2016' GROUP BY League.name ORDER BY count(league_id) DESC LIMIT 1"
    },
    {
        "question_id": 1146,
        "answer_sql": "SELECT Team.team_long_name FROM `Match` INNER JOIN Team ON Match.away_team_api_id = Team.team_api_id ORDER BY Match.away_team_goal DESC LIMIT 1"
    },
    {
        "question_id": 1147,
        "answer_sql": ""
    },
    {
        "question_id": 1148,
        "answer_sql": ""
    },
    {
        "question_id": 1149,
        "answer_sql": "SELECT cast((sum(CASE WHEN Admission = '+' THEN 1 ELSE 0 END) - sum(CASE WHEN Admission = '-' THEN 1 ELSE 0 END)) AS REAL) * 100 / sum(CASE WHEN Admission = '+' THEN 1 ELSE 0 END) FROM Patient WHERE SEX = 'M'"
    },
    {
        "question_id": 1150,
        "answer_sql": "SELECT cast(sum(CASE WHEN SEX = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / count(SEX) FROM Patient WHERE strftime('%Y', Birthday) > '1930'"
    },
    {
        "question_id": 1151,
        "answer_sql": "SELECT cast(sum(CASE WHEN Admission = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / count(ID) FROM Patient WHERE strftime('%Y', Birthday) BETWEEN '1930' AND '1940'"
    },
    {
        "question_id": 1152,
        "answer_sql": "SELECT cast(sum(CASE WHEN Admission = '+' THEN 1 ELSE 0 END) AS REAL) / sum(CASE WHEN Admission = '-' THEN 1 ELSE 0 END) FROM Patient WHERE Diagnosis = 'SLE'"
    },
    {
        "question_id": 1153,
        "answer_sql": "SELECT DISTINCT Laboratory.Date FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID WHERE Patient.ID = 30609"
    },
    {
        "question_id": 1154,
        "answer_sql": " SELECT SEX, Birthday FROM Patient WHERE ID = 163109"
    },
    {
        "question_id": 1155,
        "answer_sql": "SELECT DISTINCT Patient.ID, Patient.SEX, Patient.Birthday FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.LDH > 500"
    },
    {
        "question_id": 1156,
        "answer_sql": "SELECT Patient.ID, strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', Patient.Birthday) AS age FROM Patient INNER JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.RVVT = '+'"
    },
    {
        "question_id": 1157,
        "answer_sql": "SELECT Patient.ID, Patient.SEX, Examination.Diagnosis FROM Patient INNER JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.Thrombosis = 2"
    },
    {
        "question_id": 1158,
        "answer_sql": "SELECT DISTINCT Patient.ID FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE strftime('%Y', Patient.Birthday) = '1937' AND Laboratory.`T-CHO` > 250"
    },
    {
        "question_id": 1159,
        "answer_sql": " SELECT DISTINCT Patient.ID, Patient.SEX, Examination.Diagnosis FROM Patient INNER JOIN Examination ON Patient.ID = Examination.ID INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.ALB < 3.5"
    },
    {
        "question_id": 1160,
        "answer_sql": ""
    },
    {
        "question_id": 1161,
        "answer_sql": ""
    },
    {
        "question_id": 1162,
        "answer_sql": "SELECT count(ID) FROM Patient WHERE SEX = 'F' AND strftime('%Y', Description) = '1997' AND Admission = '-'"
    },
    {
        "question_id": 1163,
        "answer_sql": "SELECT max(strftime('%Y', Birthday)) - max(strftime('%Y', `First Date`)) AS RESULT FROM Patient"
    },
    {
        "question_id": 1164,
        "answer_sql": "SELECT count(DISTINCT Patient.ID) FROM `Examination` INNER JOIN Patient ON Examination.ID = Patient.ID WHERE strftime('%Y', `Examination Date`) = '1997' AND Thrombosis = '1' AND Patient.SEX = 'F'"
    },
    {
        "question_id": 1165,
        "answer_sql": ""
    },
    {
        "question_id": 1166,
        "answer_sql": "SELECT DISTINCT Patient.Diagnosis FROM Patient INNER JOIN Examination ON Patient.ID = Examination.ID ORDER BY Patient.Birthday ASC LIMIT 1"
    },
    {
        "question_id": 1167,
        "answer_sql": "SELECT cast(count(DISTINCT Patient.ID) AS REAL) / 12 FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID WHERE Laboratory.`Date` LIKE '1998-%-12' AND Patient.SEX = 'M'"
    },
    {
        "question_id": 1168,
        "answer_sql": "SELECT strftime('%Y', `First Date`) - strftime('%Y', Birthday) AS age FROM Patient WHERE Diagnosis = 'SJS' ORDER BY `First Date` ASC LIMIT 1"
    },
    {
        "question_id": 1169,
        "answer_sql": ""
    },
    {
        "question_id": 1170,
        "answer_sql": ""
    },
    {
        "question_id": 1171,
        "answer_sql": "SELECT count(ID) FROM Patient WHERE strftime('%Y', Birthday) < 18 AND `First Date` BETWEEN '1990-01-01' AND '1993-12-31'"
    },
    {
        "question_id": 1172,
        "answer_sql": "SELECT count(DISTINCT Patient.ID) FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.`T-BIL` > 2 AND Patient.SEX = 'M'"
    },
    {
        "question_id": 1173,
        "answer_sql": "SELECT Diagnosis FROM Examination WHERE `Examination Date` BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY Diagnosis ORDER BY count(Diagnosis) DESC LIMIT 1"
    },
    {
        "question_id": 1174,
        "answer_sql": ""
    },
    {
        "question_id": 1175,
        "answer_sql": " SELECT strftime('%Y', Laboratory.Date) - strftime('%Y', Patient.Birthday) FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID INNER JOIN Examination ON Patient.ID = Examination.ID WHERE strftime('%Y', Laboratory.Date) - strftime('%Y', Patient.Birthday) = ( SELECT max(strftime('%Y', Laboratory.Date) - strftime('%Y', Patient.Birthday)) FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID INNER JOIN Examination ON Patient.ID = Examination.ID )"
    },
    {
        "question_id": 1176,
        "answer_sql": "SELECT ANA FROM Examination WHERE ID = 3605340 AND `Examination Date` = '1996-12-02'"
    },
    {
        "question_id": 1177,
        "answer_sql": "SELECT CASE WHEN sum(CASE WHEN `T-CHO` < 250 THEN 1 ELSE 0 END) > 0 THEN 'YES' ELSE 'NO' END AS RESULT FROM Laboratory WHERE ID = 2927464 AND `Date` = '1995-9-4'"
    },
    {
        "question_id": 1178,
        "answer_sql": "SELECT SEX FROM Patient WHERE Diagnosis = 'AORTITIS'"
    },
    {
        "question_id": 1179,
        "answer_sql": "SELECT DISTINCT CASE WHEN `Description` = '1993-11-12' THEN 'aCL IgM' ELSE NULL END FROM Patient WHERE Diagnosis = 'SLE' AND Description = '1994-02-19'"
    },
    {
        "question_id": 1180,
        "answer_sql": ""
    },
    {
        "question_id": 1181,
        "answer_sql": "SELECT strftime('%Y', Birthday) - strftime('%Y', `First Date`) AS age FROM Patient WHERE ID = ( SELECT ID FROM Laboratory WHERE Date = '1991-10-21' AND UA = '8.4' )"
    },
    {
        "question_id": 1182,
        "answer_sql": "SELECT count(Laboratory.ID) FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID WHERE Patient.`First Date` = '1991-06-13' AND Patient.Diagnosis = 'SJS' AND Laboratory.`Date` LIKE '1995%'"
    },
    {
        "question_id": 1183,
        "answer_sql": "SELECT DISTINCT Diagnosis FROM Patient WHERE `First Date` = '1997-01-27' AND Diagnosis = 'SLE'"
    },
    {
        "question_id": 1184,
        "answer_sql": "SELECT DISTINCT Examination.Symptoms FROM Patient INNER JOIN Examination ON Patient.ID = Examination.ID WHERE Patient.Birthday = '1959-03-01' AND Examination.`Examination Date` = '1993-09-27'"
    },
    {
        "question_id": 1185,
        "answer_sql": "SELECT ( SELECT sum(CASE WHEN Laboratory.Date LIKE '1981-11%' THEN Laboratory.`T-CHO` ELSE 0 END) - sum(CASE WHEN Laboratory.Date LIKE '1981-12%' THEN Laboratory.`T-CHO` ELSE 0 END) FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID WHERE Patient.Birthday = '1959-02-18' ) AS RESULT"
    },
    {
        "question_id": 1186,
        "answer_sql": ""
    },
    {
        "question_id": 1187,
        "answer_sql": "SELECT DISTINCT ID FROM Laboratory WHERE Date BETWEEN '1987-07-06' AND '1996-01-31' AND GPT > 30 AND ALB < 4"
    },
    {
        "question_id": 1188,
        "answer_sql": "SELECT ID FROM Patient WHERE SEX = 'F' AND strftime('%Y', Birthday) = '1964' AND Admission = '+'"
    },
    {
        "question_id": 1189,
        "answer_sql": "SELECT cast(sum(CASE WHEN `aCL IgM` > ( SELECT avg(`aCL IgM`) FROM Examination ) THEN 1 ELSE 0 END) AS REAL) * 100 / count(ID) FROM Examination WHERE Thrombosis = 2 AND ANA = 'S'"
    },
    {
        "question_id": 1190,
        "answer_sql": "SELECT cast(sum(CASE WHEN Laboratory.UA <= 6.5 THEN 1 ELSE 0 END) AS REAL) * 100 / count(Laboratory.UA) FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID WHERE Laboratory.`U-PRO` > 0 AND Laboratory.`U-PRO` < 30"
    },
    {
        "question_id": 1191,
        "answer_sql": "SELECT cast(sum(CASE WHEN Diagnosis = 'BEHCET' THEN 1 ELSE 0 END) AS REAL) * 100 / count(ID) FROM Patient WHERE strftime('%Y', `First Date`) = '1981' AND SEX = 'M'"
    },
    {
        "question_id": 1192,
        "answer_sql": "SELECT DISTINCT ID FROM Laboratory WHERE Date LIKE '1991-10%' AND `T-BIL` < 2"
    },
    {
        "question_id": 1193,
        "answer_sql": "SELECT count(Patient.ID) FROM `Patient` INNER JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.ANA != 'p' AND Patient.SEX = 'F' AND strftime('%Y', Patient.Birthday) BETWEEN '1980' AND '1989'"
    },
    {
        "question_id": 1194,
        "answer_sql": "SELECT DISTINCT CASE WHEN Patient.SEX = 'F' THEN 'Female' ELSE 'Male' END FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.CRP > 2 AND Laboratory.CRE = 1 AND Laboratory.LDH = 123"
    },
    {
        "question_id": 1195,
        "answer_sql": "SELECT avg(Laboratory.ALB) FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID WHERE Patient.SEX = 'F' AND Laboratory.PLT > 400 AND Patient.Diagnosis = 'SLE'"
    },
    {
        "question_id": 1196,
        "answer_sql": "SELECT Symptoms FROM Examination WHERE Diagnosis = 'SLE' GROUP BY Symptoms ORDER BY count(Symptoms) DESC LIMIT 1"
    },
    {
        "question_id": 1197,
        "answer_sql": "SELECT `First Date`, Diagnosis FROM Patient WHERE ID = 48473"
    },
    {
        "question_id": 1198,
        "answer_sql": "SELECT count(Patient.ID) FROM Patient INNER JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.Diagnosis = 'APS' AND Patient.SEX = 'F'"
    },
    {
        "question_id": 1199,
        "answer_sql": "SELECT count(DISTINCT Patient.ID) FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID WHERE strftime('%Y', Laboratory.`Date`) = '1997' AND Laboratory.TP BETWEEN 6 AND 8.5"
    },
    {
        "question_id": 1200,
        "answer_sql": "SELECT cast(sum(CASE WHEN Diagnosis LIKE '%SLE%' THEN 1 ELSE 0 END) AS REAL) * 100 / count(ID) FROM Examination"
    },
    {
        "question_id": 1201,
        "answer_sql": "SELECT cast(sum(CASE WHEN SEX = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / count(SEX) FROM Patient WHERE strftime('%Y', Birthday) = '1980' AND Diagnosis = 'RA'"
    },
    {
        "question_id": 1202,
        "answer_sql": "SELECT count(Patient.ID) FROM Patient INNER JOIN Examination ON Patient.ID = Examination.ID WHERE Patient.SEX = 'M' AND Examination.`Examination Date` BETWEEN '1995' AND '1997' AND Examination.Diagnosis = 'BEHCET' AND Patient.Admission = '-'"
    },
    {
        "question_id": 1203,
        "answer_sql": "SELECT count(DISTINCT Patient.ID) FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.WBC < 3.5 AND Patient.SEX = 'F'"
    },
    {
        "question_id": 1204,
        "answer_sql": ""
    },
    {
        "question_id": 1205,
        "answer_sql": "SELECT CASE WHEN UA > 8.0 THEN 'YES' ELSE 'NO' END AS RESULT FROM Laboratory WHERE ID = 57266"
    },
    {
        "question_id": 1206,
        "answer_sql": "SELECT DISTINCT Laboratory.Date FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID WHERE Laboratory.GOT > 60 AND Patient.ID = 48473"
    },
    {
        "question_id": 1207,
        "answer_sql": "SELECT DISTINCT Patient.SEX, Patient.Birthday FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID WHERE strftime('%Y', Laboratory.Date) = '1994' AND Laboratory.GOT < 60"
    },
    {
        "question_id": 1208,
        "answer_sql": ""
    },
    {
        "question_id": 1209,
        "answer_sql": "SELECT DISTINCT Patient.Diagnosis FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID WHERE Laboratory.GPT > 60 ORDER BY Patient.Birthday DESC"
    },
    {
        "question_id": 1210,
        "answer_sql": "SELECT avg(LDH) FROM Laboratory WHERE LDH < 500"
    },
    {
        "question_id": 1211,
        "answer_sql": "SELECT DISTINCT Patient.ID, strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', Patient.Birthday) AS age FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID WHERE Laboratory.LDH BETWEEN 600 AND 800"
    },
    {
        "question_id": 1212,
        "answer_sql": ""
    },
    {
        "question_id": 1213,
        "answer_sql": "SELECT CASE WHEN ALP < 300 THEN 'YES' ELSE 'NO' END AS RESULT FROM Laboratory WHERE Date = '1982-04-01'"
    },
    {
        "question_id": 1214,
        "answer_sql": ""
    },
    {
        "question_id": 1215,
        "answer_sql": ""
    },
    {
        "question_id": 1216,
        "answer_sql": "SELECT DISTINCT CASE WHEN SEX = 'M' THEN 'SELECT DISTINCT Birthday FROM Patient WHERE ALB < 3.5 OR ALB > 5.5 ORDER BY Birthday DESC' ELSE '' END AS RESULT FROM Patient"
    },
    {
        "question_id": 1217,
        "answer_sql": ""
    },
    {
        "question_id": 1218,
        "answer_sql": ""
    },
    {
        "question_id": 1219,
        "answer_sql": "SELECT avg(Laboratory.UA) FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID WHERE Laboratory.UA < 8 AND (Patient.SEX = 'M' OR Patient.SEX = 'F')"
    },
    {
        "question_id": 1220,
        "answer_sql": ""
    },
    {
        "question_id": 1221,
        "answer_sql": ""
    },
    {
        "question_id": 1222,
        "answer_sql": "SELECT count(DISTINCT Patient.ID) FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID WHERE Patient.SEX = 'M' AND Laboratory.CRE > 1.5"
    },
    {
        "question_id": 1223,
        "answer_sql": ""
    },
    {
        "question_id": 1224,
        "answer_sql": ""
    },
    {
        "question_id": 1225,
        "answer_sql": "SELECT DISTINCT CASE WHEN TG > 2 THEN 'TG > 2' ELSE 'TG <= 2' END FROM Laboratory WHERE TG IS NOT NULL"
    },
    {
        "question_id": 1226,
        "answer_sql": ""
    },
    {
        "question_id": 1227,
        "answer_sql": "SELECT avg(strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', Patient.Birthday)) FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID WHERE Laboratory.`T-CHO` > 250 AND Patient.SEX = 'M'"
    },
    {
        "question_id": 1228,
        "answer_sql": "SELECT DISTINCT Patient.ID, Patient.Diagnosis FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID WHERE Laboratory.TG > 300"
    },
    {
        "question_id": 1229,
        "answer_sql": "SELECT count(DISTINCT Patient.ID) FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID WHERE Laboratory.TG > 200 AND strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', Patient.Birthday) > 50"
    },
    {
        "question_id": 1230,
        "answer_sql": ""
    },
    {
        "question_id": 1231,
        "answer_sql": "SELECT count(DISTINCT Patient.ID) FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE strftime('%Y', Patient.Birthday) BETWEEN '1936' AND '1956' AND Patient.Sex = 'M' AND Laboratory.CPK >= 250"
    },
    {
        "question_id": 1232,
        "answer_sql": "SELECT DISTINCT Patient.ID, Patient.SEX, strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', Patient.Birthday) AS age FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID WHERE Laboratory.GLU > 180 AND Laboratory.`T-CHO` < 250"
    },
    {
        "question_id": 1233,
        "answer_sql": " SELECT DISTINCT ID, GLU FROM Laboratory WHERE strftime('%Y', Date) > '1991' AND GLU < 180"
    },
    {
        "question_id": 1234,
        "answer_sql": "SELECT DISTINCT patient.ID, patient.sex, patient.birthday FROM Laboratory INNER JOIN patient ON Laboratory.ID = patient.ID WHERE (WBC <= 3.5 OR WBC >= 9.0) GROUP BY patient.ID, patient.sex, patient.birthday ORDER BY patient.birthday ASC"
    },
    {
        "question_id": 1235,
        "answer_sql": "SELECT DISTINCT Patient.ID, strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', Patient.Birthday) AS age FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID WHERE Laboratory.RBC < 3.5"
    },
    {
        "question_id": 1236,
        "answer_sql": " SELECT CASE WHEN Admission = '+' THEN 'YES' ELSE 'NO' END FROM Patient WHERE SEX = 'F' AND (strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', Birthday)) > 50"
    },
    {
        "question_id": 1237,
        "answer_sql": "SELECT DISTINCT Patient.ID, Patient.SEX FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.HGB < 10 AND Patient.Admission = '-'"
    },
    {
        "question_id": 1238,
        "answer_sql": " SELECT Patient.ID, Patient.SEX FROM Patient INNER JOIN Examination ON Patient.ID = Examination.ID INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Examination.Diagnosis = 'SLE' AND 10 < Laboratory.HGB < 17 ORDER BY Patient.Birthday ASC LIMIT 1"
    },
    {
        "question_id": 1239,
        "answer_sql": "SELECT DISTINCT Patient.ID, strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', Patient.Birthday) AS age FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID WHERE Laboratory.HCT >= 52"
    },
    {
        "question_id": 1240,
        "answer_sql": "SELECT avg(HCT) FROM Laboratory WHERE Date LIKE '1991%' AND HCT < 29"
    },
    {
        "question_id": 1241,
        "answer_sql": "SELECT cast((sum(PLT < 100)) AS REAL) / sum(PLT > 400) FROM Laboratory"
    },
    {
        "question_id": 1242,
        "answer_sql": "SELECT DISTINCT CASE WHEN substr(Laboratory.`Date`, 1, 4) = '1984' AND Laboratory.PLT BETWEEN 100 AND 400 THEN Patient.ID ELSE NULL END AS RESULT FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID WHERE substr(Laboratory.`Date`, 1, 4) = '1984' AND substr(strftime('%Y', Patient.Birthday), -2) - substr(strftime('%Y', Laboratory.`Date`), -2) < 50"
    },
    {
        "question_id": 1243,
        "answer_sql": "SELECT cast(sum(CASE WHEN Patient.SEX = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / count(Patient.SEX) FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID WHERE strftime('%Y', Laboratory.`Date`) - strftime('%Y', Patient.Birthday) > 55 AND Laboratory.PT >= 14"
    },
    {
        "question_id": 1244,
        "answer_sql": "SELECT DISTINCT ID FROM Patient WHERE strftime('%Y', `First Date`) > '1992' AND cast(substr(Description, 1, instr(Description, '.') - 1) AS REAL) < 14"
    },
    {
        "question_id": 1245,
        "answer_sql": "SELECT count(ID) FROM Laboratory WHERE Date > '1997-01-01' AND APTT < 45"
    },
    {
        "question_id": 1246,
        "answer_sql": "SELECT count(DISTINCT Patient.ID) FROM `Laboratory` INNER JOIN Examination ON Laboratory.ID = Examination.ID INNER JOIN Patient ON Examination.ID = Patient.ID WHERE Laboratory.APTT > 45 AND Examination.Thrombosis = 3"
    },
    {
        "question_id": 1247,
        "answer_sql": "SELECT count(DISTINCT Patient.ID) FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID WHERE Laboratory.FG BETWEEN 150 AND 450 AND Patient.SEX = 'M' AND Laboratory.WBC BETWEEN 3.5 AND 9"
    },
    {
        "question_id": 1248,
        "answer_sql": "SELECT count(DISTINCT ID) FROM Laboratory WHERE strftime('%Y', Date) > '1980' AND FG BETWEEN 150 AND 450"
    },
    {
        "question_id": 1249,
        "answer_sql": "SELECT DISTINCT Diagnosis FROM Examination WHERE `aCL IgG` > 30"
    },
    {
        "question_id": 1250,
        "answer_sql": ""
    },
    {
        "question_id": 1251,
        "answer_sql": "SELECT count(Patient.ID) FROM Patient INNER JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.ANA < 900 AND Examination.Symptoms = 'abortion'"
    },
    {
        "question_id": 1252,
        "answer_sql": "SELECT count(DISTINCT Patient.ID) FROM Patient INNER JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.ANA IS NOT NULL AND (Examination.ANA BETWEEN 900 AND 2000) AND Examination.Symptoms IS NOT NULL"
    },
    {
        "question_id": 1253,
        "answer_sql": "SELECT DISTINCT CASE WHEN max(Laboratory.IGA) BETWEEN 80 AND 500 THEN Patient.Diagnosis ELSE NULL END AS RESULT FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID"
    },
    {
        "question_id": 1254,
        "answer_sql": "SELECT count(DISTINCT Patient.ID) FROM `Patient` INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.IGA BETWEEN 80 AND 500 AND strftime('%Y', Laboratory.`Date`) >= '1990'"
    },
    {
        "question_id": 1255,
        "answer_sql": "SELECT Diagnosis FROM Examination WHERE `aCL IgM` NOT BETWEEN 40 AND 400 GROUP BY Diagnosis ORDER BY count(Diagnosis) DESC LIMIT 1"
    },
    {
        "question_id": 1256,
        "answer_sql": "SELECT count(ID) FROM Patient WHERE Description IS NULL"
    },
    {
        "question_id": 1257,
        "answer_sql": ""
    },
    {
        "question_id": 1258,
        "answer_sql": "SELECT count(DISTINCT Patient.ID) FROM Patient INNER JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.KCT = '+' AND Patient.Sex = 'F' AND Examination.ANA = 1"
    },
    {
        "question_id": 1259,
        "answer_sql": ""
    },
    {
        "question_id": 1260,
        "answer_sql": "SELECT DISTINCT Patient.ID FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.RF < 20 AND (strftime('%Y', 'now') - strftime('%Y', Patient.Birthday)) > 60"
    },
    {
        "question_id": 1261,
        "answer_sql": " SELECT count(DISTINCT Patient.ID) FROM `Examination` INNER JOIN Patient ON Examination.ID = Patient.ID INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Examination.Thrombosis = '0' AND Laboratory.RF < 20"
    },
    {
        "question_id": 1262,
        "answer_sql": "SELECT count(DISTINCT Patient.ID) FROM Patient INNER JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.ANA > 35 AND Examination.`ANA Pattern` = 'P'"
    },
    {
        "question_id": 1263,
        "answer_sql": ""
    },
    {
        "question_id": 1264,
        "answer_sql": "SELECT count(DISTINCT ID) FROM Laboratory WHERE C4 > 10"
    },
    {
        "question_id": 1265,
        "answer_sql": ""
    },
    {
        "question_id": 1266,
        "answer_sql": ""
    },
    {
        "question_id": 1267,
        "answer_sql": "SELECT count(DISTINCT Laboratory.ID) FROM Laboratory INNER JOIN Examination ON Laboratory.ID = Examination.ID WHERE Laboratory.SM IN ('-', '+-') AND Examination.Thrombosis = '1'"
    },
    {
        "question_id": 1268,
        "answer_sql": ""
    },
    {
        "question_id": 1269,
        "answer_sql": ""
    },
    {
        "question_id": 1270,
        "answer_sql": " SELECT count(DISTINCT Patient.ID) FROM Patient INNER JOIN Examination ON Patient.ID = Examination.ID INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Examination.Symptoms = 'vertigo' AND Patient.SEX = 'M' AND Laboratory.SC170 = '-'"
    },
    {
        "question_id": 1271,
        "answer_sql": "SELECT count(DISTINCT ID) FROM Patient WHERE `First Date` < '1990' AND Admission = 'normal anti-SSA'"
    },
    {
        "question_id": 1272,
        "answer_sql": ""
    },
    {
        "question_id": 1273,
        "answer_sql": "SELECT count(DISTINCT ID) FROM Examination WHERE `aCL IgG` IS NULL AND `aCL IgM` IS NULL AND `ANA Pattern` = 'negative' AND Diagnosis = 'SLE'"
    },
    {
        "question_id": 1274,
        "answer_sql": "SELECT count(DISTINCT CASE WHEN Laboratory.SSB IN ('-', '+-') AND Examination.Symptoms IS NOT NULL THEN Examination.ID ELSE NULL END) FROM Laboratory INNER JOIN Examination ON Laboratory.ID = Examination.ID"
    },
    {
        "question_id": 1275,
        "answer_sql": "SELECT count(DISTINCT Patient.ID) FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.CENTROMEA IN ('-', '+-') AND Laboratory.SSB IN ('-', '+-') AND Patient.SEX = 'M'"
    },
    {
        "question_id": 1276,
        "answer_sql": "SELECT DISTINCT Diagnosis FROM Examination WHERE `aCL IgG` > 8"
    },
    {
        "question_id": 1277,
        "answer_sql": "SELECT count(DISTINCT ID) FROM Patient WHERE Description IS NULL"
    },
    {
        "question_id": 1278,
        "answer_sql": ""
    },
    {
        "question_id": 1279,
        "answer_sql": "SELECT cast(sum(CASE WHEN Laboratory.GOT >= 60 THEN 1 ELSE 0 END) AS REAL) * 100 / count(Laboratory.ID) FROM Laboratory INNER JOIN Examination ON Laboratory.ID = Examination.ID WHERE Examination.Diagnosis = 'SLE'"
    },
    {
        "question_id": 1280,
        "answer_sql": "SELECT count(DISTINCT Patient.ID) FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.GOT < 60 AND Patient.SEX = 'M'"
    },
    {
        "question_id": 1281,
        "answer_sql": ""
    },
    {
        "question_id": 1282,
        "answer_sql": "SELECT DISTINCT Date FROM Laboratory WHERE GPT < 60 ORDER BY GPT DESC LIMIT 3"
    },
    {
        "question_id": 1283,
        "answer_sql": "SELECT count(Patient.ID) FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID WHERE Laboratory.GOT < 60 AND Patient.SEX = 'M'"
    },
    {
        "question_id": 1284,
        "answer_sql": "SELECT min(Date) FROM Laboratory WHERE LDH < 500"
    },
    {
        "question_id": 1285,
        "answer_sql": "SELECT DISTINCT CASE WHEN Laboratory.LDH >= 500 THEN 'SELECT DISTINCT Laboratory.Date FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID ORDER BY Laboratory.Date DESC LIMIT 1' ELSE '' END AS RESULT FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID"
    },
    {
        "question_id": 1286,
        "answer_sql": "SELECT count(DISTINCT Patient.ID) FROM `Laboratory` INNER JOIN Patient ON Laboratory.ID = Patient.ID WHERE Laboratory.ALP >= 300 AND Patient.Admission = '+'"
    },
    {
        "question_id": 1287,
        "answer_sql": "SELECT count(DISTINCT Patient.ID) FROM `Patient` INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.ALP < 300 AND Patient.Admission = '-'"
    },
    {
        "question_id": 1288,
        "answer_sql": ""
    },
    {
        "question_id": 1289,
        "answer_sql": "SELECT count(DISTINCT Patient.ID) FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID INNER JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.Diagnosis = 'SJS' AND Laboratory.TP BETWEEN 6.0 AND 8.5"
    },
    {
        "question_id": 1290,
        "answer_sql": " SELECT `Examination Date` FROM Examination WHERE `aCL IgA` = ( SELECT max(`aCL IgA`) FROM Examination )"
    },
    {
        "question_id": 1291,
        "answer_sql": "SELECT count(DISTINCT Patient.ID) FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID WHERE Patient.SEX = 'M' AND Laboratory.ALB > 3.5 AND Laboratory.ALB < 5.5 AND Laboratory.TP BETWEEN 6.0 AND 8.5"
    },
    {
        "question_id": 1292,
        "answer_sql": "SELECT Laboratory.UA FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID WHERE Patient.SEX = 'F' AND Laboratory.UA > 6.50"
    },
    {
        "question_id": 1293,
        "answer_sql": " SELECT max(Laboratory.ALP) FROM Laboratory INNER JOIN Examination ON Laboratory.ID = Examination.ID WHERE Laboratory.CRE < 1.5"
    },
    {
        "question_id": 1294,
        "answer_sql": "SELECT DISTINCT Patient.ID FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID WHERE Laboratory.CRE < 1.5 ORDER BY Laboratory.ALP DESC LIMIT 1"
    },
    {
        "question_id": 1295,
        "answer_sql": "SELECT count(DISTINCT Patient.ID) FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID INNER JOIN Examination ON Patient.ID = Examination.ID WHERE Laboratory.`T-BIL` > 2 AND Examination.`ANA Pattern` LIKE '%P%'"
    },
    {
        "question_id": 1296,
        "answer_sql": ""
    },
    {
        "question_id": 1297,
        "answer_sql": "SELECT count(DISTINCT Patient.ID) FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID INNER JOIN Examination ON Patient.ID = Examination.ID WHERE Laboratory.`T-CHO` > 250 AND Examination.KCT = '-'"
    },
    {
        "question_id": 1298,
        "answer_sql": "SELECT count(DISTINCT Patient.ID) FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID INNER JOIN Examination ON Patient.ID = Examination.ID WHERE Laboratory.`T-CHO` < 250 AND Examination.`ANA Pattern` = 'P'"
    },
    {
        "question_id": 1299,
        "answer_sql": "SELECT count(DISTINCT Patient.ID) FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID INNER JOIN Examination ON Patient.ID = Examination.ID WHERE Laboratory.TG < 200 AND Examination.Symptoms IS NOT NULL"
    },
    {
        "question_id": 1300,
        "answer_sql": ""
    },
    {
        "question_id": 1301,
        "answer_sql": "SELECT DISTINCT Examination.ID FROM Examination INNER JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Laboratory.CPK < 250 AND Examination.Thrombosis = 0"
    },
    {
        "question_id": 1302,
        "answer_sql": "SELECT count(ID) FROM Laboratory WHERE CPK < 250 AND (TG = 1 OR TG = 2)"
    },
    {
        "question_id": 1303,
        "answer_sql": ""
    },
    {
        "question_id": 1304,
        "answer_sql": "SELECT count(ID) FROM Examination WHERE `aCL IgG` < 180 AND Thrombosis = 0"
    },
    {
        "question_id": 1305,
        "answer_sql": ""
    },
    {
        "question_id": 1306,
        "answer_sql": "SELECT count(DISTINCT Patient.ID) FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID WHERE Laboratory.WBC BETWEEN 3.5 AND 9.0 AND Patient.Diagnosis = 'SLE'"
    },
    {
        "question_id": 1307,
        "answer_sql": ""
    },
    {
        "question_id": 1308,
        "answer_sql": "SELECT count(DISTINCT Laboratory.ID) FROM Laboratory INNER JOIN Examination ON Laboratory.ID = Examination.ID WHERE Laboratory.PLT > 100 AND Laboratory.PLT < 400 AND Examination.Diagnosis IS NOT NULL"
    },
    {
        "question_id": 1309,
        "answer_sql": ""
    },
    {
        "question_id": 1310,
        "answer_sql": ""
    },
    {
        "question_id": 1311,
        "answer_sql": "SELECT count(DISTINCT Laboratory.PT) FROM Laboratory INNER JOIN Examination ON Laboratory.ID = Examination.ID WHERE Examination.Thrombosis = 2 AND Laboratory.PT < 14"
    },
    {
        "question_id": 1312,
        "answer_sql": "SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Angela' AND member.last_name = 'Sanders'"
    },
    {
        "question_id": 1313,
        "answer_sql": "SELECT count(member_id) FROM member WHERE link_to_major = ( SELECT major_id FROM major WHERE college = 'College of Engineering' )"
    },
    {
        "question_id": 1314,
        "answer_sql": ""
    },
    {
        "question_id": 1315,
        "answer_sql": "SELECT count(DISTINCT member.member_id) FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer'"
    },
    {
        "question_id": 1316,
        "answer_sql": "SELECT member.phone FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id WHERE event.event_name = 'Women''s Soccer'"
    },
    {
        "question_id": 1317,
        "answer_sql": "SELECT count(member_id) FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer' AND member.t_shirt_size = 'Medium'"
    },
    {
        "question_id": 1318,
        "answer_sql": "SELECT event_name FROM event GROUP BY event_name ORDER BY count(event_id) DESC LIMIT 1"
    },
    {
        "question_id": 1319,
        "answer_sql": "SELECT major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Vice President'"
    },
    {
        "question_id": 1320,
        "answer_sql": "SELECT event.event_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE member.first_name = 'Maya' AND member.last_name = 'Mclean'"
    },
    {
        "question_id": 1321,
        "answer_sql": "SELECT count(event_id) FROM event WHERE event_date LIKE '2019%' AND event_name = 'Sacha Harrison Attends Event'"
    },
    {
        "question_id": 1322,
        "answer_sql": ""
    },
    {
        "question_id": 1323,
        "answer_sql": "SELECT event.event_name FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event GROUP BY event.event_name HAVING count(attendance.link_to_event) > 20"
    },
    {
        "question_id": 1324,
        "answer_sql": "SELECT cast(count(event_id) AS REAL) / count(DISTINCT event_name) FROM event WHERE strftime('%Y', event_date) = '2020' AND TYPE = 'Meeting'"
    },
    {
        "question_id": 1325,
        "answer_sql": "SELECT expense_description FROM expense ORDER BY cost DESC LIMIT 1"
    },
    {
        "question_id": 1326,
        "answer_sql": "SELECT count(member_id) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Environmental Engineering'"
    },
    {
        "question_id": 1327,
        "answer_sql": "SELECT member.first_name, member.last_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Laugh Out Loud'"
    },
    {
        "question_id": 1328,
        "answer_sql": "SELECT member.last_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Law and Constitutional Studies'"
    },
    {
        "question_id": 1329,
        "answer_sql": "SELECT zip_code.county FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.first_name = 'Sherri' AND member.last_name = 'Ramsey'"
    },
    {
        "question_id": 1330,
        "answer_sql": "SELECT college FROM major WHERE major_id = ( SELECT link_to_major FROM member WHERE first_name = 'Tyler' AND last_name = 'Hewitt' )"
    },
    {
        "question_id": 1331,
        "answer_sql": "SELECT sum(amount) FROM income WHERE source = 'Vice President'"
    },
    {
        "question_id": 1332,
        "answer_sql": "SELECT sum(budget.amount) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'September Meeting' AND budget.category = 'Food'"
    },
    {
        "question_id": 1333,
        "answer_sql": "SELECT zip_code.city, zip_code.state FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.position = 'President'"
    },
    {
        "question_id": 1334,
        "answer_sql": "SELECT member.first_name, member.last_name FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.state = 'Illinois'"
    },
    {
        "question_id": 1335,
        "answer_sql": "SELECT sum(budget.spent) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'September Meeting' AND budget.category = 'Advertisement'"
    },
    {
        "question_id": 1336,
        "answer_sql": ""
    },
    {
        "question_id": 1337,
        "answer_sql": "SELECT sum(budget.amount) FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE event.event_name = 'October Speaker'"
    },
    {
        "question_id": 1338,
        "answer_sql": "SELECT CASE WHEN sum(CASE WHEN status = 'approved' THEN 1 ELSE 0 END) > 0 THEN 'YES' ELSE 'NO' END AS RESULT FROM event WHERE event_name = 'October Meeting' AND event_date = '2019-10-08'"
    },
    {
        "question_id": 1339,
        "answer_sql": "SELECT sum(cost) / count(expense_id) FROM expense WHERE substr(expense_date, 1, 7) IN ('2020-09', '2020-10')"
    },
    {
        "question_id": 1340,
        "answer_sql": "SELECT sum(CASE WHEN substr(event.event_date, 1, 4) = '2019' THEN budget.spent ELSE 0 END) - sum(CASE WHEN substr(event.event_date, 1, 4) = '2020' THEN budget.spent ELSE 0 END) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id"
    },
    {
        "question_id": 1341,
        "answer_sql": "SELECT DISTINCT LOCATION FROM event WHERE event_name = 'Spring Budget Review'"
    },
    {
        "question_id": 1342,
        "answer_sql": " SELECT expense_date, cost FROM expense WHERE expense_description = 'Posters' AND expense_date = '2019-09-04'"
    },
    {
        "question_id": 1343,
        "answer_sql": "SELECT budget.remaining FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.category = 'Food' ORDER BY budget.amount DESC LIMIT 1"
    },
    {
        "question_id": 1344,
        "answer_sql": "SELECT notes FROM income WHERE date_received = '2019-09-14' AND source = 'Fundraising'"
    },
    {
        "question_id": 1345,
        "answer_sql": "SELECT count(major_id) FROM major WHERE college = 'College of Humanities and Social Sciences'"
    },
    {
        "question_id": 1346,
        "answer_sql": "SELECT phone FROM member WHERE first_name = 'Carlo' AND last_name = 'Jacobs'"
    },
    {
        "question_id": 1347,
        "answer_sql": "SELECT zip_code.county FROM zip_code INNER JOIN member ON zip_code.zip_code = member.zip WHERE member.first_name = 'Adela' AND member.last_name = 'O''Gallagher'"
    },
    {
        "question_id": 1348,
        "answer_sql": ""
    },
    {
        "question_id": 1349,
        "answer_sql": "SELECT sum(budget.amount) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'September Speaker'"
    },
    {
        "question_id": 1350,
        "answer_sql": ""
    },
    {
        "question_id": 1351,
        "answer_sql": "SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Brent' AND member.last_name = 'Thomason'"
    },
    {
        "question_id": 1352,
        "answer_sql": "SELECT count(member_id) FROM member WHERE link_to_major = 'Human Development and Family Studies' AND t_shirt_size = 'Large'"
    },
    {
        "question_id": 1353,
        "answer_sql": "SELECT zip_code.type FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.first_name = 'Christof' AND member.last_name = 'Nielson'"
    },
    {
        "question_id": 1354,
        "answer_sql": "SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Vice President'"
    },
    {
        "question_id": 1355,
        "answer_sql": "SELECT zip_code.state FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.first_name = 'Sacha' AND member.last_name = 'Harrison'"
    },
    {
        "question_id": 1356,
        "answer_sql": "SELECT link_to_major FROM member WHERE POSITION = 'President'"
    },
    {
        "question_id": 1357,
        "answer_sql": "SELECT income_id FROM income WHERE source = 'Dues'"
    },
    {
        "question_id": 1358,
        "answer_sql": "SELECT member.first_name, member.last_name FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE income.source = 'Dues' ORDER BY income.date_received ASC LIMIT 1"
    },
    {
        "question_id": 1359,
        "answer_sql": "SELECT cast(sum(CASE WHEN event.event_name = 'Yearly Kickoff' THEN budget.amount ELSE 0 END) AS REAL) / sum(CASE WHEN event.event_name = 'October Meeting' THEN budget.amount ELSE 0 END) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.category = 'Advertisement'"
    },
    {
        "question_id": 1360,
        "answer_sql": "SELECT cast(sum(CASE WHEN category = 'Parking' THEN amount ELSE 0 END) AS REAL) * 100 / sum(amount) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'November Speaker'"
    },
    {
        "question_id": 1361,
        "answer_sql": "SELECT sum(expense.cost) FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE expense.expense_description = 'Pizza'"
    },
    {
        "question_id": 1362,
        "answer_sql": "SELECT count(city) FROM zip_code WHERE county = 'Orange County' AND state = 'Virginia'"
    },
    {
        "question_id": 1363,
        "answer_sql": "SELECT department FROM major WHERE college = 'College of Humanities and Social Sciences'"
    },
    {
        "question_id": 1364,
        "answer_sql": "SELECT zip_code.city, zip_code.county, zip_code.state FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.first_name = 'Amy' AND member.last_name = 'Firth'"
    },
    {
        "question_id": 1365,
        "answer_sql": "SELECT expense_description FROM expense WHERE link_to_budget = ( SELECT budget_id FROM budget ORDER BY remaining LIMIT 1 )"
    },
    {
        "question_id": 1366,
        "answer_sql": "SELECT member.first_name, member.last_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'October Meeting'"
    },
    {
        "question_id": 1367,
        "answer_sql": "SELECT major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id GROUP BY major.college ORDER BY count(major.college) DESC LIMIT 1"
    },
    {
        "question_id": 1368,
        "answer_sql": "SELECT link_to_major FROM member WHERE phone = '809-555-3360'"
    },
    {
        "question_id": 1369,
        "answer_sql": "SELECT event.event_name FROM event INNER JOIN budget ON event.event_id = budget.link_to_event ORDER BY budget.amount DESC LIMIT 1"
    },
    {
        "question_id": 1370,
        "answer_sql": "SELECT expense_description FROM expense WHERE link_to_member = ( SELECT member_id FROM member WHERE position = 'Vice President' )"
    },
    {
        "question_id": 1371,
        "answer_sql": "SELECT count(DISTINCT member.member_id) FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer'"
    },
    {
        "question_id": 1372,
        "answer_sql": "SELECT income_id FROM income WHERE link_to_member = ( SELECT member_id FROM member WHERE first_name = 'Casey' AND last_name = 'Mason' )"
    },
    {
        "question_id": 1373,
        "answer_sql": "SELECT count(zip) FROM member WHERE zip IN ( SELECT zip_code FROM zip_code WHERE state = 'MD' )"
    },
    {
        "question_id": 1374,
        "answer_sql": "SELECT count(event.event_id) FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id WHERE member.phone = '954-555-6240'"
    },
    {
        "question_id": 1375,
        "answer_sql": "SELECT member.first_name, member.last_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'School of Applied Sciences, Technology and Education'"
    },
    {
        "question_id": 1376,
        "answer_sql": "SELECT event_name FROM event WHERE status = 'Closed' ORDER BY cast(replace(substr(notes, instr(notes, ' '), -4), ',', '') AS REAL) / replace(substr(notes, instr(notes, ' '), -4), ',', '') DESC LIMIT 1"
    },
    {
        "question_id": 1377,
        "answer_sql": "SELECT count(member_id) FROM member WHERE POSITION = 'President'"
    },
    {
        "question_id": 1378,
        "answer_sql": "SELECT budget.amount FROM budget INNER JOIN event ON budget.link_to_event = event.event_id ORDER BY budget.spent DESC LIMIT 1"
    },
    {
        "question_id": 1379,
        "answer_sql": "SELECT count(event_id) FROM event WHERE strftime('%Y', event_date) = '2020' AND TYPE = 'Meeting'"
    },
    {
        "question_id": 1380,
        "answer_sql": "SELECT sum(spent) FROM budget WHERE category = 'Food'"
    },
    {
        "question_id": 1381,
        "answer_sql": "SELECT member.first_name, member.last_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member GROUP BY attendance.link_to_member HAVING count(attendance.link_to_event) > 7"
    },
    {
        "question_id": 1382,
        "answer_sql": "SELECT member.first_name, member.last_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Community Theater' AND member.link_to_major = ( SELECT major_id FROM major WHERE major_name = 'Interior Design' )"
    },
    {
        "question_id": 1383,
        "answer_sql": "SELECT member.first_name, member.last_name FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.city = 'Georgetown' AND zip_code.state = 'South Carolina'"
    },
    {
        "question_id": 1384,
        "answer_sql": "SELECT count(income_id) FROM income WHERE source = 'Grant Gilmour'"
    },
    {
        "question_id": 1385,
        "answer_sql": "SELECT member.first_name, member.last_name FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE income.amount > 40"
    },
    {
        "question_id": 1386,
        "answer_sql": "SELECT sum(expense.cost) FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event INNER JOIN expense ON expense.link_to_member = attendance.link_to_member WHERE event.event_name = 'Yearly Kickoff'"
    },
    {
        "question_id": 1387,
        "answer_sql": "SELECT member.first_name, member.last_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Yearly Kickoff'"
    },
    {
        "question_id": 1388,
        "answer_sql": "SELECT member.first_name, member.last_name, income.source FROM member INNER JOIN income ON member.member_id = income.link_to_member ORDER BY income.amount DESC LIMIT 1"
    },
    {
        "question_id": 1389,
        "answer_sql": "SELECT event_name FROM event ORDER BY event_name ASC LIMIT 1"
    },
    {
        "question_id": 1390,
        "answer_sql": ""
    },
    {
        "question_id": 1391,
        "answer_sql": "SELECT cast(sum(CASE WHEN major_name = 'Finance' THEN 1 ELSE 0 END) AS REAL) / sum(CASE WHEN major_name = 'Physics' THEN 1 ELSE 0 END) FROM major"
    },
    {
        "question_id": 1392,
        "answer_sql": " SELECT income_id FROM income WHERE substr(date_received, 1, 7) = '2019-09' GROUP BY income_id ORDER BY sum(amount) DESC LIMIT 1"
    },
    {
        "question_id": 1393,
        "answer_sql": "SELECT first_name, last_name, email FROM member WHERE POSITION = 'Secretary'"
    },
    {
        "question_id": 1394,
        "answer_sql": "SELECT count(member_id) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Physics Teaching'"
    },
    {
        "question_id": 1395,
        "answer_sql": "SELECT count(DISTINCT member.member_id) FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id WHERE event.event_name = 'Community Theater' AND strftime('%Y', event.event_date) = '2019'"
    },
    {
        "question_id": 1396,
        "answer_sql": "SELECT count(event.event_name), member.link_to_major FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id WHERE member.first_name = 'Luisa' AND member.last_name = 'Guidi'"
    },
    {
        "question_id": 1397,
        "answer_sql": "SELECT sum(spent) / count(spent) FROM budget WHERE category = 'Food' AND event_status = 'Closed'"
    },
    {
        "question_id": 1398,
        "answer_sql": "SELECT event.event_name FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.category = 'Advertisement' ORDER BY budget.spent DESC LIMIT 1"
    },
    {
        "question_id": 1399,
        "answer_sql": "SELECT CASE WHEN count(event_name) > 0 THEN 'YES' ELSE 'NO' END FROM event WHERE event_name = 'Women''s Soccer'"
    },
    {
        "question_id": 1400,
        "answer_sql": "SELECT cast(sum(CASE WHEN TYPE = 'Community Service' THEN 1 ELSE 0 END) AS REAL) * 100 / count(event_id) FROM EVENT WHERE event_date BETWEEN '2019-01-01' AND '2019-12-31'"
    },
    {
        "question_id": 1401,
        "answer_sql": ""
    },
    {
        "question_id": 1402,
        "answer_sql": "SELECT t_shirt_size FROM member GROUP BY t_shirt_size ORDER BY count(t_shirt_size) DESC LIMIT 1"
    },
    {
        "question_id": 1403,
        "answer_sql": "SELECT event.event_name FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.status = 'Closed' ORDER BY budget.remaining ASC LIMIT 1"
    },
    {
        "question_id": 1404,
        "answer_sql": ""
    },
    {
        "question_id": 1405,
        "answer_sql": "SELECT budget.category FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'April Speaker' ORDER BY budget.amount ASC"
    },
    {
        "question_id": 1406,
        "answer_sql": "SELECT budget_id FROM budget WHERE category = 'Food' ORDER BY amount DESC LIMIT 1"
    },
    {
        "question_id": 1407,
        "answer_sql": "SELECT budget_id FROM budget WHERE category = 'Advertisement' ORDER BY amount DESC LIMIT 3"
    },
    {
        "question_id": 1408,
        "answer_sql": "SELECT sum(cost) FROM expense WHERE expense_description = 'Parking'"
    },
    {
        "question_id": 1409,
        "answer_sql": "SELECT sum(cost) FROM expense WHERE expense_date = '2019-08-20'"
    },
    {
        "question_id": 1410,
        "answer_sql": "SELECT member.first_name, member.last_name, sum(expense.cost) FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE member_id = 'rec4BLdZHS2Blfp4v'"
    },
    {
        "question_id": 1411,
        "answer_sql": "SELECT expense_description FROM expense WHERE link_to_member = ( SELECT member_id FROM member WHERE first_name = 'Sacha' AND last_name = 'Harrison' )"
    },
    {
        "question_id": 1412,
        "answer_sql": "SELECT expense.expense_description FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE member.t_shirt_size = 'X-Large'"
    },
    {
        "question_id": 1413,
        "answer_sql": "SELECT member.zip FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE expense.cost < 50"
    },
    {
        "question_id": 1414,
        "answer_sql": "SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Phillip' AND member.last_name = 'Cullen'"
    },
    {
        "question_id": 1415,
        "answer_sql": "SELECT member.position FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Business'"
    },
    {
        "question_id": 1416,
        "answer_sql": "SELECT count(member_id) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Business' AND member.t_shirt_size = 'Medium'"
    },
    {
        "question_id": 1417,
        "answer_sql": "SELECT event.event_name FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.remaining > 30"
    },
    {
        "question_id": 1418,
        "answer_sql": "SELECT DISTINCT budget.category FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.location = 'MU 215'"
    },
    {
        "question_id": 1419,
        "answer_sql": "SELECT budget.category FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_date = '2020-03-24T12:00:00'"
    },
    {
        "question_id": 1420,
        "answer_sql": "SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Vice President'"
    },
    {
        "question_id": 1421,
        "answer_sql": "SELECT cast(sum(CASE WHEN position = 'Member' AND major_name = 'Mathematics' THEN 1 ELSE 0 END) AS REAL) * 100 / count(member_id) FROM member INNER JOIN major ON member.link_to_major = major.major_id"
    },
    {
        "question_id": 1422,
        "answer_sql": "SELECT DISTINCT TYPE FROM EVENT WHERE LOCATION = 'MU 215'"
    },
    {
        "question_id": 1423,
        "answer_sql": "SELECT count(income_id) FROM income WHERE amount = 50"
    },
    {
        "question_id": 1424,
        "answer_sql": "SELECT count(member_id) FROM member WHERE t_shirt_size = 'X-Large' AND position = 'Member'"
    },
    {
        "question_id": 1425,
        "answer_sql": "SELECT count(major_id) FROM major WHERE department = 'School of Applied Sciences, Technology and Education'"
    },
    {
        "question_id": 1426,
        "answer_sql": "SELECT last_name FROM member WHERE link_to_major = ( SELECT major_id FROM major WHERE major_name = 'Environmental Engineering' )"
    },
    {
        "question_id": 1427,
        "answer_sql": "SELECT budget.category FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.location = 'MU 215' AND event.type = 'Guest Speaker' AND budget.spent = 0"
    },
    {
        "question_id": 1428,
        "answer_sql": ""
    },
    {
        "question_id": 1429,
        "answer_sql": ""
    },
    {
        "question_id": 1430,
        "answer_sql": "SELECT member.last_name, member.position FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE expense_description = 'Pizza' AND expense_date = '2019-09-10'"
    },
    {
        "question_id": 1431,
        "answer_sql": "SELECT member.last_name FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id WHERE event.event_name = 'Women''s Soccer' AND member.position = 'Member'"
    },
    {
        "question_id": 1432,
        "answer_sql": "SELECT cast(sum(CASE WHEN budget.amount = 50 THEN 1 ELSE 0 END) AS REAL) * 100 / count(budget.amount) FROM budget INNER JOIN expense ON budget.budget_id = expense.link_to_budget INNER JOIN member ON expense.link_to_member = member.member_id WHERE member.t_shirt_size = 'Medium' AND member.position = 'Member'"
    },
    {
        "question_id": 1433,
        "answer_sql": "SELECT DISTINCT state FROM zip_code WHERE TYPE = 'PO Box'"
    },
    {
        "question_id": 1434,
        "answer_sql": "SELECT zip_code FROM zip_code WHERE TYPE = 'PO Box' AND state = 'Puerto Rico'"
    },
    {
        "question_id": 1435,
        "answer_sql": "SELECT event_name FROM event WHERE event_date BETWEEN '2019-03-15' AND '2020-03-20' AND TYPE = 'Game' AND status = 'Closed'"
    },
    {
        "question_id": 1436,
        "answer_sql": "SELECT DISTINCT event.event_id FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id INNER JOIN event ON budget.link_to_event = event.event_id WHERE expense.cost > 50"
    },
    {
        "question_id": 1437,
        "answer_sql": "SELECT DISTINCT member.first_name, member.last_name, attendance.link_to_event FROM expense INNER JOIN member ON expense.link_to_member = member.member_id INNER JOIN attendance ON attendance.link_to_member = member.member_id WHERE expense.approved = 'true' AND expense.expense_date BETWEEN '2019-01-10' AND '2019-11-19'"
    },
    {
        "question_id": 1438,
        "answer_sql": "SELECT major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Katy'"
    },
    {
        "question_id": 1439,
        "answer_sql": "SELECT member.phone FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.college = 'College of Agriculture and Applied Sciences' AND major.major_name = 'Business'"
    },
    {
        "question_id": 1440,
        "answer_sql": "SELECT member.email FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE expense.expense_date BETWEEN '2019-09-10' AND '2019-11-19' AND expense.cost > 20"
    },
    {
        "question_id": 1441,
        "answer_sql": "SELECT count(member_id) FROM member WHERE link_to_major = ( SELECT major_id FROM major WHERE major_name = 'College of Education & Human Services' AND department = 'Education' )"
    },
    {
        "question_id": 1442,
        "answer_sql": "SELECT cast(sum(CASE WHEN budget.remaining < 0 THEN 1 ELSE 0 END) AS REAL) * 100 / count(budget.remaining) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id"
    },
    {
        "question_id": 1443,
        "answer_sql": "SELECT event_id, location, status FROM event WHERE event_date BETWEEN '2019-11-01' AND '2020-03-31'"
    },
    {
        "question_id": 1444,
        "answer_sql": "SELECT expense_description FROM expense WHERE cost > ( SELECT avg(cost) FROM expense )"
    },
    {
        "question_id": 1445,
        "answer_sql": "SELECT first_name, last_name FROM member WHERE t_shirt_size = 'X-Large'"
    },
    {
        "question_id": 1446,
        "answer_sql": "SELECT cast(sum(CASE WHEN TYPE = 'PO Box' THEN 1 ELSE 0 END) AS REAL) * 100 / count(zip_code) FROM zip_code"
    },
    {
        "question_id": 1447,
        "answer_sql": "SELECT event.event_name, event.location FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE budget.remaining > 0"
    },
    {
        "question_id": 1448,
        "answer_sql": ""
    },
    {
        "question_id": 1449,
        "answer_sql": "SELECT member.first_name, member.last_name, major.major_name FROM expense INNER JOIN member ON expense.link_to_member = member.member_id INNER JOIN major ON member.link_to_major = major.major_id WHERE expense.cost > 100"
    },
    {
        "question_id": 1450,
        "answer_sql": "SELECT zip_code.city, zip_code.county FROM income INNER JOIN member ON income.link_to_member = member.member_id INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE income.amount > 40"
    },
    {
        "question_id": 1451,
        "answer_sql": "SELECT member.first_name, member.last_name FROM member INNER JOIN expense ON member.member_id = expense.link_to_member GROUP BY member.first_name, member.last_name, expense.cost HAVING count(expense.expense_id) > 1 ORDER BY sum(expense.cost) DESC LIMIT 1"
    },
    {
        "question_id": 1452,
        "answer_sql": "SELECT sum(expense.cost) / count(event.event_id) FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN expense ON expense.link_to_member = member.member_id WHERE member.position != 'Member'"
    },
    {
        "question_id": 1453,
        "answer_sql": "SELECT event.event_name FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.category = 'Parking' GROUP BY event.event_name HAVING sum(budget.amount) / count(event.event_id) < ( SELECT sum(amount) FROM budget WHERE category = 'Parking' )"
    },
    {
        "question_id": 1454,
        "answer_sql": ""
    },
    {
        "question_id": 1455,
        "answer_sql": "SELECT expense_description FROM expense WHERE expense_description = 'Water, chips, cookies' ORDER BY cost DESC LIMIT 1"
    },
    {
        "question_id": 1456,
        "answer_sql": "SELECT member.first_name, member.last_name FROM member INNER JOIN expense ON member.member_id = expense.link_to_member ORDER BY expense.cost DESC LIMIT 5"
    },
    {
        "question_id": 1457,
        "answer_sql": "SELECT member.first_name, member.last_name, member.phone FROM member INNER JOIN expense ON member.member_id = expense.link_to_member WHERE expense.cost > ( SELECT avg(cost) FROM expense )"
    },
    {
        "question_id": 1458,
        "answer_sql": "SELECT cast((sum(CASE WHEN zip_code.state = 'Maine' THEN 1 ELSE 0 END) - sum(CASE WHEN zip_code.state = 'Vermont' THEN 1 ELSE 0 END)) AS REAL) * 100 / count(member.position) FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code"
    },
    {
        "question_id": 1459,
        "answer_sql": "SELECT major.major_name, major.department FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Garrett' AND member.last_name = 'Gerke'"
    },
    {
        "question_id": 1460,
        "answer_sql": "SELECT member.first_name, member.last_name, expense.cost FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE expense.expense_description = 'Water, Veggie tray, supplies'"
    },
    {
        "question_id": 1461,
        "answer_sql": "SELECT last_name, phone FROM member WHERE link_to_major = ( SELECT major_id FROM major WHERE major_name = 'Elementary Education' )"
    },
    {
        "question_id": 1462,
        "answer_sql": "SELECT budget.category, budget.amount FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE event.event_name = 'January Speaker'"
    },
    {
        "question_id": 1463,
        "answer_sql": "SELECT event.event_name FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.category = 'Food'"
    },
    {
        "question_id": 1464,
        "answer_sql": ""
    },
    {
        "question_id": 1465,
        "answer_sql": "SELECT DISTINCT budget.category FROM budget INNER JOIN expense ON budget.budget_id = expense.link_to_budget WHERE expense.expense_description = 'Posters'"
    },
    {
        "question_id": 1466,
        "answer_sql": "SELECT member.first_name, member.last_name, major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Secretary'"
    },
    {
        "question_id": 1467,
        "answer_sql": "SELECT event.event_name FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE budget.category = 'Speaker Gifts'"
    },
    {
        "question_id": 1468,
        "answer_sql": ""
    },
    {
        "question_id": 1469,
        "answer_sql": "SELECT member.first_name, member.last_name, member.position FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.city = 'Lincolnton' AND zip_code.state = 'North Carolina'"
    },
    {
        "question_id": 1470,
        "answer_sql": "SELECT count(DISTINCT GasStationID) FROM gasstations WHERE Country = 'CZE' AND Segment = 'Premium'"
    },
    {
        "question_id": 1471,
        "answer_sql": "SELECT cast(sum(CASE WHEN Currency = 'EUR' THEN 1 ELSE 0 END) AS REAL) / sum(CASE WHEN Currency = 'CZK' THEN 1 ELSE 0 END) FROM customers"
    },
    {
        "question_id": 1472,
        "answer_sql": "SELECT DISTINCT customers.CustomerID FROM customers INNER JOIN yearmonth ON customers.CustomerID = yearmonth.CustomerID WHERE substr(yearmonth.Date, 1, 7) = '201201' OR substr(yearmonth.Date, 1, 7) = '201212' ORDER BY yearmonth.Consumption ASC LIMIT 1"
    },
    {
        "question_id": 1473,
        "answer_sql": "SELECT cast(sum(Consumption) AS REAL) / 12 FROM yearmonth WHERE Date BETWEEN '201301' AND '201312'"
    },
    {
        "question_id": 1474,
        "answer_sql": ""
    },
    {
        "question_id": 1475,
        "answer_sql": "SELECT count(CustomerID) FROM `yearmonth` WHERE substr(`Date`, 1, 7) = '201201' AND substr(`Date`, -2) = '01' AND substr(`Date`, -4) = '2012' AND Consumption < 30000"
    },
    {
        "question_id": 1476,
        "answer_sql": "SELECT sum(CASE WHEN customers.Currency = 'CZK' THEN yearmonth.Consumption ELSE 0 END) - sum(CASE WHEN customers.Currency = 'EUR' THEN yearmonth.Consumption ELSE 0 END) FROM customers INNER JOIN yearmonth ON customers.CustomerID = yearmonth.CustomerID WHERE strftime('%Y', Date) = '2012'"
    },
    {
        "question_id": 1477,
        "answer_sql": " SELECT substr(Date, 1, 4) FROM transactions_1k GROUP BY substr(Date, 1, 4) ORDER BY sum(Amount) DESC LIMIT 1"
    },
    {
        "question_id": 1478,
        "answer_sql": "SELECT Segment FROM customers GROUP BY Segment ORDER BY count(CustomerID) ASC LIMIT 1"
    },
    {
        "question_id": 1479,
        "answer_sql": "SELECT DISTINCT substr(Date, 1, 4) FROM yearmonth ORDER BY substr(Date, 6) DESC LIMIT 1"
    },
    {
        "question_id": 1480,
        "answer_sql": "SELECT DISTINCT Date FROM yearmonth WHERE Date LIKE '2013%' AND CustomerID IN ( SELECT CustomerID FROM customers WHERE Segment = 'SME' ) ORDER BY Date DESC LIMIT 1"
    },
    {
        "question_id": 1481,
        "answer_sql": "SELECT CASE WHEN min(Consumption) THEN 'SME' ELSE 'LAM' END AS diff FROM yearmonth WHERE Date LIKE '2013%'"
    },
    {
        "question_id": 1482,
        "answer_sql": "SELECT DISTINCT CASE WHEN sum(CASE WHEN substr(t.Date, 1, 4) = '2013' THEN t.Consumption ELSE 0 END) - sum(CASE WHEN substr(t.Date, 1, 4) = '2012' THEN t.Consumption ELSE 0 END) > 0 THEN 'SME' WHEN sum(CASE WHEN substr(t.Date, 1, 4) = '2013' THEN t.Consumption ELSE 0 END) - sum(CASE WHEN substr(t.Date, 1, 4) = '2012' THEN t.Consumption ELSE 0 END) < 0 THEN 'LAM' ELSE 'KAM' END FROM yearmonth t"
    },
    {
        "question_id": 1483,
        "answer_sql": "SELECT sum(Consumption) FROM yearmonth WHERE substr(Date, 1, 4) = '2013' AND CustomerID = 6"
    },
    {
        "question_id": 1484,
        "answer_sql": "SELECT sum(CASE WHEN Country = 'Czech Republic' THEN 1 ELSE 0 END) - sum(CASE WHEN Country = 'Slovakia' THEN 1 ELSE 0 END) AS RESULT FROM gasstations"
    },
    {
        "question_id": 1485,
        "answer_sql": "SELECT sum(CASE WHEN customers.CustomerID = 7 THEN yearmonth.Consumption ELSE 0 END) - sum(CASE WHEN customers.CustomerID = 5 THEN yearmonth.Consumption ELSE 0 END) FROM customers INNER JOIN yearmonth ON customers.CustomerID = yearmonth.CustomerID WHERE strftime('%Y-%m', Date) = '201304'"
    },
    {
        "question_id": 1486,
        "answer_sql": "SELECT cast(sum(CASE WHEN Currency = 'CZK' THEN 1 ELSE 0 END) AS REAL) * 100 / count(CustomerID) FROM customers"
    },
    {
        "question_id": 1487,
        "answer_sql": ""
    },
    {
        "question_id": 1488,
        "answer_sql": "SELECT customers.CustomerID, sum(yearmonth.Consumption) FROM customers INNER JOIN yearmonth ON customers.CustomerID = yearmonth.CustomerID GROUP BY customers.CustomerID ORDER BY sum(yearmonth.Consumption) DESC LIMIT 1"
    },
    {
        "question_id": 1489,
        "answer_sql": "SELECT sum(Consumption) FROM yearmonth WHERE Date = '201305'"
    },
    {
        "question_id": 1490,
        "answer_sql": "SELECT cast(sum(CASE WHEN customers.Segment = 'LAM' THEN 1 ELSE 0 END) AS REAL) * 100 / count(customers.CustomerID) FROM customers INNER JOIN transactions_1k ON customers.CustomerID = transactions_1k.CustomerID WHERE transactions_1k.Amount > 46.73"
    },
    {
        "question_id": 1491,
        "answer_sql": "SELECT Country, count(Country) FROM gasstations GROUP BY Country ORDER BY sum(CASE WHEN Segment = 'Value for Money' THEN 1 ELSE 0 END) DESC LIMIT 1"
    },
    {
        "question_id": 1492,
        "answer_sql": "SELECT cast(sum(CASE WHEN customers.Currency = 'EUR' THEN 1 ELSE 0 END) AS REAL) * 100 / count(customers.CustomerID) FROM customers INNER JOIN transactions_1k ON customers.CustomerID = transactions_1k.CustomerID"
    },
    {
        "question_id": 1493,
        "answer_sql": "SELECT cast(sum(CASE WHEN Consumption > 528.3 THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM yearmonth WHERE Date LIKE '201202%'"
    },
    {
        "question_id": 1494,
        "answer_sql": "SELECT cast(sum(CASE WHEN Segment = 'Premium' THEN 1 ELSE 0 END) AS REAL) * 100 / count(Country) FROM gasstations"
    },
    {
        "question_id": 1495,
        "answer_sql": "SELECT CustomerID FROM yearmonth WHERE Date = '201309' GROUP BY CustomerID ORDER BY count(CustomerID) DESC LIMIT 1"
    },
    {
        "question_id": 1496,
        "answer_sql": ""
    },
    {
        "question_id": 1497,
        "answer_sql": ""
    },
    {
        "question_id": 1498,
        "answer_sql": "SELECT DISTINCT CASE WHEN substr(t.Date, 1, 4) = '2012' THEN t.Consumption END FROM yearmonth AS t ORDER BY t.Consumption DESC LIMIT 1"
    },
    {
        "question_id": 1499,
        "answer_sql": ""
    },
    {
        "question_id": 1500,
        "answer_sql": ""
    },
    {
        "question_id": 1501,
        "answer_sql": ""
    },
    {
        "question_id": 1502,
        "answer_sql": "SELECT DISTINCT gasstations.ChainID FROM customers INNER JOIN gasstations ON customers.CustomerID = gasstations.ChainID WHERE customers.Currency = 'EUR'"
    },
    {
        "question_id": 1503,
        "answer_sql": "SELECT DISTINCT products.Description FROM products INNER JOIN transactions_1k ON products.ProductID = transactions_1k.ProductID WHERE transactions_1k.Price = ( SELECT min(Price) FROM transactions_1k )"
    },
    {
        "question_id": 1504,
        "answer_sql": "SELECT avg(Price) FROM transactions_1k WHERE Date LIKE '2012-01%'"
    },
    {
        "question_id": 1505,
        "answer_sql": "SELECT count(DISTINCT CustomerID) FROM yearmonth WHERE Consumption > 1000"
    },
    {
        "question_id": 1506,
        "answer_sql": "SELECT DISTINCT products.Description FROM products INNER JOIN transactions_1k ON products.ProductID = transactions_1k.ProductID INNER JOIN gasstations ON gasstations.GasStationID = transactions_1k.GasStationID WHERE gasstations.Country = 'CZE'"
    },
    {
        "question_id": 1507,
        "answer_sql": "SELECT DISTINCT transactions_1k.Time FROM transactions_1k INNER JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE gasstations.ChainID = 11"
    },
    {
        "question_id": 1508,
        "answer_sql": "SELECT count(TransactionID) FROM transactions_1k WHERE GasStationID IN ( SELECT GasStationID FROM gasstations WHERE Country = 'CZE' AND Price > 1000 )"
    },
    {
        "question_id": 1509,
        "answer_sql": "SELECT count(DISTINCT TransactionID) FROM `transactions_1k` INNER JOIN gasstations ON gasstations.GasStationID = transactions_1k.GasStationID WHERE gasstations.Country = 'CZE' AND strftime('%Y', Date) > '2012'"
    },
    {
        "question_id": 1510,
        "answer_sql": "SELECT avg(Price) FROM transactions_1k INNER JOIN gasstations ON gasstations.GasStationID = transactions_1k.GasStationID WHERE gasstations.Country = 'CZE'"
    },
    {
        "question_id": 1511,
        "answer_sql": "SELECT avg(Price) FROM transactions_1k WHERE CustomerID IN ( SELECT CustomerID FROM customers WHERE Currency = 'EUR' )"
    },
    {
        "question_id": 1512,
        "answer_sql": "SELECT customers.CustomerID FROM customers INNER JOIN transactions_1k ON customers.CustomerID = transactions_1k.CustomerID WHERE transactions_1k.`Date` = '2012-08-25' GROUP BY customers.CustomerID ORDER BY sum(transactions_1k.Amount) DESC LIMIT 1"
    },
    {
        "question_id": 1513,
        "answer_sql": "SELECT gasstations.Country FROM customers INNER JOIN transactions_1k ON customers.CustomerID = transactions_1k.CustomerID INNER JOIN gasstations ON gasstations.GasStationID = transactions_1k.GasStationID WHERE transactions_1k.`Date` = '2012-08-25' GROUP BY gasstations.Country"
    },
    {
        "question_id": 1514,
        "answer_sql": "SELECT DISTINCT customers.Currency FROM customers INNER JOIN transactions_1k ON customers.CustomerID = transactions_1k.CustomerID WHERE transactions_1k.Date = '2012-08-24' AND transactions_1k.Time = '16:25:00'"
    },
    {
        "question_id": 1515,
        "answer_sql": "SELECT customers.Segment FROM customers INNER JOIN `transactions_1k` AS T1 ON customers.CustomerID = T1.CustomerID WHERE T1.Date = '2012-08-23' AND T1.Time = '21:20:00'"
    },
    {
        "question_id": 1516,
        "answer_sql": "SELECT count(TransactionID) FROM transactions_1k WHERE Date = '2012-08-26' AND Time < '13:00:00' AND Price = 1"
    },
    {
        "question_id": 1517,
        "answer_sql": "SELECT Segment FROM customers ORDER BY CustomerID ASC LIMIT 1"
    },
    {
        "question_id": 1518,
        "answer_sql": "SELECT gasstations.Country FROM `transactions_1k` AS T1 INNER JOIN gasstations ON T1.GasStationID = gasstations.GasStationID WHERE T1.`Date` = '2012-08-24' AND T1.`Time` = '12:42:00'"
    },
    {
        "question_id": 1519,
        "answer_sql": "SELECT ProductID FROM transactions_1k WHERE Date = '2012-08-23' AND Time = '21:20:00'"
    },
    {
        "question_id": 1520,
        "answer_sql": "SELECT DISTINCT CASE WHEN sum(CASE WHEN Date = '2012-01-01' THEN Amount ELSE 0 END) THEN sum(CASE WHEN Date = '2012-01-01' THEN Amount ELSE 0 END) ELSE 0 END FROM transactions_1k WHERE CustomerID = 124"
    },
    {
        "question_id": 1521,
        "answer_sql": "SELECT count(DISTINCT customers.CustomerID) FROM customers INNER JOIN `transactions_1k` ON customers.CustomerID = transactions_1k.CustomerID INNER JOIN gasstations ON gasstations.GasStationID = transactions_1k.GasStationID WHERE transactions_1k.`Time` BETWEEN '08:00' AND '09:00' AND gasstations.Country = 'CZE' AND transactions_1k.`Date` = '2012-08-26'"
    },
    {
        "question_id": 1522,
        "answer_sql": ""
    },
    {
        "question_id": 1523,
        "answer_sql": ""
    },
    {
        "question_id": 1524,
        "answer_sql": ""
    },
    {
        "question_id": 1525,
        "answer_sql": "SELECT cast(sum(CASE WHEN customers.Currency = 'EUR' THEN 1 ELSE 0 END) AS REAL) * 100 / count(customers.CustomerID) FROM customers INNER JOIN transactions_1k ON customers.CustomerID = transactions_1k.CustomerID WHERE transactions_1k.`Date` = '2012-08-25'"
    },
    {
        "question_id": 1526,
        "answer_sql": "SELECT ( SELECT Consumption FROM yearmonth WHERE Date = '2013-01-01' AND CustomerID = 1 ) - ( SELECT Consumption FROM yearmonth WHERE Date = '2012-01-01' AND CustomerID = 1 ) AS RESULT"
    },
    {
        "question_id": 1527,
        "answer_sql": "SELECT GasStationID FROM transactions_1k GROUP BY GasStationID ORDER BY sum(Amount) DESC LIMIT 1"
    },
    {
        "question_id": 1528,
        "answer_sql": "SELECT cast(sum(CASE WHEN Segment = 'premium' THEN 1 ELSE 0 END) AS REAL) * 100 / count(Segment) FROM customers WHERE Segment = 'SVK'"
    },
    {
        "question_id": 1529,
        "answer_sql": "SELECT sum(Amount) FROM transactions_1k WHERE CustomerID = 38508 AND Date LIKE '201201%'"
    },
    {
        "question_id": 1530,
        "answer_sql": "SELECT products.Description FROM products INNER JOIN `transactions_1k` ON products.ProductID = transactions_1k.ProductID ORDER BY transactions_1k.Amount DESC LIMIT 5"
    },
    {
        "question_id": 1531,
        "answer_sql": "SELECT customers.CustomerID, avg(transactions_1k.Price / transactions_1k.Amount), customers.Currency FROM customers INNER JOIN transactions_1k ON customers.CustomerID = transactions_1k.CustomerID GROUP BY customers.CustomerID, customers.Currency ORDER BY sum(transactions_1k.Price) DESC LIMIT 1"
    },
    {
        "question_id": 1532,
        "answer_sql": "SELECT gasstations.Country FROM products INNER JOIN transactions_1k ON products.ProductID = transactions_1k.ProductID INNER JOIN gasstations ON gasstations.GasStationID = transactions_1k.GasStationID WHERE products.ProductID = 2 GROUP BY gasstations.Country ORDER BY sum(transactions_1k.Price) DESC LIMIT 1"
    },
    {
        "question_id": 1533,
        "answer_sql": "SELECT DISTINCT CASE WHEN sum(transactions_1k.Amount) > 29 THEN 'YES' ELSE 'NO' END FROM customers INNER JOIN transactions_1k ON customers.CustomerID = transactions_1k.CustomerID INNER JOIN products ON products.ProductID = transactions_1k.ProductID WHERE products.ProductID = 5 AND strftime('%Y-%m', transactions_1k.`Date`) = '201208'"
    }
]