[{"question_id": 0, "answer_sql": ["SELECT MAX(`Free Meal Count (K-12)`) as HighestEligibleFreeRate FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.County = 'Alameda County';"]}, {"question_id": 1, "answer_sql": ["SELECT frpm.CDSCode, frpm.`County Code`, frpm.`District Code`, frpm.`School Code`, frpm.`County Name`, frpm.`District Name`, frpm.`School Name`, frpm.`District Type`, frpm.`School Type`, frpm.`Educational Option Type`, frpm.`NSLP Provision Status`, frpm.`Charter School (Y/N)`, frpm.`Charter School Number`, frpm.`Charter Funding Type`, frpm.IRC, frpm.`Low Grade`, frpm.`High Grade`, frpm.`Enrollment (K-12)`, frpm.`Free Meal Count (K-12)`, frpm.`Percent (%) Eligible Free (K-12)`, frpm.`FRPM Count (K-12)`, frpm.`Percent (%) Eligible FRPM (K-12)`, frpm.`Enrollment (Ages 5-17)`, frpm.`Free Meal Count (Ages 5-17)`, frpm.`Percent (%) Eligible Free (Ages 5-17)`, frpm.`FRPM Count (Ages 5-17)`, frpm.`Percent (%) Eligible FRPM (Ages 5-17)`, frpm.`2013-14 CALPADS Fall 1 Certification Status` FROM frpm WHERE frpm.`Percent (%) Eligible Free (Ages 5-17)` = (SELECT MIN(`Percent (%) Eligible Free (Ages 5-17)`) FROM frpm) AND frpm.`Percent (%) Eligible FRPM (Ages 5-17)` = (SELECT MIN(`Percent (%) Eligible FRPM (Ages 5-17)`) FROM frpm) LIMIT 3;", "SELECT frpm.CDSCode, frpm.`County Name`, frpm.`District Name`, frpm.`School Name`, frpm.`2013-14 CALPADS Fall 1 Certification Status`, frpm.`Free Meal Count (Ages 5-17)`, frpm.`Enrollment (Ages 5-17)`, frpm.`Percent (%) Eligible Free (Ages 5-17)` FROM frpm WHERE frpm.`2013-14 CALPADS Fall 1 Certification Status` = 1 ORDER BY frpm.`Free Meal Count (Ages 5-17)` DESC, frpm.`Enrollment (Ages 5-17)` ASC LIMIT 3;", "SELECT frpm.CDSCode, frpm.`County Code`, frpm.`District Code`, frpm.`School Code`, frpm.`County Name`, frpm.`District Name`, frpm.`School Name`, frpm.`District Type`, frpm.`School Type`, frpm.`Educational Option Type`, frpm.`NSLP Provision Status`, frpm.`Charter School (Y/N)`, frpm.`Charter School Number`, frpm.`Charter Funding Type`, frpm.IRC, frpm.`Low Grade`, frpm.`High Grade`, frpm.`Enrollment (K-12)`, frpm.`Free Meal Count (K-12)`, frpm.`Percent (%) Eligible Free (K-12)`, frpm.`FRPM Count (K-12)`, frpm.`Percent (%) Eligible FRPM (K-12)`, frpm.`Enrollment (Ages 5-17)`, frpm.`Free Meal Count (Ages 5-17)`, frpm.`Percent (%) Eligible Free (Ages 5-17)`, frpm.`FRPM Count (Ages 5-17)`, frpm.`Percent (%) Eligible FRPM (Ages 5-17)`, frpm.`2013-14 CALPADS Fall 1 Certification Status` FROM frpm WHERE frpm.`2013-14 CALPADS Fall 1 Certification Status` = 1 ORDER BY frpm.`Percent (%) Eligible Free (Ages 5-17)` ASC LIMIT 3;"]}, {"question_id": 2, "answer_sql": ["SELECT `schools`.`Zip` FROM `schools` JOIN `frpm` ON `schools`.`CDSCode` = `frpm`.`CDSCode` WHERE `schools`.`Charter` = 1 AND `schools`.`County` = 'Fresno' GROUP BY `schools`.`Zip`;"]}, {"question_id": 3, "answer_sql": ["SELECT s.CDSCode, s.School, s.Street, s.City, s.State, s.MailStreet, s.MailCity, s.MailState FROM frpm f JOIN schools s ON f.CDSCode = s.CDSCode WHERE f.`FRPM Count (K-12)` = ( SELECT MAX(`FRPM Count (K-12)`) FROM frpm )", "SELECT s.CDSCode, s.School, s.Street, s.City, s.State, s.Zip, s.MailStreet, s.MailCity, s.MailState, s.MailZip FROM frpm f JOIN schools s ON f.CDSCode = s.CDSCode WHERE f.`FRPM Count (K-12)` = ( SELECT MAX(`FRPM Count (K-12)`) FROM frpm )", "SELECT s.`Street`, s.`StreetAbr`, s.`MailStreet`, s.`MailStrAbr`, s.`City`, s.`MailCity`, s.`MailZip`, s.`State`, s.`MailState` FROM frpm f JOIN schools s ON f.CDSCode = s.CDSCode WHERE f.`Educational Option Type` = 'K-12' AND f.`FRPM Count (K-12)` = ( SELECT MAX(`FRPM Count (K-12)`) FROM frpm WHERE `Educational Option Type` = 'K-12' ) ORDER BY s.`Street` ASC, s.`StreetAbr` ASC, s.`MailStreet` ASC, s.`MailStrAbr` ASC, s.`City` ASC, s.`MailCity` ASC, s.`MailZip` ASC, s.`State` ASC, s.`MailState` ASC LIMIT 1;"]}, {"question_id": 4, "answer_sql": ["SELECT `schools`.`Phone` FROM `schools` JOIN `frpm` ON `schools`.`CDSCode` = `frpm`.`CDSCode` WHERE `schools`.`OpenDate` > '2000-01-01' AND `frpm`.`Charter School Number` IS NOT NULL AND `frpm`.`Charter School (Y/N)` = 1;", "SELECT `schools`.`Phone` FROM `schools` JOIN `frpm` ON `schools`.`CDSCode` = `frpm`.`CDSCode` WHERE `schools`.`Charter` = 1 AND `schools`.`CharterNum` IS NOT NULL AND `schools`.`OpenDate` > '2000-01-01' AND `frpm`.`Charter School Number` IS NOT NULL;", "SELECT Phone, Street, City, State, AdmFName1, AdmLName1, AdmEmail1, LastUpdate FROM schools JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE `Charter School (Y/N)` = 1 AND `Charter Funding Type` = 'Direct' AND OpenDate > '2000-01-01' AND `Charter School Number` IS NOT NULL;"]}, {"question_id": 5, "answer_sql": ["SELECT COUNT(*) FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE satscores.rtype = 'SAT' AND satscores.AvgScrMath < 400 AND schools.Virtual = 'F';"]}, {"question_id": 6, "answer_sql": ["SELECT schools.School FROM schools JOIN schools_admins ON schools.CDSCode = schools_admins.CDSCode WHERE schools.Magnet = 1;"]}, {"question_id": 7, "answer_sql": ["SELECT Phone FROM schools WHERE CDSCode IN ( SELECT cds FROM satscores WHERE NumTstTakr > 1500 ORDER BY NumTstTakr DESC LIMIT 1 )", "SELECT `Phone` FROM schools WHERE `CDSCode` IN (SELECT `cds` FROM satscores WHERE `NumTstTakr` > 1500) ORDER BY `Phone` DESC LIMIT 1;"]}, {"question_id": 8, "answer_sql": ["SELECT satscores.cds, COUNT(satscores.cds) as FRPM_Count FROM satscores JOIN frpm ON satscores.cds = frpm.CDSCode WHERE frpm.`FRPM Count (K-12)` = (SELECT MAX(`FRPM Count (K-12)`) FROM frpm) GROUP BY satscores.cds ORDER BY FRPM_Count DESC LIMIT 1;", "SELECT satscores.NumTstTakr FROM satscores JOIN frpm ON satscores.cds = frpm.CDSCode WHERE frpm.`FRPM Count (K-12)` = ( SELECT MAX(`FRPM Count (K-12)`) FROM frpm );"]}, {"question_id": 9, "answer_sql": ["SELECT COUNT(*) FROM frpm JOIN satscores ON frpm.CDSCode = satscores.cds WHERE AvgScrMath > 560 AND satscores.sname IS NOT NULL AND satscores.dname IS NOT NULL AND satscores.cname IS NOT NULL;", "SELECT COUNT(DISTINCT schools.CDSCode) FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE satscores.AvgScrMath > 560 AND schools.Charter = 1 AND schools.CharterNum IS NOT NULL;", "SELECT COUNT(*) FROM frpm JOIN satscores ON frpm.CDSCode = satscores.cds WHERE AvgScrMath > 560 AND satscores.sname = 'Charter';"]}, {"question_id": 10, "answer_sql": ["SELECT frpm.`FRPM Count (Ages 5-17)` FROM frpm JOIN satscores ON frpm.CDSCode = satscores.cds WHERE satscores.AvgScrRead = (SELECT MAX(AvgScrRead) FROM satscores) AND satscores.rtype = 'SAT';"]}, {"question_id": 11, "answer_sql": []}, {"question_id": 12, "answer_sql": ["SELECT MAX(`Free Meal Count (Ages 5-17)`) as Highest_Eligible_Free_Rate FROM frpm WHERE `2013-14 CALPADS Fall 1 Certification Status` = 1 AND `Percent (%) Eligible FRPM (Ages 5-17)` > 0.3;"]}, {"question_id": 13, "answer_sql": ["SELECT Phone FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE satscores.NumTstTakr > 0 AND satscores.NumGE1500 > 0 ORDER BY satscores.NumGE1500 DESC, satscores.NumTstTakr DESC LIMIT 3;", "SELECT Phone FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE satscores.NumTstTakr = (SELECT MAX(NumTstTakr) FROM satscores) AND satscores.NumGE1500 = (SELECT MAX(NumGE1500) FROM satscores) AND schools.CDSCode IN (SELECT CDSCode FROM schools WHERE City IN ('Los Angeles', 'San Francisco', 'San Diego'));", "SELECT Phone FROM schools WHERE Soc = (SELECT MAX(Soc) FROM schools)"]}, {"question_id": 14, "answer_sql": ["SELECT s.NCESSchool, s.CDSCode FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE f.`Enrollment (Ages 5-17)` = ( SELECT MAX(`Enrollment (Ages 5-17)`) FROM frpm WHERE `Enrollment (Ages 5-17)` IS NOT NULL ) ORDER BY `Enrollment (Ages 5-17)` DESC LIMIT 5;"]}, {"question_id": 15, "answer_sql": ["SELECT s.District, AVG(ss.AvgScrRead) as AvgReadingScore FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode JOIN satscores ss ON s.CDSCode = ss.cds WHERE s.StatusType = 'Active' AND f.CDSCode IS NOT NULL AND ss.cds IS NOT NULL GROUP BY s.District ORDER BY AvgReadingScore DESC LIMIT 1;", "SELECT DISTINCT `District Name` FROM frpm WHERE `2013-14 CALPADS Fall 1 Certification Status` = 1 ORDER BY `2013-14 CALPADS Fall 1 Certification Status` DESC LIMIT 1;", "SELECT s.District, AVG(ss.AvgScrRead) as Average_Reading_Score FROM schools s JOIN schools_admins sa ON s.CDSCode = sa.CDSCode JOIN satscores ss ON s.CDSCode = ss.cds WHERE s.StatusType = 'Active' AND ss.rtype = 'SAT' GROUP BY s.District ORDER BY Average_Reading_Score DESC LIMIT 1;"]}, {"question_id": 16, "answer_sql": ["SELECT COUNT(*) FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode JOIN satscores ON schools.CDSCode = satscores.cds WHERE schools.County = 'Alameda' AND satscores.NumTstTakr < 100;"]}, {"question_id": 17, "answer_sql": ["SELECT `Charter School Number` FROM frpm WHERE `Educational Option Type` = 'Charter' AND `County Name` = 'Los Angeles' AND `District Name` = 'Los Angeles' AND `School Name` = '499';"]}, {"question_id": 18, "answer_sql": ["SELECT COUNT(*) FROM frpm WHERE IRC = 1 AND `2013-14 CALPADS Fall 1 Certification Status` = 1 AND `Enrollment (K-12)` <= 250;"]}, {"question_id": 19, "answer_sql": ["SELECT Phone FROM schools WHERE CDSCode = (SELECT cds FROM satscores WHERE rtype = 'Math' AND AvgScrMath = (SELECT MAX(AvgScrMath) FROM satscores));"]}, {"question_id": 20, "answer_sql": ["SELECT COUNT(*) FROM frpm WHERE `Low Grade` = '9' AND `High Grade` = '12';", "SELECT COUNT(*) FROM frpm WHERE `Low Grade` = '9' AND `High Grade` = '12' AND `School Name` LIKE 'Amador%';", "SELECT COUNT(*) FROM frpm WHERE `Low Grade` = '9' AND `High Grade` = '12' AND `District Name` = 'Amador';"]}, {"question_id": 21, "answer_sql": ["SELECT COUNT(*) FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE (frpm.`Free Meal Count (K-12)` > 500 AND frpm.`Free Meal Count (K-12)` < 700) AND schools.City = 'Los Angeles' AND schools.State = 'CA';", "SELECT COUNT(*) FROM frpm WHERE `Enrollment (K-12)` > 500 AND (`Free Meal Count (K-12)` > 0 AND `Free Meal Count (K-12)` < 700);", "SELECT COUNT(*) FROM frpm WHERE `Enrollment (K-12)` > 500 AND (`Free Meal Count (K-12)` > 700 OR `Free Meal Count (K-12)` > 500);", "SELECT COUNT(*) FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode JOIN schools_admins ON schools.CDSCode = schools_admins.CDSCode WHERE (frpm.`Free Meal Count (K-12)` > 500 AND frpm.`Free Meal Count (K-12)` < 700) AND schools.City = 'Los Angeles' AND schools.State = 'CA';"]}, {"question_id": 22, "answer_sql": ["SELECT schools.School, MAX(satscores.NumTstTakr) as Highest_Test_Takers FROM schools JOIN satscores ON schools.CDSCode = satscores.cds GROUP BY schools.School ORDER BY Highest_Test_Takers DESC LIMIT 1;", "SELECT satscores.sname, COUNT(satscores.NumTstTakr) as TotalTestTakers FROM satscores JOIN frpm ON satscores.cds = frpm.CDSCode WHERE frpm.`County Code` = '9' GROUP BY satscores.sname ORDER BY TotalTestTakers DESC LIMIT 1;"]}, {"question_id": 23, "answer_sql": []}, {"question_id": 24, "answer_sql": []}, {"question_id": 25, "answer_sql": ["SELECT schools.School, schools.FundingType FROM schools JOIN (SELECT cds, AVG(AvgScrMath) as AvgMath FROM satscores GROUP BY cds) as avg_math_scores ON schools.CDSCode = avg_math_scores.cds WHERE avg_math_scores.AvgMath > 400 AND schools.City = 'Riverside' ORDER BY schools.School;", "SELECT s.School, s.FundingType FROM schools s JOIN (SELECT cds, AVG(AvgScrMath) as avg_avg_math FROM satscores GROUP BY cds) ss ON s.CDSCode = ss.cds WHERE ss.avg_avg_math > 400", "SELECT schools.School, schools.FundingType FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE satscores.AvgScrMath > (SELECT AVG(AvgScrMath) FROM satscores WHERE cds IN (SELECT CDSCode FROM schools WHERE City = 'Riverside')) AND schools.City = 'Riverside';", "SELECT schools.School, schools.FundingType FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE satscores.AvgScrMath > 400 AND schools.City = 'Riverside' AND schools.FundingType IS NOT NULL;", "SELECT s.FundingType FROM schools s JOIN satscores s1 ON s.CDSCode = s1.cds WHERE s1.AvgScrMath > 400"]}, {"question_id": 26, "answer_sql": ["SELECT S.School, S.Street, S.City, S.State, S.Zip, S.MailStreet, S.MailCity, S.MailState, S.MailZip, S.MailStreet, S.MailStrAbr, S.MailCity, S.MailZip, S.MailState FROM schools AS S JOIN schools_admins AS SA ON S.CDSCode = SA.CDSCode WHERE S.School LIKE 'High School%' AND SA.Street LIKE '%Monterey%' AND SA.Street LIKE '%800%' AND SA.Street LIKE '%free%' OR SA.Street LIKE '%reduced%' AND SA.Street LIKE '%15-17%'"]}, {"question_id": 27, "answer_sql": ["SELECT s.School, ss.AvgScrWrite, s.Phone FROM schools s \nJOIN satscores ss ON s.CDSCode = ss.cds \nWHERE s.OpenDate > '1991-01-01' AND s.ClosedDate < '2000-01-01' \nORDER BY s.School;"]}, {"question_id": 28, "answer_sql": ["SELECT frpm.CDSCode, frpm.`School Name`, schools.DOCType, schools.FundingType, schools.DOC FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE frpm.`Enrollment (K-12)` - frpm.`Enrollment (Ages 5-17)` > (SELECT AVG(difference) FROM (SELECT `Enrollment (K-12)` - `Enrollment (Ages 5-17)` as difference FROM frpm) as average_diff) AND schools.FundingType = 'Locally Funded'"]}, {"question_id": 29, "answer_sql": ["SELECT `Academic Year`, MAX(`Enrollment (K-12)`) as `Max Enrollment` FROM frpm GROUP BY `Academic Year` ORDER BY `Max Enrollment` DESC LIMIT 1;", "SELECT `Academic Year`, `School Name` FROM frpm WHERE `Enrollment (K-12)` = ( SELECT MAX(`Enrollment (K-12)`) FROM frpm )", "SELECT `Academic Year` FROM frpm WHERE `Enrollment (K-12)` = ( SELECT MAX(`Enrollment (K-12)`) FROM frpm ) AND `School Type` = 'K-12';"]}, {"question_id": 30, "answer_sql": ["SELECT s.City, COUNT(s.CDSCode) as TotalStudents FROM schools s JOIN schools_admins sa ON s.CDSCode = sa.CDSCode WHERE s.DOCType = 'K-12' GROUP BY s.City ORDER BY TotalStudents ASC LIMIT 5;"]}, {"question_id": 31, "answer_sql": ["SELECT frpm.CDSCode, frpm.`County Name`, frpm.`District Name`, frpm.`School Name`, frpm.`Enrollment (K-12)`, frpm.`Free Meal Count (K-12)`, frpm.`Percent (%) Eligible Free (K-12)` FROM frpm JOIN satscores ON frpm.CDSCode = satscores.cds WHERE frpm.`Enrollment (K-12)` IN (SELECT MAX(`Enrollment (K-12)`) FROM frpm) AND satscores.NumTstTakr > 0 ORDER BY frpm.`Enrollment (K-12)` DESC;", "SELECT frpm.CDSCode, frpm.`County Code`, schools.County, frpm.`Percent (%) Eligible Free (K-12)`, frpm.`Free Meal Count (K-12)`, frpm.`Enrollment (K-12)`, (frpm.`Free Meal Count (K-12)` / frpm.`Enrollment (K-12)`) AS `Eligible Free Rate (K-12)` FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE frpm.`Enrollment (K-12)` IN (SELECT MAX(`Enrollment (K-12)`) FROM frpm) AND frpm.`Enrollment (K-12)` IN (SELECT MAX(`Enrollment (K-12)`) FROM frpm) ORDER BY `Enrollment (K-12)` DESC;", "SELECT frpm.CDSCode, frpm.`County Code`, schools.County, frpm.`Percent (%) Eligible Free (K-12)`, frpm.`Free Meal Count (K-12)`, frpm.`Enrollment (K-12)`, (frpm.`Free Meal Count (K-12)` / frpm.`Enrollment (K-12)`) AS `Eligible Free Rate` FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE frpm.`County Code` IN ( SELECT `County Code` FROM frpm WHERE `Enrollment (K-12)` IN ( SELECT MAX(`Enrollment (K-12)`) FROM frpm WHERE `Enrollment (K-12)` BETWEEN 10000 AND 11000 ) ) ORDER BY `Enrollment (K-12)` DESC;"]}, {"question_id": 32, "answer_sql": []}, {"question_id": 33, "answer_sql": ["SELECT S.School, S.Website FROM schools S JOIN schools_admins SA ON S.CDSCode = SA.CDSCode WHERE SA.SchoolCode IN ( SELECT SA2.SchoolCode FROM schools_admins SA2 WHERE SA2.CountyCode = 'Los Angeles' AND SA2.DistrictCode = '01' AND SA2.SchoolName LIKE '%free meal count%' AND SA2.SchoolName LIKE '%1,900-2,000%' AND SA2.SchoolName LIKE '%ages 5-17%' ) AND S.Charter = 1;"]}, {"question_id": 34, "answer_sql": []}, {"question_id": 35, "answer_sql": []}, {"question_id": 36, "answer_sql": ["SELECT admfname1, admlname1 FROM schools WHERE CDSCode = (SELECT cds FROM satscores WHERE NumGE1500 = (SELECT MAX(NumGE1500) FROM satscores));", "SELECT admFName1, AdmLName1 FROM schools WHERE DOC >= 1500 AND Magnet = 1 ORDER BY DOC DESC LIMIT 1;", "SELECT `AdmFName1`, `AdmLName1` FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE satscores.NumTstTakr >= 1500;", "SELECT s.School, s.AdmFName1, s.AdmLName1 FROM schools AS s JOIN schools_admins AS sa ON s.CDSCode = sa.CDSCode JOIN satscores AS ss ON s.CDSCode = ss.cds WHERE ss.NumTstTakr >= 1500 ORDER BY ss.NumTstTakr DESC LIMIT 1;"]}, {"question_id": 37, "answer_sql": ["SELECT City, Street, State, Zip FROM schools WHERE EdOpsCode = (SELECT MIN(EdOpsCode) FROM schools);", "SELECT Street, City, Zip, State FROM schools WHERE CDSCode IN (SELECT cds FROM satscores WHERE NumTstTakr = (SELECT MIN(NumTstTakr) FROM satscores));", "SELECT Street, City, Zip, State FROM schools WHERE EdOpsCode = (SELECT MIN(EdOpsCode) FROM schools);"]}, {"question_id": 38, "answer_sql": []}, {"question_id": 39, "answer_sql": ["SELECT AVG(NumTstTakr) FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE schools.CDSCode IN (SELECT CDSCode FROM schools WHERE City = 'Fresno') AND schools.OpenDate BETWEEN '1980-01-01' AND '1980-12-31';", "SELECT AVG(NumTstTakr) as Average_Test_Takers FROM satscores s JOIN schools sc ON s.cds = sc.CDSCode WHERE s.rtype = 'SAT' AND sc.OpenDate BETWEEN '1980-01-01' AND '1980-12-31';"]}, {"question_id": 40, "answer_sql": ["SELECT Phone FROM schools WHERE CDSCode IN ( SELECT cds FROM satscores WHERE rtype = 'F' ORDER BY AvgScrRead ASC LIMIT 1 )"]}, {"question_id": 41, "answer_sql": ["SELECT s.School, s.Street, s.City, s.State, s.Virtual, MAX(ss.AvgScrRead) as Top_Avg_Reading_Score FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds WHERE s.Virtual = 'F' GROUP BY s.School, s.Street, s.City, s.State ORDER BY Top_Avg_Reading_Score DESC LIMIT 5;", "SELECT s.School, s.Street, s.City, s.State, s.Zip, s.MailCity, s.MailState, s.MailZip, s.Website, s.Phone, s.Virtual, s.Magnet, s.Latitude, s.Longitude, s.LastUpdate FROM schools s JOIN schools_admins sa ON s.CDSCode = sa.CDSCode WHERE s.Virtual = 'F' ORDER BY s.LastUpdate DESC LIMIT 5;", "SELECT satscores.cds, schools.Street, schools.City, schools.State, schools.Virtual, MAX(satscores.AvgScrRead) as Top_Avg_Reading_Score FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE schools.Virtual = 'F' GROUP BY satscores.cds ORDER BY Top_Avg_Reading_Score DESC LIMIT 5;", "SELECT satscores.cds, satscores.AvgScrRead FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE schools.Virtual = 'F' ORDER BY satscores.AvgScrRead DESC LIMIT 5;"]}, {"question_id": 42, "answer_sql": ["SELECT rtype FROM satscores JOIN schools ON satscores.cds = schools.CDSCode GROUP BY rtype ORDER BY AvgScrMath DESC LIMIT 1;", "SELECT `Educational Option Type` FROM frpm WHERE `Academic Year` = (SELECT `Academic Year` FROM satscores WHERE `rtype` = 'Math') AND `County Code` = (SELECT `County Code` FROM satscores WHERE `cds` = (SELECT CDSCode FROM schools WHERE `School Name` = 'The school who scored the highest average in Math'));"]}, {"question_id": 43, "answer_sql": ["SELECT s.District, f.CDSCode, AVG(satscores.AvgScrMath) as AverageMathScore FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode JOIN satscores ON f.CDSCode = satscores.cds WHERE s.District IN (SELECT MIN(District) FROM schools GROUP BY County) GROUP BY s.District, f.CDSCode ORDER BY AverageMathScore DESC;", "SELECT schools.District, schools.County, AVG(satscores.AvgScrMath + satscores.AvgScrRead + satscores.AvgScrWrite) as AverageMathScore FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE schools.CDSCode IN ( SELECT frpm.CDSCode FROM frpm WHERE `County Code` IN ( SELECT schools_admins.CountyCode FROM schools_admins WHERE schools_admins.SchoolName = '[School Name]' ) ) GROUP BY schools.District, schools.County ORDER BY AverageMathScore ASC LIMIT 1;", "SELECT s.District, f.CDSCode, AVG(satscores.AvgScrMath) as AvgMathScore FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode JOIN satscores ON f.CDSCode = satscores.cds WHERE s.District = (SELECT MIN(District) FROM schools) GROUP BY s.District, f.CDSCode ORDER BY AvgMathScore DESC LIMIT 1;"]}, {"question_id": 44, "answer_sql": ["SELECT s.City, AVG(ss.AvgScrWrite) as AvgWriteScr FROM satscores ss JOIN schools s ON ss.cds = s.CDSCode WHERE ss.NumTstTakr >= 1500 GROUP BY s.City ORDER BY AvgWriteScr DESC LIMIT 1;", "SELECT AvgScrWrite, City FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE NumTstTakr >= 1500 ORDER BY NumTstTakr DESC LIMIT 1", "SELECT s.City, ss.AvgScrWrite, ss.NumTstTakr FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds WHERE ss.NumTstTakr >= 1500 ORDER BY ss.NumTstTakr DESC LIMIT 1;"]}, {"question_id": 45, "answer_sql": ["SELECT schools.School, satscores.AvgScrWrite FROM schools JOIN frpm ON schools.CDSCode = frpm.CDSCode JOIN satscores ON frpm.CDSCode = satscores.cds WHERE schools.AdmFName1 = 'Ricci' AND schools.AdmLName1 = 'Ulrich' ORDER BY schools.School;", "SELECT s.School, satscores.AvgScrWrite FROM schools s JOIN schools_admins sa ON s.CDSCode = sa.CDSCode JOIN frpm ON s.CDSCode = frpm.CDSCode JOIN satscores ON s.CDSCode = satscores.cds WHERE sa.SchoolName = 'Ricci Ulrich' ORDER BY s.School;"]}, {"question_id": 46, "answer_sql": ["SELECT s.State, COUNT(DISTINCT s.CDSCode) as Total_Schools FROM schools s WHERE s.DOC = 31 GROUP BY s.State ORDER BY Total_Schools DESC;", "SELECT s.State, s.SOC, s.SOCType, s.EdOpsCode, s.EdOpsName, s.Magnet, s.City, s.GSoffered, s.GSserved, s.Virtual, s.AdmFName1, s.AdmLName1, s.AdmEmail1, s.Street, s.City, s.State, s.Latitude, s.Longitude, ss.NumTstTakr, ss.Enroll12 FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds WHERE s.DOC = 31 AND s.DOCType = 'State Special School' GROUP BY s.State, s.SOC, s.SOCType, s.EdOpsCode, s.EdOpsName, s.Magnet, s.City, s.GSoffered, s.GSserved, s.Virtual, s.AdmFName1, s.AdmLName1, s.AdmEmail1, s.Street, s.City, s.State, s.Latitude, s.Longitude, ss.NumTstTakr, ss.Enroll12 ORDER BY ss.Enroll12 DESC;"]}, {"question_id": 47, "answer_sql": ["SELECT AVG(DOC) as MonthlyAverage FROM schools WHERE DOC = 52 AND OpenDate >= '1980-01-01' AND OpenDate < '1981-01-01';", "SELECT AVG(DOC) as Monthly_Average_Number_of_Schools_Opened FROM (SELECT DOC FROM schools WHERE OpenDate <= '1980-12-31' AND OpenDate >= '1980-01-01' AND County = 'Alameda County' AND DOC = 52) as DOC_52 WHERE DOC_52.DOC = 52;"]}, {"question_id": 48, "answer_sql": ["SELECT (SELECT COUNT(*) FROM frpm WHERE DOC = 54) AS 'Unified_Schools', (SELECT COUNT(*) FROM frpm WHERE DOC = 52) AS 'Elementary_Schools', (SELECT COUNT(*) FROM frpm WHERE DOC = 54) / (SELECT COUNT(*) FROM frpm WHERE DOC = 52) AS 'Ratio' FROM schools WHERE County = 'Orange County';", "SELECT (SELECT COUNT(*) FROM schools WHERE DOC = 54) as 'Unified_Schools', (SELECT COUNT(*) FROM schools WHERE DOC = 52) as 'Elementary_Schools', (SELECT COUNT(*) FROM schools WHERE DOC = 54) / (SELECT COUNT(*) FROM schools WHERE DOC = 52) as 'Ratio'", "SELECT (SELECT COUNT(*) FROM schools WHERE DOC = 52) / (SELECT COUNT(*) FROM schools WHERE DOC = 54) AS Ratio;", "SELECT (SELECT COUNT(*) FROM frpm WHERE frpm.CDSCode IN (SELECT CDSCode FROM schools WHERE DOC = 54)) AS 'Unified_DOC54', (SELECT COUNT(*) FROM schools WHERE DOC = 52) AS 'Elementary_DOC52', (SELECT COUNT(*) FROM frpm WHERE frpm.CDSCode IN (SELECT CDSCode FROM schools WHERE DOC = 54)) / (SELECT COUNT(*) FROM schools WHERE DOC = 52) AS 'Ratio'"]}, {"question_id": 49, "answer_sql": ["SELECT COUNT(DISTINCT schools.CDSCode) as Total_Count, schools.County FROM schools WHERE schools.StatusType = 'Closed' GROUP BY schools.County ORDER BY Total_Count DESC LIMIT 1;", "SELECT COUNT(DISTINCT schools.CDSCode) as Total_Count, schools.County, schools.School, schools.ClosedDate FROM schools WHERE schools.ClosedDate IS NOT NULL GROUP BY schools.County ORDER BY Total_Count DESC LIMIT 1;", "SELECT County, COUNT(*) as TotalClosedSchools, GROUP_CONCAT(DISTINCT School) as AllSchools FROM schools JOIN (SELECT frpm.CDSCode, frpm.`County Code`, frpm.`District Code`, frpm.`School Code`, frpm.`County Name`, frpm.`District Name`, frpm.`School Name` FROM frpm WHERE frpm.`County Code` IN (SELECT County FROM schools WHERE StatusType = 'Closed') ) as ClosedSchools ON schools.CDSCode = ClosedSchools.CDSCode GROUP BY County ORDER BY TotalClosedSchools DESC LIMIT 1;", "SELECT COUNT(DISTINCT schools.County) AS TotalCount, schools.County FROM schools LEFT JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE schools.ClosedDate IS NOT NULL GROUP BY schools.County ORDER BY TotalCount DESC LIMIT 1;", "SELECT County, COUNT(*) as Total_Closed_Schools, GROUP_CONCAT(DISTINCT School) as List_of_Schools FROM schools INNER JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE schools.ClosedDate IS NOT NULL GROUP BY County ORDER BY Total_Closed_Schools DESC;"]}, {"question_id": 50, "answer_sql": ["SELECT s.City, s.Street, s.State FROM schools s JOIN ( SELECT cds, AVG(AvgScrMath) as AvgMath FROM satscores GROUP BY cds ORDER BY AvgMath DESC LIMIT 6 ) ss ON s.CDSCode = ss.cds ORDER BY ss.AvgMath DESC LIMIT 1;", "SELECT S.Street, S.City, S.State, S.Zip FROM schools S JOIN ( SELECT cds, AVG(AvgScrMath) as avg_math FROM satscores GROUP BY cds ORDER BY avg_math DESC LIMIT 6 ) M ON S.CDSCode = M.cds", "SELECT s.City, s.Street, s.State, MAX(ss.AvgScrMath) OVER () AS Math_Average FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds WHERE s.CDSCode IN ( SELECT frpm.CDSCode FROM frpm WHERE frpm.CDSCode IN ( SELECT MAX(ss2.AvgScrMath) OVER () AS Math_Average FROM satscores ss2 ) ) ORDER BY Math_Average DESC LIMIT 1;"]}, {"question_id": 51, "answer_sql": ["SELECT s.MailStreet, s.School, MIN(ss.AvgScrRead) as Lowest_Reading_Score FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds GROUP BY s.MailStreet, s.School ORDER BY Lowest_Reading_Score ASC LIMIT 1;"]}, {"question_id": 52, "answer_sql": ["SELECT COUNT(*) FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE schools.MailCity = 'Lakeport' AND (satscores.AvgScrRead + satscores.AvgScrMath + satscores.AvgScrWrite) >= 1500;", "SELECT SUM(satscores.NumGE1500) FROM satscores JOIN schools ON satscores.cds = schools.CDSCode JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE schools.City = 'Lakeport';", "SELECT COUNT(*) FROM schools JOIN satscores ON schools.CDSCode = satscores.cds JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE satscores.AvgScrRead + satscores.AvgScrMath + satscores.AvgScrWrite >= 1500 AND schools.City = 'Lakeport';", "SELECT SUM(satscores.NumGE1500) FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE schools.City = 'Lakeport';", "SELECT COUNT(*) FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE schools.MailCity = 'Lakeport' AND satscores.NumTstTakr >= 1500;"]}, {"question_id": 53, "answer_sql": ["SELECT COUNT(*) FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE schools.City = 'Fresno';", "SELECT satscores.NumTstTakr FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE schools.City = 'Fresno';", "SELECT satscores.sname, COUNT(satscores.sname) as TotalTestTakers FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE schools.MailCity = 'Fresno' GROUP BY satscores.sname;"]}, {"question_id": 54, "answer_sql": ["SELECT s.CDSCode, s.Zip, s.City, s.State, s.MailZip FROM schools s JOIN schools_admins sa ON s.CDSCode = sa.CDSCode WHERE sa.AdmFName1 = 'Avetik' AND sa.AdmLName1 = 'Atoian';"]}, {"question_id": 55, "answer_sql": ["SELECT (SELECT COUNT(*) FROM schools WHERE State = 'CA' AND County = 'Colusa') as Colusa_Count, (SELECT COUNT(*) FROM schools WHERE State = 'CA' AND County = 'Humboldt') as Humboldt_Count, (SELECT COUNT(*) FROM schools WHERE State = 'CA' AND County = 'Colusa') / (SELECT COUNT(*) FROM schools WHERE State = 'CA' AND County = 'Humboldt') as Ratio", "SELECT (SELECT COUNT(*) FROM schools WHERE State = 'CA' AND MailState = 'Colusa') AS 'Colusa', (SELECT COUNT(*) FROM schools WHERE State = 'CA' AND MailState = 'Humboldt') AS 'Humboldt', (SELECT COUNT(*) FROM schools WHERE State = 'CA' AND MailState = 'Colusa') / (SELECT COUNT(*) FROM schools WHERE State = 'CA' AND MailState = 'Humboldt') AS 'Ratio'", "SELECT (COUNT(CASE WHEN MailState = 'California' THEN 1 END)) AS 'Count_in_California', (COUNT(*)) AS 'Total_Count', (COUNT(CASE WHEN MailState = 'California' THEN 1 END)) / (COUNT(*)) AS 'Ratio' FROM schools WHERE MailState IS NOT NULL;", "SELECT (SELECT COUNT(*) FROM schools WHERE County = 'Colusa' AND MailState = 'California') AS 'Colusa_Count', (SELECT COUNT(*) FROM schools WHERE County = 'Humboldt' AND MailState = 'California') AS 'Humboldt_Count', (SELECT COUNT(*) FROM schools WHERE County = 'Colusa' AND MailState = 'California') / (SELECT COUNT(*) FROM schools WHERE County = 'Humboldt' AND MailState = 'California') AS 'Ratio' FROM schools WHERE CDSCode IN (SELECT CDSCode FROM schools WHERE County = 'Colusa')", "SELECT s1.County, s2.County, (CAST(count(s1.CDSCode) as float) / CAST(count(s2.CDSCode) as float)) as ratio FROM schools s1 JOIN schools s2 ON s1.County = s2.County WHERE s1.State = 'California' AND s2.State = 'California' GROUP BY s1.County, s2.County ORDER BY ratio DESC;"]}, {"question_id": 56, "answer_sql": ["SELECT COUNT(*) FROM schools JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE schools.City = 'San Joaquin' AND schools.MailState = 'CA';", "SELECT COUNT(*) FROM schools WHERE MailState = 'California' AND City = 'San Joaquin';"]}, {"question_id": 57, "answer_sql": ["SELECT schools.Phone, schools.Ext FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE satscores.AvgScrWrite = (SELECT MAX(AvgScrWrite) FROM satscores) ORDER BY CDSCode ASC LIMIT 1;", "SELECT Phone, Ext FROM schools WHERE CDSCode IN (SELECT cds FROM satscores ORDER BY AvgScrWrite DESC LIMIT 1 OFFSET 332)"]}, {"question_id": 58, "answer_sql": ["SELECT Phone, Ext, School FROM schools WHERE Zip = '95203-3704';", "SELECT s.School, s.Phone, s.Ext FROM schools s WHERE s.Zip = '95203-3704';"]}, {"question_id": 59, "answer_sql": ["SELECT Website FROM schools WHERE (AdmFName1 = 'Mike Larson' AND AdmLName1 = 'Alvarez') OR (AdmFName2 = 'Mike Larson' AND AdmLName2 = 'Alvarez') OR (AdmFName3 = 'Mike Larson' AND AdmLName3 = 'Alvarez');"]}, {"question_id": 60, "answer_sql": ["SELECT Website FROM schools WHERE Virtual = 'P' AND Charter = 1 AND County = 'San Joaquin';", "SELECT Website FROM schools WHERE Virtual = 'P' AND Charter = 1 AND State = 'San Joaquin';"]}, {"question_id": 61, "answer_sql": ["SELECT COUNT(*) FROM schools WHERE DOC = 52 AND Charter = 1 AND City = 'Hickman';", "SELECT COUNT(*) FROM schools WHERE District = 'Hickman' AND County = 'California' AND Charter = 1;"]}, {"question_id": 62, "answer_sql": ["SELECT COUNT(*) FROM frpm WHERE `Charter School (Y/N)` = 0 AND `County Name` = 'Los Angeles' AND `Percent (%) Eligible Free (K-12)` < 0.18;", "SELECT COUNT(*) FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.Charter = 0 AND frpm.`County Code` = 'Los Angeles' AND frpm.`Percent (%) Eligible Free (K-12)` < 0.18;", "SELECT COUNT(*) FROM frpm WHERE `Charter School (Y/N)` = 0 AND `Percent (%) Eligible Free (K-12)` < 0.18;"]}, {"question_id": 63, "answer_sql": ["SELECT schools.City, schools_admins.SchoolName, schools_admins.AdmFName1, schools_admins.AdmLName1 FROM schools JOIN schools_admins ON schools.CDSCode = schools_admins.CDSCode WHERE schools.Charter = 1 AND schools_admins.SchoolName = '00D2'"]}, {"question_id": 64, "answer_sql": []}, {"question_id": 65, "answer_sql": ["SELECT s.County, (SELECT COUNT(*) FROM frpm AS f WHERE f.CDSCode IN (SELECT s.CDSCode FROM schools AS s WHERE s.County = 'Santa Clara County')) / (SELECT COUNT(*) FROM frpm AS f WHERE f.CDSCode IN (SELECT s.CDSCode FROM schools AS s WHERE s.County = 'Santa Clara County' AND s.FundingType != 'Locally Funded')) * 100 AS Percentage_Ratio FROM schools AS s WHERE s.County = 'Santa Clara County'", "SELECT (COUNT(CASE WHEN schools.FundingType = 'Locally Funded' THEN 1 END) * 100.0) / (COUNT(*) * 100.0) AS Percentage_of_Santa_Clara_County_Schools_That_Are_Locally_Funded FROM schools WHERE schools.County = 'Santa Clara County';", "SELECT (COUNT(CASE WHEN `Charter School (Y/N)` = '1' AND `Charter Funding Type` = 'Locally Funded' THEN 1 END) / (SELECT COUNT(*) FROM (SELECT `Charter School (Y/N)`, `Charter Funding Type` FROM frpm WHERE `Charter School (Y/N)` = '1' OR `Charter Funding Type` = 'Locally Funded') AS temp) * 100) AS Percentage_of_Santa_Clara_County_Schools_That_Are_Locally_Funded FROM frpm;"]}, {"question_id": 66, "answer_sql": ["SELECT COUNT(*) FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.OpenDate BETWEEN '2000-01-01' AND '2005-12-31' AND schools.FundingType = 'Directly Funded' AND schools.County = 'Stanislaus';"]}, {"question_id": 67, "answer_sql": ["SELECT SUM(IRC) as Total_Closures_1989 FROM frpm WHERE `Academic Year` = '1989' AND `County Name` = 'San Francisco'"]}, {"question_id": 68, "answer_sql": ["SELECT s.County, COUNT(*) as NumClosures FROM schools s JOIN schools_admins sa ON s.CDSCode = sa.CDSCode JOIN frpm f ON s.CDSCode = f.CDSCode WHERE s.SOC = 11 AND s.LastUpdate BETWEEN '1980-01-01' AND '1989-12-31' GROUP BY s.County ORDER BY NumClosures DESC;"]}, {"question_id": 69, "answer_sql": ["SELECT NCESDist FROM schools WHERE SOC = '31';", "SELECT s.CDSCode FROM schools s WHERE s.SOC = 31;", "SELECT s.CDSCode FROM schools s JOIN schools_admins sa ON s.CDSCode = sa.CDSCode WHERE s.SOC = '31'"]}, {"question_id": 70, "answer_sql": ["SELECT COUNT(*) FROM frpm WHERE `District Code` = ( SELECT `District Code` FROM schools WHERE County = 'Alpine' ) AND `District Type` = 'Active' AND `School Type` = 'Closed' AND `Charter School (Y/N)` = 'N';"]}, {"question_id": 71, "answer_sql": ["SELECT District FROM schools WHERE Magnet = 0 AND City = 'Fresno';", "SELECT DISTINCT schools_admins.DistrictCode FROM schools_admins JOIN schools ON schools_admins.SchoolCode = schools.School WHERE schools.City = 'Fresno' AND schools.Magnet = 0;"]}, {"question_id": 72, "answer_sql": ["SELECT COUNT(*) FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode JOIN satscores ON schools.CDSCode = satscores.cds WHERE satscores.rtype = 'SSS' AND schools.Charter = 'Y'", "SELECT frpm.`2013-14 CALPADS Fall 1 Certification Status` FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.School = 'State Special School' AND schools.EdOpsCode = 'SSS' AND frpm.`2013-14 CALPADS Fall 1 Certification Status` = 1;"]}, {"question_id": 73, "answer_sql": ["SELECT frpm.`County Name`, frpm.`District Name`, frpm.`School Name`, frpm.`Free Meal Count (Ages 5-17)` FROM frpm JOIN schools ON frpm.`School Code` = schools.CDSCode JOIN schools_admins ON schools.CDSCode = schools_admins.CDSCode WHERE schools.`Street` = 'PO Box 1040' AND schools.`School` = 'Youth Authority School';"]}, {"question_id": 74, "answer_sql": ["SELECT `Low Grade` FROM frpm WHERE `County Code` = '060' AND `District Code` = '001' AND `School Code` = '613360' AND `District Type` = 'SPECON';"]}, {"question_id": 75, "answer_sql": ["SELECT DOCType FROM schools WHERE County = 'County code 37' AND DOC = 'Breakfast Provision 2';"]}, {"question_id": 76, "answer_sql": ["SELECT City, State, Latitude, Longitude FROM schools JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE frpm.`County Code` = 'Merced' AND frpm.`Low Grade` = 9 AND frpm.`High Grade` = 12 AND schools.School = 'Lunch Provision 2' AND schools.EILCode = 'HS';"]}, {"question_id": 77, "answer_sql": []}, {"question_id": 78, "answer_sql": ["SELECT s.School, s.Street, s.City, s.State, COUNT(frpm.CDSCode) as FRPM_Count FROM frpm JOIN schools s ON frpm.CDSCode = s.CDSCode WHERE s.City = 'Adelanto' GROUP BY s.School, s.Street, s.City, s.State ORDER BY FRPM_Count DESC LIMIT 1;", "SELECT `High Grade`, COUNT(*) as Total \nFROM frpm \nJOIN schools_admins ON frpm.CDSCode = schools_admins.CDSCode \nJOIN schools ON frpm.CDSCode = schools.CDSCode \nWHERE frpm.`High Grade` IS NOT NULL \nGROUP BY `High Grade` \nORDER BY Total DESC \nLIMIT 1;"]}, {"question_id": 79, "answer_sql": ["SELECT Count(*), schools.County FROM schools WHERE Virtual = 'F' GROUP BY schools.County ORDER BY Count(*) DESC LIMIT 1;", "SELECT COUNT(DISTINCT County) as 'County Offer' FROM schools WHERE Virtual = 'F' AND (County BETWEEN 'San Diego' AND 'Santa Barbara');", "SELECT County, COUNT(*) as 'Count' FROM schools WHERE Virtual = 'F' GROUP BY County HAVING County BETWEEN 'San Diego' AND 'Santa Barbara' ORDER BY 'Count' DESC;", "SELECT COUNT(*) as 'Count' FROM schools WHERE County NOT IN ('San Diego', 'Santa Barbara') AND Virtual = 'F';", "SELECT COUNT(*) FROM schools WHERE County IN (SELECT County FROM schools WHERE Virtual = 'F') AND County NOT IN (SELECT County FROM schools WHERE Virtual = 'T');"]}, {"question_id": 80, "answer_sql": ["SELECT School, MAX(Latitude) as MaxLatitude FROM schools GROUP BY School ORDER BY MaxLatitude DESC LIMIT 1;"]}, {"question_id": 81, "answer_sql": []}, {"question_id": 82, "answer_sql": ["SELECT `High Grade` FROM frpm WHERE CDSCode IN (SELECT School FROM schools WHERE Longitude = (SELECT MAX(Longitude) FROM schools));"]}, {"question_id": 83, "answer_sql": ["SELECT s.City, COUNT(DISTINCT CASE WHEN s.City NOT IN ('Total') AND s.Magnet = 1 THEN s.CDSCode END) AS Magnet_Schools, COUNT(DISTINCT CASE WHEN s.City NOT IN ('Total') AND s.Magnet = 1 AND s.City NOT IN ('California') THEN s.CDSCode END) AS California_Magnet_Schools, COUNT(DISTINCT CASE WHEN s.City NOT IN ('Total') AND s.Magnet = 1 AND s.City NOT IN ('California', 'New York') THEN s.CDSCode END) AS New_York_Magnet_Schools FROM schools s LEFT JOIN schools_admins sa ON s.CDSCode = sa.CDSCode WHERE s.City NOT IN ('Total') GROUP BY s.City ORDER BY Magnet_Schools DESC;", "SELECT COUNT(*), City, COUNT(DISTINCT CDSCode) as NumSchools FROM schools WHERE (Magnet = 1) AND (City IS NOT NULL) GROUP BY City", "SELECT City, COUNT(*) as Total_Schools, SUM(Magnet) as Magnet_Schools FROM schools WHERE Magnet = 1 GROUP BY City ORDER BY Total_Schools DESC, Magnet_Schools DESC;", "SELECT County, City, COUNT(*) as Magnet_Schools FROM schools WHERE Magnet = 1 AND DOCType = 'Multiple Provision Types' GROUP BY County, City ORDER BY County, City;"]}, {"question_id": 84, "answer_sql": ["SELECT s.District, adm.AdmFName1, COUNT(*) as Frequency FROM schools_admins as adm JOIN schools as s ON adm.CDSCode = s.CDSCode WHERE adm.AdmFName1 IS NOT NULL GROUP BY s.District, adm.AdmFName1 ORDER BY Frequency DESC LIMIT 2;"]}, {"question_id": 85, "answer_sql": ["SELECT `Percent (%) Eligible Free (K-12)` FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.AdmFName1 = 'Alusine' AND schools.District = 'California';"]}, {"question_id": 86, "answer_sql": ["SELECT schools.District, schools.County, frpm.AdmLName1, schools.School FROM schools JOIN schools_admins as frpm ON schools.CDSCode = frpm.CDSCode WHERE schools.Charter = 40;"]}, {"question_id": 87, "answer_sql": ["SELECT AdmEmail1, AdmEmail2, AdmEmail3 FROM schools WHERE City = 'San Bernardino' AND District = 'San Bernardino City Unified' AND OpenDate BETWEEN '2009-01-01' AND '2010-12-31' AND SOC = 62 AND DOC = 54;", "SELECT AdmEmail1 FROM schools WHERE County = 'San Bernardino' AND District = 'San Bernardino City Unified' AND Soc = 62 AND Doc = 54 AND OpenDate BETWEEN '2009-01-01' AND '2010-12-31';", "SELECT AdmEmail1 FROM schools WHERE Soc = 62 AND Doc = 54 AND OpenDate BETWEEN '2009-01-01' AND '2010-12-31';", "SELECT `AdmEmail1`, `AdmEmail2`, `AdmEmail3` FROM schools WHERE County = 'San Bernardino' AND DOC = 54 AND Soc = 62 AND OpenDate BETWEEN '2009-01-01' AND '2010-12-31';", "SELECT `AdmEmail1` FROM schools WHERE `City` = 'San Bernardino' AND `District` = 'San Bernardino City Unified' AND `School` = 'Intermediate/Middle Schools' AND `OpenDate` BETWEEN '2009-01-01' AND '2010-12-31' AND `DOC` = 54;"]}, {"question_id": 88, "answer_sql": ["SELECT s.School, s.Street, s.City, s.State, s.AdmEmail1, s.LastUpdate FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds WHERE ss.NumTstTakr >= 1500 ORDER BY ss.NumTstTakr DESC LIMIT 1;", "SELECT schools.School, satscores.sname, satscores.dname, schools_admins.AdmEmail1 FROM schools JOIN satscores ON schools.CDSCode = satscores.cds JOIN schools_admins ON schools.CDSCode = schools_admins.CDSCode WHERE satscores.NumTstTakr >= 1500 ORDER BY satscores.NumTstTakr DESC LIMIT 1;", "SELECT admEmail1 FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE satscores.NumTstTakr >= 1500 ORDER BY satscores.NumTstTakr DESC LIMIT 1;", "SELECT s.School, s.Street, s.City, s.State, s.AdmEmail1 FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds WHERE ss.NumTstTakr >= 1500 ORDER BY ss.NumTstTakr DESC LIMIT 1;"]}, {"question_id": 89, "answer_sql": ["SELECT COUNT(*) FROM account JOIN client ON account.district_id = client.district_id JOIN district ON client.district_id = district.district_id JOIN trans ON account.account_id = trans.account_id WHERE account.date > trans.date AND district.A3 = 'Bohemia';"]}, {"question_id": 90, "answer_sql": ["SELECT COUNT(*) FROM account WHERE district_id IN (SELECT district_id FROM district WHERE A3 = 'Prague') AND account_id IN (SELECT account_id FROM loan);", "SELECT COUNT(*) FROM account JOIN district ON account.district_id = district.district_id WHERE district.A3 LIKE '%Prague%';", "SELECT COUNT(*) FROM account JOIN district ON account.district_id = district.district_id WHERE district.A2 = 'Prague' AND account.frequency = 'eligible'"]}, {"question_id": 91, "answer_sql": ["SELECT AVG(A13) AS 'Unemployment Rate 1996', AVG(A12) AS 'Unemployment Rate 1995' FROM district WHERE A15 IS NOT NULL", "SELECT A13 as 'Unemployment Rate 1996' FROM district WHERE A12 = (SELECT MAX(A12) FROM district)", "SELECT A12 AS 'Unemployment Rate 1995', A13 AS 'Unemployment Rate 1996' FROM district ORDER BY A13 DESC LIMIT 1;", "SELECT A13 - A12 as 'Unemployment Rate Difference' FROM district WHERE A15 = (SELECT MAX(A15) FROM district)", "SELECT A12 AS 'Unemployment Rate 1995', A13 AS 'Unemployment Rate 1996' FROM district;"]}, {"question_id": 92, "answer_sql": ["SELECT COUNT(DISTINCT district.district_id) FROM district JOIN client ON district.district_id = client.district_id WHERE client.gender = 'F' AND district.A11 > 6000 AND district.A11 < 10000;", "SELECT COUNT(*) FROM district WHERE A11 > 6000 AND A11 < 10000 AND A16 = 'F';"]}, {"question_id": 93, "answer_sql": ["SELECT COUNT(*) FROM client WHERE gender = 'M' AND district_id IN (SELECT district_id FROM district WHERE A2 = 'North Bohemia');"]}, {"question_id": 94, "answer_sql": ["SELECT account.account_id FROM account JOIN client ON account.account_id = client.client_id WHERE client.gender = 'F' AND client.birth_date = ( SELECT MIN(birth_date) FROM client WHERE gender = 'F' ) AND account.date = ( SELECT MAX(date) FROM account WHERE client.gender = 'F' )"]}, {"question_id": 95, "answer_sql": ["SELECT account.account_id FROM account JOIN client ON account.district_id = client.district_id JOIN ( SELECT account_id, AVG(A11) as average_salary FROM account JOIN district ON account.district_id = district.district_id GROUP BY account.account_id ORDER BY average_salary DESC LIMIT 1 ) as sub2 ON account.account_id = sub2.account_id;"]}, {"question_id": 96, "answer_sql": ["SELECT COUNT(*) FROM client JOIN disp ON client.client_id = disp.client_id JOIN account ON disp.account_id = account.account_id WHERE disp.type = 'POPLATEK TYDNE' AND account.frequency = 'weekly';"]}, {"question_id": 97, "answer_sql": ["SELECT client.client_id, client.gender, client.birth_date, district.A2, district.A3, district.A4, district.A5, district.A6, district.A7, district.A8, district.A9, district.A10, district.A11, district.A12, district.A13, district.A14, district.A15, district.A16 FROM client JOIN disp ON client.client_id = disp.client_id JOIN loan ON client.client_id = loan.account_id JOIN district ON client.district_id = district.district_id WHERE disp.type = 'POPLATK PO OBRATU' AND loan.status = 'Zapadne'"]}, {"question_id": 98, "answer_sql": ["SELECT account.account_id, account.frequency, account.date, loan.amount, loan.duration, loan.payments FROM account JOIN loan ON account.account_id = loan.account_id WHERE loan.status = 'approved' AND loan.date = '1997-01-01' ORDER BY loan.amount ASC LIMIT 1;"]}, {"question_id": 99, "answer_sql": ["SELECT account.account_id, SUM(loan.amount) as total_amount FROM account JOIN loan ON account.account_id = loan.account_id WHERE loan.duration > 12 GROUP BY account.account_id ORDER BY total_amount DESC LIMIT 1;", "SELECT account.account_id, account.date, account.frequency, loan.amount FROM account JOIN loan ON account.account_id = loan.account_id WHERE loan.duration > 12 AND account.date >= '1993-01-01' ORDER BY loan.amount DESC LIMIT 1;"]}, {"question_id": 100, "answer_sql": ["SELECT COUNT(*) FROM client JOIN district ON client.district_id = district.district_id WHERE client.gender = 'F' AND client.birth_date < '1950' AND district.A2 = 'Slokolov';"]}, {"question_id": 101, "answer_sql": ["SELECT account.account_id, account.date, account.frequency FROM account WHERE account.date = (SELECT MIN(date) FROM account WHERE account.date >= '1995-01-01' AND account.date <= '1995-12-31')", "SELECT account.account_id, account.date FROM account WHERE account.date = (SELECT MIN(date) FROM account WHERE date >= '1995-01-01' AND date <= '1995-12-31');", "SELECT a.account_id FROM account a JOIN client c ON a.district_id = c.district_id WHERE c.birth_date = ( SELECT MIN(birth_date) FROM client WHERE birth_date >= '1995-01-01' )"]}, {"question_id": 102, "answer_sql": ["SELECT DISTINCT trans.account_id FROM trans JOIN account ON trans.account_id = account.account_id WHERE account.date < '1997-01-01' AND account.frequency = 'one-time' AND trans.type = 'deposit' AND trans.amount > 3000;", "SELECT DISTINCT trans.account_id FROM trans JOIN account ON trans.account_id = account.account_id WHERE account.date < '1997-01-01' AND trans.amount > 3000;", "SELECT account.account_id, account.frequency, account.date, account.district_id FROM account \nJOIN loan ON account.account_id = loan.account_id \nWHERE account.date < '1997-01-01' AND loan.amount > 3000;"]}, {"question_id": 103, "answer_sql": ["SELECT client.client_id FROM client JOIN card ON client.client_id = card.disp_id WHERE card.issued = '1994-03-03';"]}, {"question_id": 104, "answer_sql": ["SELECT account.date FROM account WHERE account.account_id = ( SELECT account_id FROM loan WHERE loan.date = '1998-10-14' );", "SELECT account.date FROM account WHERE account.account_id = ( SELECT account_id FROM loan WHERE loan.loan_id = ( SELECT loan_id FROM `order` WHERE `order`.order_id = ( SELECT order_id FROM trans WHERE trans.trans_id = 8 ) ) );", "SELECT a.account_id, a.date FROM account a JOIN trans t ON a.account_id = t.account_id WHERE t.date = '1998-10-14' AND t.type = 'transaction' AND t.amount = 840;"]}, {"question_id": 105, "answer_sql": ["SELECT account.district_id FROM account JOIN loan ON account.account_id = loan.account_id WHERE loan.date = '1994-08-25'"]}, {"question_id": 106, "answer_sql": ["SELECT MAX(amount) FROM trans JOIN card ON trans.account_id = card.disp_id WHERE card.issued = '1996/10/21' AND card.type = 'Credit';"]}, {"question_id": 107, "answer_sql": ["SELECT client.gender FROM client JOIN district ON client.district_id = district.district_id WHERE district.A11 = ( SELECT AVG(A11) FROM account JOIN district ON account.district_id = district.district_id GROUP BY district.district_id ) ORDER BY client.birth_date DESC LIMIT 1;", "SELECT client.gender FROM client JOIN district ON client.district_id = district.district_id WHERE district.A11 = (SELECT AVG(district.A11) FROM district) ORDER BY client.birth_date ASC LIMIT 1;"]}, {"question_id": 108, "answer_sql": ["SELECT operation FROM trans JOIN loan ON trans.account_id = loan.account_id JOIN client ON loan.account_id = client.client_id WHERE client.client_id = ( SELECT client_id FROM loan ORDER BY payments DESC LIMIT 1 ) AND trans.date > ( SELECT date FROM loan WHERE loan.account_id = ( SELECT client_id FROM loan ORDER BY payments DESC LIMIT 1 ) ) LIMIT 1;", "SELECT trans.amount FROM trans JOIN account ON trans.account = account.account_id JOIN loan ON account.account_id = loan.account_id JOIN client ON account.account_id = client.client_id WHERE loan.status = 'approved' ORDER BY trans.amount DESC LIMIT 1;"]}, {"question_id": 109, "answer_sql": ["SELECT COUNT(*) FROM client WHERE district_id IN (SELECT district_id FROM district WHERE A2 = 'Jesenik' AND gender = 'F');", "SELECT COUNT(*) FROM client JOIN disp ON client.client_id = disp.client_id JOIN account ON disp.account_id = account.account_id JOIN district ON account.district_id = district.district_id WHERE district.A2 = 'Jesenik' AND client.gender = 'F';", "SELECT COUNT(*) FROM client JOIN account ON client.client_id = account.district_id WHERE client.gender = 'F' AND client.district_id = (SELECT district_id FROM district WHERE A2 = 'Jesenik');"]}, {"question_id": 110, "answer_sql": ["SELECT disp.disp_id FROM disp JOIN client ON disp.client_id = client.client_id JOIN account ON disp.account_id = account.account_id JOIN trans ON account.account_id = trans.account_id WHERE trans.type = 'transaction' AND trans.amount = 5100 AND trans.date = '1998-09-02';"]}, {"question_id": 111, "answer_sql": ["SELECT COUNT(*) FROM account WHERE district_id = (SELECT district_id FROM district WHERE A2 = 'Litomerice' AND A16 = 1996);"]}, {"question_id": 112, "answer_sql": ["SELECT d.district_id, d.A2 FROM district d JOIN client c ON d.district_id = c.district_id WHERE c.gender = 'F' AND c.birth_date = '1976-01-29';", "SELECT d.A2 FROM district d JOIN client c ON d.district_id = c.district_id WHERE c.gender = 'F' AND c.birth_date = '1976-01-29';", "SELECT DISTINCT district.A2 FROM client JOIN account ON client.client_id = account.district_id JOIN district ON account.district_id = district.district_id WHERE client.gender = 'F' AND client.birth_date = '1976-01-29';"]}, {"question_id": 113, "answer_sql": ["SELECT client.birth_date FROM client JOIN disp ON client.client_id = disp.client_id JOIN account ON disp.account_id = account.account_id JOIN loan ON account.account_id = loan.account_id WHERE loan.amount = 98832 AND loan.date = '1996-01-03';", "SELECT client.birth_date FROM client JOIN account ON client.district_id = account.district_id JOIN loan ON account.account_id = loan.account_id WHERE loan.amount = 98832 AND loan.date = '1996-01-03';", "SELECT client.birth_date FROM client JOIN loan ON client.client_id = loan.account_id WHERE loan.amount = 98832 AND loan.date = '1996-01-03';", "SELECT birth_date FROM client WHERE client_id = (SELECT account_id FROM loan WHERE loan_id = (SELECT loan_id FROM loan WHERE date = '1996/1/3'));"]}, {"question_id": 114, "answer_sql": ["SELECT account.account_id FROM account JOIN client ON account.district_id = client.district_id JOIN district ON client.district_id = district.district_id WHERE district.A3 = 'Prague' AND client.client_id = (SELECT client_id FROM client WHERE district_id = (SELECT district_id FROM district WHERE A3 = 'Prague'));", "SELECT account_id FROM account WHERE district_id = (SELECT district_id FROM district WHERE A2 = 'Prague')"]}, {"question_id": 115, "answer_sql": []}, {"question_id": 116, "answer_sql": ["SELECT l.amount, a.date, t.balance FROM loan l JOIN account a ON l.account_id = a.account_id JOIN trans t ON a.account_id = t.account WHERE a.date BETWEEN '1993-07-05' AND '1998-12-27' AND t.type = 'debit' AND t.operation = 'loan' GROUP BY l.amount, a.date, t.balance ORDER BY a.date;"]}, {"question_id": 117, "answer_sql": ["SELECT (SUM(loan.amount) * 100) / (SELECT SUM(loan.amount) FROM loan WHERE loan.status = 'A') AS 'Paid Loan Amount Percentage' FROM loan JOIN account ON loan.account_id = account.account_id WHERE loan.status = 'A';", "SELECT (SUM(CASE WHEN status = 'A' THEN amount ELSE 0 END)) / SUM(amount) * 100 as Percentage_of_loan_amount_fully_paid FROM loan JOIN account ON loan.account_id = account.account_id"]}, {"question_id": 118, "answer_sql": ["SELECT ( (SELECT COUNT(*) FROM loan WHERE loan.amount < 100000 AND loan.status = 'C') * 100 ) / ( SELECT COUNT(*) FROM loan WHERE status = 'C' ) AS percentage_running_no_issue;", "SELECT (SUM(loan.amount) * 100) / (SELECT SUM(loan.amount) FROM loan WHERE loan.status = 'C' AND loan.amount < 100000) AS percentage_running_loans FROM loan JOIN account ON loan.account_id = account.account_id WHERE loan.status = 'C' AND loan.amount < 100000;", "SELECT l.account_id, a.frequency, a.date, l.status, l.amount, l.duration, l.payments FROM loan l JOIN account a ON l.account_id = a.account_id JOIN district d ON a.district_id = d.district_id WHERE l.amount < 100000 AND l.status = 'C' GROUP BY l.account_id, a.frequency, a.date, l.status, l.amount, l.duration, l.payments HAVING COUNT(*) = (SELECT COUNT(*) FROM loan WHERE status = 'C')", "SELECT (COUNT(*) * 100) / (SELECT COUNT(*) FROM loan WHERE status = 'C') AS running_no_issue FROM loan JOIN account ON loan.account_id = account.account_id JOIN district ON account.district_id = district.district_id WHERE loan.amount < 100000", "SELECT (COUNT(*) * 100.0) / (SELECT COUNT(*) FROM loan WHERE amount < 100000) AS percentage FROM trans WHERE type = 'loan' AND balance = 'C' AND k_symbol = 'USD';"]}, {"question_id": 119, "answer_sql": ["SELECT account.account_id, district.A2, district.A3 FROM account \nJOIN district ON account.district_id = district.district_id \nWHERE account.date = '1993-01-01' AND district.A2 = 'POPLATEK PO OBRATU'"]}, {"question_id": 120, "answer_sql": ["SELECT account.account_id, COUNT(distinct account.date) as frequency FROM account JOIN district ON account.district_id = district.district_id WHERE district.A2 = 'east Bohemia' AND account.date BETWEEN '1995-01-01' AND '2000-12-31' GROUP BY account.account_id;"]}, {"question_id": 121, "answer_sql": ["SELECT account.account_id, account.date FROM account JOIN district ON account.district_id = district.district_id WHERE district.A2 = 'Prachatice'", "SELECT account_id, date FROM account WHERE district_id = (SELECT district_id FROM district WHERE A2 = 'Practice')"]}, {"question_id": 122, "answer_sql": ["SELECT district.A2 AS District, district.A3 AS Region FROM loan JOIN account ON loan.account_id = account.account_id JOIN district ON account.district_id = district.district_id WHERE loan.loan_id = 4990;", "SELECT DISTINCT district.A3, district.A2 FROM loan JOIN account ON loan.account_id = account.account_id JOIN district ON account.district_id = district.district_id WHERE loan.loan_id = 4990;"]}, {"question_id": 123, "answer_sql": ["SELECT account.account_id, district.A2, district.A3 FROM account JOIN client ON account.district_id = client.district_id JOIN loan ON account.account_id = loan.account_id JOIN district ON client.district_id = district.district_id WHERE loan.amount > 300000 AND district.A2 = 'District Name' AND district.A3 = 'Region Name'", "SELECT district.district_id, district.A2, district.A3 FROM loan JOIN account ON loan.account_id = account.account_id JOIN district ON account.district_id = district.district_id WHERE loan.amount > 300000", "SELECT account.account_id, district.A2, district.A3 FROM loan JOIN account ON loan.account_id = account.account_id JOIN district ON account.district_id = district.district_id WHERE loan.amount > 300000"]}, {"question_id": 124, "answer_sql": ["SELECT loan.loan_id, district.A2, AVG(district.A11) as average_salary FROM loan JOIN district ON loan.account_id = district.district_id WHERE loan.duration = 60 GROUP BY loan.loan_id, district.A2;", "SELECT loan.loan_id, district.A2, AVG(district.A11) as average_salary FROM loan JOIN account ON loan.account_id = account.account_id JOIN district ON account.district_id = district.district_id WHERE loan.duration = 60 GROUP BY loan.loan_id, district.A2;"]}, {"question_id": 125, "answer_sql": ["SELECT d.A2 AS District, d.A13 AS State, (d.A13 - d.A12) / d.A12 * 100 AS Unemployment_Increment FROM district d JOIN loan l ON d.district_id = l.account_id JOIN client c ON d.district_id = c.district_id WHERE l.status = 'D' AND c.gender = 'M' AND c.birth_date BETWEEN '1995-01-01' AND '1996-12-31';", "SELECT DISTINCT A12, A13 FROM loan JOIN client ON loan.account_id = client.client_id JOIN district ON client.district_id = district.district_id WHERE status = 'D' AND date BETWEEN '1995-01-01' AND '1996-12-31';", "SELECT A12, A13 FROM loan JOIN district ON loan.account_id = district.district_id WHERE status = 'D'", "SELECT district.A12 AS 'Unemployment Rate 1996', district.A13 AS 'Unemployment Rate 1995', (district.A13 - district.A12) / district.A12 * 100 AS 'Unemployment Increment', district.A13 AS 'Unemployment Rate 1995' FROM loan JOIN account ON loan.account_id = account.account_id JOIN district ON account.district_id = district.district_id WHERE loan.status = 'D' AND district.A12 IS NOT NULL AND district.A13 IS NOT NULL", "SELECT DISTINCT A12, A13 FROM loan JOIN client ON loan.account_id = client.client_id JOIN district ON client.district_id = district.district_id WHERE status = 'D'"]}, {"question_id": 126, "answer_sql": ["SELECT district.A9 AS District_A9, (SELECT COUNT(*) FROM account WHERE district_id = district.A9 AND date >= '1993-01-01' AND date <= '1993-12-31') / (SELECT COUNT(*) FROM account WHERE district_id = district.A9) * 100 AS Percentage FROM district WHERE district.A2 = 'Decin';", "SELECT account.account_id, account.frequency, account.date, district.A2 FROM account JOIN district ON account.district_id = district.district_id WHERE district.A2 = 'Decin' AND account.date = '1993-01-01';"]}, {"question_id": 127, "answer_sql": ["SELECT account.account_id FROM account JOIN trans ON account.account_id = trans.account_id JOIN client ON account.district_id = client.district_id WHERE account.frequency = 'MONTHLY' AND trans.type = 'POPLATEK MESICNE'", "SELECT account.account_id FROM account JOIN disp ON account.account_id = disp.account_id JOIN client ON disp.client_id = client.client_id WHERE account.frequency = 'POPLATEK MESICNE'", "SELECT account_id FROM account WHERE frequency = 'POPLATEK MESICNE';"]}, {"question_id": 128, "answer_sql": ["SELECT DISTINCT D.district_id, D.A2, COUNT(C.client_id) as female_account_holders FROM district D JOIN client C ON D.district_id = C.district_id WHERE C.gender = 'F' GROUP BY D.district_id ORDER BY female_account_holders DESC LIMIT 10;", "SELECT district.A2, COUNT(client.gender) as female_account_holders FROM district JOIN client ON district.district_id = client.district_id WHERE client.gender = 'F' GROUP BY district.A2 ORDER BY COUNT(client.gender) DESC LIMIT 10;"]}, {"question_id": 129, "answer_sql": ["SELECT district.A2, COUNT(*) as total_withdrawals FROM district JOIN trans ON district.district_id = trans.account_id JOIN disp ON trans.account_id = disp.account_id JOIN client ON disp.client_id = client.client_id JOIN account ON client.district_id = account.district_id WHERE trans.type = 'VYDAJ' AND trans.date LIKE '1996-01%' AND disp.type != 'KARTS' GROUP BY district.A2 ORDER BY total_withdrawals DESC LIMIT 10;", "SELECT DISTINCT A2, COUNT(*) as total_withdrawals FROM trans JOIN district ON trans.account_id = district.district_id WHERE type = 'VYDAJ' AND date LIKE '1996-01%' GROUP BY A2 ORDER BY total_withdrawals DESC LIMIT 10;", "SELECT DISTINCT A2, COUNT(*) as 'Number of Withdrawals' FROM trans JOIN district ON trans.account_id = district.district_id WHERE type = 'VYDAJ' AND date LIKE '1996-01%' GROUP BY A2 ORDER BY 'Number of Withdrawals' DESC LIMIT 10;"]}, {"question_id": 130, "answer_sql": ["SELECT COUNT(*) FROM client LEFT JOIN disp ON client.client_id = disp.client_id LEFT JOIN account ON disp.account_id = account.account_id LEFT JOIN card ON disp.disp_id = card.card_id WHERE client.district_id = (SELECT district_id FROM district WHERE A2 = 'South Bohemia') AND card.card_id IS NULL;"]}, {"question_id": 131, "answer_sql": ["SELECT A3 as District FROM district WHERE A16 = (SELECT MAX(A16) FROM district)", "SELECT DISTINCT district.A3 FROM district JOIN loan ON district.district_id = loan.account_id WHERE loan.status = 'C' ORDER BY loan.amount DESC LIMIT 1;", "SELECT DISTINCT district.A3 FROM district JOIN loan ON district.A14 = loan.account_id WHERE loan.status = 'C' ORDER BY district.A12 DESC LIMIT 1;", "SELECT A3 FROM district WHERE A16 = (SELECT MAX(A16) FROM district WHERE A14 = 'C')"]}, {"question_id": 132, "answer_sql": ["SELECT AVG(loan.amount) as average_loan_amount FROM loan JOIN client ON loan.account_id = client.client_id WHERE client.gender = 'M';", "SELECT AVG(loan.amount) FROM loan JOIN client ON loan.account_id = client.client_id JOIN account ON loan.account_id = account.account_id WHERE client.gender = 'M' AND account.frequency = 'Yearly';"]}, {"question_id": 133, "answer_sql": ["SELECT DISTINCT district.A2 AS District, district.A13 AS Unemployment_Rate FROM district WHERE A13 = (SELECT MAX(A13) FROM district WHERE A13 <> 0)", "SELECT d.A2 AS District, d.A13 AS UnemploymentRate FROM district d WHERE d.A13 = ( SELECT MAX(d1.A13) FROM district d1 WHERE d1.A13 < d.A13 )", "SELECT d.A2 AS District, COUNT(c.client_id) AS NumberOfClients FROM client c JOIN district d ON c.district_id = d.district_id WHERE d.A13 = (SELECT MAX(A13) FROM district) GROUP BY d.A2 ORDER BY NumberOfClients DESC;", "SELECT DISTINCT d.A2, d.A13 FROM district AS d WHERE d.A13 = (SELECT MAX(d1.A13) FROM district AS d1 WHERE d.A2 = d1.A2);"]}, {"question_id": 134, "answer_sql": ["SELECT account_id FROM district JOIN disp ON district.district_id = disp.account_id WHERE district.A16 = (SELECT MAX(A16) FROM district)", "SELECT COUNT(*) FROM account WHERE district_id IN (SELECT district_id FROM district WHERE A16 = (SELECT MAX(A16) FROM district));", "SELECT COUNT(DISTINCT account_id) FROM disp JOIN district ON district.district_id = disp.account_id WHERE district.A16 = (SELECT MAX(A16) FROM district WHERE A2 = 'Branch')", "SELECT A16.A16 FROM district A16 JOIN disp A17 ON A16.district_id = A17.disp_id WHERE A17.type = 'branch' AND A16.A2 = 'largest' AND A16.A3 = '1996' ORDER BY A16.A16 DESC LIMIT 1;"]}, {"question_id": 135, "answer_sql": ["SELECT COUNT(*) FROM account WHERE district_id IN ( SELECT district_id FROM card WHERE type = 'VYBER KARTOU' ) AND account_id IN ( SELECT account_id FROM trans WHERE type = 'VYBER KARTOU' AND operation = 'POPLATEK MESICNE' AND balance < 0 )", "SELECT account.account_id, account.frequency, account.date, account.district_id, district.A2, district.A3, district.A4, district.A5, district.A6, district.A7, district.A8, district.A9, district.A10, district.A11, district.A12, district.A13, district.A14, district.A15, district.A16 FROM account JOIN district ON account.district_id = district.district_id WHERE account.frequency = 'POPLATEK MESICNE' AND account.date > '2022-01-01' AND account.date < '2022-12-31' AND account.district_id = 10000 AND district.A16 < 0;"]}, {"question_id": 136, "answer_sql": ["SELECT COUNT(*) FROM loan WHERE date BETWEEN '1995-01-01' AND '1997-12-31' AND amount >= 250000 AND status = 'APPROVED' AND loan.payments = 'POPLATEK MESICNE';"]}, {"question_id": 137, "answer_sql": ["SELECT COUNT(*) FROM account WHERE account_id IN ( SELECT account_id FROM loan WHERE status = 'C' AND date IN ( SELECT MAX(date) FROM loan WHERE status = 'C' ) AND account_id IN ( SELECT account_id FROM trans WHERE type = 'C' AND account_id IN ( SELECT account_id FROM account WHERE district_id = 1 ) ) );", "SELECT COUNT(*) FROM loan JOIN account ON loan.account_id = account.account_id JOIN client ON account.district_id = client.district_id WHERE loan.status = 'C' AND account.district_id = 1;", "SELECT COUNT(*) FROM account JOIN loan ON account.account_id = loan.account_id WHERE account.district_id = 1 AND loan.status = 'C'"]}, {"question_id": 138, "answer_sql": ["SELECT COUNT(*) FROM client JOIN district ON client.district_id = district.district_id WHERE district.A2 = '1995' AND client.gender = 'M' AND district.A15 = (SELECT MAX(A15) FROM district WHERE A15 < (SELECT MAX(A15) FROM district));"]}, {"question_id": 139, "answer_sql": ["SELECT COUNT(*) FROM card JOIN disp ON card.disp_id = disp.disp_id WHERE card.type = 'gold'", "SELECT COUNT(*) FROM card JOIN disp ON card.disp_id = disp.disp_id WHERE card.type = 'gold' AND disp.type = 'disponent';"]}, {"question_id": 140, "answer_sql": ["SELECT COUNT(*) FROM account JOIN district ON account.district_id = district.district_id WHERE district.A2 = 'Pisek';", "SELECT COUNT(*) FROM district WHERE A2 = 'Pisek';"]}, {"question_id": 141, "answer_sql": ["SELECT DISTINCT district.A2, district.A3, district.A4, district.A5, district.A6, district.A7, district.A8, district.A9, district.A10, district.A11, district.A12, district.A13, district.A14, district.A15, district.A16 FROM district JOIN account ON district.district_id = account.district_id JOIN loan ON account.account_id = loan.account_id WHERE loan.date = '1997-01-01' AND loan.amount > 10000;", "SELECT DISTINCT district.A2, district.A3, district.A4, district.A5, district.A6, district.A7, district.A8, district.A9, district.A10, district.A11, district.A12, district.A13, district.A14, district.A15, district.A16 FROM district JOIN account ON district.district_id = account.district_id JOIN trans ON account.account_id = trans.account_id WHERE trans.amount > 10000 AND trans.date = '1997-01-01'", "SELECT DISTINCT district.A2, district.A3, district.A4, district.A5, district.A6, district.A7, district.A8, district.A9, district.A10, district.A11, district.A12, district.A13, district.A14, district.A15, district.A16 FROM district JOIN trans ON district.district_id = trans.account_id WHERE trans.amount > 10000 AND trans.date > '1997-01-01'", "SELECT DISTINCT district.district_id, district.A2, district.A3, district.A4, district.A5, district.A6, district.A7, district.A8, district.A9, district.A10, district.A11, district.A12, district.A13, district.A14, district.A15, district.A16 FROM district JOIN account ON district.district_id = account.district_id JOIN trans ON account.account_id = trans.account_id WHERE trans.amount > 10000 AND trans.date = '1997-01-01';", "SELECT DISTINCT district.A2, district.A3, district.A4, district.A5, district.A6, district.A7, district.A8, district.A9, district.A10, district.A11, district.A12, district.A13, district.A14, district.A15, district.A16 FROM district JOIN trans ON district.district_id = trans.account_id JOIN account ON trans.account_id = account.account_id WHERE trans.amount > 10000 AND trans.date = '1997-01-01'"]}, {"question_id": 142, "answer_sql": ["SELECT a.account_id, a.frequency, a.date FROM account a JOIN disp d ON a.account_id = d.account_id WHERE d.type = 'SIPO'"]}, {"question_id": 143, "answer_sql": ["SELECT account.account_id, account.district_id, account.frequency, account.date FROM account JOIN disp ON account.account_id = disp.account_id JOIN card ON disp.disp_id = card.disp_id WHERE card.type = 'gold' AND card.type = 'junior'"]}, {"question_id": 144, "answer_sql": ["SELECT AVG(card.disp_id) as average_amount FROM card JOIN disp ON card.disp_id = disp.disp_id JOIN account ON disp.account_id = account.account_id JOIN client ON disp.client_id = client.client_id WHERE date(account.date) = '2021-01-01' AND card.type = 'VYBER KARTOU'"]}, {"question_id": 145, "answer_sql": []}, {"question_id": 146, "answer_sql": ["SELECT client.client_id, client.gender, client.birth_date, district.A2, district.A3, district.A4, district.A5, district.A6, district.A7, district.A8, district.A9, district.A10, district.A11, district.A12, district.A13, district.A14, district.A15, district.A16 FROM client JOIN disp ON client.client_id = disp.client_id JOIN card ON disp.disp_id = card.disp_id JOIN loan ON client.client_id = loan.account_id JOIN account ON loan.account_id = account.account_id JOIN district ON account.district_id = district.district_id WHERE client.gender = 'F'", "SELECT client.client_id, client.gender FROM client JOIN disp ON client.client_id = disp.client_id JOIN card ON disp.disp_id = card.disp_id WHERE client.gender = 'F'", "SELECT client.client_id, client.gender FROM client JOIN disp ON client.client_id = disp.client_id JOIN card ON disp.disp_id = card.disp_id JOIN loan ON client.client_id = loan.account_id WHERE client.gender = 'F';", "SELECT client.client_id, client.gender, card.type, loan.status FROM client JOIN disp ON client.client_id = disp.client_id JOIN card ON disp.disp_id = card.disp_id JOIN loan ON client.client_id = loan.account_id WHERE client.gender = 'F';"]}, {"question_id": 147, "answer_sql": ["SELECT COUNT(*) FROM client JOIN account ON client.client_id = account.account_id JOIN district ON account.district_id = district.district_id WHERE district.A3 = 'south Bohemia' AND client.gender = 'F';", "SELECT COUNT(*) FROM client WHERE gender = 'F' AND district_id IN (SELECT district_id FROM district WHERE A3 = 'south Bohemia');"]}, {"question_id": 148, "answer_sql": ["SELECT loan.amount, account.date, loan.duration, district.A2 FROM loan JOIN account ON loan.account_id = account.account_id JOIN district ON account.district_id = district.district_id WHERE district.A2 = 'Tabor' AND loan.status = 'Eligible';"]}, {"question_id": 149, "answer_sql": ["SELECT DISTINCT A2 FROM district WHERE A11 > 8000 AND A11 <= 9000 AND A15 IS NULL;", "SELECT DISTINCT A2, A11 FROM district WHERE A15 IS NULL AND A16 = 1"]}, {"question_id": 150, "answer_sql": ["SELECT COUNT(*) FROM account JOIN trans ON account.account_id = trans.account_id WHERE trans.bank = 'AB';", "SELECT COUNT(*) FROM account JOIN trans ON account.account_id = trans.account_id JOIN client ON account.district_id = client.district_id JOIN disp ON account.account_id = disp.account_id WHERE client.gender = 'Female' AND disp.type = 'Partner' AND trans.bank = 'AB';"]}, {"question_id": 151, "answer_sql": ["SELECT DISTINCT district.A2 FROM district JOIN account ON district.district_id = account.district_id JOIN trans ON account.account_id = trans.account WHERE trans.type = 'VYDAJ'", "SELECT DISTINCT A2 FROM district WHERE A15 IS NOT NULL AND A15 <> 0;", "SELECT DISTINCT A2 FROM district JOIN trans ON district.district_id = trans.account_id JOIN disp ON trans.account_id = disp.account_id WHERE trans.type = 'VYDAJ' AND disp.type = 'VYDAJ';"]}, {"question_id": 152, "answer_sql": ["SELECT AVG(A15) as average_crimes FROM district WHERE A8 = 1995 AND A11 >= 1997 AND A4 > 4000;"]}, {"question_id": 153, "answer_sql": ["SELECT COUNT(*) FROM card WHERE type = 'classic';", "SELECT COUNT(*) FROM card JOIN loan ON card.disp_id = loan.account_id WHERE card.type = 'classic';", "SELECT COUNT(*) FROM card JOIN loan ON card.card_id = loan.account_id WHERE card.type = 'classic';", "SELECT COUNT(*) FROM card JOIN disp ON card.disp_id = disp.disp_id JOIN client ON disp.client_id = client.client_id WHERE client.gender = 'classic' AND disp.type = 'classic';"]}, {"question_id": 154, "answer_sql": ["SELECT COUNT(*) FROM client JOIN district ON client.district_id = district.district_id WHERE district.A2 = 'Hl.m. Praha' AND client.gender = 'M';"]}, {"question_id": 155, "answer_sql": ["SELECT COUNT(*) / (SELECT COUNT(*) FROM card) * 100 AS percent_gold_before_1998 FROM card JOIN client ON card.disp_id = client.client_id JOIN disp ON card.card_id = disp.disp_id WHERE card.type = 'gold' AND card.issued < '1998-01-01';", "SELECT COUNT(*) \nFROM card \nWHERE type = 'gold' \nAND issued < '1998-01-01';", "SELECT COUNT(*) / (SELECT COUNT(*) FROM card WHERE type = 'gold' AND issued < '1998') * 100 FROM card;", "SELECT (COUNT(type = 'gold' AND issued < '1998') / COUNT(*)) * 100 AS percent_gold_cards_before_1998 FROM card JOIN client ON card.disp_id = client.client_id JOIN account ON client.district_id = account.district_id"]}, {"question_id": 156, "answer_sql": ["SELECT account.district_id, district.A2, district.A3, district.A4, district.A5, district.A6, district.A7, district.A8, district.A9, district.A10, district.A11, district.A12, district.A13, district.A14, district.A15, district.A16 FROM account JOIN loan ON account.account_id = loan.account_id JOIN district ON account.district_id = district.district_id WHERE loan.amount = (SELECT MAX(loan.amount) FROM loan)", "SELECT client.client_id, client.gender, client.birth_date, client.district_id FROM client JOIN account ON client.district_id = account.district_id JOIN loan ON account.account_id = loan.account_id WHERE loan.amount = ( SELECT MAX(loan.amount) FROM loan )", "SELECT client.gender, client.birth_date FROM client JOIN account ON client.district_id = account.district_id JOIN loan ON account.account_id = loan.account_id WHERE loan.amount = (SELECT MAX(loan.amount) FROM loan);", "SELECT client.gender, client.birth_date, client.district_id FROM client JOIN account ON client.district_id = account.district_id JOIN loan ON account.account_id = loan.account_id WHERE loan.amount = ( SELECT MAX(amount) FROM loan JOIN account ON loan.account_id = account.account_id JOIN client ON account.district_id = client.district_id );"]}, {"question_id": 157, "answer_sql": ["SELECT COUNT(*) FROM trans JOIN district ON trans.account_id = district.district_id WHERE district.district_id = 532 AND district.A15 = 1995;", "SELECT A15 FROM district WHERE A16 = 532 AND A8 = 1995;"]}, {"question_id": 158, "answer_sql": ["SELECT account.district_id FROM account JOIN `order` ON account.account_id = `order`.account_id WHERE `order`.order_id = 33333;"]}, {"question_id": 159, "answer_sql": ["SELECT t.trans_id, t.amount, t.balance FROM trans AS t JOIN disp AS d ON t.account_id = d.account_id JOIN client AS c ON d.client_id = c.client_id WHERE c.client_id = 3356 AND t.type = 'VYBER' AND t.operation = 'VYBER';"]}, {"question_id": 160, "answer_sql": ["SELECT COUNT(*) FROM account JOIN loan ON account.account_id = loan.account_id WHERE frequency = 'POPLATEK TYDNE' AND loan.amount < 200000;", "SELECT COUNT(*) FROM account JOIN client ON account.district_id = client.district_id JOIN loan ON account.account_id = loan.account_id WHERE account.frequency = 'POPLATEK TYDNE' AND loan.amount < 200000;"]}, {"question_id": 161, "answer_sql": ["SELECT type FROM card WHERE disp_id IN ( SELECT disp_id FROM disp WHERE client_id = 13539 );", "SELECT type FROM card WHERE disp_id = 13539;", "SELECT type FROM card WHERE disp_id = (SELECT disp_id FROM client WHERE client_id = 13539);"]}, {"question_id": 162, "answer_sql": ["SELECT district.A3 FROM client JOIN district ON client.district_id = district.district_id WHERE client.client_id = 3541;", "SELECT A2 FROM district WHERE district_id = 3541;"]}, {"question_id": 163, "answer_sql": ["SELECT DISTINCT district.A8, district.A12 FROM district JOIN account ON district.district_id = account.district_id JOIN loan ON account.account_id = loan.account_id WHERE loan.status = 'A' ORDER BY district.A8 DESC LIMIT 1;", "SELECT D.A2, COUNT(L.account_id) as total_accounts FROM district D JOIN loan L ON D.district_id = L.account_id WHERE L.status = 'A' GROUP BY D.A2 ORDER BY total_accounts DESC LIMIT 1;", "SELECT A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16 FROM district WHERE A15 IS NULL ORDER BY A8 DESC;", "SELECT DISTINCT A8, A2 FROM district JOIN loan ON district.district_id = loan.account_id WHERE loan.status = 'A' GROUP BY A8, A2 ORDER BY COUNT(*) DESC LIMIT 1;", "SELECT A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16 FROM district WHERE A15 IS NULL AND A14 = (SELECT COUNT(*) FROM loan WHERE status = 'A') ORDER BY A14 DESC;"]}, {"question_id": 164, "answer_sql": ["SELECT `order`.bank_to FROM `order` JOIN account ON `order`.account_id = account.account_id JOIN district ON account.district_id = district.district_id WHERE `order`.order_id = 32423;", "SELECT bank_to, amount FROM `order` WHERE order_id = 32423;", "SELECT client.gender, client.birth_date FROM client JOIN `order` ON client.client_id = `order`.account_id WHERE `order`.order_id = 32423;", "SELECT bank_to, account_to, amount, k_symbol FROM `order` WHERE order_id = 32423;", "SELECT client.client_id, client.gender, client.birth_date, district.A9, district.A8, district.A10, district.A16, district.A11, district.A7, district.A2 FROM client JOIN disp ON client.client_id = disp.client_id JOIN district ON client.district_id = district.district_id WHERE disp.disp_id = 32423;"]}, {"question_id": 165, "answer_sql": ["SELECT trans.trans_id, trans.type, trans.operation, trans.amount, trans.balance, trans.date, trans.k_symbol, trans.bank, trans.account, account.frequency, account.date, account.district_id FROM trans JOIN account ON trans.account = account.account_id WHERE account.district_id = 5;"]}, {"question_id": 166, "answer_sql": ["SELECT COUNT(*) FROM account WHERE district_id = (SELECT district_id FROM district WHERE A2 = 'Jesenik');"]}, {"question_id": 167, "answer_sql": ["SELECT client.client_id FROM client JOIN card ON client.client_id = card.disp_id JOIN disp ON card.disp_id = disp.disp_id JOIN account ON disp.account_id = account.account_id WHERE card.issued > '1996-01-01' AND account.date >= '1997-01-01' GROUP BY client.client_id;", "SELECT client.client_id FROM client JOIN disp ON client.client_id = disp.client_id JOIN card ON disp.disp_id = card.disp_id WHERE card.issued > '1996-01-01' GROUP BY client.client_id;", "SELECT client.client_id FROM client JOIN disp ON client.client_id = disp.client_id JOIN card ON disp.disp_id = card.disp_id WHERE card.issued >= '1997-01-01' GROUP BY client.client_id;", "SELECT client.client_id FROM client JOIN disp ON client.client_id = disp.client_id JOIN card ON disp.disp_id = card.disp_id WHERE card.issued >= '1996-01-01' GROUP BY client.client_id;", "SELECT client.client_id FROM client JOIN card ON client.client_id = card.disp_id JOIN disp ON card.disp_id = disp.disp_id JOIN account ON disp.account_id = account.account_id WHERE card.issued > '1996-01-01' AND account.date > '1996-01-01' GROUP BY client.client_id;"]}, {"question_id": 168, "answer_sql": ["SELECT COUNT(*) as 'Number of Women' FROM client JOIN account ON client.client_id = account.account_id JOIN district ON account.district_id = district.district_id WHERE district.A11 > 10000 AND client.gender = 'F';", "SELECT COUNT(*) / (SELECT COUNT(*) FROM client WHERE gender = 'F') * 100 AS percentage FROM client JOIN account ON client.client_id = account.account_id WHERE account.district_id IN (SELECT district_id FROM district WHERE A11 > 10000);", "SELECT (SELECT COUNT(*) FROM client WHERE gender = 'F') * 1.0 / (SELECT COUNT(*) FROM client) * 100 AS percentage FROM account WHERE account.district_id IN (SELECT district_id FROM district WHERE A11 > 10000);", "SELECT COUNT(*) FROM client JOIN district ON client.district_id = district.district_id WHERE district.A11 > 10000 AND client.gender = 'F';"]}, {"question_id": 169, "answer_sql": []}, {"question_id": 170, "answer_sql": ["SELECT COUNT(*) FROM card WHERE type = 'VYBER KARTOU' AND issued > '1995-01-01';", "SELECT COUNT(*) FROM disp JOIN client ON disp.client_id = client.client_id JOIN card ON client.client_id = card.disp_id JOIN account ON card.card_id = account.account_id WHERE disp.type = 'VYBER KARTOU' AND client.birth_date < '1995-01-01' GROUP BY account.account_id;"]}, {"question_id": 171, "answer_sql": ["SELECT SUM(A16) AS total_crimes_north, SUM(A16) AS total_crimes_east FROM district WHERE A2 = 'North Bohemia' AND A3 = '1996' UNION SELECT SUM(A16) AS total_crimes_north, SUM(A16) AS total_crimes_east FROM district WHERE A2 = 'East Bohemia' AND A3 = '1996';", "SELECT district.A2 AS 'East Bohemia', district.A3 AS 'North Bohemia', district.A16 AS 'Crimes in 1996' FROM district WHERE district.A3 = 'North Bohemia' AND district.A11 = 1996 GROUP BY district.A2, district.A3, district.A16 HAVING AVG(district.A16) - SUM(district.A16) = 1000;"]}, {"question_id": 172, "answer_sql": ["SELECT COUNT(*) FROM disp JOIN account ON disp.account_id = account.account_id JOIN client ON disp.client_id = client.client_id WHERE account.account_id IN (1, 10)", "SELECT COUNT(*) FROM disp JOIN account ON disp.account_id = account.account_id JOIN client ON account.district_id = client.district_id WHERE account.account_id = 1 AND client.client_id = 10;"]}, {"question_id": 173, "answer_sql": ["SELECT account.frequency, card.type, card.disp_id FROM account JOIN card ON account.account_id = card.disp_id WHERE account.account_id = 3 AND account.frequency = 'Request' AND card.type = 'Account Statement'", "SELECT frequency FROM account WHERE account_id = 3;"]}, {"question_id": 174, "answer_sql": ["SELECT birth_date FROM client WHERE client_id = 130;", "SELECT client.birth_date FROM client JOIN account ON client.district_id = account.district_id WHERE client.client_id = 130;", "SELECT client.birth_date FROM client JOIN account ON client.district_id = account.district_id WHERE account.account_id = 130;"]}, {"question_id": 175, "answer_sql": ["SELECT COUNT(*) FROM disp JOIN account ON disp.account_id = account.account_id JOIN trans ON account.account_id = trans.account_id WHERE trans.type = 'POPLATEK PO OBRATU'"]}, {"question_id": 176, "answer_sql": ["SELECT loan.amount, loan.status FROM loan JOIN account ON loan.account_id = account.account_id JOIN client ON account.account_id = client.client_id WHERE client.client_id = 992;"]}, {"question_id": 177, "answer_sql": ["SELECT c.gender, SUM(t.amount) as total_amount FROM client c JOIN trans t ON c.client_id = t.account WHERE c.client_id = 4 AND t.trans_id = 851", "SELECT t.type, t.operation, t.amount, t.balance, t.k_symbol, t.bank, t.account, c.gender FROM trans t JOIN client c ON t.account_id = c.client_id WHERE c.client_id = 4 AND t.trans_id = 851;"]}, {"question_id": 178, "answer_sql": ["SELECT type FROM card WHERE disp_id = (SELECT disp_id FROM client WHERE client_id = 9);", "SELECT card.type FROM card JOIN disp ON card.disp_id = disp.disp_id JOIN client ON disp.client_id = client.client_id WHERE client.client_id = 9;"]}, {"question_id": 179, "answer_sql": []}, {"question_id": 180, "answer_sql": ["SELECT client.client_id, client.gender, client.birth_date, account.date FROM client JOIN account ON client.district_id = account.district_id WHERE client.birth_date BETWEEN '1983-01-01' AND '1987-12-31' AND account.frequency = 'East Bohemia'"]}, {"question_id": 181, "answer_sql": ["SELECT client.client_id, client.gender, loan.amount FROM client JOIN loan ON client.client_id = loan.account_id WHERE client.gender = 'F' ORDER BY loan.amount DESC LIMIT 3;", "SELECT client.client_id, client.gender, loan.amount, loan.date FROM client JOIN loan ON client.client_id = loan.account_id WHERE client.gender = 'F' ORDER BY loan.amount DESC LIMIT 3;", "SELECT client.client_id, loan.loan_id FROM client JOIN loan ON client.client_id = loan.account_id WHERE client.gender = 'F' ORDER BY loan.amount DESC LIMIT 3;"]}, {"question_id": 182, "answer_sql": ["SELECT COUNT(*) FROM client JOIN account ON client.district_id = account.district_id JOIN trans ON account.account_id = trans.account_id WHERE client.gender = 'M' AND client.birth_date BETWEEN '1974-01-01' AND '1976-12-31' AND trans.type = 'SIPO' AND trans.amount > 4000;"]}, {"question_id": 183, "answer_sql": ["SELECT COUNT(*) FROM account WHERE district_id = (SELECT district_id FROM district WHERE A2 = 'Beroun') AND date > '1996-12-31';", "SELECT COUNT(*) FROM account WHERE date > '1996-12-31' AND district_id = 1;"]}, {"question_id": 184, "answer_sql": ["SELECT COUNT(*) FROM client JOIN card ON client.client_id = card.disp_id JOIN disp ON card.disp_id = disp.disp_id JOIN account ON disp.account_id = account.account_id JOIN district ON account.district_id = district.district_id WHERE client.gender = 'F' AND card.type = 'Junior' AND district.A2 = 'Female customers';", "SELECT COUNT(*) FROM client JOIN disp ON client.client_id = disp.client_id JOIN card ON disp.disp_id = card.disp_id WHERE client.gender = 'F' AND card.type = 'junior';"]}, {"question_id": 185, "answer_sql": ["SELECT COUNT(client.client_id) * 1.0 / (SELECT COUNT(*) FROM account WHERE district_id = (SELECT district_id FROM district WHERE A3 = 'Prague')) * 100 AS percentage_female_in_prague FROM client WHERE client.gender = 'F' AND client.district_id = (SELECT district_id FROM district WHERE A3 = 'Prague');", "SELECT (COUNT(client.client_id) * 1.0 * (COUNT(client.client_id) - COUNT(DISTINCT CASE WHEN client.gender = 'F' THEN client.client_id END))/COUNT(client.client_id)) * 100 AS 'Female_Proportion' FROM client JOIN account ON client.district_id = account.district_id WHERE account.frequency = 'Prague' AND client.gender = 'F';", "SELECT COUNT(client.client_id) / (SELECT COUNT(account.account_id) FROM account WHERE account.district_id = (SELECT district.district_id FROM district WHERE district.A3 = 'Prague')) * 100 as percentage FROM client WHERE client.district_id = (SELECT district.district_id FROM district WHERE district.A3 = 'Prague') AND client.gender = 'F';", "SELECT COUNT(client.client_id) * 1.0 / (SELECT COUNT(*) FROM account WHERE district_id = 1) * 1.0 as female_proportion FROM client WHERE client.gender = 'F' AND client.district_id = 1;"]}, {"question_id": 186, "answer_sql": ["SELECT (COUNT(client.client_id) * 100.0) / (SELECT COUNT(*) FROM client WHERE gender = 'M') as percentage_of_male_clients_requesting_weekly_statements FROM client WHERE client.gender = 'M' AND client.birth_date LIKE '2022-01-%' AND client.district_id IN (SELECT district_id FROM district WHERE A16 = 'POPLATEK TYDNE')", "SELECT COUNT(client_id) * 100 / (SELECT COUNT(*) FROM client WHERE gender = 'M' AND `order`.k_symbol = 'POPLATEK TYDNE' ) AS percentage FROM client JOIN `order` ON client.client_id = `order`.account_id WHERE client.gender = 'M' AND `order`.k_symbol = 'POPLATEK TYDNE'"]}, {"question_id": 187, "answer_sql": ["SELECT COUNT(*) FROM client JOIN disp ON client.client_id = disp.client_id WHERE disp.type = 'POPLATEK TYDNE' AND client.gender = 'User';"]}, {"question_id": 188, "answer_sql": ["SELECT account.account_id, account.date, account.frequency, loan.amount FROM account JOIN loan ON account.account_id = loan.account_id WHERE loan.duration > 24 AND account.date < '1997-01-01' ORDER BY loan.amount ASC LIMIT 1;", "SELECT account.account_id, account.frequency, account.date, loan.amount FROM account JOIN loan ON account.account_id = loan.account_id WHERE loan.date < '1997-01-01' AND loan.status = 'approved' ORDER BY loan.amount ASC LIMIT 1;"]}, {"question_id": 189, "answer_sql": []}, {"question_id": 190, "answer_sql": ["SELECT COUNT(*) FROM client JOIN district ON client.district_id = district.district_id WHERE district.A3 = 'East Bohemia' AND client.birth_date BETWEEN '1920-01-01' AND '1920-12-31';"]}, {"question_id": 191, "answer_sql": ["SELECT COUNT(*) FROM loan JOIN account ON loan.account_id = account.account_id WHERE account.frequency = 'POPLATEK TYDNE' AND loan.duration = 24;"]}, {"question_id": 192, "answer_sql": ["SELECT AVG(loan.amount) FROM loan JOIN trans ON loan.account_id = trans.account_id JOIN `order` ON loan.account_id = `order`.account_id WHERE trans.type = 'POPLATEK PO OBRATU' AND loan.status = 'C' AND `order`.k_symbol = 'POPLATEK PO OBRATU' AND trans.balance > 0;", "SELECT AVG(loan.amount) FROM loan JOIN account ON loan.account_id = account.account_id WHERE loan.status = 'C' AND account.frequency = 'POPLATEK PO OBRATU'"]}, {"question_id": 193, "answer_sql": ["SELECT client.client_id, client.district_id FROM client JOIN disp ON client.client_id = disp.client_id JOIN account ON disp.account_id = account.account_id WHERE disp.type = 'permanent' OR disp.type = 'loan' GROUP BY client.client_id, client.district_id;"]}, {"question_id": 194, "answer_sql": ["SELECT client.client_id, client.birth_date FROM client JOIN card ON client.client_id = card.disp_id JOIN loan ON client.client_id = loan.account_id WHERE loan.status = 'gold'"]}, {"question_id": 195, "answer_sql": ["SELECT bond_type, COUNT(*) as frequency FROM bond GROUP BY bond_type ORDER BY frequency DESC LIMIT 1;"]}, {"question_id": 196, "answer_sql": ["SELECT COUNT(*) FROM atom JOIN connected ON atom.atom_id = connected.atom_id2 JOIN bond ON connected.bond_id = bond.bond_id WHERE atom.element = 'cl' AND atom.molecule_id NOT IN (SELECT molecule_id FROM molecule WHERE label = '-');", "SELECT COUNT(*) FROM atom JOIN connected ON atom.atom_id = connected.atom_id2 JOIN bond ON connected.bond_id = bond.bond_id WHERE atom.element = 'cl' AND atom.molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '-');", "SELECT COUNT(*) FROM atom JOIN connected ON atom.atom_id = connected.atom_id2 JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '-';"]}, {"question_id": 197, "answer_sql": ["SELECT AVG(atom.element = 'o') as avg_oxygen_atoms FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '-';", "SELECT AVG(atom.element = 'o') as avg_oxygen_atoms FROM connected JOIN atom ON connected.atom_id = atom.atom_id WHERE connected.bond_id IS NULL;"]}, {"question_id": 198, "answer_sql": ["SELECT AVG(bond_type = '-') AS average_carcinogenic_molecules FROM (SELECT atom.atom_id, atom.molecule_id, atom.element, atom.atom_id, bond.bond_type, molecule.label FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.label = '+' AND bond.bond_type = '-') AS carcinogenic_molecules;", "SELECT AVG(carcinogenic_molecules) FROM (SELECT COUNT(*) as carcinogenic_molecules FROM atom WHERE element = 'C' AND atom_id IN (SELECT atom_id FROM connected WHERE bond_id IN (SELECT bond_id FROM bond WHERE bond_type = '-')));", "SELECT AVG(bond_type = '-') as average_carcinogenic_molecules FROM atom JOIN bond ON atom.atom_id = bond.molecule_id JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.label = '+';"]}, {"question_id": 199, "answer_sql": ["SELECT COUNT(*) FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id JOIN connected ON (atom.atom_id = connected.atom_id OR atom.atom_id = connected.atom_id2) WHERE molecule.label = '-';", "SELECT COUNT(*) FROM atom JOIN connected ON atom.atom_id = connected.atom_id2 JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '- ' AND atom.element = 'na';", "SELECT COUNT(*) FROM atom WHERE element = 'na' AND molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '-');"]}, {"question_id": 200, "answer_sql": ["SELECT DISTINCT atom.molecule_id, molecule.label FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '#' AND molecule.label = '+'", "SELECT m.molecule_id, m.label FROM molecule AS m JOIN bond AS b ON m.molecule_id = b.molecule_id WHERE b.bond_type = '#' AND m.label = '+'", "SELECT DISTINCT m.molecule_id, m.label FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id JOIN atom a ON b.molecule_id = a.molecule_id WHERE b.bond_type = '#' AND a.element = 'C';"]}, {"question_id": 201, "answer_sql": ["SELECT (SUM(atom.element = 'c') / COUNT(*)) * 100 AS percentage_carbon FROM connected JOIN atom ON connected.atom_id = atom.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = 'double-bond molecules';"]}, {"question_id": 202, "answer_sql": ["SELECT COUNT(*) FROM bond WHERE bond_type = '#';", "SELECT COUNT(*) FROM bond JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.bond_type = '#';", "SELECT COUNT(*) FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON atom.atom_id = connected.atom_id WHERE bond.bond_type = '#' AND atom.molecule_id IN (SELECT molecule_id FROM molecule WHERE label = 'triple');", "SELECT COUNT(*) FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON bond.molecule_id = atom.molecule_id WHERE bond.bond_type = '#';"]}, {"question_id": 203, "answer_sql": ["SELECT COUNT(*) FROM atom WHERE element != 'br';"]}, {"question_id": 204, "answer_sql": ["SELECT COUNT(*) FROM molecule JOIN atom ON atom.molecule_id = molecule.molecule_id JOIN connected ON connected.atom_id = atom.atom_id WHERE molecule.molecule_id BETWEEN 'TR000' AND 'TR099' AND molecule.label = '+' LIMIT 100;", "SELECT COUNT(*) FROM `molecule` WHERE `molecule_id` BETWEEN 'TR000' AND 'TR099' AND `label` = '+'", "SELECT COUNT(*) FROM ( SELECT c.atom_id, m.molecule_id, m.label FROM connected c JOIN atom a ON c.atom_id = a.atom_id JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.molecule_id BETWEEN 'TR000' AND 'TR099' AND m.label = '+' ORDER BY m.molecule_id LIMIT 100 ) t", "SELECT m.molecule_id, m.label FROM molecule m JOIN connected c ON m.molecule_id = c.atom_id JOIN atom a ON c.atom_id = a.atom_id WHERE a.element = 'C' LIMIT 100", "SELECT COUNT(*) FROM molecule WHERE label = '+' LIMIT 100;"]}, {"question_id": 205, "answer_sql": ["SELECT atom.molecule_id FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON bond.bond_id = connected.bond_id WHERE atom.element = 'si';", "SELECT atom.molecule_id FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'si';"]}, {"question_id": 206, "answer_sql": ["SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON bond.bond_id = connected.bond_id WHERE bond.bond_id = 'TR004_8_9';", "SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = 'TR004_8_9'"]}, {"question_id": 207, "answer_sql": ["SELECT element FROM atom WHERE atom_id IN (SELECT atom_id FROM connected WHERE bond_id IN (SELECT bond_id FROM bond WHERE bond_type = ' = '));"]}, {"question_id": 208, "answer_sql": ["SELECT m.label FROM ( SELECT a.molecule_id, COUNT(a.atom_id) as hydrogen_count FROM atom as a WHERE a.element = 'h' GROUP BY a.molecule_id ) as h JOIN molecule as m ON h.molecule_id = m.molecule_id ORDER BY h.hydrogen_count DESC LIMIT 1;"]}, {"question_id": 209, "answer_sql": ["SELECT bond.bond_type FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE atom.element = 'te';", "SELECT bond.bond_type FROM bond JOIN atom ON bond.molecule_id = atom.molecule_id WHERE atom.element = 'te';", "SELECT bond_type FROM bond WHERE molecule_id = 'te';"]}, {"question_id": 210, "answer_sql": []}, {"question_id": 211, "answer_sql": ["SELECT atom.atom_id, atom.element, molecule.label FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.label != '-' AND atom.element != 'O' GROUP BY atom.atom_id, atom.element, molecule.label ORDER BY atom.atom_id;"]}, {"question_id": 212, "answer_sql": ["SELECT element FROM atom WHERE molecule_id IN ( SELECT molecule_id FROM molecule WHERE label = '-' ) GROUP BY element ORDER BY COUNT(*) ASC LIMIT 1;", "SELECT element FROM atom GROUP BY element ORDER BY COUNT(*) ASC LIMIT 1;", "SELECT element FROM ( SELECT element, COUNT(*) as count FROM atom WHERE molecule_id IN ( SELECT molecule_id FROM molecule WHERE label != '-' ) GROUP BY element ) as t ORDER BY count ASC LIMIT 1;"]}, {"question_id": 213, "answer_sql": ["SELECT bond.bond_type FROM connected JOIN atom ON connected.atom_id = atom.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE atom.atom_id = 'TR004_8' AND connected.atom_id2 = 'TR004_20';"]}, {"question_id": 214, "answer_sql": ["SELECT molecule.label FROM molecule JOIN atom ON atom.molecule_id = molecule.molecule_id JOIN connected ON connected.atom_id = atom.atom_id WHERE atom.element <> 'sn' AND molecule.label = '+' GROUP BY molecule.label;", "SELECT molecule.label FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON connected.atom_id = molecule.molecule_id WHERE atom.element <> 'sn' AND connected.bond_id IS NULL"]}, {"question_id": 215, "answer_sql": ["SELECT COUNT(*) FROM atom a JOIN connected c ON a.atom_id = c.atom_id2 JOIN bond b ON c.bond_id = b.bond_id WHERE a.element = 'i' AND b.bond_type = '-';", "SELECT COUNT(*) FROM atom JOIN connected ON atom.atom_id = connected.atom_id2 JOIN bond ON connected.bond_id = bond.bond_id JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE atom.element = 'i' AND bond.bond_type = '-' AND molecule.label = 'single' AND atom.element = 's';"]}, {"question_id": 216, "answer_sql": ["SELECT atom.atom_id, atom.element, atom.molecule_id FROM atom JOIN connected ON atom.atom_id = connected.atom_id2 JOIN bond ON bond.bond_id = connected.bond_id WHERE bond.bond_type = '#';", "SELECT a.atom_id, a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = '#';", "SELECT a.atom_id, a.element, b.bond_type FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = '#';"]}, {"question_id": 217, "answer_sql": ["SELECT connected.atom_id2 FROM connected JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.molecule_id = 'TR181';", "SELECT a.atom_id, a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.molecule_id = 'TR181';", "SELECT a.atom_id, a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id WHERE c.atom_id2 IN ( SELECT b.atom_id FROM atom b JOIN connected d ON b.atom_id = d.atom_id2 WHERE d.atom_id IN ( SELECT c.atom_id2 FROM connected c WHERE c.atom_id = 'TR181' ) )", "SELECT a.atom_id, a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id WHERE c.atom_id2 IN ( SELECT a.atom_id FROM atom a JOIN connected c ON a.atom_id = c.atom_id2 WHERE a.molecule_id = 'TR181' )"]}, {"question_id": 218, "answer_sql": []}, {"question_id": 219, "answer_sql": []}, {"question_id": 220, "answer_sql": ["SELECT element FROM connected JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.molecule_id = 'TR000' GROUP BY element ORDER BY element ASC LIMIT 3;", "SELECT atom.element, COUNT(*) as frequency FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE atom.molecule_id = 'TR000' GROUP BY atom.element ORDER BY frequency DESC LIMIT 3;", "SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR000' ORDER BY atom.element ASC LIMIT 3;", "SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id WHERE connected.atom_id2 = 'TR000' GROUP BY atom.element ORDER BY atom.element LIMIT 3;"]}, {"question_id": 221, "answer_sql": ["SELECT atom.atom_id, atom.element, connected.atom_id2 FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR001_2_6' AND atom.molecule_id = 'TR001';", "SELECT atom.atom_id, atom.element, connected.atom_id2 FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = 'TR001_2_6' AND atom.molecule_id = 'TR001';", "SELECT a.atom_id, a.element, b.bond_type FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_id = 'TR001_2_6' AND a.molecule_id = 'TR001';", "SELECT atom.atom_id, atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR001_2_6' AND atom.molecule_id = 'TR001';"]}, {"question_id": 222, "answer_sql": ["SELECT SUM(label = '+') - SUM(label = '-') as difference FROM connected JOIN atom ON connected.atom_id = atom.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id;", "SELECT SUM(label = '+') - SUM(label = '-') as difference FROM molecule;"]}, {"question_id": 223, "answer_sql": ["SELECT atom_id FROM connected WHERE bond_id = 'TR_000_2_5';"]}, {"question_id": 224, "answer_sql": ["SELECT bond_id FROM connected WHERE atom_id2 = 'TR000_2';"]}, {"question_id": 225, "answer_sql": ["SELECT m.molecule_id, m.label FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = ' = ' ORDER BY m.label LIMIT 5;"]}, {"question_id": 226, "answer_sql": ["SELECT (SUM(bond_type = ' = ')) / COUNT(bond_id) * 100 as percent FROM bond WHERE molecule_id = 'TR008';"]}, {"question_id": 227, "answer_sql": []}, {"question_id": 228, "answer_sql": ["SELECT (SUM(atom.element = 'h') * 100.0) / COUNT(atom.atom_id) AS percent FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR206';", "SELECT (SUM(atom.element = 'h') * 100.0) / COUNT(atom.atom_id) AS percent FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON molecule.molecule_id = connected.atom_id2 WHERE molecule.molecule_id = 'TR206';"]}, {"question_id": 229, "answer_sql": ["SELECT bond_type FROM bond WHERE molecule_id = 'TR000';", "SELECT b.bond_type FROM bond b JOIN connected c ON b.bond_id = c.bond_id WHERE c.atom_id IN (SELECT atom_id FROM atom WHERE molecule_id = 'TR000') GROUP BY b.bond_type;", "SELECT b.bond_type FROM bond b JOIN connected c ON b.bond_id = c.bond_id WHERE c.atom_id IN (SELECT atom_id FROM atom WHERE molecule_id = 'TR000')", "SELECT bond_type FROM bond JOIN connected ON bond.bond_id = connected.bond_id WHERE connected.atom_id = 'TR000'"]}, {"question_id": 230, "answer_sql": ["SELECT atom.element, molecule.label FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON molecule.molecule_id = connected.atom_id2 WHERE molecule.label = '+' AND atom.element = 'cl'", "SELECT atom.element, molecule.label FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR060'", "SELECT atom.element, connected.atom_id, connected.atom_id2 FROM atom JOIN connected ON atom.atom_id = connected.atom_id WHERE atom.molecule_id = 'TR060' AND atom.element = 'cl';"]}, {"question_id": 231, "answer_sql": ["SELECT bond.bond_type, molecule.label, CASE WHEN COUNT(*) OVER (PARTITION BY bond.bond_type) > (SELECT COUNT(*) FROM bond WHERE bond.bond_type = 'MAX(bond.bond_type)') THEN 'Yes' ELSE 'No' END AS is_carcinogenic FROM bond JOIN atom ON bond.molecule_id = atom.molecule_id JOIN molecule ON atom.molecule_id = molecule.molecule_id JOIN connected ON (atom.atom_id = connected.atom_id OR atom.atom_id = connected.atom_id2) WHERE molecule.molecule_id = 'TR018' GROUP BY bond.bond_type, molecule.label ORDER BY COUNT(*) DESC LIMIT 1;"]}, {"question_id": 232, "answer_sql": ["SELECT m.molecule_id, m.label FROM molecule m WHERE m.molecule_id NOT IN ( SELECT c.atom_id2 FROM connected c WHERE c.bond_id IN ( SELECT b.bond_id FROM bond b WHERE b.bond_type = '-' ) GROUP BY c.atom_id2 HAVING COUNT(DISTINCT c.atom_id) = 1 ) ORDER BY m.label ASC LIMIT 3;", "SELECT m.molecule_id, m.label, a.element FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id JOIN connected c ON a.atom_id = c.atom_id WHERE c.bond_id IS NOT NULL AND a.element <> 'C' GROUP BY m.molecule_id, m.label, a.element ORDER BY m.label ASC LIMIT 3;", "SELECT DISTINCT m.molecule_id, m.label FROM molecule m JOIN atom a1 ON a1.molecule_id = m.molecule_id JOIN connected c ON c.atom_id = a1.atom_id JOIN atom a2 ON a2.atom_id = c.atom_id2 JOIN bond b ON b.molecule_id = m.molecule_id WHERE a1.element <> 'c' AND a2.element <> 'c' AND b.bond_type = '-' GROUP BY m.molecule_id, m.label ORDER BY m.label ASC LIMIT 3;", "SELECT DISTINCT m.molecule_id, m.label FROM molecule m JOIN atom a1 ON a1.molecule_id = m.molecule_id JOIN connected c ON c.atom_id = a1.atom_id JOIN atom a2 ON a2.atom_id = c.atom_id2 JOIN bond b ON b.molecule_id = m.molecule_id WHERE b.bond_type = '-' GROUP BY m.molecule_id, m.label HAVING COUNT(DISTINCT b.bond_id) = 1 ORDER BY m.label ASC LIMIT 3;", "SELECT DISTINCT molecule.molecule_id, molecule.label FROM molecule JOIN atom ON molecule.molecule_id = atom.molecule_id JOIN bond ON atom.atom_id = bond.molecule_id JOIN connected ON connected.atom_id = atom.atom_id WHERE bond.bond_type = '-' AND atom.element <> 'cancer' GROUP BY molecule.molecule_id, molecule.label HAVING COUNT(DISTINCT connected.atom_id2) = 1 ORDER BY molecule.label ASC LIMIT 3;"]}, {"question_id": 233, "answer_sql": ["SELECT bond.bond_id, bond.bond_type FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON atom.atom_id = connected.atom_id2 WHERE atom.molecule_id = 'TR006' ORDER BY bond.bond_id ASC LIMIT 2;", "SELECT b.bond_type FROM bond b JOIN connected c ON b.bond_id = c.bond_id WHERE c.atom_id IN ( SELECT a.atom_id FROM atom a JOIN connected conn ON a.atom_id = conn.atom_id WHERE conn.atom_id2 = 'TR006' ) ORDER BY b.bond_type ASC LIMIT 2;", "SELECT b.bond_type FROM bond b JOIN connected c ON b.bond_id = c.bond_id WHERE c.atom_id IN ( SELECT a.atom_id FROM atom a JOIN connected conn ON a.atom_id = conn.atom_id WHERE a.molecule_id = 'TR006' ) ORDER BY b.bond_type ASC LIMIT 2;"]}, {"question_id": 234, "answer_sql": ["SELECT COUNT(*) FROM connected INNER JOIN atom ON connected.atom_id = atom.atom_id INNER JOIN bond ON atom.atom_id = bond.bond_id WHERE atom.molecule_id = 'TR009' AND connected.atom_id2 = 'TR009_12';", "SELECT COUNT(*) FROM bond JOIN connected ON bond.bond_id = connected.bond_id WHERE connected.atom_id = 'TR009_12' OR connected.atom_id2 = 'TR009_12';", "SELECT COUNT(*) FROM connected JOIN bond ON connected.bond_id = bond.bond_id JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.molecule_id = 'TR009' AND connected.atom_id2 = 'TR009_12';"]}, {"question_id": 235, "answer_sql": ["SELECT COUNT(*) FROM atom JOIN connected ON atom.atom_id = connected.atom_id2 JOIN bond ON connected.bond_id = bond.bond_id JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE atom.element = 'br' AND bond.bond_type = 'carcinogenic' AND molecule.label = '+'", "SELECT COUNT(*) FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'br' AND molecule.label = '+'"]}, {"question_id": 236, "answer_sql": ["SELECT bond.bond_type, atom.atom_id, atom.element FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON connected.atom_id = atom.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE bond.bond_id = 'TR001_6_9';", "SELECT bond.bond_type, connected.atom_id2, connected.atom_id FROM bond JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.bond_id = 'TR001_6_9';", "SELECT bond.bond_type, connected.atom_id, connected.atom_id2 FROM bond JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.bond_id = 'TR001_6_9';", "SELECT bond.bond_type, atom.atom_id, atom.element FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON connected.atom_id = atom.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR001_6_9'"]}, {"question_id": 237, "answer_sql": ["SELECT m.label, CASE WHEN a.atom_id IN (SELECT atom_id FROM connected WHERE bond_id IN (SELECT bond_id FROM bond WHERE bond_type = 'cancer')) THEN 'Yes' ELSE 'No' END as is_carcinogenic FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE a.atom_id = 'TR001_10';", "SELECT m.label, CASE WHEN EXISTS (SELECT 1 FROM connected c WHERE c.atom_id = 'TR001_10' AND c.bond_id IN (SELECT b.bond_id FROM bond b WHERE b.molecule_id IN (SELECT m.molecule_id FROM molecule m WHERE m.label = '+'))) THEN 'Yes' ELSE 'No' END AS is_carcinogenic FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE a.atom_id = 'TR001_10';", "SELECT molecule.label FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.atom_id = 'TR001_10'", "SELECT molecule.label AS Molecule_Label, CASE WHEN molecule.label = '+' THEN 'Carcinogenic' ELSE 'Non-carcinogenic' END AS Carcinogenicity FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.atom_id = 'TR001_10';", "SELECT m.label, CASE WHEN e.evidence = '+' THEN 'carcinogenic' ELSE 'non-carcinogenic' END as carcinogenicity FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id LEFT JOIN (SELECT atom_id, '+' as evidence FROM connected WHERE atom_id = 'TR001_10' UNION ALL SELECT atom_id2, '-' as evidence FROM connected WHERE atom_id2 = 'TR001_10') e ON a.atom_id = e.atom_id WHERE e.atom_id IS NOT NULL;"]}, {"question_id": 238, "answer_sql": ["SELECT COUNT(*) FROM `bond` WHERE `bond_type` = '#';", "SELECT COUNT(*) FROM `bond` JOIN `atom` ON `atom`.`molecule_id` = `bond`.`molecule_id` JOIN `connected` ON `connected`.`atom_id` = `atom`.`atom_id` WHERE `bond`.`bond_type` = '#'", "SELECT COUNT(*) FROM bond JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond_type = '#';", "SELECT COUNT(*) FROM bond JOIN atom ON bond.molecule_id = atom.molecule_id WHERE bond.bond_type = '#';"]}, {"question_id": 239, "answer_sql": ["SELECT COUNT(*) FROM connected JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.atom_id = 'TR%_19';"]}, {"question_id": 240, "answer_sql": ["SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR004'", "SELECT element FROM atom JOIN connected ON atom.atom_id = connected.atom_id WHERE connected.atom_id2 = 'TR004'"]}, {"question_id": 241, "answer_sql": ["SELECT COUNT(*) FROM molecule WHERE label != 'carcinogenic';", "SELECT COUNT(*) FROM molecule WHERE label != '-';"]}, {"question_id": 242, "answer_sql": ["SELECT DISTINCT molecule.molecule_id, molecule.label FROM atom JOIN connected ON atom.atom_id = connected.atom_id2 JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE SUBSTRING(atom.atom_id, 7, 2) BETWEEN 21 AND 25 AND molecule.label = '+'"]}, {"question_id": 243, "answer_sql": ["SELECT b.bond_type FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE a1.element = 'p' AND a2.element = 'n';", "SELECT bond.bond_type, atom.element, bond.bond_id, atom.atom_id, connected.atom_id2 FROM bond JOIN atom ON bond.molecule_id = atom.molecule_id JOIN connected ON atom.atom_id = connected.atom_id2 AND atom.atom_id = connected.atom_id WHERE atom.element IN ('p', 'n') ORDER BY bond.bond_type, atom.element;", "SELECT b.bond_type FROM bond b JOIN connected c ON b.bond_id = c.bond_id WHERE c.atom_id IN (SELECT atom_id FROM atom WHERE element IN ('p', 'n'));"]}, {"question_id": 244, "answer_sql": ["SELECT m.molecule_id, m.label FROM molecule m JOIN ( SELECT b.molecule_id, COUNT(*) as double_bonds FROM bond b WHERE b.bond_type = ' = ' GROUP BY b.molecule_id ) b ON m.molecule_id = b.molecule_id WHERE b.double_bonds = ( SELECT MAX(double_bonds) FROM ( SELECT b.molecule_id, COUNT(*) as double_bonds FROM bond b WHERE b.bond_type = ' = ' GROUP BY b.molecule_id ) )"]}, {"question_id": 245, "answer_sql": []}, {"question_id": 246, "answer_sql": ["SELECT bond.bond_id, bond.bond_type FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE SUBSTR(atom.atom_id, 7, 2) + 0 = 45;", "SELECT bond.bond_id, bond.bond_type FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE SUBSTR(atom.atom_id, 7, 2) = 45;"]}, {"question_id": 247, "answer_sql": ["SELECT DISTINCT atom.element FROM atom LEFT JOIN connected ON atom.atom_id = connected.atom_id2 WHERE connected.atom_id IS NULL;", "SELECT atom.element FROM atom WHERE atom.atom_id NOT IN (SELECT connected.atom_id2 FROM connected WHERE connected.atom_id2 IN (SELECT atom.atom_id FROM atom WHERE atom.element NOT IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')));", "SELECT a.element FROM atom a LEFT JOIN connected c ON a.atom_id = c.atom_id WHERE c.atom_id IS NULL GROUP BY a.element HAVING COUNT(*) = (SELECT COUNT(*) FROM atom);", "SELECT atom.element FROM atom WHERE atom.atom_id NOT IN (SELECT connected.atom_id2 FROM connected WHERE connected.bond_id IS NULL);", "SELECT atom.element FROM atom LEFT JOIN connected ON atom.atom_id = connected.atom_id WHERE connected.atom_id IS NULL;"]}, {"question_id": 248, "answer_sql": ["SELECT atom.atom_id, atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON bond.bond_id = connected.bond_id WHERE bond.bond_type = '#' AND atom.molecule_id = 'TR447';", "SELECT atom.atom_id, atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id2 JOIN bond ON bond.bond_id = connected.bond_id WHERE bond.bond_type = '#' AND atom.molecule_id = 'TR447';"]}, {"question_id": 249, "answer_sql": ["SELECT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_id = 'TR144_8_19'", "SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON bond.bond_id = connected.bond_id WHERE connected.atom_id = 'TR144_8_19'"]}, {"question_id": 250, "answer_sql": ["SELECT m.molecule_id, m.label FROM molecule AS m JOIN bond AS b ON m.molecule_id = b.molecule_id WHERE b.bond_type = '=' GROUP BY m.molecule_id, m.label ORDER BY COUNT(*) DESC LIMIT 1;", "SELECT m.label, COUNT(b.bond_type) as 'double_bonds' FROM molecule m JOIN atom a ON a.molecule_id = m.molecule_id JOIN bond b ON b.molecule_id = a.atom_id WHERE m.label = '+' AND b.bond_type = ' = ' GROUP BY m.label ORDER BY 'double_bonds' DESC LIMIT 1;"]}, {"question_id": 251, "answer_sql": ["SELECT a.element FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.label = '+' GROUP BY a.element ORDER BY COUNT(*) ASC LIMIT 1;", "SELECT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = 'carcinogen' AND a.element NOT IN (SELECT DISTINCT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = 'carcinogen') GROUP BY a.element ORDER BY COUNT(*) ASC LIMIT 1;"]}, {"question_id": 252, "answer_sql": ["SELECT atom.atom_id, atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id2 JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = 'single' AND atom.element = 'pb';"]}, {"question_id": 253, "answer_sql": ["SELECT element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '#'", "SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON bond.bond_id = connected.bond_id WHERE bond.bond_type = '#' GROUP BY atom.element ORDER BY atom.element;", "SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id2 JOIN bond ON bond.bond_id = connected.bond_id WHERE bond.bond_type = '#'"]}, {"question_id": 254, "answer_sql": ["SELECT (COUNT(bond.bond_id) * 100.0) / (COUNT(atom.atom_id) * COUNT(atom.molecule_id)) AS percentage FROM atom JOIN connected ON atom.atom_id = connected.atom_id2 JOIN bond ON bond.bond_id = connected.bond_id GROUP BY atom.atom_id, atom.molecule_id ORDER BY percentage DESC LIMIT 1;"]}, {"question_id": 255, "answer_sql": []}, {"question_id": 256, "answer_sql": ["SELECT COUNT(*) FROM atom JOIN connected ON atom.atom_id = connected.atom_id2 WHERE atom.element IN ('c', 'h')", "SELECT COUNT(*) FROM atom WHERE element IN ('c', 'h');"]}, {"question_id": 257, "answer_sql": ["SELECT atom.atom_id AS atom_id2 FROM atom JOIN connected ON atom.atom_id = connected.atom_id2 JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = 'sulfur'", "SELECT `atom_id2` FROM `connected` JOIN `atom` ON `connected`.`atom_id2` = `atom`.`atom_id` WHERE `atom`.`element` = 's';", "SELECT `connected`.`atom_id2` FROM `connected` JOIN `atom` ON `connected`.`atom_id` = `atom`.`atom_id` WHERE `atom`.`element` = 's';", "SELECT `atom`.`atom_id` FROM `atom` WHERE `atom`.`element` = 's';"]}, {"question_id": 258, "answer_sql": ["SELECT bond.bond_type FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE atom.element = 'sn'"]}, {"question_id": 259, "answer_sql": ["SELECT atom.element, COUNT(*) as count FROM atom JOIN connected ON atom.atom_id = connected.atom_id2 JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '-';", "SELECT COUNT(DISTINCT atom.element) FROM atom JOIN connected ON atom.atom_id = connected.atom_id2 JOIN bond ON bond.bond_id = connected.bond_id WHERE bond.bond_type = '-';", "SELECT COUNT(*) FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '-';", "SELECT COUNT(*) FROM atom WHERE element = 'H' AND atom_id IN (SELECT atom_id FROM connected WHERE bond_id IN (SELECT bond_id FROM bond WHERE bond_type = '-'));"]}, {"question_id": 260, "answer_sql": ["SELECT COUNT(atom.atom_id) FROM atom JOIN connected ON atom.atom_id = connected.atom_id2 JOIN bond ON bond.bond_id = connected.bond_id WHERE bond.bond_type = '#' AND (atom.element = 'p' OR atom.element = 'br');", "SELECT atom.atom_id, atom.element, molecule.label, bond.bond_type FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON bond.bond_id = connected.bond_id JOIN molecule ON molecule.molecule_id = bond.molecule_id WHERE atom.element IN ('p', 'br') AND bond.bond_type = '#' GROUP BY atom.atom_id, molecule.label, bond.bond_type;", "SELECT COUNT(*) FROM atom JOIN connected ON atom.atom_id = connected.atom_id2 JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '#' AND atom.element = 'p' OR atom.element = 'br';", "SELECT COUNT(*) FROM atom JOIN connected ON atom.atom_id = connected.atom_id2 JOIN bond ON bond.bond_id = connected.bond_id WHERE atom.molecule_id IN ( SELECT molecule_id FROM molecule WHERE label = 'triple bond' AND element IN ('p', 'br') )", "SELECT atom.atom_id, atom.element, molecule.label FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON bond.bond_id = connected.bond_id JOIN molecule ON molecule.molecule_id = bond.molecule_id WHERE atom.element IN ('p', 'br') AND bond.bond_type = '#' GROUP BY atom.atom_id, atom.element, molecule.label HAVING COUNT(atom.atom_id) = 3;"]}, {"question_id": 261, "answer_sql": ["SELECT bond.bond_id FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+' AND bond.bond_type = 'carcinogenic'"]}, {"question_id": 262, "answer_sql": ["SELECT DISTINCT m.molecule_id FROM molecule m JOIN atom a ON a.molecule_id = m.molecule_id JOIN bond b ON b.molecule_id = a.atom_id WHERE b.bond_type = '-' AND a.element NOT IN ('C', 'N', 'O');"]}, {"question_id": 263, "answer_sql": []}, {"question_id": 264, "answer_sql": ["SELECT molecule.label FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label IN ('+', '-') AND molecule.label = '+' AND connected.atom_id IN ('TR000', 'TR001', 'TR002') ORDER BY molecule.label, connected.atom_id;"]}, {"question_id": 265, "answer_sql": ["SELECT DISTINCT m.molecule_id FROM molecule m JOIN atom a ON a.molecule_id = m.molecule_id WHERE m.label != '-' AND a.element NOT IN ('C', 'N', 'O', 'S');", "SELECT atom.molecule_id FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label != '-'"]}, {"question_id": 266, "answer_sql": ["SELECT COUNT(*) FROM `molecule` AS `m` JOIN `connected` AS `c` ON `m`.`molecule_id` = `c`.`atom_id` JOIN `atom` AS `a` ON `c`.`atom_id2` = `a`.`atom_id` WHERE `a`.`element` = 'C' AND `m`.`molecule_id` BETWEEN 'TR000' AND 'TR030' AND `m`.`label` = '+'", "SELECT COUNT(*) FROM connected JOIN atom ON connected.atom_id = atom.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id BETWEEN 'TR000' AND 'TR030' AND molecule.label = '+'"]}, {"question_id": 267, "answer_sql": ["SELECT bond.bond_type FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.molecule_id BETWEEN 'TR000' AND 'TR050'", "SELECT atom.molecule_id, bond.bond_type FROM atom JOIN bond ON atom.atom_id = bond.molecule_id WHERE atom.molecule_id BETWEEN 'TR000' AND 'TR050' ORDER BY atom.molecule_id;", "SELECT atom.molecule_id, bond.bond_type FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE atom.molecule_id BETWEEN 'TR000' AND 'TR050' ORDER BY atom.molecule_id;"]}, {"question_id": 268, "answer_sql": ["SELECT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id WHERE c.bond_id = 'TR001_10_11';", "SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id2 JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = 'TR001_10_11';"]}, {"question_id": 269, "answer_sql": ["SELECT COUNT(bond.bond_id) FROM bond JOIN atom ON bond.molecule_id = atom.molecule_id WHERE atom.element = 'i';", "SELECT COUNT(*) FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.element = 'i';"]}, {"question_id": 270, "answer_sql": ["SELECT MAX(label) as Carcinogenicity FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE element = 'ca'", "SELECT MAX(molecule.label) as Carcinogen_Label FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'ca' GROUP BY molecule.molecule_id HAVING MAX(molecule.label) = '+'"]}, {"question_id": 271, "answer_sql": ["SELECT a.atom_id, a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_id = 'TR001_1_8' AND a.element IN ('cl', 'c');", "SELECT atom.atom_id, atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id2 JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR001_1_8' AND atom.element = 'cl' AND bond.bond_type = 'single'"]}, {"question_id": 272, "answer_sql": ["SELECT DISTINCT m.molecule_id, m.label FROM molecule m JOIN atom a ON a.molecule_id = m.molecule_id JOIN bond b ON b.molecule_id = a.molecule_id WHERE a.element = 'c' AND b.bond_type = '#' AND m.label != '-' ORDER BY m.label;", "SELECT DISTINCT m.molecule_id, m.label FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id JOIN connected c ON c.atom_id = m.molecule_id WHERE b.bond_type = '#' AND c.atom_id2 IN ( SELECT atom_id FROM atom WHERE element = 'c' ) AND m.label != '-' ORDER BY m.label;"]}, {"question_id": 273, "answer_sql": ["SELECT (SUM(atom.element = 'cl') * 100.0) / (SUM(molecule.label = '+') * 1.0) AS percentage FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'cl';", "SELECT (SUM(atom.element = 'cl') * 100.0) / (SUM(molecule.label = '+') * 1.0) AS percentage FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON connected.atom_id = molecule.molecule_id WHERE molecule.label = '+'"]}, {"question_id": 274, "answer_sql": ["SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR001'", "SELECT atom.element, molecule.label FROM atom JOIN connected ON atom.atom_id = connected.atom_id2 JOIN molecule ON molecule.molecule_id = atom.molecule_id WHERE molecule.molecule_id = 'TR001'", "SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON molecule.molecule_id = connected.atom_id2 WHERE molecule.molecule_id = 'TR001';"]}, {"question_id": 275, "answer_sql": ["SELECT molecule_id FROM bond WHERE bond_type = ' = ';"]}, {"question_id": 276, "answer_sql": ["SELECT atom_id, atom_id2 FROM connected JOIN bond ON connected.bond_id = bond.bond_id WHERE bond_type = '#' GROUP BY atom_id, atom_id2 ORDER BY atom_id, atom_id2;", "SELECT atom.atom_id, molecule.label FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE bond.bond_type = '#' LIMIT 2;", "SELECT atom_id, atom_id2 FROM connected JOIN bond ON connected.bond_id = bond.bond_id WHERE bond_type = '#'", "SELECT atom.atom_id, connected.atom_id2 FROM atom JOIN connected ON atom.atom_id = connected.atom_id2 JOIN bond ON bond.bond_id = connected.bond_id WHERE bond.bond_type = '#' LIMIT 2;", "SELECT atom.atom_id, connected.atom_id2 FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON bond.bond_id = connected.bond_id WHERE bond.bond_type = '#' LIMIT 2;"]}, {"question_id": 277, "answer_sql": ["SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id2 JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR005_16_26';", "SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON bond.bond_id = connected.bond_id WHERE bond.bond_id = 'TR005_16_26';", "SELECT atom.element, bond.bond_type FROM atom JOIN connected ON atom.atom_id = connected.atom_id2 JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR005_16_26'", "SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id2 JOIN bond ON bond.bond_id = connected.bond_id WHERE bond.bond_type = 'TR005_16_26';"]}, {"question_id": 278, "answer_sql": ["SELECT COUNT(*) FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE bond.bond_type = '-' AND molecule.label = '-'", "SELECT COUNT(*) FROM `molecule` JOIN `connected` ON `molecule`.`molecule_id` = `connected`.`atom_id` JOIN `atom` ON `connected`.`atom_id` = `atom`.`atom_id` JOIN `bond` ON `atom`.`molecule_id` = `bond`.`molecule_id` WHERE `bond`.`bond_type` = '-';", "SELECT COUNT(*) FROM `atom` a JOIN `connected` c ON a.atom_id = c.atom_id JOIN `bond` b ON c.bond_id = b.bond_id WHERE b.bond_type = '-';", "SELECT COUNT(*) FROM `molecule` JOIN `bond` ON `molecule`.`molecule_id` = `bond`.`molecule_id` JOIN `atom` ON `bond`.`molecule_id` = `atom`.`molecule_id` WHERE `bond`.`bond_type` = '-';", "SELECT a.molecule_id, COUNT(*) as count FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = '-1' AND a.element = '-' GROUP BY a.molecule_id"]}, {"question_id": 279, "answer_sql": ["SELECT bond.bond_type, atom.molecule_id, molecule.label, atom.element, bond.bond_id, atom.atom_id FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON connected.atom_id = atom.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE bond.bond_id = 'TR001_10_11'", "SELECT m.label FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id JOIN molecule m ON b.molecule_id = m.molecule_id WHERE b.bond_id = 'TR001_10_11' AND m.label = '+'", "SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON bond.bond_id = connected.bond_id WHERE bond.bond_type = 'TR001_10_11'"]}, {"question_id": 280, "answer_sql": ["SELECT bond.bond_id, bond.bond_type, atom.molecule_id, molecule.label FROM bond JOIN atom ON bond.molecule_id = atom.molecule_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE bond.bond_type = '#' AND molecule.label = '+'", "SELECT c.bond_id, m.label FROM connected AS c JOIN atom AS a1 ON c.atom_id = a1.atom_id JOIN bond AS b ON c.bond_id = b.bond_id JOIN molecule AS m ON b.molecule_id = m.molecule_id WHERE a1.element = '#' AND b.bond_type = '#' GROUP BY c.bond_id, m.label HAVING m.label = '+'", "SELECT b.bond_id, m.label FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE b.bond_type = '#' AND m.label IN ('+', '-')", "SELECT bond.bond_id, bond.bond_type FROM bond JOIN atom ON bond.molecule_id = atom.molecule_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE bond.bond_type = '#' AND molecule.label = '+'", "SELECT b.bond_id FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE m.label = '+' AND b.bond_type = '#'"]}, {"question_id": 281, "answer_sql": ["SELECT COUNT(*) FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE substr(atom.atom_id, 7, 1) = '4' AND atom.element = 'c' AND molecule.label = '+'", "SELECT COUNT(*) FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE substr(atom.atom_id, 7, 1) = '4' AND atom.element = 'c' AND bond.bond_type = 'c'", "SELECT atom.element, COUNT(*) as count FROM atom JOIN connected ON atom.atom_id = connected.atom_id2 JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+' AND substr(atom.atom_id, 7, 1) = '4' AND atom.element IN ('c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te') GROUP BY atom.element ORDER BY count DESC;", "SELECT atom.element, COUNT(*) as count FROM atom JOIN connected ON atom.atom_id = connected.atom_id2 JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+' AND substr(atom.atom_id, 7, 1) = 4 AND atom.element IN ('c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te') GROUP BY atom.element ORDER BY count DESC;"]}, {"question_id": 282, "answer_sql": ["SELECT label FROM molecule JOIN atom ON atom.molecule_id = molecule.molecule_id JOIN connected ON connected.atom_id = atom.atom_id WHERE molecule.molecule_id = 'TR006' AND atom.element = 'h'", "SELECT m.label, (SELECT COUNT(*) FROM atom WHERE atom.element = 'h' AND atom.molecule_id = 'TR006') as Hydrogen_ratio FROM molecule as m WHERE m.molecule_id = 'TR006';", "SELECT m.label, (SELECT COUNT(*) FROM atom WHERE atom.element = 'h' AND atom.molecule_id = 'TR006') / (SELECT COUNT(*) FROM atom WHERE atom.molecule_id = 'TR006') AS ratio FROM molecule m WHERE m.molecule_id = 'TR006';", "SELECT label FROM molecule JOIN atom ON molecule.molecule_id = atom.molecule_id JOIN connected ON atom.atom_id = connected.atom_id WHERE element = 'h' AND molecule.molecule_id = 'TR006' GROUP BY molecule.molecule_id HAVING SUM(CASE WHEN label = '+' THEN 1 ELSE 0 END) / COUNT(*) > 0.5;", "SELECT atom.atom_id, atom.element, atom.molecule_id, molecule.label FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON molecule.molecule_id = connected.atom_id WHERE atom.element = 'h' AND molecule.molecule_id = 'TR006' GROUP BY atom.atom_id, atom.element, atom.molecule_id, molecule.label HAVING COUNT(atom.atom_id) / COUNT(molecule.molecule_id) = 1;"]}, {"question_id": 283, "answer_sql": ["SELECT atom.element, molecule.label FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE atom.element = 'ca'", "SELECT label FROM molecule JOIN atom ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'ca'", "SELECT molecule.label FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'ca' AND molecule.label = '+'"]}, {"question_id": 284, "answer_sql": ["SELECT b.bond_type FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE a.element = 'te'", "SELECT b.bond_type FROM connected c JOIN atom a ON c.atom_id = a.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE a.element = 'te' AND b.bond_type = ' = ';"]}, {"question_id": 285, "answer_sql": ["SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id WHERE connected.bond_id = 'TR001_10_11'", "SELECT DISTINCT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = 'TR001_10_11'"]}, {"question_id": 286, "answer_sql": ["SELECT (SELECT COUNT(*) FROM connected WHERE bond_id IS NOT NULL) * 100.0 / (SELECT COUNT(*) FROM bond WHERE bond_type = '#') AS percentage;", "SELECT (SELECT COUNT(*) FROM connected WHERE bond_id IS NOT NULL) * 100.0 / (SELECT COUNT(*) FROM connected) AS percentage_triple_bonds;", "SELECT (COUNT(*) * 100.0) / (SELECT COUNT(*) FROM molecule WHERE label = 'triple bond') AS percentage FROM atom JOIN bond ON atom.atom_id = bond.molecule_id JOIN connected ON connected.atom_id = atom.atom_id WHERE bond.bond_type = '#' GROUP BY atom.atom_id;", "SELECT (SELECT COUNT(*) FROM connected WHERE bond_id IS NOT NULL) * 100.0 / (SELECT COUNT(*) FROM connected) FROM molecule;", "SELECT COUNT(DISTINCT connected.atom_id) * 100.0 / (SELECT COUNT(*) FROM atom WHERE atom.molecule_id IN (SELECT bond.molecule_id FROM bond WHERE bond.bond_type = '#')) AS percentage FROM connected WHERE connected.bond_id IN (SELECT bond.bond_id FROM bond WHERE bond.bond_type = '#');"]}, {"question_id": 287, "answer_sql": []}, {"question_id": 288, "answer_sql": ["SELECT label FROM molecule JOIN connected ON molecule.molecule_id = connected.atom_id WHERE connected.atom_id = 'TR001_1'"]}, {"question_id": 289, "answer_sql": ["SELECT label FROM molecule WHERE molecule_id = 'TR151';", "SELECT molecule.label FROM molecule JOIN connected ON molecule.molecule_id = connected.atom_id2 WHERE connected.atom_id IN ( SELECT atom.atom_id FROM atom WHERE atom.molecule_id = 'TR151' ) AND molecule.label = '+' LIMIT 1;"]}, {"question_id": 290, "answer_sql": ["SELECT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id WHERE c.atom_id2 = 'TR151'", "SELECT m.label FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id JOIN molecule m ON b.molecule_id = m.molecule_id WHERE a.element = 'cl' GROUP BY m.molecule_id;", "SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id2 JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR151'", "SELECT a.atom_id, a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id WHERE a.element = 'cl'"]}, {"question_id": 291, "answer_sql": ["SELECT DISTINCT atom.molecule_id FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.label = '+'", "SELECT COUNT(*) FROM molecule JOIN connected ON molecule.molecule_id = connected.atom_id JOIN atom ON atom.atom_id = connected.atom_id2 JOIN bond ON bond.bond_id = connected.bond_id WHERE atom.element = 'C' AND bond.bond_type = 'ar' AND molecule.label = '+'", "SELECT COUNT(*) FROM `atom` JOIN `connected` ON `atom`.`atom_id` = `connected`.`atom_id` JOIN `molecule` ON `atom`.`molecule_id` = `molecule`.`molecule_id` WHERE `molecule`.`label` = '+'", "SELECT COUNT(*) FROM `molecule` WHERE `label` = '+'"]}, {"question_id": 292, "answer_sql": ["SELECT atom.atom_id, atom.element, atom.molecule_id FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id BETWEEN 'TR010' AND 'TR050' AND atom.element = 'c';", "SELECT atom_id FROM atom WHERE molecule_id BETWEEN 'TR010' AND 'TR050' AND element = 'c';"]}, {"question_id": 293, "answer_sql": ["SELECT COUNT(*) FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+'", "SELECT COUNT(DISTINCT atom.atom_id) FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+'", "SELECT atom.atom_id, atom.element, molecule.label FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+' GROUP BY atom.atom_id, atom.element, molecule.label HAVING COUNT(atom.atom_id) = ( SELECT COUNT(atom.atom_id) FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+' );", "SELECT atom.atom_id, atom.element, molecule.label FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+' GROUP BY atom.atom_id, atom.element, molecule.label HAVING COUNT(atom.atom_id) = 1;"]}, {"question_id": 294, "answer_sql": ["SELECT bond.bond_id FROM bond JOIN atom ON bond.molecule_id = atom.molecule_id JOIN molecule ON atom.molecule_id = molecule.molecule_id JOIN connected ON atom.atom_id = connected.atom_id2 WHERE molecule.label = '+' AND bond.bond_type = ' = ';"]}, {"question_id": 295, "answer_sql": ["SELECT COUNT(*) FROM atom JOIN connected ON atom.atom_id = connected.atom_id2 JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+' AND atom.element = 'h';", "SELECT atom.atom_id, atom.element, molecule.label FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'h' AND molecule.label = '+'", "SELECT COUNT(atom.atom_id) FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'h' AND molecule.label = '+' GROUP BY atom.atom_id;"]}, {"question_id": 296, "answer_sql": ["SELECT m.molecule_id FROM molecule m JOIN connected c ON m.molecule_id = c.atom_id JOIN atom a ON a.atom_id = c.atom_id2 WHERE a.atom_id = 'TR00_1' AND c.bond_id IN ( SELECT bond_id FROM bond WHERE bond_type = 'TR00_1_2' );"]}, {"question_id": 297, "answer_sql": ["SELECT atom.atom_id FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'c' AND molecule.label = '-' AND atom.atom_id NOT IN (SELECT atom_id FROM connected WHERE atom_id2 NOT IN (SELECT atom_id FROM connected WHERE bond_id IN (SELECT bond_id FROM bond WHERE bond_type = 'carcinogenic')));", "SELECT atom.atom_id FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE atom.element = 'c' AND bond.bond_type = '-' LIMIT 1;", "SELECT atom.atom_id, atom.element, molecule.label FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'c' AND molecule.label != '-'", "SELECT atom.atom_id, atom.element, molecule.label FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'c' AND molecule.label = '-'"]}, {"question_id": 298, "answer_sql": ["SELECT (SUM(m.label = '+' AND a.element = 'h') * 100.0) / COUNT(m.molecule_id) AS percentage FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.element = 'h';", "SELECT (SUM(molecule.label = '+') * 100.0) / COUNT(molecule.molecule_id) AS percentage FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON connected.atom_id = molecule.molecule_id WHERE atom.element = 'h';"]}, {"question_id": 299, "answer_sql": ["SELECT label FROM molecule WHERE molecule_id = 'TR124';", "SELECT label FROM molecule JOIN atom ON atom.molecule_id = molecule.molecule_id JOIN bond ON bond.molecule_id = molecule.molecule_id WHERE atom.atom_id = 'TR124'"]}, {"question_id": 300, "answer_sql": ["SELECT a.atom_id, a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id WHERE c.atom_id2 = 'TR186' GROUP BY a.atom_id, a.element HAVING COUNT(DISTINCT c.atom_id2) = 1;", "SELECT `atom`.`atom_id` FROM `atom` JOIN `connected` ON `connected`.`atom_id2` = `atom`.`atom_id` JOIN `bond` ON `bond`.`bond_id` = `connected`.`bond_id` WHERE `bond`.`molecule_id` = 'TR186' AND `atom`.`molecule_id` = 'TR186';"]}, {"question_id": 301, "answer_sql": ["SELECT bond_type FROM bond WHERE bond_id = 'TR007_4_19';", "SELECT bond_type FROM bond JOIN connected ON bond.bond_id = connected.bond_id WHERE connected.atom_id = 'TR007_4_19' AND connected.atom_id2 = 'TR007_4_18';"]}, {"question_id": 302, "answer_sql": ["SELECT atom.element, COUNT(connected.atom_id2) as atom_count FROM connected JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca') AND connected.bond_id = 'TR001_2_4' GROUP BY atom.element ORDER BY atom_count DESC;", "SELECT atom.element FROM connected JOIN atom ON connected.atom_id = atom.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR001_2_4';"]}, {"question_id": 303, "answer_sql": ["SELECT COUNT(*), atom.molecule_id, molecule.label FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = ' = ' AND molecule.label = '+' GROUP BY atom.molecule_id, molecule.label ORDER BY COUNT(*) DESC;"]}, {"question_id": 304, "answer_sql": ["SELECT m.molecule_id, a.element FROM molecule m \nJOIN atom a ON m.molecule_id = a.molecule_id \nWHERE a.element IN ('c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca') AND m.label = '+'", "SELECT atom.element, molecule.label FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'c' OR atom.element = 'h' OR atom.element = 'o' OR atom.element = 's' OR atom.element = 'n' OR atom.element = 'p' OR atom.element = 'na' OR atom.element = 'br' OR atom.element = 'f' OR atom.element = 'i' OR atom.element = 'sn' OR atom.element = 'pb' OR atom.element = 'te' OR atom.element = 'ca'", "SELECT m.molecule_id, a.element FROM molecule m JOIN connected c ON m.molecule_id = c.atom_id JOIN atom a ON c.atom_id = a.atom_id WHERE a.element IN ('c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca') AND m.label = '+' ORDER BY m.molecule_id;", "SELECT atom.molecule_id, atom.element FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca') AND molecule.label = '+' ORDER BY atom.molecule_id;", "SELECT atom.element, molecule.label FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'c' AND molecule.label = '+'"]}, {"question_id": 305, "answer_sql": []}, {"question_id": 306, "answer_sql": ["SELECT m.molecule_id, m.label FROM molecule AS m JOIN bond AS b ON m.molecule_id = b.molecule_id JOIN connected AS c ON c.bond_id = b.bond_id WHERE b.bond_type = '#' GROUP BY m.molecule_id, m.label HAVING COUNT(DISTINCT c.atom_id) = 3;", "SELECT m.label, GROUP_CONCAT(DISTINCT a.element) as elements FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id JOIN molecule m ON b.molecule_id = m.molecule_id WHERE b.bond_type = '#' GROUP BY m.molecule_id;", "SELECT DISTINCT molecule.label FROM molecule JOIN atom ON atom.molecule_id = molecule.molecule_id JOIN bond ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '#' GROUP BY molecule.label;"]}, {"question_id": 307, "answer_sql": ["SELECT atom.element FROM connected JOIN atom ON connected.atom_id = atom.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR000_2_3'", "SELECT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = 'TR000_2_3'"]}, {"question_id": 308, "answer_sql": ["SELECT b.bond_type, COUNT(*) as count FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE a.element = 'cl' GROUP BY b.bond_type;", "SELECT COUNT(*) FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON bond.molecule_id = atom.molecule_id WHERE atom.element = 'cl';", "SELECT COUNT(*) FROM connected JOIN atom ON connected.atom_id = atom.atom_id JOIN bond ON atom.atom_id = bond.molecule_id WHERE atom.element = 'cl' AND bond.bond_type = 'single';", "SELECT COUNT(*) FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON bond.molecule_id = atom.molecule_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'cl';", "SELECT COUNT(*) FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON atom.atom_id = connected.atom_id WHERE atom.element = 'cl';"]}, {"question_id": 309, "answer_sql": ["SELECT atom.atom_id, COUNT(bond.bond_id) as bond_count FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.molecule_id = 'TR346' GROUP BY atom.atom_id;", "SELECT atom.atom_id, COUNT(bond.bond_id) as bond_count FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON bond.molecule_id = connected.atom_id WHERE atom.molecule_id = 'TR346' GROUP BY atom.atom_id;"]}, {"question_id": 310, "answer_sql": ["SELECT COUNT(*) FROM molecule JOIN bond ON molecule.molecule_id = bond.molecule_id JOIN connected ON connected.atom_id = atom.atom_id JOIN atom ON atom.molecule_id = molecule.molecule_id WHERE bond_type = ' = ' AND label = '+'"]}, {"question_id": 311, "answer_sql": ["SELECT COUNT(*) FROM `molecule` WHERE `molecule_id` NOT IN ( SELECT `molecule_id` FROM `atom` WHERE `element` = 's' ) AND `molecule_id` NOT IN ( SELECT `molecule_id` FROM `bond` WHERE `bond_type` != ' = ' )", "SELECT COUNT(*) FROM molecule WHERE molecule_id NOT IN ( SELECT DISTINCT molecule_id FROM atom WHERE element = 's' AND atom_id IN ( SELECT atom_id FROM bond WHERE bond_type != '= ' ) )"]}, {"question_id": 312, "answer_sql": ["SELECT m.label AS Molecule_Label FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id JOIN molecule m ON b.molecule_id = m.molecule_id WHERE b.bond_id = 'TR001_2_4'", "SELECT m.label FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id JOIN connected c ON c.bond_id = b.bond_id WHERE c.atom_id = 'TR001_2_4' AND b.bond_type = 'carcinogenic'"]}, {"question_id": 313, "answer_sql": ["SELECT COUNT(*) FROM atom WHERE molecule_id = 'TR005';", "SELECT COUNT(*) FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR005';", "SELECT COUNT(*) FROM atom JOIN connected ON atom.atom_id = connected.atom_id2 WHERE atom.molecule_id = 'TR005';"]}, {"question_id": 314, "answer_sql": ["SELECT COUNT(*) FROM bond JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.bond_type = '-';", "SELECT COUNT(*) FROM bond WHERE bond_type = '-';"]}, {"question_id": 315, "answer_sql": ["SELECT m.molecule_id, m.label FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id JOIN connected c ON a.atom_id = c.atom_id WHERE a.element = 'cl' AND c.atom_id2 IN ( SELECT atom_id FROM atom WHERE element = 'ca' ) GROUP BY m.molecule_id, m.label HAVING COUNT(DISTINCT c.bond_id) > 0;", "SELECT m.molecule_id, m.label FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE a.element = 'cl' AND m.label LIKE '%+%'"]}, {"question_id": 316, "answer_sql": ["SELECT m.molecule_id, m.label FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id JOIN connected c ON a.atom_id = c.atom_id WHERE a.element = 'c' AND m.label != '-'", "SELECT DISTINCT m.molecule_id, m.label FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE a.element = 'c' AND m.label != '-'", "SELECT m.molecule_id, m.label FROM molecule AS m WHERE m.label != '-' AND NOT EXISTS ( SELECT 1 FROM atom AS a JOIN connected AS c ON a.atom_id = c.atom_id WHERE a.element = 'c' AND c.atom_id2 IN ( SELECT a.atom_id FROM atom AS a WHERE a.element = 'c' ) );", "SELECT m.molecule_id, m.label FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id JOIN connected c ON a.atom_id = c.atom_id WHERE a.element = 'c' AND m.label != '-' GROUP BY m.molecule_id, m.label ORDER BY COUNT(DISTINCT c.bond_id) DESC;"]}, {"question_id": 317, "answer_sql": []}, {"question_id": 318, "answer_sql": ["SELECT atom.molecule_id FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_id = 'TR001_1_7';"]}, {"question_id": 319, "answer_sql": ["SELECT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id WHERE c.bond_id = 'TR001_3_4' GROUP BY a.element", "SELECT COUNT(DISTINCT atom.element) as 'Number of unique elements' FROM connected JOIN atom ON connected.atom_id = atom.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR001_3_4';", "SELECT COUNT(*) FROM connected WHERE bond_id = 'TR001_3_4'", "SELECT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_id = 'TR001_3_4';", "SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id2 JOIN bond ON bond.bond_id = connected.bond_id WHERE bond.bond_type = 'TR001_3_4'"]}, {"question_id": 320, "answer_sql": ["SELECT bond_type FROM bond JOIN connected ON bond.bond_id = connected.bond_id WHERE connected.atom_id = 'TR000_1' AND connected.atom_id2 = 'TR000_2';", "SELECT bond.bond_type FROM bond JOIN atom ON bond.molecule_id = atom.molecule_id JOIN connected ON atom.atom_id = connected.atom_id WHERE connected.atom_id2 = 'TR000_2' AND connected.atom_id = 'TR000_1';"]}, {"question_id": 321, "answer_sql": ["SELECT molecule.label AS Molecule_Label, atom.element AS Element FROM atom JOIN connected ON atom.atom_id = connected.atom_id2 JOIN molecule ON molecule.molecule_id = atom.molecule_id WHERE atom.atom_id = 'TR000_2' AND connected.atom_id = 'TR000_4'"]}, {"question_id": 322, "answer_sql": ["SELECT element FROM atom WHERE atom_id = 'TR000_1';", "SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id WHERE connected.atom_id2 = 'TR000_1';"]}, {"question_id": 323, "answer_sql": ["SELECT COUNT(*) FROM ( SELECT 1 FROM connected JOIN atom ON connected.atom_id = atom.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR000' AND molecule.label = '+' ) AS subquery;", "SELECT m.label FROM molecule m JOIN atom a ON a.molecule_id = m.molecule_id JOIN connected c ON c.atom_id = a.atom_id WHERE m.molecule_id = 'TR000' AND c.bond_id IS NOT NULL AND m.label = '+' LIMIT 1;", "SELECT COUNT(*) FROM ( SELECT c.atom_id, m.label FROM connected c JOIN atom a ON c.atom_id = a.atom_id JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.label = '+' ) t;", "SELECT m.label FROM molecule m JOIN atom a ON a.molecule_id = m.molecule_id JOIN connected c ON c.atom_id = a.atom_id WHERE m.molecule_id = 'TR000' AND c.bond_id IS NOT NULL;", "SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON connected.atom_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR000' AND atom.element = 'O';"]}, {"question_id": 324, "answer_sql": ["SELECT (SUM(bond.bond_type = '-') * 100.0) / COUNT(bond.bond_id) as percentage FROM bond JOIN atom ON bond.molecule_id = atom.molecule_id"]}, {"question_id": 325, "answer_sql": ["SELECT molecule.label, COUNT(atom.atom_id) as num_atoms FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id JOIN bond ON atom.molecule_id = bond.molecule_id JOIN connected ON atom.atom_id = connected.atom_id WHERE atom.element = 'n' AND molecule.label = '+' GROUP BY molecule.label;", "SELECT COUNT(*) FROM atom JOIN connected ON atom.atom_id = connected.atom_id2 JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'n' AND molecule.label = '+'", "SELECT COUNT(*) FROM ( SELECT DISTINCT c.atom_id2, m.molecule_id, m.label FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN molecule m ON a.molecule_id = m.molecule_id WHERE a.element = 'n' AND m.label LIKE '%+%' ) AS subquery;", "SELECT COUNT(*) FROM `molecule` JOIN `atom` ON `molecule`.`molecule_id` = `atom`.`molecule_id` WHERE `atom`.`element` = 'n' AND `molecule`.`label` = '+'", "SELECT m.molecule_id, COUNT(*) as num_molecules FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id JOIN molecule m ON b.molecule_id = m.molecule_id WHERE a.element = 'n' AND m.label = '+' GROUP BY m.molecule_id;"]}, {"question_id": 326, "answer_sql": ["SELECT molecule_id FROM bond WHERE bond_type = ' = ';"]}, {"question_id": 327, "answer_sql": ["SELECT m.molecule_id, m.label FROM molecule m JOIN connected c ON m.molecule_id = c.atom_id JOIN atom a ON c.atom_id = a.atom_id WHERE a.element <> 'C' AND c.bond_id IS NOT NULL GROUP BY m.molecule_id, m.label HAVING COUNT(a.atom_id) > 5"]}, {"question_id": 328, "answer_sql": ["SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON bond.bond_id = connected.bond_id WHERE bond.bond_type = '=' AND atom.molecule_id = 'TR024'", "SELECT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = '=' AND a.molecule_id = 'TR024' GROUP BY a.element;", "SELECT element FROM connected JOIN atom ON connected.atom_id = atom.atom_id JOIN bond ON atom.atom_id = bond.molecule_id JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR024' AND bond.bond_type = '=';"]}, {"question_id": 329, "answer_sql": ["SELECT m.molecule_id, m.label FROM molecule m JOIN atom a ON a.molecule_id = m.molecule_id JOIN connected c ON c.atom_id = a.atom_id WHERE m.label = '+' GROUP BY m.molecule_id, m.label ORDER BY COUNT(a.atom_id) DESC LIMIT 1;", "SELECT molecule.label FROM molecule JOIN atom ON atom.molecule_id = molecule.molecule_id JOIN connected ON connected.atom_id = atom.atom_id WHERE atom.element = 'c' GROUP BY molecule.molecule_id ORDER BY COUNT(atom.atom_id) DESC LIMIT 1;", "SELECT m.label FROM molecule m JOIN connected c ON m.molecule_id = c.atom_id JOIN atom a ON c.atom_id = a.atom_id WHERE a.element NOT IN ('N', 'O') GROUP BY m.molecule_id, m.label ORDER BY COUNT(a.atom_id) DESC LIMIT 1;"]}, {"question_id": 330, "answer_sql": ["SELECT (SUM(atom.element = 'h' AND bond.bond_type = '#') * 100.0) / COUNT(molecule.molecule_id) AS percentage FROM atom JOIN bond ON atom.molecule_id = bond.molecule_id JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.label = '+'", "SELECT (SUM(atom.element = 'h') * 100.0) / (SELECT COUNT(*) FROM molecule WHERE molecule.label = '+') AS percentage FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'h' AND connected.bond_id = '#'"]}, {"question_id": 331, "answer_sql": ["SELECT COUNT(*) FROM molecule JOIN atom ON atom.molecule_id = molecule.molecule_id JOIN bond ON bond.molecule_id = molecule.molecule_id JOIN connected ON connected.atom_id = atom.atom_id AND connected.atom_id2 = atom.atom_id WHERE molecule.label = '+' AND connected.bond_id IS NOT NULL;", "SELECT COUNT(*) FROM molecule WHERE label = '+'", "SELECT DISTINCT molecule.molecule_id, molecule.label FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id JOIN connected ON (atom.atom_id = connected.atom_id OR atom.atom_id = connected.atom_id2) WHERE molecule.label = '+'", "SELECT m.molecule_id, m.label FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.element = 'carcinogenic'", "SELECT m.molecule_id, m.label FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.label = '+'"]}, {"question_id": 332, "answer_sql": ["SELECT COUNT(*) FROM `molecule` WHERE `molecule_id` BETWEEN 'TR004' AND 'TR010' AND `molecule_id` NOT IN ( SELECT `molecule_id` FROM `bond` WHERE `bond_type` = '-')"]}, {"question_id": 333, "answer_sql": ["SELECT atom.element, COUNT(*) as count FROM atom JOIN connected ON atom.atom_id = connected.atom_id2 JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR008' AND atom.element = 'c' GROUP BY atom.element;", "SELECT COUNT(*) FROM atom JOIN connected ON atom.atom_id = connected.atom_id2 JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR008' AND atom.element = 'c';", "SELECT COUNT(*) FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = 'single' AND atom.element = 'c'", "SELECT COUNT(*) FROM atom WHERE element = 'c' AND molecule_id = 'TR008';"]}, {"question_id": 334, "answer_sql": ["SELECT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id WHERE c.atom_id = 'TR004_7' AND a.element NOT IN ('c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te');", "SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '-' AND atom.atom_id = 'TR004_7';", "SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id WHERE connected.atom_id2 = 'TR004_7' AND atom.element <> 'carcinogenic'"]}, {"question_id": 335, "answer_sql": ["SELECT COUNT(*) FROM `molecule` JOIN `connected` ON `molecule`.`molecule_id` = `connected`.`atom_id2` JOIN `atom` ON `connected`.`atom_id` = `atom`.`atom_id` WHERE `atom`.`element` = 'o' AND `connected`.`bond_id` IN ( SELECT `bond_id` FROM `bond` WHERE `bond_type` = ' = ' );"]}, {"question_id": 336, "answer_sql": ["SELECT COUNT(*) FROM molecule JOIN bond ON molecule.molecule_id = bond.molecule_id JOIN atom ON bond.molecule_id = atom.molecule_id WHERE bond.bond_type = '#' AND atom.element != 'C' AND molecule.label = '-'", "SELECT COUNT(*) FROM molecule JOIN bond ON molecule.molecule_id = bond.molecule_id JOIN connected ON connected.atom_id = atom.atom_id JOIN atom ON atom.molecule_id = molecule.molecule_id WHERE bond.bond_type = '#' AND molecule.label = '-' AND connected.atom_id2 = atom.atom_id;"]}, {"question_id": 337, "answer_sql": ["SELECT atom.element, bond.bond_type FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE atom.molecule_id = 'TR016' ORDER BY atom.element, bond.bond_type;", "SELECT atom.element, bond.bond_type FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE atom.molecule_id = 'TR016'", "SELECT atom.element, bond.bond_type FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON bond.bond_id = connected.bond_id JOIN molecule ON molecule.molecule_id = bond.molecule_id WHERE molecule.molecule_id = 'TR016'"]}, {"question_id": 338, "answer_sql": ["SELECT atom_id FROM connected WHERE atom_id2 = 'TR012' AND bond_id IN (SELECT bond_id FROM bond WHERE bond_type = ' = ');"]}, {"question_id": 339, "answer_sql": ["SELECT atom.atom_id FROM atom JOIN connected ON atom.atom_id = connected.atom_id2 JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+' AND atom.element = 'o'", "SELECT atom.atom_id FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id JOIN bond ON atom.atom_id = bond.bond_id WHERE molecule.label = '+' AND atom.element = 'o';", "SELECT atom_id FROM atom WHERE element = 'o';", "SELECT atom.atom_id FROM atom JOIN connected ON atom.atom_id = connected.atom_id2 JOIN bond ON bond.bond_id = connected.bond_id WHERE atom.molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '+') AND atom.element = 'o';"]}, {"question_id": 340, "answer_sql": ["SELECT c.asciiName, c.mcmId, c.frameVersion, c.colors, c.manaCost, c.power, c.toughness FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.cardKingdomFoilId = c.cardKingdomId AND c.cardKingdomId IS NOT NULL;"]}, {"question_id": 341, "answer_sql": ["SELECT c.asciiName, c.cardKingdomId, c.cardKingdomFoilId FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.borderColor = 'borderless' AND c.cardKingdomFoilId IS NOT NULL AND c.cardKingdomId IS NOT NULL AND c.cardKingdomId != '';", "SELECT c.asciiName, c.availability, c.colors, c.convertedManaCost, c.hand, c.life, c.name, c.rarity, c.text, c.type FROM cards c JOIN ( SELECT cardKingdomId, cardKingdomFoilId FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL GROUP BY cardKingdomId HAVING COUNT(*) = 0 ) fd ON c.cardKingdomId = fd.cardKingdomId WHERE c.borderColor = 'borderless' AND c.cardKingdomFoilId IS NULL;", "SELECT c.asciiName, c.availability, c.colors, c.convertedManaCost, c.hand, c.life, c.name, c.rarity, c.text, c.type, c.uuid FROM cards c WHERE c.borderColor = 'borderless' AND c.cardKingdomFoilId IS NOT NULL AND c.cardKingdomId IS NOT NULL;", "SELECT name FROM cards WHERE borderColor = 'borderless' AND cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL;"]}, {"question_id": 342, "answer_sql": ["SELECT name FROM cards WHERE faceConvertedManaCost > ( SELECT MAX(faceConvertedManaCost) FROM cards )", "SELECT name FROM cards WHERE faceConvertedManaCost = (SELECT MAX(faceConvertedManaCost) FROM cards);", "SELECT name, faceConvertedManaCost FROM cards WHERE faceConvertedManaCost = ( SELECT MAX(faceConvertedManaCost) FROM cards );"]}, {"question_id": 343, "answer_sql": ["SELECT name FROM cards WHERE edhrecRank < 100 AND frameVersion = 2015;", "SELECT c.name FROM cards c JOIN ( SELECT id, frameVersion FROM cards WHERE frameVersion = 2015 ORDER BY edhrecRank ASC LIMIT 100 ) f ON c.id = f.id", "SELECT c.name FROM cards c JOIN (SELECT flavorText, language, multiverseid, name, text, type, uuid FROM foreign_data WHERE language = 'en' AND multiverseid = (SELECT id FROM sets WHERE code = '2015') AND type = 'Card') fd ON c.uuid = fd.uuid WHERE c.frameVersion = '2015' AND c.edhrecRank < 100;"]}, {"question_id": 344, "answer_sql": []}, {"question_id": 345, "answer_sql": ["SELECT legalities.format FROM legalities JOIN cards ON legalities.uuid = cards.uuid JOIN sets ON cards.setCode = sets.code WHERE cards.types = 'Artifact' AND cards.side IS NULL AND sets.code = 'VGT' AND legalities.format = 'vintage';", "SELECT l.status FROM legalities l JOIN cards c ON l.uuid = c.uuid WHERE c.type = 'Artifact' AND c.side IS NULL AND l.format = 'vintage';"]}, {"question_id": 346, "answer_sql": ["SELECT cards.id, cards.artist FROM cards LEFT JOIN ( SELECT uuid FROM legalities WHERE format = 'commander' AND status = 'Legal' ) legal ON cards.uuid = legal.uuid WHERE cards.power = '*' OR cards.power IS NULL AND legal.uuid IS NOT NULL AND cards.type = 'card' AND cards.types LIKE '%unknown%'", "SELECT cards.id, cards.artist FROM cards LEFT JOIN (SELECT uuid FROM legalities WHERE format = 'commander' AND status = 'Legal') as legal ON cards.uuid = legal.uuid LEFT JOIN (SELECT uuid FROM legalities WHERE format = 'commander' AND status = 'Legal') as illegal ON cards.uuid = illegal.uuid WHERE (cards.power = '*' OR cards.power IS NULL) AND legal.uuid IS NOT NULL AND illegal.uuid IS NULL;", "SELECT cards.id, cards.artist FROM cards LEFT JOIN ( SELECT uuid FROM legalities WHERE format = 'commander' AND status = 'Legal' AND uuid IN ( SELECT uuid FROM cards WHERE power = '*' ) ) as legal_unknown_power ON cards.uuid = legal_unknown_power.uuid WHERE cards.type = 'Creature' AND cards.power = '*' AND legal_unknown_power.uuid IS NOT NULL;"]}, {"question_id": 347, "answer_sql": ["SELECT c.*, f.flavorText, r.text FROM cards c JOIN foreign_data f ON c.uuid = f.uuid JOIN rulings r ON c.uuid = r.uuid WHERE c.artist = 'Stephen Daniel' AND c.hasContentWarning = 1;"]}, {"question_id": 348, "answer_sql": ["SELECT * FROM rulings JOIN cards ON rulings.uuid = cards.uuid WHERE cards.asciiName = 'Sublime Epiphany' AND cards.number = '74s';", "SELECT legalities.format, sqlite_sequence.name AS sequence_name, cards.text, cards.id, rulings.date, cards.uuid, cards.number FROM legalities JOIN cards ON legalities.uuid = cards.uuid JOIN sqlite_sequence ON sqlite_sequence.name = 'cards' JOIN rulings ON rulings.uuid = cards.uuid WHERE cards.name = 'Sublime Epiphany' AND cards.number = '74s';", "SELECT r.text FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.name = 'Sublime Epiphany' AND c.number = '74s';", "SELECT * FROM rulings WHERE uuid IN ( SELECT uuid FROM cards WHERE name = 'Sublime Epiphany' AND number = '74s' );"]}, {"question_id": 349, "answer_sql": ["SELECT c.name, c.artist, c.isPromo FROM cards c JOIN ( SELECT r.uuid, COUNT(r.uuid) as count FROM rulings r GROUP BY r.uuid ORDER BY count DESC LIMIT 1 ) r ON c.uuid = r.uuid WHERE c.isPromo = 1;", "SELECT cards.name, cards.artist, MAX(rulings.date) as MostRulingDate, cards.isPromo\nFROM cards JOIN rulings ON cards.uuid = rulings.uuid\nGROUP BY cards.name, cards.artist, cards.isPromo\nORDER BY MostRulingDate DESC, cards.isPromo DESC\nLIMIT 1;"]}, {"question_id": 350, "answer_sql": ["SELECT flavorText FROM cards WHERE name = 'Annul' AND number = '29';", "SELECT fd.flavorText, fd.language FROM foreign_data fd JOIN cards c ON c.uuid = fd.uuid WHERE c.name = 'Annul' AND c.number = '29';", "SELECT language FROM set_translations WHERE setCode = 'annul' AND translation = '29';"]}, {"question_id": 351, "answer_sql": ["SELECT cards.name FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Japanese' AND cards.isAlternative = 1;", "SELECT c.asciiName, c.name, c.originalReleaseDate, c.tcgplayerProductId, c.subtypes, c.rarity FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE fd.language = 'Japanese' AND c.isAlternative = 1;", "SELECT c.asciiName FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE fd.language = 'Japanese' AND c.isAlternative = 1;", "SELECT * FROM cards WHERE flavorText LIKE '%Japanese%';"]}, {"question_id": 352, "answer_sql": ["SELECT (SUM(cards.id) * 100.0) / (SELECT COUNT(id) FROM cards WHERE language = 'Chinese Simplified') AS percentage FROM foreign_data JOIN cards ON foreign_data.uuid = cards.uuid WHERE foreign_data.language = 'Chinese Simplified';", "SELECT (SUM(cards.id) * 100.0) / (SELECT COUNT(id) FROM cards WHERE language = 'Chinese Simplified') AS percentage FROM foreign_data JOIN cards ON foreign_data.uuid = cards.uuid"]}, {"question_id": 353, "answer_sql": ["SELECT sets.code, sets.mcmName, sets.totalSetSize FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.language = 'Italian';", "SELECT sets.code, sets.name, sets.releaseDate, set_translations.translation, sets.totalSetSize, sets.mcmName FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.language = 'Italian' ORDER BY sets.totalSetSize DESC;", "SELECT sets.code, sets.name, sets.releaseDate, set_translations.translation, sets.totalSetSize, sets.mcmName, legalities.format, cards.number FROM sets JOIN set_translations ON sets.code = set_translations.setCode JOIN legalities ON sets.code =legalities.uuid JOIN cards ON sets.code = cards.setCode WHERE set_translations.language = 'Italian' ORDER BY sets.releaseDate DESC;", "SELECT sets.code, sets.name, sets.totalSetSize FROM sets INNER JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.language = 'Italian';", "SELECT s.code, s.name, s.releaseDate, totalSetSize FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.language = 'Italian';"]}, {"question_id": 354, "answer_sql": ["SELECT COUNT(DISTINCT type) as NumberOfTypes FROM cards WHERE artist = 'Aaron Boyd';", "SELECT COUNT(DISTINCT types) FROM cards WHERE artist = 'Aaron Boyd';", "SELECT COUNT(DISTINCT cards.id) FROM cards JOIN schools_admins ON cards.artist = schools_admins.SchoolName WHERE cards.artist = 'Aaron Boyd' AND cards.types LIKE '%card art%';", "SELECT COUNT(*) FROM cards WHERE artist = 'Aaron Boyd';"]}, {"question_id": 355, "answer_sql": ["SELECT keywords FROM cards WHERE asciiName = 'Angel of Mercy';"]}, {"question_id": 356, "answer_sql": ["SELECT COUNT(*) FROM cards WHERE power = '*';", "SELECT COUNT(*) FROM cards WHERE type = 'Creature' AND power = '*';"]}, {"question_id": 357, "answer_sql": ["SELECT type FROM cards WHERE asciiName = 'Duress' AND promoTypes LIKE '%Duress%';", "SELECT promoTypes FROM cards WHERE name = 'Duress';"]}, {"question_id": 358, "answer_sql": ["SELECT borderColor FROM cards WHERE asciiName = 'Ancestor''s Chosen';"]}, {"question_id": 359, "answer_sql": ["SELECT originalType FROM cards WHERE asciiName = 'Ancestor''s Chosen';"]}, {"question_id": 360, "answer_sql": ["SELECT set_translations.translation FROM set_translations JOIN sets ON set_translations.setCode = sets.code WHERE sets.code = 'C13';", "SELECT language FROM set_translations WHERE translation = 'Angel of Mercy'"]}, {"question_id": 361, "answer_sql": ["SELECT COUNT(*) FROM cards \nINNER JOIN legalities ON cards.uuid = legalities.uuid \nWHERE legalities.status = 'restricted' AND cards.text IS NOT NULL AND cards.isTextless = 0;"]}, {"question_id": 362, "answer_sql": ["SELECT cards.text FROM cards JOIN rulings ON cards.uuid = rulings.uuid WHERE rulings.text LIKE '%Ancestor%' AND rulings.text LIKE '%Condemn%';", "SELECT text FROM cards WHERE name = 'Condemn';", "SELECT r.text as ruling_text FROM rulings as r JOIN cards as c ON r.uuid = c.uuid WHERE c.name = 'Condemn' AND r.date = (SELECT MAX(date) FROM rulings WHERE uuid = c.uuid);"]}, {"question_id": 363, "answer_sql": ["SELECT COUNT(*) FROM cards JOIN legalities ON cards.uuid = legalities.uuid JOIN sets ON cards.setCode = sets.code JOIN set_translations ON sets.code = set_translations.setCode WHERE legalities.status = 'restricted' AND cards.isStarter = 1 AND set_translations.language = 'en';"]}, {"question_id": 364, "answer_sql": ["SELECT status FROM legalities WHERE uuid = (SELECT uuid FROM cards WHERE name = 'Cloudchaser Eagle');", "SELECT status FROM legalities WHERE uuid = (SELECT uuid FROM cards WHERE asciiName = 'Cloudchaser Eagle');", "SELECT legalities.status FROM cards \nJOIN legalities ON cards.uuid =legalities.uuid \nWHERE cards.name = 'Cloudchaser Eagle'"]}, {"question_id": 365, "answer_sql": ["SELECT cards.type FROM cards WHERE asciiName = 'Benalish Knight';"]}, {"question_id": 366, "answer_sql": ["SELECT type FROM cards WHERE name = 'Benalish Knight';", "SELECT layout FROM cards WHERE name = 'Benalish Knight';", "SELECT flavorText FROM cards WHERE asciiName = 'Benalish Knight' AND type = 'Legendary Creature';"]}, {"question_id": 367, "answer_sql": ["SELECT DISTINCT cards.artist FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Phyrexian'", "SELECT DISTINCT artist FROM cards WHERE asciiName = 'Phyrexian' AND availability = 'in_print';"]}, {"question_id": 368, "answer_sql": []}, {"question_id": 369, "answer_sql": ["SELECT COUNT(*) FROM cards WHERE scryfallIllustrationId IN (SELECT id FROM foreign_data WHERE language = 'German' AND multiverseid = 1) AND isReprint = 1;"]}, {"question_id": 370, "answer_sql": ["SELECT COUNT(*) FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.borderColor = 'borderless' AND fd.language = 'Russian';", "SELECT c.* FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.borderColor = 'borderless' AND fd.language = 'Russian';", "SELECT COUNT(*) FROM cards WHERE borderColor = 'borderless' AND colorIndicator = 'Russian' AND isTextless = 1;"]}, {"question_id": 371, "answer_sql": ["SELECT (COUNT(foreign_data.id) * 1.0 / (SELECT COUNT(cards.id) FROM cards WHERE cards.isStorySpotlight = 1)) * 100 AS percentage_french_story_spotlight_cards FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE foreign_data.language = 'French' AND cards.isStorySpotlight = 1;", "SELECT (COUNT(foreign_data.id) * 1.0 / COUNT(cards.id)) * 100 AS percentage FROM foreign_data JOIN cards ON foreign_data.uuid = cards.uuid WHERE foreign_data.language = 'French' AND cards.isStorySpotlight = 1;", "SELECT (COUNT(foreign_data.id) * 1.0 / (SELECT COUNT(cards.id) FROM cards WHERE cards.isStorySpotlight = 1)) * 100 AS percentage_french_story_spotlight_cards FROM foreign_data WHERE foreign_data.language = 'French' AND foreign_data.id IN (SELECT uuid FROM cards WHERE cards.isStorySpotlight = 1);"]}, {"question_id": 372, "answer_sql": ["SELECT COUNT(*) FROM cards WHERE toughness = 99;"]}, {"question_id": 373, "answer_sql": ["SELECT cards.asciiName FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.name = 'Aaron Boyd';", "SELECT * FROM cards WHERE artist = 'Aaron Boyd';", "SELECT cards.asciiName FROM cards WHERE cards.artist = 'Aaron Boyd';"]}, {"question_id": 374, "answer_sql": ["SELECT COUNT(*) FROM cards WHERE isOversized = 1 AND borderColor = 'black' AND availability = 'mtgo';", "SELECT COUNT(*) FROM cards WHERE borderColor = 'black' AND availability = 'mtgo';"]}, {"question_id": 375, "answer_sql": ["SELECT cards.id FROM cards WHERE cards.convertedManaCost = 0;"]}, {"question_id": 376, "answer_sql": ["SELECT layout FROM cards WHERE keywords LIKE '%flying%';"]}, {"question_id": 377, "answer_sql": ["SELECT COUNT(*) FROM cards WHERE subtypes LIKE '%Summon - Angel%' AND subtypes NOT LIKE '%Angel%';"]}, {"question_id": 378, "answer_sql": ["SELECT c1.cardKingdomFoilId, c1.cardKingdomId FROM cards c1 JOIN cards c2 ON c1.cardKingdomId = c2.cardKingdomId WHERE c1.cardKingdomFoilId IS NOT NULL AND c2.cardKingdomFoilId IS NULL AND c1.cardKingdomId IS NOT NULL AND c2.cardKingdomId IS NULL;"]}, {"question_id": 379, "answer_sql": ["SELECT id FROM cards WHERE duelDeck = 'a';"]}, {"question_id": 380, "answer_sql": []}, {"question_id": 381, "answer_sql": ["SELECT cards.asciiName FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Chinese Simplified';"]}, {"question_id": 382, "answer_sql": []}, {"question_id": 383, "answer_sql": ["SELECT COUNT(*) FROM sets JOIN legalities ON sets.id = legalities.uuid JOIN cards ON sets.id = cards.id WHERE sets.name = 'Banned' AND cards.borderColor = 'white';"]}, {"question_id": 384, "answer_sql": ["SELECT cards.uuid, foreign_data.language FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'legacy' AND cards.id IN (SELECT id FROM legalities WHERE format = 'legacy');"]}, {"question_id": 385, "answer_sql": ["SELECT r.text FROM rulings r JOIN cards c ON r.uuid = c.uuid WHERE c.name = 'Beacon of Immortality';", "SELECT text FROM rulings WHERE uuid = (SELECT uuid FROM cards WHERE name = 'Beacon of Immortality');", "SELECT text FROM rulings WHERE uuid = 'your_uuid_here';"]}, {"question_id": 386, "answer_sql": ["SELECT COUNT(*), legalities.status FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE frameVersion = 'future' AND legalities.status = 'legal' GROUP BY legalities.status;"]}, {"question_id": 387, "answer_sql": ["SELECT cards.type, cards.setCode, sets.name, cards.colors FROM cards JOIN sets ON cards.setCode = sets.code WHERE sets.code = 'OGW';", "SELECT name, colors, colorIndicator FROM cards WHERE setCode = 'OGW';", "SELECT name, colors, cardKingdomId, cardKingdomFoilId FROM cards WHERE setCode = 'OGW';", "SELECT cards.type, cards.setCode, cards.colors FROM cards WHERE cards.setCode = 'OGW';"]}, {"question_id": 388, "answer_sql": ["SELECT c.name, st.translation, st.language FROM cards c JOIN set_translations st ON c.uuid = st.setCode WHERE c.convertedManaCost = 5 AND c.setCode = '10E';", "SELECT cards.name, set_translations.translation, sets.name as set_name FROM cards JOIN set_translations ON cards.setCode = set_translations.setCode JOIN sets ON cards.setCode = sets.code WHERE cards.convertedManaCost = 5 AND sets.code = '10E' AND set_translations.language IS NOT NULL;"]}, {"question_id": 389, "answer_sql": ["SELECT cards.name, rulings.date FROM cards JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.originalType = 'Creature - Elf' ORDER BY cards.name;", "SELECT cards.name, sets.releaseDate, rulings.date FROM cards JOIN sets ON cards.setCode = sets.code JOIN set_translations ON sets.code = set_translations.setCode JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.originalType = 'Creature - Elf' ORDER BY sets.releaseDate ASC, rulings.date ASC;", "SELECT c.name, c.originalType, r.date FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.originalType = 'Elf' ORDER BY c.name;", "SELECT cards.name, rulings.date FROM cards JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.originalType = 'Creature - Elf' ORDER BY rulings.date DESC;"]}, {"question_id": 390, "answer_sql": ["SELECT cards.colors, legalities.format FROM cards JOIN legalities ON cards.id = legalities.uuid WHERE cards.id BETWEEN 1 AND 20;", "SELECT cards.colors, legalities.format FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.id BETWEEN 1 AND 20;", "SELECT colors FROM cards WHERE id BETWEEN 1 AND 20;"]}, {"question_id": 391, "answer_sql": ["SELECT c.asciiName, fd.text, fd.language FROM cards c JOIN foreign_data fd ON c.id = fd.uuid WHERE c.originalType = 'Artifact' AND c.colors = 'B' AND fd.language IN ('English', 'French', 'German', 'Italian', 'Spanish') ORDER BY c.asciiName;", "SELECT c.asciiName, fd.text, fd.language FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.originalType = 'Artifact' AND c.colors = 'B' AND fd.language IN ('English', 'French', 'German', 'Italian', 'Spanish') ORDER BY c.asciiName;", "SELECT cards.* FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.originalType = 'Artifact' AND cards.colors = 'B' AND foreign_data.language IN ('English', 'French', 'German', 'Italian', 'Spanish')", "SELECT cards.asciiName, foreign_data.language, foreign_data.text FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.originalType = 'Artifact' AND cards.colors = 'B' AND foreign_data.language IS NOT NULL;", "SELECT cards.id, cards.name, foreign_data.text FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.type = 'Artifact' AND cards.colors = 'B' AND foreign_data.language IS NOT NULL;"]}, {"question_id": 392, "answer_sql": []}, {"question_id": 393, "answer_sql": ["SELECT COUNT(*) FROM cards WHERE artist = 'John Avon' AND hasFoil = 1 AND isOversized = 0;", "SELECT COUNT(*) FROM cards WHERE artist = 'John Avon' AND hasFoil = 1 AND cardKingdomId = cardKingdomFoilId AND cardKingdomFoilId IS NOT NULL;"]}, {"question_id": 394, "answer_sql": ["SELECT COUNT(*) FROM cards WHERE borderColor = 'white' AND cardKingdomId is not null;", "SELECT COUNT(*) FROM cards WHERE borderColor = 'white' AND cardKingdomFoilId = cardKingdomId AND cardKingdomId is not null;"]}, {"question_id": 395, "answer_sql": ["SELECT COUNT(*) FROM cards WHERE artist = 'UDON' AND availability = 'mtgo' AND hand = -1;"]}, {"question_id": 396, "answer_sql": ["SELECT COUNT(*) FROM cards WHERE frameVersion = '1993' AND availability = 'paper' AND hasContentWarning = 1;"]}, {"question_id": 397, "answer_sql": ["SELECT manaCost FROM cards WHERE layout = 'normal' AND frameVersion = 2003 AND borderColor = 'black' AND availability IN ('paper', 'mtgo');", "SELECT manaCost FROM cards WHERE layout = 'normal' AND frameVersion = 2003 AND borderColor = 'black' AND availability = 'paper' OR availability = 'mtgo';"]}, {"question_id": 398, "answer_sql": ["SELECT SUM(cards.convertedManaCost) as total_unconverted_mana_cost FROM cards JOIN sets ON cards.mcmId = sets.id WHERE cards.artist = 'Rob Alexander';", "SELECT SUM(convertedManaCost) as TotalCost FROM cards WHERE artist = 'Rob Alexander';", "SELECT SUM(convertedManaCost) as total_cost FROM cards JOIN sets ON cards.mcmId = sets.mcmId WHERE artist = 'Rob Alexander';", "SELECT cards.convertedManaCost FROM cards JOIN sets ON cards.mcmId = sets.mcmId WHERE cards.artist = 'Rob Alexander'"]}, {"question_id": 399, "answer_sql": ["SELECT cards.type, cards.subtypes, cards.supertypes FROM cards WHERE availability = 'arena';", "SELECT DISTINCT cards.type, cards.subtypes, cards.supertypes FROM cards WHERE cards.availability = 'arena';", "SELECT type FROM cards WHERE availability = 'arena';", "SELECT types FROM cards WHERE availability = 'arena';"]}, {"question_id": 400, "answer_sql": ["SELECT set_translations.setCode FROM set_translations JOIN sets ON set_translations.setCode = sets.code WHERE set_translations.language = 'Spanish' AND set_translations.translation = 'Los codigos de la set'", "SELECT setCode FROM set_translations WHERE language = 'Spanish';"]}, {"question_id": 401, "answer_sql": ["SELECT (COUNT(id) * 1.0) / (SELECT COUNT(*) FROM cards WHERE frameEffects = 'legendary') * 100 AS percentage FROM cards WHERE frameEffects = 'legendary' AND hand = '+3';"]}, {"question_id": 402, "answer_sql": ["SELECT id, name, percentage FROM ( SELECT id, name, CASE WHEN isStorySpotlight = 1 AND isTextless = 1 THEN 1 ELSE 0 END as percentage FROM cards WHERE isStorySpotlight = 1 ) as story_spotlight_textless ORDER BY id;", "SELECT c.id, c.name, (SELECT COUNT(*) FROM foreign_data fd WHERE fd.uuid = c.uuid) as text_box_count, (SELECT COUNT(*) FROM foreign_data fd WHERE fd.uuid = c.uuid AND fd.text IS NOT NULL) as text_box_count_with_text FROM cards c WHERE c.isStorySpotlight = 1 AND c.isTextless = 1 ORDER BY c.id;", "SELECT id, (CASE WHEN isStorySpotlight = 1 AND isTextless = 1 THEN 100 ELSE 0 END) as percentage FROM cards WHERE isStorySpotlight = 1 ORDER BY id;"]}, {"question_id": 403, "answer_sql": []}, {"question_id": 404, "answer_sql": ["SELECT set_translations.translation FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE sets.baseSetSize = 309 AND sets.baseSetSize = 309 AND set_translations.language IS NOT NULL;", "SELECT set_translations.translation FROM set_translations JOIN sets ON set_translations.setCode = sets.code WHERE sets.baseSetSize = 309 AND set_translations.language IN ('English', 'Spanish', 'French', 'German', 'Italian', 'Portuguese', 'Russian', 'Japanese', 'Chinese', 'Korean', 'Turkish');", "SELECT set_translations.translation FROM set_translations WHERE set_translations.setCode = ( SELECT sets.code FROM sets WHERE sets.baseSetSize = 309 ) AND set_translations.language IN ( SELECT sets.name FROM sets WHERE sets.baseSetSize = 309 );"]}, {"question_id": 405, "answer_sql": ["SELECT COUNT(*) FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.language = 'Portuguese (Brasil)' AND sets.block = 'Commander'"]}, {"question_id": 406, "answer_sql": ["SELECT c.* FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.types LIKE '%Creature%' AND l.status = 'legal';"]}, {"question_id": 407, "answer_sql": ["SELECT types.type FROM cards AS types WHERE types.subtypes IS NOT NULL AND types.supertypes IS NOT NULL AND types.subtypes = 'German' AND types.supertypes = 'Card';"]}, {"question_id": 408, "answer_sql": ["SELECT COUNT(*) FROM cards WHERE power IS NULL OR power = '*';", "SELECT COUNT(*) FROM cards WHERE power = '*';", "SELECT COUNT(*) FROM cards WHERE power = '*' AND types LIKE '%Triggered Ability%';"]}, {"question_id": 409, "answer_sql": ["SELECT COUNT(*) FROM cards WHERE side IS NULL AND text LIKE '%This is a triggered mana ability%' AND multiverseid NOT IN (SELECT multiverseid FROM foreign_data WHERE language = 'en' AND flavorText LIKE '%This is a triggered mana ability%');"]}, {"question_id": 410, "answer_sql": []}, {"question_id": 411, "answer_sql": ["SELECT artist FROM cards WHERE text = 'Das perfekte Gegenmittel zu einer dichten Formation';"]}, {"question_id": 412, "answer_sql": ["SELECT foreign_data.name FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.layout = 'normal' AND cards.borderColor = 'black' AND cards.type = 'Creature' AND foreign_data.language = 'French' AND foreign_data.name IS NOT NULL;"]}, {"question_id": 413, "answer_sql": ["SELECT COUNT(*) FROM cards \nINNER JOIN rulings ON cards.uuid = rulings.uuid \nWHERE rarity = 'rare' AND rulings.date = '2009-01-10';"]}, {"question_id": 414, "answer_sql": ["SELECT set_translations.translation FROM set_translations WHERE set_translations.setCode = ( SELECT sets.code FROM sets WHERE sets.baseSetSize = 180 );", "SELECT translation FROM set_translations WHERE setCode = 'Ravnica' AND language = 'English';", "SELECT set_translations.translation FROM set_translations JOIN sets ON set_translations.setCode = sets.code WHERE sets.baseSetSize = 180;", "SELECT set_translations.language FROM set_translations JOIN sets ON set_translations.setCode = sets.code WHERE sets.baseSetSize = 180;"]}, {"question_id": 415, "answer_sql": []}, {"question_id": 416, "answer_sql": []}, {"question_id": 417, "answer_sql": ["SELECT COUNT(setCode) * 100 / (SELECT COUNT(*) FROM sets WHERE type = 'expansion') AS percentage FROM set_translations WHERE language = 'Japanese';", "SELECT COUNT(setCode) * 100 / (SELECT COUNT(*) FROM sets WHERE type = 'expansion') AS percentage FROM set_translations WHERE language = 'Japanese' AND setCode IN (SELECT code FROM sets WHERE type = 'expansion');", "SELECT COUNT(DISTINCT cards.setCode) * 1.0 / COUNT(DISTINCT foreign_data.language) * 100 AS percentage FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Japanese' AND cards.type = 'expansion'"]}, {"question_id": 418, "answer_sql": ["SELECT printings FROM cards WHERE artist = 'Daren Bader' AND availability = 'in_print';", "SELECT printings FROM cards WHERE artist = 'Daren Bader';", "SELECT layout FROM cards WHERE artist = 'Daren Bader';"]}, {"question_id": 419, "answer_sql": ["SELECT COUNT(*) FROM cards WHERE borderColor = 'borderless' AND edhrecRank > 12000;"]}, {"question_id": 420, "answer_sql": ["SELECT COUNT(*) FROM cards WHERE isOversized = 1 AND isReprint = 1 AND isPromo = 1;"]}, {"question_id": 421, "answer_sql": ["SELECT c.name, c.type, c.power, c.promoTypes FROM cards c JOIN ( SELECT uuid FROM cards WHERE power IS NULL AND promoTypes LIKE '%arenaleague%' ORDER BY name ASC LIMIT 3 ) u ON c.uuid = u.uuid ORDER BY c.name ASC;", "SELECT c.name, c.type, c.power, c.promoTypes FROM cards c JOIN (SELECT uuid FROM cards WHERE power IS NULL OR power = '*' AND promoTypes LIKE '%arenaleague%') u ON c.uuid = u.uuid ORDER BY c.name ASC LIMIT 3;", "SELECT * FROM cards WHERE power IS NULL OR power = '*' AND types LIKE '%unknown%' AND types LIKE '%arenaleague%' ORDER BY types ASC LIMIT 3;", "SELECT c.name, c.types, c.promoTypes FROM cards c WHERE c.power IS NULL OR c.power = '*' AND c.promoTypes LIKE '%arenaleague%' ORDER BY c.name ASC LIMIT 3;", "SELECT name FROM cards WHERE power = '*' AND types LIKE '%unknown%' AND (promoTypes LIKE '%arenaleague%' OR promoTypes LIKE '%Arena League%') ORDER BY name ASC LIMIT 3;"]}, {"question_id": 422, "answer_sql": ["SELECT language FROM foreign_data WHERE multiverseid = 149934;", "SELECT foreign_data.language FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.multiverseid = 149934;"]}, {"question_id": 423, "answer_sql": ["SELECT cardKingdomFoilId, cardKingdomId FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL ORDER BY cardKingdomFoilId ASC LIMIT 3;", "SELECT c1.id, c1.cardKingdomFoilId, c1.cardKingdomId FROM cards c1 JOIN ( SELECT cardKingdomFoilId, cardKingdomId, id FROM cards WHERE cardKingdomFoilId is not null AND cardKingdomId is not null ORDER BY cardKingdomFoilId ASC, cardKingdomId ASC ) c2 ON c1.cardKingdomFoilId = c2.cardKingdomFoilId AND c1.cardKingdomId = c2.cardKingdomId ORDER BY c1.id ASC LIMIT 3;", "SELECT c1.cardKingdomFoilId, c1.cardKingdomId, c1.id FROM cards c1 JOIN ( SELECT cardKingdomFoilId, cardKingdomId, id FROM cards WHERE cardKingdomFoilId is not null AND cardKingdomId is not null ORDER BY cardKingdomFoilId ASC, cardKingdomId ASC ) c2 ON c1.cardKingdomFoilId = c2.cardKingdomFoilId AND c1.cardKingdomId = c2.cardKingdomId GROUP BY c1.cardKingdomFoilId, c1.cardKingdomId ORDER BY c1.id LIMIT 3;", "SELECT c1.cardKingdomFoilId, c1.cardKingdomId, c1.id FROM cards c1 JOIN ( SELECT cardKingdomFoilId, cardKingdomId, id FROM cards WHERE cardKingdomFoilId is not null AND cardKingdomId is not null ORDER BY cardKingdomFoilId, cardKingdomId ) c2 ON c1.cardKingdomFoilId = c2.cardKingdomFoilId AND c1.cardKingdomId = c2.cardKingdomId ORDER BY c1.cardKingdomFoilId, c1.cardKingdomId LIMIT 3;", "SELECT c1.cardKingdomFoilId, c1.cardKingdomId, c1.id FROM cards c1 JOIN ( SELECT cardKingdomFoilId, cardKingdomId, id FROM cards WHERE cardKingdomFoilId is not null AND cardKingdomId is not null ORDER BY cardKingdomFoilId ASC, cardKingdomId ASC ) c2 ON c1.cardKingdomFoilId = c2.cardKingdomFoilId AND c1.cardKingdomId = c2.cardKingdomId WHERE c1.id IN ( SELECT id FROM cards WHERE power IS NOT NULL ORDER BY power DESC LIMIT 3 ) ORDER BY c1.cardKingdomFoilId ASC, c1.cardKingdomId ASC;"]}, {"question_id": 424, "answer_sql": ["SELECT COUNT(id) / (SELECT COUNT(*) FROM cards WHERE isTextless = 1) * 100 as proportion_of_cards_without_textbox_with_normal_layout FROM cards;", "SELECT COUNT(id) / (SELECT COUNT(*) FROM cards WHERE isTextless = 1) * 100 as proportion FROM cards WHERE layout = 'normal';", "SELECT COUNT(*) / (SELECT COUNT(*) FROM cards WHERE isTextless = 1 AND layout = 'normal') * 100 as proportion FROM cards WHERE isTextless = 0;", "SELECT COUNT(id) / COUNT(*) * 100 AS proportion FROM cards WHERE isTextless = 1 AND layout = 'normal';"]}, {"question_id": 425, "answer_sql": ["SELECT cards.id, cards.number FROM cards WHERE cards.otherFaceIds IS NULL AND cards.subtypes LIKE '%Angel%' AND cards.subtypes LIKE '%Wizard%'", "SELECT cards.number FROM cards WHERE cards.otherFaceIds IS NULL AND cards.subtypes LIKE '%Angel%' AND cards.subtypes LIKE '%Wizard%'", "SELECT uuid FROM cards WHERE subtypes LIKE '%Angel%' AND subtypes LIKE '%Wizard%' AND otherFaceIds IS NULL;", "SELECT id FROM cards WHERE otherFaceIds = '' AND subtypes LIKE '%Angel%' AND subtypes LIKE '%Wizard%' AND side IS NULL;"]}, {"question_id": 426, "answer_sql": ["SELECT sets.code, sets.name FROM sets WHERE sets.mtgoCode IS NULL ORDER BY sets.name ASC LIMIT 3;", "SELECT s.name FROM sets s WHERE s.mtgoCode IS NULL OR s.mtgoCode = '' ORDER BY s.name ASC LIMIT 3;", "SELECT sets.name, sets.mtgoCode FROM sets WHERE sets.mtgoCode IS NULL ORDER BY sets.name ASC LIMIT 3;"]}, {"question_id": 427, "answer_sql": ["SELECT DISTINCT `set_translations`.`language` FROM `set_translations` JOIN `sets` ON `set_translations`.`setCode` = `sets`.`code` WHERE `sets`.`mcmName` = 'Archenemy' AND `sets`.`code` = 'ARC';", "SELECT DISTINCT set_translations.translation FROM set_translations JOIN sets ON set_translations.setCode = sets.code WHERE sets.name = 'Archenemy' AND sets.code = 'ARC';", "SELECT DISTINCT set_translations.translation FROM set_translations JOIN sets ON set_translations.setCode = sets.code WHERE sets.name = 'Arcenary' AND sets.code = 'ARC';"]}, {"question_id": 428, "answer_sql": ["SELECT sets.name, set_translations.translation FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE sets.id = 5;"]}, {"question_id": 429, "answer_sql": ["SELECT set_translations.translation as language, sets.type as expansion_type FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE sets.code = '206';"]}, {"question_id": 430, "answer_sql": ["SELECT sets.code, sets.mcmId FROM sets JOIN set_translations ON sets.code = set_translations.setCode JOIN cards ON sets.code = cards.setCode WHERE set_translations.language = 'Italian' AND sets.block = 'Shadowmoor' GROUP BY sets.code, sets.mcmId ORDER BY sets.mcmId DESC LIMIT 2;", "SELECT sets.code, sets.mcmId, set_translations.translation FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.language = 'Italian' AND sets.block = 'Shadowmoor' ORDER BY sets.mcmId DESC LIMIT 2;", "SELECT sets.id, sets.name FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.language = 'Italian' AND sets.block = 'Shadowmoor' ORDER BY sets.name ASC LIMIT 2;"]}, {"question_id": 431, "answer_sql": []}, {"question_id": 432, "answer_sql": []}, {"question_id": 433, "answer_sql": []}, {"question_id": 434, "answer_sql": ["SELECT COUNT(*) FROM cards JOIN sets ON cards.setCode = sets.code JOIN set_translations ON sets.code = set_translations.setCode JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE set_translations.language = 'Japanese' AND sets.mtgoCode IS NULL;", "SELECT COUNT(*) FROM cards JOIN sets ON cards.setCode = sets.code JOIN set_translations ON sets.code = set_translations.setCode JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Japanese' AND sets.mtgoCode IS NULL OR sets.mtgoCode = '' AND sets.isNonFoilOnly = 0;"]}, {"question_id": 435, "answer_sql": ["SELECT c.id, c.name FROM cards c WHERE c.borderColor = 'black' AND c.id IN ( SELECT fd.uuid FROM foreign_data fd WHERE fd.language = 'en' AND fd.text LIKE '%border with black color%' );"]}, {"question_id": 436, "answer_sql": ["SELECT uuid FROM cards WHERE frameEffects = 'extendedart';", "SELECT cards.id FROM cards WHERE frameEffects = 'extendedart';"]}, {"question_id": 437, "answer_sql": ["SELECT name FROM cards WHERE borderColor = 'black' AND isFullArt = 1;", "SELECT name FROM cards WHERE isFullArt = 1;", "SELECT asciiName FROM cards WHERE borderColor = 'black' AND isFullArt = 1;"]}, {"question_id": 438, "answer_sql": ["SELECT translation FROM set_translations WHERE setCode = '174';"]}, {"question_id": 439, "answer_sql": ["SELECT sets.name FROM sets WHERE sets.code = 'ALL';"]}, {"question_id": 440, "answer_sql": ["SELECT foreign_data.flavorText FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.asciiName = 'A Pedra Fellwar';"]}, {"question_id": 441, "answer_sql": ["SELECT code FROM sets WHERE releaseDate = '2007-07-13';", "SELECT sets.code FROM sets WHERE sets.releaseDate = '07/13/2007';"]}, {"question_id": 442, "answer_sql": ["SELECT sets.baseSetSize, sets.code FROM sets JOIN ( SELECT block, COUNT(*) as count FROM sets WHERE block IN ('Masques', 'Mirage') GROUP BY block ) as block_counts ON sets.block = block_counts.block WHERE sets.block IN ('Masques', 'Mirage') ORDER BY sets.baseSetSize DESC;", "SELECT sets.baseSetSize, sets.code FROM sets JOIN ( SELECT block FROM sets WHERE name = 'Masques' OR name = 'Mirage' ) AS blocks ON sets.block = blocks.block;", "SELECT baseSetSize, code FROM sets WHERE name IN ('Masques', 'Mirage');", "SELECT sets.baseSetSize, sets.code FROM sets WHERE sets.block = 'Masques' OR sets.block = 'Mirage';"]}, {"question_id": 443, "answer_sql": ["SELECT code FROM sets WHERE type = 'expansion';"]}, {"question_id": 444, "answer_sql": ["SELECT foreign_data.name, cards.type FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.watermark = 'boros' AND cards.type IS NOT NULL;", "SELECT c.name, c.type FROM cards c WHERE c.watermark = 'Boros'", "SELECT name FROM cards WHERE watermark = 'boros';"]}, {"question_id": 445, "answer_sql": ["SELECT fd.language, fd.flavorText FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.watermark = 'colorpie'", "SELECT foreign_data.language, foreign_data.flavorText, cards.type FROM foreign_data JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.watermark = 'colorpie'"]}, {"question_id": 446, "answer_sql": []}, {"question_id": 447, "answer_sql": ["SELECT sets.code FROM sets WHERE sets.type = 'Commander';"]}, {"question_id": 448, "answer_sql": ["SELECT foreign_data.name, cards.type FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.watermark = 'abzan' AND cards.type IS NOT NULL;", "SELECT name, type FROM cards WHERE uuid IN (SELECT uuid FROM foreign_data WHERE watermark = 'abzan');", "SELECT foreign_data.name, cards.type FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.watermark = 'abzan' AND foreign_data.language = 'en';"]}, {"question_id": 449, "answer_sql": ["SELECT language FROM foreign_data WHERE name = 'azorius watermark'", "SELECT foreign_data.language, cards.type FROM foreign_data JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.watermark = 'azorius' AND foreign_data.language IS NOT NULL;"]}, {"question_id": 450, "answer_sql": ["SELECT COUNT(*) FROM cards WHERE artist = 'Aaron Miller' AND cardKingdomId is not null;"]}, {"question_id": 451, "answer_sql": ["SELECT COUNT(*) FROM cards AS c JOIN sets AS s ON c.setCode = s.code AND c.mcmId = s.mcmId WHERE c.hand = '+' AND c.availability LIKE '%paper%' AND s.isFoilOnly = 0;"]}, {"question_id": 452, "answer_sql": []}, {"question_id": 453, "answer_sql": ["SELECT convertedManaCost FROM cards WHERE asciiName = 'Ancestor`s Chosen';"]}, {"question_id": 454, "answer_sql": ["SELECT COUNT(*) FROM cards WHERE cardKingdomId IN (SELECT id FROM sets WHERE borderColor = 'white') AND power = '*' OR power IS NULL;", "SELECT COUNT(*) FROM cards WHERE borderColor = 'white' AND power = '*' OR power IS NULL;"]}, {"question_id": 455, "answer_sql": ["SELECT c1.name FROM cards c1 JOIN cards c2 ON c1.uuid = c2.otherFaceIds WHERE c1.promoTypes LIKE '%promo%' AND c2.promoTypes LIKE '%promo%' AND c1.side IS NOT NULL AND c2.side IS NOT NULL AND c1.side != c2.side;", "SELECT DISTINCT cards.name FROM cards WHERE cards.isPromo = 1 AND cards.side IS NOT NULL;", "SELECT c.name FROM cards c WHERE c.isPromo = 1 AND c.side IS NOT NULL AND c.side != '' GROUP BY c.name HAVING COUNT(DISTINCT c.side) > 1;", "SELECT DISTINCT cards.name FROM cards WHERE cards.promoTypes = 'Painting' AND cards.side IS NOT NULL;"]}, {"question_id": 456, "answer_sql": ["SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer';", "SELECT type FROM cards WHERE name = 'Molimo, Maro-Sorcerer';", "SELECT types FROM cards WHERE name = 'Molimo, Maro-Sorcerer';", "SELECT type FROM cards WHERE asciiName = 'Molimo, Maro-Sorcerer';"]}, {"question_id": 457, "answer_sql": []}, {"question_id": 458, "answer_sql": ["SELECT COUNT(*) FROM cards WHERE borderColor = 'black' AND availability LIKE '%arena,mtgo%' AND availability LIKE '%arena,mtgo%';", "SELECT COUNT(*) FROM cards WHERE isOversized = 1 AND availability LIKE '%arena,mtgo%' AND borderColor = 'black'"]}, {"question_id": 459, "answer_sql": ["SELECT name, convertedManaCost FROM cards WHERE name IN ('Serra Angel', 'Shrine Keeper') ORDER BY convertedManaCost DESC LIMIT 1;", "SELECT name, convertedManaCost FROM cards ORDER BY convertedManaCost DESC LIMIT 1;", "SELECT cards.convertedManaCost AS 'Card Cost', cards.name AS 'Card Name' FROM cards WHERE cards.name IN ('Serra Angel', 'Shrine Keeper') ORDER BY cards.convertedManaCost DESC LIMIT 1;", "SELECT cards.convertedManaCost AS 'Card Cost' FROM cards WHERE name IN ('Serra Angel', 'Shrine Keeper') ORDER BY convertedManaCost DESC LIMIT 1;"]}, {"question_id": 460, "answer_sql": ["SELECT artist FROM cards WHERE flavorName = 'Battra, Dark Destroyer';", "SELECT artist FROM cards WHERE asciiName = 'Battra, Dark Destroyer';"]}, {"question_id": 461, "answer_sql": ["SELECT name, convertedManaCost, frameVersion FROM cards WHERE convertedManaCost = ( SELECT MAX(convertedManaCost) FROM cards WHERE frameVersion = '2003' ) ORDER BY convertedManaCost DESC, frameVersion ASC LIMIT 3;", "SELECT name, convertedManaCost, frameVersion FROM cards WHERE frameVersion = '2003' ORDER BY convertedManaCost DESC LIMIT 3;", "SELECT name FROM cards WHERE convertedManaCost = ( SELECT MAX(convertedManaCost) FROM cards WHERE frameVersion = '2003' ) ORDER BY convertedManaCost DESC LIMIT 3;"]}, {"question_id": 462, "answer_sql": ["SELECT sets.name FROM sets JOIN cards ON sets.code = cards.setCode WHERE cards.name = 'Ancestor''s Chosen';", "SELECT sets.name FROM sets JOIN cards ON sets.code = cards.setCode WHERE cards.type = 'Foreign' AND cards.types LIKE '%Ancestor%' AND sets.name LIKE '%Italian%';"]}, {"question_id": 463, "answer_sql": ["SELECT COUNT(*) FROM set_translations WHERE setCode = (SELECT setCode FROM cards WHERE name = 'Angel of Mercy');", "SELECT COUNT(*) FROM set_translations WHERE setCode IN (SELECT setCode FROM cards WHERE name LIKE '%Angel of Mercy%');", "SELECT COUNT(*) FROM set_translations WHERE translation = 'Angel of Mercy'"]}, {"question_id": 464, "answer_sql": ["SELECT c.name FROM cards c JOIN sets s ON c.setCode = s.code WHERE s.name = 'Hauptset Zehnte Edition' AND s.mcmId = 1050;", "SELECT cards.name FROM cards JOIN set_translations ON cards.setCode = set_translations.setCode WHERE set_translations.translation = 'Hauptset Zehnte Edition';"]}, {"question_id": 465, "answer_sql": ["SELECT * FROM cards WHERE types LIKE '%Ancestor%' AND flavorText LIKE '%Korean%'", "SELECT COUNT(*) FROM cards WHERE text LIKE '%Ancestor%' AND types LIKE '%Korean%';"]}, {"question_id": 466, "answer_sql": ["SELECT COUNT(*) FROM cards WHERE setCode = 'HPA01' AND artist = 'Adam Rex';"]}, {"question_id": 467, "answer_sql": ["SELECT COUNT(*) FROM sets WHERE code = 'Hauptset Zehnte Edition';"]}, {"question_id": 468, "answer_sql": ["SELECT set_translations.translation FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE sets.code = 'Eighth Edition' AND set_translations.language = 'Simplified Chinese';"]}, {"question_id": 469, "answer_sql": ["SELECT mtgoId FROM cards WHERE name = 'Angel of Mercy';", "SELECT COUNT(*) FROM cards WHERE name = 'Angel of Mercy' AND isOnlineOnly = 1;", "SELECT sets.mtgoCode FROM sets WHERE sets.name = 'Angel of Mercy' AND sets.isOnlineOnly = 1;"]}, {"question_id": 470, "answer_sql": ["SELECT sets.releaseDate FROM sets WHERE sets.code = 'Ancestor''s Chosen';"]}, {"question_id": 471, "answer_sql": ["SELECT type FROM sets WHERE code = 'Hauptset Zehnte Edition';"]}, {"question_id": 472, "answer_sql": ["SELECT COUNT(*) FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE sets.block = 'Ice Age' AND set_translations.language = 'Italian';", "SELECT COUNT(*) FROM sets WHERE code = 'Ice Age' AND (SELECT COUNT(*) FROM set_translations WHERE set_translations.setCode = sets.code AND set_translations.language = 'Italian') > 0;"]}, {"question_id": 473, "answer_sql": ["SELECT s.name as set_name, st.translation as set_translation FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE s.code = 'Adarkar Valkyrie' AND s.isForeignOnly = 1;", "SELECT * FROM sets WHERE isForeignOnly = 1;"]}, {"question_id": 474, "answer_sql": ["SELECT COUNT(*) FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.language = 'Italian' AND sets.baseSetSize < 10;"]}, {"question_id": 475, "answer_sql": ["SELECT COUNT(*) FROM cards WHERE borderColor = 'black' AND setCode = 'Coldsnap';"]}, {"question_id": 476, "answer_sql": ["SELECT name, convertedManaCost FROM cards WHERE setCode = 'Coldsnap' ORDER BY convertedManaCost DESC LIMIT 1;"]}, {"question_id": 477, "answer_sql": ["SELECT artist FROM cards WHERE cardKingdomId IN ('Coldsnap', 'Jeremy Jarvis', 'Aaron Miller', 'Chippy') AND artist IN ('Jeremy Jarvis', 'Aaron Miller','Chippy');"]}, {"question_id": 478, "answer_sql": ["SELECT c.name, c.number, s.name as set_name FROM cards c JOIN sets s ON c.setCode = s.code WHERE c.number = 4 AND s.name = 'Coldsnap';", "SELECT cards.number, cards.name, sets.name FROM cards JOIN sets ON cards.setCode = sets.code WHERE sets.name = 'Coldsnap' AND cards.number = 4;", "SELECT cards.number, cards.name, sets.name as set_name FROM cards JOIN sets ON cards.setCode = sets.code WHERE cards.setCode = 'Coldsnap' AND cards.number = 4;"]}, {"question_id": 479, "answer_sql": ["SELECT COUNT(*) FROM cards JOIN sets ON cards.mcmId = sets.id WHERE sets.name = 'Coldsnap' AND cards.convertedManaCost > 5 AND cards.power = '*' OR cards.power IS NULL;", "SELECT COUNT(*) FROM cards JOIN sets ON cards.mcmId = sets.mcmId WHERE sets.name = 'Coldsnap' AND cards.convertedManaCost > 5 AND cards.power = '*' OR cards.power IS NULL;", "SELECT COUNT(*) FROM cards WHERE convertedManaCost > 5 AND setCode = 'Coldsnap' AND power = '*' OR power IS NULL;", "SELECT COUNT(*) FROM cards WHERE setCode = 'Coldsnap' AND convertedManaCost > 5 AND power = '*'"]}, {"question_id": 480, "answer_sql": ["SELECT foreign_data.flavorText FROM foreign_data JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.name = 'Ancestor''s Chosen' AND foreign_data.language = 'Italian';", "SELECT foreign_data.text FROM foreign_data JOIN cards ON foreign_data.uuid = cards.uuid WHERE foreign_data.language = 'Italian' AND cards.name = 'Ancestor''s Chosen';", "SELECT foreign_data.flavorText FROM foreign_data WHERE foreign_data.name = 'Ancestor''s Chosen' AND foreign_data.language = 'Italian';"]}, {"question_id": 481, "answer_sql": ["SELECT fd.language FROM foreign_data fd JOIN cards c ON fd.uuid = c.uuid WHERE c.name = 'Ancestor''s Chosen' AND fd.text IS NOT NULL;", "SELECT flavorText FROM foreign_data WHERE name = 'Ancestor''s Chosen' AND flavorText IS NOT NULL;"]}, {"question_id": 482, "answer_sql": ["SELECT type FROM cards WHERE name = 'Ancestor''s Chosen';"]}, {"question_id": 483, "answer_sql": ["SELECT fd.flavorText FROM foreign_data fd JOIN cards c ON c.uuid = fd.uuid JOIN sets s ON s.code = c.setCode WHERE s.code = 'Coldsnap' AND fd.language = 'Italian';"]}, {"question_id": 484, "answer_sql": ["SELECT c.asciiName, c.name, c.convertedManaCost FROM cards c JOIN set_translations st ON c.uuid = st.setCode WHERE st.language = 'Italian' AND c.setCode = 'Coldsnap' ORDER BY c.convertedManaCost DESC LIMIT 1;"]}, {"question_id": 485, "answer_sql": ["SELECT r.date FROM rulings r JOIN cards c ON c.uuid = r.uuid WHERE c.asciiName = 'Reminisce' ORDER BY r.date DESC LIMIT 1;"]}, {"question_id": 486, "answer_sql": ["SELECT SUM(convertedManaCost = 7) / SUM(convertedManaCost) * 100 AS percentage FROM cards WHERE setCode = 'cs2015';"]}, {"question_id": 487, "answer_sql": ["SELECT (SUM(cardKingdomId IS NOT NULL) * 100.0) / (SELECT COUNT(*) FROM cards WHERE setCode = 'Coldsnap') AS percentage FROM cards WHERE setCode = 'Coldsnap' AND cardKingdomFoilId = cardKingdomId AND cardKingdomId is not null;"]}, {"question_id": 488, "answer_sql": ["SELECT code FROM sets WHERE releaseDate = '2017-07-14';"]}, {"question_id": 489, "answer_sql": ["SELECT keyruneCode FROM sets WHERE code = 'PKHC';"]}, {"question_id": 490, "answer_sql": ["SELECT sets.mcmId FROM sets WHERE sets.code = 'SS2';"]}, {"question_id": 491, "answer_sql": ["SELECT sets.mcmName FROM sets WHERE sets.releaseDate = '2017-06-09';"]}, {"question_id": 492, "answer_sql": ["SELECT type FROM sets WHERE code = 'From the Vault: Lore';"]}, {"question_id": 493, "answer_sql": ["SELECT parentCode FROM sets WHERE name = 'Commander 2014 Oversized';", "SELECT parentCode FROM sets WHERE code = 'Commander 2014 Oversized';"]}, {"question_id": 494, "answer_sql": ["SELECT c.id, c.asciiName, c.originalReleaseDate, c.rarity, c.subtypes, fd.text as rulingText FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.asciiName = 'Jim Pavelec' AND c.hasContentWarning = 1 AND c.isTextless = 1;"]}, {"question_id": 495, "answer_sql": ["SELECT releaseDate FROM sets WHERE name = 'Evacuation';", "SELECT sets.releaseDate FROM sets JOIN cards ON sets.code = cards.setCode WHERE cards.name = 'Evacuation';"]}, {"question_id": 496, "answer_sql": ["SELECT COUNT(*) FROM cards WHERE setCode = 'Rinascita di Alara';", "SELECT sets.totalSetSize FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.translation = 'Rinascita di Alara';", "SELECT baseSetSize FROM sets WHERE code = 'Rinascita di Alara';"]}, {"question_id": 497, "answer_sql": ["SELECT type FROM sets WHERE code = 'Huiti\u00e8me \u00e9dition';"]}, {"question_id": 498, "answer_sql": ["SELECT sets.name \nFROM sets \nINNER JOIN set_translations ON sets.code = set_translations.setCode \nWHERE set_translations.language = 'French' AND set_translations.translation = 'Tendo Ice Bridge';"]}, {"question_id": 499, "answer_sql": ["SELECT COUNT(*) FROM set_translations WHERE setCode = 'Salvat 2011';"]}, {"question_id": 500, "answer_sql": ["SELECT sets.name FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.language = 'Japanese' AND sets.name = 'Fellwar Stone';"]}, {"question_id": 501, "answer_sql": ["SELECT name, convertedManaCost FROM cards WHERE setCode = 'Journey into Nyx Hero''s Path' ORDER BY convertedManaCost DESC LIMIT 1;"]}, {"question_id": 502, "answer_sql": ["SELECT sets.releaseDate FROM sets WHERE sets.code = 'Ola de fr\u00edo'"]}, {"question_id": 503, "answer_sql": ["SELECT type FROM sets WHERE code = 'S12';"]}, {"question_id": 504, "answer_sql": ["SELECT COUNT(*) FROM cards JOIN sets ON cards.setCode = sets.code WHERE sets.name = 'World Championship Decks 2004' AND cards.convertedManaCost = 3;", "SELECT COUNT(*) FROM cards WHERE setCode = 'World Championship Decks 2004' AND convertedManaCost = 3;"]}, {"question_id": 505, "answer_sql": ["SELECT set_translations.translation FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE sets.name = 'Mirrodin' AND set_translations.language = 'Chinese Simplified';", "SELECT set_translations.translation FROM set_translations JOIN sets ON set_translations.setCode = sets.code WHERE sets.code = 'Mirrodin' AND set_translations.language = 'Chinese Simplified';"]}, {"question_id": 506, "answer_sql": []}, {"question_id": 507, "answer_sql": []}, {"question_id": 508, "answer_sql": ["SELECT availability FROM cards WHERE artist = 'Aleksi Briclot' AND isTextless = 1;"]}, {"question_id": 509, "answer_sql": ["SELECT MAX(baseSetSize) as Highest_Number_of_Cards, code as Unique_Id_of_Set FROM sets", "SELECT s.code, s.name, s.releaseDate, s.totalSetSize\nFROM sets s\nWHERE s.totalSetSize = (\n    SELECT MAX(totalSetSize)\n    FROM sets\n);", "SELECT id FROM sets WHERE baseSetSize = (SELECT MAX(baseSetSize) FROM sets);", "SELECT sets.code FROM sets WHERE baseSetSize = ( SELECT MAX(baseSetSize) FROM sets );", "SELECT sets.code FROM sets WHERE baseSetSize = ( SELECT MAX(baseSetSize) FROM sets ) AND type = 'collector'"]}, {"question_id": 510, "answer_sql": ["SELECT cards.artist, cards.convertedManaCost, cards.asciiName FROM cards WHERE cards.asciiName NOT IN ( SELECT cards.asciiName FROM cards WHERE cards.asciiName IN ( SELECT cards.asciiName FROM cards WHERE cards.asciiName IS NOT NULL GROUP BY cards.asciiName HAVING COUNT(*) = 1 ) ) ORDER BY cards.convertedManaCost DESC;", "SELECT c.artist, c.convertedManaCost FROM cards c WHERE c.side IS NULL ORDER BY c.convertedManaCost DESC LIMIT 1;", "SELECT artist, MAX(convertedManaCost) as max_cmc FROM cards WHERE NOT EXISTS (SELECT 1 FROM cards WHERE otherFaceIds LIKE '%cards.id%' AND side IS NULL) GROUP BY artist;", "SELECT cards.artist, cards.convertedManaCost FROM cards WHERE cards.asciiName = ( SELECT asciiName FROM cards WHERE asciiName != '[Illustration]' ORDER BY convertedManaCost DESC LIMIT 1 ) AND cards.asciiName != '[Illustration]' AND cards.side IS NULL;", "SELECT artist, MAX(convertedManaCost) as HighestCost FROM cards WHERE types = 'Artifact' AND otherFaceIds IS NULL GROUP BY artist;"]}, {"question_id": 511, "answer_sql": ["SELECT MAX(frameEffects) as most_common_visual_frame_effects FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL;", "SELECT frameEffects FROM cards WHERE cardKingdomFoilId IS NOT NULL GROUP BY frameEffects ORDER BY COUNT(*) DESC LIMIT 1;"]}, {"question_id": 512, "answer_sql": ["SELECT COUNT(*) FROM cards WHERE power IS NULL OR power = '*' AND hasFoil = 0 AND duelDeck = 'a';", "SELECT COUNT(*) FROM cards WHERE power IS NULL AND hasFoil = 0 AND duelDeck = 'a';", "SELECT COUNT(*) FROM cards WHERE power = '*' AND hasFoil = 0 AND duelDeck = 'a' AND types LIKE '%unknown power%';"]}, {"question_id": 513, "answer_sql": ["SELECT s.code FROM sets s WHERE s.type = 'commander' ORDER BY s.totalSetSize DESC LIMIT 1;", "SELECT sets.id FROM sets WHERE sets.type = 'commander' AND sets.totalSetSize = ( SELECT MAX(totalSetSize) FROM sets WHERE type <> 'alchemy' );", "SELECT sets.id FROM sets WHERE sets.type = 'commander' AND sets.totalSetSize = (SELECT MAX(totalSetSize) FROM sets WHERE type = 'commander');"]}, {"question_id": 514, "answer_sql": ["SELECT cards.name, cards.manaCost, cards.convertedManaCost FROM cards JOIN ( SELECT MAX(convertedManaCost) as max_converted_mana_cost FROM cards WHERE availability = 'in_print' GROUP BY cardKingdomId ORDER BY max_converted_mana_cost DESC LIMIT 10 ) as top_converted_mana_costs ON cards.convertedManaCost = top_converted_mana_costs.max_converted_mana_cost WHERE cards.availability = 'in_print' ORDER BY top_converted_mana_costs.max_converted_mana_cost DESC;"]}, {"question_id": 515, "answer_sql": ["SELECT MIN(originalReleaseDate) as oldest_mythic_card_release, legalities.format as legal_play_format FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE rarity = 'mythic' AND status = 'legal' GROUP BY legalities.format;"]}, {"question_id": 516, "answer_sql": ["SELECT COUNT(*) FROM cards \nINNER JOIN foreign_data ON cards.uuid = foreign_data.uuid \nWHERE artist = 'Volkan Baga' AND foreign_data.language = 'French';"]}, {"question_id": 517, "answer_sql": ["SELECT COUNT(*) FROM cards JOIN legalities ON cards.uuid = legalities.uuid JOIN sets ON cards.setCode = sets.code WHERE cards.types = 'Enchantment' AND cards.rarity = 'rare' AND cards.name = 'Abundance' AND legalities.status = 'Legal';", "SELECT COUNT(*) FROM cards JOIN legalities ON cards.uuid = legalities.uuid JOIN sets ON cards.setCode = sets.code WHERE sets.isNonFoilOnly = 0 AND sets.isFoilOnly = 0 AND sets.isOnlineOnly = 0 AND cards.types = 'Enchantment' AND cards.rarity = 'rare' AND legalities.status = 'Legal';", "SELECT COUNT(*) FROM cards JOIN legalities ON cards.uuid = legalities.uuid JOIN sets ON cards.setCode = sets.code JOIN set_translations ON sets.code = set_translations.setCode WHERE cards.types = 'Enchantment' AND cards.rarity = 'rare' AND cards.name = 'Abundance' AND legalities.status = 'Legal';"]}, {"question_id": 518, "answer_sql": ["SELECT s.name, MAX(l.status) as highest_banned_status FROM legalities l JOIN sets s ON l.uuid = s.code WHERE l.status = 'banned' GROUP BY s.name ORDER BY highest_banned_status DESC LIMIT 1;"]}, {"question_id": 519, "answer_sql": ["SELECT set_translations.translation FROM set_translations WHERE set_translations.setCode = 'Battlebond' AND set_translations.language = 'English';"]}, {"question_id": 520, "answer_sql": ["SELECT s.name AS set_name, c.artist AS illustrator, COUNT(c.id) AS total_cards FROM sets s JOIN cards c ON c.cardKingdomId = s.code WHERE c.artist = (SELECT MIN(artist) FROM cards WHERE artist IS NOT NULL) GROUP BY s.name, c.artist ORDER BY total_cards ASC;"]}, {"question_id": 521, "answer_sql": ["SELECT legalities.format, cards.artist, legalities.status FROM legalities JOIN cards ON legalities.uuid = cards.uuid WHERE cards.frameVersion = '1997' AND cards.artist = 'D. Alexander Gregory' AND cards.hasContentWarning = 1 AND legalities.format = 'legacy';", "SELECT status FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE frameVersion = '1997' AND artist = 'D. Alexander Gregory' AND hasContentWarning = 1 AND format = 'legacy';", "SELECT format, status FROM legalities JOIN cards ON legalities.uuid = cards.uuid WHERE frameVersion = '1997' AND artist = 'D. Alexander Gregory' AND hasContentWarning = 1 AND format = 'legacy';", "SELECT legalities.status FROM legalities JOIN cards ON legalities.uuid = cards.uuid JOIN sets ON cards.setCode = sets.code JOIN set_translations ON sets.code = set_translations.setCode WHERE cards.frameVersion = '1997' AND cards.artist = 'D. Alexander Gregory' AND cards.hasContentWarning = 1 AND legalities.format = 'legacy';"]}, {"question_id": 522, "answer_sql": ["SELECT c.name, l.format FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.edhrecRank = 1 AND l.status = 'banned' AND l.format IS NOT NULL;"]}, {"question_id": 523, "answer_sql": []}, {"question_id": 524, "answer_sql": ["SELECT DISTINCT cards.artist FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.borderColor = 'black' AND cards.availability = 'arena';", "SELECT artist FROM cards WHERE borderColor = 'black' AND availability = 'arena';", "SELECT DISTINCT cards.artist FROM cards WHERE cards.borderColor = 'black' AND cards.availability = 'arena';"]}, {"question_id": 525, "answer_sql": ["SELECT cards.uuid FROM cards JOIN legalities ON cards.id = legalities.uuid WHERE legalities.format = 'oldschool' AND legalities.status IN ('banned', 'restricted');"]}, {"question_id": 526, "answer_sql": ["SELECT COUNT(*) FROM cards WHERE artist = 'Matthew D. Wilson' AND availability = 'paper';"]}, {"question_id": 527, "answer_sql": []}, {"question_id": 528, "answer_sql": ["SELECT cards.name FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'legal' AND cards.setCode = 'Hour of Devastation' ORDER BY cards.name;"]}, {"question_id": 529, "answer_sql": ["SELECT DISTINCT sets.name FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.language = 'Korean' AND sets.name NOT LIKE '%Japanese%'", "SELECT DISTINCT set_translations.setCode FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.language = 'Korean' AND set_translations.translation IS NOT NULL AND NOT EXISTS ( SELECT 1 FROM set_translations AS j WHERE j.setCode = sets.code AND j.language = 'Japanese' AND j.translation IS NULL );", "SELECT DISTINCT set_translations.setCode FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.language NOT LIKE '%Japanese%' AND set_translations.language = 'Korean'", "SELECT sets.name FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.language = 'Korean' AND sets.name NOT LIKE '%Japanese%' AND sets.name LIKE '%Korean%';"]}, {"question_id": 530, "answer_sql": ["SELECT sets.name AS set_name, cards.name AS card_name, sets.releaseDate AS release_date FROM sets JOIN cards ON sets.code = cards.setCode JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.artist = 'Allen Williams' AND rulings.text = 'banned' ORDER BY sets.releaseDate DESC;"]}, {"question_id": 531, "answer_sql": ["SELECT MAX(users.Reputation) as HighestReputation FROM users WHERE users.DisplayName IN ('Harlan', 'Jarrod Dixon');"]}, {"question_id": 532, "answer_sql": []}, {"question_id": 533, "answer_sql": ["SELECT COUNT(*) FROM users WHERE LastAccessDate > '2014-09-01 00:00:00';"]}, {"question_id": 534, "answer_sql": ["SELECT users.DisplayName FROM users WHERE users.Views = (SELECT MAX(Views) FROM users);", "SELECT MAX(Views) as Most_Number_of_Views FROM users;"]}, {"question_id": 535, "answer_sql": ["SELECT COUNT(*) FROM users WHERE UpVotes > 100 AND DownVotes > 1;"]}, {"question_id": 536, "answer_sql": ["SELECT COUNT(DISTINCT badges.UserId) \nFROM badges \nJOIN users ON badges.UserId = users.Id \nWHERE users.Views > 10 AND strftime('%Y', badges.Date) > '2013';", "SELECT COUNT(*) FROM users WHERE Views > 10 AND CreationDate > '2013-01-01';", "SELECT COUNT(*) FROM users WHERE Views > 10 AND strftime('%Y', LastAccessDate) > '2013';", "SELECT COUNT(*) FROM users WHERE Views > 10 AND strftime('%Y', CreationDate) > '2013'", "SELECT COUNT(*) FROM users WHERE Views > 10 AND CreationDate > '2013-12-31';"]}, {"question_id": 537, "answer_sql": ["SELECT COUNT(*) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie');", "SELECT COUNT(*) FROM posts WHERE OwnerDisplayName = 'csgillespie';"]}, {"question_id": 538, "answer_sql": ["SELECT posts.Title FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'csgillespie';", "SELECT Title FROM posts WHERE OwnerDisplayName = 'csgillespie';"]}, {"question_id": 539, "answer_sql": ["SELECT posts.OwnerDisplayName FROM posts WHERE posts.Title = 'Eliciting priors from experts';"]}, {"question_id": 540, "answer_sql": ["SELECT posts.Title FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'csgillespie' ORDER BY posts.ViewCount DESC LIMIT 1;", "SELECT Title FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie') AND ViewCount = (SELECT MAX(ViewCount) FROM posts);"]}, {"question_id": 541, "answer_sql": ["SELECT users.DisplayName FROM users JOIN posts ON users.Id = posts.OwnerUserId WHERE posts.FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts)", "SELECT OwnerDisplayName FROM posts WHERE FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts);"]}, {"question_id": 542, "answer_sql": ["SELECT SUM(CommentCount) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie');", "SELECT SUM(CommentCount) as TotalComments FROM posts WHERE OwnerDisplayName = 'csgillespie';"]}, {"question_id": 543, "answer_sql": ["SELECT MAX(AnswerCount) as Most_Answers FROM posts WHERE OwnerDisplayName = 'csgillespie';", "SELECT posts.AnswerCount FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'csgillespie' ORDER BY posts.AnswerCount DESC LIMIT 1;", "SELECT AnswerCount FROM posts WHERE OwnerDisplayName = 'csgillespie' AND LastEditorUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie');"]}, {"question_id": 544, "answer_sql": ["SELECT DisplayName FROM users WHERE Id = ( SELECT LastEditorUserId FROM posts WHERE Title = 'Examples for teaching: Correlation does not mean causation' );", "SELECT posts.LastEditorDisplayName FROM posts WHERE posts.Title = 'Examples for teaching: Correlation does not mean causation';", "SELECT users.DisplayName FROM users JOIN posts ON users.AccountId = posts.LastEditorUserId WHERE posts.Title = 'Examples for teaching: Correlation does not mean causation';"]}, {"question_id": 545, "answer_sql": ["SELECT COUNT(*) FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE posts.ParentId IS NULL AND users.DisplayName = 'csgillespie';", "SELECT COUNT(*) FROM posts WHERE OwnerDisplayName = 'csgillespie' AND ParentId IS NULL;"]}, {"question_id": 546, "answer_sql": ["SELECT users.DisplayName FROM users JOIN badges ON users.Id = badges.UserId JOIN posts ON users.Id = badges.UserId WHERE posts.ClosedDate IS NOT NULL AND badges.Name = 'Well-Finished';", "SELECT users.DisplayName FROM users JOIN badges ON users.Id = badges.UserId JOIN posts ON badges.UserId = posts.OwnerUserId WHERE posts.ClosedDate IS NOT NULL AND badges.Name IS NOT NULL AND users.DisplayName IS NOT NULL AND badges.Date IS NOT NULL GROUP BY users.DisplayName;", "SELECT DISTINCT users.DisplayName FROM users JOIN posts ON users.Id = posts.OwnerUserId WHERE posts.ClosedDate IS NOT NULL;", "SELECT users.DisplayName FROM users JOIN posts ON users.Id = posts.OwnerUserId WHERE posts.ClosedDate IS NOT NULL;", "SELECT DISTINCT users.DisplayName FROM users JOIN badges ON users.Id = badges.UserId JOIN posts ON badges.UserId = posts.OwnerUserId WHERE posts.ClosedDate IS NOT NULL;"]}, {"question_id": 547, "answer_sql": ["SELECT COUNT(*) FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.Age > 65 AND posts.Score >= 20;"]}, {"question_id": 548, "answer_sql": ["SELECT Location FROM users WHERE Id = ( SELECT AccountId FROM posts WHERE Title = 'Eliciting priors from experts' );", "SELECT Location FROM users WHERE Id=(SELECT OwnerUserId FROM posts WHERE Title='Eliciting priors from experts');"]}, {"question_id": 549, "answer_sql": ["SELECT posts.Body FROM posts JOIN tags ON posts.Id = tags.ExcerptPostId WHERE tags.TagName = 'bayesian';", "SELECT Body FROM posts WHERE Id = (SELECT WikiPostId FROM tags WHERE TagName = 'bayesian')"]}, {"question_id": 550, "answer_sql": ["SELECT posts.Title, posts.Body FROM posts JOIN tags ON posts.Id = tags.ExcerptPostId WHERE tags.Count = (SELECT MAX(Count) FROM tags)", "SELECT Body FROM posts WHERE Id = (SELECT WikiPostId FROM tags WHERE TagName = 'most popular tag' ORDER BY Count DESC LIMIT 1);"]}, {"question_id": 551, "answer_sql": ["SELECT COUNT(*) FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie');"]}, {"question_id": 552, "answer_sql": ["SELECT badges.Name FROM badges WHERE badges.UserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie');"]}, {"question_id": 553, "answer_sql": []}, {"question_id": 554, "answer_sql": ["SELECT MAX(u.DisplayName) as DisplayName FROM users u JOIN badges b ON u.Id = b.UserId GROUP BY u.Id ORDER BY COUNT(b.Id) DESC LIMIT 1;", "SELECT users.DisplayName FROM users JOIN badges ON users.Id = badges.UserId WHERE badges.Id = ( SELECT MAX(Id) FROM badges )"]}, {"question_id": 555, "answer_sql": ["SELECT AVG(posts.Score) FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'csgillespie';", "SELECT AVG(Score) as AverageScore FROM posts WHERE OwnerDisplayName = 'csgillespie';"]}, {"question_id": 556, "answer_sql": ["SELECT AVG(badges.Name) FROM users JOIN badges ON users.Id = badges.UserId WHERE users.Views > 200;"]}, {"question_id": 557, "answer_sql": ["SELECT (COUNT(*) * 100.0) / (SELECT COUNT(*) FROM posts WHERE Score > 20) AS percentage FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE posts.Score > 20 AND users.Age > 65;", "SELECT (COUNT(posts.Id) * 1.0) / (SELECT COUNT(*) FROM users WHERE Age > 65) * 100 as percentage FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE posts.Score > 20;", "SELECT (COUNT(posts.Id) * 1.0) / (SELECT COUNT(Id) FROM users WHERE Age > 65) * 100 AS percentage FROM posts WHERE Score > 20;", "SELECT (COUNT(posts.Id) * 1.0) * (COUNT(users.Id) * 1.0) / (SELECT COUNT(Id) FROM users WHERE Age > 65) AS percentage FROM posts INNER JOIN users ON posts.OwnerUserId = users.Id WHERE posts.Score > 20;"]}, {"question_id": 558, "answer_sql": ["SELECT COUNT(*) FROM votes WHERE UserId = 58 AND CreationDate = '2010-07-19';"]}, {"question_id": 559, "answer_sql": ["SELECT MAX(CreationDate) as MaxVotedDate FROM votes", "SELECT MAX(CreationDate) as MaxVotedDate FROM votes WHERE VoteTypeId = 1;"]}, {"question_id": 560, "answer_sql": ["SELECT COUNT(*) FROM badges WHERE Name = 'Revival';"]}, {"question_id": 561, "answer_sql": ["SELECT posts.Title FROM posts WHERE posts.Id = ( SELECT comments.PostId FROM comments WHERE comments.Score = ( SELECT MAX(comments.Score) FROM comments ) );"]}, {"question_id": 562, "answer_sql": ["SELECT COUNT(*) FROM comments JOIN posts ON comments.PostId = posts.Id WHERE posts.ViewCount = 1910;"]}, {"question_id": 563, "answer_sql": ["SELECT FavoriteCount FROM posts WHERE OwnerUserId = 3025 AND LastEditDate = '2014/4/23 20:29:39.0';", "SELECT COUNT(*) FROM badges JOIN posts ON badges.UserId = posts.OwnerUserId WHERE badges.UserId = 3025 AND badges.Date = '2014-04-23 20:29:39.0' AND posts.FavoriteCount IS NOT NULL;"]}, {"question_id": 564, "answer_sql": ["SELECT comments.Text FROM comments JOIN posts ON comments.PostId = posts.Id WHERE posts.ParentId = 107829 AND comments.Text IS NOT NULL;", "SELECT Text FROM comments WHERE PostId = 107829;"]}, {"question_id": 565, "answer_sql": ["SELECT p.Title FROM posts p JOIN comments c ON p.Id = c.PostId WHERE c.UserId = 23853 AND c.CreationDate = '2013-07-12 09:08:18.0'", "SELECT Title FROM posts WHERE OwnerUserId = 23853 AND LastEditDate = '2013-07-12 09:08:18.0' AND ClosedDate IS NULL;"]}, {"question_id": 566, "answer_sql": ["SELECT users.Reputation FROM users WHERE users.Id = ( SELECT posts.OwnerUserId FROM posts WHERE posts.Id = 65041 );", "SELECT Reputation FROM users WHERE Id = '65041';"]}, {"question_id": 567, "answer_sql": ["SELECT COUNT(*) FROM users JOIN posts ON users.Id = posts.OwnerUserId WHERE users.DisplayName = 'Tiago Pasqualini';", "SELECT COUNT(*) FROM posts WHERE OwnerDisplayName = 'Tiago Pasqualini';", "SELECT COUNT(*) FROM users WHERE DisplayName = 'Tiago Pasqualini';"]}, {"question_id": 568, "answer_sql": ["SELECT users.DisplayName FROM votes JOIN users ON votes.UserId = users.Id WHERE votes.Id = 6347;", "SELECT DisplayName FROM users WHERE Id = '6347';", "SELECT users.DisplayName FROM votes JOIN users ON votes.UserId = users.Id WHERE votes.Id = 381800;"]}, {"question_id": 569, "answer_sql": ["SELECT COUNT(*) FROM votes JOIN posts ON votes.PostId = posts.Id WHERE posts.Title LIKE '%data visualization%' AND votes.VoteTypeId = 1;", "SELECT COUNT(*) FROM votes WHERE PostId IN (SELECT Id FROM posts WHERE Body LIKE '%data visualization%');", "SELECT COUNT(*) FROM votes JOIN posts ON votes.PostId = posts.Id WHERE posts.Title LIKE '%data visualization%';", "SELECT COUNT(*) FROM votes WHERE PostId IN (SELECT Id FROM posts WHERE Body LIKE '%data visualization%') AND VoteTypeId = 1;"]}, {"question_id": 570, "answer_sql": ["SELECT Name FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'DatEpicCoderGuyWhoPrograms');"]}, {"question_id": 571, "answer_sql": ["SELECT (COUNT(posts.Id) - COUNT(votes.Id)) / 2 FROM users JOIN posts ON users.Id = posts.OwnerUserId JOIN votes ON users.Id = votes.UserId WHERE users.Id = 24;"]}, {"question_id": 572, "answer_sql": ["SELECT posts.ViewCount FROM posts WHERE posts.Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer';"]}, {"question_id": 573, "answer_sql": ["SELECT Text FROM comments WHERE Score = 17;"]}, {"question_id": 574, "answer_sql": ["SELECT users.DisplayName FROM users WHERE users.WebsiteUrl = 'http://stackoverflow.com';", "SELECT users.DisplayName FROM users JOIN badges ON users.Id = badges.UserId WHERE badges.Name = 'http://stackoverflow.com'", "SELECT * FROM users WHERE WebsiteUrl = 'http://stackoverflow.com';"]}, {"question_id": 575, "answer_sql": ["SELECT Name FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'SilentGhost');"]}, {"question_id": 576, "answer_sql": ["SELECT users.DisplayName FROM users JOIN comments ON users.Id = comments.UserId WHERE comments.Text = 'thank you user93!' LIMIT 1;", "SELECT comments.Text as Comment, users.DisplayName as User FROM comments JOIN users ON comments.UserId = users.Id WHERE comments.Text = 'thank you user93!';", "SELECT comments.UserDisplayName FROM comments JOIN posts ON comments.PostId = posts.Id WHERE comments.Text = 'thank you user93!' LIMIT 1;"]}, {"question_id": 577, "answer_sql": ["SELECT comments.Text FROM comments JOIN users ON comments.UserId = users.Id WHERE users.DisplayName = 'A Lion';", "SELECT comments.Text FROM comments JOIN users ON comments.UserId = users.Id WHERE users.DisplayName = 'A Lion' AND comments.PostId IN ( SELECT postLinks.PostId FROM postLinks JOIN posts ON postLinks.PostId = posts.Id WHERE posts.Body LIKE '%A Lion%' )"]}, {"question_id": 578, "answer_sql": ["SELECT users.DisplayName, users.Reputation FROM users JOIN posts ON users.Id = posts.OwnerUserId WHERE posts.Title = 'Understanding what Dassault iSight is doing?'", "SELECT users.DisplayName, users.Reputation FROM users JOIN posts ON users.Id = posts.OwnerUserId JOIN badges ON posts.Id = badges.UserId WHERE posts.Title = 'Understanding what Dassault iSight is doing?';"]}, {"question_id": 579, "answer_sql": ["SELECT comments.Text FROM comments JOIN posts ON comments.PostId = posts.Id WHERE posts.Title = 'How does gentle boosting differ from AdaBoost?';", "SELECT comments.UserDisplayName, badges.Name, badges.Id, users.DisplayName FROM comments JOIN badges ON comments.UserId = badges.UserId JOIN users ON badges.UserId = users.Id WHERE comments.PostId = (SELECT Id FROM posts WHERE Title = 'How does gentle boosting differ from AdaBoost?') AND badges.Date IS NOT NULL;", "SELECT comments.UserDisplayName, comments.Text FROM comments JOIN posts ON comments.PostId = posts.Id WHERE posts.Title = 'How does gentle boosting differ from AdaBoost?';"]}, {"question_id": 580, "answer_sql": ["SELECT users.DisplayName, users.Id FROM users JOIN badges ON users.Id = badges.UserId WHERE badges.Name = 'Necromancer' ORDER BY users.DisplayName ASC LIMIT 10;", "SELECT users.DisplayName, users.Id, users.Reputation FROM users JOIN badges ON users.Id = badges.UserId WHERE badges.Name = 'Necromancer' ORDER BY users.Reputation DESC LIMIT 10;", "SELECT users.DisplayName FROM badges JOIN users ON badges.UserId = users.Id WHERE badges.Name = 'Necromancer' ORDER BY users.DisplayName ASC LIMIT 10;", "SELECT users.DisplayName FROM badges JOIN users ON badges.UserId = users.Id WHERE badges.Name = 'Necromancer' LIMIT 10;", "SELECT users.DisplayName, users.Id FROM users JOIN badges ON users.Id = badges.UserId WHERE badges.Name = 'Necromancer' ORDER BY users.Id DESC LIMIT 10;"]}, {"question_id": 581, "answer_sql": ["SELECT LastEditorUserId FROM posts WHERE Title = 'Open source tools for visualizing multi-dimensional data?';", "SELECT LastEditorDisplayName FROM posts WHERE Title = 'Open source tools for visualizing multi-dimensional data?';"]}, {"question_id": 582, "answer_sql": ["SELECT Title FROM posts WHERE LastEditorUserId = (SELECT Id FROM users WHERE DisplayName = 'Vebjorn Ljosa')", "SELECT posts.Title FROM posts JOIN posts as last_edit_post ON posts.LastEditorUserId = last_edit_post.OwnerUserId JOIN users as last_edit_user ON last_edit_post.OwnerUserId = last_edit_user.Id WHERE last_edit_user.DisplayName = 'Vebjorn Ljosa' AND posts.ClosedDate IS NULL;", "SELECT posts.Title FROM posts JOIN posts as last_edit_post ON posts.LastEditorUserId = last_edit_post.OwnerUserId JOIN users ON posts.OwnerUserId = users.Id JOIN users as last_edit_user ON last_edit_post.LastEditorUserId = last_edit_user.Id WHERE users.DisplayName = 'Vebjorn Ljosa' AND posts.LastEditorDisplayName = 'Vebjorn Ljosa' AND posts.OwnerUserId = users.Id AND last_edit_post.OwnerUserId = last_edit_user.Id;"]}, {"question_id": 583, "answer_sql": ["SELECT SUM(Score) as TotalScore FROM posts WHERE LastEditorUserId IN (SELECT Id FROM users WHERE DisplayName = 'Yevgeny' AND WebsiteUrl is not null)", "SELECT SUM(posts.Score) as TotalScore FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'Yevgeny' AND users.WebsiteUrl IS NOT NULL;"]}, {"question_id": 584, "answer_sql": ["SELECT comments.Text FROM comments JOIN users ON comments.UserId = users.Id WHERE users.DisplayName = 'Edited by User' AND comments.PostId = ( SELECT posts.Id FROM posts WHERE posts.Title = 'Why square the difference instead of taking the absolute value in standard deviation?' );", "SELECT comments.Text FROM comments JOIN posts ON comments.PostId = posts.Id WHERE posts.Title = 'Why square the difference instead of taking the absolute value in standard deviation?'", "SELECT comments.Text FROM comments JOIN users ON comments.UserId = users.Id JOIN posts ON comments.PostId = posts.Id WHERE posts.Title = 'Why square the difference instead of taking the absolute value in standard deviation?'", "SELECT comments.Text FROM comments JOIN posts ON comments.PostId = posts.Id WHERE posts.Title = 'Why square the difference instead of taking the absolute value in standard deviation?' AND comments.UserDisplayName IS NOT NULL;", "SELECT comments.UserDisplayName FROM comments JOIN posts ON comments.PostId = posts.Id WHERE posts.Title = 'Why square the difference instead of taking the absolute value in standard deviation?' AND comments.UserDisplayName IS NOT NULL;"]}, {"question_id": 585, "answer_sql": ["SELECT SUM(BountyAmount) FROM votes WHERE PostId IN (SELECT Id FROM posts WHERE Title LIKE '%data%')", "SELECT SUM(votes.BountyAmount) FROM votes JOIN posts ON votes.PostId = posts.Id WHERE posts.Title LIKE '%data%' AND votes.VoteTypeId = 1;"]}, {"question_id": 586, "answer_sql": ["SELECT users.DisplayName FROM users JOIN votes ON users.Id = votes.UserId JOIN posts ON votes.PostId = posts.Id JOIN badges ON users.Id = badges.UserId WHERE badges.Name LIKE '%variance%' AND votes.BountyAmount = 50;", "SELECT users.DisplayName FROM users JOIN votes ON users.Id = votes.UserId JOIN posts ON votes.PostId = posts.Id WHERE posts.Title LIKE '%variance%' AND votes.BountyAmount = 50;", "SELECT users.DisplayName FROM votes JOIN posts ON votes.PostId = posts.Id JOIN badges ON posts.OwnerUserId = badges.UserId JOIN users ON badges.UserId = users.Id WHERE votes.BountyAmount = 50 AND posts.Title LIKE '%variance%';"]}, {"question_id": 587, "answer_sql": ["SELECT AVG(P.ViewCount) as AverageViewCount, P.Title, COALESCE(P.Body, 'No comments') as Comments, COALESCE(P.Score, 0) as Score FROM posts P JOIN tags T ON P.Id = T.WikiPostId WHERE T.TagName = 'humor' AND P.Body IS NOT NULL AND P.Score IS NOT NULL;", "SELECT posts.Title, comments.Text, comments.Score FROM posts JOIN postLinks ON posts.Id = postLinks.PostId JOIN posts AS related_post ON postLinks.RelatedPostId = related_post.Id JOIN comments ON related_post.Id = comments.PostId WHERE posts.Tags LIKE '%humor%' GROUP BY posts.Title, comments.Text, comments.Score ORDER BY AVG(posts.ViewCount) DESC;", "SELECT posts.Title, comments.Text, comments.Score FROM posts JOIN tags ON posts.Id = tags.ExcerptPostId JOIN comments ON posts.Id = comments.PostId WHERE tags.TagName = 'humor' GROUP BY posts.Title, comments.Text, comments.Score ORDER BY AVG(posts.ViewCount) DESC;"]}, {"question_id": 588, "answer_sql": ["SELECT COUNT(*) FROM comments WHERE UserId = 13;"]}, {"question_id": 589, "answer_sql": ["SELECT users.Id FROM users WHERE users.Reputation = ( SELECT MAX(users.Reputation) FROM users )", "SELECT MAX(users.Reputation) as Highest_Reputation FROM users", "SELECT Id, DisplayName, Reputation FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users);", "SELECT Id, Reputation FROM users ORDER BY Reputation DESC LIMIT 1;"]}, {"question_id": 590, "answer_sql": ["SELECT MIN(Id) as Lowest_User_Id FROM users", "SELECT users.Id FROM users JOIN votes ON users.Id = votes.UserId GROUP BY users.Id ORDER BY MIN(votes.UserId) LIMIT 1;", "SELECT Id, DisplayName, Views FROM users ORDER BY Views ASC LIMIT 1;"]}, {"question_id": 591, "answer_sql": ["SELECT COUNT(DISTINCT badges.UserId) \nFROM badges \nJOIN users ON badges.UserId = users.Id \nWHERE badges.Date BETWEEN '2011-01-01' AND '2011-12-31' AND badges.Name = 'Supporter';", "SELECT COUNT(*) FROM badges WHERE Name = 'Supporter' AND Date LIKE '2011%';", "SELECT badges.UserId, COUNT(badges.UserId) as Supporter_Count \nFROM badges \nWHERE badges.Date BETWEEN '2011-01-01' AND '2011-12-31' AND badges.Name = 'Supporter'\nGROUP BY badges.UserId;", "SELECT COUNT(*) FROM badges WHERE Name = 'Supporter' AND Date = '2011-01-01';"]}, {"question_id": 592, "answer_sql": ["SELECT COUNT(*) FROM users WHERE Id IN ( SELECT UserId FROM badges GROUP BY UserId HAVING COUNT(Id) > 5 );", "SELECT COUNT(*) FROM users JOIN badges ON users.Id = badges.UserId WHERE badges.Name IS NOT NULL GROUP BY users.Id HAVING COUNT(badges.Name) > 5;"]}, {"question_id": 593, "answer_sql": ["SELECT users.DisplayName, COUNT(badges.Id) as badge_count FROM users JOIN badges ON users.Id = badges.UserId WHERE users.Location = 'New York' AND badges.Name IN ('Teacher', 'Supporter') GROUP BY users.DisplayName HAVING badge_count = 2;", "SELECT COUNT(*) FROM users u JOIN badges b1 ON u.Id = b1.UserId JOIN badges b2 ON u.Id = b2.UserId WHERE b1.Name = 'Supporter' AND b2.Name = 'Teachers' AND u.Location = 'New York';", "SELECT COUNT(*) FROM users JOIN badges ON users.Id = badges.UserId WHERE badges.Name IN ('Supporter', 'Teachers') AND users.Location = 'New York';", "SELECT COUNT(*) FROM users JOIN badges ON users.Id = badges.UserId WHERE users.Location = 'New York' AND (badges.Name = 'Teacher' OR badges.Name = 'Supporter');"]}, {"question_id": 594, "answer_sql": ["SELECT users.DisplayName, users.Reputation FROM users JOIN posts ON users.Id = posts.OwnerUserId WHERE posts.Id = 1;", "SELECT users.DisplayName, users.Reputation FROM users JOIN badges ON users.Id = badges.UserId WHERE badges.Id = 1;", "SELECT DisplayName, Reputation FROM users WHERE Id = 1;"]}, {"question_id": 595, "answer_sql": ["SELECT users.DisplayName, COUNT(postHistory.PostId) as PostHistoryCount FROM users JOIN badges ON users.Id = badges.UserId JOIN postHistory ON users.Id = postHistory.UserId WHERE users.Views >= 1000 GROUP BY users.DisplayName HAVING COUNT(postHistory.PostId) = 1 ORDER BY PostHistoryCount DESC;"]}, {"question_id": 596, "answer_sql": ["SELECT users.DisplayName, badges.Name FROM users JOIN comments ON users.Id = comments.UserId JOIN badges ON users.Id = badges.UserId GROUP BY users.Id ORDER BY COUNT(comments.Id) DESC LIMIT 1;", "SELECT users.DisplayName, badges.Name FROM users JOIN comments ON users.Id = comments.UserId JOIN badges ON users.Id = badges.UserId WHERE comments.PostId IN ( SELECT Id FROM posts WHERE OwnerUserId = ( SELECT Id FROM posts ORDER BY Score DESC LIMIT 1 ) ) ORDER BY comments.Score DESC;", "SELECT users.DisplayName, badges.Name \nFROM users \nJOIN badges ON users.Id = badges.UserId \nWHERE users.Id IN ( \n    SELECT comments.UserId \n    FROM comments \n    WHERE comments.PostId IN ( \n        SELECT posts.Id \n        FROM posts \n        WHERE posts.PostTypeId = 1 \n    ) \n    GROUP BY comments.UserId \n    ORDER BY COUNT(comments.Id) DESC \n    LIMIT 1 \n) \nORDER BY badges.Name ASC;"]}, {"question_id": 597, "answer_sql": ["SELECT COUNT(*) FROM badges JOIN users ON badges.UserId = users.Id WHERE users.Location = 'India' AND badges.Name = 'Teacher';"]}, {"question_id": 598, "answer_sql": ["SELECT badges.Name, COUNT(*) as Count_2010, COUNT(*) as Count_2011 FROM badges JOIN users ON badges.UserId = users.Id WHERE users.Reputation > 10000 AND badges.Date >= '2010-01-01' AND badges.Date <= '2011-12-31' GROUP BY badges.Name ORDER BY badges.Name;"]}, {"question_id": 599, "answer_sql": ["SELECT postHistory.PostHistoryTypeId, COUNT(DISTINCT users.DisplayName) as UniqueUsers FROM postHistory JOIN posts ON postHistory.PostId = posts.Id JOIN users ON postHistory.UserId = users.Id WHERE posts.Id = 3720 GROUP BY postHistory.PostHistoryTypeId;", "SELECT postHistory.PostHistoryTypeId, COUNT(DISTINCT comments.UserDisplayName) FROM postHistory JOIN comments ON postHistory.PostHistoryTypeId = 1 AND comments.PostId = 3720 GROUP BY postHistory.PostHistoryTypeId;", "SELECT P.PostHistoryTypeId, U.DisplayName, COUNT(DISTINCT C.UserId) as UniqueUsers FROM postHistory P JOIN users U ON P.UserId = U.Id JOIN comments C ON P.PostId = C.PostId WHERE P.PostId = 3720 GROUP BY P.PostHistoryTypeId, U.DisplayName;"]}, {"question_id": 600, "answer_sql": ["SELECT p.ViewCount FROM posts p JOIN postLinks pl ON p.Id = pl.PostId WHERE pl.RelatedPostId = 61217;", "SELECT p.Title, p.ViewCount FROM posts p JOIN postLinks pl ON p.Id = pl.PostId WHERE pl.RelatedPostId = 61217;", "SELECT Title, ViewCount FROM posts WHERE Id = 61217;", "SELECT Title, ViewCount FROM posts WHERE ParentId = 61217;", "SELECT posts.ViewCount FROM posts JOIN votes ON posts.Id = votes.PostId WHERE votes.PostId = 61217;"]}, {"question_id": 601, "answer_sql": ["SELECT Score, postLinks.PostId, postLinks.LinkTypeId FROM postLinks INNER JOIN posts ON postLinks.PostId = posts.Id WHERE posts.Id = 395;", "SELECT Score, postLinks.LinkTypeId FROM posts JOIN postLinks ON posts.Id = postLinks.PostId WHERE posts.Id = 395;", "SELECT comments.Score, postLinks.LinkTypeId FROM comments JOIN postLinks ON comments.PostId = postLinks.PostId WHERE comments.PostId = 395;", "SELECT postLinks.LinkTypeId, posts.Score FROM postLinks JOIN posts ON postLinks.PostId = posts.Id WHERE posts.Id = 395;"]}, {"question_id": 602, "answer_sql": ["SELECT posts.Id, users.Id FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE posts.Score > 60;"]}, {"question_id": 603, "answer_sql": ["SELECT SUM(votes.BountyAmount) FROM votes JOIN posts ON votes.PostId = posts.Id JOIN users ON votes.UserId = users.Id WHERE posts.CreaionDate >= '2011-01-01' AND posts.CreaionDate < '2011-12-31' AND votes.VoteTypeId = 1;", "SELECT SUM(posts.FavoriteCount) FROM posts WHERE posts.OwnerUserId = 686 AND strftime('%Y', posts.CreaionDate) = '2011';"]}, {"question_id": 604, "answer_sql": ["SELECT AVG(UpVotes) as Average_Up_Votes, AVG(Age) as Average_User_Age \nFROM users \nWHERE Id IN (SELECT OwnerUserId FROM posts WHERE Id IN (SELECT PostId FROM votes WHERE PostId IN (SELECT Id FROM posts WHERE Id > 10)));", "SELECT AVG(UpVotes) as Average_Up_Votes, AVG(Age) as Average_User_Age FROM users WHERE Id IN (SELECT OwnerUserId FROM posts WHERE Id IN (SELECT PostId FROM votes WHERE PostId IN (SELECT PostId FROM votes GROUP BY PostId HAVING COUNT(PostId) > 10)));"]}, {"question_id": 605, "answer_sql": ["SELECT COUNT(*) FROM badges WHERE Name = 'Announcer';"]}, {"question_id": 606, "answer_sql": ["SELECT Name FROM badges WHERE Date = '2010-07-19 19:39:08';"]}, {"question_id": 607, "answer_sql": ["SELECT COUNT(*) FROM comments JOIN users ON comments.UserId = users.Id WHERE Score > 60;", "SELECT COUNT(*) FROM comments WHERE Score > 60;"]}, {"question_id": 608, "answer_sql": ["SELECT * FROM comments WHERE CreationDate = '2010-07-19 19:16:14.0';", "SELECT Text FROM comments WHERE CreationDate = '2010-07-19 19:16:14.0';"]}, {"question_id": 609, "answer_sql": ["SELECT COUNT(*) FROM posts WHERE Score = 10;"]}, {"question_id": 610, "answer_sql": ["SELECT badges.Name, badges.UserId FROM badges WHERE badges.UserId IN (SELECT users.Id FROM users ORDER BY users.Reputation DESC LIMIT 1)", "SELECT badges.Name, badges.UserId FROM badges WHERE badges.UserId = (SELECT MAX(users.Reputation) FROM users);", "SELECT Name FROM badges WHERE UserId = (SELECT Id FROM users ORDER BY Reputation DESC LIMIT 1);"]}, {"question_id": 611, "answer_sql": ["SELECT users.Reputation FROM users JOIN badges ON users.Id = badges.UserId WHERE badges.Date = '2010-07-19 19:39:08.0';", "SELECT reputation FROM users WHERE Id IN (SELECT UserId FROM badges WHERE Date = '2010-07-19 19:39:08.0');"]}, {"question_id": 612, "answer_sql": ["SELECT badges.Name FROM badges JOIN users ON badges.UserId = users.Id WHERE users.DisplayName = 'Pierre';", "SELECT Name FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'Pierre');"]}, {"question_id": 613, "answer_sql": ["SELECT badges.Date FROM badges JOIN users ON badges.UserId = users.Id WHERE users.Location = 'Rochester, NY';"]}, {"question_id": 614, "answer_sql": ["SELECT (COUNT(Id) FILTER (WHERE Name = 'Teacher') * 100) / COUNT(Id) FROM badges;", "SELECT (COUNT(UserId) - COUNT(badges.UserId)) * 100 / COUNT(UserId) as percentage FROM badges WHERE badges.Name = 'Teacher';", "SELECT badges.UserId, COUNT(*) as 'Total', (COUNT(*) / (SELECT COUNT(*) FROM users WHERE badges.UserId = users.Id)) * 100 as 'Percentage' FROM badges JOIN users ON badges.UserId = users.Id WHERE badges.Name = 'Teacher' GROUP BY badges.UserId ORDER BY 'Percentage' DESC;", "SELECT (COUNT(*) * 100) / (SELECT COUNT(*) FROM users WHERE badges.Name = 'Teacher') as Percentage FROM users JOIN badges ON users.Id = badges.UserId WHERE badges.Name = 'Teacher';", "SELECT badges.UserId, COUNT(*) as TotalUsers, (SELECT COUNT(*) FROM badges WHERE UserId = badges.UserId) * 100 as Percentage FROM badges WHERE badges.Name = 'Teacher' GROUP BY badges.UserId ORDER BY Percentage DESC;"]}, {"question_id": 615, "answer_sql": ["SELECT (COUNT(Id) * 1.0 / (SELECT COUNT(Id) FROM badges WHERE Name = 'Organizer') * 100) as percentage FROM users WHERE Age BETWEEN 13 AND 18;", "SELECT (COUNT(users.Id) * 1.0) / (SELECT COUNT(Id) FROM badges WHERE Name = 'Organizer') * 100 AS percentage_of_teens FROM users JOIN badges ON users.Id = badges.UserId WHERE badges.Name = 'Organizer' AND users.Age BETWEEN 13 AND 18;", "SELECT (COUNT(badges.UserId) * 100.0) / (SELECT COUNT(Id) FROM users WHERE Age BETWEEN 13 AND 18) AS percentage FROM badges WHERE Name = 'Organizer'", "SELECT (COUNT(badges.UserId) * 100) / (SELECT COUNT(*) FROM users WHERE users.Age BETWEEN 13 AND 18) as percentage FROM badges WHERE badges.Name = 'Organizer'"]}, {"question_id": 616, "answer_sql": ["SELECT Score FROM comments WHERE CreationDate = '2010-07-19 19:19:56.0';"]}, {"question_id": 617, "answer_sql": ["SELECT comments.Text FROM comments WHERE CreationDate = '2010-07-19 19:37:33.0';", "SELECT comments.Text FROM comments JOIN posts ON comments.PostId = posts.Id WHERE posts.CreaionDate = '2010-07-19 19:37:33.0';"]}, {"question_id": 618, "answer_sql": ["SELECT users.Age FROM users JOIN badges ON users.Id = badges.UserId WHERE users.Location = 'Vienna, Austria';", "SELECT users.Age FROM users JOIN badges ON users.Id = badges.UserId WHERE users.Location = 'Vienna, Austria' AND badges.Name = 'Citizen Developer';", "SELECT users.Age FROM users WHERE users.Location = 'Vienna, Austria';"]}, {"question_id": 619, "answer_sql": ["SELECT badges.Name, badges.Id, users.Age FROM badges JOIN users ON badges.UserId = users.Id WHERE badges.Name = 'Supporter' AND users.Age BETWEEN 19 AND 65;", "SELECT COUNT(*) FROM badges WHERE UserId IN ( SELECT Id FROM users WHERE Age BETWEEN 19 AND 65 ) AND Name = 'Supporter';", "SELECT badges.Name, badges.Id FROM badges JOIN users ON badges.UserId = users.Id WHERE badges.Name = 'Supporter' AND users.Age BETWEEN 19 AND 65"]}, {"question_id": 620, "answer_sql": ["SELECT users.Views FROM users JOIN badges ON users.Id = badges.UserId WHERE badges.Date = '2010-07-19 19:39:08.0';", "SELECT COUNT(DISTINCT users.Id) FROM users JOIN badges ON users.Id = badges.UserId WHERE badges.Date = '2010-07-19 19:39:08.0';", "SELECT users.DisplayName, COUNT(posts.Id) as NumberOfViews FROM users JOIN badges ON badges.UserId = users.Id JOIN posts ON posts.OwnerUserId = users.Id WHERE badges.Date = '2010-07-19 19:39:08.0' GROUP BY users.DisplayName ORDER BY NumberOfViews DESC;", "SELECT COUNT(users.Views) FROM users JOIN badges ON users.Id = badges.UserId WHERE badges.Name = 'Badge Name' AND badges.Date = '2010-07-19 19:39:08.0';", "SELECT users.DisplayName, COUNT(badges.Id) as BadgeCount FROM users JOIN badges ON users.Id = badges.UserId WHERE badges.Date = '2010-07-19 19:39:08.0' GROUP BY users.DisplayName ORDER BY BadgeCount DESC;"]}, {"question_id": 621, "answer_sql": ["SELECT badges.Name FROM badges WHERE badges.UserId IN ( SELECT users.Id FROM users WHERE users.Reputation = ( SELECT MIN(users.Reputation) FROM users ) ) ORDER BY badges.Name;", "SELECT badges.Name FROM badges WHERE badges.UserId IN ( SELECT users.Id FROM users ORDER BY users.Reputation ASC LIMIT 1 )"]}, {"question_id": 622, "answer_sql": ["SELECT badges.Name FROM badges JOIN users ON badges.UserId = users.Id WHERE users.DisplayName = 'Sharpie';"]}, {"question_id": 623, "answer_sql": ["SELECT badges.Name, COUNT(badges.Id) as NumberOfElders FROM badges JOIN users ON badges.UserId = users.Id WHERE badges.Name = 'Supporter' AND users.Age > 65 GROUP BY badges.Name;", "SELECT COUNT(*) FROM badges WHERE Name = 'Supporter' AND UserId IN (SELECT Id FROM users WHERE Age > 65);", "SELECT badges.Name, badges.Id FROM badges JOIN users ON badges.UserId = users.Id WHERE badges.Name = 'Supporter' AND users.Age > 65"]}, {"question_id": 624, "answer_sql": ["SELECT DisplayName FROM users WHERE Id = 30;", "SELECT badges.Name FROM badges JOIN users ON badges.UserId = users.Id WHERE users.Id = 30;"]}, {"question_id": 625, "answer_sql": ["SELECT COUNT(*) FROM users WHERE Location = 'New York';"]}, {"question_id": 626, "answer_sql": []}, {"question_id": 627, "answer_sql": ["SELECT COUNT(*) FROM users WHERE Age BETWEEN 19 AND 65;"]}, {"question_id": 628, "answer_sql": ["SELECT DisplayName FROM users WHERE Views = (SELECT MAX(Views) FROM users);", "SELECT DisplayName, MAX(Views) FROM users WHERE DisplayName IN ('users.Views') GROUP BY DisplayName ORDER BY MAX(Views) DESC;", "SELECT DisplayName, MAX(Views) FROM users WHERE DisplayName IN ('users.Views')"]}, {"question_id": 629, "answer_sql": []}, {"question_id": 630, "answer_sql": ["SELECT TagName FROM tags WHERE WikiPostId IN (SELECT Id FROM posts WHERE OwnerDisplayName = 'John Stauffer');"]}, {"question_id": 631, "answer_sql": ["SELECT COUNT(*) FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'Daniel Vassallo';", "SELECT COUNT(*) FROM posts WHERE OwnerDisplayName = 'Daniel Vassallo';"]}, {"question_id": 632, "answer_sql": ["SELECT COUNT(*) FROM votes WHERE UserId IN (SELECT Id FROM users WHERE DisplayName = 'Harlan');"]}, {"question_id": 633, "answer_sql": ["SELECT posts.Id FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'slashnick' ORDER BY posts.AnswerCount DESC LIMIT 1;", "SELECT Id FROM posts WHERE OwnerDisplayName = 'slashnick' AND AnswerCount = (SELECT MAX(AnswerCount) FROM posts WHERE OwnerDisplayName = 'slashnick');"]}, {"question_id": 634, "answer_sql": ["SELECT posts.Title FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'Harvey Motulsky' OR users.DisplayName = 'Noah Snyder' GROUP BY posts.Title ORDER BY SUM(posts.ViewCount) DESC LIMIT 1;", "SELECT posts.Title, posts.ViewCount FROM posts WHERE OwnerDisplayName = 'Harvey Motulsky' OR OwnerDisplayName = 'Noah Snyder' ORDER BY ViewCount DESC LIMIT 1;"]}, {"question_id": 635, "answer_sql": ["SELECT COUNT(*) FROM posts JOIN votes ON posts.Id = votes.PostId JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'Matt Parker' AND votes.PostId > 4;"]}, {"question_id": 636, "answer_sql": ["SELECT COUNT(*) FROM comments JOIN users ON comments.UserId = users.Id WHERE comments.Score < 60 AND users.DisplayName = 'Neil McGuigan';", "SELECT COUNT(*) FROM comments WHERE UserDisplayName = 'Neil McGuigan' AND Score < 60;"]}, {"question_id": 637, "answer_sql": ["SELECT tags.TagName FROM tags JOIN posts ON tags.WikiPostId = posts.Id WHERE posts.OwnerDisplayName = 'Mark Meckes' AND posts.CommentCount = 0;"]}, {"question_id": 638, "answer_sql": ["SELECT users.DisplayName FROM users JOIN badges ON users.Id = badges.UserId WHERE badges.Name = 'Organizer';", "SELECT badges.UserId, badges.Name, users.DisplayName FROM badges JOIN users ON badges.UserId = users.Id WHERE badges.Name = 'Organizer';", "SELECT badges.UserId, badges.Name FROM badges JOIN users ON badges.UserId = users.Id WHERE badges.Name = 'Organizer';", "SELECT badges.Name FROM badges JOIN users ON badges.UserId = users.Id WHERE badges.Name = 'Organizer';", "SELECT badges.Name, badges.UserId FROM badges WHERE badges.Name = 'Organizer';"]}, {"question_id": 639, "answer_sql": []}, {"question_id": 640, "answer_sql": ["SELECT (SELECT SUM(ViewCount) FROM posts WHERE OwnerDisplayName = 'Mornington') - (SELECT SUM(ViewCount) FROM posts WHERE OwnerDisplayName = 'Amos');", "SELECT \n    SUBSTR(SUBSTR(posts.Body, \n                  INSTR(posts.Body, 'Mornington'), \n                  INSTR(posts.Body, 'ViewCount') - INSTR(posts.Body, 'Mornington') - LENGTH('Mornington')), \n           INSTR(posts.Body, 'ViewCount'), \n           INSTR(posts.Body, 'ViewCount') + LENGTH(posts.Body) - INSTR(posts.Body, 'ViewCount') - LENGTH('ViewCount')) - \n    SUBSTR(SUBSTR(posts.Body, \n                  INSTR(posts.Body, 'Amos'), \n                  INSTR(posts.Body, 'ViewCount') - INSTR(posts.Body, 'Amos') - LENGTH('Amos')), \n           INSTR(posts.Body, 'ViewCount'), \n           INSTR(posts.Body, 'ViewCount') + LENGTH(posts.Body) - INSTR(posts.Body, 'ViewCount') - LENGTH('ViewCount')) as ViewCount_Difference \nFROM \n    posts \nJOIN \n    users ON posts.OwnerUserId = users.Id \nWHERE \n    users.DisplayName IN ('Mornington', 'Amos');"]}, {"question_id": 641, "answer_sql": ["SELECT COUNT(DISTINCT badges.UserId) FROM badges WHERE badges.Name = 'commentator' AND DATE(badges.Date) = '2014';", "SELECT badges.UserId, COUNT(badges.Id) as CommentatorBadges FROM badges JOIN users ON badges.UserId = users.Id WHERE badges.Name = 'commentator' AND strftime('%Y', badges.Date) = '2014' GROUP BY badges.UserId;"]}, {"question_id": 642, "answer_sql": []}, {"question_id": 643, "answer_sql": ["SELECT users.DisplayName, users.Age FROM users JOIN posts ON users.Id = posts.OwnerUserId WHERE posts.ViewCount = (SELECT MAX(ViewCount) FROM posts) ORDER BY posts.ViewCount DESC;", "SELECT users.DisplayName, users.Age FROM users JOIN posts ON users.Id = badges.UserId JOIN badges ON badges.Id = (SELECT MAX(Id) FROM badges) WHERE posts.Id = (SELECT MAX(Id) FROM posts) ORDER BY users.Age DESC, users.DisplayName ASC;", "SELECT users.DisplayName, users.Age FROM users WHERE users.Views = (SELECT MAX(Views) FROM users)"]}, {"question_id": 644, "answer_sql": ["SELECT posts.LastEditDate, posts.LastEditorUserId FROM posts WHERE posts.Title = 'Detecting a given face in a database of facial images';", "SELECT posts.LastEditorUserId, posts.LastEditDate FROM posts WHERE posts.Title = 'Detecting a given face in a database of facial images';"]}, {"question_id": 645, "answer_sql": ["SELECT COUNT(*) FROM comments JOIN users ON comments.UserId = users.Id WHERE users.Id = 13 AND comments.Score < 60;", "SELECT COUNT(*) FROM comments JOIN users ON comments.UserId = users.Id WHERE comments.Score < 60;"]}, {"question_id": 646, "answer_sql": ["SELECT P.Title, GROUP_CONCAT(DISTINCT C.UserDisplayName) AS CommentUsers FROM posts P JOIN comments C ON P.Id = C.PostId WHERE C.Score > 60 GROUP BY P.Id", "SELECT posts.Title, users.DisplayName FROM posts JOIN comments ON posts.Id = comments.PostId JOIN users ON comments.UserId = users.Id WHERE comments.Score > 60"]}, {"question_id": 647, "answer_sql": ["SELECT Name FROM badges WHERE UserId IN ( SELECT Id FROM users WHERE Location = 'North Pole' ) AND Date LIKE '2011-%%'", ""]}, {"question_id": 648, "answer_sql": ["SELECT DisplayName, WebsiteUrl FROM users WHERE Id IN ( SELECT OwnerUserId FROM posts WHERE FavoriteCount > 150 );", "SELECT users.DisplayName, users.WebsiteUrl FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE posts.FavoriteCount > 150;"]}, {"question_id": 649, "answer_sql": ["SELECT ph.CreationDate, u.DisplayName as UserDisplayName, p.Title, p.LastEditorDisplayName, p.LastEditDate FROM postHistory ph JOIN posts p ON ph.PostId = p.Id JOIN users u ON ph.UserId = u.Id WHERE p.Title = 'What is the best introductory Bayesian statistics textbook?' ORDER BY ph.CreationDate DESC;", "SELECT ph.CreationDate, ph.UserDisplayName, ph.Text, p.Title, p.LastEditorDisplayName, p.LastEditDate FROM postHistory ph JOIN posts p ON ph.PostId = p.Id WHERE p.Title = 'What is the best introductory Bayesian statistics textbook?' ORDER BY ph.CreationDate DESC;", "SELECT ph.CreationDate, u.DisplayName, p.Title, p.LastEditorDisplayName, p.LastEditDate FROM postHistory ph JOIN posts p ON ph.PostId = p.Id JOIN users u ON p.OwnerUserId = u.Id WHERE p.Title = 'What is the best introductory Bayesian statistics textbook?' ORDER BY ph.CreationDate DESC;", "SELECT postHistory.PostHistoryTypeId, postHistory.RevisionGUID, postHistory.CreationDate, postHistory.Text, postHistory.Comment, postHistory.UserDisplayName FROM postHistory WHERE postHistory.PostId = ( SELECT Id FROM posts WHERE Title = 'What is the best introductory Bayesian statistics textbook?' ) ORDER BY postHistory.CreationDate DESC;"]}, {"question_id": 650, "answer_sql": ["SELECT users.LastAccessDate, users.Location FROM users \nINNER JOIN badges ON users.Id = badges.UserId \nWHERE badges.Name = 'Outliers';"]}, {"question_id": 651, "answer_sql": ["SELECT P.Title FROM badges AS B JOIN posts AS P ON B.UserId = P.OwnerUserId WHERE B.Name = 'How to tell if something happened in a data set which monitors a value over time';"]}, {"question_id": 652, "answer_sql": ["SELECT posts.Id, badges.Name FROM posts JOIN badges ON posts.OwnerUserId = badges.UserId WHERE badges.Date >= '2013-01-01' AND badges.Date <= '2013-12-31' AND posts.CreaionDate >= '2013-01-01' AND posts.CreaionDate <= '2013-12-31' AND posts.OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Samuel');", "SELECT posts.Id, badges.Name FROM posts JOIN badges ON posts.OwnerUserId = badges.UserId WHERE badges.Date >= '2013-01-01' AND badges.Date <= '2013-12-31' AND posts.OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Samuel')", "SELECT posts.Id, badges.Name FROM posts \nJOIN badges ON posts.OwnerUserId = badges.UserId \nJOIN users ON badges.UserId = users.Id \nWHERE badges.Date = '2013-01-01 00:00:00' AND users.DisplayName = 'Samuel';"]}, {"question_id": 653, "answer_sql": ["SELECT posts.OwnerDisplayName FROM posts WHERE posts.ViewCount = (SELECT MAX(ViewCount) FROM posts)"]}, {"question_id": 654, "answer_sql": ["SELECT users.DisplayName, users.Location FROM users JOIN badges ON users.Id = badges.UserId WHERE badges.Name = 'hypothesis-testing'", "SELECT DisplayName, Location FROM users WHERE Id = (SELECT OwnerUserId FROM posts WHERE Tags LIKE '%hypothesis-testing%');", "SELECT users.DisplayName, users.Location FROM users JOIN posts ON users.Id = posts.OwnerUserId WHERE posts.Tags LIKE '%hypothesis-testing%';", "SELECT badges.Name, users.DisplayName, users.Location FROM badges JOIN users ON badges.UserId = users.Id WHERE badges.Name = 'hypothesis-testing'", "SELECT users.DisplayName, users.Location FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE posts.Tags = 'hypothesis-testing';"]}, {"question_id": 655, "answer_sql": ["SELECT posts.Title, postLinks.LinkTypeId FROM posts JOIN postLinks ON posts.Id = postLinks.PostId WHERE posts.Title = 'What are principal component scores?';", "SELECT PostId, LinkTypeId FROM postLinks WHERE PostId = (SELECT Id FROM posts WHERE Title = 'What are principal component scores?') AND LinkTypeId = 1;", "SELECT postLinks.PostId, postLinks.RelatedPostId, postLinks.LinkTypeId FROM postLinks JOIN posts ON postLinks.PostId = posts.Id WHERE posts.Title = 'What are principal component scores?';", "SELECT postLinks.RelatedPostId, posts.Title FROM postLinks JOIN posts ON postLinks.RelatedPostId = posts.Id WHERE posts.Title = 'What are principal component scores?';"]}, {"question_id": 656, "answer_sql": ["SELECT ParentId, Title, Body FROM posts WHERE Score = (SELECT MAX(Score) FROM posts WHERE ParentId IS NOT NULL)", "SELECT p.ParentId, u.DisplayName FROM posts p JOIN votes v ON p.Id = v.PostId JOIN users u ON v.UserId = u.Id WHERE p.Score = (SELECT MAX(Score) FROM posts) AND p.ParentId IS NOT NULL;", "SELECT ParentId, MAX(Score) FROM posts WHERE ParentId IS NOT NULL GROUP BY ParentId ORDER BY MAX(Score) DESC LIMIT 1;", "SELECT users.DisplayName FROM posts JOIN posts as parent ON posts.ParentId = parent.Id JOIN users ON parent.OwnerUserId = users.Id WHERE posts.Score = ( SELECT MAX(Score) FROM posts WHERE ParentId IS NOT NULL )", "SELECT posts.ParentId, users.DisplayName FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE posts.Score = ( SELECT MAX(Score) FROM posts WHERE ParentId IS NOT NULL )"]}, {"question_id": 657, "answer_sql": ["SELECT users.DisplayName, users.WebsiteUrl FROM votes JOIN users ON votes.UserId = users.Id WHERE votes.VoteTypeId = 8 ORDER BY votes.BountyAmount DESC LIMIT 1;", "SELECT users.DisplayName, users.WebsiteUrl FROM users JOIN votes ON users.Id = votes.UserId JOIN postLinks ON votes.PostId = postLinks.PostId JOIN posts ON postLinks.PostId = posts.Id JOIN badges ON posts.OwnerUserId = badges.UserId WHERE votes.VoteTypeId = 8 AND votes.BountyAmount = (SELECT MAX(BountyAmount) FROM votes WHERE VoteTypeId = 8) ORDER BY votes.BountyAmount DESC;"]}, {"question_id": 658, "answer_sql": ["SELECT posts.Title, posts.ViewCount FROM posts ORDER BY posts.ViewCount DESC LIMIT 5;"]}, {"question_id": 659, "answer_sql": ["SELECT tags.TagName, COUNT(*) as PostCount FROM tags WHERE tags.Count BETWEEN 5000 AND 7000 GROUP BY tags.TagName;", "SELECT COUNT(*) FROM tags WHERE Count BETWEEN 5000 AND 7000;"]}, {"question_id": 660, "answer_sql": ["SELECT OwnerUserId FROM posts WHERE FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts);"]}, {"question_id": 661, "answer_sql": ["SELECT users.DisplayName, users.Age FROM users WHERE users.Reputation = (SELECT MAX(users.Reputation) FROM users);", "SELECT MAX(users.Age) as MostInfluentialAge FROM users;", "SELECT MAX(Reputation) as MostInfluentialUser FROM users;"]}, {"question_id": 662, "answer_sql": []}, {"question_id": 663, "answer_sql": ["SELECT MIN(Age) FROM users;", "SELECT Id FROM users WHERE Age = (SELECT MIN(Age) FROM users);", "SELECT Id FROM users ORDER BY Age ASC LIMIT 1;"]}, {"question_id": 664, "answer_sql": ["SELECT MAX(tags.Count) as Popular_Tag_Score FROM tags JOIN posts ON tags.ExcerptPostId = posts.Id", "SELECT posts.Score FROM posts JOIN tags ON posts.Tags = tags.TagName WHERE tags.Count = (SELECT MAX(Count) FROM tags)", "SELECT p.Score FROM posts p JOIN tags t ON p.Tags LIKE '%' || t.TagName || '%' GROUP BY p.Tags ORDER BY SUM(p.Score) DESC LIMIT 1;", "SELECT MAX(Score) as MostPopularScore FROM posts p JOIN tags t ON p.Tags LIKE '%#' || t.TagName || '%';"]}, {"question_id": 665, "answer_sql": []}, {"question_id": 666, "answer_sql": ["SELECT posts.Id FROM posts JOIN votes ON posts.Id = votes.PostId JOIN users ON votes.UserId = users.Id WHERE users.Id = 1465 ORDER BY votes.BountyAmount DESC LIMIT 1;", "SELECT posts.Id FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.Id = 1465 ORDER BY posts.FavoriteCount DESC LIMIT 1;", "SELECT MAX(FavoriteCount) as MostValuablePost FROM posts WHERE OwnerUserId = 1465;"]}, {"question_id": 667, "answer_sql": ["SELECT MIN(CreationDate) FROM postLinks;", "SELECT Title FROM posts WHERE Id = (SELECT MIN(PostId) FROM postLinks);", "SELECT Title FROM posts WHERE Id IN ( SELECT PostId FROM postLinks WHERE CreationDate = ( SELECT MIN(CreationDate) FROM postLinks ) );", "SELECT MIN(posts.CreaionDate) as Oldest_Post_Link FROM postLinks JOIN posts ON postLinks.PostId = posts.Id;"]}, {"question_id": 668, "answer_sql": ["SELECT u.DisplayName \nFROM users u \nJOIN badges b ON u.Id = b.UserId \nWHERE b.UserId = (SELECT MAX(UserId) FROM badges)", "SELECT users.DisplayName \nFROM badges \nJOIN users \nON badges.UserId = users.Id \nGROUP BY users.DisplayName \nORDER BY COUNT(badges.Name) DESC \nLIMIT 1;"]}, {"question_id": 669, "answer_sql": ["SELECT MIN(comments.CreationDate) as FirstVoteDate FROM comments JOIN users ON comments.UserId = users.Id WHERE users.DisplayName = 'chl';", "SELECT MIN(CreationDate) as FirstVoteDate FROM votes WHERE UserId = ( SELECT Id FROM users WHERE DisplayName = 'chl' );", "SELECT MIN(CreationDate) FROM votes WHERE PostId IN (SELECT Id FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'chl'));", "SELECT MIN(comments.CreationDate) as FirstVoteDate FROM comments JOIN users ON comments.UserId = users.Id WHERE users.DisplayName = 'chl' AND comments.PostId IN (SELECT postLinks.PostId FROM postLinks WHERE postLinks.LinkTypeId = 1);", "SELECT MIN(CreationDate) as FirstVoteDate FROM votes WHERE VoteTypeId = 1 AND UserId = ( SELECT Id FROM users WHERE DisplayName = 'chl' );"]}, {"question_id": 670, "answer_sql": ["SELECT MIN(CreaionDate) as FirstPostDate FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.Age = ( SELECT MIN(Age) FROM users );", "SELECT MIN(users.Age) as youngest_user_age FROM users WHERE users.Id IN ( SELECT posts.OwnerUserId FROM posts ORDER BY posts.CreaionDate ASC LIMIT 1 );", "SELECT MIN(CreationDate) as FirstPostDate FROM users WHERE Id = (SELECT AccountId FROM posts ORDER BY Id ASC LIMIT 1);"]}, {"question_id": 671, "answer_sql": ["SELECT users.DisplayName FROM badges JOIN users ON badges.UserId = users.Id WHERE badges.Name = 'Autobiographer' ORDER BY badges.Date ASC LIMIT 1;", "SELECT DisplayName FROM users WHERE Id = (SELECT UserId FROM badges ORDER BY Date ASC LIMIT 1);"]}, {"question_id": 672, "answer_sql": ["SELECT users.Id, COUNT(posts.Id) as PostCount FROM users JOIN posts ON users.Id = posts.OwnerUserId WHERE posts.FavoriteCount >= 4 AND users.Location = 'United Kingdom' GROUP BY users.Id HAVING COUNT(posts.Id) >= 1;"]}, {"question_id": 673, "answer_sql": ["SELECT AVG(posts.Id) FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.Age = (SELECT MAX(Age) FROM users);", "SELECT AVG(PostId) FROM votes WHERE UserId IN (SELECT Id FROM users WHERE Age = (SELECT MAX(Age) FROM users));", "SELECT AVG(PostId) FROM votes WHERE UserId IN (SELECT Id FROM users WHERE Age = (SELECT MIN(Age) FROM users));"]}, {"question_id": 674, "answer_sql": ["SELECT MAX(users.DisplayName) FROM users WHERE users.Reputation = (SELECT MAX(Reputation) FROM users);", "SELECT MAX(users.DisplayName) as Highest_Reputation FROM users;"]}, {"question_id": 675, "answer_sql": ["SELECT COUNT(*) FROM users WHERE Reputation > 2000 AND Views > 1000;"]}, {"question_id": 676, "answer_sql": []}, {"question_id": 677, "answer_sql": []}, {"question_id": 678, "answer_sql": ["SELECT posts.Id, posts.Title FROM posts WHERE posts.OwnerDisplayName = 'Harvey Motulsky' ORDER BY posts.ViewCount DESC LIMIT 1;"]}, {"question_id": 679, "answer_sql": ["SELECT Id, Title FROM posts WHERE Score = (SELECT MAX(Score) FROM posts);"]}, {"question_id": 680, "answer_sql": ["SELECT AVG(Score) as AverageScore FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'Stephen Turner';", "SELECT AVG(Score) FROM posts WHERE OwnerDisplayName = 'Stephen Turner';"]}, {"question_id": 681, "answer_sql": []}, {"question_id": 682, "answer_sql": []}, {"question_id": 683, "answer_sql": []}, {"question_id": 684, "answer_sql": []}, {"question_id": 685, "answer_sql": ["SELECT posts.ViewCount, users.DisplayName FROM posts INNER JOIN users ON posts.OwnerUserId = users.Id WHERE posts.Body = 'Computer Game Datasets' LIMIT 1;"]}, {"question_id": 686, "answer_sql": ["SELECT posts.ViewCount FROM posts JOIN (SELECT AVG(ViewCount) as AvgViewCount FROM posts) as AvgPosts ON posts.ViewCount > AvgPosts.AvgViewCount;", "SELECT COUNT(*) FROM posts WHERE ViewCount > (SELECT AVG(ViewCount) FROM posts);"]}, {"question_id": 687, "answer_sql": ["SELECT COUNT(*) FROM comments JOIN posts ON comments.PostId = posts.Id WHERE posts.Score = (SELECT MAX(Score) FROM posts);"]}, {"question_id": 688, "answer_sql": ["SELECT COUNT(*) FROM posts WHERE ViewCount > 35000 AND CommentCount = 0;"]}, {"question_id": 689, "answer_sql": ["SELECT users.DisplayName, users.Location FROM users JOIN postHistory ON users.Id = postHistory.UserId WHERE postHistory.Id = (SELECT MAX(Id) FROM postHistory WHERE postHistory.PostId = 183)", "SELECT posts.LastEditorDisplayName, users.Location FROM posts JOIN users ON posts.LastEditorUserId = users.Id WHERE posts.Id = 183;"]}, {"question_id": 690, "answer_sql": ["SELECT badges.Name, badges.Id FROM badges JOIN users ON badges.UserId = users.Id WHERE users.DisplayName = 'Emmett' ORDER BY badges.Date DESC LIMIT 1;", "SELECT Name FROM badges WHERE UserId IN (SELECT Id FROM users WHERE DisplayName = 'Emmett') ORDER BY Date DESC LIMIT 1;"]}, {"question_id": 691, "answer_sql": ["SELECT COUNT(*) FROM users WHERE Age BETWEEN 19 AND 65 AND UpVotes > 5000;"]}, {"question_id": 692, "answer_sql": ["SELECT badges.Date FROM badges JOIN users ON badges.UserId = users.Id WHERE users.DisplayName = 'Zolomon'"]}, {"question_id": 693, "answer_sql": ["SELECT users.DisplayName, COUNT(posts.Id) as PostCount, SUM(comments.Id) as CommentCount FROM users INNER JOIN (SELECT UserId FROM postHistory WHERE CreationDate = (SELECT MAX(CreationDate) FROM postHistory)) as LatestUsers ON users.Id = LatestUsers.UserId INNER JOIN posts ON users.Id = posts.OwnerUserId INNER JOIN comments ON posts.Id = comments.PostId GROUP BY users.Id;", "SELECT MAX(CreationDate) as LatestCreationDate FROM users;", "SELECT users.DisplayName, COUNT(posts.Id) as PostCount, SUM(comments.Id) as CommentCount FROM users LEFT JOIN postHistory ON users.Id = postHistory.UserId LEFT JOIN posts ON postHistory.PostId = posts.Id LEFT JOIN comments ON posts.Id = comments.PostId WHERE postHistory.CreationDate = ( SELECT MAX(CreationDate) FROM postHistory ) GROUP BY users.DisplayName;", "SELECT MAX(CreationDate) as LatestCreationDate, COUNT(*) as NumberOfUsers FROM users", "SELECT users.DisplayName, COUNT(posts.Id) AS PostCount, SUM(comments.Id) AS CommentCount FROM users INNER JOIN (SELECT UserId FROM postHistory WHERE CreationDate = ( SELECT MAX(CreationDate) FROM postHistory ) ) AS LatestUsers ON users.Id = LatestUsers.UserId INNER JOIN posts ON users.Id = posts.OwnerUserId INNER JOIN comments ON posts.Id = comments.PostId WHERE users.LastAccessDate = ( SELECT MAX(LastAccessDate) FROM users ) GROUP BY users.DisplayName;"]}, {"question_id": 694, "answer_sql": ["SELECT comments.Text, users.DisplayName FROM comments JOIN users ON comments.UserId = users.Id WHERE comments.PostId = (SELECT posts.Id FROM posts WHERE posts.Title = 'Analysing wind data with R') ORDER BY comments.CreationDate DESC LIMIT 1;", "SELECT Text, UserDisplayName FROM comments WHERE PostId IN (SELECT Id FROM posts WHERE Title = 'Analysing wind data with R') ORDER BY CreationDate DESC LIMIT 1;"]}, {"question_id": 695, "answer_sql": ["SELECT COUNT(*) FROM badges WHERE Name = 'Citizen Patrol';", "SELECT badges.UserId FROM badges JOIN users ON badges.UserId = users.Id WHERE badges.Name = 'Citizen Patrol';"]}, {"question_id": 696, "answer_sql": ["SELECT COUNT(*) FROM posts JOIN tags ON posts.Tags LIKE '%careers%'", "SELECT COUNT(*) FROM tags WHERE TagName = 'careers';", "SELECT COUNT(*) FROM posts WHERE Tags LIKE '%careers%';"]}, {"question_id": 697, "answer_sql": ["SELECT users.Reputation, users.Views, badges.Date, users.Reputation, users.LastAccessDate, users.DisplayName FROM users JOIN badges ON users.Id = badges.UserId WHERE users.DisplayName = 'Jarrod Dixon';", "SELECT users.Reputation, users.Views FROM users WHERE users.DisplayName = 'Jarrod Dixon';"]}, {"question_id": 698, "answer_sql": ["SELECT COUNT(*) as TotalComments, (SELECT COUNT(*) FROM posts WHERE AcceptedAnswerId = posts.Id) as TotalAnswers FROM posts WHERE Title = 'Clustering 1D data';", "SELECT COUNT(*) FROM posts JOIN users ON posts.OwnerUserId = users.Id JOIN comments ON posts.Id = comments.PostId WHERE posts.Title = 'Clustering 1D data';", "SELECT COUNT(*) as TotalComments, posts.AnswerCount as TotalAnswers FROM posts WHERE posts.Title = 'Clustering 1D data';", "SELECT COUNT(*) FROM posts WHERE Title = 'Clustering 1D data';", "SELECT posts.CommentCount, posts.AnswerCount FROM posts WHERE posts.Title = 'Clustering 1D data';"]}, {"question_id": 699, "answer_sql": ["SELECT CreationDate FROM users WHERE DisplayName = 'IrishStat';"]}, {"question_id": 700, "answer_sql": ["SELECT COUNT(*) FROM votes WHERE BountyAmount >= 30;", "SELECT COUNT(*) FROM votes JOIN posts ON votes.PostId = posts.Id WHERE posts.Body LIKE '%bounty amount over 30%' AND votes.BountyAmount >= 30;"]}, {"question_id": 701, "answer_sql": ["SELECT (COUNT(posts.Id) * 100.0) / (SELECT COUNT(*) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users))) as percentage FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users)) AND Score > 50;", "SELECT (COUNT(posts.Id) * 100.0) / (SELECT COUNT(users.Id) FROM users WHERE users.Reputation = (SELECT MAX(users.Reputation) FROM users)) as percentage FROM posts WHERE posts.OwnerUserId = (SELECT users.Id FROM users WHERE users.Reputation = (SELECT MAX(users.Reputation) FROM users)) AND posts.Score > 50;", "SELECT posts.OwnerUserId, (COUNT(posts.Id) * 100.0) / (SELECT COUNT(Id) FROM posts WHERE OwnerUserId = posts.OwnerUserId) as percentage FROM posts WHERE posts.OwnerUserId IN (SELECT users.Id FROM users WHERE users.Reputation = (SELECT MAX(Reputation) FROM users)) AND posts.Score > 50 GROUP BY posts.OwnerUserId ORDER BY percentage DESC;", "SELECT posts.OwnerUserId, (COUNT(posts.Id) * 100.0) / (SELECT COUNT(*) FROM posts WHERE OwnerUserId = posts.OwnerUserId) as percentage FROM posts WHERE posts.OwnerUserId IN (SELECT MAX(Reputation) FROM users) AND posts.Score > 50 GROUP BY posts.OwnerUserId ORDER BY percentage DESC;", "SELECT posts.OwnerUserId, (COUNT(posts.Id) * 100.0) / (SELECT COUNT(Id) FROM posts WHERE Score > 50) as percentage FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE posts.Score > 50 GROUP BY posts.OwnerUserId;"]}, {"question_id": 702, "answer_sql": ["SELECT COUNT(*) FROM posts WHERE Score < 20;"]}, {"question_id": 703, "answer_sql": ["SELECT COUNT(*) FROM tags WHERE Id < 15 AND Count <= 20;", "SELECT COUNT(*) FROM tags WHERE Count <= 20;"]}, {"question_id": 704, "answer_sql": ["SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'sample';"]}, {"question_id": 705, "answer_sql": ["SELECT Reputation, UpVotes FROM users WHERE AboutMe LIKE '%fine, you win :)%';"]}, {"question_id": 706, "answer_sql": ["SELECT comments.Text FROM posts JOIN comments ON posts.Id = comments.PostId JOIN users ON comments.UserId = users.Id WHERE posts.Title = 'How can I adapt ANOVA for binary data?'", "SELECT Body FROM posts WHERE Title = 'How can I adapt ANOVA for binary data?';", "SELECT postHistory.Comment FROM postHistory JOIN posts ON postHistory.PostId = posts.Id WHERE posts.Title = 'How can I adapt ANOVA for binary data?';"]}, {"question_id": 707, "answer_sql": ["SELECT Text, MAX(Score) as HighestScore FROM comments WHERE PostId IN ( SELECT Id FROM posts WHERE ViewCount BETWEEN 100 AND 150 ) GROUP BY Text ORDER BY HighestScore DESC LIMIT 1;", "SELECT MAX(Score) as Highest_Score FROM comments WHERE PostId IN ( SELECT Id FROM posts WHERE ViewCount BETWEEN 100 AND 150 );", "SELECT comments.Text, comments.Score FROM comments JOIN posts ON comments.PostId = posts.Id WHERE posts.ViewCount BETWEEN 100 AND 150 AND comments.Score = (SELECT MAX(Score) FROM comments)"]}, {"question_id": 708, "answer_sql": ["SELECT comments.CreationDate, users.Age FROM comments JOIN users ON comments.UserId = users.Id WHERE comments.Text LIKE '%http://%' LIMIT 1;"]}, {"question_id": 709, "answer_sql": ["SELECT COUNT(*) FROM comments JOIN posts ON comments.PostId = posts.Id WHERE comments.Score = 0 AND posts.ViewCount < 5;", "SELECT COUNT(*) FROM posts WHERE CommentCount = 0 AND ViewCount < 5;"]}, {"question_id": 710, "answer_sql": ["SELECT COUNT(*) FROM comments WHERE Score = 0 AND PostId IN ( SELECT Id FROM posts WHERE CommentCount = 1 );"]}, {"question_id": 711, "answer_sql": ["SELECT COUNT(*) FROM users JOIN comments ON users.Id = comments.UserId WHERE comments.Score = 0 AND users.Age = 40;", "SELECT COUNT(*) FROM users WHERE Reputation = 0 AND CreationDate >= '2022-01-01' AND CreationDate <= '2022-12-31' AND Age = 40;", "SELECT COUNT(DISTINCT users.Id) FROM users JOIN comments ON users.Id = comments.UserId WHERE comments.Score = 0 AND users.Age = 40;"]}, {"question_id": 712, "answer_sql": ["SELECT posts.Id, comments.PostId FROM posts JOIN comments ON posts.Id = comments.PostId WHERE posts.Title = 'Group differences on a five point Likert item';", "SELECT posts.Id AS PostId, comments.Text AS Comment FROM posts JOIN comments ON posts.Id = comments.PostId WHERE posts.Title = 'Group differences on a five point Likert item';", "SELECT posts.Id, comments.PostId, comments.Text FROM posts INNER JOIN comments ON posts.Id = comments.PostId WHERE posts.Title = 'Group differences on a five point Likert item';"]}, {"question_id": 713, "answer_sql": ["SELECT users.UpVotes FROM users JOIN comments ON users.Id = comments.UserId WHERE comments.Text = 'R is also lazy evaluated.';", "SELECT UpVotes FROM users WHERE AboutMe LIKE '%R is also lazy evaluated.%';"]}, {"question_id": 714, "answer_sql": ["SELECT comments.Text FROM comments JOIN users ON comments.UserId = users.Id WHERE users.DisplayName = 'Harvey Motulsky';", "SELECT * FROM comments WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'Harvey Motulsky');", "SELECT * FROM comments WHERE UserDisplayName = 'Harvey Motulsky';"]}, {"question_id": 715, "answer_sql": ["SELECT comments.UserDisplayName FROM comments JOIN users ON comments.UserId = users.Id WHERE comments.Score BETWEEN 1 AND 5 AND users.DownVotes = 0;"]}, {"question_id": 716, "answer_sql": ["SELECT (COUNT(UserId) * 100.0) / (SELECT COUNT(*) FROM users WHERE UpVotes = 0) as percentage FROM comments WHERE Score BETWEEN 5 and 10;", "SELECT (COUNT(UserId) * 100.0) / (SELECT COUNT(*) FROM comments WHERE Score BETWEEN 5 and 10) as percentage FROM comments WHERE Score BETWEEN 5 and 10 AND UserId IN (SELECT UserId FROM votes WHERE PostId IN (SELECT Id FROM posts WHERE AcceptedAnswerId IS NOT NULL));"]}, {"question_id": 717, "answer_sql": ["SELECT superpower.power_name FROM hero_power JOIN superpower ON hero_power.power_id = superpower.id JOIN superhero ON hero_power.hero_id = superhero.id WHERE superhero.superhero_name = '3-D Man';"]}, {"question_id": 718, "answer_sql": ["SELECT COUNT(*) FROM hero_power WHERE power_id = (SELECT id FROM superpower WHERE power_name = 'Super Strength');"]}, {"question_id": 719, "answer_sql": ["SELECT COUNT(*) FROM superhero WHERE id IN ( SELECT hero_id FROM hero_power WHERE power_id = ( SELECT id FROM superpower WHERE power_name = 'Super Strength' ) ) AND height_cm > 200;", "SELECT COUNT(*) FROM hero_power hp JOIN hero_attribute ha ON hp.hero_id = ha.hero_id JOIN superhero su ON ha.hero_id = su.id JOIN alignment al ON su.alignment_id = al.id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Super Strength' AND su.height_cm > 200;"]}, {"question_id": 720, "answer_sql": ["SELECT s.superhero_name, s.full_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name IN ( SELECT sp.power_name FROM superpower sp GROUP BY sp.power_name HAVING COUNT(sp.power_name) > 15 ) GROUP BY s.id;", "SELECT s.superhero_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name IN ( SELECT power_name FROM hero_power GROUP BY hero_id HAVING COUNT(power_id) > 15 ) GROUP BY s.id;", "SELECT s.superhero_name, s.full_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name IN ( SELECT power_name FROM hero_power GROUP BY hero_id HAVING COUNT(power_id) > 15 ) GROUP BY s.id;"]}, {"question_id": 721, "answer_sql": ["SELECT COUNT(*) FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'eye_colour' AND hero_attribute.attribute_value = (SELECT id FROM colour WHERE colour = 'Blue') AND superhero.gender_id = (SELECT id FROM gender WHERE gender = 'Superhero') AND superhero.alignment_id = (SELECT id FROM alignment WHERE alignment = 'Good');", "SELECT COUNT(*) FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Blue';"]}, {"question_id": 722, "answer_sql": ["SELECT colour.colour FROM superhero JOIN colour ON (superhero.skin_colour_id = colour.id) WHERE superhero.superhero_name = 'Apocalypse';"]}, {"question_id": 723, "answer_sql": ["SELECT COUNT(*) FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE eye_colour_id = (SELECT id FROM colour WHERE colour = 'Blue') AND power_name = 'Agility';", "SELECT COUNT(*) FROM hero_power hp JOIN superhero s ON s.id = hp.hero_id JOIN hero_attribute ha ON ha.hero_id = s.id JOIN superpower sp ON sp.id = hp.power_id JOIN alignment a ON a.id = s.alignment_id JOIN colour c ON c.id = s.eye_colour_id WHERE c.colour = 'Blue' AND sp.power_name = 'Agility';"]}, {"question_id": 724, "answer_sql": ["SELECT s.superhero_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE a.attribute_name = 'eye_color' AND s.eye_colour_id = 2 AND a.attribute_name = 'hair_color' AND s.hair_colour_id = 3 AND sp.power_name = 'Agility';", "SELECT s.superhero_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id JOIN hero_attribute ha ON s.id = ha.hero_id JOIN alignment a ON s.alignment_id = a.id JOIN gender g ON s.gender_id = g.id JOIN race r ON s.race_id = r.id JOIN colour c ON s.eye_colour_id = c.id WHERE c.colour = 'Blue' AND s.eye_colour_id = c.id AND sp.power_name = 'Agility' AND s.hair_colour_id = c.id;", "SELECT s.superhero_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE s.eye_colour_id = (SELECT id FROM colour WHERE colour = 'Blue') AND s.hair_colour_id = (SELECT id FROM colour WHERE colour = 'Blond') AND sp.power_name = 'Agility';"]}, {"question_id": 725, "answer_sql": ["SELECT COUNT(*) FROM superhero WHERE publisher_id IN (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics');"]}, {"question_id": 726, "answer_sql": ["SELECT MAX(height_cm) as tallest_height, full_name FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher_name = 'Marvel Comics';", "SELECT MAX(height_cm) as tallest_height, publisher.publisher_name as publisher_name FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' GROUP BY publisher.publisher_name ORDER BY tallest_height DESC LIMIT 1;", "SELECT MAX(height_cm) as tallest_height, MAX(weight_kg) as heaviest_weight, MAX(superhero.full_name) as tallest_hero FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics';", "SELECT MAX(superhero.full_name) FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics';"]}, {"question_id": 727, "answer_sql": ["SELECT publisher.publisher_name FROM publisher JOIN superhero ON publisher.id = superhero.publisher_id WHERE superhero.superhero_name = 'Sauron';"]}, {"question_id": 728, "answer_sql": ["SELECT COUNT(*) FROM superhero JOIN alignment ON superhero.alignment_id = alignment.id JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' AND alignment.alignment = 'Mutant' AND superhero.eye_colour_id = (SELECT id FROM colour WHERE colour = 'Blue')", "SELECT COUNT(*) FROM superhero WHERE eye_colour_id = (SELECT id FROM colour WHERE colour = 'Blue') AND publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics');"]}, {"question_id": 729, "answer_sql": []}, {"question_id": 730, "answer_sql": []}, {"question_id": 731, "answer_sql": ["SELECT COUNT(*) FROM publisher WHERE publisher_name = 'DC Comics';", "SELECT COUNT(*) FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'DC Comics');"]}, {"question_id": 732, "answer_sql": ["SELECT publisher.publisher_name FROM publisher JOIN superhero ON publisher.id = superhero.publisher_id JOIN hero_attribute ON hero_attribute.hero_id = superhero.id JOIN attribute ON attribute.id = hero_attribute.attribute_id WHERE attribute.attribute_name = 'Speed' ORDER BY attribute_value DESC LIMIT 1;"]}, {"question_id": 733, "answer_sql": ["SELECT COUNT(*) FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id JOIN colour ON superhero.eye_colour_id = colour.id WHERE publisher.publisher_name = 'Marvel Comics' AND colour.colour = 'Gold';", "SELECT COUNT(*) FROM superhero JOIN alignment ON superhero.alignment_id = alignment.id JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' AND alignment.alignment = 'Gold-eyed';"]}, {"question_id": 734, "answer_sql": ["SELECT publisher.publisher_name FROM publisher JOIN superhero ON publisher.id = superhero.publisher_id WHERE superhero.superhero_name = 'Blue Beetle II';"]}, {"question_id": 735, "answer_sql": ["SELECT COUNT(*) FROM superhero JOIN hero_attribute ON hero_attribute.hero_id = superhero.id JOIN attribute ON attribute.id = hero_attribute.attribute_id WHERE attribute.attribute_name = 'Hair colour' AND hero_attribute.attribute_value = (SELECT id FROM colour WHERE colour.colour = 'Blond') AND hero_attribute.attribute_value = superhero.hair_colour_id;", "SELECT COUNT(*) FROM superhero WHERE hair_colour_id = (SELECT id FROM colour WHERE colour = 'Blond') AND hair_colour_id IS NOT NULL;"]}, {"question_id": 736, "answer_sql": ["SELECT s.superhero_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'Intelligence' ORDER BY ha.attribute_value DESC LIMIT 1;", "SELECT s.superhero_name FROM superhero s WHERE s.id = (SELECT MIN(h.hero_id) FROM hero_attribute h WHERE h.attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Intelligence'));", "SELECT hero_id FROM hero_attribute WHERE attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Intelligence') ORDER BY attribute_value DESC LIMIT 1;", "SELECT hero_attribute.hero_id, hero_attribute.attribute_value FROM hero_attribute JOIN superhero ON hero_attribute.hero_id = superhero.id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Intelligence' ORDER BY hero_attribute.attribute_value DESC LIMIT 1;", "SELECT hero_attribute.hero_id, hero_attribute.attribute_value, superhero.superhero_name FROM hero_attribute JOIN superhero ON hero_attribute.hero_id = superhero.id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Intelligence' ORDER BY hero_attribute.attribute_value DESC LIMIT 1;"]}, {"question_id": 737, "answer_sql": ["SELECT r.race FROM superhero s JOIN race r ON s.race_id = r.id WHERE s.superhero_name = 'Copycat';"]}, {"question_id": 738, "answer_sql": ["SELECT COUNT(*) FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE hero_attribute.attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Durability') AND hero_attribute.attribute_value < 50;"]}, {"question_id": 739, "answer_sql": ["SELECT superhero.superhero_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Death Touch';"]}, {"question_id": 740, "answer_sql": ["SELECT COUNT(*) FROM superhero JOIN gender ON superhero.gender_id = gender.id JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE gender.gender = 'Female' AND attribute.attribute_name = 'Strength' AND hero_attribute.attribute_value = 100;"]}, {"question_id": 741, "answer_sql": []}, {"question_id": 742, "answer_sql": ["SELECT COUNT(*) FROM superhero JOIN race ON superhero.race_id = race.id JOIN alignment ON superhero.alignment_id = alignment.id WHERE race.race = 'Vampire' AND alignment.id = 1;"]}, {"question_id": 743, "answer_sql": []}, {"question_id": 744, "answer_sql": []}, {"question_id": 745, "answer_sql": ["SELECT publisher.id FROM publisher WHERE publisher.publisher_name = 'Star Trek';"]}, {"question_id": 746, "answer_sql": ["SELECT AVG(attribute_value) as average_attribute_value FROM hero_attribute;", "SELECT AVG(hero_attribute.attribute_value) FROM hero_attribute JOIN superhero ON hero_attribute.hero_id = superhero.id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'average attribute value of all superheroes';"]}, {"question_id": 747, "answer_sql": ["SELECT COUNT(*) FROM superhero WHERE full_name IS NULL;"]}, {"question_id": 748, "answer_sql": ["SELECT colour.colour FROM colour JOIN hero_attribute ON colour.id = hero_attribute.attribute_id JOIN superhero ON hero_attribute.hero_id = superhero.id WHERE superhero.id = 75;", "SELECT colour.colour FROM colour JOIN superhero ON colour.id = superhero.eye_colour_id JOIN hero_attribute ON hero_attribute.hero_id = superhero.id JOIN attribute ON attribute.id = hero_attribute.attribute_id WHERE attribute.attribute_name = 'Eye Colour' AND superhero.id = 75;", "SELECT colour.colour FROM colour JOIN superhero ON colour.id = superhero.eye_colour_id JOIN hero_attribute ON hero_attribute.hero_id = 75;", "SELECT colour.colour FROM colour JOIN hero_attribute ON colour.id = hero_attribute.attribute_id JOIN superhero ON hero_attribute.hero_id = superhero.id WHERE superhero.id = 75 AND hero_attribute.attribute_id = 1;"]}, {"question_id": 749, "answer_sql": ["SELECT superpower.power_name FROM hero_power JOIN superpower ON hero_power.power_id = superpower.id WHERE hero_power.hero_id IN ( SELECT hero_attribute.hero_id FROM hero_attribute JOIN superhero ON hero_attribute.hero_id = superhero.id WHERE superhero.superhero_name = 'Deathlok' )", "SELECT superpower.power_name FROM hero_power JOIN superpower ON hero_power.power_id = superpower.id WHERE hero_power.hero_id IN ( SELECT hero_attribute.hero_id FROM hero_attribute JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'superpowers' AND hero_attribute.attribute_value = 'Deathlok' ) AND hero_power.hero_id IN ( SELECT superhero.id FROM superhero WHERE superhero.superhero_name = 'Deathlok' );"]}, {"question_id": 750, "answer_sql": ["SELECT AVG(weight_kg) FROM superhero WHERE gender_id = 2;"]}, {"question_id": 751, "answer_sql": ["SELECT superpower.power_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.gender_id = (SELECT id FROM gender WHERE gender = 'Male') GROUP BY superpower.power_name LIMIT 5;", "SELECT hero_attribute.attribute_value FROM hero_attribute JOIN hero_power ON hero_attribute.hero_id = hero_power.hero_id JOIN superpower ON hero_attribute.attribute_id = superpower.id JOIN superhero ON hero_power.hero_id = superhero.id WHERE superhero.gender_id = 1 AND superpower.power_name IN ( SELECT attribute_name FROM hero_attribute JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.id = 1 ) GROUP BY hero_attribute.hero_id ORDER BY hero_attribute.hero_id;", "SELECT superpower.power_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.gender_id = (SELECT id FROM gender WHERE gender = 'Male') GROUP BY superpower.power_name;"]}, {"question_id": 752, "answer_sql": ["SELECT s.superhero_name FROM superhero s JOIN race r ON s.race_id = r.id WHERE r.race = 'Alien';", "SELECT s.superhero_name FROM superhero s WHERE s.race_id = (SELECT id FROM race WHERE race = 'Alien') AND s.superhero_name LIKE 'Alien%';"]}, {"question_id": 753, "answer_sql": ["SELECT superhero_name FROM superhero WHERE height_cm BETWEEN 170 AND 190 AND eye_colour_id = 1;"]}, {"question_id": 754, "answer_sql": ["SELECT sp.power_name FROM hero_power hp JOIN superpower sp ON hp.power_id = sp.id WHERE hp.hero_id = 56;"]}, {"question_id": 755, "answer_sql": ["SELECT superhero.superhero_name, superhero.full_name FROM superhero JOIN race ON superhero.race_id = race.id WHERE race.race = 'Demi-God' LIMIT 5;", "SELECT superhero.superhero_name FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE race.race = 'Demi-God';", "SELECT full_name FROM superhero WHERE race_id = (SELECT id FROM race WHERE race = 'Demi-God')"]}, {"question_id": 756, "answer_sql": ["SELECT COUNT(*) FROM superhero JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.alignment = 'Bad';", "SELECT COUNT(*) FROM superhero WHERE alignment_id = 'Bad';"]}, {"question_id": 757, "answer_sql": ["SELECT race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.weight_kg = 169;"]}, {"question_id": 758, "answer_sql": ["SELECT colour.colour FROM hero_attribute JOIN colour ON hero_attribute.attribute_id = colour.id JOIN attribute ON hero_attribute.attribute_id = attribute.id JOIN gender ON hero_attribute.hero_id = gender.id JOIN race ON hero_attribute.hero_id = race.id WHERE attribute.attribute_name = 'Hair' AND gender.gender = 'Human' AND race.race = 'Human' AND hero_attribute.attribute_value = 185;"]}, {"question_id": 759, "answer_sql": ["SELECT c.colour FROM colour c JOIN ( SELECT eye_colour_id FROM superhero ORDER BY weight_kg DESC LIMIT 1 ) s ON c.id = s.eye_colour_id;", "SELECT c.colour FROM colour c JOIN hero_attribute ha ON c.id = ha.attribute_value JOIN attribute a ON a.id = ha.attribute_id JOIN hero_power hp ON hp.hero_id = ha.hero_id JOIN superpower sp ON sp.id = hp.power_id JOIN superhero s ON s.id = hp.hero_id WHERE a.attribute_name = 'Eye Colour' ORDER BY s.weight_kg DESC LIMIT 1;"]}, {"question_id": 760, "answer_sql": []}, {"question_id": 761, "answer_sql": ["SELECT super.superhero_name, super.full_name FROM superhero as super WHERE super.gender_id = 1 AND super.weight_kg > (SELECT AVG(weight_kg) * 0.79 FROM superhero);", "SELECT hero.full_name FROM superhero AS hero JOIN gender AS gen ON hero.gender_id = gen.id WHERE gen.gender = 'Male' AND hero.weight_kg > (SELECT AVG(weight_kg) * 0.79 FROM superhero);", "SELECT super.superhero_name, super.full_name FROM superhero super JOIN ( SELECT AVG(weight_kg) as avg_weight FROM superhero ) avg_super ON super.id = avg_super.avg_weight WHERE super.gender_id = 1 AND super.weight_kg > avg_super.avg_weight;"]}, {"question_id": 762, "answer_sql": ["SELECT superpower.power_name FROM superpower JOIN hero_power ON superpower.id = hero_power.power_id GROUP BY superpower.power_name ORDER BY COUNT(superpower.power_name) DESC LIMIT 1;"]}, {"question_id": 763, "answer_sql": ["SELECT hero_attribute.attribute_value FROM hero_attribute JOIN superhero ON hero_attribute.hero_id = superhero.id WHERE superhero.superhero_name = 'Abomination';", "SELECT hero_attribute.attribute_value FROM hero_attribute JOIN attribute ON hero_attribute.attribute_id = attribute.id JOIN superhero ON hero_attribute.hero_id = superhero.id WHERE attribute.attribute_name = 'Abomination' AND superhero.superhero_name = 'Abomination';"]}, {"question_id": 764, "answer_sql": ["SELECT superpower.power_name FROM hero_power JOIN superhero ON hero_power.hero_id = superhero.id JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.id = 1;"]}, {"question_id": 765, "answer_sql": ["SELECT COUNT(*) FROM hero_power JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'stealth';"]}, {"question_id": 766, "answer_sql": ["SELECT MAX(s.superhero_name) FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'strength';", "SELECT MAX(attribute_value) as highest_attribute_value, hero_attribute.hero_id, hero_attribute.attribute_id, hero_attribute.attribute_value, superpower.power_name, superpower.id as power_id FROM hero_attribute JOIN attribute ON hero_attribute.attribute_id = attribute.id JOIN hero_power ON hero_attribute.hero_id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id JOIN superhero ON hero_attribute.hero_id = superhero.id WHERE attribute.attribute_name = 'strength' GROUP BY hero_attribute.hero_id, hero_attribute.attribute_id, hero_attribute.attribute_value, superpower.power_name, superpower.id ORDER BY highest_attribute_value DESC LIMIT 1;"]}, {"question_id": 767, "answer_sql": ["SELECT AVG(height_cm) as average_height FROM superhero WHERE skin_colour_id = 1;"]}, {"question_id": 768, "answer_sql": ["SELECT COUNT(*) FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Dark Horse Comics');"]}, {"question_id": 769, "answer_sql": ["SELECT s.superhero_name FROM superhero s JOIN publisher p ON s.publisher_id = p.id JOIN attribute a ON s.alignment_id = a.id WHERE p.publisher_name = 'Dark Horse Comics' AND a.attribute_name = 'durability' ORDER BY s.superhero_name DESC LIMIT 1;"]}, {"question_id": 770, "answer_sql": ["SELECT colour.colour FROM colour JOIN superhero ON colour.id = superhero.eye_colour_id WHERE superhero.full_name = 'Abraham Sapien';", "SELECT colour.colour FROM colour JOIN superhero ON colour.id = superhero.eye_colour_id JOIN hero_attribute ON hero_attribute.hero_id = superhero.id JOIN hero_power ON hero_power.hero_id = superhero.id JOIN superpower ON hero_power.power_id = superpower.id WHERE hero_attribute.attribute_id = ( SELECT attribute.id FROM attribute WHERE attribute.attribute_name = 'Eyes' ) AND superhero.full_name = 'Abraham Sapien';"]}, {"question_id": 771, "answer_sql": ["SELECT s.superhero_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Flight';", "SELECT DISTINCT superhero.superhero_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Flight';", "SELECT h.superhero_name FROM superhero h JOIN superpower sp ON h.id = sp.id WHERE sp.power_name = 'Flight';", "SELECT h.superhero_name FROM superhero h JOIN superpower sp ON h.publisher_id = sp.id WHERE sp.power_name = 'Flight';"]}, {"question_id": 772, "answer_sql": ["SELECT c1.colour as eyes, c2.colour as hair, c3.colour as skin FROM superhero s JOIN colour c1 ON s.eye_colour_id = c1.id JOIN colour c2 ON s.hair_colour_id = c2.id JOIN colour c3 ON s.skin_colour_id = c3.id JOIN gender g ON s.gender_id = g.id JOIN publisher p ON s.publisher_id = p.id WHERE g.gender = 'Female' AND p.publisher_name = 'Dark Horse Comics'", "SELECT gender.gender, colour.colour AS eyes, colour.colour AS hair, colour.colour AS skin FROM superhero JOIN gender ON superhero.gender_id = gender.id JOIN colour ON (superhero.eye_colour_id = colour.id AND superhero.hair_colour_id = colour.id AND superhero.skin_colour_id = colour.id) WHERE gender.gender = 'Female' AND superhero.publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Dark Horse Comics')", "SELECT superhero.superhero_name, colour.colour AS eyes, colour.colour AS hair, colour.colour AS skin FROM superhero JOIN hero_attribute ON hero_attribute.hero_id = superhero.id JOIN attribute ON attribute.id = hero_attribute.attribute_id JOIN colour ON colour.id = hero_attribute.attribute_value WHERE superhero.gender_id = 2 AND superhero.publisher_id = 1", "SELECT superhero.superhero_name, colour.colour AS eyes, colour.colour AS hair, colour.colour AS skin FROM superhero JOIN hero_attribute ON hero_attribute.hero_id = superhero.id JOIN attribute ON attribute.id = hero_attribute.attribute_id JOIN colour ON colour.id = hero_attribute.attribute_value WHERE superhero.gender_id = 2 AND superhero.publisher_id = 'Dark Horse Comics'"]}, {"question_id": 773, "answer_sql": ["SELECT publisher.publisher_name FROM superhero JOIN colour ON superhero.eye_colour_id = superhero.hair_colour_id AND superhero.hair_colour_id = superhero.skin_colour_id JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel'"]}, {"question_id": 774, "answer_sql": ["SELECT alignment.alignment FROM alignment JOIN superhero ON alignment.id = superhero.alignment_id WHERE superhero.superhero_name = 'A-Bomb';", "SELECT r.race FROM superhero s JOIN race r ON s.race_id = r.id WHERE s.superhero_name = 'A-Bomb';"]}, {"question_id": 775, "answer_sql": ["SELECT \n    (SUM(eye_colour_id = 3 AND gender_id = 2) * 100.0) / \n    (SUM(gender_id = 2) * 100.0) AS percentage\nFROM \n    superhero;", "SELECT (SUM(CASE WHEN eye_colour_id = 3 THEN 1 ELSE 0 END) * 100.0) / (SUM(CASE WHEN gender_id = 2 THEN 1 ELSE 0 END)) AS percentage FROM superhero WHERE gender_id = 2 AND eye_colour_id = 3;"]}, {"question_id": 776, "answer_sql": ["SELECT superhero.superhero_name, race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.full_name = 'Charles Chandler';", "SELECT superhero.superhero_name, superhero.race_id FROM superhero WHERE superhero.full_name = 'Charles Chandler';", "SELECT superhero.superhero_name, race.race FROM superhero JOIN hero_power ON hero_power.hero_id = superhero.id JOIN race ON race.id = superhero.race_id WHERE superhero.full_name = 'Charles Chandler';", "SELECT superhero.superhero_name, race.race FROM superhero JOIN race ON superhero.race_id = race.id WHERE superhero.superhero_name = 'Charles Chandler';"]}, {"question_id": 777, "answer_sql": ["SELECT gender.gender FROM superhero JOIN gender ON superhero.gender_id = gender.id WHERE superhero.superhero_name = 'Agent 13';"]}, {"question_id": 778, "answer_sql": ["SELECT s.superhero_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Adaptation';", "SELECT s.superhero_name FROM superhero s JOIN superpower sp ON s.id = sp.id WHERE sp.power_name = 'Adaptation';"]}, {"question_id": 779, "answer_sql": ["SELECT COUNT(*) FROM hero_power WHERE hero_id IN (SELECT id FROM superhero WHERE superhero_name = 'Amazo');", "SELECT COUNT(*) FROM superpower JOIN hero_power ON superpower.id = hero_power.power_id JOIN hero_attribute ON hero_attribute.hero_id = hero_attribute.hero_id JOIN superhero ON superpower.id = superpower.id WHERE superpower.power_name IN ('Super Speed', 'Super Strength', 'Super Intelligence') AND superpower.power_name NOT IN ('None') AND hero_attribute.hero_id IN (SELECT hero_id FROM hero_power WHERE power_id IN (SELECT id FROM superpower WHERE power_name = 'Super Speed')) AND superhero.superhero_name = 'Amazo';", "SELECT COUNT(*) FROM hero_power hp JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Power';"]}, {"question_id": 780, "answer_sql": ["SELECT superpower.power_name FROM hero_power JOIN superpower ON hero_power.power_id = superpower.id JOIN hero_attribute ON hero_power.hero_id = hero_attribute.hero_id JOIN superhero ON hero_attribute.hero_id = superhero.id WHERE superhero.superhero_name = 'Hunter Zolomon';"]}, {"question_id": 781, "answer_sql": ["SELECT height_cm FROM superhero WHERE eye_colour_id = (SELECT id FROM colour WHERE colour = 'Amber')"]}, {"question_id": 782, "answer_sql": ["SELECT superhero_name FROM superhero WHERE eye_colour_id = (SELECT id FROM colour WHERE colour = 'Black') AND hair_colour_id = (SELECT id FROM colour WHERE colour = 'Black');", "SELECT super.superhero_name FROM superhero super JOIN hero_attribute ha ON super.id = ha.hero_id JOIN attribute att ON ha.attribute_id = att.id WHERE att.attribute_name = 'Eyes' AND ha.attribute_value = 1 AND att.attribute_name = 'Hair' AND ha.attribute_value = 1 AND super.eye_colour_id = 1 AND super.hair_colour_id = 1;", "SELECT superhero_name FROM superhero WHERE eye_colour_id = hair_colour_id;"]}, {"question_id": 783, "answer_sql": ["SELECT eye_colour.colour FROM superhero JOIN colour AS eye_colour ON superhero.eye_colour_id = eye_colour.id WHERE eye_colour.colour = 'Gold';", "SELECT c.colour FROM colour c JOIN hero_attribute ha ON c.id = ha.attribute_id JOIN attribute a ON ha.attribute_id = a.id JOIN hero_power hp ON a.id = hp.hero_id JOIN superhero s ON hp.hero_id = s.id WHERE s.skin_colour_id = (SELECT id FROM colour WHERE colour = 'Gold') AND a.attribute_name = 'Eye colour';", "SELECT colour.colour FROM colour JOIN superhero ON colour.id = superhero.skin_colour_id JOIN alignment ON alignment.id = superhero.alignment_id WHERE colour.colour = 'Gold' AND alignment.alignment = 'Good';", "SELECT c.colour FROM colour c JOIN hero_attribute ha ON c.id = ha.attribute_id JOIN hero_power hp ON ha.hero_id = hp.hero_id JOIN superpower sp ON sp.id = hp.power_id JOIN superhero su ON su.id = hp.hero_id WHERE su.skin_colour_id = (SELECT id FROM colour WHERE colour = 'Gold')"]}, {"question_id": 784, "answer_sql": ["SELECT hero.superhero_name FROM superhero AS hero JOIN race AS r ON hero.race_id = r.id WHERE r.race = 'Vampire';", "SELECT s.full_name FROM superhero s JOIN race r ON s.race_id = r.id WHERE r.race = 'Vampire'", "SELECT hero.full_name FROM superhero AS hero JOIN hero_attribute AS attr ON hero.id = attr.hero_id JOIN attribute AS attr_name ON attr.attribute_id = attr_name.id WHERE attr_name.attribute_name = 'race' AND hero.race_id = (SELECT id FROM race WHERE race = 'Vampire')"]}, {"question_id": 785, "answer_sql": ["SELECT super.superhero_name FROM superhero super WHERE super.alignment_id = ( SELECT id FROM alignment WHERE alignment = 'Neutral' );"]}, {"question_id": 786, "answer_sql": ["SELECT hero_id FROM hero_attribute WHERE attribute_id IN (SELECT attribute.id FROM attribute WHERE attribute_name = 'Strength') ORDER BY attribute_value DESC LIMIT 1;", "SELECT hero_attribute.hero_id, attribute.attribute_name, attribute_value FROM hero_attribute JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Strength' ORDER BY attribute_value DESC LIMIT 1;", "SELECT MAX(attribute_value) FROM hero_attribute WHERE attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Strength');", "SELECT COUNT(*) FROM hero_attribute JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute_name = 'Strength' AND attribute_value = (SELECT MAX(attribute_value) FROM hero_attribute WHERE attribute_name = 'Strength');"]}, {"question_id": 787, "answer_sql": ["SELECT race.race, alignment.alignment FROM superhero JOIN race ON superhero.race_id = race.id JOIN alignment ON superhero.alignment_id = alignment.id WHERE superhero.superhero_name = 'Cameron Hicks';"]}, {"question_id": 788, "answer_sql": []}, {"question_id": 789, "answer_sql": ["SELECT AVG(weight_kg) FROM superhero JOIN race ON superhero.race_id = race.id WHERE race.race = 'Alien';"]}, {"question_id": 790, "answer_sql": []}, {"question_id": 791, "answer_sql": ["SELECT superhero.superhero_name, AVG(superhero.height_cm) as average_height FROM superhero GROUP BY superhero.superhero_name;", "SELECT AVG(superhero.height_cm) as average_height FROM superhero;"]}, {"question_id": 792, "answer_sql": ["SELECT sp.power_name FROM superhero h JOIN superpower sp ON h.id = sp.id WHERE h.superhero_name = 'Abomination';", "SELECT power_name FROM superpower WHERE id = (SELECT power_id FROM hero_power WHERE hero_id = (SELECT id FROM superhero WHERE superhero_name = 'Abomination'));", "SELECT superpower.power_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = 'Abomination';"]}, {"question_id": 793, "answer_sql": ["SELECT COUNT(*) FROM superhero WHERE race_id = 21 AND gender_id = 1;", "SELECT COUNT(*) FROM superhero JOIN race ON superhero.race_id = race.id JOIN gender ON superhero.gender_id = gender.id WHERE race.id = 21 AND gender.gender = 'male';"]}, {"question_id": 794, "answer_sql": ["SELECT MAX(attribute_value) as 'Fastest' FROM hero_attribute JOIN superhero ON hero_attribute.hero_id = superhero.id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute_name = 'Speed';", "SELECT MAX(height_cm) as Fastest_Hero FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel');"]}, {"question_id": 795, "answer_sql": ["SELECT COUNT(*) FROM superhero WHERE alignment_id = 3;"]}, {"question_id": 796, "answer_sql": ["SELECT attribute.attribute_name, hero_attribute.attribute_value FROM attribute JOIN hero_attribute ON attribute.id = hero_attribute.attribute_id WHERE hero_attribute.hero_id = ( SELECT id FROM superhero WHERE superhero_name = '3-D Man' );", "SELECT hero_attribute.attribute_value, attribute.attribute_name FROM hero_attribute JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE hero_attribute.hero_id = ( SELECT id FROM superhero WHERE superhero.superhero_name = '3-D Man' );", "SELECT attribute.attribute_name, hero_attribute.attribute_value FROM attribute JOIN hero_attribute ON attribute.id = hero_attribute.attribute_id WHERE attribute.attribute_name = 'attributes' AND hero_attribute.hero_id = ( SELECT id FROM superhero WHERE superhero_name = '3-D Man' );"]}, {"question_id": 797, "answer_sql": ["SELECT super.superhero_name FROM superhero AS super JOIN colour AS eye ON super.eye_colour_id = eye.id JOIN colour AS hair ON super.hair_colour_id = hair.id WHERE eye.colour = 'blue' AND hair.colour = 'brown';", "SELECT * FROM superhero WHERE eye_colour_id = 7 AND hair_colour_id = 9;"]}, {"question_id": 798, "answer_sql": ["SELECT publisher.publisher_name FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy');"]}, {"question_id": 799, "answer_sql": ["SELECT COUNT(*) FROM superhero WHERE publisher_id = 1;", "SELECT COUNT(*) FROM superhero WHERE publisher_id IS NULL;"]}, {"question_id": 800, "answer_sql": ["SELECT (SUM(CASE WHEN eye_colour_id = 7 THEN 1 ELSE 0 END)) * 100.0 / COUNT(*) AS percentage FROM superhero WHERE eye_colour_id = 7;", "SELECT (SUM(CASE WHEN eye_colour_id = 7 THEN 1 ELSE 0 END)) * 100.0 / COUNT(*) AS percentage FROM superhero;"]}, {"question_id": 801, "answer_sql": ["SELECT SUM(gender_id = 1) as male_count, SUM(gender_id = 2) as female_count, (SUM(gender_id = 1) / SUM(gender_id = 2)) as ratio FROM superhero;", "SELECT SUM(gender_id = 1) / SUM(gender_id = 2) as ratio FROM superhero;"]}, {"question_id": 802, "answer_sql": ["SELECT MAX(height_cm), superhero_name FROM superhero GROUP BY publisher_id;", "SELECT MAX(height_cm) FROM superhero;", "SELECT MAX(height_cm), superhero_name FROM superhero;", "SELECT MAX(height_cm), superhero_name FROM superhero GROUP BY height_cm;", "SELECT MAX(height_cm), superhero_name FROM superhero WHERE alignment_id = 1;"]}, {"question_id": 803, "answer_sql": ["SELECT superpower.id FROM superpower WHERE superpower.power_name = 'cryokinesis';"]}, {"question_id": 804, "answer_sql": ["SELECT superhero.superhero_name FROM superhero WHERE superhero.id = 294;"]}, {"question_id": 805, "answer_sql": ["SELECT hero_attribute.hero_id, superhero.superhero_name, superhero.full_name FROM hero_attribute JOIN superhero ON hero_attribute.hero_id = superhero.id WHERE hero_attribute.attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'weight') AND hero_attribute.attribute_value = 0;", "SELECT full_name FROM superhero WHERE weight_kg = 0 OR weight_kg = NULL;", "SELECT full_name FROM superhero WHERE weight_kg = 0 OR weight_kg IS NULL;"]}, {"question_id": 806, "answer_sql": ["SELECT c.colour FROM colour c JOIN hero_attribute ha ON c.id = ha.attribute_id JOIN hero_power hp ON ha.hero_id = hp.hero_id JOIN superhero su ON hp.hero_id = su.id WHERE su.full_name = 'Karen Beecher-Duncan';", "SELECT colour.colour FROM colour JOIN hero_attribute ON colour.id = hero_attribute.attribute_id JOIN hero_power ON hero_attribute.hero_id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE hero_attribute.attribute_value = ( SELECT id FROM gender WHERE gender.gender = 'Female' ) AND superpower.power_name = 'Super-Skinny';", "SELECT c.colour FROM colour c WHERE c.id = (SELECT eye_colour_id FROM superhero WHERE full_name = 'Karen Beecher-Duncan');", "SELECT c.colour FROM colour c JOIN hero_attribute ha ON c.id = ha.attribute_value JOIN hero_power hp ON ha.hero_id = hp.hero_id JOIN superhero su ON hp.power_id = su.id WHERE su.full_name = 'Karen Beecher-Duncan';", "SELECT c.colour FROM colour c JOIN hero_attribute ha ON c.id = ha.attribute_id JOIN hero_power hp ON ha.hero_id = hp.hero_id JOIN superhero su ON hp.power_id = su.id WHERE su.full_name = 'Karen Beecher-Duncan';"]}, {"question_id": 807, "answer_sql": ["SELECT superpower.power_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.full_name = 'Helen Parr';"]}, {"question_id": 808, "answer_sql": ["SELECT race.race FROM superhero JOIN race ON superhero.race_id = race.id WHERE superhero.weight_kg = 108 AND superhero.height_cm = 188;"]}, {"question_id": 809, "answer_sql": ["SELECT publisher.publisher_name FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.id = 38;"]}, {"question_id": 810, "answer_sql": ["SELECT r.race FROM hero_attribute ha JOIN superhero s ON ha.hero_id = s.id JOIN race r ON s.race_id = r.id WHERE ha.attribute_value = ( SELECT MAX(attribute_value) FROM hero_attribute WHERE hero_id = s.id )", "SELECT r.race FROM hero_attribute ha JOIN hero_power hp ON ha.hero_id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id JOIN superhero su ON ha.hero_id = su.id JOIN race r ON su.race_id = r.id WHERE ha.attribute_value = ( SELECT MAX(attribute_value) FROM hero_attribute );", "SELECT race.race FROM hero_attribute JOIN hero_power ON hero_attribute.hero_id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id JOIN superhero ON hero_attribute.hero_id = superhero.id JOIN race ON superhero.race_id = race.id WHERE hero_attribute.attribute_value = ( SELECT MAX(attribute_value) FROM hero_attribute ) GROUP BY hero_attribute.hero_id;", "SELECT r.race FROM hero_attribute ha JOIN superhero s ON s.id = ha.hero_id JOIN race r ON r.id = s.race_id WHERE ha.attribute_value = ( SELECT MAX(attribute_value) FROM hero_attribute WHERE hero_id IN ( SELECT id FROM superhero WHERE publisher_id = 1 ) );"]}, {"question_id": 811, "answer_sql": ["SELECT alignment.alignment, superpower.power_name FROM superhero JOIN hero_power ON hero_power.hero_id = superhero.id JOIN alignment ON alignment.id = superhero.alignment_id JOIN superpower ON superpower.id = hero_power.power_id WHERE superhero.superhero_name = 'Atom IV';"]}, {"question_id": 812, "answer_sql": ["SELECT super.superhero_name, super.full_name FROM superhero super JOIN colour eye ON super.eye_colour_id = eye.id WHERE eye.colour = 'Blue';", "SELECT s.superhero_name FROM superhero s JOIN colour c ON s.eye_colour_id = c.id WHERE c.colour = 'Blue';", "SELECT superhero.full_name FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Blue' LIMIT 5;"]}, {"question_id": 813, "answer_sql": ["SELECT AVG(attribute_value) FROM hero_attribute JOIN superhero ON hero_attribute.hero_id = superhero.id WHERE alignment_id = 3;", "SELECT AVG(attribute_value) FROM hero_attribute JOIN superhero ON hero_attribute.hero_id = superhero.id JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.alignment = 'neutral'"]}, {"question_id": 814, "answer_sql": ["SELECT c.colour FROM colour c JOIN hero_attribute ha ON c.id = ha.attribute_id JOIN hero_power hp ON ha.hero_id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = '100 attribute value'", "SELECT c.colour FROM colour c JOIN hero_attribute ha ON c.id = ha.attribute_id JOIN hero_power hp ON ha.hero_id = hp.hero_id JOIN superpower sp ON sp.id = hp.power_id WHERE ha.attribute_value = 100;"]}, {"question_id": 815, "answer_sql": ["SELECT COUNT(*) FROM superhero JOIN gender ON superhero.gender_id = gender.id JOIN alignment ON superhero.alignment_id = alignment.id WHERE gender.id = 2 AND alignment.id = 1;"]}, {"question_id": 816, "answer_sql": ["SELECT s.superhero_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id WHERE ha.attribute_value BETWEEN 75 AND 80;", "SELECT s.superhero_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'power_name' AND s.superhero_name NOT IN ( SELECT s.superhero_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name LIKE '% %' ) AND ha.attribute_value BETWEEN 75 AND 80;", "SELECT hero_attribute.hero_id, superhero.superhero_name FROM hero_attribute JOIN superhero ON hero_attribute.hero_id = superhero.id WHERE hero_attribute.attribute_value BETWEEN 75 AND 80;", "SELECT hero_attribute.hero_id, hero_attribute.attribute_id, hero_attribute.attribute_value, superpower.power_name, superhero.superhero_name, superhero.full_name, gender.gender, race.race, attribute.attribute_name, alignment.alignment FROM hero_attribute JOIN superpower ON hero_attribute.attribute_id = superpower.id JOIN superhero ON hero_attribute.hero_id = superhero.id JOIN gender ON superhero.gender_id = gender.id JOIN race ON superhero.race_id = race.id JOIN attribute ON hero_attribute.attribute_id = attribute.id JOIN alignment ON superhero.alignment_id = alignment.id WHERE hero_attribute.attribute_value BETWEEN 75 AND 80;"]}, {"question_id": 817, "answer_sql": ["SELECT race.race FROM race JOIN superhero ON race.id = superhero.race_id WHERE hair_colour_id = (SELECT id FROM colour WHERE colour = 'blue') AND gender_id = (SELECT id FROM gender WHERE gender = 'male');"]}, {"question_id": 818, "answer_sql": []}, {"question_id": 819, "answer_sql": []}, {"question_id": 820, "answer_sql": ["SELECT hero_attribute.attribute_value FROM hero_attribute JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Strength' AND hero_attribute.hero_id = (SELECT id FROM superhero WHERE superhero_name = 'Hulk');", "SELECT sp.power_name FROM hero_power hp JOIN superpower sp ON hp.power_id = sp.id JOIN superhero h ON h.id = hp.hero_id WHERE h.superhero_name = 'Hulk';"]}, {"question_id": 821, "answer_sql": ["SELECT superpower.power_name FROM hero_power JOIN superpower ON hero_power.power_id = superpower.id JOIN superhero ON hero_power.hero_id = superhero.id WHERE superhero.superhero_name = 'Ajax';", "SELECT superpower.power_name FROM hero_power JOIN superpower ON hero_power.power_id = superpower.id WHERE hero_power.hero_id IN ( SELECT hero_attribute.hero_id FROM hero_attribute JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'superpower' AND hero_attribute.attribute_value = 'Ajax' ) AND superpower.id IN ( SELECT power_id FROM hero_power WHERE hero_id = ( SELECT id FROM superhero WHERE superhero_name = 'Ajax' ) );"]}, {"question_id": 822, "answer_sql": ["SELECT COUNT(*) FROM superhero JOIN alignment ON superhero.alignment_id = alignment.id JOIN colour ON superhero.skin_colour_id = colour.id WHERE alignment.alignment = 'Bad' AND colour.colour = 'Green';", "SELECT COUNT(*) FROM superhero JOIN race ON superhero.race_id = race.id JOIN alignment ON superhero.alignment_id = alignment.id JOIN colour ON (superhero.eye_colour_id = colour.id AND superhero.hair_colour_id = colour.id AND superhero.skin_colour_id = colour.id) WHERE race.race = 'Villain' AND alignment.alignment = 'Bad' AND colour.colour = 'Green';"]}, {"question_id": 823, "answer_sql": ["SELECT COUNT(*) FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id JOIN gender ON superhero.gender_id = gender.id WHERE publisher_name = 'Marvel Comics' AND gender.gender = 'Female';", "SELECT COUNT(*) FROM superhero WHERE gender_id = 2 AND publisher_id = 1;"]}, {"question_id": 824, "answer_sql": ["SELECT s.superhero_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Wind Control' ORDER BY s.superhero_name;"]}, {"question_id": 825, "answer_sql": ["SELECT gender.gender FROM gender JOIN hero_power ON gender.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Phoenix Force';"]}, {"question_id": 826, "answer_sql": ["SELECT MAX(superhero.weight_kg) as heaviest_dc_comics_superhero FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'DC Comics';"]}, {"question_id": 827, "answer_sql": ["SELECT AVG(superhero.height_cm) FROM superhero JOIN race ON superhero.race_id = race.id WHERE race.race <> 'Human' AND superhero.publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Dark Horse Comics');", "SELECT AVG(superhero.height_cm) FROM superhero JOIN alignment ON superhero.alignment_id = alignment.id JOIN race ON superhero.race_id = race.id WHERE race.race <> 'Human' AND alignment.alignment = 'Dark Horse Comics';"]}, {"question_id": 828, "answer_sql": ["SELECT COUNT(*) FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE hero_attribute.attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Speed') AND hero_attribute.attribute_value = 100;", "SELECT COUNT(*) FROM superhero \nINNER JOIN hero_attribute ON hero_attribute.hero_id = superhero.id \nINNER JOIN attribute ON hero_attribute.attribute_id = attribute.id \nWHERE attribute.attribute_name = 'Speed' AND attribute.id = (SELECT id FROM attribute WHERE attribute_name = 'Speed')"]}, {"question_id": 829, "answer_sql": ["SELECT publisher.publisher_name, SUM(CASE WHEN publisher.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) as DC_heroes, SUM(CASE WHEN publisher.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) as Marvel_heroes, SUM(CASE WHEN publisher.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN publisher.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) as hero_difference FROM publisher LEFT JOIN superhero ON superhero.publisher_id = publisher.id GROUP BY publisher.publisher_name;", "SELECT publisher.publisher_name, SUM(CASE WHEN publisher.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) as DC_heroes, SUM(CASE WHEN publisher.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) as Marvel_heroes FROM publisher JOIN superhero ON superhero.publisher_id = publisher.id GROUP BY publisher.publisher_name ORDER BY DC_heroes - Marvel_heroes DESC;"]}, {"question_id": 830, "answer_sql": ["SELECT attribute.attribute_name FROM hero_attribute JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE hero_attribute.hero_id IN ( SELECT hero_id FROM superpower JOIN hero_power ON superpower.id = hero_power.power_id WHERE power_name = 'Weakness' ) AND hero_attribute.attribute_value = ( SELECT MIN(attribute_value) FROM hero_attribute WHERE hero_attribute.hero_id = hero_id );", "SELECT attribute.attribute_name FROM attribute JOIN hero_attribute ON attribute.id = hero_attribute.attribute_id JOIN superhero ON hero_attribute.hero_id = superhero.id WHERE superhero.superhero_name = 'Black Panther' ORDER BY hero_attribute.attribute_value ASC LIMIT 1;", "SELECT attribute.attribute_name FROM hero_attribute JOIN attribute ON hero_attribute.attribute_id = attribute.id JOIN superhero ON hero_attribute.hero_id = superhero.id WHERE superhero.superhero_name = 'Black Panther' ORDER BY hero_attribute.attribute_value DESC LIMIT 1;"]}, {"question_id": 831, "answer_sql": ["SELECT colour.colour FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.superhero_name = 'Abomination';"]}, {"question_id": 832, "answer_sql": ["SELECT MAX(height_cm) FROM superhero;"]}, {"question_id": 833, "answer_sql": ["SELECT superhero.superhero_name FROM superhero WHERE superhero.full_name = 'Charles Chandler';", "SELECT hero_attribute.hero_id FROM hero_attribute JOIN superhero ON hero_attribute.hero_id = superhero.id WHERE superhero.superhero_name = 'Charles Chandler';"]}, {"question_id": 834, "answer_sql": []}, {"question_id": 835, "answer_sql": ["SELECT SUM(alignment.id = 1) as good_superheroes, SUM(alignment.id = 1) / COUNT(publisher.publisher_name = 'Marvel Comics') * 100 as percentage FROM superhero JOIN publisher ON publisher.id = superhero.publisher_id JOIN alignment ON alignment.id = superhero.alignment_id WHERE publisher.publisher_name = 'Marvel Comics';"]}, {"question_id": 836, "answer_sql": ["SELECT COUNT(*) FROM superhero WHERE full_name LIKE 'John%';"]}, {"question_id": 837, "answer_sql": ["SELECT hero_id FROM hero_attribute WHERE attribute_id IN (SELECT MIN(attribute_id) FROM hero_attribute) GROUP BY hero_id ORDER BY hero_id LIMIT 1;", "SELECT hero_id FROM hero_attribute WHERE attribute_value = (SELECT MIN(attribute_value) FROM hero_attribute);", "SELECT hero_id FROM hero_attribute WHERE attribute_id IN (SELECT MIN(attribute_id) FROM hero_attribute) AND hero_id IN (SELECT id FROM superhero WHERE publisher_id = 1);", "SELECT hero_id FROM hero_attribute WHERE attribute_id IN (SELECT id FROM attribute WHERE attribute_name = 'lowest attribute value') ORDER BY attribute_value ASC LIMIT 1;"]}, {"question_id": 838, "answer_sql": ["SELECT full_name FROM superhero WHERE superhero_name = 'Alien';"]}, {"question_id": 839, "answer_sql": ["SELECT superhero.superhero_name FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'brown' AND superhero.height_cm IS NOT NULL AND superhero.weight_kg < 100;", "SELECT full_name FROM superhero WHERE weight_kg < 100 AND eye_colour_id = (SELECT id FROM colour WHERE colour = 'Brown');"]}, {"question_id": 840, "answer_sql": ["SELECT hero_attribute.attribute_value FROM hero_attribute JOIN superhero ON hero_attribute.hero_id = superhero.id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE superhero.superhero_name = 'Aquababy';", "SELECT hero_attribute.attribute_value FROM hero_attribute JOIN hero_power ON hero_attribute.hero_id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id JOIN superhero ON hero_attribute.hero_id = superhero.id WHERE superhero.superhero_name = 'Aquababy' AND hero_attribute.attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Attribute Name');", "SELECT hero_attribute.attribute_value FROM hero_attribute JOIN hero_attribute as h on hero_attribute.attribute_id = h.attribute_id JOIN superhero as s on hero_attribute.hero_id = s.id WHERE s.superhero_name = 'Aquababy';"]}, {"question_id": 841, "answer_sql": ["SELECT race.race, superhero.weight_kg FROM superhero JOIN race ON superhero.race_id = race.id WHERE superhero.id = 40;", "SELECT race.race, alignment.alignment, superhero.weight_kg FROM superhero \nJOIN race ON superhero.race_id = race.id \nJOIN alignment ON superhero.alignment_id = alignment.id \nWHERE superhero.id = 40;", "SELECT weight_kg, race.race FROM superhero JOIN race ON superhero.race_id = race.id WHERE superhero.id = 40;"]}, {"question_id": 842, "answer_sql": ["SELECT AVG(height_cm) FROM superhero WHERE publisher_id IS NULL AND alignment_id IS NULL;"]}, {"question_id": 843, "answer_sql": ["SELECT s.id AS hero_id \nFROM superhero s \nJOIN hero_power hp ON s.id = hp.hero_id \nJOIN superpower sp ON hp.power_id = sp.id \nWHERE sp.power_name = 'Intelligence';", "SELECT hero_power.hero_id FROM hero_power JOIN superhero ON hero_power.hero_id = superhero.id JOIN hero_attribute ON hero_attribute.hero_id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Intelligence';"]}, {"question_id": 844, "answer_sql": ["SELECT colour.colour FROM colour JOIN superhero ON colour.id = superhero.eye_colour_id WHERE superhero.superhero_name = 'Blackwulf';", "SELECT c.colour FROM colour c JOIN hero_attribute ha ON c.id = ha.attribute_id JOIN hero_power hp ON ha.hero_id = hp.hero_id JOIN superhero s ON hp.power_id = s.id WHERE s.superhero_name = 'Blackwulf';"]}, {"question_id": 845, "answer_sql": ["", "SELECT superpower.power_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name IN ( SELECT power_name FROM hero_power GROUP BY hero_id HAVING COUNT(power_id) = ( SELECT COUNT(*) FROM superpower GROUP BY id ORDER BY COUNT(*) DESC LIMIT 1 ) ) AND superhero.height_cm > ( SELECT AVG(height_cm) FROM superhero GROUP BY id ORDER BY AVG(height_cm) DESC LIMIT 1 ) * 0.8;", "SELECT power_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE height_cm > (SELECT AVG(height_cm) * 0.8 FROM superhero) GROUP BY power_name;"]}, {"question_id": 846, "answer_sql": ["SELECT DISTINCT drivers.driverRef FROM drivers JOIN qualifying ON drivers.driverId = qualifying.driverId WHERE qualifying.q1 = ( SELECT MAX(q1) FROM qualifying WHERE raceId = 18 ) AND qualifying.raceId = 18;", "SELECT DISTINCT drivers.driverRef FROM drivers JOIN qualifying ON drivers.driverId = qualifying.driverId WHERE qualifying.raceId = 18 AND qualifying.q1 != '' ORDER BY drivers.driverRef;", "SELECT DISTINCT drivers.driverRef FROM drivers JOIN qualifying ON drivers.driverId = qualifying.driverId JOIN races ON qualifying.raceId = races.raceId WHERE qualifying.q1 = (SELECT MAX(q1) FROM qualifying WHERE qualifying.raceId = 18) AND races.round = 1 AND races.year = 2018;"]}, {"question_id": 847, "answer_sql": ["SELECT surname FROM drivers WHERE driverId IN ( SELECT driverId FROM lapTimes WHERE time = ( SELECT MIN(q2) FROM qualifying WHERE raceId = 19 ) );", "SELECT surname FROM drivers JOIN ( SELECT driverId, MIN(time) as min_time FROM lapTimes WHERE lap = 2 GROUP BY driverId ) as best_laps ON drivers.driverId = best_laps.driverId WHERE drivers.surname = '???';", "SELECT surname FROM drivers WHERE driverId = ( SELECT driverId FROM qualifying WHERE raceId = 19 AND q2 = ( SELECT MIN(q2) FROM qualifying WHERE raceId = 19 ) );"]}, {"question_id": 848, "answer_sql": ["SELECT races.year FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.location = 'Shanghai'", "SELECT races.year FROM races WHERE races.circuitId IN (SELECT circuits.circuitId FROM circuits WHERE circuits.name = 'Shanghai') AND races.name = 'Shanghai';"]}, {"question_id": 849, "answer_sql": ["SELECT circuits.url FROM circuits WHERE circuits.name = 'Circuit de Barcelona-Catalunya';", "SELECT circuits.name FROM circuits WHERE circuits.name = 'Circuit de Barcelona-Catalunya';", "SELECT circuits.circuitRef FROM circuits WHERE circuits.name = 'Circuit de Barcelona-Catalunya';", "SELECT circuits.name FROM circuits JOIN races ON circuits.circuitId = races.circuitId WHERE races.url = 'introduction of races';"]}, {"question_id": 850, "answer_sql": ["SELECT races.name FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.country = 'Germany';", "SELECT circuits.name FROM circuits WHERE circuits.country = 'Germany';"]}, {"question_id": 851, "answer_sql": ["SELECT c.name, c.location, c.country, c.lat, c.lng, c.alt, c.url FROM circuits c JOIN races r ON c.circuitId = r.circuitId JOIN constructorStandings cs ON r.raceId = cs.raceId WHERE c.name LIKE 'Renault%' AND cs.positionText LIKE '%%' ORDER BY c.name;"]}, {"question_id": 852, "answer_sql": ["SELECT COUNT(*) FROM races WHERE year = 2010 AND round = 1 AND circuitId IN ( SELECT circuitId FROM circuits WHERE country NOT IN ('Asia', 'Europe') );", "SELECT COUNT(*) FROM races WHERE year = 2010 AND circuitId IN ( SELECT circuitId FROM circuits WHERE country NOT IN ('Asia', 'Europe') );", "SELECT COUNT(*) FROM races JOIN circuits ON races.circuitId = circuits.circuitId JOIN seasons ON races.year = seasons.year WHERE races.year = 2010 AND circuits.country NOT IN ('Asia', 'Europe') AND circuits.url LIKE '%grand%prix%';", "SELECT COUNT(*) FROM races JOIN circuits ON races.circuitId = circuits.circuitId JOIN seasons ON races.year = seasons.year WHERE races.year = 2010 AND circuits.country NOT IN ('Asia', 'Europe') GROUP BY races.raceId;"]}, {"question_id": 853, "answer_sql": ["SELECT r.name FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.country = 'Spain';", "SELECT circuits.name, races.year, races.name FROM circuits JOIN races ON circuits.circuitId = races.circuitId WHERE circuits.country = 'Spain' ORDER BY races.year DESC, races.name ASC;", "SELECT circuits.name, races.name FROM circuits JOIN races ON circuits.circuitId = races.circuitId WHERE circuits.country = 'Spain';", "SELECT circuits.name FROM circuits WHERE circuits.country = 'Spain';"]}, {"question_id": 854, "answer_sql": ["SELECT lat, lng FROM circuits WHERE country = 'Australia';", "SELECT circuits.lat, circuits.lng, circuits.location FROM circuits WHERE circuits.country = 'Australia';", "SELECT lat, lng FROM circuits WHERE name = 'Australian Grand Prix';"]}, {"question_id": 855, "answer_sql": ["SELECT * FROM circuits WHERE circuitRef = 'Sepang';", "SELECT * FROM circuits WHERE name = 'Sepang International Circuit';", "SELECT circuits.url, circuits.circuitId, circuits.circuitRef FROM circuits WHERE circuits.url LIKE '%Sepang%';"]}, {"question_id": 856, "answer_sql": ["SELECT races.name, races.date, races.time FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.name = 'Sepang International Circuit';", "SELECT races.name, races.date FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.name = 'Sepang International Circuit';", "SELECT time FROM races WHERE circuitId = ( SELECT circuitId FROM circuits WHERE name = 'Sepang International' ) AND date = ( SELECT MAX(date) FROM races WHERE circuitId = ( SELECT circuitId FROM circuits WHERE name = 'Sepang International' ) );", "SELECT races.date FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.name = 'Sepang International Circuit';"]}, {"question_id": 857, "answer_sql": ["SELECT lat, lng FROM circuits WHERE circuitRef = 'Abu Dhabi';"]}, {"question_id": 858, "answer_sql": ["SELECT circuits.country FROM constructorResults JOIN races ON constructorResults.raceId = races.raceId JOIN circuits ON races.circuitId = circuits.circuitId JOIN constructors ON constructorResults.constructorId = constructors.constructorId WHERE constructorResults.points = 1 AND races.round = 24", "SELECT constructors.nationality FROM constructors JOIN constructorStandings ON constructors.constructorId = constructorStandings.constructorId JOIN races ON constructors.constructorId = races.circuitId WHERE races.raceId = 24;"]}, {"question_id": 859, "answer_sql": ["SELECT q1.q1 FROM qualifying AS q1 JOIN drivers AS d ON q1.driverId = d.driverId WHERE q1.qualifyId = 354;", "SELECT q1.qualifyId, q1.number, q1.position, q1.q1, q1.q2, q1.q3 FROM qualifying AS q1 JOIN drivers ON q1.driverId = drivers.driverId WHERE drivers.surname = 'Senna' AND q1.raceId = 354;", "SELECT q1.qualifyId, q1.position, q1.q1, q1.q2, q1.q3 FROM qualifying q1 JOIN drivers d ON q1.driverId = d.driverId WHERE q1.raceId = 354 AND d.surname = 'Senna';", "SELECT q1 FROM qualifying WHERE qualifyId = (SELECT qualifyId FROM qualifying WHERE q1 = 'Bruno Senna' AND raceId = 354);"]}, {"question_id": 860, "answer_sql": ["SELECT drivers.nationality FROM qualifying JOIN drivers ON qualifying.driverId = drivers.driverId WHERE qualifying.qualifyId = 355;", "SELECT drivers.nationality FROM qualifying JOIN drivers ON qualifying.driverId = drivers.driverId WHERE qualifying.q2 = '0:01:40'"]}, {"question_id": 861, "answer_sql": ["SELECT drivers.number FROM drivers JOIN qualifying ON drivers.driverId = qualifying.driverId JOIN races ON qualifying.raceId = races.raceId WHERE qualifying.q3 = '00:00:54' AND qualifying.qualifyId = 903;"]}, {"question_id": 862, "answer_sql": ["SELECT COUNT(*) FROM drivers WHERE driverId NOT IN ( SELECT driverId FROM results WHERE raceId IN ( SELECT raceId FROM races WHERE year = 2007 AND round = 1 AND circuitId = 1 ) );", "SELECT COUNT(D.driverId) FROM drivers D LEFT JOIN ( SELECT raceId, driverId FROM results WHERE statusId = (SELECT statusId FROM status WHERE status = 'Finished') GROUP BY raceId, driverId ) R ON D.driverId = R.driverId WHERE R.raceId IS NULL;", "SELECT COUNT(*) FROM drivers WHERE number NOT IN ( SELECT number FROM results WHERE raceId IN ( SELECT raceId FROM races WHERE year = 2007 AND round = 1 AND circuitId = ( SELECT circuitId FROM circuits WHERE circuitRef = 'Bahrain' ) ) )", "SELECT COUNT(*) FROM results WHERE raceId IN ( SELECT raceId FROM races WHERE year = 2007 AND round = 1 AND circuitId = 1 ) AND statusId NOT IN ( SELECT statusId FROM status WHERE status = 'Finished' )", "SELECT COUNT(DISTINCT drivers.driverId) FROM drivers JOIN results ON drivers.driverId = results.driverId WHERE results.raceId IN ( SELECT raceId FROM races WHERE year = 2007 AND round = 1 AND circuitId = 1 ) AND results.time IS NOT NULL;"]}, {"question_id": 863, "answer_sql": ["SELECT races.year FROM races WHERE races.raceId = 901;", "SELECT s.url FROM races r JOIN seasons s ON r.year = s.year WHERE r.raceId = 901;", "SELECT seasons.year, circuits.url FROM races JOIN circuits ON races.circuitId = circuits.circuitId JOIN seasons ON races.year = seasons.year WHERE races.raceId = 901;", "SELECT url FROM races WHERE raceId = 901;", "SELECT seasons.url FROM races \nJOIN seasons ON races.year = seasons.year \nJOIN sqlite_sequence ON races.raceId = sqlite_sequence.seq \nWHERE sqlite_sequence.name = 'races' AND races.round = 901;"]}, {"question_id": 864, "answer_sql": ["SELECT COUNT(*) FROM results WHERE raceId = (SELECT raceId FROM races WHERE date = '2015-11-29')", "SELECT COUNT(*) FROM results WHERE statusId = (SELECT statusId FROM status WHERE status = 'Finished');", "SELECT COUNT(*) FROM results JOIN drivers ON results.driverId = drivers.driverId JOIN races ON results.raceId = races.raceId WHERE races.year = 2015 AND races.round = 1 AND races.date = '2015-11-29' AND results.position != 0;", "SELECT COUNT(*) FROM results WHERE raceId = (SELECT raceId FROM races WHERE date = '2015-11-29') AND statusId = (SELECT statusId FROM status WHERE status = 'Finished');", "SELECT COUNT(*) FROM results WHERE raceId IN (SELECT raceId FROM races WHERE year = 2015 AND round = 1) AND statusId IN (SELECT statusId FROM status WHERE status = 'Finished');"]}, {"question_id": 865, "answer_sql": ["SELECT drivers.forename, drivers.surname, drivers.dob FROM results JOIN drivers ON results.driverId = drivers.driverId JOIN status ON results.statusId = status.statusId WHERE results.position = 1 AND results.time IS NOT NULL ORDER BY drivers.dob ASC LIMIT 1;", "SELECT drivers.forename, drivers.surname, drivers.dob FROM drivers JOIN results ON drivers.driverId = results.driverId WHERE results.raceId = 592 ORDER BY drivers.dob ASC LIMIT 1;", "SELECT drivers.forename, drivers.surname, drivers.dob FROM drivers JOIN results ON drivers.driverId = results.driverId WHERE results.position = 1 ORDER BY drivers.dob DESC LIMIT 1;", "SELECT drivers.forename, drivers.surname, drivers.dob FROM results JOIN drivers ON results.driverId = drivers.driverId WHERE results.raceId = (SELECT raceId FROM races WHERE url = 'http://localhost/formula_1/race.php?raceId=592') AND results.position = (SELECT MIN(position) FROM results WHERE raceId = (SELECT raceId FROM races WHERE url = 'http://localhost/formula_1/race.php?raceId=592')) AND results.statusId = (SELECT statusId FROM status WHERE status = 'Finished');"]}, {"question_id": 866, "answer_sql": ["SELECT d.forename, d.surname, d.dob, d.nationality, d.url FROM drivers d JOIN lapTimes lt ON d.driverId = lt.driverId JOIN races r ON r.raceId = lt.raceId WHERE lt.time = '0:01:27' AND r.round = 161;"]}, {"question_id": 867, "answer_sql": ["SELECT drivers.forename, drivers.surname FROM lapTimes JOIN drivers ON lapTimes.driverId = drivers.driverId WHERE lapTimes.raceId = 933 AND lapTimes.time = ( SELECT MIN(time) FROM lapTimes WHERE raceId = 933 )", "SELECT drivers.forename, drivers.surname, circuits.name, seasons.year FROM drivers JOIN results ON drivers.driverId = results.driverId JOIN races ON results.raceId = races.raceId JOIN circuits ON races.circuitId = circuits.circuitId JOIN seasons ON races.year = seasons.year WHERE results.fastestLap = 933 AND results.fastestLapSpeed = (SELECT MAX(fastestLapSpeed) FROM results WHERE raceId = 933) LIMIT 1;", "SELECT drivers.surname FROM drivers JOIN lapTimes ON drivers.driverId = lapTimes.driverId WHERE lapTimes.milliseconds = ( SELECT MAX(milliseconds) FROM lapTimes WHERE raceId = 933 );", "SELECT drivers.forename, drivers.surname FROM drivers JOIN lapTimes ON drivers.driverId = lapTimes.driverId WHERE lapTimes.milliseconds = (SELECT MAX(milliseconds) FROM lapTimes WHERE raceId = 933);"]}, {"question_id": 868, "answer_sql": ["SELECT name, location, lat, lng FROM circuits WHERE circuitRef = 'melbourne';"]}, {"question_id": 869, "answer_sql": ["SELECT c.url FROM constructors c JOIN constructorResults cr ON c.constructorId = cr.constructorId JOIN races r ON cr.raceId = r.raceId WHERE r.raceId = 9 ORDER BY cr.points DESC LIMIT 1;", "SELECT constructors.constructorRef, constructors.url FROM constructors JOIN constructorStandings ON constructors.constructorId = constructorStandings.constructorId JOIN races ON constructors.constructorId = races.circuitId JOIN seasons ON races.year = seasons.year WHERE races.raceId = 9 ORDER BY constructorStandings.points DESC LIMIT 1;", "SELECT constructors.constructorRef, constructors.url FROM constructors JOIN constructorStandings ON constructors.constructorId = constructorStandings.constructorId JOIN races ON constructors.constructorId = races.circuitId JOIN status ON constructors.constructorId = status.statusId WHERE status.status = 'Introduced' AND races.raceId = 9 ORDER BY constructorStandings.points DESC LIMIT 1;", "SELECT c.url FROM constructorResults cr JOIN constructors con ON cr.constructorId = con.constructorId JOIN races r ON cr.raceId = r.raceId JOIN circuits c ON r.circuitId = c.circuitId WHERE r.raceId = 9 ORDER BY cr.points DESC LIMIT 1;"]}, {"question_id": 870, "answer_sql": ["SELECT q1 FROM qualifying WHERE raceId = 345 AND driverId = (SELECT driverId FROM drivers WHERE surname = 'di Grassi');", "SELECT qualifying.q1 FROM qualifying JOIN drivers ON qualifying.driverId = drivers.driverId JOIN results ON qualifying.raceId = results.raceId WHERE drivers.number = 4 AND results.statusId = 1 AND qualifying.q1 IS NOT NULL;", "SELECT q1 FROM qualifying WHERE raceId = 345 AND driverId = (SELECT driverId FROM drivers WHERE surname = 'Grassi');", "SELECT q1.qualifyId, q1.number, q1.position, q1.q1, q1.q2, q1.q3 FROM qualifying AS q1 JOIN drivers AS d ON q1.driverId = d.driverId WHERE d.surname = 'di Grassi' AND q1.raceId = 345;", "SELECT qualifying.q1 FROM qualifying JOIN drivers ON qualifying.driverId = drivers.driverId JOIN results ON qualifying.raceId = results.raceId WHERE drivers.number = 44 AND qualifying.q1 IS NOT NULL AND results.statusId = 1;"]}, {"question_id": 871, "answer_sql": ["SELECT d.forename, d.surname, d.nationality FROM drivers d JOIN races r ON d.driverRef = r.year AND d.driverRef = r.round JOIN status s ON d.driverRef = s.statusId WHERE r.name = 'Q2' AND r.time = '0:01:15' AND r.raceId = 347;"]}, {"question_id": 872, "answer_sql": ["SELECT d.code FROM qualifying AS q JOIN drivers AS d ON q.driverId = d.driverId JOIN constructors AS c ON q.constructorId = c.constructorId WHERE q.q3 = '0:01:33' AND q.raceId = 45;", "SELECT drivers.code FROM qualifying JOIN drivers ON qualifying.driverId = drivers.driverId WHERE qualifying.qualifyId = 45;"]}, {"question_id": 873, "answer_sql": ["SELECT time FROM results WHERE driverId = (SELECT drivers.driverId FROM drivers WHERE drivers.surname = 'McLaren') AND raceId = (SELECT races.raceId FROM races WHERE races.name = '743');"]}, {"question_id": 874, "answer_sql": ["SELECT drivers.forename, drivers.surname FROM drivers JOIN results ON drivers.driverId = results.driverId WHERE results.raceId IN ( SELECT races.raceId FROM races WHERE races.year = 2006 AND races.circuitId = 1 ) AND results.position = 2;", "SELECT drivers.forename, drivers.surname, drivers.nationality FROM drivers JOIN results ON drivers.driverId = results.driverId JOIN constructorStandings ON results.raceId = constructorStandings.raceId JOIN constructors ON constructorStandings.constructorId = constructors.constructorId JOIN races ON results.raceId = races.raceId WHERE races.name = 'San Marino Grand Prix' AND races.year = 2006 AND constructorStandings.position = 2;", "SELECT drivers.forename, drivers.surname, drivers.nationality FROM drivers JOIN results ON drivers.driverId = results.driverId JOIN constructorStandings ON drivers.driverId = constructorStandings.constructorId JOIN races ON results.raceId = races.raceId JOIN circuits ON races.circuitId = circuits.circuitId JOIN seasons ON races.year = seasons.year WHERE races.name = 'San Marino Grand Prix' AND races.year = 2006 AND constructorStandings.position = 2;", "SELECT drivers.forename, drivers.surname, drivers.dob, constructors.nationality FROM results JOIN drivers ON results.driverId = drivers.driverId JOIN constructors ON results.constructorId = constructors.constructorId JOIN races ON results.raceId = races.raceId JOIN constructorStandings ON results.constructorId = constructorStandings.constructorId WHERE races.name = 'San Marino Grand Prix' AND races.year = 2006 AND results.position = 2;", "SELECT drivers.surname FROM drivers JOIN results ON drivers.driverId = results.driverId WHERE results.raceId IN ( SELECT races.raceId FROM races WHERE races.name = 'San Marino Grand Prix' AND races.year = 2006 ) AND results.position = 2;"]}, {"question_id": 875, "answer_sql": ["SELECT url FROM seasons WHERE year = (SELECT year FROM races WHERE raceId = 901);", "SELECT races.year FROM races WHERE races.raceId = 901;", "SELECT seasons.year, circuits.url FROM races JOIN circuits ON races.circuitId = circuits.circuitId JOIN seasons ON races.year = seasons.year WHERE races.raceId = 901;"]}, {"question_id": 876, "answer_sql": ["SELECT COUNT(*) FROM results WHERE raceId = (SELECT raceId FROM races WHERE year = 2015 AND round = 1);", "SELECT COUNT(*) FROM drivers JOIN results ON drivers.driverId = results.driverId JOIN races ON results.raceId = races.raceId WHERE races.year = 2015 AND races.round = 1 AND results.statusId = 1;", "SELECT COUNT(DISTINCT drivers.driverId) FROM drivers JOIN results ON drivers.driverId = results.driverId JOIN races ON results.raceId = races.raceId WHERE races.year = 2015 AND races.round = 1 AND results.statusId = 1 AND races.date = '2015-11-29';"]}, {"question_id": 877, "answer_sql": ["SELECT drivers.forename, drivers.surname, drivers.dob FROM results JOIN drivers ON results.driverId = drivers.driverId WHERE results.raceId = 872 AND results.position = 1;", "SELECT drivers.forename, drivers.surname, drivers.dob FROM drivers JOIN results ON drivers.driverId = results.driverId WHERE results.raceId = 872 AND results.statusId = (SELECT statusId FROM status WHERE status.status = 'Finished') ORDER BY drivers.dob ASC LIMIT 1;", "SELECT drivers.forename, drivers.surname, MAX(drivers.dob) FROM results JOIN drivers ON results.driverId = drivers.driverId WHERE results.raceId = 872 GROUP BY drivers.forename, drivers.surname;", "SELECT drivers.forename, drivers.surname, MIN(drivers.dob) as youngest FROM results JOIN drivers ON results.driverId = drivers.driverId WHERE results.raceId = 872 GROUP BY drivers.driverId;", "SELECT drivers.forename, drivers.surname, MAX(drivers.dob) FROM results JOIN drivers ON results.driverId = drivers.driverId WHERE results.raceId = (SELECT raceId FROM races WHERE races.name = 'Circuit Name') AND results.position = 1 GROUP BY drivers.forename, drivers.surname;"]}, {"question_id": 878, "answer_sql": ["SELECT forename, surname FROM drivers JOIN lapTimes ON drivers.driverId = lapTimes.driverId JOIN results ON drivers.driverId = results.driverId WHERE results.raceId = 348 AND results.fastestLap = lapTimes.raceId AND lapTimes.time = (SELECT MIN(time) FROM lapTimes WHERE lapTimes.raceId = 348) LIMIT 1;", "SELECT D.forename, D.surname FROM drivers D JOIN lapTimes LT ON D.driverId = LT.driverId JOIN races R ON LT.raceId = R.raceId WHERE R.raceId = 348 AND LT.milliseconds = (SELECT MIN(milliseconds) FROM lapTimes WHERE raceId = 348) LIMIT 1;", "SELECT D.forename || ' ' || D.surname AS driver_name FROM drivers D JOIN lapTimes LT ON D.driverId = LT.driverId JOIN races R ON LT.raceId = R.raceId WHERE R.raceId = 348 AND LT.milliseconds = (SELECT MIN(milliseconds) FROM lapTimes WHERE raceId = 348) LIMIT 1;"]}, {"question_id": 879, "answer_sql": ["SELECT drivers.nationality FROM drivers JOIN lapTimes ON drivers.driverId = lapTimes.driverId WHERE lapTimes.milliseconds = (SELECT MIN(milliseconds) FROM lapTimes WHERE raceId = 348) AND lapTimes.raceId = 348;", "SELECT drivers.nationality FROM drivers JOIN lapTimes ON drivers.driverId = lapTimes.driverId WHERE lapTimes.milliseconds = (SELECT MIN(milliseconds) FROM lapTimes WHERE raceId = 348);", "SELECT drivers.nationality FROM drivers JOIN results ON drivers.driverId = results.driverId JOIN constructorResults ON results.constructorId = constructorResults.constructorId JOIN status ON status.statusId = results.statusId WHERE results.raceId = 348 AND results.fastestLap = (SELECT MAX(fastestLap) FROM results WHERE raceId = 348) AND constructorResults.status = 'OK';"]}, {"question_id": 880, "answer_sql": []}, {"question_id": 881, "answer_sql": ["SELECT COUNT(resultId) as race_completion_rate FROM results WHERE raceId IN ( SELECT raceId FROM races WHERE year = 1983 AND round = 1 AND date = '1983-07-16' )"]}, {"question_id": 882, "answer_sql": ["SELECT MIN(year) FROM seasons;", "SELECT MIN(year) FROM races WHERE name = 'Singapore Grand Prix';", "SELECT circuits.name FROM circuits JOIN races ON circuits.circuitId = races.circuitId WHERE races.name = 'Singapore Grand Prix' AND races.year = ( SELECT MIN(year) FROM races WHERE races.name = 'Singapore Grand Prix' );", "SELECT year FROM races WHERE url = 'http://en.wikipedia.org/wiki/Grand_Prix_of_Singapore'"]}, {"question_id": 883, "answer_sql": ["SELECT COUNT(*) as total_races, name FROM races WHERE year = 2005 ORDER BY name DESC;", "SELECT COUNT(*) as total_races, races.name, seasons.year FROM races JOIN circuits ON races.circuitId = circuits.circuitId JOIN seasons ON races.year = seasons.year WHERE seasons.year = 2005 GROUP BY races.name, seasons.year ORDER BY total_races DESC, races.name, seasons.year;", "SELECT COUNT(*) as total_races FROM races WHERE year = 2005 ORDER BY name DESC;", "SELECT COUNT(*) as total_races, races.name as race_name FROM races WHERE year = 2005 GROUP BY races.name ORDER BY total_races DESC;"]}, {"question_id": 884, "answer_sql": ["SELECT circuits.circuitId, circuits.name, circuits.country, circuits.lat, circuits.lng, races.date, races.time, races.url FROM circuits JOIN races ON circuits.circuitId = races.circuitId WHERE races.date = (SELECT MIN(date) FROM races WHERE year = (SELECT MIN(year) FROM races));", "SELECT races.year, races.name, races.date FROM races WHERE races.year = (SELECT MIN(year) FROM races WHERE races.date = (SELECT MIN(date) FROM races));"]}, {"question_id": 885, "answer_sql": ["SELECT MAX(round), MAX(year), MAX(name), MAX(date) FROM races WHERE year = 1999;", "SELECT name, date FROM races WHERE year = 1999 AND round = (SELECT max(round) FROM races WHERE year = 1999);", "SELECT circuits.name, races.date FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.year = 1999 ORDER BY races.date DESC LIMIT 1;"]}, {"question_id": 886, "answer_sql": ["SELECT MAX(seasons.year) as most_races_year FROM seasons JOIN races ON seasons.year = races.year GROUP BY seasons.year;", "SELECT MAX(year) as most_year FROM races;"]}, {"question_id": 887, "answer_sql": ["SELECT * FROM races WHERE year = 2017 AND NOT EXISTS ( SELECT 1 FROM seasons WHERE races.year = seasons.year AND seasons.year = 2000 );", "SELECT races.name FROM races WHERE races.year = 2017 AND NOT EXISTS ( SELECT 1 FROM seasons WHERE seasons.year = 2000 );", "SELECT r.name FROM races r JOIN seasons s ON r.year = s.year WHERE r.year = 2017 AND s.year != 2000;"]}, {"question_id": 888, "answer_sql": ["SELECT circuits.country, circuits.name, circuits.location FROM circuits JOIN races ON circuits.circuitId = races.circuitId WHERE races.year = (SELECT MIN(year) FROM seasons) LIMIT 1;", "SELECT circuits.country, circuits.name, circuits.location FROM circuits WHERE circuits.circuitId = (SELECT MIN(circuits.circuitId) FROM circuits WHERE circuits.country = 'Europe');", "SELECT circuits.country, circuits.name, circuits.location FROM circuits JOIN races ON circuits.circuitId = races.circuitId WHERE races.year = (SELECT MIN(year) FROM seasons)"]}, {"question_id": 889, "answer_sql": ["SELECT MAX(seasons.year) FROM seasons JOIN races ON seasons.year = races.year JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.circuitRef = 'British Grand Prix';"]}, {"question_id": 890, "answer_sql": ["SELECT COUNT(*) FROM seasons WHERE year IN (SELECT year FROM circuits WHERE name = 'Silverstone' AND country = 'United Kingdom' AND url LIKE '%british%' AND url LIKE '%grand%prix%');", "SELECT s.year FROM seasons s JOIN circuits c ON s.url = c.url WHERE c.name = 'British Grand Prix' AND c.country = 'United Kingdom'"]}, {"question_id": 891, "answer_sql": ["SELECT D.forename, D.surname FROM drivers D JOIN driverStandings DS ON D.driverId = DS.driverId WHERE DS.raceId IN ( SELECT raceId FROM races WHERE year = 2010 ORDER BY round LIMIT 1 ) ORDER BY DS.position;", "SELECT drivers.forename, drivers.surname, drivers.dob FROM drivers JOIN driverStandings ON drivers.driverId = driverStandings.driverId JOIN races ON driverStandings.raceId = races.raceId WHERE races.year = 2010 ORDER BY driverStandings.position;", "SELECT D.forename, D.surname, C.nationality FROM drivers D JOIN constructorStandings CS ON D.driverId = CS.constructorId JOIN constructors C ON CS.constructorId = C.constructorId WHERE C.name = 'Mercedes' AND CS.raceId IN ( SELECT raceId FROM races WHERE year = 2010 AND url LIKE '%Singapore%' ) ORDER BY CS.position;", "SELECT drivers.forename, drivers.surname, drivers.dob FROM drivers JOIN driverStandings ON drivers.driverId = driverStandings.driverId WHERE driverStandings.raceId IN ( SELECT races.raceId FROM races WHERE races.year = 2010 ORDER BY races.round, races.circuitId, races.name LIMIT 1 ) ORDER BY drivers.dob;"]}, {"question_id": 892, "answer_sql": ["SELECT D.forename, D.surname FROM drivers D JOIN results R ON D.driverId = R.driverId JOIN constructorStandings CS ON R.constructorId = CS.constructorId WHERE CS.points = (SELECT MAX(points) FROM constructorStandings) LIMIT 1;", "SELECT DISTINCT drivers.forename, drivers.surname FROM drivers JOIN constructorStandings ON drivers.driverId = constructorStandings.constructorId JOIN results ON drivers.driverId = results.driverId WHERE constructorStandings.points = (SELECT MAX(points) FROM constructorStandings)", "SELECT forename, surname FROM drivers WHERE driverId = (SELECT driverId FROM driverStandings WHERE points = (SELECT MAX(points) FROM driverStandings));", "SELECT forename, surname FROM drivers WHERE driverId = (SELECT driverId FROM results WHERE points = (SELECT MAX(points) FROM results));"]}, {"question_id": 893, "answer_sql": ["SELECT drivers.forename, drivers.surname, results.points FROM drivers JOIN results ON drivers.driverId = results.driverId JOIN races ON results.raceId = races.raceId WHERE races.name = 'Chinese Grand Prix' AND races.year = 2017 ORDER BY results.points DESC, drivers.forename, drivers.surname LIMIT 3;", "SELECT drivers.forename, drivers.surname, constructorResults.points FROM drivers JOIN constructorResults ON drivers.driverId = constructorResults.constructorId JOIN races ON races.raceId = constructorResults.raceId JOIN seasons ON races.year = seasons.year JOIN circuits ON races.circuitId = circuits.circuitId WHERE seasons.year = 2017 AND circuits.circuitRef = 'Chinese' ORDER BY constructorResults.points DESC, drivers.forename, drivers.surname LIMIT 3;"]}, {"question_id": 894, "answer_sql": ["SELECT MIN(time) as best_lap_time FROM lapTimes;"]}, {"question_id": 895, "answer_sql": ["SELECT AVG(milliseconds) as average_lap_time FROM lapTimes JOIN drivers ON lapTimes.driverId = drivers.driverId JOIN races ON lapTimes.raceId = races.raceId WHERE drivers.surname = 'Vettel' AND races.year = 2009;", "SELECT AVG(laps) as average_lap_time FROM results JOIN drivers ON results.driverId = drivers.driverId WHERE drivers.surname = 'Vettel' AND results.raceId IN (SELECT raceId FROM races WHERE year = 2009);", "SELECT AVG(laps) as average_lap_time FROM results WHERE driverId = (SELECT driverId FROM drivers WHERE driverRef = 'Sebastian Vettel') AND raceId = (SELECT raceId FROM races WHERE year = 2009 AND name = 'Chinese Grand Prix');"]}, {"question_id": 896, "answer_sql": []}, {"question_id": 897, "answer_sql": ["SELECT drivers.forename, drivers.nationality, constructors.constructorId, AVG(constructorStandings.points) as average_points, MAX(constructors.constructorId) as most_winning FROM drivers \nJOIN results ON drivers.driverId = results.driverId \nJOIN constructors ON constructors.constructorId = results.constructorId \nJOIN constructorStandings ON constructorStandings.constructorId = constructors.constructorId \nJOIN races ON races.raceId = constructorStandings.raceId \nJOIN status ON status.statusId = results.statusId \nGROUP BY drivers.forename, drivers.nationality, constructors.constructorId \nORDER BY most_winning DESC;", "SELECT drivers.forename, drivers.nationality, AVG(constructorStandings.points) as average_points FROM drivers JOIN constructorStandings ON drivers.driverId = constructorStandings.constructorId WHERE constructorStandings.wins = ( SELECT MAX(constructorStandings.wins) FROM constructorStandings ) GROUP BY drivers.driverId, drivers.forename, drivers.nationality ORDER BY average_points DESC;", "SELECT drivers.forename, drivers.nationality, MAX(constructors.constructorId) as constructorId, AVG(constructorResults.points) as averagePoints FROM drivers JOIN constructors ON drivers.nationality = constructors.nationality JOIN constructorResults ON constructors.constructorId = constructorResults.constructorId GROUP BY drivers.forename, drivers.nationality ORDER BY averagePoints DESC;", "SELECT drivers.forename, drivers.nationality, MAX(constructors.constructorId) as most_winning, AVG(constructorResults.points) as average_points FROM drivers JOIN constructors ON drivers.driverId = constructors.constructorId JOIN constructorResults ON constructors.constructorId = constructorResults.constructorId GROUP BY drivers.forename, drivers.nationality ORDER BY most_winning DESC, average_points DESC;"]}, {"question_id": 898, "answer_sql": ["SELECT forename, surname FROM drivers WHERE nationality = 'Japanese' ORDER BY dob DESC LIMIT 1;", "SELECT MAX(dob) - 2022 + 1 AS age, forename FROM drivers WHERE nationality = 'Japanese';", "SELECT forename, surname FROM drivers WHERE nationality = 'Japanese' AND dob = (SELECT MIN(dob) FROM drivers WHERE nationality = 'Japanese');"]}, {"question_id": 899, "answer_sql": ["SELECT circuits.circuitId, circuits.name, circuits.url FROM circuits JOIN races ON circuits.circuitId = races.circuitId JOIN seasons ON races.year = seasons.year WHERE seasons.year BETWEEN 1990 AND 2000 GROUP BY circuits.circuitId, circuits.name, circuits.url HAVING COUNT(races.raceId) = 4;", "SELECT circuits.circuitId, circuits.name, circuits.country, circuits.lat, circuits.lng, circuits.alt, circuits.url FROM circuits JOIN races ON circuits.circuitId = races.circuitId WHERE races.year BETWEEN 1990 AND 2000 GROUP BY circuits.circuitId HAVING COUNT(races.raceId) = 4;", "SELECT circuits.circuitId, circuits.name FROM circuits JOIN races ON circuits.circuitId = races.circuitId JOIN seasons ON races.year = seasons.year WHERE seasons.year BETWEEN 1990 AND 2000 GROUP BY circuits.circuitId, circuits.name HAVING COUNT(races.raceId) = 4;"]}, {"question_id": 900, "answer_sql": ["SELECT circuits.name, circuits.location, races.name FROM circuits JOIN races ON circuits.circuitId = races.circuitId WHERE circuits.country = 'USA' AND races.year = 2006;", "SELECT circuits.name, circuits.location, races.name FROM circuits JOIN races ON circuits.circuitId = races.circuitId JOIN results ON races.raceId = results.raceId JOIN drivers ON results.driverId = drivers.driverId JOIN constructors ON results.constructorId = constructors.constructorId WHERE circuits.country = 'USA' AND races.year = 2006 AND results.statusId = (SELECT statusId FROM status WHERE status = 'Finished') ORDER BY circuits.name;"]}, {"question_id": 901, "answer_sql": ["SELECT c.name AS circuit_name, c.location AS circuit_location FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE r.year = 2005 AND r.round = 1 AND strftime('%m', r.date) = '09'"]}, {"question_id": 902, "answer_sql": ["SELECT races.name FROM races JOIN drivers ON races.raceId = drivers.driverId WHERE drivers.number < 10 AND drivers.forename = 'Alex' AND drivers.surname = 'Yoong';", "SELECT r.name AS race_name, c.url AS circuit_url, d.number AS driver_number, d.forename AS driver_forename, d.surname AS driver_surname, r.date AS race_date FROM qualifying AS q JOIN races AS r ON q.raceId = r.raceId JOIN circuits AS c ON r.circuitId = c.circuitId JOIN drivers AS d ON q.driverId = d.driverId WHERE d.number < 10 AND q.position < 10 ORDER BY r.date ASC LIMIT 1;", "SELECT races.name FROM races JOIN drivers ON races.raceId = drivers.driverId JOIN results ON drivers.driverId = results.driverId WHERE drivers.number < 10 AND results.position < 10;"]}, {"question_id": 903, "answer_sql": ["SELECT COUNT(*) FROM qualifying WHERE driverId IN (SELECT drivers.driverId FROM drivers WHERE forename = 'Michael' AND surname = 'Schumacher') AND constructorId IN (SELECT constructors.constructorId FROM constructors WHERE name = 'Sepang International');", "SELECT COUNT(*) FROM qualifying JOIN drivers ON qualifying.driverId = drivers.driverId JOIN constructors ON qualifying.constructorId = constructors.constructorId WHERE drivers.number = 1 AND constructors.constructorRef = 'Mercedes' GROUP BY qualifying.raceId ORDER BY qualifying.raceId DESC;"]}, {"question_id": 904, "answer_sql": ["SELECT r.year, r.name FROM races r JOIN results res ON r.raceId = res.raceId JOIN drivers d ON res.driverId = d.driverId WHERE d.driverRef = 'Schumacher' AND res.fastestLap = ( SELECT MIN(res2.milliseconds) FROM results res2 WHERE res2.driverId = d.driverId ) ORDER BY r.year DESC;", "SELECT races.name, seasons.year FROM races JOIN seasons ON races.year = seasons.year JOIN drivers ON races.raceId = drivers.driverId JOIN constructorResults ON races.raceId = constructorResults.raceId JOIN constructors ON constructorResults.constructorId = constructors.constructorId WHERE drivers.forename = 'Michael' AND drivers.surname = 'Schumacher' ORDER BY races.name ASC, seasons.year ASC;", "SELECT races.year, races.name FROM races JOIN results ON races.raceId = results.raceId JOIN drivers ON results.driverId = drivers.driverId WHERE drivers.forename = 'Michael' AND drivers.surname = 'Schumacher' ORDER BY results.milliseconds ASC LIMIT 1;", "SELECT races.name, seasons.year FROM races JOIN seasons ON races.year = seasons.year JOIN drivers ON races.circuitId = drivers.driverId JOIN constructorResults ON races.raceId = constructorResults.raceId JOIN constructors ON constructorResults.constructorId = constructors.constructorId WHERE drivers.forename = 'Michael' AND drivers.surname = 'Schumacher' ORDER BY races.name ASC, seasons.year ASC;", "SELECT races.name, seasons.year FROM races JOIN seasons ON races.year = seasons.year JOIN drivers ON races.circuitId = drivers.driverId WHERE drivers.forename = 'Michael' AND drivers.surname = 'Schumacher' ORDER BY races.name ASC, seasons.year ASC LIMIT 1;"]}, {"question_id": 905, "answer_sql": ["SELECT AVG(points) FROM constructorStandings WHERE raceId = (SELECT raceId FROM seasons WHERE year = 2000) AND constructorId = (SELECT constructorId FROM constructors WHERE name = 'Eddie Irvine');"]}, {"question_id": 906, "answer_sql": ["SELECT r.name, cr.points FROM races r JOIN results rr ON r.raceId = rr.raceId JOIN drivers d ON rr.driverId = d.driverId JOIN constructorResults cr ON r.raceId = cr.raceId WHERE d.number = 44 ORDER BY r.year LIMIT 1;", "SELECT r.name, cr.points FROM races r JOIN constructorResults cr ON r.raceId = cr.raceId WHERE r.year = (SELECT MIN(year) FROM races) AND r.name = 'Lewis Hamilton' AND cr.constructorId = (SELECT constructorId FROM constructors WHERE name = 'Mercedes')"]}, {"question_id": 907, "answer_sql": ["SELECT races.name, circuits.country FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.year = 2017 ORDER BY races.date ASC;", "SELECT races.raceId, races.year, races.round, races.circuitId, races.name, races.date, races.time, races.url FROM races WHERE races.year = 2017 ORDER BY races.date;", "SELECT races.circuitId, circuits.name, circuits.country, seasons.year, races.date FROM races JOIN circuits ON races.circuitId = circuits.circuitId JOIN seasons ON races.year = seasons.year WHERE races.year = 2017 ORDER BY races.date ASC;", "SELECT r.raceId, r.year, r.round, r.name, c.name as circuitName FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE r.year = 2017 ORDER BY r.date;", "SELECT R.raceId, R.name, C.country FROM races R JOIN circuits C ON R.circuitId = C.circuitId WHERE R.year = 2017 ORDER BY R.date;"]}, {"question_id": 908, "answer_sql": ["SELECT MAX(laps) as Most_Laps, races.name as Race_Name, seasons.year as Year, circuits.location as Circuit_Location FROM results JOIN races ON results.raceId = races.raceId JOIN seasons ON races.year = seasons.year JOIN circuits ON races.circuitId = circuits.circuitId WHERE laps = (SELECT MAX(laps) FROM results) GROUP BY races.name, seasons.year, circuits.location", "SELECT r.raceId, r.year, r.circuitId, r.name, COUNT(results.laps) as most_laps FROM races r JOIN results ON r.raceId = results.raceId JOIN lapTimes ON r.raceId = lapTimes.raceId GROUP BY r.raceId ORDER BY most_laps DESC LIMIT 1;", "SELECT MAX(results.laps) as Most_Laps, races.name as Race_Name, races.year as Year, circuits.circuitRef as Circuit_Location FROM races JOIN results ON races.raceId = results.raceId JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.url = 'f1.com' GROUP BY races.raceId ORDER BY Most_Laps DESC LIMIT 1;"]}, {"question_id": 909, "answer_sql": []}, {"question_id": 910, "answer_sql": ["SELECT lat, lng FROM circuits WHERE circuitRef = 'Silverstone';"]}, {"question_id": 911, "answer_sql": ["SELECT name FROM circuits WHERE lat = (SELECT MAX(lat) FROM circuits);", "SELECT MAX(lat) as Highest_Lat FROM circuits WHERE name = 'Silverstone Circuit' OR name = 'Hockenheimring' OR name = 'Hungaroring';", "SELECT MAX(lat) as Highest_Latitude FROM circuits;"]}, {"question_id": 912, "answer_sql": ["SELECT circuitRef FROM circuits WHERE circuitId = (SELECT circuits.circuitId FROM circuits WHERE circuits.name = 'Marina Bay Street Circuit');"]}, {"question_id": 913, "answer_sql": ["SELECT name, country, max(alt) as highest_altitude FROM circuits WHERE alt = (SELECT MAX(alt) FROM circuits);", "SELECT name, country, alt FROM circuits WHERE alt = (SELECT MAX(alt) FROM circuits);"]}, {"question_id": 914, "answer_sql": ["SELECT COUNT(*) FROM drivers WHERE code IS NULL;"]}, {"question_id": 915, "answer_sql": ["SELECT nationality FROM drivers WHERE dob = (SELECT MIN(dob) FROM drivers);", "SELECT constructors.nationality FROM constructors JOIN drivers ON constructors.constructorId = drivers.nationality WHERE drivers.dob = (SELECT MIN(dob) FROM drivers) LIMIT 1;", "SELECT MIN(dob) as oldest_driver_dob FROM drivers;"]}, {"question_id": 916, "answer_sql": ["SELECT drivers.surname FROM drivers WHERE drivers.nationality = 'italian';"]}, {"question_id": 917, "answer_sql": ["SELECT url FROM drivers WHERE surname = 'Davidson';", "SELECT drivers.url FROM drivers \nJOIN status ON drivers.url = status.status \nWHERE drivers.forename = 'Anthony' AND drivers.surname = 'Davidson';"]}, {"question_id": 918, "answer_sql": ["SELECT driverRef FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton';", "SELECT drivers.driverRef FROM drivers WHERE drivers.driverRef = 'Lewis Hamilton';"]}, {"question_id": 919, "answer_sql": ["SELECT circuits.circuitRef FROM circuits JOIN races ON circuits.circuitId = races.circuitId WHERE races.year = 2009;", "SELECT circuits.name FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.year = 2009 AND races.round = 1;", "SELECT circuits.name FROM circuits JOIN races ON circuits.circuitId = races.circuitId WHERE races.year = 2009;"]}, {"question_id": 920, "answer_sql": ["SELECT year FROM races WHERE url = 'Silverstone Circuit' AND circuitId IN ( SELECT circuitId FROM circuits WHERE name = 'Silverstone Circuit' );"]}, {"question_id": 921, "answer_sql": ["SELECT * FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.name = 'Silverstone Circuit';", "SELECT * FROM races WHERE url = 'more information refers to url';"]}, {"question_id": 922, "answer_sql": ["SELECT time FROM races WHERE year = 2010 AND circuitId = ( SELECT circuitId FROM circuits WHERE name = 'Abu Dhabi Circuit' );"]}, {"question_id": 923, "answer_sql": ["SELECT COUNT(*) FROM races WHERE circuitId IN (SELECT circuitId FROM circuits WHERE country = 'Italy');"]}, {"question_id": 924, "answer_sql": ["SELECT DISTINCT races.date FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.name = 'Barcelona-Catalunya';"]}, {"question_id": 925, "answer_sql": ["SELECT circuits.url FROM circuits JOIN races ON circuits.circuitId = races.circuitId WHERE races.name = 'Spanish Grand Prix' AND races.year = 2009;", "SELECT url FROM races WHERE year = 2009 AND round = 1 AND circuitId = ( SELECT circuitId FROM circuits WHERE name = 'Spanish Grand Prix' AND country = 'Spain' );"]}, {"question_id": 926, "answer_sql": ["SELECT MIN(fastestLapTime) as fastest_lap_time FROM results WHERE driverId = (SELECT driverId FROM drivers WHERE surname = 'Hamilton') AND statusId = (SELECT statusId FROM status WHERE status = 'Finished')", "SELECT MIN(fastestLapTime) as fastest_lap_time FROM results WHERE driverId = (SELECT driverId FROM drivers WHERE surname = 'Hamilton') AND statusId = (SELECT statusId FROM status WHERE status = 'Complete')"]}, {"question_id": 927, "answer_sql": ["SELECT drivers.forename, drivers.surname FROM drivers JOIN results ON drivers.driverId = results.driverId JOIN races ON results.raceId = races.raceId JOIN status ON results.statusId = status.statusId WHERE status.status = 'Finished' ORDER BY results.fastestLap DESC LIMIT 1;", "SELECT forename, surname FROM drivers JOIN lapTimes ON drivers.driverId = lapTimes.driverId WHERE lapTimes.milliseconds = (SELECT MIN(milliseconds) FROM lapTimes) GROUP BY drivers.driverId, drivers.forename, drivers.surname;", "SELECT forename, surname FROM drivers JOIN lapTimes ON drivers.driverId = lapTimes.driverId WHERE lapTimes.time = ( SELECT MIN(time) FROM lapTimes )", "SELECT drivers.forename, drivers.surname FROM drivers JOIN (SELECT raceId, driverId, MIN(milliseconds) as fastest_lap_time FROM lapTimes GROUP BY raceId, driverId) as fastest_lap_times ON drivers.driverId = fastest_lap_times.driverId WHERE fastest_lap_times.fastest_lap_time = (SELECT MIN(milliseconds) FROM lapTimes) AND drivers.forename = 'Nico' AND drivers.surname = 'Rosberg';"]}, {"question_id": 928, "answer_sql": ["SELECT drivers.surname FROM drivers JOIN results ON drivers.driverId = results.driverId JOIN races ON results.raceId = races.raceId WHERE races.name = 'Australian Grand Prix' AND races.year = 2008 AND results.position = 1;", "SELECT drivers.forename FROM drivers JOIN driverStandings ON drivers.driverId = driverStandings.driverId JOIN races ON driverStandings.raceId = races.raceId JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.name = 'Australian Grand Prix' AND races.year = 2008 AND driverStandings.position = 1 AND circuits.url = 'https://en.wikipedia.org/wiki/Australian_Grand_Prix';"]}, {"question_id": 929, "answer_sql": ["SELECT r.raceId, r.year, r.round, r.name, r.date, r.time, r.url FROM qualifying q JOIN races r ON q.raceId = r.raceId JOIN drivers d ON q.driverId = d.driverId WHERE d.driverRef = 'Hamilton' ORDER BY r.year DESC;"]}, {"question_id": 930, "answer_sql": ["SELECT MIN(rank) as Highest_Rank FROM results JOIN drivers ON results.driverId = drivers.driverId JOIN constructors ON results.constructorId = constructors.constructorId JOIN races ON results.raceId = races.raceId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND constructors.nationality = 'British' AND races.name = 'Monaco';", "SELECT MIN(rank) as Highest_Rank FROM results JOIN drivers ON results.driverId = drivers.driverId JOIN constructors ON results.constructorId = constructors.constructorId JOIN races ON results.raceId = races.raceId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';", "SELECT MIN(position) as Highest_Position FROM results WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton');"]}, {"question_id": 931, "answer_sql": ["SELECT MAX(fastestLapSpeed) FROM results WHERE raceId IN (SELECT raceId FROM races WHERE year = 2009);", "SELECT MAX(fastestLapSpeed) as fastest_lap_speed FROM results WHERE raceId IN ( SELECT raceId FROM races WHERE year = 2009 AND circuitId = 1 );", "SELECT MAX(fastestLapSpeed) FROM results WHERE raceId = (SELECT raceId FROM races WHERE name = 'Spanish Grand Prix' AND year = 2009);", "SELECT MAX(fastestLapSpeed) FROM results WHERE raceId IN (SELECT raceId FROM races WHERE year = 2009 AND circuitId = (SELECT circuitId FROM circuits WHERE name = 'Spanish Grand Prix'));"]}, {"question_id": 932, "answer_sql": []}, {"question_id": 933, "answer_sql": ["SELECT positionOrder FROM results WHERE driverId = (SELECT drivers.driverId FROM drivers WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton') AND raceId = (SELECT races.raceId FROM races WHERE races.name = 'Australian Grand Prix' AND races.year = 2008) AND statusId = (SELECT status.statusId FROM status WHERE status.status = 'Finished');", "SELECT positionOrder FROM results WHERE driverId = (SELECT driverId FROM drivers WHERE driverRef = 'Lewis Hamilton') AND raceId = (SELECT raceId FROM races WHERE name = 'Australian Grand Prix' AND year = 2008);"]}, {"question_id": 934, "answer_sql": ["SELECT forename, surname FROM drivers WHERE driverId = (SELECT driverId FROM qualifying WHERE raceId = (SELECT raceId FROM races WHERE year = 2008 AND round = 1) AND number = 4);", "SELECT forename, surname FROM drivers WHERE driverId = (SELECT driverId FROM qualifying WHERE raceId = (SELECT raceId FROM races WHERE year = 2008 AND round = 1) AND position = 4);", "SELECT drivers.forename, drivers.surname FROM drivers JOIN results ON drivers.driverId = results.driverId JOIN races ON results.raceId = races.raceId JOIN seasons ON races.year = seasons.year WHERE results.grid = 4 AND seasons.year = 2008;", "SELECT forename, surname FROM drivers WHERE number = 4 AND driverRef = 'a1';"]}, {"question_id": 935, "answer_sql": ["SELECT COUNT(*) FROM drivers JOIN results ON drivers.driverId = results.driverId WHERE results.raceId = (SELECT raceId FROM races WHERE name = 'Australian Grand Prix' AND year = 2008) AND results.statusId = (SELECT statusId FROM status WHERE status = 'Finished');", "SELECT COUNT(*) FROM results WHERE raceId IN (SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix') AND laps IS NOT NULL;", "SELECT COUNT(*) FROM drivers WHERE number IN (SELECT number FROM qualifying WHERE raceId IN (SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix'));", "SELECT COUNT(*) FROM results WHERE laps IS NOT NULL;", "SELECT COUNT(*) FROM results JOIN drivers ON results.driverId = drivers.driverId JOIN races ON results.raceId = races.raceId WHERE races.year = 2008 AND results.laps IS NOT NULL;"]}, {"question_id": 936, "answer_sql": ["SELECT lapTimes.milliseconds FROM lapTimes JOIN drivers ON lapTimes.driverId = drivers.driverId JOIN qualifying ON drivers.driverId = qualifying.driverId JOIN races ON qualifying.raceId = races.raceId WHERE drivers.surname = 'Hamilton' AND races.year = 2008 ORDER BY lapTimes.milliseconds ASC LIMIT 1;", "SELECT fastestLapTime FROM results WHERE driverId = (SELECT driverId FROM drivers WHERE surname = 'Hamilton') AND raceId = (SELECT raceId FROM races WHERE name = 'Australian Grand Prix' AND year = 2008);", "SELECT q1 FROM qualifying WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton') AND raceId = (SELECT raceId FROM races WHERE year = 2008 AND round = 1);", "SELECT q1 FROM qualifying WHERE driverId = (SELECT driverId FROM drivers WHERE driverRef = 'Lewis Hamilton') AND raceId = (SELECT raceId FROM races WHERE year = 2008 AND round = 1);"]}, {"question_id": 937, "answer_sql": ["SELECT results.time FROM results JOIN drivers ON results.driverId = drivers.driverId JOIN races ON results.raceId = races.raceId JOIN seasons ON races.year = seasons.year WHERE seasons.year = 2008 AND results.position = 2 AND results.statusId = (SELECT statusId FROM status WHERE status = 'Finished');", "SELECT results.time FROM results JOIN drivers ON results.driverId = drivers.driverId JOIN races ON results.raceId = races.raceId JOIN seasons ON races.year = seasons.year WHERE seasons.year = 2008 AND results.position = 2 AND races.circuitId = 1;", "SELECT results.time FROM results JOIN drivers ON results.driverId = drivers.driverId JOIN races ON results.raceId = races.raceId JOIN seasons ON races.year = seasons.year WHERE seasons.year = 2008 AND results.position = 2 AND results.statusId = (SELECT statusId FROM status WHERE status = 'Finished') ORDER BY results.time ASC;", "SELECT time FROM results WHERE raceId = (SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix') AND driverId = (SELECT driverId FROM drivers WHERE surname = 'Second' AND dob = '2008-01-01');"]}, {"question_id": 938, "answer_sql": ["SELECT constructors.name as Champion, constructors.url as More_Info FROM constructors JOIN driverStandings ON constructors.constructorId = driverStandings.driverId JOIN races ON driverStandings.raceId = races.raceId WHERE races.name = 'Australian Grand Prix' AND races.year = 2008;", "SELECT constructors.name AS Champion, constructors.url AS MoreInfo FROM constructors JOIN races ON constructors.constructorId = races.circuitId JOIN driverStandings ON races.raceId = driverStandings.raceId WHERE races.year = 2008 AND races.round = 1 AND driverStandings.position = 1;", "SELECT constructors.name FROM constructors JOIN constructorStandings ON constructors.constructorId = constructorStandings.constructorId WHERE constructorStandings.raceId IN (SELECT races.raceId FROM races WHERE races.year = 2008 AND races.circuitId = (SELECT circuits.circuitId FROM circuits WHERE circuits.country = 'Australia'));", "SELECT constructors.name FROM constructors JOIN driverStandings ON constructors.constructorId = driverStandings.driverId JOIN races ON races.raceId = driverStandings.raceId WHERE races.year = 2008 AND races.round = 1 AND races.circuitId = 1 AND driverStandings.position = 1;"]}, {"question_id": 939, "answer_sql": ["SELECT COUNT(*) FROM drivers WHERE nationality = 'American'", "SELECT COUNT(*) FROM drivers WHERE nationality = 'USA';"]}, {"question_id": 940, "answer_sql": ["SELECT COUNT(*) FROM drivers WHERE number IN (SELECT number FROM qualifying WHERE raceId IN (SELECT raceId FROM races WHERE year = 2008 AND round = 1 AND circuitId IN (SELECT circuitId FROM circuits WHERE circuitRef = 'Australian Grand Prix')));", "SELECT COUNT(DISTINCT drivers.driverId) \nFROM drivers \nJOIN results ON drivers.driverId = results.driverId \nJOIN races ON results.raceId = races.raceId \nWHERE races.year = 2008 AND races.round = 1 AND results.position < 10 AND results.statusId = (SELECT statusId FROM status WHERE status = 'Finished');", "SELECT COUNT(DISTINCT drivers.driverId) FROM drivers JOIN results ON drivers.driverId = results.driverId JOIN races ON results.raceId = races.raceId WHERE races.year = 2008 AND results.position = 1 AND results.statusId = 1;", "SELECT COUNT(DISTINCT drivers.driverId) FROM drivers JOIN results ON drivers.driverId = results.driverId JOIN races ON results.raceId = races.raceId WHERE races.year = 2008 AND results.position < 10 AND results.statusId > 0;", "SELECT COUNT(DISTINCT drivers.driverId) FROM drivers JOIN results ON drivers.driverId = results.driverId JOIN races ON results.raceId = races.raceId WHERE races.year = 2008 AND races.round = 1 AND results.position < 10;"]}, {"question_id": 941, "answer_sql": ["SELECT SUM(constructorResults.points) as total_points FROM constructorResults JOIN drivers ON constructorResults.constructorId = drivers.driverId JOIN constructors ON constructorResults.constructorId = constructors.constructorId WHERE drivers.driverId = 1;", "SELECT SUM(points) as Total_Points FROM results JOIN drivers ON results.driverId = drivers.driverId JOIN constructors ON results.constructorId = constructors.constructorId WHERE drivers.surname = 'Hamilton';", "SELECT SUM(constructorResults.points) as total_points FROM constructorResults JOIN drivers ON constructorResults.constructorId = drivers.driverId JOIN constructors ON constructorResults.constructorId = constructors.constructorId WHERE drivers.driverId IN ( SELECT drivers.driverId FROM drivers WHERE drivers.driverRef = 'Lewis Hamilton' ) AND constructors.constructorId IN ( SELECT constructors.constructorId FROM constructors WHERE constructors.constructorRef = 'Lewis Hamilton' );"]}, {"question_id": 942, "answer_sql": ["SELECT AVG(CAST(fastestLapTime AS INTEGER)) as average_fastest_lap_time FROM results WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton') AND statusId = 1;", "SELECT AVG(strftime('%M', fastestLapTime) || ':' || strftime('%S', fastestLapTime) || '.' || strftime('%f', fastestLapTime)) as average_fastest_lap_time FROM results WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton') AND statusId = 1;"]}, {"question_id": 943, "answer_sql": ["SELECT COUNT(raceId) as rate FROM races WHERE time IS NOT NULL;", "SELECT COUNT(DISTINCT drivers.driverId) as rate FROM drivers JOIN lapTimes ON drivers.driverId = lapTimes.driverId JOIN races ON lapTimes.raceId = races.raceId WHERE races.year = 2008 AND races.round = 1 AND lapTimes.time IS NOT NULL;", "SELECT COUNT(*) as rate FROM races r JOIN driverStandings ds ON r.raceId = ds.raceId JOIN drivers d ON ds.driverId = d.driverId WHERE r.year = 2008 AND r.time is not null;", "SELECT COUNT(DISTINCT drivers.driverId) as rate FROM lapTimes JOIN races ON lapTimes.raceId = races.raceId JOIN drivers ON lapTimes.driverId = drivers.driverId WHERE races.year = 2008 AND lapTimes.time IS NOT NULL;", "SELECT COUNT(driverId) FROM lapTimes WHERE time IS NOT NULL;"]}, {"question_id": 944, "answer_sql": ["SELECT (ROUND(results.fastestLapTime, 2) - ROUND(races.time, 2)) / ROUND(races.time, 2) * 100 AS 'percentage_faster' FROM results JOIN races ON results.raceId = races.raceId WHERE races.year = 2008 AND races.circuitId = 1 ORDER BY results.position DESC LIMIT 1", "SELECT (SUBSTR(results.time, 1, 8) - SUBSTR(results.time, 11, 8)) * 100 / (SELECT SUBSTR(results.time, 11, 8) FROM results WHERE results.raceId = (SELECT MAX(raceId) FROM races WHERE races.year = 2008)) AS percentage_faster_than_last_driver FROM results WHERE results.raceId = (SELECT MAX(raceId) FROM races WHERE races.year = 2008)", "SELECT (SUM(results.milliseconds - qualifying.q3) / SUM(qualifying.q3)) * 100 as percentage_faster FROM qualifying JOIN results ON qualifying.qualifyId = results.resultId WHERE results.raceId = (SELECT MAX(raceId) FROM races WHERE year = 2008) AND results.driverId = (SELECT driverId FROM drivers WHERE driverRef = 'champion');", "SELECT (results.fastestLapSpeed - drivers.code) / drivers.code * 100 AS 'percentage_faster' FROM results JOIN drivers ON results.driverId = drivers.driverId JOIN races ON results.raceId = races.raceId JOIN circuits ON races.circuitId = circuits.circuitId JOIN seasons ON races.year = seasons.year WHERE races.raceId = ( SELECT MAX(raceId) FROM races WHERE year = 2008 ) AND races.raceId = ( SELECT MIN(raceId) FROM races WHERE year = 2008 ) ORDER BY 'percentage_faster' DESC LIMIT 1;", "SELECT (SUBSTR(results.time, 1, 8) - SUBSTR(results.time, 11, 8)) * 100 / (SELECT SUBSTR(time, 1, 8) FROM results WHERE position = (SELECT MAX(position) FROM results WHERE raceId = races.raceId)) AS 'percentage_faster' FROM results INNER JOIN races ON results.raceId = races.raceId WHERE races.year = 2008 AND races.round = 1;"]}, {"question_id": 945, "answer_sql": ["SELECT circuits.circuitId, circuits.name, circuits.country, circuits.location FROM circuits WHERE circuits.country = 'Australia' AND circuits.location = 'Melbourne'", "SELECT COUNT(*) FROM circuits WHERE location = 'Melbourne' AND country = 'Australia';"]}, {"question_id": 946, "answer_sql": ["SELECT circuits.location, circuits.lat, circuits.lng FROM circuits WHERE circuits.country = 'USA';", "SELECT circuits.lat, circuits.lng FROM circuits WHERE circuits.country = 'USA';", "SELECT circuits.location, sqlite_sequence.name, circuits.circuitId, circuits.country, circuits.lng, circuits.lat, circuits.alt FROM circuits JOIN sqlite_sequence ON sqlite_sequence.name = 'circuits' WHERE circuits.country = 'USA';"]}, {"question_id": 947, "answer_sql": ["SELECT COUNT(*) FROM drivers WHERE dob > '1980-01-01';", "SELECT COUNT(*) FROM drivers WHERE nationality = 'British' AND dob > '1980-01-01'", "SELECT COUNT(*) FROM drivers JOIN status ON drivers.nationality = status.status WHERE status.status = 'British' AND drivers.dob > '1980-01-01';"]}, {"question_id": 948, "answer_sql": ["SELECT AVG(points) FROM constructorStandings WHERE constructorId IN (SELECT constructorId FROM constructors WHERE nationality = 'British');", "SELECT AVG(points) FROM constructorResults JOIN constructors ON constructorResults.constructorId = constructors.constructorId WHERE constructors.nationality = 'British';"]}, {"question_id": 949, "answer_sql": ["SELECT constructors.name, MAX(constructorResults.points) as points FROM constructors JOIN constructorResults ON constructors.constructorId = constructorResults.constructorId GROUP BY constructors.constructorId ORDER BY points DESC LIMIT 1;", "SELECT constructors.name FROM constructors JOIN constructorStandings ON constructors.constructorId = constructorStandings.constructorId WHERE constructorStandings.points = ( SELECT MAX(constructorStandings.points) FROM constructorStandings );", "SELECT constructors.name, SUM(constructorResults.points) as total_points FROM constructors JOIN constructorResults ON constructors.constructorId = constructorResults.constructorId GROUP BY constructors.constructorId ORDER BY total_points DESC LIMIT 1;"]}, {"question_id": 950, "answer_sql": ["SELECT constructors.name FROM constructors JOIN constructorStandings ON constructors.constructorId = constructorStandings.constructorId JOIN races ON races.raceId = constructorStandings.raceId JOIN constructorResults ON constructorStandings.constructorId = constructorResults.constructorId WHERE races.raceId = 291 AND constructorResults.points = 0;", "SELECT constructors.name FROM constructors JOIN constructorStandings ON constructors.constructorId = constructorStandings.constructorId JOIN races ON races.raceId = constructorStandings.raceId JOIN constructorResults ON constructorStandings.constructorId = constructorResults.constructorId WHERE races.year = 2019 AND races.round = 2 AND constructorResults.points = 0;", "SELECT constructors.name FROM constructors JOIN constructorStandings ON constructors.constructorId = constructorStandings.constructorId WHERE constructorStandings.raceId = 291 AND constructorStandings.points = 0;"]}, {"question_id": 951, "answer_sql": ["SELECT COUNT(constructorId) FROM constructorResults WHERE points = 0 AND raceId IN (SELECT raceId FROM races WHERE year = (SELECT MAX(year) FROM seasons));", "SELECT COUNT(constructorId) FROM constructorStandings WHERE raceId IN ( SELECT raceId FROM races WHERE year = 2019 ) AND points = 0;"]}, {"question_id": 952, "answer_sql": ["SELECT constructors.name FROM constructors JOIN constructorStandings ON constructors.constructorId = constructorStandings.constructorId WHERE constructorStandings.position = 1 ORDER BY constructors.name;", "SELECT constructors.name FROM constructors JOIN constructorStandings ON constructors.constructorId = constructorStandings.constructorId JOIN races ON constructorStandings.raceId = races.raceId JOIN results ON races.raceId = results.raceId WHERE results.rank = 1;", "SELECT c.name FROM constructors c JOIN constructorStandings cs ON c.constructorId = cs.constructorId WHERE cs.position = 1;", "SELECT constructors.name FROM constructors JOIN constructorStandings ON constructors.constructorId = constructorStandings.constructorId JOIN races ON constructorStandings.raceId = races.raceId JOIN results ON races.raceId = results.raceId WHERE results.rank = 1 AND constructorStandings.position = 1 AND constructorStandings.positionText = '1st' AND constructorStandings.wins > 0;"]}, {"question_id": 953, "answer_sql": ["SELECT COUNT(*) FROM constructors WHERE constructorId IN (SELECT constructorId FROM qualifying WHERE number > 50);", "SELECT COUNT(*) FROM constructors JOIN qualifying ON constructors.constructorId = qualifying.constructorId JOIN drivers ON qualifying.driverId = drivers.driverId WHERE drivers.nationality = 'France' AND qualifying.number > 50;"]}, {"question_id": 954, "answer_sql": ["SELECT COUNT(DISTINCT drivers.driverId) as Total_Drivers, (COUNT(DISTINCT drivers.driverId) * 1.0 / (SELECT COUNT(DISTINCT drivers.driverId) FROM drivers WHERE drivers.nationality = 'Japan' AND seasons.year BETWEEN 2007 AND 2009)) * 100 as Completion_Percentage FROM drivers JOIN races ON drivers.driverId = races.raceId JOIN seasons ON races.year = seasons.year JOIN circuits ON races.circuitId = circuits.circuitId WHERE drivers.nationality = 'Japan' AND seasons.year BETWEEN 2007 AND 2009;"]}, {"question_id": 955, "answer_sql": ["SELECT s.year, AVG(r.time) as average_time FROM seasons s JOIN races r ON s.year = r.year WHERE r.time IS NOT NULL GROUP BY s.year ORDER BY s.year;", "SELECT seasons.year, AVG(CAST(lapTimes.milliseconds AS FLOAT) / 1000) as average_time_seconds FROM seasons JOIN races ON seasons.year = races.year JOIN lapTimes ON races.raceId = lapTimes.raceId WHERE races.time IS NOT NULL GROUP BY seasons.year ORDER BY seasons.year;", "SELECT r.year, AVG(IFNULL(str.points, 0)) as average_time FROM races r LEFT JOIN constructorStandings str ON r.raceId = str.raceId WHERE r.year IN (SELECT year FROM seasons WHERE url = 'champion.com') AND str.points IS NOT NULL GROUP BY r.year;"]}, {"question_id": 956, "answer_sql": ["SELECT drivers.forename, drivers.surname FROM drivers JOIN results ON drivers.driverId = results.driverId JOIN status ON results.statusId = status.statusId WHERE status.status = 'Finished' AND drivers.dob > '1975-01-01' AND results.position = 2;", "SELECT drivers.forename, drivers.surname FROM drivers JOIN driverStandings ON drivers.driverId = driverStandings.driverId JOIN races ON driverStandings.raceId = races.raceId WHERE races.year > 1975 AND driverStandings.position = 2;", "SELECT DISTINCT drivers.forename, drivers.surname FROM drivers JOIN seasons ON drivers.dob > '1975-01-01' JOIN results ON drivers.driverId = results.driverId WHERE results.rank = 2 AND seasons.year = (SELECT MAX(year) FROM seasons WHERE seasons.year <= 2021);", "SELECT forename, surname FROM drivers WHERE dob > '1975-12-31' AND driverId IN ( SELECT driverId FROM driverStandings WHERE position = 2 );"]}, {"question_id": 957, "answer_sql": ["SELECT COUNT(*) FROM drivers WHERE driverId NOT IN (SELECT driverId FROM results WHERE time IS NULL);", "SELECT COUNT(*) FROM drivers LEFT JOIN results ON drivers.driverId = results.driverId WHERE results.raceId IN (SELECT raceId FROM races WHERE time IS NULL) AND drivers.nationality = 'Italian' AND results.statusId = (SELECT statusId FROM status WHERE status = 'Finished') AND results.raceId NOT IN (SELECT raceId FROM races WHERE time IS NOT NULL);", "SELECT COUNT(*) FROM drivers LEFT JOIN results ON drivers.driverId = results.driverId WHERE results.raceId IN (SELECT raceId FROM races WHERE time IS NULL) AND drivers.nationality = 'Italian' AND results.statusId = (SELECT statusId FROM status WHERE status = 'Finished') AND results.time IS NOT NULL;", "SELECT COUNT(*) FROM drivers LEFT JOIN results ON drivers.driverId = results.driverId WHERE results.raceId IS NULL AND drivers.nationality = 'Italian' AND results.statusId = 1;"]}, {"question_id": 958, "answer_sql": ["SELECT drivers.forename, drivers.surname FROM drivers JOIN (SELECT raceId, driverId, MIN(milliseconds) as fastest_lap_time FROM lapTimes GROUP BY raceId, driverId) as fastest_lap_times ON drivers.driverId = fastest_lap_times.driverId WHERE fastest_lap_times.fastest_lap_time = (SELECT MIN(milliseconds) FROM lapTimes) AND drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND drivers.driverRef = 'haml' AND drivers.nationality = 'British'", "SELECT drivers.forename, drivers.surname FROM drivers JOIN (SELECT driverId, MIN(time) as fastest_lap_time FROM lapTimes GROUP BY driverId) as fastest_lap_times ON drivers.driverId = fastest_lap_times.driverId ORDER BY fastest_lap_times.fastest_lap_time ASC;", "SELECT D.forename, D.surname FROM drivers D JOIN lapTimes LT ON D.driverId = LT.driverId WHERE LT.milliseconds = (SELECT MIN(milliseconds) FROM lapTimes) LIMIT 1;", "SELECT forename, surname FROM drivers JOIN lapTimes ON drivers.driverId = lapTimes.driverId WHERE lapTimes.time = (SELECT MIN(time) FROM lapTimes)"]}, {"question_id": 959, "answer_sql": ["SELECT MAX(number) as fastest_lap_number FROM qualifying WHERE raceId IN (SELECT raceId FROM races WHERE year = 2009) AND constructorId IN (SELECT constructorId FROM constructors WHERE name = 'Champion')", "SELECT fastestLap FROM results WHERE raceId = (SELECT raceId FROM races WHERE year = 2009) AND constructorId = (SELECT constructorId FROM constructors WHERE name = 'Champion')"]}, {"question_id": 960, "answer_sql": ["SELECT avg(fastestLapSpeed) FROM results WHERE raceId = (SELECT raceId FROM races WHERE name = 'Spanish Grand Prix');"]}, {"question_id": 961, "answer_sql": ["SELECT name, year FROM races WHERE time = (SELECT MIN(time) FROM races WHERE time IS NOT NULL) AND time IS NOT NULL;", "SELECT r.name, r.year FROM races r WHERE r.time = ( SELECT MIN(t.time) FROM lapTimes t WHERE t.time IS NOT NULL ) AND r.time IS NOT NULL;"]}, {"question_id": 962, "answer_sql": []}, {"question_id": 963, "answer_sql": ["SELECT COUNT(*) FROM drivers JOIN lapTimes ON drivers.driverId = lapTimes.driverId WHERE lapTimes.time < '02:00.00' AND drivers.nationality = 'French';"]}, {"question_id": 964, "answer_sql": ["SELECT drivers.code FROM drivers WHERE drivers.nationality = 'America';"]}, {"question_id": 965, "answer_sql": ["SELECT raceId FROM races WHERE year = 2009;"]}, {"question_id": 966, "answer_sql": ["SELECT COUNT(*) FROM drivers JOIN qualifying ON drivers.driverId = qualifying.driverId WHERE qualifying.raceId = 18;", "SELECT COUNT(*) FROM races WHERE raceId = 18;"]}, {"question_id": 967, "answer_sql": ["SELECT c.country, COUNT(*) as 'Netherlandic drivers' FROM drivers d JOIN circuits c ON d.dob > c.country WHERE d.dob = (SELECT MIN(dob) FROM drivers) GROUP BY c.country ORDER BY c.country LIMIT 3;"]}, {"question_id": 968, "answer_sql": ["SELECT c.constructorRef FROM constructors c JOIN constructorResults cr ON c.constructorId = cr.constructorId JOIN races r ON cr.raceId = r.raceId WHERE c.name = 'Robert Kubica';", "SELECT driverRef FROM drivers WHERE forename = 'Robert' AND surname = 'Kubica';"]}, {"question_id": 969, "answer_sql": ["SELECT COUNT(*) FROM drivers WHERE nationality = 'Australian' AND dob LIKE '1980-%';"]}, {"question_id": 970, "answer_sql": ["SELECT d.driverRef, d.forename, d.surname, MIN(l.time) as earliest_time FROM drivers d JOIN lapTimes l ON d.driverId = l.driverId WHERE d.nationality = 'German' AND d.dob BETWEEN '1980-01-01' AND '1990-12-31' GROUP BY d.driverId ORDER BY earliest_time ASC LIMIT 3;", "SELECT drivers.forename, drivers.surname, drivers.dob, MIN(lapTimes.time) as earliest_time FROM drivers JOIN lapTimes ON drivers.driverId = lapTimes.driverId WHERE drivers.nationality = 'Germany' AND drivers.dob BETWEEN '1980-01-01' AND '1990-12-31' GROUP BY drivers.forename, drivers.surname, drivers.dob ORDER BY MIN(lapTimes.time) ASC LIMIT 3;"]}, {"question_id": 971, "answer_sql": ["SELECT drivers.forename, drivers.surname, drivers.dob FROM drivers WHERE drivers.dob = (SELECT MIN(dob) FROM drivers WHERE drivers.nationality = 'Germany');"]}, {"question_id": 972, "answer_sql": ["SELECT drivers.driverId, drivers.code FROM drivers JOIN results ON results.driverId = drivers.driverId WHERE drivers.dob = 1971 AND results.fastestLapTime = (SELECT MIN(fastestLapTime) FROM results WHERE driverId = drivers.driverId) AND results.statusId = (SELECT statusId FROM status WHERE status = 'Fastest lap');"]}, {"question_id": 973, "answer_sql": ["SELECT drivers.driverRef, drivers.forename, drivers.surname, MAX(lapTimes.time) as latest_time FROM drivers JOIN results ON drivers.driverId = results.driverId JOIN lapTimes ON results.raceId = lapTimes.raceId AND drivers.driverId = lapTimes.driverId WHERE drivers.nationality = 'Spain' AND drivers.dob < '1982-01-01' GROUP BY drivers.driverId ORDER BY latest_time DESC LIMIT 10;", "SELECT drivers.forename, drivers.surname, MAX(lapTimes.time) as fastest_lap_time FROM drivers JOIN lapTimes ON drivers.driverId = lapTimes.driverId WHERE drivers.dob < '1982-01-01' AND drivers.nationality = 'Spanish' GROUP BY drivers.driverId ORDER BY fastest_lap_time ASC LIMIT 10;", "SELECT D.driverRef, D.forename, D.surname, MAX(LT.time) as latest_time \nFROM drivers D \nJOIN lapTimes LT ON D.driverId = LT.driverId \nJOIN results R ON D.driverId = R.driverId \nJOIN races C ON R.raceId = C.raceId \nJOIN seasons S ON C.year = S.year \nWHERE D.dob < '1982-01-01' AND S.year = ( SELECT MAX(S2.year) FROM seasons S2 WHERE S2.year <= C.year ) \nGROUP BY D.driverId \nORDER BY latest_time DESC \nLIMIT 10;"]}, {"question_id": 974, "answer_sql": ["SELECT s.year FROM seasons s JOIN ( SELECT raceId, MAX(milliseconds) as max_time FROM lapTimes GROUP BY raceId ) lt ON s.year = lt.raceId WHERE s.url = 'formula_1.com' ORDER BY max_time ASC LIMIT 1;"]}, {"question_id": 975, "answer_sql": ["SELECT MIN(year) as Lowest_Year FROM races WHERE time = (SELECT MIN(time) FROM races);", "SELECT MIN(year) as Lowest_Year FROM races", "SELECT MIN(year) FROM seasons WHERE url IN (SELECT url FROM circuits WHERE lat < 0);"]}, {"question_id": 976, "answer_sql": ["SELECT drivers.driverId FROM drivers JOIN results ON drivers.driverId = results.driverId JOIN races ON results.raceId = races.raceId JOIN circuits ON races.circuitId = circuits.circuitId JOIN seasons ON races.year = seasons.year JOIN status ON results.statusId = status.statusId WHERE status.status = 'Fastest lap' ORDER BY results.fastestLapTime ASC, results.laps ASC, results.position ASC LIMIT 5;", "SELECT drivers.driverId FROM results JOIN drivers ON results.driverId = drivers.driverId JOIN races ON results.raceId = races.raceId JOIN circuits ON races.circuitId = circuits.circuitId JOIN seasons ON races.year = seasons.year WHERE results.laps = 1 ORDER BY results.fastestLapTime ASC LIMIT 5;", "SELECT drivers.driverId FROM drivers JOIN lapTimes ON drivers.driverId = lapTimes.driverId WHERE lapTimes.time = ( SELECT MIN(time) FROM lapTimes WHERE lapTimes.lap = 1 ) ORDER BY lapTimes.time ASC LIMIT 5;", "SELECT drivers.driverId FROM drivers JOIN results ON drivers.driverId = results.driverId JOIN races ON results.raceId = races.raceId WHERE races.round = 1 ORDER BY results.time ASC, results.milliseconds ASC LIMIT 5;"]}, {"question_id": 977, "answer_sql": ["SELECT COUNT(*) FROM results WHERE statusId = 2 AND laps != 0;", "SELECT COUNT(*) FROM results WHERE statusId = 2 AND raceId BETWEEN 51 AND 99;", "SELECT COUNT(*) FROM results WHERE statusId = 2 AND position != 1 AND position != 2 AND position != 3 AND position != 4 AND position != 5 AND position != 6 AND position != 7 AND position != 8 AND position != 9 AND position != 10;", "SELECT COUNT(*) FROM results WHERE statusId = 2 AND laps != 0 AND time IS NOT NULL AND raceId BETWEEN 51 AND 100;", "SELECT COUNT(*) FROM results WHERE statusId = 2 AND laps != 0 AND time IS NULL AND raceId BETWEEN 51 AND 100;"]}, {"question_id": 978, "answer_sql": ["SELECT circuitRef, name, location, lat, lng, alt, country FROM circuits WHERE country = 'Austria'", "SELECT circuits.circuitId, circuits.name, circuits.location, circuits.country, circuits.lng, circuits.lat FROM circuits WHERE circuits.country = 'Austria';", "SELECT COUNT(*) as total_circuits, circuits.name, circuits.location, circuits.lat, circuits.lng FROM circuits WHERE circuits.country = 'Austria' GROUP BY circuits.circuitId;", "SELECT COUNT(*), circuits.location, circuits.lng, circuits.lat FROM circuits WHERE circuits.country = 'Austria' GROUP BY circuits.location, circuits.lng, circuits.lat;", "SELECT circuitId, circuitRef, name, location, lat, lng, country FROM circuits WHERE country = 'Austria';"]}, {"question_id": 979, "answer_sql": ["SELECT MAX(number) as race_number FROM qualifying WHERE q1 IS NOT NULL;", "SELECT r.raceId, COUNT(res.laps) as num_finishers FROM races r JOIN results res ON r.raceId = res.raceId WHERE res.laps IS NOT NULL GROUP BY r.raceId ORDER BY num_finishers DESC LIMIT 1;", "SELECT r.raceId FROM races r JOIN results res ON r.raceId = res.raceId WHERE res.laps IS NOT NULL GROUP BY r.raceId ORDER BY COUNT(res.laps) DESC LIMIT 1;", "SELECT races.raceId, COUNT(*) as num_finishers FROM races JOIN ( SELECT raceId FROM races WHERE time IS NOT NULL GROUP BY raceId ORDER BY COUNT(*) DESC LIMIT 1 ) as finishers ON races.raceId = finishers.raceId GROUP BY races.raceId ORDER BY num_finishers DESC LIMIT 1;", "SELECT MAX(laps) as max_laps FROM results WHERE time IS NOT NULL;"]}, {"question_id": 980, "answer_sql": ["SELECT drivers.driverRef, drivers.nationality, drivers.dob FROM drivers JOIN qualifying ON drivers.driverId = qualifying.driverId JOIN races ON qualifying.raceId = races.raceId WHERE qualifying.q2 IS NOT NULL AND races.raceId = 23;", "SELECT drivers.driverRef, drivers.dob, drivers.nationality FROM drivers JOIN qualifying ON drivers.driverId = qualifying.driverId WHERE qualifying.q2 IS NOT NULL AND qualifying.raceId = 23;", "SELECT drivers.driverRef, drivers.nationality, drivers.dob FROM drivers JOIN qualifying ON drivers.driverId = qualifying.driverId JOIN results ON drivers.driverId = results.driverId JOIN constructors ON results.constructorId = constructors.constructorId WHERE qualifying.q2 IS NOT NULL AND results.raceId = 23 AND constructors.name = 'Ref Name';"]}, {"question_id": 981, "answer_sql": ["SELECT races.year, races.name, races.date, races.time FROM seasons JOIN races ON seasons.year = races.year JOIN drivers ON races.circuitId = drivers.driverId WHERE drivers.dob = (SELECT MIN(dob) FROM drivers) AND races.round = 1;"]}, {"question_id": 982, "answer_sql": ["SELECT COUNT(*) FROM results WHERE statusId = 2;", "SELECT COUNT(*) FROM drivers JOIN status ON drivers.driverId = status.status WHERE status.status = 'disqualified'", "SELECT COUNT(*) FROM drivers JOIN status ON drivers.number = status.statusId WHERE status.statusId = 2;"]}, {"question_id": 983, "answer_sql": ["SELECT constructors.name, constructors.nationality, seasons.url FROM constructors JOIN constructorStandings ON constructors.constructorId = constructorStandings.constructorId JOIN races ON races.raceId = constructorStandings.raceId JOIN seasons ON seasons.year = races.year WHERE constructors.nationality = 'Italian' ORDER BY constructorStandings.points DESC LIMIT 1;", "SELECT c.name, c.url FROM constructors c WHERE c.nationality = 'Italian' AND c.constructorId = (SELECT MAX(constructorStandings.points) FROM constructorStandings WHERE constructorStandings.constructorId = c.constructorId);"]}, {"question_id": 984, "answer_sql": ["SELECT constructors.url FROM constructors JOIN constructorStandings ON constructors.constructorId = constructorStandings.constructorId WHERE constructorStandings.wins = ( SELECT MAX(constructorStandings.wins) FROM constructorStandings )"]}, {"question_id": 985, "answer_sql": ["SELECT drivers.forename, drivers.surname, lapTimes.time FROM drivers JOIN lapTimes ON drivers.driverId = lapTimes.driverId WHERE lapTimes.lap = 3 AND lapTimes.time = ( SELECT MIN(time) FROM lapTimes WHERE lapTimes.lap = 3 );", "SELECT drivers.forename, drivers.surname, results.time FROM drivers JOIN results ON drivers.driverId = results.driverId WHERE results.raceId IN (SELECT raceId FROM races WHERE name = 'French Grand Prix') AND results.position = 3 ORDER BY results.time ASC;", "SELECT drivers.forename, drivers.surname, races.time FROM drivers JOIN lapTimes ON drivers.driverId = lapTimes.driverId JOIN races ON lapTimes.raceId = races.raceId WHERE races.circuitId = (SELECT circuitId FROM circuits WHERE circuitRef = 'FR') AND races.round = 3 ORDER BY races.time DESC LIMIT 1;", "SELECT drivers.forename, drivers.surname, drivers.dob, results.time FROM drivers JOIN results ON drivers.driverId = results.driverId WHERE results.raceId IN (SELECT races.raceId FROM races WHERE races.name = 'French Grand Prix') AND results.position = 3 ORDER BY results.time ASC;"]}, {"question_id": 986, "answer_sql": ["SELECT r.name AS race_name, d.forename || ' ' || d.surname AS driver_name, MIN(l.time) AS fastest_lap_time FROM lapTimes l JOIN races r ON l.raceId = r.raceId JOIN drivers d ON l.driverId = d.driverId WHERE l.position = 1 AND l.lap = 1 GROUP BY r.name, d.forename || ' ' || d.surname ORDER BY fastest_lap_time ASC;", "SELECT races.raceId, races.time, lapTimes.milliseconds FROM races JOIN lapTimes ON races.raceId = lapTimes.raceId WHERE lapTimes.milliseconds = ( SELECT MIN(lapTimes.milliseconds) FROM lapTimes WHERE lapTimes.lap = 1 ) AND races.round = 1;", "SELECT r.name AS race_name, d.forename || ' ' || d.surname AS driver_name, MIN(l.time) AS fastest_lap_time FROM lapTimes l JOIN races r ON l.raceId = r.raceId JOIN drivers d ON l.driverId = d.driverId WHERE l.position = 1 AND l.lap = 1 GROUP BY r.name, d.forename || ' ' || d.surname ORDER BY fastest_lap_time ASC LIMIT 1;", "SELECT MIN(time) * 1000 as fastest_lap_time FROM lapTimes WHERE position = 1;", "SELECT races.name, races.time, lapTimes.time, lapTimes.milliseconds FROM races JOIN lapTimes ON races.raceId = lapTimes.raceId WHERE lapTimes.lap = 1 AND lapTimes.position = 1 ORDER BY lapTimes.milliseconds ASC LIMIT 1;"]}, {"question_id": 987, "answer_sql": ["SELECT AVG(lapTimes.time) as average_fastest_lap_time FROM lapTimes JOIN drivers ON lapTimes.driverId = drivers.driverId JOIN seasons ON lapTimes.raceId = seasons.year JOIN races ON lapTimes.raceId = races.raceId JOIN constructorStandings ON races.raceId = constructorStandings.raceId JOIN constructors ON constructorStandings.constructorId = constructors.constructorId WHERE seasons.year = 2006 AND constructorStandings.position < 11;", "SELECT AVG(fastestLapTime) FROM results JOIN drivers ON results.driverId = drivers.driverId JOIN seasons ON races.year = seasons.year JOIN constructorStandings ON results.constructorId = constructorStandings.constructorId JOIN races ON constructorStandings.raceId = races.raceId WHERE seasons.year = 2006 AND constructorStandings.position < 11;"]}, {"question_id": 988, "answer_sql": ["SELECT drivers.forename, drivers.surname, AVG(pitStops.duration) as average_duration FROM drivers JOIN (SELECT raceId, driverId, AVG(time) as duration FROM pitStops GROUP BY raceId, driverId) as pitStops ON drivers.driverId = pitStops.driverId WHERE drivers.nationality = 'Germany' AND drivers.dob BETWEEN '1980-01-01' AND '1985-12-31' GROUP BY drivers.forename, drivers.surname ORDER BY average_duration ASC LIMIT 5;"]}, {"question_id": 989, "answer_sql": ["SELECT drivers.surname, results.time FROM drivers JOIN results ON drivers.driverId = results.driverId WHERE results.raceId IN (SELECT races.raceId FROM races WHERE races.name = 'Canadian Grand Prix' AND races.year = 2008) AND results.statusId = (SELECT status.statusId FROM status WHERE status.status = 'Champion') ORDER BY results.time;"]}, {"question_id": 990, "answer_sql": ["SELECT constructors.constructorRef, constructors.url FROM constructors JOIN constructorStandings ON constructors.constructorId = constructorStandings.constructorId WHERE constructorStandings.raceId = (SELECT MAX(raceId) FROM races WHERE year = 2009) AND constructorStandings.position = 1;", "SELECT constructors.constructorRef, constructors.url FROM constructors JOIN constructorStandings ON constructors.constructorId = constructorStandings.constructorId JOIN races ON constructorStandings.raceId = races.raceId JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.year = 2009 AND constructorStandings.position = 1;", "SELECT constructors.constructorRef, constructors.url FROM constructors JOIN constructorStandings ON constructors.constructorId = constructorStandings.constructorId WHERE constructorStandings.raceId = (SELECT MAX(raceId) FROM races WHERE year = 2009) AND constructors.constructorRef = 'Max';", "SELECT c.constructorRef, c.url FROM constructors AS c JOIN constructorStandings AS cs ON c.constructorId = cs.constructorId JOIN races AS r ON cs.raceId = r.raceId WHERE r.year = 2009 AND cs.position = 1;"]}, {"question_id": 991, "answer_sql": ["SELECT forename, surname, dob FROM drivers WHERE nationality = 'Austrian' AND dob BETWEEN '1981-01-01' AND '1991-12-31';"]}, {"question_id": 992, "answer_sql": ["SELECT CONCAT(forename, ' ', surname) AS fullName, CONCAT('https://en.wikipedia.org/wiki/', REPLACE(SUBSTR(surname, 1, 1), ' ', '_')) AS wikiPageLink, dob AS dateOfBirth FROM drivers WHERE nationality = 'German' AND dob BETWEEN '1971-01-01' AND '1985-12-31' ORDER BY dob DESC;", "SELECT CONCAT(forename, ' ', surname) AS fullName, CONCAT('https://en.wikipedia.org/?curid=', REPLACE(REPLACE(REPLACE(driverRef, ' ', '_'), '(', ''), ')', '')) AS wikiLink, dob AS dateOfBirth FROM drivers WHERE nationality = 'German' AND dob BETWEEN '1971-01-01' AND '1985-12-31' ORDER BY dob DESC;", "SELECT CONCAT(forename, ' ', surname) AS full_name, CONCAT('https://en.wikipedia.org/wiki/', CONCAT(forename, '_', surname)) AS wiki_link, dob AS date_of_birth FROM drivers WHERE nationality = 'German' AND dob BETWEEN '1971-01-01' AND '1985-12-31' ORDER BY dob DESC;", "SELECT CONCAT(forename, ' ', surname) AS fullName, url AS wikiPediaPageLink, dob AS dateOfBirth FROM drivers WHERE nationality = 'German' AND dob BETWEEN '1971-01-01' AND '1985-12-31' ORDER BY dob DESC;", "SELECT CONCAT(forename, ' ', surname) AS full_name, CONCAT('https://en.wikipedia.org/wiki/', REPLACE(REPLACE(REPLACE(surname, ' ', '_'), '.', ''), '-', '_')) AS wiki_link, dob AS date_of_birth FROM drivers WHERE nationality = 'German' AND dob BETWEEN '1971-01-01' AND '1985-12-31' ORDER BY dob DESC;"]}, {"question_id": 993, "answer_sql": ["SELECT circuits.location, circuits.country, circuits.lng, circuits.lat FROM circuits WHERE circuitRef = 'Hungaroring';"]}, {"question_id": 994, "answer_sql": ["SELECT c.constructorRef, c.name, c.nationality, cr.points FROM constructorResults cr JOIN constructors c ON cr.constructorId = c.constructorId WHERE cr.raceId IN ( SELECT raceId FROM races WHERE year BETWEEN 1980 AND 2010 AND circuitId = 1 ) ORDER BY cr.points DESC LIMIT 1;", "SELECT constructors.constructorId, constructors.name, constructors.nationality, MAX(constructorResults.points) as max_points FROM constructorResults JOIN constructors ON constructorResults.constructorId = constructors.constructorId JOIN races ON constructorResults.raceId = races.raceId WHERE races.name = 'Monaco Grand Prix' AND races.year BETWEEN 1980 AND 2010 GROUP BY constructors.constructorId, constructors.name, constructors.nationality ORDER BY max_points DESC LIMIT 1;", "SELECT constructors.constructorId, constructors.name, constructors.nationality, MAX(constructorResults.points) as points FROM constructorResults JOIN constructors ON constructorResults.constructorId = constructors.constructorId JOIN races ON constructorResults.raceId = races.raceId WHERE races.name = 'Monaco' AND races.year BETWEEN 1980 AND 2010 GROUP BY constructors.constructorId, constructors.name, constructors.nationality ORDER BY points DESC LIMIT 1;", "SELECT constructors.constructorId, constructors.name, constructors.nationality, MAX(constructorResults.points) as max_points FROM constructorResults JOIN constructors ON constructorResults.constructorId = constructors.constructorId JOIN races ON constructorResults.raceId = races.raceId WHERE races.year BETWEEN 1980 AND 2010 AND races.circuitId = 1 GROUP BY constructors.constructorId, constructors.name, constructors.nationality ORDER BY max_points DESC LIMIT 1;", "SELECT constructors.name, constructors.nationality, MAX(constructorResults.points) as max_points \nFROM constructors \nJOIN constructorResults ON constructors.constructorId = constructorResults.constructorId \nJOIN races ON races.raceId = constructorResults.raceId \nJOIN seasons ON races.year = seasons.year \nWHERE races.name = 'Monaco Grand Prix' AND seasons.year BETWEEN 1980 AND 2010 \nGROUP BY constructors.name, constructors.nationality \nORDER BY max_points DESC;"]}, {"question_id": 995, "answer_sql": ["SELECT AVG(points) FROM results WHERE driverId IN (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton' AND nationality = 'Turkey')"]}, {"question_id": 996, "answer_sql": ["SELECT AVG(r.round) as average_rounds FROM races r JOIN seasons s ON r.year = s.year WHERE s.year BETWEEN 2000 AND 2010;", "SELECT AVG(year) FROM seasons WHERE year BETWEEN 2000 AND 2010;"]}, {"question_id": 997, "answer_sql": ["SELECT constructors.nationality FROM constructors WHERE constructors.constructorId = ( SELECT constructorId FROM constructorStandings WHERE position = ( SELECT MIN(position) FROM constructorStandings ) );", "SELECT constructors.nationality FROM constructors WHERE constructors.constructorId = (SELECT MAX(constructorId) FROM constructors);", "SELECT nationality FROM drivers WHERE nationality = (SELECT MAX(nationality) FROM drivers);", "SELECT MAX(nationality) as Most_Citizenship FROM drivers;"]}, {"question_id": 998, "answer_sql": ["SELECT constructors.name FROM constructors JOIN constructorStandings ON constructors.constructorId = constructorStandings.constructorId WHERE constructorStandings.points = 91 AND constructors.name = 'Ferrari';", "SELECT constructors.name FROM constructors JOIN constructorStandings ON constructors.constructorId = constructorStandings.constructorId WHERE constructorStandings.position = 91 LIMIT 1;"]}, {"question_id": 999, "answer_sql": ["SELECT r.name as raceName FROM races r JOIN ( SELECT raceId, driverId, MIN(time) as fastestLapTime FROM lapTimes GROUP BY raceId, driverId ) lt ON r.raceId = lt.raceId WHERE lt.fastestLapTime = ( SELECT MIN(time) FROM lapTimes );", "SELECT races.name FROM races JOIN lapTimes ON races.raceId = lapTimes.raceId JOIN drivers ON lapTimes.driverId = drivers.driverId WHERE lapTimes.milliseconds = ( SELECT MIN(milliseconds) FROM lapTimes WHERE driverId = ( SELECT drivers.driverId FROM drivers WHERE drivers.forename = 'The Name of the Racer' ) ) AND races.name = 'The Name of the Race';"]}, {"question_id": 1000, "answer_sql": ["SELECT circuits.name, circuits.location, circuits.country, circuits.url FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.year = (SELECT MAX(year) FROM seasons) ORDER BY races.year DESC LIMIT 1;", "SELECT name, location, country, lat, lng, alt, url FROM circuits WHERE circuitId = (SELECT MAX(circuitId) FROM races);", "SELECT circuits.name, circuits.location, circuits.country, circuits.url FROM circuits WHERE circuits.circuitId = (SELECT MAX(races.circuitId) FROM races);", "SELECT c.name, c.location, c.country, c.lat, c.lng, c.alt FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE r.date = (SELECT MAX(date) FROM races) ORDER BY r.date DESC LIMIT 1;", "SELECT circuits.name, circuits.location, circuits.country, circuits.lat, circuits.lng, circuits.alt, circuits.url FROM circuits JOIN races ON circuits.circuitId = races.circuitId WHERE races.date = (SELECT MAX(date) FROM races) ORDER BY races.date DESC LIMIT 1;"]}, {"question_id": 1001, "answer_sql": ["SELECT CONCAT(drivers.forename, ' ', drivers.surname) as full_name FROM qualifying JOIN drivers ON qualifying.driverId = drivers.driverId WHERE qualifying.raceId IN ( SELECT raceId FROM races WHERE year = 2008 AND round = 3 AND circuitId IN ( SELECT circuitId FROM circuits WHERE url = 'Marina Bay Street Circuit' ) ) AND qualifying.position = 1;"]}, {"question_id": 1002, "answer_sql": ["SELECT d.forename || ' ' || d.surname AS full_name, d.nationality, r.name AS race_name, r.date AS race_date FROM drivers d JOIN qualifying q ON d.driverId = q.driverId JOIN races r ON r.raceId = q.raceId WHERE d.dob = (SELECT MIN(dob) FROM drivers) ORDER BY r.date DESC LIMIT 1;", "SELECT drivers.forename || ' ' || drivers.surname AS full_name, drivers.nationality, races.name AS race_name FROM drivers JOIN qualifying ON drivers.driverId = qualifying.driverId JOIN races ON qualifying.raceId = races.raceId WHERE drivers.dob = (SELECT MAX(dob) FROM drivers) ORDER BY races.year DESC, races.round DESC LIMIT 1;"]}, {"question_id": 1003, "answer_sql": ["SELECT drivers.forename, drivers.surname, COUNT(results.statusId) as accidents FROM results JOIN drivers ON results.driverId = drivers.driverId JOIN status ON results.statusId = status.statusId WHERE status.statusId = 3 AND results.raceId IN (SELECT raceId FROM races WHERE name = 'Canadian Grand Prix') GROUP BY drivers.forename, drivers.surname ORDER BY accidents DESC LIMIT 1;", "SELECT DRIVERS.driverId, DRIVERS.forename, DRIVERS.surname, COUNT(RESULTS.statusId) as accidents FROM RESULTS INNER JOIN DRIVERS ON RESULTS.driverId = DRIVERS.driverId INNER JOIN STATUS ON RESULTS.statusId = STATUS.statusId WHERE STATUS.statusId = 3 AND DRIVERS.number IN (SELECT MIN(number) FROM RESULTS GROUP BY raceId) AND RESULTS.raceId IN (SELECT raceId FROM RACES WHERE name = 'Canadian Grand Prix') GROUP BY DRIVERS.driverId, DRIVERS.forename, DRIVERS.surname ORDER BY accidents DESC;", "SELECT d.driverRef, COUNT(r.resultId) as accidents FROM results r JOIN drivers d ON r.driverId = d.driverId JOIN status s ON r.statusId = s.statusId WHERE s.status = 'accident' GROUP BY d.driverRef ORDER BY accidents DESC LIMIT 1;", "SELECT drivers.forename, drivers.surname, COUNT(results.statusId) as accidents FROM results JOIN drivers ON results.driverId = drivers.driverId JOIN status ON results.statusId = status.statusId WHERE status.statusId = 3 GROUP BY drivers.forename, drivers.surname ORDER BY accidents DESC LIMIT 1;"]}, {"question_id": 1004, "answer_sql": ["SELECT c.name AS constructor_name, c.constructorRef AS constructor_ref, COUNT(s.wins) AS total_wins FROM constructors c JOIN constructorStandings s ON c.constructorId = s.constructorId WHERE s.position = 1 GROUP BY c.constructorId ORDER BY total_wins DESC LIMIT 1;", "SELECT constructors.name, constructors.constructorRef FROM constructors JOIN constructorStandings ON constructors.constructorId = constructorStandings.constructorId WHERE constructorStandings.raceId IN ( SELECT races.raceId FROM races WHERE races.year = ( SELECT MIN(year) FROM races ) ) AND constructorStandings.wins = ( SELECT MAX(wins) FROM constructorStandings )"]}, {"question_id": 1005, "answer_sql": ["SELECT MAX(duration) as longest_time_at_pitstop FROM pitStops;"]}, {"question_id": 1006, "answer_sql": ["SELECT MIN(time) FROM lapTimes;", "SELECT races.name, races.date, MIN(lapTimes.time) as fastest_time FROM races JOIN lapTimes ON races.raceId = lapTimes.raceId GROUP BY races.raceId ORDER BY fastest_time ASC LIMIT 1;", "SELECT races.name, races.date, races.time FROM lapTimes JOIN races ON lapTimes.raceId = races.raceId WHERE lapTimes.time = ( SELECT MIN(time) FROM lapTimes ) ORDER BY races.date DESC, races.time DESC;", "SELECT MAX(time) as fastest_time FROM lapTimes;", "SELECT MAX(time) as fastest_time FROM lapTimes WHERE raceId IN (SELECT raceId FROM races WHERE name = 'Fastest Race');"]}, {"question_id": 1007, "answer_sql": ["SELECT MAX(pitStops.duration) as longest_time FROM pitStops WHERE driverId = (SELECT drivers.driverId FROM drivers WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton');", "SELECT MAX(duration) as longest_time FROM pitStops WHERE driverId = (SELECT driverId FROM drivers WHERE surname = 'Hamilton') AND raceId = (SELECT raceId FROM races WHERE name = 'Circuit Name');"]}, {"question_id": 1008, "answer_sql": ["SELECT lapTimes.lap FROM lapTimes JOIN drivers ON lapTimes.driverId = drivers.driverId JOIN races ON lapTimes.raceId = races.raceId WHERE drivers.number = 44 AND races.year = 2011 AND lapTimes.milliseconds = (SELECT MIN(milliseconds) FROM lapTimes WHERE raceId = 1 AND driverId = 1);", "SELECT lapTimes.lap FROM lapTimes JOIN pitStops ON lapTimes.raceId = pitStops.raceId AND lapTimes.driverId = pitStops.driverId JOIN drivers ON drivers.driverId = pitStops.driverId JOIN races ON races.raceId = pitStops.raceId JOIN seasons ON seasons.year = races.year WHERE drivers.number = 44 AND drivers.surname = 'Hamilton' AND seasons.year = 2011 AND pitStops.stop = 1;", "SELECT lap FROM pitStops JOIN drivers ON pitStops.driverId = drivers.driverId WHERE drivers.number = 44 AND drivers.surname = 'Hamilton' AND drivers.forename = 'Lewis' AND pitStops.stop = 1;", "SELECT lapTimes.lap FROM lapTimes JOIN drivers ON lapTimes.driverId = drivers.driverId JOIN races ON lapTimes.raceId = races.raceId JOIN seasons ON races.year = seasons.year WHERE drivers.number = 44 AND seasons.year = 2011 AND lapTimes.milliseconds > 0;", "SELECT lap FROM pitStops WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton') AND raceId = (SELECT raceId FROM races WHERE year = 2011 AND round = 1);"]}, {"question_id": 1009, "answer_sql": ["SELECT d.forename, d.surname, p.raceId, p.driverId, p.stop, p.time, p.milliseconds FROM drivers d JOIN pitStops p ON d.driverId = p.driverId WHERE p.raceId = (SELECT raceId FROM races WHERE year = 2011 AND name = 'Australian Grand Prix') ORDER BY p.raceId, p.stop;", "SELECT drivers.forename, drivers.surname, pitStops.duration FROM drivers JOIN pitStops ON drivers.driverId = pitStops.driverId WHERE pitStops.raceId = (SELECT raceId FROM races WHERE name = 'Australian Grand Prix' AND year = 2011) AND pitStops.stop = (SELECT MAX(stop) FROM pitStops WHERE raceId = (SELECT raceId FROM races WHERE name = 'Australian Grand Prix' AND year = 2011));", "SELECT drivers.forename, drivers.surname, pitStops.duration FROM drivers JOIN pitStops ON drivers.driverId = pitStops.driverId WHERE pitStops.raceId = (SELECT raceId FROM races WHERE name = 'Australian Grand Prix' AND year = 2011) AND pitStops.stop = (SELECT stop FROM pitStops WHERE raceId = (SELECT raceId FROM races WHERE name = 'Australian Grand Prix' AND year = 2011)) ORDER BY drivers.forename, drivers.surname;", "SELECT d.forename, d.surname, p.raceId, p.driverId, p.stop, p.time, p.milliseconds FROM drivers d JOIN pitStops p ON d.driverId = p.driverId WHERE p.raceId = (SELECT MAX(r.raceId) FROM races r WHERE r.year = 2011 AND r.round = 1) AND p.stop = (SELECT MIN(s.stop) FROM pitStops s WHERE s.raceId = (SELECT MAX(r.raceId) FROM races r WHERE r.year = 2011 AND r.round = 1)) ORDER BY d.forename, d.surname, p.stop;", "SELECT d.forename, d.surname, p.raceId, p.driverId, p.stop, p.time, p.milliseconds FROM drivers d JOIN pitStops p ON d.driverId = p.driverId WHERE p.raceId = (SELECT MAX(r.raceId) FROM races r WHERE r.year = 2011 AND r.circuitId = (SELECT circuitId FROM circuits WHERE circuitRef = 'Australian Grand Prix')) AND p.stop = (SELECT MIN(s.stop) FROM pitStops s WHERE s.raceId = (SELECT MAX(r.raceId) FROM races r WHERE r.year = 2011 AND r.circuitId = (SELECT circuitId FROM circuits WHERE circuitRef = 'Australian Grand Prix')));"]}, {"question_id": 1010, "answer_sql": ["SELECT lapTimes.time, lapTimes.milliseconds FROM lapTimes JOIN drivers ON lapTimes.driverId = drivers.driverId JOIN results ON lapTimes.raceId = results.raceId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' ORDER BY lapTimes.milliseconds ASC LIMIT 1;", "SELECT lapTimes.time, lapTimes.milliseconds FROM lapTimes JOIN drivers ON lapTimes.driverId = drivers.driverId JOIN results ON lapTimes.raceId = results.raceId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' ORDER BY lapTimes.time ASC, lapTimes.milliseconds ASC LIMIT 1;", "SELECT lapTimes.lap, lapTimes.time, lapTimes.milliseconds FROM lapTimes JOIN drivers ON lapTimes.driverId = drivers.driverId JOIN races ON lapTimes.raceId = races.raceId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' ORDER BY lapTimes.time ASC, lapTimes.milliseconds ASC LIMIT 1;", "SELECT lapTimes.time, lapTimes.milliseconds FROM lapTimes JOIN drivers ON lapTimes.driverId = drivers.driverId JOIN results ON lapTimes.raceId = results.raceId WHERE drivers.surname = 'Hamilton' AND results.statusId = 1 AND lapTimes.milliseconds = (SELECT MIN(milliseconds) FROM lapTimes WHERE driverId = (SELECT driverId FROM drivers WHERE surname = 'Hamilton'));", "SELECT lapTimes.lap, lapTimes.time, lapTimes.milliseconds FROM lapTimes JOIN drivers ON lapTimes.driverId = drivers.driverId JOIN races ON lapTimes.raceId = races.raceId WHERE drivers.surname = 'Hamilton' AND races.name = 'Grand Prix';"]}, {"question_id": 1011, "answer_sql": ["SELECT drivers.forename, drivers.surname FROM drivers JOIN lapTimes ON drivers.driverId = lapTimes.driverId WHERE lapTimes.time = (SELECT MIN(time) FROM lapTimes) LIMIT 1;", "SELECT forename, surname FROM drivers WHERE driverId = (SELECT driverId FROM results WHERE fastestLap = (SELECT MIN(laps) FROM results));"]}, {"question_id": 1012, "answer_sql": ["SELECT drivers.forename, circuits.url, MIN(lapTimes.milliseconds) as fastest_lap_time FROM drivers JOIN qualifying ON drivers.driverId = qualifying.driverId JOIN races ON qualifying.raceId = races.raceId JOIN lapTimes ON races.raceId = lapTimes.raceId JOIN circuits ON races.circuitId = circuits.circuitId WHERE qualifying.q1 = (SELECT MIN(time) FROM races WHERE races.raceId = lapTimes.raceId) GROUP BY drivers.forename, circuits.url ORDER BY fastest_lap_time ASC;"]}, {"question_id": 1013, "answer_sql": ["SELECT lapTimes.time, drivers.surname FROM lapTimes JOIN drivers ON lapTimes.driverId = drivers.driverId WHERE lapTimes.raceId IN (SELECT races.raceId FROM races WHERE races.circuitId = (SELECT circuits.circuitId FROM circuits WHERE circuits.name = 'Austrian Grand Prix')) ORDER BY lapTimes.time ASC;", "SELECT c.name AS circuit_name, d.forename || ' ' || d.surname AS driver_name, MIN(lt.milliseconds) AS fastest_lap_time FROM lapTimes lt JOIN races r ON r.raceId = lt.raceId JOIN circuits c ON c.circuitId = r.circuitId JOIN drivers d ON d.driverId = lt.driverId WHERE r.name = 'Austrian Grand Prix' GROUP BY c.name, d.forename || ' ' || d.surname;", "SELECT c.name AS circuit_name, d.forename || ' ' || d.surname AS driver_name, MIN(lt.milliseconds) AS fastest_time FROM lapTimes lt JOIN races r ON r.raceId = lt.raceId JOIN circuits c ON c.circuitId = r.circuitId JOIN drivers d ON d.driverId = lt.driverId WHERE r.name = 'Austrian Grand Prix' GROUP BY c.name, d.forename || ' ' || d.surname ORDER BY fastest_time ASC;"]}, {"question_id": 1014, "answer_sql": []}, {"question_id": 1015, "answer_sql": ["SELECT r.name AS race_name, d.forename || ' ' || d.surname AS driver_name, l.time AS lap_time FROM lapTimes l JOIN races r ON l.raceId = r.raceId JOIN drivers d ON l.driverId = d.driverId JOIN circuits c ON r.circuitId = c.circuitId WHERE c.name = 'Austrian Grand Prix' ORDER BY l.time ASC LIMIT 1;"]}, {"question_id": 1016, "answer_sql": ["SELECT pitStops.duration, pitStops.stop, lapTimes.milliseconds FROM pitStops INNER JOIN lapTimes ON pitStops.raceId = lapTimes.raceId AND pitStops.driverId = lapTimes.driverId AND pitStops.stop = lapTimes.lap WHERE pitStops.raceId = (SELECT raceId FROM races WHERE name = 'Austrian Grand Prix') AND pitStops.driverId = (SELECT driverId FROM drivers WHERE surname = 'Austrian') ORDER BY pitStops.stop ASC;", "SELECT pitStops.duration, pitStops.stop FROM pitStops INNER JOIN races ON pitStops.raceId = races.raceId INNER JOIN drivers ON pitStops.driverId = drivers.driverId WHERE races.name = 'Austrian Grand Prix' AND pitStops.stop = (SELECT MIN(lap) FROM lapTimes WHERE driverId = drivers.driverId AND raceId = races.raceId);"]}, {"question_id": 1017, "answer_sql": ["SELECT circuits.location, circuits.lat, circuits.lng FROM circuits INNER JOIN lapTimes ON circuits.circuitId = lapTimes.raceId WHERE lapTimes.time = '1:29.488';", "SELECT circuits.location, circuits.lat, circuits.lng FROM circuits JOIN races ON circuits.circuitId = races.circuitId JOIN lapTimes ON races.raceId = lapTimes.raceId WHERE lapTimes.milliseconds = 129488;"]}, {"question_id": 1018, "answer_sql": ["SELECT AVG(milliseconds) FROM pitStops WHERE driverId = ( SELECT drivers.driverId FROM drivers WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' );", "SELECT AVG(milliseconds) FROM pitStops WHERE driverId = (SELECT drivers.driverId FROM drivers WHERE drivers.surname = 'Hamilton') AND raceId = (SELECT races.raceId FROM races WHERE races.name = '2005-01-01');"]}, {"question_id": 1019, "answer_sql": ["SELECT AVG(lapTimes.milliseconds) as average_lap_time FROM lapTimes JOIN races ON lapTimes.raceId = races.raceId JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.country = 'Italy';"]}, {"question_id": 1020, "answer_sql": ["SELECT player_api_id, overall_rating FROM Player_Attributes ORDER BY overall_rating DESC LIMIT 1;"]}, {"question_id": 1021, "answer_sql": ["SELECT MAX(height), player_name FROM Player;"]}, {"question_id": 1022, "answer_sql": ["SELECT Player.player_name, Player_Attributes.preferred_foot FROM Player JOIN Player_Attributes ON Player.player_fifa_api_id = Player_Attributes.player_fifa_api_id WHERE Player_Attributes.potential = (SELECT MIN(potential) FROM Player_Attributes)", "SELECT preferred_foot FROM Player_Attributes WHERE attacking_work_rate = (SELECT MIN(attacking_work_rate) FROM Player_Attributes) AND potential = (SELECT MIN(potential) FROM Player_Attributes);"]}, {"question_id": 1023, "answer_sql": ["SELECT COUNT(*) FROM Player_Attributes WHERE overall_rating >= 60 AND overall_rating < 65 AND defensive_work_rate = 'low';", "SELECT COUNT(*) FROM Player_Attributes WHERE attacking_work_rate = 'low' AND defensive_work_rate != 'high';", "SELECT COUNT(*) FROM Player_Attributes WHERE attacking_work_rate = 'low';"]}, {"question_id": 1024, "answer_sql": ["SELECT player_api_id FROM Player_Attributes WHERE crossing = (SELECT MAX(crossing) FROM Player_Attributes) ORDER BY crossing DESC LIMIT 5;", "SELECT Player_Attributes.player_api_id, Player_Attributes.crossing FROM Player_Attributes JOIN Player ON Player_Attributes.player_fifa_api_id = Player.player_fifa_api_id WHERE Player_Attributes.crossing = ( SELECT MAX(crossing) FROM Player_Attributes ) ORDER BY Player_Attributes.crossing DESC LIMIT 5;", "SELECT Player_Attributes.player_api_id, Player_Attributes.player_fifa_api_id, Player_Attributes.crossing FROM Player_Attributes JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE Player_Attributes.crossing = ( SELECT MAX(crossing) FROM Player_Attributes ) ORDER BY Player_Attributes.crossing DESC LIMIT 5;", "SELECT player_api_id FROM Player_Attributes WHERE crossing = ( SELECT MAX(crossing) FROM Player_Attributes ) ORDER BY player_api_id ASC LIMIT 5;", "SELECT player_api_id FROM Player_Attributes WHERE crossing = (SELECT MAX(crossing) FROM Player_Attributes) ORDER BY crossing DESC;"]}, {"question_id": 1025, "answer_sql": ["SELECT `league_id`, COUNT(`id`) as `total_goals` FROM `Match` WHERE `season` = '2016' GROUP BY `league_id` ORDER BY `total_goals` DESC LIMIT 1;"]}, {"question_id": 1026, "answer_sql": ["SELECT Team.team_long_name, COUNT(*) as matches_lost FROM Team JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id JOIN Match ON Team_Attributes.team_fifa_api_id = Match.away_team_api_id WHERE Match.date >= '2016-01-01' AND Match.date <= '2016-12-31' AND SUBSTR(Match.date, 1, 4) = '2016' AND Match.home_team_goal < Match.away_team_goal GROUP BY Team.team_api_id ORDER BY matches_lost ASC LIMIT 1;"]}, {"question_id": 1027, "answer_sql": ["SELECT Player.player_name FROM Player JOIN Player_Attributes ON Player.player_fifa_api_id = Player_Attributes.player_fifa_api_id WHERE Player_Attributes.penalties = ( SELECT MAX(penalties) FROM Player_Attributes ) ORDER BY Player.player_name ASC LIMIT 10;", "SELECT Player.player_name, COUNT(Player_Attributes.penalties) as penalties FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id GROUP BY Player.player_name ORDER BY penalties DESC LIMIT 10;", "SELECT Player.player_name, Player_Attributes.penalties FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player_Attributes.penalties = ( SELECT MAX(penalties) FROM Player_Attributes ) ORDER BY Player_Attributes.penalties DESC LIMIT 10;"]}, {"question_id": 1028, "answer_sql": ["SELECT Team.team_long_name FROM Team JOIN Match ON Team.team_api_id = Match.away_team_api_id WHERE Match.league_id = (SELECT id FROM League WHERE name = 'Scotland Premier League') AND Match.season = '2010/2011' AND (SUBSTR(Match.goal, 1, 1) = 'H' AND Match.away_team_goal > Match.home_team_goal) ORDER BY Match.away_team_goal DESC LIMIT 1;", "SELECT away_team_api_id, SUM(away_team_goal - home_team_goal) as total_goals FROM Match WHERE season = '2010/2011' GROUP BY away_team_api_id ORDER BY total_goals DESC LIMIT 1;", "SELECT Team.team_long_name FROM Team JOIN Match ON Team.team_api_id = Match.away_team_api_id WHERE Match.season = '2010/2011' AND Match.league_id = (SELECT id FROM League WHERE name = 'Scotland Premier League') GROUP BY Team.team_long_name ORDER BY SUM(Match.away_team_goal - Match.home_team_goal) DESC LIMIT 1;", "SELECT team_short_name FROM Team WHERE team_api_id = ( SELECT MAX(away_team_api_id) FROM Match WHERE season = '2010/2011' AND home_team_goal < away_team_goal )", "SELECT Team.team_long_name FROM Team JOIN Match ON Team.team_api_id = Match.away_team_api_id WHERE Match.season = '2010/2011' AND Match.goal > Match.away_team_goal AND Match.league_id = (SELECT id FROM League WHERE name = 'Scotland Premier League');"]}, {"question_id": 1029, "answer_sql": ["SELECT Team.team_long_name, MAX(Team_Attributes.buildUpPlaySpeed) as Highest_Build_Up_Play_Speed FROM Team JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id GROUP BY Team.team_long_name ORDER BY Highest_Build_Up_Play_Speed DESC LIMIT 4;", "SELECT Team.team_long_name, Team_Attributes.buildUpPlaySpeed FROM Team JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id WHERE Team.team_api_id IN ( SELECT team_api_id FROM Team_Attributes GROUP BY team_api_id ORDER BY MAX(buildUpPlaySpeed) DESC LIMIT 4 ) ORDER BY buildUpPlaySpeed DESC;", "SELECT MAX(buildUpPlaySpeed) as Highest_Build_Up_Play_Speed FROM Team_Attributes WHERE team_fifa_api_id IN ( SELECT team_fifa_api_id FROM Team ORDER BY team_long_name ASC LIMIT 4 );", "SELECT MAX(buildUpPlaySpeed) FROM Team_Attributes;", "SELECT MAX(buildUpPlaySpeed) as Highest_Build_Up_Play_Speed FROM Team_Attributes WHERE buildUpPlaySpeedClass = 'Excellent';"]}, {"question_id": 1030, "answer_sql": ["SELECT League.name FROM League JOIN Match ON League.id = Match.league_id WHERE Match.season = '2016' AND Match.stage = 0 AND Match.home_team_goal = Match.away_team_goal GROUP BY League.name ORDER BY COUNT(*) DESC LIMIT 1;"]}, {"question_id": 1031, "answer_sql": ["SELECT Player.player_name, Player_Attributes.sprint_speed, Player_Attributes.date FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player_Attributes.sprint_speed >= 97 AND Player_Attributes.date BETWEEN '2013-01-01 00:00:00' AND '2015-12-31 00:00:00';", "SELECT Player.player_name, Player.birthday, Player.height FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player_Attributes.sprint_speed >= 97 AND Player_Attributes.date BETWEEN '2013-01-01 00:00:00' AND '2015-12-31 00:00:00';", "SELECT Player.player_name FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player_Attributes.sprint_speed >= 97 AND Player_Attributes.date BETWEEN '2013-01-01 00:00:00' AND '2015-12-31 00:00:00';", "SELECT Player.player_name, Player_Attributes.sprint_speed, Player_Attributes.date, Player_Attributes.overall_rating, Player_Attributes.potential FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player_Attributes.sprint_speed >= 97 AND Player_Attributes.date BETWEEN '2013-01-01 00:00:00' AND '2015-12-31 00:00:00';", "SELECT Player.player_name, Player_Attributes.sprint_speed, Player_Attributes.date, Player_Attributes.overall_rating FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player_Attributes.sprint_speed >= 97 AND Player_Attributes.date BETWEEN '2013-01-01 00:00:00' AND '2015-12-31 00:00:00';"]}, {"question_id": 1032, "answer_sql": ["SELECT name, COUNT(*) as matches_played FROM League JOIN Match ON Match.league_id = League.id GROUP BY name ORDER BY matches_played DESC LIMIT 1;", "SELECT name, COUNT(*) as matches_played FROM League WHERE id = (SELECT MAX(id) FROM League);", "SELECT name, COUNT(*) as matches_played FROM League WHERE id = (SELECT MAX(id) FROM Match);"]}, {"question_id": 1033, "answer_sql": ["SELECT AVG(Player.height) as average_height FROM Player WHERE Player.birthday >= '1990-01-01 00:00:00' AND Player.birthday < '1996-01-01 00:00:00';"]}, {"question_id": 1034, "answer_sql": ["SELECT Player.player_api_id FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE substr(Player_Attributes.date,1,4) = '2010' AND Player_Attributes.overall_rating > ( SELECT AVG(overall_rating) FROM Player_Attributes WHERE substr(date,1,4) = '2010' ) ORDER BY Player_Attributes.overall_rating DESC;", "SELECT player_api_id FROM Player_Attributes WHERE overall_rating > ( SELECT AVG(overall_rating) FROM Player_Attributes WHERE substr(date,1,4) = '2010' ) ORDER BY overall_rating DESC LIMIT 1;", "SELECT Player_Attributes.player_api_id FROM Player_Attributes JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id JOIN League ON Player.player_fifa_api_id = League.id WHERE substr(Player_Attributes.date,1,4) = '2010' AND Player_Attributes.overall_rating > ( SELECT AVG(overall_rating) FROM Player_Attributes WHERE substr(date,1,4) = '2010' ) ORDER BY Player_Attributes.overall_rating DESC;", "SELECT Player_Attributes.player_api_id FROM Player_Attributes WHERE Player_Attributes.overall_rating > (SELECT AVG(overall_rating) FROM Player_Attributes WHERE substr(date,1,4) = '2010') GROUP BY Player_Attributes.player_api_id ORDER BY MAX(Player_Attributes.overall_rating) DESC;", "SELECT Player.player_api_id FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player_Attributes.date = '2010' AND Player_Attributes.overall_rating > (SELECT AVG(overall_rating) FROM Player_Attributes WHERE date = '2010') ORDER BY Player_Attributes.overall_rating DESC;"]}, {"question_id": 1035, "answer_sql": ["SELECT `team_fifa_api_id` FROM `Team_Attributes` WHERE `buildUpPlaySpeed` BETWEEN 51 AND 59;", "SELECT Team.team_fifa_api_id FROM Team WHERE Team.team_fifa_api_id IN ( SELECT Team_Attributes.team_fifa_api_id FROM Team_Attributes WHERE Team_Attributes.buildUpPlaySpeed BETWEEN 51 AND 59 )"]}, {"question_id": 1036, "answer_sql": ["SELECT team_long_name FROM Team WHERE team_long_name IN (SELECT team_long_name FROM Team_Attributes WHERE strftime('%Y', date) = '2012' AND buildUpPlayPassing > (SELECT AVG(buildUpPlayPassing) FROM Team_Attributes WHERE strftime('%Y', date) = '2012'));", "SELECT Team.team_long_name FROM Team JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id WHERE Team_Attributes.buildUpPlayPassing > ( SELECT AVG(buildUpPlayPassing) FROM Team_Attributes WHERE strftime('%Y', date) = '2012' ) AND strftime('%Y', date) = '2012';", "SELECT Team.team_long_name FROM Team JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id WHERE Team_Attributes.buildUpPlayPassing > ( SELECT AVG(buildUpPlayPassing) FROM Team_Attributes WHERE strftime('%Y', date) = '2012' ) AND strftime('%Y', date) = '2012' ORDER BY Team.team_long_name;", "SELECT Team.team_long_name FROM Team JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id WHERE Team_Attributes.buildUpPlayPassing > ( SELECT AVG(buildUpPlayPassing) FROM Team_Attributes WHERE strftime('%Y', date) = '2012' ) AND Team_Attributes.buildUpPlayPassing IS NOT NULL;"]}, {"question_id": 1037, "answer_sql": []}, {"question_id": 1038, "answer_sql": ["SELECT L.name, SUM(M.home_team_goal + M.away_team_goal) as total_goals FROM League L JOIN Match M ON L.id = M.league_id GROUP BY L.name ORDER BY total_goals ASC LIMIT 5;", "SELECT `league_id`, SUM(`home_team_goal` + `away_team_goal`) as total_goals FROM `Match` GROUP BY `league_id` ORDER BY total_goals ASC LIMIT 5;"]}, {"question_id": 1039, "answer_sql": ["SELECT AVG(long_shots) FROM Player_Attributes WHERE player_fifa_api_id = ( SELECT player_fifa_api_id FROM Player WHERE player_name = 'Ahmed Samir Farag' );", "SELECT AVG(long_shots) FROM Player_Attributes WHERE player_fifa_api_id IN (SELECT player_api_id FROM Player WHERE player_name = 'Ahmed Samir Farag');"]}, {"question_id": 1040, "answer_sql": ["SELECT player_name, AVG(heading_accuracy) as avg_heading_accuracy FROM Player JOIN Player_Attributes ON Player.player_fifa_api_id = Player_Attributes.player_fifa_api_id WHERE height > 180 GROUP BY player_name ORDER BY avg_heading_accuracy DESC LIMIT 10;"]}, {"question_id": 1041, "answer_sql": ["SELECT t1.team_long_name FROM Team t1 JOIN Team_Attributes ta1 ON t1.team_api_id = ta1.team_api_id JOIN Team_Attributes ta2 ON t1.team_api_id = ta2.team_api_id WHERE ta1.buildUpPlayDribblingClass = 'Normal' AND ta2.chanceCreationPassingClass = 'Normal' AND t1.team_long_name NOT IN ( SELECT t2.team_long_name FROM Team t2 JOIN Team_Attributes ta2 ON t2.team_api_id = ta2.team_api_id WHERE ta2.chanceCreationPassingClass <> 'Normal' ) ORDER BY ta2.chanceCreationPassing DESC;", "SELECT t1.team_long_name FROM Team t1 JOIN Team_Attributes ta1 ON t1.team_api_id = ta1.team_api_id JOIN Team_Attributes ta2 ON t1.team_api_id = ta2.team_api_id WHERE ta1.buildUpPlayDribblingClass = 'Normal' AND ta1.date >= '2014-01-01 00:00:00' AND ta1.date <= '2014-01-31 00:00:00' GROUP BY t1.team_long_name HAVING COUNT(t1.team_long_name) < (SELECT COUNT(DISTINCT team_long_name) FROM Team_Attributes WHERE buildUpPlayDribblingClass = 'Normal' AND date >= '2014-01-01 00:00:00' AND date <= '2014-01-31 00:00:00') ORDER BY ta2.chanceCreationPassing DESC;"]}, {"question_id": 1042, "answer_sql": ["SELECT L.name FROM League L WHERE L.name IN ( SELECT L.name FROM League L JOIN Match M ON L.id = M.league_id WHERE M.season = '2009/2010' AND M.home_team_goal > M.away_team_goal GROUP BY L.name HAVING AVG(M.home_team_goal) > AVG(M.away_team_goal) )", "SELECT L.name FROM League L WHERE L.name IN ( SELECT L.name FROM League L JOIN Match M ON L.id = M.league_id WHERE M.season = '2009/2010' AND M.stage = 0 AND M.home_team_goal > M.away_team_goal AND M.home_team_goal IN ( SELECT AVG(home_team_goal) FROM Match WHERE season = '2009/2010' AND stage = 0 ) AND M.away_team_goal IN ( SELECT AVG(away_team_goal) FROM Match WHERE season = '2009/2010' AND stage = 0 ) )"]}, {"question_id": 1043, "answer_sql": ["SELECT team_short_name FROM Team WHERE team_long_name = 'Queens Park Rangers';"]}, {"question_id": 1044, "answer_sql": ["SELECT * FROM Player WHERE substr(birthday,1,4) = '1970' AND substr(birthday,6,2) = '10';", "SELECT Player.player_name, Player_Attributes.overall_rating, Player_Attributes.potential FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE substr(Player.birthday,1,4) = '1970' AND substr(Player.birthday,6,2) = '10';", "SELECT `player_name` FROM `Player` WHERE substr(birthday,1,4) = '1970' AND substr(birthday,6,2) = '10';", "SELECT Player.player_name, Player.birthday FROM Player WHERE substr(Player.birthday,1,4) = '1970' AND substr(Player.birthday,6,2) = '10';", "SELECT Player.player_name, Player_Attributes.overall_rating, Player_Attributes.potential, Player_Attributes.preferred_foot, Player_Attributes.attacking_work_rate, Player_Attributes.defensive_work_rate FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player.birthday LIKE '%1970-10%';"]}, {"question_id": 1045, "answer_sql": ["SELECT `attacking_work_rate` FROM `Player_Attributes` WHERE `player_api_id` = (SELECT `player_api_id` FROM `Player` WHERE `player_name` = 'Franco Zennaro');", "SELECT `attacking_work_rate` FROM `Player_Attributes` WHERE `player_api_id` = 1;"]}, {"question_id": 1046, "answer_sql": []}, {"question_id": 1047, "answer_sql": ["SELECT `finishing` FROM `Player_Attributes` WHERE `date` = '2014-09-18 00:00:00' AND `player_api_id` = (SELECT `player_api_id` FROM `Player` WHERE `player_name` = 'Francois Affolter');", "SELECT finishing FROM Player_Attributes WHERE player_fifa_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Francois Affolter') AND date = '2014-09-18 00:00:00';"]}, {"question_id": 1048, "answer_sql": ["SELECT `overall_rating` FROM `Player_Attributes` WHERE `player_api_id` = (SELECT `player_api_id` FROM `Player` WHERE `player_name` = 'Gabriel Tamas');", "SELECT overall_rating FROM Player JOIN Player_Attributes ON Player.player_fifa_api_id = Player_Attributes.player_fifa_api_id WHERE Player.player_name = 'Gabriel Tamas' AND strftime('%Y', date) = '2011';", "SELECT `overall_rating` FROM `Player_Attributes` WHERE `player_api_id` = (SELECT `player_api_id` FROM `Player` WHERE `player_name` = 'Gabriel Tamas' AND `birthday` LIKE '2011%');"]}, {"question_id": 1049, "answer_sql": ["SELECT COUNT(*) FROM Match JOIN League ON Match.league_id = League.id WHERE Match.season = '2015/2016' AND League.name = 'Scotland Premier League';", "SELECT COUNT(*) FROM Match JOIN League ON Match.league_id = League.id JOIN Country ON League.country_id = Country.id WHERE Country.name = 'Scotland' AND Match.season = '2015/2016' AND Match.stage = 0;"]}, {"question_id": 1050, "answer_sql": ["SELECT preferred_foot FROM Player_Attributes WHERE player_api_id = (SELECT MAX(player_api_id) FROM Player);", "SELECT `attacking_work_rate` FROM `Player_Attributes` WHERE `date` = (SELECT MIN(`birthday`) FROM `Player`);", "SELECT Player.player_name, Player_Attributes.preferred_foot FROM Player JOIN Player_Attributes ON Player.player_fifa_api_id = Player_Attributes.player_fifa_api_id WHERE Player.birthday = (SELECT MIN(birthday) FROM Player) ORDER BY Player.birthday DESC LIMIT 1;", "SELECT Player.player_name, Player_Attributes.preferred_foot FROM Player JOIN Player_Attributes ON Player.player_fifa_api_id = Player_Attributes.player_fifa_api_id WHERE Player.birthday = (SELECT MIN(birthday) FROM Player) ORDER BY Player.birthday DESC;"]}, {"question_id": 1051, "answer_sql": ["SELECT Player.player_name, Player_Attributes.potential FROM Player JOIN Player_Attributes ON Player.player_fifa_api_id = Player_Attributes.player_fifa_api_id WHERE Player_Attributes.potential = (SELECT MAX(potential) FROM Player_Attributes)", "SELECT Player.player_name, Player.birthday, Player_Attributes.overall_rating, Player_Attributes.potential, Player_Attributes.player_api_id FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player_Attributes.potential = (SELECT MAX(potential) FROM Player_Attributes);"]}, {"question_id": 1052, "answer_sql": ["SELECT COUNT(*) FROM Player JOIN Player_Attributes ON Player.player_fifa_api_id = Player_Attributes.player_fifa_api_id WHERE Player.weight < 130 AND Player_Attributes.preferred_foot = 'left';", "SELECT COUNT(*) FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player.weight < 130 AND Player_Attributes.preferred_foot = 'left' AND Player_Attributes.attacking_work_rate = 'left';"]}, {"question_id": 1053, "answer_sql": ["SELECT team_short_name FROM Team JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id WHERE Team_Attributes.chanceCreationPassingClass = 'Risky';"]}, {"question_id": 1054, "answer_sql": ["SELECT `defensive_work_rate` FROM `Player_Attributes` WHERE `player_api_id` = (SELECT `player_api_id` FROM `Player` WHERE `player_name` = 'David Wilson');"]}, {"question_id": 1055, "answer_sql": ["SELECT Player.birthday FROM Player WHERE player_api_id = ( SELECT player_api_id FROM Player_Attributes WHERE overall_rating = ( SELECT MAX(overall_rating) FROM Player_Attributes ) );", "SELECT Player.birthday FROM Player WHERE Player.player_fifa_api_id = ( SELECT MAX(Player_Attributes.player_fifa_api_id) FROM Player_Attributes );"]}, {"question_id": 1056, "answer_sql": ["SELECT `name` FROM `League` WHERE `country_id` = (SELECT `id` FROM `Country` WHERE `name` = 'Netherlands');"]}, {"question_id": 1057, "answer_sql": ["SELECT AVG(home_team_goal) FROM Match WHERE season = '2010/2011' AND country_id = (SELECT id FROM Country WHERE name = 'Poland');", "SELECT AVG(home_team_goal) as average_home_team_goal FROM Match JOIN League ON Match.league_id = League.id JOIN Team ON Match.home_team_api_id = Team.team_api_id WHERE Team.team_long_name = 'Poland' AND Match.season = '2010/2011';"]}, {"question_id": 1058, "answer_sql": ["SELECT Player.player_name, AVG(Player_Attributes.finishing) as average_finishing FROM Player JOIN Player_Attributes ON Player.player_fifa_api_id = Player_Attributes.player_fifa_api_id GROUP BY Player.player_name ORDER BY average_finishing DESC LIMIT 1;", "SELECT MAX(Player_Attributes.player_api_id) AS Highest_Player_Id, MAX(Player.player_name) AS Highest_Player_Name, MAX(Player_Attributes.finishing) AS Highest_Finishing_Rate, MIN(Player_Attributes.player_api_id) AS Shortest_Player_Id, MIN(Player.player_name) AS Shortest_Player_Name, MIN(Player_Attributes.finishing) AS Shortest_Finishing_Rate FROM Player_Attributes JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE Player_Attributes.finishing = (SELECT MAX(finishing) FROM Player_Attributes) AND Player.height = (SELECT MIN(height) FROM Player)", "SELECT MAX(Player.player_name) AS Highest_Player, MAX(Player_Attributes.finishing) AS Highest_Finishing_Rate FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player.height = (SELECT MIN(height) FROM Player) OR Player.height = (SELECT MAX(height) FROM Player);", "SELECT MAX(Player.player_name) AS Highest_Football_Player, MAX(Player_Attributes.overall_rating) AS Highest_Finishing_Rate FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player.height = (SELECT MIN(height) FROM Player) OR Player.height = (SELECT MAX(height) FROM Player);"]}, {"question_id": 1059, "answer_sql": []}, {"question_id": 1060, "answer_sql": ["SELECT COUNT(*) FROM Player WHERE strftime('%Y', birthday) = '1990';", "SELECT COUNT(*) FROM Player WHERE strftime('%Y', birthday) > '1990';"]}, {"question_id": 1061, "answer_sql": ["SELECT COUNT(*) FROM Player WHERE player_name = 'Adam' AND weight > 170;"]}, {"question_id": 1062, "answer_sql": ["SELECT Player.player_name FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player_Attributes.date BETWEEN '2008-01-01' AND '2010-12-31' AND Player_Attributes.overall_rating > 80;", "SELECT Player.player_name FROM Player JOIN Player_Attributes ON Player.player_fifa_api_id = Player_Attributes.player_fifa_api_id WHERE Player_Attributes.overall_rating > 80 AND strftime('%Y', Player.birthday) BETWEEN '2008' AND '2010';"]}, {"question_id": 1063, "answer_sql": ["SELECT potential FROM Player_Attributes WHERE player_api_id = 1;"]}, {"question_id": 1064, "answer_sql": []}, {"question_id": 1065, "answer_sql": ["SELECT team_long_name FROM Team JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id WHERE buildUpPlaySpeedClass = 'Fast';"]}, {"question_id": 1066, "answer_sql": ["SELECT Team_Attributes.buildUpPlayPassingClass FROM Team_Attributes JOIN Team ON Team_Attributes.team_api_id = Team.team_api_id WHERE Team.team_short_name = 'CLB';"]}, {"question_id": 1067, "answer_sql": ["SELECT t1.team_short_name FROM Team t1 JOIN Team_Attributes ta1 ON t1.team_api_id = ta1.team_api_id WHERE ta1.buildUpPlayPassing > 70;"]}, {"question_id": 1068, "answer_sql": ["SELECT AVG(overall_rating) as average_overall_rating FROM Player_Attributes WHERE overall_rating > 170 AND strftime('%Y', date) BETWEEN '2010' AND '2015';", "SELECT AVG(overall_rating) as average_overall_rating FROM Player_Attributes JOIN Player ON Player_Attributes.player_fifa_api_id = Player.player_fifa_api_id WHERE height > 170 AND strftime('%Y', date) BETWEEN '2010' AND '2015';"]}, {"question_id": 1069, "answer_sql": ["SELECT MIN(height) FROM Player;", "SELECT player_name, height FROM Player WHERE height = (SELECT MIN(height) FROM Player);", "SELECT player_name FROM Player WHERE height = (SELECT MIN(height) FROM Player);"]}, {"question_id": 1070, "answer_sql": ["SELECT `Country`.`name` FROM `League` JOIN `Country` ON `League`.`country_id` = `Country`.`id` WHERE `League`.`name` = 'Italy Serie A';", "SELECT League.name FROM League WHERE League.name = 'Italy Serie A';", "SELECT League.country_id FROM League WHERE League.name = 'Italy Serie A';"]}, {"question_id": 1071, "answer_sql": ["SELECT `Team`.`team_short_name` FROM `Team_Attributes` JOIN `Team` ON `Team_Attributes`.`team_api_id` = `Team`.`team_api_id` WHERE `Team_Attributes`.`buildUpPlaySpeed` = 31 AND `Team_Attributes`.`buildUpPlayDribbling` = 53 AND `Team_Attributes`.`buildUpPlayPassing` = 32;"]}, {"question_id": 1072, "answer_sql": []}, {"question_id": 1073, "answer_sql": ["SELECT COUNT(*) FROM Match JOIN League ON Match.league_id = League.id WHERE League.name = 'Germany 1. Bundesliga' AND strftime('%Y-%m', date) BETWEEN '2008-08' AND '2008-10';", "SELECT COUNT(*) FROM Match WHERE league_id = (SELECT id FROM League WHERE name = 'Germany 1. Bundesliga') AND date BETWEEN '2008-08-01' AND '2008-10-31';", "SELECT COUNT(*) FROM Match WHERE season = '2008-08' AND season = '2008-10' AND league_id IN (SELECT id FROM League WHERE name = 'Germany 1. Bundesliga');"]}, {"question_id": 1074, "answer_sql": ["SELECT team_short_name FROM Team WHERE team_api_id = ( SELECT home_team_api_id FROM Match WHERE home_team_goal = 10 );", "SELECT `Team`.`team_short_name` FROM `Team` JOIN `Match` ON `Team`.`team_api_id` = `Match`.`home_team_api_id` WHERE `Match`.`home_team_goal` = 10;"]}, {"question_id": 1075, "answer_sql": ["SELECT Player.player_name FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player_Attributes.balance = ( SELECT MAX(balance) FROM Player_Attributes WHERE potential = 61 ) AND Player_Attributes.potential = 61;", "SELECT Player.player_name FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player_Attributes.balance = ( SELECT MAX(balance) FROM Player_Attributes WHERE Player_Attributes.potential = 61 )", "SELECT Player.player_name, Player_Attributes.balance, Player_Attributes.potential FROM Player JOIN Player_Attributes ON Player.player_fifa_api_id = Player_Attributes.player_fifa_api_id WHERE Player_Attributes.balance = (SELECT MAX(balance) FROM Player_Attributes) AND Player_Attributes.potential = 61;", "SELECT Player.player_name, Player_Attributes.balance, Player_Attributes.potential FROM Player JOIN Player_Attributes ON Player.player_fifa_api_id = Player_Attributes.player_fifa_api_id WHERE Player_Attributes.balance = (SELECT MAX(balance) FROM Player_Attributes WHERE Player_Attributes.potential = 61) AND Player_Attributes.potential = 61;"]}, {"question_id": 1076, "answer_sql": []}, {"question_id": 1077, "answer_sql": ["SELECT team_long_name FROM Team WHERE team_short_name = 'GEN';"]}, {"question_id": 1078, "answer_sql": ["SELECT `player_name` FROM `Player` WHERE `birthday` = (SELECT MIN(`birthday`) FROM `Player` WHERE `player_name` = 'Aaron Lennon' OR `player_name` = 'Abdelaziz Barrada');", "SELECT `Player`.`player_name`, `Player_Attributes`.`date` FROM `Player` JOIN `Player_Attributes` ON `Player`.`player_api_id` = `Player_Attributes`.`player_api_id` WHERE `Player`.`player_name` IN ('Aaron Lennon', 'Abdelaziz Barrada') ORDER BY `Player_Attributes`.`date` DESC LIMIT 1;", "SELECT Player.player_name FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player_Attributes.date = ( SELECT MAX(date) FROM Player_Attributes WHERE Player_Attributes.player_fifa_api_id IN ( SELECT Player.player_fifa_api_id FROM Player WHERE player_name = 'Aaron Lennon' ) ) OR Player_Attributes.date = ( SELECT MAX(date) FROM Player_Attributes WHERE Player_Attributes.player_fifa_api_id IN ( SELECT Player.player_fifa_api_id FROM Player WHERE player_name = 'Abdelaziz Barrada' ) );", "SELECT `Player`.`player_name`, `Player_Attributes`.`date` AS `birthday` FROM `Player` JOIN `Player_Attributes` ON `Player`.`player_api_id` = `Player_Attributes`.`player_api_id` WHERE `Player`.`player_name` IN ('Aaron Lennon', 'Abdelaziz Barrada') ORDER BY `Player_Attributes`.`date` DESC;", "SELECT Player.player_name FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player_Attributes.date < '1995-01-01' ORDER BY Player.birthday DESC LIMIT 1;"]}, {"question_id": 1079, "answer_sql": ["SELECT Player.player_name, Player.height FROM Player JOIN Player_Attributes ON Player.player_fifa_api_id = Player_Attributes.player_fifa_api_id WHERE Player_Attributes.id = ( SELECT MAX(id) FROM Player_Attributes )", "SELECT MAX(Player.height) AS tallest_player_height FROM Player;", "SELECT Player.player_name, Player.height FROM Player WHERE Player.height = (SELECT MAX(height) FROM Player);", "SELECT player_name, height FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE height = (SELECT MAX(height) FROM Player);"]}, {"question_id": 1080, "answer_sql": ["SELECT COUNT(*) FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player_Attributes.preferred_foot = 'left' AND Player_Attributes.attacking_work_rate = 'low';"]}, {"question_id": 1081, "answer_sql": ["SELECT `Country`.`name` FROM `League` JOIN `Country` ON `League`.`country_id` = `Country`.`id` WHERE `League`.`name` = 'Belgium Jupiler League';", "SELECT `name` FROM `League` WHERE `name` = 'Belgium Jupiler League';"]}, {"question_id": 1082, "answer_sql": ["SELECT * FROM League WHERE country_id IN (SELECT id FROM Country WHERE name = 'Germany');", "SELECT League.name FROM League JOIN Country ON League.country_id = Country.id WHERE Country.name = 'Germany';"]}, {"question_id": 1083, "answer_sql": ["SELECT Player.player_name, Player_Attributes.overall_rating, Player_Attributes.strength FROM Player JOIN Player_Attributes ON Player.player_fifa_api_id = Player_Attributes.player_fifa_api_id WHERE Player_Attributes.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes)", "SELECT MAX(overall_rating) as Strongest_Overall_Strength FROM Player_Attributes;", "SELECT Player.player_name, Player_Attributes.overall_rating, Player_Attributes.strength FROM Player JOIN Player_Attributes ON Player.player_fifa_api_id = Player_Attributes.player_fifa_api_id WHERE Player_Attributes.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes) AND Player_Attributes.strength = (SELECT MAX(strength) FROM Player_Attributes);"]}, {"question_id": 1084, "answer_sql": []}, {"question_id": 1085, "answer_sql": ["SELECT player_name FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player_Attributes.crossing = ( SELECT MAX(crossing) FROM Player_Attributes WHERE player_name = 'Alexis' OR player_name = 'Ariel Borysiuk' OR player_name = 'Arouna Kone' )", "SELECT MAX(crossing) as Best_Crossing FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Alexis');", "SELECT player_name FROM Player WHERE player_api_id IN (SELECT player_api_id FROM Player_Attributes WHERE crossing = (SELECT MAX(crossing) FROM Player_Attributes));"]}, {"question_id": 1086, "answer_sql": ["SELECT `heading_accuracy` FROM `Player_Attributes` WHERE `player_api_id` = (SELECT `player_api_id` FROM `Player` WHERE `player_name` = 'Ariel Borysiuk');", "SELECT `heading_accuracy` FROM `Player_Attributes` WHERE `player_api_id` = 1;"]}, {"question_id": 1087, "answer_sql": []}, {"question_id": 1088, "answer_sql": []}, {"question_id": 1089, "answer_sql": ["SELECT COUNT(*) FROM Match WHERE country_id = (SELECT id FROM Country WHERE name = 'Belgium') AND season = '2008/2009';", "SELECT COUNT(*) FROM Match WHERE home_team_api_id IN (SELECT team_api_id FROM Team WHERE team_long_name = 'Belgium') AND season = '2008/2009' AND country_id IN (SELECT id FROM Country WHERE name = 'Belgium');"]}, {"question_id": 1090, "answer_sql": ["SELECT Player_Attributes.long_passing FROM Player JOIN Player_Attributes ON Player.player_fifa_api_id = Player_Attributes.player_fifa_api_id WHERE Player.birthday = ( SELECT MIN(birthday) FROM Player )"]}, {"question_id": 1091, "answer_sql": ["SELECT COUNT(*) FROM Match WHERE league_id IN (SELECT id FROM League WHERE name = 'Belgium Jupiler League') AND date LIKE '2009-04-%';", "SELECT COUNT(*) FROM Match WHERE home_team_api_id = 1 AND away_team_api_id = 2 AND season = '2009' AND league_id = 1 AND stage = 1 AND date LIKE '%2009-04%';"]}, {"question_id": 1092, "answer_sql": ["SELECT L.name as League FROM League L WHERE L.id = ( SELECT M.league_id FROM Match M WHERE M.season = '2008/2009' GROUP BY M.league_id ORDER BY COUNT(*) DESC LIMIT 1 );", "SELECT `name` FROM `League` WHERE `id` = (SELECT `league_id` FROM `Match` WHERE `season` = '2008/2009' GROUP BY `league_id` ORDER BY `id` DESC LIMIT 1);"]}, {"question_id": 1093, "answer_sql": ["SELECT AVG(overall_rating) FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE strftime('%Y', birthday) < '1986';"]}, {"question_id": 1094, "answer_sql": []}, {"question_id": 1095, "answer_sql": []}, {"question_id": 1096, "answer_sql": []}, {"question_id": 1097, "answer_sql": ["SELECT SUM(crossing) as total_crossing_score FROM Player_Attributes JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE Player.player_name = 'Aaron Lennox';", "SELECT SUM(crossing) as total_crossing_score FROM Player_Attributes WHERE player_fifa_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Lennox');"]}, {"question_id": 1098, "answer_sql": []}, {"question_id": 1099, "answer_sql": ["SELECT Player_Attributes.preferred_foot FROM Player_Attributes JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE Player.player_name = 'Abdou Diallo';"]}, {"question_id": 1100, "answer_sql": ["SELECT MAX(overall_rating) FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Dorlan Pabon');"]}, {"question_id": 1101, "answer_sql": ["SELECT AVG(away_team_goal) as average_goals FROM Match JOIN Team ON Match.away_team_api_id = Team.team_api_id JOIN Player ON Match.away_player_1 = Player.player_api_id WHERE Team.team_long_name = 'Parma' AND Match.away_team_goal IS NOT NULL;", "SELECT AVG(away_team_goal) as average_goals FROM Match WHERE away_team_api_id = (SELECT team_api_id FROM Team WHERE team_long_name = 'Parma') AND home_team_api_id = (SELECT team_api_id FROM Team WHERE team_long_name = 'Italy');"]}, {"question_id": 1102, "answer_sql": ["SELECT Player.player_name FROM Player JOIN Player_Attributes ON Player.player_fifa_api_id = Player_Attributes.player_fifa_api_id WHERE Player_Attributes.overall_rating = 77 AND Player_Attributes.date = '2016/6/23' ORDER BY Player.birthday ASC LIMIT 1;"]}, {"question_id": 1103, "answer_sql": ["SELECT `overall_rating` FROM `Player_Attributes` WHERE `date` = '2016-02-04 00:00:00' AND `player_api_id` = ( SELECT `player_api_id` FROM `Player` WHERE `player_name` = 'Aaron Mooy' );", "SELECT `overall_rating` FROM `Player_Attributes` WHERE `player_api_id` = (SELECT `player_api_id` FROM `Player` WHERE `player_name` = 'Aaron Mooy');", "SELECT overall_rating FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Mooy') AND date = '2016-02-04';"]}, {"question_id": 1104, "answer_sql": ["SELECT * FROM Player_Attributes JOIN Player ON Player_Attributes.player_fifa_api_id = Player.player_fifa_api_id WHERE Player.player_name = 'Francesco Parravicini' AND Player_Attributes.date = '2010-08-30 00:00:00';", "SELECT potential FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Francesco Parravicini');", "SELECT Player_Attributes.potential FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player.player_name = 'Francesco Parravicini' AND Player_Attributes.date = '2010-08-30 00:00:00';", "SELECT Player_Attributes.overall_rating, Player_Attributes.potential FROM Player_Attributes JOIN Player ON Player_Attributes.player_fifa_api_id = Player.player_fifa_api_id WHERE Player.player_name = 'Francesco Parravicini' AND Player_Attributes.date = '2010-08-30 00:00:00';", "SELECT P.player_name, PA.date, PA.potential FROM Player P JOIN Player_Attributes PA ON P.player_fifa_api_id = PA.player_fifa_api_id WHERE P.player_name = 'Francesco Parravicini' AND PA.date = '2010-08-30 00:00:00';"]}, {"question_id": 1105, "answer_sql": ["SELECT Player_Attributes.attacking_work_rate FROM Player_Attributes JOIN Player ON Player_Attributes.player_fifa_api_id = Player.player_fifa_api_id WHERE Player.player_name = 'Francesco Migliore' AND strftime('%Y-%m-%d', Player_Attributes.date) = '2015-05-01';", "SELECT * FROM Player_Attributes JOIN Player ON Player_Attributes.player_fifa_api_id = Player.player_fifa_api_id WHERE Player.player_name = 'Francesco Migliore' AND Player_Attributes.date = '2015-05-01 00:00:00';", "SELECT Player_Attributes.attacking_work_rate FROM Player_Attributes JOIN Player ON Player_Attributes.player_fifa_api_id = Player.player_fifa_api_id WHERE Player.player_name = 'Francesco Migliore' AND strftime('%Y/%m/%d', Player_Attributes.date) = '2015-05-01 00:00:00';"]}, {"question_id": 1106, "answer_sql": ["SELECT `defensive_work_rate` FROM `Player_Attributes` WHERE `player_fifa_api_id` = (SELECT `player_fifa_api_id` FROM `Player` WHERE `player_name` = 'Kevin Berigaud');", "SELECT `defensive_work_rate` FROM `Player_Attributes` WHERE `player_api_id` = (SELECT `player_api_id` FROM `Player` WHERE `player_name` = 'Kevin Berigaud') AND `date` = '2013-02-22 00:00:00';", "SELECT `defensive_work_rate` FROM `Player_Attributes` WHERE `player_fifa_api_id` = (SELECT `player_api_id` FROM `Player` WHERE `player_name` = 'Kevin Berigaud');"]}, {"question_id": 1107, "answer_sql": ["SELECT date FROM Player_Attributes JOIN Player ON Player_Attributes.player_fifa_api_id = Player.player_fifa_api_id WHERE Player.player_name = 'Kevin Constant' ORDER BY Player_Attributes.crossing DESC LIMIT 1;", "SELECT Player.birthday FROM Player JOIN Player_Attributes ON Player.player_fifa_api_id = Player_Attributes.player_fifa_api_id WHERE Player_Attributes.crossing = ( SELECT MAX(crossing) FROM Player_Attributes ) AND Player.player_name = 'Kevin Constant';", "SELECT Player_Attributes.date FROM Player_Attributes JOIN Player ON Player_Attributes.player_fifa_api_id = Player.player_fifa_api_id WHERE Player.player_name = 'Kevin Constant' ORDER BY Player_Attributes.date ASC LIMIT 1;"]}, {"question_id": 1108, "answer_sql": []}, {"question_id": 1109, "answer_sql": ["SELECT Team_Attributes.buildUpPlayDribblingClass FROM Team_Attributes JOIN Team ON Team_Attributes.team_api_id = Team.team_api_id WHERE Team.team_short_name = 'LEI' AND strftime('%Y/%m/%d', Team_Attributes.date) = '2015/09/10';"]}, {"question_id": 1110, "answer_sql": ["SELECT buildUpPlayPassingClass FROM Team_Attributes JOIN Team ON Team_Attributes.team_api_id = Team.team_api_id WHERE Team.team_long_name = 'FC Lorient' AND Team_Attributes.date = '2010-02-22';"]}, {"question_id": 1111, "answer_sql": ["SELECT `Team_Attributes`.`chanceCreationPassingClass` FROM `Team_Attributes` JOIN `Team` ON `Team_Attributes`.`team_api_id` = `Team`.`team_api_id` JOIN `Team` AS `T` ON `T`.`team_fifa_api_id` = `Team`.`team_fifa_api_id` WHERE `T`.`team_long_name` = 'PEC Zwolle' AND `Team_Attributes`.`date` = '2013-09-20 00:00:00';"]}, {"question_id": 1112, "answer_sql": ["SELECT Team_Attributes.chanceCreationCrossingClass FROM Team_Attributes JOIN Team ON Team_Attributes.team_fifa_api_id = Team.team_fifa_api_id JOIN Match ON Team.id = Match.country_id WHERE Team.team_long_name = 'Hull City' AND Match.date = '2010-02-22 00:00:00';"]}, {"question_id": 1113, "answer_sql": ["SELECT `defenceAggressionClass` FROM `Team_Attributes` WHERE `team_fifa_api_id` = ( SELECT `team_fifa_api_id` FROM `Team` WHERE `team_long_name` = 'Hannover 96' ) AND `date` = '2015-09-10 00:00:00';"]}, {"question_id": 1114, "answer_sql": ["SELECT AVG(overall_rating) FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Marko Arnatovic') AND date BETWEEN '2007-02-22 00:00:00' and '2016-04-21 00:00:00';"]}, {"question_id": 1115, "answer_sql": []}, {"question_id": 1116, "answer_sql": ["SELECT player_name FROM Player WHERE height = (SELECT MAX(height) FROM Player);", "SELECT player_name FROM Player ORDER BY height DESC LIMIT 5;", "SELECT Player.player_name, Player.height FROM Player ORDER BY Player.height DESC LIMIT 5;"]}, {"question_id": 1117, "answer_sql": ["SELECT player_api_id FROM Player ORDER BY weight DESC LIMIT 10;"]}, {"question_id": 1118, "answer_sql": ["SELECT Player.player_name FROM Player JOIN (SELECT player_api_id FROM Player WHERE CURRENT_TIMESTAMP - datetime(birthday) > '34 years' GROUP BY player_api_id) AS Player_API_IDs ON Player.player_api_id = Player_API_IDs.player_api_id;"]}, {"question_id": 1119, "answer_sql": ["SELECT COUNT(*) FROM Match JOIN Player ON Match.home_player_1 = Player.player_api_id WHERE Player.player_name = 'Aaron Lennon';", "SELECT home_team_goal FROM Match WHERE home_player_X1 = 1000000 AND away_player_X1 = 1000000 AND home_team_api_id = 1 AND away_team_api_id = 2 AND date = '2022-03-01';"]}, {"question_id": 1120, "answer_sql": ["SELECT SUM(away_team_goal) FROM Match WHERE home_player_X1 = (SELECT id FROM Player WHERE player_name = 'Daan Smith') AND away_player_X1 = (SELECT id FROM Player WHERE player_name = 'Filipe Ferreira');"]}, {"question_id": 1121, "answer_sql": ["SELECT SUM(home_team_goal) as total_home_team_goal FROM Match JOIN Player ON Match.home_player_11 = Player.player_api_id WHERE SUBSTR(Player.birthday, 6, 2) < 31;"]}, {"question_id": 1122, "answer_sql": ["SELECT Player.player_name FROM Player_Attributes INNER JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE Player_Attributes.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes);"]}, {"question_id": 1123, "answer_sql": ["SELECT player_name FROM Player WHERE player_api_id = (SELECT player_api_id FROM Player_Attributes WHERE potential = (SELECT MAX(potential) FROM Player_Attributes));", "SELECT Player.player_name FROM Player JOIN Player_Attributes ON Player.player_fifa_api_id = Player_Attributes.player_fifa_api_id WHERE Player_Attributes.potential = (SELECT MAX(potential) FROM Player_Attributes);", "SELECT player_name FROM Player WHERE player_api_id IN ( SELECT player_fifa_api_id FROM Player_Attributes WHERE overall_rating = ( SELECT MAX(overall_rating) FROM Player_Attributes ) );"]}, {"question_id": 1124, "answer_sql": []}, {"question_id": 1125, "answer_sql": ["SELECT player_name FROM Player WHERE birthday = (SELECT MIN(birthday) FROM Player);", "SELECT player_name FROM Player WHERE player_api_id IN (SELECT player_api_id FROM Player_Attributes WHERE finishing = 1) ORDER BY birthday ASC LIMIT 1;", "SELECT player_name FROM Player WHERE player_api_id IN (SELECT player_api_id FROM Player_Attributes WHERE finishing = 1) ORDER BY birthday DESC LIMIT 1;"]}, {"question_id": 1126, "answer_sql": ["SELECT Player.player_name FROM Player JOIN Country ON Player.birthday = Country.name WHERE Country.name = 'Belgium';"]}, {"question_id": 1127, "answer_sql": ["SELECT Player.player_name, Country.name FROM Player JOIN Player_Attributes ON Player.player_fifa_api_id = Player_Attributes.player_fifa_api_id JOIN Country ON Player_Attributes.player_api_id = Country.id WHERE Player_Attributes.vision > 89"]}, {"question_id": 1128, "answer_sql": []}, {"question_id": 1129, "answer_sql": ["SELECT Team.team_long_name FROM Team JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id WHERE Team_Attributes.buildUpPlaySpeedClass = 'Slow';"]}, {"question_id": 1130, "answer_sql": ["SELECT Team.team_short_name FROM Team JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id WHERE Team_Attributes.chanceCreationPassingClass = 'Safe'", "SELECT team_short_name FROM Team WHERE team_short_name = (SELECT team_short_name FROM Team_Attributes WHERE chanceCreationPassingClass = 'Safe');", "SELECT team_short_name FROM Team WHERE team_short_name = 'Safe' AND team_short_name = (SELECT team_short_name FROM Team_Attributes WHERE chanceCreationPassingClass = 'Safe');"]}, {"question_id": 1131, "answer_sql": ["SELECT AVG(p.height) as average_height FROM Player p JOIN Player_Attributes pa ON p.player_fifa_api_id = pa.player_fifa_api_id JOIN Player_Attributes pa2 ON p.player_fifa_api_id = pa2.player_fifa_api_id WHERE p.player_name LIKE '%Italy%' AND pa.date = '2022-01-01' AND pa2.date = '2022-01-01';"]}, {"question_id": 1132, "answer_sql": ["SELECT player_name FROM Player WHERE height > 180 ORDER BY player_name ASC LIMIT 3;"]}, {"question_id": 1133, "answer_sql": ["SELECT COUNT(*) FROM Player WHERE birthday > '1990-01-01' AND player_name LIKE 'Aaron%';", "SELECT COUNT(*) FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player.birthday > '1990-01-01' AND Player.player_name LIKE 'Aaron%';", "SELECT COUNT(*) FROM Player JOIN Player_Attributes ON Player.player_fifa_api_id = Player_Attributes.player_fifa_api_id WHERE Player.birthday > '1990-12-31' AND Player.player_name LIKE 'Aaron%';"]}, {"question_id": 1134, "answer_sql": ["SELECT SUBSTR(Player_Attributes.jumping, INSTR(Player_Attributes.jumping, 'jumping') + 10) - SUBSTR(Player_Attributes.jumping, INSTR(Player_Attributes.jumping, 'jumping'), 10) AS difference FROM Player_Attributes WHERE id = 6 AND Player_Attributes.id = 23;"]}, {"question_id": 1135, "answer_sql": ["SELECT Player_Attributes.player_api_id FROM Player_Attributes WHERE Player_Attributes.potential = (SELECT MIN(potential) FROM Player_Attributes) AND Player_Attributes.preferred_foot = 'right' LIMIT 3;"]}, {"question_id": 1136, "answer_sql": ["SELECT COUNT(*) as `Number of Players` FROM `Player_Attributes` WHERE `crossing` = (SELECT MAX(`crossing`) FROM `Player_Attributes`) AND `preferred_foot` = 'left'", "SELECT COUNT(*) as `Number of Players` FROM `Player_Attributes` WHERE `crossing` = (SELECT MAX(`crossing`) FROM `Player_Attributes`) AND `preferred_foot` = 'left' AND `attacking_work_rate` = 'medium'", "SELECT COUNT(*) as `Number of Players` FROM `Player_Attributes` WHERE `crossing` = (SELECT MAX(`crossing`) FROM `Player_Attributes`) AND `preferred_foot` = 'left' AND `attacking_work_rate` = 'medium' AND `potential` = (SELECT MAX(`potential`) FROM `Player_Attributes`);"]}, {"question_id": 1137, "answer_sql": ["SELECT COUNT(*) FROM Player_Attributes WHERE strength > 80 AND stamina > 80;"]}, {"question_id": 1138, "answer_sql": ["SELECT League.name FROM League JOIN Country ON League.country_id = Country.id WHERE Country.name = 'Poland';", "SELECT `Country`.`name` FROM `League` JOIN `Country` ON `League`.`country_id` = `Country`.`id` WHERE `League`.`name` = 'Poland Ekstraklasa';", "SELECT League.country_id FROM Match JOIN League ON Match.league_id = League.id WHERE Match.season = '2019-2020' AND Match.stage = 1 AND Match.country_id = (SELECT id FROM Country WHERE name = 'Poland')"]}, {"question_id": 1139, "answer_sql": ["SELECT Match.away_team_goal AS away_goal, Match.home_team_goal AS home_goal, Match.goal AS total_goal FROM Match WHERE Match.date LIKE '2008-09-24%' AND Match.away_team_goal > Match.home_team_goal AND Match.away_team_goal > 0 AND Match.home_team_goal > 0;", "SELECT `Match`.away_team_goal, `Match`.home_team_goal, `Match`.goal FROM `Match` WHERE `Match`.date = '2008-09-24' AND `Match`.league_id = (SELECT `League`.id FROM `League` WHERE `League`.name = 'Belgian Jupiler League') AND `Match`.home_team_api_id = (SELECT `Team`.team_api_id FROM `Team` WHERE `Team`.team_long_name = 'Belgium') AND `Match`.away_team_api_id = (SELECT `Team`.team_api_id FROM `Team` WHERE `Team`.team_long_name = 'Netherlands');"]}, {"question_id": 1140, "answer_sql": ["SELECT Player_Attributes.sprint_speed, Player_Attributes.agility, Player_Attributes.acceleration FROM Player_Attributes JOIN Player ON Player_Attributes.player_fifa_api_id = Player.player_fifa_api_id WHERE Player.player_name = 'Alexis Blin';"]}, {"question_id": 1141, "answer_sql": ["SELECT Team_Attributes . buildUpPlaySpeedClass FROM Team JOIN Team_Attributes ON Team . team_api_id = Team_Attributes . team_api_id WHERE Team . team_long_name = 'KSV Cercle Brugge'"]}, {"question_id": 1142, "answer_sql": ["SELECT COUNT(*) FROM Match WHERE season = '2015/2016';", "SELECT COUNT(*) FROM Match WHERE season = '2015/2016' AND league_id = (SELECT id FROM League WHERE name = 'Italian Serie A');"]}, {"question_id": 1143, "answer_sql": ["SELECT MAX(home_team_goal) as Highest_Score FROM Match WHERE league_id = (SELECT id FROM League WHERE name = 'Netherlands Eredivisie')", "SELECT MAX(home_team_goal) FROM Match WHERE home_team_api_id = (SELECT team_api_id FROM Team WHERE team_long_name = 'Netherlands Eredivisie');"]}, {"question_id": 1144, "answer_sql": ["SELECT Player.player_name, Player_Attributes.finishing, Player_Attributes.curve FROM Player JOIN Player_Attributes ON Player.player_fifa_api_id = Player_Attributes.player_fifa_api_id WHERE Player.weight = (SELECT MAX(weight) FROM Player) ORDER BY Player_Attributes.finishing DESC, Player_Attributes.curve DESC;", "SELECT Player.player_name, Player_Attributes.finishing, Player_Attributes.curve FROM Player JOIN Player_Attributes ON Player.player_fifa_api_id = Player_Attributes.player_fifa_api_id WHERE Player.weight = (SELECT MAX(weight) FROM Player);"]}, {"question_id": 1145, "answer_sql": ["SELECT L.name as League, COUNT(M.id) as TotalGames FROM League as L JOIN Match as M ON L.id = M.league_id WHERE M.season = '2015/2016' GROUP BY L.name ORDER BY TotalGames DESC LIMIT 1;", "SELECT L.name AS League FROM League L JOIN Match M ON L.id = M.league_id WHERE M.season = '2015/2016' GROUP BY L.name ORDER BY COUNT(M.id) DESC LIMIT 1;", "SELECT `league_id`, COUNT(`id`) as total_games FROM `Match` WHERE `season` = '2015/2016' GROUP BY `league_id` ORDER BY total_games DESC LIMIT 1;", "SELECT L.name as League FROM League L WHERE L.name = ( SELECT T.team_long_name FROM Team T JOIN Team_Attributes TA ON T.team_api_id = TA.team_api_id WHERE TA.date = '2015/2016' GROUP BY T.team_long_name ORDER BY COUNT(TA.id) DESC LIMIT 1 );"]}, {"question_id": 1146, "answer_sql": ["SELECT team_long_name FROM Team WHERE team_api_id = (SELECT away_team_api_id FROM Match WHERE away_team_goal = (SELECT MAX(away_team_goal) FROM Match));"]}, {"question_id": 1147, "answer_sql": ["SELECT player_name FROM Player WHERE player_api_id = (SELECT player_api_id FROM Player_Attributes WHERE overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes));", "SELECT Player.player_name FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player_Attributes.overall_rating = ( SELECT MAX(overall_rating) FROM Player_Attributes );", "SELECT player_name FROM Player WHERE player_api_id = (SELECT MAX(player_api_id) FROM Player);"]}, {"question_id": 1148, "answer_sql": []}, {"question_id": 1149, "answer_sql": []}, {"question_id": 1150, "answer_sql": []}, {"question_id": 1151, "answer_sql": ["SELECT COUNT(*) as Inpatient_Percentage FROM Patient WHERE Birthday BETWEEN '1930-01-01' AND '1940-12-31' AND Admission = '+'"]}, {"question_id": 1152, "answer_sql": ["SELECT COUNT(ID) as 'Outpatient', COUNT(ID) as 'Inpatient' FROM Patient WHERE Diagnosis = 'SLE'", "SELECT COUNT(ID) / (SELECT COUNT(ID) FROM Patient WHERE Diagnosis = 'SLE' AND Admission = '+') as ratio FROM Patient WHERE Diagnosis = 'SLE' AND Admission = '-'"]}, {"question_id": 1153, "answer_sql": ["SELECT Examination.Diagnosis, Laboratory.Date FROM Examination JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Examination.ID = 30609 ORDER BY Laboratory.Date;", "SELECT Laboratory.Date, Laboratory.GOT, Laboratory.GPT, Laboratory.LDH, Laboratory.ALP, Laboratory.TP, Laboratory.ALB, Laboratory.UA, Laboratory.UN, Laboratory.CRE, Laboratory.`T-BIL`, Laboratory.`T-CHO`, Laboratory.TG, Laboratory.CPK, Laboratory.GLU, Laboratory.WBC, Laboratory.RBC, Laboratory.HGB, Laboratory.HCT, Laboratory.PLT, Laboratory.PT, Laboratory.APTT, Laboratory.FG, Laboratory.PIC, Laboratory.TAT, Laboratory.TAT2, Laboratory.`U-PRO`, Laboratory.IGG, Laboratory.IGA, Laboratory.IGM, Laboratory.CRP, Laboratory.RA, Laboratory.RF, Laboratory.C3, Laboratory.C4, Laboratory.RNP, Laboratory.SM, Laboratory.SC170, Laboratory.SSA, Laboratory.SSB, Laboratory.CENTROMEA, Laboratory.DNA, Laboratory.`DNA-II` FROM Laboratory WHERE Laboratory.ID = 30609;", "SELECT Patient.Diagnosis, Laboratory.Date FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.ID = 30609 ORDER BY Laboratory.Date;"]}, {"question_id": 1154, "answer_sql": ["SELECT Patient.SEX, Patient.Birthday FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.ID = 163109;"]}, {"question_id": 1155, "answer_sql": ["SELECT Patient.ID, Patient.SEX, Patient.Birthday FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.LDH > 500;"]}, {"question_id": 1156, "answer_sql": []}, {"question_id": 1157, "answer_sql": ["SELECT Patient.ID, Patient.SEX, Examination.Diagnosis FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.Thrombosis = 2;", "SELECT Patient.ID, Patient.SEX, Patient.Diagnosis FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.Thrombosis = 2;"]}, {"question_id": 1158, "answer_sql": ["SELECT Patient.ID, Patient.Birthday, Laboratory.TAT, Laboratory.TAT2 FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.Birthday = '1937' AND Laboratory.TAT > Laboratory.TAT2;"]}, {"question_id": 1159, "answer_sql": ["SELECT Patient.ID, Patient.SEX, Patient.Diagnosis FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.ALB < 3.5;"]}, {"question_id": 1160, "answer_sql": ["SELECT COUNT(ID) / (SELECT COUNT(ID) FROM Patient WHERE SEX = 'F') * 100 FROM Laboratory WHERE TP < '6.0' or TP > '8.5';"]}, {"question_id": 1161, "answer_sql": []}, {"question_id": 1162, "answer_sql": []}, {"question_id": 1163, "answer_sql": []}, {"question_id": 1164, "answer_sql": ["SELECT COUNT(*) FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.`Examination Date` = '1997-01-01' AND Examination.Thrombosis = 1 AND Patient.SEX = 'F';", "SELECT COUNT(*) FROM Examination JOIN Patient ON Examination.ID = Patient.ID WHERE Thrombosis = 1 AND SEX = 'F';"]}, {"question_id": 1165, "answer_sql": []}, {"question_id": 1166, "answer_sql": ["SELECT P.ID, P.SEX, P.Birthday, P.Description, P.`First Date`, P.Admission, P.Diagnosis FROM Patient P WHERE P.Birthday = (SELECT MIN(Birthday) FROM Patient);", "SELECT Patient.ID, Patient.SEX, Patient.Birthday, Patient.Description, Examination.ID, Examination.`Examination Date`, Examination.Diagnosis FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Patient.Birthday = (SELECT MIN(Birthday) FROM Patient) ORDER BY Examination.`Examination Date` DESC;"]}, {"question_id": 1167, "answer_sql": ["SELECT COUNT(Patient.ID) / 12 FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.Date BETWEEN '1998-01-01' AND '1998-12-31' AND Patient.SEX = 'M';"]}, {"question_id": 1168, "answer_sql": ["SELECT Laboratory.Date, Patient.Birthday FROM Laboratory JOIN Patient ON Laboratory.ID = Patient.ID WHERE Patient.Diagnosis = 'SJS' ORDER BY Laboratory.Date ASC LIMIT 1;"]}, {"question_id": 1169, "answer_sql": ["SELECT SUM(UA <= '8.0' and SEX = 'M') / SUM(UA <= '6.5' and SEX = 'F') as Ratio FROM Laboratory JOIN Patient ON Laboratory.ID = Patient.ID;"]}, {"question_id": 1170, "answer_sql": ["SELECT COUNT(*) FROM Patient WHERE ID NOT IN (SELECT Patient.ID FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.`Examination Date` >= '2022-01-01')", "SELECT COUNT(*) FROM Patient WHERE `First Date` > '1999-12-31'"]}, {"question_id": 1171, "answer_sql": ["SELECT COUNT(*) FROM Patient WHERE Birthday < '1990-01-01' AND `First Date` BETWEEN '1990-01-01' AND '1993-12-31';", "SELECT COUNT(*) FROM Patient AS P JOIN Examination AS E ON P.ID = E.ID JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Birthday < '1990-01-01' AND E.`Examination Date` BETWEEN '1990-01-01' AND '1993-12-31';", "SELECT COUNT(*) FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Patient.Birthday < '1990-01-01' AND Examination.`Examination Date` BETWEEN '1990-01-01' AND '1993-12-31';"]}, {"question_id": 1172, "answer_sql": ["SELECT COUNT(*) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.SEX = 'M' AND Laboratory.TG > 2.0;", "SELECT COUNT(*) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.SEX = 'M' AND Laboratory.TG > '160' AND Laboratory.`T-BIL` > '2.0';", "SELECT COUNT(*) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.SEX = 'M' AND Laboratory.TG > '10' AND Laboratory.`T-BIL` > '2.0';", "SELECT COUNT(*) FROM Examination e JOIN Patient p ON e.ID = p.ID JOIN Laboratory l ON p.ID = l.ID WHERE p.SEX = 'M' AND l.`T-BIL` > '2.0';", "SELECT COUNT(*) FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Patient.SEX = 'M' AND Laboratory.TG > '2.0';"]}, {"question_id": 1173, "answer_sql": ["SELECT Diagnosis FROM Examination WHERE `Examination Date` BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY Diagnosis ORDER BY COUNT(Diagnosis) DESC LIMIT 1;"]}, {"question_id": 1174, "answer_sql": ["SELECT AVG(Birthday) FROM Patient WHERE `First Date` BETWEEN '1991-10-01' AND '1991-10-30';"]}, {"question_id": 1175, "answer_sql": []}, {"question_id": 1176, "answer_sql": ["SELECT `Examination Date`, `aCL IgM`, `aCL IgG`, `ANA Pattern`, `aCL IgA` FROM Examination WHERE ID = 3605340 AND `Examination Date` = '1996-12-02';", "SELECT Examination.`aCL IgM` FROM Examination WHERE Examination.ID = 3605340 AND Examination.`Examination Date` = '1996-12-02';"]}, {"question_id": 1177, "answer_sql": ["SELECT Laboratory.TP, Laboratory.ALB, Laboratory.UA, Laboratory.UN, Laboratory.CRE, Laboratory.`T-BIL`, Laboratory.`T-CHO`, Laboratory.TG, Laboratory.CPK, Laboratory.GLU, Laboratory.WBC, Laboratory.RBC, Laboratory.HGB, Laboratory.HCT, Laboratory.PLT, Laboratory.PT, Laboratory.APTT, Laboratory.FG, Laboratory.PIC, Laboratory.TAT, Laboratory.TAT2, Laboratory.`U-PRO`, Laboratory.IGG, Laboratory.IGA, Laboratory.IGM, Laboratory.CRP, Laboratory.RA, Laboratory.RF, Laboratory.C3, Laboratory.C4, Laboratory.RNP, Laboratory.SM, Laboratory.SSA, Laboratory.SSB, Laboratory.CENTROMEA, Laboratory.DNA, Laboratory.`DNA-II` FROM Laboratory JOIN Patient ON Laboratory.ID = Patient.ID WHERE Patient.ID = 2927464 AND Laboratory.Date = '1995-09-04' AND Laboratory.TG < 250;", "SELECT E.ID, E.`Examination Date`, E.`aCL IgG`, E.`aCL IgM`, E.ANA, E.`ANA Pattern`, E.`aCL IgA`, E.Diagnosis, E.KCT, E.RVVT, E.LAC, E.Symptoms, E.Thrombosis FROM Examination E JOIN Patient P ON E.ID = P.ID WHERE P.ID = 2927464 AND E.`Examination Date` = '1995-09-04'", "SELECT Laboratory.TP FROM Laboratory JOIN Patient ON Laboratory.ID = Patient.ID WHERE Patient.ID = 2927464 AND Laboratory.Date = '1995-09-04' AND Laboratory.TG < 250;"]}, {"question_id": 1178, "answer_sql": ["SELECT SEX FROM Patient WHERE Diagnosis = 'AORTITIS' AND `First Date` IS NOT NULL;", "SELECT `SEX` FROM `Patient` WHERE `Diagnosis` = 'AORTITIS' ORDER BY `First Date` LIMIT 1;", "SELECT Patient.SEX FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.Diagnosis = 'AORTITIS';", "SELECT `SEX` FROM `Patient` WHERE `Diagnosis` = 'AORTITIS' AND `First Date` IS NOT NULL LIMIT 1;", "SELECT SEX FROM Patient WHERE Diagnosis = 'AORTITIS';"]}, {"question_id": 1179, "answer_sql": ["SELECT Examination.`aCL IgM` FROM Examination JOIN Patient ON Examination.ID = Patient.ID WHERE Patient.Description = '1994-02-19' AND Examination.Diagnosis = 'SLE' AND Examination.`aCL IgM` IS NOT NULL AND Examination.`aCL IgM` != 0;"]}, {"question_id": 1180, "answer_sql": ["SELECT Patient.SEX FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.Date = '1992-06-12' AND Laboratory.GPT = '9';", "SELECT Patient.SEX FROM Patient WHERE Patient.Description = '1992-06-12' AND Patient.Diagnosis = 'Thrombosis' AND Patient.Admission = 'aCL';"]}, {"question_id": 1181, "answer_sql": []}, {"question_id": 1182, "answer_sql": ["SELECT COUNT(Laboratory.ID) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.Diagnosis = 'SJS' AND Patient.`First Date` = '1991-06-13';", "SELECT COUNT(*) FROM Laboratory JOIN Patient ON Laboratory.ID = Patient.ID WHERE Patient.`First Date` = '1991-06-13' AND Patient.Diagnosis = 'SJS' AND Laboratory.Date = '1995-01-01';"]}, {"question_id": 1183, "answer_sql": ["SELECT Examination.Diagnosis FROM Examination JOIN Patient ON Examination.ID = Patient.ID WHERE Patient.`First Date` = '1997-01-27' AND Examination.Diagnosis = 'SLE';"]}, {"question_id": 1184, "answer_sql": ["SELECT Examination.Symptoms FROM Examination JOIN Patient ON Examination.ID = Patient.ID WHERE Patient.Birthday = '1959-03-01' AND Examination.`Examination Date` = '1993-09-02';"]}, {"question_id": 1185, "answer_sql": []}, {"question_id": 1186, "answer_sql": ["SELECT Patient.ID, Patient.SEX, Patient.Birthday, Patient.Description, Examination.`Examination Date`, Examination.Diagnosis FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.`Examination Date` BETWEEN '1970-01-01' AND '1998-01-01' AND Examination.Diagnosis = 'Behcet';", "SELECT Patient.ID, Patient.SEX, Patient.Birthday, Patient.Description, Patient.`First Date`, Patient.Admission, Patient.Diagnosis FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.`Examination Date` BETWEEN '1997-01-01' AND '1997-12-31' AND Patient.Diagnosis = 'Behcet' ORDER BY Patient.ID;", "SELECT Patient.ID, Patient.SEX, Patient.Birthday, Patient.Description, Patient.`First Date`, Patient.Admission, Patient.Diagnosis FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.`Examination Date` BETWEEN '1970-01-01' AND '1998-12-31' AND Examination.Diagnosis = 'Behcet' ORDER BY Patient.ID;"]}, {"question_id": 1187, "answer_sql": ["SELECT Examination.ID FROM Examination JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Examination.`Examination Date` BETWEEN '1987-07-06' AND '1996-01-31' AND Laboratory.GPT > 30 AND Laboratory.ALB < 4;", "SELECT Examination.ID FROM Examination JOIN Patient ON Examination.ID = Patient.ID JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Examination.`Examination Date` BETWEEN '1987-07-06' AND '1996-01-31' AND Patient.SEX = 'Male' AND Laboratory.GPT > 30 AND Laboratory.ALB < 4;"]}, {"question_id": 1188, "answer_sql": []}, {"question_id": 1189, "answer_sql": ["SELECT COUNT(*) FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.Thrombosis = 2 AND Examination.`ANA Pattern` = 'S' AND Examination.`aCL IgM` > (SELECT AVG(`aCL IgM`) FROM Examination WHERE `aCL IgM` IS NOT NULL);"]}, {"question_id": 1190, "answer_sql": ["SELECT (COUNT(*) * 100.0) / (SELECT COUNT(*) FROM Laboratory WHERE `U-PRO` > 0 AND `U-PRO` < 30) as percentage FROM Laboratory WHERE UA < 6.5;", "SELECT (SUM(CASE WHEN `U-PRO` > 0 AND `U-PRO` < 30 AND UA < 6.5 THEN 1 ELSE 0 END)) * 100 / (SELECT COUNT(*) FROM Patient WHERE `U-PRO` > 0 AND `U-PRO` < 30) as percentage FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID;"]}, {"question_id": 1191, "answer_sql": []}, {"question_id": 1192, "answer_sql": ["SELECT Patient.ID, Patient.SEX, Patient.Birthday, Patient.Description, Patient.`First Date`, Patient.Admission, Patient.Diagnosis FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.Date LIKE '1991-10%' AND Laboratory.`T-BIL` < 2.0;"]}, {"question_id": 1193, "answer_sql": ["SELECT COUNT(*) FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.ANA <> 'p' AND Patient.SEX = 'F' AND Patient.Birthday BETWEEN '1980-01-01' AND '1989-12-31';", "SELECT COUNT(*) FROM Patient WHERE SEX != 'P' AND BIRTHDAY BETWEEN '1980-01-01' AND '1989-12-31';"]}, {"question_id": 1194, "answer_sql": ["SELECT Patient.SEX FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Examination.Diagnosis = 'PSS' AND Laboratory.CRE > 2 AND Laboratory.LDH = 123 AND Laboratory.LDH > 0;", "SELECT Patient.SEX FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Examination.Diagnosis = 'PSS' AND Laboratory.CRP > 2 AND Laboratory.CRE = 1 AND Laboratory.LDH = 123;"]}, {"question_id": 1195, "answer_sql": ["SELECT AVG(ALB) FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE SEX = 'F' AND PLT > 400 AND Diagnosis = 'SLE';", "SELECT AVG(Laboratory.ALB) FROM Laboratory JOIN Examination ON Laboratory.ID = Examination.ID JOIN Patient ON Examination.ID = Patient.ID WHERE Patient.SEX = 'F' AND Patient.Diagnosis = 'SLE' AND PLT > 400;"]}, {"question_id": 1196, "answer_sql": ["SELECT `Symptoms` FROM Examination WHERE Diagnosis = 'SLE' GROUP BY `Symptoms` ORDER BY COUNT(`Symptoms`) DESC LIMIT 1;", "SELECT symptoms, COUNT(*) as frequency FROM Examination e JOIN Laboratory l ON e.ID = l.ID WHERE e.Diagnosis = 'SLE' GROUP BY symptoms ORDER BY frequency DESC LIMIT 1;", "SELECT Examination.Symptoms, COUNT(*) as Frequency FROM Examination JOIN Patient ON Examination.ID = Patient.ID WHERE Patient.Diagnosis = 'SLE' GROUP BY Examination.Symptoms ORDER BY Frequency DESC LIMIT 1;", "SELECT symptoms as most_common_sign FROM Examination WHERE Diagnosis = 'SLE' GROUP BY symptoms ORDER BY COUNT(*) DESC LIMIT 1;", "SELECT Symptoms FROM Examination WHERE Diagnosis = 'SLE' ORDER BY Symptoms DESC LIMIT 1;"]}, {"question_id": 1197, "answer_sql": ["SELECT P.`First Date`, P.Diagnosis FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE P.ID = 48473 ORDER BY E.`Examination Date` ASC LIMIT 1;", "SELECT Examination.`Examination Date`, Examination.Diagnosis FROM Examination JOIN Patient ON Examination.ID = Patient.ID WHERE Patient.ID = 48473 AND Examination.Diagnosis IS NOT NULL ORDER BY Examination.`Examination Date` ASC;", "SELECT Patient.Description, Examination.Diagnosis FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Patient.ID = 48473 ORDER BY Examination.`Examination Date` ASC LIMIT 1;", "SELECT Examination.Diagnosis, Patient.Description FROM Examination JOIN Patient ON Examination.ID = Patient.ID WHERE Patient.Description = ( SELECT MIN(Patient.Description) FROM Patient WHERE Patient.ID = 48473 ) ORDER BY Patient.Description ASC;", "SELECT Laboratory.Date, Patient.Diagnosis FROM Laboratory JOIN Patient ON Laboratory.ID = Patient.ID WHERE Patient.ID = 48473 ORDER BY Laboratory.Date ASC LIMIT 1;"]}, {"question_id": 1198, "answer_sql": ["SELECT COUNT(*) FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Patient.SEX = 'F' AND Examination.Diagnosis = 'APS';", "SELECT COUNT(*) FROM Patient WHERE SEX = 'F' AND Diagnosis = 'APS';"]}, {"question_id": 1199, "answer_sql": []}, {"question_id": 1200, "answer_sql": ["SELECT (SUM(Examination.Thrombosis = 1) * 1.0) / (SUM(Examination.Thrombosis = 1) + SUM(Examination.Thrombosis = 0)) * 100 AS Thrombosis_Proportion FROM Examination JOIN Patient ON Examination.ID = Patient.ID WHERE Patient.Description IS NOT NULL AND Patient.Admission IS NOT NULL AND Examination.`Examination Date` IS NOT NULL AND Examination.`Examination Date` BETWEEN Patient.Description AND Patient.Admission AND Examination.Diagnosis LIKE '%ITP%' AND Examination.Diagnosis LIKE '%SLE%';", "SELECT (SUM(Examination.Thrombosis = 1)) / (SELECT COUNT(*) FROM Patient WHERE Patient.Diagnosis LIKE '%SLE%') * 100 as Thrombosis_Proportion FROM Examination JOIN Patient ON Examination.ID = Patient.ID WHERE Patient.Diagnosis LIKE '%SLE%';"]}, {"question_id": 1201, "answer_sql": []}, {"question_id": 1202, "answer_sql": ["SELECT COUNT(*) FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.SEX = 'M' AND Examination.`Examination Date` BETWEEN '1995-01-01' AND '1995-12-31' AND Laboratory.Date BETWEEN '1995-01-01' AND '1995-12-31' AND Examination.Diagnosis = 'BEHCET' AND Patient.Admission != '-' AND Examination.Thrombosis = 0;"]}, {"question_id": 1203, "answer_sql": ["SELECT COUNT(*) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.SEX = 'F' AND Laboratory.WBC < 3.5;", "SELECT COUNT(*) FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Patient.SEX = 'F' AND Laboratory.WBC < 3.5;"]}, {"question_id": 1204, "answer_sql": []}, {"question_id": 1205, "answer_sql": ["SELECT Patient.ID, Patient.SEX, Laboratory.UA FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.UA > 8.0 AND Patient.SEX = 'M';", "SELECT L.Date, L.UA FROM Laboratory L JOIN Patient P ON L.ID = P.ID WHERE P.ID = 57266 AND L.UA > 8.0 AND L.UA > 6.5 AND P.SEX = 'F';", "SELECT P.ID, L.UA FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE P.ID = 57266 AND L.UA > 8.0 AND P.SEX = 'M'", "SELECT P.ID, P.SEX, L.UA FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE P.ID = 57266 AND L.UA > 8.0 AND L.UA > 6.5 AND L.UA < 12.0 AND P.SEX = 'M' UNION SELECT P.ID, P.SEX, L.UA FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE P.ID = 57266 AND L.UA > 8.0 AND L.UA > 6.5 AND L.UA < 12.0 AND P.SEX = 'F';"]}, {"question_id": 1206, "answer_sql": ["SELECT Laboratory.Date FROM Laboratory JOIN Patient ON Laboratory.ID = Patient.ID WHERE Patient.ID = 48473 AND Laboratory.GOT >= 60;", "SELECT Examination.ID, Examination.`Examination Date`, Laboratory.Date FROM Examination JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Laboratory.GOT >= 60;"]}, {"question_id": 1207, "answer_sql": ["SELECT Patient.Birthday, Patient.SEX FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.`Examination Date` = '1994-01-01' AND Examination.`aCL IgG` < 60;"]}, {"question_id": 1208, "answer_sql": ["SELECT Patient.ID FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.SEX = 'M' AND Laboratory.GPT >= 60;", "SELECT Examination.ID FROM Examination JOIN Patient ON Examination.ID = Patient.ID WHERE Patient.SEX = 'M' AND Examination.`aCL IgG` >= 60;"]}, {"question_id": 1209, "answer_sql": ["SELECT Patient.ID, Patient.SEX, Patient.Birthday, Patient.Description, Patient.`First Date`, Patient.Admission, Patient.Diagnosis FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.`aCL IgG` > 60 ORDER BY Patient.Birthday ASC;"]}, {"question_id": 1210, "answer_sql": ["SELECT AVG(LDH) FROM Laboratory WHERE LDH < 500;", "SELECT AVG(LDH) FROM Laboratory WHERE LDH > 500;"]}, {"question_id": 1211, "answer_sql": []}, {"question_id": 1212, "answer_sql": ["SELECT Patient.Admission FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.ALP BETWEEN 200 AND 300 AND Patient.Admission IN ('+', '-');", "SELECT Patient.Admission FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.ALP BETWEEN 200 AND 300;", "SELECT P.Admission FROM Patient P WHERE P.ID IN ( SELECT P.ID FROM Patient P INNER JOIN Laboratory L ON P.ID = L.ID WHERE L.ALP BETWEEN 200 AND 300 )"]}, {"question_id": 1213, "answer_sql": ["SELECT Patient.ID FROM Patient WHERE Patient.Birthday = '1982-04-01'", "SELECT Patient.ID FROM Patient WHERE Patient.Birthday = '1982-04-01' AND Patient.`First Date` IS NOT NULL;", "SELECT Patient.ID FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.Birthday = '1982-04-01' AND Laboratory.ALP < 300;"]}, {"question_id": 1214, "answer_sql": []}, {"question_id": 1215, "answer_sql": []}, {"question_id": 1216, "answer_sql": ["SELECT Patient.ID, Patient.Birthday, Patient.SEX FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.SEX = 'M' AND Laboratory.ALB >= 3.5 AND Laboratory.ALB <= 5.5 ORDER BY Patient.Birthday DESC;", "SELECT Patient.ID, Patient.Birthday FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.SEX = 'M' AND (Laboratory.ALB < 3.5 OR Laboratory.ALB > 5.5) ORDER BY Patient.Birthday DESC;", "SELECT * FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.SEX = 'M' AND (Laboratory.ALB < 3.5 OR Laboratory.ALB > 5.5) ORDER BY Patient.Birthday DESC;", "SELECT * FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.SEX = 'M' AND Laboratory.ALB < 3.5 AND Laboratory.ALB > 5.5 ORDER BY Patient.Birthday DESC;"]}, {"question_id": 1217, "answer_sql": ["SELECT Patient.ID, Patient.SEX, Patient.Birthday, Patient.Description, Patient.`First Date`, Patient.Admission, Patient.Diagnosis FROM Patient WHERE Patient.Birthday BETWEEN '1982-01-01' AND '1982-12-31' AND Patient.Description = 'Albumin within normal range' AND Patient.`First Date` = ( SELECT MIN(`First Date`) FROM Patient WHERE `First Date` > '1982-01-01' );", "SELECT Patient.ID, Patient.SEX, Laboratory.ALB FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.Birthday LIKE '1982-%' AND Laboratory.ALB BETWEEN 3.5 AND 5.5;", "SELECT P.ID, P.SEX, P.Birthday, L.ALB FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE P.Birthday BETWEEN '1980-01-01' AND '1980-12-31' AND L.ALB BETWEEN 3.5 AND 5.5;"]}, {"question_id": 1218, "answer_sql": ["SELECT COUNT(*) as 'Female_Patients_Above_8_UA' FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.UA > 8.0 AND Patient.SEX = 'F';", "SELECT P.SEX, COUNT(*) as 'Female_Patients_Above_8_UA' FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.UA > 8.0 AND P.SEX = 'F' GROUP BY P.SEX;", "SELECT SUM(CASE WHEN Patient.SEX = 'F' AND Laboratory.UA > 8.0 THEN 1 ELSE 0 END) / (SELECT COUNT(*) FROM Patient WHERE Patient.SEX = 'F') * 100 AS Percentage FROM Laboratory JOIN Patient ON Laboratory.ID = Patient.ID WHERE Laboratory.UA > 8.0;"]}, {"question_id": 1219, "answer_sql": ["SELECT AVG(UA) as Average_UA FROM Laboratory JOIN Patient ON Laboratory.ID = Patient.ID WHERE UA < 6.5 AND SEX = 'F' UNION SELECT AVG(UA) as Average_UA FROM Laboratory JOIN Patient ON Laboratory.ID = Patient.ID WHERE UA < 8.0 AND SEX = 'M';", "SELECT AVG(Laboratory.UA) FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Laboratory.Date = (SELECT MAX(Date) FROM Laboratory) AND Laboratory.UA < 6.5 AND Patient.SEX = 'F';", "SELECT AVG(Laboratory.UA) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.UA < 6.5 AND Patient.SEX = 'F' OR Laboratory.UA < 8.0 AND Patient.SEX = 'M';", "SELECT AVG(Laboratory.UA) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.Date = (SELECT MAX(Examination.`Examination Date`) FROM Examination WHERE Examination.ID = Patient.ID) AND Patient.SEX IN ('M', 'F') AND Laboratory.UA < 6.5;", "SELECT AVG(Laboratory.UA) FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Laboratory.Date = (SELECT MAX(Date) FROM Laboratory) AND (Laboratory.UA < 8.0 AND Patient.SEX = 'M') OR (Laboratory.UA < 6.5 AND Patient.SEX = 'F');"]}, {"question_id": 1220, "answer_sql": ["SELECT Patient.ID, Patient.SEX, Patient.Birthday FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.UN = 29;"]}, {"question_id": 1221, "answer_sql": ["SELECT Patient.ID, Patient.SEX, Patient.Birthday FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.UN < 30 AND Patient.Diagnosis = 'RA';"]}, {"question_id": 1222, "answer_sql": ["SELECT COUNT(*) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.CRE > 1.5 AND Patient.SEX = 'M';", "SELECT COUNT(*) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.CRE >= 1.5 AND Patient.SEX = 'M';", "SELECT COUNT(*) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID JOIN Examination ON Patient.ID = Examination.ID WHERE Patient.SEX = 'M' AND Laboratory.CRE >= 1.5;"]}, {"question_id": 1223, "answer_sql": ["SELECT SUM(Sex = 'M' AND CRE >= 1.5) as MoreMaleWithNormalCRE, SUM(Sex = 'F' AND CRE >= 1.5) as MoreFemaleWithNormalCRE FROM Patient, Laboratory WHERE Sex in ('M', 'F') AND CRE >= 1.5;", "SELECT SUM(Sex = 'M' AND CRE >= 1.5) as MoreMaleWithNormalCRE, SUM(Sex = 'F' AND CRE >= 1.5) as MoreFemaleWithNormalCRE FROM Patient, Laboratory WHERE Patient.ID = Laboratory.ID;", "SELECT SUM(SEX = 'M' AND CRE >= 1.5) as Male_With_High_CRE, SUM(SEX = 'F' AND CRE >= 1.5) as Female_With_High_CRE FROM Examination, Patient, Laboratory WHERE Examination.ID = Patient.ID AND Laboratory.ID = Examination.ID;", "SELECT SUM(Sex = 'M' AND CRE >= 1.5) > SUM(Sex = 'F' AND CRE >= 1.5) as Result FROM Examination JOIN Patient ON Examination.ID = Patient.ID JOIN Laboratory ON Examination.ID = Laboratory.ID"]}, {"question_id": 1224, "answer_sql": ["SELECT ID, SEX, Birthday FROM Patient WHERE ID IN ( SELECT Patient.ID FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.`T-BIL` = ( SELECT MAX(`T-BIL`) FROM Laboratory ) );"]}, {"question_id": 1225, "answer_sql": ["SELECT Patient.SEX, COUNT(*) FROM Laboratory JOIN Patient ON Laboratory.ID = Patient.ID WHERE Laboratory.`T-BIL` >= 2.0 GROUP BY Patient.SEX;", "SELECT P.SEX, COUNT(*) FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.`T-BIL` < 2.0 GROUP BY P.SEX;"]}, {"question_id": 1226, "answer_sql": ["SELECT P.ID, MAX(L.TAT) as TAT_index FROM Patient P JOIN Laboratory L ON P.ID = L.ID GROUP BY P.ID ORDER BY MIN(P.Birthday) ASC, MAX(L.TAT) DESC LIMIT 1;", "SELECT Examination.ID, Laboratory.TAT FROM Examination JOIN Patient ON Examination.ID = Patient.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.TAT = (SELECT MAX(Laboratory.TAT) FROM Laboratory) AND Patient.Birthday = (SELECT MIN(Patient.Birthday) FROM Patient);", "SELECT Patient.ID, Laboratory.TAT2 FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.TAT = ( SELECT MAX(Laboratory.TAT) FROM Laboratory WHERE Laboratory.TG < 200 ) ORDER BY Patient.Birthday DESC LIMIT 1;"]}, {"question_id": 1227, "answer_sql": []}, {"question_id": 1228, "answer_sql": ["SELECT Examination.ID, Examination.Diagnosis FROM Examination JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Laboratory.TG > 300;", "SELECT Patient.ID, Patient.Diagnosis FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.TG > 300;", "SELECT P.ID, P.SEX, P.Birthday, P.Description, P.`First Date`, P.Admission, P.Diagnosis FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.TG > 300;"]}, {"question_id": 1229, "answer_sql": []}, {"question_id": 1230, "answer_sql": ["SELECT DISTINCT Patient.ID FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.CPK < 250 AND Laboratory.CPK IS NOT NULL;", "SELECT DISTINCT Patient.ID FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Patient.Admission = '-';", "SELECT DISTINCT Patient.ID FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Patient.Admission = '- ' AND Laboratory.CPK BETWEEN 0 AND 250;", "SELECT Patient.ID FROM Patient WHERE Patient.Admission = '-';"]}, {"question_id": 1231, "answer_sql": ["SELECT COUNT(*) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID JOIN Examination ON Patient.ID = Examination.ID WHERE Patient.Birthday BETWEEN '1936-01-01' AND '1956-12-31' AND Patient.SEX = 'M' AND Laboratory.CPK >= 250;", "SELECT COUNT(*) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.Birthday BETWEEN '1936-01-01' AND '1956-12-31' AND Patient.SEX = 'M' AND Laboratory.CPK >= 250;"]}, {"question_id": 1232, "answer_sql": []}, {"question_id": 1233, "answer_sql": ["SELECT Laboratory.ID, Laboratory.GLU FROM Laboratory JOIN Patient ON Laboratory.ID = Patient.ID JOIN Examination ON Patient.ID = Examination.ID WHERE Laboratory.Date >= '1991-01-01' AND Patient.Description >= '1991-01-01' AND Laboratory.GLU < 180;", "SELECT Patient.ID, Laboratory.GLU FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.Date >= '1991-01-01' AND Patient.Description >= '1991-01-01' AND Laboratory.GLU < 180;", "SELECT Patient.ID, Laboratory.GLU FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.Date >= '1991-01-01' AND Laboratory.GLU < 180;"]}, {"question_id": 1234, "answer_sql": ["SELECT Patient.ID, Patient.SEX, Patient.Birthday FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.WBC < 3.5 OR Laboratory.WBC > 9.0 GROUP BY Patient.SEX ORDER BY Patient.Birthday ASC;"]}, {"question_id": 1235, "answer_sql": ["SELECT P.ID, P.Birthday, P.Description, P.`First Date`, P.Admission, P.Diagnosis, L.Date, L.TG, L.CPK, L.GLU FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.RBC < 3.5 ORDER BY L.Date DESC;", "SELECT P.ID, P.Birthday, P.Description, P.`First Date`, P.Admission, P.Diagnosis, L.Date, L.TG FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.RBC < 3.5 ORDER BY P.ID;"]}, {"question_id": 1236, "answer_sql": ["SELECT Patient.ID, Patient.SEX, Patient.Birthday, Laboratory.RBC FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.SEX = 'F' AND Patient.Birthday <= '1999-12-31' AND (Laboratory.RBC < 3.5 OR Laboratory.RBC > 6.0) AND Patient.Admission = '+' ORDER BY Patient.Birthday DESC;", "SELECT Patient.ID, Patient.SEX, Patient.Birthday, Laboratory.RBC, Patient.Admission FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.SEX = 'F' AND Patient.Birthday <= '1999-12-31' AND (Laboratory.RBC < 3.5 OR Laboratory.RBC > 6.0);", "SELECT Patient.ID, Patient.SEX, Patient.Birthday, Laboratory.RBC FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.SEX = 'F' AND Patient.Birthday <= '1999-12-31' AND (Laboratory.RBC < 3.5 OR Laboratory.RBC > 6.0);"]}, {"question_id": 1237, "answer_sql": []}, {"question_id": 1238, "answer_sql": []}, {"question_id": 1239, "answer_sql": []}, {"question_id": 1240, "answer_sql": ["SELECT AVG(HCT) as Average_HCT FROM Laboratory JOIN Patient ON Laboratory.ID = Patient.ID WHERE Date LIKE '1991%' AND HCT < 29;"]}, {"question_id": 1241, "answer_sql": ["SELECT SUM(Laboratory.PLT < 100) AS 'Lower_Normal', SUM(Laboratory.PLT > 400) AS 'Higher_Normal' FROM Laboratory JOIN Patient ON Laboratory.ID = Patient.ID WHERE Laboratory.PLT IS NOT NULL;", "SELECT \n    SUBSTR(SUM(CASE WHEN PLT < 100 THEN 1 ELSE 0 END), 1) as 'Number of patients with lower than normal range', \n    SUBSTR(SUM(CASE WHEN PLT > 400 THEN 1 ELSE 0 END), 1) as 'Number of patients with higher than normal range' \nFROM \n    Patient \nJOIN \n    Laboratory ON Patient.ID = Laboratory.ID \nWHERE \n    PLT IS NOT NULL;"]}, {"question_id": 1242, "answer_sql": ["SELECT Patient.ID, Patient.SEX, Laboratory.PLT FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.Date LIKE '1984%' AND Patient.Birthday < '1980-01-01' AND Laboratory.PLT BETWEEN 100 AND 400;", "SELECT Patient.ID, Patient.SEX, Patient.Birthday, Laboratory.PLT FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.Date LIKE '1984%' AND Patient.Birthday < '1954-01-01' AND Laboratory.PLT BETWEEN 100 AND 400;", "SELECT Patient.ID, Patient.SEX, Patient.Birthday, Laboratory.PLT FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.Date LIKE '1984%' AND Patient.Birthday < '1950-01-01' AND Laboratory.PLT BETWEEN 100 AND 400;"]}, {"question_id": 1243, "answer_sql": []}, {"question_id": 1244, "answer_sql": []}, {"question_id": 1245, "answer_sql": ["SELECT COUNT(*) FROM Laboratory WHERE `T-CHO` = 1 AND `U-PRO` = 'inactivated' AND `DNA-II` = 'partial prothrom bin time' AND Laboratory.Date > '1997-01-01';"]}, {"question_id": 1246, "answer_sql": ["SELECT COUNT(DISTINCT Examination.ID) FROM Examination JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Laboratory.APTT > 45 AND Examination.Thrombosis = 3;"]}, {"question_id": 1247, "answer_sql": ["SELECT COUNT(DISTINCT Patient.ID) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID JOIN Examination ON Patient.ID = Examination.ID WHERE Patient.Sex = 'M' AND Laboratory.WBC BETWEEN 3.5 AND 9.0 AND Laboratory.FG BETWEEN 150 AND 450;"]}, {"question_id": 1248, "answer_sql": ["SELECT COUNT(DISTINCT Patient.ID) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.Birthday > '1980-01-01' AND Laboratory.FG BETWEEN 150 AND 450;"]}, {"question_id": 1249, "answer_sql": ["SELECT Patient.Diagnosis FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE `U-PRO` >= 30;"]}, {"question_id": 1250, "answer_sql": ["SELECT Examination.ID FROM Examination JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE `U-PRO` BETWEEN 0 AND 30 AND Diagnosis = 'SLE';", "SELECT Patient.ID FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE `U-PRO` BETWEEN 0 AND 30 AND Diagnosis = 'SLE';"]}, {"question_id": 1251, "answer_sql": ["SELECT COUNT(*) FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.`aCL IgG` < 900 AND Examination.Symptoms = 'abortion';"]}, {"question_id": 1252, "answer_sql": ["SELECT COUNT(*) FROM Examination JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Laboratory.IGG BETWEEN 900 AND 2000 AND Examination.Symptoms IS NOT NULL;", "SELECT COUNT(*) FROM Examination JOIN Patient ON Examination.ID = Patient.ID WHERE `Examination Date` >= '2022-01-01' AND `Examination Date` <= '2022-12-31' AND `aCL IgG` BETWEEN 900 AND 2000 AND Symptoms IS NOT NULL;"]}, {"question_id": 1253, "answer_sql": ["SELECT Examination.Diagnosis FROM Examination WHERE Examination.`aCL IgA` = ( SELECT MAX(`aCL IgA`) FROM Examination WHERE `aCL IgA` BETWEEN 80 AND 500 );"]}, {"question_id": 1254, "answer_sql": ["SELECT COUNT(*) FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.`aCL IgA` BETWEEN 80 AND 500 AND strftime('%Y', Examination.`Examination Date`) >= 1990;"]}, {"question_id": 1255, "answer_sql": ["SELECT Diagnosis, COUNT(Diagnosis) as Frequency FROM Examination WHERE `aCL IgM` NOT BETWEEN 40 AND 400 GROUP BY Diagnosis ORDER BY Frequency DESC LIMIT 1;", "SELECT Diagnosis, COUNT(Diagnosis) as Frequency FROM Examination WHERE `aCL IgM` BETWEEN 40 AND 400 GROUP BY Diagnosis ORDER BY Frequency DESC LIMIT 1;", "SELECT Examination.Diagnosis, COUNT(Examination.Diagnosis) as Diagnosis_Count FROM Examination JOIN Patient ON Examination.ID = Patient.ID WHERE Examination.`aCL IgM` NOT BETWEEN 40 AND 400 GROUP BY Examination.Diagnosis ORDER BY Diagnosis_Count DESC LIMIT 1;", "SELECT Examination.Diagnosis, COUNT(Examination.ID) as Count FROM Examination JOIN Patient ON Examination.ID = Patient.ID WHERE Examination.`aCL IgM` BETWEEN 40 AND 400 GROUP BY Examination.Diagnosis ORDER BY Count DESC LIMIT 1;"]}, {"question_id": 1256, "answer_sql": ["SELECT COUNT(*) FROM Patient LEFT JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.Date IS NULL AND Laboratory.CRP LIKE '+%' AND Patient.Description IS NULL;", "SELECT COUNT(*) FROM Patient LEFT JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.Date IS NULL AND Laboratory.CRP LIKE '+%' OR Laboratory.CRP LIKE '-%' OR Laboratory.CRP < 1.0;", "SELECT COUNT(*) FROM Laboratory JOIN Patient ON Laboratory.ID = Patient.ID WHERE Laboratory.CRP LIKE '+' OR Laboratory.CRP LIKE '-' OR Laboratory.CRP < 1.0 AND Patient.Description IS NULL;"]}, {"question_id": 1257, "answer_sql": ["SELECT COUNT(*) FROM Patient WHERE ID NOT IN (SELECT Patient.ID FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.CRP NOT IN ('+-', '-') AND Laboratory.CRP >= 1.0) AND SUBSTR(Birthday, 6, 2) < 18;"]}, {"question_id": 1258, "answer_sql": []}, {"question_id": 1259, "answer_sql": []}, {"question_id": 1260, "answer_sql": []}, {"question_id": 1261, "answer_sql": ["SELECT COUNT(*) FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Laboratory.RF < 20 AND Examination.Thrombosis = 0;"]}, {"question_id": 1262, "answer_sql": []}, {"question_id": 1263, "answer_sql": ["SELECT Patient.ID FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.`aCL IgA` = ( SELECT MAX(`aCL IgA`) FROM Examination WHERE Examination.`aCL IgG` < 29 AND Examination.`aCL IgG` > 52 )"]}, {"question_id": 1264, "answer_sql": ["SELECT COUNT(*) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID JOIN Examination ON Patient.ID = Examination.ID WHERE Laboratory.C4 > 10;", "SELECT COUNT(*) FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Examination.Thrombosis = 1 AND Laboratory.C4 > 10;"]}, {"question_id": 1265, "answer_sql": ["SELECT COUNT(DISTINCT Patient.ID) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.RNP = '-+' AND Laboratory.APTT = '0+' AND Patient.Admission = '+';"]}, {"question_id": 1266, "answer_sql": []}, {"question_id": 1267, "answer_sql": ["SELECT COUNT(*) FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE SM = 'negative' AND Thrombosis = '1';", "SELECT Patient.ID, Patient.Diagnosis, Laboratory.TAT, Examination.Thrombosis FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID JOIN Examination ON Patient.ID = Examination.ID WHERE Laboratory.SM = 'negative' AND Laboratory.SM = '0' AND Laboratory.SM = '1' AND Examination.Thrombosis = '1';"]}, {"question_id": 1268, "answer_sql": ["SELECT Patient.ID FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.SM NOT IN ('-', '+-') GROUP BY Patient.ID ORDER BY Patient.Birthday LIMIT 3;", "SELECT Patient.ID FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.SM NOT IN ('-', '+-') ORDER BY Patient.Birthday DESC LIMIT 3;", "SELECT Patient.ID FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.SM NOT IN ('-', '+-') AND Laboratory.SM IS NOT NULL ORDER BY Patient.Birthday DESC LIMIT 3;", "SELECT Examination.ID FROM Examination JOIN Patient ON Examination.ID = Patient.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.SM NOT IN ('-', '+-') AND Patient.Birthday = ( SELECT MIN(Birthday) FROM Patient WHERE Patient.Birthday > Laboratory.Date ) ORDER BY Laboratory.Date DESC;"]}, {"question_id": 1269, "answer_sql": ["SELECT Examination.ID FROM Examination JOIN Patient ON Examination.ID = Patient.ID WHERE Examination.`Examination Date` >= '1997-01-01' AND Patient.Diagnosis IN ('-', '+-')"]}, {"question_id": 1270, "answer_sql": ["SELECT COUNT(*) FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE SC170 = 'normal' AND Sex = 'M' AND Symptoms = 'vertigo';"]}, {"question_id": 1271, "answer_sql": []}, {"question_id": 1272, "answer_sql": []}, {"question_id": 1273, "answer_sql": ["SELECT COUNT(DISTINCT Examination.ID) FROM Examination JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Laboratory.SSA IN ('-', '0') AND Examination.Diagnosis = 'SLE';"]}, {"question_id": 1274, "answer_sql": ["SELECT COUNT(DISTINCT Patient.ID) FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.`aCL IgG` = '- ' AND Examination.`aCL IgM` = '- ' AND Examination.`aCL IgA` = '-' AND Examination.Symptoms IS NOT NULL;"]}, {"question_id": 1275, "answer_sql": ["SELECT COUNT(*) FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE P.Sex = 'M' AND L.CENTROMEA IN ('-', '+-') AND L.SSB IN ('-', '+-')"]}, {"question_id": 1276, "answer_sql": ["SELECT P.Diagnosis FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.DNA >= 8", "SELECT P.Diagnosis FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.`DNA-II` >= 8"]}, {"question_id": 1277, "answer_sql": ["SELECT COUNT(DISTINCT Patient.ID) FROM Patient WHERE Patient.Description IS NULL AND Patient.`First Date` < '1990-01-01' AND Patient.Diagnosis != 'normal';", "SELECT COUNT(DISTINCT Patient.ID) FROM Patient WHERE Patient.Description IS NULL AND Patient.Diagnosis != 'normal anti-DNA level';", "SELECT COUNT(*) FROM Patient LEFT JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.DNA < 8 AND Patient.Description IS NULL;", "SELECT COUNT(DISTINCT Patient.ID) FROM Patient WHERE Patient.Description IS NULL AND Patient.`First Date` IS NOT NULL AND Patient.Diagnosis IS NOT NULL AND Patient.Admission IS NOT NULL;", "SELECT COUNT(DISTINCT Patient.ID) FROM Patient WHERE Patient.Description IS NULL AND Patient.`First Date` < '1999-01-01' AND Patient.Diagnosis = 'normal anti-DNA level';"]}, {"question_id": 1278, "answer_sql": ["SELECT COUNT(*) FROM Laboratory JOIN Patient ON Laboratory.ID = Patient.ID WHERE `DNA-II` < 8 AND Admission = '+'"]}, {"question_id": 1279, "answer_sql": []}, {"question_id": 1280, "answer_sql": ["SELECT COUNT(*) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.Sex = 'M' AND Laboratory.GOT < 60;"]}, {"question_id": 1281, "answer_sql": ["SELECT MAX(Patient.Birthday) as 'Youngest Birth Date' FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.GOT >= 60;", "SELECT P.Birthday FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.GOT >= 60 ORDER BY P.Birthday ASC LIMIT 1;"]}, {"question_id": 1282, "answer_sql": ["SELECT Patient.Birthday FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.GPT < 60 ORDER BY Laboratory.GPT DESC LIMIT 3;"]}, {"question_id": 1283, "answer_sql": ["SELECT COUNT(*) FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Laboratory.GOT < 60 AND Patient.Sex = 'M';", "SELECT COUNT(*) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.GOT < 60 AND Patient.Sex = 'M';"]}, {"question_id": 1284, "answer_sql": ["SELECT MIN(Patient.`First Date`) as First_Date FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.LDH < 500 ORDER BY First_Date ASC LIMIT 1;", "SELECT MIN(`Laboratory`.`Date`) as `First Date` FROM `Laboratory` WHERE `Laboratory`.`LDH` < 500;"]}, {"question_id": 1285, "answer_sql": ["SELECT MAX('First Date') as Latest_Date, LDH as Abnormal_LDH FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE LDH >= 500;"]}, {"question_id": 1286, "answer_sql": ["SELECT COUNT(*) FROM Laboratory JOIN Patient ON Laboratory.ID = Patient.ID WHERE Laboratory.ALP >= 300 AND Patient.Admission = '+';"]}, {"question_id": 1287, "answer_sql": ["SELECT COUNT(*) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.ALP < 300;", "SELECT COUNT(*) FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.ALP < 300 AND P.Admission = '-';", "SELECT Patient.ID FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.ALP < 300 AND Patient.Admission = '-';", "SELECT COUNT(*) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.Admission = '- ' AND Laboratory.ALP < 300;"]}, {"question_id": 1288, "answer_sql": ["SELECT Patient.Diagnosis FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.TP < 6.0;", "SELECT Examination.Diagnosis FROM Examination JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Laboratory.TP < 6.0;"]}, {"question_id": 1289, "answer_sql": ["SELECT COUNT(*) FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Examination.Diagnosis = 'SJS' AND Laboratory.TP BETWEEN 6.0 AND 8.5;", "SELECT COUNT(*) FROM Laboratory JOIN Patient ON Laboratory.ID = Patient.ID WHERE Patient.Diagnosis = 'SJS' AND Laboratory.TP BETWEEN 6.0 AND 8.5;"]}, {"question_id": 1290, "answer_sql": ["SELECT Examination.`Examination Date` FROM Examination WHERE Examination.`aCL IgG` = ( SELECT MAX(`aCL IgG`) FROM Examination WHERE `aCL IgG` BETWEEN 3.5 AND 5.5 ) AND Examination.`aCL IgM` = ( SELECT MAX(`aCL IgM`) FROM Examination WHERE `aCL IgM` BETWEEN 3.5 AND 5.5 ) AND Examination.`aCL IgA` = ( SELECT MAX(`aCL IgA`) FROM Examination WHERE `aCL IgA` BETWEEN 3.5 AND 5.5 );"]}, {"question_id": 1291, "answer_sql": ["SELECT COUNT(*) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.SEX = 'M' AND Laboratory.ALB > 3.5 AND Laboratory.ALB < 5.5 AND Laboratory.TP BETWEEN 6.0 AND 8.5;"]}, {"question_id": 1292, "answer_sql": []}, {"question_id": 1293, "answer_sql": ["SELECT MAX(Examination.ANA) as ANA_max FROM Examination JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Laboratory.CRE < 1.5", "SELECT MAX(Examination.`aCL IgG`) as Highest_Anti_Nucleus_Ab_Level FROM Examination JOIN Patient ON Examination.ID = Patient.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.CRE < 1.5;"]}, {"question_id": 1294, "answer_sql": []}, {"question_id": 1295, "answer_sql": ["SELECT COUNT(*) FROM Laboratory JOIN Examination ON Laboratory.ID = Examination.ID WHERE `T-BIL` >= 2.0 AND ANA LIKE '%P%';"]}, {"question_id": 1296, "answer_sql": ["SELECT Laboratory.TAT FROM Laboratory WHERE Laboratory.TAT = ( SELECT MAX(`T-BIL`) FROM Laboratory WHERE `T-BIL` < 2.0 );"]}, {"question_id": 1297, "answer_sql": []}, {"question_id": 1298, "answer_sql": []}, {"question_id": 1299, "answer_sql": ["SELECT COUNT(*) FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE TG < 200 AND Symptoms IS NOT NULL;"]}, {"question_id": 1300, "answer_sql": ["SELECT E.Diagnosis FROM Examination E JOIN Patient P ON E.ID = P.ID JOIN Laboratory L ON E.ID = L.ID WHERE L.TG > 200 GROUP BY E.Diagnosis ORDER BY MAX(L.TG) DESC LIMIT 1;"]}, {"question_id": 1301, "answer_sql": ["SELECT Examination.ID FROM Examination JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Thrombosis = 0 AND CPK < 250;"]}, {"question_id": 1302, "answer_sql": ["SELECT COUNT(*) FROM Examination JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Examination.Diagnosis = 'normal' AND Laboratory.CPK > 250 AND (Examination.KCT = '+' OR Examination.RVVT = '+' OR Examination.LAC = '+');", "SELECT COUNT(*) FROM Examination JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Laboratory.CPK < 250 AND (Examination.KCT = '+' OR Examination.RVVT = '+' OR Examination.LAC = '+')"]}, {"question_id": 1303, "answer_sql": ["SELECT MIN(Laboratory.Date) as Oldest_Birthday FROM Laboratory JOIN Patient ON Laboratory.ID = Patient.ID WHERE Laboratory.GLU > 180;", "SELECT MIN(Birthday) as Oldest_Birthday FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.GLU > 180;"]}, {"question_id": 1304, "answer_sql": ["SELECT COUNT(*) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID JOIN Examination ON Patient.ID = Examination.ID WHERE Laboratory.GLU < 180 AND Examination.Thrombosis = 0;"]}, {"question_id": 1305, "answer_sql": ["SELECT COUNT(*) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.WBC BETWEEN 3.5 AND 9.0 AND Patient.Admission = '+'", "SELECT COUNT(*) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.Admission = '+';"]}, {"question_id": 1306, "answer_sql": ["SELECT COUNT(*) FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.Diagnosis = 'SLE' AND Laboratory.WBC BETWEEN 3.5 AND 9.0;", "SELECT Patient.ID, Patient.SEX, Patient.Birthday, Patient.Description, Patient.`First Date`, Examination.ID, Examination.`Examination Date`, Examination.`aCL IgG`, Examination.`aCL IgM`, Examination.ANA, Examination.`ANA Pattern`, Examination.`aCL IgA`, Examination.Diagnosis, Examination.KCT, Examination.RVVT, Examination.LAC, Examination.Symptoms, Examination.Thrombosis FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.Diagnosis = 'SLE' AND Examination.`aCL IgG` BETWEEN 3.5 AND 9.0;", "SELECT Patient.ID FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Examination.Diagnosis = 'SLE' AND Laboratory.WBC BETWEEN 3.5 AND 9.0;"]}, {"question_id": 1307, "answer_sql": ["SELECT Patient.ID FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.RBC BETWEEN 3.5 AND 6.0 AND Patient.Admission = '-';", "SELECT Patient.ID FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.RBC BETWEEN 3.5 AND 6.0 AND Patient.Admission = '-';"]}, {"question_id": 1308, "answer_sql": ["SELECT COUNT(*) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.PLT > 100 AND Laboratory.PLT < 400 AND Patient.Diagnosis IS NOT NULL;", "SELECT COUNT(*) FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Patient.ID IN ( SELECT Patient.ID FROM Patient WHERE PLT > 100 AND PLT < 400 ) AND Examination.Diagnosis IS NOT NULL;"]}, {"question_id": 1309, "answer_sql": ["SELECT P.ID, P.Diagnosis, L.PLT FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE P.Diagnosis = 'MCTD' AND L.PLT > 100 AND L.PLT < 400;", "SELECT Patient.ID, Patient.Diagnosis, Laboratory.PLT FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.PLT > 100 AND Laboratory.PLT < 400 AND Patient.Diagnosis = 'MCTD';", "SELECT Patient.ID, Patient.SEX, Patient.Birthday, Patient.Description, Patient.Admission, Patient.Diagnosis, Laboratory.PLT FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.PLT > 100 AND Laboratory.PLT < 400 AND Patient.Diagnosis = 'MCTD';"]}, {"question_id": 1310, "answer_sql": ["SELECT AVG(PT) as Average_PT FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Sex = 'M' AND PT < 14;"]}, {"question_id": 1311, "answer_sql": ["SELECT COUNT(*) FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Thrombosis = 2 AND PT < 14;", "SELECT Patient.ID, COUNT(*) as Number_of_Patients FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Examination.Thrombosis = 2 or Examination.Thrombosis = 1 AND Laboratory.PT < 14 GROUP BY Patient.ID;"]}, {"question_id": 1312, "answer_sql": ["SELECT major.major_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.member_id = 'member_id_Angela Sanders';"]}, {"question_id": 1313, "answer_sql": ["SELECT COUNT(*) FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.college = 'Engineering' AND member.zip = (SELECT zip_code.zip_code FROM zip_code WHERE zip_code.type = 'City')"]}, {"question_id": 1314, "answer_sql": ["SELECT m.first_name || ' ' || m.last_name AS full_name FROM member m JOIN major j ON m.link_to_major = j.major_id WHERE j.department = 'Art and Design';"]}, {"question_id": 1315, "answer_sql": []}, {"question_id": 1316, "answer_sql": ["SELECT member.phone FROM member JOIN attendance ON member.member_id = attendance.link_to_member JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer';"]}, {"question_id": 1317, "answer_sql": ["SELECT COUNT(*) FROM member JOIN attendance ON member.member_id = attendance.link_to_member JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer' AND member.t_shirt_size = 'Medium';"]}, {"question_id": 1318, "answer_sql": ["SELECT event_name FROM event JOIN attendance ON event.event_id = attendance.link_to_event GROUP BY event.event_name ORDER BY COUNT(attendance.link_to_event) DESC LIMIT 1;", "SELECT event.event_name, COUNT(attendance.link_to_event) as attendance_count FROM event JOIN attendance ON event.event_id = attendance.link_to_event GROUP BY event.event_name ORDER BY attendance_count DESC LIMIT 1;", "SELECT event.event_name FROM event JOIN attendance ON event.event_id = attendance.link_to_event WHERE attendance.link_to_member IN ( SELECT member_id FROM member WHERE link_to_major IN ( SELECT major_id FROM major WHERE college = 'Student_Club' ) ) GROUP BY event.event_name ORDER BY COUNT(attendance.link_to_event) DESC LIMIT 1;", "SELECT event.event_name, event.event_date, event.type, event.notes, event.location, event.status FROM event JOIN attendance ON event.event_id = attendance.link_to_event JOIN member ON attendance.link_to_member = member.member_id GROUP BY event.event_name, event.event_date, event.type, event.notes, event.location, event.status ORDER BY COUNT(attendance.link_to_event) DESC LIMIT 1;"]}, {"question_id": 1319, "answer_sql": ["SELECT major.college FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Vice President' LIMIT 1;", "SELECT major.major_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Vice President' LIMIT 1;", "SELECT major.college FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Vice President' AND member.member_id IN ( SELECT link_to_member FROM attendance WHERE link_to_event = 'Student_Club' )"]}, {"question_id": 1320, "answer_sql": ["SELECT event.event_name FROM event JOIN attendance ON attendance.link_to_event = event.event_id JOIN member ON member.member_id = attendance.link_to_member WHERE member.last_name = 'Mclean' AND member.first_name = 'Maya';", "SELECT event_name FROM attendance JOIN event ON attendance.link_to_event = event.event_id WHERE link_to_member = 'Maya Mclean';"]}, {"question_id": 1321, "answer_sql": ["SELECT COUNT(*) FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN event ON attendance.link_to_event = event.event_id WHERE member.first_name = 'Sacha' AND member.last_name = 'Harrison' AND event.event_date LIKE '%2019%';"]}, {"question_id": 1322, "answer_sql": ["SELECT event.event_id, event.event_name FROM event JOIN attendance ON event.event_id = attendance.link_to_event JOIN member ON attendance.link_to_member = member.member_id WHERE event.type = 'Meeting' GROUP BY event.event_id, event.event_name HAVING COUNT(member.member_id) > 10;", "SELECT COUNT(*) FROM event WHERE type = 'Meeting' AND (SELECT COUNT(*) FROM attendance WHERE link_to_event = event.event_id) > 10;", "SELECT e.event_name, e.type FROM event e JOIN attendance a ON e.event_id = a.link_to_event JOIN member m ON a.link_to_member = m.member_id WHERE m.member_id IN ( SELECT link_to_member FROM attendance GROUP BY link_to_member HAVING COUNT(link_to_member) > 10 ) AND e.type = 'Meeting'", "SELECT COUNT(*) FROM event JOIN attendance ON event.event_id = attendance.link_to_event JOIN member ON attendance.link_to_member = member.member_id WHERE event.type = 'Meeting' GROUP BY event.event_id HAVING COUNT(member.member_id) > 10;", "SELECT COUNT(*) FROM event WHERE type = 'Meeting' AND status = 'Attended' AND (SELECT COUNT(*) FROM attendance WHERE link_to_event = event.event_id) > 10;"]}, {"question_id": 1323, "answer_sql": ["SELECT event_name FROM event WHERE (SELECT COUNT(link_to_event) FROM attendance WHERE link_to_event = event.event_id) > 20;"]}, {"question_id": 1324, "answer_sql": []}, {"question_id": 1325, "answer_sql": ["SELECT MAX(cost) FROM expense WHERE link_to_budget IN (SELECT budget_id FROM budget WHERE category = 'event');"]}, {"question_id": 1326, "answer_sql": ["SELECT COUNT(*) FROM member JOIN major ON member.link_to_major = major.major_id WHERE major_name = 'Environmental Engineering';", "SELECT COUNT(*) FROM member WHERE link_to_major = 'Environmental Engineering';"]}, {"question_id": 1327, "answer_sql": ["SELECT first_name || ' ' || last_name AS full_name FROM member JOIN attendance ON member.member_id = attendance.link_to_member JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Laugh Out Loud';", "SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM member JOIN attendance ON member.member_id = attendance.link_to_member WHERE attendance.link_to_event = 'Laugh Out Loud';"]}, {"question_id": 1328, "answer_sql": ["SELECT last_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE major_name = 'Law and Constitutional Studies' ORDER BY last_name;", "SELECT member.last_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Law and Constitutional Studies';", "SELECT last_name FROM member WHERE link_to_major = 'Law and Constitutional Studies';"]}, {"question_id": 1329, "answer_sql": ["SELECT county FROM zip_code WHERE short_state = 'TX' AND zip_code = 75001;", "SELECT zip_code.county FROM member JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.last_name = 'Sherri' AND member.first_name = 'Sherri';"]}, {"question_id": 1330, "answer_sql": ["SELECT college FROM major WHERE major_id = (SELECT link_to_major FROM member WHERE first_name = 'Tyler' AND last_name = 'Hewitt');", "SELECT college FROM major WHERE major_name = 'Tyler Hewitt' AND department = 'Computer Science';"]}, {"question_id": 1331, "answer_sql": ["SELECT income.amount FROM income JOIN member ON income.link_to_member = member.member_id WHERE member.position = 'Vice President';", "SELECT amount FROM income WHERE source = 'Vice President' AND income_id IN (SELECT link_to_member FROM member WHERE position = 'Vice President');"]}, {"question_id": 1332, "answer_sql": ["SELECT e.event_name, b.category, b.spent, b.amount FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE e.event_name = 'September Meeting' AND b.category = 'Food';", "SELECT budget.spent FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'September Meeting' AND budget.category = 'Food';", "SELECT SUM(budget.amount) as total_spent FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'September Meeting' AND budget.category = 'Food';", "SELECT SUM(budget.remaining) FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'September Meeting' AND budget.category = 'Food';", "SELECT budget.amount FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE event.type = 'Food' AND event.event_name = 'September Meeting';"]}, {"question_id": 1333, "answer_sql": ["SELECT zip_code.city, zip_code.state FROM member JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.position = 'President';"]}, {"question_id": 1334, "answer_sql": ["SELECT member.first_name || ' ' || member.last_name AS full_name FROM member JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.state = 'Illinois';", "SELECT member.first_name, member.last_name FROM member JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.state = 'Illinois';", "SELECT CONCAT(first_name, ' ', last_name) as full_name FROM member JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.state = 'IL';"]}, {"question_id": 1335, "answer_sql": ["SELECT e.event_name, b.category, b.spent, b.amount FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE e.event_name = 'September Meeting' AND b.category = 'Advertisement';", "SELECT SUM(cost) FROM expense WHERE expense_description = 'Advertisement' AND expense_date LIKE '%09%';", "SELECT budget.amount FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE event.type = 'Advertisement' AND event.event_name = 'September Meeting';"]}, {"question_id": 1336, "answer_sql": ["SELECT major.department FROM major JOIN member ON major.major_id = member .link_to_major WHERE member .first_name = 'Pierce' AND member .last_name = 'Guidi';"]}, {"question_id": 1337, "answer_sql": ["SELECT SUM(budget.amount) FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'October Speaker';", "SELECT SUM(amount) as total_budgeted_amount FROM budget WHERE event_status = 'October Speaker';"]}, {"question_id": 1338, "answer_sql": ["SELECT COUNT(*) FROM expense WHERE expense_date = '2019-10-08' AND approved = True;", "SELECT e.expense_description, e.expense_date, e.approved FROM expense e JOIN budget b ON e.link_to_budget = b.budget_id JOIN event ee ON b.link_to_event = ee.event_id WHERE ee.event_name = 'October Meeting' AND ee.event_date = '2019-10-08' AND e.approved = True;"]}, {"question_id": 1339, "answer_sql": ["SELECT AVG(expense.cost) as average_cost FROM expense JOIN member ON expense.link_to_member = member.member_id JOIN event ON expense.link_to_budget = event.event_id WHERE expense.expense_date BETWEEN '2022-09-01' AND '2022-10-31' AND member.first_name = 'Elijah' AND member.last_name = 'Allen';", "SELECT e.expense_date, e.cost, i.amount, b.event_status FROM expense e JOIN income i ON e.link_to_member = i.link_to_member JOIN event ee ON e.link_to_budget = ee.event_id JOIN budget b ON e.link_to_budget = b.budget_id WHERE e.expense_date BETWEEN '2022-09-01' AND '2022-10-31' AND ee.event_name = 'Elijah Allen' AND b.event_status = 'approved' GROUP BY e.expense_date, e.cost, i.amount, b.event_status HAVING SUM(e.cost) + SUM(i.amount) > 0"]}, {"question_id": 1340, "answer_sql": ["SELECT SUM(spent.remaining) as total_spent FROM ( SELECT b.category, b.spent, b.remaining, b.amount, e.expense_description, e.cost, e.approved, e.link_to_member, e.link_to_budget FROM budget b JOIN expense e ON b.budget_id = e.link_to_budget WHERE b.event_status = 'approved' AND e.approved = 'yes' AND e.expense_description = 'Student Club' UNION SELECT b.category, b.spent, b.remaining, b.amount, '', '', '', '', '' FROM budget b WHERE b.event_status = 'approved' AND b.budget_id NOT IN (SELECT link_to_budget FROM expense WHERE expense_description = 'Student Club') ) spent"]}, {"question_id": 1341, "answer_sql": ["SELECT location FROM event WHERE event_name = 'Spring Budget Review';"]}, {"question_id": 1342, "answer_sql": ["SELECT budget.amount FROM budget WHERE budget.category = 'Poster' AND budget.event_status = 'Approved' AND budget.link_to_event = '2019-09-04';"]}, {"question_id": 1343, "answer_sql": ["SELECT MAX(budget.amount) as biggest_budget, budget.category, budget.remaining FROM budget WHERE budget.category = 'Food' GROUP BY budget.category, budget.remaining ORDER BY budget.remaining DESC LIMIT 1;", "SELECT MAX(budget.amount) as biggest_budget, budget.category, budget.remaining FROM budget WHERE budget.category = 'Food'", "SELECT remaining FROM budget WHERE category = 'Food';", "SELECT remaining FROM budget WHERE category = 'Food' ORDER BY remaining DESC LIMIT 1;", "SELECT MAX(amount) as biggest_budget, remaining FROM budget WHERE category = 'Food';"]}, {"question_id": 1344, "answer_sql": ["SELECT notes FROM income WHERE date_received = '2019-09-14' AND source = 'Fundraising';", "SELECT event.notes FROM event JOIN (SELECT link_to_event, link_to_member FROM attendance WHERE link_to_member = 'member_id_from_evidence' AND link_to_event = 'event_id_from_evidence') AS attendance_table ON attendance_table.link_to_event = event.event_id WHERE event.event_date = '2019-09-14' AND event.type = 'Fundraising';"]}, {"question_id": 1345, "answer_sql": ["SELECT COUNT(*) FROM major WHERE college = 'College of Humanities and Social Sciences';", "SELECT COUNT(*) FROM major AS m JOIN major AS m2 ON m.college = m2.college WHERE m.college = 'College of Humanities and Social Sciences';", "SELECT COUNT(*) FROM major WHERE college = 'College of Humanities and Social Sciences' AND department = 'Mathematics';"]}, {"question_id": 1346, "answer_sql": ["SELECT member.phone FROM member WHERE member.first_name = 'Carlo' AND member.last_name = 'Jacobs';"]}, {"question_id": 1347, "answer_sql": ["SELECT county FROM zip_code WHERE city = 'Adela O''Gallagher';"]}, {"question_id": 1348, "answer_sql": ["SELECT COUNT(*) FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'November Meeting' AND budget.remaining < 0;", "SELECT COUNT(*) FROM budget WHERE event_status = 'Exceeded' AND link_to_event = 'November Meeting';"]}, {"question_id": 1349, "answer_sql": []}, {"question_id": 1350, "answer_sql": []}, {"question_id": 1351, "answer_sql": ["SELECT major_name FROM major WHERE major_id = (SELECT link_to_major FROM member WHERE first_name = 'Brent' AND last_name = 'Thomason');", "SELECT major_name FROM major WHERE major_id = (SELECT link_to_major FROM member WHERE member_id = 'Brent Thomason');"]}, {"question_id": 1352, "answer_sql": ["SELECT COUNT(*) FROM member WHERE link_to_major = 'Human Development and Family Studies' AND t_shirt_size = 'Large';"]}, {"question_id": 1353, "answer_sql": ["SELECT zip_code.type FROM zip_code JOIN member ON zip_code.zip_code = member.zip WHERE member.first_name = 'Christof' AND member.last_name = 'Nielson';", "SELECT zip_code.type FROM member JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.last_name = 'Nielson' AND member.member_id = 'Christof Nielson';"]}, {"question_id": 1354, "answer_sql": ["SELECT major.major_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Vice President';"]}, {"question_id": 1355, "answer_sql": ["SELECT zip_code.state FROM member JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.member_id = 'Sacha Harrison';"]}, {"question_id": 1356, "answer_sql": ["SELECT major.department FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'President' LIMIT 1;", "SELECT major_name FROM major WHERE major_id = ( SELECT link_to_major FROM member WHERE position = 'President' );"]}, {"question_id": 1357, "answer_sql": ["SELECT date_received FROM income WHERE source = 'Dues' AND link_to_member = (SELECT member_id FROM member WHERE first_name = 'Connor' AND last_name = 'Hilton');", "SELECT date_received FROM income WHERE source = 'Dues'", "SELECT date_received FROM income WHERE source = 'Dues' AND income_id IN (SELECT income_id FROM income WHERE link_to_member = 'Connor Hilton');"]}, {"question_id": 1358, "answer_sql": ["SELECT member.first_name, member.last_name FROM member JOIN income ON member.member_id = income.link_to_member WHERE income.source = 'Dues' AND income.date_received = (SELECT MIN(date_received) FROM income WHERE source = 'Dues') LIMIT 1;", "SELECT first_name, last_name FROM member WHERE email = (SELECT member_id FROM income WHERE source = 'Dues' ORDER BY date_received ASC LIMIT 1);"]}, {"question_id": 1359, "answer_sql": []}, {"question_id": 1360, "answer_sql": []}, {"question_id": 1361, "answer_sql": ["SELECT SUM(expense.cost) as total_cost_of_pizzas FROM expense JOIN budget ON expense.link_to_budget = budget.budget_id JOIN event ON budget.link_to_event = event.event_id WHERE expense.expense_description = 'Pizza';"]}, {"question_id": 1362, "answer_sql": ["SELECT COUNT(DISTINCT city) FROM zip_code WHERE state = 'Virginia';", "SELECT COUNT(*) FROM zip_code WHERE county = 'Orange County' AND state = 'Virginia';", "SELECT COUNT(*) FROM zip_code WHERE county = 'Orange' AND state = 'Virginia';"]}, {"question_id": 1363, "answer_sql": ["SELECT DISTINCT department FROM major WHERE college='College of Humanities and Social Sciences';", "SELECT department FROM major WHERE college = 'College of Humanities and Social Sciences';"]}, {"question_id": 1364, "answer_sql": ["SELECT county, city, state FROM zip_code WHERE short_state = 'TX' AND zip_code = '75001';", "SELECT county, city FROM zip_code WHERE zip_code = (SELECT zip FROM member WHERE email = 'amyfirth@studentclub.com');"]}, {"question_id": 1365, "answer_sql": ["SELECT e.expense_description, b.amount, b.remaining FROM expense e JOIN budget b ON e.link_to_budget = b.budget_id WHERE b.remaining = (SELECT MIN(remaining) FROM budget)", "SELECT expense.expense_description FROM budget JOIN expense ON budget.budget_id = expense.link_to_budget WHERE budget.remaining = ( SELECT MIN(remaining) FROM budget );", "SELECT ex.expense_description, b.amount, b.remaining FROM budget b JOIN expense ex ON b.link_to_event = ex.link_to_budget WHERE b.remaining = ( SELECT MIN(remaining) FROM budget );"]}, {"question_id": 1366, "answer_sql": ["SELECT member.first_name, member.last_name FROM member JOIN attendance ON member.member_id = attendance.link_to_member WHERE attendance.link_to_event = 'October Meeting';", "SELECT member.member_id, member.first_name, member.last_name FROM member JOIN attendance ON member.member_id = attendance.link_to_member JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'October Meeting';", "SELECT member.first_name, member.last_name FROM member JOIN attendance ON member.member_id = attendance.link_to_member JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'October Meeting';", "SELECT m.member_id, m.first_name, m.last_name, m.email, m.position, m.t_shirt_size, m.phone, m.zip, m.link_to_major, m.first_name || ' ' || m.last_name AS full_name FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE e.event_name = 'October Meeting';", "SELECT member.member_id, member.first_name, member.last_name, member.email, member.position, member.t_shirt_size, member.phone, member.zip, member.link_to_major, member.first_name, member.last_name, member.email, member.position, member.t_shirt_size, member.phone, member.zip, member.link_to_major FROM member JOIN attendance ON member.member_id = attendance.link_to_member JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'October Meeting';"]}, {"question_id": 1367, "answer_sql": ["SELECT major.college \nFROM member \nJOIN major ON member.link_to_major = major.major_id \nGROUP BY major.college \nORDER BY COUNT(member.member_id) DESC \nLIMIT 1;", "SELECT major.college FROM major GROUP BY major.college ORDER BY COUNT(major.college) DESC LIMIT 1;"]}, {"question_id": 1368, "answer_sql": ["SELECT major.major_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.phone = '809-555-3360';"]}, {"question_id": 1369, "answer_sql": ["SELECT event_name, MAX(amount) FROM event JOIN budget ON event.event_id = budget.link_to_event GROUP BY event_name ORDER BY MAX(amount) DESC LIMIT 1;", "SELECT event.event_name FROM event JOIN budget ON event.event_id = budget.link_to_event WHERE budget.amount = (SELECT MAX(amount) FROM budget);"]}, {"question_id": 1370, "answer_sql": ["SELECT e.expense_description, b.amount FROM expense e JOIN budget b ON e.link_to_budget = b.budget_id JOIN member m ON e.link_to_member = m.member_id WHERE m.position = 'Vice President'", "SELECT expense.expense_description, expense.cost, expense.expense_date FROM expense JOIN member ON expense.link_to_member = member.member_id WHERE member.position = 'Vice President';", "SELECT e.expense_description, e.expense_date, e.cost FROM expense e JOIN member m ON e.link_to_member = m.member_id WHERE m.position = 'Vice President' AND e.approved = 'Approved';"]}, {"question_id": 1371, "answer_sql": ["SELECT COUNT(*) FROM attendance JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer';"]}, {"question_id": 1372, "answer_sql": ["SELECT date_received FROM income WHERE link_to_member = (SELECT member_id FROM member WHERE first_name = 'Casey' AND last_name = 'Mason');", "SELECT date_received FROM income WHERE link_to_member = 'Casey Mason';"]}, {"question_id": 1373, "answer_sql": []}, {"question_id": 1374, "answer_sql": ["SELECT COUNT(DISTINCT event.event_id) FROM member JOIN attendance ON member.member_id = attendance.link_to_member JOIN event ON attendance.link_to_event = event.event_id WHERE member.phone = '954-555-6240';", "SELECT COUNT(*) FROM attendance WHERE link_to_member = '954-555-6240';"]}, {"question_id": 1375, "answer_sql": ["SELECT member.first_name, member.last_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'School of Applied Sciences, Technology and Education';", "SELECT member.first_name, member.last_name, major.major_name, major.major_id FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'School of Applied Sciences, Technology and Education';", "SELECT member.first_name, member.last_name, major.major_name, major.major_id, member.first_name, major.department FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'School of Applied Sciences, Technology and Education';", "SELECT first_name, last_name FROM member WHERE link_to_major = 'School of Applied Sciences, Technology and Education';"]}, {"question_id": 1376, "answer_sql": []}, {"question_id": 1377, "answer_sql": ["SELECT COUNT(*) FROM member WHERE position = 'President';"]}, {"question_id": 1378, "answer_sql": ["SELECT MAX(spent) FROM budget JOIN event ON budget.link_to_event = event.event_id;", "SELECT MAX(spent) FROM budget WHERE event_status = 'approved';"]}, {"question_id": 1379, "answer_sql": ["SELECT event.event_name, COUNT(*) as total_meetings FROM event JOIN attendance ON event.event_id = attendance.link_to_event WHERE event.type = 'Meeting' AND STRFTIME('%Y', event.event_date) = '2020' GROUP BY event.event_name;"]}, {"question_id": 1380, "answer_sql": ["SELECT SUM(spent) as total_spent_food FROM budget WHERE category = 'Food';"]}, {"question_id": 1381, "answer_sql": ["SELECT m.first_name, m.last_name FROM member m JOIN attendance a ON m.member_id = a.link_to_member WHERE a.link_to_event IN ( SELECT e.event_id FROM event e GROUP BY e.event_id HAVING COUNT(e.event_id) > 7 )", "SELECT first_name, last_name FROM member WHERE member_id IN ( SELECT link_to_member FROM attendance GROUP BY link_to_member HAVING COUNT(link_to_event) > 7 )", "SELECT member.first_name, member.last_name FROM member JOIN attendance ON member.member_id = attendance.link_to_member GROUP BY member.first_name, member.last_name HAVING COUNT(attendance.link_to_event) > 7;"]}, {"question_id": 1382, "answer_sql": ["SELECT member.first_name, member.last_name FROM member JOIN major ON member.link_to_major = major.major_id JOIN attendance ON member.member_id = attendance.link_to_member JOIN event ON attendance.link_to_event = event.event_id WHERE major.major_name = 'Interior Design' AND event.event_name = 'Community Theater';", "SELECT member.first_name, member.last_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Interior Design' AND member.email IN ( SELECT attendance.link_to_member FROM attendance WHERE attendance.link_to_event = 'Community Theater' )"]}, {"question_id": 1383, "answer_sql": ["SELECT member.first_name, member.last_name FROM member JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.state = 'South Carolina' AND zip_code.city = 'Georgetown';", "SELECT member.first_name, member.last_name FROM member JOIN major ON member.link_to_major = major.major_id JOIN zip_code ON member.zip = zip_code.zip_code WHERE major.major_name = 'Georgetown' AND zip_code.state = 'SC';"]}, {"question_id": 1384, "answer_sql": ["SELECT SUM(income.amount) FROM income JOIN member ON income.link_to_member = member.member_id WHERE member.first_name = 'Grant' AND member.last_name = 'Gilmour';", "SELECT SUM(amount) FROM income WHERE link_to_member = 'Grant Gilmour';"]}, {"question_id": 1385, "answer_sql": ["SELECT member.first_name, member.last_name FROM member JOIN income ON income.link_to_member = member.member_id WHERE income.amount > 40;"]}, {"question_id": 1386, "answer_sql": ["SELECT SUM(expense.cost) as total_expense FROM expense JOIN budget ON expense.link_to_budget = budget.budget_id JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'Yearly Kickoff';", "SELECT SUM(cost) as total_expense FROM expense WHERE expense_description = 'Yearly Kickoff';"]}, {"question_id": 1387, "answer_sql": ["SELECT member.first_name, member.last_name FROM member \nJOIN attendance ON member.member_id = attendance.link_to_member \nJOIN event ON attendance.link_to_event = event.event_id \nWHERE event.event_name = 'Yearly Kickoff';", "SELECT member_id FROM member WHERE position = 'Budget Manager' AND link_to_major = 'Yearly Kickoff';"]}, {"question_id": 1388, "answer_sql": ["SELECT m.first_name, m.last_name, MAX(i.amount) as Highest_Income FROM member m JOIN income i ON m.member_id = i.link_to_member GROUP BY m.first_name, m.last_name ORDER BY Highest_Income DESC LIMIT 1;", "SELECT first_name, last_name, source FROM member m JOIN income i ON m.member_id = i.link_to_member WHERE i.amount = (SELECT MAX(amount) FROM income)"]}, {"question_id": 1389, "answer_sql": [""]}, {"question_id": 1390, "answer_sql": []}, {"question_id": 1391, "answer_sql": ["SELECT SUM(CASE WHEN major.major_name = 'Finance' THEN 1 ELSE 0 END) as Finance_Students, SUM(CASE WHEN major.major_name = 'Physics' THEN 1 ELSE 0 END) as Physics_Students, (SUM(CASE WHEN major.major_name = 'Finance' THEN 1 ELSE 0 END) / SUM(CASE WHEN major.major_name = 'Physics' THEN 1 ELSE 0 END)) as Ratio FROM member JOIN major ON member.link_to_major = major.major_id", "SELECT (SUM(major.major_name = 'Finance') / SUM(major.major_name = 'Physics')) * 100 AS ratio FROM member JOIN major ON member.link_to_major = major.major_id"]}, {"question_id": 1392, "answer_sql": ["SELECT source, MAX(amount) FROM income WHERE date_received BETWEEN '2019-09-01' AND '2019-09-30' GROUP BY source ORDER BY MAX(amount) DESC;", "SELECT income.source, SUM(income.amount) as total_amount FROM income JOIN member ON income.link_to_member = member.member_id WHERE income.date_received BETWEEN '2019-09-01' AND '2019-09-30' GROUP BY income.source ORDER BY total_amount DESC;", "SELECT source FROM income WHERE date_received BETWEEN '2019-09-01' AND '2019-09-30' ORDER BY amount DESC LIMIT 1;", "SELECT source FROM income WHERE date_received BETWEEN '2019-09-01' AND '2019-09-30' GROUP BY source ORDER BY SUM(amount) DESC;", "SELECT income.source, SUM(income.amount) as total_amount FROM income WHERE income.date_received BETWEEN '2019-09-01' AND '2019-09-30' GROUP BY income.source ORDER BY total_amount DESC;"]}, {"question_id": 1393, "answer_sql": ["SELECT CONCAT(first_name, ' ', last_name) AS full_name, email FROM member JOIN major ON member.link_to_major = major.major_id WHERE position = 'Secretary' AND member.email IS NOT NULL AND zip IS NOT NULL;", "SELECT CONCAT(first_name, ' ', last_name) AS full_name, email FROM member WHERE position = 'Secretary' AND link_to_major = (SELECT major_id FROM major WHERE major_name = 'Student_Club');"]}, {"question_id": 1394, "answer_sql": ["SELECT COUNT(*) FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Physics Teaching';", "SELECT COUNT(*) FROM member WHERE link_to_major = 'Physics Teaching';"]}, {"question_id": 1395, "answer_sql": []}, {"question_id": 1396, "answer_sql": ["SELECT COUNT(DISTINCT attendance.link_to_member), major.major_name FROM attendance JOIN member ON attendance.link_to_member = member.member_id JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Luisa' AND member.last_name = 'Guidi';", "SELECT COUNT(*), major.major_name FROM attendance JOIN member ON attendance.link_to_member = member.member_id JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Luisa' AND member.last_name = 'Guidi' GROUP BY major.major_name;"]}, {"question_id": 1397, "answer_sql": ["SELECT AVG(spent) FROM (SELECT spent FROM budget WHERE category = 'Food' AND event_status = 'Closed') AS food_spent;", "SELECT AVG(spent) FROM (SELECT SUM(spent) as spent FROM budget WHERE category = 'Food' AND event_status = 'Closed') as total;", "SELECT AVG(amount) FROM budget WHERE category = 'Food' AND event_status = 'Closed';"]}, {"question_id": 1398, "answer_sql": ["SELECT event.event_name, MAX(budget.spent) as highest_spent FROM event JOIN budget ON event.event_id = budget.link_to_event WHERE budget.category = 'Advertisement' GROUP BY event.event_name ORDER BY highest_spent DESC LIMIT 1;", "SELECT event.event_name FROM event JOIN budget ON event.event_id = budget.link_to_event WHERE budget.category = 'Advertisement' ORDER BY budget.spent DESC LIMIT 1;", "SELECT event.event_name FROM event WHERE event.type = 'Advertisement' ORDER BY event.event_name DESC LIMIT 1;"]}, {"question_id": 1399, "answer_sql": ["SELECT m.first_name, m.last_name, e.event_name FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE e.event_name = 'Women''s Soccer' AND m.last_name = 'Mclean';", "SELECT m.first_name, m.last_name FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE e.event_name = 'Women''s Soccer' AND m.first_name = 'Maya' AND m.last_name = 'Mclean';", "SELECT e.event_name, m.first_name, m.last_name FROM event e JOIN attendance a ON e.event_id = a.link_to_event JOIN member m ON a.link_to_member = m.member_id WHERE m.last_name = 'Mclean' AND e.event_name = 'Women''s Soccer';", "SELECT e.event_name FROM event e JOIN attendance a ON e.event_id = a.link_to_event JOIN member m ON a.link_to_member = m.member_id WHERE m.last_name = 'Mclean' AND m.first_name = 'Maya' AND e.event_name = 'Women''s Soccer';", "SELECT a.link_to_member FROM attendance a JOIN member m ON a.link_to_member = m.member_id WHERE m.first_name = 'Maya' AND m.last_name = 'Mclean' AND a.link_to_event = 'Women''s Soccer';"]}, {"question_id": 1400, "answer_sql": ["SELECT (SUM(CASE WHEN type = 'Community Service' THEN 1 ELSE 0 END)) * 100 / (SUM(CASE WHEN type IS NOT NULL THEN 1 ELSE 0 END)) AS percentage_share FROM event WHERE event_date BETWEEN '2019-01-01' AND '2019-12-31';"]}, {"question_id": 1401, "answer_sql": ["SELECT expense.expense_description, expense.cost FROM expense JOIN budget ON expense.link_to_budget = budget.budget_id JOIN event ON budget.link_to_event = event.event_id WHERE expense.expense_description = 'Posters' AND event.event_name = 'September Speaker';", "SELECT budget.amount FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'September Speaker';", "SELECT budget.amount FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'September Speaker' AND budget.category = 'Posters';"]}, {"question_id": 1402, "answer_sql": ["SELECT t_shirt_size, COUNT(t_shirt_size) as count FROM member GROUP BY t_shirt_size ORDER BY count DESC LIMIT 1;"]}, {"question_id": 1403, "answer_sql": ["SELECT event.event_name FROM event JOIN budget ON event.event_id = budget.link_to_event WHERE event.status = 'Closed' AND budget.remaining < 0 ORDER BY budget.remaining DESC LIMIT 1;"]}, {"question_id": 1404, "answer_sql": ["SELECT SUM(expense.cost) as total_approved_expenses FROM expense JOIN budget ON expense.link_to_budget = budget.budget_id JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'October Meeting';", "SELECT e.event_name, SUM(ex.cost) as total_approved_expenses FROM event e JOIN budget b ON e.event_id = b.link_to_event JOIN expense ex ON b.budget_id = ex.link_to_budget WHERE e.event_name = 'October Meeting' GROUP BY e.event_name;"]}, {"question_id": 1405, "answer_sql": ["SELECT event.event_name, budget.amount, budget.category FROM event JOIN budget ON event.event_id = budget.link_to_event WHERE event.event_name = 'April Speaker' ORDER BY budget.amount ASC, budget.category ASC;", "SELECT budget.amount, budget.category FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'April Speaker' ORDER BY budget.amount ASC;", "SELECT budget.category, budget.amount FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'April Speaker' ORDER BY budget.amount ASC;", "SELECT event.event_name, budget.category, budget.amount FROM event JOIN budget ON event.event_id = budget.link_to_event WHERE event.event_name = 'April Speaker' ORDER BY budget.amount ASC;", "SELECT budget.category, budget.amount FROM budget WHERE budget.event_status = 'April Speaker' ORDER BY budget.amount ASC;"]}, {"question_id": 1406, "answer_sql": ["SELECT MAX(amount) as Highest_Budgeted_Amount FROM budget WHERE category = 'Food';"]}, {"question_id": 1407, "answer_sql": ["SELECT budget_id, category, spent, remaining, amount, event_status, link_to_event FROM budget WHERE category = 'Advertisement' ORDER BY spent DESC LIMIT 3;", "SELECT category, amount FROM budget WHERE category = 'Advertisement' ORDER BY amount DESC LIMIT 3;", "SELECT category, MAX(amount) FROM budget WHERE category = 'Advertising' GROUP BY category ORDER BY MAX(amount) DESC LIMIT 3;"]}, {"question_id": 1408, "answer_sql": ["SELECT SUM(cost) FROM expense WHERE expense_description = 'Parking';"]}, {"question_id": 1409, "answer_sql": ["SELECT SUM(cost) FROM expense WHERE expense_date = '2019-08-20';", "SELECT SUM(expense.cost) FROM expense JOIN member ON expense.link_to_member = member.member_id WHERE expense.expense_date = '2019-08-20' AND expense.approved = 'approved';"]}, {"question_id": 1410, "answer_sql": ["SELECT m.first_name, m.last_name, SUM(b.amount) as total_cost FROM member m JOIN income i ON m.member_id = i.link_to_member JOIN expense e ON m.member_id = e.link_to_member JOIN budget b ON e.link_to_budget = b.budget_id JOIN attendance a ON m.member_id = a.link_to_member WHERE m.member_id = 'rec4BLdZHS2Blfp4v' GROUP BY m.first_name, m.last_name;", "SELECT member.first_name, member.last_name, SUM(expense.cost) as total_cost FROM member JOIN expense ON member.member_id = expense.link_to_member JOIN income ON member.member_id = income.link_to_member WHERE member.member_id = 'rec4BLdZHS2Blfp4v' GROUP BY member.first_name, member.last_name;", "SELECT CONCAT(member.first_name, ' ', member.last_name) AS full_name, SUM(budget.amount) AS total_cost FROM attendance JOIN member ON attendance.link_to_member = member.member_id JOIN budget ON attendance.link_to_event = budget.link_to_event WHERE member.member_id = 'rec4BLdZHS2Blfp4v' GROUP BY full_name;", "SELECT m.first_name || ' ' || m.last_name AS full_name, SUM(i.amount) AS total_cost FROM member m JOIN income i ON m.member_id = i.link_to_member WHERE m.member_id = 'rec4BLdZHS2Blfp4v' GROUP BY m.first_name, m.last_name;", "SELECT member.first_name, member.last_name, SUM(expense.cost) as total_cost FROM member JOIN expense ON member.member_id = expense.link_to_member WHERE member.member_id = 'rec4BLdZHS2Blfp4v' GROUP BY member.first_name, member.last_name;"]}, {"question_id": 1411, "answer_sql": ["SELECT e.expense_description FROM expense e JOIN member m ON e.link_to_member = m.member_id WHERE m.first_name = 'Sacha' AND m.last_name = 'Harrison';", "SELECT e.expense_description FROM expense e JOIN member m ON e.link_to_member = m.member_id WHERE m.member_id = 'sacha_harrison' AND e.approved = 'approved';"]}, {"question_id": 1412, "answer_sql": ["SELECT e.expense_description FROM expense e JOIN member m ON e.link_to_member = m.member_id WHERE m.t_shirt_size = 'X-Large';"]}, {"question_id": 1413, "answer_sql": ["SELECT zip_code.zip_code FROM member JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.member_id IN ( SELECT attendance.link_to_member FROM attendance WHERE attendance.link_to_event IN ( SELECT event.event_id FROM event WHERE event.event_id IN ( SELECT budget.link_to_event FROM budget WHERE budget.remaining < 50 ) ) )", "SELECT zip_code.zip_code FROM zip_code JOIN member ON member.zip = zip_code.zip_code WHERE member.member_id IN ( SELECT attendance.link_to_member FROM attendance WHERE attendance.link_to_event IN ( SELECT event.event_id FROM event WHERE event.event_date >= '2022-01-01' AND event.event_date <= '2022-12-31' ) ) AND member.email IN ( SELECT expense.link_to_member FROM expense WHERE expense.cost < 50 )"]}, {"question_id": 1414, "answer_sql": ["SELECT major_name FROM major JOIN member ON member.link_to_major = major.major_id WHERE member.first_name = 'Phillip' AND member.last_name = 'Cullen';", "SELECT major.major_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.email = 'phillip.cullen@example.com';"]}, {"question_id": 1415, "answer_sql": ["SELECT member.first_name, member.last_name, member.position FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Business';", "SELECT member.position FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Business';", "SELECT position FROM member WHERE link_to_major = 'Business';"]}, {"question_id": 1416, "answer_sql": ["SELECT COUNT(*) FROM member JOIN major ON member.link_to_major = major.major_id WHERE major_name = 'Business' AND t_shirt_size = 'Medium';", "SELECT COUNT(*) FROM member WHERE link_to_major = 'Business' AND t_shirt_size = 'Medium';"]}, {"question_id": 1417, "answer_sql": ["SELECT e.event_name FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE b.remaining > 30;"]}, {"question_id": 1418, "answer_sql": ["SELECT event.event_name, event.location FROM event WHERE event.location = 'MU 215';", "SELECT event_name, event_date, type, location FROM event WHERE location = 'MU 215';", "SELECT event_name, event_date, type, location, status FROM event WHERE location = 'MU 215';", "SELECT event_name FROM event WHERE location = 'MU 215';"]}, {"question_id": 1419, "answer_sql": ["SELECT event.type FROM event WHERE event.event_date = '2020-03-24T12:00:00';", "SELECT event.event_name FROM event WHERE event.event_date = '2020-03-24T12:00:00';"]}, {"question_id": 1420, "answer_sql": ["SELECT major.major_name FROM major JOIN member ON major.major_id = member.link_to_major WHERE member.position = 'Vice President';"]}, {"question_id": 1421, "answer_sql": ["SELECT (SUM(position = 'Member' and major_name = 'Mathematics') / COUNT(member_id)) * 100 as percentage FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.zip IN (SELECT zip_code FROM zip_code WHERE type = 'USPS')"]}, {"question_id": 1422, "answer_sql": ["SELECT event.event_name, event.event_date, event.type, event.status, event.location FROM event WHERE event.location = 'MU 215';", "SELECT event_name, event_date, type, location FROM event WHERE location = 'MU 215';", "SELECT event.event_name, event.event_date, budget.category, event.status, event.type, event.location FROM event JOIN budget ON event.event_id = budget.link_to_event WHERE event.location = 'MU 215';", "SELECT event.event_name FROM event WHERE location = 'MU 215';"]}, {"question_id": 1423, "answer_sql": ["SELECT COUNT(*) FROM income WHERE amount = 50;"]}, {"question_id": 1424, "answer_sql": ["SELECT COUNT(*) FROM member WHERE t_shirt_size = 'X-Large' AND position = 'Member';", "SELECT COUNT(*) FROM member WHERE t_shirt_size = 'X-Large';"]}, {"question_id": 1425, "answer_sql": ["SELECT COUNT(*) FROM major WHERE department = 'School of Applied Sciences' AND major_name LIKE '%Sci%';"]}, {"question_id": 1426, "answer_sql": ["SELECT m.last_name, m.link_to_major, major.major_name, major.department, major.college FROM member m JOIN major ON m.link_to_major = major.major_id WHERE major.major_name = 'Environmental Engineering';", "SELECT member.last_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Environmental Engineering';", "SELECT member.last_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'Environmental Engineering' AND major.college = 'Department of Environmental Engineering' ORDER BY member.last_name;"]}, {"question_id": 1427, "answer_sql": ["SELECT b.category FROM budget b JOIN event e ON b.link_to_event = e.event_id WHERE e.location = 'MU 215' AND e.type = 'Guest Speaker' AND b.spent = 0;", "SELECT budget.category FROM budget JOIN event ON budget.event_status = 'Guest Speaker' JOIN zip_code ON event.location = zip_code.zip_code WHERE zip_code.city = 'MU 215' AND budget.spent = 0;"]}, {"question_id": 1428, "answer_sql": ["SELECT zip_code.city, zip_code.state FROM member \nJOIN major ON member.link_to_major = major.major_id \nJOIN zip_code ON member.zip = zip_code.zip_code \nWHERE major.department = 'Electrical and Computer Engineering Department' AND member.position = 'Member';", "SELECT zip_code.city, zip_code.state FROM zip_code JOIN member ON zip_code.zip_code = member.zip JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'Electrical and Computer Engineering' AND member.position = 'Member';"]}, {"question_id": 1429, "answer_sql": ["SELECT event.event_name FROM event JOIN attendance ON event.event_id = attendance.link_to_event JOIN member ON attendance.link_to_member = member.member_id WHERE member.position = 'Vice President' AND event.location = '900 E. Washington St.' AND event.type = 'Social';", "SELECT event_name FROM event WHERE type = 'Social' AND location = '900 E. Washington St.' AND status = 'Attended';"]}, {"question_id": 1430, "answer_sql": ["SELECT member.last_name, member.position FROM member JOIN expense ON member.member_id = expense.link_to_member WHERE expense.expense_description = 'Pizza' AND expense.expense_date = '2019-09-10';", "SELECT last_name, position FROM member WHERE email IN (SELECT member_id FROM income WHERE source = 'Pizza' AND date_received = '2019-09-10') AND t_shirt_size = 'Pizza';"]}, {"question_id": 1431, "answer_sql": ["SELECT member.last_name FROM member JOIN attendance ON member.member_id = attendance.link_to_member JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer';", "SELECT member.last_name FROM member JOIN attendance ON member.member_id = attendance.link_to_member JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer' AND event.type = 'Men''s Soccer';"]}, {"question_id": 1432, "answer_sql": ["SELECT (COUNT(*) * 100) / (SELECT COUNT(*) FROM member WHERE t_shirt_size = 'Medium') as percentage FROM income WHERE amount = 50 AND link_to_member IN (SELECT member_id FROM member WHERE t_shirt_size = 'Medium');"]}, {"question_id": 1433, "answer_sql": ["SELECT DISTINCT state FROM zip_code WHERE type = 'PO Box';", "SELECT DISTINCT zip_code.state FROM zip_code JOIN member ON zip_code.zip_code = member.zip WHERE zip_code.type = 'PO Box';"]}, {"question_id": 1434, "answer_sql": ["SELECT zip_code.zip_code FROM zip_code WHERE zip_code.state = 'Puerto Rico' AND zip_code.type = 'PO Box';", "SELECT zip_code.zip_code FROM zip_code JOIN member ON zip_code.state = 'Puerto Rico' AND zip_code.type = 'PO Box' AND member.zip = zip_code.zip_code", "SELECT zip_code.zip_code FROM zip_code JOIN member ON zip_code.state = 'Puerto Rico' AND zip_code.type = 'PO Box'"]}, {"question_id": 1435, "answer_sql": ["SELECT event_name FROM event WHERE type = 'Game' AND status = 'Closed' AND event_date BETWEEN '2019-03-15' AND '2020-03-20';"]}, {"question_id": 1436, "answer_sql": ["SELECT e.event_name, e.event_date, e.type, e.location, e.status FROM event e JOIN income i ON e.event_id = i.link_to_member WHERE i.amount > 50 AND i.source = 'online' AND i.notes LIKE '%paid more than 50 dollar%';"]}, {"question_id": 1437, "answer_sql": ["SELECT member.email, member.member_id, event.event_name, event.event_date, event.event_id FROM member \nJOIN attendance ON member.member_id = attendance.link_to_member \nJOIN event ON attendance.link_to_event = event.event_id \nJOIN \"expense\" ON member.member_id = \"expense\".link_to_member \nJOIN \"budget\" ON \"expense\".link_to_budget = \"budget\".budget_id \nWHERE \"budget\".event_status = 'approved' AND \"expense\".approved = 'true' AND \"expense\".expense_date BETWEEN '2019-01-10' AND '2019-11-19' AND member.email IN ('member_email', 'member_email', 'member_email', 'member_email', 'member_email', 'member_email') AND event.event_name IN ('event_name', 'event_name', 'event_name', 'event_name', 'event_name', 'event_name');", "SELECT member.first_name, member.last_name, member.email, member.position, member.t_shirt_size, member.phone, member.zip, member.link_to_major, expense.expense_date, expense.cost, expense.approved, expense.link_to_member, expense.link_to_budget, income.date_received, income.amount, income.source, income.notes, income.link_to_member FROM member JOIN expense ON member.member_id = expense.link_to_member JOIN income ON member.member_id = income.link_to_member WHERE expense.approved = 'true' AND expense.expense_date BETWEEN '2019-01-10' AND '2019-11-19';", "SELECT member.member_id, member.first_name, member.last_name, member.email, member.position, member.t_shirt_size, member.phone, member.zip, member.link_to_major, income.income_id, income.date_received, income.amount, income.source, income.notes FROM member JOIN expense ON member.member_id = expense.link_to_member JOIN income ON member.member_id = income.link_to_member WHERE expense.approved = 'true' AND expense.expense_date BETWEEN '2019-01-10' and '2019-11-19';"]}, {"question_id": 1438, "answer_sql": ["SELECT major.college FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Katy'", "SELECT major.college FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Katy' AND member.member_id = ( SELECT member_id FROM member WHERE last_name = 'rec1N0upiVLy5esTO' );"]}, {"question_id": 1439, "answer_sql": ["SELECT member.phone FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Business' AND major.college = 'College of Agriculture and Applied Sciences';"]}, {"question_id": 1440, "answer_sql": ["SELECT member.email FROM member JOIN expense ON member.member_id = expense.link_to_member JOIN budget ON expense.link_to_budget = budget.budget_id WHERE expense.cost > 20 AND expense.expense_date BETWEEN '2019-09-10' and '2019-11-19';", "SELECT email FROM member WHERE member_id IN (SELECT link_to_member FROM expense WHERE cost > 20 AND expense_date BETWEEN '2019-09-10' and '2019-11-19')", "SELECT email FROM member WHERE member_id IN (SELECT link_to_member FROM attendance WHERE link_to_event IN (SELECT event_id FROM event WHERE event_date BETWEEN '2019-09-10' and '2019-11-19')) AND member_id IN (SELECT link_to_member FROM income WHERE link_to_member IN (SELECT member_id FROM member WHERE zip IN (SELECT zip_code FROM zip_code WHERE type = 'postal')) AND amount > 20);"]}, {"question_id": 1441, "answer_sql": ["SELECT COUNT(*) FROM member WHERE position = 'Member' AND link_to_major = (SELECT major_id FROM major WHERE major_name = 'education' AND college = 'Education & Human Services');"]}, {"question_id": 1442, "answer_sql": ["SELECT (SUM(CASE WHEN remaining < 0 THEN 1 ELSE 0 END)) / COUNT(event_id) * 100 as percentage_over_budget FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE budget.remaining < 0;", "SELECT (SUM(CASE WHEN remaining < 0 THEN 1 ELSE 0 END)) / COUNT(event_id) * 100 AS percentage_over_budget FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE event.status = 'over budget';", "SELECT (SUM(CASE WHEN remaining < 0 THEN 1 ELSE 0 END)) / COUNT(event_id) * 100 AS percentage_over_budget FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE budget.amount > 0;"]}, {"question_id": 1443, "answer_sql": ["SELECT event_id, location, status FROM event WHERE event_date BETWEEN '2019-11-01' and '2020-03-31';"]}, {"question_id": 1444, "answer_sql": ["SELECT e.expense_description FROM expense e JOIN (SELECT AVG(cost) as avg_cost, link_to_budget FROM expense GROUP BY link_to_budget) ex ON e.link_to_budget = ex.link_to_budget WHERE e.cost > ex.avg_cost;", "SELECT e.expense_description FROM expense e JOIN ( SELECT b.budget_id, AVG(b.spent) as avg_spent FROM budget b GROUP BY b.budget_id ) b ON e.link_to_budget = b.budget_id WHERE e.cost > 50 AND b.avg_spent > 50 ORDER BY e.expense_description;", "SELECT e.expense_description, e.expense_date, e.cost FROM expense e JOIN ( SELECT link_to_budget, AVG(cost) as avg_cost FROM expense GROUP BY link_to_budget ) b ON e.link_to_budget = b.link_to_budget WHERE e.cost > b.avg_cost ORDER BY e.cost DESC;", "SELECT e.expense_description FROM expense e JOIN ( SELECT link_to_budget FROM expense GROUP BY link_to_budget HAVING AVG(cost) > 50 ) b ON e.link_to_budget = b.link_to_budget;", "SELECT e.expense_description, e.cost FROM expense e JOIN ( SELECT link_to_budget, AVG(cost) as avg_cost FROM expense GROUP BY link_to_budget ) ex ON e.link_to_budget = ex.link_to_budget WHERE ex.avg_cost > 50;"]}, {"question_id": 1445, "answer_sql": ["SELECT first_name, last_name FROM member WHERE t_shirt_size = 'X-Large';", "SELECT first_name || ' ' || last_name AS full_name FROM member WHERE t_shirt_size = 'X-Large';"]}, {"question_id": 1446, "answer_sql": ["SELECT (SUM(zip_code.type = 'PO Box') * 100) / COUNT(zip_code) AS percentage_po_boxes FROM zip_code", "SELECT (SUM(zip_code.type = 'PO Box') / COUNT(zip_code)) * 100 AS percentage_po_boxes FROM zip_code"]}, {"question_id": 1447, "answer_sql": ["SELECT event.event_name, event.location FROM event JOIN budget ON event.event_id = budget.link_to_event WHERE budget.remaining < 0;", "SELECT event.event_name, event.location FROM event JOIN budget ON event.event_id = budget.link_to_event WHERE budget.remaining < 0 AND event.event_id IN ( SELECT link_to_event FROM attendance GROUP BY link_to_event HAVING COUNT(DISTINCT link_to_member) = ( SELECT COUNT(*) FROM member ) );"]}, {"question_id": 1448, "answer_sql": ["SELECT event_name, event_date FROM event WHERE event_id IN ( SELECT link_to_event FROM attendance WHERE link_to_member IN ( SELECT member_id FROM member WHERE email IN ( SELECT email FROM expense WHERE expense_description = 'Pizza' AND cost > 50 AND cost < 100 ) ) );", "SELECT event_name, event_date FROM event \nINNER JOIN attendance ON event.event_id = attendance.link_to_event \nINNER JOIN member ON attendance.link_to_member = member.member_id \nWHERE member.position = 'Pizza' \nAND event.event_id IN ( SELECT link_to_event FROM expense WHERE expense_description = 'Pizza' AND cost > 50 AND cost < 100 )"]}, {"question_id": 1449, "answer_sql": ["SELECT first_name || ' ' || last_name AS full_name, major_name FROM member JOIN ( SELECT link_to_member, SUM(cost) AS total_cost FROM expense GROUP BY link_to_member HAVING total_cost > 100 ) AS expense_info ON member.member_id = expense_info.link_to_member JOIN major ON member.link_to_major = major.major_id;", "SELECT member.first_name || ' ' || member.last_name AS full_name, major.major_name AS major \nFROM member \nJOIN major ON member.link_to_major = major.major_id \nJOIN (SELECT link_to_member FROM expense WHERE cost > 100 GROUP BY link_to_member) expense_member ON member.member_id = expense_member.link_to_member;", "SELECT member.first_name, member.last_name, major.major_name FROM member JOIN major ON member.link_to_major = major.major_id JOIN expense ON member.member_id = expense.link_to_member WHERE expense.cost > 100 GROUP BY member.first_name, member.last_name, major.major_name;", "SELECT member.first_name, member.last_name, major.major_name FROM member JOIN major ON member.link_to_major = major.major_id JOIN expense ON member.member_id = expense.link_to_member WHERE expense.cost > 100;"]}, {"question_id": 1450, "answer_sql": ["SELECT zip_code.city, zip_code.state, zip_code.county FROM event JOIN member ON event.event_id = member.link_to_major JOIN zip_code ON member.zip = zip_code.zip_code WHERE (SELECT COUNT(*) FROM income WHERE link_to_member = member.member_id) > 40"]}, {"question_id": 1451, "answer_sql": ["SELECT m.first_name, m.last_name FROM member m JOIN ( SELECT link_to_member FROM attendance GROUP BY link_to_member HAVING COUNT(DISTINCT link_to_event) > 1 ) a ON a.link_to_member = m.member_id JOIN ( SELECT MAX(cost) as max_cost, link_to_member FROM expense GROUP BY link_to_member HAVING COUNT(DISTINCT link_to_budget) > 1 ) e ON e.link_to_member = m.member_id WHERE e.max_cost = ( SELECT MAX(cost) FROM expense GROUP BY link_to_member HAVING COUNT(DISTINCT link_to_budget) > 1 ) ORDER BY e.max_cost DESC;", "SELECT m.first_name, m.last_name FROM member m JOIN ( SELECT link_to_member FROM attendance GROUP BY link_to_member HAVING COUNT(link_to_event) > 1 ) a ON a.link_to_member = m.member_id JOIN ( SELECT link_to_member, MAX(cost) as max_cost FROM expense GROUP BY link_to_member HAVING COUNT(link_to_budget) > 1 ) e ON e.link_to_member = m.member_id WHERE e.max_cost = ( SELECT MAX(cost) FROM expense WHERE link_to_member IN ( SELECT link_to_member FROM attendance GROUP BY link_to_member HAVING COUNT(link_to_event) > 1 ) );", "SELECT member.first_name, member.last_name, MAX(expense.cost) as max_expense FROM member JOIN (SELECT link_to_member FROM attendance GROUP BY link_to_member HAVING COUNT(link_to_event) > 1) as temp ON member.member_id = temp.link_to_member JOIN expense ON member.member_id = expense.link_to_member GROUP BY member.first_name, member.last_name ORDER BY max_expense DESC LIMIT 1;", "SELECT m.first_name || ' ' || m.last_name AS Member, MAX(e.cost) AS ExpenseCost FROM member m JOIN (SELECT link_to_member FROM attendance GROUP BY link_to_member HAVING COUNT(link_to_event) > 1) a ON m.member_id = a.link_to_member JOIN expense e ON m.member_id = e.link_to_member GROUP BY m.first_name, m.last_name ORDER BY ExpenseCost DESC LIMIT 1;", "SELECT MAX(cost) FROM expense WHERE link_to_budget IN (SELECT budget_id FROM budget WHERE event_status = 'approved');"]}, {"question_id": 1452, "answer_sql": ["SELECT AVG(amount) FROM budget WHERE category != 'Member';", "SELECT AVG(amount) FROM (SELECT amount FROM budget WHERE category = 'Student' AND event_status = 'Approved' AND link_to_event IN (SELECT event_id FROM event WHERE type != 'Student')) AS student_events;"]}, {"question_id": 1453, "answer_sql": ["SELECT e.event_name FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE b.category = 'Parking' GROUP BY e.event_name HAVING AVG(b.spent) < (SELECT AVG(spent) FROM budget WHERE category = 'Parking')"]}, {"question_id": 1454, "answer_sql": []}, {"question_id": 1455, "answer_sql": ["SELECT MAX(cost) FROM expense WHERE expense_description = 'Water, chips, cookies';", "SELECT MAX(cost) FROM expense WHERE expense_description = 'Water, chips, cookies' AND approved = 'approved';"]}, {"question_id": 1456, "answer_sql": ["SELECT member.first_name || ' ' || member.last_name AS full_name, MAX(expense.cost) AS spent_most_money FROM member JOIN attendance ON member.member_id = attendance.link_to_member JOIN event ON attendance.link_to_event = event.event_id JOIN budget ON event.event_id = budget.link_to_event JOIN expense ON budget.budget_id = expense.link_to_budget GROUP BY member.first_name, member.last_name ORDER BY spent_most_money DESC LIMIT 5;", "SELECT CONCAT(first_name, ' ', last_name) AS full_name, SUM(expense.cost) AS total_spent FROM expense JOIN member ON expense.link_to_member = member.member_id GROUP BY member.member_id ORDER BY total_spent DESC LIMIT 5;", "SELECT m.first_name || ' ' || m.last_name AS full_name, SUM(e.cost) AS total_spent FROM member m JOIN income i ON m.member_id = i.link_to_member JOIN expense e ON m.member_id = e.link_to_member GROUP BY m.first_name, m.last_name ORDER BY total_spent DESC LIMIT 5;", "SELECT m.first_name, m.last_name, SUM(b.spent) as total_spent FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN budget b ON a.link_to_event = b.link_to_event JOIN expense e ON b.budget_id = e.link_to_budget JOIN member em ON e.link_to_member = em.member_id GROUP BY m.first_name, m.last_name ORDER BY total_spent DESC LIMIT 5;", "SELECT m.first_name, m.last_name, SUM(e.cost) as total_spent FROM member m JOIN (SELECT expense_id, SUM(cost) as cost FROM expense GROUP BY expense_id) e ON m.member_id = e.expense_id GROUP BY m.member_id ORDER BY total_spent DESC LIMIT 5;"]}, {"question_id": 1457, "answer_sql": ["SELECT m.first_name, m.last_name, m.phone FROM member m JOIN (SELECT link_to_member, AVG(cost) as avg_cost FROM expense GROUP BY link_to_member) e ON m.member_id = e.link_to_member WHERE e.avg_cost > (SELECT AVG(cost) FROM expense) AND m.member_id IN (SELECT link_to_member FROM attendance);", "SELECT member.first_name || ' ' || member.last_name AS full_name, member.phone AS contact_number FROM member JOIN (SELECT link_to_member, AVG(cost) AS average_cost FROM expense GROUP BY link_to_member) AS expense_avg ON member.member_id = expense_avg.link_to_member WHERE expense_avg.average_cost < member.phone", "SELECT member.first_name || ' ' || member.last_name AS full_name, member.phone AS contact_number FROM member JOIN (SELECT link_to_member, AVG(cost) AS average_cost FROM expense GROUP BY link_to_member) AS expense_avg ON member.member_id = expense_avg.link_to_member WHERE expense_avg.average_cost > member.phone", "SELECT m.first_name, m.last_name, m.phone FROM member m JOIN (SELECT link_to_member, AVG(cost) as avg_cost FROM expense GROUP BY link_to_member) e ON m.member_id = e.link_to_member WHERE e.avg_cost < m.phone"]}, {"question_id": 1458, "answer_sql": []}, {"question_id": 1459, "answer_sql": ["SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Garrett' AND member.last_name = 'Gerke';", "SELECT major.major_name, major.department FROM major JOIN member ON member.link_to_major = major.major_id WHERE member.first_name = 'Garrett' AND member.last_name = 'Gerke';", "SELECT major.major_name, major.department FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.member_id = 'Garrett Gerke';"]}, {"question_id": 1460, "answer_sql": ["SELECT member .first_name || ' ' || member .last_name AS full_name, expense .expense_description, expense .cost FROM member JOIN expense ON member .member_id = expense .link_to_member JOIN budget ON expense .link_to_budget = budget .budget_id WHERE budget .category = 'Food' AND expense .expense_description = 'Water, Veggie tray, supplies'", "SELECT member .first_name, member .last_name, expense .expense_description, expense .cost FROM member JOIN expense ON member .member_id = expense .link_to_member JOIN budget ON expense .link_to_budget = budget .budget_id WHERE budget .category = 'Food' AND expense .expense_description = 'Water, Veggie tray, supplies' ORDER BY member .first_name, member .last_name;", "SELECT member.first_name, member.last_name, expense.cost FROM member JOIN expense ON member.member_id = expense.link_to_member WHERE expense.expense_description = 'Water, Veggie tray, supplies'", "SELECT e.expense_description, e.cost FROM expense e JOIN budget b ON e.link_to_budget = b.budget_id JOIN event ee ON b.link_to_event = ee.event_id WHERE e.expense_description = 'Water, Veggie tray, supplies' AND ee.event_name = 'Budget';"]}, {"question_id": 1461, "answer_sql": ["SELECT member.last_name, member.phone FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Elementary Education';"]}, {"question_id": 1462, "answer_sql": ["SELECT budget.category, SUM(budget.amount) as total_budgeted FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'January Speaker' GROUP BY budget.category;", "SELECT budget.category, budget.amount FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'January Speaker';"]}, {"question_id": 1463, "answer_sql": ["SELECT event.event_name FROM event JOIN budget ON event.event_id = budget.link_to_event WHERE budget.category = 'Food';", "SELECT event_name FROM event WHERE type = 'Food';"]}, {"question_id": 1464, "answer_sql": ["SELECT first_name, last_name, amount FROM member JOIN income ON member.member_id = income .link_to_member WHERE date_received = '09/09/2019' AND source = 'Funds';"]}, {"question_id": 1465, "answer_sql": ["SELECT b.category FROM budget b JOIN expense e ON b.budget_id = e.link_to_budget WHERE e.expense_description = 'Posters';"]}, {"question_id": 1466, "answer_sql": ["SELECT member.first_name || ' ' || member.last_name AS full_name, major.major_name, major.college, zip_code.short_state, zip_code.state FROM member JOIN major ON member.link_to_major = major.major_id JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.position = 'Secretary'", "SELECT member.first_name || ' ' || member.last_name AS full_name, major.major_name, major.college FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Secretary' AND member.zip = (SELECT zip_code.zip_code FROM zip_code WHERE zip_code.state = 'NY')"]}, {"question_id": 1467, "answer_sql": ["SELECT event.event_name, SUM(budget.spent) as total_spent FROM event JOIN budget ON event.event_id = budget.link_to_event WHERE budget.category = 'Speaker Gifts' GROUP BY event.event_name;", "SELECT event.event_name, budget.amount FROM event JOIN budget ON event.event_id = budget.link_to_event WHERE budget.category = 'Speaker Gifts' AND budget.spent = (SELECT SUM(spent) FROM budget WHERE category = 'Speaker Gifts');", "SELECT e.event_name, SUM(b.amount) as total_amount_spent FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE b.category = 'Speaker Gifts' GROUP BY e.event_name;"]}, {"question_id": 1468, "answer_sql": ["SELECT zip_code.city FROM member JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.member_id = 'Garrett Girke';"]}, {"question_id": 1469, "answer_sql": ["SELECT member.first_name, member.last_name, member.position FROM member JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.city = 'Lincolnton' AND zip_code.state = 'North Carolina' AND zip_code.zip_code = 28092;"]}, {"question_id": 1470, "answer_sql": ["SELECT COUNT(*) FROM gasstations JOIN customers ON gasstations.ChainID = customers.CustomerID WHERE customers.Segment = 'CZE' AND customers.Currency = 'Premium';"]}, {"question_id": 1471, "answer_sql": ["SELECT (COUNT(CASE WHEN customers.Currency = 'EUR' THEN 1 END)) / (COUNT(CASE WHEN customers.Currency = 'CZK' THEN 1 END)) FROM customers JOIN transactions_1k ON customers.CustomerID = transactions_1k.CustomerID;", "SELECT (count(Currency = 'EUR') / count(Currency = 'CZK')) as Ratio FROM customers", "SELECT (COUNT(CASE WHEN customers.Currency = 'EUR' THEN 1 END)) / (COUNT(CASE WHEN customers.Currency = 'CZK' THEN 1 END)) FROM customers JOIN transactions_1k ON customers.CustomerID = transactions_1k.CustomerID WHERE transactions_1k.Date BETWEEN '2022-01-01' AND '2022-12-31';"]}, {"question_id": 1472, "answer_sql": ["SELECT customers.CustomerID, customers.Segment, customers.Currency FROM customers JOIN transactions_1k ON customers.CustomerID = transactions_1k .CustomerID JOIN gasstations ON transactions_1k .GasStationID = gasstations.GasStationID WHERE transactions_1k .Date BETWEEN '2012-01-01' AND '2012-12-31' GROUP BY customers.CustomerID, customers.Segment, customers.Currency ORDER BY MIN( transactions_1k .Amount) LIMIT 1;", "SELECT customers.CustomerID, yearmonth.Date, yearmonth.Consumption FROM yearmonth JOIN transactions_1k ON yearmonth.CustomerID = transactions_1k.CustomerID JOIN customers ON customers.CustomerID = transactions_1k.CustomerID WHERE strftime('%Y', yearmonth.Date) = '2012' GROUP BY yearmonth.CustomerID, yearmonth.Date ORDER BY yearmonth.Consumption ASC LIMIT 10;", "SELECT c.CustomerID, SUM(t.Amount) as TotalConsumption FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID WHERE strftime('%Y', t.Date) = '2012' GROUP BY c.CustomerID ORDER BY TotalConsumption ASC LIMIT 1;", "SELECT customers.CustomerID, customers.Segment, customers.Currency FROM customers JOIN transactions_1k ON customers.CustomerID = transactions_1k .CustomerID JOIN gasstations ON transactions_1k .GasStationID = gasstations.GasStationID WHERE transactions_1k .Date BETWEEN '2012-01-01' AND '2012-12-31' GROUP BY customers.CustomerID, customers.Segment, customers.Currency ORDER BY COUNT(DISTINCT transactions_1k .ProductID) ASC LIMIT 1;"]}, {"question_id": 1473, "answer_sql": ["SELECT AVG(Consumption) / 12 FROM yearmonth JOIN customers ON yearmonth.CustomerID = customers.CustomerID JOIN gasstations ON gasstations.GasStationID = transactions_1k.GasStationID JOIN transactions_1k ON transactions_1k.CustomerID = customers.CustomerID WHERE customers.Segment = 'SME' AND strftime('%Y', '2013-01-01') = '2013';", "SELECT AVG(yearmonth.Consumption) FROM yearmonth JOIN customers ON yearmonth.CustomerID = customers.CustomerID WHERE customers.Segment = 'SME' AND customers.Currency = 'EUR' AND yearmonth.Date BETWEEN '201301' AND '201312';", "SELECT AVG(Consumption) FROM ( SELECT Consumption FROM yearmonth WHERE Date BETWEEN '201301' AND '201312' AND CustomerID IN ( SELECT CustomerID FROM customers WHERE Segment = 'SME' ) ) AS Consumption_2013;", "SELECT AVG(Consumption) / 12 AS AverageMonthlyConsumption FROM yearmonth JOIN customers ON yearmonth.CustomerID = customers.CustomerID WHERE customers.Segment = 'SME' AND customers.Currency = 'EUR' AND yearmonth.Date BETWEEN '201301' AND '201312';", "SELECT AVG(Consumption) / 12 FROM yearmonth WHERE Date BETWEEN '201301' AND '201312' AND CustomerID IN (SELECT CustomerID FROM customers WHERE Segment = 'SME');"]}, {"question_id": 1474, "answer_sql": ["SELECT c.CustomerID, SUM(t.Amount) as TotalConsumed FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID JOIN gasstations g ON t.GasStationID = g.GasStationID JOIN products p ON t.ProductID = p.ProductID WHERE t.Date BETWEEN '2011-01-01' AND '2011-12-31' AND c.Currency = 'CZK' GROUP BY c.CustomerID ORDER BY TotalConsumed DESC LIMIT 1;"]}, {"question_id": 1475, "answer_sql": ["SELECT COUNT(*) FROM customers JOIN transactions_1k ON customers.CustomerID = transactions_1k.CustomerID JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID JOIN products ON transactions_1k.ProductID = products.ProductID JOIN yearmonth ON customers.CustomerID = yearmonth .CustomerID WHERE transactions_1k.Date BETWEEN '2012-01-01' AND '2012-12-31' AND transactions_1k.Amount < 30000 AND yearmonth .Consumption < 30000;", "SELECT SUM(transactions_1k.Amount) FROM transactions_1k JOIN yearmonth ON transactions_1k.CustomerID = yearmonth.CustomerID JOIN customers ON yearmonth.CustomerID = customers.CustomerID WHERE customers.Segment = 'KAM' AND transactions_1k.Date BETWEEN '2012-01-01' AND '2012-12-31';", "SELECT customers.CustomerID, COUNT(*) as CustomerCount FROM customers JOIN yearmonth ON customers.CustomerID = yearmonth.CustomerID JOIN transactions_1k ON yearmonth.CustomerID = transactions_1k.CustomerID WHERE transactions_1k.Date BETWEEN '2012-01-01' AND '2012-12-31' AND yearmonth.Consumption < 30000 GROUP BY customers.CustomerID;", "SELECT c.CustomerID, COUNT(*) as ConsumptionCount FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID JOIN yearmonth y ON c.CustomerID = y.CustomerID WHERE t.Date BETWEEN '201201' AND '201212' AND t.Amount < 30000 GROUP BY c.CustomerID, y.Date HAVING COUNT(DISTINCT t.ProductID) = 1;", "SELECT COUNT(DISTINCT CustomerID) FROM ( SELECT t.CustomerID FROM transactions_1k t JOIN customers c ON t.CustomerID = c.CustomerID WHERE c.Segment = 'KAM' AND t.Date BETWEEN '2012-01-01' AND '2012-12-31' AND t.Amount < 30000 ) AS subquery;"]}, {"question_id": 1476, "answer_sql": ["SELECT c.CustomerID, SUM(t.Consumption) as TotalConsumption FROM customers c JOIN yearmonth ym ON c.CustomerID = ym.CustomerID JOIN (SELECT CustomerID, SUM(Consumption) as Consumption FROM yearmonth WHERE Date BETWEEN '2012-01-01' AND '2012-12-31' GROUP BY CustomerID) t ON c.CustomerID = t.CustomerID WHERE c.Currency = 'CZK' AND ym.Date BETWEEN '2012-01-01' AND '2012-12-31' GROUP BY c.CustomerID UNION ALL SELECT c.CustomerID, SUM(t.Consumption) as TotalConsumption FROM customers c JOIN yearmonth ym ON c.CustomerID = ym.CustomerID JOIN (SELECT CustomerID, SUM(Consumption) as Consumption FROM yearmonth WHERE Date BETWEEN '2012-01-01' AND '2012-12-31' GROUP BY CustomerID) t ON c.CustomerID = t.CustomerID WHERE c.Currency = 'EUR' AND ym.Date BETWEEN '2012-01-01' AND '2012-12-31' GROUP BY c.CustomerID", "SELECT c.CustomerID, COUNT(t.TransactionID) AS TransactionCount, SUM(t.Amount) AS TotalAmount FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE t.Date BETWEEN '2012-01-01' AND '2012-12-31' AND c.Currency = 'CZK' GROUP BY c.CustomerID, g.ChainID HAVING COUNT(t.TransactionID) > 0 AND SUM(t.Amount) > 0 AND g.ChainID IS NOT NULL"]}, {"question_id": 1477, "answer_sql": ["SELECT t1.Date, c.Segment, g.ChainID, SUM(t1.Amount * t1.Price) as Total_Consumption FROM transactions_1k as t1 JOIN customers as c ON t1.CustomerID = c.CustomerID JOIN gasstations as g ON t1.GasStationID = g.GasStationID WHERE t1.Date >= '2021-01-01' AND t1.Date < '2021-12-31' AND c.Currency = 'EUR' GROUP BY t1.Date, c.Segment, g.ChainID ORDER BY Total_Consumption DESC;"]}, {"question_id": 1478, "answer_sql": ["SELECT customers.Segment FROM customers JOIN ( SELECT CustomerID, MIN(Consumption) as Consumption FROM yearmonth GROUP BY CustomerID ) AS SubQuery ON customers.CustomerID = SubQuery.CustomerID ORDER BY SubQuery.Consumption ASC LIMIT 1;", "SELECT Segment, MIN(Consumption) as MinConsumption FROM ( SELECT c.Segment, y.Date, y.Consumption FROM customers c JOIN yearmonth y ON c.CustomerID = y.CustomerID ) GROUP BY Segment ORDER BY MinConsumption ASC LIMIT 1;", "SELECT customers.Segment, COUNT(*) as Consumption FROM customers JOIN yearmonth ON customers.CustomerID = yearmonth .CustomerID GROUP BY customers.Segment ORDER BY Consumption ASC LIMIT 1;"]}, {"question_id": 1479, "answer_sql": ["SELECT strftime('%Y', Date) AS Year, COUNT(*) AS Consumption FROM transactions_1k JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID JOIN customers ON transactions_1k.CustomerID = customers.CustomerID WHERE Currency = 'CZK' GROUP BY strftime('%Y', Date) ORDER BY Consumption DESC;", "SELECT yearmonth.Date, SUM(yearmonth.Consumption) as TotalConsumption FROM yearmonth WHERE yearmonth.CustomerID IN (SELECT CustomerID FROM customers WHERE Currency = 'CZK') GROUP BY yearmonth.Date ORDER BY TotalConsumption DESC LIMIT 1;", "SELECT strftime('%Y', Date) as Year, SUM(Amount) as TotalConsumption FROM transactions_1k JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID JOIN customers ON transactions_1k.CustomerID = customers.CustomerID WHERE Currency = 'CZK' GROUP BY strftime('%Y', Date) ORDER BY TotalConsumption DESC;", "SELECT yearmonth.Consumption, customers.Segment, products.Description, gasstations.Country FROM yearmonth JOIN customers ON yearmonth.CustomerID = customers.CustomerID JOIN products ON yearmonth.CustomerID = products.ProductID JOIN gasstations ON yearmonth.CustomerID = gasstations.GasStationID WHERE customers.Segment = 'CZK' ORDER BY yearmonth.Consumption DESC LIMIT 1;"]}, {"question_id": 1480, "answer_sql": ["SELECT yearmonth.Date, yearmonth.Consumption FROM yearmonth JOIN customers ON yearmonth.CustomerID = customers.CustomerID WHERE customers.Segment = 'SME' AND yearmonth.Date LIKE '2013%' GROUP BY yearmonth.Date ORDER BY yearmonth.Consumption DESC LIMIT 1;", "SELECT yearmonth.Date, MAX(yearmonth.Consumption) as Consumption_peak FROM yearmonth JOIN customers ON yearmonth.CustomerID = customers.CustomerID WHERE customers.Segment = 'SME' AND yearmonth.Date LIKE '2013%' GROUP BY yearmonth.Date ORDER BY Consumption_peak DESC;", "SELECT DATE, AVG(Consumption) as AverageConsumption FROM (SELECT Date, Consumption, CustomerID FROM yearmonth WHERE DATE LIKE '2013%' GROUP BY Date, CustomerID) as SubQuery WHERE SubQuery.CustomerID IN ( SELECT CustomerID FROM customers WHERE Segment = 'SME' ) GROUP BY DATE ORDER BY AverageConsumption DESC;", "SELECT SUBSTR(Date, 1, 7) as Month, SUM(Consumption) as TotalConsumption FROM yearmonth JOIN customers ON yearmonth.CustomerID = customers.CustomerID WHERE customers.Segment = 'SME' AND SUBSTR(Date, 1, 4) = '2013' GROUP BY SUBSTR(Date, 1, 7) ORDER BY TotalConsumption DESC;", "SELECT yearmonth.Date, yearmonth.Consumption FROM yearmonth JOIN customers ON yearmonth.CustomerID = customers.CustomerID WHERE customers.Segment = 'SME' AND yearmonth.Date LIKE '2013%' GROUP BY yearmonth.Date ORDER BY yearmonth.Consumption DESC;"]}, {"question_id": 1481, "answer_sql": ["SELECT customers.Segment, AVG(yearmonth.Consumption) AS AnnualAverageConsumption FROM yearmonth JOIN customers ON yearmonth.CustomerID = customers.CustomerID WHERE customers.Segment IN ('SME', 'LAM', 'KAM') AND yearmonth.Date BETWEEN '2013-01-01' AND '2013-12-31' GROUP BY customers.Segment ORDER BY AnnualAverageConsumption DESC;"]}, {"question_id": 1482, "answer_sql": ["SELECT c.Segment, SUM(t.Amount) AS TotalConsumption, SUM(t.Amount) - SUM(t.Amount) OVER (PARTITION BY c.Segment) AS ConsumptionIncrease, (SUM(t.Amount) - SUM(t.Amount) OVER (PARTITION BY c.Segment)) / SUM(t.Amount) OVER (PARTITION BY c.Segment) * 100 AS PercentageIncrease FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID WHERE t.Date BETWEEN '201201' AND '201312' GROUP BY c.Segment ORDER BY PercentageIncrease DESC;", "SELECT c.Segment, MAX(y.Consumption) as MaxConsumption, MIN(y.Consumption) as MinConsumption, (MAX(y.Consumption) - MIN(y.Consumption)) / MAX(y.Consumption) * 100 as PercentageIncrease FROM customers c JOIN yearmonth y ON c.CustomerID = y.CustomerID WHERE y.Date BETWEEN '201201' AND '201312' GROUP BY c.Segment ORDER BY PercentageIncrease DESC;", "SELECT customers.Segment, SUM(transactions_1k.Amount * transactions_1k.Price) AS TotalConsumption, SUM(transactions_1k.Amount * transactions_1k.Price) - SUM((SELECT SUM(transactions_1k.Amount * transactions_1k.Price) FROM transactions_1k WHERE strftime('%Y', transactions_1k.Date) = '2012' AND customers.Segment = transactions_1k.CustomerID ) * transactions_1k.Price) AS Year2012Consumption, (SUM(transactions_1k.Amount * transactions_1k.Price) - SUM((SELECT SUM(transactions_1k.Amount * transactions_1k.Price) FROM transactions_1k WHERE strftime('%Y', transactions_1k.Date) = '2013' AND customers.Segment = transactions_1k.CustomerID ) * transactions_1k.Price)) / SUM(transactions_1k.Amount * transactions_1k.Price) * 100 AS PercentageIncrease FROM transactions_1k JOIN customers ON transactions_1k.CustomerID = customers.CustomerID WHERE strftime('%Y', transactions_1k.Date) BETWEEN '2012' AND '2013' GROUP BY customers.Segment ORDER BY PercentageIncrease DESC;"]}, {"question_id": 1483, "answer_sql": ["SELECT SUM(yearmonth.Consumption) as TotalConsumption FROM yearmonth JOIN customers ON yearmonth.CustomerID = customers.CustomerID JOIN transactions_1k ON yearmonth.CustomerID = transactions_1k.CustomerID WHERE transactions_1k.Date BETWEEN '2013-08-01' AND '2013-11-30';", "SELECT SUM(Consumption) FROM yearmonth WHERE Date BETWEEN '20130801' AND '20131131' AND CustomerID = 6;", "SELECT transactions_1k.Price * transactions_1k.Amount as TotalConsumption, transactions_1k.Date, customers.CustomerID FROM transactions_1k JOIN customers ON transactions_1k.CustomerID = customers.CustomerID JOIN yearmonth ON transactions_1k.Date = yearmonth.Date AND customers.CustomerID = yearmonth.CustomerID WHERE transactions_1k.Date BETWEEN '20130801' AND '20131130' AND customers.CustomerID = 6 GROUP BY transactions_1k.Date, customers.CustomerID;"]}, {"question_id": 1484, "answer_sql": ["SELECT COUNT(*) FROM gasstations JOIN customers ON gasstations.ChainID = customers.CustomerID WHERE gasstations.Country = 'Czech Republic' AND customers.Segment = 'discount';"]}, {"question_id": 1485, "answer_sql": ["SELECT SUM(Consumption) FROM yearmonth WHERE CustomerID = 7 AND Date = '201304';", "SELECT (SELECT SUM(Consumption) FROM yearmonth WHERE Date='201304' AND CustomerID=7) - (SELECT SUM(Consumption) FROM yearmonth WHERE Date='201304' AND CustomerID=5);", "SELECT SUM(Consumption) FROM yearmonth WHERE CustomerID = 7 AND Date = '201304' UNION ALL SELECT SUM(Consumption) FROM yearmonth WHERE CustomerID = 5 AND Date = '201304';", "SELECT t1.CustomerID, ym.Date, ym.Consumption, SUM(t1.Amount) AS TotalAmount FROM transactions_1k t1 JOIN yearmonth ym ON t1.CustomerID = ym.CustomerID AND ym.Date = '201304' WHERE t1.Date = '201304' GROUP BY t1.CustomerID, ym.Date HAVING t1.CustomerID = 7 AND ym.CustomerID = 5;", "SELECT SUM(Consumption) FROM yearmonth JOIN transactions_1k ON yearmonth.CustomerID = transactions_1k.CustomerID AND yearmonth.Date = '201304' WHERE transactions_1k.Date = '201304' AND transactions_1k.CustomerID IN (5, 7)"]}, {"question_id": 1486, "answer_sql": ["SELECT (SELECT COUNT(*) FROM transactions_1k WHERE CustomerID IN (SELECT CustomerID FROM customers WHERE Currency = 'CZK')) - (SELECT COUNT(*) FROM transactions_1k WHERE CustomerID IN (SELECT CustomerID FROM customers WHERE Currency = 'EUR')) AS AmountOfMoreSMEs;", "SELECT (SUM(CASE WHEN customers.Currency = 'CZK' THEN 1 ELSE 0 END)) - (SUM(CASE WHEN customers.Currency = 'EUR' THEN 1 ELSE 0 END)) AS AmountOfMoreSMEs FROM customers JOIN ( SELECT CustomerID FROM customers WHERE Currency = 'CZK' ) AS czk ON czk.CustomerID = customers.CustomerID JOIN ( SELECT CustomerID FROM customers WHERE Currency = 'EUR' ) AS eur ON eur.CustomerID = customers.CustomerID", "SELECT (SELECT COUNT(*) FROM customers WHERE Currency = 'CZK') - (SELECT COUNT(*) FROM customers WHERE Currency = 'EUR') AS AmountOfMoreSMEs;", "SELECT COUNT(*) FROM ( SELECT t.Amount FROM transactions_1k t JOIN customers c ON t.CustomerID = c.CustomerID JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE c.Currency = 'CZK' ) subquery", "SELECT customers.Currency, COUNT(*) as Total_SMEs_Czech_Koruna, (SELECT COUNT(*) FROM transactions_1k WHERE customers.Currency = 'CZK') as Total_SMEs_Czech_Koruna_In_Transactions FROM customers WHERE customers.Currency = 'CZK' GROUP BY customers.Currency HAVING Total_SMEs_Czech_Koruna != Total_SMEs_Czech_Koruna_In_Transactions;"]}, {"question_id": 1487, "answer_sql": ["SELECT c.CustomerID, c.Segment, c.Currency, SUM(t.Amount) as TotalConsumed FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID JOIN yearmonth y ON t.CustomerID = y.CustomerID AND y.Date = '201310' WHERE c.Currency = 'Euro' GROUP BY c.CustomerID, c.Segment, c.Currency ORDER BY TotalConsumed DESC LIMIT 1;"]}, {"question_id": 1488, "answer_sql": ["SELECT c.CustomerID, SUM(t.Amount) as TotalConsumed FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID WHERE t.Date = ( SELECT MAX(Date) FROM transactions_1k WHERE CustomerID = c.CustomerID ) GROUP BY c.CustomerID ORDER BY TotalConsumed DESC LIMIT 1;", "SELECT c.CustomerID, SUM(t.Amount) as TotalConsumed FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID JOIN yearmonth y ON c.CustomerID = y.CustomerID AND t.Date = y.Date WHERE c.Segment = 'KAM' AND y.Consumption > 0 GROUP BY c.CustomerID ORDER BY TotalConsumed DESC LIMIT 1;", "SELECT customers.CustomerID, SUM(transactions_1k.Amount) as TotalConsumed FROM customers JOIN transactions_1k ON customers.CustomerID = transactions_1k.CustomerID GROUP BY customers.CustomerID ORDER BY TotalConsumed DESC LIMIT 1;"]}, {"question_id": 1489, "answer_sql": ["SELECT SUM(Consumption) FROM yearmonth WHERE CustomerID IN (SELECT CustomerID FROM customers WHERE Segment = 'KAM') AND Date = '201305';", "SELECT SUM(yearmonth.Consumption) as TotalConsumption FROM transactions_1k JOIN yearmonth ON transactions_1k.CustomerID = yearmonth.CustomerID AND transactions_1k.Date = yearmonth.Date WHERE yearmonth.Date = '201305'"]}, {"question_id": 1490, "answer_sql": ["SELECT (SUM(CASE WHEN yearmonth.Consumption > 46.73 AND customers.Segment = 'LAM' THEN 1 ELSE 0 END)) * 100 / (SELECT COUNT(*) FROM customers WHERE customers.Segment = 'LAM') AS Percentage_of_LAM_customer_consumed_more_than_46_73 FROM yearmonth JOIN customers ON yearmonth.CustomerID = customers.CustomerID WHERE customers.Segment = 'LAM';", "SELECT (COUNT(*) * 100 / (SELECT COUNT(*) FROM ( SELECT t.CustomerID, y.Date, t.Amount, t.Price FROM transactions_1k t JOIN yearmonth y ON t.CustomerID = y.CustomerID AND t.Date = y.Date WHERE t.CustomerID IN ( SELECT CustomerID FROM customers WHERE Segment = 'LAM' ) AND t.Amount > 46.73 AND t.Price > 0 ))) AS Percentage_of_LAM_customer_consumed_more_than_46_73 FROM customers WHERE Segment = 'LAM';", "SELECT ( (SELECT COUNT(*) FROM customers WHERE CustomerID IN ( SELECT CustomerID FROM transactions_1k WHERE Price > 46.73 AND GasStationID IN ( SELECT GasStationID FROM gasstations WHERE Segment = 'LAM' ) )) / ( SELECT COUNT(*) FROM customers WHERE CustomerID IN ( SELECT CustomerID FROM transactions_1k WHERE Price > 46.73 ) ) ) * 100 AS Percentage_of_LAM_customer_consumed_more_than_46_73;", "SELECT (SUM(Consumption) * 100 / (SELECT COUNT(*) FROM customers WHERE Segment = 'LAM')) AS Percentage FROM yearmonth WHERE Date IN (SELECT MAX(Date) FROM yearmonth GROUP BY CustomerID);", "SELECT t.CustomerID, c.Segment, COUNT(t.TransactionID) as Total_Transactions, SUM(t.Amount) as Total_Amount FROM transactions_1k as t JOIN customers as c ON t.CustomerID = c.CustomerID JOIN gasstations as g ON t.GasStationID = g.GasStationID WHERE c.Segment = 'LAM' AND t.Amount > 46.73 GROUP BY t.CustomerID, c.Segment HAVING COUNT(t.TransactionID) > 0 ORDER BY Total_Amount DESC;"]}, {"question_id": 1491, "answer_sql": ["SELECT gasstations.Country, COUNT(*) as Total_Gas_Stations FROM gasstations JOIN transactions_1k ON gasstations.GasStationID = transactions_1k.GasStationID WHERE transactions_1k.Price < 1000 GROUP BY gasstations.Country ORDER BY Total_Gas_Stations DESC;", "SELECT gasstations.Country, COUNT(*) as TotalGasStations FROM gasstations JOIN (SELECT GasStationID, SUM(transactions_1k.Amount * transactions_1k.Price) as TotalAmount FROM transactions_1k GROUP BY GasStationID) as GasStationsAmount ON gasstations.GasStationID = GasStationsAmount.GasStationID WHERE gasstations.Country IS NOT NULL GROUP BY gasstations.Country ORDER BY TotalAmount DESC;", "SELECT Country, COUNT(*) as Value_for_money_gas_stations FROM gasstations JOIN (SELECT GasStationID, AVG(Price/Amount) as Value_for_money FROM transactions_1k GROUP BY GasStationID) as avg_price ON gasstations.GasStationID = avg_price.GasStationID WHERE avg_price.Value_for_money > 1 GROUP BY Country ORDER BY Value_for_money_gas_stations DESC;", "SELECT gasstations.Country, COUNT(*) as 'Value for Money Gas Stations' FROM gasstations JOIN transactions_1k ON gasstations.GasStationID = transactions_1k.GasStationID WHERE transactions_1k.Price < 10 GROUP BY gasstations.Country ORDER BY 'Value for Money Gas Stations' DESC;", "SELECT gasstations.Country, COUNT(*) as ValueForMoneyGasStations FROM gasstations JOIN ( SELECT GasStationID, AVG(Price/Amount) as PricePerUnit FROM transactions_1k GROUP BY GasStationID HAVING PricePerUnit IS NOT NULL ) as transactions ON gasstations.GasStationID = transactions.GasStationID GROUP BY gasstations.Country ORDER BY ValueForMoneyGasStations DESC;"]}, {"question_id": 1492, "answer_sql": ["SELECT (SUM(CASE WHEN customers.Currency = 'Euro' THEN 1 ELSE 0 END) * 100.0) / (SELECT COUNT(*) FROM customers WHERE customers.Currency = 'Euro') AS PercentageOfKAMUsesEuro FROM transactions_1k JOIN customers ON transactions_1k.CustomerID = customers.CustomerID", "SELECT (SUM(customers.Currency = 'EUR') * 100.0) / SUM(customers.Currency IS NOT NULL) AS PercentageOfKAMUsesEuro FROM customers JOIN (SELECT CustomerID FROM customers WHERE Segment = 'KAM') AS KAM_Customers ON customers.CustomerID = KAM_Customers.CustomerID;", "SELECT c.CustomerID, c.Segment, c.Currency, y.Consumption, (y.Consumption / (SELECT SUM(y.Consumption) FROM yearmonth y WHERE y.CustomerID = c.CustomerID)) * 100 as Percentage_Euro FROM customers c JOIN yearmonth y ON c.CustomerID = y.CustomerID WHERE c.Currency = 'Euro'", "SELECT c.CustomerID, c.Segment, c.Currency, COUNT(t.TransactionID) as Total_Transactions, SUM(t.Amount) as Total_Amount FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID WHERE c.Currency = 'EUR' GROUP BY c.CustomerID, c.Segment ORDER BY Total_Transactions DESC;", "SELECT (SUM(customers.Currency = 'EUR') * 100.0) / SUM(customers.Currency IS NOT NULL) AS PercentageOfKAMUsesEuro FROM customers JOIN transactions_1k ON customers.CustomerID = transactions_1k.CustomerID WHERE transactions_1k.Amount > 0;"]}, {"question_id": 1493, "answer_sql": ["SELECT c.CustomerID, COUNT(*) as 'Number of Customers', (COUNT(*)*100.0)/(SELECT COUNT(*) FROM customers) as 'Percentage' FROM customers c JOIN yearmonth ym ON c.CustomerID = ym.CustomerID JOIN transactions_1k t1k ON ym.CustomerID = t1k.CustomerID WHERE ym.Date = '201202' AND ym.Consumption > 528.3 GROUP BY c.CustomerID HAVING COUNT(*) > 0", "SELECT c.CustomerID, y.Consumption FROM customers c JOIN yearmonth y ON c.CustomerID = y.CustomerID WHERE y.Date = '201202' AND y.Consumption > 528.3 GROUP BY c.CustomerID, y.Consumption HAVING COUNT(*) = ( SELECT COUNT(*) FROM yearmonth WHERE Date = '201202' AND Consumption > 528.3 ) ORDER BY y.Consumption DESC;", "SELECT (SUM(Consumption) - (SELECT SUM(Consumption) FROM yearmonth WHERE Date = '201202' AND CustomerID IN (SELECT CustomerID FROM customers WHERE Segment = 'High'))) / (SELECT SUM(Consumption) FROM yearmonth WHERE Date = '201202' AND CustomerID IN (SELECT CustomerID FROM customers WHERE Segment = 'High')) * 100 AS Percentage FROM yearmonth WHERE Date = '201202'", "SELECT (SUM(Consumption) - (SELECT SUM(Consumption) FROM yearmonth WHERE Date = '201202')) / (SELECT SUM(Consumption) FROM yearmonth WHERE Date = '201202') * 100 FROM yearmonth WHERE Date = '201202';"]}, {"question_id": 1494, "answer_sql": ["SELECT c.CustomerID, c.Segment, c.Currency FROM customers c JOIN gasstations g ON c.CustomerID = g.ChainID WHERE g.Segment = 'Premium' AND g.Country = 'Slovakia'", "SELECT c.CustomerID, c.Segment, c.Currency FROM customers c JOIN gasstations g ON c.CustomerID = g.ChainID WHERE g.Segment = 'Premium'", "SELECT COUNT(gasstations.GasStationID) * 100 / (SELECT COUNT(*) FROM gasstations WHERE Country = 'Slovakia' AND Segment = 'Premium') AS percentage_of_slovakian_gas_stations_premium FROM gasstations JOIN customers ON gasstations.ChainID = customers.CustomerID WHERE gasstations.Country = 'Slovakia' AND gasstations.Segment = 'Premium';"]}, {"question_id": 1495, "answer_sql": ["SELECT c.CustomerID FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID JOIN yearmonth y ON c.CustomerID = y.CustomerID AND y.Date = '201309' WHERE y.Date = '201309' GROUP BY c.CustomerID ORDER BY SUM(t.Amount) DESC LIMIT 1;", "SELECT c.CustomerID, SUM(t.Amount) as TotalConsumption FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID JOIN yearmonth y ON c.CustomerID = y.CustomerID WHERE y.Date = '201309' GROUP BY c.CustomerID ORDER BY TotalConsumption DESC;", "SELECT c.CustomerID FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID WHERE t.Date = '201309' GROUP BY c.CustomerID ORDER BY SUM(t.Amount) DESC LIMIT 1;", "SELECT customers.CustomerID, customers.Segment, SUM(transactions_1k.Amount) as TotalSpent FROM transactions_1k JOIN customers ON transactions_1k.CustomerID = customers.CustomerID JOIN yearmonth ON transactions_1k.CustomerID = yearmonth.CustomerID WHERE yearmonth.Date = '201309' GROUP BY customers.CustomerID, customers.Segment ORDER BY TotalSpent DESC;", "SELECT customers.CustomerID, customers.Segment FROM customers JOIN yearmonth ON customers.CustomerID = yearmonth.CustomerID WHERE yearmonth.Date = '201309' ORDER BY yearmonth.Consumption DESC LIMIT 1;"]}, {"question_id": 1496, "answer_sql": ["SELECT customers.Segment FROM customers JOIN yearmonth ON customers.CustomerID = yearmonth .CustomerID WHERE yearmonth .Date = '201309' GROUP BY customers.Segment ORDER BY SUM( yearmonth .Consumption) ASC LIMIT 1;", "SELECT customers.Segment FROM customers JOIN yearmonth ON customers.CustomerID = yearmonth .CustomerID WHERE yearmonth .Date = '201309' ORDER BY Consumption ASC LIMIT 1;", "SELECT customers.Segment FROM customers JOIN transactions_1k ON customers.CustomerID = transactions_1k.CustomerID JOIN yearmonth ON customers.CustomerID = yearmonth.CustomerID WHERE yearmonth.Date = '201309' GROUP BY customers.Segment ORDER BY SUM(transactions_1k.Amount * transactions_1k.Price) ASC LIMIT 1;", "SELECT customers.Segment FROM customers JOIN ( SELECT CustomerID, MIN(Amount) as MinAmount FROM transactions_1k WHERE Date = '201309' GROUP BY CustomerID ) as MinAmountPerCustomer ON customers.CustomerID = MinAmountPerCustomer.CustomerID WHERE customers.Segment = 'client_segment';"]}, {"question_id": 1497, "answer_sql": ["SELECT yearmonth.CustomerID, SUM(transactions_1k.Amount) as TotalConsumed FROM yearmonth JOIN transactions_1k ON yearmonth.CustomerID = transactions_1k.CustomerID AND yearmonth.Date = '201206' GROUP BY yearmonth.CustomerID ORDER BY TotalConsumed ASC LIMIT 1;", "SELECT customers.CustomerID, SUM(yearmonth.Consumption) as TotalConsumed FROM customers JOIN yearmonth ON customers.CustomerID = yearmonth.CustomerID WHERE yearmonth.Date = '201206' GROUP BY customers.CustomerID ORDER BY TotalConsumed ASC LIMIT 1;", "SELECT c.CustomerID, c.Segment, c.Currency FROM customers c JOIN ( SELECT CustomerID, MIN(Consumption) as Consumption FROM yearmonth WHERE Date = '201206' GROUP BY CustomerID ) ym ON c.CustomerID = ym.CustomerID ORDER BY ym.Consumption ASC LIMIT 1;", "SELECT customers.CustomerID, customers.Segment, customers.Currency FROM customers JOIN transactions_1k ON customers.CustomerID = transactions_1k .CustomerID JOIN gasstations ON transactions_1k .GasStationID = gasstations.GasStationID WHERE transactions_1k .Date = '201206' GROUP BY customers.CustomerID ORDER BY MIN( transactions_1k .Amount) ASC LIMIT 1;"]}, {"question_id": 1498, "answer_sql": ["SELECT MAX(Consumption) as HighestMonthlyConsumption FROM yearmonth WHERE Date LIKE '2012%';"]}, {"question_id": 1499, "answer_sql": ["SELECT c.CustomerID, c.Segment, c.Currency, y.Date, y.Consumption FROM customers c JOIN yearmonth y ON c.CustomerID = y.CustomerID WHERE c.Currency = 'euro' ORDER BY y.Consumption DESC LIMIT 1;", "SELECT customers.CustomerID, customers.Segment, customers.Currency, SUM(transactions_1k.Amount) / 12 AS MonthlyConsumption FROM customers JOIN transactions_1k ON customers.CustomerID = transactions_1k.CustomerID WHERE customers.Currency = 'EUR' GROUP BY customers.CustomerID, customers.Segment, customers.Currency ORDER BY MonthlyConsumption DESC LIMIT 1;", "SELECT customers.Segment, SUM(transactions_1k.Amount * transactions_1k.Price) as TotalConsumption FROM customers JOIN transactions_1k ON customers.CustomerID = transactions_1k.CustomerID WHERE customers.Currency = 'EUR' GROUP BY customers.Segment ORDER BY TotalConsumption DESC LIMIT 1;", "SELECT customers.CustomerID, customers.Segment, customers.Currency, SUM(transactions_1k.Amount) as TotalConsumption FROM transactions_1k JOIN customers ON transactions_1k.CustomerID = customers.CustomerID WHERE customers.Currency = 'EUR' GROUP BY customers.CustomerID, customers.Segment, customers.Currency ORDER BY TotalConsumption DESC LIMIT 1;"]}, {"question_id": 1500, "answer_sql": ["SELECT p.Description FROM products p JOIN transactions_1k t ON p.ProductID = t.ProductID WHERE t.Date LIKE '201309%' AND t.Time LIKE '13:__:__'"]}, {"question_id": 1501, "answer_sql": ["SELECT gasstations.Country FROM gasstations JOIN transactions_1k ON gasstations.GasStationID = transactions_1k.GasStationID WHERE strftime('%Y%m', transactions_1k.Date) = '201306' GROUP BY gasstations.Country;", "SELECT gasstations.Country FROM gasstations JOIN yearmonth ON gasstations.GasStationID = yearmonth.CustomerID WHERE yearmonth.Date = '201306' GROUP BY gasstations.Country", "SELECT gasstations.Country FROM gasstations JOIN yearmonth ON gasstations.GasStationID = yearmonth.CustomerID WHERE yearmonth.Date = '201306'"]}, {"question_id": 1502, "answer_sql": []}, {"question_id": 1503, "answer_sql": ["SELECT p.Description FROM transactions_1k t JOIN products p ON t.ProductID = p.ProductID JOIN customers c ON t.CustomerID = c.CustomerID WHERE c.Currency = 'EUR' AND t.Amount > 0;", "SELECT products.Description FROM transactions_1k JOIN products ON transactions_1k.ProductID = products.ProductID JOIN customers ON transactions_1k.CustomerID = customers.CustomerID WHERE customers.Currency = 'EUR'", "SELECT products.Description FROM transactions_1k JOIN products ON transactions_1k.ProductID = products.ProductID WHERE transactions_1k.Price > 0;"]}, {"question_id": 1504, "answer_sql": ["SELECT AVG(transactions_1k.Price * transactions_1k.Amount) as AverageTotalPrice FROM transactions_1k WHERE transactions_1k.Date = '2012-01'"]}, {"question_id": 1505, "answer_sql": ["SELECT COUNT(*) FROM customers WHERE Currency = 'EUR'", "SELECT COUNT(*) FROM customers WHERE Currency = 'EUR' AND CustomerID IN ( SELECT CustomerID FROM transactions_1k WHERE Amount > 0 );", "SELECT COUNT(*) FROM customers JOIN transactions_1k ON customers.CustomerID = transactions_1k.CustomerID JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE customers.Currency = 'EUR' AND transactions_1k.Amount > 0 AND gasstations.Segment = 'Europe' AND (strftime('%Y-%m', transactions_1k .Date), customers.CustomerID) IN (SELECT strftime('%Y-%m', yearmonth .Date), customers.CustomerID FROM yearmonth WHERE Consumption > 1000);", "SELECT COUNT(*) FROM customers WHERE Currency = 'EUR' AND CustomerID IN ( SELECT CustomerID FROM yearmonth WHERE Consumption > 1000 );", "SELECT COUNT(*) FROM customers JOIN transactions_1k ON customers.CustomerID = transactions_1k.CustomerID WHERE customers.Currency = 'EUR' AND transactions_1k.Amount > 0 AND transactions_1k.Price > 0 AND transactions_1k.Price * transactions_1k.Amount > 1000;"]}, {"question_id": 1506, "answer_sql": ["SELECT p.Description FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID JOIN products p ON t.ProductID = p.ProductID WHERE g.Country = 'CZE';"]}, {"question_id": 1507, "answer_sql": ["SELECT t1.Time FROM transactions_1k t1 JOIN gasstations gs ON t1.GasStationID = gs.GasStationID WHERE gs.ChainID = 11 GROUP BY t1.Time ORDER BY COUNT(*) DESC;", "SELECT Time FROM transactions_1k WHERE GasStationID IN ( SELECT GasStationID FROM gasstations WHERE ChainID = 11 );", "SELECT t1.Time FROM transactions_1k t1 JOIN gasstations gs ON t1.GasStationID = gs.GasStationID JOIN customers c ON t1.CustomerID = c.CustomerID WHERE gs.ChainID = 11 GROUP BY t1.Time ORDER BY t1.Time;", "SELECT transactions_1k.Time FROM transactions_1k JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE gasstations.ChainID = 11 ORDER BY transactions_1k.Time;", "SELECT DISTINCT t1.Time FROM transactions_1k t1 JOIN gasstations g1 ON t1.GasStationID = g1.GasStationID JOIN customers c1 ON t1.CustomerID = c1.CustomerID JOIN gasstations g2 ON g1.ChainID = g2.ChainID WHERE g2.GasStationID = 11;"]}, {"question_id": 1508, "answer_sql": ["SELECT COUNT(*) FROM transactions_1k JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE gasstations.Country = 'CZE' AND transactions_1k.Price > 1000;", "SELECT COUNT(*) FROM transactions_1k JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID JOIN yearmonth ON transactions_1k.CustomerID = yearmonth.CustomerID WHERE gasstations.Country = 'CZE' AND transactions_1k.Price > 1000;"]}, {"question_id": 1509, "answer_sql": ["SELECT COUNT(*) FROM transactions_1k JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE gasstations.Country = 'CZE' AND transactions_1k.Date > '2012-01-01';", "SELECT COUNT(*) FROM transactions_1k JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID JOIN customers ON transactions_1k.CustomerID = customers.CustomerID WHERE gasstations.Country = 'CZE' AND strftime('%Y', transactions_1k.Date) > '2012' AND strftime('%m', transactions_1k.Date) > '01'"]}, {"question_id": 1510, "answer_sql": ["SELECT AVG(Price * Amount) as AverageTotalPrice FROM transactions_1k JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE gasstations.Country = 'CZE';", "SELECT AVG(Price) as AverageTotalPrice FROM transactions_1k JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE gasstations.Country = 'CZE';", "SELECT AVG(TotalPrice) FROM ( SELECT SUM(Amount * Price) as TotalPrice FROM transactions_1k JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE gasstations.Country = 'CZE' ) as SubQuery;", "SELECT AVG(t.Amount * t.Price) as AverageTotalPrice FROM transactions_1k as t JOIN gasstations as gs ON t.GasStationID = gs.GasStationID JOIN yearmonth as ym ON t.CustomerID = ym.CustomerID AND t.Date = ym.Date WHERE gs.Country = 'CZE';"]}, {"question_id": 1511, "answer_sql": ["SELECT AVG(Amount * Price) as AverageTotalPrice FROM transactions_1k WHERE CustomerID IN (SELECT CustomerID FROM customers WHERE Currency = 'EUR');"]}, {"question_id": 1512, "answer_sql": ["SELECT transactions_1k.CustomerID, SUM(transactions_1k.Amount) as TotalAmount FROM transactions_1k JOIN customers ON transactions_1k.CustomerID = customers.CustomerID WHERE strftime('%Y', Date) = '2012' AND strftime('%m', Date) = '08' AND strftime('%d', Date) = '25' GROUP BY customers.CustomerID ORDER BY TotalAmount DESC LIMIT 1;", "SELECT transactions_1k.Date, transactions_1k.Amount, transactions_1k.Price, customers.Currency, gasstations.Country FROM transactions_1k JOIN customers ON transactions_1k.CustomerID = customers.CustomerID JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE transactions_1k.Date = '2012-08-25' ORDER BY transactions_1k.Amount DESC;", "SELECT t.CustomerID, SUM(t.Amount) as TotalPaid FROM transactions_1k as t JOIN yearmonth as y ON t.CustomerID = y.CustomerID AND strftime('%Y-%m', y.Date) = '2012-08' WHERE strftime('%Y-%m-%d', t.Date) = '2012-08-25' GROUP BY t.CustomerID ORDER BY TotalPaid DESC;", "SELECT transactions_1k.Date, transactions_1k.Amount, transactions_1k.Price, customers.Currency, gasstations.Country, yearmonth.Consumption FROM transactions_1k JOIN customers ON transactions_1k.CustomerID = customers.CustomerID JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID JOIN yearmonth ON transactions_1k.Date = '2012-08-25' AND customers.CustomerID = yearmonth.CustomerID WHERE transactions_1k.Date = '2012-08-25' ORDER BY transactions_1k.Amount DESC LIMIT 1;", "SELECT customers.CustomerID, SUM(transactions_1k.Amount) as TotalAmount FROM customers JOIN transactions_1k ON customers.CustomerID = transactions_1k.CustomerID JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE transactions_1k.Date = '2012-08-25' GROUP BY customers.CustomerID ORDER BY TotalAmount DESC;"]}, {"question_id": 1513, "answer_sql": ["SELECT gasstations.Country FROM gasstations JOIN customers ON gasstations.ChainID = customers.CustomerID JOIN transactions_1k ON customers.CustomerID = transactions_1k.CustomerID WHERE transactions_1k.Date = '2012-08-25' ORDER BY gasstations.Country LIMIT 1;"]}, {"question_id": 1514, "answer_sql": ["SELECT customers.Currency FROM customers JOIN transactions_1k ON customers.CustomerID = transactions_1k.CustomerID JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE transactions_1k.Time = '16:25:00' AND strftime('%Y', transactions_1k.Date) = '2012' AND strftime('%m', transactions_1k.Date) = '08' LIMIT 1;", "SELECT customers.Currency FROM customers JOIN transactions_1k ON customers.CustomerID = transactions_1k.CustomerID JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE transactions_1k.Time = '16:25:00' AND transactions_1k.Date = '2012-08-24'", "SELECT p.Description FROM transactions_1k t JOIN customers c ON t.CustomerID = c.CustomerID JOIN gasstations g ON t.GasStationID = g.GasStationID JOIN products p ON t.ProductID = p.ProductID WHERE t.Time = '16:25:00' AND strftime('%Y', t.Date) = '2012' AND strftime('%m', t.Date) = '08' ORDER BY t.Amount DESC LIMIT 1;", "SELECT p.Description as Product, c.Segment as Segment, g.Country as Country FROM transactions_1k t JOIN products p ON t.ProductID = p.ProductID JOIN customers c ON t.CustomerID = c.CustomerID JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE t.Time = '16:25:00' AND t.Date = '2012-08-24' AND c.Currency = 'EUR';"]}, {"question_id": 1515, "answer_sql": ["SELECT C.Segment FROM customers C JOIN transactions_1k T1 ON C.CustomerID = T1.CustomerID WHERE T1.Date = '2012-08-23' AND T1.Time = '21:20:00';", "SELECT T1.CustomerID, C.Segment FROM transactions_1k T1 JOIN customers C ON T1.CustomerID = C.CustomerID WHERE T1.Date = '2012-08-23' AND T1.Time = '21:20:00';"]}, {"question_id": 1516, "answer_sql": ["SELECT COUNT(*) FROM transactions_1k JOIN customers ON transactions_1k.CustomerID = customers.CustomerID JOIN products ON transactions_1k.ProductID = products.ProductID JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE transactions_1k.Date = '2012-08-26' AND transactions_1k.Time < '13:00:00' AND customers.Currency = 'EUR' AND customers.Segment = 'Business';"]}, {"question_id": 1517, "answer_sql": ["SELECT Segment FROM customers ORDER BY CustomerID ASC LIMIT 1;", "SELECT customers.Segment FROM customers WHERE customers.CustomerID = (SELECT MIN(CustomerID) FROM transactions_1k);"]}, {"question_id": 1518, "answer_sql": ["SELECT gasstations.Country FROM transactions_1k JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE transactions_1k.Time = '12:42:00' AND transactions_1k.Date = '2012-08-24';", "SELECT gasstations.Country FROM gasstations JOIN yearmonth AS T1 ON gasstations.GasStationID = T1.CustomerID WHERE T1.Date = '2012-08-24 12:42:00'"]}, {"question_id": 1519, "answer_sql": ["SELECT T1.ProductID FROM transactions_1k T1 WHERE T1.Date = '2012-08-23' AND T1.Time = '21:20:00';", "SELECT products.ProductID, products.Description FROM transactions_1k JOIN products ON transactions_1k.ProductID = products.ProductID WHERE transactions_1k.Date = '2012-08-23' AND transactions_1k.Time = '21:20:00';"]}, {"question_id": 1520, "answer_sql": ["SELECT yearmonth.Date, SUM(transactions_1k.Amount * transactions_1k.Price) as TotalSpend FROM yearmonth JOIN transactions_1k ON yearmonth.CustomerID = transactions_1k.CustomerID WHERE yearmonth.Date = '2012-01-01' AND transactions_1k.Date = '2012-01-01' GROUP BY yearmonth.Date;"]}, {"question_id": 1521, "answer_sql": ["SELECT COUNT(*) FROM transactions_1k WHERE Date = '2012-08-26' AND Time = '08:00:00' AND GasStationID IN (SELECT GasStationID FROM gasstations WHERE Country = 'CZE');", "SELECT COUNT(*) FROM transactions_1k WHERE Date = '2012-08-26' AND Time = '08:00:00' AND CustomerID IN (SELECT CustomerID FROM customers WHERE Segment = 'CZE');"]}, {"question_id": 1522, "answer_sql": ["SELECT customers.Currency FROM customers JOIN yearmonth ON customers.CustomerID = yearmonth.CustomerID WHERE yearmonth.Date = '201306' AND yearmonth.Consumption = 214582.17;", "SELECT Currency FROM customers WHERE CustomerID = ( SELECT CustomerID FROM transactions_1k WHERE Date LIKE '201306%' AND Amount = 214582.17 )"]}, {"question_id": 1523, "answer_sql": ["SELECT gasstations.Country FROM transactions_1k JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE transactions_1k.CardID = 667467", "SELECT gasstations.Country FROM gasstations JOIN transactions_1k ON gasstations.GasStationID = transactions_1k.GasStationID JOIN customers ON transactions_1k.CustomerID = customers.CustomerID WHERE transactions_1k.CardID = 667467 AND customers.CustomerID = gasstations.ChainID;"]}, {"question_id": 1524, "answer_sql": ["SELECT gasstations.Country FROM transactions_1k JOIN customers ON transactions_1k.CustomerID = customers.CustomerID JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE transactions_1k.Date = '2012-08-24' AND transactions_1k.Amount = 548.4 AND customers.CustomerID = (SELECT CustomerID FROM customers WHERE customers.Segment = 'national');"]}, {"question_id": 1525, "answer_sql": ["SELECT COUNT(*) / (SELECT COUNT(*) FROM transactions_1k) * 100 AS percentage FROM transactions_1k JOIN customers ON transactions_1k.CustomerID = customers.CustomerID JOIN yearmonth ON transactions_1k.CustomerID = yearmonth.CustomerID AND transactions_1k.Date = yearmonth.Date WHERE transactions_1k.Date = '2012-08-25' AND customers.Currency = 'EUR';", "SELECT c.CustomerID, c.Currency FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID WHERE t.Date = '2012-08-25' AND c.Currency = 'EUR'", "SELECT (COUNT(*) * 100.0) / (SELECT COUNT(*) FROM transactions_1k WHERE Date = '2012-08-25' AND CustomerID IN (SELECT CustomerID FROM customers WHERE Currency = 'EUR')) AS Percentage FROM transactions_1k WHERE Date = '2012-08-25' AND CustomerID IN (SELECT CustomerID FROM customers WHERE Currency = 'EUR');", "SELECT (SUM(customers.Currency = 'EUR') * 100.0) / SUM(customers.Currency IS NOT NULL) AS Percentage FROM transactions_1k JOIN customers ON transactions_1k.CustomerID = customers.CustomerID WHERE transactions_1k.Date = '2012-08-25';", "SELECT c.CustomerID, c.Segment, c.Currency, COUNT(t.TransactionID) as TotalTransactions, SUM(t.Amount) as TotalAmount FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID WHERE t.Date = '2012-08-25' AND c.Currency = 'EUR' GROUP BY c.CustomerID, c.Segment, c.Currency ORDER BY TotalTransactions DESC;"]}, {"question_id": 1526, "answer_sql": ["SELECT (SUM(transactions_1k.Amount) - (SELECT SUM(transactions_1k.Amount) FROM transactions_1k WHERE Date = '2012-08-24' AND CustomerID = (SELECT CustomerID FROM customers WHERE Currency = 'USD'))) / (SELECT SUM(transactions_1k.Amount) FROM transactions_1k WHERE Date = '2012-08-24' AND CustomerID = (SELECT CustomerID FROM customers WHERE Currency = 'USD')) * 100 AS Consumption_Decrease_Rate FROM transactions_1k WHERE transactions_1k.Date BETWEEN '2012-08-24' AND '2013-08-24' AND transactions_1k.CustomerID = (SELECT CustomerID FROM customers WHERE Currency = 'USD');", "SELECT (consumption_2012 - consumption_2013) / consumption_2012 as Consumption_Decrease_Rate FROM (SELECT customers.CustomerID, SUM(transactions_1k.Amount) as consumption_2012 FROM customers JOIN transactions_1k ON customers.CustomerID = transactions_1k.CustomerID WHERE customers.Currency = 'USD' AND transactions_1k.Date BETWEEN '2012-08-24' AND '2013-08-24' GROUP BY customers.CustomerID) as t1 JOIN (SELECT customers.CustomerID, SUM(transactions_1k.Amount) as consumption_2013 FROM customers JOIN transactions_1k ON customers.CustomerID = transactions_1k.CustomerID WHERE customers.Currency = 'USD' AND transactions_1k.Date BETWEEN '2013-08-24' AND '2014-08-24' GROUP BY customers.CustomerID) as t2 ON t1.CustomerID = t2.CustomerID WHERE t1.consumption_2012 < t2.consumption_2013"]}, {"question_id": 1527, "answer_sql": ["SELECT gasstations.GasStationID, SUM(transactions_1k.Amount * transactions_1k.Price) as TotalRevenue FROM gasstations JOIN transactions_1k ON gasstations.GasStationID = transactions_1k.GasStationID GROUP BY gasstations.GasStationID ORDER BY TotalRevenue DESC LIMIT 1;", "SELECT gasstations.GasStationID, gasstations.Country, SUM(transactions_1k.Amount * transactions_1k.Price) as TotalRevenue FROM gasstations JOIN transactions_1k ON gasstations.GasStationID = transactions_1k.GasStationID GROUP BY gasstations.GasStationID, gasstations.Country ORDER BY TotalRevenue DESC LIMIT 1;", "SELECT gasstations.GasStationID, gasstations.ChainID, gasstations.Country, gasstations.Segment, SUM(transactions_1k.Amount * transactions_1k.Price) as TotalRevenue FROM gasstations JOIN transactions_1k ON gasstations.GasStationID = transactions_1k.GasStationID GROUP BY gasstations.GasStationID, gasstations.ChainID, gasstations.Country, gasstations.Segment ORDER BY TotalRevenue DESC LIMIT 1;"]}, {"question_id": 1528, "answer_sql": ["SELECT customers.Segment, \n       (SUM(CASE WHEN transactions_1k.ProductID = (SELECT ProductID FROM products WHERE Description = 'premium') THEN 1 ELSE 0 END) * 100.0 / SUM(1)) AS percentage\nFROM customers\nJOIN transactions_1k ON customers.CustomerID = transactions_1k.CustomerID\nGROUP BY customers.Segment;", "SELECT c.Segment, (SELECT COUNT(*) FROM transactions_1k WHERE GasStationID IN (SELECT GasStationID FROM gasstations WHERE Segment = 'SVK') AND ProductID = 1) / (SELECT COUNT(*) FROM transactions_1k WHERE GasStationID IN (SELECT GasStationID FROM gasstations WHERE Segment = 'SVK')) * 100 AS 'Premium_percentage' FROM customers c WHERE c.Segment = 'SVK';"]}, {"question_id": 1529, "answer_sql": ["SELECT t.CustomerID, g.GasStationID, SUM(t.Amount) as TotalAmount FROM transactions_1k as t JOIN gasstations as g ON t.GasStationID = g.GasStationID JOIN yearmonth as ym ON t.CustomerID = ym.CustomerID AND ym.Date = '201201' WHERE t.CustomerID = 38508 GROUP BY t.CustomerID, g.GasStationID;", "SELECT SUM(Amount) as TotalAmount FROM transactions_1k WHERE CustomerID = 38508 AND Date = '2012-01-01';", "SELECT transactions_1k.Date, transactions_1k.Amount, customers.Segment, gasstations.GasStationID, gasstations.ChainID FROM transactions_1k JOIN customers ON transactions_1k.CustomerID = customers.CustomerID JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE customers.CustomerID = 38508 AND transactions_1k.Date = '201201'"]}, {"question_id": 1530, "answer_sql": ["SELECT p.ProductID, p.Description, SUM(t.Amount) as TotalAmount FROM products p JOIN transactions_1k t ON p.ProductID = t.ProductID GROUP BY p.ProductID, p.Description ORDER BY TotalAmount DESC LIMIT 5;", "SELECT products.ProductID, products.Description FROM products JOIN transactions_1k ON products.ProductID = transactions_1k.ProductID GROUP BY products.ProductID, products.Description ORDER BY SUM(transactions_1k.Amount) DESC LIMIT 5;", "SELECT p.Description, SUM(t.Amount) as TotalAmount FROM products p JOIN transactions_1k t ON p.ProductID = t.ProductID GROUP BY p.Description ORDER BY TotalAmount DESC LIMIT 5;", "SELECT p.Description FROM products p JOIN transactions_1k t ON p.ProductID = t.ProductID GROUP BY p.ProductID, p.Description ORDER BY SUM(t.Amount) DESC LIMIT 5;", "SELECT p.Description, COUNT(t.ProductID) as TotalSales FROM products p JOIN transactions_1k t ON p.ProductID = t.ProductID GROUP BY p.ProductID, p.Description ORDER BY TotalSales DESC LIMIT 5;"]}, {"question_id": 1531, "answer_sql": ["SELECT customers.CustomerID, customers.Segment, customers.Currency, AVG(transactions_1k.Price / transactions_1k.Amount) as AveragePrice FROM transactions_1k JOIN customers ON transactions_1k.CustomerID = customers.CustomerID WHERE transactions_1k.ProductID IN ( SELECT ProductID FROM products WHERE Description = 'Top Spending Item' ) GROUP BY customers.CustomerID, customers.Segment, customers.Currency ORDER BY AveragePrice DESC LIMIT 1;", "SELECT customers.CustomerID, AVG(transactions_1k.Price / transactions_1k.Amount) as AveragePrice, customers.Currency, customers.Segment FROM customers JOIN transactions_1k ON customers.CustomerID = transactions_1k.CustomerID GROUP BY customers.CustomerID, customers.Currency, customers.Segment ORDER BY AveragePrice DESC, customers.CustomerID LIMIT 1;", "SELECT customers.CustomerID, AVG(transactions_1k.Price / transactions_1k.Amount) as AveragePrice, customers.Currency FROM transactions_1k JOIN customers ON transactions_1k.CustomerID = customers.CustomerID WHERE customers.CustomerID IN ( SELECT CustomerID FROM transactions_1k GROUP BY CustomerID HAVING COUNT(DISTINCT ProductID) = 1 ) GROUP BY customers.CustomerID, customers.Currency ORDER BY AveragePrice DESC, customers.CustomerID;", "SELECT customers.CustomerID, AVG(transactions_1k.Price / transactions_1k.Amount) as AveragePrice, customers.Currency FROM transactions_1k INNER JOIN customers ON transactions_1k.CustomerID = customers.CustomerID WHERE customers.CustomerID IN ( SELECT CustomerID FROM transactions_1k GROUP BY CustomerID HAVING COUNT(DISTINCT ProductID) = 1 ) GROUP BY customers.CustomerID, customers.Currency ORDER BY AveragePrice DESC, customers.CustomerID LIMIT 1;", "SELECT customers.CustomerID, AVG(transactions_1k.Price / transactions_1k.Amount) as 'Average Price Per Item', customers.Currency, customers.Segment FROM transactions_1k JOIN customers ON transactions_1k.CustomerID = customers.CustomerID WHERE customers.CustomerID IN ( SELECT CustomerID FROM transactions_1k GROUP BY CustomerID ORDER BY SUM(transactions_1k.Amount) DESC LIMIT 1 ) GROUP BY customers.CustomerID, customers.Currency, customers.Segment;"]}, {"question_id": 1532, "answer_sql": ["SELECT gasstations.Country FROM gasstations JOIN transactions_1k ON gasstations.GasStationID = transactions_1k.GasStationID JOIN products ON transactions_1k.ProductID = products.ProductID WHERE products.ProductID = 2 ORDER BY transactions_1k.Price DESC LIMIT 1;"]}, {"question_id": 1533, "answer_sql": ["SELECT yearmonth.Consumption FROM yearmonth JOIN transactions_1k ON yearmonth.CustomerID = transactions_1k.CustomerID JOIN products ON transactions_1k.ProductID = products.ProductID WHERE transactions_1k.Date LIKE '201208%' AND products.ProductID = 5 AND transactions_1k.Price / transactions_1k.Amount > 29.00;"]}]