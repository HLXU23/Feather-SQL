[{"question_id": 0, "answer_sql": ["SELECT MAX(`Percent (%) Eligible Free (K-12)`) AS HighestEligibleFreeRate FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.County = 'Alameda';", "SELECT MAX(`Free Meal Count (K-12)`) / MAX(`Enrollment (K-12)`) AS HighestEligibleFreeRate FROM frpm WHERE `County Code` = 'Alameda';"]}, {"question_id": 1, "answer_sql": []}, {"question_id": 2, "answer_sql": ["SELECT T1.Zip FROM schools AS T1 JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode JOIN schools_admins AS T3 ON T1.CDSCode = T3.CDSCode WHERE T2.`Charter School (Y/N)` = 1 AND T1.County = 'Fresno County Office of Education';"]}, {"question_id": 3, "answer_sql": ["SELECT AdmEmail1, AdmLName1, AdmFName1, AdmEmail2, AdmLName2, AdmFName2 \nFROM schools \nWHERE AdmEmail1 IS NOT NULL \nORDER BY (SELECT COUNT(*) FROM frpm WHERE CDSCode = schools.CDSCode AND `School Name` = AdmEmail1) DESC \nLIMIT 1;", "SELECT AdmEmail1, AdmFName1, AdmLName1, AdmEmail2, AdmFName2, AdmLName2, AdmEmail3 \nFROM schools \nWHERE AdmEmail1 IS NOT NULL \nORDER BY (SELECT COUNT(*) FROM frpm WHERE CDSCode = schools.CDSCode AND `School Name` = AdmEmail1) DESC \nLIMIT 1;"]}, {"question_id": 4, "answer_sql": ["SELECT T1.Phone FROM schools AS T1 JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`Charter School (Y/N)` = 1 AND T1.OpenDate > '2000-01-01';", "SELECT schools_admins.CDSCode, schools.Phone FROM schools_admins JOIN schools ON schools_admins.CDSCode = schools.CDSCode JOIN frpm ON schools_admins.CDSCode = frpm.CDSCode WHERE frpm.`Academic Year` LIKE '2000%' AND schools.District = 'Direct Charter';"]}, {"question_id": 5, "answer_sql": ["SELECT COUNT(*) AS num_schools \nFROM satscores \nJOIN schools ON satscores.cds = schools.CDSCode \nWHERE satscores.rtype = 'SAT' \nAND satscores.sname IS NULL \nAND satscores.dname IS NULL \nAND satscores.cname IS NULL \nAND satscores.enroll12 = 0 \nAND satscores.NumTstTakr = 0 \nAND satscores.AvgScrMath < 400 \nAND schools.Virtual = 'F';"]}, {"question_id": 6, "answer_sql": ["SELECT s.School FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode JOIN satscores sa ON s.CDSCode = sa.cds WHERE sa.enroll12 > 500 AND (s.Magnet = 1 OR s.GSserved = 'Magnet')", "SELECT s.CDSCode, s.School, s.Street, s.City, s.State, s.Latitude, s.Longitude FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode JOIN satscores sa ON s.CDSCode = sa.cds WHERE sa.enroll12 > 500 AND (s.Magnet = 1 OR s.GSserved = 'Magnet')", "SELECT s.CDSCode, s.School, s.Street, s.City, s.State, s.Latitude, s.Longitude, s.LastUpdate FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode JOIN satscores sa ON s.CDSCode = sa.cds WHERE sa.enroll12 > 500 AND (s.Magnet = 1 OR s.GSserved = 'Magnet')"]}, {"question_id": 7, "answer_sql": ["SELECT T1.Phone FROM schools AS T1 JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T2.AvgScrRead > 1500 ORDER BY T2.NumTstTakr DESC LIMIT 1;"]}, {"question_id": 8, "answer_sql": []}, {"question_id": 9, "answer_sql": ["SELECT COUNT(DISTINCT satscores.cds) AS charter_funded_schools FROM satscores JOIN frpm ON satscores.cds = frpm.CDSCode WHERE satscores.AvgScrMath > 560;"]}, {"question_id": 10, "answer_sql": []}, {"question_id": 11, "answer_sql": []}, {"question_id": 12, "answer_sql": []}, {"question_id": 13, "answer_sql": ["SELECT T1.CDSCode, T1.Phone FROM schools AS T1 JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T2.AvgScrRead > 0 AND T2.AvgScrMath > 0 AND T2.AvgScrWrite > 0 ORDER BY T2.AvgScrRead + T2.AvgScrMath + T2.AvgScrWrite DESC LIMIT 3;", "SELECT schools.Phone FROM schools JOIN schools_admins ON schools.CDSCode = schools_admins.CDSCode JOIN frpm ON schools.CDSCode = frpm.CDSCode JOIN satscores ON schools.CDSCode = satscores.cds WHERE satscores.rtype = 'SAT' ORDER BY satscores.AvgScrMath DESC LIMIT 3;"]}, {"question_id": 14, "answer_sql": ["SELECT s.CDSCode, s.NCESDist, s.NCESSchool, s.StatusType, s.County, s.District, s.School, s.Street, s.City, s.State, s.MailStreet, s.MailStrAbr, s.MailCity, s.MailZip, s.MailState, s.Phone, s.Ext, s.Website, s.OpenDate, s.ClosedDate, s.Charter, s.CharterNum, s.FundingType, s.DOC, s.DOCType, s.SOC, s.SOCType, s.EdOpsCode, s.EdOpsName, s.EILCode, s.EILName, s.GSoffered, s.GSserved, s.Virtual, s.Magnet, s.Latitude, s.Longitude, s.AdmFName1, s.AdmLName1, s.AdmEmail1, s.AdmFName2, s.AdmLName2, s.AdmEmail2, s.AdmFName3, s.AdmLName3, s.AdmEmail3, s.LastUpdate \nFROM schools s \nJOIN frpm f ON s.CDSCode = f.CDSCode \nJOIN satscores sa ON s.CDSCode = sa.cds \nORDER BY sa.enroll12 DESC \nLIMIT 5;", "SELECT s.NCESDist FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode JOIN satscores sa ON s.CDSCode = sa.cds GROUP BY s.NCESDist ORDER BY COUNT(sa.enroll12) DESC LIMIT 5;"]}, {"question_id": 15, "answer_sql": ["SELECT s.CDSCode, s.County, AVG(sc.AvgScrRead) AS AvgReadScore FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode JOIN satscores sc ON s.CDSCode = sc.cds WHERE s.StatusType = 'Active' AND sc.rtype = 'Reading' GROUP BY s.CDSCode, s.County ORDER BY AvgReadScore DESC LIMIT 1;"]}, {"question_id": 16, "answer_sql": ["SELECT COUNT(s1.CDSCode) AS num_schools FROM frpm s1 JOIN schools s2 ON s1.CDSCode = s2.CDSCode JOIN satscores s3 ON s1.CDSCode = s3.cds WHERE s3.enroll12 < 100;", "SELECT COUNT(*) AS num_schools FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds WHERE s.County = 'Alameda' AND ss.enroll12 < 100;"]}, {"question_id": 17, "answer_sql": ["SELECT schools.CharterNum FROM schools JOIN frpm ON schools.CDSCode = frpm.CDSCode JOIN satscores ON schools.CDSCode = satscores.cds WHERE satscores.AvgScrWrite = 499;"]}, {"question_id": 18, "answer_sql": ["SELECT COUNT(*) AS num_schools FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE schools.County = 'Contra Costa' AND schools.FundingType = 'Directly Funded' AND satscores.enroll12 <= 250;"]}, {"question_id": 19, "answer_sql": ["SELECT Phone FROM schools WHERE CDSCode = ( SELECT cds FROM satscores WHERE rtype = 'M' ORDER BY AvgScrMath DESC LIMIT 1 )"]}, {"question_id": 20, "answer_sql": []}, {"question_id": 21, "answer_sql": ["SELECT COUNT(DISTINCT satscores.cds) AS num_schools FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE schools.County = 'Los Angeles' AND (satscores.NumGE1500 > 500 AND satscores.NumGE1500 < 700);", "SELECT COUNT(*) AS NumberOfSchoolsWithFreeMeals FROM frpm WHERE `Free Meal Count (K-12)` > 500 AND `Free Meal Count (K-12)` < 700;", "SELECT COUNT(*) FROM schools AS S JOIN frpm AS FR ON S.CDSCode = FR.CDSCode JOIN satscores AS SAT ON S.CDSCode = SAT.cds WHERE S.County = 'Los Angeles' AND SAT.AvgScrRead > 500 AND SAT.AvgScrMath < 700;"]}, {"question_id": 22, "answer_sql": ["SELECT s.CDSCode, s.School, COUNT(satscores.cds) AS NumTstTakr FROM schools s JOIN satscores ON s.CDSCode = satscores.cds GROUP BY s.CDSCode, s.School ORDER BY NumTstTakr DESC LIMIT 1;", "SELECT s.CDSCode, s.School, COUNT(s.CDSCode) AS NumTstTakr FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds WHERE s.County = 'Contra Costa' GROUP BY s.CDSCode, s.School ORDER BY NumTstTakr DESC LIMIT 1;"]}, {"question_id": 23, "answer_sql": []}, {"question_id": 24, "answer_sql": []}, {"question_id": 25, "answer_sql": ["SELECT s.School, s.FundingType FROM frpm f JOIN schools s ON f.CDSCode = s.CDSCode JOIN satscores sa ON f.CDSCode = sa.cds WHERE sa.AvgScrMath > 400 ORDER BY s.FundingType;", "SELECT s.FundingType FROM frpm f JOIN schools s ON f.CDSCode = s.CDSCode JOIN satscores sa ON f.CDSCode = sa.cds WHERE sa.AvgScrMath > 400 ORDER BY s.FundingType;", "SELECT FundingType FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE AVGScrMath > 400 GROUP BY FundingType ORDER BY FundingType;"]}, {"question_id": 26, "answer_sql": ["SELECT s.School, s.Street, s.City, s.State, f.`Academic Year`, f.`County Code`, f.`District Code`, f.`School Code`, f.`County Name`, f.`District Name`, f.`School Name`, f.`District Type`, f.`School Type`, f.`Educational Option Type`, f.`NSLP Provision Status`, f.`Charter School (Y/N)`, f.`Charter School Number`, f.`Charter Funding Type`, f.IRC, f.`Low Grade`, f.`High Grade`, f.`Enrollment (K-12)`, f.`Free Meal Count (K-12)`, f.`Percent (%) Eligible Free (K-12)`, f.`FRPM Count (K-12)`, f.`Percent (%) Eligible FRPM (K-12)`, f.`Enrollment (Ages 5-17)`, f.`Free Meal Count (Ages 5-17)`, f.`Percent (%) Eligible Free (Ages 5-17)`, f.`FRPM Count (Ages 5-17)`, f.`Percent (%) Eligible FRPM (Ages 5-17)`, f.`2013-14 CALPADS Fall 1 Certification Status` FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE s.County = 'Monterey' AND f.`Free Meal Count (Ages 5-17)` > 800;"]}, {"question_id": 27, "answer_sql": []}, {"question_id": 28, "answer_sql": []}, {"question_id": 29, "answer_sql": []}, {"question_id": 30, "answer_sql": []}, {"question_id": 31, "answer_sql": ["SELECT frpm.CDSCode, frpm.`Academic Year`, frpm.`County Code`, frpm.`District Code`, frpm.`School Code`, frpm.`County Name`, frpm.`District Name`, frpm.`School Name`, frpm.`District Type`, frpm.`School Type`, frpm.`Educational Option Type`, frpm.`NSLP Provision Status`, frpm.`Charter School (Y/N)`, frpm.`Charter School Number`, frpm.`Charter Funding Type`, frpm.`IRC`, frpm.`Low Grade`, frpm.`High Grade`, frpm.`Enrollment (K-12)`, frpm.`Free Meal Count (K-12)`, frpm.`Percent (%) Eligible Free (K-12)`, frpm.`FRPM Count (K-12)`, frpm.`Percent (%) Eligible FRPM (K-12)`, frpm.`Enrollment (Ages 5-17)`, frpm.`Free Meal Count (Ages 5-17)`, frpm.`Percent (%) Eligible Free (Ages 5-17)`, frpm.`FRPM Count (Ages 5-17)`, frpm.`Percent (%) Eligible FRPM (Ages 5-17)`, frpm.`2013-14 CALPADS Fall 1 Certification Status` FROM frpm JOIN schools ON frpm.`CDSCode` = schools.CDSCode WHERE frpm.`Low Grade` = '10th' AND frpm.`High Grade` = '11th' ORDER BY frpm.`Enrollment (K-12)` DESC LIMIT 10;", "SELECT s10.CDSCode, s10.`Academic Year`, s10.`County Code`, s10.`District Code`, s10.`School Code`, s10.`County Name`, s10.`District Name`, s10.`School Name`, s10.`District Type`, s10.`School Type`, s10.`Educational Option Type`, s10.`NSLP Provision Status`, s10.`Charter School (Y/N)`, s10.`Charter School Number`, s10.`Charter Funding Type`, s10.IRC, s10.`Low Grade`, s10.`High Grade`, s10.`Enrollment (K-12)`, s10.`Free Meal Count (K-12)`, s10.`Percent (%) Eligible Free (K-12)`, s10.`FRPM Count (K-12)`, s10.`Percent (%) Eligible FRPM (K-12)`, s10.`Enrollment (Ages 5-17)`, s10.`Free Meal Count (Ages 5-17)`, s10.`Percent (%) Eligible Free (Ages 5-17)`, s10.`FRPM Count (Ages 5-17)`, s10.`Percent (%) Eligible FRPM (Ages 5-17)`, s10.`2013-14 CALPADS Fall 1 Certification Status` FROM frpm s10 JOIN schools s ON s10.CDSCode = s.CDSCode WHERE s10.`High Grade` BETWEEN 10 AND 11 ORDER BY s10.`Enrollment (K-12)` DESC LIMIT 10;"]}, {"question_id": 32, "answer_sql": []}, {"question_id": 33, "answer_sql": ["SELECT schools.Website, schools.School FROM schools JOIN frpm ON schools.CDSCode = frpm.CDSCode JOIN satscores ON schools.CDSCode = satscores.cds WHERE satscores.AvgScrRead BETWEEN 1900 AND 2000 AND satscores.AvgScrMath BETWEEN 1900 AND 2000 AND satscores.AvgScrWrite BETWEEN 1900 AND 2000;"]}, {"question_id": 34, "answer_sql": ["SELECT f.`Free Meal Count (Ages 5-17)`, f.`Enrollment (Ages 5-17)` FROM frpm f JOIN schools s ON f.`CDSCode` = s.CDSCode WHERE s.AdmFName1 = 'Kacey' AND s.AdmLName1 = 'Gibson';", "SELECT (satscores.AvgScrRead + satscores.AvgScrMath + satscores.AvgScrWrite) / 3 AS AvgScr FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE schools.School = 'Kacey Gibson';"]}, {"question_id": 35, "answer_sql": []}, {"question_id": 36, "answer_sql": []}, {"question_id": 37, "answer_sql": []}, {"question_id": 38, "answer_sql": ["SELECT s.Website FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode JOIN satscores sa ON s.CDSCode = sa.cds WHERE sa.enroll12 BETWEEN 2000 AND 3000;"]}, {"question_id": 39, "answer_sql": ["SELECT AVG(satscores.NumTstTakr) AS AverageTestTakers FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE schools.OpenDate BETWEEN '1980-01-01' AND '1980-12-31';", "SELECT AVG(satscores.NumTstTakr) AS AverageTestTakers FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE satscores.rtype = 'SAT' AND satscores.dname = 'Fresno' AND satscores.enroll12 > 0 AND satscores.enroll12 <= 10000 AND satscores.enroll12 >= 0 AND satscores.enroll12 IS NOT NULL AND satscores.enroll12 != ''"]}, {"question_id": 40, "answer_sql": []}, {"question_id": 41, "answer_sql": ["SELECT s.CDSCode, s.School, AVG(sc.AvgScrRead) AS AvgScrRead FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode JOIN satscores sc ON s.CDSCode = sc.cds WHERE s.Virtual = 'F' GROUP BY s.CDSCode, s.School ORDER BY AvgScrRead DESC LIMIT 5;"]}, {"question_id": 42, "answer_sql": []}, {"question_id": 43, "answer_sql": ["SELECT s.County, AVG(sa.AvgScrMath) AS AvgMathScore FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode JOIN satscores sa ON s.CDSCode = sa.cds WHERE sa.cds = (SELECT cds FROM satscores WHERE AvgScrMath = (SELECT MIN(AvgScrMath) FROM satscores)) GROUP BY s.County ORDER BY AvgMathScore ASC LIMIT 1;"]}, {"question_id": 44, "answer_sql": ["SELECT s.City, AVG(sc.AvgScrWrite) AS AvgWriteScore FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode JOIN satscores sc ON s.CDSCode = sc.cds WHERE sc.NumTstTakr >= 1500 GROUP BY s.City ORDER BY AvgWriteScore DESC LIMIT 1;", "SELECT satscores.cds, satscores.sname, satscores.dname, satscores.cname, satscores.enroll12, satscores.NumTstTakr, satscores.AvgScrWrite, schools.City FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE satscores.NumTstTakr >= 1500 AND satscores.AvgScrWrite IS NOT NULL ORDER BY satscores.NumTstTakr DESC LIMIT 1;", "SELECT satscores.cds, satscores.sname, satscores.dname, satscores.cname, satscores.enroll12, satscores.NumTstTakr, satscores.AvgScrWrite FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE satscores.NumTstTakr >= 1500 ORDER BY satscores.NumTstTakr DESC LIMIT 1;", "SELECT satscores.sname, schools.City FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE satscores.AvgScrWrite >= 1500 ORDER BY satscores.NumTstTakr DESC LIMIT 1;"]}, {"question_id": 45, "answer_sql": ["SELECT s.CDSCode, AVG(satscores.AvgScrWrite) AS AvgWriteScore FROM schools s JOIN schools_admins sa ON s.CDSCode = sa.CDSCode JOIN satscores ON s.CDSCode = satscores.cds WHERE sa.AdmFName1 = 'Ricci' AND sa.AdmLName1 = 'Ulrich' GROUP BY s.CDSCode;"]}, {"question_id": 46, "answer_sql": ["SELECT State, COUNT(*) AS Enrollees FROM schools WHERE DOC = 31 AND StatusType = 'State Special Schools' AND OpenDate <= '2023-12-31' AND ClosedDate >= '2023-01-01' GROUP BY State ORDER BY Enrollees DESC LIMIT 1;"]}, {"question_id": 47, "answer_sql": ["SELECT COUNT(schools_admins.SchoolName) / 12 AS MonthlyAverageSchools FROM schools_admins JOIN schools ON schools_admins.CDSCode = schools.CDSCode WHERE schools.County = 'Alameda' AND schools.District = 'Elementary School District' AND schools.DOC = 52 AND schools.OpenDate LIKE '1980-%'"]}, {"question_id": 48, "answer_sql": ["SELECT COUNT(CASE WHEN DOC = 52 THEN CDSCode ELSE NULL END) / COUNT(CASE WHEN DOC = 54 THEN CDSCode ELSE NULL END) AS Ratio FROM schools WHERE DOC IN (52, 54);", "SELECT COUNT(CASE WHEN DOC = 52 THEN CDSCode ELSE NULL END) / COUNT(CASE WHEN DOC = 54 THEN CDSCode ELSE NULL END) AS Ratio FROM schools WHERE DOC = 52"]}, {"question_id": 49, "answer_sql": []}, {"question_id": 50, "answer_sql": ["SELECT schools.Street AS PostalStreetAddress, schools.School AS SchoolName FROM schools WHERE schools.Street IS NOT NULL ORDER BY schools.Street ASC LIMIT 1 OFFSET 5;", "SELECT s.Street, s.School FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds WHERE ss.AvgScrMath = (SELECT MAX(AvgScrMath) FROM satscores) ORDER BY AvgScrMath DESC LIMIT 1;"]}, {"question_id": 51, "answer_sql": ["SELECT s.Street, s.StreetAbr, s.MailStreet, s.School FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode JOIN satscores sa ON s.CDSCode = sa.cds ORDER BY sa.AvgScrRead ASC LIMIT 1;", "SELECT s1.Street, s1.School FROM schools s1 JOIN satscores s2 ON s1.CDSCode = s2.cds WHERE s2.AvgScrRead = (SELECT MIN(AvgScrRead) FROM satscores) ORDER BY s1.Street;"]}, {"question_id": 52, "answer_sql": ["SELECT COUNT(*) AS TotalSchools FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE satscores.AvgScrRead + satscores.AvgScrMath + satscores.AvgScrWrite >= 1500 AND schools.City = 'Lakeport';", "SELECT COUNT(*) AS TotalSchools FROM satscores WHERE AvgScrRead + AvgScrMath + AvgScrWrite >= 1500 AND cname = 'Lakeport';"]}, {"question_id": 53, "answer_sql": ["SELECT COUNT(satscores.NumTstTakr) AS test_takers FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE schools.City = 'Fresno';", "SELECT COUNT(T2.enroll12) AS test_takers FROM schools AS T1 JOIN satscores AS T2 ON T1.CDSCode = T2.cds JOIN frpm AS T3 ON T1.CDSCode = T3.CDSCode WHERE T1.City = 'Fresno';", "SELECT COUNT(T2.cds) AS test_takers FROM schools AS T1 JOIN satscores AS T2 ON T1.CDSCode = T2.cds JOIN schools_admins AS T3 ON T1.CDSCode = T3.CDSCode WHERE T3.City = 'Fresno';"]}, {"question_id": 54, "answer_sql": ["SELECT s.CDSCode, s.Street, s.City, s.State, sa.AdmEmail1, sa.LastUpdate FROM schools s JOIN schools_admins sa ON s.CDSCode = sa.CDSCode WHERE sa.SchoolName = 'Avetik Atoian';"]}, {"question_id": 55, "answer_sql": ["SELECT COUNT(CASE WHEN T1.State = 'CA' THEN T1.CDSCode ELSE NULL END) / COUNT(CASE WHEN T1.State = 'CA' THEN T2.CDSCode ELSE NULL END) AS Ratio FROM schools AS T1 JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.State = 'CA'", "SELECT COUNT(CASE WHEN T2.State = 'CA' THEN T1.CDSCode ELSE NULL END) / COUNT(CASE WHEN T2.State = 'CA' THEN T1.CDSCode ELSE NULL END) AS Ratio FROM schools AS T1 JOIN schools_admins AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.State = 'CA'"]}, {"question_id": 56, "answer_sql": ["SELECT COUNT(*) AS Active_Schools FROM schools WHERE State = 'CA' AND (MailState IS NULL OR MailState = 'CA');", "SELECT COUNT(*) AS Active_Schools FROM schools WHERE State = 'CA' AND (MailState IS NULL OR MailState = 'CA') AND StatusType = 'Active';", "SELECT COUNT(*) AS Active_Schools FROM schools WHERE State = 'CA' AND ClosedDate IS NULL;", "SELECT COUNT(*) AS Active_Schools FROM schools WHERE State = 'CA' AND OpenDate IS NOT NULL AND ClosedDate IS NULL;", "SELECT COUNT(*) AS Active_Schools FROM schools WHERE State = 'CA' AND (AdmFName1 IS NOT NULL OR AdmLName1 IS NOT NULL OR AdmEmail1 IS NOT NULL OR AdmFName2 IS NOT NULL OR AdmLName2 IS NOT NULL OR AdmEmail2 IS NOT NULL OR AdmFName3 IS NOT NULL OR AdmLName3 IS NOT NULL OR AdmEmail3 IS NOT NULL);"]}, {"question_id": 57, "answer_sql": ["SELECT T1.Phone, T1.Ext FROM schools AS T1 JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T2.AvgScrWrite = (SELECT MAX(AvgScrWrite) FROM satscores) ORDER BY T2.AvgScrWrite DESC LIMIT 1;"]}, {"question_id": 58, "answer_sql": ["SELECT schools.Phone, schools.Ext, schools.School FROM schools JOIN schools_admins ON schools.CDSCode = schools_admins.CDSCode WHERE schools.Zip = '95203-3704';"]}, {"question_id": 59, "answer_sql": ["SELECT Website FROM schools WHERE AdmFName1 = 'Mike Larson' OR AdmFName1 = 'Dante Alvarez';"]}, {"question_id": 60, "answer_sql": ["SELECT Website FROM schools WHERE Virtual = 'P' AND Charter = 1 AND County = 'San Joaquin';", "SELECT Website FROM schools_admins JOIN schools ON schools_admins.CDSCode = schools.CDSCode WHERE Virtual = 'P' AND Charter = 1 AND County = 'San Joaquin' AND Website IS NOT NULL;"]}, {"question_id": 61, "answer_sql": ["SELECT COUNT(*) AS chartered_schools FROM schools WHERE DOC = '52' AND Charter = 1 AND City = 'Hickman';", "SELECT COUNT(*) AS chartered_schools FROM schools_admins JOIN schools ON schools_admins.CDSCode = schools.CDSCode WHERE schools_admins.DistrictCode = (SELECT DistrictCode FROM schools WHERE DOC = 52) AND schools_admins.SchoolName LIKE '%Hickman%' AND schools.Charter = 1;"]}, {"question_id": 62, "answer_sql": ["SELECT COUNT(CASE WHEN Charter = 0 THEN 1 ELSE NULL END) AS TotalNonCharteredSchools FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE `County Name` = 'Los Angeles' AND `Percent (%) Eligible Free (K-12)` < 0.18"]}, {"question_id": 63, "answer_sql": ["SELECT schools_admins.SchoolName, schools.City, schools.School FROM schools_admins JOIN schools ON schools_admins.CDSCode = schools.CDSCode WHERE schools_admins.CDSCode IN ( SELECT CDSCode FROM schools_admins WHERE Charter = 1 AND CharterNum = '00D2' )"]}, {"question_id": 64, "answer_sql": ["SELECT COUNT(DISTINCT T1.CDSCode) AS Total_Schools FROM schools AS T1 JOIN schools_admins AS T2 ON T1.CDSCode = T2.CDSCode JOIN frpm AS T3 ON T1.CDSCode = T3.CDSCode WHERE T2.City = 'Hickman' AND T1.CharterNum = '00D4';"]}, {"question_id": 65, "answer_sql": ["SELECT CAST(COUNT(CASE WHEN FundingType = 'Local' THEN CDSCode ELSE NULL END) AS REAL) * 100 / COUNT(CDSCode) AS Ratio FROM schools WHERE County = 'Santa Clara'", "SELECT CAST(SUM(CASE WHEN FundingType = 'Local' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(CASE WHEN FundingType = 'Local' THEN 1 ELSE NULL END) AS Ratio FROM schools WHERE County = 'Santa Clara'"]}, {"question_id": 66, "answer_sql": ["SELECT COUNT(DISTINCT T1.CDSCode) AS OpenedSchools FROM schools_admins AS T1 JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode JOIN frpm AS T3 ON T2.CDSCode = T3.CDSCode WHERE T1.LastUpdate BETWEEN '2000-01-01' AND '2005-12-31' AND T2.State = 'CA' AND T2.County = 'Stanislaus' AND T2.FundingType = 'Directly Funded';"]}, {"question_id": 67, "answer_sql": ["SELECT SUM(CASE WHEN T1.StatusType = 'Community College District' THEN 1 ELSE 0 END) AS TotalCCDClosure FROM schools AS T1 JOIN schools_admins AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.City = 'San Francisco' AND T1.StatusType = 'Community College District' AND T1.OpenDate <= '1989-12-31' AND T1.ClosedDate >= '1989-01-01';"]}, {"question_id": 68, "answer_sql": ["SELECT County FROM schools WHERE SOC = '11' AND OpenDate BETWEEN '1980-01-01' AND '1989-12-31' AND ClosedDate IS NOT NULL GROUP BY County ORDER BY COUNT(ClosedDate) DESC LIMIT 1;", "SELECT s.County FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE s.SOC = '11' AND f.`Academic Year` BETWEEN '1980' AND '1989' GROUP BY s.County ORDER BY COUNT(f.CDSCode) DESC LIMIT 1;"]}, {"question_id": 69, "answer_sql": ["SELECT SOC FROM schools WHERE SOC = 31 AND SOCType = 'State Special Schools';", "SELECT schools.NCESDist FROM schools JOIN schools_admins ON schools.CDSCode = schools_admins.CDSCode WHERE schools.SOC = '31' AND schools_admins.SchoolCode IS NOT NULL;"]}, {"question_id": 70, "answer_sql": ["SELECT COUNT(DISTINCT CASE WHEN StatusType = 'Active' THEN CDSCode ELSE NULL END) AS ActiveDistricts, COUNT(DISTINCT CASE WHEN StatusType = 'Closed' THEN CDSCode ELSE NULL END) AS ClosedDistricts FROM schools WHERE County = 'Alpine';", "SELECT COUNT(DISTINCT CASE WHEN schools.StatusType = 'Active' THEN schools.CDSCode WHEN schools.StatusType = 'Closed' THEN schools.CDSCode ELSE NULL END) AS DistrictCommunityDaySchools FROM schools JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE schools.County = 'Alpine';", "SELECT COUNT(DISTINCT CASE WHEN schools.StatusType = 'Active' THEN schools.CDSCode ELSE NULL END) AS ActiveDistricts, COUNT(DISTINCT CASE WHEN schools.StatusType = 'Closed' THEN schools.CDSCode ELSE NULL END) AS ClosedDistricts FROM schools JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE schools.County = 'Alpine';", "SELECT COUNT(DISTINCT CASE WHEN schools.StatusType = 'Active' THEN schools.CDSCode WHEN schools.StatusType = 'Closed' THEN schools.CDSCode ELSE NULL END) AS DistrictCommunityDaySchools FROM schools_admins JOIN schools ON schools_admins.CDSCode = schools.CDSCode WHERE schools.County = 'Alpine'", "SELECT COUNT(DISTINCT CASE WHEN T1.StatusType = 'Active' THEN T1.CDSCode ELSE NULL END) AS ActiveDistricts, COUNT(DISTINCT CASE WHEN T1.StatusType = 'Closed' THEN T1.CDSCode ELSE NULL END) AS ClosedDistricts FROM schools AS T1 JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode JOIN satscores AS T3 ON T1.CDSCode = T3.cds WHERE T1.County = 'Alpine';"]}, {"question_id": 71, "answer_sql": ["SELECT DISTINCT T2.DistrictCode FROM schools AS T1 JOIN schools_admins AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.Magnet = 0 AND T1.City = 'Fresno';"]}, {"question_id": 72, "answer_sql": ["SELECT SUM(enroll12) AS TotalStudents \nFROM schools \nJOIN frpm ON schools.CDSCode = frpm.CDSCode \nJOIN satscores ON schools.CDSCode = satscores.cds \nWHERE schools.EdOpsCode = 'SSS' \nAND schools.County = 'Fremont' \nAND satscores.rtype = 'SSS' \nAND satscores.dname = 'State Special School' \nAND satscores.cname = 'State Special School' \nAND satscores.sname = 'State Special School' \nAND satscores.enroll12 IS NOT NULL;"]}, {"question_id": 73, "answer_sql": []}, {"question_id": 74, "answer_sql": []}, {"question_id": 75, "answer_sql": []}, {"question_id": 76, "answer_sql": []}, {"question_id": 77, "answer_sql": []}, {"question_id": 78, "answer_sql": ["SELECT FundingType, COUNT(*) as GradeSpanCount FROM schools WHERE City = 'Adelanto' GROUP BY FundingType ORDER BY GradeSpanCount DESC LIMIT 1;", "SELECT `Low Grade`, `High Grade` FROM frpm WHERE `County Name` = 'Adelanto' GROUP BY `Low Grade`, `High Grade` ORDER BY COUNT(*) DESC LIMIT 1;"]}, {"question_id": 79, "answer_sql": ["SELECT T1.County, COUNT(T1.CDSCode) AS SchoolCount FROM schools AS T1 JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.Virtual = 'F' AND T1.County IN ('San Diego', 'Santa Barbara') GROUP BY T1.County ORDER BY SchoolCount DESC LIMIT 1;", "SELECT County FROM schools WHERE Virtual = 'F' GROUP BY County ORDER BY COUNT(*) DESC LIMIT 1;", "SELECT County, COUNT(*) AS SchoolCount FROM schools WHERE Virtual = 'F' GROUP BY County ORDER BY SchoolCount DESC LIMIT 1;"]}, {"question_id": 80, "answer_sql": ["SELECT schools.School, schools.Latitude, schools_admins.SchoolName FROM schools JOIN schools_admins ON schools.CDSCode = schools_admins.CDSCode WHERE schools.Latitude = (SELECT MAX(Latitude) FROM schools) ORDER BY schools.Latitude DESC LIMIT 1;"]}, {"question_id": 81, "answer_sql": []}, {"question_id": 82, "answer_sql": ["SELECT 'Low Grade' AS GradeSpan, 'High Grade' AS GradeSpan FROM schools WHERE Longitude = (SELECT MAX(Longitude) FROM schools)", "SELECT 'Low Grade' AS GradeSpan FROM schools WHERE Longitude = ( SELECT MAX(Longitude) FROM schools );", "SELECT 'frpm.High Grade' AS GradeSpan FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.Longitude = (SELECT MAX(Longitude) FROM schools);"]}, {"question_id": 83, "answer_sql": ["SELECT COUNT(DISTINCT s1.CDSCode) AS schools_with_magnet_program, COUNT(DISTINCT s2.CDSCode) AS schools_with_grade_span, s2.City FROM schools s1 JOIN schools s2 ON s1.CDSCode = s2.CDSCode WHERE s1.Magnet = 1 AND s1.GSserved = 'K-8' GROUP BY s2.City;", "SELECT COUNT(DISTINCT s1.CDSCode) AS schools_with_magnet_program, COUNT(DISTINCT s2.CDSCode) AS schools_with_grade_span FROM schools s1 JOIN schools s2 ON s1.CDSCode = s2.CDSCode WHERE s1.Magnet = 1 AND s2.GSserved = 'K-8';", "SELECT COUNT(DISTINCT s1.CDSCode) AS schools_with_magnet_program, COUNT(DISTINCT s2.CDSCode) AS schools_with_grade_span FROM schools s1 JOIN schools s2 ON s1.CDSCode = s2.CDSCode WHERE s1.Magnet = 1 AND s1.GSserved = 'K-8' GROUP BY s2.City;", "SELECT COUNT(DISTINCT s.CDSCode) AS schools_with_magnet_program, COUNT(DISTINCT s2.City) AS cities_with_kindergarten_to_8th_grade_span, COUNT(s2.CDSCode) AS schools_serving_kindergarten_to_8th_grade_span FROM schools s JOIN schools_admins sa ON s.CDSCode = sa.CDSCode JOIN schools s2 ON s2.CDSCode = sa.SchoolCode WHERE s.Magnet = 1 AND s2.GSserved = 'K-8' GROUP BY s2.City;"]}, {"question_id": 84, "answer_sql": []}, {"question_id": 85, "answer_sql": ["SELECT T1.DistrictCode FROM schools_admins AS T1 JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.AdmFName1 = 'Alusine' ORDER BY T1.DistrictCode;"]}, {"question_id": 86, "answer_sql": ["SELECT schools_admins.AdmLName1 AS AdministratorLastName, schools.District, schools.County, schools.School FROM schools_admins JOIN schools ON schools_admins.CDSCode = schools.CDSCode WHERE schools_admins.CDSCode = (SELECT CDSCode FROM schools WHERE CharterNum = '40');"]}, {"question_id": 87, "answer_sql": ["SELECT schools_admins.AdmEmail1 FROM schools_admins JOIN schools ON schools_admins.CDSCode = schools.CDSCode WHERE schools.County = 'San Bernardino County' AND schools.District = 'San Bernardino City Unified' AND schools.OpenDate BETWEEN '2009-01-01' AND '2010-12-31' AND schools.SOC = '62' AND schools.DOC = '54' AND schools_admins.DistrictCode = (SELECT DistrictCode FROM schools WHERE County = 'San Bernardino County' AND District = 'San Bernardino City Unified');"]}, {"question_id": 88, "answer_sql": ["SELECT s.AdmEmail1, s.School FROM schools s JOIN schools_admins sa ON s.CDSCode = sa.CDSCode JOIN frpm f ON s.CDSCode = f.CDSCode JOIN satscores ss ON s.CDSCode = ss.cds WHERE ss.rtype = 'SAT' AND ss.sname IS NOT NULL AND ss.dname IS NOT NULL AND ss.cname IS NOT NULL AND ss.enroll12 > 0 AND ss.AvgScrMath >= 1500 ORDER BY ss.enroll12 DESC LIMIT 1;"]}, {"question_id": 89, "answer_sql": ["SELECT COUNT(account_id) AS account_count FROM account JOIN district ON account.district_id = district.district_id WHERE district.A3 = 'POPLATEK PO OBRATU' AND district.A5 = 'East Bohemia';"]}, {"question_id": 90, "answer_sql": ["SELECT COUNT(DISTINCT t1.account_id) AS eligible_accounts FROM disp t1 JOIN account t2 ON t1.account_id = t2.account_id WHERE t2.district_id IN (SELECT district_id FROM district WHERE A3 = 'Prague')", "SELECT COUNT(DISTINCT a.account_id) AS eligible_accounts FROM account a JOIN trans t ON a.account_id = t.account_id JOIN loan l ON a.account_id = l.account_id WHERE a.district_id IN ( SELECT district_id FROM district WHERE A3 = 'Prague' )", "SELECT COUNT(account_id) AS eligible_accounts FROM account WHERE district_id IN ( SELECT district_id FROM district WHERE A3 = 'Prague' ) AND frequency = 'monthly';"]}, {"question_id": 91, "answer_sql": ["SELECT district_id, AVG(A12) AS unemployment_1995, AVG(A13) AS unemployment_1996 FROM district GROUP BY district_id ORDER BY unemployment_1995 DESC, unemployment_1996 DESC LIMIT 1;", "SELECT A12, A13 FROM district WHERE A12 > A13 ORDER BY A12, A13 DESC;", "SELECT district.A12, district.A13 FROM district WHERE district.A12 > district.A13 UNION SELECT district.A12, district.A13 FROM district WHERE district.A12 < district.A13 ORDER BY district.A12, district.A13;"]}, {"question_id": 92, "answer_sql": ["SELECT COUNT(T1.district_id) AS district_count FROM district AS T1 JOIN account AS T2 ON T1.district_id = T2.district_id JOIN client AS T3 ON T3.client_id = T1.district_id WHERE T3.gender = 'F' AND T1.A11 > 6000 AND T1.A11 < 10000;", "SELECT COUNT(district_id) AS district_count FROM district WHERE A11 > 6000 AND A11 < 10000 AND district_id IN ( SELECT district_id FROM client WHERE gender = 'F' );", "SELECT COUNT(T1.district_id) AS district_count FROM district AS T1 JOIN account AS T2 ON T1.district_id = T2.district_id JOIN client AS T3 ON T3.client_id = T1.district_id WHERE T3.gender = 'F' GROUP BY T1.district_id HAVING AVG(T1.A11) > 6000 AND AVG(T1.A11) < 10000;", "SELECT COUNT(T1.district_id) AS district_count FROM district AS T1 JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.gender = 'F' GROUP BY T1.district_id HAVING AVG(T1.A11) > 6000 AND AVG(T1.A11) < 10000;", "SELECT COUNT(T1.district_id) AS district_count FROM district AS T1 JOIN account AS T2 ON T1.district_id = T2.district_id JOIN client AS T3 ON T3.district_id = T1.district_id WHERE T3.gender = 'F' AND T2.frequency = 'Monthly' AND T1.A11 BETWEEN 6000 AND 10000;"]}, {"question_id": 93, "answer_sql": ["SELECT COUNT(T1.client_id) AS male_customers_count FROM client AS T1 JOIN account AS T2 ON T1.client_id = T2.district_id JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.gender = 'M' AND T3.A3 = 'North Bohemia' AND T2.frequency = 'Monthly' AND T3.A11 > 8000;", "SELECT COUNT(T1.client_id) AS male_customers_count FROM client AS T1 JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A3 = 'North Bohemia' GROUP BY T1.client_id HAVING AVG(T1.district_id) > 8000;"]}, {"question_id": 94, "answer_sql": []}, {"question_id": 95, "answer_sql": ["SELECT DISTINCT a.account_id FROM account a JOIN client c ON a.district_id = c.district_id WHERE c.birth_date = ( SELECT MIN(birth_date) FROM client ) GROUP BY a.account_id HAVING AVG(c.gender) = 'M' AND AVG(c.birth_date) = ( SELECT MAX(birth_date) FROM client )"]}, {"question_id": 96, "answer_sql": ["SELECT COUNT(DISTINCT c.client_id) AS owner_customers FROM client c JOIN disp d ON c.client_id = d.client_id WHERE d.type = 'POPLATEK TYDNE' AND c.gender = 'Owner';"]}, {"question_id": 97, "answer_sql": ["SELECT DISTINCT c.client_id, c.gender, c.birth_date, c.district_id FROM client c JOIN disp d ON c.client_id = d.client_id JOIN trans t ON d.account_id = t.account_id WHERE t.type = 'Statement of Issuance' AND t.operation = 'Disponent';"]}, {"question_id": 98, "answer_sql": ["SELECT a.account_id, a.frequency, a.date, MIN(l.amount) AS min_approved_amount FROM account a JOIN loan l ON a.account_id = l.account_id WHERE a.date BETWEEN '1997-01-01' AND '1997-12-31' GROUP BY a.account_id, a.frequency, a.date HAVING COUNT(*) = 1 ORDER BY a.account_id, a.frequency, a.date;", "SELECT a.account_id, a.district_id, a.frequency, a.date, MIN(l.amount) AS min_approved_amount FROM account a JOIN loan l ON a.account_id = l.account_id WHERE l.date BETWEEN '1997-01-01' AND '1997-12-31' GROUP BY a.account_id, a.district_id, a.frequency, a.date HAVING COUNT(*) = 1 ORDER BY a.account_id, a.district_id, a.frequency, a.date", "SELECT a.account_id, a.district_id, a.frequency, a.date FROM account a JOIN loan l ON a.account_id = l.account_id WHERE l.date BETWEEN '1997-01-01' AND '1997-12-31' ORDER BY l.amount ASC LIMIT 1;", "SELECT a.account_id, a.date, a.frequency, l.amount FROM loan l JOIN account a ON l.account_id = a.account_id WHERE l.date BETWEEN '1997-01-01' AND '1997-12-31' ORDER BY l.amount ASC LIMIT 1;", "SELECT a.account_id, a.district_id, a.frequency, a.date FROM account a JOIN loan l ON a.account_id = l.account_id JOIN trans t ON a.account_id = t.account_id WHERE t.date >= '1997-01-01' AND t.date < '1998-01-01' ORDER BY l.amount ASC LIMIT 1;"]}, {"question_id": 99, "answer_sql": ["SELECT a.account_id, MAX(l.amount) AS max_approved_amount FROM account a JOIN loan l ON a.account_id = l.account_id WHERE a.date >= '1993-01-01' AND a.date <= '1993-12-31' AND l.duration > 12 GROUP BY a.account_id ORDER BY max_approved_amount DESC LIMIT 1;", "SELECT a.account_id, MAX(l.amount) AS max_approved_amount FROM account a JOIN loan l ON a.account_id = l.account_id WHERE l.duration > 12 AND a.date >= '1993-01-01' GROUP BY a.account_id ORDER BY max_approved_amount DESC LIMIT 1;", "SELECT a.account_id, a.date, a.district_id, MAX(l.amount) AS max_approved_amount FROM account a JOIN loan l ON a.account_id = l.account_id WHERE l.duration > 12 GROUP BY a.account_id, a.date, a.district_id HAVING a.date >= '1993-01-01' AND a.date <= '1993-12-31' ORDER BY a.account_id, a.date, a.district_id DESC;", "SELECT a.account_id, MAX(l.amount) AS max_approved_amount FROM account a JOIN loan l ON a.account_id = l.account_id WHERE l.duration > 12 GROUP BY a.account_id HAVING a.date >= '1993-01-01' AND a.date <= '1993-12-31' ORDER BY max_approved_amount DESC;", "SELECT a.account_id, MAX(l.amount) AS max_amount FROM account a JOIN loan l ON a.account_id = l.account_id WHERE l.duration > 12 GROUP BY a.account_id HAVING a.date = '1993-01-01' AND l.date = '1993-01-01'"]}, {"question_id": 100, "answer_sql": ["SELECT COUNT(*) FROM client c JOIN account a ON c.client_id = a.district_id JOIN district d ON a.district_id = d.district_id WHERE c.gender = 'F' AND c.birth_date < '1950-01-01' AND d.A2 = 'Slovakolov';"]}, {"question_id": 101, "answer_sql": ["SELECT DISTINCT a.account_id, a.district_id, a.frequency, a.date FROM account a WHERE a.date >= '1995-01-01' ORDER BY a.date ASC LIMIT 1;", "SELECT DISTINCT a.account_id, a.date FROM account a WHERE a.date >= '1995-01-01' ORDER BY a.date ASC LIMIT 1;"]}, {"question_id": 102, "answer_sql": ["SELECT DISTINCT T1.account_id FROM account AS T1 JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T1.date < '1997-01-01' AND T2.amount > 3000", "SELECT DISTINCT a.account_id, a.date FROM account a JOIN loan l ON a.account_id = l.account_id WHERE a.date < '1997-01-01' AND l.amount > 3000"]}, {"question_id": 103, "answer_sql": ["SELECT DISTINCT T1.client_id FROM client AS T1 JOIN disp AS T2 ON T1.client_id = T2.client_id JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T3.issued = '1994-03-03';"]}, {"question_id": 104, "answer_sql": ["SELECT DISTINCT a.date AS account_open_date FROM account a JOIN trans t ON a.account_id = t.account_id WHERE t.amount = 840 AND t.date = '1998-10-14';", "SELECT DISTINCT T1.date, T2.district_id FROM trans AS T1 JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.amount = 840 AND T1.date = '1998-10-14';", "SELECT T1.date, T1.account_id FROM trans AS T1 JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.amount = 840 AND T1.date = '1998-10-14';", "SELECT a.date, a.district_id FROM account a JOIN trans t ON a.account_id = t.account_id WHERE t.amount = 840 AND t.date = '1998-10-14';"]}, {"question_id": 105, "answer_sql": []}, {"question_id": 106, "answer_sql": ["SELECT MAX(t1.amount) AS max_transaction FROM trans t1 JOIN account a ON t1.account_id = a.account_id JOIN client c ON a.district_id = c.district_id JOIN card k ON c.client_id = k.disp_id WHERE k.issued LIKE '1996-10-21'", "SELECT MAX(trans.amount) AS max_amount FROM trans JOIN account ON trans.account_id = account.account_id JOIN client ON account.district_id = client.district_id JOIN disp ON account.account_id = disp.account_id JOIN card ON disp.disp_id = card.disp_id WHERE trans.date BETWEEN '1996-10-21' AND '1996-10-21' AND card.issued BETWEEN '1996-10-21' AND '1996-10-21';"]}, {"question_id": 107, "answer_sql": ["SELECT DISTINCT c.gender FROM client c JOIN trans t ON c.client_id = t.account_id JOIN account a ON c.client_id = a.account_id JOIN district d ON a.district_id = d.district_id WHERE d.A11 = ( SELECT MAX(A11) FROM district ) ORDER BY c.birth_date ASC LIMIT 1;", "SELECT T1.gender FROM client AS T1 JOIN account AS T2 ON T1.client_id = T2.district_id JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T3.A11 = ( SELECT MAX(T4.A11) FROM district AS T4 WHERE T4.A11 IS NOT NULL ) ORDER BY T3.A11 DESC LIMIT 1;"]}, {"question_id": 108, "answer_sql": ["SELECT T1.amount FROM loan AS T1 JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T2.date = (SELECT MIN(date) FROM account WHERE account_id = T1.account_id) ORDER BY T1.amount DESC LIMIT 1;", "SELECT T1.amount FROM loan AS T1 JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T2.date = (SELECT MIN(date) FROM account WHERE account_id = T1.account_id) LIMIT 1;", "SELECT T1.client_id, T1.gender, T1.birth_date, T1.district_id, T2.amount FROM client AS T1 JOIN loan AS T3 ON T1.client_id = T3.account_id JOIN trans AS T2 ON T2.account_id = T3.account_id WHERE T3.amount = (SELECT MAX(amount) FROM loan WHERE account_id = T1.client_id) ORDER BY T2.date ASC LIMIT 1;", "SELECT T1.amount FROM loan AS T1 JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T2.date = (SELECT MIN(date) FROM account WHERE account_id = T1.account_id) ORDER BY T2.date ASC LIMIT 1;", "SELECT T1.client_id, T2.operation, T2.amount FROM client AS T1 JOIN trans AS T2 ON T1.client_id = T2.account_id WHERE T2.operation = 'loan' ORDER BY T2.amount DESC LIMIT 1;"]}, {"question_id": 109, "answer_sql": ["SELECT COUNT(DISTINCT T1.client_id) AS num_clients FROM client AS T1 JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Jesenik' AND T1.gender = 'F';", "SELECT COUNT(T1.client_id) AS num_clients FROM client AS T1 JOIN account AS T2 ON T1.client_id = T2.district_id JOIN district AS T3 ON T1.district_id = T3.district_id WHERE T1.gender = 'F' AND T3.A2 = 'Jesenik';"]}, {"question_id": 110, "answer_sql": ["SELECT T2.disp_id FROM trans AS T1 JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T1.amount = 5100 AND T1.date LIKE '1998-09-02'", "SELECT disp.disp_id FROM disp JOIN trans ON disp.account_id = trans.account_id WHERE trans.date = '1998-09-02' AND trans.type = 'USD' AND trans.amount = 5100;"]}, {"question_id": 111, "answer_sql": []}, {"question_id": 112, "answer_sql": ["SELECT T1.district_id FROM client AS T1 JOIN disp AS T2 ON T1.client_id = T2.client_id WHERE T1.gender = 'F' AND T1.birth_date = '1976-01-29' LIMIT 1;", "SELECT T1.district_id FROM client AS T1 JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T1.birth_date = '1976-01-29';"]}, {"question_id": 113, "answer_sql": ["SELECT T1.birth_date FROM client AS T1 JOIN loan AS T2 ON T1.client_id = T2.account_id WHERE T2.amount = 98832 AND T2.date LIKE '1996-01-03'", "SELECT client.birth_date FROM client JOIN loan ON client.client_id = loan.account_id JOIN trans ON client.client_id = trans.account_id WHERE loan.amount = 98832 AND loan.date LIKE '1996-01-03';"]}, {"question_id": 114, "answer_sql": ["SELECT T1.account_id FROM account AS T1 JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'Prague' AND T1.date = (SELECT MIN(date) FROM account WHERE district_id = T2.district_id);", "SELECT account_id FROM account JOIN district ON account.district_id = district.district_id WHERE district.A3 = 'Prague' ORDER BY account_id LIMIT 1;", "SELECT account.account_id FROM account JOIN district ON account.district_id = district.district_id JOIN client ON district.district_id = client.district_id WHERE district.A3 = 'Prague' AND client.gender = 'Male' AND client.birth_date BETWEEN '1950-01-01' AND '1959-12-31';"]}, {"question_id": 115, "answer_sql": ["SELECT CAST(COUNT(CASE WHEN T1.gender = 'M' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.client_id) AS percentage_of_male_clients FROM client AS T1 JOIN district AS T2 ON T1.district_id = T2.district_id JOIN account AS T3 ON T1.client_id = T3.account_id WHERE T2.A3 = 'South Bohemia'"]}, {"question_id": 116, "answer_sql": ["SELECT (t.balance - l.amount) / l.amount * 100 AS increase_rate FROM trans t JOIN loan l ON t.account_id = l.account_id WHERE t.date BETWEEN '1993-03-22' AND '1998-12-27' AND l.date = '1993-07-05'", "SELECT (t.balance - l.amount) * 100 / l.amount AS increase_rate FROM trans t JOIN loan l ON t.account_id = l.account_id WHERE t.date BETWEEN '1993-03-22' AND '1998-12-27' AND l.date = '1993-07-05'", "SELECT c.client_id, (SUM(CASE WHEN t.type = 'credit' THEN t.amount ELSE 0 END) - SUM(CASE WHEN t.type = 'debit' THEN t.amount ELSE 0 END)) / SUM(CASE WHEN t.type = 'debit' THEN t.amount ELSE 0 END) * 100.0 AS increase_rate FROM client c JOIN account a ON c.district_id = a.district_id JOIN trans t ON a.account_id = t.account_id WHERE t.date BETWEEN '1993-03-22' AND '1998-12-27' AND t.type IN ('credit', 'debit') GROUP BY c.client_id ORDER BY increase_rate DESC;"]}, {"question_id": 117, "answer_sql": ["SELECT SUM(CASE WHEN loan.status = 'A' THEN loan.amount ELSE 0 END) / SUM(loan.amount) * 100 AS percentage FROM loan WHERE loan.status = 'A';", "SELECT SUM(CASE WHEN status = 'A' THEN amount ELSE 0 END) / SUM(amount) * 100 AS percentage_paid FROM loan"]}, {"question_id": 118, "answer_sql": ["SELECT CASE WHEN SUM(CASE WHEN status = 'C' THEN 1 ELSE 0 END) * 100.0 / COUNT(*) > 0 THEN (SUM(CASE WHEN status = 'C' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) ELSE 0 END AS percentage_running_without_issue FROM loan WHERE amount < 100000;", "SELECT (SUM(CASE WHEN T1.status = 'C' THEN 1 ELSE 0 END) * 100) / COUNT(T1.status) AS percentage FROM loan AS T1 JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.amount < 100000;", "SELECT CASE WHEN SUM(CASE WHEN T1.amount < 100000 THEN 1 ELSE 0 END) = 0 THEN 0 ELSE (SUM(CASE WHEN T1.amount < 100000 THEN 1 ELSE 0 END) * 100 / COUNT(T1.amount)) END AS percentage FROM loan AS T1 JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.status = 'C';"]}, {"question_id": 119, "answer_sql": ["SELECT a.account_id, d.A2, d.A3 FROM account a JOIN district d ON a.district_id = d.district_id JOIN trans t ON a.account_id = t.account_id WHERE t.date >= '1993-01-01' AND t.type = 'POPLATEK PO OBRATU'", "SELECT a.account_id, d.A2, d.A3 FROM account a JOIN district d ON a.district_id = d.district_id WHERE a.date >= '1993-01-01' AND a.frequency = 'POPLATEK PO OBRATU'", "SELECT a.account_id, d.A2, d.A3 FROM account a JOIN district d ON a.district_id = d.district_id WHERE a.date BETWEEN '1993-01-01' AND '1993-12-31' AND a.frequency = 'POPLATEK PO OBRATU'"]}, {"question_id": 120, "answer_sql": ["SELECT DISTINCT T1.account_id FROM account AS T1 JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.district_id IN (SELECT district_id FROM district WHERE A3 LIKE 'east%') AND T1.date BETWEEN '1995-01-01' AND '2000-12-31';", "SELECT DISTINCT T2.account_id FROM trans AS T1 JOIN account AS T2 ON T1.account_id = T2.account_id JOIN client AS T3 ON T2.district_id = T3.district_id WHERE T3.district_id IN (SELECT district_id FROM district WHERE A3 = 'east Bohemia') AND T1.date BETWEEN '1995-01-01' AND '2000-12-31';", "SELECT DISTINCT T1.account_id FROM account AS T1 JOIN client AS T2 ON T1.district_id = T2.district_id JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T3.A2 = 'east Bohemia' AND T1.date BETWEEN '1995-01-01' AND '2000-12-31';", "SELECT DISTINCT T2.account_id FROM client AS T1 JOIN disp AS T2 ON T1.client_id = T2.client_id JOIN trans AS T3 ON T2.account_id = T3.account_id JOIN loan AS T4 ON T3.account_id = T4.account_id JOIN district AS T5 ON T1.district_id = T5.district_id WHERE T5.A3 = 'east Bohemia' AND T3.date BETWEEN '1995-01-01' AND '2000-12-31';"]}, {"question_id": 121, "answer_sql": ["SELECT account_id, date FROM account WHERE district_id = (SELECT district_id FROM district WHERE A2 = 'Prachatice')"]}, {"question_id": 122, "answer_sql": ["SELECT district.A3, district.A2 FROM loan JOIN account ON loan.account_id = account.account_id JOIN trans ON account.account_id = trans.account_id JOIN district ON account.district_id = district.district_id WHERE loan.loan_id = '4990';"]}, {"question_id": 123, "answer_sql": ["SELECT account.account_id, district.A2, district.A3, district.A4 FROM loan JOIN account ON loan.account_id = account.account_id JOIN district ON account.district_id = district.district_id WHERE loan.amount > 300000;", "SELECT account.account_id, district.A2, district.A3 FROM loan JOIN account ON loan.account_id = account.account_id JOIN district ON account.district_id = district.district_id WHERE loan.amount > 300000;"]}, {"question_id": 124, "answer_sql": ["SELECT loan.loan_id, district.A3, AVG(district.A11) AS average_salary FROM loan JOIN account ON loan.account_id = account.account_id JOIN district ON account.district_id = district.district_id GROUP BY loan.loan_id, district.A3 HAVING duration = 60;", "SELECT loan.loan_id, district.A3, AVG(district.A11) AS average_salary FROM loan JOIN account ON loan.account_id = account.account_id JOIN district ON account.district_id = district.district_id GROUP BY loan.loan_id, district.A3;"]}, {"question_id": 125, "answer_sql": ["SELECT d.A2, d.A3, (SELECT A13 FROM district WHERE district_id = d.district_id) - (SELECT A12 FROM district WHERE district_id = d.district_id) AS unemployment_rate_increment FROM district d JOIN client c ON d.district_id = c.district_id JOIN disp d2 ON c.client_id = d2.client_id JOIN loan l ON d2.account_id = l.account_id WHERE l.status = 'D'", "SELECT d.A2, d.A3, (A13 - A12) / A12 * 100 AS unemployment_rate_increment FROM district d JOIN account a ON d.district_id = a.district_id JOIN loan l ON a.account_id = l.account_id WHERE l.status = 'D'", "SELECT d.A2, d.A3, (SELECT A13 FROM district WHERE district_id = d.district_id) - (SELECT A12 FROM district WHERE district_id = d.district_id) AS unemployment_increment FROM district d JOIN loan l ON d.district_id = l.account_id WHERE l.status = 'D'", "SELECT d.A2, d.A3, (SELECT A12 FROM account WHERE account_id = l.account_id) - (SELECT A13 FROM account WHERE account_id = l.account_id) AS unemployment_increment FROM loan l JOIN account a ON l.account_id = a.account_id JOIN district d ON a.district_id = d.district_id WHERE l.status = 'D'"]}, {"question_id": 126, "answer_sql": ["SELECT (COUNT(CASE WHEN T2.A2 = 'Decin' THEN T1.account_id ELSE NULL END) * 100) / COUNT(T1.account_id) AS percentage FROM account AS T1 JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.date BETWEEN '1993-01-01' AND '1993-12-31';", "SELECT (COUNT(CASE WHEN T2.district_id = 1 THEN T1.account_id ELSE NULL END) * 100) / COUNT(T1.account_id) FROM account AS T1 JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.date LIKE '1993%'", "SELECT (SUM(CASE WHEN T2.A2 = 'Decin' THEN 1 ELSE 0 END) * 100.0 / COUNT(T2.A2)) AS percentage FROM account AS T1 JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.date BETWEEN '1993-01-01' AND '1993-12-31';", "SELECT (COUNT(DISTINCT CASE WHEN T1.district_id = 1 THEN T1.account_id ELSE NULL END) / COUNT(T1.account_id)) * 100 FROM account AS T1 JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Decin' AND T1.date BETWEEN '1993-01-01' AND '1993-12-31';"]}, {"question_id": 127, "answer_sql": ["SELECT DISTINCT T1.account_id FROM trans AS T1 JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T2.frequency = 'MESICNE';"]}, {"question_id": 128, "answer_sql": ["SELECT T2.A2, COUNT(*) AS female_account_holders FROM client AS T1 JOIN account AS T3 ON T1.client_id = T3.district_id JOIN district AS T2 ON T3.district_id = T2.district_id WHERE T1.gender = 'F' GROUP BY T2.A2 ORDER BY female_account_holders DESC LIMIT 10;", "SELECT T2.A2, COUNT(T1.client_id) AS female_account_count FROM client AS T1 JOIN account AS T3 ON T1.district_id = T3.district_id JOIN district AS T2 ON T3.district_id = T2.district_id WHERE T1.gender = 'F' GROUP BY T2.A2 ORDER BY female_account_count DESC LIMIT 10;", "SELECT district.A2, COUNT(*) AS female_account_count FROM client JOIN district ON client.district_id = district.district_id WHERE client.gender = 'F' GROUP BY district.A2 ORDER BY female_account_count DESC LIMIT 10;", "SELECT district_id, COUNT(*) AS female_account_holders FROM client WHERE gender = 'F' GROUP BY district_id ORDER BY female_account_holders DESC LIMIT 10;", "SELECT d.A2, d.A3, d.A4, d.A5, d.A6, d.A7, d.A8, d.A9, d.A10, d.A11, d.A12, d.A13, d.A14, d.A15, d.A16, COUNT(*) AS female_account_count FROM district d JOIN client c ON d.district_id = c.district_id WHERE c.gender = 'F' GROUP BY d.district_id ORDER BY female_account_count DESC LIMIT 10;"]}, {"question_id": 129, "answer_sql": ["SELECT d.A2 AS district_name, COUNT(t.trans_id) AS total_withdrawals FROM trans t JOIN account a ON t.account_id = a.account_id JOIN district d ON a.district_id = d.district_id WHERE t.type = 'VYDAJ' AND t.date LIKE '1996-01%' AND t.type != 'KREDITE' GROUP BY d.A2 ORDER BY total_withdrawals DESC LIMIT 10;", "SELECT d.A2 AS district_name, COUNT(*) AS withdrawals FROM trans t JOIN account a ON t.account_id = a.account_id JOIN district d ON a.district_id = d.district_id WHERE t.type = 'VYDAJ' AND t.date LIKE '1996-01%' AND a.frequency = 'M' GROUP BY d.A2 ORDER BY withdrawals DESC LIMIT 10;"]}, {"question_id": 130, "answer_sql": ["SELECT COUNT(account_id) AS account_count FROM account WHERE district_id IN ( SELECT district_id FROM district WHERE A3 = 'South Bohemia' ) AND account_id NOT IN ( SELECT account_id FROM card );"]}, {"question_id": 131, "answer_sql": ["SELECT d.A3, COUNT(*) AS active_loan_count FROM district d JOIN account a ON d.district_id = a.district_id JOIN loan l ON a.account_id = l.account_id WHERE l.status = 'C' GROUP BY d.A3 ORDER BY active_loan_count DESC LIMIT 1;", "SELECT d.A3, MAX(T1.amount) AS max_loan_amount FROM district d JOIN account a ON d.district_id = a.district_id JOIN loan T1 ON a.account_id = T1.account_id WHERE T1.status = 'C' GROUP BY d.A3 ORDER BY max_loan_amount DESC LIMIT 1;", "SELECT d.A3, MAX(l.status) FROM district d JOIN account a ON d.district_id = a.district_id JOIN loan l ON a.account_id = l.account_id WHERE l.status = 'C' GROUP BY d.A3 ORDER BY MAX(l.status) DESC LIMIT 1;", "SELECT d.A2, d.A3, d.A4, d.A5, d.A6, d.A7, d.A8, d.A9, d.A10, d.A11, d.A12, d.A13, d.A14, d.A15, d.A16 \nFROM district d \nJOIN account a ON d.district_id = a.district_id \nJOIN loan l ON a.account_id = l.account_id \nWHERE l.status = 'C' \nGROUP BY d.district_id \nORDER BY COUNT(*) DESC \nLIMIT 1;", "SELECT T1.district_id, MAX(T2.duration) AS max_duration FROM loan AS T2 JOIN account AS T1 ON T2.account_id = T1.account_id GROUP BY T1.district_id HAVING max_duration = ( SELECT MAX(T3.duration) FROM loan AS T3 JOIN account AS T4 ON T3.account_id = T4.account_id WHERE T4.district_id = T1.district_id );"]}, {"question_id": 132, "answer_sql": ["SELECT AVG(loan.amount) AS average_loan_amount FROM loan JOIN account ON loan.account_id = account.account_id JOIN client ON account.district_id = client.district_id WHERE client.gender = 'M';", "SELECT AVG(loan.amount) AS average_loan_amount FROM loan JOIN client ON loan.account_id = client.client_id WHERE client.gender = 'M';"]}, {"question_id": 133, "answer_sql": ["SELECT district.A2, district.A3, district.A4, district.A5, district.A6, district.A7, district.A8, district.A9, district.A10, district.A11, district.A12, district.A13 FROM district WHERE strftime('%Y', district.A5) = '1996' ORDER BY district.A13 DESC;", "SELECT district.A2, district.A3, district.A4, district.A5, district.A6, district.A7, district.A8, district.A9, district.A10, district.A11, district.A12, district.A13, district.A14, district.A15, district.A16 FROM district JOIN trans ON district.district_id = trans.account_id JOIN loan ON trans.account_id = loan.account_id WHERE strftime('%Y', trans.date) = '1996' ORDER BY district.A13 DESC;", "SELECT DISTINCT d.A2, d.A3, d.A4, d.A5, d.A6, d.A7, d.A8, d.A9, d.A10, d.A11, d.A12, d.A13 FROM district d JOIN account a ON d.district_id = a.district_id JOIN trans t ON a.account_id = t.account_id WHERE t.date >= '1996-01-01' AND t.date <= '1996-12-31' ORDER BY d.A13 DESC;"]}, {"question_id": 134, "answer_sql": ["SELECT COUNT(account_id) AS account_count FROM account WHERE strftime('%Y', date) = '1996' GROUP BY district_id ORDER BY account_count DESC LIMIT 1;"]}, {"question_id": 135, "answer_sql": ["SELECT COUNT(DISTINCT t1.account_id) AS account_count FROM trans t1 JOIN account a ON t1.account_id = a.account_id JOIN disp d ON t1.account_id = d.account_id JOIN card c ON d.disp_id = c.disp_id WHERE t1.operation = 'VYBER KARTOU' AND t1.balance < 0 AND a.frequency = 'POPLATEK MESICNE';", "SELECT COUNT(DISTINCT T1.account_id) AS account_count FROM trans AS T1 JOIN account AS T2 ON T1.account_id = T2.account_id JOIN card AS T3 ON T2.account_id = T3.card_id WHERE T1.type = 'VYBER KARTOU' AND T1.operation = 'POPLATEK MESICNE' AND T1.balance < 0;"]}, {"question_id": 136, "answer_sql": ["SELECT COUNT(DISTINCT loan.account_id) AS loan_count FROM loan JOIN account ON loan.account_id = account.account_id WHERE account.frequency = 'POPLATEK MESICNE' AND account.date BETWEEN '1995-01-01' AND '1997-12-31' AND loan.amount >= 250000;", "SELECT COUNT(DISTINCT T1.account_id) AS loan_count FROM loan AS T1 JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.amount >= 250000 AND T1.date BETWEEN '1995-01-01' AND '1997-12-31' AND T2.frequency = 'POPLATEK MESICNE';"]}, {"question_id": 137, "answer_sql": ["SELECT COUNT(account_id) AS running_contract_accounts FROM loan WHERE status = 'C';"]}, {"question_id": 138, "answer_sql": ["SELECT COUNT(T1.client_id) AS male_clients FROM client AS T1 JOIN account AS T2 ON T1.client_id = T2.district_id WHERE T1.gender = 'M' AND T2.date BETWEEN '1995-01-01' AND '1995-12-31' GROUP BY T1.client_id HAVING T1.client_id = ( SELECT T3.client_id FROM client AS T3 JOIN account AS T4 ON T3.client_id = T4.district_id WHERE T3.gender = 'M' AND T4.date BETWEEN '1995-01-01' AND '1995-12-31' GROUP BY T3.client_id ORDER BY COUNT(T3.client_id) DESC LIMIT 1 );", "SELECT COUNT(T1.client_id) AS male_clients FROM client AS T1 JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.date BETWEEN '1995-01-01' AND '1995-12-31'", "SELECT COUNT(T1.client_id) AS male_clients FROM client AS T1 JOIN account AS T2 ON T1.client_id = T2.district_id WHERE T1.gender = 'M' AND T2.date = '1995-01-01' GROUP BY T1.client_id HAVING T1.client_id = ( SELECT T3.client_id FROM client AS T3 JOIN account AS T4 ON T3.client_id = T4.district_id WHERE T3.gender = 'M' AND T4.date = '1995-01-01' GROUP BY T3.client_id ORDER BY COUNT(T3.client_id) DESC LIMIT 1 );", "SELECT COUNT(T1.client_id) AS male_clients FROM client AS T1 JOIN account AS T2 ON T1.client_id = T2.district_id WHERE T1.gender = 'M' AND T2.date = '1995-12-31' GROUP BY T1.client_id HAVING COUNT(T1.client_id) = ( SELECT MAX(no_of_crimes) FROM ( SELECT COUNT(*) AS no_of_crimes FROM account WHERE date = '1995-12-31' ) AS subquery );"]}, {"question_id": 139, "answer_sql": ["SELECT COUNT(T1.disp_id) AS high_level_cards FROM disp AS T1 JOIN card AS T2 ON T1.disp_id = T2.disp_id WHERE T1.type = 'gold' AND T1.type = 'disponent';"]}, {"question_id": 140, "answer_sql": ["SELECT COUNT(account_id) AS account_count FROM account JOIN district ON account.district_id = district.district_id WHERE district.A2 = 'Pisek';"]}, {"question_id": 141, "answer_sql": []}, {"question_id": 142, "answer_sql": []}, {"question_id": 143, "answer_sql": ["SELECT DISTINCT a.account_id FROM account a JOIN card c ON a.district_id = c.disp_id WHERE c.type IN ('gold', 'junior')", "SELECT account.account_id, account.district_id, account.frequency FROM account JOIN card ON account.district_id = card.disp_id WHERE card.type IN ('gold', 'junior') GROUP BY account.account_id, account.district_id, account.frequency HAVING COUNT(DISTINCT card.type) = 2;", "SELECT account.account_id FROM account JOIN card ON account.district_id = card.disp_id WHERE card.type IN ('gold', 'junior')"]}, {"question_id": 144, "answer_sql": []}, {"question_id": 145, "answer_sql": ["SELECT DISTINCT T1.account_id FROM trans AS T1 JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.type = 'VYBER KARTOU' AND T1.date >= '1998-01-01' AND T1.date < '1999-01-01' GROUP BY T1.account_id HAVING SUM(T1.amount) < ( SELECT AVG(amount) FROM trans AS T3 JOIN account AS T4 ON T3.account_id = T4.account_id WHERE T3.type = 'VYBER KARTOU' AND T3.date >= '1998-01-01' AND T3.date < '1999-01-01' )"]}, {"question_id": 146, "answer_sql": ["SELECT DISTINCT T1.client_id, T1.gender FROM client AS T1 JOIN account AS T2 ON T1.district_id = T2.district_id JOIN trans AS T3 ON T2.account_id = T3.account_id JOIN loan AS T4 ON T2.account_id = T4.account_id JOIN card AS T5 ON T5.disp_id = T3.account_id WHERE T1.gender = 'F' AND T4.status = 'LOAN' AND T5.type = 'CREDIT';", "SELECT DISTINCT T1.client_id, T1.gender FROM client AS T1 JOIN account AS T2 ON T1.district_id = T2.district_id JOIN trans AS T3 ON T2.account_id = T3.account_id JOIN loan AS T4 ON T2.account_id = T4.account_id JOIN card AS T5 ON T5.disp_id = T3.account_id WHERE T1.gender = 'F'", "SELECT client.client_id, client.gender, account.account_id FROM client JOIN account ON client.client_id = account.district_id JOIN card ON account.account_id = card.disp_id WHERE client.gender = 'F' AND card.type IS NOT NULL AND card.issued IS NOT NULL;", "SELECT DISTINCT T1.client_id, T1.gender FROM client AS T1 JOIN account AS T2 ON T1.district_id = T2.district_id JOIN card AS T3 ON T3.disp_id = T1.client_id JOIN loan AS T4 ON T4.account_id = T2.account_id WHERE T1.gender = 'F';"]}, {"question_id": 147, "answer_sql": ["SELECT COUNT(account_id) FROM account JOIN client ON account.district_id = client.district_id WHERE client.gender = 'F' AND client.district_id = (SELECT district_id FROM district WHERE A3 = 'south Bohemia')", "SELECT COUNT(T1.client_id) AS female_clients_accounts FROM client AS T1 JOIN account AS T2 ON T1.client_id = T2.district_id JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.gender = 'F' AND T3.A3 = 'south Bohemia';"]}, {"question_id": 148, "answer_sql": ["SELECT DISTINCT T1.account_id FROM account AS T1 JOIN loan AS T2 ON T1.account_id = T2.account_id JOIN disp AS T3 ON T1.account_id = T3.account_id WHERE T1.district_id = (SELECT district_id FROM district WHERE A2 = 'Tabor') AND T3.type = 'OWNER';", "SELECT DISTINCT T1.account_id FROM loan AS T1 JOIN account AS T2 ON T1.account_id = T2.account_id JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T3.A2 = 'Tabor' AND T2.frequency = 'OWNER';"]}, {"question_id": 149, "answer_sql": ["SELECT DISTINCT c.type AS account_type FROM card c JOIN trans t ON c.card_id = t.account_id JOIN account a ON c.disp_id = a.account_id JOIN district d ON a.district_id = d.district_id WHERE c.type = 'OWNER' GROUP BY c.type HAVING AVG(d.A11) > 8000 AND AVG(d.A11) <= 9000;"]}, {"question_id": 150, "answer_sql": ["SELECT COUNT(DISTINCT t.account_id) AS account_count FROM trans t JOIN account a ON t.account_id = a.account_id WHERE a.district_id = 'North Bohemia' AND t.bank = 'AB';"]}, {"question_id": 151, "answer_sql": ["SELECT DISTINCT d.A2, d.A3, d.A4, d.A5, d.A6, d.A7, d.A8, d.A9, d.A10, d.A11, d.A12, d.A13, d.A14, d.A15, d.A16 FROM district d JOIN account a ON d.district_id = a.district_id JOIN trans t ON a.account_id = t.account_id WHERE t.type = 'VYDAJ';", "SELECT DISTINCT T1.A2 FROM district AS T1 JOIN trans AS T2 ON T1.district_id = T2.account_id WHERE T2.type = 'VYDAJ';"]}, {"question_id": 152, "answer_sql": ["SELECT AVG(T3.A15) AS average_crime FROM trans AS T1 JOIN account AS T2 ON T1.account_id = T2.account_id JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.date >= '1995-12-31' GROUP BY T3.A3 HAVING COUNT(T2.account_id) > 4000 AND T3.A15 > 0", "SELECT AVG(T1.A15) AS average_crime FROM district AS T1 JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T1.A3 IN ( SELECT T3.A3 FROM district AS T3 JOIN account AS T4 ON T3.district_id = T4.district_id WHERE T4.date BETWEEN '1997-01-01' AND '1997-12-31' GROUP BY T3.A3 HAVING COUNT(T4.account_id) > 4000 )"]}, {"question_id": 153, "answer_sql": ["SELECT COUNT(*) AS loan_eligible_cards FROM card WHERE type = 'CLASSIC' AND disp_id IN ( SELECT disp_id FROM disp WHERE account_id IN ( SELECT account_id FROM account WHERE frequency = 'OWNER' ) );"]}, {"question_id": 154, "answer_sql": ["SELECT COUNT(*) AS male_clients FROM client WHERE gender = 'M' AND district_id = ( SELECT district_id FROM district WHERE A2 = 'Hl.m. Praha' );"]}, {"question_id": 155, "answer_sql": ["SELECT (COUNT(CASE WHEN type = 'gold' AND issued < '1998-01-01' THEN 1 ELSE NULL END) / COUNT(CASE WHEN type = 'gold' THEN 1 ELSE NULL END)) * 100 AS percentage_gold_issued_before_1998 FROM card"]}, {"question_id": 156, "answer_sql": ["SELECT DISTINCT T1.client_id, T1.gender, T1.birth_date, T1.district_id FROM client AS T1 JOIN account AS T2 ON T1.district_id = T2.district_id JOIN loan AS T3 ON T2.account_id = T3.account_id WHERE T3.amount = (SELECT MAX(amount) FROM loan) ORDER BY T1.district_id ASC LIMIT 1;", "SELECT DISTINCT T1.client_id, T1.gender, T1.birth_date, T1.district_id FROM client AS T1 JOIN account AS T2 ON T1.district_id = T2.district_id JOIN loan AS T3 ON T2.account_id = T3.account_id WHERE T3.amount = (SELECT MAX(amount) FROM loan) ORDER BY T1.client_id ASC LIMIT 1;", "SELECT account_id, district_id, frequency, date FROM account WHERE account_id = ( SELECT account_id FROM loan ORDER BY amount DESC LIMIT 1 );", "SELECT trans.account FROM loan JOIN account ON loan.account_id = account.account_id JOIN trans ON loan.account_id = trans.account_id WHERE loan.amount = (SELECT MAX(amount) FROM loan) ORDER BY account.account_id DESC LIMIT 1"]}, {"question_id": 157, "answer_sql": ["SELECT COUNT(*) FROM account a JOIN trans t ON a.account_id = t.account_id JOIN district d ON a.district_id = d.district_id WHERE t.date BETWEEN '1995-01-01' AND '1995-12-31' AND a.account_id = 532 AND d.A15 IS NOT NULL;"]}, {"question_id": 158, "answer_sql": []}, {"question_id": 159, "answer_sql": ["SELECT t1.date, t1.type, t1.operation, t1.amount, t1.balance, t1.k_symbol, t1.bank, t1.account FROM trans AS t1 JOIN account AS t2 ON t1.account_id = t2.account_id JOIN client AS t3 ON t2.district_id = t3.district_id WHERE t1.type = 'VYBER' AND t3.client_id = 3356;", "SELECT t1.operation, t1.type, t1.amount, t1.balance FROM trans t1 JOIN account t2 ON t1.account_id = t2.account_id WHERE t1.operation = 'VYBER' AND t2.account_id = 3356;"]}, {"question_id": 160, "answer_sql": ["SELECT COUNT(*) FROM loan WHERE account_id IN ( SELECT account_id FROM account WHERE frequency = 'POPLATEK TYDNE' ) AND amount < 200000;", "SELECT COUNT(T1.account_id) AS loan_count FROM account AS T1 JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T1.frequency = 'POPLATEK TYDNE' GROUP BY T1.account_id HAVING SUM(T2.amount) < 200000;"]}, {"question_id": 161, "answer_sql": ["SELECT card.type FROM card JOIN disp ON card.disp_id = disp.disp_id JOIN client ON disp.client_id = client.client_id JOIN account ON disp.account_id = account.account_id WHERE client.client_id = 13539;", "SELECT T2.type FROM client AS T1 JOIN disp AS T2 ON T1.client_id = T2.client_id JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T1.client_id = 13539;"]}, {"question_id": 162, "answer_sql": ["SELECT T1.A3 FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.client_id = 3541;", "SELECT T2.A3 AS region FROM client AS T1 JOIN account AS T3 ON T1.client_id = T3.district_id JOIN district AS T2 ON T3.district_id = T2.district_id WHERE T1.client_id = 3541;"]}, {"question_id": 163, "answer_sql": ["SELECT d.A2, d.A3, d.A4, d.A5, d.A6, d.A7, d.A8, d.A9, d.A10, d.A11, d.A12, d.A13, d.A14, d.A15, d.A16 FROM district d JOIN account a ON d.district_id = a.district_id JOIN loan l ON a.account_id = l.account_id WHERE l.status = 'A' GROUP BY d.district_id ORDER BY COUNT(l.account_id) DESC LIMIT 1;", "SELECT d.A2, d.A3, d.A4, COUNT(*) AS account_count FROM account a JOIN loan l ON a.account_id = l.account_id JOIN trans t ON a.account_id = t.account_id JOIN district d ON a.district_id = d.district_id WHERE l.status = 'A' GROUP BY d.district_id ORDER BY account_count DESC LIMIT 1;", "SELECT d.A2, d.A3, d.A4, COUNT(*) AS account_count FROM account a JOIN loan l ON a.account_id = l.account_id JOIN district d ON a.district_id = d.district_id WHERE l.status = 'A' GROUP BY d.district_id ORDER BY account_count DESC LIMIT 1;"]}, {"question_id": 164, "answer_sql": ["SELECT `order`.order_id, `order`.account_id, `order`.bank_to, `order`.account_to, `order`.amount, `order`.k_symbol FROM `order` WHERE `order`.order_id = 32423;", "SELECT `order`.order_id FROM `order` WHERE `order`.order_id = 32423;"]}, {"question_id": 165, "answer_sql": []}, {"question_id": 166, "answer_sql": ["SELECT COUNT(account_id) AS num_accounts FROM account WHERE district_id = (SELECT district_id FROM district WHERE A2 = 'Jesenik');"]}, {"question_id": 167, "answer_sql": ["SELECT DISTINCT c.client_id FROM client c JOIN disp d ON c.client_id = d.client_id JOIN card k ON d.disp_id = k.disp_id JOIN account a ON d.account_id = a.account_id WHERE k.issued > '1996-01-01';", "SELECT DISTINCT c.client_id FROM client c JOIN disp d ON c.client_id = d.client_id JOIN card k ON d.disp_id = k.disp_id WHERE k.issued > '1996-12-31'", "SELECT DISTINCT c.client_id FROM client c JOIN disp d ON c.client_id = d.client_id JOIN card k ON d.disp_id = k.disp_id JOIN account a ON k.disp_id = a.district_id WHERE k.issued > '1996-01-01';", "SELECT DISTINCT c.client_id FROM client c JOIN disp d ON c.client_id = d.client_id JOIN card k ON d.disp_id = k.disp_id JOIN account a ON k.disp_id = a.district_id WHERE k.issued > '1996-12-31';"]}, {"question_id": 168, "answer_sql": ["SELECT CAST(COUNT(CASE WHEN client.gender = 'F' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(*) \nFROM client \nJOIN account ON client.district_id = account.district_id \nJOIN district ON account.district_id = district.district_id \nWHERE district.A11 > 10000", "SELECT CAST(COUNT(CASE WHEN client.gender = 'F' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(*) FROM client WHERE client.district_id = ( SELECT district_id FROM account WHERE account.district_id = ( SELECT district_id FROM district WHERE district.A11 > 10000 ) )", "SELECT CAST(COUNT(CASE WHEN client.gender = 'F' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(*) FROM client JOIN account ON client.client_id = account.district_id JOIN district ON account.district_id = district.district_id WHERE district.A11 > 10000", "SELECT COUNT(CASE WHEN T1.gender = 'F' THEN 1 ELSE NULL END) / COUNT(T1.client_id) * 100 FROM client AS T1 JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A11 > 10000"]}, {"question_id": 169, "answer_sql": []}, {"question_id": 170, "answer_sql": ["SELECT COUNT(*) FROM trans WHERE operation = 'VYBER KARTOU' AND date > '1995-12-31';", "SELECT COUNT(*) AS credit_card_withdrawals FROM trans JOIN card ON trans.account_id = card.disp_id WHERE trans.type = 'VYBER KARTOU' AND trans.date > '1995-12-31';"]}, {"question_id": 171, "answer_sql": ["SELECT SUM(CASE WHEN T3.A3 = 'North Bohemia' THEN 1 ELSE 0 END) - SUM(CASE WHEN T3.A3 = 'East Bohemia' THEN 1 ELSE 0 END) AS difference FROM trans AS T1 JOIN account AS T2 ON T1.account_id = T2.account_id JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T3.A3 IN ('North Bohemia', 'East Bohemia') AND T1.date BETWEEN '1996-01-01' AND '1996-12-31';", "SELECT SUM(CASE WHEN T1.A3 = 'North Bohemia' THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.A3 = 'East Bohemia' THEN 1 ELSE 0 END) AS difference FROM district AS T1 JOIN loan AS T2 ON T1.district_id = T2.account_id WHERE T2.date BETWEEN '1996-01-01' AND '1996-12-31';"]}, {"question_id": 172, "answer_sql": ["SELECT COUNT(DISTINCT T1.account_id) AS owner_dispositions, COUNT(DISTINCT T2.account_id) AS disponent_dispositions FROM account AS T1 JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T1.account_id BETWEEN 1 AND 10;"]}, {"question_id": 173, "answer_sql": ["SELECT account.frequency, SUM(amount) AS total_amount FROM account JOIN trans ON account.account_id = trans.account_id WHERE account.account_id = 3 GROUP BY account.frequency;", "SELECT DISTINCT account.frequency, SUM(amount) AS total_debit FROM trans JOIN account ON trans.account_id = account.account_id WHERE trans.account_id = 3 AND trans.type = 'debit' GROUP BY account.frequency ORDER BY total_debit DESC LIMIT 1;", "SELECT account_id, frequency, COUNT(*) AS account_statement_requests FROM account WHERE account_id = 3 GROUP BY account_id, frequency;", "SELECT account.date, COUNT(*) AS frequency FROM trans JOIN account ON trans.account_id = account.account_id WHERE trans.account_id = 3 GROUP BY account.date ORDER BY frequency DESC;", "SELECT a.district_id, COUNT(*) AS frequency FROM trans t JOIN account a ON t.account_id = a.account_id WHERE t.account_id = 3 GROUP BY a.district_id ORDER BY frequency DESC;"]}, {"question_id": 174, "answer_sql": ["SELECT DISTINCT birth_date FROM client WHERE client_id = (SELECT account_id FROM account WHERE account_id = 130 AND district_id = (SELECT district_id FROM account WHERE account_id = 130))", "SELECT DISTINCT T1.birth_date FROM client AS T1 INNER JOIN account AS T2 ON T1.client_id = T2.district_id WHERE T2.account_id = 130;"]}, {"question_id": 175, "answer_sql": ["SELECT COUNT(T1.account_id) AS account_count FROM disp AS T1 JOIN trans AS T2 ON T1.account_id = T2.account_id JOIN account AS T3 ON T2.account_id = T3.account_id WHERE T1.type = 'owner_disposition' AND T2.operation = 'request for statement';"]}, {"question_id": 176, "answer_sql": ["SELECT loan.amount, loan.status FROM loan JOIN account ON loan.account_id = account.account_id JOIN client ON account.district_id = client.district_id WHERE client.client_id = 992;", "SELECT SUM(amount) AS total_debt, status FROM loan WHERE account_id IN ( SELECT account_id FROM client WHERE client_id = 992 ) GROUP BY status;", "SELECT loan.amount, loan.payments FROM loan JOIN account ON loan.account_id = account.account_id JOIN client ON account.district_id = client.district_id WHERE client.client_id = 992;"]}, {"question_id": 177, "answer_sql": ["SELECT SUM(trans.amount), client.gender FROM trans JOIN account ON trans.account_id = account.account_id JOIN client ON account.district_id = client.district_id WHERE trans.trans_id = 851 AND client.client_id = 4 GROUP BY client.gender;", "SELECT SUM(trans.amount), account.account_id, account.district_id, account.frequency, account.date, account.account_id AS owner_account_id, account.district_id AS owner_district_id, account.frequency AS owner_frequency, account.date AS owner_date, account.account_id AS owner_account_id, account.district_id AS owner_district_id, account.frequency AS owner_frequency, account.date AS owner_date FROM trans JOIN account ON trans.account_id = account.account_id WHERE trans.trans_id = 851 AND trans.account_id = 4 GROUP BY trans.trans_id, trans.account_id, account.account_id, account.district_id, account.frequency, account.date, account.account_id, account.district_id, account.frequency, account.date"]}, {"question_id": 178, "answer_sql": ["SELECT DISTINCT c.type FROM card c JOIN disp d ON c.disp_id = d.disp_id JOIN client cl ON d.client_id = cl.client_id WHERE cl.client_id = 9;", "SELECT t2.type FROM client AS t1 JOIN disp AS t2 ON t1.client_id = t2.client_id JOIN card AS t3 ON t2.disp_id = t3.disp_id WHERE t1.client_id = 9;"]}, {"question_id": 179, "answer_sql": ["SELECT SUM(trans.amount) AS total_payment FROM trans JOIN account ON trans.account_id = account.account_id JOIN loan ON trans.account_id = loan.account_id JOIN client ON account.district_id = client.district_id WHERE trans.date BETWEEN '1998-01-01' AND '1998-12-31' AND client.client_id = 617;", "SELECT SUM(t1.amount) AS total_payment FROM trans t1 JOIN account a ON t1.account_id = a.account_id JOIN client c ON a.district_id = c.district_id WHERE t1.date BETWEEN '1998-01-01' AND '1998-12-31' AND c.client_id = 617;", "SELECT SUM(trans.amount) AS total_payment FROM trans JOIN account ON trans.account_id = account.account_id JOIN disp ON trans.account_id = disp.account_id JOIN client ON disp.client_id = client.client_id WHERE trans.date BETWEEN '1998-01-01' AND '1998-12-31' AND client.client_id = 617;"]}, {"question_id": 180, "answer_sql": ["SELECT c.client_id FROM client c JOIN account a ON c.client_id = a.district_id JOIN district d ON a.district_id = d.district_id WHERE c.birth_date BETWEEN '1983-01-01' AND '1987-12-31' AND d.A7 = 'East Bohemia';"]}, {"question_id": 181, "answer_sql": ["SELECT DISTINCT T1.client_id FROM client AS T1 JOIN loan AS T2 ON T1.client_id = T2.account_id WHERE T1.gender = 'F' ORDER BY T2.amount DESC LIMIT 3;", "SELECT c.client_id FROM client c JOIN disp d ON c.client_id = d.client_id JOIN loan l ON d.account_id = l.account_id WHERE c.gender = 'F' ORDER BY l.amount DESC LIMIT 3;"]}, {"question_id": 182, "answer_sql": ["SELECT COUNT(T1.client_id) AS male_customers FROM client AS T1 JOIN account AS T2 ON T1.district_id = T2.district_id JOIN trans AS T3 ON T1.client_id = T3.account_id WHERE T1.gender = 'M' AND T1.birth_date BETWEEN '1974-01-01' AND '1976-12-31' AND T3.type = 'SIPO' AND T3.amount > 4000;"]}, {"question_id": 183, "answer_sql": ["SELECT COUNT(account_id) AS account_count FROM account WHERE district_id = (SELECT district_id FROM district WHERE A2 = 'Beroun') AND date > '1996-12-31';", "SELECT COUNT(account_id) AS account_count FROM account WHERE district_id = (SELECT district_id FROM district WHERE A3 = 'Beroun') AND date > '1996-12-31';"]}, {"question_id": 184, "answer_sql": []}, {"question_id": 185, "answer_sql": ["SELECT COUNT(CASE WHEN gender = 'F' THEN client_id ELSE NULL END) * 100.0 / COUNT(client_id) AS proportion_female FROM client WHERE district_id = (SELECT district_id FROM district WHERE A3 = 'Prague')", "SELECT COUNT(CASE WHEN T1.gender = 'F' THEN 1 ELSE NULL END) * 100 / COUNT(T1.client_id) AS proportion_female FROM client AS T1 JOIN account AS T2 ON T1.client_id = T2.district_id JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T3.A3 = 'Prague';", "SELECT COUNT(CASE WHEN client.gender = 'F' THEN client.client_id END) * 100 / COUNT(client.client_id) AS proportion_female FROM client JOIN account ON client.district_id = account.district_id WHERE account.district_id = (SELECT district_id FROM district WHERE A3 = 'Prague');", "SELECT COUNT(CASE WHEN client.gender = 'F' THEN client.client_id ELSE NULL END) / COUNT(client.client_id) * 100 AS female_proportion FROM client JOIN account ON client.district_id = account.district_id WHERE account.district_id = (SELECT district_id FROM district WHERE A3 = 'Prague');"]}, {"question_id": 186, "answer_sql": ["SELECT CAST(COUNT(CASE WHEN gender = 'M' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(trans_id) AS percentage \nFROM client \nJOIN trans ON client.client_id = trans.account_id \nWHERE gender = 'M' AND trans.type = 'POPLATEK TYDNE';", "SELECT (COUNT(CASE WHEN client.gender = 'M' THEN 1 ELSE NULL END) / COUNT(CASE WHEN frequency = 'POPLATEK TYDNE' THEN 1 ELSE NULL END)) * 100 AS percentage FROM client JOIN account ON client.district_id = account.district_id JOIN trans ON account.account_id = trans.account_id WHERE frequency = 'POPLATEK TYDNE'"]}, {"question_id": 187, "answer_sql": ["SELECT COUNT(DISTINCT T1.client_id) AS client_count FROM client AS T1 JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T2.frequency = 'POPLATEK TYDNE';", "SELECT COUNT(DISTINCT T1.client_id) AS client_count FROM client AS T1 JOIN account AS T2 ON T1.district_id = T2.district_id JOIN trans AS T3 ON T1.district_id = T3.account_id WHERE T2.frequency = 'POPLATEK TYDNE';", "SELECT COUNT(DISTINCT client.client_id) AS client_count FROM client JOIN account ON client.district_id = account.district_id WHERE account.frequency = 'POPLATEK TYDNE' AND client.gender = 'User';"]}, {"question_id": 188, "answer_sql": ["SELECT a.account_id, a.district_id, a.frequency, a.date, MIN(l.amount) AS min_amount FROM account a JOIN loan l ON a.account_id = l.account_id WHERE l.duration > 24 AND a.date < '1997-12-31' GROUP BY a.account_id, a.district_id, a.frequency, a.date ORDER BY a.date ASC, l.amount ASC LIMIT 1;", "SELECT a.account_id, a.district_id, a.frequency, a.date, MIN(l.amount) AS min_amount FROM account a JOIN loan l ON a.account_id = l.account_id WHERE l.duration > 24 AND a.date < '1997-12-31' GROUP BY a.account_id, a.district_id, a.frequency, a.date ORDER BY a.date ASC, l.amount ASC LIMIT 10;", "SELECT a.account_id, a.district_id, a.frequency, a.date, MIN(l.amount) AS min_amount FROM account a JOIN loan l ON a.account_id = l.account_id WHERE l.duration > 24 AND a.date < '1997-12-31' GROUP BY a.account_id, a.district_id, a.frequency, a.date ORDER BY a.account_id, a.district_id, a.frequency, a.date, min_amount ASC;", "SELECT a.account_id, a.date, a.frequency, a.district_id, l.amount FROM account a JOIN loan l ON a.account_id = l.account_id WHERE l.date >= DATE('now', '-24 months') AND a.date < '1997-01-01' ORDER BY l.amount ASC LIMIT 10;", "SELECT a.account_id, a.frequency, a.date, MIN(l.amount) AS min_amount FROM account a JOIN loan l ON a.account_id = l.account_id WHERE a.date < '1997-12-31' AND l.duration > 24 GROUP BY a.account_id, a.frequency, a.date ORDER BY min_amount ASC;"]}, {"question_id": 189, "answer_sql": ["SELECT DISTINCT trans.account \nFROM client \nJOIN account ON client.client_id = account.district_id \nJOIN trans ON account.account_id = trans.account_id \nWHERE client.gender = 'F' \nORDER BY trans.date DESC \nLIMIT 1;", "SELECT DISTINCT a.account_id \nFROM account a \nJOIN client c ON a.district_id = c.district_id \nWHERE c.gender = 'F' \nORDER BY a.date ASC \nLIMIT 1;", "SELECT DISTINCT T1.account_id FROM account AS T1 JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.gender = 'F' ORDER BY T1.district_id, T1.district_id DESC LIMIT 1;", "SELECT DISTINCT T1.account_id FROM account AS T1 JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.gender = 'F' ORDER BY T1.district_id, T1.date DESC LIMIT 1;", "SELECT DISTINCT T1.account_id FROM account AS T1 JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.gender = 'F' ORDER BY T1.district_id, T1.district_id DESC, T1.district_id DESC LIMIT 10;"]}, {"question_id": 190, "answer_sql": ["SELECT COUNT(*) FROM client WHERE birth_date BETWEEN '1920-01-01' AND '1920-12-31' AND district_id IN ( SELECT district_id FROM district WHERE A3 = 'east Bohemia' );", "SELECT COUNT(DISTINCT c.client_id) AS client_count FROM client c JOIN district d ON c.district_id = d.district_id WHERE d.A3 = 'East Bohemia' AND c.birth_date BETWEEN '1920-01-01' AND '1920-12-31';"]}, {"question_id": 191, "answer_sql": ["SELECT COUNT(loan_id) AS loan_count FROM loan WHERE duration = 24 AND status = 'PREPAYMENT';"]}, {"question_id": 192, "answer_sql": ["SELECT AVG(trans.amount) AS average_loan_amount FROM trans JOIN loan ON trans.account_id = loan.account_id WHERE trans.date >= loan.date AND loan.status = 'C' AND loan.status = 'D' AND loan.status = 'POPLATEK PO OBRATU';", "SELECT AVG(loan.amount) AS average_loan_amount FROM loan JOIN trans ON loan.account_id = trans.account_id WHERE loan.status = 'C' AND trans.type = 'POPLATEK PO OBRATU' GROUP BY loan.account_id;"]}, {"question_id": 193, "answer_sql": ["SELECT DISTINCT c.client_id, c.district_id FROM client c JOIN disp d ON c.client_id = d.client_id JOIN loan l ON d.account_id = l.account_id WHERE d.type = 'permanent order' OR l.status = 'approved';", "SELECT DISTINCT T1.client_id, T1.district_id FROM client AS T1 JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T1.client_id NOT IN ( SELECT T3.account_id FROM account AS T3 JOIN trans AS T4 ON T3.account_id = T4.account_id WHERE T4.type = 'permanent order' OR T4.type = 'loan' ) AND T1.client_id NOT IN ( SELECT T5.account_id FROM account AS T5 JOIN loan AS T6 ON T5.account_id = T6.account_id WHERE T6.status = 'approved' );"]}, {"question_id": 194, "answer_sql": []}, {"question_id": 195, "answer_sql": ["SELECT bond_type FROM bond GROUP BY bond_type ORDER BY COUNT(bond_type) DESC LIMIT 1;"]}, {"question_id": 196, "answer_sql": ["SELECT COUNT(T1.atom_id) AS chlorine_atoms FROM atom AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-' AND T1.element = 'cl';"]}, {"question_id": 197, "answer_sql": ["SELECT AVG(T1.element) AS average_oxygen_atoms \nFROM atom AS T1 \nJOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id \nJOIN connected AS T3 ON T1.atom_id = T3.atom_id \nJOIN bond AS T4 ON T3.bond_id = T4.bond_id \nWHERE T4.bond_type = '-' AND T1.element = 'o'", "SELECT AVG(T1.element) AS average_oxygen_atoms FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id JOIN molecule AS T3 ON T1.molecule_id = T3.molecule_id WHERE T2.bond_id IS NULL AND T3.label = 'single-bonded'", "SELECT AVG(T1.element) AS average_oxygen_atoms \nFROM atom AS T1 \nJOIN connected AS T2 ON T1.atom_id = T2.atom_id \nJOIN bond AS T3 ON T2.bond_id = T3.bond_id \nWHERE T3.bond_type = '-' \nGROUP BY T1.molecule_id;"]}, {"question_id": 198, "answer_sql": []}, {"question_id": 199, "answer_sql": ["SELECT COUNT(DISTINCT T1.molecule_id) FROM atom AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'na' AND T2.label = '-'", "SELECT COUNT(T1.molecule_id) AS non_carcinogenic_molecules FROM atom AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'na' AND T2.label = '-'"]}, {"question_id": 200, "answer_sql": []}, {"question_id": 201, "answer_sql": []}, {"question_id": 202, "answer_sql": ["SELECT COUNT(bond_id) AS triple_bonds FROM bond WHERE bond_type = '#';"]}, {"question_id": 203, "answer_sql": ["SELECT COUNT(DISTINCT atom_id) AS no_bromine_atoms FROM atom WHERE element != 'br';"]}, {"question_id": 204, "answer_sql": ["SELECT COUNT(T1.molecule_id) AS carcinogenic_molecules FROM molecule AS T1 JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id JOIN bond AS T3 ON T1.molecule_id = T3.molecule_id WHERE T1.label = '+' AND T1.molecule_id BETWEEN 'TR000' AND 'TR099' ORDER BY T1.molecule_id LIMIT 100;", "SELECT COUNT(DISTINCT T1.molecule_id) AS carcinogenic_count FROM molecule AS T1 JOIN connected AS T2 ON T1.molecule_id = T2.atom_id JOIN atom AS T3 ON T2.atom_id = T3.atom_id WHERE T1.label = '+' AND T1.molecule_id BETWEEN 'TR000' AND 'TR099'"]}, {"question_id": 205, "answer_sql": ["SELECT DISTINCT T1.molecule_id FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id JOIN atom AS T3 ON T2.atom_id2 = T3.atom_id WHERE T3.element = 'si';", "SELECT DISTINCT T1.molecule_id FROM atom AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'si';"]}, {"question_id": 206, "answer_sql": ["SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR004_8_9' AND atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')", "SELECT DISTINCT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR004_8_9' AND atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')", "SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.atom_id2 = bond.bond_id WHERE bond.bond_id = 'TR004_8_9' AND atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')"]}, {"question_id": 207, "answer_sql": ["SELECT DISTINCT element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.atom_id2 = bond.bond_id WHERE bond_type = 'double'"]}, {"question_id": 208, "answer_sql": ["SELECT T2.label \nFROM atom AS T1 \nJOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id \nWHERE T1.element = 'h' \nGROUP BY T2.label \nORDER BY COUNT(T2.label) DESC \nLIMIT 1;"]}, {"question_id": 209, "answer_sql": ["SELECT bond_type FROM bond JOIN atom ON bond.molecule_id = atom.molecule_id WHERE atom.element = 'te';", "SELECT bond.bond_type FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.element = 'te'", "SELECT bond_type FROM bond JOIN atom ON bond.molecule_id = atom.molecule_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE element = 'te';"]}, {"question_id": 210, "answer_sql": []}, {"question_id": 211, "answer_sql": ["SELECT atom.atom_id FROM atom \nJOIN connected ON atom.atom_id = connected.atom_id \nJOIN bond ON connected.bond_id = bond.bond_id \nJOIN molecule ON atom.molecule_id = molecule.molecule_id \nWHERE molecule.label = '-' AND bond.bond_type = 'non-carcinogenic'"]}, {"question_id": 212, "answer_sql": ["SELECT element FROM atom WHERE molecule_id IN ( SELECT molecule_id FROM molecule WHERE label = '-' ) AND atom_id IN ( SELECT atom_id FROM connected WHERE atom_id2 IN ( SELECT atom_id FROM atom WHERE element = 'cl' ) ) GROUP BY element ORDER BY COUNT(*) ASC LIMIT 1;", "SELECT element FROM atom WHERE molecule_id IN ( SELECT molecule_id FROM molecule WHERE label = '-' ) GROUP BY element ORDER BY COUNT(*) ASC LIMIT 1;", "SELECT element FROM atom WHERE molecule_id IN ( SELECT molecule_id FROM molecule WHERE label = '-' ) AND atom_id IN ( SELECT atom_id FROM connected GROUP BY atom_id HAVING COUNT(DISTINCT atom_id2) = ( SELECT MAX(count) FROM ( SELECT COUNT(DISTINCT atom_id2) AS count FROM connected GROUP BY atom_id ) AS counts ) )"]}, {"question_id": 213, "answer_sql": ["SELECT bond_type FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN atom atom2 ON connected.atom_id2 = atom2.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE atom.atom_id = 'TR004_8' AND atom2.atom_id = 'TR004_20';"]}, {"question_id": 214, "answer_sql": ["SELECT DISTINCT T1.label FROM molecule AS T1 WHERE T1.label != '+' AND EXISTS ( SELECT 1 FROM atom AS T2 WHERE T2.molecule_id = T1.molecule_id AND T2.element = 'sn' )", "SELECT DISTINCT T1.label FROM molecule AS T1 WHERE T1.label != '-' AND EXISTS ( SELECT 1 FROM atom AS T2 WHERE T2.molecule_id = T1.molecule_id AND T2.element = 'sn' )", "SELECT label FROM molecule WHERE molecule_id NOT IN ( SELECT DISTINCT molecule_id FROM atom WHERE element = 'sn' )"]}, {"question_id": 215, "answer_sql": ["SELECT COUNT(DISTINCT atom.atom_id) FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id JOIN bond ON connected.bond_id = bond.bond_id WHERE atom.element = 'i' AND bond.bond_type = '-'", "SELECT COUNT(DISTINCT atom.atom_id) FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id JOIN bond ON connected.bond_id = bond.bond_id WHERE atom.element = 'i' AND atom.element = 's' AND bond.bond_type = '-'"]}, {"question_id": 216, "answer_sql": ["SELECT atom.atom_id, connected.atom_id2 FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '#';", "SELECT atom.atom_id, connected.atom_id2, bond.bond_id FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '#';", "SELECT atom.atom_id FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '#';"]}, {"question_id": 217, "answer_sql": ["SELECT atom.atom_id FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR181';", "SELECT atom_id FROM connected WHERE atom_id2 IN ( SELECT atom_id FROM atom WHERE molecule_id = 'TR181' ) OR atom_id IN ( SELECT atom_id FROM atom WHERE molecule_id = 'TR181' )"]}, {"question_id": 218, "answer_sql": ["SELECT (SUM(CASE WHEN element = 'f' THEN 1 ELSE 0 END) * 100) / COUNT(molecule_id) AS percent FROM atom WHERE element = 'f'", "SELECT (SUM(CASE WHEN element = 'f' THEN 1 ELSE 0 END) / COUNT(molecule_id)) * 100 AS percent FROM atom WHERE element = 'f' GROUP BY molecule_id HAVING COUNT(molecule_id) = ( SELECT COUNT(molecule_id) FROM molecule WHERE label = '+' );"]}, {"question_id": 219, "answer_sql": ["SELECT CAST(COUNT(CASE WHEN bond_type = '#' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(bond_id) AS percent FROM bond JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE label = '+'", "SELECT (SUM(CASE WHEN bond.bond_type = '#' THEN 1 ELSE 0 END) * 100) / COUNT(bond_id) AS percent FROM bond JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.label = '+' AND bond.bond_type = '#';", "SELECT (SELECT COUNT(*) FROM bond WHERE bond_type = '#') * 100 / (SELECT COUNT(*) FROM molecule WHERE label = '+')", "SELECT SUM(CASE WHEN bond_type = '#' THEN 1 ELSE 0 END) * 100 / COUNT(bond_id) AS percent FROM bond JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE label = '+'"]}, {"question_id": 220, "answer_sql": ["SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR000' ORDER BY atom.element ASC LIMIT 3;", "SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = 'TR000' ORDER BY atom.element ASC LIMIT 3;"]}, {"question_id": 221, "answer_sql": ["SELECT atom_id FROM connected WHERE atom_id = 'TR001' AND atom_id2 = 'TR001' AND bond_id = 'TR001_2_6';"]}, {"question_id": 222, "answer_sql": ["SELECT SUM(label = '+') - SUM(label = '-') AS difference FROM molecule;"]}, {"question_id": 223, "answer_sql": ["SELECT connected.atom_id2 FROM connected JOIN atom ON connected.atom_id = atom.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR_000_2_5';"]}, {"question_id": 224, "answer_sql": ["SELECT bond.bond_id FROM connected JOIN atom ON connected.atom_id = atom.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id JOIN bond ON connected.bond_id = bond.bond_id WHERE connected.atom_id2 = 'TR000_2'", "SELECT bond_id FROM connected WHERE atom_id2 = 'TR000_2' AND atom_id = 'TR000_2';"]}, {"question_id": 225, "answer_sql": ["SELECT T1.label FROM molecule AS T1 JOIN connected AS T2 ON T1.molecule_id = T2.atom_id JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = ' = ' ORDER BY T1.label ASC LIMIT 5;"]}, {"question_id": 226, "answer_sql": []}, {"question_id": 227, "answer_sql": ["SELECT CAST(COUNT(CASE WHEN label = '+' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(molecule_id) AS percent FROM molecule;"]}, {"question_id": 228, "answer_sql": ["SELECT CAST(SUM(CASE WHEN element = 'h' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(atom_id) AS percent FROM atom WHERE molecule_id = 'TR206'", "SELECT CAST(SUM(CASE WHEN T1.element = 'h' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.atom_id) AS hydrogen_percentage FROM atom AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = 'TR206';"]}, {"question_id": 229, "answer_sql": ["SELECT bond.bond_type FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON connected.atom_id = atom.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR000'", "SELECT bond_type FROM bond WHERE molecule_id = 'TR000' AND bond_id IN (SELECT bond_id FROM connected WHERE atom_id = 'TR000' OR atom_id2 = 'TR000')"]}, {"question_id": 230, "answer_sql": ["SELECT atom.element, molecule.label FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR060';", "SELECT atom.element, molecule.label FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+' AND atom.element = 'cl' UNION SELECT atom.element, molecule.label FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '-' AND atom.element = 'cl'", "SELECT atom.element, molecule.label FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR060';", "SELECT atom.element, molecule.label FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+' AND atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')"]}, {"question_id": 231, "answer_sql": ["SELECT bond_type, COUNT(*) AS bond_count FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id JOIN bond ON connected.bond_id = bond.bond_id WHERE molecule.label = '++' GROUP BY bond_type ORDER BY bond_count DESC LIMIT 1;"]}, {"question_id": 232, "answer_sql": []}, {"question_id": 233, "answer_sql": ["SELECT bond.bond_id FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON connected.atom_id = atom.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR006' ORDER BY bond.bond_id LIMIT 2;", "SELECT bond.bond_id FROM connected JOIN atom ON connected.atom_id = atom.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id JOIN bond ON connected.bond_id = bond.bond_id WHERE molecule.label = 'TR006' ORDER BY bond.bond_id LIMIT 2;"]}, {"question_id": 234, "answer_sql": ["SELECT COUNT(bond_id) AS bond_count FROM connected WHERE atom_id = 'TR009_12' OR atom_id2 = 'TR009_12' AND bond_id LIKE 'TR009_%';"]}, {"question_id": 235, "answer_sql": ["SELECT COUNT(DISTINCT T1.molecule_id) AS num_molecules \nFROM molecule AS T1 \nJOIN atom AS T2 ON T1.molecule_id = T2.molecule_id \nJOIN connected AS T3 ON T2.atom_id = T3.atom_id \nWHERE T1.label = '+' AND T2.element = 'br';"]}, {"question_id": 236, "answer_sql": ["SELECT bond.bond_type, atom.atom_id, atom2.atom_id FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN atom atom2 ON connected.atom_id2 = atom2.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR001_6_9';"]}, {"question_id": 237, "answer_sql": ["SELECT m.label AS molecule_label, CASE WHEN m.label = '+' THEN 'Yes' ELSE 'No' END AS is_carcinogenic FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE a.atom_id = 'TR001_10';", "SELECT T2.label, T1.molecule_id FROM atom AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR001_10' AND T2.label = '+'"]}, {"question_id": 238, "answer_sql": ["SELECT COUNT(DISTINCT molecule_id) AS num_molecules FROM bond WHERE bond_type = '#';"]}, {"question_id": 239, "answer_sql": ["SELECT COUNT(bond_id) AS connection_count FROM connected JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.atom_id LIKE 'TR%_19'", "SELECT COUNT(bond_id) AS connection_count FROM connected WHERE atom_id = 'TR%_19' AND atom_id2 = 'TR%_19';"]}, {"question_id": 240, "answer_sql": ["SELECT DISTINCT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR004' AND atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')", "SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR004' AND atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')"]}, {"question_id": 241, "answer_sql": ["SELECT COUNT(molecule_id) AS non_carcinogenic_molecules FROM molecule WHERE label = '-';"]}, {"question_id": 242, "answer_sql": ["SELECT DISTINCT T1.molecule_id FROM atom AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id LIKE '21%' AND T2.label = '+'"]}, {"question_id": 243, "answer_sql": ["SELECT bond.bond_id FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.element = 'p' AND atom.element = 'n';"]}, {"question_id": 244, "answer_sql": ["SELECT m.label FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id JOIN connected c ON a.atom_id = c.atom_id AND c.atom_id2 = a.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = ' = ' AND m.label = '+' GROUP BY m.label ORDER BY COUNT(*) DESC LIMIT 1;"]}, {"question_id": 245, "answer_sql": []}, {"question_id": 246, "answer_sql": ["SELECT bond.bond_type, bond.bond_id FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.atom_id2 = bond.bond_id WHERE atom.atom_id = '45';"]}, {"question_id": 247, "answer_sql": ["SELECT DISTINCT atom.element FROM atom WHERE atom.element NOT IN ( SELECT atom_id FROM connected )", "SELECT atom.element FROM atom WHERE atom.atom_id NOT IN ( SELECT atom_id FROM connected ) AND atom.element NOT IN ( 'cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca' )", "SELECT DISTINCT atom.element FROM atom WHERE atom.atom_id NOT IN ( SELECT atom_id FROM connected ) AND atom.element IN ( 'cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca' )", "SELECT DISTINCT atom.element FROM atom WHERE atom.atom_id NOT IN ( SELECT atom_id FROM connected )", "SELECT atom.element FROM atom WHERE atom.atom_id NOT IN ( SELECT atom_id FROM connected )"]}, {"question_id": 248, "answer_sql": ["SELECT atom.atom_id FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id IN ( SELECT bond_id FROM bond WHERE bond_type = '#' ) AND atom.molecule_id = 'TR447';", "SELECT atom_id, atom_id2 FROM connected WHERE bond_id = ( SELECT bond_id FROM bond WHERE molecule_id = 'TR447' AND bond_type = '#' )", "SELECT atom.atom_id FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE bond.bond_id IN ( SELECT bond_id FROM bond WHERE bond_type = '#' ) AND molecule.label = 'TR447'"]}, {"question_id": 249, "answer_sql": ["SELECT element FROM atom WHERE molecule_id = ( SELECT molecule_id FROM bond WHERE bond_id = 'TR144_8_19' )", "SELECT DISTINCT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE connected.bond_id = 'TR144_8_19' AND atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca');", "SELECT atom.element FROM atom JOIN bond ON atom.molecule_id = bond.molecule_id WHERE bond.bond_type = 'TR144_8_19' AND atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')"]}, {"question_id": 250, "answer_sql": ["SELECT DISTINCT T1.molecule_id FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id JOIN atom AS T3 ON T2.atom_id2 = T3.atom_id JOIN molecule AS T4 ON T4.molecule_id = T3.molecule_id WHERE T4.label = '+' AND T2.bond_id IS NOT NULL GROUP BY T1.molecule_id ORDER BY COUNT(T2.bond_id) DESC LIMIT 1;", "SELECT m.molecule_id, COUNT(*) AS double_bonds_count \nFROM atom a \nJOIN connected c ON a.atom_id = c.atom_id \nJOIN bond b ON c.bond_id = b.bond_id \nJOIN molecule m ON a.molecule_id = m.molecule_id \nWHERE b.bond_type = ' = ' \nGROUP BY m.molecule_id \nORDER BY double_bonds_count DESC \nLIMIT 1"]}, {"question_id": 251, "answer_sql": ["SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+' GROUP BY atom.element ORDER BY COUNT(*) DESC LIMIT 1;", "SELECT atom.element FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+' GROUP BY atom.element ORDER BY COUNT(*) DESC LIMIT 1;", "SELECT element FROM atom WHERE molecule_id IN ( SELECT molecule_id FROM molecule WHERE label = '+' ) GROUP BY element ORDER BY COUNT(*) ASC LIMIT 1;"]}, {"question_id": 252, "answer_sql": ["SELECT atom.atom_id FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN atom atom2 ON connected.atom_id2 = atom2.atom_id WHERE atom2.element = 'pb'", "SELECT atom_id FROM atom WHERE element = 'pb' AND atom_id IN (SELECT atom_id2 FROM connected WHERE atom_id = 'pb')"]}, {"question_id": 253, "answer_sql": ["SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '#';", "SELECT DISTINCT element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond_type = '#' AND element IN ('Cl', 'C', 'H', 'O', 'S', 'N', 'P', 'Na', 'Br', 'F', 'I', 'Sn', 'Pb', 'Te', 'Ca')"]}, {"question_id": 254, "answer_sql": ["SELECT CAST(COUNT(DISTINCT atom_id) AS REAL) * 100 / COUNT(DISTINCT atom_id) FROM atom WHERE element IN (SELECT element FROM atom GROUP BY element ORDER BY COUNT(*) DESC LIMIT 1)", "SELECT (COUNT(bond_id) / COUNT(atom_id)) * 100 FROM connected WHERE atom_id = atom_id2 GROUP BY atom_id ORDER BY COUNT(bond_id) DESC LIMIT 1;"]}, {"question_id": 255, "answer_sql": ["SELECT SUM(CASE WHEN bond_type = '-' THEN 1 ELSE 0 END) / COUNT(bond_id) FROM bond WHERE bond_type = '-'"]}, {"question_id": 256, "answer_sql": ["SELECT COUNT(DISTINCT atom_id) AS total_atoms FROM atom WHERE element IN ('c', 'h');"]}, {"question_id": 257, "answer_sql": ["SELECT atom_id2 FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE element = 's';", "SELECT connected.atom_id2 FROM connected JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.element = 's';"]}, {"question_id": 258, "answer_sql": ["SELECT bond_type FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE element = 'sn';", "SELECT bond_type FROM bond JOIN atom ON bond.molecule_id = atom.molecule_id WHERE element = 'sn';"]}, {"question_id": 259, "answer_sql": ["SELECT COUNT(DISTINCT atom.element) FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '-'", "SELECT COUNT(DISTINCT atom.element) AS element_count FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '-' GROUP BY atom.element;"]}, {"question_id": 260, "answer_sql": ["SELECT COUNT(DISTINCT atom.atom_id) AS total_atoms FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '#' AND (atom.element = 'p' OR atom.element = 'br');", "SELECT COUNT(DISTINCT atom.atom_id) AS total_atoms FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '#' AND atom.element IN ('p', 'br') AND connected.bond_id IS NOT NULL;"]}, {"question_id": 261, "answer_sql": ["SELECT bond.bond_id FROM bond \nJOIN connected ON bond.bond_id = connected.bond_id \nJOIN atom ON connected.atom_id = atom.atom_id \nJOIN molecule ON atom.molecule_id = molecule.molecule_id \nWHERE molecule.label = '+' AND bond.bond_type = 'Carcinogenic Bond'"]}, {"question_id": 262, "answer_sql": ["SELECT DISTINCT T1.molecule_id FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id JOIN molecule AS T3 ON T1.molecule_id = T3.molecule_id WHERE T3.label = '-' AND T2.bond_id IS NULL;"]}, {"question_id": 263, "answer_sql": ["SELECT (SELECT element FROM atom WHERE atom_id = atom_id AND element = 'cl') AS chlorine_element, (SELECT SUM(element = 'cl') FROM atom WHERE atom_id = atom_id AND element = 'cl') AS chlorine_count, (SELECT COUNT(atom_id) FROM atom WHERE atom_id = atom_id AND element = 'cl') AS total_atoms, (SELECT (SUM(element = 'cl') / COUNT(atom_id)) * 100 FROM atom WHERE atom_id = atom_id AND element = 'cl') AS chlorine_percentage FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE connected.bond_id IS NULL AND atom.element = 'cl'"]}, {"question_id": 264, "answer_sql": ["SELECT label FROM molecule WHERE molecule_id IN ('TR000', 'TR001', 'TR002');", "SELECT DISTINCT T1.label FROM molecule AS T1 JOIN connected AS T2 ON T1.molecule_id = T2.atom_id WHERE T2.atom_id IN ('TR000', 'TR001', 'TR002') AND T1.label IN ('+', '-')"]}, {"question_id": 265, "answer_sql": ["SELECT DISTINCT T1.molecule_id FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id JOIN bond AS T3 ON T2.bond_id = T3.bond_id JOIN molecule AS T4 ON T1.molecule_id = T4.molecule_id WHERE T4.label = '-'", "SELECT DISTINCT molecule_id FROM atom WHERE element IN ( SELECT element FROM atom WHERE molecule_id IN ( SELECT molecule_id FROM molecule WHERE label = '-' ) )"]}, {"question_id": 266, "answer_sql": ["SELECT T1.molecule_id, COUNT(*) AS total_carcinogenic_molecules FROM atom AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' GROUP BY T1.molecule_id HAVING T1.molecule_id BETWEEN 'TR000' AND 'TR030';", "SELECT SUM(CASE WHEN label = '+' THEN 1 ELSE 0 END) AS total_carcinogenic_molecules FROM molecule WHERE molecule_id BETWEEN 'TR000' AND 'TR030';", "SELECT COUNT(T1.molecule_id) AS total_carcinogenic_molecules \nFROM atom AS T1 \nJOIN connected AS T2 ON T1.atom_id = T2.atom_id \nJOIN molecule AS T3 ON T1.molecule_id = T3.molecule_id \nWHERE T3.label = '+'", "SELECT T1.molecule_id FROM atom T1 JOIN molecule T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' GROUP BY T1.molecule_id HAVING COUNT(*) >= 3"]}, {"question_id": 267, "answer_sql": ["SELECT bond.bond_type FROM bond JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.molecule_id BETWEEN 'TR000' AND 'TR050';", "SELECT bond.bond_type FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON connected.atom_id = atom.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id BETWEEN 'TR000' AND 'TR050';", "SELECT bond_type FROM bond WHERE molecule_id BETWEEN 'TR000' AND 'TR050';"]}, {"question_id": 268, "answer_sql": ["SELECT DISTINCT atom.element \nFROM atom \nJOIN connected ON atom.atom_id = connected.atom_id \nJOIN bond ON connected.bond_id = bond.bond_id \nWHERE bond.bond_id = 'TR001_10_11' \nAND atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')", "SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.atom_id2 = bond.bond_id WHERE bond.bond_id = 'TR001_10_11' AND atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')"]}, {"question_id": 269, "answer_sql": ["SELECT COUNT(bond_id) AS bond_count FROM bond JOIN atom ON bond.molecule_id = atom.molecule_id WHERE atom.element = 'i';"]}, {"question_id": 270, "answer_sql": ["SELECT CASE WHEN T2.label = '+' THEN 'Carcinogenic' WHEN T2.label = '-' THEN 'Non-Carcinogenic' END AS classification FROM atom T1 JOIN molecule T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'Ca';"]}, {"question_id": 271, "answer_sql": ["SELECT EXISTS ( SELECT 1 FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE a.element = 'cl' AND b.bond_id = 'TR001_1_8' AND a.element = 'c' )"]}, {"question_id": 272, "answer_sql": ["SELECT DISTINCT T1.molecule_id \nFROM atom AS T1 \nJOIN connected AS T2 ON T1.atom_id = T2.atom_id \nJOIN bond AS T3 ON T2.bond_id = T3.bond_id \nJOIN molecule AS T4 ON T4.molecule_id = T3.molecule_id \nWHERE T1.element = 'c' \nAND T3.bond_type = '#' \nAND T4.label = '-'"]}, {"question_id": 273, "answer_sql": []}, {"question_id": 274, "answer_sql": ["SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR001';", "SELECT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN molecule m ON m.molecule_id = c.atom_id2 WHERE m.molecule_id = 'TR001';"]}, {"question_id": 275, "answer_sql": []}, {"question_id": 276, "answer_sql": ["SELECT atom.atom_id, atom2.atom_id FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN atom atom2 ON connected.atom_id2 = atom2.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '#';", "SELECT atom_id, atom_id2 FROM connected WHERE bond_id IN ( SELECT bond_id FROM bond WHERE bond_type = '#' ) LIMIT 2;"]}, {"question_id": 277, "answer_sql": ["SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR005_16_26' AND atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')", "SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR005_16_26' AND atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')"]}, {"question_id": 278, "answer_sql": ["SELECT COUNT(T1.molecule_id) AS non_carcinogenic_molecules \nFROM atom AS T1 \nJOIN connected AS T2 ON T1.atom_id = T2.atom_id \nJOIN bond AS T3 ON T2.bond_id = T3.bond_id \nJOIN molecule AS T4 ON T1.molecule_id = T4.molecule_id \nWHERE T3.bond_type = '-' AND T4.label = '-'", "SELECT COUNT(DISTINCT T1.molecule_id) FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id JOIN molecule AS T3 ON T1.molecule_id = T3.molecule_id WHERE T2.bond_id IS NULL AND T3.label = '-'"]}, {"question_id": 279, "answer_sql": ["SELECT label FROM molecule WHERE molecule_id IN ( SELECT molecule_id FROM atom WHERE atom_id IN ( SELECT atom_id FROM connected WHERE bond_id = 'TR001_10_11' ) ) AND label IN ('+', '-')", "SELECT label FROM molecule WHERE molecule_id IN ( SELECT molecule_id FROM atom WHERE atom_id IN ( SELECT atom_id FROM connected WHERE atom_id2 = 'TR001_10_11' AND bond_id = 'TR001_10_11' ) )"]}, {"question_id": 280, "answer_sql": ["SELECT bond.bond_id, CASE WHEN label = '+' THEN 'Carcinogenic' ELSE 'Non-carcinogenic' END AS carcinogenic FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON connected.atom_id = atom.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE bond.bond_type = '#';", "SELECT bond.bond_id, CASE WHEN label = '+' THEN 'carcinogenic' WHEN label = '-' THEN 'non-carcinogenic' ELSE 'unknown' END AS classification FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON connected.atom_id = atom.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE bond_type = '#';", "SELECT bond.bond_id, label FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON connected.atom_id = atom.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE bond.bond_type = '#' AND molecule.label = '+'", "SELECT bond.bond_id, label FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON connected.atom_id = atom.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE bond.bond_type = '#' AND molecule.label IN ('+', '-') ORDER BY bond.bond_id;", "SELECT bond.bond_id FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON connected.atom_id = atom.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE bond.bond_type = '#' AND molecule.label = '+'"]}, {"question_id": 281, "answer_sql": ["SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE connected.atom_id2 = '4' AND molecule.label = '+' AND atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca') GROUP BY atom.element"]}, {"question_id": 282, "answer_sql": []}, {"question_id": 283, "answer_sql": ["SELECT CASE WHEN T1.element = 'Ca' THEN 'Yes' ELSE 'No' END AS Is_Carcinogenic FROM atom AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'"]}, {"question_id": 284, "answer_sql": ["SELECT bond_type FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id JOIN bond ON connected.bond_id = bond.bond_id WHERE element = 'te'"]}, {"question_id": 285, "answer_sql": ["SELECT DISTINCT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR001_10_11' AND atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')", "SELECT atom.element \nFROM atom \nJOIN connected ON atom.atom_id = connected.atom_id \nJOIN bond ON connected.bond_id = bond.bond_id \nWHERE bond.bond_id = 'TR001_10_11' \nAND atom.molecule_id = (SELECT molecule_id FROM bond WHERE bond_id = 'TR001_10_11') \nAND atom.atom_id = (SELECT atom_id FROM connected WHERE bond_id = 'TR001_10_11') \nAND atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')", "SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR001_10_11' AND atom.molecule_id IN ( SELECT molecule_id FROM molecule WHERE label IN ( SELECT SUBSTR(bond_id, 1, 5) FROM bond WHERE bond_id = 'TR001_10_11' ) )"]}, {"question_id": 286, "answer_sql": ["SELECT CAST(COUNT(CASE WHEN bond_type = '#' THEN 1 END) AS REAL) * 100 / COUNT(*) FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond_type = '#';", "SELECT CAST(COUNT(CASE WHEN bond.bond_type = '#' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(molecule.molecule_id) FROM molecule JOIN atom ON molecule.molecule_id = atom.molecule_id JOIN connected ON atom.atom_id = connected.atom_id AND connected.atom_id2 = atom.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '#';"]}, {"question_id": 287, "answer_sql": ["SELECT atom.atom_id, atom.molecule_id, bond.bond_id, COUNT(*) AS total_bonds, SUM(CASE WHEN bond.bond_type = ' = ' THEN 1 ELSE 0 END) AS double_bonds FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE atom.molecule_id = 'TR047' GROUP BY atom.atom_id, atom.molecule_id, bond.bond_id", "SELECT atom.atom_id, atom.molecule_id, COUNT(bond.bond_id) AS total_bonds, SUM(CASE WHEN bond.bond_type = ' = ' THEN 1 ELSE 0 END) AS double_bonds FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE atom.molecule_id = 'TR047' GROUP BY atom.atom_id, atom.molecule_id", "SELECT atom.atom_id, atom.molecule_id, bond.bond_id, (SUM(CASE WHEN bond.bond_type = ' = ' THEN 1 ELSE 0 END) * 100.0 / COUNT(bond.bond_id)) AS percent FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE atom.molecule_id = 'TR047' GROUP BY atom.molecule_id, bond.bond_id"]}, {"question_id": 288, "answer_sql": ["SELECT CASE WHEN COUNT(CASE WHEN label = '+' THEN 1 ELSE NULL END) > 0 THEN 'Yes' ELSE 'No' END AS is_carcinogenic FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.atom_id = 'TR001_1';"]}, {"question_id": 289, "answer_sql": ["SELECT CASE WHEN COUNT(CASE WHEN label = '+' THEN 1 ELSE NULL END) > 0 THEN 'Yes' ELSE 'No' END AS is_carcinogenic FROM molecule WHERE label = '+'", "SELECT CASE WHEN label = '+' THEN 'Yes' ELSE 'No' END AS is_carcinogenic FROM molecule WHERE label = 'TR151';", "SELECT label FROM molecule WHERE label = '+';", "SELECT label FROM molecule WHERE molecule_id = 'TR151';"]}, {"question_id": 290, "answer_sql": ["SELECT element FROM atom WHERE molecule_id = 'TR151' AND element = 'cl';"]}, {"question_id": 291, "answer_sql": ["SELECT COUNT(molecule_id) AS carcinogenic_compounds FROM molecule WHERE label = '+';"]}, {"question_id": 292, "answer_sql": ["SELECT atom.atom_id FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'c' AND molecule.molecule_id BETWEEN 'TR010' AND 'TR050'", "SELECT atom.atom_id FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'c' AND molecule.molecule_id BETWEEN 'TR010' AND 'TR050'", "SELECT atom.atom_id, atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id BETWEEN 'TR010' AND 'TR050' AND atom.element = 'c' AND molecule.molecule_id LIKE 'TR%';", "SELECT atom_id FROM atom WHERE molecule_id BETWEEN 'TR010' AND 'TR050' AND element = 'c' AND atom_id IN ( SELECT atom_id FROM connected WHERE atom_id IN ( SELECT atom_id FROM atom WHERE molecule_id BETWEEN 'TR010' AND 'TR050' AND element = 'c' ) );"]}, {"question_id": 293, "answer_sql": ["SELECT COUNT(DISTINCT atom.atom_id) FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+'"]}, {"question_id": 294, "answer_sql": ["SELECT bond.bond_id FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON connected.atom_id = atom.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+' AND bond.bond_type = ' = ';"]}, {"question_id": 295, "answer_sql": ["SELECT COUNT(T1.atom_id) AS atom_count FROM atom AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'h' AND T2.label = '+';", "SELECT COUNT(DISTINCT atom.atom_id) FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE connected.bond_id IS NOT NULL AND atom.element = 'h' AND molecule.label = '+'"]}, {"question_id": 296, "answer_sql": ["SELECT T1.molecule_id FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = 'TR00_1_2' AND T1.element = 'TR00_1';"]}, {"question_id": 297, "answer_sql": ["SELECT atom.atom_id FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'c' AND molecule.label != '-'", "SELECT atom_id FROM atom WHERE element = 'c' AND atom_id NOT IN ( SELECT atom_id FROM connected WHERE atom_id IN ( SELECT atom_id FROM atom WHERE element = 'c' ) )", "SELECT atom.atom_id FROM atom WHERE atom.element = 'c' AND atom.atom_id NOT IN ( SELECT atom.atom_id FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '-' )"]}, {"question_id": 298, "answer_sql": ["SELECT CAST(SUM(CASE WHEN T1.element = 'h' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.molecule_id) AS percentage FROM atom AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+';", "SELECT CAST(SUM(CASE WHEN T2.label = '+' AND T1.element = 'h' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.molecule_id) AS percentage FROM atom AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'h';"]}, {"question_id": 299, "answer_sql": ["SELECT CASE WHEN label = '+' THEN 'Yes' ELSE 'No' END AS is_carcinogenic FROM molecule WHERE molecule_id = 'TR124';", "SELECT CASE WHEN COUNT(CASE WHEN label = '+' THEN 1 END) > 0 THEN 'Yes' ELSE 'No' END AS is_carcinogenic FROM molecule WHERE label = '+'", "SELECT label FROM molecule WHERE molecule_id = 'TR124';", "SELECT label FROM molecule WHERE label = '+'"]}, {"question_id": 300, "answer_sql": ["SELECT atom.atom_id, atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR186';", "SELECT atom_id FROM atom WHERE molecule_id = 'TR186'"]}, {"question_id": 301, "answer_sql": ["SELECT bond.bond_type FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE atom.atom_id = 'TR007_4_19';"]}, {"question_id": 302, "answer_sql": ["SELECT DISTINCT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR001_2_4' AND atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')", "SELECT atom.element \nFROM atom \nJOIN connected ON atom.atom_id = connected.atom_id \nJOIN bond ON connected.bond_id = bond.bond_id \nWHERE bond.bond_id = 'TR001_2_4' \nAND atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')", "SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.atom_id2 = bond.bond_id WHERE bond.bond_id = 'TR001_2_4' AND atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')"]}, {"question_id": 303, "answer_sql": []}, {"question_id": 304, "answer_sql": ["SELECT DISTINCT m.label, a.element FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca') AND m.label = '+';", "SELECT DISTINCT atom.element, molecule.label FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca') AND molecule.label = '+'", "SELECT DISTINCT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+' AND atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')", "SELECT DISTINCT atom.element, molecule.label FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')", "SELECT DISTINCT m.label AS molecule, a.element AS element FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE a.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')"]}, {"question_id": 305, "answer_sql": []}, {"question_id": 306, "answer_sql": ["SELECT DISTINCT T1.molecule_id, T1.label, T2.element FROM molecule AS T1 JOIN connected AS T3 ON T1.molecule_id = T3.atom_id JOIN atom AS T2 ON T3.atom_id = T2.atom_id WHERE T3.bond_id IN ( SELECT bond_id FROM bond WHERE bond_type = '#' ) AND T2.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')"]}, {"question_id": 307, "answer_sql": ["SELECT atom.element \nFROM atom \nJOIN connected ON atom.atom_id = connected.atom_id \nJOIN bond ON connected.bond_id = bond.bond_id \nWHERE bond.bond_id = 'TR000_2_3' AND atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')", "SELECT atom.element \nFROM atom \nJOIN connected ON atom.atom_id = connected.atom_id \nJOIN bond ON connected.bond_id = bond.bond_id \nWHERE bond.bond_type = 'TR000_2_3' \nAND atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')"]}, {"question_id": 308, "answer_sql": []}, {"question_id": 309, "answer_sql": ["SELECT atom.atom_id, COUNT(DISTINCT bond.bond_type) AS num_bond_types FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id JOIN bond ON connected.bond_id = bond.bond_id WHERE molecule.label = 'TR346' GROUP BY atom.atom_id;"]}, {"question_id": 310, "answer_sql": []}, {"question_id": 311, "answer_sql": ["SELECT COUNT(DISTINCT T1.molecule_id) \nFROM atom AS T1 \nJOIN connected AS T2 ON T1.atom_id = T2.atom_id \nJOIN bond AS T3 ON T2.bond_id = T3.bond_id \nWHERE T1.element != 's' AND T3.bond_type != ' = '"]}, {"question_id": 312, "answer_sql": ["SELECT label FROM molecule WHERE molecule_id IN ( SELECT molecule_id FROM atom WHERE atom_id IN ( SELECT atom_id FROM connected WHERE atom_id2 = 'TR001_2_4' ) ) AND label = '+'"]}, {"question_id": 313, "answer_sql": ["SELECT COUNT(DISTINCT atom.atom_id) AS atom_count FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = 'TR005';"]}, {"question_id": 314, "answer_sql": ["SELECT COUNT(bond_id) AS single_bonds FROM bond WHERE bond_type = '-';", "SELECT COUNT(bond_id) AS single_bonds FROM connected WHERE atom_id = atom_id2 AND bond_id IN ( SELECT bond_id FROM bond WHERE bond_type = '-' );"]}, {"question_id": 315, "answer_sql": ["SELECT DISTINCT T1.molecule_id FROM atom AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'cl' AND T2.label = '+'", "SELECT DISTINCT T1.molecule_id FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id JOIN atom AS T3 ON T2.atom_id2 = T3.atom_id JOIN molecule AS T4 ON T3.molecule_id = T4.molecule_id WHERE T3.element = 'cl' AND T4.label = '+'", "SELECT molecule_id FROM molecule WHERE label = '+' AND molecule_id LIKE '%cl%'", "SELECT molecule.label FROM molecule JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'cl';", "SELECT molecule.label FROM molecule JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'cl' AND molecule.label = '+';"]}, {"question_id": 316, "answer_sql": ["SELECT DISTINCT T1.molecule_id FROM atom AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'c' AND T2.label = '-'"]}, {"question_id": 317, "answer_sql": ["SELECT CAST(SUM(CASE WHEN T1.element = 'cl' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.molecule_id) AS percentage FROM atom AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'"]}, {"question_id": 318, "answer_sql": []}, {"question_id": 319, "answer_sql": ["SELECT COUNT(DISTINCT atom.element) AS element_count FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR001_3_4' AND atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca');", "SELECT COUNT(DISTINCT atom.element) AS element_count FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.atom_id2 = bond.bond_id WHERE bond.bond_id = 'TR001_3_4' AND atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca');"]}, {"question_id": 320, "answer_sql": []}, {"question_id": 321, "answer_sql": ["SELECT T1.molecule_id FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id JOIN atom AS T3 ON T2.atom_id2 = T3.atom_id WHERE T1.atom_id = 'TR000_2' AND T3.atom_id = 'TR000_4';"]}, {"question_id": 322, "answer_sql": ["SELECT element FROM atom WHERE atom_id = 'TR000_1';"]}, {"question_id": 323, "answer_sql": ["SELECT label FROM molecule WHERE molecule_id = 'TR000';", "SELECT CASE WHEN label = '+' THEN 'Yes' WHEN label = '-' THEN 'No' ELSE 'Unknown' END AS is_carcinogenic FROM molecule WHERE molecule_id = 'TR000';", "SELECT CASE WHEN label = '+' THEN 'Yes' ELSE 'No' END AS is_carcinogenic FROM molecule WHERE label = 'TR000';"]}, {"question_id": 324, "answer_sql": ["SELECT (SELECT COUNT(*) FROM bond WHERE bond_type = '-') * 100 / (SELECT COUNT(*) FROM atom) FROM atom", "SELECT COUNT(CASE WHEN bond_type = '-' THEN 1 ELSE NULL END) * 100 / COUNT(bond_id) AS percentage FROM bond", "SELECT (SELECT COUNT(*) FROM bond WHERE bond_type = '-') * 100 / COUNT(*) AS percentage FROM molecule"]}, {"question_id": 325, "answer_sql": ["SELECT COUNT(DISTINCT T1.molecule_id) FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id JOIN atom AS T3 ON T2.atom_id2 = T3.atom_id JOIN molecule AS T4 ON T3.molecule_id = T4.molecule_id WHERE T1.element = 'n' AND T4.label = '+'"]}, {"question_id": 326, "answer_sql": ["SELECT DISTINCT T1.molecule_id FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id JOIN atom AS T3 ON T2.atom_id2 = T3.atom_id JOIN bond AS T4 ON T2.bond_id = T4.bond_id WHERE T3.element = 's' AND T4.bond_type = ' = ';"]}, {"question_id": 327, "answer_sql": ["SELECT DISTINCT T1.molecule_id FROM molecule AS T1 JOIN connected AS T2 ON T1.molecule_id = T2.atom_id JOIN atom AS T3 ON T2.atom_id2 = T3.atom_id WHERE T3.element != 'C' GROUP BY T1.molecule_id HAVING COUNT(T1.molecule_id) > 5;", "SELECT DISTINCT T1.molecule_id FROM atom AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-' AND (SELECT COUNT(*) FROM atom WHERE molecule_id = T1.molecule_id) > 5", "SELECT label FROM molecule WHERE label = '-' AND (SELECT COUNT(DISTINCT atom_id) FROM atom WHERE atom_id IN (SELECT atom_id FROM molecule WHERE molecule_id = molecule.molecule_id)) > 5", "SELECT label FROM molecule WHERE label = '-' GROUP BY label HAVING COUNT(molecule_id) > 5", "SELECT label FROM molecule WHERE label = '-' AND (SELECT COUNT(*) FROM atom WHERE molecule_id = molecule.molecule_id) > 5"]}, {"question_id": 328, "answer_sql": ["SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE bond.bond_type = '=' AND molecule.label = 'TR024' AND atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')"]}, {"question_id": 329, "answer_sql": ["SELECT t1.molecule_id, COUNT(t1.molecule_id) AS atom_count FROM atom t1 JOIN molecule t2 ON t1.molecule_id = t2.molecule_id GROUP BY t1.molecule_id ORDER BY atom_count DESC LIMIT 1;", "SELECT DISTINCT T1.molecule_id FROM atom AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' GROUP BY T1.molecule_id ORDER BY COUNT(T1.molecule_id) DESC LIMIT 1;", "SELECT m.label FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id GROUP BY m.label ORDER BY COUNT(a.molecule_id) DESC LIMIT 1;"]}, {"question_id": 330, "answer_sql": []}, {"question_id": 331, "answer_sql": ["SELECT COUNT(DISTINCT T1.molecule_id) AS carcinogenic_molecules FROM atom AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+';"]}, {"question_id": 332, "answer_sql": ["SELECT COUNT(DISTINCT T1.molecule_id) \nFROM atom AS T1 \nJOIN connected AS T2 ON T1.atom_id = T2.atom_id \nJOIN bond AS T3 ON T3.bond_id = T2.bond_id \nWHERE T3.bond_type = '-' AND T1.molecule_id BETWEEN 'TR004' AND 'TR010'", "SELECT COUNT(T1.molecule_id) AS single_bonds_count FROM molecule AS T1 JOIN connected AS T2 ON T1.molecule_id = T2.atom_id JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '-' AND T1.molecule_id BETWEEN 'TR004' AND 'TR010';"]}, {"question_id": 333, "answer_sql": []}, {"question_id": 334, "answer_sql": ["SELECT T1.element FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id JOIN molecule AS T3 ON T1.molecule_id = T3.molecule_id WHERE T3.label = '-' AND T1.atom_id = 'TR004_7';", "SELECT T1.element FROM atom AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-' AND T1.atom_id = 'TR004_7';", "SELECT T1.element FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id JOIN molecule AS T3 ON T1.molecule_id = T3.molecule_id WHERE T1.atom_id = 'TR004_7' AND T3.label != '-'"]}, {"question_id": 335, "answer_sql": ["SELECT COUNT(DISTINCT T1.molecule_id) AS total_molecules \nFROM atom AS T1 \nJOIN connected AS T2 ON T1.atom_id = T2.atom_id \nJOIN bond AS T3 ON T2.bond_id = T3.bond_id \nWHERE T3.bond_type = ' = ' AND T1.element = 'o'"]}, {"question_id": 336, "answer_sql": ["SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 JOIN connected AS T2 ON T1.molecule_id = T2.atom_id JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '#' AND T1.label != '-';"]}, {"question_id": 337, "answer_sql": ["SELECT atom.element, bond.bond_type FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id JOIN bond ON connected.bond_id = bond.bond_id WHERE molecule.molecule_id = 'TR016';"]}, {"question_id": 338, "answer_sql": ["SELECT atom.atom_id FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = ' = ' AND atom.element = 'c' AND atom.molecule_id = (SELECT molecule_id FROM molecule WHERE label = 'TR012')"]}, {"question_id": 339, "answer_sql": ["SELECT atom.atom_id FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+' AND atom.element = 'o';", "SELECT atom.atom_id FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+' AND atom.element = 'o';"]}, {"question_id": 340, "answer_sql": ["SELECT c.id, c.name, c.cardKingdomId, c.cardKingdomFoilId FROM cards c JOIN sets s ON c.setCode = s.code WHERE c.cardKingdomFoilId = c.cardKingdomId AND c.cardKingdomId IS NOT NULL;"]}, {"question_id": 341, "answer_sql": ["SELECT name FROM cards WHERE borderColor = 'borderless' AND cardKingdomFoilId IS NULL", "SELECT c.name, c.borderColor FROM cards c WHERE c.borderColor IS NULL AND c.cardKingdomFoilId IS NULL AND c.cardKingdomId IS NOT NULL;"]}, {"question_id": 342, "answer_sql": ["SELECT c.faceName, c.faceConvertedManaCost FROM cards c WHERE c.faceConvertedManaCost = (SELECT MAX(faceConvertedManaCost) FROM cards);", "SELECT name FROM cards WHERE faceConvertedManaCost > (SELECT MAX(faceConvertedManaCost) FROM cards)"]}, {"question_id": 343, "answer_sql": ["SELECT name FROM cards WHERE frameVersion = '2015' AND edhrecRank < 100;", "SELECT c.* FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE l.status = 'below 100 on EDHRec' AND c.frameVersion = '2015';"]}, {"question_id": 344, "answer_sql": ["SELECT c.name FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.rarity = 'mythic' AND l.status = 'Banned' AND l.format = 'gladiator';", "SELECT c.id, c.name FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.rarity = 'mythic' AND l.status = 'Banned' AND l.format = 'gladiator';", "SELECT c.name FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.rarity = 'mythic' AND l.status = 'Banned' AND l.format = 'gladiator' AND c.type IN ('card', 'promo')"]}, {"question_id": 345, "answer_sql": ["SELECT legalities.status FROM legalities JOIN cards ON legalities.uuid = cards.uuid WHERE cards.types = 'Artifact' AND cards.side IS NULL AND legalities.format = 'vintage';", "SELECT legalities.format, legalities.status \nFROM legalities \nJOIN cards ON legalities.uuid = cards.uuid \nWHERE cards.types = 'Artifact' \nAND cards.side IS NULL \nAND legalities.format = 'vintage' \nAND cards.mcmId IS NOT NULL;"]}, {"question_id": 346, "answer_sql": ["SELECT c.id, c.artist \nFROM cards c \nJOIN legalities l ON c.uuid = l.uuid \nWHERE c.power = '*' OR c.power IS NULL \nAND l.format = 'commander' \nAND l.status = 'Legal' \nAND c.power != '*' \nAND c.power != NULL;"]}, {"question_id": 347, "answer_sql": ["SELECT c.id, c.name, r.text, CASE WHEN c.hasContentWarning = 1 THEN 'Yes' ELSE 'No' END AS has_content_warning, CASE WHEN c.hasFoil = 1 THEN 'Yes' ELSE 'No' END AS has_foil, CASE WHEN c.hasNonFoil = 1 THEN 'Yes' ELSE 'No' END AS has_non_foil, CASE WHEN c.hasAlternativeDeckLimit = 1 THEN 'Yes' ELSE 'No' END AS has_alternative_deck_limit, CASE WHEN c.hasContentWarning = 1 THEN 'Yes' ELSE 'No' END AS has_textless FROM cards c JOIN rulings r ON c.uuid = r.uuid JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.artist = 'Stephen Daniel';"]}, {"question_id": 348, "answer_sql": ["SELECT rulings.date, rulings.text FROM rulings JOIN cards ON rulings.uuid = cards.uuid WHERE cards.name = 'Sublime Epiphany' AND cards.number = '74s';", "SELECT r.text FROM rulings r JOIN cards c ON r.uuid = c.uuid WHERE c.name = 'Sublime Epiphany' AND c.number = '74s';", "SELECT r.text FROM rulings r JOIN cards c ON r.uuid = c.uuid WHERE c.number = '74s';"]}, {"question_id": 349, "answer_sql": ["SELECT cards.name, cards.artist, isPromo FROM rulings JOIN cards ON rulings.uuid = cards.uuid GROUP BY cards.uuid ORDER BY COUNT(rulings.uuid) DESC LIMIT 1;", "SELECT cards.name, cards.artist, CASE WHEN cards.isPromo = 1 THEN 'Yes' ELSE 'No' END AS isPromo FROM cards JOIN rulings ON cards.uuid = rulings.uuid GROUP BY cards.name, cards.artist, cards.isPromo ORDER BY count(rulings.uuid) DESC LIMIT 1;", "SELECT cards.name, cards.artist, isPromo FROM cards JOIN rulings ON cards.uuid = rulings.uuid GROUP BY cards.name, cards.artist, isPromo ORDER BY count(rulings.uuid) DESC LIMIT 1;"]}, {"question_id": 350, "answer_sql": ["SELECT t1.language FROM set_translations t1 JOIN cards t2 ON t1.setCode = t2.setCode WHERE t2.number = '29' AND t2.isAlternative = 1;"]}, {"question_id": 351, "answer_sql": []}, {"question_id": 352, "answer_sql": ["SELECT CAST(SUM(CASE WHEN T2.language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.id) AS percentage FROM cards AS T1 JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Chinese Simplified';", "SELECT CAST(SUM(CASE WHEN T2.language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.id) AS percentage FROM cards AS T1 JOIN foreign_data AS T2 ON T1.uuid = T2.uuid;"]}, {"question_id": 353, "answer_sql": ["SELECT s.code, s.totalSetSize FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.language = 'Italian';", "SELECT s.id AS setId, s.totalSetSize AS totalCards FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.language = 'Italian';", "SELECT s.code AS setCode, COUNT(c.id) AS totalCards FROM sets s JOIN set_translations st ON s.code = st.setCode JOIN cards c ON s.code = c.setCode WHERE st.language = 'Italian' GROUP BY s.code", "SELECT s.id AS setId, s.name AS setCode, COUNT(c.id) AS totalCards FROM sets s JOIN set_translations st ON s.code = st.setCode JOIN cards c ON s.code = c.setCode WHERE st.language = 'Italian' GROUP BY s.id, s.name ORDER BY s.name;", "SELECT s.code AS setCode, s.name AS setName, COUNT(*) AS totalCards FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.language = 'Italian' GROUP BY s.code, s.name"]}, {"question_id": 354, "answer_sql": ["SELECT COUNT(DISTINCT type) AS type_count FROM cards WHERE artist = 'Aaron Boyd';", "SELECT COUNT(DISTINCT type) AS type_count FROM cards WHERE artist = 'Aaron Boyd' AND flavorText LIKE '%Aaron Boyd illustrated%'"]}, {"question_id": 355, "answer_sql": ["SELECT keywords FROM cards WHERE name = 'Angel of Mercy';"]}, {"question_id": 356, "answer_sql": ["SELECT COUNT(*) AS infinite_power_count FROM cards WHERE power = '*';"]}, {"question_id": 357, "answer_sql": ["SELECT promoTypes FROM cards WHERE name = 'Duress';"]}, {"question_id": 358, "answer_sql": ["SELECT borderColor FROM cards WHERE name = 'Ancestor\\u2019s Chosen';"]}, {"question_id": 359, "answer_sql": ["SELECT type FROM cards WHERE name = 'Ancestor\\u2019s Chosen' AND originalType IS NOT NULL;"]}, {"question_id": 360, "answer_sql": ["SELECT DISTINCT T1.language FROM set_translations AS T1 JOIN sets AS T2 ON T1.setCode = T2.code JOIN cards AS T3 ON T2.code = T3.setCode WHERE T3.name = 'Angel of Mercy';", "SELECT DISTINCT t1.language FROM set_translations t1 JOIN sets t2 ON t1.setCode = t2.code WHERE t2.name = 'Angel of Mercy';"]}, {"question_id": 361, "answer_sql": ["SELECT COUNT(*) AS num_cards FROM legalities JOIN cards ON legalities.uuid = cards.uuid WHERE legalities.status = 'restricted' AND cards.isTextless = 0;"]}, {"question_id": 362, "answer_sql": ["SELECT text FROM rulings WHERE uuid = (SELECT uuid FROM cards WHERE name = 'Condemn');", "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Condemn';", "SELECT T1.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Condemn';"]}, {"question_id": 363, "answer_sql": ["SELECT COUNT(*) AS starter_cards_count FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'restricted' AND cards.isStarter = 1;"]}, {"question_id": 364, "answer_sql": ["SELECT legalities.status FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.name = 'Cloudchaser Eagle';"]}, {"question_id": 365, "answer_sql": ["SELECT type FROM cards WHERE name = 'Benalish Knight';"]}, {"question_id": 366, "answer_sql": ["SELECT T1.text FROM cards AS T1 JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight' AND T2.text IS NOT NULL;", "SELECT T1.format FROM legalities AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.name = 'Benalish Knight';", "SELECT legalities.status FROM legalities JOIN cards ON legalities.uuid = cards.uuid JOIN sets ON cards.setCode = sets.code WHERE cards.name = 'Benalish Knight';", "SELECT legalities.status FROM legalities JOIN cards ON legalities.uuid = cards.uuid JOIN set_translations ON cards.setCode = set_translations.setCode WHERE cards.name = 'Benalish Knight';"]}, {"question_id": 367, "answer_sql": ["SELECT DISTINCT artist FROM cards WHERE name LIKE '%Phyrexian%';", "SELECT artist FROM cards WHERE name = 'Phyrexian';", "SELECT artist FROM cards WHERE flavorText LIKE '%Phyrexian%' AND flavorText NOT LIKE '%illustrated%';"]}, {"question_id": 368, "answer_sql": ["SELECT CAST(COUNT(CASE WHEN borderColor = 'borderless' THEN id ELSE NULL END) AS REAL) * 100 / COUNT(id) AS percentage FROM cards;", "SELECT CAST(COUNT(CASE WHEN borderColor = 'borderless' THEN id ELSE NULL END) AS REAL) * 100 / COUNT(id) AS percentage FROM cards WHERE borderColor = 'borderless';"]}, {"question_id": 369, "answer_sql": ["SELECT COUNT(*) FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'German' AND cards.isReprint = 1;"]}, {"question_id": 370, "answer_sql": ["SELECT COUNT(DISTINCT c.id) FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.borderColor = 'borderless' AND fd.language = 'Russian';"]}, {"question_id": 371, "answer_sql": []}, {"question_id": 372, "answer_sql": ["SELECT COUNT(*) AS toughness_99_count FROM cards WHERE toughness = '99';"]}, {"question_id": 373, "answer_sql": ["SELECT * FROM cards WHERE artist = 'Aaron Boyd';", "SELECT name FROM cards WHERE artist = 'Aaron Boyd';", "SELECT c.* FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.artist = 'Aaron Boyd';", "SELECT c.name FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.artist = 'Aaron Boyd';"]}, {"question_id": 374, "answer_sql": ["SELECT COUNT(id) AS black_border_cards_only_on_mtgo FROM cards WHERE borderColor = 'black' AND availability = 'mtgo';"]}, {"question_id": 375, "answer_sql": ["SELECT id FROM cards WHERE convertedManaCost = 0;"]}, {"question_id": 376, "answer_sql": ["SELECT layout FROM cards WHERE keywords LIKE '%flying%'", "SELECT cards.layout FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.flavorText LIKE '%flying%' AND cards.layout IS NOT NULL;"]}, {"question_id": 377, "answer_sql": ["SELECT COUNT(T1.id) AS NumberOfCards FROM cards AS T1 WHERE T1.originalType = 'Summon - Angel' AND T1.subtypes NOT IN ('Angel');", "SELECT COUNT(*) AS card_count FROM cards WHERE originalType = 'Summon - Angel' AND subtypes NOT LIKE '%Angel%';"]}, {"question_id": 378, "answer_sql": []}, {"question_id": 379, "answer_sql": ["SELECT id FROM cards WHERE duelDeck = 'a'"]}, {"question_id": 380, "answer_sql": []}, {"question_id": 381, "answer_sql": []}, {"question_id": 382, "answer_sql": []}, {"question_id": 383, "answer_sql": ["SELECT COUNT(*) FROM legalities JOIN cards ON legalities.uuid = cards.uuid WHERE legalities.status = 'Banned' AND cards.borderColor = 'white';"]}, {"question_id": 384, "answer_sql": []}, {"question_id": 385, "answer_sql": ["SELECT rulings.date, rulings.text, cards.uuid, cards.text FROM cards JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.name = 'Beacon of Immortality';", "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Beacon of Immortality';", "SELECT rulings.date, rulings.text FROM cards JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.name = 'Beacon of Immortality';", "SELECT T1.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Beacon of Immortality';", "SELECT text FROM rulings WHERE uuid = (SELECT uuid FROM cards WHERE name = 'Beacon of Immortality')"]}, {"question_id": 386, "answer_sql": ["SELECT COUNT(DISTINCT c.id) AS numberOfCards, l.status AS legalityStatus FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.frameVersion = 'future';", "SELECT COUNT(T1.id) AS numberOfCards, T2.status AS legalityStatus FROM cards AS T1 JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.frameVersion = 'future'"]}, {"question_id": 387, "answer_sql": ["SELECT DISTINCT c.colorIdentity, c.colors FROM cards c JOIN sets s ON c.setCode = s.code WHERE s.code = 'OGW';", "SELECT c.colorIdentity, c.colorIndicator FROM cards c JOIN sets s ON c.setCode = s.code WHERE s.code = 'OGW';", "SELECT c.name, c.colorIdentity FROM cards c JOIN sets s ON c.setCode = s.code WHERE s.code = 'OGW';", "SELECT c.colorIdentity, c.colors FROM cards c JOIN sets s ON c.setCode = s.code WHERE s.code = 'OGW';", "SELECT cards.colorIdentity FROM cards JOIN sets ON cards.setCode = sets.code WHERE sets.code = 'OGW';"]}, {"question_id": 388, "answer_sql": ["SELECT t1.language, t1.translation FROM set_translations t1 JOIN cards t2 ON t1.setCode = t2.setCode WHERE t2.convertedManaCost = 5 AND t2.setCode = '10E';", "SELECT set_translations.translation, cards.flavorText FROM cards JOIN set_translations ON cards.uuid = set_translations.setCode WHERE set_translations.setCode = '10E' AND cards.convertedManaCost = 5;", "SELECT T2.language, T2.translation FROM cards AS T1 JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T1.convertedManaCost = 5 AND T1.setCode = '10E'"]}, {"question_id": 389, "answer_sql": ["SELECT T1.name, T2.date FROM cards AS T1 JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Creature - Elf';", "SELECT DISTINCT T1.name, T2.date FROM cards AS T1 JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Creature - Elf';"]}, {"question_id": 390, "answer_sql": ["SELECT DISTINCT cards.colors, cards.layout FROM cards WHERE cards.id BETWEEN 1 AND 20;", "SELECT colorIdentity, layout FROM cards WHERE id BETWEEN 1 AND 20;", "SELECT cards.colors, legalities.format FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.id BETWEEN 1 AND 20;"]}, {"question_id": 391, "answer_sql": ["SELECT c.* \nFROM cards c \nJOIN foreign_data fd ON c.uuid = fd.uuid \nWHERE c.originalType = 'Artifact' \n  AND c.colors LIKE '%B%' \n  AND fd.language IN (SELECT language FROM foreign_data WHERE language IS NOT NULL) \n  AND c.rarity = 'Rare'"]}, {"question_id": 392, "answer_sql": ["SELECT T1.name FROM cards AS T1 JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'uncommon' ORDER BY T2.date ASC LIMIT 3;", "SELECT T1.name, T2.date FROM cards AS T1 JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'uncommon' ORDER BY T2.date ASC LIMIT 3;"]}, {"question_id": 393, "answer_sql": ["SELECT COUNT(*) AS num_cards FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.artist = 'John Avon' AND cards.cardKingdomFoilId IS NOT NULL AND cards.cardKingdomFoilId NOT LIKE '%powerful%';", "SELECT COUNT(*) FROM cards WHERE artist = 'John Avon' AND cardKingdomFoilId IS NOT NULL AND cardKingdomFoilId NOT LIKE '%powerful%';", "SELECT COUNT(*) AS num_cards \nFROM cards \nJOIN foreign_data ON cards.uuid = foreign_data.uuid \nWHERE cards.artist = 'John Avon' \n  AND cards.cardKingdomFoilId IS NOT NULL \n  AND foreign_data.type = 'foil';"]}, {"question_id": 394, "answer_sql": ["SELECT COUNT(*) FROM cards WHERE borderColor = 'white' AND cardKingdomFoilId = cardKingdomId AND cardKingdomId IS NOT NULL;"]}, {"question_id": 395, "answer_sql": ["SELECT COUNT(*) FROM cards WHERE artist = 'UDON' AND availability = 'mtgo' AND hand = '-1';", "SELECT COUNT(*) FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.artist = 'UDON' AND cards.availability = 'mtgo' AND cards.hand = '-1';"]}, {"question_id": 396, "answer_sql": ["SELECT COUNT(*) AS card_count FROM cards WHERE frameVersion = '1993' AND availability = 'paper' AND hasContentWarning = 1;"]}, {"question_id": 397, "answer_sql": ["SELECT cards.manaCost FROM cards WHERE cards.layout = 'normal' AND cards.frameVersion = '2003' AND cards.borderColor = 'black' AND cards.availability IN ('paper', 'mtgo')"]}, {"question_id": 398, "answer_sql": ["SELECT SUM(convertedManaCost) AS total_unconverted_mana FROM cards WHERE artist = 'Rob Alexander';", "SELECT SUM(convertedManaCost) AS total_unconverted_mana FROM cards JOIN ( SELECT artist FROM cards WHERE artist = 'Rob Alexander' ) AS artist_cards ON cards.artist = artist_cards.artist;"]}, {"question_id": 399, "answer_sql": ["SELECT DISTINCT type FROM cards WHERE availability = 'arena';", "SELECT types FROM cards WHERE availability = 'arena';", "SELECT DISTINCT types FROM cards WHERE availability = 'arena';", "SELECT type FROM cards WHERE availability = 'arena';"]}, {"question_id": 400, "answer_sql": ["SELECT DISTINCT setCode FROM set_translations WHERE language = 'Spanish'"]}, {"question_id": 401, "answer_sql": ["SELECT CAST(COUNT(CASE WHEN hand = '+3' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(id) AS percentage FROM cards WHERE frameEffects = 'legendary';"]}, {"question_id": 402, "answer_sql": ["SELECT c.id FROM cards c WHERE c.isStorySpotlight = 1 AND c.isTextless = 1"]}, {"question_id": 403, "answer_sql": ["SELECT c.name, (SUM(CASE WHEN T2.language = 'Spanish' THEN 1 ELSE 0 END) * 100) / COUNT(c.id) AS percentage FROM cards c JOIN set_translations T2 ON c.uuid = T2.setCode GROUP BY c.name ORDER BY percentage DESC;"]}, {"question_id": 404, "answer_sql": ["SELECT language FROM set_translations WHERE setCode = (SELECT code FROM sets WHERE baseSetSize = 309)"]}, {"question_id": 405, "answer_sql": ["SELECT COUNT(*) FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.language = 'Portuguese (Brasil)' AND sets.block = 'Commander';"]}, {"question_id": 406, "answer_sql": ["SELECT c.id, c.name, c.types FROM cards c JOIN sets s ON c.setCode = s.code JOIN legalities l ON c.uuid = l.uuid WHERE c.types LIKE '%Creature%' AND l.status = 'legal';"]}, {"question_id": 407, "answer_sql": ["SELECT DISTINCT t1.types FROM cards AS t1 JOIN set_translations AS t2 ON t1.setCode = t2.setCode WHERE t2.language = 'German' AND t1.types IS NOT NULL;", "SELECT DISTINCT t1.types FROM cards AS t1 JOIN set_translations AS t2 ON t1.setCode = t2.setCode WHERE t2.language = 'German' AND t1.subtypes IS NOT NULL AND t1.supertypes IS NOT NULL;", "SELECT DISTINCT T1.types FROM cards AS T1 JOIN set_translations AS T2 ON T1.uuid = T2.setCode WHERE T2.language = 'German' AND T1.subtypes IS NOT NULL AND T1.supertypes IS NOT NULL;"]}, {"question_id": 408, "answer_sql": ["SELECT COUNT(*) FROM cards WHERE power IS NULL AND (power IS NULL OR power = '*') AND type IN ('Instant', 'Sorcery', 'Enchantment', 'Artifact', 'Land', 'Planeswalker', 'Creature')", "SELECT COUNT(*) FROM cards WHERE power IS NULL;"]}, {"question_id": 409, "answer_sql": ["SELECT COUNT(DISTINCT c.id) FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE r.text LIKE '%This is a triggered mana ability%' AND c.side IS NULL;"]}, {"question_id": 410, "answer_sql": ["SELECT id FROM cards WHERE artist = 'Erica Yang' AND availability = 'paper' AND setCode = 'Pauper';"]}, {"question_id": 411, "answer_sql": ["SELECT artist FROM cards WHERE text = 'Das perfekte Gegenmittel zu einer dichten Formation';"]}, {"question_id": 412, "answer_sql": ["SELECT foreign_data.name FROM foreign_data JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.artist = 'Matthew D. Wilson' AND foreign_data.language = 'French' AND cards.type = 'Creature' AND cards.layout = 'normal' AND cards.borderColor = 'black';"]}, {"question_id": 413, "answer_sql": ["SELECT COUNT(DISTINCT r.id) AS card_count FROM rulings r JOIN cards c ON r.uuid = c.uuid WHERE c.rarity = 'rare' AND r.date = '2009-01-10';"]}, {"question_id": 414, "answer_sql": ["SELECT T2.language FROM sets AS T1 JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.baseSetSize = 180;", "SELECT language FROM set_translations WHERE setCode = (SELECT code FROM sets WHERE baseSetSize = 180 AND block = 'Ravnica')"]}, {"question_id": 415, "answer_sql": []}, {"question_id": 416, "answer_sql": ["SELECT CAST(COUNT(CASE WHEN foreign_data.language = 'French' AND power IS NULL OR power = '*' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(power IS NULL OR power = '*') FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'French';"]}, {"question_id": 417, "answer_sql": ["SELECT CAST(COUNT(CASE WHEN T2.language = 'Japanese' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T2.language) AS Percentage FROM sets AS T1 JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.type = 'expansion' AND T2.language = 'Japanese';", "SELECT CAST(COUNT(CASE WHEN T1.language = 'Japanese' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.language) AS Percentage FROM set_translations AS T1 JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.type = 'expansion';"]}, {"question_id": 418, "answer_sql": ["SELECT availability FROM cards WHERE artist = 'Daren Bader';", "SELECT DISTINCT t1.availability FROM cards t1 JOIN foreign_data t2 ON t1.uuid = t2.uuid WHERE t1.artist = 'Daren Bader';"]}, {"question_id": 419, "answer_sql": ["SELECT COUNT(*) FROM cards WHERE borderColor = 'borderless' AND edhrecRank > 12000;", "SELECT COUNT(*) FROM cards WHERE borderColor = 'borderless' AND edhrecRank > 12000 AND colorIndicator = 'no borders';"]}, {"question_id": 420, "answer_sql": ["SELECT COUNT(*) AS oversized_reprinted_promoted_cards FROM cards WHERE isOversized = 1 AND isReprint = 1 AND isPromo = 1;"]}, {"question_id": 421, "answer_sql": ["SELECT DISTINCT cards.name FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.power IS NULL OR cards.power = '*' AND cards.promoTypes = 'arenaleague' ORDER BY cards.name ASC LIMIT 3;", "SELECT T1.name, T1.power FROM cards AS T1 JOIN sets AS T2 ON T1.setCode = T2.code JOIN legalities AS T3 ON T1.uuid = T3.uuid WHERE T1.promoTypes = 'arenaleague' AND T1.power IS NULL OR T1.power = '*' ORDER BY T1.name ASC LIMIT 3;", "SELECT DISTINCT cards.id, cards.name, cards.power FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.power IS NULL OR cards.power = '*' AND cards.promoTypes = 'arenaleague' ORDER BY cards.name ASC LIMIT 3;", "SELECT name, power, promoTypes FROM cards WHERE promoTypes = 'arenaleague' AND power IS NULL OR power = '*' ORDER BY name LIMIT 3;"]}, {"question_id": 422, "answer_sql": ["SELECT language FROM foreign_data WHERE multiverseid = 149934;", "SELECT foreign_data.language FROM foreign_data WHERE multiverseid = (SELECT multiverseid FROM cards WHERE number = '149934');"]}, {"question_id": 423, "answer_sql": ["SELECT DISTINCT T1.id AS cardKingdomFoilId, T2.id AS cardKingdomId FROM cards AS T1 JOIN cards AS T2 ON T1.cardKingdomFoilId = T2.id WHERE T1.cardKingdomFoilId IS NOT NULL AND T1.cardKingdomId IS NOT NULL ORDER BY T1.cardKingdomFoilId ASC, T2.cardKingdomId ASC LIMIT 3;", "SELECT DISTINCT c1.id AS foil_id, c2.id AS card_id FROM cards c1 JOIN cards c2 ON c1.cardKingdomFoilId = c2.cardKingdomId WHERE c1.cardKingdomFoilId IS NOT NULL AND c2.cardKingdomId IS NOT NULL ORDER BY c1.cardKingdomFoilId, c1.name LIMIT 3;"]}, {"question_id": 424, "answer_sql": ["SELECT CAST(COUNT(CASE WHEN isTextless = 1 AND layout = 'normal' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(isTextless) AS Proportion FROM cards;", "SELECT CAST(COUNT(CASE WHEN isTextless = 1 AND layout = 'normal' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(isTextless) AS proportion FROM cards WHERE isTextless = 1;"]}, {"question_id": 425, "answer_sql": ["SELECT DISTINCT c.number FROM cards c WHERE c.subtypes LIKE '%Angel%' AND c.subtypes LIKE '%Wizard%' AND c.variations IS NULL;", "SELECT cards.number FROM cards WHERE cards.subtypes LIKE '%Angel%' AND cards.subtypes LIKE '%Wizard%' AND cards.side IS NULL;"]}, {"question_id": 426, "answer_sql": ["SELECT s.id, s.name, t.translation FROM sets s LEFT JOIN set_translations t ON s.code = t.setCode WHERE s.mtgoCode IS NULL OR s.mtgoCode = '' ORDER BY s.name ASC LIMIT 3;", "SELECT s.id, s.name, st.translation FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE s.mtgoCode IS NULL OR s.mtgoCode = '' ORDER BY s.name ASC LIMIT 3;", "SELECT s.id, s.name FROM sets s WHERE s.mtgoCode IS NULL OR s.mtgoCode = '' ORDER BY s.name ASC LIMIT 3;", "SELECT s.id AS setId, s.name AS setName, COUNT(*) AS setCount FROM sets s WHERE s.mtgoCode IS NULL OR s.mtgoCode = '' GROUP BY s.id, s.name ORDER BY setCount DESC LIMIT 3;"]}, {"question_id": 427, "answer_sql": ["SELECT foreign_data.language \nFROM sets \nJOIN cards ON sets.code = cards.setCode \nJOIN foreign_data ON cards.uuid = foreign_data.uuid \nWHERE sets.mcmName = 'Archenemy' AND sets.code = 'ARC'"]}, {"question_id": 428, "answer_sql": ["SELECT set_translations.translation FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE sets.id = 5"]}, {"question_id": 429, "answer_sql": []}, {"question_id": 430, "answer_sql": ["SELECT s.id, s.name FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.language = 'Italian' AND s.block = 'Shadowmoor' ORDER BY s.name ASC LIMIT 2;", "SELECT DISTINCT s.id, s.code FROM sets s JOIN cards c ON s.code = c.setCode JOIN set_translations st ON s.code = st.setCode WHERE st.language = 'Italian' AND s.block = 'Shadowmoor' ORDER BY c.name ASC, s.id ASC LIMIT 2;"]}, {"question_id": 431, "answer_sql": ["SELECT s.id FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.language = 'Japanese' AND s.isForeignOnly = 1 AND s.isFoilOnly = 1;"]}, {"question_id": 432, "answer_sql": ["SELECT T1.name AS setCode, T1.baseSetSize FROM sets AS T1 JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Russian' GROUP BY T1.code ORDER BY T1.baseSetSize DESC LIMIT 1;", "SELECT T1.code, T1.name, T1.baseSetSize FROM sets AS T1 JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Russian' ORDER BY T1.baseSetSize DESC LIMIT 1;", "SELECT T1.name, T1.totalSetSize FROM sets AS T1 JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Russian' ORDER BY T1.totalSetSize DESC LIMIT 1;"]}, {"question_id": 433, "answer_sql": ["SELECT CAST(COUNT(CASE WHEN isOnlineOnly = 1 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(*) AS percentage FROM cards JOIN set_translations ON cards.setCode = set_translations.setCode WHERE set_translations.language = 'Chinese Simplified';", "SELECT CAST(SUM(CASE WHEN T2.language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.id) AS Percentage FROM cards AS T1 JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T1.isOnlineOnly = 1;", "SELECT CAST(SUM(CASE WHEN T2.language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.id) AS percentage FROM cards AS T1 JOIN set_translations AS T2 ON T1.id = T2.setCode WHERE T1.isOnlineOnly = 1;"]}, {"question_id": 434, "answer_sql": []}, {"question_id": 435, "answer_sql": []}, {"question_id": 436, "answer_sql": ["SELECT id FROM cards WHERE frameEffects = 'extendedart' GROUP BY id;"]}, {"question_id": 437, "answer_sql": ["SELECT c.id, c.name, c.borderColor, c.isFullArt FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.borderColor = 'black' AND c.isFullArt = 1;", "SELECT c.id, c.artist, c.asciiName, c.borderColor, c.isFullArt FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.borderColor = 'black' AND c.isFullArt = 1;", "SELECT c.name FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.borderColor = 'black' AND c.isFullArt = 1;", "SELECT name FROM cards WHERE borderColor = 'black' AND isFullArt = 1;"]}, {"question_id": 438, "answer_sql": ["SELECT foreign_data.language FROM set_translations AS foreign_data JOIN sets AS s ON foreign_data.setCode = s.code WHERE s.id = 174"]}, {"question_id": 439, "answer_sql": ["SELECT name FROM sets WHERE code = 'ALL';", "SELECT T1.name FROM sets AS T1 JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.setCode = 'ALL';"]}, {"question_id": 440, "answer_sql": ["SELECT foreign_data.language FROM foreign_data WHERE foreign_data.name = 'A Pedra Fellwar';", "SELECT foreign_data.language FROM foreign_data JOIN cards ON foreign_data.uuid = cards.scryfallId WHERE cards.name = 'A Pedra Fellwar';"]}, {"question_id": 441, "answer_sql": ["SELECT c.setCode FROM cards c JOIN sets s ON c.setCode = s.code WHERE s.releaseDate = '2007-07-13';", "SELECT T1.code FROM sets AS T1 JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.releaseDate = '2007-07-13'", "SELECT T1.code FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'en' AND T2.translation = '07/13/2007';"]}, {"question_id": 442, "answer_sql": ["SELECT sets.baseSetSize, sets.code FROM sets WHERE sets.block IN ('Masques', 'Mirage');", "SELECT T1.baseSetSize, T1.code FROM sets AS T1 JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'en' AND T1.block IN ('Masques', 'Mirage')"]}, {"question_id": 443, "answer_sql": ["SELECT code FROM sets WHERE type = 'expansion'", "SELECT DISTINCT T1.code FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.type = 'expansion';", "SELECT DISTINCT T1.code FROM sets AS T1 JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'en' AND T2.translation = 'Expansion'"]}, {"question_id": 444, "answer_sql": ["SELECT T2.name, T2.type FROM cards AS T1 JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.watermark = 'BOROS' ORDER BY T2.name;"]}, {"question_id": 445, "answer_sql": ["SELECT T2.language, T2.flavorText, T2.type FROM cards AS T1 JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.watermark = 'colorpie';", "SELECT foreign_data.language, foreign_data.flavorText, cards.type FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.watermark = 'colorpie';", "SELECT foreign_data.language, cards.flavorText, cards.type FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.watermark = 'colorpie';"]}, {"question_id": 446, "answer_sql": ["SELECT CAST(COUNT(CASE WHEN convertedManaCost = 10 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(convertedManaCost) AS percentage FROM cards WHERE setCode = 'Abyssal Horror';"]}, {"question_id": 447, "answer_sql": ["SELECT T1.code FROM sets AS T1 JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'en' AND T2.translation = 'Expansion Commander' AND T1.type = 'set';"]}, {"question_id": 448, "answer_sql": ["SELECT T1.name, T1.type FROM cards AS T1 JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.watermark = 'ABZAN' ORDER BY T1.name;"]}, {"question_id": 449, "answer_sql": ["SELECT foreign_data.language, cards.type FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.watermark = 'azorius' AND cards.type = 'Azorius';", "SELECT foreign_data.language, cards.type FROM foreign_data JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.watermark = 'azorius' AND foreign_data.language IS NOT NULL;", "SELECT T2.language, T2.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.watermark = 'azorius'", "SELECT foreign_data.language, cards.type FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.watermark = 'azorius' AND cards.type IN ('Artifact', 'Creature', 'Enchantment', 'Instant', 'Land', 'Planeswalker', 'Sorcery', 'Token', 'Tron');"]}, {"question_id": 450, "answer_sql": ["SELECT COUNT(*) AS powerful_cards_count FROM cards WHERE artist = 'Aaron Miller' AND cardKingdomFoilId = cardKingdomId AND cardKingdomId IS NOT NULL;"]}, {"question_id": 451, "answer_sql": ["SELECT COUNT(*) FROM cards WHERE availability LIKE '%paper%' AND hand = '+%';"]}, {"question_id": 452, "answer_sql": []}, {"question_id": 453, "answer_sql": ["SELECT convertedManaCost FROM cards WHERE name = 'Ancestor`s Chosen';"]}, {"question_id": 454, "answer_sql": ["SELECT COUNT(*) AS unknown_power_count FROM cards WHERE colorIndicator = 'W' AND power = '*';", "SELECT COUNT(T1.id) AS unknown_power_count FROM cards AS T1 JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.borderColor = 'white' AND T1.power = '*';", "SELECT COUNT(*) FROM cards WHERE borderColor = 'white' AND power = '*' OR power IS NULL;", "SELECT COUNT(*) FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.borderColor = 'white' AND cards.power = '*' OR cards.power IS NULL;", "SELECT COUNT(*) AS unknown_power_count FROM cards WHERE borderColor = 'WHITE' AND power = '*';"]}, {"question_id": 455, "answer_sql": ["SELECT name FROM cards WHERE isPromo = 1 AND side IS NOT NULL"]}, {"question_id": 456, "answer_sql": ["SELECT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer';", "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer';", "SELECT DISTINCT types FROM cards WHERE name = 'Molimo, Maro-Sorcerer';", "SELECT DISTINCT type FROM cards WHERE name = 'Molimo, Maro-Sorcerer';"]}, {"question_id": 457, "answer_sql": ["SELECT DISTINCT purchaseUrls FROM cards WHERE promoTypes = 'bundle';"]}, {"question_id": 458, "answer_sql": ["SELECT COUNT(DISTINCT c.artist) AS artist_count FROM cards c JOIN sets s ON c.setCode = s.code WHERE c.borderColor = 'black' AND c.availability LIKE '%arena,mtgo%' AND c.isOnlineOnly = 0;", "SELECT COUNT(DISTINCT c.artist) AS artist_count FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.borderColor = 'black' AND c.printings LIKE '%arena,mtgo%'"]}, {"question_id": 459, "answer_sql": ["SELECT name, convertedManaCost FROM cards WHERE name = 'Serra Angel' OR name = 'Shrine Keeper' ORDER BY convertedManaCost DESC LIMIT 1;"]}, {"question_id": 460, "answer_sql": ["SELECT artist FROM cards WHERE flavorName = 'Battra, Dark Destroyer';", "SELECT c.artist FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE fd.name = 'Battra, Dark Destroyer';"]}, {"question_id": 461, "answer_sql": ["SELECT name, convertedManaCost FROM cards WHERE frameVersion = '2003' ORDER BY convertedManaCost DESC LIMIT 3;", "SELECT name FROM cards WHERE frameVersion = '2003' ORDER BY convertedManaCost DESC LIMIT 3;"]}, {"question_id": 462, "answer_sql": ["SELECT T2.translation FROM sets AS T1 JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.name = 'Ancestor\\u0027s Chosen' AND T2.language = 'Italian';"]}, {"question_id": 463, "answer_sql": ["SELECT COUNT(T2.translation) AS translation_count FROM cards AS T1 JOIN set_translations AS T2 ON T1.uuid = T2.setCode WHERE T1.name = 'Angel of Mercy';"]}, {"question_id": 464, "answer_sql": ["SELECT name FROM cards JOIN set_translations ON cards.setCode = set_translations.setCode WHERE set_translations.language = 'Hauptset Zehnte Edition';"]}, {"question_id": 465, "answer_sql": []}, {"question_id": 466, "answer_sql": ["SELECT COUNT(T1.id) AS numberOfCards FROM cards AS T1 JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T1.artist = 'Adam Rex' AND T2.translation = 'Hauptset Zehnte Edition';", "SELECT COUNT(T1.id) AS numberOfCards FROM cards AS T1 JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T1.artist = 'Adam Rex' AND T2.language = 'en' AND T2.setCode = 'Hauptset Zehnte Edition';"]}, {"question_id": 467, "answer_sql": ["SELECT COUNT(*) AS card_count FROM cards JOIN sets ON cards.setCode = sets.code WHERE sets.baseSetSize = 10;", "SELECT COUNT(id) AS numberOfCards FROM sets WHERE code = 'Hauptset Zehnte Edition' AND baseSetSize > 0;", "SELECT SUM(baseSetSize) AS total_cards FROM sets WHERE code = 'Hauptset Zehnte Edition'"]}, {"question_id": 468, "answer_sql": ["SELECT translation FROM set_translations WHERE language = 'Simplified Chinese' AND setCode = (SELECT code FROM sets WHERE name = 'Eighth Edition');"]}, {"question_id": 469, "answer_sql": ["SELECT EXISTS ( SELECT 1 FROM sets WHERE mtgoCode IS NOT NULL ) AS angel_of_mercy_appeared_on_mtg_online", "SELECT s.id AS set_id FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE s.name = 'Angel of Mercy' AND s.mtgoCode IS NOT NULL;", "SELECT EXISTS ( SELECT 1 FROM sets WHERE name = 'Angel of Mercy' AND mtgoCode IS NOT NULL ) AS angel_of_mercy_in_mtg_online"]}, {"question_id": 470, "answer_sql": ["SELECT releaseDate FROM sets WHERE name = 'Ancestor''s Chosen';"]}, {"question_id": 471, "answer_sql": ["SELECT type FROM sets WHERE code = 'Hauptset Zehnte Edition';"]}, {"question_id": 472, "answer_sql": ["SELECT COUNT(T1.id) AS num_Italian_translations FROM sets AS T1 JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Italian';", "SELECT COUNT(*) AS num_ice_age_sets_with_italian_translation FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE sets.block = 'Ice Age' AND set_translations.language = 'Italian';"]}, {"question_id": 473, "answer_sql": ["SELECT EXISTS ( SELECT 1 FROM sets WHERE code = 'Adarkar Valkyrie' AND isForeignOnly = 1 )", "SELECT CASE WHEN s.isForeignOnly = 1 THEN 'Yes' ELSE 'No' END AS isOnlyAvailableOutsideUS FROM sets s JOIN cards c ON s.code = c.setCode WHERE c.name = 'Adarkar Valkyrie';", "SELECT s.code AS set_code FROM cards c JOIN sets s ON c.setCode = s.code WHERE c.name = 'Adarkar Valkyrie' AND s.isForeignOnly = 1;"]}, {"question_id": 474, "answer_sql": ["SELECT COUNT(*) AS num_sets \nFROM sets \nJOIN set_translations ON sets.code = set_translations.setCode \nWHERE sets.baseSetSize < 10 AND set_translations.translation IS NOT NULL;"]}, {"question_id": 475, "answer_sql": ["SELECT COUNT(*) AS card_count FROM cards JOIN sets ON cards.setCode = sets.code WHERE sets.name = 'Coldsnap' AND borderColor = 'black';", "SELECT COUNT(*) FROM cards WHERE setCode = 'Coldsnap' AND borderColor = 'black';"]}, {"question_id": 476, "answer_sql": ["SELECT T1.name FROM cards AS T1 JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Coldsnap' ORDER BY T1.convertedManaCost DESC LIMIT 1;", "SELECT name FROM cards WHERE setCode = 'Coldsnap' ORDER BY convertedManaCost DESC LIMIT 1;"]}, {"question_id": 477, "answer_sql": ["SELECT DISTINCT c.artist FROM cards c JOIN sets s ON c.setCode = s.code WHERE s.name = 'Coldsnap' AND (c.artist = 'Jeremy Jarvis' OR c.artist = 'Aaron Miller' OR c.artist = 'Chippy');", "SELECT artist FROM cards WHERE setCode = 'Coldsnap' AND (artist = 'Jeremy Jarvis' OR artist = 'Aaron Miller' OR artist = 'Chippy');"]}, {"question_id": 478, "answer_sql": ["SELECT cards.number FROM cards JOIN sets ON cards.setCode = sets.code WHERE sets.name = 'Coldsnap' AND cards.number = 4;", "SELECT number FROM cards WHERE setCode = 'Coldsnap' AND number = 4;"]}, {"question_id": 479, "answer_sql": ["SELECT COUNT(T1.id) AS unknown_power_count FROM cards AS T1 JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.convertedManaCost > 5 AND T1.power = '*' OR T1.power = 'T1.power IS NULL';", "SELECT COUNT(T1.id) AS unknown_power_count FROM cards AS T1 JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.convertedManaCost > 5 AND (T1.power = '*' OR T1.power = 'T1.power IS NULL') AND T2.name = 'Coldsnap';", "SELECT COUNT(T1.id) AS unknown_power_count FROM cards AS T1 JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.convertedManaCost > 5 AND (T1.power = '*' OR T1.power IS NULL);", "SELECT COUNT(T1.id) AS unknown_power_count FROM cards AS T1 JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.convertedManaCost > 5 AND (T1.power = '*' OR T1.power = 'T1.power IS NULL');"]}, {"question_id": 480, "answer_sql": ["SELECT flavorText FROM foreign_data WHERE name = 'Ancestor''s Chosen' AND language = 'Italian';"]}, {"question_id": 481, "answer_sql": ["SELECT DISTINCT f.language FROM foreign_data f JOIN cards c ON f.uuid = c.uuid WHERE c.name = 'Ancestor''s Chosen' AND c.flavorText IS NOT NULL;", "SELECT T2.language FROM cards AS T1 JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Ancestor''s Chosen' AND T2.flavorText IS NOT NULL;", "SELECT language FROM foreign_data WHERE name = 'Ancestor''s Chosen' AND flavorText IS NOT NULL;"]}, {"question_id": 482, "answer_sql": ["SELECT T1.type, T2.language FROM cards AS T1 JOIN set_translations AS T2 ON T1.uuid = T2.setCode WHERE T1.name = 'Ancestor''s Chosen' AND T2.language = 'German';"]}, {"question_id": 483, "answer_sql": ["SELECT r.text FROM cards c JOIN set_translations st ON c.uuid = st.setCode JOIN sets s ON st.setCode = s.code JOIN rulings r ON c.uuid = r.uuid WHERE s.name = 'Coldsnap' AND st.language = 'Italian';"]}, {"question_id": 484, "answer_sql": ["SELECT name FROM cards JOIN set_translations ON cards.setCode = set_translations.setCode WHERE set_translations.language = 'Italian' AND cards.setCode = 'Coldsnap' ORDER BY cards.convertedManaCost DESC LIMIT 1;"]}, {"question_id": 485, "answer_sql": ["SELECT rulings.date FROM rulings JOIN cards ON rulings.uuid = cards.uuid WHERE cards.name = 'Reminisce';", "SELECT date FROM rulings WHERE text = 'Reminisce';"]}, {"question_id": 486, "answer_sql": ["SELECT CAST(SUM(CASE WHEN cards.convertedManaCost = 7 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) AS percentage FROM cards JOIN sets ON cards.setCode = sets.code WHERE sets.name = 'Coldsnap';"]}, {"question_id": 487, "answer_sql": ["SELECT CAST(SUM(CASE WHEN cards.rarity = 'Incredibly Powerful' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) AS incredibly_powerful_percentage FROM cards JOIN sets ON cards.setCode = sets.code WHERE sets.name = 'Coldsnap';", "SELECT CAST(SUM(CASE WHEN cards.rarity = 'Incredibly Powerful' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM cards, sets WHERE cards.setCode = 'Coldsnap' AND cards.cardKingdomFoilId = cards.cardKingdomId AND cards.cardKingdomFoilId IS NOT NULL;"]}, {"question_id": 488, "answer_sql": ["SELECT code FROM sets WHERE releaseDate = '2017-07-14';"]}, {"question_id": 489, "answer_sql": ["SELECT keyruneCode FROM sets WHERE code = 'PKHC';", "SELECT T1.keyruneCode FROM sets AS T1 JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'en' AND T2.translation = 'PKHC';"]}, {"question_id": 490, "answer_sql": ["SELECT mcmId FROM sets WHERE code = 'SS2';", "SELECT T1.mcmId FROM sets AS T1 JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.translation = 'SS2';"]}, {"question_id": 491, "answer_sql": ["SELECT mcmName FROM sets WHERE releaseDate = '2017-06-09';", "SELECT t1.mcmName FROM sets t1 JOIN set_translations t2 ON t1.code = t2.setCode WHERE t1.releaseDate = '2017-06-09';"]}, {"question_id": 492, "answer_sql": ["SELECT type FROM sets WHERE name LIKE '%From the Vault: Lore%';", "SELECT type FROM sets WHERE code = 'From the Vault: Lore';"]}, {"question_id": 493, "answer_sql": ["SELECT parentCode FROM sets WHERE name = 'Commander 2014 Oversized';", "SELECT T1.parentCode FROM sets AS T1 JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.translation = 'Commander 2014 Oversized' AND T1.code = 'Commander 2014 Oversized';"]}, {"question_id": 494, "answer_sql": ["SELECT r.id AS ruling_id, r.date, r.text, f.text AS flavor_text, c.hasContentWarning FROM rulings r JOIN cards c ON r.uuid = c.uuid JOIN foreign_data f ON c.uuid = f.uuid WHERE c.artist = 'Jim Pavelec' AND c.hasContentWarning = 1;", "SELECT c.id, c.artist, c.text, l.text AS ruling_text, c.hasContentWarning FROM cards c JOIN rulings l ON c.uuid = l.uuid WHERE c.artist = 'Jim Pavelec';"]}, {"question_id": 495, "answer_sql": ["SELECT T2.releaseDate FROM cards AS T1 JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.name = 'Evacuation';", "SELECT releaseDate FROM sets WHERE name = 'Evacuation';"]}, {"question_id": 496, "answer_sql": ["SELECT SUM(baseSetSize) AS totalCards FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.translation = 'Rinascita di Alara';"]}, {"question_id": 497, "answer_sql": ["SELECT T1.type FROM sets AS T1 JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.translation = 'Huiti\u00e8me \u00e9dition' ORDER BY T1.type;", "SELECT type FROM sets WHERE code = 'Huiti\u00e8me \u00e9dition';"]}, {"question_id": 498, "answer_sql": ["SELECT set_translations.translation FROM cards JOIN set_translations ON cards.uuid = set_translations.setCode WHERE cards.name = 'Tendo Ice Bridge' AND set_translations.language = 'French';"]}, {"question_id": 499, "answer_sql": ["SELECT COUNT(id) AS translation_count FROM set_translations WHERE setCode = 'Salvat 2011' AND translation IS NOT NULL;"]}, {"question_id": 500, "answer_sql": ["SELECT T1.name FROM sets AS T1 JOIN set_translations AS T2 ON T1.code = T2.setCode JOIN cards AS T3 ON T1.code = T3.setCode WHERE T3.name = 'Fellwar Stone' AND T2.language = 'Japanese';", "SELECT T1.name FROM cards AS T1 JOIN set_translations AS T2 ON T1.setCode = T2.setCode JOIN sets AS T3 ON T2.setCode = T3.code WHERE T2.language = 'Japanese' AND T1.name = 'Fellwar Stone';", "SELECT T1.name FROM cards AS T1 JOIN set_translations AS T2 ON T1.uuid = T2.setCode WHERE T2.language = 'Japanese' AND T1.name = 'Fellwar Stone';"]}, {"question_id": 501, "answer_sql": ["SELECT c.name FROM cards c JOIN sets s ON c.setCode = s.code WHERE s.name = 'Journey into Nyx Hero''s Path' ORDER BY c.convertedManaCost DESC LIMIT 1;", "SELECT T1.name, T1.convertedManaCost FROM cards AS T1 JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Journey into Nyx Hero''s Path' ORDER BY T1.convertedManaCost DESC LIMIT 1;", "SELECT name FROM cards WHERE setCode = 'Journey into Nyx Hero''s Path' ORDER BY convertedManaCost DESC LIMIT 1;"]}, {"question_id": 502, "answer_sql": ["SELECT releaseDate FROM sets WHERE name = 'Ola de fr\u00edo';"]}, {"question_id": 503, "answer_sql": ["SELECT T2.type FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.name = 'Samite Pilgrim';", "SELECT T1.type FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.translation = 'Samite Pilgrim' AND T1.type = 'expansion';"]}, {"question_id": 504, "answer_sql": ["SELECT COUNT(*) AS card_count FROM cards JOIN sets ON cards.setCode = sets.code WHERE sets.name = 'World Championship Decks 2004' AND cards.convertedManaCost = '3';", "SELECT COUNT(*) FROM cards WHERE name = 'World Championship Decks 2004' AND convertedManaCost = '3';"]}, {"question_id": 505, "answer_sql": ["SELECT t2.translation FROM sets AS t1 JOIN set_translations AS t2 ON t1.code = t2.setCode WHERE t1.name = 'Mirrodin' AND t2.language = 'Chinese Simplified';"]}, {"question_id": 506, "answer_sql": []}, {"question_id": 507, "answer_sql": ["SELECT CAST(SUM(CASE WHEN isOnlineOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) AS percentage FROM cards JOIN set_translations ON cards.setCode = set_translations.setCode WHERE language = 'Portuguese (Brazil)';", "SELECT SUM(CASE WHEN isOnlineOnly = 1 THEN 1 ELSE 0 END) * 100 / SUM(language = 'Portuguese (Brazil)') FROM set_translations JOIN cards ON set_translations.setCode = cards.setCode WHERE language = 'Portuguese (Brazil)';"]}, {"question_id": 508, "answer_sql": ["SELECT DISTINCT t1.availability FROM cards t1 WHERE t1.artist = 'Aleksi Briclot' AND t1.isTextless = 1", "SELECT availability FROM cards WHERE artist = 'Aleksi Briclot' AND isTextless = 1;", "SELECT DISTINCT t1.availability FROM cards t1 WHERE t1.artist = 'Aleksi Briclot' AND t1.isTextless = 1 AND t1.availability NOT IN ( SELECT DISTINCT t2.availability FROM cards t2 WHERE t2.artist = 'Aleksi Briclot' AND t2.isTextless = 0 );"]}, {"question_id": 509, "answer_sql": ["SELECT id FROM sets WHERE baseSetSize = (SELECT MAX(baseSetSize) FROM sets)"]}, {"question_id": 510, "answer_sql": ["SELECT artist, MAX(convertedManaCost) AS maxConvertedManaCost FROM cards WHERE side IS NULL GROUP BY artist ORDER BY maxConvertedManaCost DESC LIMIT 1;", "SELECT T1.artist FROM cards AS T1 JOIN ( SELECT uuid FROM cards WHERE side IS NULL ) AS T2 ON T1.uuid = T2.uuid WHERE T1.convertedManaCost = ( SELECT MAX(convertedManaCost) FROM cards WHERE side IS NULL ) ORDER BY T1.convertedManaCost DESC LIMIT 1;", "SELECT artist, MAX(faceConvertedManaCost) AS maxConvertedManaCost FROM cards WHERE side IS NULL GROUP BY artist ORDER BY maxConvertedManaCost DESC LIMIT 1;"]}, {"question_id": 511, "answer_sql": ["SELECT MAX(frameEffects) AS most_common_visual_frame_effects FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL;"]}, {"question_id": 512, "answer_sql": ["SELECT COUNT(*) FROM cards WHERE power IS NULL OR power = '*' AND hasFoil = 0 AND duelDeck = 'a';", "SELECT COUNT(*) FROM cards WHERE duelDeck = 'a' AND power IS NULL AND hasFoil = 0;"]}, {"question_id": 513, "answer_sql": []}, {"question_id": 514, "answer_sql": []}, {"question_id": 515, "answer_sql": ["SELECT MIN(originalReleaseDate) AS oldestReleaseDate, rarity, format FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE rarity = 'mythic' AND status = 'legal' GROUP BY rarity, format ORDER BY originalReleaseDate ASC LIMIT 1;"]}, {"question_id": 516, "answer_sql": ["SELECT COUNT(DISTINCT T1.id) AS numberOfCards FROM cards AS T1 JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Volkan Baga' AND T2.language = 'French';"]}, {"question_id": 517, "answer_sql": ["SELECT COUNT(T1.id) AS rare_enchantment_cards FROM cards AS T1 JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'rare' AND T1.types = 'Enchantment' AND T2.status = 'Legal';", "SELECT COUNT(T1.id) AS rare_enchantment_cards FROM cards AS T1 JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'rare' AND T1.types LIKE '%Enchantment%' AND T1.name = 'Abundance' AND T2.status = 'Legal';"]}, {"question_id": 518, "answer_sql": ["SELECT legalities.format, cards.name FROM legalities JOIN cards ON legalities.uuid = cards.uuid WHERE legalities.status = 'banned' GROUP BY legalities.format ORDER BY COUNT(legalities.format) DESC LIMIT 1;"]}, {"question_id": 519, "answer_sql": ["SELECT language FROM set_translations WHERE setCode = (SELECT code FROM sets WHERE name = 'Battlebond')"]}, {"question_id": 520, "answer_sql": []}, {"question_id": 521, "answer_sql": ["SELECT legalities.status FROM cards JOIN sets ON cards.setCode = sets.code JOIN foreign_data ON cards.uuid = foreign_data.uuid JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.frameVersion = '1997' AND cards.artist = 'D. Alexander Gregory' AND cards.hasContentWarning = 1 AND legalities.format = 'legacy';"]}, {"question_id": 522, "answer_sql": []}, {"question_id": 523, "answer_sql": []}, {"question_id": 524, "answer_sql": ["SELECT DISTINCT artist FROM cards WHERE BorderColor = 'black' AND availability = 'arena';", "SELECT DISTINCT c.artist FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.borderColor = 'black' AND c.availability = 'arena';"]}, {"question_id": 525, "answer_sql": ["SELECT c.uuid FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE l.format = 'oldschool' AND (l.status = 'banned' OR l.status = 'restricted')"]}, {"question_id": 526, "answer_sql": ["SELECT COUNT(*) AS count FROM cards WHERE artist = 'Matthew D. Wilson' AND availability = 'paper';"]}, {"question_id": 527, "answer_sql": ["SELECT MAX(rulings.date) AS date, rulings.text FROM rulings JOIN cards ON cards.uuid = rulings.uuid WHERE cards.artist = 'Kev Walker' ORDER BY MAX(rulings.date) DESC;"]}, {"question_id": 528, "answer_sql": ["SELECT T1.name FROM sets AS T1 JOIN cards AS T2 ON T1.code = T2.setCode JOIN legalities AS T3 ON T2.uuid = T3.uuid WHERE T1.name = 'Hour of Devastation' AND T3.status = 'legal';"]}, {"question_id": 529, "answer_sql": []}, {"question_id": 530, "answer_sql": []}, {"question_id": 531, "answer_sql": ["SELECT users.DisplayName, MAX(users.Reputation) AS MaxReputation FROM users JOIN badges ON users.Id = badges.UserId WHERE users.DisplayName IN ('Harlan', 'Jarrod Dixon') GROUP BY users.DisplayName;", "SELECT DisplayName, Reputation FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') ORDER BY Reputation DESC LIMIT 1;"]}, {"question_id": 532, "answer_sql": []}, {"question_id": 533, "answer_sql": ["SELECT COUNT(DISTINCT u.Id) AS NumberOfUsers FROM users u JOIN ( SELECT u2.Id FROM users u2 WHERE u2.LastAccessDate > '2014-09-01 00:00:00' ) subquery ON u.Id = subquery.Id;"]}, {"question_id": 534, "answer_sql": ["SELECT u.DisplayName FROM users u JOIN ( SELECT AccountId, MAX(Views) as max_views FROM users GROUP BY AccountId ) max_views ON u.Id = max_views.AccountId AND u.Views = max_views.max_views;", "SELECT DisplayName FROM users WHERE Views = (SELECT MAX(Views) FROM users);"]}, {"question_id": 535, "answer_sql": ["SELECT COUNT(DISTINCT u.Id) AS NumberOfUsers FROM users u JOIN votes v ON u.Id = v.UserId WHERE u.UpVotes > 100 AND u.DownVotes > 1;"]}, {"question_id": 536, "answer_sql": ["SELECT COUNT(DISTINCT u.Id) AS NumberOfUsers FROM users u JOIN posts p ON u.AccountId = p.OwnerUserId WHERE u.Views > 10 AND u.CreationDate > '2013-12-31';", "SELECT COUNT(DISTINCT u.Id) AS NumberOfUsers FROM users u JOIN votes v ON u.Id = v.UserId WHERE u.Views > 10 AND u.CreationDate > '2013-12-31';"]}, {"question_id": 537, "answer_sql": ["SELECT COUNT(DISTINCT p.Id) AS NumberOfPosts FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE u.DisplayName = 'csgillespie';", "SELECT COUNT(DISTINCT posts.OwnerUserId) AS NumberOfPostsOwned FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'csgillespie';"]}, {"question_id": 538, "answer_sql": ["SELECT T2.Title FROM users AS T1 JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'csgillespie';"]}, {"question_id": 539, "answer_sql": ["SELECT T2.DisplayName FROM posts AS T1 JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts';"]}, {"question_id": 540, "answer_sql": ["SELECT T1.Title FROM posts AS T1 JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie' ORDER BY T1.ViewCount DESC LIMIT 1;"]}, {"question_id": 541, "answer_sql": ["SELECT u.DisplayName FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE p.FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts) ORDER BY p.FavoriteCount DESC LIMIT 1;", "SELECT u.DisplayName FROM users u JOIN posts p ON u.Id = p.OwnerUserId JOIN votes v ON p.Id = v.PostId GROUP BY u.Id ORDER BY SUM(v.BountyAmount) DESC LIMIT 1;", "SELECT u.DisplayName FROM users u JOIN posts p ON u.Id = p.OwnerUserId JOIN votes v ON p.Id = v.PostId WHERE v.VoteTypeId = 1 ORDER BY p.FavoriteCount DESC LIMIT 1;"]}, {"question_id": 542, "answer_sql": ["SELECT SUM(posts.CommentCount) AS TotalComments \nFROM posts \nJOIN users ON posts.OwnerUserId = users.Id \nWHERE users.DisplayName = 'csgillespie'", "SELECT SUM(CommentCount) AS TotalComments FROM posts WHERE OwnerDisplayName = 'csgillespie';"]}, {"question_id": 543, "answer_sql": ["SELECT MAX(posts.AnswerCount) AS MaxAnswers FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'csgillespie'"]}, {"question_id": 544, "answer_sql": ["SELECT DISTINCT u.DisplayName \nFROM users u \nJOIN postHistory ph ON u.Id = ph.UserId \nJOIN posts p ON ph.PostId = p.Id \nWHERE p.Title = 'Examples for teaching: Correlation does not mean causation' \nORDER BY ph.CreationDate DESC \nLIMIT 1;", "SELECT DISTINCT T2.DisplayName FROM posts AS T1 JOIN users AS T2 ON T1.OwnerUserId = T2.Id JOIN postHistory AS T3 ON T1.Id = T3.PostId WHERE T1.Title = 'Examples for teaching: Correlation does not mean causation' AND T3.UserId = T1.LastEditorUserId", "SELECT DisplayName FROM postHistory JOIN posts ON postHistory.PostId = posts.Id JOIN users ON postHistory.UserId = users.Id WHERE postHistory.Text = 'Examples for teaching: Correlation does not mean causation' AND postHistory.UserId = (SELECT UserId FROM users WHERE Id = (SELECT LastEditorUserId FROM posts WHERE Title = 'Examples for teaching: Correlation does not mean causation'))", "SELECT u.DisplayName FROM users u JOIN posts p ON u.Id = p.LastEditorUserId JOIN postHistory ph ON p.Id = ph.PostId WHERE p.Title = 'Examples for teaching: Correlation does not mean causation'", "SELECT T2.DisplayName FROM posts AS T1 JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Examples for teaching: Correlation does not mean causation' AND T1.LastEditorUserId = T2.Id"]}, {"question_id": 545, "answer_sql": ["SELECT COUNT(T1.Id) AS RootPostCount FROM posts AS T1 JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie' AND T1.ParentId IS NULL;", "SELECT COUNT(T1.ParentId) AS RootPostCount FROM posts AS T1 JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie' AND T1.ParentId IS NULL;"]}, {"question_id": 546, "answer_sql": ["SELECT DISTINCT u.DisplayName FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE p.ClosedDate IS NOT NULL;", "SELECT u.DisplayName FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE p.ClosedDate IS NOT NULL;", "SELECT DISTINCT u.DisplayName FROM users u JOIN posts p ON u.Id = p.OwnerUserId JOIN votes v ON p.Id = v.PostId WHERE p.ClosedDate IS NOT NULL;", "SELECT DisplayName FROM users WHERE Id IN ( SELECT OwnerUserId FROM posts WHERE ClosedDate IS NOT NULL )"]}, {"question_id": 547, "answer_sql": ["SELECT COUNT(T1.Id) AS NumberOfPosts FROM posts AS T1 JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.Age > 65 AND T1.Score > 19;"]}, {"question_id": 548, "answer_sql": ["SELECT users.Location FROM users JOIN posts ON users.Id = posts.OwnerUserId JOIN comments ON posts.Id = comments.PostId WHERE posts.Title = 'Eliciting priors from experts'", "SELECT u.Location FROM users u JOIN posts p ON u.Id = p.OwnerUserId JOIN posts AS e ON p.Id = e.ParentId WHERE e.Title = 'Eliciting priors from experts';"]}, {"question_id": 549, "answer_sql": ["SELECT posts.Body FROM posts JOIN tags ON posts.Id = tags.ExcerptPostId WHERE tags.TagName = 'bayesian';"]}, {"question_id": 550, "answer_sql": ["SELECT p.Body FROM posts p JOIN tags t ON p.Id = t.ExcerptPostId WHERE t.Count = (SELECT MAX(Count) FROM tags) ORDER BY p.Id DESC LIMIT 1;"]}, {"question_id": 551, "answer_sql": ["SELECT COUNT(*) AS BadgeCount FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie');"]}, {"question_id": 552, "answer_sql": ["SELECT DISTINCT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'csgillespie';", "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'csgillespie'"]}, {"question_id": 553, "answer_sql": []}, {"question_id": 554, "answer_sql": ["SELECT DisplayName FROM users WHERE Id = (SELECT UserId FROM badges GROUP BY UserId ORDER BY COUNT(Id) DESC LIMIT 1)"]}, {"question_id": 555, "answer_sql": ["SELECT AVG(posts.Score) AS AverageScore FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'csgillespie';", "SELECT AVG(comments.Score) AS AverageScore FROM comments JOIN users ON comments.UserId = users.Id WHERE users.DisplayName = 'csgillespie';"]}, {"question_id": 556, "answer_sql": ["SELECT AVG(b.Id) AS AverageBadges FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Views > 200;"]}, {"question_id": 557, "answer_sql": ["SELECT COUNT(DISTINCT p.Id) * 100 / (SELECT COUNT(Id) FROM posts WHERE Score > 20) AS Percentage FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.Age > 65 AND p.Score > 20;"]}, {"question_id": 558, "answer_sql": ["SELECT COUNT(T2.Id) AS VoteCount FROM users AS T1 JOIN votes AS T2 ON T1.Id = T2.UserId WHERE T1.Id = 58 AND T2.CreationDate = '2010-07-19';"]}, {"question_id": 559, "answer_sql": ["SELECT MAX(T1.CreationDate) AS MaxVotesCreationDate FROM votes AS T1 WHERE T1.VoteTypeId = (SELECT MAX(T2.VoteTypeId) FROM votes AS T2 GROUP BY T2.PostId)", "SELECT MAX(T1.CreationDate) AS MaxVotesCreationDate FROM votes AS T1 WHERE T1.VoteTypeId = (SELECT MAX(T2.VoteTypeId) FROM votes AS T2 GROUP BY T2.VoteTypeId)", "SELECT CreationDate FROM votes GROUP BY CreationDate ORDER BY COUNT(Id) DESC LIMIT 1;"]}, {"question_id": 560, "answer_sql": ["SELECT COUNT(b.Id) AS Revival_Badges FROM badges b WHERE b.Name = 'Revival';"]}, {"question_id": 561, "answer_sql": ["SELECT posts.Title FROM posts JOIN comments ON posts.Id = comments.PostId WHERE comments.Score = (SELECT MAX(comments.Score) FROM comments) ORDER BY posts.CommunityOwnedDate DESC LIMIT 1;"]}, {"question_id": 562, "answer_sql": ["SELECT COUNT(comments.Id) AS CommentCount FROM posts JOIN comments ON posts.Id = comments.PostId WHERE posts.ViewCount = 1910;", "SELECT T1.CommentCount FROM posts AS T1 JOIN tags AS T2 ON T1.Id = T2.ExcerptPostId WHERE T1.ViewCount = 1910;"]}, {"question_id": 563, "answer_sql": ["SELECT posts.FavoriteCount FROM posts JOIN comments ON posts.Id = comments.PostId JOIN users ON comments.UserId = users.Id WHERE comments.CreationDate = '2014-04-23 20:29:39.0' AND comments.UserId = '3025';", "SELECT T2.FavoriteCount FROM users AS T1 JOIN votes AS T3 ON T1.Id = T3.UserId JOIN posts AS T2 ON T2.Id = T3.PostId JOIN comments AS T4 ON T4.PostId = T2.Id WHERE T1.Id = '3025' AND T4.CreationDate = '2014-04-23 20:29:39.0';"]}, {"question_id": 564, "answer_sql": ["SELECT c.Text FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.ParentId = 107829;", "SELECT T1.Text FROM comments AS T1 JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Id = 107829 LIMIT 1;"]}, {"question_id": 565, "answer_sql": ["SELECT p.Id AS PostId, c.Score AS CommentScore FROM posts p JOIN comments c ON p.Id = c.PostId WHERE c.Score = 0 AND p.ClosedDate IS NULL AND c.CreationDate = '2013-07-12 09:08:18.0' AND p.OwnerUserId = 23853;"]}, {"question_id": 566, "answer_sql": ["SELECT u.Reputation FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE p.Id = 65041;", "SELECT Reputation FROM users WHERE Id = (SELECT AccountId FROM posts WHERE Id = 65041);", "SELECT Reputation FROM users WHERE AccountId = (SELECT OwnerUserId FROM posts WHERE Id = '65041');"]}, {"question_id": 567, "answer_sql": ["SELECT COUNT(T1.Id) AS NumberOfPosts FROM users AS T1 JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Tiago Pasqualini';", "SELECT COUNT(DISTINCT OwnerUserId) AS NumberOfPosts FROM posts WHERE OwnerDisplayName = 'Tiago Pasqualini';"]}, {"question_id": 568, "answer_sql": ["SELECT u.DisplayName FROM votes v JOIN users u ON v.UserId = u.Id WHERE v.Id = 6347;", "SELECT u.DisplayName FROM votes v JOIN users u ON v.UserId = u.Id WHERE v.Id = 381800;"]}, {"question_id": 569, "answer_sql": ["SELECT COUNT(T1.VoteTypeId) AS VoteCount FROM votes AS T1 JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title LIKE '%data visualization%'"]}, {"question_id": 570, "answer_sql": ["SELECT T2.Name FROM users AS T1 JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'DatEpicCoderGuyWhoPrograms';"]}, {"question_id": 571, "answer_sql": ["SELECT COUNT(posts.Id) / COUNT(votes.Id) AS PostVoteRatio FROM posts JOIN users ON posts.OwnerUserId = users.Id JOIN votes ON posts.Id = votes.PostId WHERE users.Id = 24", "SELECT u.DisplayName, COUNT(p.Id) / COUNT(v.Id) AS PostVoteRatio FROM users u JOIN posts p ON u.Id = p.OwnerUserId JOIN votes v ON u.Id = v.UserId WHERE u.Id = 24 GROUP BY u.Id;"]}, {"question_id": 572, "answer_sql": ["SELECT SUM(ViewCount) AS TotalViews FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer';", "SELECT SUM(posts.ViewCount) AS TotalViews FROM posts JOIN tags ON posts.Id = tags.ExcerptPostId WHERE posts.Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer';"]}, {"question_id": 573, "answer_sql": ["SELECT Text FROM comments WHERE Score = 17;"]}, {"question_id": 574, "answer_sql": ["SELECT DisplayName FROM users WHERE WebsiteUrl = 'http://stackoverflow.com';", "SELECT u.DisplayName FROM users u JOIN badges b ON u.Id = b.UserId WHERE u.WebsiteUrl = 'http://stackoverflow.com';", "SELECT u.DisplayName FROM users u JOIN votes v ON u.Id = v.UserId JOIN badges b ON u.Id = b.UserId WHERE u.WebsiteUrl = 'http://stackoverflow.com';"]}, {"question_id": 575, "answer_sql": ["SELECT T2.Name FROM users AS T1 JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'SilentGhost';"]}, {"question_id": 576, "answer_sql": ["SELECT DISTINCT c.UserId FROM comments c WHERE c.Text = 'thank you user93';"]}, {"question_id": 577, "answer_sql": ["SELECT c.Text FROM comments c JOIN users u ON c.UserId = u.Id WHERE u.DisplayName = 'A Lion';", "SELECT c.Id, c.Text FROM comments c JOIN users u ON c.UserId = u.Id WHERE u.DisplayName = 'A Lion';"]}, {"question_id": 578, "answer_sql": ["SELECT u.DisplayName, u.Reputation FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.Title = 'Understanding what Dassault iSight is doing?';", "SELECT u.DisplayName, u.Reputation FROM users u JOIN posts p ON u.Id = p.OwnerUserId JOIN comments c ON p.Id = c.PostId WHERE p.Title = 'Understanding what Dassault iSight is doing?'"]}, {"question_id": 579, "answer_sql": ["SELECT Text FROM comments WHERE PostId = ( SELECT Id FROM posts WHERE Title = 'How does gentle boosting differ from AdaBoost?' )"]}, {"question_id": 580, "answer_sql": ["SELECT users.DisplayName FROM badges JOIN users ON badges.UserId = users.Id WHERE badges.Name = 'Necromancer';", "SELECT u.DisplayName FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Name = 'Necromancer' LIMIT 10;", "SELECT DisplayName FROM users WHERE Id IN ( SELECT UserId FROM badges WHERE Name = 'Necromancer' );", "SELECT DisplayName FROM users WHERE DisplayName LIKE '%Necromancer%' LIMIT 10;"]}, {"question_id": 581, "answer_sql": ["SELECT T2.DisplayName FROM posts AS T1 JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Open source tools for visualizing multi-dimensional data' AND T1.LastEditorUserId IS NOT NULL AND T1.LastEditorUserId = T2.Id"]}, {"question_id": 582, "answer_sql": ["SELECT T1.Title FROM posts AS T1 JOIN postHistory AS T2 ON T1.Id = T2.PostId JOIN users AS T3 ON T2.UserId = T3.Id WHERE T3.DisplayName = 'Vebjorn Ljosa' AND T2.Comment IS NOT NULL;", "SELECT p.Title FROM posts p JOIN postHistory ph ON p.Id = ph.PostId JOIN users u ON ph.UserId = u.Id WHERE u.DisplayName = 'Vebjorn Ljosa' AND ph.PostHistoryTypeId = 2;"]}, {"question_id": 583, "answer_sql": ["SELECT SUM(posts.Score) AS TotalScore, users.WebsiteUrl FROM posts JOIN users ON posts.OwnerUserId = users.Id JOIN postHistory ON posts.Id = postHistory.PostId WHERE postHistory.UserId = (SELECT Id FROM users WHERE DisplayName = 'Yevgeny') GROUP BY users.WebsiteUrl;", "SELECT SUM(posts.Score) AS TotalScore, users.WebsiteUrl FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE posts.LastEditorUserId = (SELECT Id FROM users WHERE DisplayName = 'Yevgeny') GROUP BY users.WebsiteUrl;", "SELECT p.Score, u.WebsiteUrl FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.LastEditorUserId = (SELECT Id FROM users WHERE DisplayName = 'Yevgeny')", "SELECT p.Score, u.WebsiteUrl \nFROM posts p \nJOIN users u ON p.OwnerUserId = u.Id \nJOIN postHistory ph ON p.Id = ph.PostId \nWHERE u.DisplayName = 'Yevgeny' AND ph.UserId = u.Id"]}, {"question_id": 584, "answer_sql": ["SELECT c.Text FROM comments c JOIN postHistory ph ON c.Id = ph.Id JOIN posts p ON ph.PostId = p.Id WHERE p.Title = 'Why square the difference instead of taking the absolute value in standard deviation?' AND ph.Comment IS NOT NULL AND ph.UserId IN ( SELECT u.Id FROM users u JOIN votes v ON u.Id = v.UserId WHERE v.VoteTypeId = 2 )"]}, {"question_id": 585, "answer_sql": ["SELECT SUM(votes.BountyAmount) AS TotalBountyAmount FROM posts JOIN votes ON posts.Id = votes.PostId WHERE posts.Title LIKE '%data%'"]}, {"question_id": 586, "answer_sql": ["SELECT u.DisplayName FROM users u JOIN votes v ON u.Id = v.UserId JOIN posts p ON v.PostId = p.Id WHERE p.Title LIKE '%variance%' AND v.BountyAmount = 50;"]}, {"question_id": 587, "answer_sql": ["SELECT p.Id AS PostId, p.Title, p.Body, AVG(p.ViewCount) AS AverageViewCount, COUNT(CASE WHEN p.Score IS NOT NULL THEN 1 ELSE NULL END) AS CommentCount FROM posts p JOIN tags t ON p.Id = t.ExcerptPostId WHERE t.TagName = 'humor' GROUP BY p.Id, p.Title, p.Body ORDER BY p.ViewCount DESC;"]}, {"question_id": 588, "answer_sql": ["SELECT COUNT(DISTINCT c.Id) AS TotalComments FROM comments c JOIN users u ON c.UserId = u.Id WHERE u.Id = 13;"]}, {"question_id": 589, "answer_sql": ["SELECT Id FROM users ORDER BY Reputation DESC LIMIT 1;", "SELECT AccountId FROM users ORDER BY Reputation DESC LIMIT 1;"]}, {"question_id": 590, "answer_sql": ["SELECT Id FROM users ORDER BY Views ASC LIMIT 1;"]}, {"question_id": 591, "answer_sql": ["SELECT COUNT(DISTINCT b.UserId) AS NumberOfUsersAwardedWithSupporterBadge FROM badges b WHERE b.Date BETWEEN '2011-01-01' AND '2011-12-31';"]}, {"question_id": 592, "answer_sql": ["SELECT COUNT(DISTINCT b.UserId) AS NumberOfUsersWithMoreThan5Badges FROM badges b WHERE b.Name > 5;", "SELECT COUNT(DISTINCT T1.Id) AS NumberOfUsersWithMoreThan5Badges FROM users AS T1 JOIN badges AS T2 ON T1.Id = T2.UserId GROUP BY T1.Id HAVING COUNT(T2.Name) > 5;"]}, {"question_id": 593, "answer_sql": ["SELECT COUNT(DISTINCT u.Id) FROM users u JOIN badges b ON u.Id = b.UserId WHERE u.Location = 'New York' AND b.Name IN ('Teacher', 'Supporter');"]}, {"question_id": 594, "answer_sql": ["SELECT u.DisplayName, u.Reputation FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.Id = 1;", "SELECT users.DisplayName, users.Reputation FROM users JOIN posts ON users.Id = posts.OwnerUserId JOIN postHistory ON posts.Id = postHistory.PostId WHERE posts.Id = 1;", "SELECT users.DisplayName, users.Reputation FROM users JOIN posts ON users.Id = posts.OwnerUserId JOIN votes ON posts.Id = votes.PostId WHERE posts.Id = 1;"]}, {"question_id": 595, "answer_sql": ["SELECT u.DisplayName, COUNT(ph.PostId) AS PostCount FROM users u JOIN postHistory ph ON u.Id = ph.UserId JOIN posts p ON ph.PostId = p.Id WHERE p.ViewCount >= 1000 GROUP BY u.Id, u.DisplayName HAVING COUNT(ph.PostId) = 1;", "SELECT DISTINCT c.UserId FROM comments c JOIN posts p ON c.PostId = p.Id JOIN votes v ON p.Id = v.PostId GROUP BY c.UserId HAVING COUNT(DISTINCT p.Id) = 1 AND p.ViewCount >= 1000;", "SELECT DISTINCT c.UserId FROM comments c JOIN posts p ON c.PostId = p.Id JOIN postHistory ph ON p.Id = ph.PostId GROUP BY c.UserId HAVING COUNT(DISTINCT ph.Id) = 1 AND p.ViewCount >= 1000;", "SELECT u.DisplayName FROM users u JOIN postHistory ph ON u.Id = ph.UserId JOIN posts p ON ph.PostId = p.Id WHERE p.ViewCount >= 1000 GROUP BY u.Id, u.DisplayName HAVING COUNT(DISTINCT ph.Id) = 1;"]}, {"question_id": 596, "answer_sql": ["SELECT u.DisplayName, b.Name FROM users u JOIN ( SELECT UserId, COUNT(Id) AS CommentCount FROM comments GROUP BY UserId ORDER BY CommentCount DESC LIMIT 1 ) c ON u.Id = c.UserId JOIN badges b ON u.Id = b.UserId;"]}, {"question_id": 597, "answer_sql": ["SELECT COUNT(DISTINCT u.Id) AS India_Teacher_Badge_Count FROM users u JOIN badges b ON u.Id = b.UserId WHERE u.Location = 'India' AND b.Name = 'Teacher';"]}, {"question_id": 598, "answer_sql": []}, {"question_id": 599, "answer_sql": ["SELECT pht.PostHistoryTypeId, COUNT(DISTINCT ch.UserId) AS UniqueUsers FROM postHistory pht JOIN comments ch ON pht.PostId = ch.PostId WHERE pht.PostId = 3720 GROUP BY pht.PostHistoryTypeId;", "SELECT p.posthistorytypeid, COUNT(DISTINCT c.UserId) AS unique_users FROM posthistory p JOIN postlinks pl ON p.Id = pl.PostId JOIN comments c ON p.Id = c.PostId WHERE p.PostId = 3720 GROUP BY p.posthistorytypeid"]}, {"question_id": 600, "answer_sql": ["SELECT p.Id, p.ViewCount FROM posts p JOIN postLinks pl ON p.Id = pl.PostId JOIN posts r ON pl.RelatedPostId = r.Id WHERE p.Id = 61217;", "SELECT p.Id, p.ViewCount FROM postLinks pl JOIN posts p ON pl.PostId = p.Id WHERE pl.RelatedPostId = 61217;", "SELECT p.Id, p.ViewCount FROM postLinks pl JOIN posts p ON pl.PostId = p.Id JOIN postHistory ph ON p.Id = ph.PostId WHERE pl.RelatedPostId = 61217;", "SELECT p.Id, p.ViewCount FROM postLinks pl JOIN posts p ON pl.RelatedPostId = p.Id WHERE pl.PostId = 61217;"]}, {"question_id": 601, "answer_sql": ["SELECT Score, PostTypeId FROM posts WHERE Id = 395;", "SELECT comments.Score, postLinks.LinkTypeId FROM comments JOIN postLinks ON comments.PostId = postLinks.PostId WHERE comments.PostId = 395;", "SELECT comments.Score, postLinks.LinkTypeId FROM postHistory AS ph JOIN posts AS p ON ph.PostId = p.Id JOIN comments AS comments ON ph.PostId = comments.PostId JOIN postLinks AS postLinks ON p.Id = postLinks.PostId WHERE p.Id = 395;"]}, {"question_id": 602, "answer_sql": ["SELECT posts.Id, users.Id FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE posts.Score > 60;"]}, {"question_id": 603, "answer_sql": ["SELECT SUM(favoriteCount) AS TotalFavoriteCount FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.Id = 686 AND strftime('%Y', posts.CreaionDate) = '2011';"]}, {"question_id": 604, "answer_sql": ["SELECT AVG(users.UpVotes) AS AverageUpVotes, AVG(users.Age) AS AverageAge FROM users WHERE users.AccountId IN ( SELECT posts.OwnerUserId FROM posts GROUP BY posts.OwnerUserId HAVING COUNT(posts.OwnerUserId) > 10 )", "SELECT AVG(users.UpVotes) AS AverageUpVotes, AVG(users.Age) AS AverageAge FROM users WHERE users.Id IN ( SELECT OwnerUserId FROM posts GROUP BY OwnerUserId HAVING COUNT(OwnerUserId) > 10 )"]}, {"question_id": 605, "answer_sql": ["SELECT COUNT(DISTINCT UserId) AS NumberOfUsersWithAnnouncerBadge FROM badges WHERE Name = 'Announcer';", "SELECT COUNT(DISTINCT UserId) AS NumberOfUsersWithAnnouncerBadge FROM badges;"]}, {"question_id": 606, "answer_sql": ["SELECT DISTINCT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.LastAccessDate = '2010-07-19 19:39:08';"]}, {"question_id": 607, "answer_sql": ["SELECT COUNT(*) AS PositiveComments FROM comments WHERE Score > 60;", "SELECT COUNT(T2.Id) AS PositiveCommentsCount FROM comments AS T1 JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Score > 60;"]}, {"question_id": 608, "answer_sql": ["SELECT c.Text FROM comments c JOIN users u ON c.UserId = u.Id WHERE c.CreationDate = '2010-07-19 19:16:14.0';"]}, {"question_id": 609, "answer_sql": ["SELECT COUNT(DISTINCT p.Id) AS NumberOfPostsWithScore10 FROM posts p WHERE p.Score = 10;", "SELECT COUNT(T1.Id) AS NumberOfPostsWithScore10 FROM posts AS T1 JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T2.Score = 10;", "SELECT COUNT(DISTINCT p.Id) AS NumberOfPostsWithScore10 FROM posts p JOIN comments c ON p.Id = c.PostId WHERE c.Score = 10;"]}, {"question_id": 610, "answer_sql": ["SELECT DISTINCT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Reputation = (SELECT MAX(Reputation) FROM users) ORDER BY b.Name;", "SELECT DISTINCT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Reputation = (SELECT MAX(Reputation) FROM users) ORDER BY u.Reputation DESC;", "SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Reputation = (SELECT MAX(Reputation) FROM users);", "SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Reputation = (SELECT MAX(Reputation) FROM users) ORDER BY b.Name;"]}, {"question_id": 611, "answer_sql": ["SELECT u.Reputation FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Date = '2010-07-19 19:39:08.0';", "SELECT u.Reputation FROM users u JOIN badges b ON u.Id = b.UserId JOIN postHistory ph ON u.Id = ph.UserId WHERE ph.CreationDate = '2010-07-19 19:39:08.0';"]}, {"question_id": 612, "answer_sql": ["SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'Pierre';", "SELECT DISTINCT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'Pierre';"]}, {"question_id": 613, "answer_sql": ["SELECT DISTINCT T1.Date, T2.DisplayName FROM badges AS T1 JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.Location = 'Rochester, NY';", "SELECT b.Date FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Location = 'Rochester, NY';", "SELECT DISTINCT b.Date FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Location = 'Rochester, NY';"]}, {"question_id": 614, "answer_sql": ["SELECT CAST(SUM(CASE WHEN T2.Name = 'Teacher' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.Id) FROM users AS T1 JOIN badges AS T2 ON T1.Id = T2.UserId;", "SELECT CAST(COUNT(DISTINCT UserId) AS REAL) * 100 / COUNT(DISTINCT UserId) AS Percentage FROM badges WHERE Name = 'Teacher';"]}, {"question_id": 615, "answer_sql": ["SELECT CAST(COUNT(CASE WHEN users.Age BETWEEN 13 AND 18 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(users.Id) FROM users JOIN badges ON users.Id = badges.UserId WHERE badges.Name = 'Organizer';"]}, {"question_id": 616, "answer_sql": ["SELECT comments.Score FROM comments JOIN posts ON comments.PostId = posts.Id JOIN users ON posts.OwnerUserId = users.Id WHERE comments.CreationDate = '2010-07-19 19:19:56.0';", "SELECT comments.Score FROM posts JOIN comments ON posts.Id = comments.PostId WHERE posts.CreaionDate = '2010-07-19 19:19:56.0'"]}, {"question_id": 617, "answer_sql": ["SELECT c.Text AS DetailedCommentContent FROM comments c JOIN posts p ON c.PostId = p.Id WHERE c.CreationDate = '2010-07-19 19:37:33.0'", "SELECT c.Id AS CommentId, c.Text AS CommentContent FROM comments c JOIN posts p ON c.PostId = p.Id WHERE c.CreationDate = '2010-07-19 19:37:33.0';", "SELECT c.Text FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.CreaionDate = '2010-07-19 19:37:33.0'"]}, {"question_id": 618, "answer_sql": ["SELECT u.Age FROM users u JOIN badges b ON u.Id = b.UserId WHERE u.Location = 'Vienna, Austria' AND b.Name IS NOT NULL;", "SELECT U.Age FROM users U JOIN posts P ON U.Id = P.OwnerUserId WHERE U.Location = 'Vienna, Austria' AND P.PostTypeId = 1;", "SELECT u.DisplayName, u.Age FROM users u JOIN badges b ON u.Id = b.UserId WHERE u.Location = 'Vienna, Austria' AND b.Name = 'badge_name';"]}, {"question_id": 619, "answer_sql": ["SELECT COUNT(DISTINCT b.UserId) AS AdultBadgeRecipients FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Age BETWEEN 19 AND 65 AND b.Name = 'Supporter';", "SELECT COUNT(badges.UserId) AS AdultBadgeCount FROM badges JOIN users ON badges.UserId = users.Id WHERE users.Age BETWEEN 19 AND 65;", "SELECT COUNT(DISTINCT b.UserId) AS AdultBadgeCount FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Age BETWEEN 19 AND 65;"]}, {"question_id": 620, "answer_sql": ["SELECT COUNT(T1.Views) AS ViewsCount FROM users AS T1 JOIN badges AS T2 ON T1.Id = T2.UserId JOIN posts AS T3 ON T1.Id = T3.OwnerUserId WHERE T2.Date = '2010-07-19 19:39:08.0';", "SELECT COUNT(T1.Views) AS ViewsCount FROM users AS T1 JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Date = '2010-07-19 19:39:08.0';", "SELECT COUNT(DISTINCT u.Id) AS Views FROM users u JOIN badges b ON u.Id = b.UserId JOIN posts p ON u.Id = p.OwnerUserId WHERE b.Date = '2010-07-19 19:39:08.0'", "SELECT COUNT(T1.Views) AS ViewsCount FROM users AS T1 JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.CreaionDate = '2010-07-19 19:39:08.0';", "SELECT COUNT(DISTINCT u.Id) AS Views FROM users u JOIN badges b ON u.Id = b.UserId JOIN votes v ON u.Id = v.UserId WHERE b.Date = '2010-07-19 19:39:08.0'"]}, {"question_id": 621, "answer_sql": ["SELECT DISTINCT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Reputation = (SELECT MIN(Reputation) FROM users) ORDER BY u.Reputation ASC;", "SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Reputation = (SELECT MIN(Reputation) FROM users);", "SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Reputation = (SELECT MIN(Reputation) FROM users) ORDER BY b.Name;", "SELECT DISTINCT b.Name FROM badges b JOIN users u ON b.UserId = u.Id ORDER BY u.Reputation ASC LIMIT 1;", "SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id ORDER BY u.Reputation ASC LIMIT 1;"]}, {"question_id": 622, "answer_sql": ["SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'Sharpie';"]}, {"question_id": 623, "answer_sql": ["SELECT COUNT(*) AS NumberOfEldersWithSupporterBadge FROM users u JOIN badges b ON u.Id = b.UserId WHERE u.Age > 65 AND b.Name = 'Supporter';"]}, {"question_id": 624, "answer_sql": ["SELECT DisplayName FROM users WHERE Id = 30;"]}, {"question_id": 625, "answer_sql": ["SELECT COUNT(*) AS NumberOfUsersFromNewYork FROM users WHERE Location = 'New York';", "SELECT COUNT(DISTINCT u.Id) AS NumberOfUsersFromNewYork FROM users u JOIN badges b ON u.Id = b.UserId WHERE u.Location = 'New York';", "SELECT COUNT(DISTINCT u.Id) AS NumberOfUsersFromNewYork FROM users u JOIN posts p ON u.Id = p.OwnerUserId JOIN tags t ON p.Id = t.ExcerptPostId WHERE u.Location = 'New York';"]}, {"question_id": 626, "answer_sql": []}, {"question_id": 627, "answer_sql": ["SELECT COUNT(*) AS AdultUsers FROM users WHERE Age BETWEEN 19 AND 65;"]}, {"question_id": 628, "answer_sql": ["SELECT DisplayName FROM users WHERE Views = (SELECT MAX(Views) FROM users);"]}, {"question_id": 629, "answer_sql": []}, {"question_id": 630, "answer_sql": ["SELECT DISTINCT t.TagName FROM tags t JOIN users u ON t.ExcerptPostId = u.Id WHERE u.DisplayName = 'John Stauffer';"]}, {"question_id": 631, "answer_sql": ["SELECT COUNT(T1.Id) AS NumberOfPosts FROM users AS T1 JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Daniel Vassallo';"]}, {"question_id": 632, "answer_sql": ["SELECT COUNT(T1.Id) AS VoteCount FROM votes AS T1 JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Harlan';"]}, {"question_id": 633, "answer_sql": ["SELECT p.Id FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'slashnick' ORDER BY p.AnswerCount DESC LIMIT 1", "SELECT p.Id FROM posts p JOIN votes v ON p.Id = v.PostId GROUP BY p.Id ORDER BY AnswerCount DESC LIMIT 1;"]}, {"question_id": 634, "answer_sql": ["SELECT posts.Id AS PostId, posts.Title AS PostTitle, users.DisplayName AS AuthorDisplayName FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE (users.DisplayName = 'Harvey Motulsky' OR users.DisplayName = 'Noah Snyder') GROUP BY posts.Id, posts.Title, users.DisplayName ORDER BY SUM(posts.ViewCount) DESC LIMIT 1;", "SELECT p.Id AS PostId, p.Title AS PostTitle, p.ViewCount AS PostViewCount FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName IN ('Harvey Motulsky', 'Noah Snyder') ORDER BY p.ViewCount DESC LIMIT 1;", "SELECT MAX(posts.ViewCount) AS PopularPost FROM posts \nJOIN users ON posts.OwnerUserId = users.Id \nWHERE users.DisplayName = 'Harvey Motulsky' OR users.DisplayName = 'Noah Snyder'", "SELECT MAX(posts.ViewCount) AS PopularPost FROM posts \nWHERE (OwnerDisplayName = 'Harvey Motulsky' OR OwnerDisplayName = 'Noah Snyder')"]}, {"question_id": 635, "answer_sql": ["SELECT COUNT(DISTINCT p.Id) AS NumberOfPosts FROM posts p JOIN votes v ON p.Id = v.PostId JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'Matt Parker' AND v.VoteTypeId > 4;", "SELECT COUNT(*) AS NumberOfPosts FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'Matt Parker' AND p.Score > 4;", "SELECT COUNT(*) AS PostCount FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE posts.Title LIKE '%Matt Parker%' AND posts.Score > 4;"]}, {"question_id": 636, "answer_sql": ["SELECT COUNT(T1.Score) AS NegativeComments FROM comments AS T1 JOIN posts AS T2 ON T1.PostId = T2.Id JOIN users AS T3 ON T1.UserId = T3.Id WHERE T3.DisplayName = 'Neil McGuigan' AND T1.Score < 60;", "SELECT COUNT(T1.Score) AS NegativeComments FROM comments AS T1 JOIN posts AS T2 ON T1.PostId = T2.Id JOIN users AS T3 ON T2.OwnerUserId = T3.Id WHERE T3.DisplayName = 'Neil McGuigan' AND T1.Score < 60;", "SELECT COUNT(T1.Score) AS NegativeComments FROM posts AS T1 JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T2.Score < 60 AND T1.OwnerDisplayName = 'Neil McGuigan';"]}, {"question_id": 637, "answer_sql": ["SELECT DISTINCT t1.tagName FROM tags t1 JOIN posts p ON t1.ExcerptPostId = p.Id JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'Mark Meckes' AND p.CommentCount = 0;", "SELECT DISTINCT t1.TagName FROM tags t1 WHERE t1.Id NOT IN ( SELECT DISTINCT p.Id FROM posts p INNER JOIN comments c ON p.Id = c.PostId WHERE c.UserDisplayName = 'Mark Meckes' )"]}, {"question_id": 638, "answer_sql": ["SELECT DISTINCT U.DisplayName FROM users U JOIN badges B ON U.Id = B.UserId WHERE B.Name = 'Organizer';", "SELECT u.DisplayName FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Name = 'Organizer';"]}, {"question_id": 639, "answer_sql": ["SELECT CAST(COUNT(CASE WHEN T2.DisplayName = 'Community' THEN T1.Id ELSE NULL END) AS REAL) * 100 / COUNT(T1.Id) AS Percentage FROM posts AS T1 JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Tags LIKE '%r%'"]}, {"question_id": 640, "answer_sql": ["SELECT SUM(CASE WHEN t1.DisplayName = 'Mornington' THEN t2.ViewCount ELSE 0 END) - SUM(CASE WHEN t1.DisplayName = 'Amos' THEN t2.ViewCount ELSE 0 END) AS view_count_difference FROM users t1 JOIN posts t2 ON t1.Id = t2.OwnerUserId JOIN votes ON t2.Id = votes.PostId WHERE t1.DisplayName IN ('Mornington', 'Amos')", "SELECT SUM(CASE WHEN T2.DisplayName = 'Mornington' THEN ViewCount ELSE 0 END) - SUM(CASE WHEN T2.DisplayName = 'Amos' THEN ViewCount ELSE 0 END) AS ViewCountDifference FROM posts AS T1 JOIN users AS T2 ON T1.OwnerUserId = T2.Id;", "SELECT SUM(posts.ViewCount) - SUM(posts.ViewCount) AS view_count_difference FROM posts WHERE posts.OwnerDisplayName = 'Mornington' AND posts.OwnerDisplayName = 'Amos';"]}, {"question_id": 641, "answer_sql": ["SELECT COUNT(DISTINCT T1.UserId) AS NumberOfUsers FROM badges AS T1 JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Date >= '2014-01-01' AND T1.Date < '2015-01-01';", "SELECT COUNT(DISTINCT b.UserId) AS NumberOfUsers FROM badges b WHERE b.Date >= '2014-01-01' AND b.Date < '2015-01-01' AND b.Name = 'commentator';"]}, {"question_id": 642, "answer_sql": []}, {"question_id": 643, "answer_sql": ["SELECT u.DisplayName, u.Age FROM users u JOIN votes v ON u.Id = v.UserId JOIN posts p ON v.PostId = p.Id WHERE p.ViewCount = (SELECT MAX(ViewCount) FROM posts) ORDER BY u.Age ASC;", "SELECT users.DisplayName, users.Age FROM users JOIN votes ON users.Id = votes.UserId JOIN posts ON posts.OwnerUserId = users.Id WHERE posts.ViewCount = (SELECT MAX(ViewCount) FROM posts) ORDER BY users.Age DESC;", "SELECT u.DisplayName, u.Age FROM users u JOIN votes v ON u.Id = v.UserId JOIN posts p ON v.PostId = p.Id WHERE p.ViewCount = (SELECT MAX(ViewCount) FROM posts) ORDER BY u.Age DESC;", "SELECT DisplayName, Age FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users)"]}, {"question_id": 644, "answer_sql": ["SELECT p.LasActivityDate, p.LastEditorUserId FROM posts p JOIN postHistory ph ON p.Id = ph.PostId WHERE p.Title = 'Detecting a given face in a database of facial images' ORDER BY p.LasActivityDate DESC LIMIT 1;", "SELECT p.CreaionDate AS LastEditDate, u.Id AS LastEditorUserId FROM posts p JOIN users u ON p.LastEditorUserId = u.Id WHERE p.Title = 'Detecting a given face in a database of facial images';", "SELECT p.LasActivityDate, u.Id FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.Title = 'Detecting a given face in a database of facial images';", "SELECT p.CreaionDate AS LastEditDate, u.Id AS LastEditorUserId FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.Title = 'Detecting a given face in a database of facial images';", "SELECT p.LasActivityDate AS LastEditDate, p.OwnerUserId AS LastEditUserId FROM posts p JOIN comments c ON p.Id = c.PostId WHERE p.Title = 'Detecting a given face in a database of facial images';"]}, {"question_id": 645, "answer_sql": ["SELECT COUNT(T2.Id) AS NegativeComments FROM users AS T1 JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T2.Score < 60;", "SELECT COUNT(*) AS NegativeComments FROM comments WHERE UserId = 13 AND Score < 60;"]}, {"question_id": 646, "answer_sql": ["SELECT p.Title, u.DisplayName FROM posts p JOIN comments c ON p.Id = c.PostId JOIN users u ON p.OwnerUserId = u.Id WHERE c.Score > 60 ORDER BY p.Score DESC", "SELECT p.Title, u.DisplayName \nFROM posts p \nJOIN comments c ON p.Id = c.PostId \nJOIN users u ON c.UserId = u.Id \nWHERE c.Score > 60 \nORDER BY p.Title;", "SELECT p.Title, u.DisplayName FROM posts p JOIN comments c ON p.Id = c.PostId JOIN users u ON c.UserId = u.Id WHERE p.Score > 60;", "SELECT p.Title, c.UserDisplayName FROM posts p JOIN comments c ON p.Id = c.PostId WHERE c.Score > 60 ORDER BY p.Title;", "SELECT p.Title, c.UserDisplayName FROM comments c JOIN posts p ON c.PostId = p.Id JOIN votes v ON p.Id = v.PostId WHERE c.Score > 60 ORDER BY p.Title;"]}, {"question_id": 647, "answer_sql": ["SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Location IN ('North Pole') AND u.CreationDate BETWEEN '2011-01-01' AND '2011-12-31';"]}, {"question_id": 648, "answer_sql": ["SELECT u.DisplayName, u.WebsiteUrl FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.FavoriteCount > 150;", "SELECT u.DisplayName, u.WebsiteUrl FROM users u JOIN posts p ON u.Id = p.OwnerUserId JOIN votes v ON p.Id = v.PostId WHERE p.FavoriteCount > 150;"]}, {"question_id": 649, "answer_sql": ["SELECT p.Id AS PostId, COUNT(ph.Id) AS PostHistoryCount, p.Title, ph.CreationDate AS LastEditDate FROM posts p JOIN postHistory ph ON p.Id = ph.PostId WHERE p.Title = 'What is the best introductory Bayesian statistics textbook?' GROUP BY p.Id, p.Title, ph.CreationDate ORDER BY ph.CreationDate DESC;", "SELECT PH.PostHistoryTypeId, COUNT(PH.Id) AS PostHistoryCount, PH.CreationDate, PH.UserDisplayName FROM postHistory PH JOIN posts P ON PH.PostId = P.Id WHERE P.Title = 'What is the best introductory Bayesian statistics textbook' GROUP BY PH.PostHistoryTypeId, PH.CreationDate, PH.UserDisplayName ORDER BY PH.CreationDate DESC;", "SELECT p.Id AS PostId, COUNT(ph.Id) AS PostHistoryCount, MAX(ph.CreationDate) AS LastEditDate FROM posts p JOIN postHistory ph ON p.Id = ph.PostId WHERE p.Title = 'What is the best introductory Bayesian statistics textbook?' GROUP BY p.Id", "SELECT p.Id AS PostId, COUNT(ph.Id) AS PostHistoryCount, p.Title, p.LastEditDate FROM posts p JOIN postHistory ph ON p.Id = ph.PostId WHERE p.Title = 'What is the best introductory Bayesian statistics textbook?' GROUP BY p.Id, p.Title, p.LastEditDate ORDER BY p.LastEditDate DESC;", "SELECT p.Id AS PostId, COUNT(ph.Id) AS PostHistoryCount, ph.CreationDate AS LastEditDate \nFROM posts p \nJOIN postHistory ph ON p.Id = ph.PostId \nWHERE p.Title = 'What is the best introductory Bayesian statistics textbook?' \nGROUP BY p.Id, ph.CreationDate \nORDER BY PostHistoryCount DESC;"]}, {"question_id": 650, "answer_sql": ["SELECT u.LastAccessDate, u.Location FROM users u JOIN ( SELECT u2.Id FROM users u2 JOIN ( SELECT UserId FROM badges WHERE Name = 'Outliers' ) b ON u2.Id = b.UserId ) sub ON u.Id = sub.Id;"]}, {"question_id": 651, "answer_sql": ["SELECT T2.Title FROM postHistory AS T1 JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title LIKE '%How to tell if something happened in a data set which monitors a value over time%'", "SELECT T2.Title FROM posts AS T1 JOIN postLinks AS T3 ON T1.Id = T3.PostId JOIN posts AS T2 ON T3.RelatedPostId = T2.Id WHERE T1.Title = 'How to tell if something happened in a data set which monitors a value over time';", "SELECT T2.Title FROM postHistory AS T1 JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.Comment LIKE '%How to tell if something happened in a data set which monitors a value over time%'"]}, {"question_id": 652, "answer_sql": []}, {"question_id": 653, "answer_sql": ["SELECT T2.DisplayName FROM posts AS T1 JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.ViewCount = (SELECT MAX(ViewCount) FROM posts) ORDER BY T1.ViewCount DESC LIMIT 1;", "SELECT OwnerDisplayName FROM posts WHERE ViewCount = (SELECT MAX(ViewCount) FROM posts)"]}, {"question_id": 654, "answer_sql": ["SELECT u.DisplayName, u.Location FROM users u JOIN posts p ON u.Id = p.OwnerUserId JOIN tags t ON p.Id = t.ExcerptPostId WHERE t.TagName = 'hypothesis-testing';", "SELECT u.DisplayName, u.Location FROM users u JOIN votes v ON u.Id = v.UserId JOIN posts p ON v.PostId = p.Id JOIN tags t ON p.Id = t.ExcerptPostId WHERE t.TagName = 'hypothesis-testing';"]}, {"question_id": 655, "answer_sql": ["SELECT p.Title AS RelatedPostTitle, pl.LinkTypeId AS LinkTypeId FROM posts p JOIN postLinks pl ON p.Id = pl.PostId WHERE p.Title = 'What are principal component scores?';"]}, {"question_id": 656, "answer_sql": ["SELECT DISTINCT T1.OwnerDisplayName FROM posts AS T1 JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.ParentId IS NOT NULL ORDER BY T2.Score DESC LIMIT 1;", "SELECT T2.DisplayName FROM posts AS T1 JOIN votes AS T3 ON T1.Id = T3.PostId JOIN users AS T2 ON T2.Id = T1.OwnerUserId WHERE T1.ParentId IS NOT NULL ORDER BY T1.Score DESC LIMIT 1;", "SELECT T1.OwnerDisplayName FROM posts AS T1 JOIN ( SELECT ParentId, MAX(Score) AS MaxScore FROM posts GROUP BY ParentId ) AS T2 ON T1.Id = T2.ParentId WHERE T1.ParentId IS NOT NULL ORDER BY T2.MaxScore DESC LIMIT 1;", "SELECT T1.OwnerDisplayName FROM posts AS T1 JOIN posts AS T2 ON T1.ParentId = T2.Id WHERE T2.Score = (SELECT MAX(Score) FROM posts) ORDER BY T1.ParentId LIMIT 1;"]}, {"question_id": 657, "answer_sql": ["SELECT u.DisplayName, u.WebsiteUrl FROM votes v JOIN users u ON v.UserId = u.Id WHERE v.VoteTypeId = 8 ORDER BY v.BountyAmount DESC LIMIT 1;"]}, {"question_id": 658, "answer_sql": ["SELECT T1.Title, T1.ViewCount FROM posts AS T1 ORDER BY T1.ViewCount DESC LIMIT 5;", "SELECT T1.Title, T1.ViewCount FROM posts AS T1 JOIN (SELECT PostTypeId, MAX(ViewCount) AS MaxViewCount FROM posts GROUP BY PostTypeId) AS T2 ON T1.PostTypeId = T2.PostTypeId AND T1.ViewCount = T2.MaxViewCount LIMIT 5;", "SELECT posts.Title FROM posts JOIN tags ON posts.Id = tags.ExcerptPostId JOIN users ON posts.OwnerUserId = users.Id WHERE posts.ViewCount IN ( SELECT MAX(posts.ViewCount) FROM posts GROUP BY posts.Title ) LIMIT 5;", "SELECT posts.Title FROM posts WHERE posts.ViewCount IN ( SELECT MAX(posts.ViewCount) FROM posts ) LIMIT 5;"]}, {"question_id": 659, "answer_sql": ["SELECT COUNT(T1.Id) AS TagCount FROM tags AS T1 WHERE T1.Count BETWEEN 5000 AND 7000;"]}, {"question_id": 660, "answer_sql": ["SELECT OwnerUserId FROM posts ORDER BY FavoriteCount DESC LIMIT 1;"]}, {"question_id": 661, "answer_sql": ["SELECT MAX(T1.Reputation) AS MostInfluentialAge FROM users AS T1 WHERE T1.Id = (SELECT Id FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users))", "SELECT MAX(T1.Age) AS Age FROM users AS T1 WHERE T1.Reputation = (SELECT MAX(Reputation) FROM users)"]}, {"question_id": 662, "answer_sql": []}, {"question_id": 663, "answer_sql": ["SELECT Id FROM users WHERE Age = (SELECT MIN(Age) FROM users)", "SELECT MIN(Age) AS YoungestUserId FROM users;", "SELECT Id FROM users ORDER BY Age ASC LIMIT 1;"]}, {"question_id": 664, "answer_sql": ["SELECT MAX(comments.Score) AS Score FROM comments JOIN posts ON comments.PostId = posts.Id JOIN tags ON posts.Id = tags.ExcerptPostId GROUP BY posts.Id ORDER BY MAX(tags.Count) DESC LIMIT 1;", "SELECT MAX(posts.Score) AS Score FROM posts JOIN tags ON posts.Id = tags.ExcerptPostId GROUP BY posts.Score ORDER BY posts.Score DESC LIMIT 1;", "SELECT MAX(posts.Score) AS MaxScore FROM posts JOIN tags ON posts.Id = tags.ExcerptPostId GROUP BY posts.Id;"]}, {"question_id": 665, "answer_sql": []}, {"question_id": 666, "answer_sql": ["SELECT MAX(posts.Id) AS PostId FROM posts JOIN votes ON posts.Id = votes.PostId JOIN users ON votes.UserId = users.Id WHERE users.Id = 1465 ORDER BY posts.FavoriteCount DESC LIMIT 1;", "SELECT p.Id FROM posts p JOIN votes v ON p.Id = v.PostId JOIN users u ON v.UserId = u.Id WHERE u.Id = 1465 ORDER BY p.FavoriteCount DESC LIMIT 1;"]}, {"question_id": 667, "answer_sql": ["SELECT T1.Title FROM posts AS T1 JOIN postLinks AS T2 ON T1.Id = T2.PostId ORDER BY T2.CreationDate ASC LIMIT 1;"]}, {"question_id": 668, "answer_sql": ["SELECT u.DisplayName FROM users u JOIN ( SELECT UserId, COUNT(Name) as BadgeCount FROM badges GROUP BY UserId ) b ON u.Id = b.UserId WHERE b.BadgeCount = (SELECT MAX(BadgeCount) FROM (SELECT COUNT(Name) as BadgeCount FROM badges GROUP BY UserId)) ORDER BY u.Id ASC LIMIT 1;", "SELECT u.DisplayName FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Name IN ( SELECT MAX(Name) FROM badges ) ORDER BY u.DisplayName ASC LIMIT 1;"]}, {"question_id": 669, "answer_sql": ["SELECT MIN(v.CreationDate) AS FirstVoteDate FROM votes v JOIN posts p ON v.PostId = p.Id JOIN users u ON v.UserId = u.Id WHERE u.DisplayName = 'chl' AND v.VoteTypeId = 1;", "SELECT MIN(T2.CreationDate) AS FirstVoteDate FROM posts AS T1 JOIN votes AS T2 ON T1.Id = T2.PostId WHERE T2.UserId = (SELECT UserId FROM users WHERE DisplayName = 'chl')", "SELECT MIN(T1.CreationDate) AS FirstVoteDate FROM votes AS T1 JOIN posts AS T2 ON T1.PostId = T2.Id JOIN users AS T3 ON T1.UserId = T3.Id WHERE T3.DisplayName = 'chl' GROUP BY T1.PostId, T1.CreationDate ORDER BY T1.CreationDate ASC LIMIT 1;", "SELECT MIN(T2.CreationDate) AS FirstVoteDate FROM users AS T1 JOIN votes AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'chl' GROUP BY T2.CreationDate;", "SELECT MIN(T2.CreationDate) AS FirstVoteDate FROM posts AS T1 JOIN votes AS T2 ON T1.Id = T2.PostId JOIN users AS T3 ON T2.UserId = T3.Id WHERE T3.DisplayName = 'chl' GROUP BY T1.Id;"]}, {"question_id": 670, "answer_sql": ["SELECT MIN(T1.CreationDate) AS Date FROM users AS T1 JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.Age = (SELECT MIN(Age) FROM users)", "SELECT MIN(CreaionDate) AS DateOfFirstPost FROM posts WHERE OwnerUserId = (SELECT MIN(Id) FROM users WHERE Age = (SELECT MIN(Age) FROM users))"]}, {"question_id": 671, "answer_sql": ["SELECT u.DisplayName FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Name = 'Autobiographer' ORDER BY b.Date ASC LIMIT 1;", "SELECT u.DisplayName FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Name = 'Autobiographer' AND b.Date = (SELECT MIN(Date) FROM badges);"]}, {"question_id": 672, "answer_sql": ["SELECT COUNT(DISTINCT u.Id) AS UserCount FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE u.Location = 'United Kingdom' AND p.FavoriteCount >= 4;", "SELECT COUNT(DISTINCT u.Id) AS UserCount FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE u.Location = 'United Kingdom' GROUP BY u.Id HAVING SUM(CASE WHEN p.FavoriteCount >= 4 THEN 1 ELSE 0 END) >= 4;", "SELECT COUNT(DISTINCT u.Id) AS UserCount FROM users u JOIN posts p ON u.Id = p.OwnerUserId JOIN votes v ON p.Id = v.PostId WHERE u.Location = 'United Kingdom' GROUP BY u.Id HAVING SUM(CASE WHEN v.VoteTypeId = 1 THEN 1 ELSE 0 END) >= 4;"]}, {"question_id": 673, "answer_sql": ["SELECT AVG(v.PostId) AS AverageNumberOfPostsVoted FROM votes v JOIN users u ON v.UserId = u.Id WHERE u.Age = (SELECT MAX(Age) FROM users);", "SELECT AVG(votes.PostId) AS AverageNumberOfPostsVoted FROM votes WHERE votes.UserId = ( SELECT users.Id FROM users ORDER BY users.Age ASC LIMIT 1 );", "SELECT AVG(votes.PostId) AS AverageNumberOfPostsVoted FROM votes WHERE votes.UserId = (SELECT MAX(Age) FROM users);"]}, {"question_id": 674, "answer_sql": ["SELECT DisplayName, Reputation FROM users ORDER BY Reputation DESC LIMIT 1;", "SELECT DisplayName FROM users ORDER BY Reputation DESC LIMIT 1;"]}, {"question_id": 675, "answer_sql": ["SELECT COUNT(DISTINCT u.Id) AS NumberOfUsers FROM users u JOIN badges b ON u.Id = b.UserId JOIN votes v ON u.Id = v.UserId WHERE u.Reputation > 2000 AND u.Views > 1000;", "SELECT COUNT(DISTINCT u.Id) AS NumberOfUsers FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE u.Reputation > 2000 AND u.Views > 1000;"]}, {"question_id": 676, "answer_sql": []}, {"question_id": 677, "answer_sql": []}, {"question_id": 678, "answer_sql": ["SELECT posts.Id, posts.Title FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'Harvey Motulsky' ORDER BY posts.ViewCount DESC LIMIT 1;", "SELECT Id, Title FROM posts WHERE OwnerDisplayName = 'Harvey Motulsky' AND ViewCount = (SELECT MAX(ViewCount) FROM posts)"]}, {"question_id": 679, "answer_sql": ["SELECT posts.Id, posts.Title FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE posts.Score = (SELECT MAX(Score) FROM posts) ORDER BY posts.Score DESC LIMIT 1;"]}, {"question_id": 680, "answer_sql": ["SELECT AVG(posts.Score) AS AverageScore FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'Stephen Turner';", "SELECT AVG(comments.Score) AS AverageScore FROM comments JOIN users ON comments.UserId = users.Id WHERE users.DisplayName = 'Stephen Turner';"]}, {"question_id": 681, "answer_sql": []}, {"question_id": 682, "answer_sql": ["SELECT posts.Id, users.DisplayName FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE posts.CreaionDate BETWEEN '2010-01-01 00:00:00' AND '2010-12-31 23:59:59' ORDER BY posts.FavoriteCount DESC LIMIT 1;"]}, {"question_id": 683, "answer_sql": []}, {"question_id": 684, "answer_sql": ["SELECT CAST(COUNT(CASE WHEN Age BETWEEN 13 AND 18 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(Id) AS TeenagePercentage FROM users", "SELECT COUNT(CASE WHEN Age BETWEEN 13 AND 18 THEN 1 ELSE NULL END) * 100 / COUNT(Id) AS percentage FROM users"]}, {"question_id": 685, "answer_sql": ["SELECT u.DisplayName FROM posts p JOIN comments c ON p.Id = c.PostId JOIN users u ON p.OwnerUserId = u.Id WHERE p.Title = 'Computer Game Datasets' ORDER BY p.LasActivityDate DESC LIMIT 1;"]}, {"question_id": 686, "answer_sql": ["SELECT COUNT(Id) AS TotalPostsAboveAverage FROM posts WHERE ViewCount > (SELECT AVG(ViewCount) FROM posts);"]}, {"question_id": 687, "answer_sql": ["SELECT COUNT(*) AS CommentCount FROM comments WHERE PostId = (SELECT PostId FROM comments GROUP BY PostId ORDER BY Score DESC LIMIT 1);", "SELECT COUNT(*) AS CommentCount FROM comments WHERE Score = (SELECT MAX(Score) FROM comments);", "SELECT COUNT(*) AS CommentCount FROM comments WHERE Score = (SELECT MAX(Score) FROM posts);"]}, {"question_id": 688, "answer_sql": ["SELECT COUNT(*) AS NumberOfPosts FROM posts WHERE ViewCount > 35000 AND CommentCount = 0;", "SELECT COUNT(DISTINCT p.Id) AS NumberOfPosts FROM posts p JOIN tags t ON p.Id = t.ExcerptPostId JOIN votes v ON p.Id = v.PostId WHERE p.ViewCount > 35000 AND p.CommentCount = 0;"]}, {"question_id": 689, "answer_sql": ["SELECT u.DisplayName, u.Location FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.Id = 183 ORDER BY p.LastEditDate DESC LIMIT 1;", "SELECT u.DisplayName, u.Location FROM posts p JOIN users u ON p.OwnerUserId = u.Id JOIN ( SELECT ParentId FROM posts WHERE Id = 183 ) sub ON p.Id = sub.ParentId WHERE p.LastEditDate = ( SELECT MAX(LastEditDate) FROM posts WHERE ParentId = 183 );"]}, {"question_id": 690, "answer_sql": ["SELECT MAX(b.Date) AS LatestAwardedDate, b.Name AS BadgeName, b.UserId, b.Id FROM badges b WHERE b.UserId = (SELECT UserId FROM users WHERE DisplayName = 'Emmett') GROUP BY b.Name, b.UserId, b.Id ORDER BY b.Date DESC LIMIT 1;", "SELECT MAX(b.Date) AS LatestAwardedDate, b.UserId, b.Name, b.Date FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'Emmett' GROUP BY b.UserId, b.Name, b.Date ORDER BY b.Date DESC LIMIT 1;", "SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'Emmett' ORDER BY b.Date DESC LIMIT 1"]}, {"question_id": 691, "answer_sql": ["SELECT COUNT(DISTINCT U.Id) AS AdultUsersWithOver5000Upvotes FROM users U JOIN votes V ON U.Id = V.UserId WHERE U.Age BETWEEN 19 AND 65 AND U.UpVotes > 5000;"]}, {"question_id": 692, "answer_sql": ["SELECT T1.Date - T2.CreationDate AS Duration FROM badges AS T1 JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Zolomon';", "SELECT Date - badges.Date AS Duration FROM badges JOIN users ON badges.UserId = users.Id WHERE users.DisplayName = 'Zolomon'"]}, {"question_id": 693, "answer_sql": ["SELECT COUNT(DISTINCT p.Id) AS NumberOfPosts, COUNT(DISTINCT c.Id) AS NumberOfComments FROM users u JOIN posts p ON u.Id = p.OwnerUserId JOIN comments c ON p.Id = c.PostId WHERE u.CreationDate = (SELECT MAX(CreationDate) FROM users)"]}, {"question_id": 694, "answer_sql": ["SELECT c.Text, u.DisplayName FROM comments c JOIN posts p ON c.PostId = p.Id JOIN users u ON c.UserId = u.Id WHERE p.Title = 'Analysing wind data with R' ORDER BY c.CreationDate DESC LIMIT 1;", "SELECT c.Text, u.DisplayName FROM comments c JOIN posts p ON c.PostId = p.Id JOIN users u ON c.UserId = u.Id WHERE p.Title = 'Analysing wind data with R' AND c.CreationDate = (SELECT MAX(CreationDate) FROM comments);", "SELECT c.Text AS CommentText, u.DisplayName AS UserDisplayName FROM comments c JOIN users u ON c.UserId = u.Id WHERE c.PostId = ( SELECT p.Id FROM posts p WHERE p.Title = 'Analysing wind data with R' AND p.PostTypeId = 1 AND p.LasActivityDate = ( SELECT MAX(p2.LasActivityDate) FROM posts p2 WHERE p2.Title = 'Analysing wind data with R' AND p2.PostTypeId = 1 ) );"]}, {"question_id": 695, "answer_sql": ["SELECT COUNT(DISTINCT T1.Id) AS NumberOfUsersAwardedCitizenPatrolBadge FROM users AS T1 JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Citizen Patrol';", "SELECT COUNT(DISTINCT UserId) AS NumberOfUsersAwardedCitizenPatrolBadge FROM badges;"]}, {"question_id": 696, "answer_sql": ["SELECT COUNT(*) AS NumberOfPosts FROM posts WHERE Tags LIKE '%careers%'", "SELECT COUNT(T1.Id) AS PostCount FROM tags AS T1 WHERE T1.TagName = 'careers';"]}, {"question_id": 697, "answer_sql": ["SELECT Reputation, Views FROM users WHERE DisplayName = 'Jarrod Dixon';", "SELECT users.Reputation, users.Views FROM users JOIN badges ON users.Id = badges.UserId JOIN comments ON users.Id = comments.UserId WHERE users.DisplayName = 'Jarrod Dixon';", "SELECT u.Reputation, p.ViewCount \nFROM users u \nJOIN posts p ON u.Id = p.OwnerUserId \nWHERE u.DisplayName = 'Jarrod Dixon'"]}, {"question_id": 698, "answer_sql": ["SELECT COUNT(DISTINCT c.Id) AS CommentCount, COUNT(DISTINCT a.Id) AS AnswerCount FROM posts p JOIN comments c ON p.Id = c.PostId JOIN posts a ON p.Id = a.ParentId WHERE p.Title = 'Clustering 1D data'", "SELECT COUNT(DISTINCT c.Id) AS CommentCount, COUNT(DISTINCT p.Id) AS AnswerCount FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.Title = 'Clustering 1D data';"]}, {"question_id": 699, "answer_sql": ["SELECT CreationDate FROM users WHERE DisplayName = 'IrishStat'"]}, {"question_id": 700, "answer_sql": ["SELECT COUNT(DISTINCT PostId) AS NumberOfPostsWithBounty FROM votes WHERE BountyAmount >= 30;", "SELECT COUNT(*) AS NumberOfPostsWithBountyAmountOver30 FROM votes WHERE BountyAmount >= 30;"]}, {"question_id": 701, "answer_sql": ["SELECT CAST(COUNT(stats_posts.Id) AS REAL) * 100 / COUNT(stats_posts.Id) FROM posts AS stats_posts INNER JOIN users AS users1 ON stats_posts.OwnerUserId = users1.Id WHERE stats_posts.Score > 50 AND users1.Reputation = ( SELECT MAX(Reputation) FROM users ) LIMIT 1;", "SELECT CAST(COUNT(p.Id) AS REAL) * 100 / (SELECT COUNT(*) FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users)) AS percentage \nFROM posts p \nJOIN users u ON p.OwnerUserId = u.Id \nJOIN votes v ON p.Id = v.PostId \nWHERE p.Score > 50", "SELECT CAST((SUM(CASE WHEN T1.Score > 50 THEN 1 ELSE 0 END) * 100) / COUNT(T1.Score) AS REAL) AS Percentage FROM posts AS T1 JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.Reputation = ( SELECT MAX(Reputation) FROM users );"]}, {"question_id": 702, "answer_sql": ["SELECT COUNT(DISTINCT p.Id) AS NumberOfPostsWithScoreLessThan20 FROM posts p WHERE p.Score < 20;", "SELECT COUNT(DISTINCT p.Id) AS NumberOfPostsWithScoreLessThan20 FROM posts p JOIN comments c ON p.Id = c.PostId WHERE c.Score < 20;"]}, {"question_id": 703, "answer_sql": ["SELECT COUNT(T2.Id) AS Count FROM tags AS T1 JOIN posts AS T2 ON T1.Id = T2.Tags WHERE T1.Id < 15 AND T1.Count <= 20;", "SELECT COUNT(T1.Id) AS Count FROM tags AS T1 WHERE T1.Id < 15 AND T1.Count <= 20;"]}, {"question_id": 704, "answer_sql": ["SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'sample';"]}, {"question_id": 705, "answer_sql": ["SELECT users.Reputation, users.UpVotes FROM users JOIN comments ON users.Id = comments.UserId WHERE comments.Text = 'fine, you win :)';", "SELECT u.Reputation, COUNT(v.Id) AS UpVotes FROM users u JOIN votes v ON u.Id = v.UserId JOIN comments c ON c.UserId = v.UserId WHERE c.Text = 'fine, you win :)' GROUP BY u.Id;"]}, {"question_id": 706, "answer_sql": ["SELECT T2.Text FROM posts AS T1 JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.Title = 'How can I adapt ANOVA for binary data?';"]}, {"question_id": 707, "answer_sql": ["SELECT c.Id, c.Score FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.ViewCount BETWEEN 100 AND 150 ORDER BY c.Score DESC LIMIT 1;", "SELECT c.Text FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.ViewCount BETWEEN 100 AND 150 ORDER BY c.Score DESC LIMIT 1;"]}, {"question_id": 708, "answer_sql": []}, {"question_id": 709, "answer_sql": ["SELECT COUNT(DISTINCT c.PostId) AS PostsWithViewCountLowerThan5 FROM comments c WHERE c.Score = 0;", "SELECT COUNT(DISTINCT c.PostId) AS post_count FROM comments c JOIN posts p ON c.PostId = p.Id WHERE c.Score = 0 AND p.ViewCount < 5;", "SELECT COUNT(T1.Id) AS CommentCount FROM comments AS T1 JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.Score = 0 AND T2.ViewCount < 5;"]}, {"question_id": 710, "answer_sql": ["SELECT COUNT(DISTINCT c.Id) AS CommentsWithZeroScore FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.CommentCount = 1 AND c.Score = 0;", "SELECT COUNT(DISTINCT c.Id) AS CommentsWithZeroScore FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.CommentCount = 1;"]}, {"question_id": 711, "answer_sql": ["SELECT COUNT(DISTINCT c.UserId) AS TotalUsers FROM comments c JOIN users u ON c.UserId = u.Id WHERE c.Score = 0 AND u.Age = 40;"]}, {"question_id": 712, "answer_sql": ["SELECT p.Id, c.Id AS CommentId, c.Text FROM posts p JOIN comments c ON p.Id = c.PostId WHERE p.Title = 'Group differences on a five point Likert item';", "SELECT p.Id, ph.Comment FROM posts p JOIN postHistory ph ON p.Id = ph.PostId WHERE p.Title = 'Group differences on a five point Likert item';", "SELECT p.Id, ch.Text FROM posts p JOIN postHistory ch ON p.Id = ch.PostId WHERE p.Title = 'Group differences on a five point Likert item';", "SELECT c.PostId, c.Text FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.Title = 'Group differences on a five point Likert item';", "SELECT p.Id, ch.Text FROM posts p JOIN postHistory ch ON p.Id = ch.PostId JOIN tags t ON p.Id = t.ExcerptPostId WHERE p.Title = 'Group differences on a five point Likert item';"]}, {"question_id": 713, "answer_sql": ["SELECT COUNT(voteTypeId) AS UpVoteCount FROM votes WHERE PostId = ( SELECT PostId FROM comments WHERE Text = 'R is also lazy evaluated.' );", "SELECT SUM(T1.VoteTypeId) AS UpVoteNumber FROM votes AS T1 JOIN comments AS T2 ON T1.PostId = T2.PostId WHERE T2.Text = 'R is also lazy evaluated.'", "SELECT SUM(T1.Score) AS UpVoteNumber FROM comments AS T1 JOIN votes AS T2 ON T1.Id = T2.PostId WHERE T1.Text = 'R is also lazy evaluated.'", "SELECT SUM(votes.BountyAmount) AS UpVoteNumber \nFROM votes \nJOIN comments ON votes.PostId = comments.Id \nJOIN users ON comments.UserId = users.Id \nWHERE comments.Text = 'R is also lazy evaluated.' AND users.DisplayName = 'R';"]}, {"question_id": 714, "answer_sql": ["SELECT c.Text, u.DisplayName FROM comments c JOIN users u ON c.UserId = u.Id WHERE u.DisplayName = 'Harvey Motulsky';", "SELECT c.Id, c.Text, c.CreationDate, u.DisplayName FROM comments c JOIN users u ON c.UserId = u.Id WHERE u.DisplayName = 'Harvey Motulsky';", "SELECT c.Text FROM comments c JOIN users u ON c.UserId = u.Id WHERE u.DisplayName = 'Harvey Motulsky';", "SELECT c.Id, c.Text, c.CreationDate, c.UserId, u.DisplayName FROM comments c JOIN users u ON c.UserId = u.Id WHERE u.DisplayName = 'Harvey Motulsky';"]}, {"question_id": 715, "answer_sql": ["SELECT DISTINCT T1.DisplayName FROM users AS T1 JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T2.Score BETWEEN 1 AND 5 AND T1.DownVotes = 0;", "SELECT DISTINCT c.UserId, u.DisplayName FROM comments c JOIN users u ON c.UserId = u.Id WHERE c.Score BETWEEN 1 AND 5 AND u.DownVotes = 0;"]}, {"question_id": 716, "answer_sql": []}, {"question_id": 717, "answer_sql": ["SELECT sp.power_name \nFROM superhero s \nJOIN hero_power hp ON s.id = hp.hero_id \nJOIN superpower sp ON hp.power_id = sp.id \nWHERE s.superhero_name = '3-D Man'", "SELECT power_name FROM superpower WHERE power_name = '3-D Man';"]}, {"question_id": 718, "answer_sql": ["SELECT COUNT(*) AS superhero_count FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Super Strength';", "SELECT COUNT(*) AS superhero_count FROM superhero JOIN superpower ON superhero.id = superpower.id WHERE superpower.power_name = 'Super Strength';"]}, {"question_id": 719, "answer_sql": ["SELECT COUNT(s.id) AS num_superheroes FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Super Strength' AND s.height_cm > 200;"]}, {"question_id": 720, "answer_sql": ["SELECT superhero.full_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id GROUP BY superhero.id HAVING COUNT(hero_power.hero_id) > 15;", "SELECT superhero.full_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id GROUP BY superhero.full_name HAVING COUNT(hero_power.power_id) > 15;", "SELECT superhero_name FROM superhero WHERE id IN ( SELECT hero_id FROM hero_power GROUP BY hero_id HAVING COUNT(power_id) > 15 )"]}, {"question_id": 721, "answer_sql": ["SELECT COUNT(*) AS num_superheroes FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Blue';"]}, {"question_id": 722, "answer_sql": ["SELECT colour FROM colour WHERE colour.id = (SELECT skin_colour_id FROM superhero WHERE superhero_name = 'Apocalypse')"]}, {"question_id": 723, "answer_sql": ["SELECT COUNT(s.id) AS num_superheroes FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id JOIN colour c ON a.attribute_name = c.colour WHERE c.colour = 'Blue' AND ha.attribute_value = 1;"]}, {"question_id": 724, "answer_sql": ["SELECT superhero_name FROM superhero WHERE eye_colour_id = (SELECT id FROM colour WHERE colour = 'Blue') AND hair_colour_id = (SELECT id FROM colour WHERE colour = 'Blond') AND skin_colour_id = (SELECT id FROM superpower WHERE power_name = 'Agility') AND race_id = (SELECT id FROM race WHERE race = 'Human') AND gender_id = (SELECT id FROM gender WHERE gender = 'Male') AND alignment_id = (SELECT id FROM alignment WHERE alignment = 'Alliance');"]}, {"question_id": 725, "answer_sql": ["SELECT COUNT(*) AS superhero_count FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics');"]}, {"question_id": 726, "answer_sql": ["SELECT s.full_name FROM superhero s JOIN publisher p ON s.publisher_id = p.id JOIN alignment a ON s.alignment_id = a.id WHERE p.publisher_name = 'Marvel Comics' ORDER BY s.height_cm DESC LIMIT 1;"]}, {"question_id": 727, "answer_sql": ["SELECT T2.publisher_name FROM superhero AS T1 JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Sauron';"]}, {"question_id": 728, "answer_sql": ["SELECT COUNT(*) AS num_superheroes FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' AND colour.colour = 'Blue';"]}, {"question_id": 729, "answer_sql": ["SELECT AVG(height_cm) AS average_height \nFROM superhero \nWHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics')"]}, {"question_id": 730, "answer_sql": []}, {"question_id": 731, "answer_sql": ["SELECT COUNT(*) AS superhero_count FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'DC Comics');"]}, {"question_id": 732, "answer_sql": []}, {"question_id": 733, "answer_sql": ["SELECT COUNT(*) AS gold_eyed_superheroes FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Gold' AND publisher.publisher_name = 'Marvel Comics';"]}, {"question_id": 734, "answer_sql": ["SELECT T2.publisher_name FROM superhero AS T1 JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Blue Beetle II'"]}, {"question_id": 735, "answer_sql": ["SELECT COUNT(*) AS num_superheroes FROM superhero JOIN colour ON superhero.hair_colour_id = colour.id WHERE colour.colour = 'Blond';"]}, {"question_id": 736, "answer_sql": ["SELECT s.superhero_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'Intelligence' ORDER BY ha.attribute_value ASC LIMIT 1;"]}, {"question_id": 737, "answer_sql": ["SELECT race.race FROM superhero JOIN race ON superhero.race_id = race.id WHERE superhero.superhero_name = 'Copycat';"]}, {"question_id": 738, "answer_sql": ["SELECT COUNT(*) FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute_name = 'Durability' AND attribute_value < 50;"]}, {"question_id": 739, "answer_sql": ["SELECT s.superhero_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Death Touch';"]}, {"question_id": 740, "answer_sql": ["SELECT COUNT(*) AS female_superheroes_with_strength_100 FROM superhero JOIN gender ON superhero.gender_id = gender.id JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE gender.gender = 'Female' AND attribute.attribute_name = 'Strength' AND attribute_value = 100;"]}, {"question_id": 741, "answer_sql": ["SELECT superhero_name FROM superhero WHERE superhero_name = (SELECT superhero_name FROM superhero GROUP BY superhero_name ORDER BY COUNT(superhero_name) DESC LIMIT 1);"]}, {"question_id": 742, "answer_sql": ["SELECT COUNT(*) AS vampire_superheroes FROM superhero WHERE race_id = (SELECT id FROM race WHERE race = 'Vampire');"]}, {"question_id": 743, "answer_sql": []}, {"question_id": 744, "answer_sql": ["SELECT SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) AS difference FROM superhero AS T1 JOIN publisher AS T2 ON T1.publisher_id = T2.id;", "SELECT SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) AS difference FROM superhero AS T1 JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.alignment_id IS NOT NULL;", "SELECT SUM(CASE WHEN publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN publisher_name = 'DC Comics' THEN 1 ELSE 0 END) AS difference FROM publisher", "SELECT SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) AS difference FROM superhero AS T1 JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.alignment_id IN (SELECT id FROM alignment WHERE alignment = 'DC Comics') AND T1.alignment_id IN (SELECT id FROM alignment WHERE alignment = 'Marvel Comics')"]}, {"question_id": 745, "answer_sql": ["SELECT id FROM publisher WHERE publisher_name = 'Star Trek';", "SELECT T1.publisher_id FROM superhero AS T1 JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Star Trek';"]}, {"question_id": 746, "answer_sql": ["SELECT AVG(attribute_value) AS average_attribute_value FROM hero_attribute;"]}, {"question_id": 747, "answer_sql": ["SELECT COUNT(*) FROM superhero WHERE full_name IS NULL;"]}, {"question_id": 748, "answer_sql": ["SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.id = 75;"]}, {"question_id": 749, "answer_sql": ["SELECT sp.power_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE s.superhero_name = 'Deathlok'"]}, {"question_id": 750, "answer_sql": ["SELECT AVG(superhero.weight_kg) AS average_weight FROM superhero JOIN gender ON superhero.gender_id = gender.id WHERE gender.gender = 'Female';"]}, {"question_id": 751, "answer_sql": ["SELECT sp.power_name \nFROM superhero s \nJOIN gender g ON s.gender_id = g.id \nJOIN alignment a ON s.alignment_id = a.id \nJOIN hero_power hp ON s.id = hp.hero_id \nJOIN superpower sp ON hp.power_id = sp.id \nWHERE g.gender = 'Male' \nLIMIT 5;", "SELECT sp.power_name \nFROM superhero s \nJOIN gender g ON s.gender_id = g.id \nJOIN hero_attribute ha ON s.id = ha.hero_id \nJOIN attribute a ON ha.attribute_id = a.id \nJOIN hero_power hp ON s.id = hp.hero_id \nJOIN superpower sp ON hp.power_id = sp.id \nWHERE g.gender = 'Male' \nGROUP BY sp.power_name \nHAVING COUNT(*) >= 5 \nORDER BY COUNT(*) DESC;"]}, {"question_id": 752, "answer_sql": ["SELECT superhero_name FROM superhero WHERE race_id = (SELECT id FROM race WHERE race = 'Alien')", "SELECT race FROM race WHERE race = 'Alien'"]}, {"question_id": 753, "answer_sql": ["SELECT superhero_name FROM superhero WHERE height_cm BETWEEN 170 AND 190 AND eye_colour_id = 1;", "SELECT s.superhero_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id WHERE ha.attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Eye Colour') AND ha.attribute_value = 1 AND s.height_cm BETWEEN 170 AND 190;"]}, {"question_id": 754, "answer_sql": ["SELECT T2.power_name FROM superhero AS T1 JOIN hero_power AS T3 ON T1.id = T3.hero_id JOIN superpower AS T2 ON T3.power_id = T2.id WHERE T1.id = 56;"]}, {"question_id": 755, "answer_sql": ["SELECT superhero_name FROM superhero WHERE race_id = (SELECT id FROM race WHERE race = 'Demi-God') LIMIT 5;", "SELECT superhero.full_name FROM superhero JOIN race ON superhero.race_id = race.id WHERE race.race = 'Demi-God' LIMIT 5;"]}, {"question_id": 756, "answer_sql": ["SELECT COUNT(*) FROM superhero WHERE alignment_id = (SELECT id FROM alignment WHERE alignment = 'Bad')", "SELECT COUNT(*) AS bad_superheroes_count FROM superhero WHERE alignment_id = 'Bad';"]}, {"question_id": 757, "answer_sql": ["SELECT T2.race FROM superhero AS T1 JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.weight_kg = 169;"]}, {"question_id": 758, "answer_sql": ["SELECT T1.hair_colour_id, T2.colour FROM superhero AS T1 JOIN race AS T3 ON T1.race_id = T3.id JOIN colour AS T2 ON T1.hair_colour_id = T2.id WHERE T1.height_cm = 185 AND T3.race = 'human' AND T2.colour IS NOT NULL"]}, {"question_id": 759, "answer_sql": ["SELECT T1.eye_colour_id, T2.colour FROM superhero AS T1 JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.weight_kg = (SELECT MAX(weight_kg) FROM superhero)"]}, {"question_id": 760, "answer_sql": ["SELECT CAST(SUM(CASE WHEN s.publisher_id = 13 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(s.id) FROM superhero s WHERE s.height_cm BETWEEN 150 AND 180;", "SELECT CAST(COUNT(h.id) AS REAL) * 100 / COUNT(DISTINCT p.id) AS percentage FROM superhero h JOIN publisher p ON h.publisher_id = p.id WHERE h.height_cm BETWEEN 150 AND 180"]}, {"question_id": 761, "answer_sql": ["SELECT superhero_name FROM superhero WHERE gender_id = (SELECT id FROM gender WHERE gender = 'Male') AND weight_kg > (SELECT AVG(weight_kg) FROM superhero) * 0.79", "SELECT s.full_name \nFROM superhero s \nJOIN hero_attribute ha ON s.id = ha.hero_id \nJOIN attribute a ON ha.attribute_id = a.id \nJOIN gender g ON s.gender_id = g.id \nWHERE g.gender = 'Male' \nAND s.weight_kg > (SELECT AVG(weight_kg) FROM superhero) * 0.79", "SELECT s.full_name FROM superhero s JOIN gender g ON s.gender_id = g.id WHERE g.gender = 'Male' AND s.weight_kg > (SELECT AVG(weight_kg) * 0.79 FROM superhero) ORDER BY s.weight_kg DESC;", "SELECT s.full_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id WHERE s.gender_id = (SELECT id FROM gender WHERE gender = 'Male') AND ha.attribute_value > (SELECT AVG(weight_kg) FROM superhero WHERE gender_id = (SELECT id FROM gender WHERE gender = 'Male')) * 0.79;", "SELECT superhero.superhero_name FROM superhero JOIN gender ON superhero.gender_id = gender.id WHERE gender.gender = 'Male' GROUP BY superhero.superhero_name HAVING AVG(superhero.weight_kg) * 0.79 < MAX(superhero.weight_kg);"]}, {"question_id": 762, "answer_sql": ["SELECT s.power_name FROM superpower s WHERE s.id = ( SELECT power_id FROM hero_power hp GROUP BY hp.power_id ORDER BY COUNT(*) DESC LIMIT 1 );", "SELECT sp.power_name \nFROM superhero s \nJOIN hero_attribute ha ON s.id = ha.hero_id \nJOIN superpower sp ON ha.attribute_id = sp.id \nGROUP BY sp.power_name \nORDER BY COUNT(sp.power_name) DESC \nLIMIT 1;", "SELECT power_name FROM superpower GROUP BY power_name ORDER BY COUNT(power_name) DESC LIMIT 1;"]}, {"question_id": 763, "answer_sql": ["SELECT T2.attribute_value FROM superhero AS T1 JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Abomination';"]}, {"question_id": 764, "answer_sql": ["SELECT T2.power_name FROM superhero AS T1 JOIN hero_power AS T3 ON T1.id = T3.hero_id JOIN superpower AS T2 ON T3.power_id = T2.id WHERE T1.id = 1;"]}, {"question_id": 765, "answer_sql": ["SELECT COUNT(s.id) AS count FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'stealth'"]}, {"question_id": 766, "answer_sql": ["SELECT s.full_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id WHERE ha.attribute_id = (SELECT attribute_id FROM attribute WHERE attribute_name = 'strength') ORDER BY ha.attribute_value DESC LIMIT 1;"]}, {"question_id": 767, "answer_sql": ["SELECT AVG(skin_colour_id) AS average_skin_colour FROM superhero WHERE skin_colour_id = 1;", "SELECT AVG(height_cm) AS average_height FROM superhero WHERE skin_colour_id = 1;"]}, {"question_id": 768, "answer_sql": ["SELECT COUNT(DISTINCT superhero.id) AS num_superheroes FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Dark Horse Comics';"]}, {"question_id": 769, "answer_sql": ["SELECT s.superhero_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE a.attribute_name = 'durability' AND s.publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Dark Horse Comics') AND sp.power_name = 'durability' GROUP BY s.superhero_name ORDER BY COUNT(*) DESC LIMIT 1;"]}, {"question_id": 770, "answer_sql": ["SELECT T2.colour FROM superhero AS T1 JOIN alignment AS T3 ON T1.alignment_id = T3.id JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Abraham Sapien';", "SELECT colour.colour FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.superhero_name = 'Abraham Sapien';"]}, {"question_id": 771, "answer_sql": ["SELECT superhero_name FROM superhero WHERE id IN (SELECT hero_id FROM hero_power WHERE power_id IN (SELECT id FROM superpower WHERE power_name = 'Flight'))"]}, {"question_id": 772, "answer_sql": ["SELECT c.colour AS eye_colour, h.colour AS hair_colour, s.skin_colour_id AS skin_colour FROM superhero s JOIN gender g ON s.gender_id = g.id JOIN colour c ON s.eye_colour_id = c.id JOIN colour h ON s.hair_colour_id = h.id JOIN publisher p ON s.publisher_id = p.id WHERE g.gender = 'Female' AND p.publisher_name = 'Dark Horse Comics'", "SELECT s.eye_colour_id AS eye_colour_id, c.colour AS eye_colour, s.skin_colour_id AS skin_colour_id, c.colour AS skin_colour, s.hair_colour_id AS hair_colour_id, c.colour AS hair_colour FROM superhero s JOIN gender g ON s.gender_id = g.id JOIN publisher p ON s.publisher_id = p.id JOIN colour c ON s.skin_colour_id = c.id WHERE g.gender = 'Female' AND p.publisher_name = 'Dark Horse Comics';", "SELECT T2.colour, T2.colour, T2.colour FROM superhero AS T1 JOIN publisher AS T3 ON T1.publisher_id = T3.id JOIN colour AS T2 ON T1.hair_colour_id = T2.id WHERE T1.gender_id = (SELECT id FROM gender WHERE gender = 'Female') AND T3.publisher_name = 'Dark Horse Comics';"]}, {"question_id": 773, "answer_sql": ["SELECT s.full_name, p.publisher_name \nFROM superhero s \nJOIN hero_attribute ha ON s.id = ha.hero_id \nJOIN attribute a ON ha.attribute_id = a.id \nJOIN publisher p ON s.publisher_id = p.id \nWHERE ha.attribute_value = s.eye_colour_id AND ha.attribute_value = s.hair_colour_id AND ha.attribute_value = s.skin_colour_id", "SELECT s.full_name, p.publisher_name \nFROM superhero s \nJOIN hero_attribute ha ON s.id = ha.hero_id \nJOIN attribute a ON ha.attribute_id = a.id \nJOIN publisher p ON s.publisher_id = p.id \nWHERE s.eye_colour_id = a.id AND s.hair_colour_id = a.id AND s.skin_colour_id = a.id", "SELECT s.full_name, p.publisher_name FROM superhero s JOIN alignment a ON s.alignment_id = a.id JOIN colour c ON s.eye_colour_id = c.id AND s.hair_colour_id = c.id AND s.skin_colour_id = c.id JOIN publisher p ON s.publisher_id = p.id;", "SELECT s.hair_colour_id, s.eye_colour_id, s.skin_colour_id, p.publisher_name FROM superhero s JOIN colour c ON s.eye_colour_id = c.id AND s.skin_colour_id = c.id JOIN publisher p ON s.publisher_id = p.id WHERE s.hair_colour_id = s.skin_colour_id AND s.hair_colour_id = s.eye_colour_id"]}, {"question_id": 774, "answer_sql": ["SELECT r.race FROM superhero AS s JOIN race AS r ON s.race_id = r.id WHERE s.superhero_name = 'A-Bomb'"]}, {"question_id": 775, "answer_sql": ["SELECT CAST(SUM(CASE WHEN T2.gender = 'Female' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.gender) FROM superhero AS T1 JOIN gender AS T2 ON T1.gender_id = T2.id JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T3.colour = 'Blue';"]}, {"question_id": 776, "answer_sql": ["SELECT superhero_name, race_id, race.race FROM superhero JOIN race ON superhero.race_id = race.id WHERE superhero.full_name = 'Charles Chandler';", "SELECT superhero.superhero_name, race.race FROM superhero JOIN alignment ON superhero.alignment_id = alignment.id JOIN race ON superhero.race_id = race.id WHERE superhero.full_name = 'Charles Chandler';"]}, {"question_id": 777, "answer_sql": ["SELECT T2.gender FROM superhero AS T1 JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T1.superhero_name = 'Agent 13';", "SELECT gender_id FROM superhero WHERE superhero_name = 'Agent 13';"]}, {"question_id": 778, "answer_sql": ["SELECT superhero.superhero_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Adaptation';"]}, {"question_id": 779, "answer_sql": ["SELECT COUNT(power_id) AS power_count FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = 'Amazo';", "SELECT COUNT(T1.id) AS power_count FROM superhero AS T1 JOIN hero_attribute AS T2 ON T1.id = T2.hero_id JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Amazo';"]}, {"question_id": 780, "answer_sql": ["SELECT sp.power_name FROM superhero su JOIN hero_power hp ON su.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE su.full_name = 'Hunter Zolomon';", "SELECT T2.power_name FROM superhero AS T1 JOIN hero_power AS T3 ON T1.id = T3.hero_id JOIN superpower AS T2 ON T3.power_id = T2.id WHERE T1.superhero_name = 'Hunter Zolomon';"]}, {"question_id": 781, "answer_sql": ["SELECT superhero.id, superhero.full_name, superhero.height_cm FROM superhero JOIN alignment ON superhero.alignment_id = alignment.id JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Amber';", "SELECT T1.id, T1.superhero_name, T1.height_cm FROM superhero AS T1 JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Amber';", "SELECT T1.id, T1.superhero_name, T1.full_name, T1.height_cm FROM superhero AS T1 JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Amber';"]}, {"question_id": 782, "answer_sql": ["SELECT superhero_name FROM superhero JOIN gender ON superhero.gender_id = gender.id JOIN race ON superhero.race_id = race.id JOIN colour ON superhero.eye_colour_id = colour.id AND superhero.hair_colour_id = colour.id WHERE colour.colour = 'Black';"]}, {"question_id": 783, "answer_sql": ["SELECT T1.eye_colour_id, T1.eye_colour_id FROM superhero AS T1 JOIN colour AS T2 ON T1.skin_colour_id = T2.id WHERE T2.colour = 'Gold';", "SELECT colour.colour FROM colour JOIN superhero ON colour.id = superhero.skin_colour_id WHERE superhero.skin_colour_id = (SELECT id FROM colour WHERE colour = 'Gold');"]}, {"question_id": 784, "answer_sql": ["SELECT superhero.full_name FROM superhero JOIN race ON superhero.race_id = race.id WHERE race.race = 'Vampire';", "SELECT superhero_name FROM superhero WHERE race_id = (SELECT id FROM race WHERE race = 'Vampire');"]}, {"question_id": 785, "answer_sql": ["SELECT superhero_name FROM superhero WHERE alignment_id IN (SELECT id FROM alignment WHERE alignment = 'Neutral')"]}, {"question_id": 786, "answer_sql": []}, {"question_id": 787, "answer_sql": ["SELECT race.race, alignment.alignment FROM superhero JOIN alignment ON superhero.alignment_id = alignment.id JOIN race ON superhero.race_id = race.id WHERE superhero.superhero_name = 'Cameron Hicks';", "SELECT race.race, alignment.alignment FROM superhero JOIN alignment ON superhero.alignment_id = alignment.id JOIN gender ON superhero.gender_id = gender.id JOIN race ON superhero.race_id = race.id WHERE superhero.full_name = 'Cameron Hicks';"]}, {"question_id": 788, "answer_sql": []}, {"question_id": 789, "answer_sql": ["SELECT AVG(superhero.weight_kg) AS average_weight FROM superhero JOIN race ON superhero.race_id = race.id JOIN gender ON superhero.gender_id = gender.id JOIN alignment ON superhero.alignment_id = alignment.id JOIN colour ON superhero.skin_colour_id = colour.id WHERE race.race = 'Alien';", "SELECT AVG(weight_kg) AS average_weight FROM superhero JOIN race ON superhero.race_id = race.id WHERE race.race = 'Alien';"]}, {"question_id": 790, "answer_sql": ["SELECT SUM(CASE WHEN full_name = 'Emil Blonsky' THEN weight_kg ELSE 0 END) - SUM(CASE WHEN full_name = 'Charles Chandler' THEN weight_kg ELSE 0 END) AS weight_difference FROM superhero WHERE full_name IN ('Emil Blonsky', 'Charles Chandler')", "SELECT SUM(weight_kg) - SUM(weight_kg) FROM superhero WHERE full_name = 'Emil Blonsky' AND publisher_id = (SELECT publisher_id FROM superhero WHERE full_name = 'Charles Chandler');", "SELECT SUM(weight_kg) - SUM(weight_kg) AS difference FROM superhero WHERE full_name = 'Emil Blonsky' AND full_name = 'Charles Chandler';"]}, {"question_id": 791, "answer_sql": ["SELECT superhero_name, AVG(height_cm) AS average_height FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id GROUP BY superhero_name;", "SELECT superhero_name, AVG(height_cm) AS average_height FROM superhero GROUP BY superhero_name;"]}, {"question_id": 792, "answer_sql": ["SELECT T2.power_name FROM superhero AS T1 JOIN hero_power AS T3 ON T1.id = T3.hero_id JOIN superpower AS T2 ON T3.power_id = T2.id WHERE T1.superhero_name = 'Abomination';"]}, {"question_id": 793, "answer_sql": ["SELECT COUNT(*) FROM superhero WHERE race_id = 21 AND gender_id = 1;", "SELECT COUNT(*) FROM superhero s JOIN race r ON s.race_id = r.id JOIN alignment a ON s.alignment_id = a.id WHERE r.id = 21 AND s.gender_id = 1;", "SELECT COUNT(*) FROM superhero s JOIN race r ON s.race_id = r.id JOIN gender g ON s.gender_id = g.id WHERE r.race = 'god/eternal' AND g.gender = 1;"]}, {"question_id": 794, "answer_sql": ["SELECT s1.superhero_name FROM superhero s1 JOIN hero_attribute ha1 ON s1.id = ha1.hero_id JOIN attribute a1 ON ha1.attribute_id = a1.id WHERE a1.attribute_name = 'Speed' ORDER BY ha1.attribute_value DESC LIMIT 1;"]}, {"question_id": 795, "answer_sql": ["SELECT COUNT(*) FROM superhero WHERE alignment_id = 3;"]}, {"question_id": 796, "answer_sql": ["SELECT attribute_name, attribute_value FROM attribute JOIN hero_attribute ON attribute.id = hero_attribute.attribute_id JOIN superhero ON superhero.id = hero_attribute.hero_id WHERE superhero_name = '3-D Man';", "SELECT hero_attribute.attribute_value, attribute.attribute_name FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE superhero.superhero_name = '3-D Man';"]}, {"question_id": 797, "answer_sql": ["SELECT superhero_name FROM superhero WHERE eye_colour_id = 7 AND hair_colour_id = 9;", "SELECT s1.full_name FROM superhero s1 JOIN alignment a1 ON s1.alignment_id = a1.id JOIN colour c1 ON a1.alignment = c1.colour JOIN hero_attribute ha1 ON s1.id = ha1.hero_id JOIN attribute attr1 ON ha1.attribute_id = attr1.id JOIN colour c2 ON attr1.attribute_name = c2.colour WHERE c1.colour = 'blue' AND c2.colour = 'brown';"]}, {"question_id": 798, "answer_sql": ["SELECT T2.publisher_name FROM superhero AS T1 JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy');", "SELECT T2.publisher_name FROM superhero AS T1 JOIN publisher AS T2 ON T1.publisher_id = T2.id JOIN hero_attribute AS T3 ON T1.id = T3.hero_id JOIN attribute AS T4 ON T3.attribute_id = T4.id WHERE T1.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy')"]}, {"question_id": 799, "answer_sql": ["SELECT COUNT(*) AS superhero_count FROM superhero WHERE publisher_id = 1;"]}, {"question_id": 800, "answer_sql": ["SELECT SUM(CASE WHEN eye_colour_id = 7 THEN 1 ELSE 0 END) * 100.0 / COUNT(*) AS percentage FROM superhero;", "SELECT SUM(CASE WHEN eye_colour_id = 7 THEN 1 ELSE 0 END) * 100.0 / COUNT(*) AS percentage FROM superhero WHERE eye_colour_id = 7;", "SELECT SUM(CASE WHEN eye_colour_id = 7 THEN 1 ELSE 0 END) / COUNT(*) * 100.0 AS percentage FROM superhero"]}, {"question_id": 801, "answer_sql": ["SELECT SUM(CASE WHEN gender_id = 1 THEN 1 ELSE 0 END) / SUM(CASE WHEN gender_id = 2 THEN 1 ELSE 0 END) AS ratio FROM superhero"]}, {"question_id": 802, "answer_sql": ["SELECT superhero_name FROM superhero ORDER BY height_cm DESC LIMIT 1;", "SELECT superhero_name FROM superhero WHERE height_cm = (SELECT MAX(height_cm) FROM superhero)"]}, {"question_id": 803, "answer_sql": ["SELECT id FROM superpower WHERE power_name = 'cryokinesis';"]}, {"question_id": 804, "answer_sql": ["SELECT superhero_name FROM superhero WHERE id = 294;"]}, {"question_id": 805, "answer_sql": ["SELECT superhero.full_name FROM superhero WHERE weight_kg = 0 OR weight_kg IS NULL;", "SELECT superhero_name FROM superhero WHERE weight_kg = 0 OR weight_kg IS NULL;"]}, {"question_id": 806, "answer_sql": ["SELECT T1.eye_colour_id, T1.eye_colour_id AS eye_colour FROM superhero AS T1 JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Karen Beecher-Duncan';", "SELECT T2.colour FROM superhero AS T1 JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Karen Beecher-Duncan';", "SELECT T1.eye_colour_id, T2.colour FROM superhero AS T1 JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Karen Beecher-Duncan';"]}, {"question_id": 807, "answer_sql": ["SELECT superpower.power_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.full_name = 'Helen Parr';"]}, {"question_id": 808, "answer_sql": ["SELECT s.race_id, r.race FROM superhero s JOIN race r ON s.race_id = r.id WHERE s.weight_kg = 108 AND s.height_cm = 188;", "SELECT r.race FROM superhero s JOIN race r ON s.race_id = r.id WHERE s.weight_kg = 108 AND s.height_cm = 188;"]}, {"question_id": 809, "answer_sql": ["SELECT T2.publisher_name FROM superhero AS T1 JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.id = 38;"]}, {"question_id": 810, "answer_sql": ["SELECT race.race FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id JOIN race ON superhero.race_id = race.id GROUP BY race.race ORDER BY MAX(attribute_value) DESC LIMIT 1;", "SELECT race.race, MAX(hero_attribute.attribute_value) AS max_attribute_value FROM superhero JOIN race ON superhero.race_id = race.id JOIN hero_attribute ON superhero.id = hero_attribute.hero_id GROUP BY race.race ORDER BY max_attribute_value DESC LIMIT 1;", "SELECT race.race FROM superhero JOIN race ON superhero.race_id = race.id WHERE superhero.id = ( SELECT hero_id FROM hero_attribute GROUP BY hero_id ORDER BY SUM(attribute_value) DESC LIMIT 1 );"]}, {"question_id": 811, "answer_sql": ["SELECT alignment.alignment, superpower.power_name FROM superhero JOIN alignment ON superhero.alignment_id = alignment.id JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = 'Atom IV';", "SELECT alignment.alignment, superpower.power_name FROM alignment JOIN superpower ON alignment.id = superpower.id WHERE superpower.power_name = 'Atom IV';"]}, {"question_id": 812, "answer_sql": ["SELECT superhero.superhero_name FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Blue';", "SELECT s.full_name FROM superhero s JOIN alignment a ON s.alignment_id = a.id JOIN colour c ON s.eye_colour_id = c.id WHERE c.colour = 'Blue';", "SELECT superhero_name FROM superhero WHERE eye_colour_id = (SELECT id FROM colour WHERE colour = 'Blue') LIMIT 5;"]}, {"question_id": 813, "answer_sql": ["SELECT AVG(attribute_value) AS average_attribute_value \nFROM superhero \nJOIN alignment ON superhero.alignment_id = alignment.id \nJOIN hero_attribute ON superhero.id = hero_attribute.hero_id \nJOIN attribute ON hero_attribute.attribute_id = attribute.id \nWHERE alignment.id = 3;", "SELECT AVG(attribute_value) AS average_attribute_value \nFROM superhero \nJOIN alignment ON superhero.alignment_id = alignment.id \nJOIN hero_attribute ON superhero.id = hero_attribute.hero_id \nJOIN attribute ON hero_attribute.attribute_id = attribute.id \nWHERE alignment.alignment = 'neutral'"]}, {"question_id": 814, "answer_sql": []}, {"question_id": 815, "answer_sql": ["SELECT COUNT(*) AS good_female_superheroes_count FROM superhero WHERE alignment_id = 1 AND gender_id = 2;"]}, {"question_id": 816, "answer_sql": ["SELECT superhero.superhero_name FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE hero_attribute.attribute_value BETWEEN 75 AND 80;"]}, {"question_id": 817, "answer_sql": ["SELECT r.race FROM superhero s JOIN gender g ON s.gender_id = g.id JOIN colour c ON s.hair_colour_id = c.id JOIN race r ON s.race_id = r.id WHERE c.colour = 'blue' AND g.gender = 'male'"]}, {"question_id": 818, "answer_sql": ["SELECT CAST(SUM(CASE WHEN T2.gender_id = 2 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.alignment_id) AS percentage FROM alignment AS T1 JOIN superhero AS T2 ON T1.id = T2.alignment_id WHERE T1.id = 2;"]}, {"question_id": 819, "answer_sql": ["SELECT COUNT(*) FROM superhero T1 WHERE T1.weight_kg = 0 OR T1.weight_kg IS NULL GROUP BY T1.eye_colour_id HAVING T1.eye_colour_id = 7 - (SELECT COUNT(*) FROM superhero WHERE T1.eye_colour_id = 1);", "SELECT SUM(CASE WHEN T1.eye_colour_id = 7 THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.eye_colour_id = 1 THEN 1 ELSE 0 END) AS difference FROM superhero AS T1 WHERE T1.weight_kg = 0 OR T1.weight_kg IS NULL;", "SELECT SUM(CASE WHEN T1.eye_colour_id = 7 THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.eye_colour_id = 1 THEN 1 ELSE 0 END) AS difference \nFROM superhero T1 \nJOIN hero_attribute T2 ON T1.id = T2.hero_id \nJOIN colour T3 ON T2.attribute_value = T3.id \nWHERE T1.weight_kg = 0 OR T1.weight_kg IS NULL;", "SELECT SUM(CASE WHEN T3.id = 7 THEN 1 ELSE 0 END) - SUM(CASE WHEN T3.id = 1 THEN 1 ELSE 0 END) AS difference \nFROM superhero T1 \nJOIN hero_attribute T2 ON T1.id = T2.hero_id \nJOIN colour T3 ON T2.attribute_value = T3.id \nWHERE T1.weight_kg = 0 OR T1.weight_kg IS NULL;", "SELECT COUNT(*) FROM superhero T1 WHERE T1.weight_kg = 0 OR T1.weight_kg IS NULL GROUP BY T1.id HAVING SUM(T1.eye_colour_id = 7) - SUM(T1.eye_colour_id = 1) > 0;"]}, {"question_id": 820, "answer_sql": ["SELECT attribute_value FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE superhero_name = 'Hulk' AND attribute_name = 'Strength';"]}, {"question_id": 821, "answer_sql": ["SELECT sp.power_name \nFROM superhero s \nJOIN hero_power hp ON s.id = hp.hero_id \nJOIN superpower sp ON hp.power_id = sp.id \nWHERE s.superhero_name = 'Ajax'"]}, {"question_id": 822, "answer_sql": ["SELECT COUNT(*) AS green_skinned_villains FROM superhero JOIN colour ON superhero.skin_colour_id = colour.id JOIN alignment ON superhero.alignment_id = alignment.id WHERE colour.colour = 'Green' AND alignment.alignment = 'Bad';"]}, {"question_id": 823, "answer_sql": ["SELECT COUNT(*) AS female_superheroes FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE gender_id = (SELECT id FROM gender WHERE gender = 'Female') AND publisher_name = 'Marvel Comics';"]}, {"question_id": 824, "answer_sql": ["SELECT superhero.superhero_name FROM superhero \nJOIN hero_power ON superhero.id = hero_power.hero_id \nJOIN superpower ON hero_power.power_id = superpower.id \nWHERE superpower.power_name = 'Wind Control' \nORDER BY superhero.superhero_name"]}, {"question_id": 825, "answer_sql": ["SELECT T2.gender FROM superhero AS T1 JOIN alignment AS T3 ON T1.alignment_id = T3.id JOIN gender AS T2 ON T1.gender_id = T2.id JOIN hero_power AS T4 ON T1.id = T4.hero_id JOIN superpower AS T5 ON T4.power_id = T5.id WHERE T5.power_name = 'Phoenix Force'", "SELECT T2.gender FROM superhero AS T1 JOIN alignment AS T3 ON T1.alignment_id = T3.id JOIN colour AS T4 ON T1.eye_colour_id = T4.id JOIN gender AS T2 ON T1.gender_id = T2.id JOIN hero_attribute AS T5 ON T1.id = T5.hero_id JOIN attribute AS T6 ON T5.attribute_id = T6.id JOIN superpower AS T7 ON T7.id = T5.attribute_value WHERE T7.power_name = 'Phoenix Force'"]}, {"question_id": 826, "answer_sql": ["SELECT superhero_name FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher_name = 'DC Comics' ORDER BY weight_kg DESC LIMIT 1;", "SELECT s.full_name, s.weight_kg FROM superhero s JOIN publisher p ON s.publisher_id = p.id WHERE p.publisher_name = 'DC Comics' ORDER BY s.weight_kg DESC LIMIT 1;", "SELECT MAX(superhero.weight_kg) AS heaviest_superhero_weight FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'DC Comics';", "SELECT superhero_name FROM superhero WHERE publisher_id = (SELECT publisher_id FROM publisher WHERE publisher_name = 'DC Comics') ORDER BY weight_kg DESC LIMIT 1;", "SELECT s1.superhero_name FROM superhero s1 JOIN superpower sp ON s1.id = sp.id WHERE s1.publisher_id = (SELECT publisher_id FROM publisher WHERE publisher_name = 'DC Comics') ORDER BY s1.weight_kg DESC LIMIT 1;"]}, {"question_id": 827, "answer_sql": ["SELECT AVG(superhero.height_cm) AS average_height FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id JOIN colour ON superhero.skin_colour_id = colour.id JOIN alignment ON superhero.alignment_id = alignment.id JOIN race ON superhero.race_id = race.id WHERE publisher.publisher_name = 'Dark Horse Comics' AND race.race <> 'Human';", "SELECT AVG(height_cm) AS average_height FROM superhero WHERE race_id <> 1 AND publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Dark Horse Comics')"]}, {"question_id": 828, "answer_sql": []}, {"question_id": 829, "answer_sql": ["SELECT SUM(CASE WHEN T2.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) AS dc_superheroes, SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) AS marvel_superheroes FROM superhero AS T1 JOIN publisher AS T2 ON T1.publisher_id = T2.id", "SELECT SUM(CASE WHEN T2.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) AS difference FROM superhero AS T1 JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.alignment_id = (SELECT id FROM alignment WHERE alignment = 'DC Comics') AND T1.alignment_id = (SELECT id FROM alignment WHERE alignment = 'Marvel Comics');", "SELECT SUM(CASE WHEN T2.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) AS dc_superheroes, SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) AS marvel_superheroes FROM superhero AS T1 JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.alignment_id IN (SELECT id FROM alignment WHERE alignment = 'DC Comics') AND T1.alignment_id IN (SELECT id FROM alignment WHERE alignment = 'Marvel Comics')"]}, {"question_id": 830, "answer_sql": ["SELECT attribute_name FROM attribute WHERE attribute_name = (SELECT MIN(attribute_name) FROM attribute WHERE attribute_name = (SELECT attribute_name FROM superhero WHERE superhero_name = 'Black Panther'))", "SELECT attribute.attribute_name FROM superhero JOIN alignment ON superhero.alignment_id = alignment.id JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE superhero_name = 'Black Panther' ORDER BY attribute_value ASC LIMIT 1;"]}, {"question_id": 831, "answer_sql": ["SELECT colour.colour FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.superhero_name = 'Abomination';"]}, {"question_id": 832, "answer_sql": ["SELECT superhero_name FROM superhero ORDER BY height_cm DESC LIMIT 1;", "SELECT superhero_name FROM superhero WHERE height_cm = (SELECT MAX(height_cm) FROM superhero)", "SELECT s.superhero_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE s.height_cm = (SELECT MAX(height_cm) FROM superhero)"]}, {"question_id": 833, "answer_sql": ["SELECT superhero_name FROM superhero WHERE full_name = 'Charles Chandler';"]}, {"question_id": 834, "answer_sql": []}, {"question_id": 835, "answer_sql": ["SELECT CAST(SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.publisher_name) AS percentage_good_superheroes FROM superhero AS T1 JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.alignment_id = (SELECT id FROM alignment WHERE alignment = 'Good');"]}, {"question_id": 836, "answer_sql": ["SELECT COUNT(*) AS total_superheroes FROM superhero WHERE full_name LIKE 'John%';"]}, {"question_id": 837, "answer_sql": ["SELECT superhero.id FROM superhero WHERE superhero.id = (SELECT hero_id FROM hero_attribute ORDER BY attribute_value ASC LIMIT 1);"]}, {"question_id": 838, "answer_sql": ["SELECT superhero.full_name FROM superhero WHERE superhero.superhero_name = 'Alien';", "SELECT superhero.full_name FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE superhero.superhero_name = 'Alien';", "SELECT s.full_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'Alien';"]}, {"question_id": 839, "answer_sql": ["SELECT superhero.full_name FROM superhero JOIN gender ON superhero.gender_id = gender.id JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.weight_kg < 100 AND colour.colour = 'brown';"]}, {"question_id": 840, "answer_sql": ["SELECT hero_attribute.attribute_value FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE superhero.superhero_name = 'Aquababy';"]}, {"question_id": 841, "answer_sql": ["SELECT superhero.weight_kg, race.race FROM superhero JOIN alignment ON superhero.alignment_id = alignment.id JOIN gender ON superhero.gender_id = gender.id JOIN race ON superhero.race_id = race.id WHERE superhero.id = 40;", "SELECT superhero.weight_kg, race.race FROM superhero JOIN race ON superhero.race_id = race.id JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id JOIN colour ON attribute.attribute_name = colour.colour WHERE superhero.id = 40;"]}, {"question_id": 842, "answer_sql": ["SELECT AVG(height_cm) AS average_height FROM superhero WHERE alignment_id = (SELECT id FROM alignment WHERE alignment = 'Neutral')", "SELECT AVG(superhero.height_cm) AS average_height FROM superhero JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.alignment = 'neutral';"]}, {"question_id": 843, "answer_sql": ["SELECT superhero.id FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Intelligence';", "SELECT superhero.id FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Intelligence';", "SELECT hero_id FROM hero_attribute WHERE attribute_value = (SELECT id FROM superpower WHERE power_name = 'Intelligence');"]}, {"question_id": 844, "answer_sql": ["SELECT T1.eye_colour_id, T2.colour FROM superhero AS T1 JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Blackwulf'", "SELECT T2.colour FROM superhero AS T1 JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Blackwulf';", "SELECT T2.colour FROM superhero AS T1 JOIN alignment AS T3 ON T1.alignment_id = T3.id JOIN colour AS T2 ON T3.id = T2.id WHERE T1.superhero_name = 'Blackwulf';"]}, {"question_id": 845, "answer_sql": ["SELECT sp.power_name FROM superpower sp JOIN hero_power hp ON sp.id = hp.power_id JOIN superhero s ON hp.hero_id = s.id WHERE s.height_cm > (SELECT AVG(height_cm) * 0.8 FROM superhero);"]}, {"question_id": 846, "answer_sql": ["SELECT DISTINCT T1.driverRef FROM drivers AS T1 JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.q1 IS NULL AND T2.raceId = 18"]}, {"question_id": 847, "answer_sql": ["SELECT T1.surname \nFROM drivers AS T1 \nJOIN (\n    SELECT driverId, MIN(q2) AS min_q2 \n    FROM qualifying \n    WHERE raceId = 19 AND q2 IS NOT NULL \n    GROUP BY driverId\n) AS T2 \nON T1.driverId = T2.driverId \nWHERE T2.min_q2 IS NOT NULL \nORDER BY T2.min_q2 ASC \nLIMIT 1;", "SELECT T1.surname FROM drivers AS T1 JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = (SELECT raceId FROM races WHERE round = 2 AND year = 2023 AND round = 19) ORDER BY T2.q2 ASC LIMIT 1;"]}, {"question_id": 848, "answer_sql": ["SELECT DISTINCT T1.year FROM races AS T1 JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.location = 'Shanghai';", "SELECT DISTINCT T1.year FROM races AS T1 JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Shanghai';"]}, {"question_id": 849, "answer_sql": ["SELECT circuits.url FROM circuits JOIN races ON circuits.circuitId = races.circuitId WHERE circuits.name = 'Circuit de Barcelona-Catalunya';", "SELECT url FROM circuits WHERE circuitRef = 'Circuit de Barcelona-Catalunya';", "SELECT url FROM circuits WHERE name = 'Circuit de Barcelona-Catalunya';"]}, {"question_id": 850, "answer_sql": ["SELECT T2.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.country = 'Germany';", "SELECT T2.name FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T1.country = 'Germany';"]}, {"question_id": 851, "answer_sql": []}, {"question_id": 852, "answer_sql": ["SELECT COUNT(raceId) AS races_count FROM races WHERE year = 2010 AND circuitId IN ( SELECT circuitId FROM circuits WHERE country NOT IN ('Asia', 'Europe') );"]}, {"question_id": 853, "answer_sql": ["SELECT races.name FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.country = 'Spain';", "SELECT DISTINCT T1.name FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T1.country = 'Spain';", "SELECT DISTINCT races.name FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.location LIKE '%Spain%';", "SELECT T1.name FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T1.country = 'Spain';", "SELECT DISTINCT races.name FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.country = 'Spain';"]}, {"question_id": 854, "answer_sql": ["SELECT circuits.lat, circuits.lng FROM circuits JOIN races ON circuits.circuitId = races.circuitId JOIN results ON races.raceId = results.raceId WHERE races.name = 'Australian Grand Prix';", "SELECT location, lat, lng FROM circuits WHERE country = 'Australia' AND circuitRef LIKE '%Grand Prix%'", "SELECT location, lat, lng FROM circuits WHERE country = 'Australia';", "SELECT circuits.location, circuits.lat, circuits.lng FROM circuits JOIN races ON circuits.circuitId = races.circuitId JOIN results ON races.raceId = results.raceId WHERE races.name = 'Australian Grand Prix';", "SELECT circuits.location FROM circuits JOIN races ON circuits.circuitId = races.circuitId JOIN results ON races.raceId = results.raceId WHERE races.name = 'Australian Grand Prix';"]}, {"question_id": 855, "answer_sql": ["SELECT r.name FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.name = 'Sepang International Circuit';", "SELECT r.name, r.url FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.name = 'Sepang International Circuit';", "SELECT url FROM races WHERE circuitId = (SELECT circuitId FROM circuits WHERE name = 'Sepang International Circuit')", "SELECT circuits.url FROM circuits JOIN races ON circuits.circuitId = races.circuitId WHERE races.date = '2022-03-23'"]}, {"question_id": 856, "answer_sql": ["SELECT T1.time FROM races AS T1 JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Sepang International Circuit';", "SELECT T2.time FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T1.name = 'Sepang International Circuit' ORDER BY T2.date;", "SELECT T2.time FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T1.name = 'Sepang International Circuit' AND T2.date = '2023-01-01'"]}, {"question_id": 857, "answer_sql": ["SELECT T1.lat, T1.lng FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Abu Dhabi Grand Prix';", "SELECT circuits.lat, circuits.lng FROM circuits JOIN races ON circuits.circuitId = races.circuitId JOIN results ON races.raceId = results.raceId WHERE races.name = 'Abu Dhabi Grand Prix';"]}, {"question_id": 858, "answer_sql": ["SELECT circuits.country FROM circuits JOIN races ON circuits.circuitId = races.circuitId JOIN constructorResults ON races.raceId = constructorResults.raceId JOIN constructors ON constructorResults.constructorId = constructors.constructorId WHERE races.round = 24 AND constructorResults.points = 1;"]}, {"question_id": 859, "answer_sql": ["SELECT q1 FROM qualifying WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Bruno' AND surname = 'Senna') AND raceId = 354;", "SELECT q1 FROM qualifying WHERE raceId = 354 AND driverId = (SELECT driverId FROM drivers WHERE driverId = 10)", "SELECT q1 FROM qualifying WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Bruno' AND surname = 'Senna');", "SELECT q1 FROM qualifying WHERE raceId = ( SELECT raceId FROM races WHERE round = 354 ) AND driverId = ( SELECT driverId FROM drivers WHERE forename = 'Bruno' AND surname = 'Senna' )"]}, {"question_id": 860, "answer_sql": ["SELECT T2.nationality FROM results AS T1 JOIN drivers AS T2 ON T1.driverId = T2.driverId JOIN qualifying AS T3 ON T1.driverId = T3.driverId WHERE T1.positionText = 'Q2' AND T3.q2 = '0:01:40' AND T1.raceId = (SELECT raceId FROM races WHERE round = 355)"]}, {"question_id": 861, "answer_sql": ["SELECT T1.number FROM drivers AS T1 JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.q3 = '0:01:54';"]}, {"question_id": 862, "answer_sql": ["SELECT COUNT(DISTINCT driverId) AS driver_count \nFROM results \nWHERE raceId = ( \n    SELECT raceId \n    FROM races \n    WHERE year = 2007 AND name = 'Bahrain Grand Prix' \n) AND time IS NOT NULL;", "SELECT COUNT(DISTINCT driverId) AS driver_count \nFROM results \nWHERE raceId = ( \n    SELECT raceId \n    FROM races \n    WHERE year = 2007 AND name = 'Bahrain Grand Prix' \n);", "SELECT COUNT(DISTINCT driverId) AS drivers_not_finished FROM results WHERE raceId = ( SELECT raceId FROM races WHERE name = 'Bahrain Grand Prix' AND year = 2007 ) AND time IS NULL;", "SELECT COUNT(DISTINCT driverId) AS driver_count FROM results WHERE raceId = ( SELECT raceId FROM races WHERE name = 'Bahrain Grand Prix' AND year = 2007 ) AND position IS NOT NULL;", "SELECT COUNT(DISTINCT driverId) AS drivers_not_finished \nFROM results \nWHERE raceId = ( \n    SELECT raceId \n    FROM races \n    WHERE year = 2007 AND round = 1 AND name = 'Bahrain Grand Prix' \n) \nAND statusId = ( \n    SELECT statusId \n    FROM status \n    WHERE status = 'Finished' \n);"]}, {"question_id": 863, "answer_sql": ["SELECT s.year, s.url FROM seasons s JOIN races r ON s.year = r.year WHERE r.raceId = 901;", "SELECT s.url FROM seasons s JOIN races r ON s.year = r.year WHERE r.raceId = 901;"]}, {"question_id": 864, "answer_sql": ["SELECT COUNT(DISTINCT driverId) AS num_drivers FROM races JOIN results ON races.raceId = results.raceId WHERE strftime('%Y-%m-%d', races.date) = '2015-11-29';"]}, {"question_id": 865, "answer_sql": ["SELECT drivers.surname, drivers.forename, MAX(dob) AS oldest_dob FROM drivers JOIN results ON drivers.driverId = results.driverId JOIN races ON results.raceId = races.raceId WHERE races.raceId = 592 GROUP BY drivers.driverId ORDER BY oldest_dob DESC LIMIT 1;", "SELECT D.driverRef, D.surname, D.forename, D.dob FROM drivers D JOIN results R ON D.driverId = R.driverId WHERE R.raceId = 592 AND R.time IS NOT NULL ORDER BY D.dob ASC LIMIT 1;", "SELECT MAX(dob) AS oldest_dob FROM drivers WHERE driverId IN ( SELECT driverId FROM results WHERE raceId = ( SELECT raceId FROM races WHERE round = 592 ) );", "SELECT d.surname || ' ' || d.forename AS driver_name, d.dob AS driver_age FROM drivers d JOIN results r ON d.driverId = r.driverId WHERE r.raceId = (SELECT raceId FROM races WHERE round = 592) ORDER BY d.dob ASC LIMIT 1;"]}, {"question_id": 866, "answer_sql": ["SELECT d.url FROM drivers d JOIN lapTimes lt ON d.driverId = lt.driverId WHERE lt.time = '0:01:27' ORDER BY d.driverRef LIMIT 1;"]}, {"question_id": 867, "answer_sql": ["SELECT drivers.driverId, drivers.surname, drivers.nationality FROM drivers JOIN results ON drivers.driverId = results.driverId WHERE results.raceId = (SELECT raceId FROM races WHERE name = 'Race No.933') AND results.fastestLapSpeed = ( SELECT MAX(fastestLapSpeed) FROM results ) ORDER BY results.position LIMIT 1;"]}, {"question_id": 868, "answer_sql": ["SELECT location, lat, lng FROM circuits WHERE name = 'Malaysian Grand Prix';"]}, {"question_id": 869, "answer_sql": ["SELECT c.url FROM constructors c JOIN constructorStandings cs ON c.constructorId = cs.constructorId JOIN races r ON r.raceId = cs.raceId WHERE r.raceId = 9 ORDER BY cs.points DESC LIMIT 1;", "SELECT c.url FROM constructors c JOIN constructorResults cr ON c.constructorId = cr.constructorId JOIN races r ON cr.raceId = r.raceId WHERE r.round = 9 ORDER BY cr.points DESC LIMIT 1;", "SELECT c.url FROM constructors c JOIN constructorResults cr ON c.constructorId = cr.constructorId JOIN races r ON cr.raceId = r.raceId WHERE r.year = 2018 AND r.round = 9 ORDER BY cr.points DESC LIMIT 1;"]}, {"question_id": 870, "answer_sql": ["SELECT q1 FROM qualifying WHERE raceId = (SELECT raceId FROM races WHERE raceId = 345) AND driverId = (SELECT driverId FROM drivers WHERE driverId = 10);", "SELECT qualifying.q1 FROM qualifying JOIN drivers ON qualifying.driverId = drivers.driverId JOIN races ON qualifying.raceId = races.raceId WHERE races.raceId = 345 AND drivers.forename = 'Lucas' AND drivers.surname = 'di Grassi';", "SELECT q1 FROM qualifying WHERE raceId = (SELECT raceId FROM races WHERE raceId = 345) AND driverId = (SELECT driverId FROM drivers WHERE driverId = 11);"]}, {"question_id": 871, "answer_sql": ["SELECT d.surname, d.forename, d.nationality FROM drivers d JOIN qualifying q ON d.driverId = q.driverId WHERE q.q2 = '0:01:15' AND q.raceId = (SELECT raceId FROM races WHERE round = 347)"]}, {"question_id": 872, "answer_sql": ["SELECT drivers.code FROM drivers JOIN results ON drivers.driverId = results.driverId JOIN races ON results.raceId = races.raceId WHERE races.round = 45 AND results.fastestLap = '0:01:33';"]}, {"question_id": 873, "answer_sql": ["SELECT T2.time FROM races AS T1 INNER JOIN lapTimes AS T2 ON T1.raceId = T2.raceId WHERE T1.raceId = 743 AND T2.driverId = (SELECT driverId FROM drivers WHERE forename = 'Bruce' AND surname = 'McLaren')"]}, {"question_id": 874, "answer_sql": ["SELECT d.surname, d.forename, rs.positionText FROM drivers d JOIN driverStandings rs ON d.driverId = rs.driverId JOIN races r ON rs.raceId = r.raceId JOIN seasons s ON r.year = s.year WHERE r.name = 'San Marino Grand Prix' AND s.year = 2006 AND rs.position = 2;", "SELECT d.surname, d.forename, ds.position FROM drivers d JOIN driverStandings ds ON d.driverId = ds.driverId JOIN races r ON ds.raceId = r.raceId WHERE r.name = 'San Marino Grand Prix' AND r.year = 2006 AND ds.position = 2;", "SELECT T1.positionText, T1.position, T2.name FROM driverStandings AS T1 JOIN races AS T3 ON T1.raceId = T3.raceId JOIN circuits AS T2 ON T3.circuitId = T2.circuitId WHERE T3.name = 'San Marino Grand Prix' AND T3.year = 2006 AND T1.position = 2;", "SELECT d.surname, d.forename FROM drivers d JOIN driverStandings ds ON d.driverId = ds.driverId JOIN races r ON ds.raceId = r.raceId WHERE r.name = 'San Marino Grand Prix' AND r.year = 2006 AND ds.position = 2;", "SELECT d.surname || ' ' || d.forename AS driver_name FROM drivers d JOIN driverStandings ds ON d.driverId = ds.driverId JOIN races r ON ds.raceId = r.raceId WHERE r.name = 'San Marino Grand Prix' AND r.year = 2006 AND ds.position = 2;"]}, {"question_id": 875, "answer_sql": ["SELECT s.year, s.url FROM seasons s JOIN races r ON s.year = r.year WHERE r.raceId = 901;", "SELECT s.year FROM seasons s JOIN races r ON s.year = r.year WHERE r.raceId = 901;", "SELECT s.url FROM seasons s JOIN races r ON s.year = r.year WHERE r.raceId = 901;"]}, {"question_id": 876, "answer_sql": ["SELECT COUNT(DISTINCT driverId) AS driver_count FROM races JOIN results ON races.raceId = results.raceId WHERE races.date = '2015-11-29';"]}, {"question_id": 877, "answer_sql": ["SELECT drivers.surname, drivers.forename, MIN(drivers.dob) AS youngest_dob FROM drivers JOIN results ON drivers.driverId = results.driverId JOIN races ON results.raceId = races.raceId WHERE races.raceId = 872 GROUP BY drivers.driverId ORDER BY MIN(drivers.dob) ASC LIMIT 1;", "SELECT MIN(dob) AS youngest_driver FROM drivers WHERE driverId IN ( SELECT driverId FROM results WHERE raceId = ( SELECT raceId FROM races WHERE year = 2022 AND round = 872 ) );"]}, {"question_id": 878, "answer_sql": ["SELECT d.forename, d.surname FROM drivers d JOIN lapTimes lt ON d.driverId = lt.driverId WHERE lt.raceId = (SELECT raceId FROM races WHERE name = 'Race No. 348') ORDER BY lt.time ASC LIMIT 1;"]}, {"question_id": 879, "answer_sql": ["SELECT drivers.nationality FROM drivers WHERE drivers.driverId = ( SELECT drivers.driverId FROM drivers INNER JOIN results ON drivers.driverId = results.driverId INNER JOIN races ON results.raceId = races.raceId WHERE races.raceId = ( SELECT MAX(races.raceId) FROM races WHERE results.raceId = races.raceId ) ORDER BY results.fastestLapSpeed DESC LIMIT 1 )"]}, {"question_id": 880, "answer_sql": []}, {"question_id": 881, "answer_sql": []}, {"question_id": 882, "answer_sql": ["SELECT year FROM races WHERE name = 'Singapore Grand Prix' ORDER BY year LIMIT 1;", "SELECT year FROM races WHERE circuitId = (SELECT circuitId FROM circuits WHERE name = 'Singapore Grand Prix') ORDER BY year LIMIT 1"]}, {"question_id": 883, "answer_sql": ["SELECT COUNT(raceId) AS race_count, name FROM races WHERE year = 2005 ORDER BY raceId DESC;"]}, {"question_id": 884, "answer_sql": []}, {"question_id": 885, "answer_sql": ["SELECT races.name, races.date FROM races JOIN seasons ON races.year = seasons.year WHERE seasons.year = 1999 ORDER BY races.round DESC LIMIT 1;"]}, {"question_id": 886, "answer_sql": ["SELECT year FROM races GROUP BY year ORDER BY COUNT(raceId) DESC LIMIT 1;"]}, {"question_id": 887, "answer_sql": ["SELECT races.name FROM races WHERE races.year = 2017 AND races.year != 2000;", "SELECT races.name FROM races WHERE races.year = 2017 AND races.year != 2000 AND races.circuitId NOT IN ( SELECT circuitId FROM seasons WHERE year = 2000 );"]}, {"question_id": 888, "answer_sql": ["SELECT circuits.name, circuits.location FROM circuits JOIN races ON circuits.circuitId = races.circuitId JOIN seasons ON races.year = seasons.year WHERE races.name = (SELECT MIN(year) FROM seasons) AND circuits.country = 'Europe';"]}, {"question_id": 889, "answer_sql": ["SELECT MAX(seasons.year) FROM seasons JOIN races ON seasons.year = races.year JOIN circuits ON circuits.circuitId = races.circuitId WHERE circuits.name = 'Brands Hatch' AND races.name LIKE 'British Grand Prix';"]}, {"question_id": 890, "answer_sql": ["SELECT COUNT(DISTINCT T1.year) AS seasons_hosted FROM races AS T1 JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Silverstone Circuit' AND T1.name LIKE '%British Grand Prix%';", "SELECT COUNT(DISTINCT T1.year) AS numberOfSeasons FROM races AS T1 JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.location = 'Silverstone Circuit' AND T2.country = 'United Kingdom';"]}, {"question_id": 891, "answer_sql": ["SELECT d.driverRef AS driver_ref, d.forename AS forename, d.surname AS surname, ds.position AS position FROM drivers d JOIN driverStandings ds ON d.driverId = ds.driverId JOIN races r ON ds.raceId = r.raceId WHERE r.year = 2010 AND r.name = 'Singapore Grand Prix' ORDER BY ds.position;", "SELECT d.driverId, d.surname, d.forename, ds.positionText FROM drivers d JOIN driverStandings ds ON d.driverId = ds.driverId WHERE ds.raceId = (SELECT raceId FROM races WHERE year = 2010 AND name = 'Singapore Grand Prix') ORDER BY ds.positionText;", "SELECT drivers.driverId, drivers.surname, drivers.forename, driverStandings.position, driverStandings.positionText FROM drivers JOIN driverStandings ON drivers.driverId = driverStandings.driverId JOIN races ON driverStandings.raceId = races.raceId WHERE races.year = 2010 AND races.name = 'Singapore Grand Prix' ORDER BY driverStandings.position;"]}, {"question_id": 892, "answer_sql": ["SELECT drivers.driverRef AS driver_ref, drivers.forename AS forename, drivers.surname AS surname FROM drivers JOIN results ON drivers.driverId = results.driverId WHERE results.points = (SELECT MAX(points) FROM results) ORDER BY results.position ASC LIMIT 1;", "SELECT d.forename, d.surname FROM drivers d JOIN driverStandings ds ON d.driverId = ds.driverId WHERE ds.points = (SELECT MAX(points) FROM driverStandings) ORDER BY ds.position ASC;", "SELECT drivers.forename, drivers.surname FROM drivers WHERE drivers.driverId = ( SELECT driverId FROM results ORDER BY points DESC LIMIT 1 )"]}, {"question_id": 893, "answer_sql": ["SELECT d.surname, d.forename, SUM(r.points) AS total_points FROM drivers d JOIN results r ON d.driverId = r.driverId WHERE r.raceId = (SELECT raceId FROM races WHERE name = 'Chinese Grand Prix' AND year = 2017) GROUP BY d.driverId ORDER BY total_points DESC LIMIT 3;"]}, {"question_id": 894, "answer_sql": ["SELECT drivers.driverRef AS driver, races.name AS race FROM lapTimes JOIN drivers ON lapTimes.driverId = drivers.driverId JOIN races ON lapTimes.raceId = races.raceId WHERE lapTimes.time = (SELECT MIN(time) FROM lapTimes) ORDER BY races.name, drivers.driverRef;"]}, {"question_id": 895, "answer_sql": ["SELECT AVG(lapTimes.time) AS average_lap_time FROM drivers JOIN lapTimes ON drivers.driverId = lapTimes.driverId JOIN races ON lapTimes.raceId = races.raceId WHERE drivers.surname = 'Vettel' AND races.name = 'Chinese Grand Prix' AND races.year = 2009;"]}, {"question_id": 896, "answer_sql": []}, {"question_id": 897, "answer_sql": ["SELECT d.driverRef AS driver_name, d.nationality, AVG(rs.points) AS average_points FROM drivers d JOIN driverStandings rs ON d.driverId = rs.driverId GROUP BY d.driverRef, d.nationality ORDER BY COUNT(rs.wins) DESC LIMIT 1;", "SELECT d.surname, d.nationality, AVG(rs.points) AS average_points FROM drivers d JOIN driverStandings rs ON d.driverId = rs.driverId GROUP BY d.driverId ORDER BY COUNT(rs.wins) DESC LIMIT 1;"]}, {"question_id": 898, "answer_sql": ["SELECT MAX(dob), forename, surname FROM drivers WHERE nationality = 'Japanese' ORDER BY dob ASC LIMIT 1;", "SELECT MIN(j.dob) AS age, j.forename || ' ' || j.surname AS name FROM drivers j WHERE j.nationality = 'Japanese'"]}, {"question_id": 899, "answer_sql": ["SELECT DISTINCT c.circuitRef, c.name FROM circuits c JOIN races r ON c.circuitId = r.circuitId WHERE r.year BETWEEN 1990 AND 2000 GROUP BY c.circuitRef, c.name HAVING COUNT(DISTINCT r.year) = 4;", "SELECT circuits.name FROM circuits JOIN races ON circuits.circuitId = races.circuitId WHERE races.year BETWEEN 1990 AND 2000 GROUP BY circuits.name HAVING COUNT(DISTINCT races.raceId) = 4;", "SELECT DISTINCT c.circuitRef FROM circuits c JOIN races r ON c.circuitId = r.circuitId WHERE r.year BETWEEN 1990 AND 2000 GROUP BY c.circuitRef HAVING COUNT(DISTINCT r.raceId) = 4;"]}, {"question_id": 900, "answer_sql": ["SELECT circuits.name, circuits.location, races.name AS race_name FROM circuits JOIN races ON circuits.circuitId = races.circuitId WHERE circuits.country = 'USA' AND races.year = 2006;"]}, {"question_id": 901, "answer_sql": []}, {"question_id": 902, "answer_sql": []}, {"question_id": 903, "answer_sql": ["SELECT COUNT(DISTINCT T1.driverId) AS numberOfWins FROM results AS T1 JOIN races AS T2 ON T1.raceId = T2.raceId JOIN circuits AS T3 ON T2.circuitId = T3.circuitId WHERE T3.name = 'Sepang International Circuit' AND T1.position = (SELECT MAX(position) FROM results WHERE raceId = T1.raceId AND driverId = T1.driverId);", "SELECT COUNT(*) AS win_count FROM races r JOIN driverStandings ds ON r.raceId = ds.raceId JOIN drivers d ON ds.driverId = d.driverId WHERE r.circuitId = (SELECT circuitId FROM circuits WHERE name = 'Sepang International Circuit') AND d.surname = 'Schumacher' AND d.forename = 'Michael' AND ds.position = 1;", "SELECT COUNT(DISTINCT T1.driverId) AS win_count FROM results AS T1 JOIN races AS T2 ON T1.raceId = T2.raceId JOIN circuits AS T3 ON T2.circuitId = T3.circuitId WHERE T3.name = 'Sepang International Circuit' AND T1.position = (SELECT MAX(points) FROM results WHERE raceId = T1.raceId AND constructorId = (SELECT constructorId FROM constructors WHERE name = 'Michael Schumacher'))"]}, {"question_id": 904, "answer_sql": []}, {"question_id": 905, "answer_sql": []}, {"question_id": 906, "answer_sql": ["SELECT r.name AS first_race, dr.points AS first_race_points FROM races r JOIN results dr ON r.raceId = dr.raceId WHERE dr.position = 1 ORDER BY r.year ASC LIMIT 1;", "SELECT circuits.name AS first_race, constructorResults.points AS first_race_points FROM races JOIN circuits ON races.circuitId = circuits.circuitId JOIN constructorResults ON races.raceId = constructorResults.raceId WHERE races.year = (SELECT MIN(year) FROM races) AND constructorResults.constructorId = (SELECT constructorId FROM constructors WHERE name = 'Lewis Hamilton') LIMIT 1;"]}, {"question_id": 907, "answer_sql": ["SELECT r.name AS race_name, c.location AS hosting_country FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE r.year = 2017 ORDER BY r.date;", "SELECT r.year, c.country, r.date FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE r.year = 2017 ORDER BY r.date;", "SELECT races.name, circuits.country FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.year = 2017 ORDER BY races.date;", "SELECT races.date, circuits.country FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.year = 2017 ORDER BY races.date;", "SELECT races.date, circuits.location FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.year = 2017 ORDER BY races.date;"]}, {"question_id": 908, "answer_sql": ["SELECT r.name AS race_name, r.year, c.location \nFROM races r \nJOIN results res ON r.raceId = res.raceId \nJOIN circuits c ON r.circuitId = c.circuitId \nWHERE res.laps = ( \n    SELECT MAX(laps) \n    FROM results \n    WHERE raceId = r.raceId \n) \nORDER BY res.laps DESC \nLIMIT 1;", "SELECT races.name, races.year, circuits.location FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.raceId IN ( SELECT raceId FROM results GROUP BY raceId ORDER BY SUM(laps) DESC LIMIT 1 )"]}, {"question_id": 909, "answer_sql": ["SELECT CAST(SUM(CASE WHEN T2.country = 'Germany' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.name) AS percentage FROM races AS T1 JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.name = 'Europearn Grand Prix' AND T2.country = 'Germany';"]}, {"question_id": 910, "answer_sql": ["SELECT location, lat, lng FROM circuits WHERE circuitRef = 'SILVERSTONE';", "SELECT location, lat, lng FROM circuits WHERE name = 'Silverstone Circuit'", "SELECT circuits.location FROM circuits JOIN races ON circuits.circuitId = races.circuitId WHERE circuits.name = 'Silverstone Circuit';", "SELECT circuits.location, circuits.lat, circuits.lng FROM circuits JOIN races ON circuits.circuitId = races.circuitId WHERE circuits.name = 'Silverstone Circuit';"]}, {"question_id": 911, "answer_sql": ["SELECT circuits.name FROM circuits WHERE circuits.name IN ('Silverstone Circuit', 'Hockenheimring', 'Hungaroring') ORDER BY circuits.lat DESC LIMIT 1;", "SELECT circuits.name, circuits.lat FROM circuits WHERE circuits.name IN ('Silverstone Circuit', 'Hockenheimring', 'Hungaroring') ORDER BY circuits.lat DESC LIMIT 1;", "SELECT circuits.name FROM circuits WHERE circuits.circuitId IN ( SELECT circuitId FROM races WHERE name IN ('Silverstone Circuit', 'Hockenheimring', 'Hungaroring') ) AND circuits.lat = ( SELECT MAX(lat) FROM circuits )"]}, {"question_id": 912, "answer_sql": ["SELECT circuitRef FROM circuits WHERE name = 'Marina Bay Street Circuit';"]}, {"question_id": 913, "answer_sql": ["SELECT circuits.country FROM circuits WHERE circuits.alt = (SELECT MAX(alt) FROM circuits) ORDER BY circuits.alt DESC LIMIT 1;"]}, {"question_id": 914, "answer_sql": ["SELECT COUNT(driverId) AS driver_count FROM drivers WHERE code IS NULL;"]}, {"question_id": 915, "answer_sql": ["SELECT T1.nationality \nFROM drivers AS T1 \nJOIN constructors AS T2 ON T1.driverRef = T2.constructorRef \nWHERE T1.dob = (SELECT MIN(T1.dob) FROM drivers AS T1 JOIN constructors AS T2 ON T1.driverRef = T2.constructorRef) \nORDER BY T1.nationality LIMIT 1;", "SELECT T1.nationality FROM drivers AS T1 JOIN constructors AS T2 ON T1.driverRef = T2.constructorRef WHERE T1.dob = (SELECT MIN(T2.year) FROM seasons AS T2) GROUP BY T1.nationality"]}, {"question_id": 916, "answer_sql": ["SELECT surname FROM drivers WHERE nationality = 'italian';"]}, {"question_id": 917, "answer_sql": ["SELECT url FROM drivers WHERE forename = 'Anthony' AND surname = 'Davidson';"]}, {"question_id": 918, "answer_sql": ["SELECT driverRef FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton';", "SELECT forename, surname FROM drivers WHERE driverRef = 'Lewis Hamilton';"]}, {"question_id": 919, "answer_sql": ["SELECT circuits.name FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.year = 2009 AND races.name = 'Spanish Grand Prix';", "SELECT circuits.name FROM races JOIN circuits ON races.circuitId = circuits.circuitId JOIN results ON races.raceId = results.raceId WHERE races.year = 2009 AND races.name = 'Spanish Grand Prix';"]}, {"question_id": 920, "answer_sql": ["SELECT DISTINCT T1.year FROM races AS T1 JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Silverstone Circuit';", "SELECT DISTINCT T1.year FROM races AS T1 JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.circuitRef = 'SILVERSTONE';"]}, {"question_id": 921, "answer_sql": ["SELECT circuits.url, circuits.name, circuits.location, circuits.country, circuits.lat, circuits.lng, circuits.alt FROM circuits JOIN races ON circuits.circuitId = races.circuitId WHERE circuits.name = 'Silverstone Circuit';", "SELECT r.name, r.date, r.time, r.url FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.name = 'Silverstone Circuit';", "SELECT circuits.url, circuits.name, circuits.location, circuits.country, circuits.lat, circuits.lng, circuits.alt, races.url FROM circuits JOIN races ON circuits.circuitId = races.circuitId WHERE circuits.name = 'Silverstone Circuit';", "SELECT r.* FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.url LIKE '%Silverstone%';", "SELECT circuits.url, circuits.name, circuits.location, circuits.country, circuits.lat, circuits.lng, circuits.alt FROM circuits JOIN races ON circuits.circuitId = races.circuitId WHERE circuits.circuitRef = 'Silverstone Circuit';"]}, {"question_id": 922, "answer_sql": ["SELECT T1.time FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.circuitRef = 'Abu Dhabi' AND T1.year = 2010;"]}, {"question_id": 923, "answer_sql": ["SELECT COUNT(raceId) AS numberOfRaces FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.country = 'Italy';", "SELECT COUNT(DISTINCT raceId) AS numberOfRaces FROM races WHERE circuitId IN ( SELECT circuitId FROM circuits WHERE location LIKE '%Italy%' );"]}, {"question_id": 924, "answer_sql": ["SELECT T2.date FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T1.name = 'Barcelona-Catalunya';"]}, {"question_id": 925, "answer_sql": ["SELECT circuits.url FROM circuits JOIN races ON circuits.circuitId = races.circuitId WHERE races.year = 2009 AND races.name = 'Spanish Grand Prix';", "SELECT url FROM circuits WHERE circuitRef = 'SPA'"]}, {"question_id": 926, "answer_sql": ["SELECT MIN(results.fastestLapTime) AS fastestLapTime FROM results JOIN drivers ON results.driverId = drivers.driverId WHERE drivers.surname = 'Hamilton';", "SELECT results.fastestLapTime AS fastestLapTime FROM results JOIN drivers ON results.driverId = drivers.driverId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';"]}, {"question_id": 927, "answer_sql": ["SELECT drivers.forename, drivers.surname FROM drivers JOIN results ON drivers.driverId = results.driverId JOIN races ON results.raceId = races.raceId WHERE results.fastestLapSpeed IS NOT NULL ORDER BY results.fastestLapSpeed DESC LIMIT 1;"]}, {"question_id": 928, "answer_sql": ["SELECT D.surname, D.forename FROM drivers D JOIN results R ON D.driverId = R.driverId JOIN races RA ON R.raceId = RA.raceId WHERE RA.name = 'Australian Grand Prix' AND RA.year = 2008 AND R.position = 1;"]}, {"question_id": 929, "answer_sql": ["SELECT r.name FROM races r JOIN results res ON r.raceId = res.raceId JOIN drivers d ON res.driverId = d.driverId WHERE d.surname = 'Hamilton' AND d.forename = 'Lewis';"]}, {"question_id": 930, "answer_sql": ["SELECT r.name AS race_name, ds.positionText AS driver_rank FROM races r JOIN driverStandings ds ON r.raceId = ds.raceId WHERE ds.position = (SELECT MIN(position) FROM driverStandings) AND ds.driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton')", "SELECT r.name AS race_name, MIN(rs.rank) AS rank FROM races r JOIN results rs ON r.raceId = rs.raceId JOIN drivers d ON rs.driverId = d.driverId WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton' GROUP BY r.name ORDER BY rank ASC LIMIT 1;", "SELECT r.name AS race_name, ds.positionText AS driver_rank FROM races r JOIN driverStandings ds ON r.raceId = ds.raceId WHERE ds.position = (SELECT MIN(position) FROM driverStandings) ORDER BY ds.positionText ASC;"]}, {"question_id": 931, "answer_sql": ["SELECT MAX(q3) AS fastest_lap_speed \nFROM qualifying \nWHERE raceId = (\n    SELECT raceId \n    FROM races \n    WHERE year = 2009 AND name = 'Spanish Grand Prix'\n);", "SELECT MAX(results.fastestLapSpeed) AS fastest_lap_speed FROM results JOIN races ON results.raceId = races.raceId WHERE races.year = 2009 AND races.name = 'Spanish Grand Prix';", "SELECT MAX(results.fastestLapSpeed) AS fastestLapSpeed FROM results JOIN races ON results.raceId = races.raceId WHERE races.date = '2009-07-05' AND races.name = 'Spanish Grand Prix';"]}, {"question_id": 932, "answer_sql": ["SELECT DISTINCT T1.year FROM seasons AS T1 JOIN races AS T2 ON T1.year = T2.year JOIN drivers AS T3 ON T2.raceId = T3.driverId WHERE T3.surname = 'Hamilton' AND T3.forename = 'Lewis';"]}, {"question_id": 933, "answer_sql": ["SELECT T2.positionOrder FROM drivers AS T1 JOIN results AS T2 ON T1.driverId = T2.driverId JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.name = 'Australian Grand Prix' AND T3.year = 2008 AND T1.forename = 'Lewis' AND T1.surname = 'Hamilton';", "SELECT T1.positionOrder AS final_rank FROM results AS T1 JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = (SELECT raceId FROM races WHERE year = 2008 AND round = 1 AND name = 'Australian Grand Prix')", "SELECT T2.positionOrder AS final_rank FROM drivers AS T1 JOIN results AS T2 ON T1.driverId = T2.driverId JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T1.driverRef = 'LEH' AND T3.name = 'Australian Grand Prix' AND T3.year = 2008;"]}, {"question_id": 934, "answer_sql": ["SELECT drivers.forename, drivers.surname FROM races JOIN results ON races.raceId = results.raceId JOIN drivers ON results.driverId = drivers.driverId WHERE races.year = 2008 AND races.name = 'Australian Grand Prix' AND results.grid = 4;", "SELECT drivers.forename, drivers.surname FROM races JOIN circuits ON races.circuitId = circuits.circuitId JOIN results ON races.raceId = results.raceId JOIN drivers ON results.driverId = drivers.driverId WHERE races.year = 2008 AND races.name = 'Australian Grand Prix' AND results.grid = 4;"]}, {"question_id": 935, "answer_sql": ["SELECT COUNT(DISTINCT driverId) AS driver_count FROM results WHERE raceId = ( SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix' ) AND time IS NOT NULL;"]}, {"question_id": 936, "answer_sql": ["SELECT q1 FROM qualifying WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton') AND raceId = (SELECT raceId FROM races WHERE name = 'Australian Grand Prix' AND year = 2008) ORDER BY q1 ASC LIMIT 1;", "SELECT q1, q2, q3, fastestLapTime, fastestLapSpeed FROM qualifying JOIN results ON qualifying.raceId = results.raceId JOIN drivers ON results.driverId = drivers.driverId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND results.raceId = (SELECT raceId FROM races WHERE name = 'Australian Grand Prix' AND year = 2008)", "SELECT q1, q2, q3, fastestLapTime FROM qualifying JOIN results ON qualifying.raceId = results.raceId JOIN drivers ON results.driverId = drivers.driverId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND results.raceId = (SELECT raceId FROM races WHERE name = 'Australian Grand Prix' AND year = 2008)", "SELECT results.fastestLapTime FROM results JOIN drivers ON results.driverId = drivers.driverId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND results.raceId = (SELECT raceId FROM races WHERE name = 'Australian Grand Prix' AND year = 2008)"]}, {"question_id": 937, "answer_sql": ["SELECT T2.time FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T1.position = 2 AND T2.year = 2008 AND T2.name = 'Australian Grand Prix' ORDER BY T1.positionOrder LIMIT 1", "SELECT T2.time FROM races AS T1 JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T1.year = 2008 AND T1.name = 'Australian Grand Prix' AND T2.position = 2;", "SELECT T1.time FROM races AS T1 JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T2.position = 2 AND T1.year = 2008 AND T1.name = 'AUSTRALIA'"]}, {"question_id": 938, "answer_sql": ["SELECT c.name AS circuitName, d.surname AS driverSurname, d.forename AS driverForename, r.url AS moreInfoUrl FROM circuits c JOIN races r ON c.circuitId = r.circuitId JOIN results r2 ON r.raceId = r2.raceId JOIN drivers d ON r2.driverId = d.driverId WHERE r.year = 2008 AND r.name = 'Australian Grand Prix' AND r2.position = 1;", "SELECT d.surname AS driver_surname, d.forename AS driver_forename, r.name AS race_name, rs.points AS points, rs.position AS position, rs.fastestLapTime AS fastest_lap_time FROM drivers d JOIN results rs ON d.driverId = rs.driverId JOIN races r ON rs.raceId = r.raceId WHERE r.year = 2008 AND r.name = 'Australian Grand Prix' ORDER BY rs.position ASC;", "SELECT d.surname || ' ' || d.forename AS driver_name, r.name AS race_name, rs.points AS points, rs.position AS position, rs.fastestLapTime AS fastest_lap_time FROM drivers d JOIN results rs ON d.driverId = rs.driverId JOIN races r ON rs.raceId = r.raceId WHERE r.year = 2008 AND r.name = 'Australian Grand Prix' ORDER BY rs.position ASC;"]}, {"question_id": 939, "answer_sql": []}, {"question_id": 940, "answer_sql": ["SELECT COUNT(DISTINCT T1.driverId) AS num_participated FROM drivers AS T1 JOIN results AS T2 ON T1.driverId = T2.driverId JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.name = 'Australian Grand Prix' AND T3.year = 2008 AND T2.position <= 10;", "SELECT COUNT(DISTINCT T1.driverId) AS numberOfDrivers FROM results AS T1 JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.year = 2008 AND T2.name = 'Australian Grand Prix';"]}, {"question_id": 941, "answer_sql": ["SELECT SUM(points) AS total_points FROM drivers JOIN results ON drivers.driverId = results.driverId WHERE drivers.surname = 'Hamilton';"]}, {"question_id": 942, "answer_sql": ["SELECT AVG(CAST(REPLACE(REPLACE(fastestLapTime, ':', ''), ' ', '') AS REAL) / 1000) AS average_lap_time FROM results WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton');", "SELECT AVG(CAST(REPLACE(REPLACE(fastestLapTime, ':', ''), '.', '') AS REAL) / 1000) AS average_lap_time FROM results WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton');", "SELECT AVG(CAST(REPLACE(REPLACE(fastestLapTime, ':', ''), '.', '') AS REAL) * 0.01) AS average_lap_time FROM results WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton');"]}, {"question_id": 943, "answer_sql": ["SELECT COUNT(CASE WHEN T1.time IS NOT NULL THEN 1 ELSE NULL END) / COUNT(T1.raceId) AS completion_rate \nFROM races AS T1 \nJOIN results AS T2 ON T1.raceId = T2.raceId \nWHERE T1.year = 2008 AND T1.name = 'Australian Grand Prix'", "SELECT COUNT(CASE WHEN time IS NOT NULL THEN raceId ELSE NULL END) / COUNT(raceId) AS completion_rate FROM races WHERE year = 2008 AND circuitId = (SELECT circuitId FROM circuits WHERE name = 'Australian Grand Prix')"]}, {"question_id": 944, "answer_sql": ["SELECT (CASE WHEN T1.positionText = 'Champion' THEN (SELECT CAST(SUM(CASE WHEN T2.time LIKE '%:00:00.000' THEN 1 ELSE 0 END) AS REAL) / COUNT(T2.time) * 100 FROM results AS T2 WHERE T2.raceId = T1.raceId AND T2.time LIKE '%:00:00.000' AND T2.position = (SELECT MAX(position) FROM results WHERE raceId = T1.raceId AND positionText = 'Champion')) ELSE 0 END) AS percentage_difference FROM results AS T1 WHERE T1.raceId = (SELECT raceId FROM races WHERE name = '2008 Australian Grand Prix') AND T1.positionText = 'Champion'"]}, {"question_id": 945, "answer_sql": ["SELECT COUNT(*) AS circuitCount FROM circuits WHERE location = 'Melbourne, Australia';"]}, {"question_id": 946, "answer_sql": ["SELECT circuits.location FROM circuits JOIN races ON circuits.circuitId = races.circuitId WHERE circuits.country = 'USA';", "SELECT location, country, lat, lng FROM circuits WHERE country = 'USA';", "SELECT circuits.location, circuits.lat, circuits.lng FROM circuits WHERE circuits.country = 'USA';", "SELECT circuits.location, circuits.lng FROM circuits WHERE circuits.country = 'USA';", "SELECT circuits.location FROM circuits WHERE circuits.country = 'USA';"]}, {"question_id": 947, "answer_sql": ["SELECT COUNT(driverId) AS BritishDrivers FROM drivers WHERE dob > '1980-01-01' AND nationality = 'British';", "SELECT COUNT(DISTINCT driverId) AS british_drivers FROM drivers WHERE dob > '1980-01-01';"]}, {"question_id": 948, "answer_sql": ["SELECT AVG(points) AS average_points \nFROM constructors \nJOIN constructorResults ON constructors.constructorId = constructorResults.constructorId \nWHERE constructors.nationality = 'British'", "SELECT AVG(points) AS average_points FROM constructors JOIN constructorStandings ON constructors.constructorId = constructorStandings.constructorId WHERE constructors.nationality = 'British';"]}, {"question_id": 949, "answer_sql": ["SELECT constructors.constructorId, constructors.name, SUM(constructorResults.points) AS total_points FROM constructorResults JOIN constructors ON constructorResults.constructorId = constructors.constructorId GROUP BY constructors.constructorId ORDER BY total_points DESC LIMIT 1;", "SELECT c.name, SUM(r.points) AS total_points FROM constructors c JOIN constructorStandings cs ON c.constructorId = cs.constructorId JOIN results r ON r.constructorId = c.constructorId GROUP BY c.name ORDER BY total_points DESC LIMIT 1;", "SELECT c.name, SUM(r.points) AS total_points FROM constructors c JOIN constructorResults r ON c.constructorId = r.constructorId GROUP BY c.name ORDER BY total_points DESC LIMIT 1;"]}, {"question_id": 950, "answer_sql": ["SELECT c.name FROM constructors c JOIN constructorStandings cs ON c.constructorId = cs.constructorId WHERE cs.raceId = 291 AND cs.points = 0;", "SELECT T1.name FROM constructors AS T1 JOIN constructorResults AS T2 ON T1.constructorId = T2.constructorId WHERE T2.points = 0 AND T2.raceId = 291;", "SELECT DISTINCT c.name FROM constructors c JOIN constructorResults cr ON c.constructorId = cr.constructorId JOIN races r ON cr.raceId = r.raceId WHERE r.year = 2018 AND r.round = 291 AND cr.points = 0;"]}, {"question_id": 951, "answer_sql": ["SELECT COUNT(DISTINCT c.constructorId) AS japanese_constructors_with_zero_points FROM results r JOIN constructors c ON r.constructorId = c.constructorId WHERE c.nationality = 'Japanese' AND r.points = 0 GROUP BY c.constructorId HAVING COUNT(DISTINCT r.raceId) = 2;", "SELECT COUNT(DISTINCT c.constructorId) AS japanese_constructors_with_zero_points FROM races r JOIN results res ON r.raceId = res.raceId JOIN constructors c ON res.constructorId = c.constructorId WHERE c.nationality = 'Japanese' AND res.points = 0 AND r.round = 1 AND r.round = 2;", "SELECT COUNT(T1.constructorId) AS JapaneseConstructorsWithZeroPoints FROM results AS T1 JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T2.nationality = 'Japanese' AND T1.points = 0 GROUP BY T1.constructorId;", "SELECT COUNT(DISTINCT c.constructorId) AS numberOfConstructorsWithZeroPoints FROM constructors c JOIN constructorResults cr ON c.constructorId = cr.constructorId JOIN races r ON cr.raceId = r.raceId WHERE c.nationality = 'Japanese' AND cr.points = 0 GROUP BY c.constructorId;", "SELECT COUNT(T1.constructorId) AS JapaneseConstructorsWithZeroPoints FROM constructors AS T1 JOIN results AS T2 ON T1.constructorId = T2.constructorId WHERE T1.nationality = 'Japanese' AND T2.points = 0 GROUP BY T1.constructorId HAVING COUNT(T2.raceId) = 2;"]}, {"question_id": 952, "answer_sql": ["SELECT constructors.constructorId, constructors.name, constructorStandings.positionText FROM constructors JOIN constructorStandings ON constructors.constructorId = constructorStandings.constructorId WHERE constructorStandings.position = 1;", "SELECT DISTINCT c.name FROM constructors c JOIN constructorStandings cs ON c.constructorId = cs.constructorId WHERE cs.position = 1;", "SELECT c.constructorRef AS constructor, COUNT(*) AS rank_1_constructors FROM constructors c JOIN results r ON c.constructorId = r.constructorId GROUP BY c.constructorRef HAVING rank_1_constructors = 1;"]}, {"question_id": 953, "answer_sql": []}, {"question_id": 954, "answer_sql": ["SELECT SUM(CASE WHEN T2.year BETWEEN 2007 AND 2009 THEN 1 ELSE 0 END) AS total_races, SUM(CASE WHEN T2.year BETWEEN 2007 AND 2009 AND T2.time IS NOT NULL THEN 1 ELSE 0 END) AS completed_races FROM results AS T1 JOIN races AS T2 ON T1.raceId = T2.raceId JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T3.nationality = 'Japanese'"]}, {"question_id": 955, "answer_sql": ["SELECT s.year, AVG(l.time) AS average_time FROM races s JOIN lapTimes l ON s.raceId = l.raceId WHERE l.time IS NOT NULL GROUP BY s.year ORDER BY s.year;"]}, {"question_id": 956, "answer_sql": ["SELECT DISTINCT D.forename, D.surname FROM drivers D JOIN driverStandings DS ON D.driverId = DS.driverId WHERE D.dob > '1975-01-01' AND DS.position = 2;", "SELECT D.forename, D.surname FROM drivers D JOIN driverStandings DS ON D.driverId = DS.driverId WHERE D.dob > '1975-01-01' AND DS.position = 2;", "SELECT D.forename, D.surname FROM drivers D JOIN constructorStandings CS ON D.driverId = CS.constructorId WHERE D.dob > '1975-01-01' AND CS.position = 2;"]}, {"question_id": 957, "answer_sql": ["SELECT COUNT(DISTINCT T1.driverId) AS ItalianDriversWithoutFinish FROM drivers AS T1 JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.time IS NULL AND T1.nationality = 'Italian';", "SELECT COUNT(DISTINCT driverId) AS numberOfItalianDriversWithoutFinish FROM drivers WHERE driverId NOT IN ( SELECT driverId FROM results WHERE time IS NOT NULL );", "SELECT COUNT(DISTINCT driverId) AS numberOfItalianDriversWithoutFinish FROM drivers WHERE driverId IN ( SELECT driverId FROM results WHERE time IS NULL );", "SELECT COUNT(DISTINCT driverId) AS numberOfItalianDriversWithoutFinish FROM drivers WHERE driverId IN ( SELECT driverId FROM results WHERE time IS NULL ) AND nationality = 'Italy';"]}, {"question_id": 958, "answer_sql": ["SELECT drivers.forename, drivers.surname FROM drivers JOIN lapTimes ON drivers.driverId = lapTimes.driverId ORDER BY CAST(REPLACE(REPLACE(lapTimes.time, ' ', ''), ':', '') AS REAL) ASC LIMIT 1;", "SELECT drivers.forename, drivers.surname FROM drivers JOIN lapTimes ON drivers.driverId = lapTimes.driverId WHERE lapTimes.time = (SELECT MIN(time) FROM lapTimes);"]}, {"question_id": 959, "answer_sql": ["SELECT r.position, r.fastestLap, r.fastestLapTime FROM results r JOIN races ra ON r.raceId = ra.raceId JOIN constructors c ON r.constructorId = c.constructorId WHERE ra.year = 2009 AND c.name = 'McLaren' ORDER BY r.fastestLapTime ASC LIMIT 1;"]}, {"question_id": 960, "answer_sql": ["SELECT AVG(fastestLapSpeed) AS average_fastest_lap_speed FROM results JOIN races ON results.raceId = races.raceId WHERE races.name = 'Spanish Grand Prix' AND races.year = 2009;"]}, {"question_id": 961, "answer_sql": ["SELECT r.name, r.year FROM races r JOIN results res ON r.raceId = res.raceId WHERE res.milliseconds IS NOT NULL ORDER BY res.milliseconds ASC LIMIT 1;", "SELECT races.name, seasons.year FROM races JOIN seasons ON races.year = seasons.year JOIN lapTimes ON races.raceId = lapTimes.raceId WHERE lapTimes.milliseconds IS NOT NULL ORDER BY lapTimes.milliseconds ASC LIMIT 1;", "SELECT r.name, r.year FROM races r JOIN ( SELECT raceId, MIN(milliseconds) AS min_time FROM lapTimes GROUP BY raceId ) lt ON r.raceId = lt.raceId WHERE lt.min_time IS NOT NULL;", "SELECT races.name, seasons.year FROM races JOIN seasons ON races.year = seasons.year WHERE races.date IS NOT NULL ORDER BY races.date LIMIT 1;"]}, {"question_id": 962, "answer_sql": []}, {"question_id": 963, "answer_sql": ["SELECT COUNT(DISTINCT T1.driverId) AS FrenchDriversWithLaptime\nFROM lapTimes AS T1\nJOIN drivers AS T2 ON T1.driverId = T2.driverId\nWHERE T2.surname LIKE 'F%' AND CAST(SUBSTR(T1.time, 1, 5) AS TIME) < '01:00:00'", "SELECT COUNT(DISTINCT T1.driverId) AS FrenchDriversWithLaptime FROM drivers AS T1 JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T2.time < '01:00:00' AND T1.nationality = 'French';"]}, {"question_id": 964, "answer_sql": ["SELECT DISTINCT drivers.driverRef, drivers.forename, drivers.surname FROM drivers WHERE drivers.nationality = 'America';"]}, {"question_id": 965, "answer_sql": ["SELECT raceId FROM races WHERE year = 2009;"]}, {"question_id": 966, "answer_sql": []}, {"question_id": 967, "answer_sql": ["SELECT D.driverRef AS driver_code, COUNT(D.driverRef) AS netherlandic_drivers FROM drivers D WHERE D.dob <= DATE('now', '-3 years') GROUP BY D.driverRef ORDER BY COUNT(D.driverRef) DESC LIMIT 3;", "SELECT D.driverRef AS driver_ref, D.number, COUNT(*) AS netherlandic_drivers FROM drivers D WHERE D.nationality = 'Netherlands' ORDER BY D.number ASC LIMIT 3;", "SELECT drivers.driverId, drivers.driverRef, drivers.forename, drivers.surname, drivers.dob FROM drivers WHERE drivers.dob = ( SELECT MIN(dob) FROM drivers ) ORDER BY drivers.dob ASC LIMIT 3;", "SELECT drivers.driverRef, drivers.number, drivers.forename, drivers.surname, drivers.dob FROM drivers WHERE drivers.dob = ( SELECT MIN(dob) FROM drivers ) ORDER BY drivers.dob ASC LIMIT 3;", "SELECT drivers.driverRef AS driverRef, drivers.number AS number, drivers.forename AS forename, drivers.surname AS surname, drivers.nationality AS nationality FROM drivers WHERE drivers.nationality = 'Netherlands' ORDER BY drivers.dob ASC LIMIT 3;"]}, {"question_id": 968, "answer_sql": ["SELECT driverRef FROM drivers WHERE forename = 'Robert' AND surname = 'Kubica';"]}, {"question_id": 969, "answer_sql": ["SELECT COUNT(driverId) AS numberOfAustralianDrivers FROM drivers WHERE nationality = 'Australian' AND strftime('%Y', dob) = '1980'"]}, {"question_id": 970, "answer_sql": ["SELECT d.driverRef, d.forename, d.surname, MIN(lt.time) AS earliest_lap_time \nFROM drivers d \nJOIN results r ON d.driverId = r.driverId \nJOIN lapTimes lt ON r.driverId = lt.driverId \nWHERE d.nationality = 'German' AND d.dob BETWEEN '1980-01-01' AND '1990-12-31' \nGROUP BY d.driverRef, d.forename, d.surname \nORDER BY earliest_lap_time ASC \nLIMIT 3;", "SELECT d.forename, d.surname, r.time, l.time AS earliest_lap_time FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN lapTimes l ON r.driverId = l.driverId WHERE d.dob BETWEEN '1980-01-01' AND '1990-12-31' ORDER BY d.dob, l.milliseconds ASC LIMIT 3;", "SELECT d.driverRef, d.forename, d.surname, MIN(l.time) AS earliest_lap_time \nFROM drivers d \nJOIN lapTimes l ON d.driverId = l.driverId \nWHERE d.nationality = 'Germany' AND d.dob >= '1980-01-01' AND d.dob <= '1990-12-31' \nGROUP BY d.driverRef, d.forename, d.surname \nORDER BY earliest_lap_time ASC \nLIMIT 3;"]}, {"question_id": 971, "answer_sql": ["SELECT driverRef FROM drivers WHERE nationality = 'German' ORDER BY dob ASC LIMIT 1;"]}, {"question_id": 972, "answer_sql": []}, {"question_id": 973, "answer_sql": ["SELECT drivers.surname, drivers.forename, MAX(lapTimes.time) AS latest_time FROM drivers JOIN lapTimes ON drivers.driverId = lapTimes.driverId WHERE drivers.dob < 1982 GROUP BY drivers.driverId ORDER BY latest_time DESC LIMIT 10;"]}, {"question_id": 974, "answer_sql": ["SELECT DISTINCT T1.year FROM seasons AS T1 JOIN results AS T2 ON T1.year = T2.raceId WHERE T2.fastestLapTime IS NOT NULL ORDER BY T1.year ASC LIMIT 1;", "SELECT year FROM races WHERE circuitId = ( SELECT circuitId FROM results ORDER BY fastestLapTime ASC LIMIT 1 )"]}, {"question_id": 975, "answer_sql": ["SELECT s.year FROM seasons s JOIN races r ON s.year = r.year JOIN lapTimes lt ON r.raceId = lt.raceId WHERE lt.time = (SELECT MIN(time) FROM lapTimes) ORDER BY s.year ASC LIMIT 1;", "SELECT year, MAX(time) AS max_time FROM races WHERE time IS NOT NULL GROUP BY year ORDER BY MAX(time) ASC LIMIT 1;", "SELECT year FROM races WHERE circuitId = (SELECT circuitId FROM drivers WHERE driverId = (SELECT driverId FROM drivers WHERE name = 'Max')) ORDER BY CAST(REPLACE(REPLACE(time, ' ', ''), ':', '') AS REAL) LIMIT 1;"]}, {"question_id": 976, "answer_sql": ["SELECT d.driverId FROM drivers d JOIN lapTimes lt ON d.driverId = lt.driverId WHERE lt.lap = 1 ORDER BY lt.time ASC LIMIT 5;", "SELECT d.driverId FROM drivers d JOIN lapTimes lt ON d.driverId = lt.driverId WHERE lt.position = 1 ORDER BY lt.time ASC LIMIT 5;", "SELECT D.driverId FROM drivers D JOIN ( SELECT driverId, MIN(time) AS minTime FROM lapTimes GROUP BY driverId ) T ON D.driverId = T.driverId ORDER BY T.minTime ASC, D.driverId ASC LIMIT 5;", "SELECT d.driverId FROM drivers d JOIN lapTimes lt ON d.driverId = lt.driverId JOIN races r ON lt.raceId = r.raceId WHERE r.round = 1 ORDER BY lt.time ASC LIMIT 5;", "SELECT d.driverId, MIN(f.time) AS fastestTime FROM drivers d JOIN lapTimes f ON d.driverId = f.driverId JOIN races r ON f.raceId = r.raceId WHERE r.round = 1 GROUP BY d.driverId ORDER BY fastestTime DESC LIMIT 5"]}, {"question_id": 977, "answer_sql": ["SELECT COUNT(driverId) AS disqualified_finishers FROM results WHERE raceId BETWEEN 50 AND 100 AND statusId = 2 AND time IS NULL;", "SELECT COUNT(DISTINCT driverId) AS disqualified_finishers FROM results WHERE raceId BETWEEN 50 AND 100 AND statusId = 2 AND position IS NULL;", "SELECT COUNT(DISTINCT driverId) AS disqualified_finishers FROM results WHERE raceId BETWEEN 50 AND 100 AND statusId = 2 AND time IS NULL;", "SELECT COUNT(driverId) AS disqualified_finishers FROM races JOIN results ON races.raceId = results.raceId WHERE races.year BETWEEN 2010 AND 2011 AND results.statusId = 2 AND results.time IS NULL AND races.raceId BETWEEN 50 AND 100;", "SELECT COUNT(driverId) AS disqualified_finishers FROM races JOIN results ON races.raceId = results.raceId WHERE races.year BETWEEN 2010 AND 2011 AND results.statusId = 2 AND results.time IS NULL;"]}, {"question_id": 978, "answer_sql": []}, {"question_id": 979, "answer_sql": ["SELECT T1.number FROM results AS T1 JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T1.time IS NOT NULL GROUP BY T1.number ORDER BY COUNT(T1.number) DESC LIMIT 1;", "SELECT T1.number FROM results AS T1 JOIN races AS T2 ON T1.raceId = T2.raceId GROUP BY T1.number ORDER BY COUNT(T1.raceId) DESC LIMIT 1;", "SELECT raceId, number FROM results GROUP BY raceId, number ORDER BY COUNT(*) DESC LIMIT 1;", "SELECT raceId, positionOrder FROM results WHERE time IS NOT NULL GROUP BY raceId, positionOrder ORDER BY COUNT(*) DESC LIMIT 1;"]}, {"question_id": 980, "answer_sql": ["SELECT drivers.driverRef AS reference_name, drivers.nationality, drivers.dob FROM drivers JOIN qualifying ON drivers.driverId = qualifying.driverId WHERE qualifying.raceId = 23 AND qualifying.q2 IS NOT NULL;"]}, {"question_id": 981, "answer_sql": ["SELECT r.year, r.date, r.time FROM races r JOIN qualifying q ON r.raceId = q.raceId WHERE q.position = ( SELECT MIN(position) FROM qualifying ) ORDER BY r.year ASC, r.date ASC, r.time ASC LIMIT 1;", "SELECT r.year AS year, r.name AS race_name, r.date AS race_date, r.time AS race_time FROM races r JOIN qualifying q ON r.raceId = q.raceId WHERE q.position = (SELECT MIN(position) FROM qualifying WHERE driverId = (SELECT driverId FROM drivers WHERE name = 'Max')) ORDER BY r.year ASC, r.name ASC LIMIT 1;"]}, {"question_id": 982, "answer_sql": ["SELECT COUNT(DISTINCT T1.driverId) AS disqualified_drivers FROM drivers AS T1 JOIN results AS T2 ON T1.driverId = T2.driverId JOIN status AS T3 ON T2.statusId = T3.statusId WHERE T3.status = '2' AND T1.nationality = 'American';"]}, {"question_id": 983, "answer_sql": ["SELECT c.constructorRef, c.url FROM constructors c JOIN constructorResults cr ON c.constructorId = cr.constructorId WHERE c.nationality = 'Italian' AND cr.points = (SELECT MAX(points) FROM constructorResults) ORDER BY cr.points DESC LIMIT 1;", "SELECT c.url, c.name FROM constructors c JOIN constructorStandings cs ON c.constructorId = cs.constructorId JOIN results r ON r.constructorId = c.constructorId WHERE c.nationality = 'Italian' ORDER BY cs.points DESC LIMIT 1;", "SELECT c.url, c.nationality, cr.points FROM constructors c JOIN constructorResults cr ON c.constructorId = cr.constructorId WHERE c.nationality = 'Italian' ORDER BY cr.points DESC LIMIT 1;", "SELECT c.constructorRef, c.url FROM constructors c JOIN constructorResults cr ON c.constructorId = cr.constructorId WHERE c.nationality = 'Italian' ORDER BY cr.points DESC LIMIT 1;", "SELECT c.url AS introduction_website, c.name AS constructor_name FROM constructors c JOIN constructorResults cr ON c.constructorId = cr.constructorId WHERE c.nationality = 'Italian' AND cr.points = (SELECT MAX(points) FROM constructorResults WHERE constructorId = c.constructorId);"]}, {"question_id": 984, "answer_sql": ["SELECT constructors.url FROM constructors JOIN constructorStandings ON constructors.constructorId = constructorStandings.constructorId GROUP BY constructors.url ORDER BY SUM(constructorStandings.wins) DESC LIMIT 1;", "SELECT c.url FROM constructors c JOIN constructorStandings cs ON c.constructorId = cs.constructorId WHERE cs.wins = (SELECT MAX(wins) FROM constructorStandings)"]}, {"question_id": 985, "answer_sql": ["SELECT drivers.forename, drivers.surname, races.time, lapTimes.lap, lapTimes.time, lapTimes.milliseconds FROM drivers JOIN results ON drivers.driverId = results.driverId JOIN races ON results.raceId = races.raceId JOIN lapTimes ON results.driverId = lapTimes.driverId AND results.raceId = lapTimes.raceId WHERE races.name = 'French Grand Prix' ORDER BY lapTimes.time ASC LIMIT 1;", "SELECT d.surname, d.forename, l.time FROM drivers d JOIN lapTimes l ON d.driverId = l.driverId JOIN races r ON l.raceId = r.raceId WHERE r.name = 'French Grand Prix' ORDER BY l.time ASC LIMIT 1;", "SELECT drivers.surname, drivers.forename, lapTimes.time FROM drivers JOIN lapTimes ON drivers.driverId = lapTimes.driverId JOIN races ON lapTimes.raceId = races.raceId WHERE races.name = 'French Grand Prix' ORDER BY lapTimes.lap, lapTimes.time LIMIT 1;", "SELECT drivers.forename, drivers.surname, results.time FROM drivers JOIN results ON drivers.driverId = results.driverId JOIN races ON results.raceId = races.raceId WHERE races.name = 'French Grand Prix' ORDER BY results.time ASC LIMIT 1;", "SELECT drivers.forename, drivers.surname, results.fastestLapTime FROM drivers JOIN results ON drivers.driverId = results.driverId JOIN races ON results.raceId = races.raceId WHERE races.name = 'French Grand Prix' ORDER BY results.fastestLapTime ASC LIMIT 1;"]}, {"question_id": 986, "answer_sql": ["SELECT races.time, lapTimes.milliseconds FROM races JOIN lapTimes ON races.raceId = lapTimes.raceId WHERE lapTimes.position = 1 AND lapTimes.time = (SELECT MIN(time) FROM lapTimes);", "SELECT r.name AS race_name, MIN(l.time) AS fastest_lap_time_milliseconds FROM races r JOIN results res ON r.raceId = res.raceId JOIN lapTimes l ON res.driverId = l.driverId AND res.raceId = l.raceId WHERE res.position = 1 AND l.position = 1 GROUP BY r.name ORDER BY r.name LIMIT 1;", "SELECT r.name AS race_name, l.time AS fastest_lap_time_milliseconds FROM races r JOIN lapTimes l ON r.raceId = l.raceId WHERE l.position = 1 AND l.time = (SELECT MIN(time) FROM lapTimes WHERE raceId = r.raceId) ORDER BY r.year, r.round;", "SELECT raceId, time, milliseconds FROM lapTimes WHERE position = 1 ORDER BY time DESC LIMIT 1;", "SELECT races.name, MIN(lapTimes.time) AS fastest_lap_time_milliseconds FROM races JOIN lapTimes ON races.raceId = lapTimes.raceId WHERE lapTimes.position = 1 GROUP BY races.name ORDER BY races.name;"]}, {"question_id": 987, "answer_sql": ["SELECT AVG(results.fastestLapTime) AS average_fastest_lap_time FROM results JOIN races ON results.raceId = races.raceId JOIN drivers ON results.driverId = drivers.driverId WHERE races.year = 2006 AND races.name = 'United States Grand Prix' GROUP BY results.fastestLapTime ORDER BY AVG(results.fastestLapTime) DESC LIMIT 10;", "SELECT AVG(T1.fastestLapTime) AS averageFastestLapTime FROM results AS T1 JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = '2006 United States Grand Prix' AND T1.position <= 10 ORDER BY T1.position ASC LIMIT 1;", "SELECT AVG(results.fastestLapTime) AS average_fastest_lap_time FROM results JOIN drivers ON results.driverId = drivers.driverId JOIN races ON results.raceId = races.raceId WHERE races.name = '2006 United States Grand Prix' AND results.position <= 10 GROUP BY results.raceId, results.driverId ORDER BY AVG(results.fastestLapTime) DESC LIMIT 1;"]}, {"question_id": 988, "answer_sql": ["SELECT d.forename, d.surname, AVG(p.duration) AS avg_pitstop_duration FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN pitStops p ON r.driverId = p.driverId WHERE d.nationality = 'German' AND d.dob BETWEEN '1980-01-01' AND '1985-12-31' GROUP BY d.driverId ORDER BY avg_pitstop_duration ASC LIMIT 5;"]}, {"question_id": 989, "answer_sql": ["SELECT d.surname AS driver_surname, d.forename AS driver_forename, r.name AS race_name, rs.position AS position, rs.time AS finish_time FROM drivers d JOIN results rs ON d.driverId = rs.driverId JOIN races r ON rs.raceId = r.raceId WHERE r.name = 'Canadian Grand Prix' AND r.year = 2008 ORDER BY rs.position ASC LIMIT 1;", "SELECT r.name AS race_name, d.surname AS driver_surname, d.forename AS driver_forename, rs.positionText AS finish_time FROM races r JOIN results rs ON r.raceId = rs.raceId JOIN drivers d ON rs.driverId = d.driverId WHERE r.year = 2008 AND r.name = 'Canadian Grand Prix' AND rs.position = 1;", "SELECT results.driverId, results.position, results.time FROM results JOIN drivers ON results.driverId = drivers.driverId WHERE results.raceId = ( SELECT raceId FROM races WHERE year = 2008 AND name = 'Canadian Grand Prix' ) ORDER BY results.position ASC LIMIT 1;", "SELECT d.surname || ' ' || d.forename AS driver_name, r.name AS race_name, r.date AS race_date, rs.position AS position, rs.time AS finish_time FROM drivers d JOIN results rs ON d.driverId = rs.driverId JOIN races r ON rs.raceId = r.raceId WHERE r.name = 'Canadian Grand Prix' AND r.year = 2008 ORDER BY rs.position ASC LIMIT 1;", "SELECT drivers.forename, drivers.surname, results.time FROM drivers JOIN results ON drivers.driverId = results.driverId JOIN races ON results.raceId = races.raceId WHERE races.date = '2008-09-01' AND races.name = 'Canadian Grand Prix' AND results.position = 1 AND results.statusId = (SELECT statusId FROM status WHERE status = 'Champion')"]}, {"question_id": 990, "answer_sql": ["SELECT c.constructorRef AS constructor_reference_name, c.url AS website FROM races r JOIN constructorStandings cs ON r.raceId = cs.raceId JOIN constructors c ON cs.constructorId = c.constructorId WHERE r.name = 'Singapore Grand Prix' AND r.year = 2009 AND cs.position = 1;", "SELECT c.constructorRef AS constructor_reference_name, r.url AS website FROM races r JOIN constructorStandings cs ON r.raceId = cs.raceId JOIN constructors c ON cs.constructorId = c.constructorId WHERE r.name = 'Singapore Grand Prix' AND r.year = 2009 AND cs.position = 1;"]}, {"question_id": 991, "answer_sql": ["SELECT CONCAT(forename, ' ', surname) AS full_name, dob FROM drivers WHERE nationality = 'Austrian' AND dob BETWEEN '1981-01-01' AND '1991-12-31';", "SELECT drivers.forename, drivers.surname, drivers.dob FROM drivers WHERE drivers.nationality = 'Austrian' AND drivers.dob BETWEEN '1981-01-01' AND '1991-12-31';"]}, {"question_id": 992, "answer_sql": ["SELECT drivers.forename, drivers.surname, drivers.dob, drivers.url FROM drivers WHERE drivers.nationality = 'German' AND drivers.dob BETWEEN '1971-01-01' AND '1985-12-31' ORDER BY drivers.dob DESC;", "SELECT drivers.forename, drivers.surname, drivers.url, drivers.dob \nFROM drivers \nWHERE drivers.nationality = 'German' \nAND drivers.dob BETWEEN '1971-01-01' AND '1985-12-31' \nORDER BY drivers.dob DESC", "SELECT forename, surname, dob FROM drivers WHERE nationality = 'German' AND dob BETWEEN '1971-01-01' AND '1985-12-31' ORDER BY dob DESC;"]}, {"question_id": 993, "answer_sql": ["SELECT location, country, lat, lng FROM circuits WHERE circuitRef = 'Hungaroring';"]}, {"question_id": 994, "answer_sql": ["SELECT constructors.name AS name, constructors.nationality AS nationality, SUM(constructorResults.points) AS total_points FROM constructors JOIN constructorResults ON constructors.constructorId = constructorResults.constructorId JOIN races ON constructorResults.raceId = races.raceId WHERE races.name = 'Monaco Grand Prix' AND races.year BETWEEN 1980 AND 2010 GROUP BY constructors.name, constructors.nationality ORDER BY total_points DESC LIMIT 1;", "SELECT constructors.constructorId AS constructor_id, constructors.name AS constructor_name, constructors.nationality AS constructor_nationality, SUM(constructorResults.points) AS total_points FROM races JOIN circuits ON circuits.circuitId = races.circuitId JOIN constructorResults ON races.raceId = constructorResults.raceId JOIN constructors ON constructors.constructorId = constructorResults.constructorId WHERE races.name = 'Monaco Grand Prix' AND races.year BETWEEN 1980 AND 2010 GROUP BY constructors.constructorId ORDER BY total_points DESC LIMIT 1;", "SELECT constructors.constructorId AS score, constructors.name AS name, constructors.nationality AS nationality FROM constructors JOIN constructorResults ON constructors.constructorId = constructorResults.constructorId JOIN races ON constructorResults.raceId = races.raceId WHERE races.name = 'Monaco Grand Prix' AND races.year BETWEEN 1980 AND 2010 ORDER BY constructorResults.points DESC LIMIT 1;"]}, {"question_id": 995, "answer_sql": ["SELECT AVG(results.points) AS average_score \nFROM results \nJOIN drivers ON results.driverId = drivers.driverId \nJOIN races ON results.raceId = races.raceId \nWHERE drivers.surname = 'Hamilton' AND races.name LIKE '%Turkish Grand Prix%'", "SELECT AVG(points) AS average_score FROM results JOIN drivers ON results.driverId = drivers.driverId WHERE drivers.surname = 'Hamilton' AND drivers.nationality = 'Turkish' AND results.raceId IN ( SELECT raceId FROM races WHERE name = 'Turkish Grand Prix' );"]}, {"question_id": 996, "answer_sql": ["SELECT AVG(races.year) AS annual_average FROM races WHERE races.date BETWEEN '2000-01-01' AND '2010-12-31' GROUP BY races.year", "SELECT AVG(races.round) AS annual_average_races FROM races WHERE races.date >= '2000-01-01' AND races.date <= '2010-12-31' GROUP BY races.year", "SELECT AVG(races.year) AS annual_average_races FROM races WHERE races.date >= '2000-01-01' AND races.date <= '2010-12-31';", "SELECT AVG(races.round) AS annual_average_races FROM races WHERE races.date BETWEEN '2000-01-01' AND '2010-12-31';"]}, {"question_id": 997, "answer_sql": ["SELECT MAX(nationality) AS citizenship FROM drivers;"]}, {"question_id": 998, "answer_sql": ["SELECT COUNT(DISTINCT T1.driverId) AS victories FROM drivers AS T1 JOIN driverStandings AS T2 ON T1.driverId = T2.driverId WHERE T2.position = 91", "SELECT COUNT(DISTINCT T1.driverId) AS victories, T2.driverId FROM driverStandings AS T1 JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.position = 91 GROUP BY T1.driverId ORDER BY victories DESC;", "SELECT COUNT(DISTINCT T1.driverId) AS victories, T2.driverId FROM driverStandings AS T1 JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.position = 91 GROUP BY T1.driverId", "SELECT COUNT(DISTINCT T1.driverId) AS victories FROM drivers AS T1 JOIN driverStandings AS T2 ON T1.driverId = T2.driverId WHERE T2.position = 91 AND T2.wins > 0;"]}, {"question_id": 999, "answer_sql": ["SELECT T1.name FROM races AS T1 JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T2.fastestLapTime = (SELECT MIN(T3.fastestLapTime) FROM results AS T3 WHERE T3.raceId = T1.raceId)"]}, {"question_id": 1000, "answer_sql": ["SELECT circuits.name, circuits.location FROM circuits JOIN races ON circuits.circuitId = races.circuitId WHERE races.date = (SELECT MAX(date) FROM races) ORDER BY circuits.location LIMIT 1;", "SELECT circuits.location + ' (' + circuits.country + ')' AS full_location FROM circuits WHERE circuits.circuitId = ( SELECT races.circuitId FROM races ORDER BY races.date DESC LIMIT 1 );", "SELECT c.location, c.country FROM circuits c WHERE c.circuitId = ( SELECT r.circuitId FROM races r ORDER BY r.date DESC LIMIT 1 );"]}, {"question_id": 1001, "answer_sql": ["SELECT drivers.forename, drivers.surname FROM drivers JOIN qualifying ON drivers.driverId = qualifying.driverId WHERE qualifying.q3 = (SELECT MIN(q3) FROM qualifying WHERE raceId = (SELECT raceId FROM races WHERE year = 2008 AND circuitId = (SELECT circuitId FROM circuits WHERE name = 'Marina Bay Street Circuit')))", "SELECT T1.forename, T1.surname \nFROM drivers AS T1 \nJOIN qualifying AS T2 ON T1.driverId = T2.driverId \nWHERE T2.position = (SELECT MIN(q3) FROM qualifying WHERE raceId = (SELECT raceId FROM races WHERE year = 2008 AND circuitId = (SELECT circuitId FROM circuits WHERE name = 'Marina Bay Street Circuit'))) AND T1.driverId = T2.driverId;"]}, {"question_id": 1002, "answer_sql": []}, {"question_id": 1003, "answer_sql": ["SELECT COUNT(T1.number) AS number_of_accidents \nFROM races AS T2 \nJOIN results AS T1 ON T1.raceId = T2.raceId \nWHERE T2.name = 'Canadian Grand Prix' AND T1.statusId = 3", "SELECT COUNT(DISTINCT T1.driverId) AS accidentCount \nFROM races AS T2 \nJOIN results AS T1 ON T2.raceId = T1.raceId \nWHERE T2.name = 'Canadian Grand Prix' AND T1.statusId = 3"]}, {"question_id": 1004, "answer_sql": ["SELECT T1.forename, T1.surname, COUNT(T2.resultId) AS wins FROM drivers AS T1 JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T1.dob = (SELECT MIN(dob) FROM drivers) GROUP BY T1.forename, T1.surname ORDER BY wins DESC;"]}, {"question_id": 1005, "answer_sql": ["SELECT MAX(T2.time) AS longest_time_spent_at_pitstop FROM drivers AS T1 JOIN pitStops AS T2 ON T1.driverId = T2.driverId;", "SELECT MAX(duration) AS longest_time_spent_at_pitstop FROM pitStops"]}, {"question_id": 1006, "answer_sql": ["SELECT MAX(time) AS fastest_time FROM lapTimes;", "SELECT MAX(lapTimes.milliseconds) AS fastest_time FROM lapTimes"]}, {"question_id": 1007, "answer_sql": ["SELECT MAX(T2.time) AS longest_time \nFROM results AS T1 \nJOIN pitStops AS T2 ON T1.driverId = T2.driverId \nWHERE T1.driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton')", "SELECT MAX(lapTimes.time) AS longest_time FROM lapTimes JOIN drivers ON lapTimes.driverId = drivers.driverId WHERE drivers.driverRef = 'Lewis Hamilton';"]}, {"question_id": 1008, "answer_sql": ["SELECT T1.lap FROM lapTimes AS T1 JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.surname = 'Hamilton' AND T2.forename = 'Lewis' AND T1.raceId = (SELECT raceId FROM races WHERE name = '2011 Australian Grand Prix')"]}, {"question_id": 1009, "answer_sql": ["SELECT pitStops.time, pitStops.duration FROM pitStops JOIN drivers ON pitStops.driverId = drivers.driverId JOIN races ON races.raceId = pitStops.raceId WHERE races.year = 2011 AND races.name = 'Australian Grand Prix';", "SELECT r.time, p.stop, p.duration FROM pitStops p JOIN results r ON p.driverId = r.driverId WHERE r.raceId = (SELECT raceId FROM races WHERE year = 2011 AND round = 1 AND name = 'Australian Grand Prix') ORDER BY r.time, p.stop;", "SELECT pitStops.time AS pitStopTime, drivers.driverId AS driverId FROM pitStops JOIN drivers ON pitStops.driverId = drivers.driverId WHERE pitStops.raceId = (SELECT raceId FROM races WHERE raceId = (SELECT raceId FROM races WHERE year = 2011 AND round = 1 AND circuitId = (SELECT circuitId FROM circuits WHERE name = 'Australian Grand Prix'))) ORDER BY pitStops.time;", "SELECT pitStops.time AS 'Time at Pit Stop', drivers.forename, drivers.surname \nFROM pitStops \nJOIN drivers ON pitStops.driverId = drivers.driverId \nWHERE pitStops.raceId = (SELECT raceId FROM races WHERE year = 2011 AND name = 'Australian Grand Prix') \nAND pitStops.stop = 1"]}, {"question_id": 1010, "answer_sql": ["SELECT T1.time, T1.lap FROM lapTimes AS T1 JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' ORDER BY T1.time ASC LIMIT 1;", "SELECT raceId, time, milliseconds FROM lapTimes WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton') ORDER BY milliseconds ASC LIMIT 1;", "SELECT r.name AS race_name, l.time AS lap_record \nFROM races r \nJOIN lapTimes l ON r.raceId = l.raceId \nJOIN drivers d ON l.driverId = d.driverId \nWHERE d.forename = 'Lewis' AND d.surname = 'Hamilton' AND l.position = 1 \nORDER BY l.time ASC \nLIMIT 1;", "SELECT r.name AS race_name, l.time AS lap_record FROM races r JOIN lapTimes l ON r.raceId = l.raceId JOIN drivers d ON l.driverId = d.driverId WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton' ORDER BY l.time ASC LIMIT 1;", "SELECT T1.time FROM lapTimes AS T1 JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' ORDER BY T1.milliseconds ASC LIMIT 1;"]}, {"question_id": 1011, "answer_sql": ["SELECT d.forename, d.surname FROM drivers d JOIN lapTimes lt ON d.driverId = lt.driverId WHERE lt.time = (SELECT MIN(time) FROM lapTimes) ORDER BY lt.time ASC LIMIT 1;", "SELECT D.surname, D.forename FROM drivers D JOIN lapTimes LT ON D.driverId = LT.driverId WHERE LT.time = (SELECT MIN(time) FROM lapTimes) ORDER BY LT.time ASC LIMIT 1;"]}, {"question_id": 1012, "answer_sql": ["SELECT circuits.name, MIN(lapTimes.time) AS fastest_lap_time FROM circuits JOIN races ON circuits.circuitId = races.circuitId JOIN lapTimes ON races.raceId = lapTimes.raceId WHERE lapTimes.driverId = (SELECT driverId FROM drivers WHERE driverRef = 'LEC') GROUP BY circuits.name ORDER BY fastest_lap_time LIMIT 1;"]}, {"question_id": 1013, "answer_sql": ["SELECT T1.time FROM races AS T1 JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Austrian Grand Prix Circuit' ORDER BY T1.time ASC LIMIT 1;", "SELECT MAX(lap) AS fastest_lap FROM lapTimes WHERE raceId = ( SELECT raceId FROM races WHERE name = 'Austrian Grand Prix Circuit' );"]}, {"question_id": 1014, "answer_sql": ["SELECT l.raceId, l.driverId, l.lap, l.position, l.time, l.milliseconds \nFROM lapTimes l \nJOIN races r ON l.raceId = r.raceId \nJOIN circuits c ON r.circuitId = c.circuitId \nWHERE c.country = 'Italy' \nORDER BY l.time ASC \nLIMIT 10;", "SELECT lapTimes.raceId, lapTimes.driverId, lapTimes.lap, lapTimes.position, lapTimes.time, lapTimes.milliseconds FROM lapTimes JOIN races ON lapTimes.raceId = races.raceId JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.location LIKE '%Italy%'"]}, {"question_id": 1015, "answer_sql": ["SELECT r.name \nFROM races r \nJOIN lapTimes lt ON r.raceId = lt.raceId \nWHERE lt.position = (SELECT MAX(position) FROM lapTimes WHERE circuitId = (SELECT circuitId FROM circuits WHERE name = 'Austrian Grand Prix Circuit')) AND r.name = 'Austrian Grand Prix Circuit'"]}, {"question_id": 1016, "answer_sql": ["SELECT pitStops.duration FROM pitStops JOIN drivers ON pitStops.driverId = drivers.driverId JOIN races ON races.raceId = pitStops.raceId JOIN circuits ON circuits.circuitId = races.circuitId WHERE circuits.name = 'Austrian Grand Prix Circuit' ORDER BY pitStops.duration DESC LIMIT 1;"]}, {"question_id": 1017, "answer_sql": ["SELECT circuits.location, circuits.lat, circuits.lng FROM circuits JOIN races ON circuits.circuitId = races.circuitId JOIN lapTimes ON races.raceId = lapTimes.raceId AND circuits.circuitId = lapTimes.driverId WHERE lapTimes.time = '1:29.488'", "SELECT circuits.location FROM circuits JOIN races ON circuits.circuitId = races.circuitId JOIN lapTimes ON races.raceId = lapTimes.raceId AND circuits.circuitId = lapTimes.driverId WHERE lapTimes.time = '1:29.488'", "SELECT circuits.location, circuits.lat, circuits.lng FROM circuits JOIN races ON circuits.circuitId = races.circuitId JOIN lapTimes ON races.raceId = lapTimes.raceId WHERE lapTimes.time = '1:29.488';", "SELECT circuits.location, circuits.lat, circuits.lng FROM circuits WHERE circuits.circuitId IN ( SELECT raceId FROM races WHERE raceId IN ( SELECT raceId FROM lapTimes ORDER BY milliseconds ASC LIMIT 1 ) )"]}, {"question_id": 1018, "answer_sql": ["SELECT AVG(lapTimes.milliseconds) AS average_time FROM lapTimes JOIN drivers ON lapTimes.driverId = drivers.driverId WHERE drivers.driverRef = 'Lewis Hamilton';"]}, {"question_id": 1019, "answer_sql": ["SELECT AVG(lapTimes.milliseconds) AS average_lap_time FROM lapTimes JOIN races ON lapTimes.raceId = races.raceId JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.country = 'Italy';", "SELECT AVG(lapTimes.milliseconds) AS average_lap_time FROM lapTimes JOIN races ON lapTimes.raceId = races.raceId JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.location LIKE '%Italy%'"]}, {"question_id": 1020, "answer_sql": ["SELECT player_api_id, overall_rating FROM Player_Attributes ORDER BY overall_rating DESC LIMIT 1;", "SELECT player_api_id FROM Player_Attributes WHERE overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes)"]}, {"question_id": 1021, "answer_sql": ["SELECT MAX(height), player_name FROM Player ORDER BY height DESC LIMIT 1;"]}, {"question_id": 1022, "answer_sql": ["SELECT preferred_foot FROM Player_Attributes WHERE potential = (SELECT MIN(potential) FROM Player_Attributes) ORDER BY preferred_foot ASC LIMIT 1;"]}, {"question_id": 1023, "answer_sql": ["SELECT COUNT(T1.player_api_id) AS attack_players FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.overall_rating BETWEEN 60 AND 65 AND T1.defensive_work_rate = 'low';", "SELECT COUNT(T1.player_api_id) AS player_count FROM Player_Attributes AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.overall_rating BETWEEN 60 AND 65 AND T1.defensive_work_rate = 'low' AND T2.defensive_work_rate = 'low';", "SELECT COUNT(T1.player_api_id) AS count FROM Player_Attributes AS T1 JOIN Team AS T2 ON T1.player_api_id = T2.team_api_id WHERE T1.overall_rating BETWEEN 60 AND 65 AND T1.defensive_work_rate = 'low'"]}, {"question_id": 1024, "answer_sql": ["SELECT `Player_Attributes`.id, `Player_Attributes`.player_api_id FROM `Player_Attributes` WHERE `Player_Attributes`.crossing = ( SELECT MAX(`Player_Attributes`.crossing) FROM `Player_Attributes` ) ORDER BY `Player_Attributes`.crossing DESC LIMIT 5;", "SELECT player_api_id FROM Player_Attributes ORDER BY crossing DESC LIMIT 5;", "SELECT MAX(Player_Attributes.id), Player_Attributes.player_api_id FROM Player_Attributes JOIN Match ON Player_Attributes.player_api_id = Match.home_player_X1 GROUP BY Player_Attributes.player_api_id ORDER BY MAX(Player_Attributes.crossing) DESC LIMIT 5;"]}, {"question_id": 1025, "answer_sql": ["SELECT L.name, SUM(M.home_team_goal + M.away_team_goal) AS total_goals FROM League L JOIN Match M ON L.id = M.league_id WHERE M.season = '2015/2016' GROUP BY L.name ORDER BY total_goals DESC LIMIT 1;", "SELECT L.name AS league_name FROM League L JOIN Match M ON L.id = M.league_id WHERE M.season = '2015/2016' GROUP BY L.id, L.name ORDER BY SUM(M.home_team_goal + M.away_team_goal) DESC LIMIT 1;"]}, {"question_id": 1026, "answer_sql": ["SELECT home_team_api_id, COUNT(*) AS lost_matches FROM Match WHERE season = '2015/2016' AND home_team_goal < away_team_goal GROUP BY home_team_api_id ORDER BY lost_matches ASC LIMIT 1;", "SELECT T2.team_long_name AS home_team_name FROM Match AS T1 JOIN Team AS T2 ON T1.home_team_api_id = T2.team_api_id WHERE T1.season = '2015/2016' GROUP BY T2.team_long_name ORDER BY COUNT(T1.home_team_goal) ASC LIMIT 1;", "SELECT home_team_api_id AS team_api_id, COUNT(*) AS match_count FROM Match WHERE season = '2015/2016' GROUP BY home_team_api_id ORDER BY match_count ASC LIMIT 1;", "SELECT T1.team_long_name FROM Team AS T1 JOIN Match AS M ON T1.team_api_id = M.home_team_api_id WHERE M.season = '2015/2016' GROUP BY T1.team_long_name ORDER BY COUNT(CASE WHEN M.home_team_goal < M.away_team_goal THEN 1 ELSE NULL END) ASC LIMIT 1;", "SELECT home_team_api_id AS home_team_api_id, home_team_api_id AS home_team_name FROM Match WHERE season = '2015/2016' GROUP BY home_team_api_id ORDER BY COUNT(*) ASC LIMIT 1;"]}, {"question_id": 1027, "answer_sql": ["SELECT player_name, SUM(penalties) AS total_penalties FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id GROUP BY player_name ORDER BY total_penalties DESC LIMIT 10;"]}, {"question_id": 1028, "answer_sql": ["SELECT T2.team_long_name AS away_team_name, SUM(CASE WHEN T1.away_team_goal > T1.home_team_goal THEN 1 ELSE 0 END) AS win_count FROM Match T1 JOIN League T3 ON T1.league_id = T3.id JOIN Team T2 ON T1.away_team_api_id = T2.team_api_id WHERE T3.name = 'Scotland Premier League' AND T1.season = '2009/2010' GROUP BY T2.team_long_name ORDER BY win_count DESC LIMIT 1;", "SELECT T2.team_long_name AS away_team_name FROM Match AS T1 JOIN League AS T3 ON T1.league_id = T3.id JOIN Team AS T2 ON T1.away_team_api_id = T2.team_api_id WHERE T3.name = 'Scotland Premier League' AND T1.season = '2009/2010' GROUP BY T2.team_long_name ORDER BY COUNT(CASE WHEN T1.away_team_goal > T1.home_team_goal THEN 1 ELSE NULL END) DESC LIMIT 1;", "SELECT T2.team_long_name FROM League AS T1 JOIN Team AS T3 ON T1.id = T3.team_fifa_api_id JOIN Team_Attributes AS T4 ON T3.team_fifa_api_id = T4.team_fifa_api_id JOIN Match AS T5 ON T1.id = T5.league_id JOIN Team AS T2 ON T5.away_team_api_id = T2.team_fifa_api_id WHERE T1.name = 'Scotland Premier League' AND T5.season = '2009/2010' GROUP BY T2.team_long_name ORDER BY COUNT(CASE WHEN T5.away_team_goal > T5.home_team_goal THEN 1 ELSE NULL END) DESC LIMIT 1;", "SELECT T2.team_long_name FROM Match AS T1 JOIN Team AS T2 ON T1.away_team_api_id = T2.team_api_id JOIN League AS L ON T1.league_id = L.id WHERE L.name = 'Scotland Premier League' AND T1.season = '2009/2010' GROUP BY T2.team_long_name ORDER BY COUNT(*) DESC LIMIT 1;"]}, {"question_id": 1029, "answer_sql": ["SELECT T2.team_long_name, T1.buildUpPlaySpeed FROM Team_Attributes AS T1 JOIN Team AS T2 ON T1.team_fifa_api_id = T2.team_fifa_api_id WHERE T1.buildUpPlaySpeed = (SELECT MAX(buildUpPlaySpeed) FROM Team_Attributes) ORDER BY T1.buildUpPlaySpeed DESC LIMIT 4;", "SELECT T2.team_long_name, T2.team_short_name, T1.buildUpPlaySpeed FROM Team_Attributes AS T1 JOIN Team AS T2 ON T1.team_fifa_api_id = T2.team_fifa_api_id WHERE T1.buildUpPlaySpeed = (SELECT MAX(buildUpPlaySpeed) FROM Team_Attributes) ORDER BY T1.buildUpPlaySpeed DESC LIMIT 4;", "SELECT T2.team_long_name, T2.team_short_name, T2.team_fifa_api_id, T1.buildUpPlaySpeed, T1.buildUpPlaySpeedClass FROM Team_Attributes AS T1 JOIN Team AS T2 ON T1.team_fifa_api_id = T2.team_fifa_api_id WHERE T1.buildUpPlaySpeed = (SELECT MAX(buildUpPlaySpeed) FROM Team_Attributes) ORDER BY T1.buildUpPlaySpeed DESC LIMIT 4;", "SELECT T2.team_long_name AS team_name, T1.buildUpPlaySpeedClass AS buildUpPlaySpeedClass FROM Team_Attributes AS T1 JOIN Team AS T2 ON T1.team_fifa_api_id = T2.team_fifa_api_id WHERE T1.buildUpPlaySpeedClass = (SELECT MAX(buildUpPlaySpeedClass) FROM Team_Attributes) ORDER BY T1.buildUpPlaySpeedClass DESC LIMIT 4;", "SELECT T2.buildUpPlaySpeed, T2.buildUpPlaySpeedClass FROM Team_Attributes AS T2 WHERE T2.buildUpPlaySpeed = ( SELECT MAX(buildUpPlaySpeed) FROM Team_Attributes ) ORDER BY T2.buildUpPlaySpeed DESC LIMIT 4;"]}, {"question_id": 1030, "answer_sql": ["SELECT L.name FROM League L JOIN Match M ON L.id = M.league_id WHERE M.season = '2015/2016' GROUP BY L.id ORDER BY SUM(CASE WHEN M.goal = 'D' THEN 1 ELSE 0 END) DESC LIMIT 1;", "SELECT L.name FROM League L JOIN Match M ON L.id = M.league_id WHERE M.season = '2015/2016' GROUP BY L.id ORDER BY SUM(CASE WHEN M.match_api_id IN (SELECT match_api_id FROM Match WHERE home_team_goal = away_team_goal AND season = '2015/2016') THEN 1 ELSE 0 END) DESC LIMIT 1;", "SELECT L.name FROM League L JOIN Match M ON L.id = M.league_id WHERE M.season = '2015/2016' GROUP BY L.id ORDER BY COUNT(*) DESC LIMIT 1;"]}, {"question_id": 1031, "answer_sql": ["SELECT T1.player_name, T1.birthday, DATE(DATETIME(), '-365 days') - T1.birthday AS age_at_present FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.sprint_speed >= 97 AND T1.birthday BETWEEN '2013-01-01 00:00:00' AND '2015-12-31 00:00:00'"]}, {"question_id": 1032, "answer_sql": ["SELECT L.name, COUNT(M.league_id) AS match_count FROM League L JOIN Match M ON L.id = M.league_id GROUP BY L.id ORDER BY match_count DESC LIMIT 1;", "SELECT L.name, COUNT(L.id) AS match_count FROM League L WHERE L.id = (SELECT league_id FROM (SELECT league_id, COUNT(league_id) AS match_count FROM Match GROUP BY league_id ORDER BY match_count DESC LIMIT 1)) GROUP BY L.id;"]}, {"question_id": 1033, "answer_sql": ["SELECT AVG(T1.height) AS average_height FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.birthday BETWEEN '1990-01-01 00:00:00' AND '1995-01-01 00:00:00';", "SELECT AVG(height) AS average_height FROM Player WHERE birthday >= '1990-01-01 00:00:00' AND birthday < '1996-01-01 00:00:00';"]}, {"question_id": 1034, "answer_sql": ["SELECT P.player_api_id FROM Player_Attributes P WHERE P.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes WHERE date LIKE '%2010%') ORDER BY P.overall_rating DESC;", "SELECT P.player_api_id FROM Player_Attributes PA JOIN Player P ON PA.player_api_id = P.player_api_id WHERE PA.date LIKE '2010%' ORDER BY PA.overall_rating DESC LIMIT 1;", "SELECT player_api_id FROM Player_Attributes WHERE date LIKE '2010%' GROUP BY player_api_id ORDER BY AVG(overall_rating) DESC LIMIT 1;", "SELECT player_api_id FROM Player_Attributes WHERE overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes WHERE date LIKE '2010%') ORDER BY overall_rating DESC LIMIT 1;", "SELECT player_api_id FROM Player_Attributes WHERE date LIKE '2010%' GROUP BY player_api_id HAVING MAX(overall_rating) > ( SELECT MAX(overall_rating) FROM Player_Attributes WHERE date LIKE '2010%' );"]}, {"question_id": 1035, "answer_sql": ["SELECT T1.team_fifa_api_id FROM Team_Attributes AS T1 JOIN Team AS T2 ON T1.team_fifa_api_id = T2.team_fifa_api_id WHERE T1.buildUpPlaySpeed BETWEEN 51 AND 59 GROUP BY T1.team_fifa_api_id HAVING COUNT(*) > 50;", "SELECT T1.team_fifa_api_id FROM Team_Attributes AS T1 JOIN Team AS T2 ON T1.team_fifa_api_id = T2.team_fifa_api_id WHERE T1.buildUpPlaySpeed BETWEEN 51 AND 59 GROUP BY T1.team_fifa_api_id HAVING COUNT(*) > 1;", "SELECT T2.team_fifa_api_id FROM Team_Attributes AS T1 JOIN Team AS T2 ON T1.team_fifa_api_id = T2.team_fifa_api_id WHERE T1.buildUpPlaySpeed BETWEEN 51 AND 59"]}, {"question_id": 1036, "answer_sql": ["SELECT T2.team_long_name FROM Team_Attributes AS T1 JOIN Team AS T2 ON T1.team_fifa_api_id = T2.team_fifa_api_id WHERE T1.buildUpPlayPassing > ( SELECT AVG(buildUpPlayPassing) FROM Team_Attributes WHERE strftime('%Y', date) = '2012' ) AND strftime('%Y', date) = '2012';", "SELECT T2.team_long_name FROM Team_Attributes AS T1 JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.buildUpPlayPassing > ( SELECT AVG(buildUpPlayPassing) FROM Team_Attributes WHERE strftime('%Y', date) = '2012' ) AND strftime('%Y', date) = '2012'", "SELECT T2.team_long_name FROM Team_Attributes AS T1 JOIN Team AS T2 ON T1.team_api_id = T2.id WHERE T1.buildUpPlayPassing > ( SELECT AVG(buildUpPlayPassing) FROM Team_Attributes WHERE strftime('%Y', date) = '2012' ) AND strftime('%Y', date) = '2012';", "SELECT T2.team_long_name FROM Team_Attributes AS T1 JOIN Team AS T2 ON T1.team_fifa_api_id = T2.team_fifa_api_id WHERE T1.buildUpPlayPassing > ( SELECT AVG(buildUpPlayPassing) FROM Team_Attributes WHERE strftime('%Y', date) = '2012' )", "SELECT T2.team_long_name FROM Team_Attributes AS T1 JOIN Team AS T2 ON T1.team_fifa_api_id = T2.team_fifa_api_id WHERE T1.buildUpPlayPassing > ( SELECT AVG(buildUpPlayPassing) FROM Team_Attributes WHERE strftime('%Y', date) = '2012' ) GROUP BY T2.team_long_name ORDER BY T1.buildUpPlayPassing DESC;"]}, {"question_id": 1037, "answer_sql": ["SELECT CAST(SUM(CASE WHEN T2.preferred_foot = 'left' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.player_fifa_api_id) FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id WHERE T1.birthday BETWEEN '1987-01-01 00:00:00' AND '1992-12-31 00:00:00';", "SELECT CAST(COUNT(CASE WHEN preferred_foot = 'left' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(player_fifa_api_id) AS Percentage FROM Player_Attributes WHERE preferred_foot = 'left' AND date BETWEEN '1987-01-01 00:00:00' AND '1992-12-31 00:00:00'"]}, {"question_id": 1038, "answer_sql": ["SELECT L.name, SUM(T.home_team_goal + T.away_team_goal) AS total_goals FROM Match T JOIN League L ON T.league_id = L.id GROUP BY L.name ORDER BY total_goals ASC LIMIT 5;"]}, {"question_id": 1039, "answer_sql": ["SELECT AVG(T2.long_shots) AS average_long_shots FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = 'Ahmed Samir Farag';"]}, {"question_id": 1040, "answer_sql": ["SELECT T1.player_name FROM Player AS T1 JOIN ( SELECT player_fifa_api_id, AVG(heading_accuracy) AS avg_heading_accuracy FROM Player_Attributes GROUP BY player_fifa_api_id ) AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id WHERE T1.height > 180 ORDER BY T2.avg_heading_accuracy DESC LIMIT 10;", "SELECT T1.player_name \nFROM Player AS T1 \nJOIN Player_Attributes AS T2 \nON T1.player_fifa_api_id = T2.player_fifa_api_id \nWHERE T1.height > 180 \nGROUP BY T1.player_fifa_api_id \nORDER BY AVG(T2.heading_accuracy) DESC \nLIMIT 10;", "SELECT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id WHERE T1.height > 180 GROUP BY T1.player_name ORDER BY AVG(T2.heading_accuracy) DESC LIMIT 10;", "SELECT p.player_name, AVG(pa.heading_accuracy) AS avg_heading_accuracy FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id JOIN Team_Attributes ta ON p.player_fifa_api_id = ta.team_fifa_api_id JOIN Team t ON ta.team_api_id = t.team_api_id JOIN Match m ON t.team_fifa_api_id = m.away_team_api_id WHERE p.height > 180 GROUP BY p.player_api_id ORDER BY avg_heading_accuracy DESC LIMIT 10;"]}, {"question_id": 1041, "answer_sql": ["SELECT T2.team_long_name FROM Team_Attributes AS T1 JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.buildUpPlayDribblingClass = 'Normal' AND T1.date >= '2014-01-01 00:00:00' AND T1.date <= '2014-01-31 00:00:00' GROUP BY T2.team_long_name HAVING SUM(T1.chanceCreationPassing) < (SELECT AVG(chanceCreationPassing) FROM Team_Attributes WHERE buildUpPlayDribblingClass = 'Normal' AND date >= '2014-01-01 00:00:00' AND date <= '2014-01-31 00:00:00') ORDER BY (SELECT AVG(chanceCreationPassing) FROM Team_Attributes WHERE buildUpPlayDribblingClass = 'Normal' AND date >= '2014-01-01 00:00:00' AND date <= '2014-01-31 00:00:00') - SUM(T1.chanceCreationPassing) DESC;"]}, {"question_id": 1042, "answer_sql": ["SELECT L.name FROM League L JOIN Match M ON L.id = M.league_id WHERE M.season = '2009/2010' GROUP BY L.name HAVING AVG(M.home_team_goal) > AVG(M.away_team_goal);", "SELECT L.name FROM League L JOIN ( SELECT T1.id, AVG(T2.home_team_goal) AS avg_home_goals, AVG(T2.away_team_goal) AS avg_away_goals FROM Team T1 JOIN ( SELECT home_team_api_id AS team_api_id, away_team_api_id AS away_team_api_id, home_team_goal, away_team_goal FROM match WHERE season = '2009/2010' ) T2 ON T1.team_api_id = T2.team_api_id GROUP BY T1.id ) T3 ON L.id = T3.id WHERE T3.avg_home_goals > T3.avg_away_goals;", "SELECT L.name FROM League L JOIN ( SELECT T1.team_api_id, AVG(T2.home_team_goal) AS avg_home_goals, AVG(T2.away_team_goal) AS avg_away_goals FROM Team T1 JOIN ( SELECT home_team_api_id AS team_api_id, home_team_goal, away_team_goal FROM match WHERE season = '2009/2010' ) T2 ON T1.team_api_id = T2.team_api_id GROUP BY T1.team_api_id ) M ON L.id = M.team_api_id WHERE M.avg_home_goals > M.avg_away_goals;"]}, {"question_id": 1043, "answer_sql": ["SELECT team_short_name FROM Team WHERE team_long_name = 'Queens Park Rangers';"]}, {"question_id": 1044, "answer_sql": ["SELECT * FROM Player WHERE strftime('%Y', birthday) = '1970' AND strftime('%m', birthday) = '10';", "SELECT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.birthday LIKE '197010%'"]}, {"question_id": 1045, "answer_sql": ["SELECT t2.attacking_work_rate FROM Player AS t1 JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE t1.player_name = 'Franco Zennaro';"]}, {"question_id": 1046, "answer_sql": ["SELECT T2.buildUpPlayPositioningClass AS freedom_of_movement FROM Match AS T1 JOIN Team AS T3 ON T1.home_team_api_id = T3.team_api_id JOIN Team_Attributes AS T2 ON T3.team_api_id = T2.team_api_id WHERE T3.team_long_name = 'ADO Den Haag'", "SELECT T2.buildUpPlayPositioningClass AS ADO_Den_Haag_team_freedom_of_movement FROM Team AS T1 JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_long_name = 'ADO Den Haag';", "SELECT T2.buildUpPlayPositioningClass AS freedom_of_movement FROM Match AS T1 JOIN Team AS T3 ON T1.home_team_api_id = T3.team_api_id JOIN Team_Attributes AS T2 ON T3.team_api_id = T2.team_api_id WHERE T3.team_long_name = 'ADO Den Haag' AND T1.stage = 1 AND T1.match_api_id = (SELECT match_api_id FROM Match WHERE home_team_api_id = T3.team_api_id ORDER BY date ASC LIMIT 1)"]}, {"question_id": 1047, "answer_sql": ["SELECT T2.heading_accuracy FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id WHERE T1.player_name = 'Francois Affolter' AND T2.date = '2014-09-18 00:00:00';"]}, {"question_id": 1048, "answer_sql": ["SELECT overall_rating FROM Player_Attributes JOIN Player ON Player_Attributes.player_fifa_api_id = Player.player_fifa_api_id WHERE strftime('%Y', Player_Attributes.date) = '2011' AND Player.player_name = 'Gabriel Tamas';", "SELECT T1.overall_rating FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id WHERE T1.date = strftime('%Y', T1.date) = '2011' AND T2.player_name = 'Gabriel Tamas';"]}, {"question_id": 1049, "answer_sql": ["SELECT COUNT(*) AS match_count FROM Match JOIN League ON Match.league_id = League.id JOIN Country ON League.country_id = Country.id WHERE Country.name = 'Scotland' AND League.name = 'Scotland Premier League' AND Match.season = '2015/2016';"]}, {"question_id": 1050, "answer_sql": ["SELECT preferred_foot FROM Player_Attributes WHERE player_api_id = ( SELECT player_api_id FROM Player ORDER BY birthday ASC LIMIT 1 )", "SELECT preferred_foot FROM Player_Attributes WHERE preferred_foot = 'attacking' AND Player_Attributes.player_api_id = ( SELECT player_api_id FROM Player ORDER BY birthday DESC LIMIT 1 )"]}, {"question_id": 1051, "answer_sql": ["SELECT Player_Attributes.id, Player_Attributes.player_api_id, Player_Attributes.potential, Player_Attributes.overall_rating FROM Player_Attributes JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id ORDER BY Player_Attributes.potential DESC LIMIT 1;", "SELECT p.player_name FROM Player p JOIN Player_Attributes pa ON p.player_fifa_api_id = pa.player_fifa_api_id WHERE pa.potential = (SELECT MAX(potential) FROM Player_Attributes) ORDER BY p.player_name;", "SELECT Player.player_api_id, Player.player_name, Player_Attributes.potential FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player_Attributes.potential = (SELECT MAX(potential) FROM Player_Attributes)", "SELECT Player_Attributes.id, Player_Attributes.player_api_id, Player_Attributes.potential FROM Player_Attributes WHERE Player_Attributes.potential = (SELECT MAX(potential) FROM Player_Attributes);", "SELECT Player.player_api_id, Player.player_name, Player_Attributes.potential \nFROM Player \nJOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id \nORDER BY Player_Attributes.potential DESC LIMIT 1;"]}, {"question_id": 1052, "answer_sql": ["SELECT COUNT(*) AS preferred_foot_left_count FROM Player_Attributes JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE Player.weight < 130 AND Player_Attributes.preferred_foot = 'left';"]}, {"question_id": 1053, "answer_sql": ["SELECT T2.team_short_name FROM Team_Attributes AS T1 JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.chanceCreationPassingClass = 'Risky';", "SELECT T2.team_short_name FROM Team_Attributes AS T1 JOIN Team AS T2 ON T1.team_fifa_api_id = T2.team_fifa_api_id WHERE T1.chanceCreationPassingClass = 'Risky'", "SELECT DISTINCT T2.team_short_name FROM Team_Attributes AS T1 JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.chanceCreationPassingClass = 'Risky';"]}, {"question_id": 1054, "answer_sql": ["SELECT T2.defensive_work_rate FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = 'David Wilson';"]}, {"question_id": 1055, "answer_sql": ["SELECT T1.birthday FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes) ORDER BY T1.birthday ASC LIMIT 1;", "SELECT T1.birthday FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes)"]}, {"question_id": 1056, "answer_sql": ["SELECT L.name FROM League L JOIN Country C ON L.country_id = C.id WHERE C.name = 'Netherlands';", "SELECT T2.name FROM League AS T1 INNER JOIN Country AS T2 ON T1.country_id = T2.id WHERE T2.name = 'Netherlands';"]}, {"question_id": 1057, "answer_sql": ["SELECT AVG(T1.home_team_goal) AS average_home_team_goal FROM Match AS T1 JOIN League AS T2 ON T1.country_id = T2.id JOIN Country AS T3 ON T2.country_id = T3.id WHERE T3.name = 'Poland' AND T1.season = '2010/2011';"]}, {"question_id": 1058, "answer_sql": ["SELECT P.player_name, AVG(PA.finishing) AS average_finishing_rate FROM Player_Attributes PA JOIN Player P ON PA.player_api_id = P.player_api_id GROUP BY PA.player_api_id ORDER BY average_finishing_rate DESC, height DESC LIMIT 1;", "SELECT MAX(T1.player_name) AS highest_average_finishing_player FROM Player AS T1 JOIN ( SELECT player_api_id, MAX(height) AS max_height FROM Player GROUP BY player_api_id ) AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height = T2.max_height;"]}, {"question_id": 1059, "answer_sql": []}, {"question_id": 1060, "answer_sql": ["SELECT COUNT(*) FROM Player_Attributes PA JOIN Player P ON PA.player_api_id = P.player_api_id WHERE strftime('%Y', P.birthday) > '1990';", "SELECT COUNT(*) FROM Player WHERE strftime('%Y', birthday) > '1990';"]}, {"question_id": 1061, "answer_sql": ["SELECT COUNT(*) FROM Player WHERE player_name LIKE 'Adam%' AND weight > 170;", "SELECT COUNT(*) FROM Player WHERE player_name = 'Adam' AND weight > 170;"]}, {"question_id": 1062, "answer_sql": []}, {"question_id": 1063, "answer_sql": ["SELECT potential FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Doran');"]}, {"question_id": 1064, "answer_sql": []}, {"question_id": 1065, "answer_sql": ["SELECT DISTINCT T1.team_long_name FROM Team AS T1 JOIN Team_Attributes AS T2 ON T1.team_fifa_api_id = T2.team_fifa_api_id WHERE T2.buildUpPlaySpeedClass = 'Fast';", "SELECT T2.team_long_name FROM Team_Attributes AS T1 JOIN Team AS T2 ON T1.team_fifa_api_id = T2.team_fifa_api_id WHERE T1.buildUpPlaySpeedClass = 'Fast';"]}, {"question_id": 1066, "answer_sql": ["SELECT buildUpPlayPassingClass FROM Team_Attributes JOIN Team ON Team_Attributes.team_fifa_api_id = Team.team_fifa_api_id WHERE Team.team_short_name = 'CLB';"]}, {"question_id": 1067, "answer_sql": ["SELECT T2.team_short_name FROM Team_Attributes AS T1 JOIN Team AS T2 ON T1.team_fifa_api_id = T2.team_fifa_api_id WHERE T1.buildUpPlayPassing > 70;", "SELECT T2.team_short_name FROM Team_Attributes AS T1 JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.buildUpPlayPassing > 70;"]}, {"question_id": 1068, "answer_sql": ["SELECT AVG(Player_Attributes.overall_rating) AS average_overall_rating FROM Player_Attributes JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE Player_Attributes.date BETWEEN '2010-01-01' AND '2015-12-31' AND Player.height > 170;", "SELECT AVG(Player_Attributes.overall_rating) AS average_overall_rating FROM Player_Attributes JOIN Player ON Player_Attributes.player_fifa_api_id = Player.player_fifa_api_id JOIN Team_Attributes ON Player_Attributes.player_fifa_api_id = Team_Attributes.team_fifa_api_id WHERE Player_Attributes.overall_rating > 170 AND strftime('%Y', Player_Attributes.date) BETWEEN '2010' AND '2015' AND Player.height > 170;"]}, {"question_id": 1069, "answer_sql": ["SELECT T1.player_name, T1.height FROM Player AS T1 WHERE T1.height = (SELECT MIN(height) FROM Player);"]}, {"question_id": 1070, "answer_sql": ["SELECT T1.name FROM Country AS T1 JOIN League AS T2 ON T1.id = T2.country_id WHERE T2.name = 'Italy Serie A';", "SELECT T1.name AS country_name FROM League AS T1 JOIN Country AS T2 ON T1.country_id = T2.id WHERE T1.name = 'Italy Serie A';", "SELECT T1.country_id, T1.name FROM League AS T1 JOIN Country AS T2 ON T1.country_id = T2.id WHERE T1.name = 'Italy Serie A';"]}, {"question_id": 1071, "answer_sql": ["SELECT T2.team_short_name FROM Team_Attributes AS T1 JOIN Team AS T2 ON T1.team_fifa_api_id = T2.team_fifa_api_id WHERE T1.buildUpPlaySpeed = 31 AND T1.buildUpPlayDribbling = 53 AND T1.buildUpPlayPassing = 32;"]}, {"question_id": 1072, "answer_sql": ["SELECT AVG(Player_Attributes.overall_rating) AS average_overall_rating FROM Player_Attributes JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE Player.player_name = 'Aaron Doran';"]}, {"question_id": 1073, "answer_sql": ["SELECT COUNT(Match.id) AS match_count FROM Match JOIN League ON Match.country_id = League.country_id WHERE League.name = 'Germany 1. Bundesliga' AND strftime('%Y-%m', Match.date) BETWEEN '2008-08' AND '2008-10';"]}, {"question_id": 1074, "answer_sql": ["SELECT T2.team_short_name FROM Match AS T1 JOIN Team AS T3 ON T1.home_team_api_id = T3.team_api_id JOIN Team AS T4 ON T1.away_team_api_id = T4.team_api_id JOIN Team AS T2 ON T4.team_fifa_api_id = T2.team_fifa_api_id WHERE T1.home_team_goal = 10;", "SELECT T2.team_short_name FROM Match AS T1 JOIN Team AS T2 ON T1.home_team_api_id = T2.team_api_id WHERE T1.home_team_goal = 10;", "SELECT T2.team_short_name FROM Match AS M JOIN Team AS T1 ON M.home_team_api_id = T1.team_api_id JOIN Team AS T2 ON M.away_team_api_id = T2.team_api_id WHERE M.home_team_goal = 10 AND T1.team_short_name = T2.team_short_name;"]}, {"question_id": 1075, "answer_sql": ["SELECT P.player_name, PA.balance, PA.potential FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE PA.potential = 61 ORDER BY PA.balance DESC LIMIT 1;", "SELECT P.player_name, PA.potential, PA.balance \nFROM Player P \nJOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id \nWHERE PA.potential = 61 \nORDER BY PA.balance DESC \nLIMIT 1;", "SELECT P.player_name, PA.balance, PA.potential \nFROM Player P \nJOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id \nWHERE PA.balance = (SELECT MAX(balance) FROM Player_Attributes) AND PA.potential = 61;"]}, {"question_id": 1076, "answer_sql": []}, {"question_id": 1077, "answer_sql": ["SELECT team_long_name FROM Team WHERE team_short_name = 'GEN';"]}, {"question_id": 1078, "answer_sql": ["SELECT T1.player_name, T2.player_name AS older_player_name FROM Player AS T1 JOIN Player AS T2 ON T1.player_api_id < T2.player_api_id WHERE T1.birthday < T2.birthday ORDER BY T1.birthday ASC LIMIT 1;", "SELECT T1.player_name FROM Player AS T1 JOIN ( SELECT player_api_id, MIN(birthday) AS min_birthday FROM Player WHERE player_name = 'Aaron Lennon' GROUP BY player_api_id ) AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = 'Aaron Lennon';", "SELECT T1.player_name FROM Player AS T1 JOIN ( SELECT player_api_id, MIN(birthday) AS min_birthday FROM Player WHERE player_name = 'Aaron Lennon' GROUP BY player_api_id ) AS T2 ON T1.player_api_id = T2.player_api_id JOIN ( SELECT player_api_id, MIN(birthday) AS min_birthday FROM Player WHERE player_name = 'Abdelaziz Barrada' GROUP BY player_api_id ) AS T3 ON T1.player_api_id = T3.player_api_id WHERE T1.birthday = T2.min_birthday OR T1.birthday = T3.min_birthday;"]}, {"question_id": 1079, "answer_sql": ["SELECT player_name, MAX(height) AS tallest_height \nFROM Player \nGROUP BY player_name \nORDER BY tallest_height DESC \nLIMIT 1;", "SELECT MAX(height) AS tallest_player_height FROM Player;", "SELECT `player_name` FROM `Player` WHERE `height` = (SELECT MAX(height) FROM `Player`)", "SELECT player_name, player_api_id, height FROM Player ORDER BY height DESC LIMIT 1;"]}, {"question_id": 1080, "answer_sql": ["SELECT COUNT(T1.id) AS count FROM Player_Attributes AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.preferred_foot = 'left' AND T2.attacking_work_rate = 'low';", "SELECT COUNT(T1.player_api_id) AS count FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.attacking_work_rate = 'low' AND T1.preferred_foot = 'left';", "SELECT COUNT(DISTINCT T1.player_api_id) AS player_count FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.preferred_foot = 'left' AND T1.attacking_work_rate = 'low';", "SELECT COUNT(T1.id) AS count FROM Player_Attributes AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.preferred_foot = 'left' AND T1.attacking_work_rate = 'low';"]}, {"question_id": 1081, "answer_sql": ["SELECT T1.name AS country_name FROM Country AS T1 JOIN League AS T2 ON T1.id = T2.country_id WHERE T2.name = 'Belgium Jupiler League';", "SELECT T1.country_id, T1.name FROM League AS T1 INNER JOIN Country AS T2 ON T1.country_id = T2.id WHERE T1.name = 'Belgium Jupiler League';", "SELECT T1.country_id FROM League AS T1 INNER JOIN Country AS T2 ON T1.country_id = T2.id WHERE T1.name = 'Belgium Jupiler League';", "SELECT T1.name AS country_name FROM League AS T1 JOIN Country AS T2 ON T1.country_id = T2.id WHERE T1.name = 'Belgium Jupiler League';", "SELECT T1.country_id, T1.name FROM League AS T1 INNER JOIN Country AS T2 ON T1.country_id = T2.id WHERE T2.name = 'Belgium Jupiler League';"]}, {"question_id": 1082, "answer_sql": ["SELECT DISTINCT T1.name FROM League AS T1 JOIN Country AS T2 ON T1.country_id = T2.id WHERE T2.name = 'Germany';", "SELECT DISTINCT T1.name FROM Country AS T1 JOIN League AS T2 ON T1.id = T2.country_id WHERE T1.name = 'Germany';"]}, {"question_id": 1083, "answer_sql": ["SELECT P.id, P.player_name, P.player_api_id, PA.overall_rating FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE PA.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes) ORDER BY PA.overall_rating DESC LIMIT 1;", "SELECT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id WHERE T1.player_fifa_api_id = ( SELECT T3.player_fifa_api_id FROM Player_Attributes AS T3 WHERE T3.overall_rating = ( SELECT MAX(overall_rating) FROM Player_Attributes ) ) ORDER BY T1.player_name ASC LIMIT 1;", "SELECT P.player_name FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE PA.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes)"]}, {"question_id": 1084, "answer_sql": ["SELECT COUNT(*) AS count FROM Player_Attributes JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE strftime('%Y', Player.birthday) < '1986' AND Player_Attributes.defensive_work_rate = 'high' AND Player_Attributes.attacking_work_rate = 'low';", "SELECT COUNT(*) AS count FROM Player_Attributes PA JOIN Player P ON PA.player_api_id = P.player_api_id WHERE strftime('%Y', P.birthday) < '1986' AND PA.defensive_work_rate = 'high';", "SELECT COUNT(*) AS count FROM Player_Attributes PA JOIN Player P ON PA.player_api_id = P.player_api_id WHERE PA.date < strftime('%Y', P.birthday) AND PA.defensive_work_rate = 'high';"]}, {"question_id": 1085, "answer_sql": ["SELECT MAX(Player_Attributes.crossing) AS best_crossing \nFROM Player_Attributes \nJOIN Player ON Player_Attributes.player_fifa_api_id = Player.player_fifa_api_id \nWHERE Player.player_name IN ('Alexis', 'Ariel Borysiuk', 'Arouna Kone')"]}, {"question_id": 1086, "answer_sql": ["SELECT heading_accuracy FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Ariel Borysiuk');"]}, {"question_id": 1087, "answer_sql": ["SELECT COUNT(*) \nFROM Player \nJOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id \nWHERE Player.height > 180 AND Player_Attributes.volleys > 70"]}, {"question_id": 1088, "answer_sql": []}, {"question_id": 1089, "answer_sql": ["SELECT COUNT(*) AS match_count FROM Match JOIN League ON Match.league_id = League.id JOIN Country ON League.country_id = Country.id WHERE Country.name = 'Belgium' AND Match.season = '2008/2009';"]}, {"question_id": 1090, "answer_sql": ["SELECT T1.long_passing FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.birthday = (SELECT MAX(birthday) FROM Player) ORDER BY T2.birthday ASC LIMIT 1;", "SELECT MAX(long_passing) AS long_passing_score FROM Player_Attributes WHERE date = (SELECT MAX(date) FROM Player_Attributes);", "SELECT T1.long_passing FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.birthday = (SELECT MAX(birthday) FROM Player)"]}, {"question_id": 1091, "answer_sql": ["SELECT COUNT(*) AS match_count FROM Match JOIN League ON Match.league_id = League.id WHERE League.name = 'Belgium Jupiler League' AND strftime('%Y', Match.date) = '2009' AND strftime('%m', Match.date) = '04';"]}, {"question_id": 1092, "answer_sql": ["SELECT L.name FROM League L JOIN Match M ON L.id = M.country_id WHERE M.season = '2008/2009' GROUP BY L.id ORDER BY COUNT(*) DESC LIMIT 1;"]}, {"question_id": 1093, "answer_sql": ["SELECT AVG(T2.overall_rating) AS average_overall_rating FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.birthday < strftime('%Y', '1986-01-01') GROUP BY T1.player_api_id;", "SELECT AVG(T1.overall_rating) AS average_overall_rating FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.birthday < '1986-01-01' GROUP BY T2.birthday;"]}, {"question_id": 1094, "answer_sql": []}, {"question_id": 1095, "answer_sql": ["SELECT AVG(Team_Attributes.buildUpPlaySpeed) AS average_build_up_play_speed FROM Team_Attributes JOIN Team ON Team_Attributes.team_fifa_api_id = Team.team_fifa_api_id WHERE Team.team_long_name = 'Heart of Midlothian';"]}, {"question_id": 1096, "answer_sql": ["SELECT AVG(T1.overall_rating) AS average_overall_rating FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id WHERE T2.player_name = 'Pietro Marino';"]}, {"question_id": 1097, "answer_sql": ["SELECT SUM(T2.crossing) AS total_crossing_score FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = 'Aaron Lennox';"]}, {"question_id": 1098, "answer_sql": ["SELECT MAX(Team_Attributes.chanceCreationPassing) AS highest_chance_creation_passing, Team_Attributes.chanceCreationPassingClass AS chance_creation_passing_class FROM Team_Attributes JOIN Team ON Team_Attributes.team_fifa_api_id = Team.team_fifa_api_id WHERE Team.team_long_name = 'Ajax' GROUP BY Team_Attributes.chanceCreationPassingClass", "SELECT MAX(T1.chanceCreationPassing), T1.chanceCreationPassingClass FROM Team_Attributes AS T1 JOIN Team AS T2 ON T1.team_fifa_api_id = T2.team_fifa_api_id WHERE T2.team_long_name = 'Ajax';"]}, {"question_id": 1099, "answer_sql": []}, {"question_id": 1100, "answer_sql": ["SELECT MAX(T2.overall_rating) AS highest_overall_rating FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id WHERE T1.player_name = 'Dorlan Pabon';"]}, {"question_id": 1101, "answer_sql": ["SELECT AVG(away_team_goal) AS average_goals \nFROM Match \nJOIN Team ON Match.away_team_api_id = Team.team_api_id \nWHERE Team.team_long_name = 'Parma' \nAND Match.league_id = (SELECT league_id FROM League WHERE team_long_name = 'Parma');", "SELECT AVG(away_team_goal) AS average_goals \nFROM Match \nJOIN Team ON Match.away_team_api_id = Team.team_api_id \nJOIN League ON Match.league_id = League.id \nWHERE Team.team_long_name = 'Parma' AND League.name = 'Italy';"]}, {"question_id": 1102, "answer_sql": ["SELECT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.overall_rating = 77 AND T2.date = '2016/6/23' ORDER BY T1.birthday ASC LIMIT 1;"]}, {"question_id": 1103, "answer_sql": ["SELECT T1.overall_rating FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Aaron Mooy' AND T1.date = '2016-02-04 00:00:00';"]}, {"question_id": 1104, "answer_sql": ["SELECT overall_rating, potential FROM Player_Attributes JOIN Player ON Player_Attributes.player_fifa_api_id = Player.player_fifa_api_id WHERE player_name = 'Francesco Parravicini' AND date = '2010-08-30 00:00:00';", "SELECT T2.potential FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = 'Francesco Parravicini' AND T2.date = '2010-08-30 00:00:00';"]}, {"question_id": 1105, "answer_sql": ["SELECT T2.attacking_work_rate FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id WHERE T1.player_name = 'Francesco Migliore' AND T2.date = '2015-05-01 00:00:00';"]}, {"question_id": 1106, "answer_sql": ["SELECT T2.defensive_work_rate FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id WHERE T1.player_name = 'Kevin Berigaud' AND T2.date = '2013-02-22 00:00:00';"]}, {"question_id": 1107, "answer_sql": ["SELECT T1.date FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id WHERE T2.player_name = 'Kevin Constant' ORDER BY T1.crossing DESC LIMIT 1;", "SELECT MIN(T2.date) AS date FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = 'Kevin Constant' ORDER BY T2.crossing DESC LIMIT 1;", "SELECT MIN(T1.date) AS date FROM Match AS T1 JOIN Player AS T2 ON T1.home_player_X1 = T2.player_api_id JOIN Player_Attributes AS T3 ON T2.player_api_id = T3.player_api_id WHERE T2.player_name = 'Kevin Constant' AND T3.crossing = (SELECT MAX(crossing) FROM Player_Attributes WHERE player_api_id = T2.player_api_id);", "SELECT T1.date FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Kevin Constant' AND T1.crossing = (SELECT MAX(crossing) FROM Player_Attributes)"]}, {"question_id": 1108, "answer_sql": ["SELECT buildUpPlaySpeedClass FROM Team_Attributes JOIN Team ON Team_Attributes.team_fifa_api_id = Team.team_fifa_api_id WHERE Team_long_name = 'Willem II' AND date = '2012-02-22 00:00:00';"]}, {"question_id": 1109, "answer_sql": ["SELECT buildUpPlayDribblingClass FROM Team_Attributes JOIN Team ON Team_Attributes.team_fifa_api_id = Team.team_fifa_api_id WHERE Team_short_name = 'LEI' AND date = '2015-09-10 00:00:00';", "SELECT buildUpPlayDribblingClass FROM Team_Attributes JOIN Team ON Team_Attributes.team_fifa_api_id = Team.team_fifa_api_id WHERE Team_short_name = 'LEI' AND date = '2015-09-10';"]}, {"question_id": 1110, "answer_sql": ["SELECT T1.buildUpPlayPassingClass FROM Team_Attributes AS T1 JOIN Team AS T2 ON T1.team_fifa_api_id = T2.team_fifa_api_id WHERE T2.team_long_name = 'FC Lorient' AND T1.date = '2010-02-22';"]}, {"question_id": 1111, "answer_sql": ["SELECT T2.chanceCreationPassingClass FROM Team AS T1 JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_long_name = 'PEC Zwolle' AND T2.date = '2013-09-20 00:00:00';", "SELECT T2.chanceCreationPassingClass FROM Team AS T1 JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id JOIN Match AS M ON T1.team_api_id = M.away_team_api_id WHERE T1.team_long_name = 'PEC Zwolle' AND M.date = '2013-09-20 00:00:00';"]}, {"question_id": 1112, "answer_sql": []}, {"question_id": 1113, "answer_sql": ["SELECT T2.defenceAggressionClass FROM Team AS T1 JOIN Team_Attributes AS T2 ON T1.team_fifa_api_id = T2.team_fifa_api_id WHERE T1.team_long_name = 'Hannover 96' AND T2.date = '2015-09-10 00:00:00';"]}, {"question_id": 1114, "answer_sql": ["SELECT AVG(T1.overall_rating) AS average_overall_rating FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id WHERE T2.player_name = 'Marko Arnautovic' AND T1.date BETWEEN '2007-02-22 00:00:00' AND '2016-04-21 00:00:00';"]}, {"question_id": 1115, "answer_sql": ["SELECT CAST((SUM(CASE WHEN T2.player_name = 'Landon Donovan' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.player_name = 'Jordan Bowery' THEN 1 ELSE 0 END)) AS REAL) * 100 / SUM(CASE WHEN T2.player_name = 'Landon Donovan' THEN 1 ELSE 0 END) AS percentage FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.date = '2013-07-12'"]}, {"question_id": 1116, "answer_sql": ["SELECT player_name FROM Player ORDER BY height DESC LIMIT 5;", "SELECT player_name FROM Player WHERE height = (SELECT MAX(height) FROM Player) LIMIT 5;"]}, {"question_id": 1117, "answer_sql": ["SELECT `player_api_id` FROM `Player` ORDER BY `weight` DESC LIMIT 10;"]}, {"question_id": 1118, "answer_sql": ["SELECT player_name FROM Player WHERE strftime('%Y', birthday) <= strftime('%Y', CURRENT_DATE) - 35"]}, {"question_id": 1119, "answer_sql": ["SELECT SUM(CASE WHEN T1.home_team_goal = 1 THEN 1 ELSE 0 END) AS total_goals FROM Match AS T1 JOIN Team AS T2 ON T1.home_team_api_id = T2.team_api_id JOIN Player AS T3 ON T2.team_fifa_api_id = T3.player_fifa_api_id WHERE T3.player_name = 'Aaron Lennon';", "SELECT COUNT(T1.home_team_goal) AS home_team_goals FROM Match AS T1 JOIN Player AS T2 ON T1.home_player_1 = T2.player_api_id WHERE T2.player_name = 'Aaron Lennon';"]}, {"question_id": 1120, "answer_sql": ["SELECT SUM(CASE WHEN T1.player_name = 'Daan Smith' THEN T2.away_team_goal ELSE 0 END) + SUM(CASE WHEN T1.player_name = 'Filipe Ferreira' THEN T2.away_team_goal ELSE 0 END) FROM Player AS T1 JOIN Team AS T3 ON T1.player_api_id = T3.team_fifa_api_id JOIN Match AS T2 ON T2.home_team_api_id = T3.team_api_id OR T2.away_team_api_id = T3.team_api_id WHERE T1.player_name IN ('Daan Smith', 'Filipe Ferreira') GROUP BY T1.player_name;", "SELECT SUM(Match.away_team_goal) AS total_away_team_goals FROM Match JOIN Player ON Match.away_player_X1 = Player.player_api_id WHERE Player.player_name IN ('Daan Smith', 'Filipe Ferreira')"]}, {"question_id": 1121, "answer_sql": ["SELECT SUM(home_team_goal) AS total_home_goals\nFROM Match\nWHERE home_team_api_id IN (\n    SELECT player_api_id\n    FROM Player\n    WHERE strftime('%Y', birthday) <= strftime('%Y', CURRENT_DATE) - 30\n)"]}, {"question_id": 1122, "answer_sql": []}, {"question_id": 1123, "answer_sql": ["SELECT player_name FROM Player WHERE player_fifa_api_id IN ( SELECT player_fifa_api_id FROM Player_Attributes WHERE potential = ( SELECT MAX(potential) FROM Player_Attributes ) ) ORDER BY player_name ASC LIMIT 1;"]}, {"question_id": 1124, "answer_sql": ["SELECT T2.player_name FROM Match AS T1 JOIN Player AS T2 ON T1.home_player_X1 = T2.player_api_id JOIN Player_Attributes AS T3 ON T2.player_api_id = T3.player_api_id WHERE T3.attacking_work_rate = 'high'"]}, {"question_id": 1125, "answer_sql": ["SELECT MAX(T1.player_name) AS player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.finishing = 1 ORDER BY T1.birthday ASC LIMIT 1;", "SELECT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.finishing = 1 ORDER BY T1.birthday ASC LIMIT 1;"]}, {"question_id": 1126, "answer_sql": ["SELECT Player.player_name FROM Player JOIN Country ON Player.id = Country.id WHERE Country.name = 'Belgium';", "SELECT T1.player_name FROM Player AS T1 JOIN Country AS T2 ON T1.player_fifa_api_id = T2.id WHERE T2.name = 'Belgium';"]}, {"question_id": 1127, "answer_sql": ["SELECT c.name AS country FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id JOIN Country c ON p.id = c.id WHERE pa.vision > 89;"]}, {"question_id": 1128, "answer_sql": ["SELECT c.name FROM Country c JOIN ( SELECT player_fifa_api_id, AVG(weight) AS avg_weight FROM Player GROUP BY player_fifa_api_id ) p ON c.id = p.player_fifa_api_id WHERE p.avg_weight = ( SELECT MAX(avg_weight) FROM ( SELECT player_fifa_api_id, AVG(weight) AS avg_weight FROM Player GROUP BY player_fifa_api_id ) subquery );"]}, {"question_id": 1129, "answer_sql": ["SELECT T2.team_long_name FROM Team_Attributes AS T1 JOIN Team AS T2 ON T1.team_fifa_api_id = T2.team_fifa_api_id WHERE T1.buildUpPlaySpeedClass = 'Slow';"]}, {"question_id": 1130, "answer_sql": ["SELECT T2.team_short_name FROM Match AS T1 JOIN Team AS T3 ON T1.away_team_api_id = T3.team_api_id JOIN Team_Attributes AS T4 ON T3.team_fifa_api_id = T4.team_fifa_api_id JOIN Team AS T2 ON T1.away_team_api_id = T2.team_api_id WHERE T4.chanceCreationPassingClass = 'Safe'", "SELECT T2.team_short_name FROM Match AS T1 JOIN Team AS T2 ON T1.home_team_api_id = T2.team_fifa_api_id JOIN Team_Attributes AS T3 ON T2.team_fifa_api_id = T3.team_fifa_api_id WHERE T3.chanceCreationPassingClass = 'Safe';"]}, {"question_id": 1131, "answer_sql": ["SELECT AVG(height) AS average_height FROM Player JOIN Country ON Player.id = Country.id WHERE Country.name = 'Italy';"]}, {"question_id": 1132, "answer_sql": ["SELECT player_name FROM Player WHERE height > 180 ORDER BY player_name ASC LIMIT 3;", "SELECT Player.player_name FROM Player JOIN Player_Attributes ON Player.player_fifa_api_id = Player_Attributes.player_fifa_api_id WHERE Player.height > 180 ORDER BY Player.player_name ASC LIMIT 3;"]}, {"question_id": 1133, "answer_sql": ["SELECT COUNT(*) FROM Player WHERE player_name LIKE 'Aaron%' AND birthday > '1990-01-01';"]}, {"question_id": 1134, "answer_sql": ["SELECT SUM(CASE WHEN id = 6 THEN jumping ELSE 0 END) - SUM(CASE WHEN id = 23 THEN jumping ELSE 0 END) AS jumping_difference FROM Player_Attributes WHERE id IN (6, 23);", "SELECT SUM(jumping) AS jumping_difference FROM Player_Attributes WHERE id IN (6, 23);", "SELECT SUM(jumping) - SUM(jumping) AS difference FROM Player_Attributes WHERE id IN (6, 23);"]}, {"question_id": 1135, "answer_sql": ["SELECT T1.player_api_id FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.potential = (SELECT MIN(T1.potential) FROM Player_Attributes AS T1) AND T1.preferred_foot = 'right' ORDER BY T1.potential ASC LIMIT 3;", "SELECT T1.player_api_id FROM Player_Attributes AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.potential = (SELECT MIN(potential) FROM Player_Attributes) AND T1.preferred_foot = 'right' ORDER BY T1.potential ASC LIMIT 3;"]}, {"question_id": 1136, "answer_sql": ["SELECT COUNT(T1.player_api_id) AS player_count FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.crossing = (SELECT MAX(T3.crossing) FROM Player_Attributes AS T3 WHERE T3.preferred_foot = 'left') AND T1.preferred_foot = 'left'", "SELECT COUNT(*) AS player_count FROM Player_Attributes JOIN Match ON Player_Attributes.player_api_id = Match.home_player_1 WHERE Player_Attributes.preferred_foot = 'left' AND Player_Attributes.crossing = (SELECT MAX(crossing) FROM Player_Attributes)"]}, {"question_id": 1137, "answer_sql": ["SELECT (COUNT(CASE WHEN P1.strength > 80 AND P1.stamina > 80 THEN 1 ELSE NULL END) / COUNT(P1.id)) * 100 AS percentage FROM Player_Attributes P1 JOIN Player_Attributes P2 ON P1.player_api_id = P2.player_api_id WHERE P1.strength > 80 AND P1.stamina > 80;", "SELECT (COUNT(CASE WHEN strength > 80 AND stamina > 80 THEN 1 END) * 100) / COUNT(*) AS percentage FROM Player_Attributes"]}, {"question_id": 1138, "answer_sql": ["SELECT T2.name AS country_name FROM League AS T1 JOIN Country AS T2 ON T1.country_id = T2.id WHERE T1.name = 'Poland Ekstraklasa';", "SELECT T1.name AS country_name FROM League AS T1 JOIN Country AS T2 ON T1.country_id = T2.id WHERE T1.name = 'Poland Ekstraklasa';", "SELECT T2.name FROM League AS T1 JOIN Country AS T2 ON T1.country_id = T2.id WHERE T2.name = 'Poland' AND T1.name = 'Ekstraklasa';"]}, {"question_id": 1139, "answer_sql": ["SELECT home_team_goal, away_team_goal FROM Match WHERE date = '2008-09-24' AND league_id = (SELECT league_id FROM League WHERE name = 'Belgian Jupiler League') AND stage = 1 AND season = '2008';"]}, {"question_id": 1140, "answer_sql": ["SELECT `Player_Attributes`.ball_control, `Player_Attributes`.agility, `Player_Attributes`.acceleration FROM `Player_Attributes` JOIN `Player` ON `Player_Attributes`.player_api_id = `Player`.player_api_id WHERE `Player`.player_name = 'Alexis Blin';", "SELECT sprint_speed, agility, acceleration FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player.player_name = 'Alexis Blin';", "SELECT `Player_Attributes`.crossing, `Player_Attributes`.agility, `Player_Attributes`.acceleration FROM `Player_Attributes` JOIN `Player` ON `Player_Attributes`.player_api_id = `Player`.player_api_id WHERE `Player`.player_name = 'Alexis Blin';", "SELECT acceleration, agility, acceleration FROM Player_Attributes WHERE player_api_id = ( SELECT player_api_id FROM Player WHERE player_name = 'Alexis Blin' );", "SELECT acceleration, agility, sprint_speed FROM Player_Attributes WHERE player_api_id = ( SELECT player_api_id FROM Player WHERE player_name = 'Alexis Blin' );"]}, {"question_id": 1141, "answer_sql": ["SELECT 'Yes' AS has_slow_balanced_fast_speed_class FROM Team WHERE team_long_name = 'KSV Cercle Brugge';", "SELECT buildUpPlaySpeedClass FROM Team_Attributes JOIN Team ON Team_Attributes.team_fifa_api_id = Team.team_fifa_api_id WHERE team_long_name = 'KSV Cercle Brugge';"]}, {"question_id": 1142, "answer_sql": ["SELECT COUNT(*) AS num_games FROM Match JOIN League ON Match.league_id = League.id WHERE Season = '2015/2016' AND League.name = 'Italian Serie A';"]}, {"question_id": 1143, "answer_sql": ["SELECT MAX(home_team_goal) AS highest_score FROM Match WHERE league_id = (SELECT id FROM League WHERE name = 'Netherlands Eredivisie');", "SELECT MAX(home_team_goal) AS highest_home_team_score FROM Match WHERE country_id = (SELECT id FROM Country WHERE name = 'Netherlands') AND league_id = (SELECT id FROM League WHERE name = 'Eredivisie');"]}, {"question_id": 1144, "answer_sql": ["SELECT P.player_name, P.weight, PA.finishing, PA.curve FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE P.weight = (SELECT MAX(weight) FROM Player) ORDER BY PA.finishing DESC, PA.curve DESC LIMIT 1;", "SELECT P.player_name, P.weight, PA.finishing, PA.curve FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE P.weight = (SELECT MAX(weight) FROM Player) ORDER BY PA.finishing DESC, PA.curve DESC;"]}, {"question_id": 1145, "answer_sql": ["SELECT L.name FROM League L JOIN ( SELECT league_id, COUNT(id) AS game_count FROM Match WHERE season = '2015/2016' GROUP BY league_id ORDER BY game_count DESC LIMIT 1 ) M ON L.id = M.league_id", "SELECT L.name FROM League L JOIN Team T ON L.id = T.team_api_id WHERE T.team_long_name = (SELECT T2.team_long_name FROM Team T2 JOIN League L2 ON T2.team_api_id = L2.id WHERE T2.team_long_name LIKE '%2015/2016%' GROUP BY T2.team_long_name ORDER BY COUNT(T2.id) DESC LIMIT 1);"]}, {"question_id": 1146, "answer_sql": ["SELECT T2.team_long_name FROM Match AS T1 JOIN Team AS T3 ON T1.away_team_api_id = T3.team_api_id JOIN Team AS T2 ON T1.home_team_api_id = T2.team_api_id WHERE T1.away_team_goal = (SELECT MAX(away_team_goal) FROM Match) ORDER BY T1.away_team_goal DESC LIMIT 1;", "SELECT T2.team_long_name FROM Match AS T1 JOIN Team AS T2 ON T1.away_team_api_id = T2.team_api_id WHERE T1.away_team_goal = (SELECT MAX(away_team_goal) FROM Match)"]}, {"question_id": 1147, "answer_sql": []}, {"question_id": 1148, "answer_sql": []}, {"question_id": 1149, "answer_sql": ["SELECT CASE WHEN COUNT(CASE WHEN SEX = 'M' AND Admission = '+' THEN ID ELSE NULL END) > COUNT(CASE WHEN SEX = 'M' AND Admission = '-' THEN ID ELSE NULL END) THEN 'In-Patient' ELSE 'Outpatient' END AS Gender, (COUNT(CASE WHEN SEX = 'M' AND Admission = '+' THEN ID ELSE NULL END) - COUNT(CASE WHEN SEX = 'M' AND Admission = '-' THEN ID ELSE NULL END)) / COUNT(CASE WHEN SEX = 'M' AND Admission = '+' THEN ID ELSE NULL END) * 100 AS DeviationPercentage FROM Patient WHERE SEX = 'M';", "SELECT (COUNT(CASE WHEN SEX = 'M' AND Admission = '+' THEN ID ELSE NULL END) - COUNT(CASE WHEN SEX = 'M' AND Admission = '-' THEN ID ELSE NULL END)) * 100 / ( COUNT(CASE WHEN SEX = 'M' AND Admission = '+' THEN ID ELSE NULL END) + COUNT(CASE WHEN SEX = 'M' AND Admission = '-' THEN ID ELSE NULL END) ) AS deviation_percentage FROM Patient WHERE SEX = 'M';", "SELECT (COUNT(CASE WHEN SEX = 'M' AND Admission = '+' THEN ID ELSE NULL END) - COUNT(CASE WHEN SEX = 'M' AND Admission = '-' THEN ID ELSE NULL END)) / (COUNT(CASE WHEN SEX = 'M' AND Admission = '+' THEN ID ELSE NULL END) + COUNT(CASE WHEN SEX = 'M' AND Admission = '-' THEN ID ELSE NULL END)) * 100 AS DeviationPercentage FROM Patient"]}, {"question_id": 1150, "answer_sql": ["SELECT CAST(COUNT(CASE WHEN T1.SEX = 'F' AND T1.Birthday > '1930' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.SEX) AS Percentage FROM Patient AS T1 JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND T1.Birthday > '1930';"]}, {"question_id": 1151, "answer_sql": []}, {"question_id": 1152, "answer_sql": []}, {"question_id": 1153, "answer_sql": ["SELECT DISTINCT T2.Date FROM Patient AS T1 JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID = 30609;", "SELECT T2.Date, T1.Diagnosis FROM Examination AS T1 JOIN Patient AS T3 ON T1.ID = T3.ID JOIN Laboratory AS T2 ON T2.ID = T1.ID WHERE T3.ID = 30609 ORDER BY T2.Date;"]}, {"question_id": 1154, "answer_sql": ["SELECT Patient.SEX, Patient.Birthday, Examination.`Examination Date`, Examination.Symptoms FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Patient.ID = 163109;"]}, {"question_id": 1155, "answer_sql": ["SELECT P.ID, P.SEX, P.Birthday FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.LDH > 500;", "SELECT Patient.ID, Patient.SEX, Patient.Birthday FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.LDH > 500;"]}, {"question_id": 1156, "answer_sql": []}, {"question_id": 1157, "answer_sql": ["SELECT P.ID, P.SEX, P.Diagnosis FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE E.Thrombosis = 2;", "SELECT P.ID, P.SEX, P.Diagnosis FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE E.Thrombosis = 2 AND E.Diagnosis IS NOT NULL;", "SELECT Patient.ID, Patient.SEX, Examination.Diagnosis FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.Thrombosis = 2;", "SELECT Patient.ID, Patient.SEX, Examination.Diagnosis FROM Examination JOIN Patient ON Examination.ID = Patient.ID WHERE Examination.Diagnosis = 2;"]}, {"question_id": 1158, "answer_sql": []}, {"question_id": 1159, "answer_sql": ["SELECT Patient.ID, Patient.SEX, Examination.Diagnosis FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.ALB < 3.5;", "SELECT P.ID, P.SEX, P.Diagnosis FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.ALB < 3.5;", "SELECT Patient.ID, Patient.SEX, Examination.Diagnosis FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.`aCL IgG` < 3.5;"]}, {"question_id": 1160, "answer_sql": ["SELECT CAST(COUNT(CASE WHEN P.SEX = 'F' AND L.TP < '6.0' OR L.TP > '8.5' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(P.ID) AS Percentage FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE P.SEX = 'F' AND L.TP NOT BETWEEN '6.0' AND '8.5';"]}, {"question_id": 1161, "answer_sql": []}, {"question_id": 1162, "answer_sql": []}, {"question_id": 1163, "answer_sql": []}, {"question_id": 1164, "answer_sql": ["SELECT COUNT(DISTINCT p.ID) AS WomenWithMostSeriousThrombosis FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE e.Thrombosis = 1 AND p.SEX = 'F' AND e.`Examination Date` BETWEEN '1997-01-01' AND '1997-12-31';", "SELECT COUNT(DISTINCT P.ID) AS WomenWithMostSeriousThrombosis FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE E.Thrombosis = 1 AND P.SEX = 'F' AND E.`Examination Date` = '1997-12-31';"]}, {"question_id": 1165, "answer_sql": []}, {"question_id": 1166, "answer_sql": ["SELECT MIN(P.BIRTHDAY) AS YoungestPatientBirthday, P.Diagnosis, E.Symptoms FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE E.ID = (SELECT MIN(ID) FROM Examination) ORDER BY P.BIRTHDAY ASC;", "SELECT EXAMINATION.SYMPTOMS, PATIENT.Diagnosis FROM PATIENT JOIN EXAMINATION ON PATIENT.ID = EXAMINATION.ID WHERE PATIENT.BIRTHDAY = (SELECT MIN(BIRTHDAY) FROM PATIENT)"]}, {"question_id": 1167, "answer_sql": []}, {"question_id": 1168, "answer_sql": []}, {"question_id": 1169, "answer_sql": ["SELECT SUM(CASE WHEN T1.SEX = 'M' THEN 1 ELSE 0 END) / SUM(CASE WHEN T1.SEX = 'F' THEN 1 ELSE 0 END) AS Ratio FROM Patient AS T1 JOIN Laboratory AS T2 ON T1.ID = T2.ID JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.UA <= '8.0' AND T1.SEX = 'M' OR T2.UA <= '6.5' AND T1.SEX = 'F';"]}, {"question_id": 1170, "answer_sql": []}, {"question_id": 1171, "answer_sql": ["SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE P.Birthday < '1990-01-01' AND E.`Examination Date` BETWEEN '1990-01-01' AND '1993-12-31';", "SELECT COUNT(P.ID) AS Underage_Patients_Examined FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE P.Birthday < 18 AND E.`Examination Date` BETWEEN '1990-01-01' AND '1993-12-31';"]}, {"question_id": 1172, "answer_sql": ["SELECT COUNT(P.ID) AS MalePatientsWithElevatedTotalBilirubin FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.`T-BIL` > '2.0';"]}, {"question_id": 1173, "answer_sql": ["SELECT MAX(T1.Diagnosis) AS MostCommonIllness FROM Examination T1 JOIN Patient T2 ON T1.ID = T2.ID WHERE T1.`Examination Date` BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY T1.Diagnosis;", "SELECT MAX(T2.Diagnosis) AS MostCommonIllness FROM Examination AS T1 JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.`Examination Date` BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY T1.ID;", "SELECT MAX(T1.Diagnosis) AS MostCommonIllness FROM Examination T1 JOIN Patient T2 ON T1.ID = T2.ID WHERE T1.`Examination Date` BETWEEN '1985-01-01' AND '1995-12-31';", "SELECT MAX(T2.Diagnosis) AS MostCommonIllness FROM Examination AS T1 JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.`Examination Date` BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY T2.Diagnosis;"]}, {"question_id": 1174, "answer_sql": []}, {"question_id": 1175, "answer_sql": ["SELECT P.Birthday, P.Diagnosis, MAX(L.HGB) AS HighestHGB FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON E.ID = L.ID WHERE L.Date = (SELECT MAX(Date) FROM Laboratory) GROUP BY P.ID, P.Birthday, P.Diagnosis ORDER BY P.Birthday ASC LIMIT 1;", "SELECT Patient.SEX, Patient.Birthday, MAX(Laboratory.HGB) AS HighestHGB, Examination.Diagnosis FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.Date = (SELECT MAX(Date) FROM Laboratory) GROUP BY Patient.SEX, Patient.Birthday, Examination.Diagnosis ORDER BY HighestHGB DESC LIMIT 1;", "SELECT P.SEX, P.Birthday, P.Description, L.HGB, E.Diagnosis FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.HGB = (SELECT MAX(HGB) FROM Laboratory) ORDER BY P.SEX, P.Birthday, P.Description, L.HGB DESC LIMIT 1;"]}, {"question_id": 1176, "answer_sql": ["SELECT `ANA Pattern`, `ANA` FROM Examination WHERE ID = 3605340 AND `Examination Date` = '1996-12-02';", "SELECT `Examination Date`, `aCL IgG` FROM Examination JOIN Patient ON Examination.ID = Patient.ID JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Patient.ID = 3605340 AND `Examination Date` = '1996-12-02';"]}, {"question_id": 1177, "answer_sql": ["SELECT T1.`T-CHO` AS cholesterol_level FROM Laboratory AS T1 JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.ID = 2927464 AND T1.Date = '1995-09-04' AND T1.`T-CHO` < 250;", "SELECT CASE WHEN TP < 250 THEN 'Yes' ELSE 'No' END AS TotalCholesterolStatus FROM Laboratory WHERE ID = 2927464 AND Date = '1995-09-04';", "SELECT CASE WHEN T2.`T-CHO` < 250 THEN 'Yes' ELSE 'No' END AS TotalCholesterolStatus FROM Examination T1 JOIN Laboratory T2 ON T1.ID = T2.ID WHERE T1.ID = 2927464 AND T1.`Examination Date` = '1995-09-04';"]}, {"question_id": 1178, "answer_sql": ["SELECT SEX FROM Patient WHERE Diagnosis = 'AORTITIS' AND `First Date` IS NOT NULL LIMIT 1;", "SELECT DISTINCT P.SEX FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE E.Diagnosis = 'AORTITIS' ORDER BY P.SEX ASC LIMIT 1;"]}, {"question_id": 1179, "answer_sql": ["SELECT T2.`aCL IgM` FROM Patient AS T1 JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.Description = '1994-02-19' AND T1.Diagnosis = 'SLE' AND T2.`Examination Date` = '1993-11-12';", "SELECT Examination.`aCL IgM` FROM Examination JOIN Patient ON Examination.ID = Patient.ID JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Patient.Description = '1994-02-19' AND Examination.Diagnosis = 'SLE' AND Examination.`Examination Date` = '1993-11-12';"]}, {"question_id": 1180, "answer_sql": ["SELECT T1.SEX FROM Patient AS T1 JOIN Examination AS T2 ON T1.ID = T2.ID JOIN Laboratory AS T3 ON T3.ID = T1.ID AND T3.Date = '1992-06-12' WHERE T3.GPT = '9' AND T1.SEX = 'M';"]}, {"question_id": 1181, "answer_sql": []}, {"question_id": 1182, "answer_sql": ["SELECT COUNT(L.ID) AS Total_Laboratory_Tests FROM Examination E JOIN Patient P ON E.ID = P.ID JOIN Laboratory L ON L.ID = P.ID WHERE E.`Examination Date` = '1995-01-01' AND P.Diagnosis = 'SJS';"]}, {"question_id": 1183, "answer_sql": ["SELECT p.Diagnosis FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE e.`Examination Date` = '1997-01-27' AND p.Diagnosis = 'SLE' AND p.`First Date` = '1997-01-27';", "SELECT P.Diagnosis FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE E.Diagnosis = 'SLE' AND E.`Examination Date` = '1997-01-27' AND P.`First Date` = (SELECT MIN(ID) FROM Examination WHERE Diagnosis = 'SLE');"]}, {"question_id": 1184, "answer_sql": ["SELECT Symptoms FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Birthday = '1959-03-01' AND `Examination Date` = '1993-09-27';", "SELECT Symptoms FROM Examination JOIN Patient ON Examination.ID = Patient.ID JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Patient.Birthday = '1959-03-01' AND Laboratory.Date = '1993-09-27'"]}, {"question_id": 1185, "answer_sql": ["SELECT T2.ID, (SUM(CASE WHEN T2.Date LIKE '1981-12-%' THEN T2.`T-CHO` ELSE 0 END) - SUM(CASE WHEN T2.Date LIKE '1981-11-%' THEN T2.`T-CHO` ELSE 0 END)) / SUM(CASE WHEN T2.Date LIKE '1981-11-%' THEN T2.`T-CHO` ELSE 0 END) AS DecreaseRate FROM Laboratory AS T2 JOIN Patient AS T1 ON T2.ID = T1.ID WHERE T1.Birthday = '1959-02-18' GROUP BY T2.ID ORDER BY DecreaseRate DESC;", "SELECT (SUM(CASE WHEN T1.Date LIKE '1981-11-%' THEN T1.`T-CHO` ELSE 0 END) - SUM(CASE WHEN T1.Date LIKE '1981-12-%' THEN T1.`T-CHO` ELSE 0 END)) / SUM(CASE WHEN T1.Date LIKE '1981-11-%' THEN 1 ELSE 0 END) AS DecreaseRate FROM Laboratory AS T1 JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.Birthday = '1959-02-18';", "SELECT (SUM(CASE WHEN T1.Date LIKE '1981-12-%' THEN T1.`T-CHO` ELSE 0 END) - SUM(CASE WHEN T1.Date LIKE '1981-11-%' THEN T1.`T-CHO` ELSE 0 END)) / SUM(CASE WHEN T1.Date LIKE '1981-11-%' THEN T1.`T-CHO` ELSE 0 END) * 100 AS DecreaseRate FROM Laboratory AS T1 JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.Birthday = '1959-02-18';"]}, {"question_id": 1186, "answer_sql": ["SELECT p.ID FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE e.Diagnosis = 'Behcet' AND e.`Examination Date` BETWEEN '1997-01-01' AND '1997-12-31';", "SELECT P.ID FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE E.Diagnosis = 'Behcet' AND E.`Examination Date` BETWEEN '1970-01-01' AND '1997-12-31';", "SELECT DISTINCT P.ID FROM Patient P JOIN Examination EX ON P.ID = EX.ID JOIN Laboratory L ON EX.ID = L.ID WHERE EX.Diagnosis = 'Behcet' AND EX.`Examination Date` BETWEEN '1970-01-01' AND '1997-12-31';", "SELECT DISTINCT P.ID FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON E.ID = L.ID WHERE P.Diagnosis = 'Behcet' AND E.`Examination Date` BETWEEN '1970-01-01' AND '1997-12-31';"]}, {"question_id": 1187, "answer_sql": ["SELECT P.ID FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE E.`Examination Date` BETWEEN '1987-07-06' AND '1996-01-31' AND L.GPT > 30 AND L.ALB < 4 GROUP BY P.ID ORDER BY P.ID;", "SELECT P.ID FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE E.`Examination Date` BETWEEN '1987-07-06' AND '1996-01-31' AND E.`aCL IgG` > 30 AND E.`aCL IgM` > 30 AND E.`aCL IgA` > 30 AND E.`aCL IgG` < 4 AND E.`aCL IgM` < 4 AND E.`aCL IgA` < 4 ORDER BY P.ID;"]}, {"question_id": 1188, "answer_sql": []}, {"question_id": 1189, "answer_sql": ["SELECT COUNT(DISTINCT T1.ID) \nFROM Examination AS T1 \nJOIN Patient AS T2 ON T1.ID = T2.ID \nWHERE T1.Thrombosis = 2 AND T1.`ANA Pattern` = 'S' AND T1.`aCL IgM` > (SELECT AVG(`aCL IgM`) FROM Examination WHERE Thrombosis = 2 AND `ANA Pattern` = 'S') * 1.2", "SELECT COUNT(DISTINCT T1.ID) AS patient_count \nFROM Examination T1 \nJOIN Patient T2 ON T1.ID = T2.ID \nWHERE T1.Thrombosis = 2 \nAND T1.ANA = 'S' \nAND T1.`aCL IgM` > (SELECT AVG(`aCL IgM`) FROM Examination WHERE Thrombosis = 2 AND ANA = 'S') * 1.2"]}, {"question_id": 1190, "answer_sql": ["SELECT CAST(COUNT(CASE WHEN UA <= 6.5 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(CASE WHEN `U-PRO` > 0 AND `U-PRO` < 30 THEN 1 ELSE NULL END) AS Percentage FROM Laboratory WHERE `U-PRO` > 0 AND `U-PRO` < 30"]}, {"question_id": 1191, "answer_sql": ["SELECT CAST(SUM(CASE WHEN T1.SEX = 'M' AND T1.`First Date` = '1981' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.ID) AS Percentage FROM Patient AS T1 JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T1.`First Date` = '1981' AND T2.Diagnosis = 'BEHCET';"]}, {"question_id": 1192, "answer_sql": ["SELECT P.ID, P.SEX, P.Birthday, P.Description, P.`First Date`, P.Admission, P.Diagnosis, L.ID, L.Date, L.GOT, L.GPT, L.LDH, L.ALP, L.TP, L.ALB, L.UA, L.UN, L.CRE, L.`T-BIL`, L.`T-CHO`, L.TG, L.CPK, L.GLU, L.WBC, L.RBC, L.HGB, L.HCT, L.PLT, L.PT, L.APTT, L.FG, L.PIC, L.TAT, L.TAT2, L.`U-PRO`, L.IGG, L.IGA, L.IGM, L.CRP, L.RA, L.RF, L.C3, L.C4, L.RNP, L.SM, L.SC170, L.SSA, L.SSB, L.CENTROMEA, L.DNA, L.`DNA-II` FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID AND L.Date LIKE '1991-10%' WHERE E.Diagnosis = 'Thrombosis' AND L.`T-BIL` < 2.0;"]}, {"question_id": 1193, "answer_sql": ["SELECT COUNT(DISTINCT P.ID) AS Women_Born_1980_1989 FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE P.SEX = 'F' AND P.BIRTHDAY BETWEEN '1980-01-01' AND '1989-12-31';", "SELECT COUNT(DISTINCT P.ID) AS Women_Born_1980_1989 FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE P.SEX = 'F' AND P.BIRTHDAY BETWEEN '1980-01-01' AND '1989-12-31' AND E.`ANA Pattern` != 'p';", "SELECT COUNT(*) FROM Patient P WHERE P.SEX = 'F' AND P.BIRTHDAY BETWEEN '1980-01-01' AND '1989-12-31' AND P.ID NOT IN ( SELECT E.ID FROM Examination E WHERE E.`ANA Pattern` = 'p' );", "SELECT COUNT(*) FROM Patient P WHERE P.SEX = 'F' AND P.Birthday BETWEEN '1980-01-01' AND '1989-12-31' AND P.ID IN ( SELECT E.ID FROM Examination E WHERE E.ANA = 'p' );"]}, {"question_id": 1194, "answer_sql": ["SELECT P.SEX FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE E.Diagnosis = 'PSS' AND L.CRP > 2 AND L.CRE = 1 AND L.LDH = 123;"]}, {"question_id": 1195, "answer_sql": ["SELECT AVG(Laboratory.ALB) AS AverageBloodAlbuminLevel FROM Laboratory JOIN Patient ON Laboratory.ID = Patient.ID JOIN Examination ON Patient.ID = Examination.ID WHERE Patient.SEX = 'F' AND Laboratory.PLT > 400 AND Examination.Diagnosis = 'SLE';", "SELECT AVG(LAB.ALB) AS AverageBloodAlbuminLevel\nFROM Patient P\nJOIN Examination E ON P.ID = E.ID\nJOIN Laboratory LAB ON LAB.ID = E.ID\nWHERE P.SEX = 'F' AND E.Thrombosis = 1 AND E.Symptoms LIKE '%SLE%' AND LAB.PLT > 400;"]}, {"question_id": 1196, "answer_sql": ["SELECT MAX(symptoms) AS MostCommonSign FROM Examination WHERE Diagnosis = 'SLE';", "SELECT MAX(Examination.Symptoms) AS MostCommonSign FROM Examination JOIN Patient ON Examination.ID = Patient.ID WHERE Examination.Diagnosis = 'SLE';"]}, {"question_id": 1197, "answer_sql": ["SELECT p.Description, p.Diagnosis FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE p.ID = 48473;", "SELECT Patient.Description, Examination.`Examination Date` FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Patient.ID = 48473;", "SELECT `First Date`, Diagnosis FROM Patient WHERE ID = 48473;"]}, {"question_id": 1198, "answer_sql": ["SELECT COUNT(DISTINCT P.ID) AS FemalePatientsWithAPS FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE P.SEX = 'F' AND E.Diagnosis = 'APS';"]}, {"question_id": 1199, "answer_sql": ["SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID AND L.Date = '1997-01-01' WHERE L.TP NOT BETWEEN 6 AND 8.5;"]}, {"question_id": 1200, "answer_sql": ["SELECT SUM(CASE WHEN Diagnosis LIKE '%SLE%' THEN 1 ELSE 0 END) / SUM(CASE WHEN Diagnosis LIKE '%ITP%' THEN 1 ELSE 0 END) * 100 FROM Examination WHERE Diagnosis LIKE '%SLE%'", "SELECT (SUM(CASE WHEN Diagnosis LIKE '%SLE%' THEN 1 ELSE 0 END) / COUNT(DISTINCT Diagnosis)) * 100 FROM Examination WHERE Diagnosis LIKE '%ITP%' AND Diagnosis LIKE '%SLE%'", "SELECT (SUM(CASE WHEN Diagnosis LIKE '%ITP%' THEN 1 ELSE 0 END) / SUM(CASE WHEN Diagnosis LIKE '%SLE%' THEN 1 ELSE 0 END)) * 100 FROM Examination WHERE Diagnosis LIKE '%SLE%'", "SELECT (SUM(CASE WHEN Diagnosis LIKE '%SLE%' THEN 1 ELSE 0 END) * 100) / SUM(CASE WHEN Diagnosis LIKE '%ITP%' THEN 1 ELSE 0 END) FROM Examination WHERE Diagnosis LIKE '%SLE%' AND Thrombosis = 1;"]}, {"question_id": 1201, "answer_sql": []}, {"question_id": 1202, "answer_sql": ["SELECT COUNT(P.ID) AS MalePatientsWithoutHospitalStay FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE P.SEX = 'M' AND E.`Examination Date` BETWEEN '1995-01-01' AND '1997-12-31' AND E.Diagnosis = 'BEHCET' AND P.Admission = '-'"]}, {"question_id": 1203, "answer_sql": ["SELECT COUNT(DISTINCT P.ID) AS Female_Patients_with_WBC_below_3_5 FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE P.SEX = 'F' AND L.WBC < 3.5;", "SELECT COUNT(DISTINCT P.ID) AS Female_Patients_With_WBC_Below_3_5 FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE P.SEX = 'F' AND E.`aCL IgG` < 3.5;"]}, {"question_id": 1204, "answer_sql": []}, {"question_id": 1205, "answer_sql": ["SELECT 'M' AS Sex, UA FROM Laboratory WHERE ID = 57266 AND UA > 8.0 UNION SELECT 'F' AS Sex, UA FROM Laboratory WHERE ID = 57266 AND UA > 6.5;", "SELECT 'M' AS Sex, UA FROM Laboratory WHERE ID = 57266 AND Date = (SELECT MIN(Date) FROM Laboratory WHERE ID = 57266) UNION SELECT 'F' AS Sex, UA FROM Laboratory WHERE ID = 57266 AND Date = (SELECT MIN(Date) FROM Laboratory WHERE ID = 57266)", "SELECT 'Y' AS result FROM Examination JOIN Patient ON Examination.ID = Patient.ID JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Examination.ID = 57266 AND Laboratory.UA > 8.0 AND Patient.SEX = 'M' UNION ALL SELECT 'N' AS result FROM Examination JOIN Patient ON Examination.ID = Patient.ID JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Examination.ID = 57266 AND Laboratory.UA > 6.5 AND Patient.SEX = 'F';"]}, {"question_id": 1206, "answer_sql": ["SELECT Examination.`Examination Date` FROM Examination JOIN Patient ON Examination.ID = Patient.ID JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Patient.ID = 48473 AND Laboratory.GOT > 60;", "SELECT Examination.`Examination Date` FROM Examination JOIN Patient ON Examination.ID = Patient.ID JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Patient.ID = 48473 AND Examination.`Examination Date` = (SELECT Date FROM Laboratory WHERE ID = (SELECT ID FROM Laboratory WHERE GOT > 60) AND Date = (SELECT MAX(Date) FROM Laboratory WHERE ID = (SELECT ID FROM Laboratory WHERE GOT > 60)))"]}, {"question_id": 1207, "answer_sql": ["SELECT P.SEX, P.Birthday FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE E.`Examination Date` BETWEEN '1994-01-01' AND '1994-12-31' AND E.`aCL IgG` < 60 AND E.`aCL IgM` < 60 AND E.`aCL IgA` < 60 AND E.`ANA` < 60 AND E.`ANA Pattern` = 'Negative' AND E.`aCL IgG` IS NOT NULL AND E.`aCL IgM` IS NOT NULL AND E.`aCL IgA` IS NOT NULL AND E.`ANA` IS NOT NULL AND E.`ANA Pattern` IS NOT NULL AND E.`aCL IgG` != 0 AND E.`aCL IgM` != 0 AND E.`aCL IgA` != 0 AND E.`ANA` != 0 AND E.`ANA Pattern` != '';"]}, {"question_id": 1208, "answer_sql": ["SELECT P.ID FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.GPT > 60;", "SELECT P.ID FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.Date BETWEEN '2020-01-01' AND '2020-12-31' AND L.GPT >= 60;"]}, {"question_id": 1209, "answer_sql": ["SELECT P.Diagnosis FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON L.ID = E.ID WHERE L.GPT > 60 ORDER BY P.Birthday ASC", "SELECT P.Diagnosis FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON L.ID = P.ID WHERE L.GPT > 60 ORDER BY P.Birthday DESC;"]}, {"question_id": 1210, "answer_sql": ["SELECT AVG(LDH) AS AverageIndex FROM Laboratory WHERE LDH < 500 GROUP BY ID;", "SELECT AVG(LDH) AS AverageIndex FROM Laboratory WHERE LDH < 500 GROUP BY LDH;"]}, {"question_id": 1211, "answer_sql": []}, {"question_id": 1212, "answer_sql": ["SELECT P.ID, P.Admission, E.Diagnosis FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.ALP < 300 AND E.Diagnosis IN ( SELECT Diagnosis FROM Examination WHERE Admission = '+' )", "SELECT P.ID, P.SEX, P.Birthday, P.Description, P.`First Date`, P.Admission, P.Diagnosis, E.Diagnosis AS ExaminationDiagnosis, E.Thrombosis, L.ALP, CASE WHEN E.Thrombosis = 1 THEN 'Inpatient' ELSE 'Outpatient' END AS TreatmentType FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID AND L.Date = E.`Examination Date` WHERE L.ALP < 300;", "SELECT P.ID, P.Admission, E.Diagnosis FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID AND L.Date = (SELECT MAX(Date) FROM Laboratory WHERE ID = P.ID) WHERE L.ALP < 300", "SELECT P.ID, P.Admission, E.Diagnosis FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.ALP < 300", "SELECT P.ID, P.Admission, E.Diagnosis, E.Thrombosis FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.ALP < 300"]}, {"question_id": 1213, "answer_sql": ["SELECT P.ID FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE P.Birthday = '1982-04-01' AND E.`aCL IgG` < 300;", "SELECT P.ID FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE P.Birthday = '1982-04-01' AND E.`Examination Date` = '1982-04-01' AND E.`aCL IgA` < 300;"]}, {"question_id": 1214, "answer_sql": ["SELECT Patient.ID, Patient.SEX, Patient.Birthday FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.`aCL IgG` < 6.0;", "SELECT P.ID, P.SEX, P.Birthday FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.TP < 6.0;", "SELECT P.ID, P.SEX, P.Birthday FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.TP < 6.0;"]}, {"question_id": 1215, "answer_sql": ["SELECT P.ID, (TP - 8.5) AS TP_Index_Deviation FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON E.ID = L.ID WHERE P.SEX = 'F' AND L.TP > 8.5;", "SELECT Patient.ID AS TP_index_deviation FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.SEX = 'F' AND Laboratory.TP > 8.5"]}, {"question_id": 1216, "answer_sql": ["SELECT P.ID, P.Birthday FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON L.ID = E.ID WHERE P.SEX = 'M' AND L.ALB NOT BETWEEN 3.5 AND 5.5 ORDER BY P.Birthday DESC;"]}, {"question_id": 1217, "answer_sql": []}, {"question_id": 1218, "answer_sql": ["SELECT CAST(COUNT(CASE WHEN SEX = 'F' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(CASE WHEN SEX = 'F' THEN 1 ELSE NULL END) AS Percentage FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE UA > 8.0 OR (UA > 6.5 AND SEX = 'F');", "SELECT CAST(COUNT(CASE WHEN SEX = 'F' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(*) FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE UA > 8.0 AND SEX = 'F' UNION ALL SELECT CAST(COUNT(CASE WHEN SEX = 'F' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(*) FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE UA > 6.5 AND SEX = 'F';"]}, {"question_id": 1219, "answer_sql": ["SELECT AVG(Laboratory.UA) AS AverageUAIndex FROM Laboratory JOIN Patient ON Laboratory.ID = Patient.ID WHERE Laboratory.UA < 8.0 AND Patient.SEX = 'M' OR (Laboratory.UA < 6.5 AND Patient.SEX = 'F') GROUP BY Laboratory.ID, Laboratory.Date ORDER BY Laboratory.Date DESC LIMIT 1;", "SELECT AVG(L.UA) AS AverageUA FROM Laboratory L JOIN Patient P ON L.ID = P.ID WHERE L.UA < 8.0 AND P.SEX = 'M' OR (L.UA < 6.5 AND P.SEX = 'F') GROUP BY L.ID, L.Date HAVING MAX(L.Date) = (SELECT MAX(Date) FROM Laboratory WHERE ID = P.ID);", "SELECT AVG(L.UA) AS AverageUA FROM Laboratory L JOIN Patient P ON L.ID = P.ID WHERE L.UA < 8.0 AND P.SEX = 'M' OR L.UA < 6.5 AND P.SEX = 'F' ORDER BY P.ID DESC LIMIT 1;", "SELECT AVG(L.UA) AS Average_UA FROM Laboratory L JOIN Examination E ON L.ID = E.ID JOIN Patient P ON E.ID = P.ID WHERE L.Date = (SELECT MAX(Date) FROM Laboratory WHERE ID = P.ID) AND L.UA < 8.0 AND P.SEX = 'M' UNION ALL SELECT AVG(L.UA) AS Average_UA FROM Laboratory L JOIN Examination E ON L.ID = E.ID JOIN Patient P ON E.ID = P.ID WHERE L.Date = (SELECT MAX(Date) FROM Laboratory WHERE ID = P.ID) AND L.UA < 6.5 AND P.SEX = 'F';", "SELECT AVG(Laboratory.UA) AS AverageUAIndex FROM Laboratory JOIN Examination ON Laboratory.ID = Examination.ID JOIN Patient ON Examination.ID = Patient.ID WHERE Laboratory.UA < 8.0 AND Patient.SEX = 'M' OR Laboratory.UA < 6.5 AND Patient.SEX = 'F' GROUP BY Examination.ID;"]}, {"question_id": 1220, "answer_sql": ["SELECT Patient.ID, Patient.SEX, Patient.Birthday FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.ID IN ( SELECT ID FROM Laboratory WHERE Date = (SELECT MAX(Date) FROM Laboratory) AND UN = 29 );"]}, {"question_id": 1221, "answer_sql": ["SELECT P.ID, P.SEX, P.Birthday FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE P.Diagnosis = 'RA' AND L.UN < 30;"]}, {"question_id": 1222, "answer_sql": ["SELECT COUNT(T1.ID) AS MalePatientsWithCREOutOfRange FROM Patient AS T1 JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.CRE >= 1.5;", "SELECT COUNT(P.ID) AS MalePatientsWithCREOutOfRange FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.CRE > 1.5;", "SELECT COUNT(DISTINCT P.ID) AS MalePatientsWithCREOutOfRange FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.CRE > 1.5;", "SELECT COUNT(DISTINCT P.ID) AS MalePatientsWithCREOutOfRange FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.CRE >= 1.5;"]}, {"question_id": 1223, "answer_sql": ["SELECT CASE \n    WHEN SUM(CASE WHEN T2.SEX = 'M' THEN 1 ELSE 0 END) > SUM(CASE WHEN T2.SEX = 'F' THEN 1 ELSE 0 END) \n    AND SUM(T3.CRE) >= 1.5 THEN 'True' \n    ELSE 'False' \nEND AS Result \nFROM Examination AS T1 \nJOIN Patient AS T2 ON T1.ID = T2.ID \nJOIN Laboratory AS T3 ON T1.ID = T3.ID \nGROUP BY T1.ID, T2.SEX, T3.CRE \nHAVING SUM(T3.CRE) >= 1.5;", "SELECT CASE WHEN SUM(CASE WHEN SEX = 'M' THEN 1 ELSE 0 END) > SUM(CASE WHEN SEX = 'F' THEN 1 ELSE 0 END) AND CRE >= 1.5 THEN 'True' ELSE 'False' END AS Result FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE CRE >= 1.5 GROUP BY CRE;", "SELECT CASE WHEN SUM(CASE WHEN SEX = 'M' THEN 1 ELSE 0 END) > SUM(CASE WHEN SEX = 'F' THEN 1 ELSE 0 END) AND CRE >= 1.5 THEN 'True' ELSE 'False' END AS Result FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE CRE >= 1.5", "SELECT CASE WHEN SUM(CASE WHEN SEX = 'M' THEN 1 ELSE 0 END) > SUM(CASE WHEN SEX = 'F' THEN 1 ELSE 0 END) AND SUM(CRE >= 1.5) > 0 THEN 'True' ELSE 'False' END AS Result FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE CRE >= 1.5;", "SELECT CASE WHEN SUM(CASE WHEN SEX = 'M' THEN 1 ELSE 0 END) > SUM(CASE WHEN SEX = 'F' THEN 1 ELSE 0 END) AND CRE >= 1.5 THEN 'True' ELSE 'False' END AS Result FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE CRE >= 1.5 GROUP BY CRE"]}, {"question_id": 1224, "answer_sql": []}, {"question_id": 1225, "answer_sql": ["SELECT P.SEX, COUNT(L.ID) AS Total_Patients FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.`T-BIL` >= 2.0 GROUP BY P.SEX;", "SELECT P.SEX, COUNT(*) AS PatientCount FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.`T-BIL` >= 2.0 GROUP BY P.SEX;", "SELECT P.SEX, COUNT(L.ID) AS Total_Patients FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.`T-CHO` > 2.0 GROUP BY P.SEX;"]}, {"question_id": 1226, "answer_sql": []}, {"question_id": 1227, "answer_sql": []}, {"question_id": 1228, "answer_sql": ["SELECT P.ID, P.Diagnosis FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.TG > 300;", "SELECT P.ID, P.Diagnosis FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.TG > 300 AND L.TG < 1000;"]}, {"question_id": 1229, "answer_sql": []}, {"question_id": 1230, "answer_sql": ["SELECT DISTINCT Patient.ID FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.Admission = '-' AND Laboratory.CPK < 250;"]}, {"question_id": 1231, "answer_sql": ["SELECT COUNT(P.ID) AS MalePatientsWithCPBRange FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE P.Birthday BETWEEN '1936-01-01' AND '1956-12-31' AND P.SEX = 'M' AND L.CPK >= 250;", "SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON L.ID = P.ID WHERE P.SEX = 'M' AND L.CPK >= 250 AND P.Birthday BETWEEN '1936-01-01' AND '1956-12-31';"]}, {"question_id": 1232, "answer_sql": []}, {"question_id": 1233, "answer_sql": ["SELECT P.ID, L.GLU FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE P.Description >= '1991-01-01' AND L.Date = (SELECT MIN(Date) FROM Laboratory WHERE ID = P.ID) AND L.GLU < 180;", "SELECT P.ID, L.GLU FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE P.`First Date` >= '1991-01-01' AND L.Date >= '1991-01-01' AND L.GLU < 180 GROUP BY P.ID, L.GLU ORDER BY P.ID;", "SELECT P.ID, L.GLU FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE P.`First Date` >= '1991-01-01' AND L.Date >= '1991-01-01' AND L.GLU < 180;", "SELECT P.ID, L.GLU FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE P.Description >= '1991-01-01' AND L.GLU < 180 GROUP BY P.ID, L.GLU;", "SELECT P.ID, L.GLU FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE P.Description >= '1991-01-01' AND L.GLU < 180 GROUP BY P.ID, L.GLU HAVING COUNT(*) = 1;"]}, {"question_id": 1234, "answer_sql": ["SELECT P.ID, P.SEX, P.Birthday FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.WBC < 3.5 OR L.WBC > 9.0 GROUP BY P.SEX, P.Birthday ORDER BY DATE(P.Birthday) ASC;"]}, {"question_id": 1235, "answer_sql": ["SELECT P.ID, P.Birthday, P.Description FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.RBC < 3.5 AND P.Birthday IS NOT NULL AND E.Diagnosis IS NOT NULL AND E.Diagnosis != '' ORDER BY P.Birthday ASC;", "SELECT P.ID, P.Birthday FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE E.`aCL IgG` < 3.5 ORDER BY P.Birthday;", "SELECT P.ID, P.Birthday FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE E.`aCL IgG` < 3.5;", "SELECT P.ID, P.Birthday, P.Description FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON E.ID = L.ID WHERE L.RBC < 3.5 GROUP BY P.ID, P.Birthday, P.Description ORDER BY P.Birthday;", "SELECT P.ID, P.Birthday FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE E.Diagnosis = 'Thrombosis' AND E.`aCL IgG` < 3.5"]}, {"question_id": 1236, "answer_sql": ["SELECT P.ID, P.SEX, P.Birthday, P.Description, P.`First Date`, P.Admission, P.Diagnosis, L.RBC, E.Diagnosis AS Examination_Diagnosis FROM Patient P JOIN Laboratory L ON P.ID = L.ID JOIN Examination E ON P.ID = E.ID WHERE P.SEX = 'F' AND P.Birthday >= DATE('now', '-50 years') AND L.RBC IN (3.5, 6.0) AND E.Diagnosis = 'Admitted';"]}, {"question_id": 1237, "answer_sql": []}, {"question_id": 1238, "answer_sql": ["SELECT P.ID, P.SEX FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE P.Diagnosis = 'SLE' AND L.HGB BETWEEN 10 AND 17 ORDER BY P.Birthday ASC LIMIT 1;", "SELECT P.ID, P.SEX FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE E.Diagnosis = 'SLE' AND E.`aCL IgG` = 0 AND E.`aCL IgM` = 0 AND E.`aCL IgA` = 0 AND E.`ANA Pattern` = 'Normal' AND E.`aCL IgG` < 10 AND E.`aCL IgG` > 17 ORDER BY P.Birthday ASC LIMIT 1;"]}, {"question_id": 1239, "answer_sql": []}, {"question_id": 1240, "answer_sql": ["SELECT AVG(HCT) AS Average_HCT FROM Laboratory WHERE Date LIKE '1991%' AND HCT < 29;", "SELECT AVG(Laboratory.HCT) AS Average_HCT FROM Laboratory WHERE Laboratory.Date LIKE '1991%' GROUP BY Laboratory.Date HAVING AVG(Laboratory.HCT) < 29;"]}, {"question_id": 1241, "answer_sql": ["SELECT COUNT(CASE WHEN PLT < 100 THEN 1 ELSE NULL END) AS lower_than_normal, COUNT(CASE WHEN PLT > 400 THEN 1 ELSE NULL END) AS higher_than_normal FROM Laboratory WHERE PLT < 100;"]}, {"question_id": 1242, "answer_sql": ["SELECT P.ID, P.SEX, P.Birthday, P.Description, P.`First Date`, P.Admission, P.Diagnosis FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON E.ID = L.ID AND L.Date LIKE '1984%' WHERE E.Thrombosis = 0 AND P.Birthday < DATE('now', '-50 years') AND L.PLT BETWEEN 100 AND 400;"]}, {"question_id": 1243, "answer_sql": []}, {"question_id": 1244, "answer_sql": []}, {"question_id": 1245, "answer_sql": ["SELECT COUNT(T1.ID) AS Count FROM Examination AS T1 JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.`Examination Date` > '1997-01-01' AND T2.APTT < 45;"]}, {"question_id": 1246, "answer_sql": ["SELECT COUNT(DISTINCT E.ID) AS CountOfPatientsWithMildThrombosis FROM Examination E JOIN Patient P ON E.ID = P.ID JOIN Laboratory L ON E.ID = L.ID WHERE E.Thrombosis = 3 AND L.APTT > 45 AND E.ID NOT IN ( SELECT ID FROM Examination WHERE Thrombosis = 3 );", "SELECT COUNT(DISTINCT E.ID) AS CountOfMildThrombosis FROM Examination E JOIN Patient P ON E.ID = P.ID JOIN Laboratory L ON E.ID = L.ID WHERE E.Thrombosis = 3 AND L.APTT > 45 GROUP BY E.ID;"]}, {"question_id": 1247, "answer_sql": ["SELECT COUNT(DISTINCT E.ID) FROM Examination E JOIN Patient P ON E.ID = P.ID JOIN Laboratory L ON E.ID = L.ID WHERE P.SEX = 'M' AND L.WBC BETWEEN 3.5 AND 9.0 AND (L.FG <= 150 OR L.FG >= 450);"]}, {"question_id": 1248, "answer_sql": ["SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE P.Birthday > '1980-01-01' AND L.FG NOT BETWEEN 150 AND 450;", "SELECT COUNT(DISTINCT P.ID) AS num_patients FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE P.Birthday > '1980-01-01' AND L.FG BETWEEN 150 AND 450;"]}, {"question_id": 1249, "answer_sql": ["SELECT DISTINCT P.Diagnosis FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.`U-PRO` >= 30;"]}, {"question_id": 1250, "answer_sql": ["SELECT P.ID FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.`U-PRO` BETWEEN 0 AND 30 AND P.Diagnosis = 'SLE';", "SELECT P.ID FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.`U-PRO` BETWEEN 0 AND 30 AND E.Diagnosis = 'SLE';", "SELECT P.ID FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID AND L.Date = '2023-01-01' WHERE L.`U-PRO` BETWEEN 0 AND 30 AND E.Diagnosis = 'SLE';"]}, {"question_id": 1251, "answer_sql": ["SELECT COUNT(DISTINCT P.ID) AS Abortion_Patients FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE E.`aCL IgG` < 900 AND E.Symptoms = 'abortion';"]}, {"question_id": 1252, "answer_sql": ["SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.IGG BETWEEN 900 AND 2000 AND E.Symptoms IS NOT NULL;", "SELECT COUNT(DISTINCT E.ID) AS Num_Patients FROM Examination E JOIN Patient P ON E.ID = P.ID WHERE E.`aCL IgG` BETWEEN 900 AND 2000 AND E.Symptoms IS NOT NULL;"]}, {"question_id": 1253, "answer_sql": ["SELECT P.Diagnosis FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE E.`aCL IgA` BETWEEN 80 AND 500 ORDER BY E.`aCL IgA` DESC LIMIT 1;"]}, {"question_id": 1254, "answer_sql": []}, {"question_id": 1255, "answer_sql": ["SELECT Diagnosis FROM Examination JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Laboratory.IGM NOT BETWEEN 40 AND 400 GROUP BY Diagnosis ORDER BY COUNT(Diagnosis) DESC LIMIT 1;", "SELECT MAX(Diagnosis) AS MostCommonDisease FROM Examination WHERE `aCL IgM` NOT BETWEEN 40 AND 400;", "SELECT MAX(Diagnosis) AS MostCommonDisease FROM Examination WHERE `aCL IgM` NOT BETWEEN 40 AND 400 GROUP BY Diagnosis;"]}, {"question_id": 1256, "answer_sql": ["SELECT COUNT(DISTINCT P.ID) FROM Patient P LEFT JOIN Examination E ON P.ID = E.ID LEFT JOIN Laboratory L ON P.ID = L.ID WHERE L.CRP LIKE '+' OR L.CRP LIKE '-' OR L.CRP < 1.0 AND E.Diagnosis IS NULL AND E.Thrombosis IS NULL;", "SELECT COUNT(DISTINCT P.ID) AS CountOfPatients FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.CRP LIKE '+' OR L.CRP LIKE '-' OR L.CRP < 1.0 AND P.Description IS NULL;", "SELECT COUNT(DISTINCT P.ID) AS CountOfPatientsWithoutData FROM Patient P LEFT JOIN Examination E ON P.ID = E.ID LEFT JOIN Laboratory L ON P.ID = L.ID AND L.Date = (SELECT MAX(Date) FROM Laboratory WHERE ID = P.ID) WHERE L.CRP LIKE '+' OR L.CRP LIKE '-' OR L.CRP < 1.0 AND E.Diagnosis IS NULL;"]}, {"question_id": 1257, "answer_sql": []}, {"question_id": 1258, "answer_sql": ["SELECT COUNT(DISTINCT E.ID) AS Normal_Rheumatoid_Factor_Patient_Count FROM Patient P JOIN Laboratory L ON P.ID = L.ID JOIN Examination E ON P.ID = E.ID WHERE E.KCT = '+' AND L.RA IN ('-', '+-');", "SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.RF = '+-' AND E.KCT = '+';"]}, {"question_id": 1259, "answer_sql": []}, {"question_id": 1260, "answer_sql": []}, {"question_id": 1261, "answer_sql": ["SELECT COUNT(DISTINCT P.ID) AS Normal_RF_Patients_No_Thrombosis FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.RF < 20 AND E.Thrombosis = '0';"]}, {"question_id": 1262, "answer_sql": ["SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE E.`ANA Pattern` = 'P' AND L.C3 > 35;", "SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.C3 > 35 AND E.ANA = 'P';"]}, {"question_id": 1263, "answer_sql": []}, {"question_id": 1264, "answer_sql": ["SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.C4 > 10;", "SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE E.Thrombosis = 1 AND L.C4 > 10;"]}, {"question_id": 1265, "answer_sql": ["SELECT COUNT(DISTINCT T1.ID) AS count FROM Patient AS T1 JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.`Examination Date` = '-' AND T1.Admission = '+';"]}, {"question_id": 1266, "answer_sql": ["SELECT MIN(P.Birthday) AS DateOfBirth, P.ID AS PatientID FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE E.`aCL IgG` != '-' AND E.`aCL IgG` != '+-' GROUP BY P.ID ORDER BY P.Birthday ASC LIMIT 1;", "SELECT MIN(T2.Birthday) AS DateOfBirth, T2.ID FROM Examination AS T1 JOIN Patient AS T2 ON T1.ID = T2.ID JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T3.RNP NOT IN ('-', '+-') GROUP BY T2.ID ORDER BY T2.Birthday ASC LIMIT 1;", "SELECT MIN(Patient.Birthday) AS DateOfBirth FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.`aCL IgG` NOT IN ('-', '+-') GROUP BY Patient.Birthday;", "SELECT MAX(P.Birthday) AS DateOfBirth, P.Birthday FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE E.`aCL IgG` != '-' AND E.`aCL IgG` != '+-' GROUP BY P.Birthday ORDER BY DateOfBirth ASC LIMIT 1;", "SELECT MIN(T1.Birthday) AS Min_Birthday, T1.ID, T1.SEX, T1.Birthday, T1.Description, T1.`First Date`, T1.Admission, T1.Diagnosis FROM Patient AS T1 JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.`aCL IgG` != '-' AND T2.`aCL IgG` != '+-' GROUP BY T1.ID, T1.SEX, T1.Birthday, T1.Description, T1.`First Date`, T1.Admission, T1.Diagnosis ORDER BY T1.Birthday ASC LIMIT 1;"]}, {"question_id": 1267, "answer_sql": ["SELECT COUNT(DISTINCT T1.ID) AS severe_thrombosis_count FROM Examination AS T1 JOIN Patient AS T2 ON T1.ID = T2.ID JOIN Laboratory AS T3 ON T3.ID = T1.ID WHERE T3.SM = '-' AND T1.Thrombosis = '1';"]}, {"question_id": 1268, "answer_sql": ["SELECT p.ID FROM Patient p JOIN Examination e ON p.ID = e.ID JOIN Laboratory l ON p.ID = l.ID WHERE l.SM NOT IN ('-', '+-') GROUP BY p.ID ORDER BY p.Birthday ASC LIMIT 3;", "SELECT DISTINCT P.ID FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON L.ID = E.ID WHERE L.SSA = 'abnormal anti-SM' AND L.SSB = '-' ORDER BY P.Birthday ASC LIMIT 3;"]}, {"question_id": 1269, "answer_sql": ["SELECT P.ID FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE E.`Examination Date` >= '1997-01-01' AND E.`aCL IgG` > 0 AND E.`aCL IgM` > 0 AND E.`aCL IgA` > 0 AND E.`aCL IgG` != E.`aCL IgM` AND E.`aCL IgG` != E.`aCL IgA` AND E.`aCL IgM` != E.`aCL IgA` AND E.`aCL IgG` != '-' AND E.`aCL IgM` != '-' AND E.`aCL IgA` != '-' AND E.`aCL IgG` != '+' AND E.`aCL IgM` != '+' AND E.`aCL IgA` != '+'", "SELECT DISTINCT P.ID FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE E.`Examination Date` >= '1997-01-01' AND E.`aCL IgG` IN (NULL, '-') AND E.`aCL IgM` IN (NULL, '-') AND E.`aCL IgA` IN (NULL, '-') AND E.Diagnosis IN ('-', '+-');"]}, {"question_id": 1270, "answer_sql": ["SELECT COUNT(DISTINCT T1.ID) AS count FROM Examination AS T1 JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.`Examination Date` LIKE '%normal anti-scl70%' AND T2.SEX = 'M' AND T1.Symptoms = 'vertigo';"]}, {"question_id": 1271, "answer_sql": []}, {"question_id": 1272, "answer_sql": ["SELECT Patient.ID FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE SSA NOT IN ('-', '+-') ORDER BY `First Date` ASC LIMIT 1;", "SELECT Patient.ID FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.`Examination Date` = (SELECT MIN(`Examination Date`) FROM Examination) AND Examination.`aCL IgG` NOT IN ('-', '+-');"]}, {"question_id": 1273, "answer_sql": ["SELECT COUNT(DISTINCT T1.ID) AS num_patients FROM Patient AS T1 JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Diagnosis = 'SLE' AND T2.`aCL IgG` IN ('-', '0');", "SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE E.Diagnosis = 'SLE' AND E.`Examination Date` LIKE '%-+%'"]}, {"question_id": 1274, "answer_sql": ["SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.SSB = '-' AND E.Symptoms IS NOT NULL;"]}, {"question_id": 1275, "answer_sql": ["SELECT COUNT(T1.ID) AS MalePatients FROM Patient AS T1 JOIN Examination AS T2 ON T1.ID = T2.ID JOIN Laboratory AS T3 ON T3.ID = T1.ID WHERE T3.CENTROMEA IN ('-', '+-') AND T3.SSB IN ('-', '+-') AND T1.SEX = 'M';"]}, {"question_id": 1276, "answer_sql": ["SELECT DISTINCT P.Description FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.DNA >= 8 AND E.Diagnosis IS NOT NULL;"]}, {"question_id": 1277, "answer_sql": []}, {"question_id": 1278, "answer_sql": ["SELECT COUNT(P.ID) AS Num_Admitted FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.DNA = '<8' AND P.Admission = '+';"]}, {"question_id": 1279, "answer_sql": []}, {"question_id": 1280, "answer_sql": ["SELECT COUNT(P.ID) AS MalePatientsWithNormalGOT FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.GOT < 60;", "SELECT COUNT(P.ID) AS MalePatientsWithNormalGOT FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.Date = (SELECT MAX(Date) FROM Laboratory WHERE ID = P.ID) AND L.GOT < 60;", "SELECT COUNT(P.ID) AS MalePatientsWithNormalGOT FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.Date BETWEEN '2020-01-01' AND '2020-12-31' AND L.GOT < 60;"]}, {"question_id": 1281, "answer_sql": ["SELECT MIN(T2.Birthday) AS Youngest_Birthdate FROM Examination AS T1 JOIN Patient AS T2 ON T1.ID = T2.ID JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T3.GOT >= 60;"]}, {"question_id": 1282, "answer_sql": ["SELECT P.Birthday FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON L.ID = E.ID WHERE L.GPT < 60 GROUP BY P.Birthday ORDER BY COUNT(*) DESC LIMIT 3;", "SELECT P.Birthday FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON L.ID = E.ID WHERE L.Date BETWEEN '2020-01-01' AND '2020-12-31' GROUP BY P.Birthday ORDER BY AVG(L.GPT) DESC LIMIT 3;"]}, {"question_id": 1283, "answer_sql": ["SELECT COUNT(P.ID) AS MalePatients FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.GOT < 60 AND P.SEX = 'M';", "SELECT COUNT(P.ID) AS MalePatients FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE E.`aCL IgG` < 60 AND P.SEX = 'M';", "SELECT COUNT(DISTINCT P.ID) AS MalePatients FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.GOT < 60 AND P.SEX = 'M';"]}, {"question_id": 1284, "answer_sql": []}, {"question_id": 1285, "answer_sql": ["SELECT MAX('First Date') AS LatestDate FROM Patient WHERE ID = ( SELECT ID FROM Laboratory WHERE Date = ( SELECT MAX(Date) FROM Laboratory ) AND LDH >= 500 );"]}, {"question_id": 1286, "answer_sql": ["SELECT COUNT(DISTINCT P.ID) AS AdmittedPatients FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.Date = (SELECT MAX(L.Date) FROM Laboratory L WHERE L.ID = P.ID AND L.ALP >= 300)", "SELECT COUNT(DISTINCT P.ID) AS NumberOfAdmittedPatients FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.ALP >= 300 AND P.Admission = '+';"]}, {"question_id": 1287, "answer_sql": ["SELECT COUNT(DISTINCT P.ID) AS Normal_ALP_Patients FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE P.Admission = '-' AND L.Date = (SELECT MIN(Date) FROM Laboratory WHERE ID = P.ID) AND L.ALP < 300;", "SELECT COUNT(DISTINCT P.ID) AS NormalALPCount FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE P.Admission = '-' AND L.Alp < 300;", "SELECT COUNT(DISTINCT P.ID) AS NormalALPCount FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE P.Admission = '-' AND L.Date = (SELECT MIN(Date) FROM Laboratory WHERE ID = (SELECT MIN(ID) FROM Examination WHERE Diagnosis = 'Thrombosis')) AND L.ALP < 300;"]}, {"question_id": 1288, "answer_sql": ["SELECT P.Diagnosis FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.TP < 6.0;", "SELECT Diagnosis FROM Patient WHERE ID IN ( SELECT ID FROM Laboratory WHERE TP < 6.0 )"]}, {"question_id": 1289, "answer_sql": ["SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE P.Diagnosis = 'SJS' AND L.TP > 6.0 AND L.TP < 8.5;", "SELECT COUNT(T1.ID) AS NormalTPCount FROM Patient AS T1 JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SJS' AND T2.TP > 6.0 AND T2.TP < 8.5;", "SELECT COUNT(DISTINCT P.ID) AS NormalTPCount FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE P.Diagnosis = 'SJS' AND L.TP > 6.0 AND L.TP < 8.5;", "SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE E.Diagnosis = 'SJS' AND L.TP BETWEEN 6.0 AND 8.5;"]}, {"question_id": 1290, "answer_sql": ["SELECT T1.`Examination Date` FROM Examination AS T1 JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.`aCL IgG` = (SELECT MAX(T3.`aCL IgG`) FROM Examination AS T3 JOIN Patient AS T4 ON T3.ID = T4.ID WHERE T3.`aCL IgG` > 3.5 AND T3.`aCL IgG` < 5.5) ORDER BY T1.`Examination Date` ASC LIMIT 1;", "SELECT E.`Examination Date` FROM Examination E JOIN Laboratory L ON E.ID = L.ID WHERE L.ALB = (SELECT MAX(ALB) FROM Laboratory WHERE ALB > 3.5 AND ALB < 5.5)"]}, {"question_id": 1291, "answer_sql": ["SELECT COUNT(P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.ALB > 3.5 AND L.ALB < 5.5 AND L.TP BETWEEN 6.0 AND 8.5;", "SELECT COUNT(P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.ALB BETWEEN 3.5 AND 5.5 AND L.TP BETWEEN 6.0 AND 8.5;", "SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.ALB > 3.5 AND L.ALB < 5.5 AND L.TP BETWEEN 6.0 AND 8.5;"]}, {"question_id": 1292, "answer_sql": ["SELECT Examination.`aCL IgG`, Examination.`aCL IgM`, Examination.`aCL IgA`, Laboratory.UA FROM Examination JOIN Patient ON Examination.ID = Patient.ID JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Patient.Sex = 'F' AND Examination.Thrombosis = 0 AND Laboratory.UA > 6.50 ORDER BY Laboratory.UA DESC LIMIT 1;", "SELECT T1.`aCL IgG`, T1.`aCL IgM`, T1.`aCL IgA` FROM Examination AS T1 JOIN Patient AS T2 ON T1.ID = T2.ID JOIN Laboratory AS T3 ON T3.ID = T1.ID WHERE T2.SEX = 'F' AND T3.UA > 6.50 ORDER BY T3.UA DESC LIMIT 1;", "SELECT Examination.`aCL IgG`, Examination.`aCL IgM`, Examination.`aCL IgA`, Laboratory.`U-PRO` FROM Examination JOIN Patient ON Examination.ID = Patient.ID JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Patient.SEX = 'F' AND Laboratory.`U-PRO` > 6.50 ORDER BY Laboratory.`U-PRO` DESC LIMIT 1;", "SELECT Examination.`aCL IgG`, Examination.`aCL IgM`, Examination.`aCL IgA`, Laboratory.`T-CHO`, Laboratory.UA FROM Examination JOIN Patient ON Examination.ID = Patient.ID JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Patient.SEX = 'F' AND Laboratory.UA > 6.50 ORDER BY Laboratory.UA DESC LIMIT 1;", "SELECT Examination.`aCL IgG`, Examination.`aCL IgM`, Examination.`aCL IgA`, Laboratory.`T-CHO`, Laboratory.`T-BIL` FROM Examination JOIN Patient ON Examination.ID = Patient.ID JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Patient.SEX = 'F' AND Laboratory.`T-CHO` = (SELECT MAX(`T-CHO`) FROM Laboratory WHERE Laboratory.`T-CHO` > 6.50)"]}, {"question_id": 1293, "answer_sql": ["SELECT MAX(Examination.ANA) AS HighestAntiNucleusAntibodyConcentration FROM Examination JOIN Patient ON Examination.ID = Patient.ID JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE CRE < 1.5;", "SELECT MAX(Laboratory.IGA) AS HighestAntiNucleusAntibodyConcentration FROM Laboratory JOIN Examination ON Laboratory.ID = Examination.ID WHERE CRE < 1.5 GROUP BY Examination.ID;"]}, {"question_id": 1294, "answer_sql": ["SELECT P.ID \nFROM Patient P \nJOIN Laboratory L ON P.ID = L.ID \nWHERE L.CRE < 1.5 \nORDER BY L.CRE DESC \nLIMIT 1;", "SELECT P.ID FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.CRE < 1.5 ORDER BY E.`aCL IgA` DESC LIMIT 1;", "SELECT P.ID FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.CRE < 1.5 ORDER BY L.IGG DESC LIMIT 1;", "SELECT P.ID FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.CRE < 1.5 ORDER BY L.C3 DESC LIMIT 1;"]}, {"question_id": 1295, "answer_sql": ["SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.`T-BIL` >= 2.0 AND E.`ANA Pattern` LIKE '%P%'"]}, {"question_id": 1296, "answer_sql": ["SELECT Examination.`aCL IgG` FROM Examination JOIN Patient ON Examination.ID = Patient.ID JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Laboratory.`T-BIL` < 2.0 ORDER BY Laboratory.`T-BIL` DESC LIMIT 1;", "SELECT Examination.`aCL IgG`, Examination.`aCL IgM`, Examination.`aCL IgA`, Examination.Diagnosis, Examination.KCT, Examination.RVVT, Examination.LAC, Examination.Symptoms, Examination.Thrombosis, Laboratory.`T-BIL` FROM Examination JOIN Patient ON Examination.ID = Patient.ID JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Laboratory.`T-BIL` = (SELECT MAX(`T-BIL`) FROM Laboratory WHERE `T-BIL` < 2.0)"]}, {"question_id": 1297, "answer_sql": []}, {"question_id": 1298, "answer_sql": ["SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE E.`ANA Pattern` = 'P' AND L.`T-CHO` < 250;"]}, {"question_id": 1299, "answer_sql": ["SELECT COUNT(DISTINCT E.ID) FROM Examination E JOIN Patient P ON E.ID = P.ID JOIN Laboratory L ON E.ID = L.ID WHERE L.TG < 200 AND E.Symptoms IS NOT NULL;"]}, {"question_id": 1300, "answer_sql": ["SELECT P.Diagnosis FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID AND L.Date = (SELECT MAX(Date) FROM Laboratory WHERE ID = P.ID) WHERE L.TG < 200 ORDER BY L.TG DESC LIMIT 1;", "SELECT P.Diagnosis FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.TG < 200 ORDER BY L.TG DESC LIMIT 1;", "SELECT Diagnosis FROM Patient WHERE ID = ( SELECT ID FROM Laboratory WHERE TG < 200 GROUP BY ID ORDER BY COUNT(*) DESC LIMIT 1 )"]}, {"question_id": 1301, "answer_sql": ["SELECT P.ID FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE E.Thrombosis = 0 AND L.CPK < 250;", "SELECT P.ID FROM Patient P LEFT JOIN Examination E ON P.ID = E.ID LEFT JOIN Laboratory L ON P.ID = L.ID AND L.Date = (SELECT MAX(Date) FROM Laboratory WHERE ID = P.ID) WHERE E.Thrombosis = 0 AND L.CPK < 250;", "SELECT P.ID FROM Patient P WHERE P.ID IN ( SELECT E.ID FROM Examination E WHERE E.Thrombosis = 0 ) AND P.ID NOT IN ( SELECT L.ID FROM Laboratory L WHERE L.CPK < 250 );", "SELECT P.ID FROM Patient P LEFT JOIN Examination E ON P.ID = E.ID LEFT JOIN Laboratory L ON P.ID = L.ID AND L.Date = '2023-01-01' WHERE E.Thrombosis = 0 AND L.CPK < 250;"]}, {"question_id": 1302, "answer_sql": ["SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.CPK < 250 AND (E.KCT = '+' OR E.RVVT = '+' OR E.LAC = '+');"]}, {"question_id": 1303, "answer_sql": ["SELECT MIN(Patient.Birthday) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.GLU > 180 GROUP BY Patient.Birthday ORDER BY Patient.Birthday DESC LIMIT 1;", "SELECT MIN(Patient.Birthday) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.GLU > 180 AND Patient.Birthday IS NOT NULL;", "SELECT MIN(P.Birthday) AS OldestPatientBirthday FROM Examination E JOIN Patient P ON E.ID = P.ID JOIN Laboratory L ON E.ID = L.ID WHERE L.GLU > 180 GROUP BY P.Birthday ORDER BY P.Birthday DESC LIMIT 1;", "SELECT MIN(Patient.Birthday) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.GLU > 180 AND Patient.Birthday = (SELECT MIN(Birthday) FROM Patient);"]}, {"question_id": 1304, "answer_sql": ["SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.GLU < 180 AND E.Thrombosis = 0;"]}, {"question_id": 1305, "answer_sql": ["SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE P.Admission = '+' AND L.WBC BETWEEN 3.5 AND 9.0;", "SELECT COUNT(DISTINCT T1.ID) AS Normal_WBC_Patients FROM Patient AS T1 JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.Admission = '+' AND T2.`Examination Date` BETWEEN '2019-01-01' AND '2019-12-31' AND T2.`aCL IgG` BETWEEN 3.5 AND 9.0;"]}, {"question_id": 1306, "answer_sql": ["SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE P.Diagnosis = 'SLE' AND E.`aCL IgG` BETWEEN 3.5 AND 9.0;", "SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE E.Diagnosis = 'SLE' AND L.WBC BETWEEN 3.5 AND 9.0;", "SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE P.Diagnosis = 'SLE' AND L.WBC BETWEEN 3.5 AND 9.0;", "SELECT COUNT(DISTINCT P.ID) \nFROM Patient P \nJOIN Examination E ON P.ID = E.ID \nJOIN Laboratory L ON E.ID = L.ID \nWHERE P.Diagnosis = 'SLE' \nAND E.`Examination Date` BETWEEN '2013-01-01' AND '2013-12-31' \nAND L.WBC BETWEEN 3.5 AND 9.0;"]}, {"question_id": 1307, "answer_sql": ["SELECT P.ID FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.RBC >= 6.0 OR L.RBC <= 3.5 AND P.Admission = '-'", "SELECT DISTINCT P.ID FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.RBC >= 6.0 OR L.RBC <= 3.5 AND P.Admission = '-'", "SELECT P.ID FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE E.Diagnosis = 'Outpatient' AND L.RBC >= 6.0 OR L.RBC <= 3.5;"]}, {"question_id": 1308, "answer_sql": ["SELECT COUNT(DISTINCT P.ID) AS NumberOfPatientsWithOtherSymptoms FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.PLT > 100 AND L.PLT < 400 AND E.Diagnosis IS NOT NULL;"]}, {"question_id": 1309, "answer_sql": ["SELECT P.ID, PLT FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE E.Diagnosis = 'MCTD' AND L.PLT BETWEEN 100 AND 400;"]}, {"question_id": 1310, "answer_sql": ["SELECT AVG(Laboratory.PT) AS AveragePT FROM Laboratory JOIN Examination ON Laboratory.ID = Examination.ID JOIN Patient ON Examination.ID = Patient.ID WHERE Patient.SEX = 'M' AND Laboratory.PT < 14;"]}, {"question_id": 1311, "answer_sql": ["SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE E.Thrombosis = 2 OR E.Thrombosis = 1 AND E.`aCL IgG` < 14;", "SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE E.Thrombosis IN (2, 1) AND L.PT < 14;"]}, {"question_id": 1312, "answer_sql": ["SELECT major_name FROM major WHERE major_id = (SELECT link_to_major FROM member WHERE first_name = 'Angela' AND last_name = 'Sanders');", "SELECT major_name FROM major WHERE major_id = (SELECT link_to_major FROM member WHERE first_name = 'Angela' AND last_name = 'Sanders' AND position = 'President');"]}, {"question_id": 1313, "answer_sql": ["SELECT COUNT(*) AS student_count FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'Engineering';"]}, {"question_id": 1314, "answer_sql": ["SELECT first_name, last_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'Art and Design';"]}, {"question_id": 1315, "answer_sql": ["SELECT COUNT(DISTINCT T1.link_to_member) AS attended_students FROM attendance AS T1 JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'Women''s Soccer';"]}, {"question_id": 1316, "answer_sql": []}, {"question_id": 1317, "answer_sql": ["SELECT COUNT(DISTINCT a.link_to_member) AS num_medium_t_shirts FROM attendance a JOIN member m ON a.link_to_member = m.member_id JOIN event e ON a.link_to_event = e.event_id WHERE e.event_name = 'Women''s Soccer' AND m.t_shirt_size = 'Medium';"]}, {"question_id": 1318, "answer_sql": ["SELECT event_name FROM event WHERE event_id = ( SELECT link_to_event FROM attendance GROUP BY link_to_event ORDER BY COUNT(link_to_event) DESC LIMIT 1 );", "SELECT event_name FROM event JOIN attendance ON event.event_id = attendance.link_to_event WHERE attendance.link_to_member IN ( SELECT member_id FROM member WHERE link_to_major IN ( SELECT major_id FROM major ) ) GROUP BY event_name ORDER BY COUNT(attendance.link_to_event) DESC LIMIT 1;", "SELECT event_name, event_date, type, notes, location, status FROM event WHERE event_id = ( SELECT link_to_event FROM attendance GROUP BY link_to_event ORDER BY COUNT(link_to_event) DESC LIMIT 1 )"]}, {"question_id": 1319, "answer_sql": ["SELECT major.college FROM major JOIN member ON major.major_id = member.link_to_major WHERE member.position = 'Vice President';"]}, {"question_id": 1320, "answer_sql": ["SELECT event.event_name FROM event JOIN attendance ON event.event_id = attendance.link_to_event JOIN member ON attendance.link_to_member = member.member_id WHERE member.first_name = 'MAYA' AND member.last_name = 'MCLEAN';"]}, {"question_id": 1321, "answer_sql": []}, {"question_id": 1322, "answer_sql": ["SELECT COUNT(e.event_id) AS meeting_count FROM event e JOIN attendance a ON e.event_id = a.link_to_event GROUP BY e.event_id HAVING COUNT(a.link_to_event) > 10;", "SELECT COUNT(event_id) AS meeting_count FROM event WHERE event_id IN ( SELECT link_to_event FROM attendance GROUP BY link_to_event HAVING COUNT(link_to_member) > 10 )", "SELECT COUNT(e.event_id) AS meeting_count FROM event e JOIN attendance a ON e.event_id = a.link_to_event WHERE e.type = 'Meeting' GROUP BY e.event_id HAVING COUNT(a.link_to_member) > 10;", "SELECT COUNT(event_id) AS meeting_count FROM event WHERE type = 'Meeting' GROUP BY event_id HAVING COUNT(event_id) > 10;"]}, {"question_id": 1323, "answer_sql": ["SELECT event_name FROM event JOIN attendance ON event.event_id = attendance.link_to_event GROUP BY event_name HAVING COUNT(attendance.link_to_event) > 20;", "SELECT event_name FROM event JOIN attendance ON event.event_id = attendance.link_to_event GROUP BY event.event_id HAVING COUNT(attendance.link_to_event) > 20;"]}, {"question_id": 1324, "answer_sql": []}, {"question_id": 1325, "answer_sql": ["SELECT MAX(cost) AS most_expensive_expense FROM expense WHERE expense_description LIKE '%support%club%'"]}, {"question_id": 1326, "answer_sql": ["SELECT COUNT(DISTINCT m.member_id) AS member_count FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE ma.major_name = 'Environmental Engineering';"]}, {"question_id": 1327, "answer_sql": ["SELECT member.first_name, member.last_name \nFROM member \nJOIN attendance ON member.member_id = attendance.link_to_member \nJOIN event ON attendance.link_to_event = event.event_id \nWHERE event_name = 'Laugh Out Loud'"]}, {"question_id": 1328, "answer_sql": ["SELECT DISTINCT m.last_name FROM member m JOIN major mm ON m.link_to_major = mm.major_id WHERE mm.major_name = 'Law and Constitutional Studies';"]}, {"question_id": 1329, "answer_sql": ["SELECT zip_code.county FROM zip_code JOIN member ON zip_code.zip_code = member.zip WHERE member.first_name = 'Sherri' AND member.last_name = 'Ramsey'", "SELECT county FROM zip_code WHERE city = 'Sherri Ramsey' AND state = 'CA';"]}, {"question_id": 1330, "answer_sql": ["SELECT DISTINCT mm.college FROM member m JOIN major mm ON m.link_to_major = mm.major_id WHERE m.first_name = 'Tyler' AND m.last_name = 'Hewitt'"]}, {"question_id": 1331, "answer_sql": ["SELECT amount FROM income WHERE source = 'Vice President'"]}, {"question_id": 1332, "answer_sql": ["SELECT SUM(budget.spent) AS total_spent FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'September Meeting' AND budget.category = 'Food';", "SELECT SUM(budget.remaining) AS total_spent FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE event_name = 'September Meeting' AND category = 'Food';"]}, {"question_id": 1333, "answer_sql": ["SELECT DISTINCT zip_code.city, zip_code.state FROM member JOIN major ON member.link_to_major = major.major_id JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.position = 'President';", "SELECT DISTINCT T1.city, T1.state FROM zip_code AS T1 INNER JOIN member AS T2 ON T1.zip_code = T2.zip WHERE T2.position = 'President' AND T2.position = 'Student Club'"]}, {"question_id": 1334, "answer_sql": ["SELECT first_name, last_name FROM member WHERE zip IN ( SELECT zip FROM zip_code WHERE state = 'Illinois' );", "SELECT member.first_name, member.last_name FROM member JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.state = 'Illinois';"]}, {"question_id": 1335, "answer_sql": ["SELECT SUM(budget.spent) AS total_spent FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE event_name = 'September Meeting' AND category = 'Advertisement';", "SELECT SUM(budget.remaining) AS total_spent FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE event_name = 'September Meeting' AND category = 'Advertisement';", "SELECT SUM(budget.spent) AS total_spent FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'September Meeting' AND budget.category = 'Advertisement' AND strftime('%Y-%m', event.event_date) = '2023-09';"]}, {"question_id": 1336, "answer_sql": ["SELECT m2.department FROM member m JOIN major m2 ON m.link_to_major = m2.major_id WHERE m.first_name = 'Pierce' AND m.last_name = 'Guidi'"]}, {"question_id": 1337, "answer_sql": ["SELECT SUM(amount) AS total_budget FROM budget WHERE category IN (SELECT category FROM event WHERE event_name = 'October Speaker')", "SELECT SUM(amount) AS total_budget FROM budget WHERE event_status = 'October Speaker';"]}, {"question_id": 1338, "answer_sql": ["SELECT expense_id FROM expense WHERE expense_date = '2019-10-08' AND approved = 'True' GROUP BY expense_id HAVING COUNT(*) = (SELECT COUNT(*) FROM event WHERE event_name = 'October Meeting' AND event_date = '2019-10-08');"]}, {"question_id": 1339, "answer_sql": ["SELECT AVG(cost) AS average_cost FROM expense WHERE expense_date LIKE '%/09%' OR expense_date LIKE '%/10%' AND link_to_member = 'Elijah Allen';"]}, {"question_id": 1340, "answer_sql": []}, {"question_id": 1341, "answer_sql": ["SELECT event.location FROM event WHERE event.event_name = 'Spring Budget Review';", "SELECT T2.location FROM budget AS T1 JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'Spring Budget Review';"]}, {"question_id": 1342, "answer_sql": ["SELECT cost FROM expense WHERE expense_description = 'Posters' AND expense_date = '2019-09-04';", "SELECT expense.cost \nFROM expense \nJOIN event ON expense.link_to_member = event.event_id \nWHERE event.event_name = 'Posters' AND expense.expense_date = '2019-09-04';"]}, {"question_id": 1343, "answer_sql": ["SELECT MAX(budget.remaining) AS biggest_budget_remaining FROM budget WHERE budget.category = 'Food';"]}, {"question_id": 1344, "answer_sql": ["SELECT notes FROM income WHERE date_received = '2019-09-14' AND source = 'Fundraising';"]}, {"question_id": 1345, "answer_sql": ["SELECT COUNT(DISTINCT major_id) AS major_count FROM major WHERE college = 'College of Humanities and Social Sciences';", "SELECT COUNT(major_id) AS major_count FROM major WHERE department = 'College of Humanities and Social Sciences';"]}, {"question_id": 1346, "answer_sql": ["SELECT member.phone FROM member INNER JOIN major ON member.link_to_major = major.major_id INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.first_name = 'Carlo' AND member.last_name = 'Jacobs';"]}, {"question_id": 1347, "answer_sql": ["SELECT zip_code.county FROM zip_code WHERE zip_code.zip_code = (SELECT zip FROM member WHERE first_name = 'Adela' AND last_name = 'O''Gallagher');"]}, {"question_id": 1348, "answer_sql": ["SELECT COUNT(budget_id) AS exceeded_budget_count FROM budget WHERE event_status = 'November Meeting' AND remaining < 0;"]}, {"question_id": 1349, "answer_sql": ["SELECT SUM(amount) AS total_budget_amount FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE event_name = 'September Speaker';", "SELECT SUM(amount) AS total_budget_amount FROM budget WHERE event_status = 'September Speaker';"]}, {"question_id": 1350, "answer_sql": ["SELECT event.status FROM event JOIN budget ON event.event_id = budget.link_to_event JOIN expense ON budget.budget_id = expense.link_to_budget WHERE expense.expense_description = 'Post Cards, Posters' AND expense.expense_date = '2019-08-20';", "SELECT T1.status FROM event AS T1 JOIN expense AS T2 ON T1.event_id = T2.link_to_budget WHERE T2.expense_description = 'Post Cards, Posters' AND T2.expense_date = '2019-08-20';"]}, {"question_id": 1351, "answer_sql": ["SELECT major_name FROM major WHERE major_id = 'Brent Thomason'"]}, {"question_id": 1352, "answer_sql": ["SELECT COUNT(*) FROM member WHERE t_shirt_size = 'Large' AND link_to_major = (SELECT major_id FROM major WHERE major_name = 'Human Development and Family Studies')", "SELECT COUNT(*) AS large_t_shirt_count FROM member WHERE t_shirt_size = 'Large' AND link_to_major = 'Human Development and Family Studies';"]}, {"question_id": 1353, "answer_sql": ["SELECT DISTINCT T2.type FROM member AS T1 JOIN zip_code AS T2 ON T1.zip = T2.zip_code JOIN major AS T3 ON T1.link_to_major = T3.major_id WHERE T1.first_name = 'Christof' AND T1.last_name = 'Nielson';"]}, {"question_id": 1354, "answer_sql": []}, {"question_id": 1355, "answer_sql": ["SELECT DISTINCT T2.state FROM member AS T1 JOIN zip_code AS T2 ON T1.zip = T2.zip_code JOIN major AS T3 ON T1.link_to_major = T3.major_id WHERE T1.first_name = 'Sacha' AND T1.last_name = 'Harrison';", "SELECT short_state FROM zip_code WHERE city = 'Sacha Harrison' AND state = 'Hometown State';"]}, {"question_id": 1356, "answer_sql": ["SELECT major.department FROM major JOIN member ON major.major_id = member.link_to_major WHERE member.position = 'President';"]}, {"question_id": 1357, "answer_sql": ["SELECT T1.date_received FROM income AS T1 JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.first_name = 'Connor' AND T2.last_name = 'Hilton' AND T1.source = 'Dues';"]}, {"question_id": 1358, "answer_sql": []}, {"question_id": 1359, "answer_sql": []}, {"question_id": 1360, "answer_sql": ["SELECT CAST(SUM(CASE WHEN T1.category = 'Parking' THEN T1.amount ELSE 0 END) AS REAL) * 100 / SUM(T1.amount) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'November Speaker';", "SELECT CAST(SUM(CASE WHEN T1.category = 'Parking' THEN T1.amount ELSE 0 END) AS REAL) * 100 / COUNT(T2.event_name) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'November Speaker'"]}, {"question_id": 1361, "answer_sql": ["SELECT SUM(cost) AS total_pizza_cost FROM expense WHERE expense_description = 'Pizza';"]}, {"question_id": 1362, "answer_sql": ["SELECT COUNT(DISTINCT city) AS city_count FROM zip_code WHERE county = 'Orange County' AND state = 'Virginia';", "SELECT COUNT(DISTINCT city) AS city_count FROM zip_code WHERE county = 'Orange' AND state = 'Virginia';"]}, {"question_id": 1363, "answer_sql": ["SELECT DISTINCT department FROM major WHERE college = 'College of Humanities and Social Sciences';", "SELECT department FROM major WHERE college = 'College of Humanities and Social Sciences';"]}, {"question_id": 1364, "answer_sql": ["SELECT T2.city, T2.county, T2.state FROM member AS T1 JOIN zip_code AS T2 ON T1.zip = T2.zip_code JOIN major AS T3 ON T1.link_to_major = T3.major_id WHERE T1.first_name = 'Amy' AND T1.last_name = 'Firth';", "SELECT city, county, state FROM zip_code WHERE short_state = 'CA' AND city = 'Amy Firth'"]}, {"question_id": 1365, "answer_sql": ["SELECT expense.expense_description FROM expense JOIN budget ON expense.link_to_budget = budget.budget_id WHERE budget.remaining = (SELECT MIN(remaining) FROM budget) ORDER BY expense.expense_description;", "SELECT expense_description, cost FROM expense WHERE link_to_budget = ( SELECT budget_id FROM budget WHERE remaining = ( SELECT MIN(remaining) FROM budget ) );", "SELECT expense.expense_description FROM expense JOIN budget ON expense.link_to_budget = budget.budget_id ORDER BY budget.remaining ASC LIMIT 1;", "SELECT expense_description FROM expense WHERE link_to_budget = (SELECT budget_id FROM budget ORDER BY remaining ASC LIMIT 1)", "SELECT expense_description, cost FROM expense WHERE link_to_budget = ( SELECT budget_id FROM budget WHERE event_status = 'approved' ORDER BY remaining ASC LIMIT 1 )"]}, {"question_id": 1366, "answer_sql": ["SELECT m.first_name, m.last_name FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE e.event_name = 'October Meeting';", "SELECT DISTINCT a.link_to_member FROM attendance a JOIN event e ON a.link_to_event = e.event_id WHERE e.event_name = 'October Meeting';", "SELECT m.member_id, m.first_name, m.last_name FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE e.event_name = 'October Meeting';"]}, {"question_id": 1367, "answer_sql": ["SELECT major.college, COUNT(member.member_id) AS member_count FROM member JOIN major ON member.link_to_major = major.major_id GROUP BY major.college ORDER BY member_count DESC LIMIT 1;", "SELECT major.college FROM member JOIN major ON member.link_to_major = major.major_id GROUP BY major.college ORDER BY COUNT(member.member_id) DESC LIMIT 1;"]}, {"question_id": 1368, "answer_sql": ["SELECT major.major_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.phone = '809-555-3360';"]}, {"question_id": 1369, "answer_sql": ["SELECT event.event_name FROM event JOIN budget ON event.event_id = budget.link_to_event GROUP BY event.event_name ORDER BY SUM(budget.amount) DESC LIMIT 1;", "SELECT event_name, event_date, type, notes, location, status FROM event WHERE event_id = (SELECT event_id FROM budget ORDER BY amount DESC LIMIT 1);", "SELECT event_name FROM event WHERE event_id = (SELECT event_id FROM budget ORDER BY amount DESC LIMIT 1);"]}, {"question_id": 1370, "answer_sql": ["SELECT expense_description FROM expense WHERE link_to_member = (SELECT member_id FROM member WHERE position = 'Vice President')", "SELECT expense_id, expense_description, expense_date, cost, approved, link_to_member FROM expense WHERE link_to_member = (SELECT member_id FROM member WHERE position = 'Vice President')", "SELECT expense_description FROM expense WHERE link_to_member = (SELECT link_to_member FROM member WHERE position = 'Vice President')", "SELECT expense_id, expense_description, expense_date, cost, approved, link_to_member FROM expense WHERE link_to_member = 'Vice President';"]}, {"question_id": 1371, "answer_sql": ["SELECT COUNT(DISTINCT T2.member_id) AS member_count FROM event AS T1 JOIN attendance AS T3 ON T1.event_id = T3.link_to_event JOIN member AS T2 ON T3.link_to_member = T2.member_id WHERE T1.event_name = 'Women''s Soccer';"]}, {"question_id": 1372, "answer_sql": ["SELECT date_received FROM income JOIN member ON income.link_to_member = member.member_id WHERE first_name = 'Casey' AND last_name = 'Mason';", "SELECT date_received FROM income WHERE link_to_member = 'Casey Mason';"]}, {"question_id": 1373, "answer_sql": ["SELECT COUNT(T1.zip) AS Maryland_Hometowns FROM member AS T1 JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.state = 'Maryland';", "SELECT COUNT(*) AS member_count FROM zip_code WHERE state = 'MD';"]}, {"question_id": 1374, "answer_sql": ["SELECT COUNT(DISTINCT a.link_to_event) FROM attendance a JOIN member m ON a.link_to_member = m.member_id WHERE m.phone = '954-555-6240';"]}, {"question_id": 1375, "answer_sql": ["SELECT first_name, last_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'School of Applied Sciences, Technology and Education';", "SELECT first_name, last_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'School of Applied Sciences, Technology and Education';"]}, {"question_id": 1376, "answer_sql": ["SELECT event.event_name FROM event WHERE event.status = 'Closed' ORDER BY (SELECT spent FROM budget WHERE budget.link_to_event = event.event_id) / (SELECT amount FROM budget WHERE budget.link_to_event = event.event_id) DESC LIMIT 1;", "SELECT event.event_name FROM event JOIN budget ON event.event_id = budget.link_to_event WHERE event.status = 'Closed' ORDER BY budget.spent / budget.amount DESC LIMIT 1;", "SELECT event.event_name FROM event JOIN budget ON event.event_id = budget.link_to_event WHERE event.status = 'Closed' ORDER BY budget.amount, budget.spent LIMIT 1;"]}, {"question_id": 1377, "answer_sql": ["SELECT COUNT(*) AS num_members FROM member WHERE position = 'President';"]}, {"question_id": 1378, "answer_sql": ["SELECT MAX(budget.spent) AS highest_budget_spend FROM budget;", "SELECT MAX(budget.spent) AS highest_budget_spend FROM budget WHERE budget.event_status = 'active';"]}, {"question_id": 1379, "answer_sql": []}, {"question_id": 1380, "answer_sql": ["SELECT SUM(budget.spent) AS total_spent FROM budget WHERE budget.category = 'Food';", "SELECT SUM(remaining) AS total_spent FROM budget WHERE category = 'Food';"]}, {"question_id": 1381, "answer_sql": ["SELECT member.first_name, member.last_name FROM member JOIN attendance ON member.member_id = attendance.link_to_member GROUP BY member.first_name, member.last_name HAVING COUNT(attendance.link_to_event) > 7;", "SELECT DISTINCT m.first_name, m.last_name FROM member m JOIN attendance a ON m.member_id = a.link_to_member GROUP BY m.member_id HAVING COUNT(a.link_to_event) > 7;"]}, {"question_id": 1382, "answer_sql": ["SELECT m.first_name, m.last_name FROM member m JOIN major ma ON m.link_to_major = ma.major_id JOIN event e ON e.event_name = 'Community Theater' JOIN attendance a ON a.link_to_member = m.member_id WHERE ma.major_name = 'Interior Design';", "SELECT m.first_name, m.last_name FROM member m JOIN major ma ON m.link_to_major = ma.major_id JOIN event e ON m.member_id = e.event_id WHERE ma.major_name = 'Interior Design' AND e.event_name = 'Community Theater';"]}, {"question_id": 1383, "answer_sql": ["SELECT member.first_name, member.last_name FROM member JOIN major ON member.link_to_major = major.major_id JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.city = 'Georgetown' AND zip_code.state = 'South Carolina';", "SELECT member_id, first_name, last_name FROM member WHERE zip = (SELECT zip_code FROM zip_code WHERE city = 'Georgetown' AND state = 'South Carolina');", "SELECT first_name, last_name FROM member JOIN zip_code ON member.zip = zip_code.zip_code WHERE county = 'Georgetown' AND state = 'South Carolina';", "SELECT member_id, first_name, last_name FROM member WHERE zip IN ( SELECT zip FROM zip_code WHERE city = 'Georgetown' AND state = 'South Carolina' );"]}, {"question_id": 1384, "answer_sql": ["SELECT SUM(income.amount) AS total_income FROM income JOIN member ON income.link_to_member = member.member_id JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Grant' AND member.last_name = 'Gilmour';", "SELECT COUNT(amount) AS income_count FROM income JOIN member ON income.link_to_member = member.member_id WHERE member.first_name = 'Grant' AND member.last_name = 'Gilmour';", "SELECT COUNT(income_id) AS income_count FROM income WHERE link_to_member = 'Grant Gilmour';", "SELECT SUM(amount) AS total_income FROM income WHERE link_to_member = 'Grant Gilmour';"]}, {"question_id": 1385, "answer_sql": ["SELECT member.first_name, member.last_name FROM member JOIN income ON member.member_id = income.link_to_member WHERE income.amount > 40;"]}, {"question_id": 1386, "answer_sql": ["SELECT SUM(cost) AS total_expense FROM expense WHERE expense_date LIKE '2023-01-01' -- Assuming the Yearly Kickoff is on January 1, 2023"]}, {"question_id": 1387, "answer_sql": ["SELECT m.first_name, m.last_name FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE e.event_name = 'Yearly Kickoff';", "SELECT m.first_name, m.last_name FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE e.event_name = 'Yearly Kickoff' AND m.position = 'Budget Manager';"]}, {"question_id": 1388, "answer_sql": ["SELECT member.first_name, member.last_name, income.source FROM member JOIN income ON member.member_id = income.link_to_member GROUP BY member.member_id ORDER BY income.amount DESC LIMIT 1;", "SELECT member.first_name, member.last_name, income.source FROM member JOIN income ON member.member_id = income.link_to_member WHERE member.member_id = ( SELECT link_to_member FROM income GROUP BY link_to_member ORDER BY SUM(income.amount) DESC LIMIT 1 ) ORDER BY income.amount DESC;"]}, {"question_id": 1389, "answer_sql": ["SELECT event_name FROM event WHERE event_id = (SELECT MIN(event_id) FROM event)"]}, {"question_id": 1390, "answer_sql": ["SELECT (SUM(CASE WHEN event_name = 'Yearly Kickoff' THEN cost ELSE 0 END) / SUM(cost)) * 100 AS yearly_kickoff_percentage FROM expense JOIN event ON expense.link_to_budget = event.event_id WHERE event_name = 'Yearly Kickoff';"]}, {"question_id": 1391, "answer_sql": ["SELECT SUM(CASE WHEN major_name = 'Finance' THEN 1 ELSE 0 END) / SUM(CASE WHEN major_name = 'Physics' THEN 1 ELSE 0 END) AS ratio FROM major;", "SELECT SUM(CASE WHEN major_name = 'Finance' THEN 1 ELSE 0 END) / SUM(CASE WHEN major_name = 'Physics' THEN 1 ELSE 0 END) AS finance_to_physics_ratio FROM major JOIN member ON major.major_id = member.link_to_major JOIN zip_code ON member.zip = zip_code.zip_code;"]}, {"question_id": 1392, "answer_sql": ["SELECT source, amount FROM income WHERE date_received BETWEEN '2019-09-01' AND '2019-09-30' ORDER BY amount DESC LIMIT 1;", "SELECT MAX(income.source) AS top_source, income.date_received, income.amount FROM income WHERE income.date_received BETWEEN '2019-09-01' AND '2019-09-30' GROUP BY income.date_received, income.amount ORDER BY income.amount DESC LIMIT 1;", "SELECT MAX(T1.source) AS top_source, T1.amount FROM income AS T1 JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T1.date_received BETWEEN '2019-09-01' AND '2019-09-30' GROUP BY T1.source, T1.amount;"]}, {"question_id": 1393, "answer_sql": ["SELECT first_name, last_name, email FROM member WHERE position = 'Secretary'"]}, {"question_id": 1394, "answer_sql": ["SELECT COUNT(DISTINCT m.member_id) AS member_count FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE ma.major_name = 'Physics Teaching';"]}, {"question_id": 1395, "answer_sql": []}, {"question_id": 1396, "answer_sql": ["SELECT COUNT(attendance.link_to_event) AS event_count, major.major_name FROM major JOIN member ON major.major_id = member.link_to_major JOIN attendance ON member.member_id = attendance.link_to_member WHERE member.first_name = 'Luisa' AND member.last_name = 'Guidi' GROUP BY major.major_name;"]}, {"question_id": 1397, "answer_sql": ["SELECT AVG(budget.remaining) AS average_spend FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE event.status = 'Closed' AND budget.category = 'Food';", "SELECT AVG(budget.spent) AS average_spend FROM budget WHERE category = 'Food' AND event_status = 'Closed';", "SELECT AVG(budget.spent) AS average_spend\nFROM budget\nJOIN event ON budget.link_to_event = event.event_id\nWHERE budget.event_status = 'Closed'"]}, {"question_id": 1398, "answer_sql": ["SELECT event.event_name FROM event JOIN budget ON event.event_id = budget.link_to_event WHERE budget.category = 'Advertisement' ORDER BY budget.spent DESC LIMIT 1;", "SELECT event_name FROM event WHERE event_id = (SELECT event_id FROM budget WHERE category = 'Advertisement' AND spent = (SELECT MAX(spent) FROM budget WHERE category = 'Advertisement'))"]}, {"question_id": 1399, "answer_sql": []}, {"question_id": 1400, "answer_sql": ["SELECT CAST(SUM(CASE WHEN type = 'Community Service' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(event_id) FROM event WHERE event_date BETWEEN '2019-01-01' AND '2019-12-31';", "SELECT SUM(CASE WHEN type = 'Community Service' THEN 1 ELSE 0 END) * 100 / COUNT(event_id) * 100 FROM event WHERE event_date BETWEEN '2019-01-01' AND '2019-12-31'"]}, {"question_id": 1401, "answer_sql": ["SELECT expense.cost FROM expense JOIN member ON expense.link_to_member = member.member_id JOIN event ON member.link_to_major = event.event_id WHERE event.event_name = 'September Speaker' AND expense.expense_description = 'Posters';"]}, {"question_id": 1402, "answer_sql": ["SELECT MAX(CASE WHEN t_shirt_size = 'S' THEN 1 ELSE 0 END) + MAX(CASE WHEN t_shirt_size = 'M' THEN 1 ELSE 0 END) + MAX(CASE WHEN t_shirt_size = 'L' THEN 1 ELSE 0 END) + MAX(CASE WHEN t_shirt_size = 'XL' THEN 1 ELSE 0 END) + MAX(CASE WHEN t_shirt_size = 'XXL' THEN 1 ELSE 0 END) AS most_popular_t_shirt_size FROM member"]}, {"question_id": 1403, "answer_sql": ["SELECT e.event_name FROM event e JOIN budget b ON e.event_id = b.link_to_event JOIN expense ex ON b.budget_id = ex.link_to_budget WHERE e.status = 'Closed' ORDER BY ex.cost - b.remaining DESC LIMIT 1;", "SELECT e.event_name FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE e.status = 'Closed' AND b.remaining < 0 ORDER BY b.remaining ASC LIMIT 1;", "SELECT event_name FROM event WHERE status = 'Closed' ORDER BY (SELECT remaining FROM budget WHERE link_to_event = event.event_id) - (SELECT remaining FROM budget WHERE link_to_event = event.event_id) DESC LIMIT 1;"]}, {"question_id": 1404, "answer_sql": ["SELECT e.event_name AS event_name, SUM(ei.cost) AS total_approved_cost FROM event e JOIN attendance a ON e.event_id = a.link_to_event JOIN income i ON a.link_to_member = i.link_to_member JOIN expense ei ON a.link_to_member = ei.link_to_member WHERE e.event_name = 'October Meeting' GROUP BY e.event_name", "SELECT e.expense_description, SUM(e.cost) AS total_value FROM expense e JOIN budget b ON e.link_to_budget = b.budget_id WHERE b.event_status = 'October Meeting' GROUP BY e.expense_description;"]}, {"question_id": 1405, "answer_sql": ["SELECT category, spent FROM budget WHERE link_to_event = (SELECT event_id FROM event WHERE event_name = 'April Speaker') ORDER BY spent ASC;", "SELECT budget.category, budget.remaining FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'April Speaker' ORDER BY budget.remaining ASC;", "SELECT category, spent FROM budget WHERE event_status = 'April Speaker' ORDER BY spent ASC;"]}, {"question_id": 1406, "answer_sql": ["SELECT budget_id, amount FROM budget WHERE category = 'Food' ORDER BY amount DESC LIMIT 1", "SELECT MAX(budget.amount) AS highest_budget FROM budget WHERE category = 'Food';", "SELECT MAX(budget.remaining) AS highest_budget FROM budget WHERE budget.category = 'Food';", "SELECT MAX(budget.remaining) AS highest_budget, budget.event_status FROM budget WHERE budget.category = 'Food' GROUP BY budget.event_status;"]}, {"question_id": 1407, "answer_sql": ["SELECT T1.category, T1.spent, T1.remaining FROM budget AS T1 WHERE T1.category = 'Advertisement' ORDER BY T1.spent DESC LIMIT 3;", "SELECT budget_id, category, amount FROM budget WHERE category = 'Advertisement' ORDER BY amount DESC LIMIT 3;", "SELECT category, amount FROM budget WHERE category = 'Advertisement' ORDER BY amount DESC LIMIT 3;", "SELECT budget_id, category, amount, remaining, event_status FROM budget WHERE category = 'Advertisement' ORDER BY amount DESC LIMIT 3;", "SELECT MAX(budget.amount) AS max_budget, category FROM budget WHERE category = 'Advertisement' GROUP BY category ORDER BY max_budget DESC LIMIT 3;"]}, {"question_id": 1408, "answer_sql": ["SELECT SUM(cost) AS total_cost_spent_parking FROM expense WHERE expense_description = 'Parking';"]}, {"question_id": 1409, "answer_sql": ["SELECT SUM(cost) AS total_expense FROM expense WHERE expense_date = '2019-08-20';"]}, {"question_id": 1410, "answer_sql": ["SELECT member.first_name, member.last_name, SUM(expense.cost) AS total_cost FROM member JOIN expense ON member.member_id = expense.link_to_member WHERE member.member_id = 'rec4BLdZHS2Blfp4v' GROUP BY member.member_id;"]}, {"question_id": 1411, "answer_sql": ["SELECT expense.expense_description FROM expense JOIN member ON expense.link_to_member = member.member_id WHERE member.first_name = 'Sacha' AND member.last_name = 'Harrison';", "SELECT expense_description FROM expense WHERE link_to_member = 'Sacha Harrison';"]}, {"question_id": 1412, "answer_sql": ["SELECT expense.expense_description FROM expense JOIN member ON expense.link_to_member = member.member_id WHERE member.t_shirt_size = 'X-Large'"]}, {"question_id": 1413, "answer_sql": ["SELECT zip_code.zip_code FROM member JOIN zip_code ON member.zip = zip_code.zip_code JOIN expense ON member.member_id = expense.link_to_member WHERE expense.cost < 50;", "SELECT DISTINCT T1.zip FROM member AS T1 JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T2.cost < 50"]}, {"question_id": 1414, "answer_sql": ["SELECT major_name FROM major INNER JOIN member ON major.major_id = member.link_to_major WHERE first_name = 'Phillip' AND last_name = 'Cullen';"]}, {"question_id": 1415, "answer_sql": ["SELECT position FROM member WHERE link_to_major = (SELECT major_id FROM major WHERE major_name = 'Business');"]}, {"question_id": 1416, "answer_sql": ["SELECT COUNT(*) AS member_count FROM member WHERE link_to_major = (SELECT major_id FROM major WHERE major_name = 'Business') AND t_shirt_size = 'Medium';", "SELECT COUNT(*) AS member_count FROM member WHERE position = 'Business' AND t_shirt_size = 'Medium';"]}, {"question_id": 1417, "answer_sql": ["SELECT event.type FROM event JOIN budget ON event.event_id = budget.link_to_event WHERE budget.remaining > 30;", "SELECT DISTINCT e.type FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE b.remaining > 30;"]}, {"question_id": 1418, "answer_sql": ["SELECT category FROM budget WHERE link_to_event = (SELECT event_id FROM event WHERE location = 'MU 215');"]}, {"question_id": 1419, "answer_sql": ["SELECT T1.category FROM budget AS T1 JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_date = '2020-03-24T12:00:00';", "SELECT category FROM budget WHERE event_status = 'completed' AND link_to_event = (SELECT event_id FROM event WHERE event_date = '2020-03-24T12:00:00');"]}, {"question_id": 1420, "answer_sql": []}, {"question_id": 1421, "answer_sql": ["SELECT CAST(SUM(CASE WHEN T2.major_name = 'Mathematics' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.member_id) AS percentage FROM member AS T1 JOIN major AS T2 ON T1.link_to_major = T2.major_id;"]}, {"question_id": 1422, "answer_sql": ["SELECT event.type FROM event JOIN zip_code ON event.location = zip_code.city WHERE event.location = 'MU 215';"]}, {"question_id": 1423, "answer_sql": ["SELECT COUNT(*) AS income_count FROM income WHERE amount = 50;"]}, {"question_id": 1424, "answer_sql": ["SELECT COUNT(*) AS member_count FROM member WHERE position = 'Member' AND t_shirt_size = 'X-Large';", "SELECT COUNT(DISTINCT member_id) AS extra_large_t_shirt_count FROM member WHERE t_shirt_size = 'X-Large';"]}, {"question_id": 1425, "answer_sql": ["SELECT COUNT(major_id) AS major_count FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'School of Applied Sciences, Technology and Education' AND major.college = 'College of Agriculture and Applied Sciences';", "SELECT COUNT(major_id) AS major_count FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'School of Applied Sciences, Technology and Education' AND major.department LIKE '%College of Agriculture and Applied Sciences%';"]}, {"question_id": 1426, "answer_sql": ["SELECT member.last_name, major.department, major.college FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Environmental Engineering';", "SELECT member.last_name, major.major_name, major.department, major.college FROM member JOIN major ON member.link_to_major = major.major_id JOIN zip_code ON member.zip = zip_code.zip_code WHERE major.major_name = 'Environmental Engineering';"]}, {"question_id": 1427, "answer_sql": ["SELECT budget.category FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE event.location = 'MU 215' AND event.type = 'Guest Speaker' AND budget.spent = 0;", "SELECT T1.category FROM budget AS T1 JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.location = 'MU 215' AND T1.spent = 0 AND T1.category IS NOT NULL;", "SELECT budget.category FROM budget JOIN event ON budget.link_to_event = event.event_id JOIN member ON budget.link_to_event = member.link_to_major WHERE event.location = 'MU 215' AND budget.spent = 0 AND event.type = 'Guest Speaker';"]}, {"question_id": 1428, "answer_sql": ["SELECT zip_code.city, zip_code.state FROM member JOIN major ON member.link_to_major = major.major_id JOIN zip_code ON member.zip = zip_code.zip_code WHERE major.department = 'Electrical and Computer Engineering Department';"]}, {"question_id": 1429, "answer_sql": ["SELECT event_name FROM event JOIN attendance ON event.event_id = attendance.link_to_event JOIN member ON attendance.link_to_member = member.member_id WHERE type = 'Social' AND location = '900 E. Washington St.' AND member.position = 'Vice President';", "SELECT e.event_name FROM event e JOIN attendance a ON e.event_id = a.link_to_event JOIN member m ON a.link_to_member = m.member_id WHERE m.position = 'Vice President' AND m.zip = (SELECT zip FROM zip_code WHERE city = 'Washington' AND county = 'E' AND state = 'CA' AND short_state = 'CA')"]}, {"question_id": 1430, "answer_sql": ["SELECT m.last_name, m.position FROM member m JOIN expense e ON m.member_id = e.link_to_member WHERE e.expense_description = 'Pizza' AND e.expense_date = '2019-09-10';"]}, {"question_id": 1431, "answer_sql": []}, {"question_id": 1432, "answer_sql": ["SELECT CAST(COUNT(CASE WHEN amount = 50 THEN income_id ELSE NULL END) AS REAL) * 100 / COUNT(member_id) AS percentage \nFROM income \nJOIN member ON income.link_to_member = member.member_id \nWHERE member.t_shirt_size = 'Medium' AND member.position = 'Member'"]}, {"question_id": 1433, "answer_sql": ["SELECT DISTINCT T1.state, T1.short_state FROM zip_code AS T1 JOIN ( SELECT zip_code FROM zip_code WHERE type = 'PO Box' ) AS T2 ON T1.zip_code = T2.zip_code;"]}, {"question_id": 1434, "answer_sql": ["SELECT zip_code FROM zip_code WHERE type = 'PO Box' AND state = 'Puerto Rico' AND county = 'San Juan Municipio' AND short_state = 'PR';"]}, {"question_id": 1435, "answer_sql": ["SELECT event_name FROM event WHERE status = 'Closed' AND type = 'Game' AND event_date BETWEEN '2019-03-15' AND '2020-03-20';"]}, {"question_id": 1436, "answer_sql": []}, {"question_id": 1437, "answer_sql": ["SELECT m.member_id, m.first_name, m.last_name, m.position, m.t_shirt_size, m.phone, m.zip, m.email, e.event_name, e.event_date, e.type, e.notes, e.location, e.status, a.link_to_event, a.link_to_member FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE m.member_id IN ( SELECT link_to_member FROM expense WHERE approved = 'true' AND expense_date BETWEEN '2019-01-10' AND '2019-11-19' )", "SELECT m.member_id, m.first_name, m.last_name, e.event_name, e.event_date, e.event_id, a.link_to_event FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE m.member_id IN ( SELECT link_to_member FROM expense WHERE expense_date BETWEEN '2019-01-10' AND '2019-11-19' AND approved = 'true' )", "SELECT m.member_id, m.first_name, m.last_name, e.event_name, e.event_date, e.event_id, a.link_to_event, a.link_to_member FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE m.member_id IN ( SELECT link_to_member FROM expense WHERE expense_date BETWEEN '2019-01-10' AND '2019-11-19' AND approved = 'true' )"]}, {"question_id": 1438, "answer_sql": ["SELECT major.college FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Katy' AND member.link_to_major = 'rec1N0upiVLy5esTO';"]}, {"question_id": 1439, "answer_sql": ["SELECT member.phone FROM member JOIN major ON member.link_to_major = major.major_id JOIN zip_code ON member.zip = zip_code.zip_code WHERE major.major_name = 'Business' AND major.department = 'College of Agriculture and Applied Sciences';"]}, {"question_id": 1440, "answer_sql": ["SELECT member.email FROM expense JOIN member ON expense.link_to_member = member.member_id WHERE expense_date BETWEEN '2019-09-10' AND '2019-11-19' AND cost > 20;", "SELECT DISTINCT m.email \nFROM expense e \nJOIN member m ON e.link_to_member = m.member_id \nWHERE e.cost > 20 AND e.expense_date BETWEEN '2019-09-10' AND '2019-11-19'"]}, {"question_id": 1441, "answer_sql": ["SELECT COUNT(DISTINCT m.member_id) FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE ma.major_name = 'Education' AND ma.department = 'College of Education & Human Services';"]}, {"question_id": 1442, "answer_sql": ["SELECT CAST(COUNT(CASE WHEN budget.remaining < 0 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(event_id) AS percentage FROM budget JOIN event ON budget.link_to_event = event.event_id;", "SELECT CAST(COUNT(CASE WHEN T2.remaining < 0 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.event_id) AS percentage FROM event AS T1 JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.remaining < 0;"]}, {"question_id": 1443, "answer_sql": ["SELECT event_id, location, status FROM event WHERE event_date BETWEEN '2019-11-01' AND '2020-03-31';"]}, {"question_id": 1444, "answer_sql": ["SELECT expense_id, expense_description, expense_date, cost, approved, link_to_member, link_to_budget \nFROM expense \nWHERE cost > 50;", "SELECT expense.expense_id, expense.expense_description, expense.cost FROM expense WHERE expense.cost > (SELECT AVG(cost) FROM expense) GROUP BY expense.expense_id, expense.expense_description, expense.cost HAVING AVG(cost) > 50;", "SELECT expense_id, expense_description, expense_date, cost, approved, link_to_member, link_to_budget FROM expense WHERE cost > 50 GROUP BY expense_id, expense_description, expense_date, cost, approved, link_to_member, link_to_budget HAVING COUNT(expense_id) > 1;"]}, {"question_id": 1445, "answer_sql": ["SELECT first_name, last_name FROM member WHERE t_shirt_size = 'X-Large';"]}, {"question_id": 1446, "answer_sql": ["SELECT CAST(SUM(CASE WHEN type = 'PO Box' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(zip_code) AS PO_Box_Percentage FROM zip_code;", "SELECT (SUM(CASE WHEN type = 'PO Box' THEN 1 ELSE 0 END) * 100) / COUNT(zip_code) AS PO_Box_Percentage FROM zip_code;"]}, {"question_id": 1447, "answer_sql": ["SELECT event.event_name, event.location FROM event JOIN budget ON event.event_id = budget.link_to_event WHERE budget.remaining > 0;", "SELECT event_name, location FROM event WHERE event_id IN ( SELECT link_to_event FROM budget WHERE remaining > 0 ) AND status = 'Underspent';", "SELECT event_name, location FROM event WHERE event_id IN ( SELECT link_to_event FROM budget WHERE remaining > 0 )"]}, {"question_id": 1448, "answer_sql": ["SELECT event.event_name, event.event_date FROM event JOIN expense ON event.event_id = expense.link_to_budget WHERE expense.expense_description = 'Pizza' AND expense.cost BETWEEN 50 AND 100;"]}, {"question_id": 1449, "answer_sql": ["SELECT member.first_name, major.major_name FROM member JOIN major ON member.link_to_major = major.major_id JOIN expense ON member.member_id = expense.link_to_member WHERE expense.cost > 100;", "SELECT member.first_name, member.last_name, major.major_name FROM member JOIN major ON member.link_to_major = major.major_id JOIN expense ON member.member_id = expense.link_to_member WHERE expense.cost > 100;"]}, {"question_id": 1450, "answer_sql": ["SELECT zip_code.city, zip_code.state FROM zip_code JOIN event ON zip_code.zip_code = event.location JOIN member ON member.zip = zip_code.zip_code JOIN income ON member.member_id = income.link_to_member GROUP BY zip_code.city, zip_code.state HAVING COUNT(income.link_to_member) > 40;"]}, {"question_id": 1451, "answer_sql": ["SELECT m.first_name, m.last_name, MAX(e.cost) AS max_cost FROM member m JOIN expense e ON m.member_id = e.link_to_member GROUP BY m.member_id HAVING COUNT(e.expense_id) > 1"]}, {"question_id": 1452, "answer_sql": ["SELECT AVG( expense.cost ) AS average_amount_paid FROM expense JOIN member ON expense.link_to_member = member.member_id WHERE member.position != 'Member';"]}, {"question_id": 1453, "answer_sql": []}, {"question_id": 1454, "answer_sql": []}, {"question_id": 1455, "answer_sql": ["SELECT budget.category, MAX(expense.cost) AS max_cost FROM expense JOIN budget ON expense.link_to_budget = budget.budget_id WHERE expense.expense_description = 'Water, chips, cookies' GROUP BY budget.category;"]}, {"question_id": 1456, "answer_sql": ["SELECT member.first_name, member.last_name, SUM(expense.cost) as total_spending FROM member JOIN expense ON member.member_id = expense.link_to_member GROUP BY member.member_id ORDER BY total_spending DESC LIMIT 5;"]}, {"question_id": 1457, "answer_sql": ["SELECT member.first_name, member.last_name, member.phone FROM member WHERE member.member_id IN ( SELECT link_to_member FROM expense GROUP BY link_to_member HAVING MAX(cost) > ( SELECT AVG(cost) FROM expense GROUP BY link_to_member ) )", "SELECT m.first_name, m.last_name, m.phone FROM member m JOIN expense e ON m.member_id = e.link_to_member WHERE e.cost > (SELECT AVG(cost) FROM expense)", "SELECT member.first_name, member.last_name, member.phone FROM member WHERE member.member_id IN ( SELECT link_to_member FROM expense GROUP BY link_to_member HAVING AVG(cost) < (SELECT AVG(cost) FROM expense) )"]}, {"question_id": 1458, "answer_sql": ["SELECT (SUM(CASE WHEN state = 'Maine' THEN 1 ELSE 0 END) / COUNT(position = 'Member')) * 100 - (SUM(CASE WHEN state = 'Vermont' THEN 1 ELSE 0 END) / COUNT(position = 'Member')) * 100 AS difference_in_percentage FROM member JOIN zip_code ON member.zip = zip_code.zip_code WHERE state IN ('Maine', 'Vermont');", "SELECT SUM(CASE WHEN state = 'Maine' THEN 1 ELSE 0 END) / COUNT(position = 'Member') AS Maine_percentage, SUM(CASE WHEN state = 'Vermont' THEN 1 ELSE 0 END) / COUNT(position = 'Member') AS Vermont_percentage FROM member JOIN zip_code ON member.zip = zip_code.zip_code WHERE position = 'Member';"]}, {"question_id": 1459, "answer_sql": ["SELECT major.major_name, major.department FROM major JOIN member ON major.major_id = member.link_to_major WHERE member.first_name = 'Garrett' AND member.last_name = 'Gerke';"]}, {"question_id": 1460, "answer_sql": ["SELECT member.first_name, member.last_name, expense.cost FROM expense JOIN member ON expense.link_to_member = member.member_id WHERE expense.expense_description IN ('Water', 'Veggie tray', 'supplies')"]}, {"question_id": 1461, "answer_sql": ["SELECT last_name, phone FROM member WHERE link_to_major = (SELECT major_id FROM major WHERE major_name = 'Elementary Education') ORDER BY last_name;", "SELECT member.last_name, member.phone FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Elementary Education';", "SELECT last_name, phone FROM member WHERE link_to_major = (SELECT major_id FROM major WHERE major_name = 'Elementary Education') AND position = 'Student';"]}, {"question_id": 1462, "answer_sql": ["SELECT budget.category, budget.amount FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'January Speaker';", "SELECT category, amount FROM budget WHERE event_status = 'budgeted' AND link_to_event = 'January Speaker';"]}, {"question_id": 1463, "answer_sql": ["SELECT event_name FROM event JOIN budget ON event.event_id = budget.link_to_event WHERE category = 'Food';"]}, {"question_id": 1464, "answer_sql": ["SELECT member.first_name, member.last_name, income.amount FROM member JOIN income ON member.member_id = income.link_to_member WHERE income.date_received = '9/9/2019' AND income.amount IS NOT NULL;"]}, {"question_id": 1465, "answer_sql": ["SELECT budget.category FROM expense JOIN budget ON expense.link_to_budget = budget.budget_id WHERE expense.expense_description = 'Posters';"]}, {"question_id": 1466, "answer_sql": ["SELECT major_name, college FROM member JOIN major ON member.link_to_major = major.major_id WHERE position = 'Secretary';", "SELECT major.college, member.first_name, member.last_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Secretary';", "SELECT member.first_name, member.last_name, major.college FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Secretary';"]}, {"question_id": 1467, "answer_sql": ["SELECT e.event_name, SUM(b.spent) AS total_spent FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE b.category = 'Speaker Gifts' GROUP BY e.event_name ORDER BY total_spent DESC;", "SELECT e.event_name FROM event e JOIN budget b ON e.event_id = b.link_to_event JOIN expense ex ON b.budget_id = ex.link_to_budget WHERE b.category = 'Speaker Gifts' GROUP BY e.event_name", "SELECT e.event_name FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE b.category = 'Speaker Gifts' GROUP BY e.event_name;"]}, {"question_id": 1468, "answer_sql": ["SELECT city FROM zip_code WHERE state = 'OH' AND county = 'Cuyahoga' AND short_state = 'OH' AND city = 'Garrett Girke';"]}, {"question_id": 1469, "answer_sql": ["SELECT member.first_name, member.last_name, member.position FROM member JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.city = 'Lincolnton' AND zip_code.state = 'North Carolina';"]}, {"question_id": 1470, "answer_sql": ["SELECT COUNT(*) AS GasStationsCount FROM gasstations WHERE Country = 'CZE' AND Segment = 'Premium';", "SELECT COUNT(T1.GasStationID) AS PremiumGasStations FROM gasstations AS T1 JOIN customers AS T2 ON T1.ChainID = T2.CustomerID WHERE T1.Country = 'CZE' AND T1.Segment = 'Premium';", "SELECT COUNT(T2.GasStationID) AS PremiumGasStations FROM customers AS T1 JOIN transactions_1k AS T3 ON T1.CustomerID = T3.CustomerID JOIN gasstations AS T2 ON T2.GasStationID = T3.GasStationID WHERE T1.Segment = 'Premium' AND T2.Country = 'CZE';"]}, {"question_id": 1471, "answer_sql": ["SELECT COUNT(CASE WHEN Currency = 'EUR' THEN 1 ELSE NULL END) / COUNT(CASE WHEN Currency = 'CZK' THEN 1 ELSE NULL END) FROM customers;"]}, {"question_id": 1472, "answer_sql": ["SELECT c.CustomerID, c.Segment, c.Currency, SUM(y.Consumption) AS TotalConsumption FROM customers c JOIN `yearmonth` y ON c.CustomerID = y.CustomerID WHERE y.Date BETWEEN '201201' AND '201212' GROUP BY c.CustomerID, c.Segment, c.Currency ORDER BY TotalConsumption ASC LIMIT 1;", "SELECT c.CustomerID, c.Segment, c.Currency, ym.Consumption FROM customers c JOIN yearmonth ym ON c.CustomerID = ym.CustomerID WHERE ym.Date BETWEEN '201201' AND '201212' ORDER BY ym.Consumption ASC LIMIT 1;", "SELECT c.CustomerID, c.Segment, c.Currency, SUM(y.Consumption) AS TotalConsumption FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID JOIN yearmonth y ON c.CustomerID = y.CustomerID AND y.Date BETWEEN '201201' AND '201212' WHERE y.Date BETWEEN '201201' AND '201212' GROUP BY c.CustomerID, c.Segment, c.Currency ORDER BY TotalConsumption ASC LIMIT 1;", "SELECT c.CustomerID, c.Segment, c.Currency, y.Date, y.Consumption FROM customers c JOIN yearmonth y ON c.CustomerID = y.CustomerID WHERE y.Date BETWEEN '201201' AND '201212' ORDER BY y.Consumption ASC LIMIT 1;"]}, {"question_id": 1473, "answer_sql": ["SELECT AVG(yearmonth.Consumption) / 12 AS AverageMonthlyConsumption FROM yearmonth JOIN customers ON yearmonth.CustomerID = customers.CustomerID WHERE customers.Segment = 'SME' AND yearmonth.Date BETWEEN '201301' AND '201312';", "SELECT AVG(yearmonth.Consumption) AS AverageMonthlyConsumption FROM yearmonth JOIN customers ON yearmonth.CustomerID = customers.CustomerID WHERE customers.Segment = 'SME' AND yearmonth.Date BETWEEN '201301' AND '201312';"]}, {"question_id": 1474, "answer_sql": ["SELECT c.CustomerID, c.Segment, c.Currency, SUM(t.Amount) AS TotalConsumption FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID JOIN yearmonth ym ON c.CustomerID = ym.CustomerID AND ym.Date BETWEEN '201101' AND '201112' WHERE c.Currency = 'CZK' GROUP BY c.CustomerID, c.Segment, c.Currency ORDER BY TotalConsumption DESC LIMIT 1;"]}, {"question_id": 1475, "answer_sql": ["SELECT COUNT(DISTINCT T1.CustomerID) AS NumberOfCustomers FROM yearmonth AS T1 JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date BETWEEN '201201' AND '201212' AND T1.Consumption < 30000 AND T2.Segment = 'KAM';", "SELECT COUNT(T1.CustomerID) AS NumberOfCustomers FROM customers AS T1 JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date BETWEEN '201201' AND '201212' AND T1.Segment = 'KAM' AND T2.Consumption < 30000;"]}, {"question_id": 1476, "answer_sql": ["SELECT SUM(CASE WHEN customers.Currency = 'CZK' THEN yearmonth.Consumption ELSE 0 END) - SUM(CASE WHEN customers.Currency = 'EUR' THEN yearmonth.Consumption ELSE 0 END) AS DifferenceInConsumption FROM customers JOIN yearmonth ON customers.CustomerID = yearmonth.CustomerID WHERE yearmonth.Date BETWEEN '201201' AND '201212'", "SELECT SUM(CASE WHEN T1.Currency = 'CZK' THEN T2.Amount ELSE 0 END) - SUM(CASE WHEN T1.Currency = 'EUR' THEN T2.Amount ELSE 0 END) AS DifferenceInConsumption FROM customers AS T1 JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date BETWEEN '201201' AND '201212';", "SELECT SUM(CASE WHEN customers.Currency = 'CZK' THEN yearmonth.Consumption ELSE 0 END) - SUM(CASE WHEN customers.Currency = 'EUR' THEN yearmonth.Consumption ELSE 0 END) AS DifferenceInConsumption FROM customers JOIN transactions_1k ON customers.CustomerID = transactions_1k.CustomerID JOIN yearmonth ON transactions_1k.CustomerID = yearmonth.CustomerID WHERE transactions_1k.Date BETWEEN '201201' AND '201212' GROUP BY customers.Currency;"]}, {"question_id": 1477, "answer_sql": ["SELECT y.Date, SUM(y.Consumption) AS TotalConsumption FROM yearmonth y JOIN customers c ON y.CustomerID = c.CustomerID WHERE c.Currency = 'EUR' GROUP BY y.Date ORDER BY TotalConsumption DESC LIMIT 1;", "SELECT y.Date, y.Consumption, c.Currency FROM yearmonth y JOIN customers c ON y.CustomerID = c.CustomerID JOIN transactions_1k t ON y.CustomerID = t.CustomerID WHERE c.Currency = 'EUR' ORDER BY y.Consumption DESC LIMIT 1;", "SELECT y.Date, SUM(t.Amount * t.Price) AS TotalGasUse FROM yearmonth y JOIN transactions_1k t ON y.CustomerID = t.CustomerID AND y.Date = t.Date JOIN customers c ON y.CustomerID = c.CustomerID WHERE c.Currency = 'EUR' GROUP BY y.Date ORDER BY TotalGasUse DESC LIMIT 1;", "SELECT y.Date, y.Consumption, c.Currency FROM customers c JOIN yearmonth y ON c.CustomerID = y.CustomerID JOIN transactions_1k t ON c.CustomerID = t.CustomerID WHERE t.Price = (SELECT MAX(Price) FROM transactions_1k WHERE Price > 0) GROUP BY y.Date, y.Consumption, c.Currency ORDER BY y.Date DESC LIMIT 1;"]}, {"question_id": 1478, "answer_sql": ["SELECT Segment, COUNT(*) AS Consumption FROM transactions_1k JOIN customers ON transactions_1k.CustomerID = customers.CustomerID GROUP BY Segment ORDER BY Consumption ASC LIMIT 1;", "SELECT Segment FROM customers WHERE CustomerID IN ( SELECT CustomerID FROM yearmonth GROUP BY CustomerID ORDER BY SUM(Consumption) ASC LIMIT 1 )", "SELECT Segment FROM customers WHERE CustomerID = ( SELECT CustomerID FROM yearmonth GROUP BY Date ORDER BY SUM(Consumption) ASC LIMIT 1 )", "SELECT customers.Segment, MIN(yearmonth.Consumption) AS Min_Consumption FROM transactions_1k JOIN yearmonth ON transactions_1k.Date = yearmonth.Date JOIN customers ON transactions_1k.CustomerID = customers.CustomerID GROUP BY customers.Segment ORDER BY Min_Consumption ASC LIMIT 1;"]}, {"question_id": 1479, "answer_sql": ["SELECT T1.CustomerID, T1.Date, T1.Consumption, T1.Date AS Year FROM yearmonth AS T1 JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'CZK' ORDER BY T1.Consumption DESC LIMIT 1;", "SELECT y.CustomerID, y.Date, y.Consumption, c.Segment, c.Currency FROM yearmonth y JOIN customers c ON y.CustomerID = c.CustomerID WHERE c.Currency = 'CZK' ORDER BY y.Consumption DESC LIMIT 1;", "SELECT y.Date, y.Consumption, c.Currency FROM customers c JOIN yearmonth y ON c.CustomerID = y.CustomerID WHERE c.Currency = 'CZK' ORDER BY y.Consumption DESC LIMIT 1;"]}, {"question_id": 1480, "answer_sql": ["SELECT ym.Date, SUM(ym.Consumption) AS TotalConsumption FROM yearmonth ym JOIN customers c ON ym.CustomerID = c.CustomerID WHERE c.Segment = 'SME' AND ym.Date LIKE '2013%' GROUP BY ym.Date ORDER BY TotalConsumption DESC LIMIT 1;", "SELECT ym.Date, ym.Consumption FROM yearmonth ym JOIN customers c ON ym.CustomerID = c.CustomerID WHERE c.Segment = 'SME' AND ym.Date LIKE '2013%' AND ym.Date LIKE '2013%' ORDER BY ym.Date DESC LIMIT 1;", "SELECT ym.Date, ym.Consumption FROM yearmonth ym JOIN customers c ON ym.CustomerID = c.CustomerID WHERE c.Segment = 'SME' AND ym.Date LIKE '2013%' ORDER BY ym.Date LIMIT 1;", "SELECT ym.Date, SUM(ym.Consumption) AS TotalConsumption FROM customers c JOIN yearmonth ym ON c.CustomerID = ym.CustomerID WHERE c.Segment = 'SME' AND ym.Date BETWEEN '2013-01-01' AND '2013-12-31' GROUP BY ym.Date ORDER BY TotalConsumption DESC LIMIT 1;"]}, {"question_id": 1481, "answer_sql": ["SELECT CASE WHEN T2.Segment = 'SME' THEN 'SME' WHEN T2.Segment = 'LAM' THEN 'LAM' WHEN T2.Segment = 'KAM' THEN 'KAM' END AS Segment, AVG(T1.Consumption) AS AnnualAverageConsumption FROM (SELECT CustomerID, SUM(Price * Amount) AS Consumption FROM transactions_1k WHERE Date BETWEEN '201301' AND '201312' GROUP BY CustomerID ORDER BY Consumption ASC LIMIT 1) T1 JOIN customers T2 ON T1.CustomerID = T2.CustomerID GROUP BY Segment ORDER BY Segment;", "SELECT 'SME' AS Segment, SUM(CASE WHEN T1.Segment = 'SME' THEN T2.Consumption ELSE 0 END) - SUM(CASE WHEN T1.Segment = 'LAM' THEN T2.Consumption ELSE 0 END) AS Difference FROM customers AS T1 JOIN `yearmonth` AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment IN ('SME', 'LAM', 'KAM') AND T2.Date BETWEEN '201301' AND '201312' GROUP BY T1.Segment UNION ALL SELECT 'LAM' AS Segment, SUM(CASE WHEN T1.Segment = 'SME' THEN T2.Consumption ELSE 0 END) - SUM(CASE WHEN T1.Segment = 'KAM' THEN T2.Consumption ELSE 0 END) AS Difference FROM customers AS T1 JOIN `yearmonth` AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment IN ('SME', 'LAM', 'KAM') AND T2.Date BETWEEN '201301' AND '201312' GROUP BY T1.Segment UNION ALL SELECT 'KAM' AS Segment, SUM(CASE WHEN T1.Segment = 'LAM' THEN T2.Consumption ELSE 0 END) - SUM(CASE WHEN T1.Segment = 'SME' THEN T2.Consumption ELSE 0 END) AS Difference FROM customers AS T1 JOIN `yearmonth` AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment IN ('SME', 'LAM', 'KAM') AND T2.Date BETWEEN '201301' AND '201312' GROUP BY T1.Segment;", "SELECT SUM(CASE WHEN T1.Segment = 'SME' THEN T2.Consumption ELSE 0 END) - SUM(CASE WHEN T1.Segment = 'LAM' THEN T2.Consumption ELSE 0 END) AS Difference_SME_LAM, SUM(CASE WHEN T1.Segment = 'LAM' THEN T2.Consumption ELSE 0 END) - SUM(CASE WHEN T1.Segment = 'KAM' THEN T2.Consumption ELSE 0 END) AS Difference_LAM_KAM, SUM(CASE WHEN T1.Segment = 'KAM' THEN T2.Consumption ELSE 0 END) - SUM(CASE WHEN T1.Segment = 'SME' THEN T2.Consumption ELSE 0 END) AS Difference_KAM_SME FROM customers AS T1 JOIN `yearmonth` AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment IN ('SME', 'LAM', 'KAM') AND T2.Date BETWEEN '201301' AND '201312' GROUP BY T1.Segment;", "SELECT 'SME' AS Segment, SUM(CASE WHEN T1.Segment = 'SME' THEN T2.Consumption ELSE 0 END) AS SME_Consumption, SUM(CASE WHEN T1.Segment = 'LAM' THEN T2.Consumption ELSE 0 END) AS LAM_Consumption, SUM(CASE WHEN T1.Segment = 'KAM' THEN T2.Consumption ELSE 0 END) AS KAM_Consumption FROM customers AS T1 JOIN `yearmonth` AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment IN ('SME', 'LAM', 'KAM') AND T2.Date BETWEEN '201301' AND '201312' GROUP BY T1.Segment"]}, {"question_id": 1482, "answer_sql": ["SELECT c.Segment, SUM(CASE WHEN STRFTIME('%Y', t.Date) = '2012' THEN t.Amount ELSE 0 END) AS Consumption_2012, SUM(CASE WHEN STRFTIME('%Y', t.Date) = '2013' THEN t.Amount ELSE 0 END) AS Consumption_2013, (SUM(CASE WHEN STRFTIME('%Y', t.Date) = '2013' THEN t.Amount ELSE 0 END) - SUM(CASE WHEN STRFTIME('%Y', t.Date) = '2012' THEN t.Amount ELSE 0 END)) / SUM(CASE WHEN STRFTIME('%Y', t.Date) = '2013' THEN t.Amount ELSE 0 END) * 100 AS Percentage_Increase FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID WHERE STRFTIME('%Y', t.Date) IN ('2012', '2013') GROUP BY c.Segment ORDER BY Percentage_Increase DESC LIMIT 3;", "SELECT c.Segment, SUM(CASE WHEN T1.Date BETWEEN '20120101' AND '20131231' THEN T1.Amount ELSE 0 END) AS TotalConsumption, SUM(CASE WHEN T1.Date BETWEEN '20120101' AND '20131231' THEN T1.Amount ELSE 0 END) / NULLIF(SUM(T1.Amount), 0) * 100 AS PercentageIncrease FROM customers c JOIN transactions_1k T1 ON c.CustomerID = T1.CustomerID GROUP BY c.Segment ORDER BY TotalConsumption DESC, PercentageIncrease DESC;", "SELECT c.Segment, SUM(CASE WHEN STRFTIME('%Y', t.Date) = '2012' THEN t.Amount ELSE 0 END) AS Consumption_2012, SUM(CASE WHEN STRFTIME('%Y', t.Date) = '2013' THEN t.Amount ELSE 0 END) AS Consumption_2013, (SUM(CASE WHEN STRFTIME('%Y', t.Date) = '2013' THEN t.Amount ELSE 0 END) - SUM(CASE WHEN STRFTIME('%Y', t.Date) = '2012' THEN t.Amount ELSE 0 END)) / SUM(CASE WHEN STRFTIME('%Y', t.Date) = '2013' THEN t.Amount ELSE 0 END) * 100 AS Percentage_Increase FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID WHERE STRFTIME('%Y', t.Date) IN ('2012', '2013') GROUP BY c.Segment ORDER BY Percentage_Increase DESC LIMIT 1;", "SELECT c.Segment, (SUM(CASE WHEN T1.Date BETWEEN '20120101' AND '20131231' THEN T1.Amount ELSE 0 END) - SUM(CASE WHEN T2.Date BETWEEN '20120101' AND '20131231' THEN T2.Amount ELSE 0 END)) / SUM(CASE WHEN T2.Date BETWEEN '20120101' AND '20131231' THEN T2.Amount ELSE 0 END) * 100 AS PercentageIncrease FROM customers c JOIN transactions_1k T1 ON c.CustomerID = T1.CustomerID JOIN transactions_1k T2 ON c.CustomerID = T2.CustomerID WHERE c.Currency = 'EUR' GROUP BY c.Segment ORDER BY PercentageIncrease DESC, c.Segment LIMIT 3;", "SELECT c.Segment, (SUM(CASE WHEN T1.Date BETWEEN '20120101' AND '20131231' THEN T1.Amount ELSE 0 END) - SUM(CASE WHEN T2.Date BETWEEN '20120101' AND '20131231' THEN T2.Amount ELSE 0 END)) / SUM(CASE WHEN T2.Date BETWEEN '20120101' AND '20131231' THEN T2.Amount ELSE 0 END) * 100 AS PercentageIncrease FROM customers c JOIN transactions_1k T1 ON c.CustomerID = T1.CustomerID JOIN transactions_1k T2 ON c.CustomerID = T2.CustomerID WHERE T1.Date BETWEEN '20120101' AND '20131231' GROUP BY c.Segment ORDER BY PercentageIncrease DESC, c.Segment LIMIT 3;"]}, {"question_id": 1483, "answer_sql": ["SELECT SUM(T2.Consumption) AS TotalConsumption FROM customers AS T1 JOIN `yearmonth` AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.CustomerID = 6 AND T2.Date BETWEEN '201308' AND '201311';", "SELECT SUM(T1.Amount) AS TotalConsumption FROM transactions_1k AS T1 JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.CustomerID = 6 AND T1.Date BETWEEN '201308' AND '201311';"]}, {"question_id": 1484, "answer_sql": ["SELECT COUNT(CASE WHEN Country = 'Czech Republic' THEN GasStationID ELSE NULL END) - COUNT(CASE WHEN Country = 'Slovakia' THEN GasStationID ELSE NULL END) AS MoreDiscountGasStations FROM gasstations WHERE Segment = 'Discount';", "SELECT COUNT(*) - 1 AS more_discount_gas_stations FROM gasstations WHERE Country = 'Czech Republic'"]}, {"question_id": 1485, "answer_sql": []}, {"question_id": 1486, "answer_sql": ["SELECT SUM(CASE WHEN customers.Segment = 'SME' THEN 1 ELSE 0 END) AS SMEs, SUM(CASE WHEN customers.Segment = 'SME' AND customers.Currency = 'CZK' THEN 1 ELSE 0 END) AS SMEs_CZK, SUM(CASE WHEN customers.Segment = 'SME' AND customers.Currency = 'EUR' THEN 1 ELSE 0 END) AS SMEs_EUR FROM customers WHERE customers.Segment = 'SME';", "SELECT SUM(CASE WHEN customers.Currency = 'CZK' THEN 1 ELSE 0 END) - SUM(CASE WHEN customers.Currency = 'EUR' THEN 1 ELSE 0 END) AS Difference FROM customers JOIN transactions_1k ON customers.CustomerID = transactions_1k.CustomerID;", "SELECT SUM(CASE WHEN customers.Currency = 'CZK' THEN 1 ELSE 0 END) - SUM(CASE WHEN customers.Currency = 'EUR' THEN 1 ELSE 0 END) AS Difference FROM customers;"]}, {"question_id": 1487, "answer_sql": ["SELECT c.CustomerID, c.Segment, c.Currency, SUM(ym.Consumption) AS TotalConsumption FROM customers c JOIN yearmonth ym ON c.CustomerID = ym.CustomerID WHERE ym.Date LIKE '201310%' GROUP BY c.CustomerID, c.Segment, c.Currency ORDER BY TotalConsumption DESC LIMIT 1;", "SELECT c.CustomerID, c.Segment, c.Currency, ym.Consumption FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID JOIN yearmonth ym ON ym.CustomerID = t.CustomerID AND ym.Date = '201310' JOIN products p ON t.ProductID = p.ProductID WHERE c.Currency = 'Euro' ORDER BY ym.Consumption DESC LIMIT 1;"]}, {"question_id": 1488, "answer_sql": ["SELECT c.Segment, SUM(t.Amount) AS TotalConsumption FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID WHERE c.Segment = 'KAM' GROUP BY c.Segment ORDER BY TotalConsumption DESC LIMIT 1;", "SELECT customers.CustomerID, customers.Segment, customers.Currency, MAX(yearmonth.Consumption) AS MaxConsumption FROM customers JOIN transactions_1k ON customers.CustomerID = transactions_1k.CustomerID JOIN yearmonth ON transactions_1k.CustomerID = yearmonth.CustomerID AND transactions_1k.Date = yearmonth.Date WHERE customers.Segment = 'KAM' GROUP BY customers.CustomerID, customers.Segment, customers.Currency ORDER BY MaxConsumption DESC LIMIT 1;", "SELECT customers.CustomerID, customers.Segment, customers.Currency, MAX(yearmonth.Consumption) AS MaxConsumption FROM customers JOIN transactions_1k ON customers.CustomerID = transactions_1k.CustomerID JOIN yearmonth ON transactions_1k.CustomerID = yearmonth.CustomerID WHERE customers.Segment = 'KAM' GROUP BY customers.CustomerID, customers.Segment, customers.Currency ORDER BY MaxConsumption DESC LIMIT 1;", "SELECT customers.CustomerID, customers.Segment, customers.Currency, MAX(yearmonth.Consumption) AS MaxConsumption FROM customers JOIN yearmonth ON customers.CustomerID = yearmonth.CustomerID WHERE customers.Segment = 'KAM' GROUP BY customers.CustomerID, customers.Segment, customers.Currency", "SELECT customers.CustomerID, customers.Segment, customers.Currency, MAX(transactions_1k.Amount) AS TotalConsumption FROM customers JOIN transactions_1k ON customers.CustomerID = transactions_1k.CustomerID WHERE customers.Segment = 'KAM' GROUP BY customers.CustomerID, customers.Segment, customers.Currency ORDER BY TotalConsumption DESC LIMIT 1;"]}, {"question_id": 1489, "answer_sql": ["SELECT SUM(T2.Consumption) FROM customers AS T1 JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'KAM' AND T2.Date LIKE '201305%'", "SELECT SUM(T1.Amount) AS TotalConsumption FROM transactions_1k AS T1 JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Segment = 'KAM' AND T1.Date LIKE '201305%'"]}, {"question_id": 1490, "answer_sql": ["SELECT CAST(SUM(CASE WHEN T2.Amount > 46.73 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.CustomerID) AS Percentage FROM customers AS T1 JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM'"]}, {"question_id": 1491, "answer_sql": ["SELECT g.Country, COUNT(*) AS ValueForMoneyGasStations FROM gasstations g JOIN transactions_1k t ON g.GasStationID = t.GasStationID JOIN products p ON t.ProductID = p.ProductID JOIN customers c ON t.CustomerID = c.CustomerID GROUP BY g.Country ORDER BY ValueForMoneyGasStations DESC;", "SELECT Country, COUNT(*) AS ValueForMoneyGasStations FROM gasstations JOIN transactions_1k ON gasstations.GasStationID = transactions_1k.GasStationID JOIN products ON transactions_1k.ProductID = products.ProductID WHERE transactions_1k.Price / transactions_1k.Amount <= 1.5 GROUP BY Country ORDER BY ValueForMoneyGasStations DESC;", "SELECT g.Country, COUNT(*) AS ValueForMoneyGasStations FROM gasstations g JOIN transactions_1k t ON g.GasStationID = t.GasStationID WHERE t.Price / t.Amount >= 1.5 GROUP BY g.Country ORDER BY ValueForMoneyGasStations DESC;", "SELECT g.Country, COUNT(*) AS ValueForMoneyGasStations FROM gasstations g JOIN transactions_1k t ON g.GasStationID = t.GasStationID WHERE t.Price / t.Amount > 1 GROUP BY g.Country;"]}, {"question_id": 1492, "answer_sql": ["SELECT CAST(SUM(CASE WHEN T1.Currency = 'EUR' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.CustomerID) AS Percentage FROM customers AS T1 JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'KAM';", "SELECT (SUM(CASE WHEN customers.Segment = 'KAM' AND customers.Currency = 'EUR' THEN 1 ELSE 0 END) * 100.0 / COUNT(CASE WHEN customers.Segment = 'KAM' THEN 1 ELSE NULL END)) AS Percentage FROM customers JOIN transactions_1k ON customers.CustomerID = transactions_1k.CustomerID WHERE customers.Currency = 'EUR';", "SELECT (SUM(CASE WHEN customers.Segment = 'KAM' THEN 1 ELSE 0 END) * 100.0 / COUNT(CASE WHEN customers.Segment = 'KAM' THEN 1 ELSE NULL END)) AS PercentageOfKAMUsingEuro FROM customers JOIN transactions_1k ON customers.CustomerID = transactions_1k.CustomerID WHERE customers.Currency = 'Euro';"]}, {"question_id": 1493, "answer_sql": ["SELECT CAST(COUNT(CASE WHEN yearmonth.Consumption > 528.3 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(yearmonth.Consumption) AS Percentage FROM yearmonth JOIN customers ON yearmonth.CustomerID = customers.CustomerID WHERE yearmonth.Date LIKE '201202';", "SELECT CAST(COUNT(CASE WHEN Consumption > 528.3 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(CASE WHEN Consumption > 0 THEN 1 ELSE NULL END) FROM yearmonth WHERE Date LIKE '201202%'", "SELECT CAST(COUNT(CASE WHEN T1.Consumption > 528.3 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.CustomerID) FROM yearmonth AS T1 JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date LIKE '201202%'", "SELECT CAST(COUNT(CASE WHEN Consumption > 528.3 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(CASE WHEN Consumption > 528.3 THEN 1 ELSE NULL END) AS Percentage FROM yearmonth WHERE Date LIKE '201202%';", "SELECT CAST(COUNT(CASE WHEN T1.Consumption > 528.3 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.CustomerID) FROM yearmonth AS T1 JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date LIKE '201202'"]}, {"question_id": 1494, "answer_sql": ["SELECT CAST(SUM(CASE WHEN T2.Segment = 'Premium' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.Segment) AS Percentage FROM gasstations AS T1 JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Country = 'Slovakia';", "SELECT CAST(SUM(CASE WHEN g.Country = 'Slovakia' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(g.Country) AS PremiumPercentage FROM gasstations g JOIN customers c ON g.ChainID = c.CustomerID WHERE g.Segment = 'Premium';"]}, {"question_id": 1495, "answer_sql": ["SELECT customers.CustomerID FROM customers JOIN transactions_1k ON customers.CustomerID = transactions_1k.CustomerID JOIN yearmonth ON customers.CustomerID = yearmonth.CustomerID WHERE yearmonth.Date = '201309' GROUP BY customers.CustomerID ORDER BY SUM(transactions_1k.Amount) DESC LIMIT 1;", "SELECT c.CustomerID FROM customers c JOIN yearmonth ym ON c.CustomerID = ym.CustomerID WHERE ym.Date = '201309' GROUP BY c.CustomerID ORDER BY SUM(ym.Consumption) DESC LIMIT 1;", "SELECT customers.CustomerID FROM customers JOIN yearmonth ON customers.CustomerID = yearmonth.CustomerID JOIN transactions_1k ON customers.CustomerID = transactions_1k.CustomerID WHERE transactions_1k.Date LIKE '201309' GROUP BY customers.CustomerID ORDER BY SUM(transactions_1k.Amount) DESC LIMIT 1;"]}, {"question_id": 1496, "answer_sql": ["SELECT c.Segment FROM customers c JOIN yearmonth ym ON c.CustomerID = ym.CustomerID WHERE ym.Date = '201309' GROUP BY c.Segment ORDER BY SUM(ym.Consumption) ASC LIMIT 1;", "SELECT c.Segment FROM customers c JOIN yearmonth ym ON c.CustomerID = ym.CustomerID WHERE ym.Date LIKE '201309' ORDER BY ym.Consumption ASC LIMIT 1;"]}, {"question_id": 1497, "answer_sql": ["SELECT c.Segment, SUM(ym.Consumption) AS TotalConsumption FROM customers c JOIN yearmonth ym ON c.CustomerID = ym.CustomerID WHERE ym.Date LIKE '201206' GROUP BY c.Segment ORDER BY TotalConsumption ASC LIMIT 1;", "SELECT c.Segment, SUM(t.Amount) AS TotalConsumption FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID JOIN yearmonth ym ON c.CustomerID = ym.CustomerID AND ym.Date = '201206' GROUP BY c.Segment ORDER BY TotalConsumption ASC LIMIT 1;", "SELECT c.Segment FROM customers c JOIN yearmonth ym ON c.CustomerID = ym.CustomerID WHERE ym.Date = '201206' ORDER BY ym.Consumption ASC LIMIT 1;"]}, {"question_id": 1498, "answer_sql": ["SELECT MAX(yearmonth.Consumption) AS HighestMonthlyConsumption FROM yearmonth WHERE yearmonth.Date LIKE '2012%';", "SELECT MAX(yearmonth.Consumption) AS HighestMonthlyConsumption FROM yearmonth WHERE STRFTIME('%Y', yearmonth.Date) = '2012';"]}, {"question_id": 1499, "answer_sql": ["SELECT c.CustomerID, c.Segment, c.Currency, SUM(ym.Consumption) / 12 AS MonthlyConsumption FROM customers c JOIN `yearmonth` ym ON c.CustomerID = ym.CustomerID WHERE c.Currency = 'euro' GROUP BY c.CustomerID, c.Segment, c.Currency ORDER BY MonthlyConsumption DESC;"]}, {"question_id": 1500, "answer_sql": ["SELECT p.Description FROM transactions_1k t JOIN products p ON t.ProductID = p.ProductID WHERE strftime('%Y%m', t.Date) = '201309';"]}, {"question_id": 1501, "answer_sql": ["SELECT DISTINCT g.Country FROM gasstations g JOIN ( SELECT DISTINCT t1.GasStationID FROM transactions_1k t1 WHERE t1.Date LIKE '201306%' ) t ON g.GasStationID = t.GasStationID;"]}, {"question_id": 1502, "answer_sql": ["SELECT DISTINCT g.ChainID FROM gasstations g JOIN transactions_1k t ON g.GasStationID = t.GasStationID JOIN customers c ON t.CustomerID = c.CustomerID WHERE c.Currency = 'EUR';", "SELECT DISTINCT T1.ChainID, T1.Country, T1.Segment FROM gasstations AS T1 JOIN ( SELECT GasStationID, SUM(Price) AS TotalPrice FROM transactions_1k WHERE Price >= 0 GROUP BY GasStationID ) AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.TotalPrice >= 0", "SELECT DISTINCT T1.ChainID, T1.Country, T1.Segment FROM gasstations AS T1 JOIN ( SELECT GasStationID, SUM(Price) AS TotalPrice FROM transactions_1k GROUP BY GasStationID ) AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.TotalPrice * 1.0 / 100.0 = T2.TotalPrice"]}, {"question_id": 1503, "answer_sql": ["SELECT T2.Description, T1.Price * T1.Amount AS AmountInEuros FROM transactions_1k AS T1 JOIN products AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Price IS NOT NULL AND T1.Amount IS NOT NULL", "SELECT T2.Description FROM transactions_1k AS T1 JOIN products AS T2 ON T1.ProductID = T2.ProductID JOIN customers AS T3 ON T1.CustomerID = T3.CustomerID WHERE T1.Price = 'EUR'", "SELECT p.Description, t.Price * t.Amount AS AmountInEuros FROM transactions_1k t JOIN products p ON t.ProductID = p.ProductID WHERE t.Price IS NOT NULL ORDER BY t.Date, t.Time;", "SELECT p.Description, t.Price FROM transactions_1k t JOIN products p ON t.ProductID = p.ProductID WHERE t.Price > 0;", "SELECT T2.Description FROM transactions_1k AS T1 JOIN products AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Price * T1.Amount / 100.00 = T1.Price * T1.Amount / 100.00"]}, {"question_id": 1504, "answer_sql": ["SELECT AVG(Price) AS AverageTotalPrice FROM transactions_1k WHERE Date LIKE '2012-01%'", "SELECT AVG(T1.Price) AS AverageTotalPrice FROM transactions_1k AS T1 JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID AND T1.Date = T2.Date WHERE T2.Date LIKE '2012-01%' GROUP BY T1.Date"]}, {"question_id": 1505, "answer_sql": ["SELECT COUNT(DISTINCT T1.CustomerID) AS NumberOfCustomers FROM customers AS T1 JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID JOIN yearmonth AS T3 ON T1.CustomerID = T3.CustomerID AND T3.Date = T2.Date WHERE T2.Price = 'EUR' AND T3.Consumption > 1000;"]}, {"question_id": 1506, "answer_sql": ["SELECT p.Description FROM products p JOIN transactions_1k t ON p.ProductID = t.ProductID JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE g.Country = 'CZE';", "SELECT DISTINCT p.Description FROM products p JOIN transactions_1k t ON p.ProductID = t.ProductID JOIN gasstations g ON t.GasStationID = g.GasStationID JOIN customers c ON t.CustomerID = c.CustomerID WHERE g.Country = 'CZE';"]}, {"question_id": 1507, "answer_sql": ["SELECT DISTINCT T1.Date, T1.Time FROM transactions_1k AS T1 JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.ChainID = 11;", "SELECT DISTINCT T1.Time FROM transactions_1k AS T1 JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.ChainID = 11;", "SELECT Date, Time FROM transactions_1k WHERE GasStationID IN (SELECT GasStationID FROM gasstations WHERE ChainID = 11)"]}, {"question_id": 1508, "answer_sql": ["SELECT COUNT(T1.TransactionID) AS NumberOfTransactions FROM transactions_1k AS T1 JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID JOIN customers AS T3 ON T1.CustomerID = T3.CustomerID WHERE T2.Country = 'CZE' AND T1.Price > 1000;"]}, {"question_id": 1509, "answer_sql": ["SELECT COUNT(T1.TransactionID) AS TransactionsAfter2012 FROM transactions_1k AS T1 JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE' AND T1.Date > '2012-01-01';"]}, {"question_id": 1510, "answer_sql": ["SELECT AVG(t1.Price) AS AverageTotalPrice FROM transactions_1k t1 JOIN gasstations g ON t1.GasStationID = g.GasStationID WHERE g.Country = 'CZE';", "SELECT AVG(T1.Price) AS AverageTotalPrice FROM transactions_1k AS T1 JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID JOIN customers AS T3 ON T1.CustomerID = T3.CustomerID WHERE T2.Country = 'CZE' GROUP BY T1.CustomerID;"]}, {"question_id": 1511, "answer_sql": ["SELECT AVG(T1.Price) AS AverageTotalPrice FROM transactions_1k AS T1 JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'EUR';", "SELECT AVG(T1.Price) AS AverageTotalPrice FROM transactions_1k AS T1 JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'euro';"]}, {"question_id": 1512, "answer_sql": ["SELECT c.CustomerID, c.Segment, c.Currency, SUM(t.Amount) as TotalSpent FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID WHERE t.Date = '2012-08-25' GROUP BY c.CustomerID, c.Segment, c.Currency ORDER BY TotalSpent DESC LIMIT 1;", "SELECT c.CustomerID, c.Segment, c.Currency, MAX(t.Amount) AS MaxAmount FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID WHERE t.Date = '2012-08-25' GROUP BY c.CustomerID, c.Segment, c.Currency ORDER BY MaxAmount DESC LIMIT 1;"]}, {"question_id": 1513, "answer_sql": ["SELECT T2.Country, T1.TransactionID, T1.Date, T1.Time, T1.CustomerID, T1.CardID, T1.GasStationID, T1.ProductID, T1.Amount, T1.Price FROM transactions_1k AS T1 JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID JOIN customers AS T3 ON T1.CustomerID = T3.CustomerID WHERE T1.Date = '2012-08-25' AND T1.Amount > 0 ORDER BY T1.Date, T1.Time, T1.CustomerID, T1.CardID, T1.GasStationID, T1.ProductID, T1.Amount, T1.Price LIMIT 1;", "SELECT T2.Country FROM transactions_1k AS T1 JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID JOIN customers AS T3 ON T1.CustomerID = T3.CustomerID WHERE T1.Date = '2012-08-25' AND T1.Price > 0 ORDER BY T2.Country LIMIT 1;"]}, {"question_id": 1514, "answer_sql": ["SELECT customers.Currency FROM transactions_1k JOIN customers ON transactions_1k.CustomerID = customers.CustomerID WHERE transactions_1k.Date = '2012-08-24' AND transactions_1k.Time = '16:25:00'", "SELECT customers.Currency FROM customers JOIN transactions_1k ON customers.CustomerID = transactions_1k.CustomerID JOIN yearmonth ON customers.CustomerID = yearmonth.CustomerID WHERE transactions_1k.Date = '2012-08-24' AND transactions_1k.Time = '16:25:00';"]}, {"question_id": 1515, "answer_sql": ["SELECT c.Segment FROM transactions_1k t JOIN customers c ON t.CustomerID = c.CustomerID WHERE t.Date = '2012-08-23' AND t.Time = '21:20:00';", "SELECT customers.Segment FROM customers JOIN transactions_1k ON customers.CustomerID = transactions_1k.CustomerID JOIN yearmonth ON customers.CustomerID = yearmonth.CustomerID WHERE transactions_1k.Date = '2012-08-23' AND transactions_1k.time = '21:20:00';", "SELECT Segment FROM customers WHERE CustomerID = ( SELECT CustomerID FROM ( SELECT CustomerID, MIN(Date) AS min_date FROM transactions_1k WHERE Date LIKE '2012-08-23 21:20:00' GROUP BY CustomerID ) AS subquery )"]}, {"question_id": 1516, "answer_sql": ["SELECT COUNT(T1.TransactionID) AS TransactionCount FROM transactions_1k AS T1 JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID AND T1.Date = T2.Date WHERE T1.Date LIKE '2012-08-26%' AND T1.Time < '13:00:00' AND T1.Price = 0.00;"]}, {"question_id": 1517, "answer_sql": ["SELECT Segment FROM customers WHERE CustomerID = ( SELECT MIN(CustomerID) FROM customers );", "SELECT Segment FROM customers WHERE CustomerID = ( SELECT CustomerID FROM ( SELECT CustomerID, MIN(Date) AS MinDate FROM transactions_1k GROUP BY CustomerID ) AS MinDateGroup )", "SELECT Segment FROM customers WHERE CustomerID = ( SELECT CustomerID FROM transactions_1k ORDER BY Date ASC LIMIT 1 );"]}, {"question_id": 1518, "answer_sql": ["SELECT T2.Country FROM transactions_1k AS T1 JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-24' AND T1.Time = '12:42:00';"]}, {"question_id": 1519, "answer_sql": ["SELECT ProductID FROM transactions_1k WHERE Date = '2012-08-23' AND Time = '21:20:00';"]}, {"question_id": 1520, "answer_sql": ["SELECT t1.CustomerID, SUM(t1.Amount) AS TotalExpenses, t1.Date AS DateOfExpenses FROM transactions_1k t1 JOIN customers c ON t1.CustomerID = c.CustomerID WHERE t1.Date LIKE '2012-01-%' AND t1.Price = 124.05 GROUP BY t1.CustomerID, t1.Date ORDER BY t1.Date LIMIT 1;"]}, {"question_id": 1521, "answer_sql": ["SELECT COUNT(T1.TransactionID) AS TransactionCount FROM transactions_1k AS T1 JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID JOIN customers AS T3 ON T1.CustomerID = T3.CustomerID WHERE T2.Country = 'CZE' AND T1.Date BETWEEN '2012-08-26' AND '2012-08-26 09:00:00'", "SELECT COUNT(T1.TransactionID) AS TransactionCount FROM transactions_1k AS T1 JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID JOIN gasstations AS T3 ON T1.GasStationID = T3.GasStationID WHERE T3.Country = 'CZE' AND T1.Date BETWEEN '2012-08-26' AND '2012-08-26 23:59:59' AND T1.Time BETWEEN '08:00:00' AND '09:00:00';"]}, {"question_id": 1522, "answer_sql": ["SELECT c.Currency FROM customers c JOIN yearmonth y ON c.CustomerID = y.CustomerID WHERE y.Date LIKE '201306' AND y.Consumption = 214582.17;", "SELECT c.Currency FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID JOIN yearmonth y ON c.CustomerID = y.CustomerID AND y.Date LIKE '201306' WHERE t.Amount = 214582.17;"]}, {"question_id": 1523, "answer_sql": ["SELECT c.Segment FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID WHERE t.CardID = 667467;", "SELECT g.Country FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE c.CustomerID = 667467;"]}, {"question_id": 1524, "answer_sql": ["SELECT c.Segment FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID WHERE t.Date = '2012-08-24' AND t.Amount = 548.4;"]}, {"question_id": 1525, "answer_sql": ["SELECT (SUM(CASE WHEN T2.Currency = 'EUR' THEN 1 ELSE 0 END) * 100.0 / COUNT(T2.CustomerID)) AS Percentage FROM transactions_1k AS T1 JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '2012-08-25';", "SELECT (COUNT(CASE WHEN customers.Currency = 'EUR' THEN 1 ELSE NULL END) / COUNT(CASE WHEN customers.Currency = 'EUR' THEN 1 ELSE NULL END) * 100) AS Percentage FROM transactions_1k JOIN customers ON transactions_1k.CustomerID = customers.CustomerID WHERE transactions_1k.Date = '2012-08-25';", "SELECT (COUNT(CASE WHEN customers.Currency = 'EUR' THEN 1 ELSE NULL END) / COUNT(CASE WHEN customers.Currency = 'EUR' THEN NULL ELSE 1 END)) * 100 FROM customers JOIN transactions_1k ON customers.CustomerID = transactions_1k.CustomerID WHERE transactions_1k.Date = '2012-08-25';"]}, {"question_id": 1526, "answer_sql": ["SELECT ym.CustomerID, ym.Date, ym.Consumption AS Consumption_2012, (SELECT Consumption FROM yearmonth WHERE Date = '2013-08-24') AS Consumption_2013, ((SELECT Consumption FROM yearmonth WHERE Date = '2013-08-24') - ym.Consumption) / ym.Consumption AS ConsumptionDecreaseRate FROM yearmonth ym JOIN transactions_1k t ON ym.CustomerID = t.CustomerID WHERE t.Date = '2012-08-24' AND t.Amount = 634.8"]}, {"question_id": 1527, "answer_sql": ["SELECT GasStationID, SUM(Price * Amount) AS TotalRevenue FROM transactions_1k WHERE GasStationID IS NOT NULL GROUP BY GasStationID ORDER BY TotalRevenue DESC LIMIT 1;", "SELECT g.GasStationID, g.Country, MAX(t.Amount) AS HighestRevenue FROM gasstations g JOIN transactions_1k t ON g.GasStationID = t.GasStationID GROUP BY g.GasStationID, g.Country ORDER BY HighestRevenue DESC;", "SELECT g.GasStationID, g.Country, g.Segment, MAX(t.Amount) AS HighestRevenue FROM gasstations g JOIN transactions_1k t ON g.GasStationID = t.GasStationID GROUP BY g.GasStationID, g.Country, g.Segment ORDER BY HighestRevenue DESC LIMIT 1;"]}, {"question_id": 1528, "answer_sql": ["SELECT (SUM(CASE WHEN customers.Segment = 'premium' THEN 1 ELSE 0 END) / COUNT(customers.Segment)) * 100 AS premium_percentage FROM customers JOIN transactions_1k ON customers.CustomerID = transactions_1k.CustomerID JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE customers.Segment = 'SVK';"]}, {"question_id": 1529, "answer_sql": ["SELECT t1.Amount, y.Consumption FROM transactions_1k t1 JOIN customers c ON t1.CustomerID = c.CustomerID JOIN gasstations g ON t1.GasStationID = g.GasStationID JOIN yearmonth y ON c.CustomerID = y.CustomerID AND y.Date LIKE '201201%' WHERE c.CustomerID = 38508", "SELECT t1.CustomerID, t1.Amount FROM transactions_1k t1 JOIN customers c ON t1.CustomerID = c.CustomerID WHERE c.CustomerID = 38508 UNION ALL SELECT t2.CustomerID, t2.Amount FROM transactions_1k t2 JOIN customers c ON t2.CustomerID = c.CustomerID WHERE c.CustomerID = 38508 AND t2.Date LIKE '201201%'", "SELECT t1.CustomerID, t1.Amount FROM transactions_1k t1 JOIN customers c ON t1.CustomerID = c.CustomerID WHERE c.CustomerID = 38508 AND t1.Date LIKE '201201%';"]}, {"question_id": 1530, "answer_sql": ["SELECT products.Description FROM transactions_1k JOIN products ON transactions_1k.ProductID = products.ProductID GROUP BY products.Description ORDER BY SUM(transactions_1k.Amount) DESC LIMIT 5;", "SELECT T2.Description FROM transactions_1k AS T1 JOIN products AS T2 ON T1.ProductID = T2.ProductID ORDER BY T1.Amount DESC LIMIT 5;"]}, {"question_id": 1531, "answer_sql": ["SELECT c.CustomerID, c.Segment, c.Currency, AVG(t.Price / t.Amount) AS AveragePricePerItem FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID JOIN products p ON t.ProductID = p.ProductID GROUP BY c.CustomerID, c.Segment, c.Currency ORDER BY AveragePricePerItem DESC LIMIT 1", "SELECT c.Segment AS Customer_Segment, c.Currency AS Currency, AVG(t.Price) AS Average_Price, AVG(t.Amount) AS Average_Amount FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID GROUP BY c.CustomerID, c.Segment, c.Currency ORDER BY Average_Price DESC LIMIT 1;", "SELECT c.Segment AS Customer_Segment, c.Currency AS Currency, AVG(t.Price) AS Average_Price, AVG(t.Amount) AS Average_Amount FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID GROUP BY c.Segment, c.Currency ORDER BY Average_Price DESC LIMIT 1;"]}, {"question_id": 1532, "answer_sql": ["SELECT g.Country, p.ProductID FROM gasstations g JOIN transactions_1k t ON g.GasStationID = t.GasStationID JOIN products p ON t.ProductID = p.ProductID WHERE p.ProductID = 2 ORDER BY t.Amount DESC LIMIT 1;", "SELECT g.Country, p.Description FROM gasstations g JOIN transactions_1k t ON g.GasStationID = t.GasStationID JOIN products p ON t.ProductID = p.ProductID WHERE p.ProductID = 2 ORDER BY t.Amount DESC LIMIT 1;", "SELECT g.Country FROM gasstations g JOIN transactions_1k t ON g.GasStationID = t.GasStationID WHERE t.ProductID = 2 ORDER BY t.Price DESC LIMIT 1;"]}, {"question_id": 1533, "answer_sql": ["SELECT ym.Date, ym.Consumption FROM yearmonth ym JOIN transactions_1k t ON ym.CustomerID = t.CustomerID JOIN customers c ON t.CustomerID = c.CustomerID WHERE t.ProductID = 5 AND t.Price / t.Amount > 29.00 AND ym.Date LIKE '201208%'", "SELECT ym.CustomerID, ym.Date, ym.Consumption FROM yearmonth ym JOIN transactions_1k t ON ym.CustomerID = t.CustomerID WHERE t.ProductID = 5 AND t.Price / t.Amount > 29.00 AND ym.Date LIKE '201208%'", "SELECT ym.Date, ym.Consumption FROM yearmonth ym JOIN transactions_1k t ON ym.CustomerID = t.CustomerID WHERE t.ProductID = 5 AND t.Amount > 29.00 AND ym.Date LIKE '201208%'"]}]