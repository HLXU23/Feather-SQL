[{"question_id": 0, "answer_sql": ["SELECT MAX(`Free Meal Count (K-12)` / `Enrollment (K-12)`) FROM frpm WHERE `County Name` = 'Alameda' AND `NSLP Provision Status` = 'Eligible' AND `Charter School (Y/N)` = 1;", "SELECT MAX(CAST(`Free Meal Count (K-12)` AS REAL) / `Enrollment (K-12)`) FROM frpm WHERE `County Name` = 'Alameda' AND `Free Meal Count (K-12)` > 0 AND `Enrollment (K-12)` > 0;"]}, {"question_id": 1, "answer_sql": ["SELECT `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` FROM frpm WHERE `School Type` = 'Continuation School' AND `Free Meal Count (Ages 5-17)` > 0 ORDER BY `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` ASC LIMIT 3;", "SELECT `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` FROM frpm WHERE `Educational Option Type` = 'Continuation School' AND `Free Meal Count (Ages 5-17)` IS NOT NULL ORDER BY `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` ASC LIMIT 3;"]}, {"question_id": 2, "answer_sql": ["SELECT T1.Zip FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`Charter School (Y/N)` = 1 AND T1.County = 'Fresno County Office of Education';", "SELECT T1.Zip FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.County = 'Fresno' AND T2.`Charter School (Y/N)` = 1;"]}, {"question_id": 3, "answer_sql": ["SELECT T2.MailStreet, T2.MailStrAbr FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY T1.`FRPM Count (K-12)` DESC LIMIT 1", "SELECT T1.MailStrAbr, T1.MailStreet FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY T2.`FRPM Count (K-12)` DESC LIMIT 1"]}, {"question_id": 4, "answer_sql": ["SELECT T1.Phone FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`Charter Funding Type` = 'Directly funded' AND T1.OpenDate > '2000-01-01' AND T2.`Charter School (Y/N)` = 1;", "SELECT Phone FROM schools WHERE Charter = 1 AND OpenDate > '2000-01-01';"]}, {"question_id": 5, "answer_sql": ["SELECT COUNT(T2.CDSCode) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrMath < 400 AND T2.Virtual = 'F';"]}, {"question_id": 6, "answer_sql": ["SELECT T1.School FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T2.NumGE1500 > 500 OR T1.Magnet = 1", "SELECT T1.School FROM schools AS T1 INNER JOIN schools_admins AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.Magnet = 1 OR T1.SOC = 'MAGNET'"]}, {"question_id": 7, "answer_sql": ["SELECT T1.Phone FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds ORDER BY T2.NumGE1500 DESC LIMIT 1;"]}, {"question_id": 8, "answer_sql": ["SELECT T1.NumTstTakr FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.cds = T2.CDSCode ORDER BY T2.`FRPM Count (K-12)` DESC LIMIT 1;"]}, {"question_id": 9, "answer_sql": ["SELECT COUNT(DISTINCT `School Name`) FROM frpm WHERE `Charter Funding Type` = 'Directly funded' AND `School Code` IN ( SELECT `School Code` FROM satscores WHERE AvgScrMath > 560 );", "SELECT COUNT(T1.`School Code`) FROM frpm AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T2.AvgScrMath > 560 AND T1.`Charter Funding Type` = 'Directly funded';"]}, {"question_id": 10, "answer_sql": ["SELECT T1.`FRPM Count (Ages 5-17)` FROM frpm AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds ORDER BY T2.AvgScrRead DESC LIMIT 1;", "SELECT `FRPM Count (Ages 5-17)` FROM frpm AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T2.AvgScrRead = ( SELECT MAX(AvgScrRead) FROM satscores ) AND T2.rtype = 'SAT';"]}, {"question_id": 11, "answer_sql": []}, {"question_id": 12, "answer_sql": ["SELECT MAX(CAST(`Free Meal Count (Ages 5-17)` AS REAL) / `Enrollment (Ages 5-17)`) FROM frpm WHERE `NSLP Provision Status` = 'Eligible' AND `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` > 0.3;", "SELECT MAX(CAST(`Free Meal Count (Ages 5-17)` AS REAL) / `Enrollment (Ages 5-17)`) FROM frpm WHERE CAST(`Free Meal Count (Ages 5-17)` AS REAL) / `Enrollment (Ages 5-17)` > 0.3;", "SELECT CAST(`Free Meal Count (Ages 5-17)` AS REAL) / `Enrollment (Ages 5-17)` FROM frpm WHERE CAST(`Free Meal Count (Ages 5-17)` AS REAL) / `Enrollment (Ages 5-17)` = ( SELECT MAX(CAST(`Free Meal Count (Ages 5-17)` AS REAL) / `Enrollment (Ages 5-17)`) FROM frpm ) AND CAST(`Free Meal Count (Ages 5-17)` AS REAL) / `Enrollment (Ages 5-17)` > 0.3;", "SELECT CAST(`Free Meal Count (Ages 5-17)` AS REAL) / `Enrollment (Ages 5-17)` FROM frpm WHERE `NSLP Provision Status` = 'Eligible' AND `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` = ( SELECT MAX(CAST(`Free Meal Count (Ages 5-17)` AS REAL) / `Enrollment (Ages 5-17)`) FROM frpm WHERE `NSLP Provision Status` = 'Eligible' ) ORDER BY CAST(`Free Meal Count (Ages 5-17)` AS REAL) / `Enrollment (Ages 5-17)` DESC LIMIT 1;"]}, {"question_id": 13, "answer_sql": ["SELECT T2.Phone FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.NumGE1500 / T1.NumTstTakr DESC LIMIT 3;", "SELECT T2.Phone FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY CAST(T1.NumGE1500 AS REAL) / T1.NumTstTakr DESC LIMIT 3;"]}, {"question_id": 14, "answer_sql": ["SELECT T2.NCESSchool FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY T1.`Enrollment (Ages 5-17)` DESC LIMIT 5;", "SELECT T2.School, T2.NCESSchool FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY T1.`Enrollment (Ages 5-17)` DESC LIMIT 5;", "SELECT T1.NCESDist FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY T2.`Enrollment (Ages 5-17)` DESC LIMIT 5;", "SELECT T2.School, T1.`Enrollment (Ages 5-17)` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY T1.`Enrollment (Ages 5-17)` DESC LIMIT 5;"]}, {"question_id": 15, "answer_sql": ["SELECT T1.District, AVG(T2.AvgScrRead) FROM schools AS T1 INNER JOIN satscores AS T2 ON T2.cds = T1.CDSCode WHERE T1.StatusType = 'Active' GROUP BY T1.District ORDER BY AVG(T2.AvgScrRead) DESC LIMIT 1;"]}, {"question_id": 16, "answer_sql": ["SELECT COUNT(T1.CDSCode) FROM frpm AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.`District Name` = 'Merged Alameda' AND T2.NumTstTakr < 100;"]}, {"question_id": 17, "answer_sql": ["SELECT T1.CharterNum FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T2.AvgScrWrite = 499 AND T1.Charter = 1;"]}, {"question_id": 18, "answer_sql": ["SELECT COUNT(T1.CDSCode) FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode INNER JOIN satscores AS T3 ON T3.cds = T2.CDSCode WHERE T1.Charter = 1 AND T1.FundingType = 'Directly funded' AND T3.NumGE1500 <= 250 AND T2.`Charter Funding Type` = 'Directly funded';", "SELECT COUNT(T1.CDSCode) FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode INNER JOIN satscores AS T3 ON T3.cds = T2.CDSCode WHERE T1.Charter = 1 AND T2.`Charter Funding Type` = 'Directly funded' AND T3.NumGE1500 <= 250 AND T1.County = 'Contra Costa';"]}, {"question_id": 19, "answer_sql": ["SELECT T2.Phone FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.AvgScrMath DESC LIMIT 1;", "SELECT T1.`School Name`, T2.AvgScrMath FROM frpm AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds ORDER BY T2.AvgScrMath DESC LIMIT 1;"]}, {"question_id": 20, "answer_sql": ["SELECT COUNT(*) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Amador' AND T1.`Low Grade` = 9 AND T1.`High Grade` = 12;"]}, {"question_id": 21, "answer_sql": ["SELECT COUNT(*) FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.County = 'Los Angeles' AND T2.`Free Meal Count (K-12)` > 500 AND T2.`Free Meal Count (K-12)` < 700;", "SELECT COUNT(*) FROM frpm WHERE `Free Meal Count (K-12)` > 500 AND `Free Meal Count (K-12)` < 700;"]}, {"question_id": 22, "answer_sql": ["SELECT T1.School, T2.`FRPM Count (K-12)` FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.County = 'Contra Costa' ORDER BY T2.`FRPM Count (K-12)` DESC LIMIT 1;", "SELECT T2.School, T1.`High Grade` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Contra Costa' ORDER BY T1.`High Grade` DESC LIMIT 1;", "SELECT T1.`School Name`, T2.NumTstTakr FROM frpm AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.`County Name` = 'Contra Costa' ORDER BY T2.NumTstTakr DESC LIMIT 1;"]}, {"question_id": 23, "answer_sql": []}, {"question_id": 24, "answer_sql": ["SELECT T1.`School Name` FROM frpm AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T2.NumGE1500 >= 1500 AND T1.`Percent (%) Eligible Free (K-12)` > 0.1;"]}, {"question_id": 25, "answer_sql": ["SELECT T2.`School Name`, T2.`Charter Funding Type` FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.cds = T2.CDSCode WHERE T2.`District Name` = 'Riverside' AND T1.AvgScrMath > 400;", "SELECT T2.School, T1.`Charter Funding Type` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Riverside' AND (SELECT CAST(SUM(AvgScrMath) AS REAL) / COUNT(cds) FROM satscores WHERE cds = T1.CDSCode) > 400;", "SELECT T1.School, T1.FundingType FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.County = 'Riverside' AND T2.AvgScrMath > 400;"]}, {"question_id": 26, "answer_sql": ["SELECT `School Name`, `Charter Funding Type`, `Free Meal Count (Ages 5-17)` FROM frpm WHERE `Free Meal Count (Ages 5-17)` > 800 AND `District Name` = 'Monterey' AND `School Type` = 'High School';"]}, {"question_id": 27, "answer_sql": ["SELECT T2.School, T1.AvgScrWrite, T2.Phone FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.OpenDate > '1991-01-01' OR T2.ClosedDate < '2000-12-31'"]}, {"question_id": 28, "answer_sql": ["SELECT T1.School, T1.DOC FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.FundingType = 'Locally funded' GROUP BY T1.School HAVING AVG(T2.`Enrollment (K-12)` - T2.`Enrollment (Ages 5-17)`) > AVG(T2.`Enrollment (K-12)` - T2.`Enrollment (Ages 5-17)`)", "SELECT T1.School, T1.DOC FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.FundingType = 'Locally funded' GROUP BY T1.School HAVING AVG(T2.`Enrollment (K-12)` - T2.`Enrollment (Ages 5-17)`) > (SELECT AVG(T2.`Enrollment (K-12)` - T2.`Enrollment (Ages 5-17)`) FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.FundingType = 'Locally funded')", "SELECT T1.School, T1.DOC FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`Charter Funding Type` = 'Locally funded' AND T2.`Enrollment (K-12)` - T2.`Enrollment (Ages 5-17)` > ( SELECT AVG(T2.`Enrollment (K-12)` - T2.`Enrollment (Ages 5-17)`) FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode )", "SELECT T1.School, T1.DOC FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`Charter Funding Type` = 'Locally funded' AND T2.`Enrollment (K-12)` - T2.`Enrollment (Ages 5-17)` > 0"]}, {"question_id": 29, "answer_sql": ["SELECT T1.OpenDate FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`High Grade` = ( SELECT MAX(`High Grade`) FROM frpm ) ORDER BY T1.OpenDate ASC LIMIT 1;", "SELECT T1.OpenDate FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`Enrollment (K-12)` = ( SELECT MAX(`Enrollment (K-12)`) FROM frpm ) AND T2.`2013-14 CALPADS Fall 1 Certification Status` = 1;", "SELECT `Academic Year` FROM frpm WHERE `Enrollment (K-12)` = (SELECT MAX(`Enrollment (K-12)`) FROM frpm) AND `Enrollment (K-12)` < 12;"]}, {"question_id": 30, "answer_sql": ["SELECT T2.City FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`Enrollment (K-12)` <= 5 ORDER BY T1.`Enrollment (K-12)` ASC;", "SELECT `County Name`, `Enrollment (K-12)` FROM frpm ORDER BY `Enrollment (K-12)` ASC LIMIT 5;", "SELECT T2.City FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`Enrollment (K-12)` < 5 ORDER BY T1.`Enrollment (K-12)` ASC;", "SELECT T2.City FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`Enrollment (K-12)` < 60000 ORDER BY T1.`Enrollment (K-12)` ASC LIMIT 5;", "SELECT T2.City FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`Enrollment (K-12)` < 60000 AND T1.`Enrollment (Ages 5-17)` < 60000 ORDER BY T1.`Enrollment (K-12)` ASC LIMIT 5;"]}, {"question_id": 31, "answer_sql": ["SELECT CAST(`Free Meal Count (K-12)` AS REAL) / `Enrollment (K-12)` FROM frpm ORDER BY `Enrollment (K-12)` DESC LIMIT 9, 2;"]}, {"question_id": 32, "answer_sql": ["SELECT CAST(`FRPM Count (K-12)` AS REAL) / `Enrollment (K-12)` FROM frpm WHERE `FRPM Count (K-12)` > 0 AND `Enrollment (K-12)` > 0 ORDER BY `FRPM Count (K-12)` DESC LIMIT 5;", "SELECT CAST(`FRPM Count (K-12)` AS REAL) / `Enrollment (K-12)` FROM frpm WHERE `FRPM Count (K-12)` > 0 AND `Enrollment (K-12)` > 0 AND `NSLP Provision Status` = 'Owned' AND `Charter Funding Type` = 'Owned' AND `Charter School (Y/N)` = 1 ORDER BY `FRPM Count (K-12)` DESC LIMIT 5;"]}, {"question_id": 33, "answer_sql": ["SELECT T1.Website, T1.School FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`Free Meal Count (Ages 5-17)` BETWEEN 1900 AND 2000 AND T2.`Enrollment (Ages 5-17)` IS NOT NULL;"]}, {"question_id": 34, "answer_sql": ["SELECT T1.`Free Meal Count (Ages 5-17)` / T1.`Enrollment (Ages 5-17)` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.AdmFName1 = 'Kacey' AND T2.AdmLName1 = 'Gibson' AND T1.`Free Meal Count (Ages 5-17)` IS NOT NULL AND T1.`Enrollment (Ages 5-17)` IS NOT NULL;", "SELECT `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` FROM frpm WHERE `Charter Funding Type` = 'School' AND `Charter School (Y/N)` = 'Y' AND `Charter School Number` = '100000' AND `Free Meal Count (Ages 5-17)` IS NOT NULL AND `Enrollment (Ages 5-17)` IS NOT NULL AND `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` IS NOT NULL AND `Free Meal Count (Ages 5-17)` > 0 AND `Enrollment (Ages 5-17)` > 0;"]}, {"question_id": 35, "answer_sql": ["SELECT T1.AdmEmail1 FROM schools_admins AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`Charter School (Y/N)` = 1 ORDER BY T2.`Enrollment (K-12)` ASC LIMIT 1;", "SELECT T1.AdmEmail2 FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`Charter School (Y/N)` = 1 ORDER BY T2.`Enrollment (K-12)` ASC LIMIT 1;", "SELECT T1.AdmEmail1 FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`Charter School (Y/N)` = 1 ORDER BY T2.`Enrollment (K-12)` ASC LIMIT 1;"]}, {"question_id": 36, "answer_sql": ["SELECT T1.AdmFName1, T1.AdmLName1 FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T2.NumGE1500 = ( SELECT MAX(T2.NumGE1500) FROM satscores AS T2 )", "SELECT T3.AdmFName1, T3.AdmLName1 FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode INNER JOIN schools_admins AS T3 ON T2.CDSCode = T3.CDSCode WHERE T1.NumGE1500 >= 1500 ORDER BY T1.NumGE1500 DESC LIMIT 1", "SELECT T1.AdmFName1, T1.AdmLName1 FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode INNER JOIN satscores AS T3 ON T3.cds = T2.CDSCode WHERE T3.NumGE1500 = ( SELECT MAX(T3.NumGE1500) FROM satscores AS T3 INNER JOIN frpm AS T2 ON T3.cds = T2.CDSCode ) ORDER BY T3.NumGE1500 DESC LIMIT 1;"]}, {"question_id": 37, "answer_sql": ["SELECT T1.Street, T1.City, T1.Zip, T1.State FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds ORDER BY T2.NumGE1500 / T2.NumTstTakr ASC LIMIT 1;", "SELECT T1.Street, T1.City, T1.Zip, T1.State FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode INNER JOIN satscores AS T3 ON T3.cds = T2.CDSCode ORDER BY T3.NumGE1500 / T3.NumTstTakr ASC LIMIT 1;"]}, {"question_id": 38, "answer_sql": ["SELECT T1.Website FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.County = 'Los Angeles' AND T2.NumTstTakr BETWEEN 2000 AND 3000;"]}, {"question_id": 39, "answer_sql": ["SELECT AVG(T2.NumTstTakr) FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.City = 'Fresno' AND T1.OpenDate BETWEEN '1980-01-01' AND '1980-12-31';"]}, {"question_id": 40, "answer_sql": ["SELECT T2.Phone FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.District = 'Fresno Unified' ORDER BY T1.AvgScrRead LIMIT 1;", "SELECT T1.Phone FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.District = 'Fresno Unified' AND T2.AvgScrRead = ( SELECT MIN(AvgScrRead) FROM satscores );"]}, {"question_id": 41, "answer_sql": ["SELECT T1.School FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.Virtual = 'F' ORDER BY T2.AvgScrRead DESC LIMIT 5;", "SELECT T2.School, T1.AvgScrRead FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.Virtual = 'F' GROUP BY T2.School ORDER BY AVG(T1.AvgScrRead) DESC LIMIT 5;", "SELECT T2.School, T1.cds, T1.AvgScrRead FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.Virtual = 'F' ORDER BY T1.AvgScrRead DESC LIMIT 5;", "SELECT T1.School, T2.AvgScrRead FROM schools AS T1 INNER JOIN satscores AS T2 ON T2.cds = T1.CDSCode WHERE T1.Virtual = 'F' ORDER BY T2.AvgScrRead DESC LIMIT 5;"]}, {"question_id": 42, "answer_sql": ["SELECT T2.EdOpsName FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrMath = ( SELECT MAX(AvgScrMath) FROM satscores );", "SELECT T2.EdOpsName FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.AvgScrMath DESC LIMIT 1;"]}, {"question_id": 43, "answer_sql": ["SELECT T1.AvgScrMath, T2.County FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrMath IS NOT NULL ORDER BY T1.AvgScrMath + T1.AvgScrRead + T1.AvgScrWrite ASC LIMIT 1;", "SELECT T2.AvgScrMath, T2.AvgScrRead, T2.AvgScrWrite, T1.County FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T2.AvgScrMath IS NOT NULL ORDER BY T2.AvgScrMath + T2.AvgScrRead + T2.AvgScrWrite ASC LIMIT 1;", "SELECT T2.AvgScrMath, T2.AvgScrRead, T1.County FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds ORDER BY T2.AvgScrMath + T2.AvgScrRead + T2.AvgScrWrite ASC LIMIT 1;", "SELECT T1.AvgScrMath, T1.AvgScrRead, T1.AvgScrWrite, T2.County FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrMath + T1.AvgScrRead + T1.AvgScrWrite = (SELECT MIN(AvgScrMath + AvgScrRead + AvgScrWrite) FROM satscores);"]}, {"question_id": 44, "answer_sql": ["SELECT T2.AvgScrWrite, T1.City FROM schools AS T1 INNER JOIN satscores AS T2 ON T2.cds = T1.CDSCode INNER JOIN frpm AS T3 ON T3.CDSCode = T2.cds WHERE T2.NumGE1500 = ( SELECT MAX(NumGE1500) FROM satscores ) ORDER BY T2.AvgScrWrite DESC;", "SELECT T2.AvgScrWrite, T1.City FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T2.NumGE1500 = ( SELECT MAX(NumGE1500) FROM satscores ) ORDER BY T2.AvgScrWrite DESC;"]}, {"question_id": 45, "answer_sql": ["SELECT T3.`School Name`, AVG(T2.AvgScrWrite) FROM schools_admins AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds INNER JOIN frpm AS T3 ON T1.CDSCode = T3.CDSCode WHERE T1.AdmFName1 = 'Ricci' AND T1.AdmLName1 = 'Ulrich' GROUP BY T3.`School Name`;", "SELECT T1.School, T2.AvgScrWrite FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.AdmFName1 = 'Ricci' AND T1.AdmLName1 = 'Ulrich'"]}, {"question_id": 46, "answer_sql": ["SELECT T1.State, SUM(T2.`Enrollment (K-12)`) FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.DOC = 31 GROUP BY T1.State ORDER BY SUM(T2.`Enrollment (K-12)`) DESC;", "SELECT T1.State, T2.`Enrollment (K-12)` FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.DOC = 31 ORDER BY T2.`Enrollment (K-12)` DESC LIMIT 1;", "SELECT T1.State, T2.`County Name`, T2.`Enrollment (K-12)` FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.DOC = 31 ORDER BY T2.`Enrollment (K-12)` DESC LIMIT 1;", "SELECT T1.State, T1.DOC, SUM(T2.`Enrollment (K-12)`) FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.DOC = 31 GROUP BY T1.State ORDER BY SUM(T2.`Enrollment (K-12)`) DESC;", "SELECT T1.State, T2.`County Name`, T2.`School Name`, T2.`Enrollment (K-12)` FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.DOC = 31 ORDER BY T2.`Enrollment (K-12)` DESC LIMIT 1;"]}, {"question_id": 47, "answer_sql": ["SELECT CAST(COUNT(School) AS REAL) / 12 FROM schools WHERE DOC = 52 AND strftime('%Y', OpenDate) = '1980' AND County = 'Alameda';"]}, {"question_id": 48, "answer_sql": ["SELECT CAST(SUM(CASE WHEN DOC = 54 THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN DOC = 52 THEN 1 ELSE 0 END) FROM schools WHERE County = 'Orange' AND DOC IN (52, 54);", "SELECT CAST(SUM(CASE WHEN DOC = 54 THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN DOC = 52 THEN 1 ELSE 0 END) FROM schools WHERE County = 'Orange' AND DOC = 54 AND StatusType = 'Merged';"]}, {"question_id": 49, "answer_sql": ["SELECT County, School, ClosedDate FROM schools WHERE StatusType = 'Closed' GROUP BY County ORDER BY COUNT(*) DESC LIMIT 1;"]}, {"question_id": 50, "answer_sql": ["SELECT T2.MailStreet, T1.`School Name` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode INNER JOIN satscores AS T3 ON T2.CDSCode = T3.cds ORDER BY T3.AvgScrMath DESC LIMIT 5, 1;", "SELECT T1.MailStreet, T1.School FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds ORDER BY T2.AvgScrMath DESC LIMIT 5, 1"]}, {"question_id": 51, "answer_sql": ["SELECT T1.MailStreet, T2.`School Name` FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode INNER JOIN satscores AS T3 ON T3.cds = T2.CDSCode ORDER BY T3.AvgScrRead LIMIT 1;", "SELECT T1.MailStreet, T1.School FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T2.AvgScrRead = ( SELECT MIN(AvgScrRead) FROM satscores )", "SELECT T1.MailStreet, T1.School FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T2.AvgScrRead IS NOT NULL ORDER BY T2.AvgScrRead LIMIT 1;", "SELECT T1.MailStreet, T1.School FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds ORDER BY T2.AvgScrRead LIMIT 1;"]}, {"question_id": 52, "answer_sql": ["SELECT COUNT(DISTINCT T2.School) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.MailCity = 'Lakeport' AND T1.AvgScrRead + T1.AvgScrMath + T1.AvgScrWrite >= 1500;", "SELECT COUNT(T1.CDSCode) FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T2.AvgScrRead + T2.AvgScrMath + T2.AvgScrWrite >= 1500 AND T1.MailCity = 'Lakeport';"]}, {"question_id": 53, "answer_sql": ["SELECT T1.NumTstTakr FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.MailCity = 'Fresno'"]}, {"question_id": 54, "answer_sql": ["SELECT T2.School, T2.MailZip FROM schools_admins AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.AdmFName1 = 'Avetik' AND T1.AdmLName1 = 'Atoian'"]}, {"question_id": 55, "answer_sql": ["SELECT CAST(SUM(CASE WHEN County = 'Colusa' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN County = 'Humboldt' THEN 1 ELSE 0 END) FROM schools WHERE MailState = 'CA';", "SELECT CAST(SUM(CASE WHEN County = 'Colusa' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN County = 'Humboldt' THEN 1 ELSE 0 END) FROM schools WHERE MailState = 'California';"]}, {"question_id": 56, "answer_sql": ["SELECT COUNT(*) FROM schools WHERE MailState = 'CA' AND County = 'San Joaquin' AND StatusType = 'Active';", "SELECT COUNT(T1.CDSCode) FROM schools AS T1 INNER JOIN schools_admins AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.MailState = 'CA' AND T2.DistrictCode = 200 AND T1.School = 'San Joaquin';"]}, {"question_id": 57, "answer_sql": ["SELECT T1.Phone, T1.Ext FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T2.AvgScrWrite = ( SELECT AvgScrWrite FROM satscores ORDER BY AvgScrWrite DESC LIMIT 333, 1 ) ORDER BY T2.AvgScrWrite DESC LIMIT 1;", "SELECT T2.Phone, T2.Ext FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.AvgScrWrite DESC LIMIT 333;"]}, {"question_id": 58, "answer_sql": ["SELECT Phone, Ext, School FROM schools WHERE Zip = '95203-3704';", "SELECT School, Ext, Phone FROM schools WHERE Zip = '95203-3704';", "SELECT Phone, Ext FROM schools WHERE Zip = '95203-3704';"]}, {"question_id": 59, "answer_sql": []}, {"question_id": 60, "answer_sql": ["SELECT Website FROM schools WHERE Virtual = 'P' AND Charter = 1 AND County = 'San Joaquin';", "SELECT Website FROM schools WHERE Virtual = 'P' AND Charter = 1 AND City = 'San Joaquin';"]}, {"question_id": 61, "answer_sql": ["SELECT COUNT(School) FROM schools WHERE DOC = 52 AND Charter = 1 AND City = 'Hickman';"]}, {"question_id": 62, "answer_sql": ["SELECT COUNT(*) FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.County = 'Los Angeles' AND T2.`Free Meal Count (K-12)` * 100 / T2.`Enrollment (K-12)` < 0.18 AND T1.Charter = 0;"]}, {"question_id": 63, "answer_sql": ["SELECT T2.AdmFName1, T2.AdmLName1, T1.School FROM schools AS T1 INNER JOIN schools_admins AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.Charter = 1 AND T1.CharterNum = '00D2'"]}, {"question_id": 64, "answer_sql": ["SELECT COUNT(*) FROM schools AS T1 INNER JOIN schools_admins AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.CharterNum = '00D4' AND T1.MailCity = 'Hickman';", "SELECT COUNT(School) FROM schools WHERE CharterNum = '00D4' AND MailCity = 'Hickman';"]}, {"question_id": 65, "answer_sql": ["SELECT CAST(SUM(CASE WHEN FundingType = 'Locally funded' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM schools WHERE County = 'Santa Clara';", "SELECT CAST(SUM(CASE WHEN FundingType = 'Locally funded' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM schools WHERE County = 'Santa Clara' AND (Charter = 1 OR Charter = 0);"]}, {"question_id": 66, "answer_sql": ["SELECT COUNT(*) FROM schools WHERE FundingType = 'Directly Funded' AND County = 'Stanislaus' AND OpenDate BETWEEN '2000-01-01' AND '2005-12-31';", "SELECT COUNT(*) FROM schools WHERE OpenDate BETWEEN '2000-01-01' AND '2005-12-31' AND County = 'Stanislaus' AND FundingType = 'Directly funded';"]}, {"question_id": 67, "answer_sql": ["SELECT SUM(ClosedDate - OpenDate) FROM schools WHERE City = 'San Francisco' AND strftime('%Y', ClosedDate) = '1989';", "SELECT COUNT(*) FROM schools WHERE ClosedDate LIKE '1989%' AND City = 'San Francisco';", "SELECT SUM(ClosedDate) FROM schools WHERE City = 'San Francisco' AND strftime('%Y', ClosedDate) = '1989';"]}, {"question_id": 68, "answer_sql": ["SELECT County FROM schools WHERE (StatusType = 'Closed' OR StatusType = 'Open') AND SOC = 11 AND strftime('%Y', ClosedDate) BETWEEN '1980' AND '1989' GROUP BY County ORDER BY COUNT(*) DESC LIMIT 1;"]}, {"question_id": 69, "answer_sql": ["SELECT NCESDist FROM schools WHERE SOC = 31;"]}, {"question_id": 70, "answer_sql": ["SELECT COUNT(School) FROM schools WHERE (StatusType = 'Active' OR StatusType = 'Closed') AND County = 'Alpine';", "SELECT COUNT(*) FROM schools WHERE (County = 'Alpine' OR County = 'California') AND (StatusType = 'Active' OR StatusType = 'Closed');"]}, {"question_id": 71, "answer_sql": ["SELECT `District Code` FROM frpm WHERE `District Name` = 'Fresno' AND `NSLP Provision Status` = 'No' AND `FRPM Count (K-12)` = 0;", "SELECT T1.`District Code` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.City = 'Fresno' AND T2.Magnet = 0"]}, {"question_id": 72, "answer_sql": ["SELECT SUM(frpm.`Enrollment (Ages 5-17)`) FROM frpm WHERE frpm.`Academic Year` = 'Y' AND frpm.`School Type` = 'State Special School' AND frpm.`School Name` = 'State Special School (Fremont)';", "SELECT COUNT(T2.`Enrollment (Ages 5-17)`) FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.School = 'State Special School' AND T1.EdOpsCode = 'SSS' AND T2.`Academic Year` = 'Y';"]}, {"question_id": 73, "answer_sql": ["SELECT T2.`Free Meal Count (Ages 5-17)` FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.MailStreet = 'PO Box 1040' AND T2.`Free Meal Count (Ages 5-17)` IS NOT NULL AND T2.`Enrollment (Ages 5-17)` IS NOT NULL;", "SELECT T1.`Free Meal Count (Ages 5-17)` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.MailStreet = 'PO Box 1040' AND T2.SOC = 'Youth Authority School';"]}, {"question_id": 74, "answer_sql": ["SELECT T1.`Low Grade` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.NCESDist = '613360' AND T2.EdOpsCode = 'SPECON';", "SELECT MIN(`Low Grade`) FROM frpm WHERE `School Code` = ( SELECT CDSCode FROM schools WHERE NCESDist = '613360' AND EdOpsCode = 'SPECON' );"]}, {"question_id": 75, "answer_sql": ["SELECT T1.EdOpsName, T2.`School Name` FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`County Code` = 37 AND T2.`NSLP Provision Status` = 'Breakfast Provision 2';", "SELECT T1.EdOpsName, T2.`School Name` FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`NSLP Provision Status` = 'Breakfast Provision 2' AND T1.County = '37';"]}, {"question_id": 76, "answer_sql": ["SELECT T1.City FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`NSLP Provision Status` = 'Lunch Provision 2' AND T1.County = 'Merced' AND T2.`Low Grade` = 9 AND T2.`High Grade` = 12 AND T1.EILCode = 'HS';", "SELECT T1.City FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`NSLP Provision Status` = 'Y' AND T2.`Low Grade` = 9 AND T2.`High Grade` = 12 AND T1.County = 'Merced' AND T1.EILCode = 'HS';"]}, {"question_id": 77, "answer_sql": ["SELECT T1.`School Name`, CAST(T1.`Free Meal Count (Ages 5-17)` AS REAL) / T1.`Enrollment (Ages 5-17)` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Los Angeles' AND T2.GSoffered BETWEEN 1 AND 9;", "SELECT T1.`School Name`, T1.`FRPM Count (Ages 5-17)` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Los Angeles' AND T1.`School Type` = 'Public' AND T1.`Educational Option Type` = 'Public' AND T1.`NSLP Provision Status` = 'Provisioned' AND T1.`Charter Funding Type` = 'Public' AND T1.`School Code` = '001' AND T1.`Charter School (Y/N)` = 1;"]}, {"question_id": 78, "answer_sql": ["SELECT GSserved FROM schools WHERE City = 'Adelanto' GROUP BY GSserved ORDER BY COUNT(GSserved) DESC LIMIT 1;", "SELECT T1.GSserved FROM schools AS T1 INNER JOIN schools_admins AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.City = 'Adelanto' GROUP BY T1.GSserved ORDER BY COUNT(T1.GSserved) DESC LIMIT 1;"]}, {"question_id": 79, "answer_sql": ["SELECT COUNT(*) FROM schools WHERE (Virtual = 'F' OR Virtual = 'T') AND (County = 'San Diego' OR County = 'Santa Barbara') AND (Virtual = 'F' OR Virtual = 'T') AND (County = 'San Diego' OR County = 'Santa Barbara')", "SELECT COUNT(*) FROM schools WHERE County = ( SELECT County FROM schools WHERE Virtual = 'F' AND County != 'San Diego' AND County != 'Santa Barbara' ) AND Virtual = 'F';", "SELECT COUNT(Virtual) FROM schools WHERE Virtual = 'F' AND (County = 'San Diego' OR County = 'Santa Barbara') AND DOC = 'California';"]}, {"question_id": 80, "answer_sql": ["SELECT T2.School, T1.`School Name`, T2.Latitude FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY T2.Latitude DESC LIMIT 1;", "SELECT T1.`School Type`, T1.`School Name`, T2.Latitude FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY T2.Latitude DESC LIMIT 1;"]}, {"question_id": 81, "answer_sql": ["SELECT T1.`School Name`, T1.`Low Grade` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.State = 'CA' ORDER BY T2.Latitude ASC LIMIT 1;", "SELECT T1.City, T2.`Low Grade`, T2.`School Name` FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.State = 'CA' ORDER BY T1.Latitude ASC LIMIT 1;"]}, {"question_id": 82, "answer_sql": ["SELECT T1.GSoffered FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY T1.Longitude DESC LIMIT 1;", "SELECT T1.GSoffered FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.Longitude = ( SELECT MAX(Longitude) FROM schools );", "SELECT T1.GSoffered FROM schools AS T1 INNER JOIN (SELECT MAX(Longitude) AS maxlongitude FROM schools) AS T2 ON T1.Longitude = T2.maxlongitude;"]}, {"question_id": 83, "answer_sql": ["SELECT City, COUNT(*) FROM schools WHERE GSoffered BETWEEN 'K-8' AND '8th Grade' AND Magnet = 1 AND EdOpsName = 'Multiple Provision Types' GROUP BY City;", "SELECT T1.City, COUNT(T1.CDSCode) FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.Magnet = 1 AND T1.GSoffered = 'K-8' AND T2.`NSLP Provision Status` = 'Multiple Provision Types' GROUP BY T1.City;", "SELECT T2.City, COUNT(T1.CDSCode) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.GSoffered = 'K-8' AND T2.Magnet = 1 GROUP BY T2.City;"]}, {"question_id": 84, "answer_sql": ["SELECT T1.AdmFName1, T2.District FROM schools_admins AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode GROUP BY T1.AdmFName1 ORDER BY COUNT(T1.AdmFName1) DESC LIMIT 2;"]}, {"question_id": 85, "answer_sql": ["SELECT T1.`District Code`, CAST(T1.`Free Meal Count (K-12)` AS REAL) / T1.`Enrollment (K-12)` FROM frpm AS T1 INNER JOIN schools_admins AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.AdmFName1 = 'Alusine'"]}, {"question_id": 86, "answer_sql": ["SELECT T2.AdmLName1, T1.District, T1.County, T1.School FROM schools AS T1 INNER JOIN schools_admins AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.CharterNum = 40;"]}, {"question_id": 87, "answer_sql": ["SELECT T2.AdmEmail1 FROM schools AS T1 INNER JOIN schools_admins AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.County = 'San Bernardino' AND T1.DOC = 54 AND T1.SOC = 62 AND T1.OpenDate BETWEEN '2009-01-01' AND '2010-12-31'"]}, {"question_id": 88, "answer_sql": ["SELECT T3.AdmEmail1, T2.`School Name` FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.cds = T2.CDSCode INNER JOIN schools_admins AS T3 ON T2.CDSCode = T3.CDSCode WHERE T1.NumGE1500 = ( SELECT MAX(T1.NumGE1500) FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.cds = T2.CDSCode )"]}, {"question_id": 89, "answer_sql": ["SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'east Bohemia' AND T1.frequency = 'issuance after transaction';"]}, {"question_id": 90, "answer_sql": ["SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'Prague';"]}, {"question_id": 91, "answer_sql": ["SELECT CASE WHEN A12 > A13 THEN '1995' ELSE '1996' END AS year, A12, A13 FROM district ORDER BY A12 DESC, A13 DESC LIMIT 1;", "SELECT CASE WHEN A12 > A13 THEN '1995' ELSE '1996' END AS high_percentage FROM district;"]}, {"question_id": 92, "answer_sql": ["SELECT COUNT(*) FROM district WHERE A11 BETWEEN 6000 AND 10000 AND A2 IN ( SELECT gender FROM client WHERE gender = 'F' );"]}, {"question_id": 93, "answer_sql": []}, {"question_id": 94, "answer_sql": ["SELECT T1.account_id, MAX(T4.A11) - MIN(T4.A11) FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id INNER JOIN district AS T4 ON T3.district_id = T4.district_id WHERE T3.gender = 'F' ORDER BY T3.birth_date ASC, T4.A11 DESC LIMIT 1;", "SELECT T1.account_id, T2.avg_salary - T3.avg_salary AS gap FROM account AS T1 INNER JOIN ( SELECT account_id, AVG(amount) AS avg_salary FROM trans WHERE type = 'outcome' GROUP BY account_id ORDER BY AVG(amount) DESC LIMIT 1 ) AS T2 ON T1.account_id = T2.account_id INNER JOIN ( SELECT account_id, AVG(amount) AS avg_salary FROM trans WHERE type = 'outcome' GROUP BY account_id ORDER BY AVG(amount) ASC LIMIT 1 ) AS T3 ON T1.account_id = T3.account_id INNER JOIN disp AS T4 ON T1.account_id = T4.account_id INNER JOIN client AS T5 ON T4.client_id = T5.client_id WHERE T5.gender = 'F' ORDER BY T5.birth_date ASC;"]}, {"question_id": 95, "answer_sql": ["SELECT T1.account_id FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id INNER JOIN trans AS T4 ON T2.account_id = T4.account_id WHERE T3.birth_date IS NOT NULL ORDER BY T3.birth_date ASC, T4.amount DESC LIMIT 1;", "SELECT T1.account_id FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id INNER JOIN district AS T4 ON T3.district_id = T4.district_id WHERE T3.gender = 'M' AND T3.birth_date < T4.A2 ORDER BY T4.A11 DESC, T3.birth_date ASC LIMIT 1;"]}, {"question_id": 96, "answer_sql": ["SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN trans AS T4 ON T3.account_id = T4.account_id WHERE T3.frequency = 'POPLATEK TYDNE' AND T2.type = 'OWNER';", "SELECT COUNT(T1.client_id) FROM disp AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T2.frequency = 'POPLATEK TYDNE' AND T1.type = 'OWNER';"]}, {"question_id": 97, "answer_sql": ["SELECT T1.client_id FROM disp AS T2 INNER JOIN client AS T1 ON T2.client_id = T1.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN trans AS T4 ON T3.account_id = T4.account_id INNER JOIN card AS T5 ON T2.disp_id = T5.disp_id WHERE T3.frequency = 'POPLATEK PO OBRATU' AND T4.type = 'statement of issuance' AND T5.type = 'Disponent'"]}, {"question_id": 98, "answer_sql": ["SELECT T1.account_id FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T1.date) = '1997' AND T2.status = 'approved' ORDER BY T2.amount LIMIT 1;", "SELECT T1.account_id, T1.date, T2.amount FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T1.date) = '1997' AND T2.date IS NOT NULL ORDER BY T2.amount ASC LIMIT 1;", "SELECT T1.account_id FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T1.date) = '1997' AND T2.date IS NOT NULL ORDER BY T2.amount ASC LIMIT 1;"]}, {"question_id": 99, "answer_sql": ["SELECT T1.account_id FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.duration > 12 AND STRFTIME('%Y', T1.date) = '1993' ORDER BY T2.amount DESC LIMIT 1;"]}, {"question_id": 100, "answer_sql": ["SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND STRFTIME('%Y', T1.birth_date) < '1950' AND T2.A2 = 'Slokolov';"]}, {"question_id": 101, "answer_sql": ["SELECT T1.account_id FROM account AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T2.date) = '1995' ORDER BY T2.date ASC LIMIT 1;"]}, {"question_id": 102, "answer_sql": ["SELECT DISTINCT T1.account_id FROM account AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T1.date < '1997-01-01' AND T2.amount > 3000;", "SELECT DISTINCT T1.account_id FROM account AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T2.date < '1997-01-01' AND T2.amount > 3000;"]}, {"question_id": 103, "answer_sql": ["SELECT T1.client_id FROM disp AS T2 INNER JOIN client AS T1 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T3.disp_id = T2.disp_id WHERE T3.issued = '1994-03-03'"]}, {"question_id": 104, "answer_sql": ["SELECT T1.date FROM account AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T2.amount = 840 AND STRFTIME('%Y', T2.date) = '1998' AND T2.type = 'Transaction';", "SELECT T1.date FROM account AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T2.date = '1998-10-14' AND T2.amount = 840;"]}, {"question_id": 105, "answer_sql": ["SELECT T2.district_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.date = '1994-08-25'", "SELECT T1.district_id FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id WHERE T3.date = '1994-08-25' AND T3.status = 'approved';"]}, {"question_id": 106, "answer_sql": ["SELECT T2.amount FROM disp AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id INNER JOIN card AS T3 ON T1.disp_id = T3.disp_id INNER JOIN client AS T4 ON T1.client_id = T4.client_id WHERE T3.issued = '1996-10-21' ORDER BY T2.amount DESC LIMIT 1;", "SELECT T2.amount FROM disp AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T1.client_id = T3.client_id INNER JOIN card AS T4 ON T1.disp_id = T4.disp_id WHERE T3.birth_date = '1996-10-21' ORDER BY T2.amount DESC LIMIT 1;"]}, {"question_id": 107, "answer_sql": ["SELECT T2.gender FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T1.A11 = ( SELECT AVG(T1.A11) FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id ) ORDER BY T2.birth_date ASC LIMIT 1;", "SELECT T1.gender FROM client AS T1 INNER JOIN account AS T2 ON T1.client_id = T2.district_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id ORDER BY T1.birth_date ASC, T3.A11 DESC LIMIT 1;", "SELECT T1.gender FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN district AS T4 ON T3.district_id = T4.district_id ORDER BY T1.birth_date ASC, T4.A11 DESC LIMIT 1;"]}, {"question_id": 108, "answer_sql": ["SELECT T1.amount FROM trans AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.amount = ( SELECT MAX(amount) FROM loan ) ORDER BY T1.date ASC LIMIT 1;", "SELECT T1.amount FROM trans AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.amount = ( SELECT MAX(amount) FROM loan );"]}, {"question_id": 109, "answer_sql": ["SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN district AS T4 ON T3.district_id = T4.district_id WHERE T4.A2 = 'Jesenik' AND T1.gender = 'F';"]}, {"question_id": 110, "answer_sql": ["SELECT T2.disp_id FROM trans AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T1.date = '1998-09-20' AND T1.amount = 5100;", "SELECT T1.disp_id FROM disp AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T2.date = '1998-09-02' AND T2.amount = 5100;", "SELECT T3.disp_id FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T3 ON T3.account_id = T2.account_id WHERE T1.date = '1998-09-2' AND T1.amount = 5100;"]}, {"question_id": 111, "answer_sql": ["SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Litomerice' AND STRFTIME('%Y', T1.date) = '1996';"]}, {"question_id": 112, "answer_sql": ["SELECT T4.A2 FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN district AS T4 ON T3.district_id = T4.district_id WHERE T1.birth_date = '1976-01-29' AND T1.gender = 'F' ORDER BY T4.A2;"]}, {"question_id": 113, "answer_sql": ["SELECT T1.birth_date FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id WHERE T3.amount = 98832 AND T3.date = '1996-01-03'", "SELECT T2.birth_date FROM loan AS T1 INNER JOIN client AS T2 ON T1.account_id = T2.client_id WHERE T1.amount = 98832 AND STRFTIME('%Y', T1.date) = '1996' AND T1.date = '1996-01-03';", "SELECT T2.birth_date FROM loan AS T1 INNER JOIN client AS T2 ON T2.client_id = T1.account_id INNER JOIN account AS T3 ON T3.account_id = T1.account_id INNER JOIN trans AS T4 ON T4.account_id = T3.account_id WHERE T1.amount = 98832 AND T1.date = '1996-01-03'"]}, {"question_id": 114, "answer_sql": ["SELECT T1.account_id FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T3.account_id = T1.account_id INNER JOIN client AS T4 ON T4.client_id = T3.client_id WHERE T2.A3 = 'Prague' AND T1.district_id = 1;", "SELECT T1.account_id FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T3.account_id = T1.account_id INNER JOIN client AS T4 ON T4.client_id = T3.client_id WHERE T2.A3 = 'Prague' GROUP BY T1.account_id;", "SELECT T1.account_id FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T3.account_id = T1.account_id INNER JOIN client AS T4 ON T4.client_id = T3.client_id WHERE T2.A3 = 'Prague' AND T4.client_id = 1;"]}, {"question_id": 115, "answer_sql": ["SELECT CAST(SUM(CASE WHEN T2.gender = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.client_id) FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T1.A3 = 'south Bohemia' ORDER BY T1.A4 DESC LIMIT 1;"]}, {"question_id": 116, "answer_sql": ["SELECT CAST((SUM(IIF(T2.date = '1998-12-27', T2.balance, 0)) - SUM(IIF(T2.date = '1993-03-22', T2.balance, 0))) AS REAL) * 100 / SUM(IIF(T2.date = '1993-03-22', T2.balance, 0)) FROM account AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T2.date IN ('1993-03-22', '1998-12-27') AND T2.date = (SELECT MIN(date) FROM trans WHERE date IN ('1993-03-22', '1998-12-27'));", "SELECT CAST((SUM(IIF(T3.date = '1998-12-27', T3.balance, 0)) - SUM(IIF(T3.date = '1993-03-22', T3.balance, 0))) AS REAL) * 100 / SUM(IIF(T3.date = '1993-03-22', T3.balance, 0)) FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T1.date = '1993-07-05'"]}, {"question_id": 117, "answer_sql": ["SELECT CAST(SUM(CASE WHEN status = 'A' THEN amount ELSE 0 END) AS REAL) * 100 / SUM(amount) FROM loan;", "SELECT CAST(SUM(CASE WHEN status = 'A' THEN amount ELSE 0 END) AS REAL) * 100 / SUM(amount) FROM loan WHERE status = 'A';"]}, {"question_id": 118, "answer_sql": ["SELECT CAST(SUM(CASE WHEN status = 'C' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(loan_id) FROM loan WHERE amount < 100000;", "SELECT CAST(SUM(CASE WHEN T2.amount < 100000 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.loan_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.status = 'C';"]}, {"question_id": 119, "answer_sql": ["SELECT T1.account_id, T2.A2, T2.A3 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T1.account_id = T3.account_id WHERE T3.date > '1993-01-01' AND T3.type = 'STATEMENT' AND T3.operation = 'ISSUED' AND T3.k_symbol = 'POPLATEK PO OBRATU';", "SELECT T1.account_id, T2.A2, T2.A3 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.date > '1993-01-01' AND T1.frequency = 'POPLATEK PO OBRATU'", "SELECT T1.account_id, T2.A2, T2.A3 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T1.date) > '1993' AND T1.frequency = 'POPLATEK PO OBRATU';"]}, {"question_id": 120, "answer_sql": ["SELECT T1.account_id, T1.frequency FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'east Bohemia' AND STRFTIME('%Y', T1.date) BETWEEN '1995' AND '2000';", "SELECT T1.account_id, T1.frequency FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'east Bohemia' AND STRFTIME('%Y', T1.date) BETWEEN '1995' AND '2000';"]}, {"question_id": 121, "answer_sql": ["SELECT T1.account_id, T1.date FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Prachatice';"]}, {"question_id": 122, "answer_sql": ["SELECT T1.A2, T1.A3 FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id WHERE T3.loan_id = 4990;"]}, {"question_id": 123, "answer_sql": ["SELECT T1.account_id, T2.A2, T2.A3 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.amount > 300000;"]}, {"question_id": 124, "answer_sql": ["SELECT T1.loan_id, T2.A3, AVG(T2.A11) FROM loan AS T1 INNER JOIN district AS T2 ON T1.account_id = T2.district_id WHERE T1.duration = 60 GROUP BY T1.loan_id;"]}, {"question_id": 125, "answer_sql": ["SELECT T1.A2, (T1.A13 - T1.A12) * 100 / T1.A12 FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id WHERE T3.status = 'D' AND T2.date BETWEEN '1995-01-01' AND '1996-12-31'", "SELECT T1.A2, (T1.A13 - T1.A12) * 100 / T1.A12 FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T3.account_id = T2.account_id INNER JOIN client AS T4 ON T4.client_id = T3.client_id INNER JOIN loan AS T5 ON T5.account_id = T2.account_id WHERE T5.status = 'D' AND STRFTIME('%Y', T5.date) BETWEEN '1995' AND '1996';", "SELECT T2.A2, (T3.A13 - T3.A12) * 100 / T3.A12 FROM loan AS T1 INNER JOIN district AS T2 ON T1.account_id = T2.district_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.status = 'D' AND T1.date BETWEEN '1995-01-01' AND '1996-12-31'"]}, {"question_id": 126, "answer_sql": ["SELECT CAST(SUM(CASE WHEN T1.A2 = 'Decin' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.district_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T2.date) = '1993';"]}, {"question_id": 127, "answer_sql": ["SELECT account_id FROM account WHERE frequency = 'POPLATEK MESICNE';"]}, {"question_id": 128, "answer_sql": ["SELECT T1.A2 FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.gender = 'F' GROUP BY T1.district_id ORDER BY COUNT(T2.client_id) DESC LIMIT 10;", "SELECT T2.A2, COUNT(T3.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T1.client_id = T3.client_id WHERE T1.gender = 'F' GROUP BY T2.A2 ORDER BY COUNT(T3.client_id) DESC LIMIT 10;"]}, {"question_id": 129, "answer_sql": ["SELECT T1.A2, T2.amount FROM district AS T1 INNER JOIN trans AS T2 ON T1.district_id = T2.account_id WHERE T2.type = 'VYDAJ' AND T2.date LIKE '1996-01%' AND T2.k_symbol = 'WITHDRAWAL' ORDER BY T1.A2 LIMIT 10;", "SELECT T1.A2, T2.amount FROM district AS T1 INNER JOIN trans AS T2 ON T1.district_id = T2.account_id WHERE T2.type = 'VYDAJ' AND T2.date LIKE '1996-01%' ORDER BY T1.A2 LIMIT 10;", "SELECT T1.A2, T3.amount FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.type = 'VYDAJ' AND T3.date LIKE '1996-01%' ORDER BY T1.A2 LIMIT 10;"]}, {"question_id": 130, "answer_sql": ["SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id INNER JOIN district AS T4 ON T3.district_id = T4.district_id WHERE T4.A3 = 'south bohemia' AND T2.type != 'own' AND T3.gender = 'male'"]}, {"question_id": 131, "answer_sql": ["SELECT T1.A3 FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id WHERE T3.status IN ('C', 'D') GROUP BY T1.district_id ORDER BY SUM(T3.amount) DESC LIMIT 1;", "SELECT T1.A3 FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id WHERE T3.status IN ('C', 'D') GROUP BY T1.A3 ORDER BY COUNT(T3.loan_id) DESC LIMIT 1;"]}, {"question_id": 132, "answer_sql": ["SELECT AVG(T2.amount) FROM client AS T1 INNER JOIN loan AS T2 ON T1.client_id = T2.account_id WHERE T1.gender = 'M'", "SELECT AVG(loan.amount) FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id INNER JOIN loan ON account.account_id = loan.account_id WHERE client.gender = 'M'"]}, {"question_id": 133, "answer_sql": ["SELECT A2, A13 FROM district ORDER BY A13 DESC LIMIT 1;", "SELECT T1.A2, T1.district_id FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.A13 = ( SELECT MAX(A13) FROM district ) AND STRFTIME('%Y', T2.date) = '1996';"]}, {"question_id": 134, "answer_sql": ["SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A16 = ( SELECT MAX(A16) FROM district );", "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A16 = 1996 GROUP BY T2.A16 ORDER BY T2.A16 DESC LIMIT 1;", "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T1.date) = '1996' AND T2.A16 = ( SELECT MAX(A16) FROM district );", "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T1.date) = '1996' AND T2.A16 = 0;"]}, {"question_id": 135, "answer_sql": ["SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T2.balance < 0 AND T2.operation = 'VYBER KARTOU' AND T1.frequency = 'POPLATEK MESICNE';", "SELECT COUNT(DISTINCT account.account_id) FROM account JOIN trans ON account.account_id = trans.account_id WHERE trans.balance < 0 AND trans.operation = 'VYBER KARTOU' AND account.frequency = 'POPLATEK MESICNE';"]}, {"question_id": 136, "answer_sql": ["SELECT COUNT(loan_id) FROM loan WHERE amount >= 250000 AND date BETWEEN '1995-01-01' AND '1997-12-31' AND account_id IN ( SELECT account_id FROM account WHERE frequency = 'POPLATEK MESICNE' )"]}, {"question_id": 137, "answer_sql": []}, {"question_id": 138, "answer_sql": ["SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN account AS T3 ON T2.district_id = T3.district_id INNER JOIN trans AS T4 ON T3.account_id = T4.account_id WHERE T1.gender = 'M' AND T2.A15 = ( SELECT A15 FROM district ORDER BY A15 DESC LIMIT 1, 1 ) AND T4.date = '1995' AND T4.type = 'Commited crimes';", "SELECT COUNT(T2.client_id) FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.gender = 'M' AND T1.A15 = ( SELECT A15 FROM district ORDER BY A15 DESC LIMIT 1, 1 );"]}, {"question_id": 139, "answer_sql": ["SELECT COUNT(card_id) FROM card WHERE type = 'gold' AND disp_id IN (SELECT disp_id FROM disp WHERE type = 'disponent');"]}, {"question_id": 140, "answer_sql": ["SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Pisek';"]}, {"question_id": 141, "answer_sql": ["SELECT T1.A2 FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.date = '1997' AND T3.amount > 100000 AND T3.type = 'Deposit' GROUP BY T1.district_id;"]}, {"question_id": 142, "answer_sql": ["SELECT T1.account_id FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T1.account_id = T3.account_id WHERE T2.A2 = 'Pisek' AND T3.k_symbol = 'SIPO'", "SELECT T1.account_id FROM account AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T1.frequency = 'Pisek' AND T2.k_symbol = 'SIPO'"]}, {"question_id": 143, "answer_sql": ["SELECT T1.account_id FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T3.type IN ('gold', 'junior') GROUP BY T1.account_id HAVING COUNT(DISTINCT T3.type) = 2;", "SELECT T1.account_id FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T3.type IN ('gold', 'junior') GROUP BY T1.account_id;"]}, {"question_id": 144, "answer_sql": ["SELECT AVG(T3.amount) FROM disp AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.date LIKE '2021%' AND T3.k_symbol = 'CREDIT CARD' AND T1.type = 'DISP';"]}, {"question_id": 145, "answer_sql": ["SELECT T1.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN trans AS T4 ON T3.account_id = T4.account_id WHERE STRFTIME('%Y', T4.date) = '1998' AND T4.operation = 'VYBER KARTOU' AND T4.balance < ( SELECT AVG(T4.balance) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN trans AS T4 ON T3.account_id = T4.account_id WHERE T4.operation = 'VYBER KARTOU' AND STRFTIME('%Y', T4.date) = '1998' )", "SELECT T1.account_id FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id INNER JOIN card AS T4 ON T2.disp_id = T4.disp_id WHERE T3.date BETWEEN '1998-01-01' AND '1998-12-31' AND T3.amount > 0 AND T4.type = 'Credit' GROUP BY T1.account_id HAVING AVG(T3.amount) < 100000;", "SELECT T1.client_id FROM disp AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.date BETWEEN '1998-01-01' AND '1998-12-31' AND T3.operation = 'VYBER KARTOU' AND T3.balance < ( SELECT AVG(balance) FROM trans WHERE date BETWEEN '1998-01-01' AND '1998-12-31' AND operation = 'VYBER KARTOU' )", "SELECT T1.client_id FROM disp AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.date LIKE '1998%' AND T3.operation = 'VYBER KARTOU' AND T3.amount < ( SELECT AVG(amount) FROM trans WHERE date LIKE '1998%' )", "SELECT T1.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN trans AS T4 ON T3.account_id = T4.account_id WHERE T4.date BETWEEN '1998-01-01' AND '1998-12-31' AND T4.operation = 'VYBER KARTOU' AND T4.balance / 30 < ( SELECT AVG(balance) FROM trans WHERE date BETWEEN '1998-01-01' AND '1998-12-31' AND operation = 'VYBER KARTOU' )"]}, {"question_id": 146, "answer_sql": ["SELECT T1.client_id FROM disp AS T2 INNER JOIN client AS T1 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T3.account_id = T2.account_id INNER JOIN card AS T4 ON T4.disp_id = T2.disp_id INNER JOIN loan AS T5 ON T5.account_id = T3.account_id WHERE T1.gender = 'F' AND T4.type = 'Credit' AND T5.account_id IS NOT NULL"]}, {"question_id": 147, "answer_sql": ["SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN client AS T3 ON T3.client_id = T2.district_id WHERE T2.A3 = 'south Bohemia' AND T3.gender = 'F';", "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN client AS T3 ON T3.client_id = T1.account_id WHERE T2.A3 = 'south Bohemia' AND T3.gender = 'F';", "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T2.A3 = 'south Bohemia';"]}, {"question_id": 148, "answer_sql": ["SELECT T1.account_id FROM disp AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T3.A2 = 'Tabor' AND T1.type = 'OWNER'", "SELECT T1.account_id FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T2.A2 = 'Tabor'", "SELECT T1.account_id FROM disp AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T3.A2 = 'TABOR' AND T1.type = 'OWNER'"]}, {"question_id": 149, "answer_sql": ["SELECT T1.type, AVG(T3.A11) FROM disp AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.type != 'LOAN' AND T2.account_id < 9000 AND T3.A11 > 8000 GROUP BY T1.type;", "SELECT T1.type FROM disp AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T2.account_id NOT IN ( SELECT T4.account_id FROM disp AS T4 INNER JOIN account AS T5 ON T4.account_id = T5.account_id INNER JOIN loan AS T6 ON T5.account_id = T6.account_id WHERE T5.district_id = T3.district_id AND T6.amount > 8000 AND T6.amount < 9000 ) AND T3.A11 BETWEEN 8000 AND 9000;", "SELECT T1.type FROM disp AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.type != 'loan' AND T3.A11 BETWEEN 8000 AND 9000;", "SELECT T1.type, AVG(T3.A11) FROM disp AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.type != 'LOAN' AND T3.A11 BETWEEN 8000 AND 9000 GROUP BY T1.type;"]}, {"question_id": 150, "answer_sql": ["SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T1.district_id = ( SELECT district_id FROM district WHERE A3 = 'North Bohemia' ) AND T2.bank = 'AB';"]}, {"question_id": 151, "answer_sql": ["SELECT T1.A2 FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.type = 'VYDAJ' GROUP BY T1.A2;", "SELECT T2.A2 FROM trans AS T1 INNER JOIN district AS T2 ON T1.account_id = T2.district_id WHERE T1.type = 'VYDAJ' GROUP BY T2.A2;"]}, {"question_id": 152, "answer_sql": ["SELECT AVG(T2.amount) FROM district AS T1 INNER JOIN trans AS T2 ON T1.district_id = T2.account_id WHERE T1.A15 > 4000 AND STRFTIME('%Y', T2.date) >= '1997';", "SELECT AVG(A15) FROM district WHERE A3 = 'A3' AND A15 > 4000 AND district_id IN (SELECT account_id FROM account WHERE STRFTIME('%Y', date) = '1997');"]}, {"question_id": 153, "answer_sql": ["SELECT COUNT(T1.card_id) FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN loan AS T4 ON T3.account_id = T4.account_id WHERE T1.type = 'classic' AND T4.status = 'ACTIVE';", "SELECT COUNT(T1.card_id) FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T2.type = 'OWNER' AND T1.type = 'classic';"]}, {"question_id": 154, "answer_sql": ["SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A2 = 'Hl.m. Praha';"]}, {"question_id": 155, "answer_sql": ["SELECT CAST(SUM(CASE WHEN type = 'gold' AND STRFTIME('%Y', issued) < '1998' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(card_id) FROM card;", "SELECT CAST(SUM(CASE WHEN type = 'gold' AND STRFTIME('%Y', issued) < '1998' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(card_id) FROM card WHERE type = 'gold';"]}, {"question_id": 156, "answer_sql": ["SELECT T3.client_id FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T3 ON T3.account_id = T1.account_id INNER JOIN client AS T4 ON T3.client_id = T4.client_id WHERE T2.amount = ( SELECT MAX(amount) FROM loan );", "SELECT T1.client_id FROM client AS T1 INNER JOIN account AS T2 ON T1.client_id = T2.account_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id WHERE T3.amount = ( SELECT MAX(amount) FROM loan )"]}, {"question_id": 157, "answer_sql": ["SELECT T1.A15 FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T2.account_id = 532"]}, {"question_id": 158, "answer_sql": []}, {"question_id": 159, "answer_sql": ["SELECT T1.amount FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T3 ON T3.account_id = T2.account_id INNER JOIN client AS T4 ON T4.client_id = T3.client_id WHERE T4.client_id = 3356 AND T1.operation = 'VYBER' AND T1.type = 'WITHDRAWAL';", "SELECT T1.account_id FROM account AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T3 ON T3.account_id = T2.account_id INNER JOIN client AS T4 ON T4.client_id = T3.client_id WHERE T4.client_id = 3356 AND T2.operation = 'VYBER'", "SELECT T2.amount FROM disp AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T1.client_id = 3356 AND T2.operation = 'VYBER';"]}, {"question_id": 160, "answer_sql": ["SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.amount < 200000 AND T1.frequency = 'POPLATEK TYDNE';"]}, {"question_id": 161, "answer_sql": ["SELECT T1.type FROM disp AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id WHERE T2.client_id = 13539;", "SELECT T2.type FROM disp AS T1 INNER JOIN card AS T2 ON T1.disp_id = T2.disp_id WHERE T1.client_id = 13539"]}, {"question_id": 162, "answer_sql": ["SELECT T1.A3 FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.client_id = 3541"]}, {"question_id": 163, "answer_sql": ["SELECT T1.A2 FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id WHERE T3.status = 'A' GROUP BY T1.district_id ORDER BY COUNT(T2.account_id) DESC LIMIT 1;"]}, {"question_id": 164, "answer_sql": ["SELECT T1.client_id FROM client AS T1 INNER JOIN `order` AS T2 ON T1.client_id = T2.bank_to WHERE T2.order_id = 32423", "SELECT T1.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN `order` AS T3 ON T2.account_id = T3.account_id WHERE T3.order_id = 32423;"]}, {"question_id": 165, "answer_sql": ["SELECT T2.trans_id FROM district AS T1 INNER JOIN trans AS T2 ON T1.district_id = T2.account_id WHERE T1.district_id = 5"]}, {"question_id": 166, "answer_sql": ["SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Jesenik';"]}, {"question_id": 167, "answer_sql": ["SELECT T1.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T3.issued > '1996-12-31' AND T3.type = 'junior'"]}, {"question_id": 168, "answer_sql": ["SELECT CAST(SUM(CASE WHEN T1.gender = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.client_id) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN district AS T4 ON T3.district_id = T4.district_id WHERE T4.A11 > 10000;"]}, {"question_id": 169, "answer_sql": ["SELECT CAST(SUM(CASE WHEN T3.gender = 'M' THEN T1.amount ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T3.gender = 'F' THEN T1.amount ELSE 0 END) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.district_id = T3.district_id WHERE T1.date BETWEEN '1996-01-01' AND '1997-12-31';", "SELECT CAST(SUM(IIF(T3.gender = 'M', T4.amount, 0)) AS REAL) * 100 / SUM(IIF(T3.gender = 'F', T4.amount, 0)) FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id INNER JOIN loan AS T4 ON T1.account_id = T4.account_id WHERE T1.date BETWEEN '1996-01-01' AND '1997-12-31';", "SELECT CAST(SUM(CASE WHEN T3.gender = 'M' THEN T2.amount END) AS REAL) * 100 / SUM(CASE WHEN T3.gender = 'M' THEN T2.amount END) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.account_id = T3.client_id WHERE T2.date BETWEEN '1996-01-01' AND '1997-12-31';", "SELECT CAST(SUM(CASE WHEN T2.gender = 'M' THEN T3.amount END) AS REAL) * 100 / SUM(CASE WHEN T2.gender = 'F' THEN T3.amount END) FROM account AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T2.gender = 'M' AND T1.date BETWEEN '1996-01-01' AND '1997-12-31';"]}, {"question_id": 170, "answer_sql": ["SELECT COUNT(trans_id) FROM trans WHERE date > '1995-12-31' AND operation = 'VYBER KARTOU';"]}, {"question_id": 171, "answer_sql": ["SELECT A16 - (SELECT A16 FROM district WHERE A3 = 'North Bohemia') FROM district WHERE A3 = 'East Bohemia';"]}, {"question_id": 172, "answer_sql": ["SELECT COUNT(T1.disp_id) FROM disp AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T2.account_id BETWEEN 1 AND 10;"]}, {"question_id": 173, "answer_sql": ["SELECT T1.frequency, T2.k_symbol FROM account AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T2.account = 3 AND T2.k_symbol = 'account statement' AND T2.amount = 3539;"]}, {"question_id": 174, "answer_sql": ["SELECT STRFTIME('%Y', T1.birth_date) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id WHERE T3.account_id = 130;"]}, {"question_id": 175, "answer_sql": ["SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T1.frequency = 'POPLATEK PO OBRATU' AND T2.type = 'OWNER';", "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T1.frequency = 'POPLATEK PO OBRATU';"]}, {"question_id": 176, "answer_sql": ["SELECT T1.amount, T2.type FROM loan AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN client AS T4 ON T2.client_id = T4.client_id WHERE T4.client_id = 992"]}, {"question_id": 177, "answer_sql": ["SELECT T1.amount, T3.gender, T1.balance FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.district_id = T3.district_id WHERE T1.trans_id = 851 AND T3.client_id = 4;", "SELECT T1.amount, T4.gender FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T3 ON T2.account_id = T3.account_id INNER JOIN client AS T4 ON T3.client_id = T4.client_id WHERE T3.client_id = 4 AND T1.trans_id = 851;", "SELECT T1.balance, T2.gender, T1.type FROM trans AS T1 INNER JOIN client AS T2 ON T2.client_id = T1.account_id WHERE T1.account_id = 851 AND T2.client_id = 4;"]}, {"question_id": 178, "answer_sql": ["SELECT T1.type FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id WHERE T3.client_id = 9;", "SELECT T1.type FROM disp AS T1 INNER JOIN card AS T2 ON T1.disp_id = T2.disp_id WHERE T1.client_id = 9"]}, {"question_id": 179, "answer_sql": ["SELECT sum(T2.amount) FROM client AS T1 INNER JOIN trans AS T2 ON T1.client_id = T2.account_id WHERE T1.client_id = 617 AND STRFTIME('%Y', T2.date) = '1998';", "SELECT SUM(trans.amount) FROM trans JOIN account ON trans.account_id = account.account_id JOIN disp ON account.account_id = disp.account_id JOIN client ON disp.client_id = client.client_id WHERE client.client_id = 617 AND STRFTIME('%Y', trans.date) = '1998';"]}, {"question_id": 180, "answer_sql": ["SELECT T1.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN district AS T4 ON T3.district_id = T4.district_id WHERE T1.birth_date BETWEEN '1983-01-01' AND '1987-12-31' AND T4.A2 = 'east bohemia'"]}, {"question_id": 181, "answer_sql": ["SELECT T1.client_id FROM disp AS T2 INNER JOIN client AS T1 ON T1.client_id = T2.client_id INNER JOIN loan AS T3 ON T3.account_id = T2.account_id WHERE T1.gender = 'F' ORDER BY T3.amount DESC LIMIT 3;"]}, {"question_id": 182, "answer_sql": ["SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN trans AS T4 ON T3.account_id = T4.account_id INNER JOIN loan AS T5 ON T3.account_id = T5.account_id WHERE T1.gender = 'M' AND STRFTIME('%Y', T1.birth_date) BETWEEN '1974' AND '1976' AND T4.amount > 4000 AND T5.amount > 0;", "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN trans AS T4 ON T3.account_id = T4.account_id WHERE T1.gender = 'M' AND STRFTIME('%Y', T1.birth_date) BETWEEN '1974' AND '1976' AND T4.amount > 4000 AND T4.k_symbol = 'SIPO';", "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN trans AS T4 ON T3.account_id = T4.account_id WHERE T1.gender = 'M' AND STRFTIME('%Y', T1.birth_date) BETWEEN '1974' AND '1976' AND T4.amount > 4000 AND T4.type = 'SIPO';"]}, {"question_id": 183, "answer_sql": ["SELECT COUNT(account_id) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.A2 = 'Beroun' AND account.date > '1996-12-31';", "SELECT COUNT(account_id) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.A2 = 'Beroun' AND account.date > '1996-01-01';", "SELECT COUNT(account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'Beroun' AND STRFTIME('%Y', T1.date) > '1996';"]}, {"question_id": 184, "answer_sql": ["SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T1.gender = 'F' AND T3.type = 'junior';"]}, {"question_id": 185, "answer_sql": ["SELECT CAST(SUM(CASE WHEN T3.gender = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.client_id) FROM disp AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T3.client_id = T1.client_id INNER JOIN district AS T4 ON T4.district_id = T3.district_id WHERE T4.A3 = 'Prague';", "SELECT CAST(SUM(CASE WHEN T2.gender = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.client_id) FROM disp AS T1 INNER JOIN client AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T1.account_id = T3.account_id INNER JOIN district AS T4 ON T3.district_id = T4.district_id WHERE T4.A3 = 'Prague';"]}, {"question_id": 186, "answer_sql": ["SELECT CAST(SUM(CASE WHEN T1.gender = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.client_id) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id WHERE T2.type = 'POPLATEK TYDNE';"]}, {"question_id": 187, "answer_sql": ["SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id WHERE T3.frequency = 'POPLATEK TYDNE';", "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id WHERE T3.frequency = 'POPLATEK TYDNE' AND T2.type = 'User';"]}, {"question_id": 188, "answer_sql": ["SELECT T1.account_id FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.date <= DATE('now','-24 month') AND STRFTIME('%Y', T1.date) < '1997' ORDER BY T2.amount ASC LIMIT 1;", "SELECT T1.account_id FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.duration > 24 AND STRFTIME('%Y', T1.date) < '1997' ORDER BY T2.amount ASC LIMIT 1;"]}, {"question_id": 189, "answer_sql": ["SELECT T1.account_id FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id INNER JOIN district AS T4 ON T3.district_id = T4.district_id WHERE T3.gender = 'F' ORDER BY T3.birth_date ASC, T4.A11 ASC LIMIT 1;"]}, {"question_id": 190, "answer_sql": ["SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T1.birth_date) = '1920' AND T2.A3 = 'east Bohemia';"]}, {"question_id": 191, "answer_sql": ["SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.duration = 24 AND T1.frequency = 'POPLATEK TYDNE' AND T2.status = 'prepayment';"]}, {"question_id": 192, "answer_sql": ["SELECT AVG(amount) FROM loan WHERE status IN ('C', 'D') AND account_id IN ( SELECT account_id FROM trans WHERE k_symbol = 'POPLATEK PO OBRATU' );"]}, {"question_id": 193, "answer_sql": ["SELECT T1.client_id, T2.district_id FROM disp AS T1 INNER JOIN client AS T2 ON T1.client_id = T2.client_id WHERE T1.type IN ('owner', 'employee')", "SELECT T1.client_id, T2.district_id FROM disp AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T1.client_id = T3.client_id INNER JOIN district AS T4 ON T2.district_id = T4.district_id INNER JOIN `order` AS T5 ON T2.account_id = T5.account_id WHERE T1.type = 'owner' OR T5.account_id IS NOT NULL;"]}, {"question_id": 194, "answer_sql": ["SELECT T1.client_id, T3.date - T3.date FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN card AS T4 ON T4.disp_id = T2.disp_id WHERE T2.type = 'gold' AND T4.type = 'credit' AND T3.account_id IN ( SELECT account_id FROM loan WHERE status = 'approved' );", "SELECT T1.client_id, T3.date - T3.date FROM disp AS T1 INNER JOIN client AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T1.account_id = T3.account_id INNER JOIN card AS T4 ON T4.disp_id = T1.disp_id WHERE T4.type = 'gold' AND T1.account_id IN ( SELECT account_id FROM loan );"]}, {"question_id": 195, "answer_sql": ["SELECT bond_type FROM bond GROUP BY bond_type ORDER BY COUNT(bond_type) DESC LIMIT 1;"]}, {"question_id": 196, "answer_sql": ["SELECT COUNT(DISTINCT t3.molecule_id) FROM atom AS t1 INNER JOIN molecule AS t2 ON t1.molecule_id = t2.molecule_id INNER JOIN atom AS t3 ON t1.molecule_id = t3.molecule_id WHERE t2.label = '-' AND t1.element = 'cl';"]}, {"question_id": 197, "answer_sql": ["SELECT AVG(CASE WHEN T1.element = 'o' THEN 1 ELSE 0 END) AS avg_oxygen_atoms FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '-';", "SELECT AVG(atom_count) FROM ( SELECT COUNT(atom_id) AS atom_count FROM atom WHERE element = 'o' AND molecule_id IN ( SELECT molecule_id FROM bond WHERE bond_type = '-' ) GROUP BY molecule_id ) AS oxygen_counts;"]}, {"question_id": 198, "answer_sql": ["SELECT CAST(COUNT(DISTINCT CASE WHEN T2.bond_type = '-' THEN T1.molecule_id ELSE NULL END) AS REAL) / COUNT(DISTINCT T1.molecule_id) AS avg FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+';"]}, {"question_id": 199, "answer_sql": ["SELECT COUNT(DISTINCT T3.atom_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T2.atom_id = T3.atom_id WHERE T2.element = 'na' AND T1.label = '-';", "SELECT COUNT(DISTINCT atom.atom_id) FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'na' AND molecule.label = '-';"]}, {"question_id": 200, "answer_sql": ["SELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '#' AND T1.molecule_id IN ( SELECT T.molecule_id FROM molecule AS T WHERE T.label = '+' );"]}, {"question_id": 201, "answer_sql": ["SELECT CAST(COUNT(CASE WHEN T1.element = 'c' THEN T1.atom_id ELSE NULL END) AS REAL) * 100 / COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '=';", "SELECT CAST(COUNT(CASE WHEN T1.element = 'c' THEN T1.atom_id ELSE NULL END) AS REAL) * 100 / COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '=';", "SELECT CAST(COUNT(CASE WHEN T1.element = 'c' THEN T1.atom_id ELSE NULL END) AS REAL) * 100 / COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '=';"]}, {"question_id": 202, "answer_sql": ["SELECT COUNT(*) FROM bond WHERE bond_type = '#';"]}, {"question_id": 203, "answer_sql": ["SELECT COUNT(DISTINCT atom_id) FROM atom WHERE element != 'br';"]}, {"question_id": 204, "answer_sql": ["SELECT COUNT(DISTINCT molecule.molecule_id) FROM molecule WHERE molecule.molecule_id BETWEEN 'TR000' AND 'TR099' AND molecule.label = '+';"]}, {"question_id": 205, "answer_sql": ["SELECT DISTINCT T2.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'si';"]}, {"question_id": 206, "answer_sql": ["SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T3.bond_id = T2.bond_id WHERE T3.bond_id = 'TR004_8_9' AND T1.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca');", "SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR004_8_9' GROUP BY T1.element;"]}, {"question_id": 207, "answer_sql": ["SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T3.bond_id = T2.bond_id WHERE T3.bond_type = '=';", "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '=';"]}, {"question_id": 208, "answer_sql": ["SELECT T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'h' GROUP BY T2.label ORDER BY COUNT(T2.label) DESC LIMIT 1;"]}, {"question_id": 209, "answer_sql": ["SELECT DISTINCT T1.bond_type FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id WHERE T3.element = 'te';"]}, {"question_id": 210, "answer_sql": []}, {"question_id": 211, "answer_sql": []}, {"question_id": 212, "answer_sql": ["SELECT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-' AND T1.element NOT IN ('c', 's', 'p', 'n', 'f', 'i', 'b', 'h', 'o', 'cl', 'sn', 'pb', 'te', 'ca') GROUP BY T1.element ORDER BY COUNT(T1.element) ASC LIMIT 1;", "SELECT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-' GROUP BY T1.element ORDER BY COUNT(T1.element) ASC LIMIT 1;"]}, {"question_id": 213, "answer_sql": ["SELECT T1.bond_type FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.atom_id = 'TR004_8' AND T2.atom_id2 = 'TR004_20';"]}, {"question_id": 214, "answer_sql": ["SELECT DISTINCT T1.label FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.element != 'sn' AND T1.label NOT IN ('carcinogenic', 'non-carcinogenic');", "SELECT DISTINCT T1.label FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.element != 'sn' AND T1.label NOT IN ('+', '-');"]}, {"question_id": 215, "answer_sql": ["SELECT COUNT(DISTINCT atom_id) FROM atom WHERE element IN ('i', 's') AND atom_id IN ( SELECT atom_id FROM connected WHERE bond_id IN ( SELECT bond_id FROM bond WHERE bond_type = '-' ) );"]}, {"question_id": 216, "answer_sql": ["SELECT T1.atom_id, T1.atom_id2 FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T2.bond_type = '#' GROUP BY T1.atom_id HAVING COUNT(T1.atom_id) = 3;"]}, {"question_id": 217, "answer_sql": ["SELECT DISTINCT T1.atom_id, T1.molecule_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.molecule_id = 'TR181';", "SELECT DISTINCT T1.atom_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.molecule_id = 'TR181';"]}, {"question_id": 218, "answer_sql": ["SELECT CAST(COUNT(CASE WHEN T2.element <> 'f' THEN T1.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+';", "SELECT CAST(COUNT(CASE WHEN T2.element <> 'f' THEN T1.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+' AND T2.element = 'f';", "SELECT CAST(SUM(CASE WHEN T2.element = 'f' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+' AND T2.element = 'f';"]}, {"question_id": 219, "answer_sql": ["SELECT CAST(COUNT(CASE WHEN T2.bond_type = '#' THEN T1.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(T1.molecule_id) FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+';"]}, {"question_id": 220, "answer_sql": ["SELECT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR000' ORDER BY T1.element LIMIT 3;", "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR000' ORDER BY T1.element LIMIT 3;"]}, {"question_id": 221, "answer_sql": ["SELECT T1.atom_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR001_2_6' AND T1.molecule_id = 'TR001';"]}, {"question_id": 222, "answer_sql": ["SELECT SUM(CASE WHEN label = '+' THEN 1 ELSE 0 END) - SUM(CASE WHEN label = '-' THEN 1 ELSE 0 END) AS difference FROM molecule;"]}, {"question_id": 223, "answer_sql": ["SELECT T1.atom_id FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T2.bond_id = 'TR_000_2_5';"]}, {"question_id": 224, "answer_sql": ["SELECT DISTINCT bond_id FROM connected WHERE atom_id2 = 'TR000_2';", "SELECT DISTINCT T1.bond_id FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T2.molecule_id = 'TR000_2' AND T1.atom_id2 = 'TR000_2';"]}, {"question_id": 225, "answer_sql": ["SELECT DISTINCT T1.molecule_id FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '=' ORDER BY T1.molecule_id LIMIT 5;", "SELECT DISTINCT T1.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '=' ORDER BY T2.molecule_id LIMIT 5;", "SELECT DISTINCT T1.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '=' ORDER BY T2.label LIMIT 5;"]}, {"question_id": 226, "answer_sql": ["SELECT CAST(COUNT(CASE WHEN T1.bond_type = '=' THEN T1.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T1.bond_id) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR008';"]}, {"question_id": 227, "answer_sql": ["SELECT CAST(COUNT(CASE WHEN label = '+' THEN molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(molecule_id) FROM molecule;"]}, {"question_id": 228, "answer_sql": ["SELECT CAST(COUNT(CASE WHEN T1.element = 'h' THEN T1.atom_id ELSE NULL END) AS REAL) * 100 / COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR206';"]}, {"question_id": 229, "answer_sql": ["SELECT DISTINCT T1.bond_type FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR000';"]}, {"question_id": 230, "answer_sql": ["SELECT T1.element, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR060';"]}, {"question_id": 231, "answer_sql": ["SELECT T1.bond_type, CASE WHEN T2.label = '+' THEN 'Yes' ELSE 'No' END is_carcinogenic FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR018' GROUP BY T1.bond_type ORDER BY COUNT(T1.bond_type) DESC LIMIT 1;"]}, {"question_id": 232, "answer_sql": ["SELECT DISTINCT T3.molecule_id, T3.label FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN molecule AS T3 ON T3.molecule_id = T1.molecule_id INNER JOIN bond AS T4 ON T4.molecule_id = T3.molecule_id WHERE T4.bond_type = '-' AND T3.label = '-' GROUP BY T3.molecule_id ORDER BY T3.molecule_id LIMIT 3;", "SELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '-' AND T1.molecule_id NOT IN ( SELECT molecule_id FROM molecule WHERE label = '-' ) ORDER BY T1.molecule_id LIMIT 3;", "SELECT T1.molecule_id FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '-' AND T1.label = '-' GROUP BY T1.molecule_id ORDER BY T1.molecule_id LIMIT 3;"]}, {"question_id": 233, "answer_sql": ["SELECT DISTINCT bond_type FROM bond WHERE molecule_id = 'TR006' ORDER BY bond_type LIMIT 2;", "SELECT T2.bond_id, T2.bond_type FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR006' ORDER BY T2.bond_id LIMIT 2;", "SELECT T1.bond_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR006' ORDER BY T1.bond_id LIMIT 2;"]}, {"question_id": 234, "answer_sql": ["SELECT COUNT(*) FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.atom_id = 'TR009_12' OR T2.atom_id2 = 'TR009_12';", "SELECT COUNT(*) FROM bond AS t1 INNER JOIN connected AS t2 ON t1.bond_id = t2.bond_id WHERE t2.atom_id = 'TR009_12' AND t1.molecule_id = 'TR009';"]}, {"question_id": 235, "answer_sql": ["SELECT COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'br' AND T2.label = '+';", "SELECT COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'br';"]}, {"question_id": 236, "answer_sql": ["SELECT T2.bond_type, T1.atom_id, T1.atom_id2 FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_id = 'TR001_6_9';"]}, {"question_id": 237, "answer_sql": ["SELECT T3.label, T1.carcinogenic FROM ( SELECT 'TR001_10' AS atom_id, 'carcinogenic' AS carcinogenic ) AS T1 JOIN atom AS T2 ON T2.atom_id = 'TR001_10' JOIN molecule AS T3 ON T3.molecule_id = T2.molecule_id", "SELECT T1.label FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.atom_id = 'TR001_10'", "SELECT T1.molecule_id, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR001_10'"]}, {"question_id": 238, "answer_sql": ["SELECT COUNT(DISTINCT molecule_id) FROM bond WHERE bond_type = '#' GROUP BY molecule_id HAVING COUNT(DISTINCT bond_type) = 3;", "SELECT COUNT(DISTINCT molecule_id) FROM bond WHERE bond_type = '#';"]}, {"question_id": 239, "answer_sql": ["SELECT COUNT(T1.atom_id) FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T2.atom_id = 'TR%_19';"]}, {"question_id": 240, "answer_sql": ["SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR004';", "SELECT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR004';"]}, {"question_id": 241, "answer_sql": ["SELECT COUNT(*) FROM molecule WHERE label = '-';"]}, {"question_id": 242, "answer_sql": ["SELECT DISTINCT T2.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE SUBSTR(T1.atom_id, -2) BETWEEN 21 AND 25 AND T2.label = '+';"]}, {"question_id": 243, "answer_sql": ["SELECT T3.bond_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T3.bond_id = T2.bond_id WHERE T1.element = 'p' AND T1.atom_id = 'p' AND T1.element = 'n' AND T1.atom_id = 'n'"]}, {"question_id": 244, "answer_sql": ["SELECT CASE WHEN COUNT(DISTINCT T2.bond_id) > 2 THEN 'Yes' ELSE 'No' END AS has_double_bonds FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+' AND T2.bond_type = '=';", "SELECT T1.label FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '=' GROUP BY T1.molecule_id ORDER BY COUNT(T2.bond_id) DESC LIMIT 1;"]}, {"question_id": 245, "answer_sql": ["SELECT CAST(COUNT(T2.bond_id) AS REAL) / COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'i';", "SELECT CAST(COUNT(T2.bond_id) AS REAL) / COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.atom_id = T2.molecule_id WHERE T1.element = 'i';", "SELECT CAST(COUNT(T2.bond_id) AS REAL) / COUNT(DISTINCT T1.atom_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'i';"]}, {"question_id": 246, "answer_sql": ["SELECT T2.bond_type, T2.bond_id FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = '45';"]}, {"question_id": 247, "answer_sql": ["SELECT DISTINCT T1.element FROM atom AS T1 LEFT JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.atom_id IS NULL;"]}, {"question_id": 248, "answer_sql": ["SELECT T1.atom_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN molecule AS T3 ON T3.molecule_id = T1.molecule_id INNER JOIN bond AS T4 ON T4.bond_id = T2.bond_id WHERE T3.molecule_id = 'TR447' AND T4.bond_type = '#';"]}, {"question_id": 249, "answer_sql": ["SELECT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_id = 'TR144_8_19'", "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_id = 'TR144_8_19';", "SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR144_8_19'"]}, {"question_id": 250, "answer_sql": ["SELECT T1.molecule_id, COUNT(T2.bond_id) FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+' AND T2.bond_type = '=' GROUP BY T1.molecule_id ORDER BY COUNT(T2.bond_id) DESC LIMIT 1;", "SELECT T1.molecule_id, T2.label, COUNT(T1.bond_id) AS double_bonds FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '=' GROUP BY T1.molecule_id ORDER BY double_bonds DESC LIMIT 1;", "SELECT T1.molecule_id FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+' AND T2.bond_type = '=' GROUP BY T1.molecule_id ORDER BY COUNT(T2.bond_id) DESC LIMIT 1;", "SELECT T1.molecule_id, T2.label, COUNT(T3.bond_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T2.label = '+' AND T3.bond_type = '=' GROUP BY T1.molecule_id ORDER BY COUNT(T3.bond_id) DESC LIMIT 1;", "SELECT T1.label, COUNT(T2.bond_id) FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+' AND T2.bond_type = '=' GROUP BY T1.molecule_id ORDER BY COUNT(T2.bond_id) DESC LIMIT 1;"]}, {"question_id": 251, "answer_sql": ["SELECT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' GROUP BY T1.element ORDER BY COUNT(T1.element) ASC LIMIT 1;"]}, {"question_id": 252, "answer_sql": ["SELECT T1.atom_id, T1.molecule_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 'pb' AND T2.bond_id IS NOT NULL;", "SELECT T1.atom_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 'pb'", "SELECT T1.atom_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 'pb' AND T2.atom_id2 IN (SELECT T1.atom_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 'pb')", "SELECT T1.atom_id, T1.atom_id2 FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T2.element = 'pb'"]}, {"question_id": 253, "answer_sql": ["SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '#';", "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T3.bond_id = T2.bond_id WHERE T3.bond_type = '#';"]}, {"question_id": 254, "answer_sql": ["SELECT CAST(COUNT(*) AS REAL) * 100 / ( SELECT COUNT(*) FROM bond ) AS percentage FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.element = ( SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id GROUP BY atom.element ORDER BY COUNT(*) DESC LIMIT 1 );", "SELECT CAST(COUNT(CASE WHEN T2.bond_type = 'common' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T2.bond_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id GROUP BY T2.bond_type ORDER BY COUNT(T2.bond_id) DESC LIMIT 1;"]}, {"question_id": 255, "answer_sql": ["SELECT CAST(SUM(CASE WHEN T2.label = '+' THEN 1 ELSE 0 END) AS REAL) / COUNT(T1.bond_id) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '-';"]}, {"question_id": 256, "answer_sql": ["SELECT COUNT(DISTINCT atom_id) FROM atom WHERE element IN ('c', 'h');"]}, {"question_id": 257, "answer_sql": ["SELECT DISTINCT T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 's';", "SELECT T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 's';"]}, {"question_id": 258, "answer_sql": ["SELECT DISTINCT T1.bond_type FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id WHERE T3.element = 'sn' AND T1.bond_type IN ('=', '-', '#');"]}, {"question_id": 259, "answer_sql": ["SELECT COUNT(DISTINCT T1.element) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '-';", "SELECT COUNT(DISTINCT T1.element) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '-';"]}, {"question_id": 260, "answer_sql": ["SELECT COUNT(DISTINCT T1.atom_id) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id INNER JOIN molecule AS T4 ON T4.molecule_id = T1.molecule_id WHERE T1.element IN ('p', 'br') GROUP BY T4.molecule_id HAVING COUNT(DISTINCT T3.bond_type) = 3;", "SELECT COUNT(DISTINCT T1.atom_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id INNER JOIN connected AS T4 ON T3.bond_id = T4.bond_id WHERE T1.element IN ('p', 'br') GROUP BY T2.molecule_id HAVING COUNT(DISTINCT T3.bond_id) = 3;", "SELECT COUNT(DISTINCT atom.atom_id) FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id JOIN bond ON molecule.molecule_id = bond.molecule_id JOIN connected ON bond.bond_id = connected.bond_id WHERE (atom.element = 'p' OR atom.element = 'br') AND bond.bond_type = '#' AND connected.atom_id2 IN (SELECT atom_id FROM connected WHERE atom_id = connected.atom_id2 GROUP BY atom_id HAVING COUNT(DISTINCT connected.bond_id) = 3);"]}, {"question_id": 261, "answer_sql": ["SELECT T2.bond_id FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+';"]}, {"question_id": 262, "answer_sql": ["SELECT DISTINCT T1.molecule_id FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '-' AND T1.label = '-';"]}, {"question_id": 263, "answer_sql": ["SELECT CAST(COUNT(CASE WHEN T1.element = 'cl' THEN T1.atom_id ELSE NULL END) AS REAL) * 100 / COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '-';", "SELECT CAST(COUNT(CASE WHEN T3.element = 'cl' THEN T1.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(T1.molecule_id) FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id WHERE T1.bond_type = '-';", "SELECT CAST(COUNT(CASE WHEN T1.element = 'cl' THEN T1.atom_id ELSE NULL END) AS REAL) * 100 / COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '-';"]}, {"question_id": 264, "answer_sql": ["SELECT label FROM molecule WHERE molecule_id IN ('TR000', 'TR001', 'TR002');", "SELECT T1.label FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id IN ('TR000', 'TR001', 'TR002');"]}, {"question_id": 265, "answer_sql": ["SELECT DISTINCT molecule_id FROM molecule WHERE label = '-';"]}, {"question_id": 266, "answer_sql": ["SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id BETWEEN 'TR000' AND 'TR030' AND T1.label = '+';"]}, {"question_id": 267, "answer_sql": ["SELECT DISTINCT T1.bond_type FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id BETWEEN 'TR000' AND 'TR050';"]}, {"question_id": 268, "answer_sql": ["SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR001_10_11';"]}, {"question_id": 269, "answer_sql": ["SELECT COUNT(DISTINCT T2.bond_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'i';", "SELECT COUNT(DISTINCT T2.bond_id) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 'i';", "SELECT COUNT(DISTINCT bond.bond_id) FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE atom.element = 'i';"]}, {"question_id": 270, "answer_sql": ["SELECT T1.label FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.element = 'ca' GROUP BY T1.label ORDER BY COUNT(T1.label) DESC LIMIT 1;"]}, {"question_id": 271, "answer_sql": ["SELECT CASE WHEN (SELECT element FROM atom WHERE atom_id = (SELECT molecule_id FROM bond WHERE bond_id = 'TR001_1_8') AND element = 'cl') AND (SELECT element FROM atom WHERE atom_id = (SELECT molecule_id FROM bond WHERE bond_id = 'TR001_1_8') AND element = 'c') THEN 'YES' ELSE 'NO' END AS YORN;", "SELECT CASE WHEN COUNT(DISTINCT CASE WHEN T1.element = 'cl' THEN T1.atom_id ELSE NULL END) > 0 AND COUNT(DISTINCT CASE WHEN T1.element = 'c' THEN T1.atom_id ELSE NULL END) > 0 THEN 'YES' ELSE 'NO' END AS YORN FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_id = 'TR001_1_8';", "SELECT CASE WHEN COUNT(DISTINCT T1.element) = 2 THEN 'yes' ELSE 'no' END AS yn FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T3.bond_id = T2.bond_id WHERE T3.bond_id = 'TR001_1_8' AND T1.element IN ('cl', 'c');", "SELECT CASE WHEN COUNT(DISTINCT T1.element) = 2 THEN 'yes' ELSE 'no' END AS yn FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_id = 'TR001_1_8' AND T1.element IN ('cl', 'c');"]}, {"question_id": 272, "answer_sql": ["SELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'c' AND T2.bond_type = '#' AND T1.molecule_id IN ( SELECT T3.molecule_id FROM molecule AS T3 INNER JOIN bond AS T4 ON T3.molecule_id = T4.molecule_id WHERE T3.label = '-' );", "SELECT T1.molecule_id FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'c' AND T2.bond_type = '#' AND T1.molecule_id IN ( SELECT T3.molecule_id FROM molecule AS T3 INNER JOIN bond AS T4 ON T3.molecule_id = T4.molecule_id WHERE T3.label = '-' );"]}, {"question_id": 273, "answer_sql": ["SELECT CAST(COUNT(CASE WHEN T1.element = 'cl' THEN T1.atom_id ELSE NULL END) AS REAL) * 100 / COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+';"]}, {"question_id": 274, "answer_sql": ["SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR001';"]}, {"question_id": 275, "answer_sql": ["SELECT DISTINCT T1.molecule_id FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '=';"]}, {"question_id": 276, "answer_sql": ["SELECT T1.atom_id, T1.atom_id2 FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T2.bond_type = '#' LIMIT 2;", "SELECT T1.atom_id, T1.atom_id2 FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T2.bond_type = '#' GROUP BY T1.atom_id, T1.atom_id2;"]}, {"question_id": 277, "answer_sql": ["SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR005_16_26'"]}, {"question_id": 278, "answer_sql": ["SELECT COUNT(DISTINCT molecule.molecule_id) FROM molecule LEFT JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE molecule.label = '-' AND bond.bond_type = '-';"]}, {"question_id": 279, "answer_sql": ["SELECT T1.label FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_id = 'TR001_10_11';"]}, {"question_id": 280, "answer_sql": ["SELECT DISTINCT T1.bond_id, T2.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#';"]}, {"question_id": 281, "answer_sql": ["SELECT DISTINCT T1.molecule_id, T3.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN atom AS T3 ON T1.molecule_id = T3.molecule_id WHERE T2.label = '+' AND SUBSTR(T1.atom_id, -1) = '4' AND T3.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca');", "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND SUBSTR(T1.atom_id, -1) = '4' AND T1.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca');", "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE SUBSTR(T1.atom_id, -1) = '4' AND T2.label = '+';"]}, {"question_id": 282, "answer_sql": ["SELECT CAST(COUNT(CASE WHEN T1.element = 'h' THEN T1.atom_id ELSE NULL END) AS REAL) / COUNT(T1.atom_id), T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR006'"]}, {"question_id": 283, "answer_sql": ["SELECT T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'ca';"]}, {"question_id": 284, "answer_sql": ["SELECT DISTINCT T1.bond_type FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id WHERE T3.element = 'te' AND T1.bond_type IN ('=', '-', '#');"]}, {"question_id": 285, "answer_sql": ["SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR001_10_11' GROUP BY T1.element;", "SELECT T3.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN atom AS T3 ON T3.atom_id = T2.atom_id2 INNER JOIN bond AS T4 ON T4.bond_id = T2.bond_id WHERE T4.bond_id = 'TR001_10_11' AND T3.molecule_id = SUBSTR(T4.bond_id, 1, 5) AND T1.molecule_id = SUBSTR(T4.bond_id, 7, 2) AND T1.molecule_id = SUBSTR(T4.bond_id, 10, 2)"]}, {"question_id": 286, "answer_sql": ["SELECT 100.0 * COUNT(CASE WHEN bond.bond_type = '#' THEN 1 ELSE NULL END) / COUNT(bond.bond_id) AS Percentage FROM bond;", "SELECT 100.0 * COUNT(DISTINCT CASE WHEN T2.bond_type = '#' THEN T1.molecule_id ELSE NULL END) / COUNT(DISTINCT T1.molecule_id) AS Percentage FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id;", "SELECT COUNT(DISTINCT CASE WHEN T2.bond_type = '#' THEN T1.molecule_id ELSE NULL END) * 100.0 / COUNT(DISTINCT T1.molecule_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id;"]}, {"question_id": 287, "answer_sql": ["SELECT CAST(COUNT(CASE WHEN T2.bond_type = '=' THEN T2.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T2.bond_id) FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR047';"]}, {"question_id": 288, "answer_sql": ["SELECT T1.label FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.atom_id = 'TR001_1'", "SELECT T1.label FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T2.atom_id = T3.atom_id INNER JOIN bond AS T4 ON T4.bond_id = T3.bond_id WHERE T2.atom_id = 'TR001_1' AND T4.bond_type = 'isozyme';"]}, {"question_id": 289, "answer_sql": ["SELECT T1.label FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR151';", "SELECT T1.label FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR151' AND T1.label = '+';"]}, {"question_id": 290, "answer_sql": ["SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR151';"]}, {"question_id": 291, "answer_sql": ["SELECT COUNT(DISTINCT molecule_id) FROM molecule WHERE label = '+';"]}, {"question_id": 292, "answer_sql": ["SELECT DISTINCT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id BETWEEN 'TR010' AND 'TR050' AND T1.element = 'c';"]}, {"question_id": 293, "answer_sql": ["SELECT COUNT(DISTINCT T1.atom_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'"]}, {"question_id": 294, "answer_sql": ["SELECT DISTINCT T2.bond_id FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN molecule AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.label = '+' AND T2.bond_type = '=';"]}, {"question_id": 295, "answer_sql": ["SELECT COUNT(DISTINCT atom.atom_id) FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+' AND atom.element = 'h';"]}, {"question_id": 296, "answer_sql": ["SELECT T1.molecule_id FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = 'TR00_1_2' AND T1.atom_id = 'TR00_1' GROUP BY T1.molecule_id;"]}, {"question_id": 297, "answer_sql": ["SELECT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'c' AND T2.label = '-'"]}, {"question_id": 298, "answer_sql": ["SELECT CAST(COUNT(CASE WHEN T2.element = 'h' THEN T1.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+';", "SELECT CAST(COUNT(CASE WHEN T1.element = 'h' AND T2.label = '+' THEN T2.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'h';", "SELECT CAST(SUM(CASE WHEN T2.label = '+' AND T1.element = 'h' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id;"]}, {"question_id": 299, "answer_sql": ["SELECT T1.label FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR124'", "SELECT T1.label FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR124' AND T2.element = 'C';", "SELECT CASE WHEN T1.label = '+' THEN 'Yes' ELSE 'No' END AS flag_carcinogenic FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR124';", "SELECT CASE WHEN (SELECT COUNT(*) FROM molecule WHERE molecule_id = 'TR124' AND label = '+') > 0 THEN 'Yes' ELSE 'No' END AS is_carcinogenic;"]}, {"question_id": 300, "answer_sql": ["SELECT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR186';"]}, {"question_id": 301, "answer_sql": ["SELECT T1.bond_type FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.atom_id = 'TR007_4_19' AND T1.bond_type = '=';"]}, {"question_id": 302, "answer_sql": ["SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR001_2_4';"]}, {"question_id": 303, "answer_sql": ["SELECT COUNT(bond.bond_id) FROM bond WHERE molecule_id = (SELECT molecule_id FROM molecule WHERE molecule_id = 'TR006' AND label IN ('carcinogenic', 'non-carcinogenic'));", "SELECT COUNT(bond_id) FROM bond WHERE molecule_id = (SELECT molecule_id FROM molecule WHERE molecule_id = 'TR006') AND bond_type = '=';"]}, {"question_id": 304, "answer_sql": ["SELECT DISTINCT T1.molecule_id, T3.element FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN atom AS T3 ON T3.molecule_id = T1.molecule_id WHERE T1.label = '+' AND T3.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca');", "SELECT DISTINCT T2.molecule_id, T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca');"]}, {"question_id": 305, "answer_sql": []}, {"question_id": 306, "answer_sql": ["SELECT DISTINCT T1.molecule_id, T3.element FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id WHERE T1.bond_type = '#' GROUP BY T1.molecule_id, T3.element HAVING COUNT(T1.bond_id) = 3;", "SELECT DISTINCT T1.molecule_id, T3.element FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id WHERE T1.bond_type = '#' AND T3.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca');", "SELECT DISTINCT T3.molecule_id, T1.element FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN molecule AS T3 ON T2.molecule_id = T3.molecule_id WHERE T2.bond_type = '#' AND T1.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca');"]}, {"question_id": 307, "answer_sql": ["SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T3.bond_id = T2.bond_id WHERE T3.bond_id = 'TR000_2_3'", "SELECT T3.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN atom AS T3 ON T3.atom_id = T2.atom_id2 INNER JOIN bond AS T4 ON T4.bond_id = T2.bond_id WHERE T4.bond_id = 'TR000_2_3'"]}, {"question_id": 308, "answer_sql": ["SELECT COUNT(T2.bond_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'cl';", "SELECT COUNT(T2.bond_id) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T3.bond_id = T2.bond_id WHERE T1.element = 'cl';", "SELECT COUNT(T2.bond_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T2.bond_id = T3.bond_id WHERE T1.element = 'cl';", "SELECT COUNT(DISTINCT T2.bond_id) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN molecule AS T3 ON T3.molecule_id = T1.molecule_id INNER JOIN bond AS T4 ON T4.molecule_id = T3.molecule_id WHERE T1.element = 'cl';"]}, {"question_id": 309, "answer_sql": ["SELECT T1.atom_id, COUNT(DISTINCT T2.bond_type) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR346' GROUP BY T1.atom_id;"]}, {"question_id": 310, "answer_sql": ["SELECT COUNT(DISTINCT molecule.molecule_id) FROM molecule JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '=' AND molecule.label = 'carcinogenic compound';", "SELECT COUNT(DISTINCT molecule.molecule_id) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '=' AND molecule.label = '+';"]}, {"question_id": 311, "answer_sql": ["SELECT COUNT(DISTINCT t3.molecule_id) FROM atom AS t1 INNER JOIN molecule AS t2 ON t1.molecule_id = t2.molecule_id INNER JOIN bond AS t3 ON t2.molecule_id = t3.molecule_id WHERE t1.element != 's' AND t3.bond_type != '=';"]}, {"question_id": 312, "answer_sql": ["SELECT T1.label FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_id = 'TR001_2_4' AND T1.label = '+';"]}, {"question_id": 313, "answer_sql": ["SELECT COUNT(DISTINCT atom_id) FROM atom WHERE molecule_id = 'TR005'", "SELECT COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR005';"]}, {"question_id": 314, "answer_sql": ["SELECT COUNT(*) FROM bond WHERE bond_type = '-';"]}, {"question_id": 315, "answer_sql": ["SELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'cl' AND T2.label = '+';"]}, {"question_id": 316, "answer_sql": ["SELECT DISTINCT CASE WHEN T2.label = '-' THEN T1.molecule_id ELSE NULL END FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'c';", "SELECT DISTINCT CASE WHEN T1.label = '-' THEN 'Non-carcinogenic' ELSE 'Carcinogenic' END AS molecule_class FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.element = 'c';", "SELECT DISTINCT CASE WHEN T1.label = '-' THEN 'Not Carcinogenic' ELSE 'Carcinogenic' END AS molecule_status FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.element = 'c';"]}, {"question_id": 317, "answer_sql": ["SELECT CAST(COUNT(CASE WHEN T1.element = 'Cl' THEN T2.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+';", "SELECT CAST(COUNT(CASE WHEN T2.element = 'cl' THEN T1.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+';", "SELECT CAST(COUNT(CASE WHEN T2.element = 'cl' THEN T1.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+' AND T2.element = 'cl';"]}, {"question_id": 318, "answer_sql": ["SELECT molecule_id FROM bond WHERE bond_id = 'TR001_1_7';", "SELECT T1.molecule_id FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_id = 'TR001_1_7';", "SELECT T2.molecule_id FROM bond AS T1 INNER JOIN atom AS T2 ON T1.bond_id = T2.molecule_id WHERE T1.bond_id = 'TR001_1_7';"]}, {"question_id": 319, "answer_sql": ["SELECT COUNT(DISTINCT T1.element) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T3.bond_id = T2.bond_id WHERE T3.bond_id = 'TR001_3_4';"]}, {"question_id": 320, "answer_sql": ["SELECT T1.bond_type FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.atom_id = 'TR000_1' AND T2.atom_id2 = 'TR000_2';"]}, {"question_id": 321, "answer_sql": ["SELECT T1.molecule_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.atom_id = 'TR000_2' AND T2.atom_id2 = 'TR000_4';", "SELECT T3.molecule_id FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id AND T1.atom_id2 = T2.atom_id INNER JOIN molecule AS T3 ON T3.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR000_2' AND T1.atom_id2 = 'TR000_4'"]}, {"question_id": 322, "answer_sql": ["SELECT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR000_1';"]}, {"question_id": 323, "answer_sql": ["SELECT CASE WHEN T1.label = '+' THEN 'carcinogenic' ELSE 'non-carcinogenic' END AS molecule_class FROM molecule AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR000';", "SELECT CASE WHEN T1.label = '+' THEN 'Yes' ELSE 'No' END AS is_carcinogenic FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR000';", "SELECT CASE WHEN T1.label = '+' THEN 'carcinogenic' ELSE 'non-carcinogenic' END AS molecule_class FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR000';", "SELECT T1.label FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR000';", "SELECT CASE WHEN (SELECT label FROM molecule WHERE molecule_id = 'TR000') = '+' THEN 'Yes' ELSE 'No' END AS is_carcinogenic;"]}, {"question_id": 324, "answer_sql": ["SELECT CAST(COUNT(CASE WHEN T2.bond_type = '-' THEN T1.atom_id ELSE NULL END) AS REAL) * 100 / COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id;", "SELECT CAST(COUNT(CASE WHEN bond.bond_type = '-' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(bond.bond_id) FROM bond"]}, {"question_id": 325, "answer_sql": ["SELECT COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'n' AND T2.label = '+';"]}, {"question_id": 326, "answer_sql": ["SELECT DISTINCT T3.molecule_id FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN molecule AS T3 ON T3.molecule_id = T1.molecule_id WHERE T1.element = 's' AND T2.bond_type = '='", "SELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 's' AND T2.bond_type = '=';", "SELECT DISTINCT T3.molecule_id FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN molecule AS T3 ON T3.molecule_id = T1.molecule_id WHERE T1.element = 's' AND T2.bond_type = '=' AND T2.molecule_id = '1';"]}, {"question_id": 327, "answer_sql": ["SELECT T1.molecule_id FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '-' GROUP BY T1.molecule_id HAVING COUNT(T2.atom_id) > 5;", "SELECT COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-' GROUP BY T2.molecule_id HAVING COUNT(DISTINCT T1.atom_id) > 5;", "SELECT COUNT(molecule_id) FROM atom WHERE molecule_id IN ( SELECT molecule_id FROM molecule WHERE label = '-' ) GROUP BY molecule_id HAVING COUNT(molecule_id) > 5;"]}, {"question_id": 328, "answer_sql": ["SELECT DISTINCT T3.element FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id INNER JOIN molecule AS T4 ON T4.molecule_id = T3.molecule_id WHERE T4.molecule_id = 'TR024' AND T1.bond_type = '=';", "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '=' AND T1.molecule_id = 'TR024';"]}, {"question_id": 329, "answer_sql": ["SELECT T1.molecule_id, T1.label FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id GROUP BY T1.molecule_id ORDER BY COUNT(T2.atom_id) DESC LIMIT 1;", "SELECT T1.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' GROUP BY T1.molecule_id ORDER BY COUNT(T1.atom_id) DESC LIMIT 1;"]}, {"question_id": 330, "answer_sql": ["SELECT CAST(COUNT(CASE WHEN T2.label = '+' THEN T1.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(T1.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'h' AND T2.molecule_id IN ( SELECT T2.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#' );", "SELECT CAST(COUNT(CASE WHEN T2.label = '+' THEN T1.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(T1.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T1.element = 'h' AND T3.bond_type = '#';"]}, {"question_id": 331, "answer_sql": ["SELECT COUNT(DISTINCT molecule_id) FROM molecule WHERE label = '+';"]}, {"question_id": 332, "answer_sql": ["SELECT COUNT(DISTINCT T1.molecule_id) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id BETWEEN 'TR004' AND 'TR010' AND T1.bond_type = '-';"]}, {"question_id": 333, "answer_sql": ["SELECT COUNT(atom_id) FROM atom WHERE molecule_id = 'TR008' AND element = 'c';"]}, {"question_id": 334, "answer_sql": ["SELECT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR004_7' AND T2.label = '-'"]}, {"question_id": 335, "answer_sql": ["SELECT COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T1.element = 'o' AND T3.bond_type = '=';", "SELECT COUNT(DISTINCT T1.molecule_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'o' AND T2.bond_type = '=';", "SELECT COUNT(DISTINCT molecule.molecule_id) FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE atom.element = 'o' AND bond.bond_type = '=' AND atom.atom_id IN ( SELECT connected.atom_id FROM connected JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '=' );"]}, {"question_id": 336, "answer_sql": ["SELECT COUNT(DISTINCT T1.molecule_id) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#' AND T2.label = '-';", "SELECT COUNT(*) FROM bond JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond_type = '#' AND molecule.label = '-';", "SELECT COUNT(DISTINCT T1.molecule_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '#' AND T1.molecule_id NOT IN ( SELECT T3.molecule_id FROM molecule AS T3 INNER JOIN atom AS T4 ON T3.molecule_id = T4.molecule_id INNER JOIN connected AS T5 ON T4.atom_id = T5.atom_id WHERE T3.label = '-' );"]}, {"question_id": 337, "answer_sql": ["SELECT DISTINCT T1.element, T2.bond_type FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR016';", "SELECT DISTINCT T1.element, T3.bond_type FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T2.molecule_id = 'TR016';"]}, {"question_id": 338, "answer_sql": ["SELECT T1.atom_id FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '=' AND T1.element = 'c' AND T1.molecule_id = 'TR012';", "SELECT T2.atom_id FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T3.molecule_id = T1.molecule_id WHERE T1.molecule_id = 'TR012' AND T2.element = 'c' AND T3.bond_type = '=' GROUP BY T2.atom_id HAVING COUNT(T2.atom_id) > 2;", "SELECT T3.atom_id FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T2.atom_id = T3.atom_id INNER JOIN bond AS T4 ON T4.bond_id = T3.bond_id WHERE T1.molecule_id = 'TR012' AND T2.element = 'c' AND T4.bond_type = '=';"]}, {"question_id": 339, "answer_sql": ["SELECT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND T1.element = 'o';"]}, {"question_id": 340, "answer_sql": ["SELECT DISTINCT CASE WHEN cardKingdomId = cardKingdomFoilId THEN cardKingdomId ELSE NULL END AS powerful_foil FROM cards WHERE cardKingdomId IS NOT NULL AND cardKingdomFoilId IS NOT NULL;", "SELECT id FROM cards WHERE cardKingdomFoilId = cardKingdomId AND cardKingdomId IS NOT NULL;"]}, {"question_id": 341, "answer_sql": ["SELECT DISTINCT id FROM cards WHERE hasFoil = 0 AND borderColor = 'borderless';", "SELECT id, borderColor, cardKingdomId, hasFoil FROM cards WHERE borderColor = 'borderless' AND (cardKingdomId IS NULL OR cardKingdomId IS NULL) AND hasFoil = 0;", "SELECT DISTINCT id, borderColor, cardKingdomId FROM cards WHERE hasFoil = 0 AND borderColor = '';"]}, {"question_id": 342, "answer_sql": ["SELECT name FROM cards WHERE faceConvertedManaCost = ( SELECT MAX(faceConvertedManaCost) FROM cards );", "SELECT name FROM cards WHERE convertedManaCost < faceConvertedManaCost ORDER BY faceConvertedManaCost DESC LIMIT 1;", "SELECT name FROM cards WHERE faceConvertedManaCost > manaCost;"]}, {"question_id": 343, "answer_sql": ["SELECT DISTINCT name FROM cards WHERE edhrecRank < 100 AND frameVersion = 2015;", "SELECT id FROM cards WHERE edhrecRank < 100 AND frameVersion = 2015;", "SELECT name FROM cards WHERE edhrecRank < 100 AND frameVersion = 2015;"]}, {"question_id": 344, "answer_sql": ["SELECT T1.name FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'mythic' AND T2.format = 'gladiator' AND T2.status = 'Banned';"]}, {"question_id": 345, "answer_sql": ["SELECT T1.format FROM legalities AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.type = 'Artifact' AND T1.format = 'vintage';", "SELECT T1.format FROM legalities AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.type = 'Artifact' AND T1.format = 'vintage' AND T2.side IS NULL;"]}, {"question_id": 346, "answer_sql": ["SELECT T1.id, T1.artist FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'commander' AND T1.power = '*'"]}, {"question_id": 347, "answer_sql": ["SELECT T1.text, T2.text, CASE WHEN T1.hasContentWarning = 1 THEN 'YES' ELSE 'NO' END as hasContentWarning , CASE WHEN T1.artist = 'Stephen Daniel' THEN 'YES' ELSE 'NO' END as isStephenDanielArtist FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Stephen Daniel';"]}, {"question_id": 348, "answer_sql": ["SELECT T2.text, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Sublime Epiphany' AND T1.number = '74s';", "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Sublime Epiphany' AND T1.number = '74s';"]}, {"question_id": 349, "answer_sql": ["SELECT T1.name, T1.artist, CASE WHEN T1.isPromo = 1 THEN 'Yes' ELSE 'No' END as isPromo FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid GROUP BY T1.uuid ORDER BY COUNT(T2.uuid) DESC LIMIT 1;", "SELECT T1.name, T1.artist, CASE WHEN T1.isPromo = 1 THEN 'Yes' ELSE 'No' END AS is_promotional_printing FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid GROUP BY T1.name, T1.artist, T1.isPromo ORDER BY COUNT(T2.uuid) DESC LIMIT 1;"]}, {"question_id": 350, "answer_sql": ["SELECT T2.language FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Annul numbered 29' AND T2.language IS NOT NULL;"]}, {"question_id": 351, "answer_sql": []}, {"question_id": 352, "answer_sql": ["SELECT CAST(SUM(CASE WHEN T2.language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Chinese Simplified';"]}, {"question_id": 353, "answer_sql": ["SELECT T1.totalSetSize, COUNT(T2.id) FROM sets AS T1 INNER JOIN cards AS T2 ON T2.setCode = T1.code INNER JOIN set_translations AS T3 ON T3.setCode = T2.setCode WHERE T3.language = 'Italian' GROUP BY T1.totalSetSize;", "SELECT T1.totalSetSize FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Italian' GROUP BY T1.totalSetSize;", "SELECT T2.translation, T1.totalSetSize FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.language = 'Italian' GROUP BY T2.translation, T1.totalSetSize;", "SELECT T1.totalSetSize, T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Italian';", "SELECT T2.translation, T1.totalSetSize FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Italian';"]}, {"question_id": 354, "answer_sql": ["SELECT COUNT(DISTINCT type) FROM cards WHERE artist = 'Aaron Boyd';", "SELECT COUNT(DISTINCT T1.types) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Aaron Boyd';", "SELECT COUNT(DISTINCT type) FROM cards WHERE artist = 'Aaron Boyd' AND types = 'card';"]}, {"question_id": 355, "answer_sql": ["SELECT keywords FROM cards WHERE name = 'Angel of Mercy';"]}, {"question_id": 356, "answer_sql": ["SELECT COUNT(id) FROM cards WHERE power = '*';"]}, {"question_id": 357, "answer_sql": ["SELECT promoTypes FROM cards WHERE name = 'Duress';"]}, {"question_id": 358, "answer_sql": ["SELECT borderColor FROM cards WHERE name = 'Ancestor''s Chosen';"]}, {"question_id": 359, "answer_sql": ["SELECT originalType FROM cards WHERE name = 'Ancestor''s Chosen';", "SELECT T1.originalType FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Ancestor''s Chosen';", "SELECT T1.originalType FROM cards AS T1 INNER JOIN sqlite_sequence AS T2 ON T2.name = T2.seq WHERE T1.name = 'Ancestor''s Chosen';"]}, {"question_id": 360, "answer_sql": ["SELECT T2.language FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Angel of Mercy';", "SELECT T2.language FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Angel of Mercy';"]}, {"question_id": 361, "answer_sql": ["SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Restricted' AND T1.isTextless = 0;", "SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Restricted' AND T1.hasContentWarning = 0;"]}, {"question_id": 362, "answer_sql": ["SELECT text FROM rulings WHERE uuid = ( SELECT uuid FROM cards WHERE name = 'Condemn' );"]}, {"question_id": 363, "answer_sql": ["SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Restricted' AND T1.isStarter = 1;", "SELECT COUNT(*) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'Restricted' AND cards.isStarter = 1;"]}, {"question_id": 364, "answer_sql": ["SELECT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Cloudchaser Eagle';"]}, {"question_id": 365, "answer_sql": ["SELECT type FROM cards WHERE name = 'Benalish Knight';"]}, {"question_id": 366, "answer_sql": ["SELECT T1.text FROM rulings AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.name = 'Benalish Knight';", "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight';"]}, {"question_id": 367, "answer_sql": ["SELECT DISTINCT T1.artist FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T2.translation = 'Phyrexian' AND T1.artist IS NOT NULL;", "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Phyrexian' AND T1.artist IS NOT NULL;", "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Phyrexian' GROUP BY T1.artist;"]}, {"question_id": 368, "answer_sql": ["SELECT CAST(SUM(CASE WHEN borderColor = 'borderless' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM cards;"]}, {"question_id": 369, "answer_sql": ["SELECT COUNT(*) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'German' AND T1.isReprint = 1;"]}, {"question_id": 370, "answer_sql": ["SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.borderColor = 'borderless' AND T2.language = 'Russian';", "SELECT COUNT(id) FROM cards WHERE borderColor = 'borderless' AND availability = 'online' AND ( SELECT language FROM foreign_data WHERE cards.uuid = foreign_data.uuid ) = 'Russian';"]}, {"question_id": 371, "answer_sql": ["SELECT CAST(SUM(CASE WHEN T2.language = 'French' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.isStorySpotlight = 1;"]}, {"question_id": 372, "answer_sql": ["SELECT COUNT(id) FROM cards WHERE toughness = 99;"]}, {"question_id": 373, "answer_sql": ["SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Aaron Boyd';", "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'English' AND T1.artist = 'Aaron Boyd';"]}, {"question_id": 374, "answer_sql": ["SELECT COUNT(id) FROM cards WHERE availability = 'mtgo' AND borderColor = 'black';"]}, {"question_id": 375, "answer_sql": ["SELECT id FROM cards WHERE convertedManaCost = 0;"]}, {"question_id": 376, "answer_sql": ["SELECT DISTINCT layout FROM cards WHERE keywords = 'flying';", "SELECT DISTINCT layout FROM cards WHERE keywords LIKE '%flying%';", "SELECT cards.layout FROM cards WHERE cards.keywords LIKE '%flying%'"]}, {"question_id": 377, "answer_sql": ["SELECT COUNT(*) FROM cards WHERE originalType = 'Summon - Angel' AND subtypes != 'Angel';"]}, {"question_id": 378, "answer_sql": ["SELECT id FROM cards WHERE (cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL) AND (cardKingdomFoilId = cardKingdomId) ORDER BY id DESC;"]}, {"question_id": 379, "answer_sql": ["SELECT id FROM cards WHERE duelDeck = 'a';"]}, {"question_id": 380, "answer_sql": []}, {"question_id": 381, "answer_sql": ["SELECT DISTINCT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Chinese Simplified';"]}, {"question_id": 382, "answer_sql": []}, {"question_id": 383, "answer_sql": []}, {"question_id": 384, "answer_sql": []}, {"question_id": 385, "answer_sql": ["SELECT text FROM rulings WHERE text LIKE '%Beacon of Immortality%';", "SELECT text FROM rulings WHERE id = ( SELECT id FROM cards WHERE name = 'Beacon of Immortality' );", "SELECT text FROM rulings WHERE uuid = ( SELECT uuid FROM cards WHERE name = 'Beacon of Immortality' );", "SELECT text FROM rulings WHERE id IN ( SELECT id FROM cards WHERE name = 'Beacon of Immortality' );"]}, {"question_id": 386, "answer_sql": ["SELECT COUNT(T1.id), T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.frameVersion = 'future' AND T2.status = 'Legal';", "SELECT COUNT(DISTINCT T1.id), T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.frameVersion = 'future' AND T2.status = 'Legal';", "SELECT COUNT(cards.id), legalities.status FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.frameVersion = 'future' GROUP BY legalities.status"]}, {"question_id": 387, "answer_sql": ["SELECT T1.name, T1.colors FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'OGW';"]}, {"question_id": 388, "answer_sql": ["SELECT T1.translation, T1.language FROM set_translations AS T1 INNER JOIN cards AS T2 ON T2.setCode = T1.setCode WHERE T2.convertedManaCost = 5 AND T2.setCode = '10E';", "SELECT T1.language, T2.name FROM set_translations AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode INNER JOIN cards AS T3 ON T3.setCode = T2.code WHERE T2.code = '10E' AND T3.convertedManaCost = 5;", "SELECT T1.name, T2.language FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.setCode = '10E' AND T1.convertedManaCost = 5 AND T2.translation = 'true';", "SELECT T1.language FROM set_translations AS T1 INNER JOIN cards AS T2 ON T1.setCode = T2.setCode WHERE T2.convertedManaCost = 5 AND T2.setCode = '10E';", "SELECT DISTINCT T1.language FROM set_translations AS T1 INNER JOIN cards AS T2 ON T1.setCode = T2.setCode WHERE T2.convertedManaCost = 5 AND T1.translation IS NOT NULL AND T2.setCode = '10E';"]}, {"question_id": 389, "answer_sql": ["SELECT T1.name, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Creature - Elf'"]}, {"question_id": 390, "answer_sql": ["SELECT T2.colors, T1.format FROM legalities AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid WHERE T2.id BETWEEN 1 AND 20;"]}, {"question_id": 391, "answer_sql": ["SELECT T1.id FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Artifact' AND T1.colors = 'B' AND T2.language = 'Foreign';", "SELECT T1.id FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Artifact' AND T1.colors = 'B' AND T2.language IS NOT NULL;"]}, {"question_id": 392, "answer_sql": ["SELECT T1.name FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'uncommon' ORDER BY T2.date ASC LIMIT 3;", "SELECT T1.name, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'uncommon' ORDER BY T2.date ASC LIMIT 3;", "SELECT T1.name, T2.date, T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'uncommon' ORDER BY T2.date ASC LIMIT 3;"]}, {"question_id": 393, "answer_sql": ["SELECT COUNT(id) FROM cards WHERE artist = 'John Avon' AND hasFoil = 1 AND cardKingdomId IS NOT NULL AND cardKingdomFoilId IS NOT NULL;", "SELECT COUNT(id) FROM cards WHERE artist = 'John Avon' AND (cardKingdomId IS NULL OR cardKingdomFoilId IS NULL);", "SELECT COUNT(id) FROM cards WHERE artist = 'John Avon' AND hasFoil = 0;"]}, {"question_id": 394, "answer_sql": ["SELECT COUNT(id) FROM cards WHERE borderColor = 'white' AND power IS NOT NULL;", "SELECT COUNT(id) FROM cards WHERE borderColor = 'white' AND cardKingdomId IS NOT NULL;", "SELECT COUNT(id) FROM cards WHERE borderColor = 'white';"]}, {"question_id": 395, "answer_sql": ["SELECT COUNT(cards.id) FROM cards WHERE cards.artist = 'UDON' AND cards.availability = 'mtgo' AND cards.hand = '-1';"]}, {"question_id": 396, "answer_sql": ["SELECT COUNT(id) FROM cards WHERE frameVersion = 1993 AND availability = 'paper' AND hasContentWarning = 1;"]}, {"question_id": 397, "answer_sql": ["SELECT manaCost FROM cards WHERE availability = 'paper' AND frameVersion = 2003 AND borderColor = 'black';"]}, {"question_id": 398, "answer_sql": ["SELECT SUM(manaCost) FROM cards WHERE artist = 'Rob Alexander';", "SELECT SUM(manaCost) FROM cards WHERE artist = 'Rob Alexander' AND manaCost = 'unconverted';"]}, {"question_id": 399, "answer_sql": ["SELECT DISTINCT type FROM cards WHERE availability = 'arena';", "SELECT DISTINCT supertypes, subtypes FROM cards WHERE availability = 'arena';", "SELECT DISTINCT type, subtypes FROM cards WHERE availability = 'arena';", "SELECT DISTINCT subtypes, supertypes FROM cards WHERE availability = 'arena';"]}, {"question_id": 400, "answer_sql": ["SELECT T1.setCode FROM set_translations AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.language = 'Spanish';", "SELECT T2.setCode FROM set_translations AS T1 INNER JOIN cards AS T2 ON T1.setCode = T2.setCode WHERE T1.translation = 'Spanish'"]}, {"question_id": 401, "answer_sql": ["SELECT CAST(SUM(CASE WHEN hand = '+3' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM cards WHERE frameEffects = 'legendary';"]}, {"question_id": 402, "answer_sql": ["SELECT CAST(SUM(CASE WHEN isTextless = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM cards WHERE isStorySpotlight = 1;", "SELECT id, CAST(SUM(CASE WHEN isTextless = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM cards WHERE isStorySpotlight = 1 GROUP BY id;"]}, {"question_id": 403, "answer_sql": ["SELECT 100.0 * COUNT(CASE WHEN language = 'Spanish' THEN 1 ELSE NULL END) / COUNT(id) AS Percentage FROM foreign_data;", "SELECT 100.0 * COUNT(CASE WHEN language = 'Spanish' THEN 1 ELSE NULL END) / COUNT(id) AS Percentage FROM foreign_data WHERE language = 'Spanish';", "SELECT (CAST(SUM(CASE WHEN language = 'Spanish' THEN 1 ELSE 0 END) AS REAL) / COUNT(*)) * 100 FROM set_translations WHERE translation = 'true';"]}, {"question_id": 404, "answer_sql": ["SELECT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.baseSetSize = 309;", "SELECT language FROM set_translations WHERE setCode = ( SELECT setCode FROM sets WHERE totalSetSize = 309 );"]}, {"question_id": 405, "answer_sql": ["SELECT COUNT(DISTINCT T2.setCode) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Commander' AND T2.language = 'Portuguese (Brazil)';"]}, {"question_id": 406, "answer_sql": ["SELECT T1.id, T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.type = 'Creature' AND T2.status = 'Legal';", "SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Legal' AND T1.type = 'Creature';", "SELECT T1.id, T1.type, T1.uuid, T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Legal' AND T1.type = 'Creature';"]}, {"question_id": 407, "answer_sql": ["SELECT DISTINCT subtypes, supertypes FROM cards WHERE uuid IN ( SELECT uuid FROM foreign_data WHERE language = 'German' );", "SELECT DISTINCT CASE WHEN subtypes IS NOT NULL THEN subtypes ELSE supertypes END AS card_types FROM cards WHERE uuid IN ( SELECT uuid FROM foreign_data WHERE language = 'German' );", "SELECT DISTINCT type FROM cards WHERE uuid IN ( SELECT uuid FROM foreign_data WHERE language = 'German' ) AND subtypes IS NOT NULL AND supertypes IS NOT NULL;", "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'German';", "SELECT DISTINCT type FROM cards WHERE uuid IN ( SELECT uuid FROM foreign_data WHERE language = 'German' );"]}, {"question_id": 408, "answer_sql": ["SELECT COUNT(*) FROM cards WHERE power IS NULL OR power = '*';"]}, {"question_id": 409, "answer_sql": ["SELECT COUNT(DISTINCT cards.id) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.format = 'premium' AND cards.text = 'This is a triggered mana ability' AND cards.side IS NULL;"]}, {"question_id": 410, "answer_sql": ["SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Erica Yang' AND T2.format = 'pauper' AND T1.availability = 'paper';"]}, {"question_id": 411, "answer_sql": ["SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.flavorText LIKE '%Das perfekte Gegenmittel zu einer dichten Formation%'", "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.flavorText = 'Das perfekte Gegenmittel zu einer dichten Formation';"]}, {"question_id": 412, "answer_sql": ["SELECT T2.name FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.type = 'Creature' AND T2.layout = 'normal' AND T2.borderColor = 'black' AND T1.language = 'French' AND T2.artist = 'Matthew D. Wilson';"]}, {"question_id": 413, "answer_sql": ["SELECT COUNT(DISTINCT cards.id) FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.rarity = 'rare' AND rulings.date = '2009-01-10';"]}, {"question_id": 414, "answer_sql": ["SELECT language FROM set_translations WHERE setCode = ( SELECT setCode FROM sets WHERE block = 'Ravnica' AND baseSetSize = 180 );", "SELECT translation FROM set_translations WHERE setCode = ( SELECT setCode FROM sets WHERE block = 'Ravnica' AND baseSetSize = 180 );", "SELECT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Ravnica' AND T1.baseSetSize = 180", "SELECT T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Ravnica' AND T1.baseSetSize = 180;"]}, {"question_id": 415, "answer_sql": ["SELECT CAST(SUM(CASE WHEN hasContentWarning = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE format = 'commander' AND status = 'Legal';"]}, {"question_id": 416, "answer_sql": ["SELECT CAST(SUM(CASE WHEN language = 'French' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM foreign_data WHERE name IS NOT NULL AND language IS NOT NULL AND text IS NOT NULL;"]}, {"question_id": 417, "answer_sql": ["SELECT CAST(SUM(CASE WHEN T2.language = 'Japanese' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.language) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.type = 'expansion';", "SELECT CAST(SUM(CASE WHEN language = 'Japanese' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(language) FROM set_translations WHERE language = 'Japanese';", "SELECT CAST(SUM(CASE WHEN T2.translation = 'Japanese' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.type = 'expansion';"]}, {"question_id": 418, "answer_sql": ["SELECT DISTINCT printings FROM cards WHERE artist = 'Daren Bader';", "SELECT T1.printings FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Daren Bader'", "SELECT DISTINCT t1.printings FROM cards AS t1 INNER JOIN foreign_data AS t2 ON t1.uuid = t2.uuid WHERE t1.artist = 'Daren Bader';", "SELECT DISTINCT T1.availability FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Daren Bader';"]}, {"question_id": 419, "answer_sql": ["SELECT COUNT(id) FROM cards WHERE edhrecRank > 12000 AND borderColor = 'borderless';"]}, {"question_id": 420, "answer_sql": ["SELECT COUNT(*) FROM cards WHERE isOversized = 1 AND isReprint = 1 AND isPromo = 1;"]}, {"question_id": 421, "answer_sql": ["SELECT id FROM cards WHERE power IS NULL OR power = '*' AND promoTypes = 'arenaleague' ORDER BY name LIMIT 3;", "SELECT id, power, promoTypes FROM cards WHERE power IS NULL OR power = '*' AND promoTypes = 'arenaleague' ORDER BY id LIMIT 3;", "SELECT DISTINCT name FROM cards WHERE (power IS NULL OR power = '*') AND promoTypes = 'arenaleague' ORDER BY name LIMIT 3;", "SELECT name FROM cards WHERE power IS NULL OR power = '*' AND promoTypes = 'arenaleague' ORDER BY name LIMIT 3;", "SELECT id, power, promoTypes FROM cards WHERE power IS NULL OR power = '*' AND promoTypes = 'arenaleague' ORDER BY name LIMIT 3;"]}, {"question_id": 422, "answer_sql": ["SELECT language FROM foreign_data WHERE multiverseid = 149934;"]}, {"question_id": 423, "answer_sql": ["SELECT cardKingdomFoilId, cardKingdomId FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL ORDER BY cardKingdomFoilId LIMIT 3", "SELECT id FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL ORDER BY cardKingdomFoilId LIMIT 3", "SELECT id, cardKingdomId, cardKingdomFoilId FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL ORDER BY cardKingdomFoilId LIMIT 3;", "SELECT id, cardKingdomFoilId, cardKingdomId FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL ORDER BY cardKingdomFoilId LIMIT 3;"]}, {"question_id": 424, "answer_sql": ["SELECT CAST(SUM(CASE WHEN isTextless = 1 AND layout = 'normal' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM cards;", "SELECT CAST(SUM(CASE WHEN layout = 'normal' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM cards WHERE isTextless = 1;"]}, {"question_id": 425, "answer_sql": ["SELECT id FROM cards WHERE side IS NULL AND subtypes = 'Angel,Wizard' GROUP BY id HAVING COUNT(id) = 1;"]}, {"question_id": 426, "answer_sql": ["SELECT name FROM sets WHERE mtgoCode IS NULL OR mtgoCode = '' ORDER BY name LIMIT 3;"]}, {"question_id": 427, "answer_sql": ["SELECT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.mcmName = 'Archenemy' AND T2.setCode = 'ARC';"]}, {"question_id": 428, "answer_sql": ["SELECT T2.name, T1.translation FROM set_translations AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.id = 5;", "SELECT T1.name, T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.id = 5;"]}, {"question_id": 429, "answer_sql": ["SELECT T2.language, T1.type FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.id = 206;"]}, {"question_id": 430, "answer_sql": ["SELECT T2.id, T2.setCode FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T1.language = 'Italian' AND T3.block = 'Shadowmoor' ORDER BY T2.id LIMIT 2;", "SELECT T2.id, T2.name FROM set_translations AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.language = 'Italian' AND T2.block = 'Shadowmoor' ORDER BY T2.name LIMIT 2;", "SELECT T2.id, T2.name FROM foreign_data AS T1 INNER JOIN sets AS T2 ON T1.uuid = T2.code WHERE T2.block = 'Shadowmoor' AND T1.language = 'Italian' ORDER BY T2.id LIMIT 2;", "SELECT T2.id, T2.name FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T1.language = 'Italian' AND T3.block = 'Shadowmoor' ORDER BY T2.id LIMIT 2;"]}, {"question_id": 431, "answer_sql": ["SELECT T1.id FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.isForeignOnly = 1 AND T1.isFoilOnly = 1 AND T2.language = 'Japanese' AND T1.name = 'Commander\u2019s Hand';"]}, {"question_id": 432, "answer_sql": ["SELECT T2.name FROM foreign_data AS T1 INNER JOIN sets AS T2 ON T1.uuid = T2.code WHERE T1.language = 'Russian' ORDER BY T2.baseSetSize DESC LIMIT 1;", "SELECT T1.name FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Russian' ORDER BY T1.baseSetSize DESC LIMIT 1;"]}, {"question_id": 433, "answer_sql": ["SELECT CAST(SUM(CASE WHEN T2.language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T1.isOnlineOnly = 1;", "SELECT CAST(SUM(CASE WHEN T2.isOnlineOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode INNER JOIN set_translations AS T3 ON T3.setCode = T2.code WHERE T3.language = 'Chinese Simplified';", "SELECT CAST(SUM(CASE WHEN language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM foreign_data WHERE uuid IN ( SELECT uuid FROM cards WHERE isOnlineOnly = 1 );"]}, {"question_id": 434, "answer_sql": ["SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T2.language = 'Japanese' AND (T1.mtgoId IS NULL OR T1.mtgoId = '');", "SELECT COUNT(DISTINCT T1.code) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Japanese' AND (T1.mtgoCode IS NULL OR T1.mtgoCode = '');", "SELECT COUNT(DISTINCT T2.id) FROM foreign_data AS T1 INNER JOIN sets AS T2 ON T1.uuid = T2.code WHERE T1.language = 'Japanese' AND (T2.mtgoCode IS NULL OR T2.mtgoCode = '');"]}, {"question_id": 435, "answer_sql": []}, {"question_id": 436, "answer_sql": ["SELECT id FROM cards WHERE frameEffects = 'extendedart';"]}, {"question_id": 437, "answer_sql": ["SELECT id, borderColor, isFullArt FROM cards WHERE borderColor = 'black' AND isFullArt = 1;", "SELECT id FROM cards WHERE borderColor = 'black' AND isFullArt = 1;", "SELECT DISTINCT T1.id, T1.borderColor FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.borderColor = 'black' AND T1.isFullArt = 1;", "SELECT T1.id, T1.borderColor FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.borderColor = 'black' AND T1.isFullArt = 1;"]}, {"question_id": 438, "answer_sql": ["SELECT language FROM set_translations WHERE id = (SELECT setCode FROM cards WHERE id = 174)", "SELECT language FROM set_translations WHERE id = 174;"]}, {"question_id": 439, "answer_sql": ["SELECT name FROM sets WHERE code = 'ALL';", "SELECT translation FROM set_translations WHERE setCode = 'ALL';"]}, {"question_id": 440, "answer_sql": ["SELECT T2.language FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'A Pedra Fellwar';", "SELECT language FROM foreign_data WHERE name = 'A Pedra Fellwar';"]}, {"question_id": 441, "answer_sql": ["SELECT T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.releaseDate = '2007-07-13'"]}, {"question_id": 442, "answer_sql": ["SELECT T1.baseSetSize, T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block IN ('Masques', 'Mirage')"]}, {"question_id": 443, "answer_sql": []}, {"question_id": 444, "answer_sql": ["SELECT T2.name, T2.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.watermark = 'boros';", "SELECT T1.name, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.watermark = 'boros';", "SELECT T2.name, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.watermark = 'boros';"]}, {"question_id": 445, "answer_sql": ["SELECT T1.language, T1.flavorText, T2.type FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.watermark = 'colorpie';", "SELECT T1.language, T1.flavorText, T1.type FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid WHERE T2.watermark = 'colorpie';"]}, {"question_id": 446, "answer_sql": ["SELECT CAST(SUM(CASE WHEN convertedManaCost = 10 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM cards WHERE name = 'Abyssal Horror';", "SELECT CAST(SUM(CASE WHEN T1.convertedManaCost = 10 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Abyssal Horror';"]}, {"question_id": 447, "answer_sql": ["SELECT DISTINCT T1.code FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.type = 'commander';"]}, {"question_id": 448, "answer_sql": ["SELECT T2.name, T2.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.watermark = 'abzan';", "SELECT T1.name, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.watermark = 'abzan' AND T2.name IS NOT NULL;"]}, {"question_id": 449, "answer_sql": ["SELECT T1.language, T1.type FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.watermark = 'azorius';", "SELECT T2.language, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.watermark = 'azorius';"]}, {"question_id": 450, "answer_sql": ["SELECT COUNT(*) FROM cards WHERE artist = 'Aaron Miller' AND cardKingdomId IS NOT NULL;"]}, {"question_id": 451, "answer_sql": ["SELECT COUNT(id) FROM cards WHERE availability = 'available in paper' AND hand = '+';"]}, {"question_id": 452, "answer_sql": []}, {"question_id": 453, "answer_sql": ["SELECT manaCost FROM cards WHERE name = 'Ancestor''s Chosen';"]}, {"question_id": 454, "answer_sql": ["SELECT COUNT(*) FROM cards WHERE borderColor = 'white' AND (power IS NULL OR power = '*');"]}, {"question_id": 455, "answer_sql": ["SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.isPromo = 1 AND T1.side IS NOT NULL;", "SELECT DISTINCT name FROM cards WHERE isPromo = 1 AND side IS NOT NULL;"]}, {"question_id": 456, "answer_sql": ["SELECT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer';"]}, {"question_id": 457, "answer_sql": ["SELECT purchaseUrls FROM cards WHERE promoTypes = 'bundle';"]}, {"question_id": 458, "answer_sql": ["SELECT COUNT(DISTINCT artist) FROM cards WHERE availability LIKE '%arena,mtgo%' AND borderColor = 'black' AND (printings = 'arena' OR printings = 'mtgo');", "SELECT COUNT(DISTINCT artist) FROM cards WHERE availability LIKE '%arena,mtgo%' AND borderColor = 'black';"]}, {"question_id": 459, "answer_sql": ["SELECT name, convertedManaCost FROM cards WHERE name = 'Serra Angel' OR name = 'Shrine Keeper' ORDER BY convertedManaCost DESC LIMIT 1;", "SELECT CASE WHEN (SELECT convertedManaCost FROM cards WHERE name = 'Serra Angel' OR name = 'Shrine Keeper') = (SELECT convertedManaCost FROM cards WHERE name = 'Serra Angel' AND manaCost IS NOT NULL) THEN 'Serra Angel' ELSE 'Shrine Keeper' END AS RESULT;", "SELECT CASE WHEN (SELECT convertedManaCost FROM cards WHERE name = 'Serra Angel' OR name = 'Shrine Keeper') = (SELECT convertedManaCost FROM cards WHERE name = 'Serra Angel' OR name = 'Shrine Keeper') THEN 'The card costs more converted mana.' ELSE 'The card costs less converted mana.' END AS comparison;"]}, {"question_id": 460, "answer_sql": ["SELECT cards.artist FROM cards WHERE cards.flavorName = 'Battra, Dark Destroyer'", "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.flavorText LIKE '%Battra, Dark Destroyer%'"]}, {"question_id": 461, "answer_sql": ["SELECT name FROM cards WHERE frameVersion = 2003 AND convertedManaCost = ( SELECT MAX(convertedManaCost) FROM cards ) LIMIT 3;", "SELECT name FROM cards WHERE frameVersion = 2003 ORDER BY convertedManaCost DESC LIMIT 3;"]}, {"question_id": 462, "answer_sql": ["SELECT T2.name FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T1.language = 'Italian' AND T2.name = 'Ancestor''s Chosen';", "SELECT T1.name FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Italian' AND T2.translation = 'Ancestor''s Chosen';", "SELECT T2.name FROM set_translations AS T1 INNER JOIN cards AS T2 ON T2.setCode = T1.setCode WHERE T1.language = 'Italian' AND T2.name = 'Ancestor''s Chosen';", "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T1.name = 'Ancestor''s Chosen' AND T2.language = 'Italian';"]}, {"question_id": 463, "answer_sql": ["SELECT COUNT(translation) FROM set_translations WHERE setCode IN ( SELECT setCode FROM cards WHERE name = 'Angel of Mercy' );", "SELECT COUNT(DISTINCT translation) FROM set_translations WHERE setCode IN ( SELECT setCode FROM cards WHERE name = 'Angel of Mercy' );"]}, {"question_id": 464, "answer_sql": ["SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Hauptset Zehnte Edition';"]}, {"question_id": 465, "answer_sql": ["SELECT CASE WHEN ( SELECT 1 FROM set_translations WHERE setCode = cards.setCode AND language = 'Korean' ) = 1 THEN 'Yes' ELSE 'No' END FROM cards WHERE name = 'Ancestor''s Chosen';", "SELECT CASE WHEN ( SELECT 1 FROM set_translations WHERE setCode = ( SELECT setCode FROM cards WHERE name = 'Ancestor''s Chosen' ) AND translation = 'Korean' ) = 1 THEN 'Yes' ELSE 'No' END AS yn;", "SELECT CASE WHEN ( SELECT 1 FROM set_translations WHERE setCode = cards.setCode AND language = 'Korean' ) = 1 THEN 'YES' ELSE 'NO' END FROM cards WHERE name = 'Ancestor''s Chosen';", "SELECT CASE WHEN translation = 'Korean' THEN 'Yes' ELSE 'No' END FROM set_translations WHERE setCode IN ( SELECT setCode FROM cards WHERE name = 'Ancestor''s Chosen' )", "SELECT CASE WHEN translation = 'Korean' THEN 'Yes' ELSE 'No' END FROM set_translations WHERE setCode IN ( SELECT setCode FROM cards WHERE name = 'Ancestor''s Chosen' ) AND language = 'Korean';"]}, {"question_id": 466, "answer_sql": ["SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode INNER JOIN set_translations AS T3 ON T3.setCode = T2.code WHERE T2.name = 'Hauptset Zehnte Edition' AND T1.artist = 'Adam Rex';"]}, {"question_id": 467, "answer_sql": ["SELECT T1.baseSetSize FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.translation = 'Hauptset Zehnte Edition';", "SELECT baseSetSize FROM sets WHERE name = 'Hauptset Zehnte Edition';"]}, {"question_id": 468, "answer_sql": ["SELECT translation FROM set_translations WHERE setCode IN ( SELECT code FROM sets WHERE name = 'Eighth Edition' ) AND language = 'Simplified Chinese';"]}, {"question_id": 469, "answer_sql": ["SELECT CASE WHEN mtgoCode IS NOT NULL THEN 'Yes' ELSE 'No' END FROM sets WHERE name = 'Angel of Mercy';"]}, {"question_id": 470, "answer_sql": ["SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.name = 'Ancestor''s Chosen';"]}, {"question_id": 471, "answer_sql": ["SELECT T1.type FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.translation = 'Hauptset Zehnte Edition';"]}, {"question_id": 472, "answer_sql": ["SELECT COUNT(*) FROM set_translations WHERE setCode IN ( SELECT setCode FROM sets WHERE block = 'Ice Age' ) AND language = 'Italian';", "SELECT COUNT(DISTINCT T1.code) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Ice Age' AND T2.translation = 'Italian';", "SELECT COUNT(*) FROM sets WHERE block = 'Ice Age' AND code IN ( SELECT setCode FROM set_translations WHERE language = 'Italian' );"]}, {"question_id": 473, "answer_sql": ["SELECT T2.isForeignOnly FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.name = 'Adarkar Valkyrie';", "SELECT T2.isForeignOnly FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode INNER JOIN set_translations AS T3 ON T3.setCode = T2.code INNER JOIN foreign_data AS T4 ON T4.uuid = T1.uuid WHERE T1.name = 'Adarkar Valkyrie' AND T4.language = 'English';"]}, {"question_id": 474, "answer_sql": ["SELECT COUNT(DISTINCT T2.id) FROM set_translations AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.translation IS NOT NULL AND T2.baseSetSize < 10 AND T1.language = 'Italian';"]}, {"question_id": 475, "answer_sql": ["SELECT COUNT(id) FROM cards WHERE borderColor = 'black' AND setCode = ( SELECT code FROM sets WHERE name = 'Coldsnap' );", "SELECT COUNT(id) FROM cards WHERE name = 'Coldsnap' AND borderColor = 'black';"]}, {"question_id": 476, "answer_sql": ["SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap' AND T1.convertedManaCost = ( SELECT MAX(convertedManaCost) FROM cards );", "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap' AND T1.convertedManaCost = ( SELECT MAX(convertedManaCost) FROM cards AS T3 INNER JOIN sets AS T4 ON T4.code = T3.setCode WHERE T4.name = 'Coldsnap' );", "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Coldsnap' ORDER BY T1.convertedManaCost DESC LIMIT 1;"]}, {"question_id": 477, "answer_sql": ["SELECT DISTINCT T1.artist FROM cards AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T2.setCode = 'coldsnap' AND T1.artist IN ('Jeremy Jarvis', 'Aaron Miller', 'Chippy');", "SELECT DISTINCT T1.artist FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap' AND T1.artist IN ('Jeremy Jarvis', 'Aaron Miller', 'Chippy');"]}, {"question_id": 478, "answer_sql": ["SELECT id FROM cards WHERE name = '4' AND setCode = 'coldsnap';", "SELECT T1.id FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap' AND T1.number = 4;", "SELECT T1.number FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap' AND T1.number = 4;"]}, {"question_id": 479, "answer_sql": ["SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap' AND T1.convertedManaCost > 5 AND T1.power = '*';", "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap' AND T1.convertedManaCost > 5 AND (T1.power IS NULL OR T1.power = '*');"]}, {"question_id": 480, "answer_sql": ["SELECT T1.flavorText FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.name = 'Ancestor''s Chosen' AND T1.language = 'Italian';", "SELECT flavorText FROM foreign_data WHERE name = 'Ancestor''s Chosen' AND language = 'Italian';"]}, {"question_id": 481, "answer_sql": ["SELECT T2.language FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.flavorName = 'Ancestor''s Chosen';", "SELECT T2.language FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.flavorText IS NOT NULL AND T1.name = 'Ancestor''s Chosen';", "SELECT T1.language FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.name = 'Ancestor''s Chosen' AND T1.flavorText IS NOT NULL;"]}, {"question_id": 482, "answer_sql": ["SELECT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Ancestor''s Chosen' AND T2.language = 'German';", "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Ancestor''s Chosen' AND T2.language = 'German';", "SELECT T1.type FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.name = 'Ancestor''s Chosen' AND T1.language = 'German';", "SELECT language FROM foreign_data WHERE name = 'Ancestor''s Chosen' AND language = 'German';"]}, {"question_id": 483, "answer_sql": ["SELECT DISTINCT T1.text FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Italian';", "SELECT T3.text FROM cards AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode INNER JOIN foreign_data AS T3 ON T1.uuid = T3.uuid WHERE T2.setCode = 'coldsnap' AND T3.language = 'Italian';", "SELECT T1.text FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Italian';"]}, {"question_id": 484, "answer_sql": ["SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode INNER JOIN set_translations AS T3 ON T3.setCode = T2.code WHERE T2.name = 'Coldsnap' AND T1.convertedManaCost = ( SELECT MAX(convertedManaCost) FROM cards AS T4 INNER JOIN sets AS T5 ON T5.code = T4.setCode INNER JOIN set_translations AS T6 ON T6.setCode = T5.code WHERE T5.name = 'Coldsnap' AND T6.language = 'Italian' ) AND T3.translation = 'Italian'", "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap' AND T1.convertedManaCost = ( SELECT MAX(convertedManaCost) FROM cards AS T3 INNER JOIN sets AS T4 ON T4.code = T3.setCode WHERE T4.name = 'Coldsnap' );", "SELECT T1.name FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.convertedManaCost = ( SELECT MAX(convertedManaCost) FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' ) AND T2.language = 'Italian';"]}, {"question_id": 485, "answer_sql": ["SELECT T2.date, T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Reminisce';", "SELECT T1.date FROM rulings AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.name = 'Reminisce';"]}, {"question_id": 486, "answer_sql": ["SELECT CAST(SUM(CASE WHEN T1.convertedManaCost = 7 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap';", "SELECT CAST(SUM(CASE WHEN convertedManaCost = 7 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM cards WHERE setCode = 'Coldsnap';"]}, {"question_id": 487, "answer_sql": ["SELECT CAST(SUM(CASE WHEN T1.cardKingdomId IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap';", "SELECT CAST(SUM(CASE WHEN cardKingdomFoilId = cardKingdomId THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM cards WHERE setCode IN ( SELECT code FROM sets WHERE name = 'Coldsnap' );"]}, {"question_id": 488, "answer_sql": ["SELECT code FROM sets WHERE releaseDate = '2017-07-14';", "SELECT T1.code FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.releaseDate = '2017-07-14'"]}, {"question_id": 489, "answer_sql": ["SELECT keyruneCode FROM sets WHERE code = 'PKHC';"]}, {"question_id": 490, "answer_sql": ["SELECT mcmId FROM sets WHERE code = 'SS2';"]}, {"question_id": 491, "answer_sql": ["SELECT mcmName FROM sets WHERE releaseDate = '2017-06-09';"]}, {"question_id": 492, "answer_sql": ["SELECT T1.type FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.translation = 'From the Vault: Lore';", "SELECT type FROM sets WHERE name LIKE '%From the Vault: Lore%';", "SELECT T1.type FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.name LIKE '%From the Vault: Lore%'"]}, {"question_id": 493, "answer_sql": ["SELECT T1.parentCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.name = 'Commander 2014 Oversized';", "SELECT parentCode FROM sets WHERE name = 'Commander 2014 Oversized';"]}, {"question_id": 494, "answer_sql": ["SELECT T1.text, T1.hasContentWarning FROM cards AS T1 INNER JOIN (SELECT * FROM cards WHERE artist = 'Jim Pavelec') AS T2 ON T1.uuid = T2.uuid;", "SELECT T1.text, T1.artist, T1.hasContentWarning FROM cards AS T1 INNER JOIN (SELECT * FROM cards WHERE artist = 'Jim Pavelec') AS T2 ON T1.id = T2.id;", "SELECT DISTINCT T1.text, T1.hasContentWarning FROM cards AS T1 INNER JOIN (SELECT * FROM cards WHERE artist = 'Jim Pavelec') AS T2 ON T1.uuid = T2.uuid;", "SELECT T1.text, T1.artist FROM cards AS T1 INNER JOIN (SELECT * FROM cards WHERE hasContentWarning = 1) AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Jim Pavelec';", "SELECT T2.text, T1.hasContentWarning FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Jim Pavelec'"]}, {"question_id": 495, "answer_sql": ["SELECT T1.releaseDate FROM sets AS T1 INNER JOIN cards AS T2 ON T1.code = T2.setCode WHERE T2.name = 'Evacuation'"]}, {"question_id": 496, "answer_sql": ["SELECT T2.baseSetSize FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Rinascita di Alara';", "SELECT T2.baseSetSize FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code INNER JOIN set_translations AS T3 ON T2.code = T3.setCode WHERE T3.translation = 'Rinascita di Alara';", "SELECT COUNT(id) FROM cards WHERE setCode = ( SELECT code FROM sets WHERE name = 'Rinascita di Alara' );", "SELECT T1.baseSetSize FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.translation = 'Rinascita di Alara';"]}, {"question_id": 497, "answer_sql": ["SELECT T1.type FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.translation = 'Huiti\u00e8me \u00e9dition';"]}, {"question_id": 498, "answer_sql": ["SELECT T1.translation FROM set_translations AS T1 INNER JOIN cards AS T2 ON T1.setCode = T2.setCode WHERE T2.name = 'Tendo Ice Bridge';", "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Tendo Ice Bridge' AND T2.language = 'French';", "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.flavorName = 'Tendo Ice Bridge' AND T2.language = 'French';"]}, {"question_id": 499, "answer_sql": ["SELECT COUNT(id) FROM set_translations WHERE setCode = ( SELECT code FROM sets WHERE name = 'Salvat 2011' ) AND translation IS NOT NULL;"]}, {"question_id": 500, "answer_sql": ["SELECT T2.name FROM sets AS T1 INNER JOIN cards AS T2 ON T1.code = T2.setCode INNER JOIN set_translations AS T3 ON T1.code = T3.setCode WHERE T2.name = 'Fellwar Stone' AND T3.language = 'Japanese';", "SELECT T3.name FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T1.name = 'Fellwar Stone' AND T2.language = 'Japanese';", "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T1.name = 'Fellwar Stone' AND T2.language = 'Japanese';"]}, {"question_id": 501, "answer_sql": ["SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Journey into Nyx Hero''s Path' AND T1.convertedManaCost = ( SELECT MAX(convertedManaCost) FROM cards AS T3 WHERE T3.setCode = T2.code );"]}, {"question_id": 502, "answer_sql": ["SELECT T1.releaseDate FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.translation = 'Ola de fr\u00edo';"]}, {"question_id": 503, "answer_sql": ["SELECT T1.type FROM sets AS T1 INNER JOIN cards AS T2 ON T1.code = T2.setCode WHERE T2.name = 'Samite Pilgrim'"]}, {"question_id": 504, "answer_sql": ["SELECT COUNT(id) FROM cards WHERE setCode = ( SELECT code FROM sets WHERE name = 'World Championship Decks 2004' ) AND convertedManaCost = 3;"]}, {"question_id": 505, "answer_sql": ["SELECT translation FROM set_translations WHERE setCode = ( SELECT code FROM sets WHERE name = 'Mirrodin' ) AND language = 'Chinese Simplified';"]}, {"question_id": 506, "answer_sql": ["SELECT CAST(SUM(CASE WHEN T2.isNonFoilOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code INNER JOIN set_translations AS T3 ON T2.code = T3.setCode WHERE T3.language = 'Japanese';", "SELECT CAST(SUM(CASE WHEN isNonFoilOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM sets WHERE code IN ( SELECT setCode FROM set_translations WHERE language = 'Japanese' );"]}, {"question_id": 507, "answer_sql": ["SELECT CAST(SUM(CASE WHEN isOnlineOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM cards WHERE uuid IN ( SELECT uuid FROM foreign_data WHERE language = 'Portuguese (Brazil)' );", "SELECT CAST(SUM(CASE WHEN isOnlineOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM cards INNER JOIN set_translations ON cards.setCode = set_translations.setCode WHERE set_translations.translation = 'Brazil Portuguese';"]}, {"question_id": 508, "answer_sql": ["SELECT DISTINCT availability FROM cards WHERE artist = 'Aleksi Briclot' AND isTextless = 1;"]}, {"question_id": 509, "answer_sql": ["SELECT id FROM sets ORDER BY baseSetSize DESC LIMIT 1"]}, {"question_id": 510, "answer_sql": ["SELECT artist FROM cards WHERE side IS NULL ORDER BY convertedManaCost DESC LIMIT 1;", "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.side IS NULL ORDER BY T1.convertedManaCost DESC LIMIT 1"]}, {"question_id": 511, "answer_sql": ["SELECT MAX(frameEffects) FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL;", "SELECT frameEffects FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL GROUP BY frameEffects ORDER BY COUNT(frameEffects) DESC LIMIT 1;"]}, {"question_id": 512, "answer_sql": ["SELECT COUNT(id) FROM cards WHERE (power IS NULL OR power = '*') AND hasFoil = 0 AND duelDeck = 'a';", "SELECT COUNT(*) FROM cards WHERE power IS NULL OR power = '*' AND hasFoil = 0 AND duelDeck = 'a';"]}, {"question_id": 513, "answer_sql": ["SELECT id FROM sets WHERE type = 'commander' AND id = ( SELECT id FROM cards WHERE type = 'commander' GROUP BY id ORDER BY COUNT(id) DESC LIMIT 1 );"]}, {"question_id": 514, "answer_sql": ["SELECT id, manaCost FROM cards WHERE manaCost = ( SELECT MAX(manaCost) FROM cards ) ORDER BY manaCost DESC LIMIT 10;", "SELECT id, manaCost FROM cards WHERE manaCost > 0 ORDER BY manaCost DESC LIMIT 10;"]}, {"question_id": 515, "answer_sql": ["SELECT T1.format, T1.status, T2.originalReleaseDate FROM legalities AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.rarity = 'mythic' ORDER BY T2.originalReleaseDate ASC LIMIT 1;", "SELECT T1.originalReleaseDate, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'mythic' ORDER BY T1.originalReleaseDate ASC LIMIT 1;"]}, {"question_id": 516, "answer_sql": ["SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Volkan Baga' AND T2.language = 'French';"]}, {"question_id": 517, "answer_sql": ["SELECT COUNT(cards.id) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.rarity = 'rare' AND cards.types = 'Enchantment' AND legalities.status = 'Legal';", "SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'rare' AND T1.types = 'Enchantment' AND T1.name = 'Abundance' AND T2.status = 'Legal';", "SELECT COUNT(cards.id) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.rarity = 'rare' AND cards.type = 'Enchantment' AND legalities.status = 'Legal' AND cards.name = 'Abundance';", "SELECT COUNT(DISTINCT cards.id) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.rarity = 'rare' AND cards.types = 'Enchantment' AND legalities.status = 'Legal';"]}, {"question_id": 518, "answer_sql": ["SELECT T1.format, T2.name FROM legalities AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T1.status = 'Banned' GROUP BY T1.format ORDER BY COUNT(T1.status) DESC LIMIT 1;"]}, {"question_id": 519, "answer_sql": ["SELECT language FROM set_translations WHERE setCode IN ( SELECT setCode FROM sets WHERE name = 'Battlebond' );", "SELECT language FROM set_translations WHERE setCode IN ( SELECT code FROM sets WHERE name = 'Battlebond' ) AND translation IS NOT NULL;"]}, {"question_id": 520, "answer_sql": ["SELECT T1.format, T2.artist FROM legalities AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid WHERE T1.id = ( SELECT id FROM legalities ORDER BY id LIMIT 1 );", "SELECT T1.format, T2.artist FROM legalities AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.artist = ( SELECT artist FROM cards GROUP BY artist ORDER BY COUNT(artist) ASC LIMIT 1 );", "SELECT T1.format, T2.artist FROM legalities AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid WHERE T2.artist = ( SELECT MIN(artist) FROM cards );"]}, {"question_id": 521, "answer_sql": ["SELECT T1.format FROM legalities AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.frameVersion = 1997 AND T2.artist = 'D. Alexander Gregory' AND T1.format = 'legacy' AND T2.hasContentWarning = 1;", "SELECT T1.format, T1.status FROM legalities AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid WHERE T2.frameVersion = 1997 AND T2.artist = 'D. Alexander Gregory' AND T1.format = 'legacy' AND T2.hasContentWarning = 1 AND T2.name = 'Wizards of the Coast';", "SELECT T1.status, T1.format FROM legalities AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.frameVersion = 1997 AND T2.artist = 'D. Alexander Gregory' AND T1.format = 'legacy' AND T2.hasContentWarning = 1;"]}, {"question_id": 522, "answer_sql": ["SELECT T1.name, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.edhrecRank = 1;", "SELECT T1.name, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.edhrecRank = 1 AND T2.status = 'banned';"]}, {"question_id": 523, "answer_sql": ["SELECT AVG(id) AS avg_sets, language FROM set_translations WHERE setCode IN ( SELECT code FROM sets WHERE releaseDate BETWEEN '2012-01-01' AND '2015-12-31' ) GROUP BY language ORDER BY avg_sets DESC LIMIT 1;", "SELECT AVG(id) AS AverageSets, MAX(language) AS CommonLanguage FROM set_translations WHERE setCode IN ( SELECT setCode FROM sets WHERE releaseDate BETWEEN '2012-01-01' AND '2015-12-31' ) GROUP BY id;", "SELECT AVG(T1.id) AS AverageSets, T2.language AS CommonLanguage FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.releaseDate BETWEEN '2012-01-01' AND '2015-12-31' GROUP BY T2.language;", "SELECT AVG(T1.id) AS AverageSets, T2.language AS CommonLanguage FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.releaseDate BETWEEN '2012-01-01' AND '2015-12-31' GROUP BY T2.language ORDER BY AverageSets DESC LIMIT 1;"]}, {"question_id": 524, "answer_sql": ["SELECT DISTINCT T1.artist FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.availability = 'arena' AND T1.borderColor = 'black';"]}, {"question_id": 525, "answer_sql": ["SELECT T1.uuid FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'oldschool' AND T2.status IN ('banned', 'restricted');"]}, {"question_id": 526, "answer_sql": ["SELECT COUNT(id) FROM cards WHERE artist = 'Matthew D. Wilson' AND availability = 'paper';"]}, {"question_id": 527, "answer_sql": ["SELECT text FROM rulings WHERE date = ( SELECT MAX(date) FROM rulings ) AND id = ( SELECT id FROM cards WHERE artist = 'Kev Walker' );", "SELECT text FROM rulings WHERE date = ( SELECT MAX(date) FROM rulings ) AND id = ( SELECT MAX(id) FROM rulings WHERE date = ( SELECT MAX(date) FROM rulings ) );"]}, {"question_id": 528, "answer_sql": ["SELECT T1.name, T3.format FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code INNER JOIN legalities AS T3 ON T1.uuid = T3.uuid WHERE T2.name = 'Hour of Devastation' AND T3.status = 'Legal';"]}, {"question_id": 529, "answer_sql": ["SELECT DISTINCT T1.name FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.translation NOT LIKE '%Japanese%' AND T2.language = 'Korean';", "SELECT T1.name FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.translation NOT LIKE '%Japanese%' AND T2.translation = 'Korean'", "SELECT T1.name FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language NOT LIKE '%Japanese%' AND T2.language = 'Korean'"]}, {"question_id": 530, "answer_sql": ["SELECT DISTINCT T1.frameVersion, T2.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid INNER JOIN legalities AS T3 ON T1.uuid = T3.uuid WHERE T1.artist = 'Allen Williams' AND T3.status = 'banned';"]}, {"question_id": 531, "answer_sql": ["SELECT DisplayName FROM users WHERE Reputation = ( SELECT MAX(Reputation) FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') );", "SELECT CASE WHEN (SELECT Reputation FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon')) = (SELECT MAX(Reputation) FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon')) THEN 'Harlan' ELSE 'Jarrod Dixon' END AS Winner;"]}, {"question_id": 532, "answer_sql": []}, {"question_id": 533, "answer_sql": ["SELECT COUNT(Id) FROM users WHERE LastAccessDate > '2014-09-01 00:00:00';"]}, {"question_id": 534, "answer_sql": ["SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId GROUP BY T2.Name ORDER BY COUNT(T2.Name) DESC LIMIT 1", "SELECT DisplayName FROM users WHERE Views = ( SELECT MAX(Views) FROM users );"]}, {"question_id": 535, "answer_sql": ["SELECT COUNT(*) FROM users WHERE Upvotes > 100 AND Downvotes > 1;"]}, {"question_id": 536, "answer_sql": ["SELECT COUNT(*) FROM users WHERE Views > 10 AND STRFTIME('%Y', CreationDate) > '2013';"]}, {"question_id": 537, "answer_sql": ["SELECT COUNT(Id) FROM posts WHERE OwnerDisplayName = 'csgillespie';", "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'csgillespie'"]}, {"question_id": 538, "answer_sql": ["SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'"]}, {"question_id": 539, "answer_sql": ["SELECT T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.Title = 'Eliciting priors from experts';"]}, {"question_id": 540, "answer_sql": ["SELECT Title FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie') ORDER BY ViewCount DESC LIMIT 1;"]}, {"question_id": 541, "answer_sql": ["SELECT T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.FavoriteCount = ( SELECT MAX(FavoriteCount) FROM posts )"]}, {"question_id": 542, "answer_sql": ["SELECT SUM(T2.CommentCount) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'csgillespie'"]}, {"question_id": 543, "answer_sql": ["SELECT T1.AnswerCount FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie' ORDER BY T1.AnswerCount DESC LIMIT 1;"]}, {"question_id": 544, "answer_sql": ["SELECT T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.Title = 'Examples for teaching: Correlation does not mean causation' ORDER BY T2.LastEditDate DESC LIMIT 1;", "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Title = 'Examples for teaching: Correlation does not mean causation';", "SELECT T2.DisplayName FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Text = 'Examples for teaching: Correlation does not mean causation' AND T1.PostId = ( SELECT Id FROM posts WHERE Title = 'Examples for teaching: Correlation does not mean causation' );"]}, {"question_id": 545, "answer_sql": ["SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie' AND T1.ParentId IS NULL;"]}, {"question_id": 546, "answer_sql": ["SELECT T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.ClosedDate IS NOT NULL;"]}, {"question_id": 547, "answer_sql": ["SELECT COUNT(*) FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.Age > 65 AND posts.Score >= 20;"]}, {"question_id": 548, "answer_sql": ["SELECT T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts';"]}, {"question_id": 549, "answer_sql": ["SELECT T1.Body FROM posts AS T1 INNER JOIN tags AS T2 ON T1.Id = T2.ExcerptPostId WHERE T2.TagName = 'bayesian';"]}, {"question_id": 550, "answer_sql": ["SELECT T2.Body FROM tags AS T1 INNER JOIN posts AS T2 ON T1.ExcerptPostId = T2.Id ORDER BY T1.Count DESC LIMIT 1;"]}, {"question_id": 551, "answer_sql": ["SELECT COUNT(*) FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie');"]}, {"question_id": 552, "answer_sql": ["SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'csgillespie';"]}, {"question_id": 553, "answer_sql": ["SELECT COUNT(Id) FROM badges WHERE STRFTIME('%Y', Date) = '2011' AND UserId = ( SELECT Id FROM users WHERE DisplayName = 'csgillespie' );"]}, {"question_id": 554, "answer_sql": ["SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId GROUP BY T2.UserId ORDER BY COUNT(T2.Id) DESC LIMIT 1;"]}, {"question_id": 555, "answer_sql": ["SELECT AVG(Score) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie');"]}, {"question_id": 556, "answer_sql": ["SELECT CAST(COUNT(T2.Id) AS REAL) / COUNT(DISTINCT T1.DisplayName) FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Views > 200;"]}, {"question_id": 557, "answer_sql": ["SELECT CAST(SUM(CASE WHEN T2.Age > 65 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Score > 20;"]}, {"question_id": 558, "answer_sql": ["SELECT COUNT(Id) FROM votes WHERE UserId = 58 AND CreationDate = '2010-07-19'"]}, {"question_id": 559, "answer_sql": ["SELECT CreationDate FROM votes GROUP BY CreationDate ORDER BY COUNT(Id) DESC LIMIT 1;"]}, {"question_id": 560, "answer_sql": ["SELECT COUNT(Id) FROM badges WHERE Name = 'Revival';"]}, {"question_id": 561, "answer_sql": ["SELECT T1.Title FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId ORDER BY T2.Score DESC LIMIT 1;"]}, {"question_id": 562, "answer_sql": ["SELECT COUNT(T2.Id) FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.ViewCount = 1910"]}, {"question_id": 563, "answer_sql": ["SELECT T1.FavoriteCount FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T2.UserId = 3025 AND T2.CreationDate = '2014-04-23 20:29:39.0'"]}, {"question_id": 564, "answer_sql": []}, {"question_id": 565, "answer_sql": ["SELECT CASE WHEN T1.ClosedDate IS NULL THEN 'Not well-finished' ELSE 'Well-finished' END AS result FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T2.UserId = 23853 AND T2.CreationDate = '2013-07-12 09:08:18.0';", "SELECT IIF(T2.ClosedDate IS NULL, 'Not well-finished', 'well-finished') AS result FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.UserId = 23853 AND T1.CreationDate = '2013-07-12 09:08:18.0';"]}, {"question_id": 566, "answer_sql": ["SELECT T1.Reputation FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.Id = 65041;", "SELECT Reputation FROM users WHERE Id = 65041;"]}, {"question_id": 567, "answer_sql": ["SELECT COUNT(T2.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Tiago Pasqualini';"]}, {"question_id": 568, "answer_sql": ["SELECT T2.DisplayName FROM votes AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Id = 6347", "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Id = 381800;"]}, {"question_id": 569, "answer_sql": ["SELECT COUNT(DISTINCT posts.Id) FROM posts WHERE posts.Title LIKE '%data visualization%';", "SELECT COUNT(votes.Id) FROM votes JOIN posts ON votes.PostId = posts.Id WHERE posts.Title LIKE '%data visualization%';", "SELECT COUNT(DISTINCT 'votes.UserId') FROM votes JOIN posts ON votes.PostId = posts.Id WHERE posts.Title LIKE '%data visualization%';"]}, {"question_id": 570, "answer_sql": ["SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'DatEpicCoderGuyWhoPrograms';"]}, {"question_id": 571, "answer_sql": ["SELECT CAST(COUNT(p.Id) AS REAL) / COUNT(v.Id) FROM posts p INNER JOIN votes v ON p.Id = v.PostId WHERE p.OwnerUserId = 24;", "SELECT CAST(COUNT(T1.Id) AS REAL) / COUNT(DISTINCT T3.Id) FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId INNER JOIN users AS T3 ON T2.UserId = T3.Id WHERE T3.Id = 24;"]}, {"question_id": 572, "answer_sql": ["SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer';"]}, {"question_id": 573, "answer_sql": ["SELECT Text FROM comments WHERE Score = 17;"]}, {"question_id": 574, "answer_sql": ["SELECT DisplayName FROM users WHERE WebsiteUrl = 'http://stackoverflow.com';"]}, {"question_id": 575, "answer_sql": ["SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'SilentGhost'"]}, {"question_id": 576, "answer_sql": ["SELECT T1.DisplayName FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T2.Text = 'thank you user93!'", "SELECT T1.DisplayName FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T2.Text = 'thank you user93'"]}, {"question_id": 577, "answer_sql": ["SELECT Text FROM comments WHERE UserDisplayName = 'A Lion';", "SELECT T2.Text FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'A Lion';"]}, {"question_id": 578, "answer_sql": ["SELECT T2.DisplayName, T2.Reputation FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Understanding what Dassault iSight is doing?'"]}, {"question_id": 579, "answer_sql": ["SELECT T2.Text FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.Title = 'How does gentle boosting differ from AdaBoost?'"]}, {"question_id": 580, "answer_sql": ["SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Necromancer' LIMIT 10;"]}, {"question_id": 581, "answer_sql": ["SELECT T1.LastEditorDisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Title = 'Open source tools for visualizing multi-dimensional data?'"]}, {"question_id": 582, "answer_sql": ["SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T2.DisplayName = 'Vebjorn Ljosa';", "SELECT T1.Title FROM posts AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.PostId INNER JOIN users AS T3 ON T2.UserId = T3.Id WHERE T3.DisplayName = 'Vebjorn Ljosa' AND T2.CreationDate = ( SELECT MAX(CreationDate) FROM postHistory );", "SELECT T1.Title FROM posts AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.PostId INNER JOIN users AS T3 ON T3.Id = T2.UserId WHERE T3.DisplayName = 'Vebjorn Ljosa' AND T1.LastEditorUserId IS NOT NULL;"]}, {"question_id": 583, "answer_sql": ["SELECT SUM(posts.Score), users.WebsiteUrl FROM posts INNER JOIN users ON posts.LastEditorUserId = users.Id WHERE users.DisplayName = 'Yevgeny' GROUP BY users.WebsiteUrl;", "SELECT T1.Score, T2.WebsiteUrl FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T2.DisplayName = 'Yevgeny';"]}, {"question_id": 584, "answer_sql": ["SELECT T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'Why square the difference instead of taking the absolute value in standard deviation?'"]}, {"question_id": 585, "answer_sql": ["SELECT SUM(T2.BountyAmount) FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId WHERE T1.Title LIKE '%data%'"]}, {"question_id": 586, "answer_sql": ["SELECT T1.DisplayName FROM users AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T3.Title LIKE '%variance%' AND T2.BountyAmount = 50;", "SELECT T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN votes AS T3 ON T3.PostId = T2.Id WHERE T2.Title = 'Which user added a bounty amount of 50 to the post title mentioning variance?' AND T3.BountyAmount = 50"]}, {"question_id": 587, "answer_sql": ["SELECT AVG(posts.ViewCount) , posts.Title , comments.Text FROM posts JOIN comments ON posts.Id = comments.PostId JOIN tags ON posts.Id = tags.ExcerptPostId WHERE tags.TagName = 'humor'", "SELECT AVG(posts.ViewCount) , posts.Title , comments.Text , comments.Score FROM posts INNER JOIN comments ON posts.Id = comments.PostId INNER JOIN tags ON posts.Id = tags.ExcerptPostId WHERE tags.TagName = 'humor'", "SELECT AVG(posts.ViewCount), posts.Title, comments.Text, comments.Score FROM posts INNER JOIN comments ON posts.Id = comments.PostId INNER JOIN tags ON posts.Id = tags.ExcerptPostId WHERE tags.TagName = 'humor' GROUP BY posts.Title, comments.Text, comments.Score;"]}, {"question_id": 588, "answer_sql": ["SELECT COUNT(*) FROM comments WHERE UserId = 13;"]}, {"question_id": 589, "answer_sql": ["SELECT Id FROM users WHERE Reputation = ( SELECT MAX(Reputation) FROM users );"]}, {"question_id": 590, "answer_sql": []}, {"question_id": 591, "answer_sql": ["SELECT COUNT(Id) FROM badges WHERE STRFTIME('%Y', Date) = '2011' AND Name = 'Supporter';"]}, {"question_id": 592, "answer_sql": ["SELECT COUNT(Id) FROM ( SELECT T1.Id, COUNT(T1.Name) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id GROUP BY T1.UserId HAVING COUNT(T1.Name) > 5 );", "SELECT COUNT(Id) FROM badges GROUP BY UserId HAVING COUNT(Name) > 5;", "SELECT COUNT(Id) FROM ( SELECT T1.Id FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id GROUP BY T1.Name HAVING COUNT(T1.Name) > 5 );"]}, {"question_id": 593, "answer_sql": ["SELECT COUNT(DISTINCT T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Name IN ('Supporter', 'Teacher') AND T2.Location = 'New York';"]}, {"question_id": 594, "answer_sql": ["SELECT T1.Reputation FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId WHERE T2.PostId = 1", "SELECT T2.Reputation FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.PostId = 1", "SELECT T1.Reputation, T1.Id FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId WHERE T2.PostId = 1;", "SELECT T1.Reputation, T1.Id FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.Id = 1;", "SELECT T2.Reputation FROM users AS T1 INNER JOIN users AS T2 ON T1.Id = T2.Id WHERE T1.Id = 1;"]}, {"question_id": 595, "answer_sql": ["SELECT T1.DisplayName FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId WHERE T1.Views >= 1000 GROUP BY T1.Id HAVING COUNT(T2.PostId) = 1;", "SELECT T1.DisplayName FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN (SELECT PostId, COUNT(*) AS num FROM postHistory GROUP BY PostId HAVING COUNT(*) = 1) AS T3 ON T2.PostId = T3.PostId WHERE T1.Views >= 1000 GROUP BY T1.Id;"]}, {"question_id": 596, "answer_sql": ["SELECT T1.Name, T2.UserId FROM badges AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.Id GROUP BY T2.UserId ORDER BY COUNT(T2.Id) DESC LIMIT 1;", "SELECT T1.UserId, T2.Name FROM comments AS T1 INNER JOIN badges AS T2 ON T1.UserId = T2.UserId GROUP BY T1.UserId ORDER BY COUNT(T1.Id) DESC LIMIT 1;", "SELECT T1.UserDisplayName, T2.Name FROM comments AS T1 INNER JOIN badges AS T2 ON T1.UserId = T2.UserId GROUP BY T1.UserDisplayName, T2.Name ORDER BY COUNT(T1.Id) DESC LIMIT 1;", "SELECT T1.UserDisplayName, T2.Name FROM comments AS T1 INNER JOIN badges AS T2 ON T1.UserId = T2.UserId GROUP BY T1.UserId ORDER BY COUNT(T1.Id) DESC LIMIT 1;"]}, {"question_id": 597, "answer_sql": ["SELECT COUNT(DISTINCT T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Name = 'Teacher' AND T2.Location = 'India';"]}, {"question_id": 598, "answer_sql": ["SELECT (SUM(IIF(STRFTIME('%Y', Date) = '2010', 1, 0)) - SUM(IIF(STRFTIME('%Y', Date) = '2011', 1, 0))) * 100 / SUM(IIF(STRFTIME('%Y', Date) = '2011', 1, 0)) FROM badges WHERE Name = 'Student';", "SELECT CAST((SUM(IIF(STRFTIME('%Y', Date) = '2010', 1, 0)) - SUM(IIF(STRFTIME('%Y', Date) = '2011', 1, 0))) AS REAL) * 100 / SUM(IIF(STRFTIME('%Y', Date) = '2011', 1, 0)) FROM badges;", "SELECT CAST((SUM(IIF(STRFTIME('%Y', Date) = '2010', 1, 0)) - SUM(IIF(STRFTIME('%Y', Date) = '2011', 1, 0))) AS REAL) * 100 / SUM(IIF(STRFTIME('%Y', Date) = '2011', 1, 0)) FROM badges WHERE Name = 'Student';"]}, {"question_id": 599, "answer_sql": ["SELECT T1.PostHistoryTypeId , COUNT(DISTINCT T3.UserId) FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id INNER JOIN comments AS T3 ON T2.Id = T3.PostId WHERE T2.Id = 3720 GROUP BY T1.PostHistoryTypeId;", "SELECT postHistoryTypeId , COUNT(DISTINCT userId) FROM postHistory WHERE postId = 3720 GROUP BY postHistoryTypeId;"]}, {"question_id": 600, "answer_sql": ["SELECT T2.ViewCount, T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.PostId = 61217;", "SELECT T2.ViewCount, T1.Text FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.PostId = 61217;", "SELECT T1.ViewCount, T3.Text FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId INNER JOIN postHistory AS T3 ON T3.PostId = T1.Id WHERE T2.RelatedPostId = 61217;", "SELECT T2.ViewCount, T1.RelatedPostId FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.PostId = 61217;", "SELECT T1.ViewCount FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId WHERE T2.RelatedPostId = 61217;"]}, {"question_id": 601, "answer_sql": ["SELECT T1.Score, T2.LinkTypeId FROM comments AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId WHERE T2.PostId = 395", "SELECT comments.Score , postLinks.LinkTypeId FROM comments INNER JOIN postLinks ON comments.PostId = postLinks.PostId WHERE comments.PostId = 395", "SELECT T1.Score , T2.LinkTypeId FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId WHERE T2.PostId = 395"]}, {"question_id": 602, "answer_sql": ["SELECT Id, UserId FROM comments WHERE Score > 60;"]}, {"question_id": 603, "answer_sql": ["SELECT SUM(FavoriteCount) FROM posts WHERE OwnerUserId = 686 AND STRFTIME('%Y', CreaionDate) = '2011';"]}, {"question_id": 604, "answer_sql": ["SELECT AVG(UpVotes) AS avg_up_votes, AVG(Age) AS avg_age FROM ( SELECT T1.UpVotes, T2.Age, COUNT(T2.Id) AS Count FROM users AS T1 INNER JOIN users AS T2 ON T1.Id = T2.Id GROUP BY T1.Id HAVING COUNT(T2.Id) > 10 ) AS T3;", "SELECT AVG(UpVotes) AS avg_up_votes, AVG(Age) AS avg_age FROM users WHERE Id IN ( SELECT UserId FROM postHistory GROUP BY UserId HAVING COUNT(*) > 10 );"]}, {"question_id": 605, "answer_sql": ["SELECT COUNT(Id) FROM badges WHERE Name = 'Announcer';", "SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Announcer';"]}, {"question_id": 606, "answer_sql": ["SELECT Name FROM badges WHERE Date = '2010-07-19 19:39:08';"]}, {"question_id": 607, "answer_sql": ["SELECT COUNT(Id) FROM comments WHERE Score > 60;"]}, {"question_id": 608, "answer_sql": ["SELECT Text FROM comments WHERE CreationDate = '2010-07-19 19:16:14.0';"]}, {"question_id": 609, "answer_sql": ["SELECT COUNT(Id) FROM posts WHERE Score = 10;"]}, {"question_id": 610, "answer_sql": ["SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Reputation = ( SELECT MAX(Reputation) FROM users );"]}, {"question_id": 611, "answer_sql": ["SELECT T1.Reputation FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Date = '2010-07-19 19:39:08.0'"]}, {"question_id": 612, "answer_sql": ["SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Pierre'"]}, {"question_id": 613, "answer_sql": ["SELECT T1.Date FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.Location = 'Rochester, NY'"]}, {"question_id": 614, "answer_sql": ["SELECT CAST(SUM(IIF(T1.Name = 'Teacher', 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id INNER JOIN tags AS T3 ON T3.ExcerptPostId = T2.Id WHERE T1.Name = 'Teacher';", "SELECT CAST(SUM(IIF(T1.Name = 'Teacher', 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id;"]}, {"question_id": 615, "answer_sql": ["SELECT CAST(SUM(IIF(T2.Age BETWEEN 13 AND 18, 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Name = 'Organizer';"]}, {"question_id": 616, "answer_sql": ["SELECT T1.Score FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.CreationDate = '2010-07-19 19:19:56.0'", "SELECT T2.Score FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.CreationDate = '2010-07-19 19:19:56.0'"]}, {"question_id": 617, "answer_sql": ["SELECT Text, CreationDate FROM comments WHERE CreationDate = '2010-07-19 19:37:33.0';", "SELECT Text FROM comments WHERE CreationDate = '2010-07-19 19:37:33.0';"]}, {"question_id": 618, "answer_sql": ["SELECT T2.Age FROM users AS T1 INNER JOIN users AS T2 ON T1.Id = T2.Id WHERE T1.Location = 'Vienna, Austria' AND T2.Id IN (SELECT UserId FROM badges);", "SELECT T1.Age FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Vienna, Austria'"]}, {"question_id": 619, "answer_sql": ["SELECT COUNT(DISTINCT users.Id) FROM users INNER JOIN badges ON users.Id = badges.UserId WHERE badges.Name = 'Supporter' AND users.Age BETWEEN 19 AND 65;"]}, {"question_id": 620, "answer_sql": ["SELECT T2.Views FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Date = '2010-07-19 19:39:08.0'"]}, {"question_id": 621, "answer_sql": ["SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Reputation = ( SELECT MIN(Reputation) FROM users );"]}, {"question_id": 622, "answer_sql": ["SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Sharpie'"]}, {"question_id": 623, "answer_sql": ["SELECT COUNT(*) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Name = 'Supporter' AND T2.Age > 65;"]}, {"question_id": 624, "answer_sql": ["SELECT DisplayName FROM users WHERE Id = 30;"]}, {"question_id": 625, "answer_sql": ["SELECT COUNT(Id) FROM users WHERE Location = 'New York';"]}, {"question_id": 626, "answer_sql": ["SELECT COUNT(Id) FROM votes WHERE CreationDate LIKE '2010%';"]}, {"question_id": 627, "answer_sql": ["SELECT COUNT(Id) FROM users WHERE Age BETWEEN 19 AND 65;"]}, {"question_id": 628, "answer_sql": ["SELECT DisplayName FROM users WHERE Views = ( SELECT MAX(Views) FROM users );"]}, {"question_id": 629, "answer_sql": ["SELECT CAST(SUM(IIF(STRFTIME('%Y', CreationDate) = 2010, 1, 0)) AS REAL) / SUM(IIF(STRFTIME('%Y', CreationDate) = 2011, 1, 0)) FROM votes;"]}, {"question_id": 630, "answer_sql": ["SELECT T2.Tags FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'John Stauffer';"]}, {"question_id": 631, "answer_sql": ["SELECT COUNT(t1.Id) FROM posts AS t1 INNER JOIN users AS t2 ON t1.OwnerUserId = t2.Id WHERE t2.DisplayName = 'Daniel Vassallo';"]}, {"question_id": 632, "answer_sql": ["SELECT COUNT(*) FROM votes JOIN users ON votes.UserId = users.Id WHERE users.DisplayName = 'Harlan';"]}, {"question_id": 633, "answer_sql": ["SELECT T1.Id FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'slashnick' ORDER BY T1.AnswerCount DESC LIMIT 1;"]}, {"question_id": 634, "answer_sql": ["SELECT T1.DisplayName, T2.ViewCount FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName IN ('Harvey Motulsky', 'Noah Snyder') ORDER BY T2.ViewCount DESC LIMIT 1;", "SELECT T1.DisplayName, SUM(T1.Views) AS TotalViews FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName IN ('Harvey Motulsky', 'Noah Snyder') GROUP BY T1.DisplayName ORDER BY TotalViews DESC LIMIT 1;", "SELECT T1.DisplayName, SUM(T2.ViewCount) AS total_views FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName IN ('Harvey Motulsky', 'Noah Snyder') GROUP BY T1.DisplayName ORDER BY total_views DESC LIMIT 1;", "SELECT T1.DisplayName, T3.ViewCount FROM users AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName IN ('Harvey Motulsky', 'Noah Snyder') ORDER BY T3.ViewCount DESC LIMIT 1;"]}, {"question_id": 635, "answer_sql": ["SELECT COUNT(v.Id) FROM votes v JOIN users u ON v.UserId = u.Id WHERE u.DisplayName = 'Matt Parker' AND v.PostId > 4;", "SELECT COUNT(votes.Id) FROM votes JOIN users ON votes.UserId = users.Id JOIN posts ON votes.PostId = posts.Id WHERE users.DisplayName = 'Matt Parker' AND votes.Id > 4;", "SELECT COUNT(v.Id) FROM votes v JOIN users u ON v.UserId = u.Id WHERE u.DisplayName = 'Matt Parker' AND v.VoteTypeId = 1 GROUP BY v.PostId HAVING COUNT(v.Id) > 4;"]}, {"question_id": 636, "answer_sql": ["SELECT COUNT(*) FROM comments INNER JOIN users ON comments.UserId = users.Id WHERE users.DisplayName = 'Neil McGuigan' AND comments.Score < 60;", "SELECT COUNT(*) FROM comments WHERE Score < 60 AND UserDisplayName = 'Neil McGuigan';"]}, {"question_id": 637, "answer_sql": ["SELECT T1.Tags FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId INNER JOIN users AS T3 ON T2.UserId = T3.Id WHERE T3.DisplayName = 'Mark Meckes' AND T1.Tags IS NOT NULL;", "SELECT T1.Tags FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId INNER JOIN users AS T3 ON T2.UserId = T3.Id INNER JOIN tags AS T4 ON T1.Id = T4.ExcerptPostId WHERE T3.DisplayName = 'Mark Meckes' AND T4.TagName IS NOT NULL;", "SELECT T1.Tags FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Mark Meckes' AND T1.Id NOT IN ( SELECT PostId FROM comments );", "SELECT T3.Tags FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Mark Meckes' AND T3.CommentCount = 0;", "SELECT T1.Tags FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Mark Meckes' AND T1.Id NOT IN ( SELECT T3.PostId FROM comments AS T3 INNER JOIN users AS T4 ON T3.UserId = T4.Id WHERE T4.DisplayName = 'Mark Meckes' );"]}, {"question_id": 638, "answer_sql": ["SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Organizer';"]}, {"question_id": 639, "answer_sql": ["SELECT CAST(SUM(CASE WHEN T2.TagName = 'R' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Id) FROM posts AS T1 INNER JOIN tags AS T2 ON T1.Id = T2.ExcerptPostId WHERE T1.OwnerUserId = 30;", "SELECT CAST(SUM(IIF(T2.TagName = 'R', 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM posts AS T1 INNER JOIN tags AS T2 ON T1.Id = T2.ExcerptPostId WHERE T1.OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Community');"]}, {"question_id": 640, "answer_sql": ["SELECT ( SELECT ViewCount FROM posts WHERE OwnerDisplayName = 'Mornington' ) - ( SELECT ViewCount FROM posts WHERE OwnerDisplayName = 'Amos' );", "SELECT SUM(IIF(T2.DisplayName = 'Mornington', T1.ViewCount, 0)) - SUM(IIF(T2.DisplayName = 'Amos', T1.ViewCount, 0)) AS diff FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id;"]}, {"question_id": 641, "answer_sql": ["SELECT COUNT(DISTINCT T2.UserId) FROM badges AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.Id WHERE STRFTIME('%Y', T1.Date) = '2014';", "SELECT COUNT(DISTINCT users.Id) FROM users JOIN badges ON users.Id = badges.UserId WHERE SUBSTR(badges.Date, 1, 4) = '2014';", "SELECT COUNT(DISTINCT T1.UserId) FROM badges AS T1 INNER JOIN comments AS T2 ON T1.UserId = T2.UserId WHERE STRFTIME('%Y', T1.Date) = '2014';", "SELECT COUNT(DISTINCT users.id) FROM users JOIN badges ON users.id = badges.userid WHERE badges.name = 'commentator' AND STRFTIME('%Y', badges.date) = '2014';"]}, {"question_id": 642, "answer_sql": ["SELECT COUNT(Id) FROM posts WHERE CreaionDate = '2010-07-21';"]}, {"question_id": 643, "answer_sql": ["SELECT DisplayName, Age FROM users WHERE Views = (SELECT MAX(Views) FROM users);", "SELECT T1.DisplayName, T1.Age FROM users AS T1 INNER JOIN users AS T2 ON T1.Id = T2.Id GROUP BY T1.Id ORDER BY COUNT(T1.Views) DESC LIMIT 1;"]}, {"question_id": 644, "answer_sql": ["SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Detecting a given face in a database of facial images';"]}, {"question_id": 645, "answer_sql": ["SELECT COUNT(Id) FROM comments WHERE Score < 60 AND UserId = 13;"]}, {"question_id": 646, "answer_sql": ["SELECT T1.Title, T2.UserDisplayName FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.Score > 60;"]}, {"question_id": 647, "answer_sql": ["SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.Location = 'North Pole' AND STRFTIME('%Y', T1.Date) = '2011';"]}, {"question_id": 648, "answer_sql": ["SELECT T1.DisplayName, T1.WebsiteUrl FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.FavoriteCount > 150;"]}, {"question_id": 649, "answer_sql": ["SELECT T2.LastEditDate, COUNT(T1.Id) FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'What is the best introductory Bayesian statistics textbook?' GROUP BY T2.LastEditDate;", "SELECT T2.LastEditDate, T2.Title FROM tags AS T1 INNER JOIN posts AS T2 ON T1.ExcerptPostId = T2.Id WHERE T2.Title = 'What is the best introductory Bayesian statistics textbook?';", "SELECT T2.Title, T2.LastEditDate FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'What is the best introductory Bayesian statistics textbook?'", "SELECT T2.PostHistoryTypeId, T1.LastEditDate FROM posts AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.PostId WHERE T1.Title = 'What is the best introductory Bayesian statistics textbook?'"]}, {"question_id": 650, "answer_sql": ["SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Outliers'"]}, {"question_id": 651, "answer_sql": ["SELECT T1.Title FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.RelatedPostId WHERE T2.PostId = ( SELECT Id FROM posts WHERE Title = 'How to tell if something happened in a data set which monitors a value over time' );", "SELECT T1.Title FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId WHERE T2.LinkTypeId = 2 AND T1.Title = 'How to tell if something happened in a data set which monitors a value over time';"]}, {"question_id": 652, "answer_sql": ["SELECT T2.PostId, T1.Name FROM badges AS T1 INNER JOIN postHistory AS T2 ON T1.UserId = T2.UserId WHERE T2.UserDisplayName = 'Samuel' AND STRFTIME('%Y', T1.Date) = '2013';", "SELECT T1.Id, T2.Name FROM postHistory AS T1 INNER JOIN badges AS T2 ON T1.UserId = T2.UserId WHERE T1.UserDisplayName = 'Samuel' AND STRFTIME('%Y', T1.CreationDate) = '2013' AND STRFTIME('%Y', T2.Date) = '2013';", "SELECT T1.Id, T3.Name FROM postHistory AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id INNER JOIN badges AS T3 ON T2.Id = T3.UserId WHERE T2.DisplayName = 'Samuel' AND STRFTIME('%Y', T1.CreationDate) = '2013' AND STRFTIME('%Y', T3.Date) = '2013';", "SELECT T2.PostId, T1.Name FROM badges AS T1 INNER JOIN postHistory AS T2 ON T1.UserId = T2.UserId INNER JOIN users AS T3 ON T2.UserId = T3.Id WHERE T3.DisplayName = 'Samuel' AND STRFTIME('%Y', T2.CreationDate) = '2013'", "SELECT T2.PostId, T1.Name FROM badges AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN users AS T3 ON T2.UserId = T3.Id WHERE T3.DisplayName = 'Samuel' AND STRFTIME('%Y', T1.Date) = '2013';"]}, {"question_id": 653, "answer_sql": ["SELECT T1.OwnerDisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id ORDER BY T1.ViewCount DESC LIMIT 1;", "SELECT T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId ORDER BY T2.ViewCount DESC LIMIT 1;", "SELECT T1.OwnerDisplayName FROM posts AS T1 INNER JOIN tags AS T2 ON T1.Id = T2.ExcerptPostId WHERE T2.TagName = 'SQLite' ORDER BY T1.ViewCount DESC LIMIT 1;"]}, {"question_id": 654, "answer_sql": ["SELECT T3.DisplayName, T3.Location FROM tags AS T1 INNER JOIN posts AS T2 ON T1.ExcerptPostId = T2.Id INNER JOIN users AS T3 ON T2.OwnerUserId = T3.Id WHERE T1.TagName = 'hypothesis-testing';", "SELECT T1.DisplayName, T1.Location FROM users AS T1 INNER JOIN tags AS T2 ON T2.ExcerptPostId = T1.Id WHERE T2.TagName = 'hypothesis-testing';"]}, {"question_id": 655, "answer_sql": ["SELECT T3.Title, T2.LinkTypeId FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId INNER JOIN posts AS T3 ON T2.RelatedPostId = T3.Id WHERE T1.Title = 'What are principal component scores?';", "SELECT T1.Title, T2.LinkTypeId FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId WHERE T1.Title = 'What are principal component scores?';"]}, {"question_id": 656, "answer_sql": ["SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.ParentId = ( SELECT Id FROM posts ORDER BY Score DESC LIMIT 1 )", "SELECT T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.Score = ( SELECT MAX(Score) FROM posts )", "SELECT T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.ParentId = ( SELECT ParentId FROM posts ORDER BY Score DESC LIMIT 1 )", "SELECT T1.OwnerDisplayName FROM posts AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.PostId WHERE T2.Id = ( SELECT Id FROM posts ORDER BY Score DESC LIMIT 1 ) ORDER BY T1.ParentId DESC;"]}, {"question_id": 657, "answer_sql": ["SELECT T1.DisplayName, T1.WebsiteUrl FROM users AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.UserId WHERE T2.VoteTypeId = 8 ORDER BY T2.BountyAmount DESC LIMIT 1;"]}, {"question_id": 658, "answer_sql": ["SELECT Title FROM posts ORDER BY ViewCount DESC LIMIT 5;"]}, {"question_id": 659, "answer_sql": ["SELECT COUNT(*) FROM ( SELECT T1.Id, T2.Count FROM posts AS T1 INNER JOIN tags AS T2 ON T1.Id = T2.ExcerptPostId WHERE T2.Count BETWEEN 5000 AND 7000 ) AS T3;"]}, {"question_id": 660, "answer_sql": ["SELECT OwnerUserId FROM posts ORDER BY FavoriteCount DESC LIMIT 1"]}, {"question_id": 661, "answer_sql": ["SELECT Age FROM users WHERE Reputation = ( SELECT MAX(Reputation) FROM users );"]}, {"question_id": 662, "answer_sql": ["SELECT COUNT(*) FROM votes JOIN posts ON votes.PostId = posts.Id WHERE votes.CreationDate LIKE '2011%' AND votes.BountyAmount = 50;", "SELECT COUNT(*) FROM votes AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.BountyAmount = 50 AND STRFTIME('%Y', T1.CreationDate) = '2012';"]}, {"question_id": 663, "answer_sql": ["SELECT Id FROM users WHERE Age = (SELECT MIN(Age) FROM users);"]}, {"question_id": 664, "answer_sql": ["SELECT T1.Score FROM posts AS T1 INNER JOIN tags AS T2 ON T1.Id = T2.ExcerptPostId GROUP BY T2.TagName ORDER BY COUNT(T2.TagName) DESC LIMIT 1;"]}, {"question_id": 665, "answer_sql": ["SELECT CAST(COUNT(Id) AS REAL) / 12 FROM postLinks WHERE PostId IN ( SELECT Id FROM posts WHERE PostTypeId = 1 AND AnswerCount <= 2 ) AND CreationDate LIKE '2010%';", "SELECT CAST(COUNT(T2.Id) AS REAL) / 12 FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId WHERE T1.AnswerCount <= 2 AND STRFTIME('%Y', T1.CreaionDate) = '2010';"]}, {"question_id": 666, "answer_sql": ["SELECT T2.Id FROM votes AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.UserId = 1465 ORDER BY T2.FavoriteCount DESC LIMIT 1;", "SELECT T1.Id FROM votes AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.UserId = 1465 ORDER BY T2.FavoriteCount DESC LIMIT 1;"]}, {"question_id": 667, "answer_sql": ["SELECT T1.Title FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId WHERE T2.CreationDate = ( SELECT MIN(CreationDate) FROM postLinks );", "SELECT T1.Title FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId ORDER BY T1.CreaionDate LIMIT 1;"]}, {"question_id": 668, "answer_sql": ["SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId GROUP BY T2.Name ORDER BY COUNT(T2.Name) DESC LIMIT 1;", "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId GROUP BY T2.UserId ORDER BY COUNT(T2.Name) DESC LIMIT 1;"]}, {"question_id": 669, "answer_sql": ["SELECT CreationDate FROM votes WHERE UserId = ( SELECT Id FROM users WHERE DisplayName = 'chl' ) ORDER BY CreationDate ASC LIMIT 1;", "SELECT T1.CreationDate FROM votes AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title LIKE '%chl%' ORDER BY T1.CreationDate ASC LIMIT 1;"]}, {"question_id": 670, "answer_sql": ["SELECT T1.CreaionDate FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id ORDER BY T2.Age ASC, T1.CreaionDate ASC LIMIT 1;", "SELECT MIN(T1.CreaionDate) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.Age = ( SELECT MIN(Age) FROM users );"]}, {"question_id": 671, "answer_sql": ["SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Autobiographer' ORDER BY T2.Date LIMIT 1;"]}, {"question_id": 672, "answer_sql": ["SELECT COUNT(DISTINCT T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.Location = 'United Kingdom' AND T1.FavoriteCount >= 4;", "SELECT COUNT(DISTINCT T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.Location = 'United Kingdom' GROUP BY T2.Id HAVING SUM(T1.FavoriteCount) >= 4;", "SELECT COUNT(DISTINCT T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN votes AS T3 ON T2.Id = T3.PostId INNER JOIN tags AS T4 ON T2.Id = T4.ExcerptPostId WHERE T1.Location = 'United Kingdom' AND T2.FavoriteCount >= 4;", "SELECT COUNT(DISTINCT T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN votes AS T3 ON T2.Id = T3.PostId INNER JOIN tags AS T4 ON T2.Id = T4.ExcerptPostId WHERE T1.Location = 'United Kingdom' GROUP BY T1.Id HAVING COUNT(T2.FavoriteCount) >= 4;", "SELECT COUNT(DISTINCT T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.Location = 'United Kingdom' AND T2.FavoriteCount >= 4;"]}, {"question_id": 673, "answer_sql": ["SELECT AVG(PostId) FROM votes WHERE UserId = (SELECT Id FROM users WHERE Age = (SELECT MAX(Age) FROM users));"]}, {"question_id": 674, "answer_sql": ["SELECT DisplayName FROM users WHERE Reputation = ( SELECT MAX(Reputation) FROM users );"]}, {"question_id": 675, "answer_sql": ["SELECT COUNT(*) FROM users WHERE Reputation > 2000 AND Views > 1000;"]}, {"question_id": 676, "answer_sql": []}, {"question_id": 677, "answer_sql": ["SELECT COUNT(T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id INNER JOIN posts AS T3 ON T2.Id = T3.OwnerUserId WHERE T2.DisplayName = 'Jay Stevens' AND STRFTIME('%Y', T3.CreaionDate) = '2010';", "SELECT COUNT(T2.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Jay Stevens' AND STRFTIME('%Y', T2.CreaionDate) = '2010';"]}, {"question_id": 678, "answer_sql": ["SELECT T1.Id, T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Harvey Motulsky' ORDER BY T1.ViewCount DESC LIMIT 1;"]}, {"question_id": 679, "answer_sql": ["SELECT T1.Id, T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id ORDER BY T1.Score DESC LIMIT 1;", "SELECT T1.Id, T1.Title FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId ORDER BY T2.Score DESC LIMIT 1;", "SELECT T1.Id, T2.Title FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId ORDER BY T2.Score DESC LIMIT 1;"]}, {"question_id": 680, "answer_sql": ["SELECT AVG(Score) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Stephen Turner';"]}, {"question_id": 681, "answer_sql": ["SELECT T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.ViewCount > 20000 AND STRFTIME('%Y', T2.CreaionDate) = '2011' GROUP BY T1.Id;", "SELECT T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.ViewCount > 20000 AND STRFTIME('%Y', T2.CreaionDate) = '2011';", "SELECT T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.ViewCount > 20000 AND STRFTIME('%Y', T2.CreaionDate) = '2011' GROUP BY T1.DisplayName;"]}, {"question_id": 682, "answer_sql": ["SELECT Id, OwnerDisplayName FROM posts WHERE CreaionDate LIKE '2010%' ORDER BY FavoriteCount DESC LIMIT 1;"]}, {"question_id": 683, "answer_sql": ["SELECT CAST(SUM(CASE WHEN T2.Reputation > 1000 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Id) FROM postHistory AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.CreationDate LIKE '2011%';", "SELECT CAST(SUM(CASE WHEN T1.Reputation > 1000 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE STRFTIME('%Y', T2.CreaionDate) = '2011';"]}, {"question_id": 684, "answer_sql": ["SELECT CAST(SUM(IIF(Age BETWEEN 13 AND 18, 1, 0)) AS REAL) * 100 / COUNT(Id) FROM users;", "SELECT CAST(SUM(IIF(Age BETWEEN 13 AND 18, 1, 0)) AS REAL) * 100 / COUNT(Id) FROM users WHERE Age IS NOT NULL;"]}, {"question_id": 685, "answer_sql": ["SELECT T1.ViewCount, T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Computer Game Datasets';"]}, {"question_id": 686, "answer_sql": ["SELECT COUNT(Id) FROM posts WHERE ViewCount > ( SELECT AVG(ViewCount) FROM posts );"]}, {"question_id": 687, "answer_sql": ["SELECT COUNT(*) FROM comments WHERE PostId = ( SELECT Id FROM posts ORDER BY Score DESC LIMIT 1 );"]}, {"question_id": 688, "answer_sql": ["SELECT COUNT(Id) FROM posts WHERE ViewCount > 35000 AND Id NOT IN ( SELECT PostId FROM comments GROUP BY PostId HAVING COUNT(*) > 0 );"]}, {"question_id": 689, "answer_sql": ["SELECT T2.DisplayName, T2.Location FROM postHistory AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.PostId = 183 ORDER BY T1.CreationDate DESC LIMIT 1;"]}, {"question_id": 690, "answer_sql": ["SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Emmett' ORDER BY T1.Date DESC LIMIT 1;"]}, {"question_id": 691, "answer_sql": ["SELECT COUNT(Id) FROM users WHERE UpVotes > 5000 AND Age BETWEEN 19 AND 65;"]}, {"question_id": 692, "answer_sql": ["SELECT DISTINCT T2.Date - T1.CreationDate as days_ago FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Zolomon';"]}, {"question_id": 693, "answer_sql": ["SELECT COUNT(T1.Id) AS Posts, COUNT(T2.Id) AS Comments FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.CreaionDate = ( SELECT MAX(CreationDate) FROM postHistory );", "SELECT COUNT(T1.Id) AS Posts, COUNT(T2.Id) AS Comments FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.OwnerUserId = (SELECT Id FROM users WHERE CreationDate = (SELECT MAX(CreationDate) FROM users)) GROUP BY T1.OwnerUserId;"]}, {"question_id": 694, "answer_sql": ["SELECT T2.Text, T3.DisplayName FROM comments AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.PostId INNER JOIN users AS T3 ON T1.UserId = T3.Id INNER JOIN posts AS T4 ON T1.PostId = T4.Id WHERE T4.Title = 'Analysing wind data with R' ORDER BY T1.CreationDate DESC LIMIT 1;", "SELECT T2.Text, T3.DisplayName FROM comments AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.PostId INNER JOIN users AS T3 ON T3.Id = T2.UserId INNER JOIN posts AS T4 ON T4.Id = T1.PostId WHERE T4.Title = 'Analysing wind data with R' ORDER BY T1.CreationDate DESC LIMIT 1;", "SELECT T2.Text, T3.DisplayName FROM comments AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.PostId INNER JOIN users AS T3 ON T1.UserId = T3.Id INNER JOIN posts AS T4 ON T4.Id = T2.PostId WHERE T4.Title = 'Analysing wind data with R' ORDER BY T1.CreationDate DESC LIMIT 1;", "SELECT T2.Text, T1.DisplayName FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T3.Title = 'Analysing wind data with R' ORDER BY T2.CreationDate DESC LIMIT 1;"]}, {"question_id": 695, "answer_sql": ["SELECT COUNT(DISTINCT users.Id) FROM users JOIN badges ON users.Id = badges.UserId WHERE badges.Name = 'Citizen Patrol';"]}, {"question_id": 696, "answer_sql": ["SELECT COUNT(Id) FROM tags WHERE TagName = 'careers'"]}, {"question_id": 697, "answer_sql": ["SELECT T1.Reputation, T1.Views FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Jarrod Dixon'", "SELECT Reputation, Views FROM users WHERE DisplayName = 'Jarrod Dixon';"]}, {"question_id": 698, "answer_sql": ["SELECT c.Text, p.AnswerCount FROM posts p JOIN comments c ON p.Id = c.PostId WHERE p.Title = 'Clustering 1D data';", "SELECT p.Title, COUNT(c.PostId) as CommentsCount FROM posts p LEFT JOIN comments c ON p.Id = c.PostId WHERE p.Title = 'Clustering 1D data' GROUP BY p.Title;", "SELECT COUNT(c.Id) AS CommentCount, COUNT(a.Id) AS AnswerCount FROM comments c JOIN posts a ON c.PostId = a.Id WHERE a.Title = 'Clustering 1D data';"]}, {"question_id": 699, "answer_sql": ["SELECT CreationDate FROM users WHERE DisplayName = 'IrishStat';"]}, {"question_id": 700, "answer_sql": ["SELECT COUNT(*) FROM votes WHERE BountyAmount >= 30;"]}, {"question_id": 701, "answer_sql": ["SELECT CAST(SUM(CASE WHEN T2.Score >= 50 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.Reputation = ( SELECT MAX(Reputation) FROM users );", "SELECT CAST(SUM(CASE WHEN T1.Score >= 50 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id ORDER BY T2.Reputation DESC LIMIT 1;", "SELECT CAST(SUM(CASE WHEN T1.Score > 50 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id ORDER BY T2.Reputation DESC LIMIT 1;", "SELECT CAST(SUM(IIF(Score > 50, 1, 0)) AS REAL) * 100 / COUNT(*) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users));"]}, {"question_id": 702, "answer_sql": ["SELECT COUNT(*) FROM posts WHERE Score < 20", "SELECT COUNT(*) FROM comments WHERE Score < 20;"]}, {"question_id": 703, "answer_sql": ["SELECT COUNT(Id) FROM tags WHERE Count <= 20 AND Id < 15"]}, {"question_id": 704, "answer_sql": ["SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'sample';"]}, {"question_id": 705, "answer_sql": ["SELECT T2.Reputation, T2.UpVotes FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Text = 'fine, you win :)';"]}, {"question_id": 706, "answer_sql": ["SELECT T2.Text FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.Title = 'How can I adapt ANOVA for binary data?'"]}, {"question_id": 707, "answer_sql": ["SELECT Text FROM comments WHERE PostId IN ( SELECT Id FROM posts WHERE ViewCount BETWEEN 100 AND 150 ) ORDER BY Score DESC LIMIT 1;", "SELECT Text FROM comments WHERE Score = ( SELECT MAX(Score) FROM posts WHERE ViewCount BETWEEN 100 AND 150 );"]}, {"question_id": 708, "answer_sql": []}, {"question_id": 709, "answer_sql": ["SELECT COUNT(*) FROM posts WHERE ViewCount < 5 AND Score = 0;"]}, {"question_id": 710, "answer_sql": ["SELECT COUNT(*) FROM comments WHERE PostId = (SELECT PostId FROM comments GROUP BY PostId HAVING COUNT(*) = 1) AND Score = 0;"]}, {"question_id": 711, "answer_sql": ["SELECT COUNT(DISTINCT T2.Id) FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Score = 0 AND T2.Age = 40;", "SELECT COUNT(DISTINCT T1.id) FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Score = 0 AND T2.Age = 40;"]}, {"question_id": 712, "answer_sql": ["SELECT T1.Id, T2.Text FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.Title = 'Group differences on a five point Likert item';", "SELECT T2.Id, T2.Text FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.Title = 'Group differences on a five point Likert item';"]}, {"question_id": 713, "answer_sql": ["SELECT T2.UpVotes FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Text = 'R is also lazy evaluated.'"]}, {"question_id": 714, "answer_sql": ["SELECT T2.Text FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Harvey Motulsky';"]}, {"question_id": 715, "answer_sql": ["SELECT T1.UserDisplayName FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DownVotes = 0 AND T1.Score BETWEEN 1 AND 5;"]}, {"question_id": 716, "answer_sql": ["SELECT CAST(SUM(CASE WHEN T2.UpVotes = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Score BETWEEN 5 AND 10;", "SELECT CAST(SUM(IIF(UpVotes = 0, 1, 0)) AS REAL) * 100 / COUNT(*) FROM users WHERE Reputation BETWEEN 5 AND 10;", "SELECT CAST(SUM(IIF(UpVotes = 0, 1, 0)) AS REAL) * 100 / COUNT(*) FROM users WHERE Id IN ( SELECT UserId FROM comments WHERE Score BETWEEN 5 AND 10 );"]}, {"question_id": 717, "answer_sql": ["SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id WHERE T1.superhero_name = '3-D Man';"]}, {"question_id": 718, "answer_sql": ["SELECT COUNT(*) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id WHERE T3.power_name = 'Super Strength';"]}, {"question_id": 719, "answer_sql": ["SELECT COUNT(*) FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN hero_power AS T3 ON T3.hero_id = T2.hero_id INNER JOIN alignment AS T4 ON T1.alignment_id = T4.id INNER JOIN superpower AS T5 ON T5.id = T3.power_id WHERE T5.power_name = 'Super Strength' AND T1.height_cm > 200;", "SELECT COUNT(*) FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN hero_power AS T3 ON T3.hero_id = T2.hero_id INNER JOIN superpower AS T4 ON T4.id = T3.power_id WHERE T4.power_name = 'Super Strength' AND T1.height_cm > 200;", "SELECT COUNT(*) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.height_cm > 200;", "SELECT COUNT(*) FROM superhero AS T1 INNER JOIN superpower AS T2 ON T1.id = T2.id WHERE T2.power_name = 'Super Strength' AND T1.height_cm > 200;"]}, {"question_id": 720, "answer_sql": ["SELECT T1.full_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id GROUP BY T1.id HAVING COUNT(T1.id) > 15;"]}, {"question_id": 721, "answer_sql": ["SELECT COUNT(*) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Blue';"]}, {"question_id": 722, "answer_sql": ["SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id WHERE T1.superhero_name = 'Apocalypse';"]}, {"question_id": 723, "answer_sql": ["SELECT COUNT(*) FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id INNER JOIN hero_power AS T4 ON T4.hero_id = T1.id INNER JOIN superpower AS T5 ON T5.id = T4.power_id INNER JOIN colour AS T6 ON T1.eye_colour_id = T6.id WHERE T6.colour = 'Blue' AND T5.power_name = 'Agility';", "SELECT COUNT(*) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id INNER JOIN colour AS T4 ON T1.eye_colour_id = T4.id WHERE T4.colour = 'Blue' AND T3.power_name = 'Agility';"]}, {"question_id": 724, "answer_sql": ["SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id INNER JOIN colour AS T4 ON T1.eye_colour_id = T4.id INNER JOIN colour AS T5 ON T1.hair_colour_id = T5.id INNER JOIN hero_power AS T6 ON T1.id = T6.hero_id INNER JOIN superpower AS T7 ON T6.power_id = T7.id WHERE T4.colour = 'Blue' AND T5.colour = 'Blond' AND T7.power_name = 'Agility';", "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN colour AS T4 ON T1.eye_colour_id = T4.id AND T3.id = T4.id WHERE T4.colour = 'Blue' AND T3.power_name = 'Agility';", "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id INNER JOIN colour AS T4 ON T1.eye_colour_id = T4.id AND T3.power_name = 'Agility' WHERE T4.colour = 'Blue';", "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id INNER JOIN colour AS T4 ON T1.eye_colour_id = T4.id AND T1.hair_colour_id = T4.id WHERE T4.colour IN ('Blue', 'Blond');"]}, {"question_id": 725, "answer_sql": ["SELECT COUNT(*) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics';"]}, {"question_id": 726, "answer_sql": ["SELECT T1.full_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics' ORDER BY T1.height_cm DESC LIMIT 1;"]}, {"question_id": 727, "answer_sql": ["SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Sauron';"]}, {"question_id": 728, "answer_sql": ["SELECT COUNT(*) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN colour AS T3 ON T1.eye_colour_id = T3.id WHERE T2.publisher_name = 'Marvel Comics' AND T3.colour = 'Blue';"]}, {"question_id": 729, "answer_sql": ["SELECT AVG(height_cm) FROM superhero WHERE publisher_id IN (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics');"]}, {"question_id": 730, "answer_sql": ["SELECT CAST(COUNT(CASE WHEN T3.power_name = 'Super Strength' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id INNER JOIN publisher AS T4 ON T4.id = T1.publisher_id WHERE T4.publisher_name = 'Marvel Comics';"]}, {"question_id": 731, "answer_sql": ["SELECT COUNT(*) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'DC Comics';"]}, {"question_id": 732, "answer_sql": ["SELECT T1.publisher_name FROM publisher AS T1 INNER JOIN superhero AS T2 ON T1.id = T2.publisher_id INNER JOIN hero_attribute AS T3 ON T2.id = T3.hero_id INNER JOIN attribute AS T4 ON T3.attribute_id = T4.id WHERE T4.attribute_name = 'Speed' ORDER BY T3.attribute_value LIMIT 1;"]}, {"question_id": 733, "answer_sql": ["SELECT COUNT(*) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN publisher AS T3 ON T3.id = T1.publisher_id WHERE T2.colour = 'Gold' AND T3.publisher_name = 'Marvel Comics';"]}, {"question_id": 734, "answer_sql": ["SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Blue Beetle II';"]}, {"question_id": 735, "answer_sql": ["SELECT COUNT(*) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.hair_colour_id = T2.id WHERE T2.colour = 'Blond';"]}, {"question_id": 736, "answer_sql": ["SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T3.id = T2.attribute_id WHERE T3.attribute_name = 'Intelligence' ORDER BY T2.attribute_value LIMIT 1;"]}, {"question_id": 737, "answer_sql": ["SELECT T1.race FROM race AS T1 INNER JOIN superhero AS T2 ON T1.id = T2.race_id WHERE T2.superhero_name = 'Copycat'"]}, {"question_id": 738, "answer_sql": ["SELECT COUNT(*) FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id WHERE T2.attribute_name = 'Durability' AND T1.attribute_value < 50;"]}, {"question_id": 739, "answer_sql": ["SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Death Touch'"]}, {"question_id": 740, "answer_sql": ["SELECT COUNT(*) FROM superhero sh JOIN hero_attribute ha ON sh.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE sh.gender_id = 2 AND a.attribute_name = 'Strength' AND ha.attribute_value = 100;"]}, {"question_id": 741, "answer_sql": ["SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id GROUP BY T1.id ORDER BY COUNT(T2.hero_id) DESC LIMIT 1;", "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id GROUP BY T1.superhero_name ORDER BY COUNT(T2.hero_id) DESC LIMIT 1;", "SELECT superhero_name FROM superhero GROUP BY superhero_name ORDER BY COUNT(*) DESC LIMIT 1;"]}, {"question_id": 742, "answer_sql": ["SELECT COUNT(*) FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Vampire';"]}, {"question_id": 743, "answer_sql": ["SELECT CAST(COUNT(CASE WHEN T2.alignment = 'Bad' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id), COUNT(CASE WHEN T3.publisher_name = 'Marvel Comics' THEN 1 ELSE NULL END) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id INNER JOIN publisher AS T3 ON T1.publisher_id = T3.id WHERE T2.alignment = 'Good' OR T2.alignment = 'Neutral';"]}, {"question_id": 744, "answer_sql": ["SELECT (SELECT COUNT(*) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics') - (SELECT COUNT(*) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'DC Comics') AS DIFFERENCE"]}, {"question_id": 745, "answer_sql": ["SELECT id FROM publisher WHERE publisher_name = 'Star Trek';"]}, {"question_id": 746, "answer_sql": ["SELECT AVG(attribute_value) FROM hero_attribute;"]}, {"question_id": 747, "answer_sql": ["SELECT COUNT(*) FROM superhero WHERE full_name IS NULL;"]}, {"question_id": 748, "answer_sql": ["SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.id = 75"]}, {"question_id": 749, "answer_sql": ["SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Deathlok';"]}, {"question_id": 750, "answer_sql": ["SELECT AVG(weight_kg) FROM superhero WHERE gender_id = 2;"]}, {"question_id": 751, "answer_sql": ["SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id INNER JOIN gender AS T4 ON T4.id = T1.gender_id WHERE T4.gender = 'Male' LIMIT 5;"]}, {"question_id": 752, "answer_sql": ["SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Alien';"]}, {"question_id": 753, "answer_sql": ["SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T1.height_cm BETWEEN 170 AND 190 AND T1.eye_colour_id = 1 AND T2.id = 1;", "SELECT superhero_name FROM superhero WHERE height_cm BETWEEN 170 AND 190 AND eye_colour_id = 1;", "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.height_cm BETWEEN 170 AND 190 AND T2.colour = 'N/A';"]}, {"question_id": 754, "answer_sql": ["SELECT T1.power_name FROM superpower AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.power_id WHERE T2.hero_id = 56;"]}, {"question_id": 755, "answer_sql": ["SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Demi-God' LIMIT 5;", "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Demi-God' LIMIT 5;"]}, {"question_id": 756, "answer_sql": ["SELECT COUNT(*) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Bad';"]}, {"question_id": 757, "answer_sql": ["SELECT T1.race FROM race AS T1 INNER JOIN superhero AS T2 ON T1.id = T2.race_id WHERE T2.weight_kg = 169;"]}, {"question_id": 758, "answer_sql": ["SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.hair_colour_id = T2.id WHERE T1.height_cm = 185 AND T1.race_id = ( SELECT id FROM race WHERE race = 'Human' )", "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.hair_colour_id = T2.id WHERE T1.height_cm = 185 AND T1.race_id = 3;"]}, {"question_id": 759, "answer_sql": ["SELECT T1.eye_colour_id FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id ORDER BY T1.weight_kg DESC LIMIT 1;", "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id ORDER BY T1.weight_kg DESC LIMIT 1;"]}, {"question_id": 760, "answer_sql": ["SELECT CAST(COUNT(CASE WHEN publisher_id = 13 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(*) FROM superhero WHERE height_cm BETWEEN 150 AND 180;"]}, {"question_id": 761, "answer_sql": ["SELECT T1.full_name FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T2.gender = 'Male' AND T1.weight_kg > 0.79 * ( SELECT AVG(weight_kg) FROM superhero );"]}, {"question_id": 762, "answer_sql": ["SELECT T1.power_name FROM superpower AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.power_id GROUP BY T1.power_name ORDER BY COUNT(T2.hero_id) DESC LIMIT 1;"]}, {"question_id": 763, "answer_sql": ["SELECT T1.attribute_value FROM hero_attribute AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id WHERE T2.superhero_name = 'Abomination';"]}, {"question_id": 764, "answer_sql": ["SELECT T2.power_name FROM superhero AS T1 INNER JOIN superpower AS T2 ON T1.id = T2.id WHERE T1.id = 1;", "SELECT T3.power_name FROM hero_power AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id INNER JOIN superpower AS T3 ON T1.power_id = T3.id WHERE T2.id = 1;"]}, {"question_id": 765, "answer_sql": ["SELECT COUNT(*) FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T2.power_name = 'Stealth';"]}, {"question_id": 766, "answer_sql": ["SELECT T1.full_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Strength' ORDER BY T2.attribute_value DESC LIMIT 1;"]}, {"question_id": 767, "answer_sql": ["SELECT CAST(COUNT(*) AS REAL) / SUM(CASE WHEN T1.skin_colour_id = 1 THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id WHERE T2.id = 1;", "SELECT AVG(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id WHERE T2.id != 1;", "SELECT AVG(superhero.weight_kg) FROM superhero LEFT JOIN colour ON superhero.skin_colour_id = colour.id WHERE colour.colour = 'no skin colour';", "SELECT CAST(COUNT(*) AS REAL) / SUM(CASE WHEN skin_colour_id = 1 THEN 1 ELSE 0 END) FROM superhero;", "SELECT AVG(superhero_name) FROM superhero WHERE skin_colour_id = 1;"]}, {"question_id": 768, "answer_sql": ["SELECT COUNT(*) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Dark Horse Comics';"]}, {"question_id": 769, "answer_sql": ["SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id INNER JOIN publisher AS T4 ON T1.publisher_id = T4.id WHERE T4.publisher_name = 'Dark Horse Comics' AND T3.attribute_name = 'Durability' ORDER BY T2.attribute_value DESC LIMIT 1;"]}, {"question_id": 770, "answer_sql": ["SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Abraham Sapien';"]}, {"question_id": 771, "answer_sql": ["SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Flight';"]}, {"question_id": 772, "answer_sql": ["SELECT T1.eye_colour_id, T1.hair_colour_id, T1.skin_colour_id FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.publisher_name = 'Dark Horse Comics' AND T3.gender = 'Female';"]}, {"question_id": 773, "answer_sql": ["SELECT T1.superhero_name, T3.publisher_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id AND T1.hair_colour_id = T2.id AND T1.skin_colour_id = T2.id INNER JOIN publisher AS T3 ON T1.publisher_id = T3.id WHERE T2.colour IN ('blue', 'green', 'red');", "SELECT T1.superhero_name, T3.publisher_name FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id INNER JOIN publisher AS T3 ON T1.publisher_id = T3.id WHERE T1.eye_colour_id = T1.hair_colour_id AND T1.eye_colour_id = T1.skin_colour_id;", "SELECT T1.superhero_name, T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.eye_colour_id = T1.hair_colour_id AND T1.eye_colour_id = T1.skin_colour_id;"]}, {"question_id": 774, "answer_sql": ["SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'A-Bomb';"]}, {"question_id": 775, "answer_sql": ["SELECT CAST(COUNT(CASE WHEN T3.colour = 'Blue' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id INNER JOIN colour AS T3 ON T1.eye_colour_id = T3.id WHERE T2.gender = 'Female';"]}, {"question_id": 776, "answer_sql": ["SELECT T1.superhero_name, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.full_name = 'Charles Chandler';"]}, {"question_id": 777, "answer_sql": ["SELECT T1.gender FROM gender AS T1 INNER JOIN superhero AS T2 ON T1.id = T2.gender_id WHERE T2.superhero_name = 'Agent 13';"]}, {"question_id": 778, "answer_sql": ["SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Adaptation';"]}, {"question_id": 779, "answer_sql": ["SELECT COUNT(DISTINCT T3.power_name) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Amazo';", "SELECT COUNT(T2.power_name) FROM superhero AS T1 INNER JOIN superpower AS T2 ON T1.id = T2.id WHERE T1.superhero_name = 'Amazo';"]}, {"question_id": 780, "answer_sql": ["SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Hunter Zolomon';"]}, {"question_id": 781, "answer_sql": ["SELECT T1.height_cm FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Amber';"]}, {"question_id": 782, "answer_sql": ["SELECT superhero_name FROM superhero WHERE eye_colour_id = (SELECT id FROM colour WHERE colour = 'Black') AND hair_colour_id = (SELECT id FROM colour WHERE colour = 'Black');"]}, {"question_id": 783, "answer_sql": ["SELECT T1.eye_colour_id FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Gold';", "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.skin_colour_id = ( SELECT id FROM colour WHERE colour = 'Gold' );", "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.skin_colour_id = 10;", "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.skin_colour_id = 1;"]}, {"question_id": 784, "answer_sql": ["SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Vampire'"]}, {"question_id": 785, "answer_sql": ["SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Neutral';"]}, {"question_id": 786, "answer_sql": ["SELECT COUNT(*) FROM hero_attribute WHERE attribute_id = ( SELECT id FROM attribute WHERE attribute_name = 'Strength' ) ORDER BY attribute_value DESC LIMIT 1;", "SELECT COUNT(*) FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id WHERE T2.attribute_name = 'Strength' AND T1.attribute_value = ( SELECT MAX(attribute_value) FROM hero_attribute );"]}, {"question_id": 787, "answer_sql": ["SELECT T1.race, T2.alignment FROM race AS T1 INNER JOIN alignment AS T2 ON T1.id = T2.id INNER JOIN superhero AS T3 ON T2.id = T3.alignment_id WHERE T3.superhero_name = 'Cameron Hicks';", "SELECT T2.race, T3.alignment FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id WHERE T1.superhero_name = 'Cameron Hicks';"]}, {"question_id": 788, "answer_sql": ["SELECT CAST(COUNT(CASE WHEN T1.gender = 'Female' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM gender AS T1 INNER JOIN superhero AS T2 ON T1.id = T2.gender_id INNER JOIN publisher AS T3 ON T3.id = T2.publisher_id WHERE T3.publisher_name = 'Marvel Comics';"]}, {"question_id": 789, "answer_sql": ["SELECT AVG(weight_kg) FROM superhero WHERE id IN ( SELECT hero_id FROM hero_attribute WHERE attribute_id IN ( SELECT id FROM attribute WHERE attribute_name = 'Intelligence' ) ) AND race_id IN ( SELECT id FROM race WHERE race = 'Alien' );"]}, {"question_id": 790, "answer_sql": ["SELECT ( SELECT weight_kg FROM superhero WHERE full_name = 'Emil Blonsky' ) - ( SELECT weight_kg FROM superhero WHERE full_name = 'Charles Chandler' );"]}, {"question_id": 791, "answer_sql": ["SELECT AVG(height_cm) FROM superhero;", "SELECT CAST(SUM(height_cm) AS REAL) / COUNT(*) FROM superhero;"]}, {"question_id": 792, "answer_sql": ["SELECT T2.power_name FROM superhero AS T1 INNER JOIN superpower AS T2 ON T1.id = T2.id WHERE T1.superhero_name = 'Abomination';", "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Abomination';"]}, {"question_id": 793, "answer_sql": ["SELECT COUNT(*) FROM superhero WHERE race_id = 21 AND gender_id = 1;", "SELECT COUNT(*) FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.race = 'god/eternal' AND T3.gender = 'male';"]}, {"question_id": 794, "answer_sql": ["SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Speed' ORDER BY T2.attribute_value DESC LIMIT 1;"]}, {"question_id": 795, "answer_sql": ["SELECT COUNT(*) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Neutral';"]}, {"question_id": 796, "answer_sql": ["SELECT T1.attribute_name, T2.attribute_value FROM attribute AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.attribute_id INNER JOIN superhero AS T3 ON T3.id = T2.hero_id WHERE T3.superhero_name = '3-D Man';"]}, {"question_id": 797, "answer_sql": ["SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Brown';", "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'blue' AND T3.colour = 'brown';"]}, {"question_id": 798, "answer_sql": ["SELECT T1.publisher_name FROM publisher AS T1 INNER JOIN superhero AS T2 ON T1.id = T2.publisher_id WHERE T2.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy')"]}, {"question_id": 799, "answer_sql": ["SELECT COUNT(*) FROM superhero WHERE publisher_id = 1;"]}, {"question_id": 800, "answer_sql": ["SELECT CAST(COUNT(CASE WHEN T2.colour = 'Blue' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id;", "SELECT CAST(COUNT(CASE WHEN T1.eye_colour_id = 7 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Blue';"]}, {"question_id": 801, "answer_sql": ["SELECT CAST(SUM(CASE WHEN gender = 'Male' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN gender = 'Female' THEN 1 ELSE 0 END) FROM ( SELECT T1.gender FROM gender AS T1 INNER JOIN superhero AS T2 ON T1.id = T2.gender_id );"]}, {"question_id": 802, "answer_sql": ["SELECT superhero_name FROM superhero ORDER BY height_cm DESC LIMIT 1;"]}, {"question_id": 803, "answer_sql": ["SELECT id FROM superpower WHERE power_name = 'Cryokinesis';"]}, {"question_id": 804, "answer_sql": ["SELECT superhero_name FROM superhero WHERE id = 294;"]}, {"question_id": 805, "answer_sql": ["SELECT full_name FROM superhero WHERE full_name IS NOT NULL AND (weight_kg IS NULL OR weight_kg = 0);"]}, {"question_id": 806, "answer_sql": ["SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Karen Beecher-Duncan';"]}, {"question_id": 807, "answer_sql": ["SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id WHERE T1.full_name = 'Helen Parr'"]}, {"question_id": 808, "answer_sql": ["SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.weight_kg = 108 AND T1.height_cm = 188"]}, {"question_id": 809, "answer_sql": ["SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.id = 38;"]}, {"question_id": 810, "answer_sql": ["SELECT T3.race FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN race AS T3 ON T3.id = T1.race_id WHERE T2.attribute_value = ( SELECT MAX(attribute_value) FROM hero_attribute ) GROUP BY T3.race;"]}, {"question_id": 811, "answer_sql": ["SELECT T3.alignment, T4.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T4 ON T4.id = T2.power_id INNER JOIN alignment AS T3 ON T3.id = T1.alignment_id WHERE T1.superhero_name = 'Atom IV';"]}, {"question_id": 812, "answer_sql": ["SELECT T1.full_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Blue' LIMIT 5;"]}, {"question_id": 813, "answer_sql": ["SELECT AVG(attribute_value) FROM hero_attribute WHERE hero_id IN ( SELECT id FROM superhero WHERE alignment_id = 3 ) AND attribute_id = 6;", "SELECT AVG(attribute_value) FROM hero_attribute WHERE hero_id IN ( SELECT id FROM superhero WHERE alignment_id = ( SELECT id FROM alignment WHERE alignment = 'Neutral' ) );", "SELECT AVG(attribute_value) FROM hero_attribute ha JOIN attribute a ON ha.attribute_id = a.id JOIN superhero s ON ha.hero_id = s.id WHERE a.attribute_name = 'Neutral' AND s.alignment_id = 3;"]}, {"question_id": 814, "answer_sql": ["SELECT T3.colour FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN colour AS T3 ON T3.id = T1.skin_colour_id WHERE T2.attribute_value = 100;"]}, {"question_id": 815, "answer_sql": ["SELECT COUNT(*) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id INNER JOIN gender AS T3 ON T3.id = T1.gender_id WHERE T2.alignment = 'Good' AND T3.gender = 'Female';"]}, {"question_id": 816, "answer_sql": ["SELECT superhero_name FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute_value BETWEEN 75 AND 80;"]}, {"question_id": 817, "answer_sql": ["SELECT T1.race FROM race AS T1 INNER JOIN superhero AS T2 ON T1.id = T2.race_id INNER JOIN colour AS T3 ON T2.hair_colour_id = T3.id INNER JOIN gender AS T4 ON T2.gender_id = T4.id WHERE T3.colour = 'blue' AND T4.gender = 'male';"]}, {"question_id": 818, "answer_sql": ["SELECT CAST(COUNT(CASE WHEN T3.gender = 'female' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.alignment = 'Bad';"]}, {"question_id": 819, "answer_sql": ["SELECT ( SELECT COUNT(*) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.id = 7 ) - ( SELECT COUNT(*) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.id = 1 ) AS num;", "SELECT ( SELECT COUNT(*) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Blue' ) - ( SELECT COUNT(*) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Blue' AND T1.weight_kg IS NULL ) AS num;", "SELECT ( SELECT COUNT(*) FROM superhero WHERE eye_colour_id = 7 AND weight_kg IS NULL ) - ( SELECT COUNT(*) FROM superhero WHERE eye_colour_id != 7 AND weight_kg IS NULL ) AS num;", "SELECT COUNT(CASE WHEN T1.weight_kg = 0 THEN 1 ELSE NULL END) - COUNT(CASE WHEN T2.id = 1 THEN 1 ELSE NULL END) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.id = 7;", "SELECT ( SELECT COUNT(*) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'blue' ) - ( SELECT COUNT(*) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'blue' AND T1.weight_kg IS NULL ) AS num;"]}, {"question_id": 820, "answer_sql": ["SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Hulk' AND T3.attribute_name = 'Strength';"]}, {"question_id": 821, "answer_sql": ["SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id WHERE T1.superhero_name = 'Ajax';"]}, {"question_id": 822, "answer_sql": ["SELECT COUNT(*) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id INNER JOIN colour AS T3 ON T1.skin_colour_id = T3.id WHERE T2.alignment = 'Bad' AND T3.colour = 'Green';", "SELECT COUNT(*) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id INNER JOIN colour AS T3 ON T1.eye_colour_id = T3.id WHERE T2.alignment = 'Bad' AND T3.colour = 'Green';"]}, {"question_id": 823, "answer_sql": ["SELECT COUNT(*) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.publisher_name = 'Marvel Comics' AND T3.gender = 'Female';"]}, {"question_id": 824, "answer_sql": ["SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id WHERE T3.power_name = 'Wind Control' ORDER BY T1.superhero_name"]}, {"question_id": 825, "answer_sql": ["SELECT T1.gender FROM gender AS T1 INNER JOIN superhero AS T2 ON T1.id = T2.gender_id INNER JOIN hero_power AS T3 ON T2.id = T3.hero_id INNER JOIN superpower AS T4 ON T3.power_id = T4.id WHERE T4.power_name = 'Phoenix Force';"]}, {"question_id": 826, "answer_sql": ["SELECT superhero_name FROM superhero WHERE publisher_id IN (SELECT id FROM publisher WHERE publisher_name = 'DC Comics') ORDER BY weight_kg DESC LIMIT 1;"]}, {"question_id": 827, "answer_sql": ["SELECT AVG(height_cm) FROM superhero WHERE publisher_id IN (SELECT id FROM publisher WHERE publisher_name = 'Dark Horse Comics') AND race_id NOT IN (SELECT id FROM race WHERE race = 'Human');"]}, {"question_id": 828, "answer_sql": ["SELECT T1.superhero_name, T1.height_cm, T1.weight_kg FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Speed' ORDER BY T1.height_cm DESC, T1.weight_kg DESC LIMIT 1;", "SELECT T1.superhero_name, T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Speed' ORDER BY T1.weight_kg, T1.height_cm;", "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T2.attribute_value = 100 AND T3.attribute_name = 'Speed' ORDER BY T1.height_cm DESC;", "SELECT T1.superhero_name, T1.height_cm, T1.weight_kg FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T2.attribute_value = 100 AND T3.attribute_name = 'Speed' ORDER BY T1.height_cm DESC;", "SELECT COUNT(*) FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T2.attribute_value = 100 AND T3.attribute_name = 'Speed';"]}, {"question_id": 829, "answer_sql": ["SELECT (SELECT COUNT(*) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'DC Comics') - (SELECT COUNT(*) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics') AS DIFFERENCE"]}, {"question_id": 830, "answer_sql": ["SELECT T1.attribute_name FROM attribute AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.attribute_id INNER JOIN superhero AS T3 ON T2.hero_id = T3.id WHERE T3.superhero_name = 'Black Panther' ORDER BY T2.attribute_value ASC LIMIT 1;"]}, {"question_id": 831, "answer_sql": ["SELECT T1.colour FROM colour AS T1 INNER JOIN superhero AS T2 ON T1.id = T2.eye_colour_id WHERE T2.superhero_name = 'Abomination';"]}, {"question_id": 832, "answer_sql": ["SELECT superhero_name FROM superhero ORDER BY height_cm DESC LIMIT 1;"]}, {"question_id": 833, "answer_sql": ["SELECT superhero_name FROM superhero WHERE superhero_name = 'Charles Chandler';"]}, {"question_id": 834, "answer_sql": []}, {"question_id": 835, "answer_sql": ["SELECT CAST(COUNT(CASE WHEN T2.alignment = 'Good' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id INNER JOIN publisher AS T3 ON T3.id = T1.publisher_id WHERE T3.publisher_name = 'Marvel Comics';"]}, {"question_id": 836, "answer_sql": ["SELECT COUNT(*) FROM superhero WHERE full_name LIKE 'John%'"]}, {"question_id": 837, "answer_sql": ["SELECT hero_id FROM hero_attribute WHERE attribute_value = (SELECT MIN(attribute_value) FROM hero_attribute);"]}, {"question_id": 838, "answer_sql": ["SELECT full_name FROM superhero WHERE superhero_name = 'Alien';"]}, {"question_id": 839, "answer_sql": ["SELECT T1.full_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.weight_kg < 100 AND T2.colour = 'Brown'"]}, {"question_id": 840, "answer_sql": ["SELECT T1.attribute_value FROM hero_attribute AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id WHERE T2.superhero_name = 'Aquababy';"]}, {"question_id": 841, "answer_sql": ["SELECT T1.weight_kg, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.id = 40;"]}, {"question_id": 842, "answer_sql": ["SELECT AVG(height_cm) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Neutral';", "SELECT AVG(height_cm) FROM superhero WHERE id IN ( SELECT hero_id FROM hero_attribute WHERE attribute_id IN ( SELECT id FROM attribute WHERE attribute_name = 'Neutral' ) );", "SELECT AVG(height_cm) FROM superhero WHERE id NOT IN (SELECT hero_id FROM hero_power WHERE power_id IN (SELECT id FROM superpower WHERE power_name = 'Telepathy')) AND alignment_id = (SELECT id FROM alignment WHERE alignment = 'Neutral');"]}, {"question_id": 843, "answer_sql": ["SELECT T1.id FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Intelligence';"]}, {"question_id": 844, "answer_sql": ["SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Blackwulf';"]}, {"question_id": 845, "answer_sql": ["SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.height_cm * 100 > ( SELECT AVG(height_cm) * 80 FROM superhero );"]}, {"question_id": 846, "answer_sql": ["SELECT T1.driverRef FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 18 AND T2.q1 IS NOT NULL ORDER BY T2.q1 DESC LIMIT 5;", "SELECT T1.driverRef FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 18 AND T2.position = 5;", "SELECT T1.driverRef FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 18 AND T2.q1 IS NOT NULL GROUP BY T1.driverRef ORDER BY COUNT(T2.q1) DESC LIMIT 1;", "SELECT T1.driverRef FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 18 AND T2.q1 = ( SELECT MAX(q1) FROM qualifying WHERE raceId = 18 );"]}, {"question_id": 847, "answer_sql": ["SELECT T1.surname FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId INNER JOIN qualifying AS T4 ON T4.raceId = T3.raceId WHERE T3.raceId = 19 AND T4.q2 IS NOT NULL ORDER BY T4.q2 ASC LIMIT 1;", "SELECT T2.surname FROM qualifying AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T1.raceId = T3.raceId WHERE T1.raceId = 19 AND T1.q2 IS NOT NULL ORDER BY T1.q2 ASC LIMIT 1;", "SELECT T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T1.raceId = T3.raceId WHERE T1.raceId = 19 AND T3.round = 2 ORDER BY T1.time LIMIT 1;", "SELECT T1.surname FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId WHERE T3.year = 19 AND T3.round = 2 ORDER BY T2.time ASC LIMIT 1;"]}, {"question_id": 848, "answer_sql": ["SELECT DISTINCT T1.year FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitID = T2.circuitId WHERE T2.name = 'Shanghai';"]}, {"question_id": 849, "answer_sql": ["SELECT url FROM circuits WHERE name = 'Circuit de Barcelona-Catalunya';"]}, {"question_id": 850, "answer_sql": ["SELECT T1.name FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T1.country = 'Germany';", "SELECT T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T1.country = 'Germany';"]}, {"question_id": 851, "answer_sql": ["SELECT T2.position FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId WHERE T1.name = 'Renault'"]}, {"question_id": 852, "answer_sql": ["SELECT COUNT(*) FROM races WHERE year = 2010 AND circuitId NOT IN ( SELECT circuitId FROM circuits WHERE country IN ('Asia', 'Europe') );", "SELECT COUNT(*) FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.year = 2010 AND circuits.country NOT IN ('Asia', 'Europe');", "SELECT COUNT(*) FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.country NOT LIKE 'Asia%' AND circuits.country NOT LIKE 'Europe%' AND races.year = 2010 AND races.name = 'grand prix';"]}, {"question_id": 853, "answer_sql": ["SELECT T1.name FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.country = 'Spain';", "SELECT T1.name FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T1.country = 'Spain';"]}, {"question_id": 854, "answer_sql": ["SELECT lat, lng FROM circuits WHERE name = 'Australian grand prix';"]}, {"question_id": 855, "answer_sql": ["SELECT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T1.name = 'Sepang International Circuit';"]}, {"question_id": 856, "answer_sql": ["SELECT T1.time FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitID = T2.circuitId WHERE T2.name = 'Sepang International Circuit';"]}, {"question_id": 857, "answer_sql": ["SELECT lat, lng FROM circuits WHERE name = 'Abu Dhabi Grand Prix';"]}, {"question_id": 858, "answer_sql": ["SELECT T1.nationality FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId WHERE T2.raceId = 24 AND T2.points = 1"]}, {"question_id": 859, "answer_sql": ["SELECT T1.q1 FROM qualifying AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.forename = 'Bruno' AND T2.surname = 'Senna' AND T1.raceId = 354;"]}, {"question_id": 860, "answer_sql": ["SELECT T1.nationality FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 355 AND T2.q2 LIKE '1:40%'", "SELECT T1.nationality FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.q2 = '1:40.0' AND T2.raceId = 355;"]}, {"question_id": 861, "answer_sql": ["SELECT T1.number FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 903 AND T2.q3 LIKE '1:54%'", "SELECT T1.number FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 903 AND T2.q3 = '0:01:54'", "SELECT T2.number FROM qualifying AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId AND T1.driverId = T2.driverId WHERE T1.raceId = 903 AND T1.q3 LIKE '1:54%'"]}, {"question_id": 862, "answer_sql": ["SELECT COUNT(T1.driverId) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.name = 'Bahrain Grand Prix' AND T2.year = 2007 AND T1.time IS NOT NULL;", "SELECT COUNT(driverId) FROM results WHERE raceId = ( SELECT raceId FROM races WHERE name = 'Bahrain Grand Prix' AND year = 2007 ) AND time = '';"]}, {"question_id": 863, "answer_sql": ["SELECT T1.url FROM seasons AS T1 INNER JOIN races AS T2 ON T1.year = T2.year WHERE T2.raceId = 901;", "SELECT T2.url FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T1.raceId = 901;"]}, {"question_id": 864, "answer_sql": ["SELECT COUNT(*) FROM results WHERE raceId = ( SELECT raceId FROM races WHERE date = '2015-11-29' );", "SELECT COUNT(*) FROM results WHERE raceId IN ( SELECT raceId FROM races WHERE date = '2015-11-29' ) AND time IS NOT NULL;"]}, {"question_id": 865, "answer_sql": ["SELECT forename, surname, dob FROM drivers WHERE driverId IN ( SELECT driverId FROM results WHERE raceId = 592 ) ORDER BY dob ASC LIMIT 1;"]}, {"question_id": 866, "answer_sql": ["SELECT T1.forename, T1.surname, T1.url FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 161 AND T2.time = '1:01:27'", "SELECT T1.forename, T1.surname, T1.url FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T2.lap = 1 AND T2.raceId = 161;"]}, {"question_id": 867, "answer_sql": ["SELECT T1.nationality FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.fastestLapTime IS NOT NULL AND T2.fastestLapSpeed IS NOT NULL AND T2.raceId = 933 ORDER BY T2.fastestLapSpeed DESC LIMIT 1;", "SELECT T1.nationality FROM constructors AS T1 INNER JOIN drivers AS T2 ON T1.constructorId = T2.driverId INNER JOIN results AS T3 ON T2.driverId = T3.driverId WHERE T3.fastestLapSpeed IS NOT NULL AND T3.raceId = 933;", "SELECT T1.nationality FROM constructors AS T1 INNER JOIN drivers AS T2 ON T1.constructorId = T2.driverId INNER JOIN results AS T3 ON T2.driverId = T3.driverId WHERE T3.raceId = 933 ORDER BY T3.fastestLapSpeed DESC LIMIT 1;"]}, {"question_id": 868, "answer_sql": ["SELECT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'Malaysian Grand Prix';", "SELECT lat, lng FROM circuits WHERE name = 'Malaysian Grand Prix';"]}, {"question_id": 869, "answer_sql": ["SELECT T1.url FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId WHERE T2.raceId = 9 ORDER BY T2.points DESC LIMIT 1;"]}, {"question_id": 870, "answer_sql": ["SELECT T1.q1 FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.forename = 'Lucas' AND T2.surname = 'di Grassi' AND T1.raceId = 345;"]}, {"question_id": 871, "answer_sql": ["SELECT T2.nationality FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId INNER JOIN races AS T3 ON T3.raceId = T1.raceId WHERE T1.raceId = 347 AND T1.q2 LIKE '1:15%'", "SELECT T2.nationality FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T1.raceId = 347 AND T1.q2 LIKE '1:15%' ORDER BY T2.nationality;"]}, {"question_id": 872, "answer_sql": ["SELECT T1.code FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 45 AND T2.q3 LIKE '1:33%';", "SELECT T1.code FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 45 AND T2.fastestLapTime = '1:33' AND T2.fastestLap = 3;"]}, {"question_id": 873, "answer_sql": ["SELECT T1.time FROM results AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.forename = 'Bruce' AND T2.surname = 'McLaren' AND T1.raceId = 743;"]}, {"question_id": 874, "answer_sql": ["SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.name = 'San Marino Grand Prix' AND T2.position = 2 AND T3.year = 2006;"]}, {"question_id": 875, "answer_sql": ["SELECT T1.url FROM seasons AS T1 INNER JOIN races AS T2 ON T1.year = T2.year WHERE T2.raceId = 901;", "SELECT T2.url FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T1.raceId = 901;"]}, {"question_id": 876, "answer_sql": ["SELECT COUNT(driverId) FROM results WHERE raceId IN ( SELECT raceId FROM races WHERE date = '2015-11-29' );", "SELECT COUNT(*) FROM results WHERE raceId IN ( SELECT raceId FROM races WHERE date = '2015-11-29' ) AND time IS NOT NULL;"]}, {"question_id": 877, "answer_sql": ["SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 872 AND T2.time IS NOT NULL ORDER BY T1.dob DESC LIMIT 1;", "SELECT forename, surname FROM drivers WHERE driverId IN ( SELECT driverId FROM results WHERE raceId = 872 ) ORDER BY dob DESC LIMIT 1;"]}, {"question_id": 878, "answer_sql": ["SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T1.raceId = 348 ORDER BY T1.time ASC LIMIT 1;"]}, {"question_id": 879, "answer_sql": ["SELECT T1.nationality FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.fastestLapSpeed IS NOT NULL ORDER BY T2.fastestLapSpeed DESC LIMIT 1;", "SELECT T1.nationality FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.fastestLapSpeed IS NOT NULL AND T2.raceId = 348;", "SELECT T1.nationality FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.fastestLapSpeed IS NOT NULL AND T2.raceId = 348 ORDER BY T2.fastestLapSpeed DESC LIMIT 1;"]}, {"question_id": 880, "answer_sql": ["SELECT CAST((SUM(CASE WHEN T2.raceId = 853 THEN T2.fastestLapSpeed ELSE 0 END) - SUM(CASE WHEN T2.raceId = 854 THEN T2.fastestLapSpeed ELSE 0 END)) AS REAL) * 100 / SUM(CASE WHEN T2.raceId = 854 THEN T2.fastestLapSpeed ELSE 0 END) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T1.forename = 'Paul' AND T1.surname = 'di Resta';", "SELECT CAST((SUM(CASE WHEN T1.raceId = 853 THEN T1.fastestLapSpeed ELSE 0 END) - SUM(CASE WHEN T1.raceId = 854 THEN T1.fastestLapSpeed ELSE 0 END)) AS REAL) * 100 / SUM(CASE WHEN T1.raceId = 854 THEN T1.fastestLapSpeed ELSE 0 END) FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.forename = 'Paul' AND T2.surname = 'Dresta';"]}, {"question_id": 881, "answer_sql": ["SELECT CAST(COUNT(CASE WHEN T2.time IS NOT NULL THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T2.time) FROM results AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 19830716;", "SELECT CAST(COUNT(CASE WHEN T1.time IS NOT NULL THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.time) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.year = 1983 AND T2.date = '1983-07-16';", "SELECT CAST(COUNT(CASE WHEN T1.time IS NOT NULL THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.driverId) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.year = 1983 AND T2.date = '1983-07-16';", "SELECT CAST(SUM(CASE WHEN T2.time IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.driverId) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.year = 1983 AND T1.time IS NOT NULL;"]}, {"question_id": 882, "answer_sql": ["SELECT year FROM races WHERE name = 'Singapore Grand Prix' ORDER BY year ASC LIMIT 1;"]}, {"question_id": 883, "answer_sql": ["SELECT COUNT(raceId) FROM races WHERE year = 2005 ORDER BY name DESC", "SELECT name FROM races WHERE year = 2005 ORDER BY name DESC;"]}, {"question_id": 884, "answer_sql": ["SELECT name FROM races WHERE date LIKE '20%' AND name NOT IN ( SELECT name FROM races WHERE date LIKE '20%' );", "SELECT name FROM races WHERE date LIKE '20%' AND name NOT IN ( SELECT name FROM races WHERE date LIKE '20%' AND year = 2022 );", "SELECT T1.name, T2.name FROM races AS T1 INNER JOIN races AS T2 ON T1.year = T2.year AND T1.date = T2.date WHERE T1.name <> 'N/A' ORDER BY T1.year, T1.date ASC LIMIT 1;", "SELECT T1.name FROM races AS T1 INNER JOIN seasons AS T2 ON T1.year = T2.year WHERE T2.year = ( SELECT year FROM races ORDER BY date LIMIT 1 );"]}, {"question_id": 885, "answer_sql": ["SELECT name, date FROM races WHERE year = 1999 ORDER BY round DESC LIMIT 1;"]}, {"question_id": 886, "answer_sql": ["SELECT year FROM races GROUP BY year ORDER BY COUNT(round) DESC LIMIT 1;", "SELECT year FROM races GROUP BY year ORDER BY round DESC LIMIT 1;"]}, {"question_id": 887, "answer_sql": ["SELECT name FROM races WHERE year = 2017 AND name NOT IN ( SELECT name FROM races WHERE year = 2000 );", "SELECT name FROM races WHERE year = 2017 AND year != ( SELECT year FROM seasons WHERE year = 2000 );"]}, {"question_id": 888, "answer_sql": ["SELECT T1.country, T1.name, T1.location FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'European Grand Prix' ORDER BY T2.year ASC LIMIT 1;", "SELECT T1.country, T1.name, T1.location FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = ( SELECT name FROM races WHERE year = 1950 ) AND T1.country = 'Europe';", "SELECT T1.country, T1.name, T1.location FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = ( SELECT name FROM races WHERE year = 1950 ) ORDER BY T2.year ASC LIMIT 1;", "SELECT T1.country, T1.name, T1.location FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.year = ( SELECT MIN(year) FROM races );", "SELECT T1.country, T1.name, T1.location FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = ( SELECT name FROM races WHERE year = ( SELECT MIN(year) FROM races ) AND round = 1 );"]}, {"question_id": 889, "answer_sql": ["SELECT T2.year FROM races AS T1 INNER JOIN seasons AS T2 ON T2.year = T1.year WHERE T1.name = 'British Grand Prix' AND T2.year = ( SELECT MAX(T2.year) FROM races AS T1 INNER JOIN seasons AS T2 ON T2.year = T1.year WHERE T1.name = 'Brands Hatch' );", "SELECT T2.year FROM races AS T1 INNER JOIN seasons AS T2 ON T1.year = T2.year WHERE T1.name = 'British Grand Prix' ORDER BY T2.year DESC LIMIT 1;", "SELECT T1.year FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitID = T2.circuitId INNER JOIN seasons AS T3 ON T1.year = T3.year WHERE T2.name = 'Brands Hatch' AND T1.name = 'British Grand Prix' ORDER BY T1.year DESC LIMIT 1;", "SELECT T1.year FROM seasons AS T1 INNER JOIN races AS T2 ON T1.year = T2.year WHERE T2.name = 'British Grand Prix' AND T2.circuitId = ( SELECT circuitId FROM circuits WHERE name = 'Brands Hatch' );"]}, {"question_id": 890, "answer_sql": ["SELECT COUNT(DISTINCT T2.year) FROM races AS T1 INNER JOIN seasons AS T2 ON T2.year = T1.year INNER JOIN circuits AS T3 ON T3.circuitId = T1.circuitId WHERE T3.name = 'Silverstone Circuit' AND T1.name = 'United Kindom Grand Prix';"]}, {"question_id": 891, "answer_sql": ["SELECT T2.forename, T2.surname, T1.position FROM driverStandings AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T1.raceId = T3.raceId WHERE T3.name = 'Singapore Grand Prix' AND T3.year = 2010 ORDER BY T1.position;", "SELECT T2.forename, T2.surname FROM driverStandings AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T1.raceId = T3.raceId WHERE T3.name = 'Singapore Grand Prix' ORDER BY T1.position;", "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.name = 'Singapore Grand Prix' AND T3.year = 2010 ORDER BY T2.position;", "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.name = 'Singapore Grand Prix' ORDER BY T2.position;"]}, {"question_id": 892, "answer_sql": ["SELECT T2.forename, T2.surname, T1.points FROM results AS T1 INNER JOIN drivers AS T2 on T2.driverId = T1.driverId ORDER BY T1.points DESC LIMIT 1;", "SELECT T2.forename, T2.surname, T1.points FROM driverStandings AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId ORDER BY T1.points DESC LIMIT 1;"]}, {"question_id": 893, "answer_sql": ["SELECT T2.forename, T2.surname, T1.points FROM results AS T1 INNER JOIN drivers AS T2 on T2.driverId = T1.driverId INNER JOIN races AS T3 on T3.raceId = T1.raceId WHERE T3.name = 'Chinese Grand Prix' ORDER BY T1.points DESC LIMIT 3;", "SELECT T2.forename, T2.surname, T1.points FROM driverStandings AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T1.raceId = T3.raceId WHERE T3.name = 'Chinese Grand Prix' ORDER BY T1.points DESC LIMIT 3;", "SELECT T1.forename, T1.surname, T2.points FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.name = 'Chinese Grand Prix' AND T3.year = 2017 ORDER BY T2.points DESC LIMIT 3;"]}, {"question_id": 894, "answer_sql": ["SELECT lap, driverId, raceId FROM lapTimes ORDER BY time ASC LIMIT 1;", "SELECT T1.lap, T2.driverId, T2.time FROM lapTimes AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId AND T1.driverId = T2.driverId ORDER BY T1.time ASC LIMIT 1;", "SELECT T1.driverId, T1.raceId, T1.time FROM lapTimes AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId AND T1.raceId = T2.raceId WHERE T1.time = ( SELECT MIN(time) FROM lapTimes );", "SELECT T1.driverId, T2.name FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T1.time = ( SELECT MIN(time) FROM lapTimes );"]}, {"question_id": 895, "answer_sql": ["SELECT AVG(lapTimes.time) FROM lapTimes INNER JOIN drivers ON lapTimes.driverId = drivers.driverId INNER JOIN races ON lapTimes.raceId = races.raceId WHERE drivers.forename = 'Sebastian' AND drivers.surname = 'Vettel' AND races.name = 'Chinese Grand Prix' AND races.year = 2009;"]}, {"question_id": 896, "answer_sql": ["SELECT CAST(SUM(CASE WHEN T2.position <> 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId WHERE T1.forename = 'Hamilton' AND T1.surname = 'Fleming' AND T3.year >= 2010;"]}, {"question_id": 897, "answer_sql": ["SELECT T1.forename, T1.surname, T1.nationality, AVG(T2.points) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId WHERE T2.wins = ( SELECT MAX(wins) FROM driverStandings ) GROUP BY T1.driverId;", "SELECT T1.forename, T1.surname, T1.nationality, AVG(T2.points) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId WHERE T2.wins = ( SELECT MAX(wins) FROM driverStandings ) GROUP BY T1.forename, T1.surname, T1.nationality;"]}, {"question_id": 898, "answer_sql": ["SELECT forename, surname, nationality, ROUND(JULIANDAY(CURRENT_DATE) - JULIANDAY(dob)) / 365 as age FROM drivers WHERE nationality = 'Japanese' ORDER BY age LIMIT 1;", "SELECT forename, surname, nationality, ROUND(365 * (JULIANDAY(CURRENT_DATE) - JULIANDAY(dob)) / 365) AS age FROM drivers WHERE nationality = 'Japanese' ORDER BY age LIMIT 1;", "SELECT forename, surname, ROUND(JULIANDAY(CURRENT_DATE) - JULIANDAY(dob)) / 365 FROM drivers WHERE nationality = 'Japanese' ORDER BY dob DESC LIMIT 1;", "SELECT forename, surname, dob FROM drivers WHERE nationality = 'Japanese' ORDER BY dob DESC LIMIT 1;", "SELECT forename, surname, ROUND(JULIANDAY(CURRENT_DATE) - JULIANDAY(dob)) / 365 as age FROM drivers WHERE nationality = 'Japanese' ORDER BY age DESC LIMIT 1;"]}, {"question_id": 899, "answer_sql": ["SELECT T1.name FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.year BETWEEN 1990 AND 2000 GROUP BY T1.circuitId HAVING COUNT(T2.raceId) = 4;"]}, {"question_id": 900, "answer_sql": ["SELECT DISTINCT T1.name, T1.location, T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T1.country = 'USA' AND T2.year = 2006;", "SELECT DISTINCT T1.name, T1.location, T2.name, T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'USA';", "SELECT DISTINCT T1.name, T1.location, T3.name, T3.date FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId INNER JOIN races AS T3 ON T2.year = T3.year AND T2.circuitId = T3.circuitId WHERE T1.country = 'USA' AND T3.year = 2006;", "SELECT DISTINCT T1.name, T1.location, T2.name, T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'USA' AND T2.year = 2006;"]}, {"question_id": 901, "answer_sql": ["SELECT T1.name, T2.name, T2.location FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitID = T2.circuitId WHERE T1.year = 2005 AND T1.date LIKE '2005-09%';"]}, {"question_id": 902, "answer_sql": ["SELECT T1.name FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Alex' AND T3.surname = 'Yoong' AND T2.position < 10;", "SELECT T1.name FROM races AS T1 INNER JOIN lapTimes AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Alex' AND T3.surname = 'Yoong' AND T2.position < 10;"]}, {"question_id": 903, "answer_sql": ["SELECT MAX(T2.points) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId INNER JOIN circuits AS T4 ON T3.circuitId = T4.circuitId WHERE T1.forename = 'Michael' AND T1.surname = 'Schumacher' AND T4.name = 'Sepang International Circuit';", "SELECT MAX(T2.wins) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId INNER JOIN circuits AS T4 ON T3.circuitId = T4.circuitId WHERE T1.forename = 'Michael' AND T1.surname = 'Schumacher' AND T4.name = 'Sepang International Circuit';"]}, {"question_id": 904, "answer_sql": ["SELECT T1.name, T1.year FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Michael' AND T3.surname = 'Schumacher' ORDER BY T2.milliseconds ASC LIMIT 1;", "SELECT T1.name, T1.year FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Michael' AND T3.surname = 'Schumacher' ORDER BY T2.fastestLap ASC LIMIT 1;", "SELECT T2.name, T2.year FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN drivers AS T3 on T3.driverId = T1.driverId WHERE T3.forename = 'Michael' AND T3.surname = 'Schumacher' ORDER BY T1.milliseconds ASC LIMIT 1;"]}, {"question_id": 905, "answer_sql": []}, {"question_id": 906, "answer_sql": ["SELECT T2.name, T1.points FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN drivers AS T3 on T1.driverId = T3.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' ORDER BY T2.year ASC LIMIT 1;", "SELECT T2.year, T1.points FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T1.driverId = ( SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton' ) ORDER BY T2.year ASC LIMIT 1;", "SELECT T1.forename, T1.surname, T2.points FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton' ORDER BY T2.raceId ASC LIMIT 1;", "SELECT T1.forename, T1.surname, T2.points FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton' ORDER BY T3.year ASC LIMIT 1;"]}, {"question_id": 907, "answer_sql": ["SELECT T1.name, T2.country FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitID = T2.circuitID WHERE T1.year = 2017 ORDER BY T1.date ASC;"]}, {"question_id": 908, "answer_sql": ["SELECT T1.name, T1.year, T3.location, T2.lap FROM races AS T1 INNER JOIN lapTimes AS T2 ON T1.raceId = T2.raceId INNER JOIN circuits AS T3 ON T1.circuitId = T3.circuitId GROUP BY T2.lap ORDER BY lap DESC LIMIT 1;", "SELECT T1.name, T1.year, T2.location FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitID = T2.circuitId INNER JOIN lapTimes AS T3 ON T3.raceId = T1.raceId GROUP BY T1.name, T1.year, T2.location ORDER BY COUNT(T3.lap) DESC LIMIT 1;"]}, {"question_id": 909, "answer_sql": ["SELECT CAST(COUNT(CASE WHEN T2.country = 'Germany' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.raceId) FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitID = T2.circuitId WHERE T1.name = 'European Grand Prix';", "SELECT CAST(COUNT(CASE WHEN T2.country = 'Germany' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T2.country) FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitID = T2.circuitId WHERE T1.name = 'Europearn Grand Prix';"]}, {"question_id": 910, "answer_sql": ["SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit';"]}, {"question_id": 911, "answer_sql": ["SELECT name, lat FROM circuits WHERE name IN ('Silverstone Circuit', 'Hockenheimring', 'Hungaroring') ORDER BY lat DESC LIMIT 1;", "SELECT name FROM circuits WHERE name IN ('Silverstone Circuit', 'Hockenheimring', 'Hungaroring') ORDER BY lat DESC LIMIT 1;"]}, {"question_id": 912, "answer_sql": ["SELECT circuitRef FROM circuits WHERE name = 'Marina Bay Street Circuit';"]}, {"question_id": 913, "answer_sql": ["SELECT country FROM circuits ORDER BY alt DESC LIMIT 1;"]}, {"question_id": 914, "answer_sql": ["SELECT count(*) FROM drivers WHERE code IS NULL;"]}, {"question_id": 915, "answer_sql": ["SELECT nationality FROM drivers ORDER BY dob LIMIT 1;"]}, {"question_id": 916, "answer_sql": ["SELECT surname FROM drivers WHERE nationality = 'italian';", "SELECT surname FROM drivers WHERE nationality = 'Italian';"]}, {"question_id": 917, "answer_sql": ["SELECT url FROM drivers WHERE forename = 'Anthony' AND surname = 'Davidson';"]}, {"question_id": 918, "answer_sql": ["SELECT driverRef FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton';"]}, {"question_id": 919, "answer_sql": ["SELECT T1.name FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = '2009 Spanish Grand Prix'", "SELECT T1.name FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Spanish Grand Prix' AND T2.year = 2009;"]}, {"question_id": 920, "answer_sql": ["SELECT DISTINCT T1.year FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitID = T2.circuitId WHERE T2.name = 'Silverstone Circuit';"]}, {"question_id": 921, "answer_sql": ["SELECT T1.name, T1.url FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitID = T2.circuitId WHERE T2.name = 'Silverstone Circuit';", "SELECT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T1.name = 'Silverstone Circuit';", "SELECT DISTINCT T1.name, T1.url FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Silverstone Circuit';", "SELECT T1.name, T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T1.name = 'Silverstone Circuit';"]}, {"question_id": 922, "answer_sql": ["SELECT T1.time FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.year = 2010 AND T2.name = 'Abu Dhabi Circuit';", "SELECT T1.time FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.year = 2010 AND T2.name = 'Abu Dhabi Grand Prix';"]}, {"question_id": 923, "answer_sql": ["SELECT COUNT(T1.circuitId) FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T1.country = 'Italy';", "SELECT COUNT(*) FROM circuits WHERE country = 'Italy';"]}, {"question_id": 924, "answer_sql": ["SELECT date FROM races WHERE name = 'Barcelona-Catalunya' AND circuitId = (SELECT circuitId FROM circuits WHERE name = 'Barcelona-Catalunya');", "SELECT T1.date FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitID = T2.circuitId WHERE T2.name = 'Circuit de Barcelona-Catalunya';"]}, {"question_id": 925, "answer_sql": ["SELECT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.year = 2009 AND T2.name = 'Spanish Grand Prix';", "SELECT url FROM circuits WHERE name = 'Spanish Grand Prix' AND circuitId IN ( SELECT circuitId FROM races WHERE year = 2009 );"]}, {"question_id": 926, "answer_sql": ["SELECT T1.fastestLapTime FROM results AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' ORDER BY T1.fastestLapTime ASC LIMIT 1;", "SELECT MIN(fastestLapTime) FROM results WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton');"]}, {"question_id": 927, "answer_sql": ["SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.fastestLapTime IS NOT NULL ORDER BY T2.fastestLapSpeed DESC LIMIT 1;"]}, {"question_id": 928, "answer_sql": ["SELECT T2.driverRef FROM results AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T1.raceId = T3.raceId WHERE T1.rank = 1 AND T3.name = 'Australian Grand Prix' AND T3.year = 2008;", "SELECT T3.forename, T3.surname FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.name = 'Australian Grand Prix' AND T1.year = 2008 AND T2.rank = 1;"]}, {"question_id": 929, "answer_sql": ["SELECT T3.name FROM results AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T1.raceId = T3.raceId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton'"]}, {"question_id": 930, "answer_sql": ["SELECT T2.name FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN drivers AS T3 on T1.driverId = T3.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' ORDER BY T1.rank ASC LIMIT 1;", "SELECT T1.name FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T2.rank = 1 AND T2.driverId = ( SELECT driverId FROM drivers WHERE name = 'Lewis Hamilton' );"]}, {"question_id": 931, "answer_sql": ["SELECT T1.fastestLapSpeed FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.name = 'Spanish Grand Prix' AND T1.fastestLapSpeed IS NOT NULL ORDER BY T1.fastestLapSpeed DESC LIMIT 1;", "SELECT T1.fastestLapSpeed FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.name = '2009 Spanish Grand Prix' ORDER BY T1.fastestLapSpeed DESC LIMIT 1;", "SELECT MAX(T1.fastestLapSpeed) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.name = 'Spanish Grand Prix' AND T2.year = 2009;"]}, {"question_id": 932, "answer_sql": ["SELECT DISTINCT T2.year FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton';", "SELECT T3.year FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton'"]}, {"question_id": 933, "answer_sql": ["SELECT positionOrder FROM results WHERE driverId = ( SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton' ) AND raceId = ( SELECT raceId FROM races WHERE name = 'Australian Grand Prix' AND year = 2008 );", "SELECT T2.rank FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton' AND T3.name = 'Australian Grand Prix' AND T3.year = 2008"]}, {"question_id": 934, "answer_sql": ["SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId WHERE T3.name = 'Australian Grand Prix' AND T2.grid = 4 AND T3.year = 2008;", "SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T1.raceId = T3.raceId WHERE T1.grid = 4 AND T1.raceId = 135 AND T3.name = 'Australian Grand Prix';", "SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T1.raceId = T3.raceId WHERE T1.grid = 4 AND T3.name = 'Australian Grand Prix';"]}, {"question_id": 935, "answer_sql": ["SELECT COUNT(*) FROM results WHERE raceId = ( SELECT raceId FROM races WHERE name = 'Australian Grand Prix' AND year = 2008 ) AND time IS NOT NULL;", "SELECT COUNT(*) FROM results WHERE raceId = (SELECT raceId FROM races WHERE name = 'Australian Grand Prix') AND time IS NOT NULL;"]}, {"question_id": 936, "answer_sql": ["SELECT T1.fastestLapTime FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN drivers AS T3 on T1.driverId = T3.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' AND T2.year = 2008 AND T2.name = 'Australian Grand Prix';", "SELECT T1.fastestLap, T1.fastestLapTime FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN drivers AS T3 on T1.driverId = T3.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' AND T2.year = 2008 AND T2.name = 'Australian Grand Prix';"]}, {"question_id": 937, "answer_sql": ["SELECT T1.time FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Australian Grand Prix' AND T1.rank = 2 AND T2.year = 2008", "SELECT T2.time FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.name = 'Australian Grand Prix' AND T1.rank = 2 AND T2.year = 2008"]}, {"question_id": 938, "answer_sql": ["SELECT T2.time, T1.url FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.name = 'Australian Grand Prix' AND T3.year = 2008 AND T2.time LIKE '__:%:__.___' ORDER BY T2.time ASC LIMIT 1;", "SELECT T2.time, T1.url FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId WHERE T3.name = 'Australian Grand Prix' AND T3.year = 2008 AND T2.time LIKE '_:%:__.___';", "SELECT T2.time, T2.url FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.name = 'Australian Grand Prix' AND T2.year = 2008 AND T1.position = 1;", "SELECT T2.forename, T2.surname, T1.url FROM circuits AS T1 INNER JOIN drivers AS T2 ON T1.circuitId = T2.driverId INNER JOIN races AS T3 ON T2.driverId = T3.raceId INNER JOIN results AS T4 ON T2.driverId = T4.driverId INNER JOIN seasons AS T5 ON T3.year = T5.year WHERE T3.name = 'Australian Grand Prix' AND T5.year = 2008 AND T4.time LIKE '__:__.___%' ORDER BY T4.time ASC LIMIT 1;", "SELECT T1.forename, T1.surname, T1.url FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T2.position = 1 AND T3.name = 'Australian Grand Prix' AND T3.year = 2008;"]}, {"question_id": 939, "answer_sql": ["SELECT COUNT(T2.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.name = 'Australian Grand Prix' AND T2.driverId IN ( SELECT driverId FROM drivers WHERE nationality = 'American' );", "SELECT COUNT(T1.driverId) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T1.nationality = 'American' AND T3.name = 'Australian Grand Prix' AND T3.year = 2008;"]}, {"question_id": 940, "answer_sql": ["SELECT COUNT(T2.driverId) FROM results AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T1.raceId = T3.raceId WHERE T3.name = 'Australian Grand Prix' AND T1.time IS NOT NULL;", "SELECT COUNT(T1.driverId) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T2.name = 'Australian Grand Prix' AND T2.year = 2008 AND T1.time IS NOT NULL;", "SELECT COUNT(T1.driverId) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN circuits AS T3 ON T2.circuitId = T3.circuitId WHERE T2.name = 'Australian Grand Prix' AND T2.year = 2008 AND T1.time IS NOT NULL;"]}, {"question_id": 941, "answer_sql": ["SELECT SUM(T2.points) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton';", "SELECT SUM(T2.points) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton';"]}, {"question_id": 942, "answer_sql": ["SELECT AVG(fastestLapTime) FROM results WHERE driverId = ( SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton' );"]}, {"question_id": 943, "answer_sql": ["SELECT CAST(COUNT(CASE WHEN T1.time IS NOT NULL THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.raceId) FROM lapTimes AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Australian Grand Prix' AND T2.year = 2008", "SELECT CAST(COUNT(CASE WHEN T2.time IS NOT NULL THEN 1 ELSE NULL END) AS REAL) / COUNT(T2.raceId) FROM results AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.name = 'Australian Grand Prix' AND T3.year = 2008"]}, {"question_id": 944, "answer_sql": ["SELECT CAST((SUM(CASE WHEN T1.position = 1 THEN T2.time ELSE 0 END) - SUM(CASE WHEN T1.position = 2 THEN T2.time ELSE 0 END)) AS REAL) * 100 / SUM(CASE WHEN T1.position = 2 THEN T2.time ELSE 0 END) FROM results AS T1 INNER JOIN races AS T2 ON T2.raceId = T1.raceId WHERE T2.name = 'Australian Grand Prix' AND T2.year = 2008 AND T1.points = 1;", "SELECT CAST((SUM(CASE WHEN T1.position = 1 THEN T2.time ELSE 0 END) - SUM(CASE WHEN T1.position = 2 THEN T2.time ELSE 0 END)) AS REAL) * 100 / SUM(CASE WHEN T1.position = 2 THEN T2.time ELSE 0 END) FROM results AS T1 INNER JOIN races AS T2 ON T2.raceId = T1.raceId WHERE T2.name = 'Australian Grand Prix' AND T2.year = 2008 AND T1.points > 0;", "SELECT CAST((SUM(IIF(T1.time IS NOT NULL, T1.time, 0)) - SUM(IIF(T3.time IS NOT NULL, T3.time, 0))) AS REAL) * 100 / SUM(IIF(T3.time IS NOT NULL, T3.time, 0)) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN results AS T3 ON T1.driverId = T3.driverId WHERE T2.name = 'Australian Grand Prix' AND T2.year = 2008 AND T1.points = 1 AND T3.points = 1;", "SELECT CAST((SUM(IIF(T1.time IS NOT NULL, T1.time, 0)) - SUM(IIF(T3.time IS NOT NULL, T3.time, 0))) AS REAL) * 100 / SUM(IIF(T3.time IS NOT NULL, T3.time, 0)) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN results AS T3 ON T3.raceId = T2.raceId WHERE T2.name = 'Australian Grand Prix' AND T2.year = 2008 AND T1.driverId = ( SELECT driverId FROM results ORDER BY time DESC LIMIT 1 );"]}, {"question_id": 945, "answer_sql": ["SELECT COUNT(circuitId) FROM circuits WHERE country = 'Australia' AND location = 'Melbourne';"]}, {"question_id": 946, "answer_sql": ["SELECT lat, lng FROM circuits WHERE country = 'USA';"]}, {"question_id": 947, "answer_sql": ["SELECT COUNT(driverId) FROM drivers WHERE nationality = 'British' AND dob > '1980-01-01';", "SELECT COUNT(driverId) FROM drivers WHERE nationality = 'British' AND STRFTIME('%Y', dob) > '1980';"]}, {"question_id": 948, "answer_sql": ["SELECT AVG(T1.points) FROM constructorResults AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T2.nationality = 'British';", "SELECT AVG(T2.points) FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId WHERE T1.nationality = 'British';"]}, {"question_id": 949, "answer_sql": ["SELECT T1.name, T2.points FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId ORDER BY T2.points DESC LIMIT 1;", "SELECT T2.name FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId ORDER BY T1.points DESC LIMIT 1;", "SELECT name FROM constructors WHERE constructorId = ( SELECT constructorId FROM constructorStandings ORDER BY points DESC LIMIT 1 );"]}, {"question_id": 950, "answer_sql": ["SELECT T2.name FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T1.raceId = 291 AND T1.points = 0;", "SELECT T2.name FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T1.raceId = 291 AND T1.points = 0"]}, {"question_id": 951, "answer_sql": ["SELECT COUNT(T1.constructorId) FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T1.points = 0 AND T2.nationality = 'Japanese' GROUP BY T2.constructorId HAVING COUNT(T1.raceId) = 2;", "SELECT COUNT(T1.constructorId) FROM constructorStandings AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T2.nationality = 'Japanese' AND T1.points = 0;", "SELECT COUNT(T1.constructorId) FROM constructorStandings AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T2.nationality = 'Japanese' AND T1.points = 0 AND T1.raceId = 2;"]}, {"question_id": 952, "answer_sql": ["SELECT DISTINCT T1.name FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId INNER JOIN results AS T3 ON T3.constructorId = T1.constructorId WHERE T3.rank = 1;", "SELECT T1.name FROM constructors AS T1 INNER JOIN results AS T2 ON T2.constructorId = T1.constructorId WHERE T2.rank = 1"]}, {"question_id": 953, "answer_sql": ["SELECT COUNT(*) FROM lapTimes AS T1 INNER JOIN constructors AS T2 ON T1.driverId = T2.constructorId WHERE T2.nationality = 'French' AND T1.lap > 50;"]}, {"question_id": 954, "answer_sql": ["SELECT CAST(SUM(CASE WHEN T1.time IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.driverId) FROM results AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T1.raceId = T3.raceId WHERE T3.year BETWEEN 2007 AND 2009 AND T2.nationality = 'Japanese';"]}, {"question_id": 955, "answer_sql": ["SELECT T2.year, AVG(CAST(SUBSTR(T1.time, 1, INSTR(T1.time, ':') - 1) AS INTEGER) * 60 + CAST(SUBSTR(T1.time, INSTR(T1.time, ':') + 1) AS REAL)) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T1.time IS NOT NULL GROUP BY T2.year;", "SELECT T2.year, AVG(SUBSTR(T2.time, 1, INSTR(T2.time, ':') - 1)) * 60 + AVG(SUBSTR(T2.time, INSTR(T2.time, ':') + 1)) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T1.time IS NOT NULL GROUP BY T2.year;", "SELECT T2.year, AVG(T2.time) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T1.time IS NOT NULL GROUP BY T2.year;", "SELECT T2.year, SUM(SUBSTR(T1.time, 1, INSTR(T1.time, ':') - 1)) * 60 + SUBSTR(T1.time, INSTR(T1.time, ':') + 1) + SUBSTR(T1.time, 0, INSTR(T1.time, ':') - 1) / 1000 AS avg_time_seconds FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T1.time IS NOT NULL GROUP BY T2.year;", "SELECT T2.year, SUM(CAST(SUBSTR(T1.time, 1, 2) AS INTEGER) * 3600 + CAST(SUBSTR(T1.time, 4, 2) AS INTEGER) * 60 + CAST(SUBSTR(T1.time, 7, 2) AS INTEGER)) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T1.time IS NOT NULL GROUP BY T2.year;"]}, {"question_id": 956, "answer_sql": ["SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE STRFTIME('%Y', T1.dob) > '1975' AND T2.rank = 2;"]}, {"question_id": 957, "answer_sql": ["SELECT COUNT(T1.driverId) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId INNER JOIN constructors AS T4 ON T2.constructorId = T4.constructorId WHERE T1.nationality = 'Italian' AND T3.time IS NULL", "SELECT COUNT(*) FROM drivers WHERE nationality = 'Italian' AND driverId NOT IN ( SELECT driverId FROM results WHERE time IS NOT NULL );", "SELECT COUNT(T1.driverId) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T1.nationality = 'Italian' AND T2.time IS NULL;"]}, {"question_id": 958, "answer_sql": ["SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.fastestLapTime IS NOT NULL ORDER BY T2.fastestLapTime ASC LIMIT 1;"]}, {"question_id": 959, "answer_sql": ["SELECT fastestLap FROM results WHERE time LIKE '__:%:__.___' AND SUBSTR(time, 1, 4) = '2009';", "SELECT T1.fastestLap FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.year = 2009 ORDER BY T1.fastestLapTime DESC LIMIT 1;", "SELECT T2.fastestLap FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.year = 2009 ORDER BY T2.fastestLapTime ASC LIMIT 1;"]}, {"question_id": 960, "answer_sql": ["SELECT AVG(T1.fastestLapSpeed) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Spanish Grand Prix' AND T2.year = 2009;"]}, {"question_id": 961, "answer_sql": ["SELECT T1.name, T1.year FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T2.milliseconds IS NOT NULL ORDER BY T2.milliseconds LIMIT 1;", "SELECT T2.name, T2.year FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T1.milliseconds IS NOT NULL ORDER BY T1.milliseconds ASC LIMIT 1;"]}, {"question_id": 962, "answer_sql": ["SELECT CAST(SUM(IIF(STRFTIME('%Y', d.dob) < '1985' AND lt.lap > 50, 1, 0)) AS REAL) * 100 / COUNT(*) FROM lapTimes lt JOIN drivers d ON lt.driverId = d.driverId WHERE d.dob < '1985' AND lt.lap > 50;", "SELECT CAST(SUM(IIF(STRFTIME('%Y', d.dob) < '1985' AND lt.lap > 50, 1, 0)) AS REAL) * 100 / COUNT(*) FROM lapTimes lt JOIN drivers d ON lt.driverId = d.driverId JOIN races r ON lt.raceId = r.raceId WHERE r.year BETWEEN 2000 AND 2005;", "SELECT CAST(SUM(IIF(STRFTIME('%Y', d.dob) < '2005', 1, 0)) AS REAL) * 100 / COUNT(d.driverId) FROM drivers d INNER JOIN lapTimes l ON d.driverId = l.driverId WHERE l.lap > 50 AND STRFTIME('%Y', d.dob) < '2005';"]}, {"question_id": 963, "answer_sql": ["SELECT COUNT(*) FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.nationality = 'French' AND T1.time < 2;", "SELECT COUNT(*) FROM lapTimes JOIN drivers ON lapTimes.driverId = drivers.driverId WHERE lap < 2 AND milliseconds < 120 AND nationality = 'French';"]}, {"question_id": 964, "answer_sql": ["SELECT code FROM drivers WHERE nationality LIKE 'America%' GROUP BY code;", "SELECT code FROM drivers WHERE nationality = 'America';"]}, {"question_id": 965, "answer_sql": ["SELECT raceId FROM races WHERE year = 2009;"]}, {"question_id": 966, "answer_sql": ["SELECT COUNT(driverId) FROM results WHERE raceId = 18;", "SELECT COUNT(driverId) FROM driverStandings WHERE raceId = 18"]}, {"question_id": 967, "answer_sql": ["SELECT COUNT(*) FROM drivers WHERE nationality = 'Netherland' AND dob = (SELECT MAX(dob) FROM drivers WHERE nationality = 'Netherland');", "SELECT T1.code, COUNT(T2.driverId) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T1.nationality = 'Netherlands' GROUP BY T1.code ORDER BY COUNT(T2.driverId) DESC LIMIT 3;"]}, {"question_id": 968, "answer_sql": ["SELECT driverRef FROM drivers WHERE forename = 'Robert' AND surname = 'Kubica';"]}, {"question_id": 969, "answer_sql": ["SELECT COUNT(*) FROM drivers WHERE nationality = 'Australia' AND STRFTIME('%Y', dob) = '1980';"]}, {"question_id": 970, "answer_sql": ["SELECT T2.forename, T2.surname, T1.lap FROM lapTimes AS T1 INNER JOIN drivers AS T2 on T2.driverId = T1.driverId WHERE T2.nationality = 'German' AND STRFTIME('%Y', T2.dob) BETWEEN '1980' AND '1990' ORDER BY T1.time ASC LIMIT 3;", "SELECT T2.forename, T2.surname, MIN(T1.time) FROM lapTimes AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'German' AND STRFTIME('%Y', T2.dob) BETWEEN '1980' AND '1990' GROUP BY T2.driverId ORDER BY MIN(T1.time) LIMIT 3;", "SELECT T1.forename, T1.surname, T2.lap, T2.time FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T1.nationality = 'German' AND STRFTIME('%Y', T1.dob) BETWEEN '1980' AND '1990' ORDER BY T2.time ASC LIMIT 3;"]}, {"question_id": 971, "answer_sql": ["SELECT MIN(STRFTIME('%Y', dob)) FROM drivers WHERE nationality = 'German';", "SELECT driverRef FROM drivers WHERE nationality = 'German' ORDER BY dob ASC LIMIT 1;", "SELECT T1.driverRef FROM drivers AS T1 INNER JOIN ( SELECT driverRef, MIN(JULIANDAY(dob)) AS t FROM drivers WHERE nationality = 'German' GROUP BY driverRef ) AS T2 ON T1.driverRef = T2.driverRef;"]}, {"question_id": 972, "answer_sql": ["SELECT T1.driverid, T1.code FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverid = T2.driverid WHERE STRFTIME('%Y', T1.dob) = '1971' AND T2.fastestlaptime IS NOT NULL ORDER BY T2.fastestlaptime DESC LIMIT 1;", "SELECT T1.driverid, T1.code FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverid = T2.driverid WHERE STRFTIME('%Y', T1.dob) = '1971' AND T2.fastestlaptime IS NOT NULL"]}, {"question_id": 973, "answer_sql": ["SELECT T1.forename, T1.surname, T2.time FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T1.nationality = 'Spanish' AND STRFTIME('%Y', T1.dob) < '1982' ORDER BY T2.time DESC LIMIT 10;", "SELECT T2.forename, T2.surname, T1.lap FROM lapTimes AS T1 INNER JOIN drivers AS T2 on T2.driverId = T1.driverId WHERE T2.nationality = 'Spanish' AND STRFTIME('%Y', T2.dob) < '1982' ORDER BY T1.time DESC LIMIT 10;", "SELECT T1.forename, T1.surname, T2.lap, T2.time FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T1.nationality = 'Spanish' AND STRFTIME('%Y', T1.dob) < '1982' ORDER BY T2.time DESC LIMIT 10;", "SELECT T1.forename, T1.surname, T2.lap FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T1.nationality = 'Spanish' AND STRFTIME('%Y', T1.dob) < '1982' ORDER BY T2.lap DESC LIMIT 10;"]}, {"question_id": 974, "answer_sql": ["SELECT DISTINCT T1.year FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T2.fastestLapTime IS NOT NULL;", "SELECT T1.year FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T2.fastestLapTime IS NOT NULL;"]}, {"question_id": 975, "answer_sql": ["SELECT T2.year FROM lapTimes AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId ORDER BY T1.time DESC LIMIT 1;", "SELECT T2.year FROM lapTimes AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId ORDER BY T1.time ASC LIMIT 1;", "SELECT SUBSTR(CAST(time AS TEXT), 1, INSTR(time, ' ') - 1) AS year FROM lapTimes WHERE milliseconds = (SELECT MIN(milliseconds) FROM lapTimes WHERE time IS NOT NULL);", "SELECT SUBSTR(time, 1, INSTR(time, ' ') - 1) AS year FROM lapTimes WHERE milliseconds = (SELECT MIN(milliseconds) FROM lapTimes WHERE time LIKE '% %:%:%');"]}, {"question_id": 976, "answer_sql": ["SELECT driverId FROM lapTimes WHERE lap = 1 ORDER BY time DESC LIMIT 5;"]}, {"question_id": 977, "answer_sql": ["SELECT COUNT(*) FROM results AS constructorResults JOIN races AS races ON constructorResults.raceId = races.raceId JOIN status AS status ON constructorResults.statusId = status.statusId WHERE races.raceId BETWEEN 50 AND 100 AND status.statusId = 2 AND races.time IS NOT NULL;", "SELECT COUNT(resultId) FROM results WHERE raceId BETWEEN 50 AND 100 AND statusId = 2 AND time IS NOT NULL;", "SELECT COUNT(*) FROM results AS constructorResults JOIN races AS races ON constructorResults.raceId = races.raceId JOIN status AS status ON constructorResults.statusId = status.statusId WHERE races.raceId BETWEEN 50 AND 100 AND status.statusId = 2;"]}, {"question_id": 978, "answer_sql": ["SELECT location, lat, lng FROM circuits WHERE country = 'Austria';"]}, {"question_id": 979, "answer_sql": ["SELECT T1.raceId, COUNT(T2.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.time IS NOT NULL GROUP BY T1.raceId ORDER BY COUNT(T2.driverId) DESC LIMIT 1", "SELECT T1.raceId, T1.number FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Tour de France' AND T1.time IS NOT NULL ORDER BY T1.number DESC LIMIT 1;", "SELECT T1.number FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.time IS NOT NULL GROUP BY T1.number ORDER BY COUNT(T1.number) DESC LIMIT 1;", "SELECT T2.raceId, COUNT(*) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T1.time IS NOT NULL GROUP BY T2.raceId ORDER BY COUNT(*) DESC LIMIT 1;", "SELECT T1.number FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.time IS NOT NULL GROUP BY T2.driverId ORDER BY COUNT(T2.driverId) DESC LIMIT 1;"]}, {"question_id": 980, "answer_sql": ["SELECT T1.driverRef, T1.nationality, T1.dob FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 23 AND T2.q2 IS NOT NULL;"]}, {"question_id": 981, "answer_sql": ["SELECT T1.year, T1.name, T1.date, T1.time FROM races AS T1 INNER JOIN qualifying AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.dob = ( SELECT min(dob) FROM drivers ) ORDER BY T1.year ASC LIMIT 1;", "SELECT T2.year, T2.name, T2.date, T2.time FROM qualifying AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T3.dob IS NOT NULL ORDER BY T3.dob ASC LIMIT 1;", "SELECT T1.year, T1.name, T1.date, T1.time FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.dob IS NOT NULL ORDER BY T3.dob ASC LIMIT 1;"]}, {"question_id": 982, "answer_sql": ["SELECT COUNT(T1.driverId) FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN status AS T3 ON T1.statusId = T3.statusId WHERE T2.nationality = 'American' AND T3.status = 'Disqualified';"]}, {"question_id": 983, "answer_sql": ["SELECT T1.url FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId WHERE T1.nationality = 'Italian' ORDER BY T2.points DESC LIMIT 1;", "SELECT T1.url, T1.name FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId WHERE T1.nationality = 'Italian' ORDER BY T2.points DESC LIMIT 1;", "SELECT T1.name, T1.url FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId WHERE T1.nationality = 'Italian' ORDER BY T2.points DESC LIMIT 1;"]}, {"question_id": 984, "answer_sql": ["SELECT T1.url FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId ORDER BY T2.wins DESC LIMIT 1;"]}, {"question_id": 985, "answer_sql": ["SELECT T1.forename, T1.surname, T2.time FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId WHERE T3.name = 'French Grand Prix' AND T2.lap = 3 ORDER BY T2.time ASC LIMIT 1;", "SELECT T1.forename, T1.surname, T2.lap, T2.time FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId WHERE T3.name = 'French Grand Prix' AND T2.lap = 3 ORDER BY T2.time ASC LIMIT 1;", "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId WHERE T3.name = 'French Grand Prix' AND T2.lap = 3 ORDER BY T2.time ASC LIMIT 1;", "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.name = 'French Grand Prix' AND T2.lap = 3 ORDER BY T2.time DESC LIMIT 1;"]}, {"question_id": 986, "answer_sql": ["SELECT T2.time, T2.milliseconds FROM results AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T1.position = 1 ORDER BY T2.time ASC LIMIT 1;", "SELECT T1.time FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T1.lap = 1 ORDER BY T1.time ASC LIMIT 1;", "SELECT lap, time FROM lapTimes WHERE lap = 1 ORDER BY time ASC LIMIT 1;", "SELECT T1.raceId, T1.time FROM lapTimes AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T1.lap = 1 ORDER BY T1.time ASC LIMIT 1;", "SELECT T1.time, T1.milliseconds FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T1.lap = 1 ORDER BY T1.time ASC LIMIT 1;"]}, {"question_id": 987, "answer_sql": ["SELECT AVG(fastestLapTime) FROM ( SELECT T1.fastestLapTime FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.name = '2006 United States Grand Prix' AND T1.rank < 11 ORDER BY T1.fastestLapTime DESC LIMIT 10 )"]}, {"question_id": 988, "answer_sql": ["SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN pitStops AS T2 ON T1.driverId = T2.driverId WHERE T1.nationality = 'German' AND STRFTIME('%Y', T1.dob) BETWEEN '1980' AND '1985' GROUP BY T1.driverId ORDER BY AVG(T2.duration) LIMIT 5;", "SELECT T2.forename, T2.surname, AVG(T1.duration) FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'German' AND STRFTIME('%Y', T2.dob) BETWEEN '1980' AND '1985' GROUP BY T2.driverId ORDER BY AVG(T1.duration) ASC LIMIT 5;"]}, {"question_id": 989, "answer_sql": ["SELECT T1.time FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Canadian Grand Prix' AND T2.year = 2008 ORDER BY T1.time DESC LIMIT 1;", "SELECT T2.time FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.name = 'Canadian Grand Prix' AND T2.year = 2008 AND T1.rank = 1;", "SELECT T1.time FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.name = 'Canadian Grand Prix' AND T2.year = 2008 AND T1.lap = 1;", "SELECT T1.time, T1.milliseconds FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.name = 'Canadian Grand Prix' AND T2.year = 2008 AND T1.rank = 1;"]}, {"question_id": 990, "answer_sql": ["SELECT T1.constructorRef, T1.url FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.name = 'Singapore Grand Prix' AND T3.year = 2009 ORDER BY T2.points DESC LIMIT 1;", "SELECT T1.constructorRef, T1.url FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.name = 'Singapore Grand Prix' AND T3.year = 2009 AND T2.points = ( SELECT MAX(points) FROM results );", "SELECT T1.constructorRef FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 on T2.raceId = T3.raceId WHERE T3.name = 'Singapore Grand Prix' AND T3.year = 2009 ORDER BY T2.points DESC LIMIT 1;"]}, {"question_id": 991, "answer_sql": ["SELECT forename, surname, dob FROM drivers WHERE nationality = 'Austrian' AND dob BETWEEN '1981-01-01' AND '1991-12-31';"]}, {"question_id": 992, "answer_sql": ["SELECT forename, surname, url, dob FROM drivers WHERE nationality = 'German' AND STRFTIME('%Y', dob) BETWEEN '1971' AND '1985' ORDER BY dob DESC;"]}, {"question_id": 993, "answer_sql": ["SELECT country, lat, lng FROM circuits WHERE name = 'Hungaroring';", "SELECT location, country, lat, lng FROM circuits WHERE name = 'Hungaroring';"]}, {"question_id": 994, "answer_sql": ["SELECT T2.points, T1.name, T1.nationality FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.name = 'Monaco Grand Prix' AND T3.year BETWEEN 1980 AND 2010 ORDER BY T2.points DESC LIMIT 1;"]}, {"question_id": 995, "answer_sql": ["SELECT AVG(T2.points) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton' AND T3.name = 'Turkish Grand Prix';", "SELECT AVG(T2.points) FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton' AND T3.name = 'Turkish Grand Prix';"]}, {"question_id": 996, "answer_sql": ["SELECT AVG(number) FROM ( SELECT COUNT(raceId) AS number FROM races WHERE date BETWEEN '2000-01-01' AND '2010-12-31' GROUP BY year )", "SELECT AVG(year) FROM races WHERE date BETWEEN '2000-01-01' AND '2010-12-31';"]}, {"question_id": 997, "answer_sql": ["SELECT nationality FROM drivers GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1"]}, {"question_id": 998, "answer_sql": ["SELECT SUM(wins) FROM driverStandings WHERE driverId = ( SELECT driverId FROM driverStandings WHERE points = 91 );", "SELECT T1.wins FROM driverStandings AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.rank = 91;", "SELECT COUNT(*) FROM driverStandings AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T1.wins = 1 AND T2.rank = 91;"]}, {"question_id": 999, "answer_sql": ["SELECT T1.name FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T2.fastestLapTime IS NOT NULL ORDER BY T2.fastestLapTime ASC LIMIT 1;"]}, {"question_id": 1000, "answer_sql": ["SELECT T2.location FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitID = T2.circuitId WHERE T1.date = ( SELECT MAX(date) FROM races );", "SELECT T2.location, T2.country FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitID = T2.circuitId WHERE T1.date = ( SELECT MAX(date) FROM races );"]}, {"question_id": 1001, "answer_sql": ["SELECT T2.forename, T2.surname FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId INNER JOIN races AS T3 ON T3.raceId = T1.raceId INNER JOIN circuits AS T4 ON T4.circuitId = T3.circuitId WHERE T1.number = 1 AND T1.raceId = 3 AND T3.name = 'Marina Bay Street Circuit' AND T3.year = 2008", "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId INNER JOIN circuits AS T4 ON T3.circuitId = T4.circuitId WHERE T2.position = 1 AND T3.year = 2008 AND T4.name = 'Marina Bay Street Circuit';"]}, {"question_id": 1002, "answer_sql": ["SELECT T2.forename, T2.surname, T3.name, T2.nationality FROM results AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T1.raceId = T3.raceId WHERE T2.dob IS NOT NULL ORDER BY T2.dob LIMIT 1;", "SELECT T1.forename, T1.surname, T1.nationality, T3.name FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId ORDER BY T1.dob DESC LIMIT 1;", "SELECT T1.forename, T1.surname, T1.nationality, T3.name FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T1.dob = ( SELECT MIN(dob) FROM drivers ) ORDER BY T2.points DESC, T2.laps DESC, T3.year, T3.round;", "SELECT T1.forename, T1.surname, T1.nationality, T3.name FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T1.dob = ( SELECT MIN(dob) FROM drivers ) ORDER BY T2.points DESC, T2.laps DESC, T3.year, T3.round LIMIT 1;", "SELECT T1.forename, T1.surname, T1.nationality, T2.name FROM drivers AS T1 INNER JOIN races AS T2 ON T1.driverId = T2.raceId ORDER BY T1.dob DESC LIMIT 1;"]}, {"question_id": 1003, "answer_sql": ["SELECT COUNT(T1.driverId) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.name = 'Canadian Grand Prix' AND T1.statusId = 3;", "SELECT COUNT(results.resultId) FROM results WHERE results.driverId = ( SELECT drivers.driverId FROM drivers JOIN results ON drivers.driverId = results.driverId WHERE results.statusId = 3 AND results.raceId = 134 ) AND results.statusId = 3;", "SELECT COUNT(results.resultId) FROM results WHERE results.driverId = ( SELECT drivers.driverId FROM drivers JOIN results ON drivers.driverId = results.driverId WHERE results.statusId = 3 AND results.raceId = 195 ) AND results.statusId = 3;", "SELECT COUNT(T1.driverId) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN status AS T3 on T1.statusId = T3.statusId WHERE T2.name = 'Canadian Grand Prix' AND T3.status = 'Finished' AND T1.number = 0;"]}, {"question_id": 1004, "answer_sql": ["SELECT T2.forename, T2.surname, MIN(T1.wins) FROM driverStandings AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId GROUP BY T2.forename, T2.surname;", "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId ORDER BY T1.dob LIMIT 1;", "SELECT T1.forename, T1.surname, COUNT(T2.wins) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId ORDER BY T1.dob ASC LIMIT 1;", "SELECT T1.forename, T1.surname, T2.wins FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId ORDER BY T1.dob ASC LIMIT 1;", "SELECT T1.forename, T1.surname, SUM(T2.wins) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId ORDER BY T1.dob ASC LIMIT 1;"]}, {"question_id": 1005, "answer_sql": ["SELECT MAX(milliseconds) FROM pitStops WHERE duration IS NOT NULL;", "SELECT MAX(milliseconds) FROM pitStops WHERE driverId = (SELECT driverId FROM results WHERE points = (SELECT MAX(points) FROM results));", "SELECT duration FROM pitStops ORDER BY duration DESC LIMIT 1"]}, {"question_id": 1006, "answer_sql": ["SELECT T2.lap, T1.time FROM races AS T1 INNER JOIN lapTimes AS T2 ON T1.raceId = T2.raceId ORDER BY T2.time ASC LIMIT 1;", "SELECT T1.time FROM lapTimes AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T1.lap = 1 ORDER BY T2.time ASC LIMIT 1;", "SELECT T1.time FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T1.lap = 1 ORDER BY T1.time ASC LIMIT 1;", "SELECT T1.time, T1.lap FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId ORDER BY T1.time ASC LIMIT 1;", "SELECT MIN(milliseconds) FROM lapTimes WHERE lap = 1;"]}, {"question_id": 1007, "answer_sql": ["SELECT MAX(milliseconds) FROM lapTimes JOIN drivers ON lapTimes.driverId = drivers.driverId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND lapTimes.lap = 1;", "SELECT MAX(duration) FROM pitStops WHERE driverId = ( SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton' );", "SELECT MAX(milliseconds) FROM lapTimes WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton');"]}, {"question_id": 1008, "answer_sql": ["SELECT T2.lap FROM drivers AS T1 INNER JOIN pitStops AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton' AND T3.name = 'Australian Grand Prix' AND T3.year = 2011;", "SELECT T1.lap FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T1.raceId = T3.raceId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' AND T3.name = 'Australian Grand Prix';", "SELECT lap FROM lapTimes WHERE driverId = ( SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton' ) AND raceId = ( SELECT raceId FROM races WHERE name = 'Australian Grand Prix' AND year = 2011 );", "SELECT T1.lap FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T1.raceId = T3.raceId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' AND T3.name = 'Australian Grand Prix' AND T1.time LIKE 'lap%';"]}, {"question_id": 1009, "answer_sql": ["SELECT T2.time FROM pitStops AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T2.name = 'Australian Grand Prix' AND T2.year = 2011", "SELECT T2.time FROM pitStops AS T1 INNER JOIN lapTimes AS T2 ON T1.raceId = T2.raceId AND T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.name = 'Australian Grand Prix' AND T1.raceId = 2011;", "SELECT T1.time FROM pitStops AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.name = 'Australian Grand Prix' AND T2.year = 2011", "SELECT T2.time FROM pitStops AS T1 INNER JOIN lapTimes AS T2 ON T1.raceId = T2.raceId AND T1.driverId = T2.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId WHERE T3.name = 'Australian Grand Prix' AND T3.year = 2011"]}, {"question_id": 1010, "answer_sql": ["SELECT T1.lap FROM lapTimes AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton'", "SELECT lap, time FROM lapTimes JOIN drivers ON lapTimes.driverId = drivers.driverId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND lapTimes.raceId = 401;"]}, {"question_id": 1011, "answer_sql": ["SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.fastestLapTime IS NOT NULL ORDER BY T2.time ASC LIMIT 1;", "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.fastestLapTime IS NOT NULL ORDER BY T2.fastestLapTime ASC LIMIT 1;", "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId ORDER BY T2.time ASC LIMIT 1;"]}, {"question_id": 1012, "answer_sql": ["SELECT T2.position FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton' ORDER BY T2.time ASC LIMIT 1;", "SELECT lap, position FROM lapTimes WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton') ORDER BY time ASC LIMIT 1;", "SELECT T2.position FROM lapTimes AS T1 INNER JOIN driverStandings AS T2 ON T2.driverId = T1.driverId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId INNER JOIN races AS T4 ON T4.raceId = T1.raceId INNER JOIN circuits AS T5 ON T5.circuitId = T4.circuitId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' ORDER BY T1.time ASC LIMIT 1;"]}, {"question_id": 1013, "answer_sql": ["SELECT T1.lap, T1.time FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T2.name = 'Austrian Grand Prix' ORDER BY T1.time DESC LIMIT 1;", "SELECT T1.lap FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T2.name = 'Austrian Grand Prix' ORDER BY T1.time DESC LIMIT 1;", "SELECT T1.lap, T1.driverId, T1.time FROM lapTimes AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN circuits AS T3 ON T2.circuitId = T3.circuitId WHERE T2.name = 'Austrian Grand Prix' ORDER BY T1.time DESC LIMIT 1;", "SELECT T2.lap FROM circuits AS T1 INNER JOIN lapTimes AS T2 ON T1.circuitId = T2.raceId WHERE T1.name = 'Austrian Grand Prix' ORDER BY T2.time ASC LIMIT 1;", "SELECT T1.lap FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T2.name = 'Austrian Grand Prix' ORDER BY T1.time ASC LIMIT 1;"]}, {"question_id": 1014, "answer_sql": ["SELECT T2.lap FROM circuits AS T1 INNER JOIN lapTimes AS T2 ON T1.circuitId = T2.raceId WHERE T1.country = 'Italy';", "SELECT T2.lap, T2.time FROM circuits AS T1 INNER JOIN lapTimes AS T2 ON T1.circuitId = T2.raceId WHERE T1.country = 'Italy';"]}, {"question_id": 1015, "answer_sql": ["SELECT T1.name FROM races AS T1 INNER JOIN lapTimes AS T2 ON T1.raceId = T2.raceId WHERE T1.name = 'Austrian Grand Prix' ORDER BY T2.time ASC LIMIT 1;", "SELECT T1.name FROM races AS T1 INNER JOIN lapTimes AS T2 ON T1.raceId = T2.raceId INNER JOIN circuits AS T3 ON T1.circuitId = T3.circuitId WHERE T1.name = 'Austrian Grand Prix' AND T2.lap = 1;", "SELECT T1.name FROM races AS T1 INNER JOIN lapTimes AS T2 ON T1.raceId = T2.raceId INNER JOIN circuits AS T3 ON T1.circuitId = T3.circuitId WHERE T1.name = 'Austrian Grand Prix' AND T3.name = 'Austrian Grand Prix Circuit';"]}, {"question_id": 1016, "answer_sql": ["SELECT T2.duration FROM drivers AS T1 INNER JOIN pitStops AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId WHERE T3.name = 'Austrian Grand Prix' AND T1.forename = 'Fernando' AND T1.surname = 'Alonso';", "SELECT T2.duration FROM drivers AS T1 INNER JOIN pitStops AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId WHERE T3.name = 'Austrian Grand Prix' AND T1.forename = 'Christian' AND T1.surname = 'Vieira';", "SELECT T1.duration FROM pitStops AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T2.name = 'Austrian Grand Prix' AND T1.lap = 1;"]}, {"question_id": 1017, "answer_sql": ["SELECT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN lapTimes AS T2 ON T1.circuitId = T2.raceId WHERE T2.time = '1:29.488';", "SELECT T1.lng, T1.lat FROM circuits AS T1 INNER JOIN lapTimes AS T2 ON T1.circuitId = T2.raceId WHERE T2.time = '1:29.488';"]}, {"question_id": 1018, "answer_sql": ["SELECT AVG(milliseconds) FROM pitStops WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton');"]}, {"question_id": 1019, "answer_sql": ["SELECT AVG(milliseconds) FROM lapTimes AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN circuits AS T3 ON T2.circuitId = T3.circuitId WHERE T3.country = 'Italy';", "SELECT AVG(milliseconds) FROM lapTimes AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T1.raceId = T3.raceId INNER JOIN circuits AS T4 on T3.circuitId = T4.circuitId WHERE T2.nationality = 'Italian' GROUP BY T3.name;"]}, {"question_id": 1020, "answer_sql": ["SELECT player_api_id FROM Player_Attributes ORDER BY overall_rating DESC LIMIT 1"]}, {"question_id": 1021, "answer_sql": ["SELECT player_name FROM Player WHERE height = (SELECT MAX(height) FROM Player);"]}, {"question_id": 1022, "answer_sql": ["SELECT preferred_foot FROM Player_Attributes WHERE potential = (SELECT MIN(potential) FROM Player_Attributes);", "SELECT preferred_foot FROM Player_Attributes ORDER BY potential LIMIT 1"]}, {"question_id": 1023, "answer_sql": ["SELECT COUNT(*) FROM Player_Attributes WHERE overall_rating BETWEEN 60 AND 65 AND defensive_work_rate = 'low';"]}, {"question_id": 1024, "answer_sql": ["SELECT player_api_id FROM Player_Attributes WHERE crossing = ( SELECT MAX(crossing) FROM Player_Attributes ) LIMIT 5;", "SELECT id FROM Player_Attributes WHERE crossing = (SELECT MAX(crossing) FROM Player_Attributes) LIMIT 5;", "SELECT DISTINCT player_api_id FROM Player_Attributes WHERE crossing = (SELECT MAX(crossing) FROM Player_Attributes) LIMIT 5;"]}, {"question_id": 1025, "answer_sql": ["SELECT T2.name FROM Match AS T1 INNER JOIN League AS T2 ON T1.league_id = T2.id WHERE T1.season = '2016' GROUP BY T2.name ORDER BY SUM(T1.home_team_goal + T1.away_team_goal) DESC LIMIT 1;", "SELECT name FROM `League` WHERE id = ( SELECT league_id FROM `Match` WHERE season = '2015/2016' GROUP BY league_id ORDER BY SUM(home_team_goal + away_team_goal) DESC LIMIT 1 );"]}, {"question_id": 1026, "answer_sql": ["SELECT home_team_api_id FROM `Match` WHERE season = '2015/2016' AND home_team_goal - away_team_goal < 0 GROUP BY home_team_api_id ORDER BY COUNT(*) ASC LIMIT 1;", "SELECT T2.team_long_name FROM Match AS T1 INNER JOIN Team AS T2 ON T1.home_team_api_id = T2.team_api_id WHERE T1.season = '2015/2016' AND T1.home_team_goal - T1.away_team_goal < 0 GROUP BY T2.team_long_name ORDER BY COUNT(T2.team_long_name) ASC LIMIT 1;"]}, {"question_id": 1027, "answer_sql": ["SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T2.penalties DESC LIMIT 10;", "SELECT DISTINCT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T2.penalties DESC LIMIT 10;"]}, {"question_id": 1028, "answer_sql": ["SELECT T1.team_long_name FROM Team AS T1 INNER JOIN Match AS T2 ON T1.team_api_id = T2.away_team_api_id WHERE T2.season = '2009/2010' AND T2.away_team_goal - T2.home_team_goal > 0 GROUP BY T1.team_long_name ORDER BY SUM(T2.away_team_goal - T2.home_team_goal) DESC LIMIT 1;", "SELECT T2.team_long_name FROM Match AS T1 INNER JOIN Team AS T2 ON T1.away_team_api_id = T2.team_api_id WHERE T1.season = '2009/2010' AND T1.away_team_goal - T1.home_team_goal > 0 GROUP BY T2.team_long_name ORDER BY COUNT(T2.team_long_name) DESC LIMIT 1;", "SELECT T1.team_long_name FROM Team AS T1 INNER JOIN Match AS T2 ON T1.team_api_id = T2.away_team_api_id WHERE T2.season = '2010' AND T2.away_team_goal - T2.home_team_goal > 0 GROUP BY T1.team_long_name ORDER BY SUM(T2.away_team_goal - T2.home_team_goal) DESC LIMIT 1;"]}, {"question_id": 1029, "answer_sql": ["SELECT T1.team_long_name, T2.buildUpPlaySpeed FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id ORDER BY T2.buildUpPlaySpeed DESC LIMIT 4", "SELECT buildUpPlaySpeed FROM Team_Attributes ORDER BY buildUpPlaySpeed DESC LIMIT 4"]}, {"question_id": 1030, "answer_sql": ["SELECT T1.name FROM League AS T1 INNER JOIN Match AS T2 ON T1.id = T2.league_id WHERE T2.season = '2015/2016' GROUP BY T1.id ORDER BY SUM(T2.home_team_goal = T2.away_team_goal) DESC LIMIT 1;", "SELECT t1.name FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t2.season = '2016' GROUP BY t1.name ORDER BY SUM(t2.home_team_goal = t2.away_team_goal) DESC LIMIT 1;"]}, {"question_id": 1031, "answer_sql": ["SELECT DISTINCT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.sprint_speed >= 97 AND T2.date BETWEEN '2013-01-01 00:00:00' AND '2015-12-31 00:00:00';", "SELECT DISTINCT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.sprint_speed >= 97 AND T1.birthday >= '1993-01-01' AND T1.birthday < '2016-01-01';"]}, {"question_id": 1032, "answer_sql": ["SELECT T1.name, T2.count FROM League AS T1 INNER JOIN ( SELECT league_id, COUNT(*) AS count FROM Match GROUP BY league_id ) AS T2 ON T1.id = T2.league_id ORDER BY T2.count DESC LIMIT 1;", "SELECT T2.name, COUNT(T1.league_id) FROM Match AS T1 INNER JOIN League AS T2 ON T1.league_id = T2.id GROUP BY T2.name ORDER BY COUNT(T1.league_id) DESC LIMIT 1;"]}, {"question_id": 1033, "answer_sql": ["SELECT AVG(height) FROM Player WHERE SUBSTR(birthday, 1, 4) BETWEEN '1990' AND '1995';"]}, {"question_id": 1034, "answer_sql": ["SELECT DISTINCT T1.player_api_id FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE SUBSTR(T1.`date`, 1, 4) = '2010' ORDER BY T1.overall_rating DESC LIMIT 1;", "SELECT DISTINCT player_api_id FROM Player_Attributes WHERE overall_rating = ( SELECT MAX(overall_rating) FROM Player_Attributes WHERE SUBSTR(`date`, 1, 4) = '2010' ) ORDER BY overall_rating DESC;"]}, {"question_id": 1035, "answer_sql": ["SELECT team_fifa_api_id FROM Team_Attributes WHERE buildUpPlaySpeed BETWEEN 51 AND 59 GROUP BY team_fifa_api_id HAVING count(*) > 50 AND count(*) < 60", "SELECT DISTINCT team_fifa_api_id FROM Team_Attributes WHERE buildUpPlaySpeed BETWEEN 51 AND 59 AND team_fifa_api_id > 50 AND team_fifa_api_id < 60;", "SELECT DISTINCT team_fifa_api_id FROM Team_Attributes WHERE buildUpPlaySpeed BETWEEN 51 AND 59 AND team_fifa_api_id < 60;", "SELECT DISTINCT team_fifa_api_id FROM Team_Attributes WHERE buildUpPlaySpeed BETWEEN 51 AND 59;"]}, {"question_id": 1036, "answer_sql": ["SELECT T1.team_long_name FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.buildUpPlayPassing > ( SELECT AVG(buildUpPlayPassing) FROM Team_Attributes ) AND strftime('%Y', T2.`date`) = '2012'", "SELECT T1.team_long_name FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.buildUpPlayPassing > ( SELECT AVG(buildUpPlayPassing) FROM Team_Attributes ) AND strftime('%Y', T2.`date`) = '2012' GROUP BY T1.team_long_name;", "SELECT DISTINCT T1.team_long_name FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.buildUpPlayPassing > ( SELECT AVG(buildUpPlayPassing) FROM Team_Attributes ) AND strftime('%Y', T2.`date`) = '2012';", "SELECT DISTINCT T2.team_long_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.buildUpPlayPassing > ( SELECT AVG(buildUpPlayPassing) FROM Team_Attributes ) AND T1.date = '2012';"]}, {"question_id": 1037, "answer_sql": ["SELECT CAST(SUM(CASE WHEN preferred_foot = 'left' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM Player_Attributes WHERE player_api_id BETWEEN 1987 AND 1992", "SELECT CAST(SUM(CASE WHEN T1.preferred_foot = 'left' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.birthday BETWEEN '1987-01-01 00:00:00' AND '1992-12-31 00:00:00';", "SELECT CAST(SUM(CASE WHEN preferred_foot = 'left' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM Player_Attributes WHERE player_api_id BETWEEN (SELECT MIN(player_api_id) FROM Player WHERE birthday BETWEEN '1987-01-01 00:00:00' AND '1992-12-31 00:00:00') AND (SELECT MAX(player_api_id) FROM Player WHERE birthday BETWEEN '1987-01-01 00:00:00' AND '1992-12-31 00:00:00');", "SELECT CAST(SUM(CASE WHEN preferred_foot = 'left' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Player_Attributes WHERE player_fifa_api_id IN ( SELECT player_fifa_api_id FROM Player WHERE birthday BETWEEN '1987-01-01 00:00:00' AND '1992-12-31 00:00:00' );"]}, {"question_id": 1038, "answer_sql": ["SELECT name FROM League ORDER BY (SELECT SUM(home_team_goal + away_team_goal) FROM Match) ASC LIMIT 5;", "SELECT T2.name FROM `Match` AS T1 INNER JOIN League AS T2 ON T1.league_id = T2.id GROUP BY T2.name ORDER BY SUM(T1.home_team_goal + T1.away_team_goal) ASC LIMIT 5"]}, {"question_id": 1039, "answer_sql": ["SELECT CAST(SUM(t2.long_shots) AS REAL) / COUNT(t1.player_fifa_api_id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Ahmed Samir Farag';"]}, {"question_id": 1040, "answer_sql": ["SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height > 180 ORDER BY T2.heading_accuracy DESC LIMIT 10;", "SELECT DISTINCT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height > 180 ORDER BY T2.heading_accuracy DESC LIMIT 10;"]}, {"question_id": 1041, "answer_sql": ["SELECT DISTINCT T3.team_long_name FROM Team_Attributes AS T1 INNER JOIN Match AS T2 ON T1.team_api_id = T2.home_team_api_id INNER JOIN Team AS T3 ON T1.team_api_id = T3.team_api_id WHERE T1.buildUpPlayDribblingClass = 'Normal' AND T2.season = '2014' AND T1.chanceCreationPassing < ( SELECT AVG(chanceCreationPassing) FROM Team_Attributes ) ORDER BY T1.chanceCreationPassing DESC;", "SELECT DISTINCT T1.team_long_name FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.buildUpPlayDribblingClass = 'Normal' AND T2.chanceCreationPassing < ( SELECT AVG(chanceCreationPassing) FROM Team_Attributes ) ORDER BY T2.chanceCreationPassing DESC;", "SELECT DISTINCT T2.team_long_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.buildUpPlayDribblingClass = 'Normal' AND T1.date LIKE '2014%' ORDER BY T1.chanceCreationPassing DESC;", "SELECT T1.team_long_name FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.buildUpPlayDribblingClass = 'Normal' AND T2.date LIKE '2014%' GROUP BY T1.team_long_name ORDER BY AVG(T2.chanceCreationPassing) DESC;", "SELECT T1.team_long_name FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.buildUpPlayDribblingClass = 'Normal' AND T2.date LIKE '2014%' AND T2.chanceCreationPassing < ( SELECT AVG(chanceCreationPassing) FROM Team_Attributes WHERE date LIKE '2014%' ) ORDER BY T2.chanceCreationPassing DESC;"]}, {"question_id": 1042, "answer_sql": ["SELECT T2.name FROM Match AS T1 INNER JOIN League AS T2 ON T1.league_id = T2.id WHERE T1.season = '2009/2010' GROUP BY T2.name HAVING AVG(T1.home_team_goal) > AVG(T1.away_team_goal);"]}, {"question_id": 1043, "answer_sql": ["SELECT team_short_name FROM Team WHERE team_long_name = 'Queens Park Rangers';"]}, {"question_id": 1044, "answer_sql": ["SELECT * FROM Player WHERE SUBSTR(birthday, 1, 4) = '1970' AND SUBSTR(birthday, 6, 2) = '10';", "SELECT DISTINCT player_name FROM Player WHERE SUBSTR(birthday, 1, 4) = '1970' AND SUBSTR(birthday, 6, 2) = '10';"]}, {"question_id": 1045, "answer_sql": ["SELECT T2.attacking_work_rate FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = 'Franco Zennaro';"]}, {"question_id": 1046, "answer_sql": ["SELECT T2.buildUpPlayPositioningClass FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_long_name = 'ADO Den Haag' AND T2.buildUpPlayPositioningClass IS NOT NULL;", "SELECT CAST(T1.buildUpPlayPositioningClass AS REAL) / 3 FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.team_long_name = 'ADO Den Haag' AND T1.buildUpPlayPositioningClass IS NOT NULL;", "SELECT T2.buildUpPlayPositioningClass FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_long_name = 'ADO Den Haag' AND T2.buildUpPlayPositioningClass BETWEEN 1 AND 2.33;"]}, {"question_id": 1047, "answer_sql": ["SELECT T1.heading_accuracy FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Francois Affolter' AND T1.date = '2014-09-18 00:00:00';", "SELECT T1.heading_accuracy FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Francois Affolter' AND T1.date = '2014-09-18'"]}, {"question_id": 1048, "answer_sql": ["SELECT overall_rating FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Gabriel Tamas') AND date = '2011';", "SELECT overall_rating FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Gabriel Tamas') AND `date` LIKE '2011%';"]}, {"question_id": 1049, "answer_sql": ["SELECT COUNT(T2.id) FROM League AS T1 INNER JOIN Match AS T2 ON T1.id = T2.league_id WHERE T1.name = 'Scotland Premier League' AND T2.season = '2015/2016';"]}, {"question_id": 1050, "answer_sql": ["SELECT preferred_foot FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player ORDER BY birthday DESC LIMIT 1) ORDER BY date DESC LIMIT 1;", "SELECT preferred_foot FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player ORDER BY birthday DESC LIMIT 1)"]}, {"question_id": 1051, "answer_sql": ["SELECT DISTINCT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T2.potential DESC LIMIT 1;"]}, {"question_id": 1052, "answer_sql": ["SELECT COUNT(*) FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.weight < 130 AND T2.preferred_foot = 'left'"]}, {"question_id": 1053, "answer_sql": ["SELECT DISTINCT T1.team_short_name FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.chanceCreationPassingClass = 'Risky';", "SELECT T1.team_short_name FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.chanceCreationPassingClass = 'Risky';", "SELECT T1.team_short_name FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.chanceCreationPassingClass = 'Risky' GROUP BY T1.team_short_name;"]}, {"question_id": 1054, "answer_sql": ["SELECT DISTINCT T2.defensive_work_rate FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = 'David Wilson';", "SELECT T2.defensive_work_rate FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = 'David Wilson';"]}, {"question_id": 1055, "answer_sql": ["SELECT T1.birthday FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T2.overall_rating DESC LIMIT 1;"]}, {"question_id": 1056, "answer_sql": ["SELECT T1.name FROM League AS T1 INNER JOIN Country AS T2 ON T1.country_id = T2.id WHERE T2.name = 'Netherlands';"]}, {"question_id": 1057, "answer_sql": ["SELECT AVG(home_team_goal) FROM `Match` WHERE country_id IN ( SELECT id FROM Country WHERE name = 'Poland' ) AND season = '2010/2011';"]}, {"question_id": 1058, "answer_sql": ["SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.finishing IS NOT NULL ORDER BY T2.finishing DESC LIMIT 1;", "SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.finishing = ( SELECT MAX(finishing) FROM Player_Attributes ) ORDER BY T1.height DESC LIMIT 1;"]}, {"question_id": 1059, "answer_sql": []}, {"question_id": 1060, "answer_sql": ["SELECT COUNT(*) FROM Player WHERE strftime('%Y', birthday) > '1990';"]}, {"question_id": 1061, "answer_sql": ["SELECT COUNT(*) FROM Player AS T1 INNER JOIN Team_Attributes AS T2 ON T1.player_api_id = T2.team_api_id WHERE T1.weight > 170 AND T1.player_name LIKE 'Adam%';"]}, {"question_id": 1062, "answer_sql": ["SELECT DISTINCT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.overall_rating > 80 AND T2.date BETWEEN '2008' AND '2010';", "SELECT DISTINCT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.overall_rating > 80 AND strftime('%Y', T2.`date`) BETWEEN '2008' AND '2010';"]}, {"question_id": 1063, "answer_sql": ["SELECT T2.potential FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = 'Aaron Doran';"]}, {"question_id": 1064, "answer_sql": ["SELECT DISTINCT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.preferred_foot = 'left';"]}, {"question_id": 1065, "answer_sql": ["SELECT DISTINCT T.team_long_name FROM Team AS T INNER JOIN Team_Attributes AS TA ON T.team_api_id = TA.team_api_id WHERE TA.buildUpPlaySpeedClass = 'Fast';", "SELECT T1.team_long_name FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.buildUpPlaySpeedClass = 'Fast';", "SELECT T2.team_long_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.buildUpPlaySpeedClass = 'Fast' GROUP BY T2.team_long_name;"]}, {"question_id": 1066, "answer_sql": ["SELECT T2.buildUpPlayPassingClass FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_short_name = 'CLB';"]}, {"question_id": 1067, "answer_sql": ["SELECT DISTINCT T1.team_short_name FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.buildUpPlayPassing > 70;"]}, {"question_id": 1068, "answer_sql": ["SELECT AVG(overall_rating) FROM Player_Attributes WHERE player_api_id IN (SELECT player_api_id FROM Player WHERE height > 170) AND `date` BETWEEN '2010-01-01' AND '2015-12-31';", "SELECT AVG(overall_rating) FROM Player_Attributes WHERE player_fifa_api_id IN (SELECT player_api_id FROM Player WHERE height > 170) AND date BETWEEN '2010-01-01' AND '2015-12-31';", "SELECT AVG(overall_rating) FROM Player_Attributes WHERE player_api_id IN (SELECT player_api_id FROM Player WHERE height > 170) AND `date` LIKE '2010%' OR `date` LIKE '2011%' OR `date` LIKE '2012%' OR `date` LIKE '2013%' OR `date` LIKE '2014%' OR `date` LIKE '2015%';", "SELECT AVG(overall_rating) FROM Player_Attributes WHERE player_fifa_api_id IN (SELECT player_fifa_api_id FROM Player WHERE height > 170) AND strftime('%Y', `date`) BETWEEN '2010' AND '2015';"]}, {"question_id": 1069, "answer_sql": ["SELECT Player.player_name FROM Player ORDER BY Player.height ASC LIMIT 1;"]}, {"question_id": 1070, "answer_sql": ["SELECT T1.name FROM Country AS T1 INNER JOIN League AS T2 ON T1.id = T2.country_id WHERE T2.name = 'Italy Serie A';"]}, {"question_id": 1071, "answer_sql": ["SELECT DISTINCT T1.team_short_name FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.buildUpPlaySpeed = 31 AND T2.buildUpPlayDribbling = 53 AND T2.buildUpPlayPassing = 32;", "SELECT T1.team_short_name FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.buildUpPlaySpeed = 31 AND T2.buildUpPlayDribbling = 53 AND T2.buildUpPlayPassing = 32;"]}, {"question_id": 1072, "answer_sql": ["SELECT AVG(overall_rating) FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Doran');"]}, {"question_id": 1073, "answer_sql": ["SELECT COUNT(*) FROM `Match` AS T1 INNER JOIN League AS T2 ON T1.league_id = T2.id WHERE T2.name = 'Germany 1. Bundesliga' AND T1.date BETWEEN '2008-08-01' AND '2008-10-31';", "SELECT COUNT(id) FROM `Match` WHERE league_id = ( SELECT id FROM League WHERE name = 'Germany 1. Bundesliga' ) AND strftime('%Y-%m', date) BETWEEN '2008-08' AND '2008-10';"]}, {"question_id": 1074, "answer_sql": ["SELECT DISTINCT T1.team_short_name FROM Team AS T1 INNER JOIN Match AS T2 ON T1.team_api_id = T2.home_team_api_id WHERE T2.home_team_goal = 10;"]}, {"question_id": 1075, "answer_sql": ["SELECT DISTINCT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.balance = ( SELECT MAX(balance) FROM Player_Attributes ) AND T2.potential = 61;", "SELECT DISTINCT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.potential = 61 ORDER BY T2.balance DESC LIMIT 1;"]}, {"question_id": 1076, "answer_sql": ["SELECT ( SELECT ball_control FROM Player_Attributes WHERE player_api_id = ( SELECT player_api_id FROM Player WHERE player_name = 'Abdou Diallo' ) ) - ( SELECT ball_control FROM Player_Attributes WHERE player_api_id = ( SELECT player_api_id FROM Player WHERE player_name = 'Aaron Appindangoye' ) ) AS num;", "SELECT ( SELECT AVG(ball_control) FROM Player_Attributes WHERE player_api_id = ( SELECT player_api_id FROM Player WHERE player_name = 'Abdou Diallo' ) ) - ( SELECT AVG(ball_control) FROM Player_Attributes WHERE player_api_id = ( SELECT player_api_id FROM Player WHERE player_name = 'Aaron Appindangoye' ) ) AS num;"]}, {"question_id": 1077, "answer_sql": ["SELECT team_long_name FROM Team WHERE team_short_name = 'GEN';"]}, {"question_id": 1078, "answer_sql": ["SELECT player_name FROM Player WHERE player_name IN ('Aaron Lennon', 'Abdelaziz Barrada') ORDER BY birthday ASC LIMIT 1;", "SELECT player_name, birthday FROM Player WHERE player_name IN ('Aaron Lennon', 'Abdelaziz Barrada') ORDER BY birthday ASC LIMIT 1;", "SELECT CASE WHEN (SELECT birthday FROM Player WHERE player_name = 'Aaron Lennon' OR player_name = 'Abdelaziz Barrada') IS NOT NULL THEN 'older' ELSE 'younger' END AS result;"]}, {"question_id": 1079, "answer_sql": ["SELECT Player.player_name FROM Player ORDER BY Player.height DESC LIMIT 1;"]}, {"question_id": 1080, "answer_sql": ["SELECT COUNT(*) FROM Player_Attributes WHERE preferred_foot = 'left' AND attacking_work_rate = 'low';"]}, {"question_id": 1081, "answer_sql": ["SELECT T1.name FROM Country AS T1 INNER JOIN League AS T2 ON T1.id = T2.country_id WHERE T2.name = 'Belgium Jupiler League';"]}, {"question_id": 1082, "answer_sql": ["SELECT T1.name FROM League AS T1 INNER JOIN Country AS T2 ON T1.country_id = T2.id WHERE T2.name = 'Germany';"]}, {"question_id": 1083, "answer_sql": ["SELECT player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T2.strength DESC LIMIT 1;", "SELECT player_name FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id ORDER BY overall_rating DESC LIMIT 1;"]}, {"question_id": 1084, "answer_sql": ["SELECT COUNT(*) FROM Player_Attributes JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE strftime('%Y', Player.birthday) < '1986' AND Player_Attributes.defensive_work_rate = 'high';", "SELECT COUNT(*) FROM Player_Attributes WHERE date = '2013' AND player_api_id IN ( SELECT home_player_1 FROM `Match` WHERE strftime('%Y', home_team_goal) < '2013' ) AND player_api_id IN ( SELECT away_player_1 FROM `Match` WHERE strftime('%Y', away_team_goal) < '2013' );"]}, {"question_id": 1085, "answer_sql": ["SELECT player_name FROM Player WHERE player_api_id IN (SELECT crossing FROM Player_Attributes WHERE player_api_id IN (SELECT player_api_id FROM Player WHERE player_name IN ('Alexis, Ariel Borysiuk', 'Arouna Kone')) ORDER BY crossing DESC LIMIT 1);"]}, {"question_id": 1086, "answer_sql": ["SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Ariel Borysiuk';"]}, {"question_id": 1087, "answer_sql": ["SELECT COUNT(*) FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height > 180 AND T2.volleys > 70;"]}, {"question_id": 1088, "answer_sql": ["SELECT DISTINCT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.volleys > 70 AND T2.dribbling > 70;"]}, {"question_id": 1089, "answer_sql": ["SELECT COUNT(T1.id) FROM Match AS T1 INNER JOIN Country AS T2 ON T1.country_id = T2.id WHERE T1.season = '2008/2009' AND T2.name = 'Belgium';"]}, {"question_id": 1090, "answer_sql": ["SELECT `long_passing` FROM `Player_Attributes` WHERE `date` = (SELECT MIN(`date`) FROM `Player_Attributes`);", "SELECT T2.long_passing FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T1.birthday ASC LIMIT 1;"]}, {"question_id": 1091, "answer_sql": ["SELECT COUNT(*) FROM `Match` WHERE league_id IN ( SELECT id FROM League WHERE name = 'Belgium Jupiler League' ) AND date LIKE '2009-04%';", "SELECT COUNT(*) FROM `Match` WHERE league_id = ( SELECT id FROM League WHERE name = 'Belgium Jupiler League' ) AND date = '2009-04';"]}, {"question_id": 1092, "answer_sql": ["SELECT T2.name FROM `Match` AS T1 INNER JOIN League AS T2 ON T1.league_id = T2.id WHERE T1.season = '2008/2009' GROUP BY T2.name ORDER BY COUNT(T2.id) DESC LIMIT 1;"]}, {"question_id": 1093, "answer_sql": ["SELECT AVG(overall_rating) FROM Player_Attributes WHERE player_api_id IN (SELECT player_api_id FROM Player WHERE strftime('%Y', birthday) < '1986');"]}, {"question_id": 1094, "answer_sql": ["SELECT (SUM(CASE WHEN T1.player_name = 'Ariel Borysiuk' THEN T2.overall_rating ELSE 0 END) - SUM(CASE WHEN T1.player_name = 'Paulin Puel' THEN T2.overall_rating ELSE 0 END)) * 100 / SUM(CASE WHEN T1.player_name = 'Paulin Puel' THEN T2.overall_rating ELSE 0 END) AS diff FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id;", "SELECT (SUM(CASE WHEN T1.player_name = 'Ariel Borysiuk' THEN T2.overall_rating ELSE 0 END) - SUM(CASE WHEN T1.player_name = 'Paulin Puel' THEN T2.overall_rating ELSE 0 END)) * 100.0 / SUM(CASE WHEN T1.player_name = 'Paulin Puel' THEN T2.overall_rating ELSE 0 END) AS diff FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = 'Ariel Borysiuk' OR T1.player_name = 'Paulin Puel';", "SELECT (SUM(CASE WHEN T1.player_name = 'Ariel Borysiuk' THEN T2.overall_rating ELSE 0 END) - SUM(CASE WHEN T1.player_name = 'Paulin Puel' THEN T2.overall_rating ELSE 0 END)) * 100.0 / SUM(CASE WHEN T1.player_name = 'Paulin Puel' THEN T2.overall_rating ELSE 0 END) AS diff FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = 'Ariel Borysiuk';"]}, {"question_id": 1095, "answer_sql": ["SELECT AVG(buildUpPlaySpeed) FROM Team_Attributes WHERE team_fifa_api_id = (SELECT team_api_id FROM Team WHERE team_long_name = 'Heart of Midlothian');", "SELECT AVG(T2.buildUpPlaySpeed) FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_long_name = 'Heart of Midlothian';"]}, {"question_id": 1096, "answer_sql": ["SELECT AVG(T2.overall_rating) FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = 'Pietro Marino';"]}, {"question_id": 1097, "answer_sql": ["SELECT SUM(T2.crossing) FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = 'Aaron Lennox';"]}, {"question_id": 1098, "answer_sql": ["SELECT MAX(chanceCreationPassing), chanceCreationPassingClass FROM Team_Attributes WHERE team_api_id = (SELECT team_api_id FROM Team WHERE team_long_name = 'Ajax') GROUP BY chanceCreationPassingClass;", "SELECT T1.chanceCreationPassing, T1.chanceCreationPassingClass FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.team_long_name = 'Ajax' ORDER BY T1.chanceCreationPassing DESC LIMIT 1;"]}, {"question_id": 1099, "answer_sql": ["SELECT T2.preferred_foot FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = 'Abdou Diallo'"]}, {"question_id": 1100, "answer_sql": ["SELECT MAX(overall_rating) FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Dorlan Pabon');"]}, {"question_id": 1101, "answer_sql": ["SELECT AVG(away_team_goal) FROM `Match` AS T1 INNER JOIN Team AS T2 ON T1.away_team_api_id = T2.team_api_id WHERE T2.team_long_name = 'Parma' AND T1.country_id = 1;", "SELECT AVG(away_team_goal) FROM `Match` AS T1 INNER JOIN Team AS T2 ON T1.away_team_api_id = T2.team_api_id WHERE T2.team_long_name = 'Parma' AND T1.country_id = (SELECT id FROM Country WHERE name = 'Italy');"]}, {"question_id": 1102, "answer_sql": ["SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.overall_rating = 77 AND T2.`date` = '2016-06-23' ORDER BY T1.birthday ASC LIMIT 1;"]}, {"question_id": 1103, "answer_sql": ["SELECT overall_rating FROM Player_Attributes WHERE player_api_id = ( SELECT player_api_id FROM Player WHERE player_name = 'Aaron Mooy' ) AND `date` = '2016-02-04 00:00:00';"]}, {"question_id": 1104, "answer_sql": ["SELECT T1.potential FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Francesco Parravicini' AND T1.`date` = '2010-08-30 00:00:00';"]}, {"question_id": 1105, "answer_sql": ["SELECT T1.attacking_work_rate FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Francesco Migliore' AND T1.date = '2015-05-01 00:00:00';"]}, {"question_id": 1106, "answer_sql": ["SELECT T1.defensive_work_rate FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Kevin Berigaud' AND T1.date = '2013-02-22 00:00:00';"]}, {"question_id": 1107, "answer_sql": ["SELECT T1.date FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Kevin Constant' ORDER BY T1.crossing DESC LIMIT 1;"]}, {"question_id": 1108, "answer_sql": ["SELECT T1.buildUpPlaySpeedClass FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.team_long_name = 'Willem II' AND T1.`date` = '2011-02-22 00:00:00';", "SELECT T1.buildUpPlaySpeedClass FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.team_long_name = 'Willem II' AND T1.`date` = '2011-02-22';"]}, {"question_id": 1109, "answer_sql": ["SELECT DISTINCT T1.buildUpPlayDribblingClass FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.team_short_name = 'LEI' AND T1.`date` = '2015-09-10 00:00:00';", "SELECT DISTINCT T2.buildUpPlayDribblingClass FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.date = '2015-09-10' AND T1.team_short_name = 'LEI';"]}, {"question_id": 1110, "answer_sql": ["SELECT T2.buildUpPlayPassingClass FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_long_name = 'FC Lorient' AND T2.`date` = '2010-02-22'"]}, {"question_id": 1111, "answer_sql": ["SELECT T2.chanceCreationPassingClass FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_long_name = 'PEC Zwolle' AND T2.`date` = '2013-09-20 00:00:00';"]}, {"question_id": 1112, "answer_sql": ["SELECT T2.chanceCreationCrossingClass FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_long_name = 'Hull City' AND T2.`date` = '2010-02-22 00:00:00';"]}, {"question_id": 1113, "answer_sql": ["SELECT Team_Attributes.defenceAggressionClass FROM Team_Attributes JOIN Team ON Team_Attributes.team_api_id = Team.team_api_id WHERE Team.team_long_name = 'Hannover 96' AND Team_Attributes.`date` = '2015-09-10 00:00:00';"]}, {"question_id": 1114, "answer_sql": ["SELECT AVG(overall_rating) FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Marko Arnautovic') AND `date` BETWEEN '2007-02-22 00:00:00' AND '2016-04-21 00:00:00';"]}, {"question_id": 1115, "answer_sql": ["SELECT (SUM(CASE WHEN T1.player_name = 'Landon Donovan' THEN T2.overall_rating ELSE 0 END) - SUM(CASE WHEN T1.player_name = 'Jordan Bowery' THEN T2.overall_rating ELSE 0 END)) * 100 / SUM(CASE WHEN T1.player_name = 'Landon Donovan' THEN T2.overall_rating ELSE 0 END) AS percentage FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.date = '2013-07-12';"]}, {"question_id": 1116, "answer_sql": ["SELECT player_name FROM Player ORDER BY height DESC LIMIT 5;"]}, {"question_id": 1117, "answer_sql": ["SELECT player_api_id FROM Player ORDER BY weight DESC LIMIT 10;"]}, {"question_id": 1118, "answer_sql": []}, {"question_id": 1119, "answer_sql": ["SELECT SUM(T2.home_team_goal) FROM Player AS T1 INNER JOIN Match AS T2 ON T1.player_api_id = T2.away_player_1 WHERE T1.player_name = 'Aaron Lennon'", "SELECT COUNT(*) FROM `Player` AS T1 INNER JOIN `Match` AS T2 ON T1.player_api_id = T2.away_player_1 WHERE T1.player_name = 'Aaron Lennon';"]}, {"question_id": 1120, "answer_sql": ["SELECT SUM(T2.away_team_goal) FROM Player AS T1 INNER JOIN Match AS T2 ON T1.player_api_id = T2.away_player_1 WHERE T1.player_name IN ('Daan Smith', 'Filipe Ferreira');"]}, {"question_id": 1121, "answer_sql": ["SELECT SUM(T1.home_team_goal) FROM `Match` AS T1 INNER JOIN Player AS T2 ON T1.away_player_1 = T2.player_api_id WHERE datetime(CURRENT_TIMESTAMP, 'localtime') - datetime(T2.birthday) < 31"]}, {"question_id": 1122, "answer_sql": ["SELECT DISTINCT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T2.overall_rating DESC LIMIT 10;"]}, {"question_id": 1123, "answer_sql": ["SELECT DISTINCT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.potential = ( SELECT MAX(potential) FROM Player_Attributes );"]}, {"question_id": 1124, "answer_sql": ["SELECT DISTINCT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.attacking_work_rate = 'high' AND T2.preferred_foot = 'attacking';", "SELECT DISTINCT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.attacking_work_rate = 'high';"]}, {"question_id": 1125, "answer_sql": ["SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.finishing = 1 ORDER BY datetime(CURRENT_TIMESTAMP, 'localtime') - datetime(T1.birthday) DESC LIMIT 1;", "SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.finishing = 1 ORDER BY T2.date DESC LIMIT 1;"]}, {"question_id": 1126, "answer_sql": ["SELECT DISTINCT T4.player_name FROM Country AS T1 INNER JOIN League AS T2 ON T1.id = T2.country_id INNER JOIN Match AS T3 ON T2.id = T3.league_id INNER JOIN Player AS T4 ON T3.away_player_1 = T4.player_api_id WHERE T1.name = 'Belgium'", "SELECT T3.player_name FROM Country AS T1 INNER JOIN Match AS T2 ON T1.id = T2.country_id INNER JOIN Player AS T3 ON T3.player_api_id = T2.away_player_1 WHERE T1.name = 'Belgium'", "SELECT T4.player_name FROM Country AS T1 INNER JOIN League AS T2 ON T1.id = T2.country_id INNER JOIN Match AS T3 ON T2.id = T3.league_id INNER JOIN Player AS T4 ON T3.away_player_1 = T4.player_api_id WHERE T1.name = 'Belgium' GROUP BY T4.player_name;"]}, {"question_id": 1127, "answer_sql": ["SELECT DISTINCT T3.country_id, T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id INNER JOIN Match AS T3 ON T1.player_api_id = T3.away_player_1 WHERE T2.vision > 89"]}, {"question_id": 1128, "answer_sql": ["SELECT T1.name FROM Country AS T1 INNER JOIN Match AS T2 ON T1.id = T2.country_id INNER JOIN Player AS T3 ON T2.home_player_1 = T3.player_api_id GROUP BY T1.id ORDER BY AVG(T3.weight) DESC LIMIT 1;"]}, {"question_id": 1129, "answer_sql": ["SELECT DISTINCT T1.team_long_name FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.buildUpPlaySpeedClass = 'Slow';", "SELECT T1.team_long_name FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.buildUpPlaySpeedClass = 'Slow' GROUP BY T1.team_long_name;"]}, {"question_id": 1130, "answer_sql": ["SELECT DISTINCT T1.team_short_name FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.chanceCreationPassingClass = 'Safe';", "SELECT T1.team_short_name FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.chanceCreationPassingClass = 'Safe' GROUP BY T1.team_short_name;"]}, {"question_id": 1131, "answer_sql": ["SELECT AVG(T1.height) FROM Player AS T1 INNER JOIN Match AS T2 ON T1.player_api_id = T2.away_player_1 INNER JOIN Country AS T3 ON T2.country_id = T3.id WHERE T3.name = 'Italy'", "SELECT AVG(T1.height) FROM Player AS T1 INNER JOIN Match AS T2 ON T1.player_api_id = T2.away_player_1 WHERE T2.country_id = 1"]}, {"question_id": 1132, "answer_sql": ["SELECT player_name FROM Player WHERE height > 180 ORDER BY player_name LIMIT 3;"]}, {"question_id": 1133, "answer_sql": ["SELECT COUNT(*) FROM Player WHERE birthday > '1990' AND player_name LIKE 'Aaron%';", "SELECT COUNT(*) FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE SUBSTR(T1.birthday, 1, 4) > 1990 AND T1.player_name LIKE 'Aaron%';", "SELECT COUNT(*) FROM Player WHERE SUBSTR(birthday, 1, 4) > '1990' AND player_name LIKE 'Aaron%';"]}, {"question_id": 1134, "answer_sql": ["SELECT ( SELECT jumping FROM Player_Attributes WHERE id = 6 ) - ( SELECT jumping FROM Player_Attributes WHERE id = 23 ) AS num"]}, {"question_id": 1135, "answer_sql": ["SELECT id FROM Player_Attributes WHERE potential = (SELECT MIN(potential) FROM Player_Attributes) AND preferred_foot = 'right' LIMIT 3;"]}, {"question_id": 1136, "answer_sql": ["SELECT COUNT(*) FROM Player_Attributes WHERE preferred_foot = 'left' AND crossing = (SELECT MAX(crossing) FROM Player_Attributes WHERE preferred_foot = 'left');"]}, {"question_id": 1137, "answer_sql": ["SELECT CAST(SUM(CASE WHEN strength > 80 AND stamina > 80 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Player_Attributes;"]}, {"question_id": 1138, "answer_sql": ["SELECT T1.name FROM Country AS T1 INNER JOIN League AS T2 ON T1.id = T2.country_id WHERE T2.name = 'Poland Ekstraklasa';"]}, {"question_id": 1139, "answer_sql": ["SELECT home_team_goal, away_team_goal FROM `Match` WHERE date LIKE '2008-09-24%';"]}, {"question_id": 1140, "answer_sql": ["SELECT T1.sprint_speed, T1.agility, T1.acceleration FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Alexis Blin'"]}, {"question_id": 1141, "answer_sql": ["SELECT T1.team_long_name, T2.buildUpPlaySpeedClass FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_long_name = 'KSV Cercle Brugge' ORDER BY T2.buildUpPlaySpeedClass DESC LIMIT 1;", "SELECT T1.buildUpPlaySpeedClass FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.team_long_name = 'KSV Cercle Brugge'", "SELECT DISTINCT T1.team_long_name, T2.buildUpPlaySpeedClass FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_long_name = 'KSV Cercle Brugge' AND T2.buildUpPlaySpeedClass IN ('Slow', 'Balanced', 'Fast');", "SELECT T1.team_long_name, T2.buildUpPlaySpeedClass FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_long_name = 'KSV Cercle Brugge' ORDER BY T2.buildUpPlaySpeedClass;", "SELECT T1.team_long_name, T2.buildUpPlaySpeedClass FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_long_name = 'KSV Cercle Brugge' AND T2.buildUpPlaySpeedClass IN ('Slow', 'Balanced', 'Fast');"]}, {"question_id": 1142, "answer_sql": ["SELECT COUNT(*) FROM `Match` WHERE league_id = ( SELECT id FROM League WHERE name = 'Italy Serie A' ) AND season = '2015/2016';"]}, {"question_id": 1143, "answer_sql": ["SELECT MAX(home_team_goal) FROM `Match` WHERE league_id = ( SELECT id FROM League WHERE name = 'Netherlands Eredivisie' );"]}, {"question_id": 1144, "answer_sql": ["SELECT T1.finishing, T1.curve FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T2.weight DESC LIMIT 1;"]}, {"question_id": 1145, "answer_sql": ["SELECT T2.name FROM `Match` AS T1 INNER JOIN League AS T2 ON T1.league_id = T2.id WHERE T1.season = '2015/2016' GROUP BY T2.name ORDER BY COUNT(T2.id) DESC LIMIT 1;"]}, {"question_id": 1146, "answer_sql": ["SELECT T2.team_long_name FROM `Match` AS T1 INNER JOIN Team AS T2 ON T1.away_team_api_id = T2.team_api_id ORDER BY T1.away_team_goal DESC LIMIT 1"]}, {"question_id": 1147, "answer_sql": ["SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.strength = ( SELECT MAX(strength) FROM Player_Attributes )", "SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T2.strength DESC LIMIT 1;"]}, {"question_id": 1148, "answer_sql": ["SELECT CAST(SUM(CASE WHEN T1.height < 180 AND T2.overall_rating > 70 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id;", "SELECT CAST(SUM(CASE WHEN T1.height < 180 AND T2.overall_rating > 70 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height < 180;"]}, {"question_id": 1149, "answer_sql": ["SELECT (CASE WHEN SEX = 'M' THEN 'In-patient' ELSE 'Out-patient' END) AS Gender, (CASE WHEN SEX = 'M' THEN 1 ELSE 0 END) * 100.0 / (SELECT COUNT(ID) FROM Patient WHERE Admission IN ('+', '-')) AS Percentage FROM Patient WHERE Admission IN ('+', '-') AND SEX = 'M';", "SELECT CAST(SUM(CASE WHEN SEX = 'M' AND Admission = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN SEX = 'M' AND Admission = '-' THEN 1 ELSE 0 END) FROM Patient;", "SELECT (CASE WHEN SEX = 'M' THEN 'In-patient' ELSE 'Out-patient' END) AS Gender, (CASE WHEN SEX = 'M' THEN 1 ELSE 0 END) * 100.0 / (SELECT COUNT(ID) FROM Patient WHERE Admission = '+' OR Admission = '-') AS Deviation_Percentage FROM Patient WHERE Admission = '+' OR Admission = '-';", "SELECT (CASE WHEN Admission = '+' THEN 'In-patient' ELSE 'Out-patient' END) AS Admission, (CASE WHEN SEX = 'M' THEN 'Male' ELSE 'Female' END) AS SEX, CAST(COUNT(CASE WHEN SEX = 'M' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(ID) FROM Patient WHERE Admission IN ('+', '-') GROUP BY Admission, SEX;", "SELECT (CASE WHEN Admission = '+' THEN 'In-patient' ELSE 'Out-patient' END) AS Admission, (CASE WHEN SEX = 'M' THEN 'Male' ELSE 'Female' END) AS SEX, (SUM(CASE WHEN Admission = '+' THEN 1 ELSE 0 END) - SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END)) * 100.0 / COUNT(ID) AS Deviation FROM Patient WHERE SEX = 'M' GROUP BY Admission;"]}, {"question_id": 1150, "answer_sql": ["SELECT CAST(SUM(CASE WHEN STRFTIME('%Y', Birthday) > '1930' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Patient WHERE SEX = 'F';"]}, {"question_id": 1151, "answer_sql": ["SELECT CAST(SUM(CASE WHEN Admission = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Patient WHERE STRFTIME('%Y', Birthday) BETWEEN '1930' AND '1940';"]}, {"question_id": 1152, "answer_sql": ["SELECT CAST(SUM(CASE WHEN Admission = '+' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END) FROM Patient WHERE Diagnosis = 'SLE';"]}, {"question_id": 1153, "answer_sql": ["SELECT T1.Diagnosis, T2.Date FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID = 30609"]}, {"question_id": 1154, "answer_sql": ["SELECT T1.SEX , T1.Birthday , T2.`Examination Date` , T2.Symptoms FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.ID = 163109"]}, {"question_id": 1155, "answer_sql": ["SELECT DISTINCT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH > 500;", "SELECT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH > 500;"]}, {"question_id": 1156, "answer_sql": ["SELECT T1.ID, T1.Birthday FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.RVVT = '+'", "SELECT T1.ID, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T2.Birthday) FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.RVVT = '+'"]}, {"question_id": 1157, "answer_sql": ["SELECT T1.ID, T1.SEX, T1.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Thrombosis = 2;"]}, {"question_id": 1158, "answer_sql": ["SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T1.Birthday) = '1937' AND T2.`T-CHO` >= 250;"]}, {"question_id": 1159, "answer_sql": ["SELECT DISTINCT T1.ID, T1.SEX, T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.ALB < 3.5;", "SELECT T1.ID, T1.SEX, T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.ALB < 3.5;"]}, {"question_id": 1160, "answer_sql": ["SELECT CAST(SUM(CASE WHEN T1.TP < 6.0 OR T1.TP > 8.5 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.SEX = 'F';", "SELECT CAST(SUM(CASE WHEN T1.SEX = 'F' AND (T2.TP < 6.0 OR T2.TP > 8.5) THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TP IS NOT NULL;", "SELECT CAST(SUM(CASE WHEN T1.SEX = 'F' AND (T2.TP < 6.0 OR T2.TP > 8.5) THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TP < 6.0 OR T2.TP > 8.5;"]}, {"question_id": 1161, "answer_sql": ["SELECT AVG(T2.`aCL IgG`) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.Admission = '+' AND STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) >= 50;"]}, {"question_id": 1162, "answer_sql": ["SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND STRFTIME('%Y', T1.Description) = '1997' AND T1.Admission = '-'"]}, {"question_id": 1163, "answer_sql": ["SELECT MIN(STRFTIME('%Y', Birthday) - STRFTIME('%Y', `First Date`)) FROM Patient;", "SELECT STRFTIME('%Y', Birthday) - STRFTIME('%Y', `First Date`) AS age FROM Patient ORDER BY age ASC LIMIT 1;"]}, {"question_id": 1164, "answer_sql": ["SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Thrombosis = 1 AND T1.SEX = 'F' AND T2.`Examination Date` LIKE '1997%';"]}, {"question_id": 1165, "answer_sql": []}, {"question_id": 1166, "answer_sql": ["SELECT T1.Symptoms, T1.Diagnosis FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.Birthday IS NOT NULL ORDER BY T2.Birthday ASC LIMIT 1;"]}, {"question_id": 1167, "answer_sql": ["SELECT CAST(COUNT(T1.ID) AS REAL) / 12 FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T2.Date) = '1998' AND T1.SEX = 'M';"]}, {"question_id": 1168, "answer_sql": ["SELECT T1.Birthday, T1.`First Date`, (STRFTIME('%Y', T1.`First Date`) - STRFTIME('%Y', T1.Birthday)) AS age FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SJS' ORDER BY T1.Birthday ASC LIMIT 1;", "SELECT T2.Date, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SJS' ORDER BY T1.Birthday ASC LIMIT 1;", "SELECT T2.Date, T1.Birthday, STRFTIME('%Y', T1.Birthday) - STRFTIME('%Y', T1.`First Date`) AS Age FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SJS' ORDER BY T1.Birthday ASC LIMIT 1;", "SELECT T1.`First Date`, T2.Date, T2.Date - strftime('%Y', T1.Birthday) as age FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SJS' ORDER BY T2.Date LIMIT 1;"]}, {"question_id": 1169, "answer_sql": ["SELECT CAST(SUM(CASE WHEN SEX = 'M' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN SEX = 'F' THEN 1 ELSE 0 END) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.UA <= 8.0 AND T2.UA >= 6.5;", "SELECT CAST(SUM(CASE WHEN SEX = 'M' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN SEX = 'F' THEN 1 ELSE 0 END) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.UA <= 8.0 OR T2.UA >= 6.5;"]}, {"question_id": 1170, "answer_sql": ["SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T2.`Examination Date`) - STRFTIME('%Y', T1.`First Date`) >= 1", "SELECT COUNT(DISTINCT ID) FROM Examination EX WHERE ID NOT IN (SELECT ID FROM Patient WHERE `First Date` IS NOT NULL)", "SELECT COUNT(DISTINCT ID) FROM Examination EX WHERE (SELECT COUNT(DISTINCT T2.ID) FROM Patient T2 WHERE T2.ID = EX.ID AND T2.`First Date` < EX.`Examination Date`) >= 1;"]}, {"question_id": 1171, "answer_sql": ["SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE STRFTIME('%Y', T3.`Examination Date`) BETWEEN '1990' AND '1993' AND T1.SEX = 'Underage';"]}, {"question_id": 1172, "answer_sql": ["SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.`T-BIL` > 2.0;"]}, {"question_id": 1173, "answer_sql": ["SELECT Diagnosis FROM Examination WHERE `Examination Date` BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY Diagnosis ORDER BY COUNT(Diagnosis) DESC LIMIT 1"]}, {"question_id": 1174, "answer_sql": ["SELECT AVG(DISTINCT T2.Date) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.Date BETWEEN '1991-10-01' AND '1991-10-30';"]}, {"question_id": 1175, "answer_sql": ["SELECT T1.Birthday, T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.HGB = ( SELECT MAX(HGB) FROM Laboratory ) ORDER BY T2.HGB DESC LIMIT 1;", "SELECT T1.ID, T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.HGB = ( SELECT MAX(HGB) FROM Laboratory ) ORDER BY T2.HGB DESC LIMIT 1;", "SELECT T1.`Examination Date` - strftime('%Y', T2.Birthday) AS age, T2.Diagnosis FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T2.ID = T3.ID ORDER BY T3.HGB DESC LIMIT 1;"]}, {"question_id": 1176, "answer_sql": ["SELECT T2.ANA FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.ID = 3605340 AND T2.`Examination Date` = '1996-12-02' AND T2.ANA IS NOT NULL", "SELECT `ANA` FROM Examination WHERE ID = 3605340 AND `Examination Date` = '1996-12-02'"]}, {"question_id": 1177, "answer_sql": ["SELECT CASE WHEN T1.`T-CHO` < 250 THEN 'Normal' ELSE 'Abnormal' END FROM Laboratory AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.ID = 2927464 AND T1.Date = '1995-09-04';"]}, {"question_id": 1178, "answer_sql": ["SELECT T1.SEX FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Diagnosis = 'AORTITIS' ORDER BY T1.`First Date` ASC LIMIT 1;"]}, {"question_id": 1179, "answer_sql": ["SELECT T2.`aCL IgM` FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SLE' AND T1.Description = '1994-02-19' AND T2.`aCL IgM` IS NOT NULL AND T2.`aCL IgM` != 0;", "SELECT T2.`aCL IgM` FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.Description = '1993-11-12' AND T2.Diagnosis = 'SLE' AND T2.`aCL IgM` IS NOT NULL;"]}, {"question_id": 1180, "answer_sql": ["SELECT T1.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GPT = 9 AND T2.Date = '1992-06-12' AND T1.SEX IN ('M', 'F')"]}, {"question_id": 1181, "answer_sql": ["SELECT T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.UA = 8.4 AND T2.Date = '1991-10-21'"]}, {"question_id": 1182, "answer_sql": ["SELECT COUNT(T2.ID) FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.`First Date` = '1991-06-13' AND T2.Diagnosis = 'SJS' AND STRFTIME('%Y', T1.Date) = '1995';"]}, {"question_id": 1183, "answer_sql": ["SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.`Examination Date` = '1997-01-27' AND T1.`First Date` = '1997-01-27' AND T2.Diagnosis = 'SLE';", "SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.`Examination Date` = '1997-01-27' AND T1.Diagnosis = 'SLE' AND T1.`First Date` IS NULL;"]}, {"question_id": 1184, "answer_sql": ["SELECT T2.Symptoms FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.Birthday = '1959-03-01' AND T2.`Examination Date` = '1993-09-27'", "SELECT T1.Symptoms FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T2.ID = T3.ID WHERE T2.Birthday = '1959-03-01' AND T1.`Examination Date` = '1993-09-27'"]}, {"question_id": 1185, "answer_sql": ["SELECT (CAST(SUM(CASE WHEN T1.Date LIKE '1981-11-%' THEN T1.`T-CHO` ELSE 0 END) - SUM(CASE WHEN T1.Date LIKE '1981-12-%' THEN T1.`T-CHO` ELSE 0 END) AS REAL) / SUM(CASE WHEN T1.Date LIKE '1981-12-%' THEN T1.`T-CHO` ELSE 0 END) * 100) FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.Birthday = '1959-02-18';", "SELECT (CAST(SUM(CASE WHEN T2.Date LIKE '1981-11-%' THEN T2.`T-CHO` ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.Date LIKE '1981-12-%' THEN T2.`T-CHO` ELSE 0 END)) * 100 FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Birthday = '1959-02-18' AND T2.Date = '0000-00-00';", "SELECT (CAST(SUM(CASE WHEN T2.Date LIKE '1981-11-%' THEN T2.`T-CHO` ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.Date LIKE '1981-12-%' THEN T2.`T-CHO` ELSE 0 END)) * 100 FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Birthday = '1959-02-18'", "SELECT CAST(SUM(CASE WHEN T2.Date LIKE '1981-11-%' THEN T2.`T-CHO` ELSE 0 END) - SUM(CASE WHEN T2.Date LIKE '1981-12-%' THEN T2.`T-CHO` ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T2.Date LIKE '1981-12-%' THEN T2.`T-CHO` ELSE 0 END) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Birthday = '1959-02-18' AND T2.`T-CHO` IS NOT NULL;", "SELECT (CAST(SUM(CASE WHEN T2.Date LIKE '1981-12-%' THEN T2.`T-CHO` ELSE 0 END) AS REAL) - CAST(SUM(CASE WHEN T2.Date LIKE '1981-11-%' THEN T2.`T-CHO` ELSE 0 END) AS REAL)) * 100 / SUM(CASE WHEN T2.Date LIKE '1981-11-%' THEN T2.`T-CHO` ELSE 0 END) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Birthday = '1959-02-18'"]}, {"question_id": 1186, "answer_sql": ["SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'Behcet' AND T2.`Examination Date` BETWEEN '197-01-01' AND '1997-12-31';"]}, {"question_id": 1187, "answer_sql": ["SELECT DISTINCT T1.ID FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GPT > 30 AND T2.ALB < 4 AND T1.`Examination Date` BETWEEN '1987-07-06' AND '1996-01-31';", "SELECT DISTINCT T1.ID FROM Laboratory AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.GPT > 30 AND T1.ALB < 4 AND T1.Date BETWEEN '1987-07-06' AND '1996-01-31';", "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GPT > 30 AND T2.ALB < 4 AND T2.Date BETWEEN '1987-07-06' AND '1996-01-31';"]}, {"question_id": 1188, "answer_sql": ["SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND STRFTIME('%Y', T1.Birthday) = '1964' AND T1.Admission = '+';", "SELECT ID FROM Patient WHERE SEX = 'F' AND STRFTIME('%Y', Birthday) = '1964' AND Admission = '+';", "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND STRFTIME('%Y', T1.Birthday) = '1964' AND T1.Admission = '+';"]}, {"question_id": 1189, "answer_sql": ["SELECT COUNT(*) FROM Examination WHERE Thrombosis = 2 AND `ANA Pattern` = 'S' AND `aCL IgM` > ( SELECT AVG(`aCL IgM`) * 1.2 FROM Examination WHERE Thrombosis = 2 AND `ANA Pattern` = 'S' );", "SELECT COUNT(DISTINCT T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Thrombosis = 2 AND T1.`ANA Pattern` = 'S' AND T2.IGM * 100 > ( SELECT AVG(IGM) * 20 FROM Laboratory );"]}, {"question_id": 1190, "answer_sql": ["SELECT CAST(SUM(CASE WHEN T1.UA <= 6.5 AND T1.`U-PRO` > 0 AND T1.`U-PRO` < 30 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Laboratory AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Thrombosis = 1;", "SELECT CAST(SUM(CASE WHEN `U-PRO` > 0 AND `U-PRO` < 30 AND UA <= 6.5 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Laboratory WHERE `U-PRO` IS NOT NULL AND UA IS NOT NULL;", "SELECT CAST(SUM(CASE WHEN T2.UA <= 6.5 AND T2.`U-PRO` > 0 AND T2.`U-PRO` < 30 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.UA <= 6.5 AND T2.`U-PRO` > 0 AND T2.`U-PRO` < 30;", "SELECT CAST(SUM(CASE WHEN UA <= 6.5 AND `U-PRO` > 0 AND `U-PRO` < 30 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Laboratory WHERE `U-PRO` IS NOT NULL;"]}, {"question_id": 1191, "answer_sql": ["SELECT CAST(SUM(CASE WHEN Diagnosis = 'BEHCET' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Patient WHERE SEX = 'M' AND STRFTIME('%Y', `First Date`) = '1981';"]}, {"question_id": 1192, "answer_sql": ["SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.Date LIKE '1991-10%' AND T2.`T-BIL` < 2.0 AND T1.Admission = '-' AND T1.Description IS NOT NULL;"]}, {"question_id": 1193, "answer_sql": ["SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.`ANA Pattern` != 'P' AND STRFTIME('%Y', T1.Birthday) BETWEEN '1980' AND '1989' AND T1.SEX = 'F';"]}, {"question_id": 1194, "answer_sql": ["SELECT T1.SEX FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T3.ID = T2.ID WHERE T2.Diagnosis = 'PSS' AND T3.CRP > 2 AND T3.CRE = 1 AND T3.LDH = 123"]}, {"question_id": 1195, "answer_sql": ["SELECT AVG(T2.ALB) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND T2.PLT > 400 AND T1.Diagnosis = 'SLE';"]}, {"question_id": 1196, "answer_sql": ["SELECT Examination.Symptoms FROM Examination WHERE Examination.Diagnosis = 'SLE' GROUP BY Examination.Symptoms ORDER BY COUNT(Examination.Symptoms) DESC LIMIT 1"]}, {"question_id": 1197, "answer_sql": ["SELECT T1.Description, T1.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.ID = 48473", "SELECT `First Date`, Diagnosis FROM Patient WHERE ID = 48473;"]}, {"question_id": 1198, "answer_sql": ["SELECT COUNT(ID) FROM Patient WHERE SEX = 'F' AND Diagnosis = 'APS';", "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND T2.Diagnosis = 'APS';"]}, {"question_id": 1199, "answer_sql": ["SELECT COUNT(DISTINCT T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T1.`Examination Date`) = '1997' AND T2.TP > 6 AND T2.TP < 8.5;", "SELECT COUNT(DISTINCT T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T2.Date) = '1997' AND T2.TP > 6 AND T2.TP < 8.5;", "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T2.Date) = '1997' AND T2.TP > 6 AND T2.TP < 8.5;"]}, {"question_id": 1200, "answer_sql": ["SELECT CAST(SUM(CASE WHEN Diagnosis = 'SLE' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Examination WHERE Symptoms = 'thrombocytopenia';", "SELECT CAST(SUM(CASE WHEN Diagnosis = 'SLE' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Examination WHERE Thrombosis = 1;", "SELECT CAST(SUM(CASE WHEN Diagnosis = 'SLE' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Patient WHERE ID IN ( SELECT ID FROM Examination WHERE Symptoms = 'thrombocytopenia' );"]}, {"question_id": 1201, "answer_sql": ["SELECT CAST(SUM(CASE WHEN SEX = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Patient WHERE STRFTIME('%Y', Birthday) = '1980' AND Diagnosis = 'RA';", "SELECT CAST(SUM(CASE WHEN T1.SEX = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T1.Birthday) = '1980' AND T2.RA = 'RA';"]}, {"question_id": 1202, "answer_sql": ["SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.Diagnosis = 'BEHCET' AND T2.`Examination Date` BETWEEN '1995-01-01' AND '1997-12-31' AND T1.Admission = '-'"]}, {"question_id": 1203, "answer_sql": ["SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND T2.WBC < 3.5;", "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND T2.WBC < 3.5 AND T2.DNA = 'White'", "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND T2.WBC < 3.5 AND T2.WBC > 0;"]}, {"question_id": 1204, "answer_sql": []}, {"question_id": 1205, "answer_sql": ["SELECT CASE WHEN T2.UA > 8.0 AND T1.SEX = 'M' THEN 'Normal' ELSE 'Abnormal' END FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID = 57266 AND T2.UA > 6.5 AND T1.SEX = 'F';", "SELECT CASE WHEN T2.UA > 6.5 THEN 'Normal' ELSE 'Abnormal' END FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID = 57266 AND T1.SEX IN ('F', 'M');", "SELECT CASE WHEN T2.UA > 8.0 AND T1.SEX = 'M' THEN 'Normal' ELSE 'Abnormal' END uric_acid_normal FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID = 57266;"]}, {"question_id": 1206, "answer_sql": ["SELECT DISTINCT T1.Date FROM Laboratory AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.ID = 48473 AND T1.GOT >= 60;", "SELECT DISTINCT T1.`Examination Date` FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID = 48473 AND T2.GOT >= 60;"]}, {"question_id": 1207, "answer_sql": ["SELECT DISTINCT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GOT < 60 AND STRFTIME('%Y', T2.Date) = '1994';", "SELECT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GOT < 60 AND STRFTIME('%Y', T2.Date) = '1994'", "SELECT T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GOT < 60 AND STRFTIME('%Y', T2.Date) = '1994'"]}, {"question_id": 1208, "answer_sql": ["SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.GPT >= 60;"]}, {"question_id": 1209, "answer_sql": ["SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GPT > 60 ORDER BY T1.Birthday ASC;"]}, {"question_id": 1210, "answer_sql": ["SELECT AVG(LDH) FROM Laboratory WHERE LDH < 500;"]}, {"question_id": 1211, "answer_sql": ["SELECT T1.ID, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) AS age FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH BETWEEN 600 AND 800;", "SELECT T1.ID, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH BETWEEN 100 AND 300;"]}, {"question_id": 1212, "answer_sql": ["SELECT T1.Admission FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.ALP < 300"]}, {"question_id": 1213, "answer_sql": ["SELECT T1.ID, CASE WHEN T2.ALP < 300 THEN 'Normal' ELSE 'Abnormal' END FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Birthday = '1982-04-01'", "SELECT T1.ID, CASE WHEN T2.ALP < 300 THEN 'Normal' ELSE 'Abnormal' END FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Birthday = '1982-04-01' AND T2.ALP IS NOT NULL;", "SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Birthday = '1982-04-01' AND T2.ALP < 300;"]}, {"question_id": 1214, "answer_sql": ["SELECT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TP < 6.0;", "SELECT DISTINCT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TP < 6.0;"]}, {"question_id": 1215, "answer_sql": ["SELECT T1.ID, T1.TP - 8.5 FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.SEX = 'F' AND T1.TP > 8.5;", "SELECT T1.ID, T2.TP, T2.TP - 8.5 FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND T2.TP > 8.5;"]}, {"question_id": 1216, "answer_sql": ["SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND (T2.ALB <= 3.5 OR T2.ALB >= 5.5);", "SELECT DISTINCT T1.ID, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND (T2.ALB <= 3.5 OR T2.ALB >= 5.5);", "SELECT * FROM Patient WHERE SEX = 'M' AND ID NOT IN (SELECT ID FROM Laboratory WHERE ALB BETWEEN 3.5 AND 5.5) ORDER BY Birthday DESC", "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND (T2.ALB <= 3.5 OR T2.ALB >= 5.5) ORDER BY T1.Birthday DESC;"]}, {"question_id": 1217, "answer_sql": ["SELECT T1.Birthday, T2.ALB FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Birthday LIKE '1982%' AND T2.ALB BETWEEN 3.5 AND 5.5;", "SELECT T1.ID, T2.ALB FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Birthday LIKE '1982%' AND T2.ALB BETWEEN 3.5 AND 5.5;", "SELECT T1.ID, CASE WHEN T2.ALB BETWEEN 3.5 AND 5.5 THEN 'Normal' ELSE 'Abnormal' END FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T1.Birthday) = '1982';"]}, {"question_id": 1218, "answer_sql": ["SELECT (COUNT(T1.ID) * 100.0 / (SELECT COUNT(ID) FROM Patient WHERE SEX = 'F')) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.UA > 8.0 OR T2.UA > 6.5 AND T1.SEX = 'F';", "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Patient WHERE SEX = 'F')) AS Percentage FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.UA > 8.0 AND T1.SEX = 'F' OR T2.UA > 6.5 AND T1.SEX = 'M';", "SELECT (CASE WHEN SUM(CASE WHEN T1.SEX = 'F' THEN 1 ELSE 0 END) * 100.0 / COUNT(T1.ID) > 8.0 THEN SUM(CASE WHEN T1.SEX = 'F' THEN 1 ELSE 0 END) * 100.0 / COUNT(T1.ID) ELSE 0 END) AS Percentage FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.UA > 8.0 OR T2.UA > 6.5;", "SELECT CAST(SUM(CASE WHEN T2.UA > 8.0 AND T1.SEX = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M';"]}, {"question_id": 1219, "answer_sql": ["SELECT AVG(T2.UA) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.UA < 8.0 AND T1.SEX = 'M' OR T2.UA < 6.5 AND T1.SEX = 'F' GROUP BY T2.UA ORDER BY T2.UA DESC LIMIT 1;", "SELECT AVG(T2.UA) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.UA < 8.0 AND T1.SEX IN ('M', 'F')", "SELECT AVG(T2.UA) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.UA < 8.0 AND T1.SEX = 'M' OR T2.UA < 6.5 AND T1.SEX = 'F' AND T2.UA IS NOT NULL;", "SELECT AVG(T2.UA) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX IN ('M', 'F') AND T2.UA < 8.0 AND T2.UA < 6.5;"]}, {"question_id": 1220, "answer_sql": ["SELECT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.UN = 29", "SELECT DISTINCT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.UN BETWEEN 20 AND 30;", "SELECT DISTINCT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.UN BETWEEN 25 AND 30;", "SELECT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.UN BETWEEN 25 AND 30;", "SELECT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.UN BETWEEN 20 AND 30;"]}, {"question_id": 1221, "answer_sql": ["SELECT DISTINCT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.UN < 30 AND T1.Diagnosis = 'RA'", "SELECT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.UN < 30 AND T2.RA = 'RA' AND T1.Diagnosis = 'RA';", "SELECT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.UN < 30 AND T1.Diagnosis = 'RA'"]}, {"question_id": 1222, "answer_sql": ["SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CRE >= 1.5 AND T1.SEX = 'M';"]}, {"question_id": 1223, "answer_sql": []}, {"question_id": 1224, "answer_sql": ["SELECT T2.`T-BIL`, T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID ORDER BY T2.`T-BIL` DESC LIMIT 1;", "SELECT T2.ID, T2.SEX, T2.Birthday FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID ORDER BY T1.`T-BIL` DESC LIMIT 1;"]}, {"question_id": 1225, "answer_sql": ["SELECT T1.SEX, SUM(T2.`T-BIL`) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`T-BIL` >= 2.0 GROUP BY T1.SEX;", "SELECT T1.SEX, COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`T-BIL` >= 2.0 GROUP BY T1.SEX;"]}, {"question_id": 1226, "answer_sql": ["SELECT T1.ID, T2.`T-CHO` FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID ORDER BY T2.`T-CHO` ASC LIMIT 1;", "SELECT T1.ID, T2.`T-CHO` FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID ORDER BY T2.`T-CHO` DESC, T1.Birthday ASC LIMIT 1;", "SELECT T1.ID, T2.`T-CHO` FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID ORDER BY T1.Birthday ASC, T2.`T-CHO` DESC LIMIT 1;"]}, {"question_id": 1227, "answer_sql": ["SELECT AVG(STRFTIME('%Y', T2.Birthday) - STRFTIME('%Y', T2.Description)) FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.SEX = 'M' AND T1.`T-CHO` >= 250;"]}, {"question_id": 1228, "answer_sql": ["SELECT DISTINCT T1.ID, T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG > 300;", "SELECT T1.ID, T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG > 300;"]}, {"question_id": 1229, "answer_sql": ["SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG >= 200 AND (JULIANDAY(CURRENT_TIMESTAMP) - JULIANDAY(T1.Birthday)) > 365;", "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG >= 200 AND (STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday)) > 50;"]}, {"question_id": 1230, "answer_sql": ["SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CPK < 250 AND T1.Admission = '-'"]}, {"question_id": 1231, "answer_sql": ["SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T1.Birthday BETWEEN '1936-01-01' AND '1956-12-31' AND T2.CPK >= 250;", "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T1.Birthday) BETWEEN '1936' AND '1956' AND T1.SEX = 'M' AND T2.CPK >= 250;"]}, {"question_id": 1232, "answer_sql": ["SELECT DISTINCT T1.ID, T1.SEX, T2.Date - DATE('1900-01-01') AS Age FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GLU >= 180 AND T2.`T-CHO` < 250;", "SELECT T1.ID, T1.SEX , STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GLU >= 180 AND T2.`T-CHO` < 250;", "SELECT DISTINCT T1.ID, T1.SEX, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) AS age FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GLU >= 180 AND T2.`T-CHO` < 250;"]}, {"question_id": 1233, "answer_sql": ["SELECT DISTINCT T1.ID, T2.GLU FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T1.`First Date`) > '1991' AND T2.GLU < 180;", "SELECT DISTINCT T1.ID, T2.GLU FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T1.Description) >= '1991' AND T2.GLU < 180;", "SELECT DISTINCT T1.ID, T2.GLU FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T1.`First Date`) >= '1991' AND T2.GLU < 180;", "SELECT T1.ID, T2.GLU FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T1.`First Date`) > '1991' AND T2.GLU < 180;", "SELECT DISTINCT T1.ID, T2.GLU FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T1.Description) > '1991' AND T2.GLU < 180;"]}, {"question_id": 1234, "answer_sql": ["SELECT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.WBC <= 3.5 OR T2.WBC >= 9.0 GROUP BY T1.SEX ORDER BY T1.Birthday ASC;"]}, {"question_id": 1235, "answer_sql": ["SELECT T1.ID, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) AS age FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RBC < 3.5 AND T1.Diagnosis = 'Normal'", "SELECT T1.ID, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) AS age FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RBC < 3.5;", "SELECT DISTINCT T1.ID, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) AS age FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RBC < 3.5;"]}, {"question_id": 1236, "answer_sql": ["SELECT T1.Admission, T1.SEX, T1.Birthday, T2.RBC FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) > 50 AND T2.RBC <= 3.5 OR T2.RBC >= 6.0;", "SELECT T1.Admission, T1.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND T2.RBC <= 3.5 OR T2.RBC >= 6.0 AND STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) >= 50 AND T1.Admission = '-'", "SELECT T1.Admission, T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND T1.Birthday IS NOT NULL AND STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) >= 50 AND (T2.RBC <= 3.5 OR T2.RBC >= 6.0)", "SELECT DISTINCT T1.ID, T1.Admission FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) >= 50 AND (T2.RBC <= 3.5 OR T2.RBC >= 6.0);", "SELECT T1.Admission, T1.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND T1.Birthday IS NOT NULL AND T2.RBC <= 3.5 AND T2.RBC >= 6.0 AND STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) >= 50 AND T1.Admission = '+'"]}, {"question_id": 1237, "answer_sql": ["SELECT DISTINCT T1.ID, T1.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.HGB < 10 AND T1.Admission = '-'"]}, {"question_id": 1238, "answer_sql": ["SELECT T1.ID, T1.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.HGB > 10 AND T2.HGB < 17 AND T1.Diagnosis = 'SLE' ORDER BY T1.Birthday ASC LIMIT 1;"]}, {"question_id": 1239, "answer_sql": ["SELECT T1.ID, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T2.Birthday) AS age FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.HCT >= 52 GROUP BY T1.ID HAVING COUNT(T1.ID) >= 2;"]}, {"question_id": 1240, "answer_sql": ["SELECT AVG(HCT) FROM Laboratory WHERE Date LIKE '1991%' AND HCT < 29;"]}, {"question_id": 1241, "answer_sql": ["SELECT SUM(CASE WHEN Laboratory.PLT < 100 THEN 1 ELSE 0 END) - SUM(CASE WHEN Laboratory.PLT > 400 THEN 1 ELSE 0 END) FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID WHERE Laboratory.PLT IS NOT NULL;"]}, {"question_id": 1242, "answer_sql": ["SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PLT BETWEEN 100 AND 400 AND STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) < 50 AND T2.Date LIKE '1984%';", "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PLT BETWEEN 100 AND 400 AND STRFTIME('%Y', T1.Birthday) < '1984' AND T1.Birthday IS NOT NULL;"]}, {"question_id": 1243, "answer_sql": ["SELECT CAST(SUM(CASE WHEN T1.SEX = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Birthday IS NOT NULL AND STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) > 55 AND T2.PT >= 14;", "SELECT CAST(SUM(CASE WHEN T1.PT >= 14 AND T2.SEX = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.PT) FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.Birthday IS NOT NULL AND STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T2.Birthday) > 55;", "SELECT CAST(SUM(CASE WHEN T2.PT >= 14 AND T1.SEX = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) > 55;"]}, {"question_id": 1244, "answer_sql": ["SELECT DISTINCT T1.ID, T1.`First Date` FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PT < 14 AND STRFTIME('%Y', T1.`First Date`) > '1992';", "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T1.`First Date`) > '1992' AND T2.PT < 14;"]}, {"question_id": 1245, "answer_sql": ["SELECT COUNT(ID) FROM Laboratory WHERE APTT < 45 AND Date > '1997-01-01';"]}, {"question_id": 1246, "answer_sql": ["SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE T2.APTT > 45 AND T3.Thrombosis = 3;"]}, {"question_id": 1247, "answer_sql": ["SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.WBC BETWEEN 3.5 AND 9 AND (T2.FG <= 150 OR T2.FG >= 450);", "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.FG <= 150 AND T2.FG >= 450 AND T2.WBC BETWEEN 3.5 AND 9;", "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.FG <= 150 OR T2.FG >= 450 AND T2.WBC BETWEEN 3.5 AND 9;"]}, {"question_id": 1248, "answer_sql": ["SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.FG BETWEEN 150 AND 450 AND T1.Birthday > '1980-01-01';"]}, {"question_id": 1249, "answer_sql": ["SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`U-PRO` >= 30;", "SELECT DISTINCT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`U-PRO` >= 30;"]}, {"question_id": 1250, "answer_sql": ["SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`U-PRO` BETWEEN 0 AND 30 AND T1.Diagnosis = 'SLE'", "SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`U-PRO` BETWEEN 0 AND 30 AND T1.Diagnosis = 'SLE'"]}, {"question_id": 1251, "answer_sql": ["SELECT COUNT(T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.IGG < 900 AND T1.Symptoms = 'abortion';"]}, {"question_id": 1252, "answer_sql": ["SELECT COUNT(T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.IGG BETWEEN 900 AND 2000 AND T1.Symptoms IS NOT NULL;"]}, {"question_id": 1253, "answer_sql": ["SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.IGA BETWEEN 80 AND 500 ORDER BY T2.IGA DESC LIMIT 1;", "SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T3.IGA BETWEEN 80 AND 500 ORDER BY T3.IGA DESC LIMIT 1;"]}, {"question_id": 1254, "answer_sql": ["SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.IGA BETWEEN 80 AND 500 AND T1.`First Date` >= '1990-01-01';", "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.IGA BETWEEN 80 AND 500 AND T1.`First Date` > '1990-01-01';", "SELECT COUNT(ID) FROM Patient WHERE (Diagnosis = 'normal Ig A level' OR Diagnosis = 'normal Ig A level') AND `First Date` > '1990-01-01';"]}, {"question_id": 1255, "answer_sql": ["SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.IGM < 40 OR T2.IGM > 400 GROUP BY T1.Diagnosis ORDER BY COUNT(T1.Diagnosis) DESC LIMIT 1", "SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T3.IGM NOT BETWEEN 40 AND 400 GROUP BY T1.Diagnosis ORDER BY COUNT(T1.Diagnosis) DESC LIMIT 1"]}, {"question_id": 1256, "answer_sql": ["SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CRP = 'normal' AND T1.Description IS NULL;"]}, {"question_id": 1257, "answer_sql": ["SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CRP NOT IN ('+-', '-') AND T2.CRP >= 1.0 AND STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) >= 18;", "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CRP IN ('+', '-') AND T2.CRP > 1.0 AND STRFTIME('%Y', T1.Birthday) - STRFTIME('%Y', T1.Description) >= 18;"]}, {"question_id": 1258, "answer_sql": ["SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.RA IN ('-', '+-') AND T3.KCT = '+' AND T1.Diagnosis = 'Normal';", "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.RA IN ('-', '+-') AND T3.KCT = '+';"]}, {"question_id": 1259, "answer_sql": ["SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RA IN ('-', '+-') AND T1.Birthday > '1995-01-01'"]}, {"question_id": 1260, "answer_sql": ["SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RF < 20 AND T1.Birthday < DATE('now', '-60 years')"]}, {"question_id": 1261, "answer_sql": ["SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.RF < 20 AND T3.Thrombosis = 0;"]}, {"question_id": 1262, "answer_sql": ["SELECT COUNT(DISTINCT T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.C3 > 35 AND T1.`ANA Pattern` = 'P'"]}, {"question_id": 1263, "answer_sql": ["SELECT T1.ID FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.HCT BETWEEN 29 AND 52 ORDER BY T1.`aCL IgA` DESC LIMIT 1;"]}, {"question_id": 1264, "answer_sql": ["SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.C4 > 10;", "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.C4 > 10 AND T2.UN = 0;", "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.C4 > 10 AND T2.C4 < 20;", "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.C4 > 10 AND T2.C4 < 15;"]}, {"question_id": 1265, "answer_sql": ["SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RNP = '-' OR T2.RNP = '0' AND T1.Admission = '+';", "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RNP = '-' OR T2.RNP = '0';", "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE T2.RNP = '-' OR T2.RNP = '0' AND T1.Admission = '+';", "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RNP = 'negative' OR T2.RNP = '0' AND T1.Admission = '+';"]}, {"question_id": 1266, "answer_sql": ["SELECT T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RNP = '-' OR T2.RNP = '+-' ORDER BY T1.Birthday ASC LIMIT 1;", "SELECT T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RNP NOT IN ('-', '+-') ORDER BY T1.Birthday ASC LIMIT 1;"]}, {"question_id": 1267, "answer_sql": ["SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE T2.SM IN ('negative', '0') AND T3.Thrombosis = 1;"]}, {"question_id": 1268, "answer_sql": ["SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SM NOT IN ('negative', '0') ORDER BY T1.Birthday DESC LIMIT 3;"]}, {"question_id": 1269, "answer_sql": ["SELECT DISTINCT T1.ID FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SC170 IN ('negative', '0') AND T1.`Examination Date` > '1997-01-01'"]}, {"question_id": 1270, "answer_sql": ["SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE T3.Symptoms = 'vertigo' AND T1.SEX = 'M' AND T2.SC170 IN ('negative', '0') AND T2.SC170 IS NOT NULL;"]}, {"question_id": 1271, "answer_sql": ["SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SSA IN ('negative', '0') AND STRFTIME('%Y', T1.`First Date`) < '1990';"]}, {"question_id": 1272, "answer_sql": ["SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SSA NOT IN ('-', '+-') ORDER BY T1.`First Date` ASC LIMIT 1;"]}, {"question_id": 1273, "answer_sql": ["SELECT COUNT(DISTINCT T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SSB IN ('negative', '0') AND T1.Diagnosis = 'SLE';"]}, {"question_id": 1274, "answer_sql": ["SELECT COUNT(DISTINCT T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SSB IN ('negative', '0') AND T1.Symptoms IS NOT NULL;"]}, {"question_id": 1275, "answer_sql": ["SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CENTROMEA IN ('negative', '0') AND T2.SSB IN ('negative', '0') AND T1.SEX = 'M'"]}, {"question_id": 1276, "answer_sql": ["SELECT DISTINCT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.DNA >= 8;"]}, {"question_id": 1277, "answer_sql": ["SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.DNA < 8 AND T1.Description IS NULL;"]}, {"question_id": 1278, "answer_sql": ["SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.DNA < 8 AND T1.Admission = '+';"]}, {"question_id": 1279, "answer_sql": ["SELECT CAST(COUNT(CASE WHEN T1.GOT >= 60 AND T2.Diagnosis = 'SLE' THEN T2.ID ELSE NULL END) AS REAL) * 100 / COUNT(T2.ID) FROM Laboratory AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID;", "SELECT CAST(SUM(CASE WHEN T2.GOT >= 60 AND T1.Diagnosis = 'SLE' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID;", "SELECT CAST(SUM(CASE WHEN T2.GOT >= 60 AND T1.Diagnosis = 'SLE' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GOT >= 60;"]}, {"question_id": 1280, "answer_sql": ["SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.GOT < 60;", "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.GOT < 60;"]}, {"question_id": 1281, "answer_sql": ["SELECT T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GOT >= 60 ORDER BY T1.Birthday DESC LIMIT 1;"]}, {"question_id": 1282, "answer_sql": ["SELECT T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GPT < 60 ORDER BY T2.GPT DESC LIMIT 3"]}, {"question_id": 1283, "answer_sql": ["SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GOT < 60 AND T1.SEX = 'M' AND T2.GOT > 50;", "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GOT < 60 AND T1.SEX = 'M' AND T2.GOT > 0;", "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GOT < 60 AND T1.SEX = 'M' AND T2.GOT > 40;"]}, {"question_id": 1284, "answer_sql": ["SELECT T1.`First Date` FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH < 500 ORDER BY T2.LDH DESC LIMIT 1;", "SELECT T1.`First Date` FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH < 500 ORDER BY T1.`First Date` ASC LIMIT 1;", "SELECT T1.`First Date` FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH < 500 ORDER BY T2.LDH DESC, T1.`First Date` ASC LIMIT 1;"]}, {"question_id": 1285, "answer_sql": ["SELECT T2.Date FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH >= 500 ORDER BY T2.Date DESC LIMIT 1;", "SELECT T2.Date FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH >= 500 ORDER BY T1.`First Date` DESC LIMIT 1;", "SELECT T1.`First Date` FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH >= 500 ORDER BY T1.`First Date` DESC LIMIT 1;", "SELECT T1.`First Date`, T2.LDH FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH >= 500 ORDER BY T1.`First Date` DESC LIMIT 1;"]}, {"question_id": 1286, "answer_sql": ["SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.ALP >= 300 AND T1.Admission = '+';"]}, {"question_id": 1287, "answer_sql": ["SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.ALP < 300 AND T1.Admission = '-';", "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.ALP < 300 AND T1.Admission = '-'"]}, {"question_id": 1288, "answer_sql": ["SELECT DISTINCT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TP < 6.0;", "SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TP < 6.0;"]}, {"question_id": 1289, "answer_sql": ["SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SJS' AND T2.TP > 6.0 AND T2.TP < 8.5;", "SELECT COUNT(DISTINCT T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SJS' AND T2.TP > 6.0 AND T2.TP < 8.5;"]}, {"question_id": 1290, "answer_sql": ["SELECT T1.`Examination Date` FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.ALB > 3.5 AND T2.ALB < 5.5 ORDER BY T2.ALB DESC LIMIT 1;", "SELECT T1.`Examination Date` FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.ALB BETWEEN 3.5 AND 5.5 ORDER BY T2.ALB DESC LIMIT 1;"]}, {"question_id": 1291, "answer_sql": ["SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.ALB BETWEEN 3.5 AND 5.5 AND T2.TP BETWEEN 6.0 AND 8.5;", "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.ALB BETWEEN 3.5 AND 5.5 AND T2.TP BETWEEN 6.0 AND 8.5;"]}, {"question_id": 1292, "answer_sql": ["SELECT T2.`aCL IgG`, T2.`aCL IgM`, T2.`aCL IgA` FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T2.ID = T3.ID WHERE T1.SEX = 'F' AND T3.UA = ( SELECT MAX(UA) FROM Laboratory ) ORDER BY T3.UA DESC LIMIT 1;", "SELECT T1.`aCL IgG`, T1.`aCL IgM`, T1.`aCL IgA` FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T2.ID = T3.ID WHERE T2.SEX = 'F' AND T3.UA > 6.5 ORDER BY T3.UA DESC LIMIT 1;"]}, {"question_id": 1293, "answer_sql": ["SELECT MAX(T2.ANA) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T2.ID = T3.ID WHERE T3.CRE < 1.5;"]}, {"question_id": 1294, "answer_sql": ["SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.CRE < 1.5 ORDER BY T3.`aCL IgA` DESC LIMIT 1;", "SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CRE < 1.5 ORDER BY T2.IGA DESC LIMIT 1;"]}, {"question_id": 1295, "answer_sql": ["SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE T2.`T-BIL` >= 2.0 AND T3.`ANA Pattern` LIKE '%P%'"]}, {"question_id": 1296, "answer_sql": ["SELECT T1.`ANA` FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`T-BIL` < 2.0 ORDER BY T2.TG DESC LIMIT 1;"]}, {"question_id": 1297, "answer_sql": ["SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`T-CHO` >= 250 AND T1.Diagnosis = '-'", "SELECT COUNT(DISTINCT T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`T-CHO` >= 250 AND T1.KCT = '-'", "SELECT COUNT(T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`T-CHO` >= 250 AND T1.KCT = '-'"]}, {"question_id": 1298, "answer_sql": ["SELECT COUNT(DISTINCT T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`T-CHO` < 250 AND T1.`ANA Pattern` = 'P';", "SELECT COUNT(T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`T-CHO` < 250 AND T1.`ANA Pattern` = 'P';"]}, {"question_id": 1299, "answer_sql": ["SELECT COUNT(T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG < 200 AND T1.Symptoms IS NOT NULL;", "SELECT COUNT(DISTINCT T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG < 200 AND T1.Symptoms IS NOT NULL;"]}, {"question_id": 1300, "answer_sql": ["SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG < 200 ORDER BY T2.TG DESC LIMIT 1;"]}, {"question_id": 1301, "answer_sql": ["SELECT DISTINCT T1.ID FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Thrombosis = 0 AND T2.CPK < 250;"]}, {"question_id": 1302, "answer_sql": ["SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CPK < 250 AND (T1.Diagnosis = 'Normal' OR T1.Diagnosis = 'Normal ' OR T1.Diagnosis = 'Normal.') AND T2.CPK > 0;", "SELECT COUNT(T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CPK < 250 AND (T1.KCT = '+' OR T1.RVVT = '+' OR T1.LAC = '+')"]}, {"question_id": 1303, "answer_sql": ["SELECT T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GLU > 180 ORDER BY T1.Birthday ASC LIMIT 1;"]}, {"question_id": 1304, "answer_sql": ["SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.GLU < 180 AND T3.Thrombosis = 0;", "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.GLU < 180 AND T3.Thrombosis = 0;"]}, {"question_id": 1305, "answer_sql": ["SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Admission = '+' AND T2.WBC BETWEEN 3.5 AND 9;"]}, {"question_id": 1306, "answer_sql": ["SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.WBC BETWEEN 3.5 AND 9 AND T1.Diagnosis = 'SLE'", "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SLE' AND T2.WBC BETWEEN 3.5 AND 9;", "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE T3.Diagnosis = 'SLE' AND T2.WBC BETWEEN 3.5 AND 9.0;"]}, {"question_id": 1307, "answer_sql": ["SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RBC < 3.5 OR T2.RBC > 6.0 AND T1.Admission = '-'", "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RBC <= 3.5 OR T2.RBC >= 6.0 AND T1.Admission = '-'", "SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RBC <= 3.5 OR T2.RBC >= 6.0 AND T1.Admission = '-'"]}, {"question_id": 1308, "answer_sql": ["SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PLT BETWEEN 100 AND 400 AND T1.Diagnosis IS NOT NULL;", "SELECT COUNT(DISTINCT T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PLT BETWEEN 100 AND 400 AND T1.Diagnosis IS NOT NULL;", "SELECT COUNT(T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PLT BETWEEN 100 AND 400 AND T1.Diagnosis IS NOT NULL;"]}, {"question_id": 1309, "answer_sql": ["SELECT T1.ID, T1.Diagnosis, T2.PLT FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PLT BETWEEN 100 AND 400 AND T1.Diagnosis = 'MCTD'", "SELECT T2.PLT FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'MCTD' AND T2.PLT BETWEEN 100 AND 400;", "SELECT T1.PLT FROM Laboratory AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Diagnosis = 'MCTD' AND T1.PLT BETWEEN 100 AND 400;", "SELECT T1.ID, T2.PLT FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PLT BETWEEN 100 AND 400 AND T1.Diagnosis = 'MCTD'"]}, {"question_id": 1310, "answer_sql": ["SELECT AVG(T2.PT) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.PT < 14;"]}, {"question_id": 1311, "answer_sql": ["SELECT COUNT(DISTINCT T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Thrombosis > 1 OR T1.Thrombosis = 1 AND T2.PT < 14;"]}, {"question_id": 1312, "answer_sql": ["SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Angela' AND T1.last_name = 'Sanders'"]}, {"question_id": 1313, "answer_sql": ["SELECT COUNT(*) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.college = 'College of Engineering';"]}, {"question_id": 1314, "answer_sql": ["SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'Art and Design Department';"]}, {"question_id": 1315, "answer_sql": ["SELECT COUNT(T2.link_to_member) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'Women''s Soccer';"]}, {"question_id": 1316, "answer_sql": ["SELECT T1.phone FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'Women''s Soccer'"]}, {"question_id": 1317, "answer_sql": ["SELECT COUNT(*) FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T3.event_id = T2.link_to_event WHERE T3.event_name = 'Women''s Soccer' AND T1.t_shirt_size = 'Medium';"]}, {"question_id": 1318, "answer_sql": ["SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_name ORDER BY COUNT(T2.link_to_event) DESC LIMIT 1;", "SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_id ORDER BY COUNT(T2.link_to_event) DESC LIMIT 1;"]}, {"question_id": 1319, "answer_sql": ["SELECT T1.college FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.position = 'Vice President'"]}, {"question_id": 1320, "answer_sql": ["SELECT T3.event_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T1.first_name = 'Maya' AND T1.last_name = 'Mclean'"]}, {"question_id": 1321, "answer_sql": ["SELECT COUNT(T2.link_to_event) FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T1.first_name = 'Sacha' AND T1.last_name = 'Harrison' AND SUBSTR(T3.event_date, 1, 4) = '2019';", "SELECT COUNT(T2.link_to_event) FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T1.first_name = 'Sacha' AND T1.last_name = 'Harrison' AND T3.event_date = '2019'"]}, {"question_id": 1322, "answer_sql": ["SELECT COUNT(T1.link_to_event) FROM attendance AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.type = 'Meeting' GROUP BY T2.event_id HAVING COUNT(T1.link_to_event) > 10;", "SELECT T1.event_id FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_id HAVING COUNT(T2.link_to_member) > 10", "SELECT COUNT(T1.event_id) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_id HAVING COUNT(T2.link_to_member) > 10;", "SELECT T2.event_id FROM attendance AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.type = 'Meeting' GROUP BY T2.event_id HAVING COUNT(T1.link_to_event) > 10"]}, {"question_id": 1323, "answer_sql": ["SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event GROUP BY T2.link_to_event HAVING COUNT(T2.link_to_member) > 20;"]}, {"question_id": 1324, "answer_sql": ["SELECT AVG(attendance_count) FROM ( SELECT COUNT(T2.link_to_event) AS attendance_count FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.type = 'Meeting' AND T1.event_date LIKE '2020%' ) AS T3;"]}, {"question_id": 1325, "answer_sql": ["SELECT T1.expense_description, T1.cost FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id WHERE T2.category = 'club events' ORDER BY T1.cost DESC LIMIT 1;", "SELECT expense_description, MAX(cost) FROM expense GROUP BY expense_description;", "SELECT expense_description, cost FROM expense WHERE cost = ( SELECT MAX(cost) FROM expense );", "SELECT expense_description FROM expense ORDER BY cost DESC LIMIT 1;"]}, {"question_id": 1326, "answer_sql": ["SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Environmental Engineering';"]}, {"question_id": 1327, "answer_sql": ["SELECT T3.first_name, T3.last_name FROM attendance AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id WHERE T2.event_name = 'Laugh Out Loud';"]}, {"question_id": 1328, "answer_sql": ["SELECT T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Law and Constitutional Studies'"]}, {"question_id": 1329, "answer_sql": ["SELECT T2.county FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Sherri' AND T1.last_name = 'Ramsey'", "SELECT T3.county FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code INNER JOIN zip_code AS T3 ON T2.county = T3.county WHERE T1.first_name = 'Sherri' AND T1.last_name = 'Ramsey'"]}, {"question_id": 1330, "answer_sql": ["SELECT T3.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id INNER JOIN major AS T3 ON T2.major_id = T3.major_id WHERE T1.first_name = 'Tyler' AND T1.last_name = 'Hewitt'"]}, {"question_id": 1331, "answer_sql": ["SELECT T2.amount FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Vice President';"]}, {"question_id": 1332, "answer_sql": ["SELECT T2.spent FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN event AS T3 ON T3.event_id = T2.link_to_event WHERE T3.event_name = 'September Meeting' AND T2.category = 'Food' AND T1.expense_date = '2022-09-01';", "SELECT T2.spent FROM budget AS T2 INNER JOIN event AS T1 ON T2.link_to_event = T1.event_id WHERE T1.event_name = 'September Meeting' AND T2.category = 'Food';", "SELECT SUM(T2.spent) FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN event AS T3 ON T3.event_id = T2.link_to_event WHERE T3.event_name = 'September Meeting' AND T2.category = 'Food';"]}, {"question_id": 1333, "answer_sql": ["SELECT T2.city, T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.position = 'President';"]}, {"question_id": 1334, "answer_sql": ["SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.state = 'Illinois'", "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN zip_code AS T2 ON T2.zip_code = T1.zip WHERE T2.state = 'IL';"]}, {"question_id": 1335, "answer_sql": ["SELECT T2.spent FROM budget AS T2 INNER JOIN event AS T1 ON T2.link_to_event = T1.event_id WHERE T1.event_name = 'September Meeting' AND T2.category = 'Advertisement';", "SELECT SUM(T2.spent) FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'September Meeting' AND T2.category = 'Advertisement' AND T1.expense_date LIKE '9/%/2020'"]}, {"question_id": 1336, "answer_sql": ["SELECT T1.department FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.first_name = 'Pierce' AND T2.last_name = 'Guidi'"]}, {"question_id": 1337, "answer_sql": ["SELECT SUM(T2.amount) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'October Speaker'"]}, {"question_id": 1338, "answer_sql": ["SELECT T2.approved FROM event AS T1 INNER JOIN expense AS T2 ON T1.event_id = T2.link_to_budget WHERE T1.event_name = 'October Meeting' AND T1.event_date = '2019-10-08';"]}, {"question_id": 1339, "answer_sql": ["SELECT AVG(T2.cost) FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member INNER JOIN attendance AS T3 ON T1.member_id = T3.link_to_member INNER JOIN event AS T4 ON T3.link_to_event = T4.event_id WHERE T1.first_name = 'Elijah' AND T1.last_name = 'Allen' AND SUBSTR(T4.event_date, 6, 2) IN ('09', '10')", "SELECT AVG(T2.cost) FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Elijah' AND T1.last_name = 'Allen' AND T2.expense_date LIKE '9/%' AND T2.expense_date LIKE '10/%'"]}, {"question_id": 1340, "answer_sql": ["SELECT SUM(spent) - ( SELECT SUM(spent) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE STRFTIME('%Y', T2.event_date) = '2019' ) AS diff FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE STRFTIME('%Y', T2.event_date) IN ('2019', '2020')"]}, {"question_id": 1341, "answer_sql": ["SELECT event.location FROM event WHERE event.event_name = 'Spring Budget Review';", "SELECT T2.location FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'Spring Budget Review';"]}, {"question_id": 1342, "answer_sql": ["SELECT cost FROM expense WHERE expense_description = 'Posters' AND expense_date = '2019-09-04';", "SELECT T2.cost FROM expense AS T2 INNER JOIN event AS T3 ON T2.link_to_budget = T3.event_id WHERE T3.event_date = '2019-09-04' AND T2.expense_description = 'Posters';"]}, {"question_id": 1343, "answer_sql": ["SELECT T2.remaining FROM budget AS T1 INNER JOIN budget AS T2 ON T1.budget_id = T2.budget_id WHERE T1.category = 'Food' ORDER BY T2.remaining DESC LIMIT 1;", "SELECT remaining FROM budget WHERE category = 'Food' ORDER BY amount DESC LIMIT 1;"]}, {"question_id": 1344, "answer_sql": ["SELECT T2.notes FROM expense AS T1 INNER JOIN income AS T2 ON T1.link_to_member = T2.link_to_member WHERE T1.expense_date = '2019-09-14' AND T2.source = 'Fundraising';"]}, {"question_id": 1345, "answer_sql": ["SELECT COUNT(major_name) FROM major WHERE college = 'College of Humanities and Social Sciences';"]}, {"question_id": 1346, "answer_sql": ["SELECT phone FROM member WHERE first_name = 'Carlo' AND last_name = 'Jacobs';"]}, {"question_id": 1347, "answer_sql": ["SELECT T2.county FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Adela' AND T1.last_name = 'O''Gallagher'"]}, {"question_id": 1348, "answer_sql": ["SELECT COUNT(T1.budget_id) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'November Meeting' AND T1.remaining < 0;", "SELECT COUNT(*) FROM budget WHERE event_status = 'exceeded' AND link_to_event IN ( SELECT event_id FROM event WHERE event_name = 'November Meeting' );"]}, {"question_id": 1349, "answer_sql": ["SELECT SUM(T2.amount) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'September Speaker';"]}, {"question_id": 1350, "answer_sql": ["SELECT T1.status FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T3.expense_description = 'Post Cards, Posters' AND T3.expense_date = '2019-08-20';"]}, {"question_id": 1351, "answer_sql": ["SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Brent' AND T1.last_name = 'Thomason'"]}, {"question_id": 1352, "answer_sql": ["SELECT COUNT(*) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Human Development and Family Studies' AND T1.t_shirt_size = 'Large';"]}, {"question_id": 1353, "answer_sql": ["SELECT T2.type FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Christof' AND T1.last_name = 'Nielson'"]}, {"question_id": 1354, "answer_sql": ["SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Vice President'"]}, {"question_id": 1355, "answer_sql": ["SELECT T1.state FROM zip_code AS T1 INNER JOIN member AS T2 ON T1.zip_code = T2.zip WHERE T2.first_name = 'Sacha' AND T2.last_name = 'Harrison';"]}, {"question_id": 1356, "answer_sql": ["SELECT T2.department FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'President'"]}, {"question_id": 1357, "answer_sql": ["SELECT T1.expense_date FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.first_name = 'Connor' AND T2.last_name = 'Hilton' AND T1.expense_description = 'Dues';", "SELECT T2.date_received FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Connor' AND T1.last_name = 'Hilton' AND T2.source = 'Dues';"]}, {"question_id": 1358, "answer_sql": ["SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T2.expense_description = 'First paid dues' ORDER BY T2.expense_date ASC LIMIT 1;", "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T2.source = 'Dues' ORDER BY T2.date_received ASC LIMIT 1;"]}, {"question_id": 1359, "answer_sql": ["SELECT CAST(SUM(CASE WHEN T2.event_name = 'October Meeting' THEN T1.amount ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.event_name = 'Yearly Kickoff' THEN T1.amount ELSE 0 END) FROM budget AS T1 INNER JOIN event AS T2 ON T2.event_id = T1.link_to_event WHERE T1.category = 'Advertisement';", "SELECT COUNT(*) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'Yearly Kickoff' AND T1.category = 'Advertisement' AND T2.event_name = 'October Meeting' AND T1.category = 'Advertisement'"]}, {"question_id": 1360, "answer_sql": ["SELECT CAST(SUM(CASE WHEN T2.category = 'Parking' THEN T2.amount ELSE 0 END) AS REAL) * 100 / SUM(T2.amount) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'November Speaker';"]}, {"question_id": 1361, "answer_sql": ["SELECT SUM(cost) FROM expense WHERE expense_description = 'Pizza';"]}, {"question_id": 1362, "answer_sql": ["SELECT COUNT(city) FROM zip_code WHERE county = 'Orange' AND state = 'Virginia';"]}, {"question_id": 1363, "answer_sql": ["SELECT department FROM major WHERE college = 'College of Humanities and Social Sciences';"]}, {"question_id": 1364, "answer_sql": ["SELECT T2.city, T2.county, T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Amy' AND T1.last_name = 'Firth'"]}, {"question_id": 1365, "answer_sql": ["SELECT T2.expense_description FROM budget AS T1 INNER JOIN expense AS T2 ON T1.budget_id = T2.link_to_budget ORDER BY T1.remaining LIMIT 1;"]}, {"question_id": 1366, "answer_sql": ["SELECT T3.first_name, T3.last_name FROM attendance AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id WHERE T2.event_name = 'October Meeting'"]}, {"question_id": 1367, "answer_sql": ["SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id GROUP BY T2.college ORDER BY COUNT(T2.college) DESC LIMIT 1"]}, {"question_id": 1368, "answer_sql": ["SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.phone = '809-555-3360'"]}, {"question_id": 1369, "answer_sql": ["SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event ORDER BY T2.amount DESC LIMIT 1;"]}, {"question_id": 1370, "answer_sql": ["SELECT T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Vice President'"]}, {"question_id": 1371, "answer_sql": ["SELECT COUNT(T2.link_to_member) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'Women''s Soccer';"]}, {"question_id": 1372, "answer_sql": ["SELECT T2.date_received FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Casey' AND T1.last_name = 'Mason'"]}, {"question_id": 1373, "answer_sql": ["SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.state = 'Maryland';"]}, {"question_id": 1374, "answer_sql": ["SELECT COUNT(T2.link_to_event) FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member WHERE T1.phone = '954-555-6240'"]}, {"question_id": 1375, "answer_sql": ["SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'School of Applied Sciences, Technology and Education'"]}, {"question_id": 1376, "answer_sql": ["SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.status = 'Closed' ORDER BY T2.spent / T2.amount DESC LIMIT 1;", "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event ORDER BY T2.spent / T2.amount DESC LIMIT 1;", "SELECT T2.event_name, (SUM(T1.spent) / SUM(T1.amount)) AS ratio FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.status = 'Closed' GROUP BY T2.event_name ORDER BY ratio DESC LIMIT 1;", "SELECT T2.event_name, CAST(T1.spent AS REAL) / T1.amount AS ratio FROM budget AS T1 INNER JOIN event AS T2 ON T2.event_id = T1.link_to_event WHERE T2.status = 'Closed' ORDER BY ratio DESC LIMIT 1;"]}, {"question_id": 1377, "answer_sql": ["SELECT COUNT(member_id) FROM member WHERE position = 'President';"]}, {"question_id": 1378, "answer_sql": ["SELECT MAX(spent) FROM budget;", "SELECT MAX(spent) FROM budget WHERE event_status = 'completed';"]}, {"question_id": 1379, "answer_sql": ["SELECT COUNT(event_id) FROM event WHERE type = 'Meeting' AND SUBSTR(event_date, 1, 4) = '2020';"]}, {"question_id": 1380, "answer_sql": ["SELECT SUM(T1.spent) FROM budget AS T1 INNER JOIN expense AS T2 ON T1.budget_id = T2.link_to_budget WHERE T1.category = 'Food';", "SELECT SUM(spent) FROM budget WHERE category = 'Food';"]}, {"question_id": 1381, "answer_sql": ["SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T2.link_to_member = T1.member_id GROUP BY T1.member_id HAVING COUNT(T2.link_to_event) > 7"]}, {"question_id": 1382, "answer_sql": ["SELECT T3.first_name, T3.last_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id INNER JOIN major AS T4 ON T4.major_id = T3.link_to_major WHERE T1.event_name = 'Community Theater' AND T4.major_name = 'Interior Design';", "SELECT T3.first_name, T3.last_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id INNER JOIN major AS T4 ON T4.major_id = T3.link_to_major WHERE T1.event_name = 'Community Theater' AND T4.major_name = 'Interior Design' AND T3.position = 'Student';"]}, {"question_id": 1383, "answer_sql": ["SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'Georgetown' AND T2.college = 'South Carolina'"]}, {"question_id": 1384, "answer_sql": ["SELECT T2.amount FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Grant' AND T1.last_name = 'Gilmour'"]}, {"question_id": 1385, "answer_sql": ["SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T2.amount > 40;"]}, {"question_id": 1386, "answer_sql": ["SELECT SUM(T3.cost) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'Yearly Kickoff';", "SELECT SUM(T2.cost) FROM event AS T1 INNER JOIN expense AS T2 ON T1.event_id = T2.link_to_budget WHERE T1.event_name = 'Yearly Kickoff';"]}, {"question_id": 1387, "answer_sql": ["SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member INNER JOIN budget AS T3 ON T2.link_to_budget = T3.budget_id INNER JOIN event AS T4 ON T3.link_to_event = T4.event_id WHERE T4.event_name = 'Yearly Kickoff';", "SELECT T3.first_name, T3.last_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id INNER JOIN member AS T3 ON T3.member_id = T1.link_to_event WHERE T2.event_name = 'Yearly Kickoff';"]}, {"question_id": 1388, "answer_sql": ["SELECT T1.first_name, T1.last_name, T2.source FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member ORDER BY T2.amount DESC LIMIT 1;"]}, {"question_id": 1389, "answer_sql": ["SELECT T1.event_name, T3.cost FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget ORDER BY T3.cost ASC LIMIT 1;", "SELECT T1.event_name FROM event AS T1 INNER JOIN expense AS T2 ON T1.event_id = T2.link_to_budget ORDER BY T2.cost ASC LIMIT 1;", "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget ORDER BY T3.cost ASC LIMIT 1;"]}, {"question_id": 1390, "answer_sql": ["SELECT CAST(SUM(CASE WHEN T2.event_name = 'Yearly Kickoff' THEN T1.cost ELSE 0 END) AS REAL) * 100 / SUM(T1.cost) FROM expense AS T1 INNER JOIN event AS T2 ON T1.link_to_budget = T2.event_id WHERE T1.expense_description = 'Total cost';"]}, {"question_id": 1391, "answer_sql": ["SELECT CAST(SUM(CASE WHEN major_name = 'Finance' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN major_name = 'Physics' THEN 1 ELSE 0 END) AS ratio FROM major;", "SELECT CAST(SUM(CASE WHEN T2.major_name = 'Finance' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.major_name = 'Physics' THEN 1 ELSE 0 END) FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.link_to_major = 'M101';"]}, {"question_id": 1392, "answer_sql": ["SELECT source FROM income WHERE date_received BETWEEN '2019-09-01' AND '2019-09-30' ORDER BY source DESC LIMIT 1;"]}, {"question_id": 1393, "answer_sql": ["SELECT first_name, last_name, email FROM member WHERE position = 'Secretary';"]}, {"question_id": 1394, "answer_sql": ["SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Physics Teaching';"]}, {"question_id": 1395, "answer_sql": ["SELECT COUNT(T2.link_to_member) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'Community Theater' AND STRFTIME('%Y', T1.event_date) = '2019'"]}, {"question_id": 1396, "answer_sql": ["SELECT COUNT(T2.link_to_event), T3.major_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN major AS T3 ON T3.major_id = T1.link_to_major WHERE T1.first_name = 'Luisa' AND T1.last_name = 'Guidi'"]}, {"question_id": 1397, "answer_sql": ["SELECT AVG(T2.spent) FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id WHERE T2.category = 'Food' AND T2.event_status = 'Closed';", "SELECT AVG(T1.spent) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_date < DATE('now','-1 year');", "SELECT AVG(spent) FROM budget WHERE category = 'Food' AND event_status = 'Closed';", "SELECT AVG(T1.spent) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.type = 'Typical' AND T1.category = 'Food';"]}, {"question_id": 1398, "answer_sql": ["SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.category = 'Advertisement' ORDER BY T2.spent DESC LIMIT 1;"]}, {"question_id": 1399, "answer_sql": ["SELECT CASE WHEN T2.link_to_event IS NOT NULL THEN 'Yes' ELSE 'No' END AS attended FROM member AS T1 JOIN attendance AS T2 ON T1.member_id = T2.link_to_member JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T1.first_name = 'Maya' AND T1.last_name = 'Mclean';", "SELECT T2.link_to_event FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T1.first_name = 'Maya' AND T1.last_name = 'Mclean' AND T3.event_name = 'Women''s Soccer';", "SELECT CASE WHEN EXISTS (SELECT 1 FROM attendance AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.link_to_member = (SELECT member_id FROM member WHERE first_name = 'Maya' AND last_name = 'Mclean')) THEN 'YES' ELSE 'NO' END AS result;", "SELECT CASE WHEN T1.event_name = 'Women''s Soccer' THEN 'Yes' ELSE 'No' END AS result FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T3.first_name = 'Maya' AND T3.last_name = 'Mclean';", "SELECT CASE WHEN COUNT(T2.link_to_event) > 0 THEN 'Yes' ELSE 'No' END FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T1.first_name = 'Maya' AND T1.last_name = 'Mclean' AND T3.event_name = 'Women''s Soccer';"]}, {"question_id": 1400, "answer_sql": ["SELECT CAST(SUM(CASE WHEN type = 'Community Service' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(event_id) FROM event WHERE event_date LIKE '2019%';"]}, {"question_id": 1401, "answer_sql": ["SELECT T2.cost FROM event AS T1 INNER JOIN expense AS T2 ON T1.event_id = T2.link_to_budget WHERE T1.event_name = 'September Speaker' AND T2.expense_description = 'Posters';"]}, {"question_id": 1402, "answer_sql": ["SELECT t_shirt_size FROM member GROUP BY t_shirt_size ORDER BY COUNT(t_shirt_size) DESC LIMIT 1;"]}, {"question_id": 1403, "answer_sql": ["SELECT T2.event_name FROM expense AS T1 INNER JOIN event AS T2 ON T1.link_to_budget = T2.event_id WHERE T2.status = 'Closed' AND T1.cost > ( SELECT remaining FROM budget WHERE budget_id = T1.link_to_budget );", "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.status = 'Closed' AND T2.event_status = 'Closed' AND T2.remaining < 0 ORDER BY T3.cost DESC LIMIT 1;", "SELECT T3.event_name FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T2.event_status = 'Closed' AND T1.cost > ( SELECT remaining FROM budget WHERE event_status = 'Closed' AND remaining < 0 ORDER BY remaining LIMIT 1 );"]}, {"question_id": 1404, "answer_sql": ["SELECT T2.type, SUM(T1.cost) FROM expense AS T1 INNER JOIN event AS T2 ON T1.link_to_budget = T2.event_id WHERE T2.event_name = 'October Meeting' AND T1.approved = 'yes' GROUP BY T2.type;", "SELECT T2.type, SUM(T1.cost) FROM expense AS T1 INNER JOIN event AS T2 ON T1.link_to_budget = T2.event_id WHERE T2.event_name = 'October Meeting'"]}, {"question_id": 1405, "answer_sql": ["SELECT T2.amount, T2.category FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'April Speaker' ORDER BY T2.amount ASC;"]}, {"question_id": 1406, "answer_sql": ["SELECT budget_id, amount FROM budget WHERE category = 'Food' AND amount = ( SELECT MAX(amount) FROM budget WHERE category = 'Food' );", "SELECT budget_id FROM budget WHERE category = 'Food' ORDER BY amount DESC LIMIT 1;"]}, {"question_id": 1407, "answer_sql": ["SELECT budget_id FROM budget WHERE category = 'Advertisement' ORDER BY amount DESC LIMIT 3;"]}, {"question_id": 1408, "answer_sql": ["SELECT SUM(cost) FROM expense WHERE expense_description = 'Parking';"]}, {"question_id": 1409, "answer_sql": ["SELECT SUM(cost) FROM expense WHERE expense_date = '2019-08-20';"]}, {"question_id": 1410, "answer_sql": ["SELECT T2.first_name, T2.last_name, SUM(T1.cost) FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.member_id = 'rec4BLdZHS2Blfp4v' GROUP BY T2.first_name, T2.last_name;"]}, {"question_id": 1411, "answer_sql": ["SELECT T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Sacha' AND T1.last_name = 'Harrison'"]}, {"question_id": 1412, "answer_sql": ["SELECT T1.expense_description FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.t_shirt_size = 'X-Large' AND T1.expense_description = 'Tee Shirt';", "SELECT T1.expense_description FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.t_shirt_size = 'X-Large'"]}, {"question_id": 1413, "answer_sql": ["SELECT T1.zip FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T2.cost < 50"]}, {"question_id": 1414, "answer_sql": ["SELECT T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.first_name = 'Phillip' AND T2.last_name = 'Cullen'"]}, {"question_id": 1415, "answer_sql": ["SELECT T1.position FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Business'", "SELECT T2.position FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T1.department = 'Business'"]}, {"question_id": 1416, "answer_sql": ["SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Business' AND T1.t_shirt_size = 'Medium';"]}, {"question_id": 1417, "answer_sql": ["SELECT T3.type FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id INNER JOIN event AS T3 ON T2.event_id = T3.event_id WHERE T1.remaining > 30;"]}, {"question_id": 1418, "answer_sql": ["SELECT T3.category FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN budget AS T3 ON T2.budget_id = T3.budget_id WHERE T1.location = 'MU 215';"]}, {"question_id": 1419, "answer_sql": ["SELECT T2.category FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_date = '2020-03-24T12:00:00';"]}, {"question_id": 1420, "answer_sql": ["SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Vice President'"]}, {"question_id": 1421, "answer_sql": ["SELECT CAST(SUM(CASE WHEN T2.major_name = 'Mathematics' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.position = 'Member';"]}, {"question_id": 1422, "answer_sql": ["SELECT T2.category FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.location = 'MU 215'"]}, {"question_id": 1423, "answer_sql": ["SELECT COUNT(*) FROM income WHERE amount = 50;"]}, {"question_id": 1424, "answer_sql": ["SELECT COUNT(*) FROM member WHERE position = 'Member' AND t_shirt_size = 'X-Large';"]}, {"question_id": 1425, "answer_sql": ["SELECT COUNT(*) FROM major WHERE department = 'School of Applied Sciences, Technology and Education' AND college = 'College of Agriculture and Applied Sciences';"]}, {"question_id": 1426, "answer_sql": ["SELECT T2.last_name, T1.department, T1.college FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T1.major_name = 'Environmental Engineering';", "SELECT T1.last_name, T2.college, T2.department FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T2.major_name = 'Environmental Engineering';"]}, {"question_id": 1427, "answer_sql": ["SELECT T2.category FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.location = 'MU 215' AND T1.type = 'Guest Speaker' AND T2.spent = 0;", "SELECT DISTINCT T2.category FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.location = 'MU 215' AND T1.type = 'Guest Speaker' AND T2.spent = 0;"]}, {"question_id": 1428, "answer_sql": ["SELECT T3.city, T3.state FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id INNER JOIN zip_code AS T3 ON T1.zip = T3.zip_code WHERE T2.department = 'Electrical and Computer Engineering Department' AND T1.position = 'Member'"]}, {"question_id": 1429, "answer_sql": ["SELECT T3.event_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T1.position = 'Vice President' AND T1.email = 'davis.garrison@gmail.com' AND T3.location = '900 E. Washington St.' AND T3.type = 'Social';"]}, {"question_id": 1430, "answer_sql": ["SELECT T2.last_name, T2.position FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T1.expense_date = '2019-09-10' AND T1.expense_description = 'Pizza';"]}, {"question_id": 1431, "answer_sql": ["SELECT T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T2.link_to_member = T1.member_id INNER JOIN event AS T3 ON T3.event_id = T2.link_to_event WHERE T3.event_name = 'Women''s Soccer' AND T1.position = 'Member'"]}, {"question_id": 1432, "answer_sql": ["SELECT CAST(SUM(CASE WHEN T2.amount = 50 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.income_id) FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.t_shirt_size = 'Medium' AND T1.position = 'Member';"]}, {"question_id": 1433, "answer_sql": ["SELECT DISTINCT county FROM zip_code WHERE type = 'PO Box';", "SELECT DISTINCT state FROM zip_code WHERE type = 'PO Box';", "SELECT DISTINCT T1.county FROM zip_code AS T1 INNER JOIN member AS T2 ON T1.zip_code = T2.zip WHERE T1.type = 'PO Box';"]}, {"question_id": 1434, "answer_sql": ["SELECT T1.zip_code FROM zip_code AS T1 INNER JOIN member AS T2 ON T1.zip_code = T2.zip WHERE T1.county = 'San Juan Municipio' AND T1.state = 'Puerto Rico' AND T1.type = 'PO Box';", "SELECT zip_code FROM zip_code WHERE county = 'San Juan Municipio' AND state = 'Puerto Rico' AND type = 'PO Box';"]}, {"question_id": 1435, "answer_sql": ["SELECT event_name FROM event WHERE type = 'Game' AND status = 'Closed' AND event_date BETWEEN '2019-03-15' AND '2020-03-20';"]}, {"question_id": 1436, "answer_sql": ["SELECT T2.link_to_event FROM expense AS T1 INNER JOIN attendance AS T2 ON T1.link_to_member = T2.link_to_member INNER JOIN budget AS T3 ON T3.link_to_event = T2.link_to_event WHERE T1.cost > 50", "SELECT T1.link_to_event FROM attendance AS T1 INNER JOIN expense AS T2 ON T1.link_to_event = T2.link_to_budget WHERE T2.cost > 50", "SELECT T2.link_to_event FROM expense AS T1 INNER JOIN attendance AS T2 ON T1.link_to_member = T2.link_to_member WHERE T1.cost > 50"]}, {"question_id": 1437, "answer_sql": ["SELECT T2.link_to_member, T1.link_to_event FROM attendance AS T1 INNER JOIN expense AS T2 ON T1.link_to_event = T2.link_to_budget WHERE T2.expense_date BETWEEN '2019-01-10' AND '2019-11-19' AND T2.approved = 'true'", "SELECT T2.link_to_event, T2.link_to_member FROM expense AS T1 INNER JOIN attendance AS T2 ON T1.link_to_member = T2.link_to_member WHERE T1.expense_date BETWEEN '2019-01-10' AND '2019-11-19' AND T1.approved = 'true'"]}, {"question_id": 1438, "answer_sql": ["SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Katy' AND T2.major_id = 'rec1N0upiVLy5esTO'"]}, {"question_id": 1439, "answer_sql": ["SELECT T1.phone FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Business' AND T2.college = 'College of Agriculture and Applied Sciences';"]}, {"question_id": 1440, "answer_sql": ["SELECT T1.email FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T2.expense_date BETWEEN '2019-09-10' AND '2019-11-19' AND T2.cost > 20;"]}, {"question_id": 1441, "answer_sql": ["SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'education' AND T1.position = 'Member' AND T2.college = 'College of Education & Human Services';"]}, {"question_id": 1442, "answer_sql": ["SELECT CAST(SUM(CASE WHEN event_status = 'went over budget' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(budget_id) FROM budget;", "SELECT CAST(SUM(CASE WHEN remaining < 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(budget_id) FROM budget;"]}, {"question_id": 1443, "answer_sql": ["SELECT event_id, location, status FROM event WHERE event_date BETWEEN '2019-11-01' AND '2020-03-31';", "SELECT event_id, location, status FROM event WHERE STRFTIME('%Y', event_date) BETWEEN '2019' AND '2020';"]}, {"question_id": 1444, "answer_sql": ["SELECT expense_description FROM expense WHERE cost > ( SELECT AVG(cost) FROM expense );"]}, {"question_id": 1445, "answer_sql": ["SELECT first_name, last_name FROM member WHERE t_shirt_size = 'X-Large';"]}, {"question_id": 1446, "answer_sql": ["SELECT CAST(SUM(CASE WHEN type = 'PO Box' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(zip_code) FROM zip_code;"]}, {"question_id": 1447, "answer_sql": ["SELECT T1.event_name, T1.location FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.remaining < 0;"]}, {"question_id": 1448, "answer_sql": ["SELECT T1.event_name, T1.event_date FROM event AS T1 INNER JOIN expense AS T2 ON T1.event_id = T2.link_to_budget WHERE T2.expense_description = 'Pizza' AND T2.cost > 50 AND T2.cost < 100;", "SELECT T1.event_name, T1.event_date FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T3.expense_description = 'Pizza' AND T3.cost > 50 AND T3.cost < 100"]}, {"question_id": 1449, "answer_sql": ["SELECT T1.first_name, T1.last_name, T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id INNER JOIN expense AS T3 ON T3.link_to_member = T1.member_id WHERE T3.cost > 100;"]}, {"question_id": 1450, "answer_sql": ["SELECT T3.city, T3.county FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN zip_code AS T3 ON T3.zip_code = T1.location INNER JOIN income AS T4 ON T4.link_to_member = T3.zip_code WHERE T4.amount > 40;"]}, {"question_id": 1451, "answer_sql": []}, {"question_id": 1452, "answer_sql": ["SELECT AVG(T2.cost) FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position != 'Member';"]}, {"question_id": 1453, "answer_sql": ["SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.category = 'Parking' AND T2.spent < ( SELECT AVG(cost) FROM expense );", "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T3.cost < ( SELECT AVG(cost) FROM expense )"]}, {"question_id": 1454, "answer_sql": ["SELECT 100.0 * SUM(CASE WHEN T2.type = 'Game' THEN T1.cost ELSE 0 END) / SUM(T1.cost) AS percentage FROM expense AS T1 INNER JOIN event AS T2 ON T1.link_to_budget = T2.event_id"]}, {"question_id": 1455, "answer_sql": ["SELECT T1.budget_id FROM budget AS T1 INNER JOIN expense AS T2 ON T1.budget_id = T2.link_to_budget WHERE T2.expense_description = 'Water,chips,cookies' ORDER BY T2.cost DESC LIMIT 1;", "SELECT T1.budget_id FROM budget AS T1 INNER JOIN expense AS T2 ON T1.budget_id = T2.link_to_budget WHERE T2.expense_description = 'Water, chips, cookies' ORDER BY T2.cost DESC LIMIT 1;"]}, {"question_id": 1456, "answer_sql": ["SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member GROUP BY T2.link_to_member ORDER BY SUM(T2.cost) DESC LIMIT 5;"]}, {"question_id": 1457, "answer_sql": ["SELECT T1.first_name, T1.last_name, T1.phone FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T2.cost > ( SELECT AVG(cost) FROM expense )"]}, {"question_id": 1458, "answer_sql": ["SELECT CAST(SUM(CASE WHEN state = 'Maine' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN state = 'Vermont' THEN 1 ELSE 0 END) FROM zip_code WHERE county = 'USPS'", "SELECT CAST(SUM(CASE WHEN state = 'Maine' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN state = 'Vermont' THEN 1 ELSE 0 END) FROM zip_code WHERE state IN ('Maine', 'Vermont')"]}, {"question_id": 1459, "answer_sql": ["SELECT T1.major_name, T1.department FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.first_name = 'Garrett' AND T2.last_name = 'Gerke'"]}, {"question_id": 1460, "answer_sql": ["SELECT T1.first_name, T1.last_name, T2.cost FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T2.expense_description = 'Water, Veggie tray, supplies'"]}, {"question_id": 1461, "answer_sql": ["SELECT T1.last_name, T1.phone FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Elementary Education'"]}, {"question_id": 1462, "answer_sql": ["SELECT T2.category, T2.amount FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'January Speaker'"]}, {"question_id": 1463, "answer_sql": ["SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.category = 'Food';"]}, {"question_id": 1464, "answer_sql": ["SELECT T1.first_name, T1.last_name, T2.amount FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T2.date_received = '9/9/2019'"]}, {"question_id": 1465, "answer_sql": ["SELECT T2.category FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id WHERE T1.expense_description = 'Posters';"]}, {"question_id": 1466, "answer_sql": ["SELECT T1.first_name, T1.last_name, T2.college FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.position = 'Secretary'"]}, {"question_id": 1467, "answer_sql": ["SELECT SUM(T2.spent), T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T2.link_to_event = T1.event_id WHERE T2.category = 'Speaker Gifts' GROUP BY T1.event_name;", "SELECT SUM(T2.spent), T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.category = 'Speaker Gifts'", "SELECT T2.spent, T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.category = 'Speaker Gifts';"]}, {"question_id": 1468, "answer_sql": ["SELECT T2.city FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Garrett' AND T1.last_name = 'Girke' AND T2.type = 'residential';"]}, {"question_id": 1469, "answer_sql": ["SELECT T1.first_name, T1.last_name, T1.position FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.city = 'Lincolnton' AND T2.state = 'North Carolina' AND T2.zip_code = 28092;"]}, {"question_id": 1470, "answer_sql": ["SELECT COUNT(GasStationID) FROM gasstations WHERE Country = 'CZE' AND Segment = 'Premium';"]}, {"question_id": 1471, "answer_sql": ["SELECT CAST(SUM(Currency = 'EUR') AS REAL) / SUM(Currency = 'CZK') FROM customers;"]}, {"question_id": 1472, "answer_sql": ["SELECT T2.CustomerID FROM yearmonth AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date BETWEEN '201201' AND '201212' GROUP BY T2.CustomerID ORDER BY SUM(T1.Consumption) ASC LIMIT 1;", "SELECT T2.CustomerID FROM yearmonth AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '2012' AND T1.Consumption = ( SELECT MIN(Consumption) FROM yearmonth WHERE Date = '2012' ) AND T2.Date = '2012-01-01' AND T2.Time = '00:00:00' AND T2.CardID = 1;", "SELECT T2.CustomerID FROM yearmonth AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN customers AS T3 ON T1.CustomerID = T3.CustomerID WHERE T1.Date BETWEEN '201201' AND '201212' ORDER BY T1.Consumption ASC LIMIT 1;"]}, {"question_id": 1473, "answer_sql": ["SELECT AVG(Consumption) / 12 AS avg_monthly_consumption FROM yearmonth WHERE CustomerID IN ( SELECT CustomerID FROM customers WHERE Segment = 'SME' ) AND Date BETWEEN '201301' AND '201312';", "SELECT AVG(Consumption) / 12 AS avg_monthly_consumption FROM yearmonth WHERE Date BETWEEN '201301' AND '201312';"]}, {"question_id": 1474, "answer_sql": ["SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date BETWEEN '201101' AND '201112' AND T1.Currency = 'CZK' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) DESC LIMIT 1;", "SELECT T2.CustomerID FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN gasstations AS T3 ON T2.GasStationID = T3.GasStationID INNER JOIN yearmonth AS T4 ON T2.CustomerID = T4.CustomerID WHERE T1.Currency = 'CZK' AND T4.Date BETWEEN '201101' AND '201112' GROUP BY T2.CustomerID ORDER BY SUM(T4.Consumption) DESC LIMIT 1;"]}, {"question_id": 1475, "answer_sql": ["SELECT COUNT(DISTINCT t1.customerid) FROM transactions_1k AS t1 INNER JOIN yearmonth AS t2 ON t1.customerid = t2.customerid WHERE t2.consumption < 30000 AND SUBSTR(t2.date, 1, 4) = '2012' AND t2.date LIKE '%KAM%';", "SELECT COUNT(DISTINCT customers.CustomerID) FROM customers INNER JOIN yearmonth ON customers.CustomerID = yearmonth.CustomerID WHERE yearmonth.Consumption < 30000 AND customers.Segment = 'KAM' AND yearmonth.Date BETWEEN '201201' AND '201212';", "SELECT COUNT(DISTINCT t1.customerid) FROM transactions_1k AS t1 INNER JOIN yearmonth AS t2 ON t1.customerid = t2.customerid WHERE t2.consumption < 30000 AND t2.date BETWEEN '201201' AND '201212';"]}, {"question_id": 1476, "answer_sql": ["SELECT SUM(IIF(T2.Currency = 'CZK', T1.Consumption, 0)) - SUM(IIF(T2.Currency = 'EUR', T1.Consumption, 0)) FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T2.CustomerID = T1.CustomerID WHERE T1.Date BETWEEN '201201' AND '201212';", "SELECT SUM(IIF(T2.Currency = 'CZK', T1.Consumption, 0)) - SUM(IIF(T2.Currency = 'EUR', T1.Consumption, 0)) FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T2.CustomerID = T1.CustomerID WHERE T1.Date = '2012'"]}, {"question_id": 1477, "answer_sql": ["SELECT T1.Date FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'EUR' GROUP BY T1.Date ORDER BY SUM(T1.Consumption) DESC LIMIT 1;", "SELECT SUBSTR(T1.Date, 1, 4) AS YEAR FROM transactions_1k AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN customers AS T3 ON T2.CustomerID = T3.CustomerID WHERE T3.Currency = 'EUR' GROUP BY SUBSTR(T1.Date, 1, 4) ORDER BY SUM(T2.Consumption) DESC LIMIT 1;", "SELECT SUBSTR(T2.Date, 1, 4) AS Year, SUM(T2.Consumption) AS TotalGasUse FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'EUR' GROUP BY SUBSTR(T2.Date, 1, 4) ORDER BY TotalGasUse DESC LIMIT 1;", "SELECT SUBSTR(T2.Date, 1, INSTR(T2.Date, ' ') - 1) AS YEAR, SUM(T2.Consumption) AS Consumption FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'EUR' GROUP BY SUBSTR(T2.Date, 1, INSTR(T2.Date, ' ') - 1) ORDER BY Consumption DESC LIMIT 1;", "SELECT SUBSTR(T1.Date, 1, INSTR(T1.Date, ' ') - 1) AS YEAR FROM transactions_1k AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN customers AS T3 ON T2.CustomerID = T3.CustomerID WHERE T3.Currency = 'EUR' GROUP BY SUBSTR(T1.Date, 1, INSTR(T1.Date, ' ') - 1) ORDER BY SUM(T2.Consumption) DESC LIMIT 1;"]}, {"question_id": 1478, "answer_sql": ["SELECT T2.Segment, SUM(T1.Consumption) FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID GROUP BY T2.Segment ORDER BY SUM(T1.Consumption) ASC LIMIT 1;", "SELECT T2.Segment FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID GROUP BY T2.Segment ORDER BY SUM(T1.Consumption) ASC LIMIT 1;"]}, {"question_id": 1479, "answer_sql": ["SELECT SUBSTR(Date, 1, 4) FROM yearmonth WHERE Consumption = ( SELECT MAX(Consumption) FROM yearmonth ) ORDER BY Consumption DESC LIMIT 1;", "SELECT SUBSTR(T1.Date, 1, INSTR(T1.Date, ' ') - 1) AS YEAR FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'CZK' GROUP BY T1.Date ORDER BY SUM(T1.Consumption) DESC LIMIT 1;", "SELECT SUBSTR(Date, 1, 4) FROM yearmonth WHERE Consumption = (SELECT MAX(Consumption) FROM yearmonth) AND CustomerID = (SELECT CustomerID FROM customers WHERE Currency = 'CZK') ORDER BY Consumption DESC LIMIT 1;"]}, {"question_id": 1480, "answer_sql": ["SELECT T1.month FROM ( SELECT DISTINCT SUBSTR(T2.Date, 6, 2) AS month FROM customers T1 INNER JOIN yearmonth T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'SME' AND T2.Date LIKE '2013%' ) AS T1 ORDER BY T1.month DESC LIMIT 1;"]}, {"question_id": 1481, "answer_sql": ["SELECT ( SELECT SUM(t2.Consumption) / 12 FROM customers AS t1 JOIN yearmonth AS t2 ON t1.CustomerID = t2.CustomerID WHERE t1.Segment = 'SME' AND t2.Date BETWEEN '201301' AND '201312' AND t1.Currency = 'CZK' GROUP BY t1.Segment ) - ( SELECT SUM(t2.Consumption) / 12 FROM customers AS t1 JOIN yearmonth AS t2 ON t1.CustomerID = t2.CustomerID WHERE t1.Segment = 'LAM' AND t2.Date BETWEEN '201301' AND '201312' AND t1.Currency = 'CZK' GROUP BY t1.Segment ) AS diff , ( SELECT SUM(t2.Consumption) / 12 FROM customers AS t1 JOIN yearmonth AS t2 ON t1.CustomerID = t2.CustomerID WHERE t1.Segment = 'LAM' AND t2.Date BETWEEN '201301' AND '201312' AND t1.Currency = 'CZK' GROUP BY t1.Segment ) - ( SELECT SUM(t2.Consumption) / 12 FROM customers AS t1 JOIN yearmonth AS t2 ON t1.CustomerID = t2.CustomerID WHERE t1.Segment = 'KAM' AND t2.Date BETWEEN '201301' AND '201312' AND t1.Currency = 'CZK' GROUP BY t1.Segment ) AS diff2 , ( SELECT SUM(t2.Consumption) / 12 FROM customers AS t1 JOIN yearmonth AS t2 ON t1.CustomerID = t2.CustomerID WHERE t1.Segment = 'KAM' AND t2.Date BETWEEN '201301' AND '201312' AND t1.Currency = 'CZK' GROUP BY t1.Segment ) AS diff3;", "SELECT ( SELECT IIF(T2.Segment = 'SME', AVG(T1.Consumption), NULL) - ( SELECT IIF(T2.Segment = 'LAM', AVG(T1.Consumption), NULL) ) AS diff FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T2.CustomerID = T1.CustomerID WHERE T1.Date BETWEEN '201301' AND '201312' ) AS diff;", "SELECT (SUM(IIF(T2.Segment = 'SME', T1.Consumption, 0)) - SUM(IIF(T2.Segment = 'LAM', T1.Consumption, 0))), 2 AS Difference FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T2.CustomerID = T1.CustomerID WHERE T1.Date BETWEEN '201301' AND '201312' AND T2.Currency = 'CZK'", "SELECT (SUM(CASE WHEN T2.Segment = 'SME' THEN T1.Consumption ELSE 0 END) - SUM(CASE WHEN T2.Segment = 'LAM' THEN T1.Consumption ELSE 0 END)) * 100 / (SUM(CASE WHEN T2.Segment = 'SME' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.Segment = 'LAM' THEN 1 ELSE 0 END)) AS DifferenceSME2LAM, (SUM(CASE WHEN T2.Segment = 'LAM' THEN T1.Consumption ELSE 0 END) - SUM(CASE WHEN T2.Segment = 'KAM' THEN T1.Consumption ELSE 0 END)) * 100 / (SUM(CASE WHEN T2.Segment = 'LAM' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.Segment = 'KAM' THEN 1 ELSE 0 END)) AS DifferenceLAM2KAM, (SUM(CASE WHEN T2.Segment = 'KAM' THEN T1.Consumption ELSE 0 END) - SUM(CASE WHEN T2.Segment = 'SME' THEN T1.Consumption ELSE 0 END)) * 100 / (SUM(CASE WHEN T2.Segment = 'KAM' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.Segment = 'SME' THEN 1 ELSE 0 END)) AS DifferenceKAM2SME FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date BETWEEN '201301' AND '201312' AND T2.Currency = 'CZK';", "SELECT (SUM(IIF(T2.Segment = 'SME', T1.Consumption, 0)) - SUM(IIF(T2.Segment = 'LAM', T1.Consumption, 0))) AS diff_sme_lam , (SUM(IIF(T2.Segment = 'LAM', T1.Consumption, 0)) - SUM(IIF(T2.Segment = 'KAM', T1.Consumption, 0))) AS diff_lam_kam , (SUM(IIF(T2.Segment = 'KAM', T1.Consumption, 0)) - SUM(IIF(T2.Segment = 'SME', T1.Consumption, 0))) AS diff_kam_sme FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date BETWEEN '201301' AND '201312' AND T2.Currency = 'CZK';"]}, {"question_id": 1482, "answer_sql": ["SELECT CASE WHEN SUM(IIF(T2.Currency = 'EUR', T1.Consumption, 0)) - SUM(IIF(T2.Currency != 'EUR', T1.Consumption, 0)) > 0 THEN 'SME' WHEN SUM(IIF(T2.Currency = 'EUR', T1.Consumption, 0)) - SUM(IIF(T2.Currency != 'EUR', T1.Consumption, 0)) < 0 THEN 'LAM' ELSE 'KAM' END AS RESULT FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T2.CustomerID = T1.CustomerID WHERE T1.Date BETWEEN '201201' AND '201312' GROUP BY T2.Segment ORDER BY SUM(IIF(T2.Currency = 'EUR', T1.Consumption, 0)) - SUM(IIF(T2.Currency != 'EUR', T1.Consumption, 0)) DESC LIMIT 1;", "SELECT CASE WHEN SUM(IIF(T2.Currency = 'EUR', T1.Consumption, 0)) / SUM(T1.Consumption) - 1 > 0 THEN 'Increase' ELSE 'Decrease' END AS IncreaseOrDecrease , CAST(SUM(IIF(T2.Currency = 'EUR', T1.Consumption, 0)) / SUM(T1.Consumption) AS REAL) * 100 / (SELECT SUM(Consumption) FROM yearmonth WHERE STRFTIME('%Y', Date) = '2013') FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Segment IN ('SME', 'LAM', 'KAM') AND T1.Date BETWEEN '201201' AND '201312'", "SELECT CASE WHEN SUM(IIF(T2.Currency = 'EUR', T1.Consumption, 0)) / SUM(T1.Consumption) - 1 > 0 THEN 'Increase' ELSE 'Decrease' END AS IncreaseOrDecrease , CAST(SUM(IIF(T2.Currency = 'EUR', T1.Consumption, 0)) / SUM(T1.Consumption) AS REAL) * 100 FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T2.CustomerID = T1.CustomerID WHERE T1.Date BETWEEN '201201' AND '201312' AND T2.Segment IN ('SME', 'LAM', 'KAM')", "SELECT CASE WHEN SUM(IIF(T2.Currency = 'EUR', T1.Consumption, 0)) - SUM(IIF(T2.Currency != 'EUR', T1.Consumption, 0)) > 0 THEN 'SME' WHEN SUM(IIF(T2.Currency = 'EUR', T1.Consumption, 0)) - SUM(IIF(T2.Currency != 'EUR', T1.Consumption, 0)) < 0 THEN 'LAM' ELSE 'KAM' END AS RESULT FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T2.CustomerID = T1.CustomerID WHERE T1.Date BETWEEN '201201' AND '201312' GROUP BY T2.Segment ORDER BY SUM(IIF(T2.Currency = 'EUR', T1.Consumption, 0)) - SUM(IIF(T2.Currency != 'EUR', T1.Consumption, 0)) DESC;", "SELECT CASE WHEN (SUM(IIF(T2.Currency = 'EUR', T1.Consumption, 0)) - SUM(IIF(T2.Currency != 'EUR', T1.Consumption, 0))) > 0 THEN 'Increase' ELSE 'Decrease' END AS IncreaseOrDecrease , CAST((SUM(IIF(T2.Currency = 'EUR', T1.Consumption, 0)) - SUM(IIF(T2.Currency != 'EUR', T1.Consumption, 0))) AS REAL) / SUM(IIF(T2.Currency = 'EUR', T1.Consumption, 0)) * 100 AS Percentage FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T2.CustomerID = T1.CustomerID WHERE T1.Date BETWEEN '201201' AND '201312' AND T2.Segment IN ('SME', 'LAM', 'KAM') ORDER BY Percentage DESC, T1.Date DESC LIMIT 1;"]}, {"question_id": 1483, "answer_sql": ["SELECT SUM(Consumption) FROM yearmonth WHERE CustomerID = 6 AND Date BETWEEN '201308' AND '201311';"]}, {"question_id": 1484, "answer_sql": ["SELECT SUM(CASE WHEN Country = 'Czech Republic' THEN 1 ELSE 0 END) - SUM(CASE WHEN Country = 'Slovakia' THEN 1 ELSE 0 END) AS MoreDiscount FROM gasstations WHERE Segment = 'discount';"]}, {"question_id": 1485, "answer_sql": ["SELECT SUM(IIF(Consumption > ( SELECT Consumption FROM yearmonth WHERE CustomerID = 5 AND Date = '201304' ), Consumption, 0)) - SUM(IIF(Consumption > ( SELECT Consumption FROM yearmonth WHERE CustomerID = 7 AND Date = '201304' ), Consumption, 0)) FROM yearmonth WHERE Date = '201304';", "SELECT SUM(IIF(CustomerID = 7, Consumption, 0)) - SUM(IIF(CustomerID = 5, Consumption, 0)) FROM yearmonth WHERE Date = '201304'", "SELECT SUM(IIF(Consumption > ( SELECT Consumption FROM yearmonth WHERE CustomerID = 5 AND Date = '201304' ), Consumption, 0)) - SUM(IIF(Consumption < ( SELECT Consumption FROM yearmonth WHERE CustomerID = 7 AND Date = '201304' ), Consumption, 0)) FROM yearmonth WHERE Date = '201304';"]}, {"question_id": 1486, "answer_sql": ["SELECT SUM(Currency = 'Czech Koruna') - SUM(Currency = 'Euro') FROM customers WHERE Segment = 'SME';", "SELECT SUM(IIF(customers.Currency = 'Czech Koruna', 1, 0)) - SUM(IIF(customers.Currency = 'Euro', 1, 0)) FROM customers INNER JOIN transactions_1k ON customers.CustomerID = transactions_1k.CustomerID INNER JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE customers.Segment = 'SME' AND gasstations.Segment = 'Specializing';"]}, {"question_id": 1487, "answer_sql": ["SELECT T1.CustomerID FROM transactions_1k AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN customers AS T3 ON T2.CustomerID = T3.CustomerID WHERE T2.Date = '201310' AND T3.Currency = 'EUR' AND T3.Segment = 'LAM' ORDER BY T2.Consumption DESC LIMIT 1;", "SELECT T2.CustomerID, SUM(T1.Consumption) FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '201310' AND T2.Currency = 'EUR' AND T2.Segment = 'LAM' GROUP BY T2.CustomerID ORDER BY SUM(T1.Consumption) DESC LIMIT 1;", "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'EUR' AND T2.Date = '201310' AND T1.Segment = 'LAM' ORDER BY T2.Consumption DESC LIMIT 1;", "SELECT T1.CustomerID, T2.Consumption FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'EUR' AND T1.Segment = 'LAM' AND T2.Date = '201310' AND T2.Consumption = ( SELECT MAX(Consumption) FROM yearmonth WHERE Date = '201310' );"]}, {"question_id": 1488, "answer_sql": ["SELECT T2.CustomerID, SUM(T1.Consumption) FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Segment = 'KAM' GROUP BY T2.CustomerID ORDER BY SUM(T1.Consumption) DESC LIMIT 1;", "SELECT T2.CustomerID, T1.Consumption FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T2.CustomerID = T1.CustomerID WHERE T2.Segment = 'KAM' ORDER BY T1.Consumption DESC LIMIT 1;"]}, {"question_id": 1489, "answer_sql": ["SELECT SUM(t2.amount) FROM customers AS t1 INNER JOIN transactions_1k AS t2 ON t1.customerid = t2.customerid INNER JOIN yearmonth AS t3 ON t1.customerid = t3.customerid WHERE t1.segment = 'KAM' AND t3.date = '201305';", "SELECT SUM(t1.Consumption) FROM yearmonth AS t1 INNER JOIN customers AS t2 ON t1.CustomerID = t2.CustomerID WHERE t2.Segment = 'KAM' AND t1.Date = '201305';"]}, {"question_id": 1490, "answer_sql": ["SELECT CAST(SUM(IIF(Consumption > 46.73, 1, 0)) AS REAL) * 100 / COUNT(CustomerID) FROM yearmonth WHERE CustomerID IN ( SELECT CustomerID FROM customers WHERE Segment = 'LAM' );"]}, {"question_id": 1491, "answer_sql": ["SELECT Country, COUNT(GasStationID) FROM gasstations WHERE Segment = 'Value for money' GROUP BY Country ORDER BY COUNT(GasStationID) DESC LIMIT 1;", "SELECT Country, COUNT(*) FROM gasstations WHERE Segment = 'value for money' GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1;", "SELECT Country, COUNT(GasStationID) FROM gasstations WHERE Segment = 'Value for money' GROUP BY Country ORDER BY COUNT(GasStationID) DESC;"]}, {"question_id": 1492, "answer_sql": ["SELECT CAST(SUM(CASE WHEN T1.Currency = 'EUR' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'KAM';"]}, {"question_id": 1493, "answer_sql": ["SELECT (SUM(IIF(Consumption > 528.3, 1, 0)) / COUNT(CustomerID)) * 100 FROM yearmonth WHERE Date = '201202';"]}, {"question_id": 1494, "answer_sql": ["SELECT CAST(SUM(IIF(Segment = 'Premium', 1, 0)) AS REAL) * 100 / COUNT(GasStationID) FROM gasstations WHERE Country = 'SVK';"]}, {"question_id": 1495, "answer_sql": ["SELECT CustomerID FROM yearmonth WHERE Date = '201309' AND Consumption = ( SELECT MAX(Consumption) FROM yearmonth WHERE Date = '201309' ) ORDER BY Consumption DESC LIMIT 1;"]}, {"question_id": 1496, "answer_sql": ["SELECT T2.Segment FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '201309' GROUP BY T2.Segment ORDER BY SUM(T1.Consumption) ASC LIMIT 1;", "SELECT T2.Segment FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN yearmonth AS T3 ON T2.CustomerID = T3.CustomerID WHERE T3.Date = '201309' GROUP BY T2.CustomerID ORDER BY SUM(T3.Consumption) ASC LIMIT 1;", "SELECT T1.Segment FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '201309' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) ASC LIMIT 1;"]}, {"question_id": 1497, "answer_sql": ["SELECT T2.CustomerID FROM yearmonth AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '201206' GROUP BY T2.CustomerID ORDER BY SUM(T1.Consumption) ASC LIMIT 1;", "SELECT customers.CustomerID FROM customers JOIN yearmonth ON customers.CustomerID = yearmonth.CustomerID WHERE yearmonth.Date = '201206' AND yearmonth.Consumption = ( SELECT MIN(Consumption) FROM yearmonth WHERE Date = '201206' )"]}, {"question_id": 1498, "answer_sql": ["SELECT Consumption FROM yearmonth WHERE Date = ( SELECT MAX(Date) FROM yearmonth WHERE SUBSTR(Date, 1, 7) = '2012' ) ORDER BY Consumption DESC LIMIT 1;", "SELECT MAX(Consumption) FROM yearmonth WHERE Date LIKE '2012%'", "SELECT MAX(Consumption) FROM yearmonth WHERE SUBSTR(Date, 1, 7) = '2012' AND Consumption > 0;"]}, {"question_id": 1499, "answer_sql": ["SELECT MAX(Consumption) FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'EUR' GROUP BY T1.CustomerID;", "SELECT MAX(Consumption) FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'EUR' GROUP BY T1.Date;", "SELECT SUM(Consumption) / 12 FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'EUR' GROUP BY T2.CustomerID ORDER BY SUM(Consumption) DESC LIMIT 1;", "SELECT SUM(T2.Consumption) / 12 FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'EUR' GROUP BY T2.Date ORDER BY SUM(T2.Consumption) DESC LIMIT 1;"]}, {"question_id": 1500, "answer_sql": ["SELECT T3.Description FROM transactions_1k AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN products AS T3 ON T1.ProductID = T3.ProductID WHERE T2.Date = '201309' GROUP BY T3.Description;", "SELECT T3.Description FROM transactions_1k AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN products AS T3 ON T3.ProductID = T1.ProductID WHERE T2.Date = '201309'"]}, {"question_id": 1501, "answer_sql": ["SELECT DISTINCT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '201306'"]}, {"question_id": 1502, "answer_sql": ["SELECT DISTINCT T1.ChainID FROM gasstations AS T1 INNER JOIN transactions_1k AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Price = ( SELECT MAX(Price) FROM transactions_1k );", "SELECT DISTINCT T1.ChainID FROM gasstations AS T1 INNER JOIN transactions_1k AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.CustomerID IN ( SELECT CustomerID FROM customers WHERE Currency = 'EUR' );", "SELECT DISTINCT T1.ChainID FROM gasstations AS T1 INNER JOIN transactions_1k AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.CustomerID IN ( SELECT CustomerID FROM customers WHERE Currency = 'EUR' ) ORDER BY T1.ChainID;", "SELECT DISTINCT T1.ChainID FROM gasstations AS T1 INNER JOIN transactions_1k AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Price = ( SELECT Price FROM transactions_1k WHERE CardID = 12345 );"]}, {"question_id": 1503, "answer_sql": ["SELECT T1.Description FROM products AS T1 INNER JOIN transactions_1k AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Price = ( SELECT Price FROM transactions_1k WHERE TransactionID = 1000 );", "SELECT T3.Description FROM transactions_1k AS T1 INNER JOIN products AS T2 ON T1.ProductID = T2.ProductID INNER JOIN products AS T3 ON T2.ProductID = T3.ProductID WHERE T1.Price = 'EUR';", "SELECT T3.Description FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN products AS T3 ON T1.ProductID = T3.ProductID WHERE T1.Price = ( SELECT Price FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'EUR' );", "SELECT T1.Description FROM products AS T1 INNER JOIN transactions_1k AS T2 ON T1.ProductID = T2.ProductID INNER JOIN gasstations AS T3 ON T2.GasStationID = T3.GasStationID INNER JOIN customers AS T4 ON T2.CustomerID = T4.CustomerID WHERE T4.Currency = 'EUR';"]}, {"question_id": 1504, "answer_sql": ["SELECT AVG(Price) FROM transactions_1k WHERE Date LIKE '2012-01%';"]}, {"question_id": 1505, "answer_sql": ["SELECT COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN yearmonth AS T3 ON T2.CustomerID = T3.CustomerID WHERE T1.Currency = 'EUR' AND T3.Consumption > 1000;"]}, {"question_id": 1506, "answer_sql": ["SELECT T3.Description FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN products AS T3 ON T1.ProductID = T3.ProductID WHERE T2.Country = 'CZE';"]}, {"question_id": 1507, "answer_sql": ["SELECT T1.Time FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.ChainID = 11;"]}, {"question_id": 1508, "answer_sql": ["SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE' AND T1.Price > 1000;"]}, {"question_id": 1509, "answer_sql": ["SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE' AND T1.Date > '2012-01-01';"]}, {"question_id": 1510, "answer_sql": ["SELECT AVG(T2.Price) FROM gasstations AS T1 INNER JOIN transactions_1k AS T2 ON T2.GasStationID = T1.GasStationID WHERE T1.Country = 'CZE';"]}, {"question_id": 1511, "answer_sql": ["SELECT AVG(Price) FROM transactions_1k JOIN customers ON transactions_1k.CustomerID = customers.CustomerID WHERE customers.Currency = 'EUR';"]}, {"question_id": 1512, "answer_sql": ["SELECT customers.CustomerID FROM transactions_1k JOIN customers ON transactions_1k.CustomerID = customers.CustomerID WHERE transactions_1k.Date = '2012-08-25' GROUP BY customers.CustomerID ORDER BY SUM(transactions_1k.Price) DESC LIMIT 1", "SELECT CustomerID FROM yearmonth WHERE Date = '2012-08-25' GROUP BY CustomerID ORDER BY SUM(Consumption) DESC LIMIT 1;"]}, {"question_id": 1513, "answer_sql": ["SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-25' AND T1.TransactionID = ( SELECT MIN(TransactionID) FROM transactions_1k WHERE Date = '2012-08-25' );", "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-25' GROUP BY T2.Country ORDER BY SUM(T1.Price) ASC LIMIT 1;"]}, {"question_id": 1514, "answer_sql": ["SELECT T1.Currency FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '2012-08-24' AND T2.Time = '16:25:00'"]}, {"question_id": 1515, "answer_sql": ["SELECT T1.Segment FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '2012-08-23' AND T2.Time = '21:20:00'"]}, {"question_id": 1516, "answer_sql": ["SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'EUR' AND T1.Date = '2012-08-26' AND T1.Time < '13:00:00';"]}, {"question_id": 1517, "answer_sql": ["SELECT T1.Segment FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = ( SELECT MIN(Date) FROM yearmonth );", "SELECT T1.Segment FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN gasstations AS T3 ON T3.GasStationID = T2.GasStationID WHERE T2.Date = ( SELECT MIN(Date) FROM transactions_1k ) LIMIT 1;", "SELECT T1.Segment FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN gasstations AS T3 ON T2.GasStationID = T3.GasStationID WHERE T2.Date = ( SELECT MIN(Date) FROM transactions_1k ) GROUP BY T1.CustomerID;"]}, {"question_id": 1518, "answer_sql": ["SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-24' AND T1.Time = '12:42:00'"]}, {"question_id": 1519, "answer_sql": ["SELECT T1.ProductID FROM transactions_1k AS T1 INNER JOIN products AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Date = '2012-08-23' AND T1.Time = '21:20:00';"]}, {"question_id": 1520, "answer_sql": ["SELECT T1.Date, T1.Consumption FROM yearmonth AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Price = 124.05 AND T1.Date = '2012-01-01' AND T1.Consumption = 124.05;", "SELECT SUM(Price) , T1.Date , T2.Consumption FROM transactions_1k AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '2012-01-01' AND T1.Price = 124.05 AND T2.Consumption = 124.05;"]}, {"question_id": 1521, "answer_sql": ["SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN customers AS T3 ON T1.CustomerID = T3.CustomerID WHERE T1.Date = '2012-08-26' AND T1.Time BETWEEN '8:00-9:00' AND '9:00' AND T2.Country = 'CZE';"]}, {"question_id": 1522, "answer_sql": ["SELECT T1.Currency FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN yearmonth AS T3 ON T1.CustomerID = T3.CustomerID WHERE T2.Price = 214582.17 AND T3.Date = '201306';", "SELECT T1.Currency FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '201306' AND T2.Consumption = 214582.17;"]}, {"question_id": 1523, "answer_sql": ["SELECT T1.Country FROM gasstations AS T1 INNER JOIN transactions_1k AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.CardID = 667467"]}, {"question_id": 1524, "answer_sql": ["SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN customers AS T3 ON T1.CustomerID = T3.CustomerID WHERE T1.Date = '2012-08-24' AND T1.Price = 548.4;"]}, {"question_id": 1525, "answer_sql": ["SELECT CAST(SUM(CASE WHEN T2.Currency = 'EUR' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.CustomerID) FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '2012-08-25';", "SELECT 100.0 * COUNT(DISTINCT CASE WHEN t1.currency = 'EUR' THEN t1.customerid ELSE NULL END) / COUNT(DISTINCT t1.customerid) FROM customers AS t1 INNER JOIN transactions_1k AS t2 ON t1.customerid = t2.customerid WHERE t2.date = '2012-08-25';"]}, {"question_id": 1526, "answer_sql": ["SELECT (SUM(IIF(T2.Date = '2012-08-24', T2.Consumption, 0)) - SUM(IIF(T2.Date = '2013-08-24', T2.Consumption, 0))) / SUM(IIF(T2.Date = '2012-08-24', T2.Consumption, 0)) FROM transactions_1k AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Price = 634.8 AND T1.Date = '2012-08-25';"]}, {"question_id": 1527, "answer_sql": ["SELECT T1.GasStationID FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID ORDER BY T1.Price DESC LIMIT 1;", "SELECT T1.GasStationID FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID GROUP BY T1.GasStationID ORDER BY SUM(T1.Price) DESC LIMIT 1;"]}, {"question_id": 1528, "answer_sql": ["SELECT CAST(SUM(CASE WHEN Segment = 'Premium' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(CustomerID) FROM customers WHERE CustomerID = ( SELECT CustomerID FROM customers WHERE Segment = 'SVK' );"]}, {"question_id": 1529, "answer_sql": ["SELECT SUM(t1.Price) FROM transactions_1k AS t1 INNER JOIN gasstations AS t2 ON t1.GasStationID = t2.GasStationID WHERE t1.CustomerID = 38508 AND t2.Country = 'USA' UNION SELECT SUM(t3.Price) FROM transactions_1k AS t3 INNER JOIN yearmonth AS t4 ON t3.CustomerID = t4.CustomerID WHERE t4.Date = '201201' AND t3.CustomerID = 38508;", "SELECT SUM(t1.price) FROM transactions_1k AS t1 INNER JOIN gasstations AS t2 ON t1.gasstationid = t2.gasstationid WHERE t1.customerid = '38508' AND t2.country = 'Germany' AND t1.date = '201201';"]}, {"question_id": 1530, "answer_sql": ["SELECT T3.Description FROM transactions_1k AS T1 INNER JOIN products AS T2 ON T1.ProductID = T2.ProductID INNER JOIN products AS T3 ON T2.ProductID = T3.ProductID GROUP BY T2.Description ORDER BY SUM(T1.Amount) DESC LIMIT 5;", "SELECT T1.Description FROM products AS T1 INNER JOIN transactions_1k AS T2 ON T1.ProductID = T2.ProductID ORDER BY T2.Amount DESC LIMIT 5;"]}, {"question_id": 1531, "answer_sql": ["SELECT T2.CustomerID, AVG(T1.Price / T1.Amount), T3.Currency FROM transactions_1k AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN customers AS T3 ON T2.CustomerID = T3.CustomerID WHERE T2.CustomerID = ( SELECT CustomerID FROM yearmonth GROUP BY CustomerID ORDER BY SUM(Consumption) DESC LIMIT 1 ) GROUP BY T2.CustomerID;", "SELECT T2.CustomerID, AVG(T1.Price / T1.Amount), T3.Currency FROM transactions_1k AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN customers AS T3 ON T2.CustomerID = T3.CustomerID WHERE T2.CustomerID = ( SELECT CustomerID FROM transactions_1k GROUP BY CustomerID ORDER BY SUM(Price) DESC LIMIT 1 ) GROUP BY T2.CustomerID;"]}, {"question_id": 1532, "answer_sql": ["SELECT T1.Country FROM gasstations AS T1 INNER JOIN transactions_1k AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN products AS T3 ON T2.ProductID = T3.ProductID WHERE T2.ProductID = 2 ORDER BY T2.Price DESC LIMIT 1;"]}, {"question_id": 1533, "answer_sql": ["SELECT T2.Consumption FROM transactions_1k AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.ProductID = 5 AND T1.Price / T1.Amount > 29 AND T2.Date LIKE '201208%';", "SELECT DISTINCT T2.Consumption FROM transactions_1k AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.ProductID = 5 AND T1.Price / T1.Amount > 29 AND T2.Date LIKE '201208%';"]}]