[
    {
        "question_id": 0,
        "db_id": "codebase_community",
        "question": "How many adults who obtained the badge Supporter?",
        "evidence": "Supporter is the Name of badge; adult refers to Age BETWEEN 19 AND 65",
        "SQL": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Supporter' AND T1.Age BETWEEN 19 AND 65",
        "difficulty": "simple"
    },
    {
        "question_id": 1,
        "db_id": "toxicology",
        "question": "What is the ratio of Hydrogen elements in molecule ID TR006? Please indicate its label.",
        "evidence": "hydrogen refers to element = 'h'; ratio = DIVIDE(SUM(element = 'h'), count(element)) where molecule_id = 'TR006' ; label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T.element = 'h' THEN T.atom_id ELSE NULL END) AS REAL) / COUNT(T.atom_id) FROM ( SELECT DISTINCT T1.atom_id, T1.element, T1.molecule_id, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR006' ) AS T UNION ALL SELECT DISTINCT T3.label FROM ( SELECT DISTINCT T1.atom_id, T1.element, T1.molecule_id, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR006' ) AS T3",
        "difficulty": "challenging"
    },
    {
        "question_id": 2,
        "db_id": "superhero",
        "question": "List down at least five full name of Demi-God superheroes.",
        "evidence": "Demi-God superheroes refers to race = 'Demi-God'",
        "SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Demi-God'",
        "difficulty": "simple"
    },
    {
        "question_id": 3,
        "db_id": "card_games",
        "question": "When was the ruling for the card 'Reminisce' created?",
        "evidence": "Reminisce refers to name = 'Reminisce'; when created is the date",
        "SQL": "SELECT T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Reminisce'",
        "difficulty": "simple"
    },
    {
        "question_id": 4,
        "db_id": "formula_1",
        "question": "How many driver participated in race ID number 18?",
        "evidence": "",
        "SQL": "SELECT COUNT(driverId) FROM driverStandings WHERE raceId = 18",
        "difficulty": "simple"
    },
    {
        "question_id": 5,
        "db_id": "codebase_community",
        "question": "What are the post history type IDs for post ID 3720 and how many unique users have commented on the post?",
        "evidence": "",
        "SQL": "SELECT T1.PostHistoryTypeId, (SELECT COUNT(DISTINCT UserId) FROM comments WHERE PostId = 3720) AS NumberOfUsers FROM postHistory AS T1 WHERE T1.PostId = 3720",
        "difficulty": "simple"
    },
    {
        "question_id": 6,
        "db_id": "thrombosis_prediction",
        "question": "What is the most common sign of patients with SLE disease?",
        "evidence": "the most common sign refers to MAX(symptoms); 'SLE' refers to diagnosis",
        "SQL": "SELECT Symptoms FROM Examination WHERE Diagnosis = 'SLE' GROUP BY Symptoms ORDER BY COUNT(Symptoms) DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 7,
        "db_id": "toxicology",
        "question": "Among the single bond molecule id, which molecules are not carcinogenic?",
        "evidence": "label = '-' means molecules are non-carcinogenic; single bond refers to bond_type = '-';",
        "SQL": "SELECT DISTINCT T1.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-' AND T1.bond_type = '-'",
        "difficulty": "simple"
    },
    {
        "question_id": 8,
        "db_id": "card_games",
        "question": "List the artists who illustrated cards with black borders which are available only in arena.",
        "evidence": "black borders refers to BorderColor = 'black'; available only in arena refers to availability = 'arena'",
        "SQL": "SELECT DISTINCT artist FROM cards WHERE availability = 'arena' AND BorderColor = 'black'",
        "difficulty": "simple"
    },
    {
        "question_id": 9,
        "db_id": "superhero",
        "question": "Among the superheroes with blue eyes, how many of them have the super power of \"Agility\"?",
        "evidence": "blue eyes refers to colour = 'Blue' and eye_colour_id = colour.id; super power of \"Agility\" refers to power_name = 'Agility'",
        "SQL": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN colour AS T4 ON T1.eye_colour_id = T4.id WHERE T3.power_name = 'Agility' AND T4.colour = 'Blue'",
        "difficulty": "moderate"
    },
    {
        "question_id": 10,
        "db_id": "california_schools",
        "question": "State the names and full communication address of high schools in Monterey which has more than 800 free or reduced price meals for ages 15-17?",
        "evidence": "Full communication address should include Zip, Street, City, State",
        "SQL": "SELECT T1.`School Name`, T2.Zip, T2.Street, T2.City, T2.State FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Monterey' AND T1.`Free Meal Count (Ages 5-17)` > 800 AND T1.`School Type` = 'High Schools (Public)'",
        "difficulty": "moderate"
    },
    {
        "question_id": 11,
        "db_id": "card_games",
        "question": "How many cards of legalities whose status is restricted are found in a starter deck?",
        "evidence": "restricted refers to status = 'restricted'; found in the starter deck refers to isStarter = 1;",
        "SQL": "SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Restricted' AND T1.isStarter = 1",
        "difficulty": "simple"
    },
    {
        "question_id": 12,
        "db_id": "california_schools",
        "question": "When did the first-through-twelfth-grade school with the largest enrollment open?",
        "evidence": "K-12 means First-through-twelfth-grade",
        "SQL": "SELECT T2.OpenDate FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY T1.`Enrollment (K-12)` DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 13,
        "db_id": "codebase_community",
        "question": "Name the user that commented 'thank you user93!'",
        "evidence": "\"thank you user93\" is the Text of comment; user refers to DisplayName",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T2.Text = 'thank you user93!'",
        "difficulty": "simple"
    },
    {
        "question_id": 14,
        "db_id": "student_club",
        "question": "What city and state did the President of the Student_Club grow up?",
        "evidence": "'President' is a position of Student Club;",
        "SQL": "SELECT T2.city, T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.position = 'President'",
        "difficulty": "simple"
    },
    {
        "question_id": 15,
        "db_id": "codebase_community",
        "question": "Which is the most valuable post in 2010? Please give its id and the owner's display name.",
        "evidence": "the most valuable post in 2015 refers to MAX(FavoriteCount) where year(CreationDate) = 2010;",
        "SQL": "SELECT T2.OwnerUserId, T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE STRFTIME('%Y', T1.CreationDate) = '2010' ORDER BY T2.FavoriteCount DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 16,
        "db_id": "financial",
        "question": "Which accounts placed orders for household payment in Pisek?",
        "evidence": "k_symbol = 'SIPO' refers to household payment",
        "SQL": "SELECT DISTINCT T2.account_id FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.k_symbol = 'SIPO' AND T3.A2 = 'Pisek'",
        "difficulty": "simple"
    },
    {
        "question_id": 17,
        "db_id": "financial",
        "question": "How many clients opened their accounts in Jesenik branch were women?",
        "evidence": "A2 has region names; Woman and female share the same meaning; female refers to gender = 'F'",
        "SQL": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T2.A2 = 'Jesenik'",
        "difficulty": "simple"
    },
    {
        "question_id": 18,
        "db_id": "toxicology",
        "question": "What are the atom IDs of the bond TR_000_2_5?",
        "evidence": "TR_000_2_5 is the bond id",
        "SQL": "SELECT T.atom_id FROM connected AS T WHERE T.bond_id = 'TR000_2_5'",
        "difficulty": "simple"
    },
    {
        "question_id": 19,
        "db_id": "student_club",
        "question": "What are the budget category of the events located at MU 215 and a guest speaker type with a 0 budget spent?",
        "evidence": "budget category refers to category; events located at refers to location; type = 'Guest Speaker'; 0 budget spent refers to spent = 0",
        "SQL": "SELECT DISTINCT T2.category, T1.type FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.location = 'MU 215' AND T2.spent = 0 AND T1.type = 'Guest Speaker'",
        "difficulty": "moderate"
    },
    {
        "question_id": 20,
        "db_id": "codebase_community",
        "question": "What is the total score of the posts edited by Yevgeny and include the user's website URL.",
        "evidence": "\"Yevgeny\" is the DisplayName; edited refers to LastEditorUserId",
        "SQL": "SELECT SUM(T1.Score), T2.WebsiteUrl FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Yevgeny' GROUP BY T2.WebsiteUrl",
        "difficulty": "simple"
    },
    {
        "question_id": 21,
        "db_id": "card_games",
        "question": "How many cards of legalities whose status is restricted have text boxes?",
        "evidence": "restricted refers to status = 'restricted'; have text boxes refers to is Textless = 0;",
        "SQL": "SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Restricted' AND T1.isTextless = 0",
        "difficulty": "simple"
    },
    {
        "question_id": 22,
        "db_id": "financial",
        "question": "How many loan accounts are for pre-payment of duration of 24 months with weekly issuance of statement.",
        "evidence": "Frequency = 'POPLATEK TYDNE' referes to weekly statement",
        "SQL": "SELECT COUNT(T2.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.duration = 24 AND T1.frequency = 'POPLATEK TYDNE'",
        "difficulty": "simple"
    },
    {
        "question_id": 23,
        "db_id": "codebase_community",
        "question": "How many users last accessed the website after 2014/9/1?",
        "evidence": "last accessed after 2014/9/1 refers to LastAccessDate > '2014-09-01 00:00:00'",
        "SQL": "SELECT COUNT(Id) FROM users WHERE date(LastAccessDate) > '2014-09-01'",
        "difficulty": "simple"
    },
    {
        "question_id": 24,
        "db_id": "financial",
        "question": "The average unemployment ratio of 1995 and 1996, which one has higher percentage?",
        "evidence": "A12 refers to unemploymant rate 1995; A13 refers to unemploymant rate 1996",
        "SQL": "SELECT DISTINCT IIF(AVG(A13) > AVG(A12), '1996', '1995') FROM district",
        "difficulty": "simple"
    },
    {
        "question_id": 25,
        "db_id": "debit_card_specializing",
        "question": "What kind of currency did the customer paid at 16:25:00 in 2012/8/24?",
        "evidence": "'2012/8/24' can be represented by '2012-08-24'",
        "SQL": "SELECT T3.Currency FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN customers AS T3 ON T1.CustomerID = T3.CustomerID WHERE T1.Date = '2012-08-24' AND T1.Time = '16:25:00'",
        "difficulty": "simple"
    },
    {
        "question_id": 26,
        "db_id": "superhero",
        "question": "What are the superpowers of heroes with ID 1?",
        "evidence": "superpowers refers to power_name; heroes with ID 1 refers to hero_id = 1;",
        "SQL": "SELECT DISTINCT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T1.hero_id = 1",
        "difficulty": "simple"
    },
    {
        "question_id": 27,
        "db_id": "thrombosis_prediction",
        "question": "For the patients with an abnormal anti-SM, please list the IDs of the three youngest ones.",
        "evidence": "abnormal anti-SM refers to SM NOT IN('-', '+-'); youngest refers to MAX(Birthday);",
        "SQL": "SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SM NOT IN ('negative','0') ORDER BY T1.Birthday DESC LIMIT 3",
        "difficulty": "simple"
    },
    {
        "question_id": 28,
        "db_id": "superhero",
        "question": "Name the tallest superhero.",
        "evidence": "tallest superhero refers to MAX(height_cm);",
        "SQL": "SELECT superhero_name FROM superhero ORDER BY height_cm DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 29,
        "db_id": "superhero",
        "question": "What is the total number of superheroes that have John as their first name?",
        "evidence": "have John as their first name refers to full_name LIKE 'John%';",
        "SQL": "SELECT COUNT(id) FROM superhero WHERE full_name LIKE 'John%'",
        "difficulty": "simple"
    },
    {
        "question_id": 30,
        "db_id": "student_club",
        "question": "Calculate the difference in the percentage of members in Maine and Vermont.",
        "evidence": "SUBTRACT( DIVIDE( SUM(state = 'Maine'), COUNT(position = 'Member')), DIVIDE( SUM(state = 'Vermont'), COUNT(position = 'Member')) )",
        "SQL": "SELECT CAST((SUM(CASE WHEN T2.state = 'Maine' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.state = 'Vermont' THEN 1 ELSE 0 END)) AS REAL) * 100 / COUNT(T1.member_id) AS diff FROM member AS T1 INNER JOIN zip_code AS T2 ON T2.zip_code = T1.zip",
        "difficulty": "moderate"
    },
    {
        "question_id": 31,
        "db_id": "formula_1",
        "question": "What was the average time in milliseconds Lewis Hamilton spent at a pit stop during Formula_1 races?",
        "evidence": "average time in milliseconds spent at pit stop refers to AVG(milliseconds)",
        "SQL": "SELECT AVG(milliseconds) FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton'",
        "difficulty": "simple"
    },
    {
        "question_id": 32,
        "db_id": "superhero",
        "question": "In superheroes with missing weight data, calculate the difference between the number of superheroes with blue eyes and no eye color.",
        "evidence": "missing weight data refers to weight_kg = 0 OR T1.weight_kg = NULL; difference = SUBTRACT(SUM(colour.id = 7), SUM(colour.id = 1)); blue eyes refers to eye_colour_id WHERE colour.id = 7; no eye color refers to eye_colour_id WHERE colour.id = 1;",
        "SQL": "SELECT SUM(CASE WHEN T2.id = 7 THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.id = 1 THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.weight_kg = 0 OR T1.weight_kg is NULL",
        "difficulty": "challenging"
    },
    {
        "question_id": 33,
        "db_id": "thrombosis_prediction",
        "question": "For in-patient age 50 and above, what is their average anti-cardiolipin antibody (IgG) concentration?",
        "evidence": "in-patient refers to Admission = '+'; age 50 and above refers to SUBTRACT(year(current_timestamp), year(Birthday)) >= '50'; average anti-cardiolipin antibody (IgG) concentration refers to AVG(aCL IgG)",
        "SQL": "SELECT AVG(T2.`aCL IgG`) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) >= 50 AND T1.Admission = '+'",
        "difficulty": "challenging"
    },
    {
        "question_id": 34,
        "db_id": "thrombosis_prediction",
        "question": "Please list the diseases of the patients born after 1995-1-1 and have a normal Rhuematoid Factor.",
        "evidence": "diseases refers to Diagnosis; born after 1995/1/1 refers to YEAR(Birthday) > = 1995; normal Rhuematoid Factor refers to RA IN('-', '+-');",
        "SQL": "SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE (T2.RA = '-' OR T2.RA = '+-') AND T1.Birthday > 1995-01-01",
        "difficulty": "moderate"
    },
    {
        "question_id": 35,
        "db_id": "european_football_2",
        "question": "For the team \"Hannover 96\", what was its defence aggression class on 2015/9/10?",
        "evidence": "\"Hannover 96\" refers to team_long_name = 'Hannover 96'; on 2015/9/10 refers to date = '2015-09-10 00:00:00'",
        "SQL": "SELECT t2.chanceCreationShootingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Hannover 96' AND SUBSTR(t2.`date`, 1, 10) = '2015-09-10'",
        "difficulty": "moderate"
    },
    {
        "question_id": 36,
        "db_id": "thrombosis_prediction",
        "question": "For the patients who are diagnosed with SJS, how many of them have a normal level of total protein?",
        "evidence": "diagnosed with SJS refers to Diagnosis = 'SJS'; normal level of total protein refers to TP > 6.0 and TP < 8.5;",
        "SQL": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SJS' AND T2.TP > 6.0 AND T2.TP < 8.5",
        "difficulty": "moderate"
    },
    {
        "question_id": 37,
        "db_id": "formula_1",
        "question": "For the drivers who took part in the race in 1983/7/16, what's their race completion rate?",
        "evidence": "DIVIDE(COUNT(driverid where time has value and date = '1983-07-16'), (COUNT(driverid where date = '1983-07-16')) as percentage",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T2.time IS NOT NULL THEN T2.driverId END) AS REAL) * 100 / COUNT(T2.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.date = '1983-07-16'",
        "difficulty": "moderate"
    },
    {
        "question_id": 38,
        "db_id": "superhero",
        "question": "What is the hero's full name with the highest attribute in strength?",
        "evidence": "highest attribute in strength refers to MAX(attribute_value) WHERE attribute_name = 'strength';",
        "SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Strength' ORDER BY T2.attribute_value DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 39,
        "db_id": "california_schools",
        "question": "How many schools with an average score in Math under 400 in the SAT test are exclusively virtual?",
        "evidence": "Exclusively virtual refers to Virtual = 'F'",
        "SQL": "SELECT COUNT(DISTINCT T2.School) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.Virtual = 'F' AND T1.AvgScrMath < 400",
        "difficulty": "simple"
    },
    {
        "question_id": 40,
        "db_id": "formula_1",
        "question": "Who was the player that got the lap time of 0:01:27 in the race No. 161? Show his introduction website.",
        "evidence": "player and driver are synonyms; race number refers to raceId; introduction website of the drivers refers to url;",
        "SQL": "SELECT DISTINCT T2.forename, T2.surname, T2.url FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 161 AND T1.time LIKE '1:27%'",
        "difficulty": "moderate"
    },
    {
        "question_id": 41,
        "db_id": "thrombosis_prediction",
        "question": "How many patients have a normal anti-SSB and are diagnosed with SLE in the examination?",
        "evidence": "normal anti-SSB refers to SSB IN('-', '+-'); '-' is expressed as 'negative' and '+-' is expressed as '0' in the database ; diagnosed with SLE refers to Diagnosis = 'SLE'; Should compute the number of distinct ones",
        "SQL": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SSB = 'negative' OR '0' AND T1.Diagnosis = 'SLE'",
        "difficulty": "moderate"
    },
    {
        "question_id": 42,
        "db_id": "thrombosis_prediction",
        "question": "Provide the ID and age of patient with lactate dehydrogenase (LDH) between 100-300 index above the normal range.",
        "evidence": "age refers to SUBTRACT(year(current_timestamp), year(Birthday)); lactate dehydrogenase (LDH) between 100-300 index above the normal range refers to LDH between 600 and 800;",
        "SQL": "SELECT DISTINCT T1.ID, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH > 600 AND T2.LDH < 800",
        "difficulty": "moderate"
    },
    {
        "question_id": 43,
        "db_id": "formula_1",
        "question": "In which race did the fastest 1st lap time was recorded? Please indicate the time in milliseconds.",
        "evidence": "fastest refers to Min(time);",
        "SQL": "SELECT T1.milliseconds FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T1.lap = 1 ORDER BY T1.time LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 44,
        "db_id": "european_football_2",
        "question": "Which of these players performs the best in crossing actions, Alexis, Ariel Borysiuk or Arouna Kone?",
        "evidence": "player who perform best in crossing actions refers to MAX(crossing);",
        "SQL": "SELECT t1.player_name, t2.crossing FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name IN ('Alexis', 'Ariel Borysiuk', 'Arouna Kone') ORDER BY t2.crossing DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 45,
        "db_id": "financial",
        "question": "How many accounts have an owner disposition and request for a statement to be generated upon a transaction?",
        "evidence": "Frequency = 'POPLATEK PO OBRATU' stands for issuance after transaction",
        "SQL": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T2.type = 'OWNER' AND T1.frequency = 'POPLATEK PO OBRATU'",
        "difficulty": "moderate"
    },
    {
        "question_id": 46,
        "db_id": "codebase_community",
        "question": "Among the users who obtained the \"Teacher\" badge, calculate their percentage of users",
        "evidence": "\"Teacher\" is the Name of badge;  percentage = Divide (Count(UserId where it's \"Teacher\"), Count(UserId)) * 100",
        "SQL": "SELECT CAST(COUNT(T1.Id) AS REAL) * 100 / (SELECT COUNT(Id) FROM users) FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Teacher'",
        "difficulty": "simple"
    },
    {
        "question_id": 47,
        "db_id": "codebase_community",
        "question": "List out all post that are related to post ID 61217 and what is the popularity of this post?",
        "evidence": "post related refers to RelatedPostId; popularity refers to ViewCount",
        "SQL": "SELECT T1.ViewCount FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId WHERE T2.PostId = 61217",
        "difficulty": "simple"
    },
    {
        "question_id": 48,
        "db_id": "codebase_community",
        "question": "What is the total number of comments of all the posts owned by csgillespie?",
        "evidence": "\"csgillespie\" is the DisplayName of user; total number of comments refers to Sum(CommentCount)",
        "SQL": "SELECT SUM(T1.CommentCount) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
        "difficulty": "simple"
    },
    {
        "question_id": 49,
        "db_id": "european_football_2",
        "question": "Which country is the Belgium Jupiler League from?",
        "evidence": "Belgium Jupiler League refers to League.name = 'Belgium Jupiler League';",
        "SQL": "SELECT t1.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t2.name = 'Belgium Jupiler League'",
        "difficulty": "simple"
    },
    {
        "question_id": 50,
        "db_id": "thrombosis_prediction",
        "question": "What is the average index of the lactate dehydrogenase (LDH) for all patients with lactate dehydrogenase (LDH) within the normal range.",
        "evidence": "average index of the lactate dehydrogenase (LDH) refers to AVG(LDH); (LDH) within the normal range refers to LDH < 500",
        "SQL": "SELECT AVG(LDH) FROM Laboratory WHERE LDH < 500",
        "difficulty": "simple"
    },
    {
        "question_id": 51,
        "db_id": "formula_1",
        "question": "How many French constructors have a lap number of over 50?",
        "evidence": "lap numbers of over 50 refers to laps > 50;",
        "SQL": "SELECT COUNT(DISTINCT T2.constructorId) FROM results AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T1.laps > 50 AND T2.nationality = 'French'",
        "difficulty": "simple"
    },
    {
        "question_id": 52,
        "db_id": "codebase_community",
        "question": "How many users were adult?",
        "evidence": "adult refers to user where Age BETWEEN 19 and 65;",
        "SQL": "SELECT COUNT(id) FROM users WHERE Age BETWEEN 19 AND 65",
        "difficulty": "simple"
    },
    {
        "question_id": 53,
        "db_id": "formula_1",
        "question": "Which was Lewis Hamilton first race? What was his points recorded for his first race event?",
        "evidence": "first race refers to min(Year)",
        "SQL": "SELECT T1.name, T2.points FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' ORDER BY T1.year ASC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 54,
        "db_id": "debit_card_specializing",
        "question": "For all the transactions happened during 8:00-9:00 in 2012/8/26, how many happened in CZE?",
        "evidence": "Gas station in the Czech Republic implies that Country = CZE; '2012/8/26' can be represented by '2012-08-26'",
        "SQL": "SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-26' AND T1.Time BETWEEN '08:00:00' AND '09:00:00' AND T2.Country = 'CZE'",
        "difficulty": "moderate"
    },
    {
        "question_id": 55,
        "db_id": "california_schools",
        "question": "What is the eligible free rate of the 10th and 11th schools with the highest enrolment for students in grades 1 through 12?",
        "evidence": "K-12 refers to students in grades 1 through 12; Eligible free rate for K-12 = `Free Meal Count (K-12)` / `Enrollment (K-12)`",
        "SQL": "SELECT CAST(`Free Meal Count (K-12)` AS REAL) / `Enrollment (K-12)` FROM frpm ORDER BY `Enrollment (K-12)` DESC LIMIT 9, 2",
        "difficulty": "moderate"
    },
    {
        "question_id": 56,
        "db_id": "codebase_community",
        "question": "How many posts by Matt Parker have more than 4 votes?",
        "evidence": "more than 4 votes refer to PostId > 4; DisplayName = 'Matt Parker';",
        "SQL": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id INNER JOIN votes AS T4 ON T4.PostId = T3.Id WHERE T1.DisplayName = 'Matt Parker' GROUP BY T2.PostId, T4.Id HAVING COUNT(T4.Id) > 4",
        "difficulty": "moderate"
    },
    {
        "question_id": 57,
        "db_id": "formula_1",
        "question": "Show me the season page of year when the race No. 901 took place.",
        "evidence": "race number refers to raceId;",
        "SQL": "SELECT T2.url FROM races AS T1 INNER JOIN seasons AS T2 ON T2.year = T1.year WHERE T1.raceId = 901",
        "difficulty": "simple"
    },
    {
        "question_id": 58,
        "db_id": "codebase_community",
        "question": "How many users with more than 10 views created their account after the year 2013?",
        "evidence": "more than 10 views refers to Views > 10; created after the year 2013 refers to year (CreationDate) > 2013",
        "SQL": "SELECT COUNT(id) FROM users WHERE STRFTIME('%Y', CreationDate) > '2013' AND Views > 10",
        "difficulty": "simple"
    },
    {
        "question_id": 59,
        "db_id": "superhero",
        "question": "Which publisher created more superheroes: DC or Marvel Comics? Find the difference in the number of superheroes.",
        "evidence": "DC refers to publisher_name = 'DC Comics'; Marvel Comics refers to publisher_name = 'Marvel Comics'; if SUM(publisher_name = 'DC Comics') > SUM(publisher_name = 'Marvel Comics'), it means DC Comics published more superheroes than Marvel Comics; if SUM(publisher_name = 'Marvel Comics') > SUM(publisher_name = 'Marvel Comics'), it means Marvel Comics published more heroes than DC Comics; difference = SUBTRACT(SUM(publisher_name = 'DC Comics'), SUM(publisher_name = 'Marvel Comics'));",
        "SQL": "SELECT SUM(CASE WHEN T2.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id",
        "difficulty": "challenging"
    },
    {
        "question_id": 60,
        "db_id": "financial",
        "question": "For the first client who opened his/her account in Prague, what is his/her account ID?",
        "evidence": "A3 stands for region names",
        "SQL": "SELECT T1.account_id FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'Prague' ORDER BY T1.date ASC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 61,
        "db_id": "student_club",
        "question": "Write the full name of the member who spent money for water, veggie tray and supplies and include the cost of it.",
        "evidence": "full name refers to first_name, last name; spent money for refers expense description; expense_description = 'Water, Veggie tray, supplies'",
        "SQL": "SELECT T2.first_name, T2.last_name, T1.cost FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T1.expense_description = 'Water, Veggie tray, supplies'",
        "difficulty": "challenging"
    },
    {
        "question_id": 62,
        "db_id": "formula_1",
        "question": "List the reference name of the drivers who passed the second qualifying lap during race no. 23. Indicate their nationality and birthday.",
        "evidence": "passed the second qualifying lap refers to q2 is not null; birthday refers to dob; reference name of drivers refers to driverRef; race no. refers to raceId;",
        "SQL": "SELECT T2.driverRef, T2.nationality, T2.dob FROM qualifying AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T1.raceId = 23 AND T1.q2 IS NOT NULL",
        "difficulty": "moderate"
    },
    {
        "question_id": 63,
        "db_id": "formula_1",
        "question": "What is the average score of Lewis Hamilton among all the Turkish Grand Prix?",
        "evidence": "Average score = AVG(points)",
        "SQL": "SELECT AVG(T2.points) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton' AND T3.name = 'Turkish Grand Prix'",
        "difficulty": "moderate"
    },
    {
        "question_id": 64,
        "db_id": "codebase_community",
        "question": "For the owner user of post No. 65041, what is his/her reputation points?",
        "evidence": "post no. 65041 refers to Id = '65041'; reputation point refers to Reputation",
        "SQL": "SELECT T1.Reputation FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.Id = 65041",
        "difficulty": "simple"
    },
    {
        "question_id": 65,
        "db_id": "codebase_community",
        "question": "Who is the editor of the post titled 'Open source tools for visualizing multi-dimensional data?'",
        "evidence": "'Open source tools for visualizing multi-dimensional data' is the Title of Post",
        "SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Open source tools for visualizing multi-dimensional data?'",
        "difficulty": "moderate"
    },
    {
        "question_id": 66,
        "db_id": "student_club",
        "question": "What is the total expense for the Yearly Kickoff?",
        "evidence": "'Baseball game' is an event name; total expense refers to SUM(cost)",
        "SQL": "SELECT SUM(T3.cost) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'Yearly Kickoff'",
        "difficulty": "simple"
    },
    {
        "question_id": 67,
        "db_id": "card_games",
        "question": "Tell the Japanese name of the set which card \"Fellwar Stone\" is in it.",
        "evidence": "Japanese name refers to language = 'Japanese'; card \"Fellwar Stone\" refers to name = 'Fellwar Stone'",
        "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Fellwar Stone' AND T2.language = 'Japanese' AND T2.translation IS NOT NULL",
        "difficulty": "moderate"
    },
    {
        "question_id": 68,
        "db_id": "debit_card_specializing",
        "question": "What is the biggest monthly consumption of the customers who use euro as their currency?",
        "evidence": "Monthly consumption = SUM(consumption) / 12",
        "SQL": "SELECT SUM(T2.Consumption) / 12 AS MonthlyConsumption FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'EUR' GROUP BY T1.CustomerID ORDER BY MonthlyConsumption DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 69,
        "db_id": "california_schools",
        "question": "What is the monthly average number of schools that opened in Alameda County under the jurisdiction of the Elementary School District in 1980?",
        "evidence": "Elementary School District refers to DOC = 52; Monthly average number of schools that opened in 2018 = count(schools that opened in 1980) / 12",
        "SQL": "SELECT CAST(COUNT(School) AS REAL) / 12 FROM schools WHERE DOC = 52 AND County = 'Alameda' AND strftime('%Y', OpenDate) = '1980'",
        "difficulty": "moderate"
    },
    {
        "question_id": 70,
        "db_id": "formula_1",
        "question": "What was the fastest lap speed among all drivers in the 2009 Spanish Grand Prix?",
        "evidence": "the fastest lap speed among all refers to max(fastestLapSpeed)",
        "SQL": "SELECT T2.fastestLapSpeed FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.name = 'Spanish Grand Prix' AND T1.year = 2009 AND T2.fastestLapSpeed IS NOT NULL ORDER BY T2.fastestLapSpeed DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 71,
        "db_id": "california_schools",
        "question": "Please list the zip code of all the charter schools in Fresno County Office of Education.",
        "evidence": "Charter schools refers to `Charter School (Y/N)` = 1 in the table fprm",
        "SQL": "SELECT T2.Zip FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`District Name` = 'Fresno County Office of Education' AND T1.`Charter School (Y/N)` = 1",
        "difficulty": "simple"
    },
    {
        "question_id": 72,
        "db_id": "financial",
        "question": "List out the account numbers of female clients who are oldest and has lowest average salary, calculate the gap between this lowest average salary with the highest average salary?",
        "evidence": "Female means gender = 'F'; A11 refers to average salary; Gap = highest average salary - lowest average salary; If the person A's birthdate > B's birthdate, it means that person B is order than person A.",
        "SQL": "SELECT T1.account_id , ( SELECT MAX(A11) - MIN(A11) FROM district ) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.district_id = ( SELECT district_id FROM client WHERE gender = 'F' ORDER BY birth_date ASC LIMIT 1 ) ORDER BY T2.A11 DESC LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question_id": 73,
        "db_id": "codebase_community",
        "question": "What is the average score of Stephen Turner's posts?",
        "evidence": "DisplayName = 'Stephen Turner'; average score refers to AVG(Score);",
        "SQL": "SELECT AVG(T2.Score) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Stephen Turner'",
        "difficulty": "simple"
    },
    {
        "question_id": 74,
        "db_id": "codebase_community",
        "question": "What are the name of badges that users who have the lowest reputation obtained?",
        "evidence": "lowest reputation refers to Min(Reputation); user refers to UserId",
        "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Reputation = (SELECT MIN(Reputation) FROM users)",
        "difficulty": "simple"
    },
    {
        "question_id": 75,
        "db_id": "card_games",
        "question": "How many sets are available just in Japanese and not in Magic: The Gathering Online?",
        "evidence": "Japanese refers to language = 'Japanese'; not in Magic: The Gathering Online refers to mtgoCode is null or mtgoCode = ''",
        "SQL": "SELECT COUNT(T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.language = 'Japanese'  AND (T1.mtgoCode IS NULL OR T1.mtgoCode = '')",
        "difficulty": "moderate"
    },
    {
        "question_id": 76,
        "db_id": "european_football_2",
        "question": "State the chance creation passing class for \"PEC Zwolle\" on 2013/9/20.",
        "evidence": "\"PEC Zwolle\" refers to team_long_name = 'PEC Zwolle'; on 2013/9/20 refers to date = '2013-09-20 00:00:00'",
        "SQL": "SELECT t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'PEC Zwolle' AND SUBSTR(t2.`date`, 1, 10) = '2013-09-20'",
        "difficulty": "moderate"
    },
    {
        "question_id": 77,
        "db_id": "toxicology",
        "question": "How many of the molecules are carcinogenic?",
        "evidence": "label = '+' mean molecules are carcinogenic;",
        "SQL": "SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE T.label = '+'",
        "difficulty": "simple"
    },
    {
        "question_id": 78,
        "db_id": "california_schools",
        "question": "How many chartered schools located in the city of Hickman are owned by the Elementary School District?",
        "evidence": "Elementary School District refers to DOC = 52; Chartered schools refer to Charter = 1 in the table schools",
        "SQL": "SELECT COUNT(School) FROM schools WHERE DOC = 52 AND Charter = 1 AND City = 'Hickman'",
        "difficulty": "simple"
    },
    {
        "question_id": 79,
        "db_id": "codebase_community",
        "question": "How many votes were made in 2010?",
        "evidence": "YEAR(CreationDate) = 2010;",
        "SQL": "SELECT COUNT(id) FROM votes WHERE STRFTIME('%Y', CreationDate) = '2010'",
        "difficulty": "simple"
    },
    {
        "question_id": 80,
        "db_id": "card_games",
        "question": "Among the cards with converted mana cost higher than 5 in the set Coldsnap, how many of them have unknown power?",
        "evidence": "card set Coldsnap refers to name = 'Coldsnap'; converted mana cost higher than 5 refers to convertedManaCost > 5; unknown power refers to power = '*' or T1.power is null",
        "SQL": "SELECT SUM(CASE WHEN T1.power LIKE '%*%' OR T1.power IS NULL THEN 1 ELSE 0 END) FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap' AND T1.convertedManaCost > 5",
        "difficulty": "moderate"
    },
    {
        "question_id": 81,
        "db_id": "toxicology",
        "question": "What are the elements of the toxicology and label of molecule TR060?",
        "evidence": "TR060 is the molecule id; label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic; element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium",
        "SQL": "SELECT DISTINCT T1.element, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR060'",
        "difficulty": "challenging"
    },
    {
        "question_id": 82,
        "db_id": "card_games",
        "question": "List all the card id and artist with unknown power which are legal for commander play format.",
        "evidence": "unknown power refers to power = '*' or POWER IS NULL; commander play format refers to format = 'commander'; legal for commander play format refers to format = 'commander' where status = 'Legal'",
        "SQL": "SELECT T1.id, T1.artist FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Legal' AND T2.format = 'commander' AND (T1.power IS NULL OR T1.power = '*')",
        "difficulty": "moderate"
    },
    {
        "question_id": 83,
        "db_id": "thrombosis_prediction",
        "question": "How many male patients have their glutamic oxaloacetic transaminase in the normal range?",
        "evidence": "male refers to Sex = 'M'; glutamic oxaloacetic transaminase in the normal range refers to GOT < 60;",
        "SQL": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GOT < 60 AND T1.SEX = 'M'",
        "difficulty": "simple"
    },
    {
        "question_id": 84,
        "db_id": "european_football_2",
        "question": "How many football players born after the 1990s have the first name \"Aaron\"?",
        "evidence": "first name \"Aaron\" refers to player_name LIKE 'Aaron%'; born after the 1990s refers to birthday > '1990'",
        "SQL": "SELECT COUNT(id) FROM Player WHERE birthday > '1990' AND player_name LIKE 'Aaron%'",
        "difficulty": "simple"
    },
    {
        "question_id": 85,
        "db_id": "european_football_2",
        "question": "How many players were born after 1990?",
        "evidence": "born after 1990 refers to strftime('%Y', birthday) = '1990';",
        "SQL": "SELECT COUNT(id) FROM Player WHERE STRFTIME('%Y', birthday) > '1990'",
        "difficulty": "simple"
    },
    {
        "question_id": 86,
        "db_id": "formula_1",
        "question": "What is the average fastest lap time in seconds for Lewis Hamilton in all the Formula_1 races?",
        "evidence": "average fastest lap time = avg(fastestLapTime); The time is recorded on 'MM:SS.mmm'",
        "SQL": "SELECT AVG(CAST(SUBSTR(T2.fastestLapTime, 1, INSTR(T2.fastestLapTime, ':') - 1) AS INTEGER) * 60 + CAST(SUBSTR(T2.fastestLapTime, INSTR(T2.fastestLapTime, ':') + 1) AS REAL)) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T1.surname = 'Hamilton' AND T1.forename = 'Lewis'",
        "difficulty": "moderate"
    },
    {
        "question_id": 87,
        "db_id": "superhero",
        "question": "How many powers does Amazo hero have?",
        "evidence": "Amazo hero refers to superhero_name = 'Amazo';",
        "SQL": "SELECT COUNT(T1.power_id) FROM hero_power AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id WHERE T2.superhero_name = 'Amazo'",
        "difficulty": "simple"
    },
    {
        "question_id": 88,
        "db_id": "toxicology",
        "question": "What is the most common bond type?",
        "evidence": "most common bond type refers MAX(COUNT(bond_type))",
        "SQL": "SELECT T.bond_type FROM ( SELECT bond_type, COUNT(bond_id) FROM bond GROUP BY bond_type ORDER BY COUNT(bond_id) DESC LIMIT 1 ) AS T",
        "difficulty": "simple"
    },
    {
        "question_id": 89,
        "db_id": "toxicology",
        "question": "List all the elements of the toxicology of the molecule \"TR004\".",
        "evidence": "TR004 is the molecule id; element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium",
        "SQL": "SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR004'",
        "difficulty": "challenging"
    },
    {
        "question_id": 90,
        "db_id": "superhero",
        "question": "List the power of superheroes with height greater than 80% of the average height of all superheroes.",
        "evidence": "power of superheroes refers to power_name; height greater than 80% of the average height of all superheroes = height_cm > MULTIPLY(AVG(height_cm), 0.8);",
        "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.height_cm * 100 > ( SELECT AVG(height_cm) FROM superhero ) * 80",
        "difficulty": "moderate"
    },
    {
        "question_id": 91,
        "db_id": "formula_1",
        "question": "Please list the location coordinates of the circuits whose lap record is 1:29.488.",
        "evidence": "lap records means the fastest time recorded which refers to time; coordinates are expressed as latitude and longitude which refers to (lat, lng)",
        "SQL": "SELECT T3.lat, T3.lng FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T1.time = '1:29.488'",
        "difficulty": "moderate"
    },
    {
        "question_id": 92,
        "db_id": "codebase_community",
        "question": "What is the name of tags used by John Stauffer's?",
        "evidence": "DisplayName = 'John Stauffer';",
        "SQL": "SELECT T3.Tags FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'John Salvatier'",
        "difficulty": "simple"
    },
    {
        "question_id": 93,
        "db_id": "card_games",
        "question": "Find and list the names of sets which doesn't have Japanese translation but have Korean translation.",
        "evidence": "names of sets refers to name; doesn't have Japanese translation refers to language not like '%Japanese%'; have Korean translation refers to language = 'Korean'",
        "SQL": "SELECT name FROM sets WHERE code IN ( SELECT setCode FROM set_translations WHERE language = 'Korean' AND language NOT LIKE '%Japanese%' )",
        "difficulty": "moderate"
    },
    {
        "question_id": 94,
        "db_id": "superhero",
        "question": "What are the names of the superheroes with the power of death touch?",
        "evidence": "name of superheroes refers to refers to superhero_name; the power of death touch refers to power_name = 'Death Touch'",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Death Touch'",
        "difficulty": "moderate"
    },
    {
        "question_id": 95,
        "db_id": "european_football_2",
        "question": "What is the ADO Den Haag team freedom of movement in the 1st two thirds of the pitch?",
        "evidence": "ADO Den Haag refers to team_long_name = 'ADO Den Haag'; freedom of movement in the 1st two thirds of the pitch refers to buildUpPlayPositioningClass;",
        "SQL": "SELECT DISTINCT t2.buildUpPlayPositioningClass FROM Team AS t1 INNER JOIN Team_attributes AS t2 ON t1.team_fifa_api_id = t2.team_fifa_api_id WHERE t1.team_long_name = 'ADO Den Haag'",
        "difficulty": "moderate"
    },
    {
        "question_id": 96,
        "db_id": "codebase_community",
        "question": "What is the location of the owner of the post \"Eliciting priors from experts\"?",
        "evidence": "Owner refers to OwnerUserId; 'Eliciting priors from experts' is the Title of post",
        "SQL": "SELECT T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'",
        "difficulty": "simple"
    },
    {
        "question_id": 97,
        "db_id": "student_club",
        "question": "What is the total budgeted amount for all category in \"October Speaker\" event?",
        "evidence": "total budgeted amount refers to SUM(amount) where event_name = 'October Speaker'",
        "SQL": "SELECT SUM(T2.amount) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'October Speaker'",
        "difficulty": "simple"
    },
    {
        "question_id": 98,
        "db_id": "european_football_2",
        "question": "Indicate the full names of the top 10 players with the highest number of penalties.",
        "evidence": "full name refers to player_name; players with highest number of penalties refers to MAX(penalties);",
        "SQL": "SELECT t2.player_name FROM Player_Attributes AS t1 INNER JOIN Player AS t2 ON t1.id = t2.id ORDER BY t1.penalties DESC LIMIT 10",
        "difficulty": "simple"
    },
    {
        "question_id": 99,
        "db_id": "financial",
        "question": "Calculate the percentage of account from 'Decin' district for all accounts are opened in 1993.",
        "evidence": "A2 contains the information about district.",
        "SQL": "SELECT CAST(SUM(T1.A2 = 'Decin') AS REAL) * 100 / COUNT(account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T2.date) = '1993'",
        "difficulty": "simple"
    },
    {
        "question_id": 100,
        "db_id": "european_football_2",
        "question": "What was the chance creation crossing class for \"Hull City\" on 2010/2/22?",
        "evidence": "\"Hull City\" refers to team_long_name = 'Hull City'; on 2010/2/22 refers to date = '2010-02-22 00:00:00'",
        "SQL": "SELECT t2.chanceCreationCrossingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Hull City' AND SUBSTR(t2.`date`, 1, 10) = '2010-02-22'",
        "difficulty": "moderate"
    },
    {
        "question_id": 101,
        "db_id": "california_schools",
        "question": "In which mailing street address can you find the school that has the lowest average score in reading? Also give the school's name.",
        "evidence": "",
        "SQL": "SELECT T2.MailStreet, T2.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrRead IS NOT NULL ORDER BY T1.AvgScrRead ASC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 102,
        "db_id": "student_club",
        "question": "Please list the event names of all the events attended by Maya Mclean.",
        "evidence": "",
        "SQL": "SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T3.first_name = 'Maya' AND T3.last_name = 'Mclean'",
        "difficulty": "simple"
    },
    {
        "question_id": 103,
        "db_id": "thrombosis_prediction",
        "question": "What is the percentage of patient who has a abnormal level of glutamic oxaloacetic transaminase level, yet he or she is diagnosed with SLE?",
        "evidence": "abnormal level of glutamic oxaloacetic transaminase refers to GOT > = 60; percentage = MULTIPLY(DIVIDE(COUNT(ID WHERE GOT > = 60 AND Diagnosis = 'SLE'), COUNT(ID WHERE GOT > = 60)), 1.0);",
        "SQL": "SELECT COUNT(CASE WHEN T1.Diagnosis LIKE '%SLE%' THEN T1.ID ELSE 0 END) / COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`GOT` >= 60",
        "difficulty": "moderate"
    },
    {
        "question_id": 104,
        "db_id": "european_football_2",
        "question": "List out of players whose preferred foot is left.",
        "evidence": "preferred_foot = 'left';",
        "SQL": "SELECT DISTINCT t1.id, t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.preferred_foot = 'left'",
        "difficulty": "simple"
    },
    {
        "question_id": 105,
        "db_id": "toxicology",
        "question": "Name all bonds with single bond types and what atoms are connected to the molecules.",
        "evidence": "single bond refers to bond_type = '-';",
        "SQL": "SELECT T1.bond_id, T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '-'",
        "difficulty": "simple"
    },
    {
        "question_id": 106,
        "db_id": "student_club",
        "question": "Which event has the lowest cost?",
        "evidence": "event refers to event_name where MIN(cost)",
        "SQL": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget ORDER BY T3.cost LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 107,
        "db_id": "card_games",
        "question": "Which of the cards that are a promotional painting have multiple faces on the same card? Please list their names.",
        "evidence": "are a promotional painting refers to isPromo = 1; have multiple faces on the same card refers to side is not Null",
        "SQL": "SELECT DISTINCT name FROM cards WHERE isPromo = 1 AND side IS NOT NULL",
        "difficulty": "simple"
    },
    {
        "question_id": 108,
        "db_id": "formula_1",
        "question": "Name the races in year 2017 that are not hosted in year 2000.",
        "evidence": "not hosted means not in;",
        "SQL": "SELECT name FROM races WHERE year = 2017 AND name NOT IN ( SELECT name FROM races WHERE year = 2000 )",
        "difficulty": "simple"
    },
    {
        "question_id": 109,
        "db_id": "card_games",
        "question": "What is the percentage of the cards with a converted mana cost of 7 in the set Coldsnap?",
        "evidence": "converted mana cost of 7 refers to convertedManaCost = 7; card set Coldsnap refers to name = 'Coldsnap'; percentage = DIVIDE(SUM(convertedManaCost = 7), SUM(convertedManaCost))*100",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.convertedManaCost = 7 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap'",
        "difficulty": "moderate"
    },
    {
        "question_id": 110,
        "db_id": "superhero",
        "question": "Which group does superhero A-Bomb belong to?",
        "evidence": "group refers to race; A-Bomb refers to superhero_name = 'A-Bomb';",
        "SQL": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'A-Bomb'",
        "difficulty": "simple"
    },
    {
        "question_id": 111,
        "db_id": "toxicology",
        "question": "Identify whether the chemical compound that contains Calcium is carcinogenic.",
        "evidence": "calcium refers to element = 'ca'; label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic;",
        "SQL": "SELECT T2.label AS flag_carcinogenic FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'ca'",
        "difficulty": "moderate"
    },
    {
        "question_id": 112,
        "db_id": "superhero",
        "question": "Provide the hero name and race of Charles Chandler.",
        "evidence": "hero name refers to superhero_name; Charles Chandler is the full name of superhero;",
        "SQL": "SELECT T1.superhero_name, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.full_name = 'Charles Chandler'",
        "difficulty": "simple"
    },
    {
        "question_id": 113,
        "db_id": "european_football_2",
        "question": "Which teams have build up play passing more than 70? Please list their short names.",
        "evidence": "build up play passing refers to buildUpPlayPassing; buildUpPlayPassing > 70; short names refers to team_short_name;",
        "SQL": "SELECT DISTINCT t1.team_short_name FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.buildUpPlayPassing > 70",
        "difficulty": "moderate"
    },
    {
        "question_id": 114,
        "db_id": "codebase_community",
        "question": "Indicate the creation date of the maximum number of votes.",
        "evidence": "the creation date of the maximum number of votes refers to CreationDate where Max(Count(Id))",
        "SQL": "SELECT CreationDate FROM votes GROUP BY CreationDate ORDER BY COUNT(Id) DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 115,
        "db_id": "thrombosis_prediction",
        "question": "What is the percentage of the female patient whose uric acid (UA) beyond the normal range?",
        "evidence": "uric acid (UA) beyond the normal range refers to UA > 8.0 and SEX = 'M' or UA > 6.5 and SEX = 'F'; female refers to Sex = 'F'",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.UA > 6.5 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F'",
        "difficulty": "moderate"
    },
    {
        "question_id": 116,
        "db_id": "student_club",
        "question": "What is the most popular size of t-shirt ordered by the club members?",
        "evidence": "most popular size of t-shirt ordered refers to MAX(COUNT(t_shirt_size))",
        "SQL": "SELECT t_shirt_size FROM member GROUP BY t_shirt_size ORDER BY COUNT(t_shirt_size) DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 117,
        "db_id": "financial",
        "question": "List account ID and account opening date for accounts from 'Prachatice'.",
        "evidence": "A2 refers to the names of districts.",
        "SQL": "SELECT T1.account_id, T1.date FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Prachatice'",
        "difficulty": "simple"
    },
    {
        "question_id": 118,
        "db_id": "student_club",
        "question": "Give the event ID, location, and status of events conducted from November 2019 to March 2020.",
        "evidence": "event_date BETWEEN '2019-11-01' and '2020-03-31'",
        "SQL": "SELECT event_id, location, status FROM event WHERE date(SUBSTR(event_date, 1, 10)) BETWEEN '2019-11-01' AND '2020-03-31'",
        "difficulty": "simple"
    },
    {
        "question_id": 119,
        "db_id": "debit_card_specializing",
        "question": "Please list the product description of the products consumed in September, 2013.",
        "evidence": "September 2013 refers to 201309; First 4 strings represent the year",
        "SQL": "SELECT T3.Description FROM transactions_1k AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN products AS T3 ON T1.ProductID = T3.ProductID WHERE T2.Date = '201309'",
        "difficulty": "simple"
    },
    {
        "question_id": 120,
        "db_id": "thrombosis_prediction",
        "question": "Please list the ID of the patient whose RF is normal and who is older than 60.",
        "evidence": "RF is normal refers to RF < 20; older than 60 = SUBTRACT((YEAR(CURDATE()), YEAR(Birthday))) > 60;",
        "SQL": "SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RF < 20 AND STRFTIME('%Y', DATE('now')) - STRFTIME('%Y', T1.Birthday) > 60",
        "difficulty": "simple"
    },
    {
        "question_id": 121,
        "db_id": "toxicology",
        "question": "In the molecule TR008, how many carbons are present?",
        "evidence": "carbon refers to element = 'c'",
        "SQL": "SELECT COUNT(T.atom_id) FROM atom AS T WHERE T.molecule_id = 'TR008' AND T.element = 'c'",
        "difficulty": "simple"
    },
    {
        "question_id": 122,
        "db_id": "thrombosis_prediction",
        "question": "What is the anti-nucleus antibody concentration of the patient whose total bilirubin is the highest in the normal range?",
        "evidence": "anti-nucleus antibody concentration refers to ANA; total bilirubin is the highest in the normal range refers to MAX(`T-BIL` < 2.0);",
        "SQL": "SELECT T3.ANA FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.`T-BIL` < 2.0 ORDER BY T2.`T-BIL` DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 123,
        "db_id": "card_games",
        "question": "Please list the name of the cards in the set Coldsnap with the highest converted mana cost.",
        "evidence": "card set Coldsnap refers to name = 'Coldsnap'",
        "SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap' ORDER BY T1.convertedManaCost DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 124,
        "db_id": "student_club",
        "question": "Provide the number of events attended by Luisa Guidi. What is her major?",
        "evidence": "major refers to major_name;",
        "SQL": "SELECT COUNT(T3.link_to_event), T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member WHERE T2.first_name = 'Luisa' AND T2.last_name = 'Guidi'",
        "difficulty": "simple"
    },
    {
        "question_id": 125,
        "db_id": "codebase_community",
        "question": "What is the display name of the user who last edited the post \"Examples for teaching: Correlation does not mean causation\"?",
        "evidence": "\"Examples for teaching: Correlation does not mean causation\" is the Title of post; user who last edited refers to LastEditorUserId",
        "SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Title = 'Examples for teaching: Correlation does not mean causation'",
        "difficulty": "moderate"
    },
    {
        "question_id": 126,
        "db_id": "superhero",
        "question": "Who is the tallest superhero?",
        "evidence": "who refers to superhero_name; tallest superhero refers to MAX(height_cm);",
        "SQL": "SELECT superhero_name FROM superhero ORDER BY height_cm DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 127,
        "db_id": "codebase_community",
        "question": "Which users have posted the most comments. List out the user's badge?",
        "evidence": "user with the most comments refers to UserId where Max(Count(Id)",
        "SQL": "SELECT Name FROM badges AS T1 INNER JOIN comments AS T2 ON T1.UserId = t2.UserId GROUP BY T2.UserId ORDER BY COUNT(T2.UserId) DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 128,
        "db_id": "card_games",
        "question": "Please provide top three sets that don't appear in Magic: The Gathering Online, along with their names in in alphabetical order.",
        "evidence": "don't appear in Magic: The Gathering Online refers to mtgoCode is NULL or mtgoCode = ''",
        "SQL": "SELECT name FROM sets WHERE mtgoCode IS NULL ORDER BY name LIMIT 3",
        "difficulty": "simple"
    },
    {
        "question_id": 129,
        "db_id": "superhero",
        "question": "Give the race of the blue-haired male superhero.",
        "evidence": "blue-haired refers to colour.colour = 'blue' WHERE hair_colour_id = colour.id; male refers to gender = 'male';",
        "SQL": "SELECT T3.race FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.hair_colour_id = T2.id INNER JOIN race AS T3 ON T1.race_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T2.colour = 'Blue' AND T4.gender = 'Male'",
        "difficulty": "moderate"
    },
    {
        "question_id": 130,
        "db_id": "codebase_community",
        "question": "State all the tags used by Mark Meckes in his posts that doesn't have comments.",
        "evidence": "DisplayName = 'Mark Meckes';",
        "SQL": "SELECT T3.Tags FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T3.Id = T2.PostId WHERE T1.DisplayName = 'Mark Meckes' AND T3.CommentCount = 0",
        "difficulty": "moderate"
    },
    {
        "question_id": 131,
        "db_id": "codebase_community",
        "question": "In posts with 1 comment, how many of the comments have 0 score?",
        "evidence": "in posts with 1 comment refers to CommentCount = 1;",
        "SQL": "SELECT COUNT(T1.id) FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.CommentCount = 1 AND T2.Score = 0",
        "difficulty": "simple"
    },
    {
        "question_id": 132,
        "db_id": "thrombosis_prediction",
        "question": "List all patients with their sex and date of birthday, whose AST glutamic oxaloacetic transaminase (GOT) index is within normal range for loboratory examination in 1994.",
        "evidence": "AST glutamic oxaloacetic transaminase (GOT) index is within normal range refers to GOT < 60; examination in 1994 refers to year(Date) = 1994",
        "SQL": "SELECT DISTINCT T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GOT < 60 AND STRFTIME('%Y', T2.Date) = '1994'",
        "difficulty": "moderate"
    },
    {
        "question_id": 133,
        "db_id": "student_club",
        "question": "Identify the type of expenses and their total value approved for 'October Meeting' event.",
        "evidence": "total value refers to SUM(cost); 'October Meeting' is an event name;",
        "SQL": "SELECT T1.type, SUM(T3.cost) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'October Meeting'",
        "difficulty": "moderate"
    },
    {
        "question_id": 134,
        "db_id": "superhero",
        "question": "List down at least five superpowers of male superheroes.",
        "evidence": "male refers to gender = 'Male'; superpowers refers to power_name;",
        "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id INNER JOIN gender AS T4 ON T4.id = T1.gender_id WHERE T4.gender = 'Male' LIMIT 5",
        "difficulty": "moderate"
    },
    {
        "question_id": 135,
        "db_id": "european_football_2",
        "question": "In Scotland Premier League, which away team won the most during the 2010 season?",
        "evidence": "Scotland Premier League refers to League.name = 'Scotland Premier League'; away team refers to away_team_api_id; away team that won the most refers to MAX(SUBTRACT(away_team_goal, home_team_goal) > 0); 2010 season refers to season = '2009/2010';",
        "SQL": "SELECT teamInfo.team_long_name FROM League AS leagueData INNER JOIN Match AS matchData ON leagueData.id = matchData.league_id INNER JOIN Team AS teamInfo ON matchData.away_team_api_id = teamInfo.team_api_id WHERE leagueData.name = 'Scotland Premier League' AND matchData.season = '2009/2010' AND matchData.away_team_goal - matchData.home_team_goal > 0 GROUP BY matchData.away_team_api_id ORDER BY COUNT(*) DESC LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question_id": 136,
        "db_id": "european_football_2",
        "question": "Locate players with vision scores of 90 and above, state the country of these players.",
        "evidence": "vision scores of 90 and above refers to vision > 89",
        "SQL": "SELECT DISTINCT t4.name FROM Player_Attributes AS t1 INNER JOIN Player AS t2 ON t1.player_api_id = t2.player_api_id INNER JOIN Match AS t3 ON t2.player_api_id = t3.home_player_8 INNER JOIN Country AS t4 ON t3.country_id = t4.id WHERE t1.vision > 89",
        "difficulty": "moderate"
    },
    {
        "question_id": 137,
        "db_id": "toxicology",
        "question": "How many elements are there for single bond molecules?",
        "evidence": "single bond refers to bond_type = '-';",
        "SQL": "SELECT COUNT(DISTINCT T.element) FROM ( SELECT DISTINCT T2.molecule_id, T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '-' ) AS T",
        "difficulty": "simple"
    },
    {
        "question_id": 138,
        "db_id": "european_football_2",
        "question": "Which league had the most goals in the 2016 season?",
        "evidence": "league that had the most goals refers to MAX(SUM(home_team_goal, away_team_goal)); 2016 season refers to season = '2015/2016';",
        "SQL": "SELECT t2.name FROM Match AS t1 INNER JOIN League AS t2 ON t1.league_id = t2.id WHERE t1.season = '2015/2016' GROUP BY t2.name ORDER BY SUM(t1.home_team_goal + t1.away_team_goal) DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 139,
        "db_id": "formula_1",
        "question": "On what year did the youngest driver had his first qualifying race? State the name, date and time of the race.",
        "evidence": "youngest driver refers to Max (year(dob));",
        "SQL": "SELECT T3.year, T3.name, T3.date, T3.time FROM qualifying AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T1.raceId = T3.raceId WHERE T1.driverId = ( SELECT driverId FROM drivers ORDER BY dob DESC LIMIT 1 ) ORDER BY T3.date ASC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 140,
        "db_id": "formula_1",
        "question": "For the driver who had the Q2 time as 0:01:40 in the qualifying race No. 355, what is his nationality?",
        "evidence": "race number refers to raceId;",
        "SQL": "SELECT DISTINCT T2.nationality FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 355 AND T1.q2 LIKE '1:40%'",
        "difficulty": "simple"
    },
    {
        "question_id": 141,
        "db_id": "thrombosis_prediction",
        "question": "Among the patients who were diagnosed with SLE, who is the oldest with normal hemoglobin level. Provide the ID and sex.",
        "evidence": "diagnosed with SLE refers to Diagnosis = 'SLE'; oldest refers to MIN(Birthday); normal hemoglobin level refers to 10 < HGB < 17;",
        "SQL": "SELECT T1.ID, T1.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SLE' AND T2.HGB > 10 AND T2.HGB < 17 ORDER BY T1.Birthday ASC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 142,
        "db_id": "debit_card_specializing",
        "question": "What's the nationality of the customer who spent 548.4 in 2012/8/24?",
        "evidence": "'2012/8/24' can be represented by '2012-08-24'",
        "SQL": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-24' AND T1.Price = 548.4",
        "difficulty": "simple"
    },
    {
        "question_id": 143,
        "db_id": "financial",
        "question": "How many accounts who have region in Prague are eligible for loans?",
        "evidence": "A3 contains the data of region",
        "SQL": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T1.district_id = T3.district_id WHERE T3.A3 = 'Prague'",
        "difficulty": "simple"
    },
    {
        "question_id": 144,
        "db_id": "codebase_community",
        "question": "How many elders obtained the \"Supporter\" badge?",
        "evidence": "\"Supporter\" is the Name of badge;  elders refers to Age > 65",
        "SQL": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Age > 65 AND T2.Name = 'Supporter'",
        "difficulty": "simple"
    },
    {
        "question_id": 145,
        "db_id": "codebase_community",
        "question": "How many users obtained the \"Announcer\" badge?",
        "evidence": "\"Announcer\" is the Name of badge; user refers to UserId",
        "SQL": "SELECT COUNT(id) FROM badges WHERE Name = 'Announcer'",
        "difficulty": "simple"
    },
    {
        "question_id": 146,
        "db_id": "card_games",
        "question": "Describe the information about rulings for card named 'Sublime Epiphany' with number 74s.",
        "evidence": "Sublime Epiphany' is name of cards; number 74s refers to number = '74s'; information refers to text;",
        "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Sublime Epiphany' AND T1.number = '74s'",
        "difficulty": "simple"
    },
    {
        "question_id": 147,
        "db_id": "thrombosis_prediction",
        "question": "How many patients who were female got white blood cells that were below 3.5?",
        "evidence": "female refers to SEX = 'F'; white blood cells that were below 3.5 refers to WBC < 3.5",
        "SQL": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.WBC < 3.5 AND T1.SEX = 'F'",
        "difficulty": "simple"
    },
    {
        "question_id": 148,
        "db_id": "european_football_2",
        "question": "List the players' api id who had the highest above average overall ratings in 2010.",
        "evidence": "highest above average overall ratings refers to MAX(overall_rating); in 2010 refers to substr(date,1,4) = '2010';",
        "SQL": "SELECT player_api_id FROM Player_Attributes WHERE SUBSTR(`date`, 1, 4) = '2010' ORDER BY overall_rating DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 149,
        "db_id": "financial",
        "question": "How many male customers who were born between 1974 and 1976 have made a payment on their home in excess of $4000?",
        "evidence": "Man and male refers to gender = 'M'; 'SIPO' stands for household payment",
        "SQL": "SELECT COUNT(T1.account_id) FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.district_id = T3.district_id WHERE STRFTIME('%Y', T3.birth_date) BETWEEN '1974' AND '1976' AND T3.gender = 'M' AND T1.amount > 4000 AND T1.k_symbol = 'SIPO'",
        "difficulty": "moderate"
    },
    {
        "question_id": 150,
        "db_id": "debit_card_specializing",
        "question": "What is the ratio of costumers who pay in EUR against customers who pay in CZK?",
        "evidence": "ratio of costumers who pay in EUR against customers who pay in CZK = count(Currency = 'EUR') / count(Currency = 'CZK').",
        "SQL": "SELECT CAST(SUM(IIF(Currency = 'EUR', 1, 0)) AS FLOAT) / SUM(IIF(Currency = 'CZK', 1, 0)) FROM customers",
        "difficulty": "simple"
    },
    {
        "question_id": 151,
        "db_id": "debit_card_specializing",
        "question": "What percentage of KAM customers pay in euros?",
        "evidence": "Percentage of KAM uses Euro = (Total of KAM uses Euro / Total of KAM) * 100%.",
        "SQL": "SELECT CAST(SUM(Currency = 'EUR') AS FLOAT) * 100 / COUNT(CustomerID) FROM customers WHERE Segment = 'KAM'",
        "difficulty": "simple"
    },
    {
        "question_id": 152,
        "db_id": "toxicology",
        "question": "How many atoms with iodine and sulfur type elements are there in single bond molecules?",
        "evidence": "with iodine element refer to element = 'i'; with sulfur element refers to element = 's'; single type bond refers to bond_type = '-';",
        "SQL": "SELECT COUNT(DISTINCT CASE WHEN T1.element = 'i' THEN T1.atom_id ELSE NULL END) AS iodine_nums , COUNT(DISTINCT CASE WHEN T1.element = 's' THEN T1.atom_id ELSE NULL END) AS sulfur_nums FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '-'",
        "difficulty": "challenging"
    },
    {
        "question_id": 153,
        "db_id": "debit_card_specializing",
        "question": "How many percent of LAM customer consumed more than 46.73?",
        "evidence": "Percentage of LAM customer consumed more than 46.73 = (Total no. of LAM customers who consumed more than 46.73 / Total no. of LAM customers) * 100%.",
        "SQL": "SELECT CAST(SUM(IIF(T2.Consumption > 46.73, 1, 0)) AS FLOAT) * 100 / COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM'",
        "difficulty": "moderate"
    },
    {
        "question_id": 154,
        "db_id": "codebase_community",
        "question": "How many users are awarded with more than 5 badges?",
        "evidence": "more than 5 badges refers to Count (Name) > 5; user refers to UserId",
        "SQL": "SELECT UserId FROM ( SELECT UserId, COUNT(Name) AS num FROM badges GROUP BY UserId ) T WHERE T.num > 5",
        "difficulty": "simple"
    },
    {
        "question_id": 155,
        "db_id": "california_schools",
        "question": "What is the total amount of Community College District closure in 1989 in the city of San Francisco?",
        "evidence": "",
        "SQL": "SELECT COUNT(School) FROM schools WHERE strftime('%Y', ClosedDate) = '1989' AND City = 'San Francisco' AND DOCType = 'Community College District'",
        "difficulty": "simple"
    },
    {
        "question_id": 156,
        "db_id": "toxicology",
        "question": "List all the elements with double bond, consisted in molecule TR024.",
        "evidence": "double bond refers to bond_type = '='; element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium",
        "SQL": "SELECT T1.element FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR024' AND T2.bond_type = '='",
        "difficulty": "challenging"
    },
    {
        "question_id": 157,
        "db_id": "formula_1",
        "question": "Please give the link of the website that shows more information about the circuits the Spanish Grand Prix used in 2009.",
        "evidence": "link of the website refers to url",
        "SQL": "SELECT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.year = 2009 AND T2.name = 'Spanish Grand Prix'",
        "difficulty": "simple"
    },
    {
        "question_id": 158,
        "db_id": "formula_1",
        "question": "Which drivers born after 1975 have been ranked 2? Please give their forenames and surnames.",
        "evidence": "born after 1975 refers to year(dob) >1975;",
        "SQL": "SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE STRFTIME('%Y', T2.dob) > '1975' AND T1.rank = 2",
        "difficulty": "simple"
    },
    {
        "question_id": 159,
        "db_id": "superhero",
        "question": "Provide the heights of the heroes whose eye colours are amber.",
        "evidence": "heights of the heroes refers to height_cm; eye colours are amber refers to colour.colour = 'Amber' WHERE eye_colour_id = colour.id;",
        "SQL": "SELECT T1.height_cm FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Amber'",
        "difficulty": "simple"
    },
    {
        "question_id": 160,
        "db_id": "student_club",
        "question": "List the full name of the top five members who spend the most money in the descending order of spending.",
        "evidence": "full name refers to first_name, last_name; spend the most money refers to MAX(expense.cost)",
        "SQL": "SELECT T3.first_name, T3.last_name FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id ORDER BY T2.spent DESC LIMIT 5",
        "difficulty": "moderate"
    },
    {
        "question_id": 161,
        "db_id": "superhero",
        "question": "How many female superheroes are in Marvel Comics?",
        "evidence": "female refers to gender = 'Female'; Marvel Comics refers to publisher_name = 'Marvel Comics';",
        "SQL": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.publisher_name = 'Marvel Comics' AND T3.gender = 'Female'",
        "difficulty": "moderate"
    },
    {
        "question_id": 162,
        "db_id": "student_club",
        "question": "List emails of people who paid more than 20 dollars from 9/10/2019 to 11/19/2019.",
        "evidence": "expense_date BETWEEN '2019-09-10' and '2019-11-19'; cost > 20",
        "SQL": "SELECT DISTINCT T1.email FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE date(SUBSTR(T2.expense_date, 1, 10)) BETWEEN '2019-09-10' AND '2019-11-19' AND T2.cost > 20",
        "difficulty": "moderate"
    },
    {
        "question_id": 163,
        "db_id": "student_club",
        "question": "List the expenses that spend more than fifty dollars on average.",
        "evidence": "expense refers to expense_description; spend more than fifty dollars on average refers to DIVIDE( SUM(cost), COUNT(expense_id) ) > 50",
        "SQL": "SELECT expense_description FROM expense GROUP BY expense_description HAVING AVG(cost) > 50",
        "difficulty": "simple"
    },
    {
        "question_id": 164,
        "db_id": "debit_card_specializing",
        "question": "Which LAM customer used the Euro as their currency and had the highest consumption in October 2013?",
        "evidence": "October 2013 refers to 201310 in the yearmonth.date",
        "SQL": "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM' AND T2.Date = '201310' AND T1.Currency = 'EUR' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 165,
        "db_id": "toxicology",
        "question": "Please list top five molecules that have double bonds in alphabetical order.",
        "evidence": "double bond refers to bond_type = ' = ';",
        "SQL": "SELECT DISTINCT T.molecule_id FROM bond AS T WHERE T.bond_type = '=' ORDER BY T.molecule_id LIMIT 5",
        "difficulty": "simple"
    },
    {
        "question_id": 166,
        "db_id": "california_schools",
        "question": "Among the schools with an SAT excellence rate of over 0.3, what is the highest eligible free rate for students aged 5-17?",
        "evidence": "Excellence rate = NumGE1500 / NumTstTakr; Eligible free rates for students aged 5-17 = `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)`",
        "SQL": "SELECT MAX(CAST(T1.`Free Meal Count (Ages 5-17)` AS REAL) / T1.`Enrollment (Ages 5-17)`) FROM frpm AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE CAST(T2.NumGE1500 AS REAL) / T2.NumTstTakr > 0.3",
        "difficulty": "moderate"
    },
    {
        "question_id": 167,
        "db_id": "card_games",
        "question": "List all the sets available in Italian translation. State the total number of cards per set.",
        "evidence": "Italian translation refers to language = 'Italian'; total number of card per set refers to totalSetSize;",
        "SQL": "SELECT T1.name, T1.totalSetSize FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Italian'",
        "difficulty": "simple"
    },
    {
        "question_id": 168,
        "db_id": "formula_1",
        "question": "For the race happened on 2015/11/29, how many drivers finished the game?",
        "evidence": "game and race are synonyms; drivers who finished the race should have record in time;",
        "SQL": "SELECT COUNT(T2.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.date = '2015-11-29' AND T2.time IS NOT NULL",
        "difficulty": "simple"
    },
    {
        "question_id": 169,
        "db_id": "debit_card_specializing",
        "question": "Which segment had the least consumption?",
        "evidence": "",
        "SQL": "SELECT T1.Segment FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID GROUP BY T1.Segment ORDER BY SUM(T2.Consumption) ASC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 170,
        "db_id": "debit_card_specializing",
        "question": "How much did customer 6 consume in total between August and November 2013?",
        "evidence": "Between August And November 2013 refers to Between 201308 And 201311; First 4 strings of Date represents the year.",
        "SQL": "SELECT SUM(Consumption) FROM yearmonth WHERE CustomerID = 6 AND Date BETWEEN '201308' AND '201311'",
        "difficulty": "simple"
    },
    {
        "question_id": 171,
        "db_id": "formula_1",
        "question": "Who finished second in the San Marino Grand Prix in 2006?",
        "evidence": "finished second refers to position = 2;",
        "SQL": "SELECT T3.forename, T3.surname FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.year = 2006 AND T1.name = 'San Marino Grand Prix' AND T2.position = 2",
        "difficulty": "simple"
    },
    {
        "question_id": 172,
        "db_id": "european_football_2",
        "question": "What was the build up play speed class for \"Willem II\" on 2011/2/22?",
        "evidence": "\"Willem II\" refers to team_long_name = 'Willem II'; on 2011/2/22 refers to date = '2012-02-22 00:00:00'",
        "SQL": "SELECT t2.buildUpPlaySpeedClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Willem II' AND SUBSTR(t2.`date`, 1, 10) = '2011-02-22'",
        "difficulty": "moderate"
    },
    {
        "question_id": 173,
        "db_id": "european_football_2",
        "question": "How much higher in percentage is Ariel Borysiuk's overall rating than that of Paulin Puel?",
        "evidence": "how much higher in percentage = MULTIPLY(DIVIDE(SUBTRACT(overall_rating WHERE player_name = 'Ariel Borysiuk', overall_rating WHERE player_name = 'Paulin Puel'), overall_rating WHERE player_name = 'Paulin Puel'), 100);",
        "SQL": "SELECT (SUM(CASE WHEN t1.player_name = 'Ariel Borysiuk' THEN t2.overall_rating ELSE 0 END) * 1.0 - SUM(CASE WHEN t1.player_name = 'Paulin Puel' THEN t2.overall_rating ELSE 0 END)) * 100 / SUM(CASE WHEN t1.player_name = 'Paulin Puel' THEN t2.overall_rating ELSE 0 END) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id",
        "difficulty": "challenging"
    },
    {
        "question_id": 174,
        "db_id": "financial",
        "question": "How many female clients' accounts are in the region of South Bohemia?",
        "evidence": "Female refers to gender = 'F'; A3 contains the region 'south Bohemia'",
        "SQL": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T2.A3 = 'south Bohemia'",
        "difficulty": "simple"
    },
    {
        "question_id": 175,
        "db_id": "student_club",
        "question": "Find the name and date of events with expenses for pizza that were more than fifty dollars but less than a hundred dollars.",
        "evidence": "name of event refers to event_name; date of event refers to event_date; expenses for pizza refers to expense_description = 'Pizza' where cost > 50 and cost < 100",
        "SQL": "SELECT T1.event_name, T1.event_date FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T3.expense_description = 'Pizza' AND T3.cost > 50 AND T3.cost < 100",
        "difficulty": "challenging"
    },
    {
        "question_id": 176,
        "db_id": "card_games",
        "question": "How many cards have infinite power?",
        "evidence": "infinite power refers to power = '*';",
        "SQL": "SELECT COUNT(*) FROM cards WHERE power = '*'",
        "difficulty": "simple"
    },
    {
        "question_id": 177,
        "db_id": "thrombosis_prediction",
        "question": "For all the female patient age 50 and above, who has abnormal red blood cell count. State if they were admitted to hospital.",
        "evidence": "female patient refers to Sex = 'F'; age 50 and above = SUBTRACT(year(current_timestamp), year(Birthday)) > = 50; abnormal red blood cell count refers to RBC < = 3.5 or RBC > = 6.0; Admission = '+' means the patient was admitted to the hospital; Admission = '-' means the patient was not admitted to the hospital;",
        "SQL": "SELECT DISTINCT T1.ID, T1.Admission FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND (T2.RBC <= 3.5 OR T2.RBC >= 6.0) AND STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) >= 50",
        "difficulty": "challenging"
    },
    {
        "question_id": 178,
        "db_id": "superhero",
        "question": "What is the average of superheroes with no skin colour?",
        "evidence": "average = DIVIDE(COUNT(superhero.id), SUM(skin_colour_id = 1)); no skin colour refers to skin_colour_id WHERE colour.id = 1;",
        "SQL": "SELECT CAST(COUNT(*) AS REAL) / SUM(CASE WHEN T2.id = 1 THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id",
        "difficulty": "simple"
    },
    {
        "question_id": 179,
        "db_id": "european_football_2",
        "question": "What is the short name of the football team Queens Park Rangers?",
        "evidence": "short name of the football team refers to team_short_name; Queens Park Rangers refers to team_long_name = 'Queens Park Rangers';",
        "SQL": "SELECT team_short_name FROM Team WHERE team_long_name = 'Queens Park Rangers'",
        "difficulty": "simple"
    },
    {
        "question_id": 180,
        "db_id": "formula_1",
        "question": "What is the full name and date of birth of Austrian drivers born between 1981 and 1991?",
        "evidence": "Full name refers to forname, surname; Date of birth refers to dob; year(dob) BETWEEN '1981' AND '1991'; Austrian is a nationality",
        "SQL": "SELECT forename, surname, dob FROM drivers WHERE nationality = 'Austrian' AND STRFTIME('%Y', dob) BETWEEN '1981' AND '1991'",
        "difficulty": "simple"
    },
    {
        "question_id": 181,
        "db_id": "toxicology",
        "question": "Calculate the percentage of carcinogenic molecules with triple bonded Hidrogen atoms.",
        "evidence": "hydrogen refers to element = 'h'; label = '+' mean molecules are carcinogenic; triple bond refers to bond_type = '#'; percentage = DIVIDE(SUM(label = '+'), COUNT(molecule_id)) * 100.0 where element = 'h' AND bond_type = '#';",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.label = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T1.molecule_id = T3.molecule_id WHERE T3.bond_type = '#' AND T2.element = 'h'",
        "difficulty": "challenging"
    },
    {
        "question_id": 182,
        "db_id": "toxicology",
        "question": "How many bond id have element iodine?",
        "evidence": "iodine refers to element = 'i'",
        "SQL": "SELECT COUNT(T3.bond_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T1.element = 'i'",
        "difficulty": "simple"
    },
    {
        "question_id": 183,
        "db_id": "codebase_community",
        "question": "Provide the users' display names and available website URLs of the post with favorite count of more than 150.",
        "evidence": "favorite count of more than 150 refers to FavoriteCount > 150;",
        "SQL": "SELECT T1.DisplayName, T1.WebsiteUrl FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.FavoriteCount > 150",
        "difficulty": "simple"
    },
    {
        "question_id": 184,
        "db_id": "formula_1",
        "question": "How many Japanese constructors have 0 points in 2 races?",
        "evidence": "2 races refers to COUNT(raceID) = 2;",
        "SQL": "SELECT COUNT(T1.raceId) FROM constructorStandings AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T1.points = 0 AND T2.nationality = 'Japanese' GROUP BY T1.constructorId HAVING COUNT(raceId) = 2",
        "difficulty": "simple"
    },
    {
        "question_id": 185,
        "db_id": "financial",
        "question": "What is the average amount of loan which are still on running contract with statement issuance after each transaction?",
        "evidence": "status = 'C' stands for running contract, OK so far; status = 'D' stands for running contract, client in debt. 'POPLATEK PO OBRATU' stands for issuance after transaction",
        "SQL": "SELECT AVG(T2.payments) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.status IN ('C', 'D') AND T1.frequency = 'POPLATEK PO OBRATU'",
        "difficulty": "moderate"
    },
    {
        "question_id": 186,
        "db_id": "california_schools",
        "question": "List the top five schools, by descending order, from the highest to the lowest, the most number of Enrollment (Ages 5-17). Please give their NCES school identification number.",
        "evidence": "",
        "SQL": "SELECT T1.NCESSchool FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY T2.`Enrollment (Ages 5-17)` DESC LIMIT 5",
        "difficulty": "simple"
    },
    {
        "question_id": 187,
        "db_id": "card_games",
        "question": "What percentage of cards without power are in French?",
        "evidence": "in French refers to language = 'French'; cards without power refers to power IS NULL OR power = '*'; \npercentage = DIVIDE(COUNT(language = 'French' and power is NULL or power = '*'), COUNT( power is NULL or power = '*'))*100\n",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.language = 'French' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.power IS NULL OR T1.power LIKE '%*%'",
        "difficulty": "challenging"
    },
    {
        "question_id": 188,
        "db_id": "thrombosis_prediction",
        "question": "For the male patients that have a normal prothrombin time, what is their average prothrombin time?",
        "evidence": "male refers to Sex = 'M'; normal prothrombin time refer to PT < 14; average prothrombin time = AVG(PT);",
        "SQL": "SELECT AVG(T2.PT) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PT < 14 AND T1.SEX = 'M'",
        "difficulty": "simple"
    },
    {
        "question_id": 189,
        "db_id": "formula_1",
        "question": "List down top 5 German drivers who has the shortest average pit stop duration and were born between 1980-1985.",
        "evidence": "born between 1980-1985 refers to 1980< year(dob)>1985; Average pitstop duration refers to Divide(SUM(duration),COUNT(duration)); shortest average refers to Min(avg(duration));",
        "SQL": "SELECT T2.forename, T2.surname FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'German' AND STRFTIME('%Y', T2.dob) BETWEEN '1980' AND '1985' GROUP BY T2.forename, T2.surname ORDER BY AVG(T1.duration) LIMIT 5",
        "difficulty": "challenging"
    },
    {
        "question_id": 190,
        "db_id": "california_schools",
        "question": "What are the two most common first names among the school administrators? Indicate the district to which they administer.",
        "evidence": "",
        "SQL": "SELECT DISTINCT T1.AdmFName1, T1.District FROM schools AS T1 INNER JOIN ( SELECT admfname1 FROM schools GROUP BY admfname1 ORDER BY COUNT(admfname1) DESC LIMIT 2 ) AS T2 ON T1.AdmFName1 = T2.admfname1",
        "difficulty": "simple"
    },
    {
        "question_id": 191,
        "db_id": "european_football_2",
        "question": "What was the final score for the match on September 24, 2008, in the Belgian Jupiler League between the home team and the away team?",
        "evidence": "September 24, 2008 refers to date like '2008-09-24%'; final score for home team refers to home_team_goal; final score for away team refers to away_team_goal",
        "SQL": "SELECT t2.home_team_goal, t2.away_team_goal FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t1.name = 'Belgium Jupiler League' AND SUBSTR(t2.`date`, 1, 10) = '2008-09-24'",
        "difficulty": "challenging"
    },
    {
        "question_id": 192,
        "db_id": "card_games",
        "question": "Please list the Italian text ruling of all the cards in the set Coldsnap.",
        "evidence": "card set Coldsnap refers to name = 'Coldsnap'; Italian refers to language = 'Italian'",
        "SQL": "SELECT DISTINCT T1.text FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Italian'",
        "difficulty": "moderate"
    },
    {
        "question_id": 193,
        "db_id": "financial",
        "question": "How many clients who were born in 1920 stay in east Bohemia?",
        "evidence": "East Bohemia appears in the column A3, which refers to the region.",
        "SQL": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T1.birth_date) = '1920' AND T2.A3 = 'east Bohemia'",
        "difficulty": "simple"
    },
    {
        "question_id": 194,
        "db_id": "card_games",
        "question": "For the set \"Commander 2014 Oversized\" , give its parent code.",
        "evidence": "the set \"Commander 2014 Oversized\" refers to name = 'Commander 2014 Oversized';",
        "SQL": "SELECT parentCode FROM sets WHERE name = 'Commander 2014 Oversized'",
        "difficulty": "simple"
    },
    {
        "question_id": 195,
        "db_id": "toxicology",
        "question": "What type of label is not on molecules with atoms with tin?",
        "evidence": "tin refers to element ! = 'sn'; label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic",
        "SQL": "SELECT DISTINCT T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element != 'sn'",
        "difficulty": "simple"
    },
    {
        "question_id": 196,
        "db_id": "formula_1",
        "question": "How many French drivers who obtain the laptime less than 02:00.00?",
        "evidence": "lap time less than 01:00.00 refers to seconds < 120;",
        "SQL": "SELECT COUNT(T1.driverId) FROM drivers AS T1 INNER JOIN lapTimes AS T2 on T1.driverId = T2.driverId WHERE T1.nationality = 'French' AND (CAST(SUBSTR(T2.time, 1, 2) AS INTEGER) * 60 + CAST(SUBSTR(T2.time, 4, 2) AS INTEGER) + CAST(SUBSTR(T2.time, 7, 2) AS REAL) / 1000) < 120",
        "difficulty": "moderate"
    },
    {
        "question_id": 197,
        "db_id": "codebase_community",
        "question": "Provide the badge names received in 2011 for the user whose location is in the North Pole.",
        "evidence": "received in 2011 refers to year(Date) = 2011;",
        "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE STRFTIME('%Y', T2.Date) = '2011' AND T1.Location = 'North Pole'",
        "difficulty": "simple"
    },
    {
        "question_id": 198,
        "db_id": "card_games",
        "question": "How many cards that illusrtated in German have been reprinted?",
        "evidence": "German' is the language; reprinted refers to isReprint = 1;",
        "SQL": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'German' AND T1.isReprint = 1",
        "difficulty": "simple"
    },
    {
        "question_id": 199,
        "db_id": "financial",
        "question": "Who are the account holder identification numbers whose spent per month on the credit card is less than the average, in 1998?",
        "evidence": "Operation = 'VYBER KARTOU' refers to credit card withdrawal",
        "SQL": "SELECT T1.account_id FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T1.date) = '1998' AND T1.operation = 'VYBER KARTOU' AND T1.amount < (SELECT AVG(amount) FROM trans WHERE STRFTIME('%Y', date) = '1998')",
        "difficulty": "moderate"
    },
    {
        "question_id": 200,
        "db_id": "toxicology",
        "question": "Which non-carcinogenic molecules consisted more than 5 atoms?",
        "evidence": "label = '-' means molecules are non-carcinogenic; molecules consisted more than 5 atoms refers to COUNT(molecule_id) > 5",
        "SQL": "SELECT T.molecule_id FROM ( SELECT T1.molecule_id, COUNT(T2.atom_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '-' GROUP BY T1.molecule_id HAVING COUNT(T2.atom_id) > 5 ) t",
        "difficulty": "moderate"
    },
    {
        "question_id": 201,
        "db_id": "superhero",
        "question": "What is the eye colour of superhero with superhero ID 75?",
        "evidence": "eye colour refers to colour where eye_colour_id = colour.id;",
        "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.id = 75",
        "difficulty": "simple"
    },
    {
        "question_id": 202,
        "db_id": "card_games",
        "question": "What are the cards belong to duel deck a? List the ID.",
        "evidence": "duel deck a refers to duelDeck = a;",
        "SQL": "SELECT id FROM cards WHERE duelDeck = 'a'",
        "difficulty": "simple"
    },
    {
        "question_id": 203,
        "db_id": "european_football_2",
        "question": "What was the overall rating for Aaron Mooy on 2016/2/4?",
        "evidence": "Aaron Mooy refers to player_name = 'Aaron Mooy'; on 2016/2/4 refers to date = '2016-02-04 00:00:00'",
        "SQL": "SELECT t2.overall_rating FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2016-02-04' AND t1.player_name = 'Aaron Mooy'",
        "difficulty": "moderate"
    },
    {
        "question_id": 204,
        "db_id": "student_club",
        "question": "What college offers the major that Tyler Hewitt took?",
        "evidence": "",
        "SQL": "SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Tyler' AND T1.last_name = 'Hewitt'",
        "difficulty": "simple"
    },
    {
        "question_id": 205,
        "db_id": "financial",
        "question": "What percentage of male clients request for weekly statements to be issued?",
        "evidence": "Percentage of male clients = [count(male clients who requested weekly statements / count(clients who requested weekly statements)] * 100%; Male means gender = 'M'; 'POPLATEK TYDNE' stands for weekly issuance",
        "SQL": "SELECT CAST(SUM(T1.gender = 'M') AS REAL) * 100 / COUNT(T1.client_id) FROM client AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T2.frequency = 'POPLATEK TYDNE'",
        "difficulty": "moderate"
    },
    {
        "question_id": 206,
        "db_id": "formula_1",
        "question": "State the name and date of the last round of race in year 1999.",
        "evidence": "the last round refers to max(round);",
        "SQL": "SELECT name, date FROM races WHERE year = 1999 ORDER BY round DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 207,
        "db_id": "card_games",
        "question": "What is the language of the card that has azorius watermark? List out the type of this card.",
        "evidence": "",
        "SQL": "SELECT DISTINCT T2.language, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'azorius'",
        "difficulty": "simple"
    },
    {
        "question_id": 208,
        "db_id": "thrombosis_prediction",
        "question": "Name the ID of the patient who is born on the April 1st, 1982. Is his/her alkaliphophatase (ALP) within normal range?",
        "evidence": "alkaliphophatase (ALP) within normal range refers to ALP < 300",
        "SQL": "SELECT T1.ID , CASE WHEN T2.ALP < 300 THEN 'normal' ELSE 'abNormal' END FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Birthday = '1982-04-01'",
        "difficulty": "moderate"
    },
    {
        "question_id": 209,
        "db_id": "debit_card_specializing",
        "question": "Which country had the gas station that sold the most expensive product id No.2 for one unit?",
        "evidence": "",
        "SQL": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.ProductID = 2 ORDER BY T1.Price DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 210,
        "db_id": "debit_card_specializing",
        "question": "What was the gas consumption peak month for SME customers in 2013?",
        "evidence": "'in 2013' refers to the first 4 strings of yearmonth.date = '2013', The 5th and 6th string of the date can refer to month.",
        "SQL": "SELECT SUBSTRING(T2.Date, 5, 2) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE SUBSTRING(T2.Date, 1, 4) = '2013' AND T1.Segment = 'SME' GROUP BY SUBSTRING(T2.Date, 5, 2) ORDER BY SUM(T2.Consumption) DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 211,
        "db_id": "debit_card_specializing",
        "question": "What is the difference in the annual average consumption of the customers with the least amount of consumption paid in CZK for 2013 between SME and LAM, LAM and KAM, and KAM and SME?",
        "evidence": "annual average consumption of customer with the lowest consumption in each segment = total consumption per year / the number of customer with lowest consumption in each segment; Difference in annual average = SME's annual average - LAM's annual average; Difference in annual average = LAM's annual average - KAM's annual average; Year 2013 can be presented as Between 201301 And 201312; First 4 strings of Date represents the year.",
        "SQL": "SELECT CAST(SUM(IIF(T1.Segment = 'SME', T2.Consumption, 0)) AS FLOAT) / COUNT(T1.CustomerID) - CAST(SUM(IIF(T1.Segment = 'LAM', T2.Consumption, 0)) AS FLOAT) / COUNT(T1.CustomerID) , CAST(SUM(IIF(T1.Segment = 'LAM', T2.Consumption, 0)) AS FLOAT) / COUNT(T1.CustomerID) - CAST(SUM(IIF(T1.Segment = 'KAM', T2.Consumption, 0)) AS FLOAT) / COUNT(T1.CustomerID) , CAST(SUM(IIF(T1.Segment = 'KAM', T2.Consumption, 0)) AS FLOAT) / COUNT(T1.CustomerID) - CAST(SUM(IIF(T1.Segment = 'SME', T2.Consumption, 0)) AS FLOAT) / COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'CZK' AND T2.Consumption = ( SELECT MIN(Consumption) FROM yearmonth ) AND T2.Date BETWEEN 201301 AND 201312",
        "difficulty": "challenging"
    },
    {
        "question_id": 212,
        "db_id": "codebase_community",
        "question": "What are the names of badges that users who have the highest reputation obtained?",
        "evidence": "highest reputation refers to Max(Reputation); user refers to UserId",
        "SQL": "SELECT T2.name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId ORDER BY T1.Reputation DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 213,
        "db_id": "student_club",
        "question": "Please indicate the college of the person whose first name is Katy with the link to the major \"rec1N0upiVLy5esTO\".",
        "evidence": "",
        "SQL": "SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.link_to_major = 'rec1N0upiVLy5esTO' AND T1.first_name = 'Katy'",
        "difficulty": "simple"
    },
    {
        "question_id": 214,
        "db_id": "formula_1",
        "question": "Please list the reference names of the drivers who are eliminated in the first period in race number 18.",
        "evidence": "driver reference name refers to driverRef; first qualifying period refers to q1; drivers who are eliminated in the first qualifying period refers to 5 drivers with MAX(q1); race number refers to raceId;",
        "SQL": "SELECT T2.driverRef FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 18 ORDER BY T1.q1 DESC LIMIT 5",
        "difficulty": "moderate"
    },
    {
        "question_id": 215,
        "db_id": "card_games",
        "question": "What is the language of the card with the multiverse number 149934?",
        "evidence": "multiverse number 149934 refers to multiverseid = 149934;",
        "SQL": "SELECT language FROM foreign_data WHERE multiverseid = 149934",
        "difficulty": "simple"
    },
    {
        "question_id": 216,
        "db_id": "financial",
        "question": "How many owner and disponent dispositions are there from account number 1 to account number 10?",
        "evidence": "",
        "SQL": "SELECT SUM(type = 'Owner') , SUM(type = 'Disponent') FROM disp WHERE account_id BETWEEN 1 AND 10",
        "difficulty": "simple"
    },
    {
        "question_id": 217,
        "db_id": "student_club",
        "question": "Calculate the total average cost that Elijah Allen spent in the events on September and October.",
        "evidence": "events in September and October refers to month(expense_date) = 9 AND MONTH(expense_date) = 10",
        "SQL": "SELECT AVG(T2.cost) FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.last_name = 'Allen' AND T1.first_name = 'Elijah' AND (SUBSTR(T2.expense_date, 6, 2) = '09' OR SUBSTR(T2.expense_date, 6, 2) = '10')",
        "difficulty": "challenging"
    },
    {
        "question_id": 218,
        "db_id": "european_football_2",
        "question": "Does the KSV Cercle Brugge team have a slow, balanced or fast speed class?",
        "evidence": "KSV Cercle Brugge refers to team_long_name = 'KSV Cercle Brugge'; speed class refers to buildUpPlaySpeedClass",
        "SQL": "SELECT DISTINCT t1.buildUpPlaySpeedClass FROM Team_Attributes AS t1 INNER JOIN Team AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.team_long_name = 'KSV Cercle Brugge'",
        "difficulty": "moderate"
    },
    {
        "question_id": 219,
        "db_id": "card_games",
        "question": "What languages are available in the set known as Archenemy on the magic card market and having the code ARC?",
        "evidence": "known as Archenemy refers to mcmName = 'Archenemy'; having the code ARC refers to setCode = 'ARC'",
        "SQL": "SELECT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.mcmName = 'Archenemy' AND T2.setCode = 'ARC'",
        "difficulty": "moderate"
    },
    {
        "question_id": 220,
        "db_id": "thrombosis_prediction",
        "question": "What is the highest anti-nucleus antibody concentration level of a patient with a normal creatinine level?",
        "evidence": "highest anti-nucleus antibody concentration level refers to MAX(ANA); normal creatinine level refers to CRE < 1.5;",
        "SQL": "SELECT T2.ANA FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T3.CRE < 1.5 ORDER BY T2.ANA DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 221,
        "db_id": "codebase_community",
        "question": "List out the age of users who located in Vienna, Austria obtained the badge?",
        "evidence": "\"Vienna, Austria\" is the Location",
        "SQL": "SELECT T1.Age FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Vienna, Austria'",
        "difficulty": "simple"
    },
    {
        "question_id": 222,
        "db_id": "codebase_community",
        "question": "Describe the display name of the parent ID for child post with the highest score.",
        "evidence": "If the parent id is not null, the post is the child post; the highest score refers to MAX(Score);",
        "SQL": "SELECT DisplayName FROM users WHERE Id = ( SELECT OwnerUserId FROM posts WHERE ParentId IS NOT NULL ORDER BY Score DESC LIMIT 1 )",
        "difficulty": "simple"
    },
    {
        "question_id": 223,
        "db_id": "financial",
        "question": "Which district has the most accounts with loan contracts finished with no problems?",
        "evidence": "status = 'A' refers to loan contracts finished with no problems",
        "SQL": "SELECT T1.district_id FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id WHERE T3.status = 'A' GROUP BY T1.district_id ORDER BY COUNT(T2.account_id) DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 224,
        "db_id": "formula_1",
        "question": "For the Bahrain Grand Prix in 2007, how many drivers not finished the game?",
        "evidence": "drivers who finished the race refers to time has records;",
        "SQL": "SELECT COUNT(T3.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.year = 2007 AND T1.name = 'Bahrain Grand Prix' AND T2.time IS NULL",
        "difficulty": "simple"
    },
    {
        "question_id": 225,
        "db_id": "formula_1",
        "question": "State code numbers of top 3 yougest drivers. How many Netherlandic drivers among them?",
        "evidence": "youngest driver refers to Max (year(dob)); Netherlandic and Dutch refer to the same country",
        "SQL": "SELECT COUNT(*) FROM ( SELECT T1.nationality FROM drivers AS T1 ORDER BY JULIANDAY(T1.dob) DESC LIMIT 3) AS T3 WHERE T3.nationality = 'Dutch'",
        "difficulty": "simple"
    },
    {
        "question_id": 226,
        "db_id": "formula_1",
        "question": "From race no. 50 to 100, how many finishers have been disqualified?",
        "evidence": "disqualified refers to statusID = 2, finisher refers to time! = null; race no. refers to raceId; raceId > 50 and raceId < 100;",
        "SQL": "SELECT SUM(IIF(time IS NOT NULL, 1, 0)) FROM results WHERE statusId = 2 AND raceID < 100 AND raceId > 50",
        "difficulty": "simple"
    },
    {
        "question_id": 227,
        "db_id": "thrombosis_prediction",
        "question": "Provide ID, sex and age of patient who has blood glucose (GLU) not within normal range but with total cholesterol(T-CHO) within normal range.",
        "evidence": "age = SUBTRACT(year(current_timestamp), year(Birthday)); blood glucose (GLU) not within normal range refers to GLU > = 180; total cholesterol(T-CHO) within normal range refers to `T-CHO` < 250;",
        "SQL": "SELECT DISTINCT T1.ID, T1.SEX , STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GLU >= 180 AND T2.`T-CHO` < 250",
        "difficulty": "challenging"
    },
    {
        "question_id": 228,
        "db_id": "student_club",
        "question": "List the last names of students under the Elementary Education major and include their phone numbers.",
        "evidence": "'Elementary Education' is the major name; phone numbers refers to phone",
        "SQL": "SELECT T1.last_name, T1.phone FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T2.major_name = 'Elementary Education'",
        "difficulty": "simple"
    },
    {
        "question_id": 229,
        "db_id": "toxicology",
        "question": "Find the triple-bonded molecules which are carcinogenic.",
        "evidence": "triple-bonded molecules refers to bond_type = '#'; carcinogenic refers to label = '+'",
        "SQL": "SELECT DISTINCT T2.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#' AND T2.label = '+'",
        "difficulty": "simple"
    },
    {
        "question_id": 230,
        "db_id": "codebase_community",
        "question": "Provide the related post title of \"How to tell if something happened in a data set which monitors a value over time\".",
        "evidence": "",
        "SQL": "SELECT T3.Title FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id INNER JOIN posts AS T3 ON T1.RelatedPostId = T3.Id WHERE T2.Title = 'How to tell if something happened in a data set which monitors a value over time'",
        "difficulty": "simple"
    },
    {
        "question_id": 231,
        "db_id": "codebase_community",
        "question": "How many views did the post titled 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer' get?",
        "evidence": "\"Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer\" is the Title of post; views refers to ViewCount",
        "SQL": "SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'",
        "difficulty": "moderate"
    },
    {
        "question_id": 232,
        "db_id": "student_club",
        "question": "Please list the phone numbers of the members who majored in business at the College of Agriculture and Applied Sciences.",
        "evidence": "'College of Agriculture and Applied Sciences' is the college; majored in business refers to major_name = 'Business'; phone numbers refers to phone",
        "SQL": "SELECT T1.phone FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T2.major_name = 'Business' AND T2.college = 'College of Agriculture and Applied Sciences'",
        "difficulty": "moderate"
    },
    {
        "question_id": 233,
        "db_id": "card_games",
        "question": "List the card names with value that cost more converted mana for the face.",
        "evidence": "more converted mana for the face refers to Max(faceConvertedManaCost);",
        "SQL": "SELECT name FROM cards ORDER BY faceConvertedManaCost LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 234,
        "db_id": "california_schools",
        "question": "What is the free rate for students between the ages of 5 and 17 at the school run by Kacey Gibson?",
        "evidence": "Eligible free rates for students aged 5-17 = `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)`",
        "SQL": "SELECT CAST(T2.`Free Meal Count (Ages 5-17)` AS REAL) / T2.`Enrollment (Ages 5-17)` FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.AdmFName1 = 'Kacey' AND T1.AdmLName1 = 'Gibson'",
        "difficulty": "moderate"
    },
    {
        "question_id": 235,
        "db_id": "superhero",
        "question": "Name the superhero, otherwise known as Charles Chandler.",
        "evidence": "name the superhero refers to superhero_name; Charles Chandler is the full name of superhero;",
        "SQL": "SELECT superhero_name FROM superhero WHERE full_name = 'Charles Chandler'",
        "difficulty": "simple"
    },
    {
        "question_id": 236,
        "db_id": "student_club",
        "question": "How many members attended the \"Women's Soccer\" event?",
        "evidence": "'Women's Soccer' is the event name;",
        "SQL": "SELECT COUNT(T2.link_to_member) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'Women''s Soccer'",
        "difficulty": "simple"
    },
    {
        "question_id": 237,
        "db_id": "card_games",
        "question": "What is the annual average number of sets that were released between 1/1/2012 to 12/31/2015? Indicate the common langugage of the card.",
        "evidence": "AVG(id); releaseDate BETWEEN 1/1/2012 AND 12/31/2015; the common language refers to MAX(COUNT(language))",
        "SQL": "SELECT (CAST(SUM(T1.id) AS REAL) / COUNT(T1.id)) / 4, T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.id = T2.id WHERE T1.releaseDate BETWEEN '2012-01-01' AND '2015-12-31' GROUP BY T1.releaseDate ORDER BY COUNT(T2.language) DESC LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question_id": 238,
        "db_id": "card_games",
        "question": "List the edhrecRank for cards with frame version 2015.",
        "evidence": "",
        "SQL": "SELECT edhrecRank FROM cards WHERE frameVersion = 2015",
        "difficulty": "simple"
    },
    {
        "question_id": 239,
        "db_id": "student_club",
        "question": "Which college is the vice president of the Student_Club from?",
        "evidence": "Vice President is a position of the Student Club",
        "SQL": "SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position LIKE 'vice president'",
        "difficulty": "simple"
    },
    {
        "question_id": 240,
        "db_id": "codebase_community",
        "question": "Among all the posts posted by the most influential user, identify the percentage with a score above 50.",
        "evidence": "The user with higher reputation has more influence; DIVIDE(COUNT(stats_posts.Id where Score > = 50 and MAX(Reputation))), COUNT(stats_posts.Id where MAX(Reputation)) as percentage;",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.Score >= 50 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Id) FROM users T1 INNER JOIN posts T2 ON T1.Id = T2.OwnerUserId INNER JOIN ( SELECT MAX(Reputation) AS max_reputation FROM users ) T3 ON T1.Reputation = T3.max_reputation",
        "difficulty": "challenging"
    },
    {
        "question_id": 241,
        "db_id": "european_football_2",
        "question": "What is the percentage of players that are under 180 cm who have an overall strength of more than 70?",
        "evidence": "percentage refers to DIVIDE(COUNT(height < 180 AND overall_rating > 70),COUNT(id)) * 100%",
        "SQL": "SELECT CAST(COUNT(CASE WHEN t2.overall_rating > 70 THEN t1.id ELSE NULL END) AS REAL) * 100 / COUNT(t1.id) percent FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height < 180",
        "difficulty": "moderate"
    },
    {
        "question_id": 242,
        "db_id": "financial",
        "question": "In the branch where the second-highest number of crimes were committed in 1995 occurred, how many male clients are there?",
        "evidence": "Male refers to gender = 'M'; A15 stands for no. of commited crimes 1995",
        "SQL": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A15 = (SELECT T3.A15 FROM district AS T3 ORDER BY T3.A15 DESC LIMIT 1, 1)",
        "difficulty": "moderate"
    },
    {
        "question_id": 243,
        "db_id": "toxicology",
        "question": "Calculate the average number of oxygen atoms in single-bonded molecules.",
        "evidence": "single-bonded molecules refers to bond_type = '-' ; average number of oxygen atom = AVG(element = 'o')",
        "SQL": "SELECT AVG(oxygen_count) FROM (SELECT T1.molecule_id, COUNT(T1.element) AS oxygen_count FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id  WHERE T2.bond_type = '-' AND T1.element = 'o'  GROUP BY T1.molecule_id) AS oxygen_counts",
        "difficulty": "moderate"
    },
    {
        "question_id": 244,
        "db_id": "codebase_community",
        "question": "Name 10 users with the badge name 'Necromancer.'",
        "evidence": "\"Necromancer\" is the Name of badge; users refers to DisplayName",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Necromancer' LIMIT 10",
        "difficulty": "simple"
    },
    {
        "question_id": 245,
        "db_id": "financial",
        "question": "What is the number of committed crimes in 1995 in the district of the account with the id 532?",
        "evidence": "A15 contains information about number of committed crimes in 1995",
        "SQL": "SELECT T1.A15 FROM district AS T1 INNER JOIN `account` AS T2 ON T1.district_id = T2.district_id WHERE T2.account_id = 532",
        "difficulty": "simple"
    },
    {
        "question_id": 246,
        "db_id": "student_club",
        "question": "How many meeting events were held in 2020?",
        "evidence": "meeting events refers to type = 'Meeting'; held in 2020 refers to YEAR(event_date) = 2020",
        "SQL": "SELECT COUNT(event_id) FROM event WHERE type = 'Meeting' AND SUBSTR(event_date, 1, 4) = '2020'",
        "difficulty": "simple"
    },
    {
        "question_id": 247,
        "db_id": "european_football_2",
        "question": "How many players whose first names are Adam and weigh more than 170?",
        "evidence": "team names refers to team_long_name; speed class refers to buildUpPlaySpeedClass; buildUpPlaySpeedClass = 'Fast';",
        "SQL": "SELECT COUNT(id) FROM Player WHERE weight > 170 AND player_name LIKE 'Adam%'",
        "difficulty": "simple"
    },
    {
        "question_id": 248,
        "db_id": "student_club",
        "question": "List all the members who attended the event \"October Meeting\".",
        "evidence": "'October Meeting' is an event name;",
        "SQL": "SELECT DISTINCT T3.member_id FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'October Meeting'",
        "difficulty": "simple"
    },
    {
        "question_id": 249,
        "db_id": "superhero",
        "question": "How many superheroes have durability of less than 50?",
        "evidence": "durability of less than 50 refers to attribute_name = 'Durability' AND attribute_value < 50",
        "SQL": "SELECT COUNT(T1.hero_id) FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id WHERE T2.attribute_name = 'Durability' AND T1.attribute_value < 50",
        "difficulty": "simple"
    },
    {
        "question_id": 250,
        "db_id": "card_games",
        "question": "How many cards are there in the set 'World Championship Decks 2004' with the converted mana cost as '3'.",
        "evidence": "the set 'World Championship Decks 2004' refers to name = 'World Championship Decks 2004'",
        "SQL": "SELECT COUNT(id) FROM cards WHERE setCode IN ( SELECT code FROM sets WHERE name = 'World Championship Decks 2004' ) AND convertedManaCost = 3",
        "difficulty": "simple"
    },
    {
        "question_id": 251,
        "db_id": "superhero",
        "question": "State all of 3-D Man's attributes along with their values.",
        "evidence": "3-D Man is the superhero_name. attributes refers to attribute_name; values refers to attribute_value;",
        "SQL": "SELECT T3.attribute_name, T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = '3-D Man'",
        "difficulty": "moderate"
    },
    {
        "question_id": 252,
        "db_id": "california_schools",
        "question": "Name schools in Riverside which the average of average math score for SAT is grater than 400, what is the funding type of these schools?",
        "evidence": "Average of average math = sum(average math scores) / count(schools).",
        "SQL": "SELECT T1.sname, T2.`Charter Funding Type` FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.cds = T2.CDSCode WHERE T2.`District Name` LIKE 'Riverside%' GROUP BY T1.sname, T2.`Charter Funding Type` HAVING CAST(SUM(T1.AvgScrMath) AS REAL) / COUNT(T1.cds) > 400",
        "difficulty": "moderate"
    },
    {
        "question_id": 253,
        "db_id": "formula_1",
        "question": "Name the top 3 drivers and the points they scored in the 2017 Chinese Grand Prix.",
        "evidence": "",
        "SQL": "SELECT T3.forename, T3.surname, T2.points FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.name = 'Chinese Grand Prix' AND T1.year = 2017 ORDER BY T2.points DESC LIMIT 3",
        "difficulty": "simple"
    },
    {
        "question_id": 254,
        "db_id": "california_schools",
        "question": "Of the schools with a mailing state address in California, what is the ratio of the schools located in the county of Colusa against the school located in the county of Humboldt?",
        "evidence": "Ratio = count(schools in Colusa) / count(schools in Humboldt)",
        "SQL": "SELECT CAST(SUM(CASE WHEN County = 'Colusa' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN County = 'Humboldt' THEN 1 ELSE 0 END) FROM schools WHERE MailState = 'CA'",
        "difficulty": "moderate"
    },
    {
        "question_id": 255,
        "db_id": "toxicology",
        "question": "How many molecules have a double bond type and among these molecule, how many are labeled as carcinogenic compound?",
        "evidence": "double bond refers to bond_type = ' = '; label = '+' mean molecules are carcinogenic;",
        "SQL": "SELECT COUNT(DISTINCT T2.molecule_id), SUM(CASE WHEN T2.label = '+' THEN 1 ELSE 0 END) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '='",
        "difficulty": "moderate"
    },
    {
        "question_id": 256,
        "db_id": "superhero",
        "question": "What is the power ID of cryokinesis?",
        "evidence": "power ID refers to superpower.id; cryokinesis refers to power_name = 'cryokinesis';",
        "SQL": "SELECT id FROM superpower WHERE power_name = 'Cryokinesis'",
        "difficulty": "simple"
    },
    {
        "question_id": 257,
        "db_id": "toxicology",
        "question": "List the element and bond type included in the molecule with molecule ID of TR016.",
        "evidence": "element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium; double bond refers to bond_type = ' = '; single bond refers to bond_type = '-'; triple bond refers to bond_type = '#';",
        "SQL": "SELECT DISTINCT T1.element, T2.bond_type FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR016'",
        "difficulty": "challenging"
    },
    {
        "question_id": 258,
        "db_id": "toxicology",
        "question": "What is the percentage of molecules that are carcinogenic?",
        "evidence": "label = '+' mean molecules are carcinogenic; percentage = DIVIDE(SUM(label = '+'), COUNT(molecule_id)) as percent",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T.label = '+' THEN T.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(T.molecule_id) FROM molecule t",
        "difficulty": "simple"
    },
    {
        "question_id": 259,
        "db_id": "toxicology",
        "question": "What are the toxicology elements associated with bond ID TR005_16_26?",
        "evidence": "element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium",
        "SQL": "SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR005_16_26'",
        "difficulty": "challenging"
    },
    {
        "question_id": 260,
        "db_id": "codebase_community",
        "question": "Describe the last accessed date and location of the users who received the outliers badge.",
        "evidence": "Outliers is the name of the badge;",
        "SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'outliers'",
        "difficulty": "simple"
    },
    {
        "question_id": 261,
        "db_id": "card_games",
        "question": "How many cards are oversized, reprinted, and printed for promotions?",
        "evidence": "are oversized refers to isOversized = 1; reprinted refers to isReprint = 1; printed for promotions refers to isPromo = 1",
        "SQL": "SELECT COUNT(id) FROM cards WHERE isOversized = 1 AND isReprint = 1 AND isPromo = 1",
        "difficulty": "simple"
    },
    {
        "question_id": 262,
        "db_id": "california_schools",
        "question": "Please provide the National Center for Educational Statistics school district identification number for all schools with a School Ownership Code that are part of the State Special Schools.",
        "evidence": "State Special Schools means that SOC = 31.",
        "SQL": "SELECT NCESDist FROM schools WHERE SOC = 31",
        "difficulty": "simple"
    },
    {
        "question_id": 263,
        "db_id": "card_games",
        "question": "List down all the card IDs with converted mana cost of 0.",
        "evidence": "converted mana cost of 0 refers to covertedManaCost = 0;",
        "SQL": "SELECT id FROM cards WHERE convertedManaCost = 0",
        "difficulty": "simple"
    },
    {
        "question_id": 264,
        "db_id": "thrombosis_prediction",
        "question": "How many female patients were given an APS diagnosis?",
        "evidence": "female refers to SEX = 'F'; 'APS' refers to diagnosis",
        "SQL": "SELECT COUNT(ID) FROM Patient WHERE SEX = 'F' AND Diagnosis = 'APS'",
        "difficulty": "simple"
    },
    {
        "question_id": 265,
        "db_id": "debit_card_specializing",
        "question": "For the earliest customer, what segment did he/she have?",
        "evidence": "",
        "SQL": "SELECT T2.Segment FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID ORDER BY Date ASC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 266,
        "db_id": "codebase_community",
        "question": "How many users were from New York?",
        "evidence": "New York refers to Location;",
        "SQL": "SELECT COUNT(Id) FROM users WHERE Location = 'New York'",
        "difficulty": "simple"
    },
    {
        "question_id": 267,
        "db_id": "codebase_community",
        "question": "User No.23853 gave a comment to a post at 9:08:18 on 2013/7/12, was that post well-finished?",
        "evidence": "user no. 23853 refers to UserId = '23853'; at 9:08:18 on 2013/7/12 refers to CreationDate = '2013-07-12 09:08:18.0'; not well-finished refers to ClosedDate IS NULL and vice versa",
        "SQL": "SELECT IIF(T2.ClosedDate IS NULL, 'NOT well-finished', 'well-finished') AS resylt FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.UserId = 23853 AND T1.CreationDate = '2013-07-12 09:08:18.0'",
        "difficulty": "moderate"
    },
    {
        "question_id": 268,
        "db_id": "toxicology",
        "question": "Calculate the total atoms consisting of the element carbon and hydrogen.",
        "evidence": "consisting of element carbon and hydrogen refers to element in('c', 'h')",
        "SQL": "SELECT COUNT(T.atom_id) FROM atom AS T WHERE T.element = 'c' OR T.element = 'h'",
        "difficulty": "simple"
    },
    {
        "question_id": 269,
        "db_id": "superhero",
        "question": "Provide the names of superheroes with attribute value between 75 to 80.",
        "evidence": "names of superheroes refers to superhero_name; attribute value between 75 to 80 refers to attribute_value BETWEEN 75 AND 80;",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T2.attribute_value BETWEEN 75 AND 80",
        "difficulty": "simple"
    },
    {
        "question_id": 270,
        "db_id": "european_football_2",
        "question": "Please list player names which are higher than 180.",
        "evidence": "height>180;",
        "SQL": "SELECT player_name FROM Player WHERE height > 180",
        "difficulty": "simple"
    },
    {
        "question_id": 271,
        "db_id": "toxicology",
        "question": "Name the elements that comprise the atoms of bond TR001_2_4.",
        "evidence": "element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium",
        "SQL": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR001_2_4'",
        "difficulty": "challenging"
    },
    {
        "question_id": 272,
        "db_id": "student_club",
        "question": "List the full name of all the members of the Student_Club who attended the \"Laugh Out Loud\" event.",
        "evidence": "full name of members refers to first_name, last_name; 'Laugh Out Loud' is an event name;",
        "SQL": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'Laugh Out Loud'",
        "difficulty": "moderate"
    },
    {
        "question_id": 273,
        "db_id": "card_games",
        "question": "What was the release date for the set which card \"Evacuation\" in it?",
        "evidence": "\"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
        "SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Evacuation'",
        "difficulty": "simple"
    },
    {
        "question_id": 274,
        "db_id": "thrombosis_prediction",
        "question": "Provide all ID, sex and birthday of patients whose urea nitrogen (UN) just within the borderline of passing?",
        "evidence": "urea nitrogen (UN) just within the borderline of passing refers to UN = 29",
        "SQL": "SELECT DISTINCT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.UN = 29",
        "difficulty": "simple"
    },
    {
        "question_id": 275,
        "db_id": "thrombosis_prediction",
        "question": "For all patient born in 1982, state if their albumin is within normal range.",
        "evidence": "Year(Birthday) = '1982'; albumin is within normal range refers to ALB between 3.5 and 5.5",
        "SQL": "SELECT CASE WHEN T2.ALB >= 3.5 AND T2.ALB <= 5.5 THEN 'normal' ELSE 'abnormal' END FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T1.Birthday) = '1982'",
        "difficulty": "moderate"
    },
    {
        "question_id": 276,
        "db_id": "codebase_community",
        "question": "Please list the users' display names whose posts had over 20000 views in 2011.",
        "evidence": "had over 20000 views in 2011 refers to ViewCount > 20000 where YEAR(CreationDate) = 2011;",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE STRFTIME('%Y', T2.CreaionDate) = '2011' AND T2.ViewCount > 20000",
        "difficulty": "simple"
    },
    {
        "question_id": 277,
        "db_id": "toxicology",
        "question": "Which bond ids are double-bond with carcinogenic compound?",
        "evidence": "label = '+' mean molecules are carcinogenic; double bond refers to bond_type = ' = ';",
        "SQL": "SELECT T1.bond_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND T1.bond_type = '='",
        "difficulty": "simple"
    },
    {
        "question_id": 278,
        "db_id": "financial",
        "question": "What is the disposition id of the client who made 5100 USD transaction in 1998/9/2?",
        "evidence": "",
        "SQL": "SELECT T1.disp_id FROM disp AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T2.date = '1998-09-02' AND T2.amount = 5100",
        "difficulty": "simple"
    },
    {
        "question_id": 279,
        "db_id": "financial",
        "question": "How much, in total, did client number 617 pay for all of the transactions in 1998?",
        "evidence": "",
        "SQL": "SELECT SUM(T3.amount) FROM client AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE STRFTIME('%Y', T3.date)= '1998' AND T1.client_id = 617",
        "difficulty": "simple"
    },
    {
        "question_id": 280,
        "db_id": "toxicology",
        "question": "How much of the hydrogen in molecule TR206 is accounted for? Please provide your answer in percentage.",
        "evidence": "hydrogen refers to element = 'h'; TR206 is the molecule id; percentage = DIVIDE(SUM(element = 'h'), COUNT(atom_id)) as percent where molecule_id = 'TR206'",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T.element = 'h' THEN T.atom_id ELSE NULL END) AS REAL) * 100 / COUNT(T.atom_id) FROM atom AS T WHERE T.molecule_id = 'TR206'",
        "difficulty": "moderate"
    },
    {
        "question_id": 281,
        "db_id": "student_club",
        "question": "What is the name and major of members who had to spend more than a hundred dollars on an expense?",
        "evidence": "full name refers to first_name, last_name; major of members refers to major_name; spend more than a hundred dollars on an expense refers to cost > 100",
        "SQL": "SELECT DISTINCT T1.first_name, T1.last_name, T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major INNER JOIN expense AS T3 ON T1.member_id = T3.link_to_member WHERE T3.cost > 100",
        "difficulty": "moderate"
    },
    {
        "question_id": 282,
        "db_id": "codebase_community",
        "question": "Among the users located in United Kingdom, how many users whose post have a total favorite amount of 4 or more?",
        "evidence": "favorite amount of 4 or more refers to FavoriteCount > = 4; Location = 'United Kingdom';",
        "SQL": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.Location = 'United Kingdom' AND T2.FavoriteCount >= 4",
        "difficulty": "moderate"
    },
    {
        "question_id": 283,
        "db_id": "european_football_2",
        "question": "Please list all team names which the speed class is fast.",
        "evidence": "team names refers to team_long_name; speed class refers to buildUpPlaySpeedClass; buildUpPlaySpeedClass = 'Fast';",
        "SQL": "SELECT DISTINCT t1.team_long_name FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.buildUpPlaySpeedClass = 'Fast'",
        "difficulty": "simple"
    },
    {
        "question_id": 284,
        "db_id": "debit_card_specializing",
        "question": "What was the average monthly consumption of customers in SME for the year 2013?",
        "evidence": "Average Monthly consumption = AVG(Consumption) / 12; Year 2013 can be presented as Between 201301 And 201312, which means between January and December in 2013",
        "SQL": "SELECT AVG(T2.Consumption) / 12 FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE SUBSTRING(T2.Date, 1, 4) = '2013' AND T1.Segment = 'SME'",
        "difficulty": "moderate"
    },
    {
        "question_id": 285,
        "db_id": "financial",
        "question": "How many accounts who choose issuance after transaction are staying in East Bohemia region?",
        "evidence": "A3 contains the data of region; 'POPLATEK PO OBRATU' represents for 'issuance after transaction'.",
        "SQL": "SELECT COUNT(T1.district_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T1.A3 = 'East Bohemia' AND T2.frequency = 'POPLATEK PO OBRATU'",
        "difficulty": "moderate"
    },
    {
        "question_id": 286,
        "db_id": "card_games",
        "question": "Among the sets of cards that have an Italian translation, how many of them have a base set number of under 10?",
        "evidence": "Italian translation refers to language = 'Italian'; have a translation means translation is not null; base set number of under 10 refers to baseSetSize < 10",
        "SQL": "SELECT COUNT(T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation IS NOT NULL AND T1.baseSetSize < 10 AND T2.language = 'Italian'",
        "difficulty": "moderate"
    },
    {
        "question_id": 287,
        "db_id": "debit_card_specializing",
        "question": "Which country was the card owner of No.667467 in?",
        "evidence": "",
        "SQL": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.CardID = '667467'",
        "difficulty": "simple"
    },
    {
        "question_id": 288,
        "db_id": "formula_1",
        "question": "Who is the champion of the Canadian Grand Prix in 2008? Indicate his finish time.",
        "evidence": "Only the time of the champion shows in the format of \"hour: minutes: seconds.millionsecond\";",
        "SQL": "SELECT T1.time FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Canadian Grand Prix' AND T2.year = 2008 AND T1.time LIKE '_:%:__.___'",
        "difficulty": "moderate"
    },
    {
        "question_id": 289,
        "db_id": "card_games",
        "question": "Among the sets whose expansion type is Commander, which set has the highest total number of cards including promotional and related supplemental products but excluding Alchemy modifications? Indicate the id of the set.",
        "evidence": "expansion type refers to type where type = 'commander'; totalSetSize: The total number of cards in the set, including promotional and related supplemental products but excluding Alchemy modifications; highest total number of cards refers to MAX(totalSetSize)",
        "SQL": "SELECT id FROM sets WHERE type = 'commander' ORDER BY totalSetSize DESC LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question_id": 290,
        "db_id": "thrombosis_prediction",
        "question": "Among the patients whose total cholesterol is within the normal range, how many of them have a P pattern observed in the sheet of ANA examination?",
        "evidence": "total cholesterol is within the normal range refers to `T-CHO` < 250; P pattern observed in the sheet of ANA examination refers to ANA Pattern = 'P';",
        "SQL": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T3.`ANA Pattern` = 'P' AND T2.`T-CHO` < 250",
        "difficulty": "moderate"
    },
    {
        "question_id": 291,
        "db_id": "formula_1",
        "question": "What is the actual finish time for Bruce McLaren in the race No.743?",
        "evidence": "race number refers to raceId;",
        "SQL": "SELECT T2.time FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.raceId = 743 AND T1.forename = 'Bruce' AND T1.surname = 'McLaren'",
        "difficulty": "simple"
    },
    {
        "question_id": 292,
        "db_id": "card_games",
        "question": "Please list the names of the cards in the set \"Hauptset Zehnte Edition\".",
        "evidence": "card set \"Hauptset Zehnte Edition\" refers to translation = 'Hauptset Zehnte Edition'",
        "SQL": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T2.translation = 'Hauptset Zehnte Edition'",
        "difficulty": "simple"
    },
    {
        "question_id": 293,
        "db_id": "california_schools",
        "question": "What is the city location of the high school level school with Lunch Provision 2 whose lowest grade is 9 and the highest grade is 12 in the county of Merced?",
        "evidence": "High school can be represented as EILCode = 'HS'",
        "SQL": "SELECT T2.City FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`NSLP Provision Status` = 'Lunch Provision 2' AND T2.County = 'Merced' AND T1.`Low Grade` = 9 AND T1.`High Grade` = 12 AND T2.EILCode = 'HS'",
        "difficulty": "moderate"
    },
    {
        "question_id": 294,
        "db_id": "financial",
        "question": "What proportion of customers who have accounts at the Prague branch are female?",
        "evidence": "Female refers to gender = 'F'; Percentage of female clients in Prague branch = count[female clients with accounts in Prague branch / count(clients with accounts in Prague branch)] * 100%; A3 may contain information about Prague",
        "SQL": "SELECT CAST(SUM(T2.gender = 'F') AS REAL) / COUNT(T2.client_id) * 100 FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T1.A3 = 'Prague'",
        "difficulty": "moderate"
    },
    {
        "question_id": 295,
        "db_id": "codebase_community",
        "question": "When did the user known as 'IrishStat' create his or her account?",
        "evidence": "DisplayName = 'IrishStat'; when create his or her account refers to CreationDate;",
        "SQL": "SELECT CreationDate FROM users WHERE DisplayName = 'IrishStat'",
        "difficulty": "simple"
    },
    {
        "question_id": 296,
        "db_id": "codebase_community",
        "question": "How many posts does the user csgillespie own?",
        "evidence": "\"csgillespie\" is the DisplayName of user",
        "SQL": "SELECT COUNT(T1.id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
        "difficulty": "simple"
    },
    {
        "question_id": 297,
        "db_id": "financial",
        "question": "List the loan ID, district and average salary for loan with duration of 60 months.",
        "evidence": "A3 refers to regions; A11 refers to average salary",
        "SQL": "SELECT T3.loan_id, T2.A2, T2.A11 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.duration = 60",
        "difficulty": "simple"
    },
    {
        "question_id": 298,
        "db_id": "formula_1",
        "question": "What race number has the most finishers?",
        "evidence": "finisher refers to time is not null;",
        "SQL": "SELECT raceId FROM results GROUP BY raceId ORDER BY COUNT(time IS NOT NULL) DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 299,
        "db_id": "student_club",
        "question": "List the city and state of members enrolled under electrical and computer engineering department.",
        "evidence": "'Electrical and Computer Engineering Department' is the department; members enrolled refers to position = 'Member'",
        "SQL": "SELECT city, state FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major INNER JOIN zip_code AS T3 ON T3.zip_code = T1.zip WHERE department = 'Electrical and Computer Engineering Department' AND position = 'Member'",
        "difficulty": "moderate"
    },
    {
        "question_id": 300,
        "db_id": "superhero",
        "question": "What is Abomination's superpower?",
        "evidence": "Abomination refers to superhero_name = 'Abomination'; superpower refers to power_name;",
        "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Abomination'",
        "difficulty": "simple"
    },
    {
        "question_id": 301,
        "db_id": "superhero",
        "question": "List the full names of superheroes with missing weight.",
        "evidence": "missing weight refers to weight_kg = 0 OR weight_kg = NULL;",
        "SQL": "SELECT DISTINCT full_name FROM superhero WHERE full_name IS NOT NULL AND (weight_kg IS NULL OR weight_kg = 0)",
        "difficulty": "simple"
    },
    {
        "question_id": 302,
        "db_id": "superhero",
        "question": "What is the name of the superhero that has the most powers?",
        "evidence": "name of the superhero refers to superhero_name; superhero that has the most powers refers to MAX(COUNT(superhero_name))",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id GROUP BY T1.superhero_name ORDER BY COUNT(T2.hero_id) DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 303,
        "db_id": "student_club",
        "question": "Mention the category of events which were held at MU 215.",
        "evidence": "held at MU 215 refers to location = 'MU 215'",
        "SQL": "SELECT T2.category FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.location = 'MU 215'",
        "difficulty": "simple"
    },
    {
        "question_id": 304,
        "db_id": "thrombosis_prediction",
        "question": "What is the disease name of the patient who has the highest level of triglyceride within the normal range?",
        "evidence": "disease name referse to Diagnosis; highest level of triglyceride within the normal range refers to MAX(TG < 200);",
        "SQL": "SELECT T1.Diagnosis FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG < 200 ORDER BY T2.TG DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 305,
        "db_id": "formula_1",
        "question": "How many races were there in 2005? Name all the races in descending order.",
        "evidence": "",
        "SQL": "SELECT name FROM races WHERE year = 2005 ORDER BY name DESC",
        "difficulty": "simple"
    },
    {
        "question_id": 306,
        "db_id": "card_games",
        "question": "List all the mythic rarity print cards banned in gladiator format.",
        "evidence": "mythic rarity printing refers to rarity = 'mythic'; card banned refers to status = 'Banned'; in gladiator format refers to format = 'gladiator';",
        "SQL": "SELECT DISTINCT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'gladiator' AND T2.status = 'Banned' AND T1.rarity = 'mythic'",
        "difficulty": "moderate"
    },
    {
        "question_id": 307,
        "db_id": "european_football_2",
        "question": "List the football teams that has a chance creation passing class of Risky. Inidcate its short name only.",
        "evidence": "chance creation passing class refers to chanceCreationPassingClass; chanceCreationPassingClass = 'Risky'; short name refers to team_short_name;",
        "SQL": "SELECT DISTINCT t1.team_short_name FROM Team AS t1 INNER JOIN Team_attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.chanceCreationPassingClass = 'Risky'",
        "difficulty": "moderate"
    },
    {
        "question_id": 308,
        "db_id": "toxicology",
        "question": "What is the percentage of carcinogenic molecules in triple type bonds?",
        "evidence": "label = '+' mean molecules are carcinogenic; triple bond refers to bond_type = '#'; percentage = DIVIDE(SUM(bond_type = '#'), COUNT(bond_id)) as percent where label = '+'",
        "SQL": "SELECT CAST(COUNT(DISTINCT CASE WHEN T2.label = '+' THEN T2.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '#'",
        "difficulty": "challenging"
    },
    {
        "question_id": 309,
        "db_id": "student_club",
        "question": "What is the total cost of the pizzas for all the events?",
        "evidence": "total cost of the pizzas refers to SUM(cost) where expense_description = 'Pizza'",
        "SQL": "SELECT SUM(cost) FROM expense WHERE expense_description = 'Pizza'",
        "difficulty": "simple"
    },
    {
        "question_id": 310,
        "db_id": "card_games",
        "question": "How many artists have designed a card with a black border color and is available in both \"arena\" and \"mtgo\" printing type?",
        "evidence": "available in both \"arena\" and \"mtgo\" refers to availability like '%arena,mtgo%'",
        "SQL": "SELECT COUNT(CASE WHEN availability LIKE '%arena,mtgo%' THEN 1 ELSE NULL END) FROM cards",
        "difficulty": "simple"
    },
    {
        "question_id": 311,
        "db_id": "codebase_community",
        "question": "How much is the total bounty amount of the post titled about 'data'",
        "evidence": "About data means the title contains 'data'; total bounty Amount refers to Sum(BountyAmount)",
        "SQL": "SELECT SUM(T2.BountyAmount) FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId WHERE T1.Title LIKE '%data%'",
        "difficulty": "simple"
    },
    {
        "question_id": 312,
        "db_id": "codebase_community",
        "question": "Identify the display name and location of the user, who was the last to edit the post with ID 183.",
        "evidence": "last to edit refers to MAX(LastEditDate);",
        "SQL": "SELECT T2.DisplayName, T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.Id = 183 ORDER BY T1.LastEditDate DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 313,
        "db_id": "california_schools",
        "question": "Which active district has the highest average score in Reading?",
        "evidence": "",
        "SQL": "SELECT T1.District FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.StatusType = 'Active' ORDER BY T2.AvgScrRead DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 314,
        "db_id": "codebase_community",
        "question": "How many users from New York have a teacher and supporter badge?",
        "evidence": "\"Supporter\" and \"Teachers\" are both Name of badge; 'New York' is the Location; user refers to UserId",
        "SQL": "SELECT COUNT(DISTINCT T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Name IN ('Supporter', 'Teacher') AND T2.Location = 'New York'",
        "difficulty": "simple"
    },
    {
        "question_id": 315,
        "db_id": "thrombosis_prediction",
        "question": "How many female patients who came at the hospital in 1997 was immediately followed at the outpatient clinic?",
        "evidence": "female refers to sex = 'F'; came at the hospital in 1997 refers to year(Description) = '1997'; followed at the outpatient clinic refers to Admission = '-'",
        "SQL": "SELECT COUNT(*) FROM Patient WHERE STRFTIME('%Y', Description) = '1997' AND SEX = 'F' AND Admission = '-'",
        "difficulty": "moderate"
    },
    {
        "question_id": 316,
        "db_id": "european_football_2",
        "question": "Among the players born before the year 1986, how many of them would remain in his position and defense while the team attacked?",
        "evidence": "players born before the year 1986 refers to strftime('%Y', birthday)<'1986'; players who would remain in his position and defense while the team attacked refers to defensive_work_rate = 'high';",
        "SQL": "SELECT COUNT(DISTINCT t1.player_name) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t1.birthday, 1, 4) < '1986' AND t2.defensive_work_rate = 'high'",
        "difficulty": "challenging"
    },
    {
        "question_id": 317,
        "db_id": "financial",
        "question": "What is the district Id of the account that placed the order with the id 33333?",
        "evidence": "",
        "SQL": "SELECT T3.district_id FROM `order` AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.order_id = 33333",
        "difficulty": "simple"
    },
    {
        "question_id": 318,
        "db_id": "debit_card_specializing",
        "question": "Among the transactions made in the gas stations in the Czech Republic, how many of them are taken place after 2012/1/1?",
        "evidence": "Gas station in the Czech Republic implies that Country = 'CZE'",
        "SQL": "SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE' AND strftime('%Y', T1.Date) >= '2012'",
        "difficulty": "moderate"
    },
    {
        "question_id": 319,
        "db_id": "toxicology",
        "question": "What is the percentage of carbon in double-bond molecules?",
        "evidence": "carbon refers to element = 'c'; double-bond molecules refers to bond_type = ' = '; percentage = DIVIDE(SUM(element = 'c'), COUNT(atom_id))",
        "SQL": "SELECT CAST(COUNT(DISTINCT CASE WHEN T1.element = 'c' THEN T1.atom_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T1.atom_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '='",
        "difficulty": "moderate"
    },
    {
        "question_id": 320,
        "db_id": "formula_1",
        "question": "List out top 3 German drivers who were born from 1980-1990 and have the earliest lap time.",
        "evidence": "born from 1980-1990 refers to year(dob) between 1980 and 1990; earliest lap time refers to Min(time);",
        "SQL": "SELECT T2.driverId FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'German' AND STRFTIME('%Y', T2.dob) BETWEEN '1980' AND '1990' ORDER BY T1.time LIMIT 3",
        "difficulty": "moderate"
    },
    {
        "question_id": 321,
        "db_id": "thrombosis_prediction",
        "question": "Which patient has a normal proteinuria level and is diagnosed with SLE? Please give his or her patient ID.",
        "evidence": "normal proteinuria level refers to 0 < `U-PRO` < 30; diagnosed with SLE refers to Diagnosis = 'SLE';",
        "SQL": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`U-PRO` > 0 AND T2.`U-PRO` < 30 AND T1.Diagnosis = 'SLE'",
        "difficulty": "moderate"
    },
    {
        "question_id": 322,
        "db_id": "formula_1",
        "question": "What is the lap record set by Lewis Hamilton in a Formula_1 race?",
        "evidence": "lap recod means the fastest time recorded which refers to time",
        "SQL": "SELECT T1.time FROM lapTimes AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton'",
        "difficulty": "simple"
    },
    {
        "question_id": 323,
        "db_id": "student_club",
        "question": "For all the budgets for \"November Meeting\", how many of them had exceeded the budget?",
        "evidence": "'November Meeting' is an event name; remaining < 0 means the cost had exceeded the budget",
        "SQL": "SELECT COUNT(T2.event_id) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'November Meeting' AND T1.remaining < 0",
        "difficulty": "simple"
    },
    {
        "question_id": 324,
        "db_id": "toxicology",
        "question": "On average how many carcinogenic molecules are single bonded?",
        "evidence": "carcinogenic molecules refers to label = '+'; single-bonded refers to bond_type = '-'; average = DIVIDE(SUM(bond_type = '-'), COUNT(atom_id))",
        "SQL": "SELECT AVG(single_bond_count) FROM (SELECT T3.molecule_id, COUNT(T1.bond_type) AS single_bond_count FROM bond AS T1  INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN molecule AS T3 ON T3.molecule_id = T2.molecule_id WHERE T1.bond_type = '-' AND T3.label = '+' GROUP BY T3.molecule_id) AS subquery",
        "difficulty": "challenging"
    },
    {
        "question_id": 325,
        "db_id": "california_schools",
        "question": "What is the complete address of the school with the lowest excellence rate? Indicate the Street, City, Zip and State.",
        "evidence": "Execellence Rate = NumGE1500 / NumTstTakr; complete address has Street, City, State, Zip code",
        "SQL": "SELECT T2.Street, T2.City, T2.Zip, T2.State FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY CAST(T1.NumGE1500 AS REAL) / T1.NumTstTakr ASC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 326,
        "db_id": "california_schools",
        "question": "Between San Diego and Santa Barbara, which county offers the most number of schools that does not offer physical building? Indicate the amount.",
        "evidence": "'Does not offer physical building' means Virtual = F in the database.",
        "SQL": "SELECT County, COUNT(Virtual) FROM schools WHERE (County = 'San Diego' OR County = 'Santa Barbara') AND Virtual = 'F' GROUP BY County ORDER BY COUNT(Virtual) DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 327,
        "db_id": "superhero",
        "question": "How many superheroes didn't have any publisher?",
        "evidence": "didn't have any publisher refers to publisher.id = 1;",
        "SQL": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.id = 1",
        "difficulty": "simple"
    },
    {
        "question_id": 328,
        "db_id": "california_schools",
        "question": "Which state special schools have the highest number of enrollees from grades 1 through 12?",
        "evidence": "State Special Schools refers to DOC = 31; Grades 1 through 12 means K-12",
        "SQL": "SELECT T2.School FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.DOC = 31 ORDER BY T1.`Enrollment (K-12)` DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 329,
        "db_id": "financial",
        "question": "For the branch which located in the south Bohemia with biggest number of inhabitants, what is the percentage of the male clients?",
        "evidence": "Percentage of the male clients = DIVIDE(COUNT(male clients), COUNT(clients)) * 100%; Male refers to gender = 'M', A3 is the region name. A4 contains the information about inhabitants.",
        "SQL": "SELECT CAST(SUM(T1.gender = 'M') AS REAL) * 100 / COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'south Bohemia' GROUP BY T2.A4 ORDER BY T2.A4 DESC LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question_id": 330,
        "db_id": "formula_1",
        "question": "Among all the lap records set on various circuits, what is the time for the fastest one?",
        "evidence": "",
        "SQL": "SELECT time FROM lapTimes ORDER BY (CASE WHEN INSTR(time, ':') <> INSTR(SUBSTR(time, INSTR(time, ':') + 1), ':') + INSTR(time, ':') THEN CAST(SUBSTR(time, 1, INSTR(time, ':') - 1) AS REAL) * 3600 ELSE 0 END) + (CAST(SUBSTR(time, INSTR(time, ':') - 2 * (INSTR(time, ':') = INSTR(SUBSTR(time, INSTR(time, ':') + 1), ':') + INSTR(time, ':')), INSTR(time, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(time, INSTR(time, ':') + 1, INSTR(time, '.') - INSTR(time, ':') - 1) AS REAL)) + (CAST(SUBSTR(time, INSTR(time, '.') + 1) AS REAL) / 1000) ASC LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question_id": 331,
        "db_id": "card_games",
        "question": "How many cards designed by UDON and available in mtgo print type has a starting maximum hand size of -1?",
        "evidence": "UDON refer to artist; availabe in mtgo refers to availability = 'mtgo'; starting maximum hand size of -1 refers to hand = -1",
        "SQL": "SELECT COUNT(id) FROM cards WHERE hAND = '-1' AND artist = 'UDON' AND Availability = 'print' AND type = 'mtgo'",
        "difficulty": "simple"
    },
    {
        "question_id": 332,
        "db_id": "card_games",
        "question": "Which card name in the set 'Journey into Nyx Hero's Path' has the highest converted mana cost.",
        "evidence": "set 'Journey into Nyx Hero's Path' refers to name = 'Journey into Nyx Hero''s Path'",
        "SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Journey into Nyx Hero''s Path' ORDER BY T1.convertedManaCost DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 333,
        "db_id": "toxicology",
        "question": "List the atom ID of the carcinogenic molecule that contains oxygen?",
        "evidence": "label = '+' mean molecules are carcinogenic; oxygen refers to element = 'o'",
        "SQL": "SELECT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'o' AND T2.label = '+'",
        "difficulty": "simple"
    },
    {
        "question_id": 334,
        "db_id": "superhero",
        "question": "List the skin colour of the superheroes with 100 attribute value.",
        "evidence": "skin colour refers to colour.colour where skin_colour_id = colour.id; 100 attribute value refers to attribute_value = 100;",
        "SQL": "SELECT DISTINCT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id INNER JOIN hero_attribute AS T3 ON T1.id = T3.hero_id WHERE T3.attribute_value = 100",
        "difficulty": "moderate"
    },
    {
        "question_id": 335,
        "db_id": "card_games",
        "question": "Which of the play formats has the highest number of banned status? Indicate the play format and the name of the card.",
        "evidence": "play format refers to format uuid; banned status refers to status = 'banned'; the highest number of banned status refers to MAX(status = 'banned')",
        "SQL": "SELECT T2.format, T1.name FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid WHERE T2.status = 'Banned' GROUP BY T2.format ORDER BY COUNT(T2.status) DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 336,
        "db_id": "student_club",
        "question": "Among the students from the Student_Club who attended the event \"Women's Soccer\", how many of them want a T-shirt that's in medium size?",
        "evidence": "Women's Soccer is an event name; T-shirt that is in medium size refers to t_shirt_size = 'Medium'",
        "SQL": "SELECT COUNT(T1.event_id) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'Women''s Soccer' AND T3.t_shirt_size = 'Medium'",
        "difficulty": "moderate"
    },
    {
        "question_id": 337,
        "db_id": "card_games",
        "question": "Name all cards with 2015 frame style ranking below 100 on EDHRec.",
        "evidence": "below 100 on EDHRec refers to EDHRec <100; with 2015 frame style refers to frameVersion = 2015;",
        "SQL": "SELECT id FROM cards WHERE edhrecRank < 100 AND frameVersion = 2015",
        "difficulty": "simple"
    },
    {
        "question_id": 338,
        "db_id": "student_club",
        "question": "What is the ratio between students majored in finance and physics?",
        "evidence": "DIVDE(SUM(major_name = 'Finance'), SUM(major_name = 'Physics'))",
        "SQL": "SELECT SUM(CASE WHEN major_name = 'Finance' THEN 1 ELSE 0 END) / SUM(CASE WHEN major_name = 'Physics' THEN 1 ELSE 0 END) AS ratio FROM major",
        "difficulty": "simple"
    },
    {
        "question_id": 339,
        "db_id": "student_club",
        "question": "Which student was able to generate income more than $40?",
        "evidence": "name of students means the full name; full name refers to first_name, last_name; generate income more than $50 refers to income.amount > 40",
        "SQL": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T2.amount > 40",
        "difficulty": "simple"
    },
    {
        "question_id": 340,
        "db_id": "card_games",
        "question": "List the names of all the cards in the set Hour of Devastation and find the formats in which these cards are legal.",
        "evidence": "the set Hour of Devastation refers to set.name = 'Hour of Devastation'; names of all the cards in the set refers to cards.name; legal cards refers to status = 'legal'; the formats refers to format",
        "SQL": "SELECT DISTINCT T2.name , CASE WHEN T1.status = 'Legal' THEN T1.format ELSE NULL END FROM legalities AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid WHERE T2.setCode IN ( SELECT code FROM sets WHERE name = 'Hour of Devastation' )",
        "difficulty": "challenging"
    },
    {
        "question_id": 341,
        "db_id": "financial",
        "question": "Between 1/1/1995 and 12/31/1997, how many loans in the amount of at least 250,000 per account that chose monthly statement issuance were approved?",
        "evidence": "Frequency = 'POPLATEK MESICNE' stands for monthly issurance",
        "SQL": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.date BETWEEN '1995-01-01' AND '1997-12-31' AND T1.frequency = 'POPLATEK MESICNE' AND T2.amount > 250000",
        "difficulty": "moderate"
    },
    {
        "question_id": 342,
        "db_id": "codebase_community",
        "question": "What is the display name of the user who acquired the highest amount of badges?",
        "evidence": "highest amount of badges refers to MAX(COUNT(Name));",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId GROUP BY T1.DisplayName ORDER BY COUNT(T1.Id) DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 343,
        "db_id": "formula_1",
        "question": "What is his number of the driver who finished 0:01:54 in the Q3 of qualifying race No.903?",
        "evidence": "race number refers to raceId;",
        "SQL": "SELECT T2.number FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 903 AND T1.q3 LIKE '1:54%'",
        "difficulty": "simple"
    },
    {
        "question_id": 344,
        "db_id": "codebase_community",
        "question": "State the detailed content of the comment which was created on 7/19/2010 7:25:47 PM.",
        "evidence": "detailed content of the comment refers to Text; created on 7/19/2010 7:16:14 PM refers to CreationDate = '2010-07-19 19:16:14.0'",
        "SQL": "SELECT Text FROM comments WHERE CreationDate = '2010-07-19 19:16:14.0'",
        "difficulty": "simple"
    },
    {
        "question_id": 345,
        "db_id": "thrombosis_prediction",
        "question": "Among the patients with normal anti-SM, how many of them have the most severe degree of thrombosis?",
        "evidence": "normal anti-SM refers to SM IN('-', '+-'); SM = 'negative' means '-'; SM = '0' means '+-'; SM = '1' means '+'; most severe degree of thrombosis refers to Thrombosis = '1';",
        "SQL": "SELECT COUNT(T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SM IN ('negative','0') AND T1.Thrombosis = 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 346,
        "db_id": "formula_1",
        "question": "What's the reference name of Marina Bay Street Circuit?",
        "evidence": "reference name refers to circuitRef",
        "SQL": "SELECT circuitRef FROM circuits WHERE name = 'Marina Bay Street Circuit'",
        "difficulty": "simple"
    },
    {
        "question_id": 347,
        "db_id": "codebase_community",
        "question": "Which user made a post titled 'Understanding what Dassault iSight is doing?' and how much is the reputation of the user?",
        "evidence": "\"Understanding what Dassault iSight is doing?\" is the Title of post; user refers to DisplayName;",
        "SQL": "SELECT T1.DisplayName, T1.Reputation FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.Title = 'Understanding what Dassault iSight is doing?'",
        "difficulty": "moderate"
    },
    {
        "question_id": 348,
        "db_id": "codebase_community",
        "question": "Which user added a bounty amount of 50 to the post title mentioning variance?",
        "evidence": "\"bounty amount of 50 refers to BountyAmount = 50; user refers to DisplayName",
        "SQL": "SELECT T3.DisplayName, T1.Title FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId INNER JOIN users AS T3 ON T3.Id = T2.UserId WHERE T2.BountyAmount = 50 AND T1.Title LIKE '%variance%'",
        "difficulty": "challenging"
    },
    {
        "question_id": 349,
        "db_id": "card_games",
        "question": "Among the sets in the block \"Ice Age\", how many of them have an Italian translation?",
        "evidence": "sets in the block \"Ice Age\" refers to block = 'Ice Age'; Italian translation refers to language = 'Italian'",
        "SQL": "SELECT COUNT(DISTINCT T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.block = 'Ice Age' AND T2.language = 'Italian' AND T2.translation IS NOT NULL",
        "difficulty": "moderate"
    }
]